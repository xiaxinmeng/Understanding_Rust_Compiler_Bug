{"sha": "e0808638812e20b756052ed8a816528db69b5a08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4MDg2Mzg4MTJlMjBiNzU2MDUyZWQ4YTgxNjUyOGRiNjliNWEwOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-03-09T13:54:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-03-09T13:54:28Z"}, "message": "re PR ipa/65270 (issues with merging memory accesses from different code paths)\n\n2015-03-09  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/65270\n\t* tree-core.h (enum operand_equal_flag): Add OEP_ADDRESS_OF.\n\t* fold-const.c (operand_equal_p): When recursing for ADDR_EXPRs\n\toperand set OEP_ADDRESS_OF.  Clear it when recursing to non-bases\n\tof that.  When comparing dereferences compare alignment.\n\tWhen comparing MEM_REFs or TARGET_MEM_REFs compare dependence info.\n\n\t* gcc.dg/torture/pr65270-1.c: New testcase.\n\t* gcc.dg/torture/pr65270-2.c: Likewise.\n\nFrom-SVN: r221281", "tree": {"sha": "08c44e058e8dabba9e5cd87ddd2f888817f638da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08c44e058e8dabba9e5cd87ddd2f888817f638da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0808638812e20b756052ed8a816528db69b5a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0808638812e20b756052ed8a816528db69b5a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0808638812e20b756052ed8a816528db69b5a08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0808638812e20b756052ed8a816528db69b5a08/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2e0c00b8c88ccc32d121839b18963a3657512aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e0c00b8c88ccc32d121839b18963a3657512aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e0c00b8c88ccc32d121839b18963a3657512aa"}], "stats": {"total": 111, "additions": 100, "deletions": 11}, "files": [{"sha": "19efa1eca4e223307297c1236ab63cac0f6b45a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0808638812e20b756052ed8a816528db69b5a08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0808638812e20b756052ed8a816528db69b5a08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0808638812e20b756052ed8a816528db69b5a08", "patch": "@@ -1,3 +1,12 @@\n+2015-03-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/65270\n+\t* tree-core.h (enum operand_equal_flag): Add OEP_ADDRESS_OF.\n+\t* fold-const.c (operand_equal_p): When recursing for ADDR_EXPRs\n+\toperand set OEP_ADDRESS_OF.  Clear it when recursing to non-bases\n+\tof that.  When comparing dereferences compare alignment.\n+\tWhen comparing MEM_REFs or TARGET_MEM_REFs compare dependence info.\n+\n 2015-03-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (check_callers): Check"}, {"sha": "915d6395382312f520f3c8fd5728c402e33cf725", "filename": "gcc/fold-const.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e0808638812e20b756052ed8a816528db69b5a08", "patch": "@@ -2860,7 +2860,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       case ADDR_EXPR:\n \treturn operand_equal_p (TREE_OPERAND (arg0, 0), TREE_OPERAND (arg1, 0),\n \t\t\t\tTREE_CONSTANT (arg0) && TREE_CONSTANT (arg1)\n-\t\t\t\t? OEP_CONSTANT_ADDRESS_OF : 0);\n+\t\t\t\t? OEP_CONSTANT_ADDRESS_OF | OEP_ADDRESS_OF : 0);\n       default:\n \tbreak;\n       }\n@@ -2922,15 +2922,19 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       switch (TREE_CODE (arg0))\n \t{\n \tcase INDIRECT_REF:\n-\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  if (!(flags & OEP_ADDRESS_OF)\n+\t      && (TYPE_ALIGN (TREE_TYPE (arg0))\n+\t\t  != TYPE_ALIGN (TREE_TYPE (arg1))))\n+\t    return 0;\n+\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n \t  return OP_SAME (0);\n \n \tcase REALPART_EXPR:\n \tcase IMAGPART_EXPR:\n \t  return OP_SAME (0);\n \n \tcase TARGET_MEM_REF:\n-\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n \t  /* Require equal extra operands and then fall through to MEM_REF\n \t     handling of the two common operands.  */\n \t  if (!OP_SAME_WITH_NULL (2)\n@@ -2939,7 +2943,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t    return 0;\n \t  /* Fallthru.  */\n \tcase MEM_REF:\n-\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n \t  /* Require equal access sizes, and similar pointer types.\n \t     We can have incomplete types for array references of\n \t     variable-sized arrays from the Fortran frontend\n@@ -2950,9 +2954,16 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t\t       && operand_equal_p (TYPE_SIZE (TREE_TYPE (arg0)),\n \t\t\t\t\t   TYPE_SIZE (TREE_TYPE (arg1)), flags)))\n \t\t  && types_compatible_p (TREE_TYPE (arg0), TREE_TYPE (arg1))\n-\t\t  && alias_ptr_types_compatible_p\n-\t\t       (TREE_TYPE (TREE_OPERAND (arg0, 1)),\n-\t\t\tTREE_TYPE (TREE_OPERAND (arg1, 1)))\n+\t\t  && ((flags & OEP_ADDRESS_OF)\n+\t\t      || (alias_ptr_types_compatible_p\n+\t\t\t    (TREE_TYPE (TREE_OPERAND (arg0, 1)),\n+\t\t\t     TREE_TYPE (TREE_OPERAND (arg1, 1)))\n+\t\t\t  && (MR_DEPENDENCE_CLIQUE (arg0)\n+\t\t\t      == MR_DEPENDENCE_CLIQUE (arg1))\n+\t\t\t  && (MR_DEPENDENCE_BASE (arg0)\n+\t\t\t      == MR_DEPENDENCE_BASE (arg1))\n+\t\t\t  && (TYPE_ALIGN (TREE_TYPE (arg0))\n+\t\t\t      == TYPE_ALIGN (TREE_TYPE (arg1)))))\n \t\t  && OP_SAME (0) && OP_SAME (1));\n \n \tcase ARRAY_REF:\n@@ -2962,7 +2973,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t     may have different types but same value here.  */\n \t  if (!OP_SAME (0))\n \t    return 0;\n-\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n \t  return ((tree_int_cst_equal (TREE_OPERAND (arg0, 1),\n \t\t\t\t       TREE_OPERAND (arg1, 1))\n \t\t   || OP_SAME (1))\n@@ -2975,13 +2986,13 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t  if (!OP_SAME_WITH_NULL (0)\n \t      || !OP_SAME (1))\n \t    return 0;\n-\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n \t  return OP_SAME_WITH_NULL (2);\n \n \tcase BIT_FIELD_REF:\n \t  if (!OP_SAME (0))\n \t    return 0;\n-\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  flags &= ~(OEP_CONSTANT_ADDRESS_OF|OEP_ADDRESS_OF);\n \t  return OP_SAME (1) && OP_SAME (2);\n \n \tdefault:\n@@ -2992,6 +3003,10 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       switch (TREE_CODE (arg0))\n \t{\n \tcase ADDR_EXPR:\n+\t  return operand_equal_p (TREE_OPERAND (arg0, 0),\n+\t\t\t\t  TREE_OPERAND (arg1, 0),\n+\t\t\t\t  flags | OEP_ADDRESS_OF);\n+\n \tcase TRUTH_NOT_EXPR:\n \t  return OP_SAME (0);\n "}, {"sha": "a17c73f8f79abb9749d5549f5072486c59a41467", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0808638812e20b756052ed8a816528db69b5a08", "patch": "@@ -1,3 +1,9 @@\n+2015-03-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/65270\n+\t* gcc.dg/torture/pr65270-1.c: New testcase.\n+\t* gcc.dg/torture/pr65270-2.c: Likewise. \n+\n 2015-03-09  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR tree-optimization/63743"}, {"sha": "ae6dc3bf8ed35be32e2c9b0e1332666c327641d2", "filename": "gcc/testsuite/gcc.dg/torture/pr65270-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65270-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65270-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65270-1.c?ref=e0808638812e20b756052ed8a816528db69b5a08", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+\n+struct a \n+{\n+  int a[100];\n+};\n+typedef struct a misaligned_t __attribute__ ((aligned (8)));\n+typedef struct a aligned_t __attribute__ ((aligned (32)));\n+\n+__attribute__ ((used))\n+__attribute__ ((noinline))\n+void\n+t(void *a, int misaligned, aligned_t *d)\n+{\n+  int i,v;\n+  for (i=0;i<100;i++)\n+    {\n+      if (misaligned)\n+\tv=((misaligned_t *)a)->a[i];\n+      else\n+\tv=((aligned_t *)a)->a[i];\n+      d->a[i]+=v;\n+    }\n+}\n+struct b {int v; misaligned_t m;aligned_t aa;} b;\n+aligned_t d;\n+int\n+main()\n+{\n+  t(&b.m, 1, &d);\n+  return 0;\n+}"}, {"sha": "d5b8f1ce23636419cc0d97d2b016e77032d83f20", "filename": "gcc/testsuite/gcc.dg/torture/pr65270-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65270-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65270-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr65270-2.c?ref=e0808638812e20b756052ed8a816528db69b5a08", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+\n+struct a \n+{\n+  int a[100];\n+};\n+typedef struct a misaligned_t __attribute__ ((aligned (8)));\n+typedef struct a aligned_t __attribute__ ((aligned (32)));\n+\n+__attribute__ ((used))\n+__attribute__ ((noinline))\n+void\n+t(void *a, int misaligned, aligned_t *d)\n+{\n+  int i,v;\n+  for (i=0;i<100;i++)\n+    d->a[i]+=!misaligned? ((aligned_t *)a)->a[i] : ((misaligned_t *)a)->a[i];\n+}\n+struct b {int v; misaligned_t m;aligned_t aa;} b;\n+aligned_t d;\n+int\n+main()\n+{\n+  t(&b.m, 1, &d);\n+  return 0;\n+}"}, {"sha": "ad1bb231ebef06a05fa2099bd627ca1678508e7d", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0808638812e20b756052ed8a816528db69b5a08/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=e0808638812e20b756052ed8a816528db69b5a08", "patch": "@@ -700,7 +700,8 @@ enum size_type_kind {\n enum operand_equal_flag {\n   OEP_ONLY_CONST = 1,\n   OEP_PURE_SAME = 2,\n-  OEP_CONSTANT_ADDRESS_OF = 4\n+  OEP_CONSTANT_ADDRESS_OF = 4,\n+  OEP_ADDRESS_OF = 8\n };\n \n /* Enum and arrays used for tree allocation stats."}]}