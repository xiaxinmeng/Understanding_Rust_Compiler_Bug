{"sha": "b680b9049737198d010e49cf434704c6a6ed2b3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY4MGI5MDQ5NzM3MTk4ZDAxMGU0OWNmNDM0NzA0YzZhNmVkMmIzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-03T08:03:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-03T08:03:15Z"}, "message": "rs6000: Avoid -fpatchable-function-entry* regressions on powerpc64 be [PR98125]\n\nThe SECTION_LINK_ORDER changes broke powerpc64-linux ELFv1.  Seems\nthat the assembler/linker relies on the symbol mentioned for the\n\"awo\" section to be in the same section as the symbols mentioned in\nthe relocations in that section (i.e. labels for the patchable area\nin this case).  That is the case for most targets, including powerpc-linux\n32-bit or powerpc64 ELFv2 (that one has -fpatchable-function-entry*\nsupport broken for other reasons and it doesn't seem to be a regression).\nBut it doesn't work on powerpc64-linux ELFv1.\nWe emit:\n        .section        \".opd\",\"aw\"\n        .align 3\n_Z3foov:\n        .quad   .L._Z3foov,.TOC.@tocbase,0\n        .previous\n        .type   _Z3foov, @function\n.L._Z3foov:\n        .section        __patchable_function_entries,\"awo\",@progbits,_Z3foov\n        .align 3\n        .8byte  .LPFE1\n        .section        .text._Z3foov,\"axG\",@progbits,_Z3foov,comdat\n.LPFE1:\n        nop\n.LFB0:\n        .cfi_startproc\nand because _Z3foov is in the .opd section rather than the function text\nsection, it doesn't work.\n\nI'm afraid I don't know what exactly should be done, whether e.g.\nit could use\n        .section        __patchable_function_entries,\"awo\",@progbits,.L._Z3foov\ninstead, or whether the linker should be changed to handle it as is, or\nsomething else.\n\nBut because we have a P1 regression that didn't see useful progress over the\n4 months since it has been filed and we don't really have much time, below\nis an attempt to do a targetted reversion of H.J's patch, basically act as\nif HAVE_GAS_SECTION_LINK_ORDER is never true for powerpc64-linux ELFv1,\nbut for 32-bit or 64-bit ELFv2 keep working as is.\nThis would give us time to resolve it for GCC 12 properly.\n\n2021-04-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR testsuite/98125\n\t* targhooks.h (default_print_patchable_function_entry_1): Declare.\n\t* targhooks.c (default_print_patchable_function_entry_1): New function,\n\tcopied from default_print_patchable_function_entry with an added flags\n\targument.\n\t(default_print_patchable_function_entry): Rewritten into a small\n\twrapper around default_print_patchable_function_entry_1.\n\t* config/rs6000/rs6000.c (TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY):\n\tRedefine.\n\t(rs6000_print_patchable_function_entry): New function.\n\n\t* g++.dg/pr93195a.C: Skip on powerpc*-*-* 64-bit.", "tree": {"sha": "cbe038c349ac05a21ff64aee9ec0d9eff87b5e86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbe038c349ac05a21ff64aee9ec0d9eff87b5e86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b680b9049737198d010e49cf434704c6a6ed2b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b680b9049737198d010e49cf434704c6a6ed2b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b680b9049737198d010e49cf434704c6a6ed2b3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b680b9049737198d010e49cf434704c6a6ed2b3f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04771106cda8dca2c8b975fd4648933679455b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04771106cda8dca2c8b975fd4648933679455b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04771106cda8dca2c8b975fd4648933679455b8f"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "35f5c332c41ca3d74695281ced1d63c6de9fe0b5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b680b9049737198d010e49cf434704c6a6ed2b3f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b680b9049737198d010e49cf434704c6a6ed2b3f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b680b9049737198d010e49cf434704c6a6ed2b3f", "patch": "@@ -1341,6 +1341,10 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #define TARGET_ASM_ASSEMBLE_VISIBILITY rs6000_assemble_visibility\n #endif\n \n+#undef TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY\n+#define TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY \\\n+  rs6000_print_patchable_function_entry\n+\n #undef TARGET_SET_UP_BY_PROLOGUE\n #define TARGET_SET_UP_BY_PROLOGUE rs6000_set_up_by_prologue\n \n@@ -14695,6 +14699,30 @@ rs6000_assemble_visibility (tree decl, int vis)\n }\n #endif\n \f\n+/* Write PATCH_AREA_SIZE NOPs into the asm outfile FILE around a function\n+   entry.  If RECORD_P is true and the target supports named sections,\n+   the location of the NOPs will be recorded in a special object section\n+   called \"__patchable_function_entries\".  This routine may be called\n+   twice per function to put NOPs before and after the function\n+   entry.  */\n+\n+void\n+rs6000_print_patchable_function_entry (FILE *file,\n+\t\t\t\t       unsigned HOST_WIDE_INT patch_area_size,\n+\t\t\t\t       bool record_p)\n+{\n+  unsigned int flags = SECTION_WRITE | SECTION_RELRO;\n+  /* When .opd section is emitted, the function symbol\n+     default_print_patchable_function_entry_1 is emitted into the .opd section\n+     while the patchable area is emitted into the function section.\n+     Don't use SECTION_LINK_ORDER in that case.  */\n+  if (!(TARGET_64BIT && DEFAULT_ABI != ABI_ELFv2)\n+      && HAVE_GAS_SECTION_LINK_ORDER)\n+    flags |= SECTION_LINK_ORDER;\n+  default_print_patchable_function_entry_1 (file, patch_area_size, record_p,\n+\t\t\t\t\t    flags);\n+}\n+\f\n enum rtx_code\n rs6000_reverse_condition (machine_mode mode, enum rtx_code code)\n {"}, {"sha": "952fad422ebdecf1ba90d47ce64691ebab40ec36", "filename": "gcc/targhooks.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b680b9049737198d010e49cf434704c6a6ed2b3f/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b680b9049737198d010e49cf434704c6a6ed2b3f/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=b680b9049737198d010e49cf434704c6a6ed2b3f", "patch": "@@ -1832,17 +1832,15 @@ default_compare_by_pieces_branch_ratio (machine_mode)\n   return 1;\n }\n \n-/* Write PATCH_AREA_SIZE NOPs into the asm outfile FILE around a function\n-   entry.  If RECORD_P is true and the target supports named sections,\n-   the location of the NOPs will be recorded in a special object section\n-   called \"__patchable_function_entries\".  This routine may be called\n-   twice per function to put NOPs before and after the function\n-   entry.  */\n+/* Helper for default_print_patchable_function_entry and other\n+   print_patchable_function_entry hook implementations.  */\n \n void\n-default_print_patchable_function_entry (FILE *file,\n-\t\t\t\t\tunsigned HOST_WIDE_INT patch_area_size,\n-\t\t\t\t\tbool record_p)\n+default_print_patchable_function_entry_1 (FILE *file,\n+\t\t\t\t\t  unsigned HOST_WIDE_INT\n+\t\t\t\t\t  patch_area_size,\n+\t\t\t\t\t  bool record_p,\n+\t\t\t\t\t  unsigned int flags)\n {\n   const char *nop_templ = 0;\n   int code_num;\n@@ -1864,9 +1862,6 @@ default_print_patchable_function_entry (FILE *file,\n       patch_area_number++;\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LPFE\", patch_area_number);\n \n-      unsigned int flags = SECTION_WRITE | SECTION_RELRO;\n-      if (HAVE_GAS_SECTION_LINK_ORDER)\n-\tflags |= SECTION_LINK_ORDER;\n       switch_to_section (get_section (\"__patchable_function_entries\",\n \t\t\t\t      flags, current_function_decl));\n       assemble_align (POINTER_SIZE);\n@@ -1883,6 +1878,25 @@ default_print_patchable_function_entry (FILE *file,\n     output_asm_insn (nop_templ, NULL);\n }\n \n+/* Write PATCH_AREA_SIZE NOPs into the asm outfile FILE around a function\n+   entry.  If RECORD_P is true and the target supports named sections,\n+   the location of the NOPs will be recorded in a special object section\n+   called \"__patchable_function_entries\".  This routine may be called\n+   twice per function to put NOPs before and after the function\n+   entry.  */\n+\n+void\n+default_print_patchable_function_entry (FILE *file,\n+\t\t\t\t\tunsigned HOST_WIDE_INT patch_area_size,\n+\t\t\t\t\tbool record_p)\n+{\n+  unsigned int flags = SECTION_WRITE | SECTION_RELRO;\n+  if (HAVE_GAS_SECTION_LINK_ORDER)\n+    flags |= SECTION_LINK_ORDER;\n+  default_print_patchable_function_entry_1 (file, patch_area_size, record_p,\n+\t\t\t\t\t    flags);\n+}\n+\n bool\n default_profile_before_prologue (void)\n {"}, {"sha": "9928d064abd5e3726bd3bce1ef5340031b427e84", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b680b9049737198d010e49cf434704c6a6ed2b3f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b680b9049737198d010e49cf434704c6a6ed2b3f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=b680b9049737198d010e49cf434704c6a6ed2b3f", "patch": "@@ -230,6 +230,9 @@ extern bool default_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t    bool);\n extern int default_compare_by_pieces_branch_ratio (machine_mode);\n \n+extern void default_print_patchable_function_entry_1 (FILE *,\n+\t\t\t\t\t\t      unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t      bool, unsigned int);\n extern void default_print_patchable_function_entry (FILE *,\n \t\t\t\t\t\t    unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t    bool);"}, {"sha": "b14f1b3e34189b06c0472489ee5e63a637fcfae4", "filename": "gcc/testsuite/g++.dg/pr93195a.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b680b9049737198d010e49cf434704c6a6ed2b3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93195a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b680b9049737198d010e49cf434704c6a6ed2b3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93195a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93195a.C?ref=b680b9049737198d010e49cf434704c6a6ed2b3f", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do link { target { ! { nvptx*-*-* visium-*-* } } } } */\n+/* { dg-skip-if \"not supported\" { { powerpc*-*-* } && lp64 } } */\n // { dg-require-effective-target o_flag_in_section }\n /* { dg-options \"-O0 -fpatchable-function-entry=1\" } */\n /* { dg-additional-options \"-fno-pie\" { target sparc*-*-* } } */"}]}