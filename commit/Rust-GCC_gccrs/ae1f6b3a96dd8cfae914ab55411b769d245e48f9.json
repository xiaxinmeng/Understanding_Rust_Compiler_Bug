{"sha": "ae1f6b3a96dd8cfae914ab55411b769d245e48f9", "node_id": "C_kwDOANBUbNoAKGFlMWY2YjNhOTZkZDhjZmFlOTE0YWI1NTQxMWI3NjlkMjQ1ZTQ4Zjk", "commit": {"author": {"name": "Jakub Dupak", "email": "dev@jakubdupak.com", "date": "2022-11-07T16:09:33Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:47Z"}, "message": "gccrs: ast: Dump bare function type\n\n+ Return FunctionQualifiers as ref to work in ast dump\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n\t* ast/rust-ast-dump.h: Add missing getter declaration.\n\t* ast/rust-ast-full-test.cc (BareFunctionType::as_string): Fix bare function\n\tstring representation.\n\t* ast/rust-type.h (class BareFunctionType): Declare said getter.\n\nSigned-off-by: Jakub Dupak <dev@jakubdupak.com>", "tree": {"sha": "643004bd2b539eab2ee235e3906bb8bad23bc128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/643004bd2b539eab2ee235e3906bb8bad23bc128"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae1f6b3a96dd8cfae914ab55411b769d245e48f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae1f6b3a96dd8cfae914ab55411b769d245e48f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae1f6b3a96dd8cfae914ab55411b769d245e48f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/comments", "author": {"login": "jdupak", "id": 22683640, "node_id": "MDQ6VXNlcjIyNjgzNjQw", "avatar_url": "https://avatars.githubusercontent.com/u/22683640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdupak", "html_url": "https://github.com/jdupak", "followers_url": "https://api.github.com/users/jdupak/followers", "following_url": "https://api.github.com/users/jdupak/following{/other_user}", "gists_url": "https://api.github.com/users/jdupak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdupak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdupak/subscriptions", "organizations_url": "https://api.github.com/users/jdupak/orgs", "repos_url": "https://api.github.com/users/jdupak/repos", "events_url": "https://api.github.com/users/jdupak/events{/privacy}", "received_events_url": "https://api.github.com/users/jdupak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0166fa1b88e2c28a61f8755c0cb192e7fd0b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee0166fa1b88e2c28a61f8755c0cb192e7fd0b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee0166fa1b88e2c28a61f8755c0cb192e7fd0b05"}], "stats": {"total": 120, "additions": 111, "deletions": 9}, "files": [{"sha": "5dae38ccef9482234f1ea964d5605ad9c059ceaf", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=ae1f6b3a96dd8cfae914ab55411b769d245e48f9", "patch": "@@ -249,6 +249,56 @@ Dump::visit (std::vector<LifetimeParam> &for_lifetimes)\n   stream << \"> \";\n }\n \n+void\n+Dump::visit (FunctionQualifiers &qualifiers)\n+{\n+  // Syntax:\n+  //    `const`? `async`? `unsafe`? (`extern` Abi?)?\n+  //    unsafe? (extern Abi?)?\n+\n+  switch (qualifiers.get_const_status ())\n+    {\n+    case NONE:\n+      break;\n+    case CONST_FN:\n+      stream << \"const \";\n+      break;\n+    case ASYNC_FN:\n+      stream << \"async \";\n+      break;\n+    }\n+\n+  if (qualifiers.is_unsafe ())\n+    stream << \"unsafe \";\n+  if (qualifiers.is_extern ())\n+    {\n+      stream << \"extern \";\n+      if (qualifiers.has_abi ())\n+\tstream << \"\\\"\" << qualifiers.get_extern_abi () << \"\\\" \";\n+    }\n+} // namespace AST\n+\n+void\n+Dump::visit (MaybeNamedParam &param)\n+{\n+  // Syntax:\n+  //     OuterAttribute* ( ( IDENTIFIER | _ ) : )? Type\n+\n+  visit_items_joined_by_separator (param.get_outer_attrs (), \" \");\n+  switch (param.get_param_kind ())\n+    {\n+    case MaybeNamedParam::UNNAMED:\n+      break;\n+    case MaybeNamedParam::IDENTIFIER:\n+      stream << \" \" << param.get_name () << \": \";\n+      break;\n+    case MaybeNamedParam::WILDCARD:\n+      stream << \" _: \";\n+      break;\n+    }\n+  visit (param.get_type ());\n+}\n+\n void\n Dump::visit (Token &tok)\n {\n@@ -1668,8 +1718,48 @@ Dump::visit (InferredType &)\n }\n \n void\n-Dump::visit (BareFunctionType &)\n-{}\n+Dump::visit (BareFunctionType &type)\n+{\n+  // Syntax:\n+  //    ForLifetimes? FunctionTypeQualifiers fn\n+  //      ( FunctionParametersMaybeNamedVariadic? ) BareFunctionReturnType?\n+  //\n+  //    BareFunctionReturnType:\n+  //      -> TypeNoBounds\n+  //\n+  //    FunctionParametersMaybeNamedVariadic :\n+  //      MaybeNamedFunctionParameters | MaybeNamedFunctionParametersVariadic\n+  //\n+  //    MaybeNamedFunctionParameters :\n+  //      MaybeNamedParam ( , MaybeNamedParam )* ,?\n+  //\n+  //    MaybeNamedFunctionParametersVariadic :\n+  //      ( MaybeNamedParam , )* MaybeNamedParam , OuterAttribute* ...\n+\n+  if (type.has_for_lifetimes ())\n+    visit (type.get_for_lifetimes ());\n+\n+  visit (type.get_function_qualifiers ());\n+\n+  stream << \"fn (\";\n+\n+  visit_items_joined_by_separator (type.get_function_params (), \", \");\n+\n+  if (type.is_variadic ())\n+    {\n+      stream << \", \";\n+      visit_items_joined_by_separator (type.get_variadic_attr (), \" \");\n+      stream << \"...\";\n+    }\n+\n+  stream << ')';\n+\n+  if (type.has_return_type ())\n+    {\n+      stream << \" -> \";\n+      visit (type.get_return_type ());\n+    }\n+}\n \n } // namespace AST\n } // namespace Rust"}, {"sha": "6c2f13c8c01fa801abbbdecbddf50df0bc78184a", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=ae1f6b3a96dd8cfae914ab55411b769d245e48f9", "patch": "@@ -137,6 +137,8 @@ class Dump : public ASTVisitor\n   void visit (MacroRule &rule);\n   void visit (WhereClause &rule);\n   void visit (std::vector<LifetimeParam> &for_lifetimes);\n+  void visit (FunctionQualifiers &qualifiers);\n+  void visit (MaybeNamedParam &param);\n \n   // rust-ast.h\n   void visit (Token &tok);"}, {"sha": "4f593dcbd495fbaedcbeb43448b0a8683cf62355", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=ae1f6b3a96dd8cfae914ab55411b769d245e48f9", "patch": "@@ -3071,7 +3071,7 @@ BareFunctionType::as_string () const\n     }\n \n   str += \"\\n Is variadic: \";\n-  if (is_variadic)\n+  if (_is_variadic)\n     str += \"true\";\n   else\n     str += \"false\";"}, {"sha": "efe59bd6f79414fb9cc8449f0a83f9bd744e5b26", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae1f6b3a96dd8cfae914ab55411b769d245e48f9/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=ae1f6b3a96dd8cfae914ab55411b769d245e48f9", "patch": "@@ -835,7 +835,7 @@ struct MaybeNamedParam\n };\n \n /* A function pointer type - can be created via coercion from function items and\n- * non- capturing closures. */\n+ * non-capturing closures. */\n class BareFunctionType : public TypeNoBounds\n {\n   // bool has_for_lifetimes;\n@@ -844,7 +844,7 @@ class BareFunctionType : public TypeNoBounds\n \n   FunctionQualifiers function_qualifiers;\n   std::vector<MaybeNamedParam> params;\n-  bool is_variadic;\n+  bool _is_variadic;\n   std::vector<Attribute> variadic_attrs;\n \n   // bool has_return_type;\n@@ -860,14 +860,24 @@ class BareFunctionType : public TypeNoBounds\n   // Whether the function has ForLifetimes.\n   bool has_for_lifetimes () const { return !for_lifetimes.empty (); }\n \n+  std::vector<LifetimeParam> &get_for_lifetimes () { return for_lifetimes; }\n+\n+  bool is_variadic () const { return _is_variadic; }\n+\n+  std::vector<Attribute> &get_variadic_attr () { return variadic_attrs; };\n+  const std::vector<Attribute> &get_variadic_attr () const\n+  {\n+    return variadic_attrs;\n+  };\n+\n   BareFunctionType (std::vector<LifetimeParam> lifetime_params,\n \t\t    FunctionQualifiers qualifiers,\n \t\t    std::vector<MaybeNamedParam> named_params, bool is_variadic,\n \t\t    std::vector<Attribute> variadic_attrs,\n \t\t    std::unique_ptr<TypeNoBounds> type, Location locus)\n     : for_lifetimes (std::move (lifetime_params)),\n       function_qualifiers (std::move (qualifiers)),\n-      params (std::move (named_params)), is_variadic (is_variadic),\n+      params (std::move (named_params)), _is_variadic (is_variadic),\n       variadic_attrs (std::move (variadic_attrs)),\n       return_type (std::move (type)), locus (locus)\n   {\n@@ -879,7 +889,7 @@ class BareFunctionType : public TypeNoBounds\n   BareFunctionType (BareFunctionType const &other)\n     : for_lifetimes (other.for_lifetimes),\n       function_qualifiers (other.function_qualifiers), params (other.params),\n-      is_variadic (other.is_variadic), variadic_attrs (other.variadic_attrs),\n+      _is_variadic (other._is_variadic), variadic_attrs (other.variadic_attrs),\n       locus (other.locus)\n   {\n     // guard to prevent null dereference\n@@ -893,7 +903,7 @@ class BareFunctionType : public TypeNoBounds\n     for_lifetimes = other.for_lifetimes;\n     function_qualifiers = other.function_qualifiers;\n     params = other.params;\n-    is_variadic = other.is_variadic;\n+    _is_variadic = other._is_variadic;\n     variadic_attrs = other.variadic_attrs;\n     locus = other.locus;\n \n@@ -930,7 +940,7 @@ class BareFunctionType : public TypeNoBounds\n     return return_type;\n   }\n \n-  FunctionQualifiers get_function_qualifiers () { return function_qualifiers; }\n+  FunctionQualifiers &get_function_qualifiers () { return function_qualifiers; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}]}