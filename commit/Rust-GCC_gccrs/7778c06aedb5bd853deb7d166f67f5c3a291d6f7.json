{"sha": "7778c06aedb5bd853deb7d166f67f5c3a291d6f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3OGMwNmFlZGI1YmQ4NTNkZWI3ZDE2NmY2N2Y1YzNhMjkxZDZmNw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2006-02-03T18:19:58Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2006-02-03T18:19:58Z"}, "message": "pr25990.c: Replace with pre-processed version.\n\n\n\t* gcc.dg/gomp/pr25990.c: Replace with pre-processed version.\n\nFrom-SVN: r110550", "tree": {"sha": "93008b0dfbaf17777edfe02b5c96c4a8f2c30365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93008b0dfbaf17777edfe02b5c96c4a8f2c30365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7778c06aedb5bd853deb7d166f67f5c3a291d6f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7778c06aedb5bd853deb7d166f67f5c3a291d6f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7778c06aedb5bd853deb7d166f67f5c3a291d6f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7778c06aedb5bd853deb7d166f67f5c3a291d6f7/comments", "author": null, "committer": null, "parents": [{"sha": "82d6b0182ace61b335e1bf81ceb600b4efab4a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d6b0182ace61b335e1bf81ceb600b4efab4a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d6b0182ace61b335e1bf81ceb600b4efab4a74"}], "stats": {"total": 179, "additions": 100, "deletions": 79}, "files": [{"sha": "3852960afa381a815c4178c3c3f447f58b574922", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7778c06aedb5bd853deb7d166f67f5c3a291d6f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7778c06aedb5bd853deb7d166f67f5c3a291d6f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7778c06aedb5bd853deb7d166f67f5c3a291d6f7", "patch": "@@ -1,3 +1,7 @@\n+2006-02-03  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* gcc.dg/gomp/pr25990.c: Replace with pre-processed version.\n+\n 2006-02-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/template/using12.C: New test."}, {"sha": "ff97dabe277d70cedebf5c70299c6e8d01752a6f", "filename": "gcc/testsuite/gcc.dg/gomp/pr25990.c", "status": "modified", "additions": 96, "deletions": 79, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7778c06aedb5bd853deb7d166f67f5c3a291d6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr25990.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7778c06aedb5bd853deb7d166f67f5c3a291d6f7/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr25990.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr25990.c?ref=7778c06aedb5bd853deb7d166f67f5c3a291d6f7", "patch": "@@ -1,21 +1,38 @@\n /* { dg-do compile } */\n /* { dg-options \"-fopenmp -O2 -std=c99\" } */\n \n-#include <stdio.h>\n-#include <omp.h>\n-#include <math.h>\n-#include <string.h>\n-#include <stdlib.h>\n-#include <complex.h>\n+typedef unsigned int size_t;\n \n-int main(int argc , char * argv[]) {\n+typedef struct {\n+  int _flags;\n+} FILE;\n \n+extern FILE *fopen (__const char *__restrict __filename,\n+      __const char *__restrict __modes);\n+extern size_t fread (void *__restrict __ptr, size_t __size,\n+       size_t __n, FILE *__restrict __stream) ;\n+extern int fclose (FILE *__stream);\n+extern size_t fwrite (__const void *__restrict __ptr, size_t __size,\n+        size_t __n, FILE *__restrict __s) ;\n \n+extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;\n+\n+extern size_t strlen (__const char *__s)\n+     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));\n+extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)\n+     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));\n+\n+extern int __attribute__ ((__nothrow__)) atoi (__const char *__nptr);\n+\n+extern float cabsf (float _Complex __z) __attribute__ ((__nothrow__)); extern float __cabsf (float _Complex __z) __attribute__ ((__nothrow__));\n+extern float sqrtf (float __x) __attribute__ ((__nothrow__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__));\n+\n+int main(int argc , char * argv[])\n+{\n   int AA, BB, CC;\n   AA = 99;\n   BB = 99;\n   CC = (int)atoi(argv[3]);\n-\n   int m,n,s;\n   int DD,EE,num_s;\n \n@@ -59,14 +76,14 @@ int main(int argc , char * argv[]) {\n   float h = 0.1;\n   float FF = 10;\n \n-  if ((__extension__ (__builtin_constant_p (5) && ((__builtin_constant_p (argv[6]) && strlen (argv[6]) < ((size_t) (5))) || (__builtin_constant_p (\"plane\") && strlen (\"plane\") < ((size_t) (5)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (argv[6]) && __builtin_constant_p (\"plane\") && (__s1_len = strlen (argv[6]), __s2_len = strlen (\"plane\"), (!((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (argv[6], \"plane\") : (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) && (__s1_len = strlen (argv[6]), __s1_len < 4) ? (__builtin_constant_p (\"plane\") && ((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) ? __builtin_strcmp (argv[6], \"plane\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"plane\"); register int __result = (((__const unsigned char *) (__const char *) (argv[6]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (argv[6]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"plane\") && ((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) && (__s2_len = strlen (\"plane\"), __s2_len < 4) ? (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) ? __builtin_strcmp (argv[6], \"plane\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (argv[6]); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"plane\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"plane\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"plane\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"plane\"))[3]); } } __result; }))) : __builtin_strcmp (argv[6], \"plane\")))); }) : strncmp (argv[6], \"plane\", 5)))==0) {\n+  if ((__extension__ (__builtin_constant_p (5) && ((__builtin_constant_p (argv[6]) && strlen (argv[6]) < ((size_t) (5))) || (__builtin_constant_p (\"plane\") && strlen (\"plane\") < ((size_t) (5)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (argv[6]) && __builtin_constant_p (\"plane\") && (__s1_len = strlen (argv[6]), __s2_len = strlen (\"plane\"), (!((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (argv[6], \"plane\") : (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) && (__s1_len = strlen (argv[6]), __s1_len < 4) ? (__builtin_constant_p (\"plane\") && ((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) ? __builtin_strcmp (argv[6], \"plane\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"plane\"); register int __result = (((__const unsigned char *) (__const char *) (argv[6]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (argv[6]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"plane\") && ((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) && (__s2_len = strlen (\"plane\"), __s2_len < 4) ? (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) ? __builtin_strcmp (argv[6], \"plane\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (argv[6]); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"plane\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"plane\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"plane\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"plane\"))[3]); } } __result; }))) : __builtin_strcmp (argv[6], \"plane\")))); }) : (__extension__ (__builtin_constant_p (5) && ((__builtin_constant_p (argv[6]) && strlen (argv[6]) < ((size_t) (5))) || (__builtin_constant_p (\"plane\") && strlen (\"plane\") < ((size_t) (5)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (argv[6]) && __builtin_constant_p (\"plane\") && (__s1_len = strlen (argv[6]), __s2_len = strlen (\"plane\"), (!((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (argv[6], \"plane\") : (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) && (__s1_len = strlen (argv[6]), __s1_len < 4) ? (__builtin_constant_p (\"plane\") && ((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) ? __builtin_strcmp (argv[6], \"plane\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"plane\"); register int __result = (((__const unsigned char *) (__const char *) (argv[6]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (argv[6]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"plane\") && ((size_t)(const void *)((\"plane\") + 1) - (size_t)(const void *)(\"plane\") == 1) && (__s2_len = strlen (\"plane\"), __s2_len < 4) ? (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) ? __builtin_strcmp (argv[6], \"plane\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (argv[6]); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"plane\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"plane\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"plane\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"plane\"))[3]); } } __result; }))) : __builtin_strcmp (argv[6], \"plane\")))); }) : strncmp (argv[6], \"plane\", 5)))))==0) {\n       m_max = INPUT[ ( ((1)-1) + ( ((1)-1)*4 ))];\n       n_max = INPUT[ ( ((2)-1) + ( ((1)-1)*4 ))];\n       h = INPUT[ ( ((3)-1) + ( ((1)-1)*4 ))];\n       FF = INPUT[ ( ((4)-1) + ( ((1)-1)*4 ))];\n   }\n \n-  if ((__extension__ (__builtin_constant_p (6) && ((__builtin_constant_p (argv[6]) && strlen (argv[6]) < ((size_t) (6))) || (__builtin_constant_p (\"sphere\") && strlen (\"sphere\") < ((size_t) (6)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (argv[6]) && __builtin_constant_p (\"sphere\") && (__s1_len = strlen (argv[6]), __s2_len = strlen (\"sphere\"), (!((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (argv[6], \"sphere\") : (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) && (__s1_len = strlen (argv[6]), __s1_len < 4) ? (__builtin_constant_p (\"sphere\") && ((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) ? __builtin_strcmp (argv[6], \"sphere\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"sphere\"); register int __result = (((__const unsigned char *) (__const char *) (argv[6]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (argv[6]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"sphere\") && ((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) && (__s2_len = strlen (\"sphere\"), __s2_len < 4) ? (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) ? __builtin_strcmp (argv[6], \"sphere\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (argv[6]); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"sphere\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"sphere\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"sphere\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"sphere\"))[3]); } } __result; }))) : __builtin_strcmp (argv[6], \"sphere\")))); }) : strncmp (argv[6], \"sphere\", 6)))==0) {\n+  if ((__extension__ (__builtin_constant_p (6) && ((__builtin_constant_p (argv[6]) && strlen (argv[6]) < ((size_t) (6))) || (__builtin_constant_p (\"sphere\") && strlen (\"sphere\") < ((size_t) (6)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (argv[6]) && __builtin_constant_p (\"sphere\") && (__s1_len = strlen (argv[6]), __s2_len = strlen (\"sphere\"), (!((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (argv[6], \"sphere\") : (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) && (__s1_len = strlen (argv[6]), __s1_len < 4) ? (__builtin_constant_p (\"sphere\") && ((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) ? __builtin_strcmp (argv[6], \"sphere\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"sphere\"); register int __result = (((__const unsigned char *) (__const char *) (argv[6]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (argv[6]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"sphere\") && ((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) && (__s2_len = strlen (\"sphere\"), __s2_len < 4) ? (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) ? __builtin_strcmp (argv[6], \"sphere\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (argv[6]); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"sphere\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"sphere\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"sphere\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"sphere\"))[3]); } } __result; }))) : __builtin_strcmp (argv[6], \"sphere\")))); }) : (__extension__ (__builtin_constant_p (6) && ((__builtin_constant_p (argv[6]) && strlen (argv[6]) < ((size_t) (6))) || (__builtin_constant_p (\"sphere\") && strlen (\"sphere\") < ((size_t) (6)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (argv[6]) && __builtin_constant_p (\"sphere\") && (__s1_len = strlen (argv[6]), __s2_len = strlen (\"sphere\"), (!((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (argv[6], \"sphere\") : (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) && (__s1_len = strlen (argv[6]), __s1_len < 4) ? (__builtin_constant_p (\"sphere\") && ((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) ? __builtin_strcmp (argv[6], \"sphere\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"sphere\"); register int __result = (((__const unsigned char *) (__const char *) (argv[6]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (argv[6]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (argv[6]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"sphere\") && ((size_t)(const void *)((\"sphere\") + 1) - (size_t)(const void *)(\"sphere\") == 1) && (__s2_len = strlen (\"sphere\"), __s2_len < 4) ? (__builtin_constant_p (argv[6]) && ((size_t)(const void *)((argv[6]) + 1) - (size_t)(const void *)(argv[6]) == 1) ? __builtin_strcmp (argv[6], \"sphere\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (argv[6]); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"sphere\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"sphere\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"sphere\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"sphere\"))[3]); } } __result; }))) : __builtin_strcmp (argv[6], \"sphere\")))); }) : strncmp (argv[6], \"sphere\", 6)))))==0) {\n       m_max = 181;\n       n_max = 361;\n       h = INPUT[ ( ((3)-1) + ( ((1)-1)*4 ))];\n@@ -110,16 +127,16 @@ int main(int argc , char * argv[]) {\n \n \n   for ( n = 1 ; n <= 99 ; n++ ) {\n-    for ( m = 1 ; m <= 99 ; m++ ) {\n+      for ( m = 1 ; m <= 99 ; m++ ) {\n \n \n \n \n \n-      X[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n-      Y[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n-      Z[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n-    }\n+\t  X[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n+\t  Y[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n+\t  Z[ ( ((m)-1) + ( ((n)-1)*m_max ))] = FF ;\n+      }\n   }\n   int KK = atoi(argv[8]);\n   int LL = 3 * KK;\n@@ -128,94 +145,94 @@ int main(int argc , char * argv[]) {\n   float * restrict MM;\n   MM = malloc(4 * LL * sizeof(float));\n   for ( n = 1 ; n <= n_max ; n++) {\n-    for ( m = 1 ; m <= m_max ; m++) {\n-      for ( s = 1 ; s <= num_s ; s++) {\n- Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + (((s)-1)*(Ps_slice_stride)) ) ] = 0.0 + 0.0 * (__extension__ 1.0iF);\n+      for ( m = 1 ; m <= m_max ; m++) {\n+\t  for ( s = 1 ; s <= num_s ; s++) {\n+\t      Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + (((s)-1)*(Ps_slice_stride)) ) ] = 0.0 + 0.0 * (__extension__ 1.0iF);\n+\t  }\n       }\n-    }\n   }\n \n \n   int liter ;\n \n #pragma omp parallel for private(m,liter,s)\n   for ( n = 1 ; n <= n_max ; n++) {\n-    for ( m = 1 ; m <= m_max ; m++) {\n-      for ( liter = 1 ; liter <= KK ; liter++ ) {\n- for ( s = 1 ; s <= num_s ; s++) {\n-\n-\n-   int LM_column;\n-   float NN[4];\n-   float OO[4];\n-   float PP[4];\n-   float QQ[4];\n-   float k;\n-   int s_index;\n-   float RR;\n-\n-   s_index = s + (DD -1);\n-   RR = f[ ( (s_index)-1) ];\n-   k = 99.0;\n-\n-   NN[1 -1] = X[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n-   NN[2 -1] = Y[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n-   NN[3 -1] = Z[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n-   NN[4 -1] = 1.0;\n-\n-   LM_column = ((liter -1) * 3) + 1;\n-   OO[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n-   OO[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n-   OO[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n-   OO[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n-\n-   LM_column = ((liter -1) * 3) + 2;\n-   PP[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n-   PP[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n-   PP[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n-   PP[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n-\n-   LM_column = ((liter -1) * 3) + 3;\n-   QQ[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n-   QQ[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n-   QQ[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n-   QQ[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n-\n- }\n+      for ( m = 1 ; m <= m_max ; m++) {\n+\t  for ( liter = 1 ; liter <= KK ; liter++ ) {\n+\t      for ( s = 1 ; s <= num_s ; s++) {\n+\n+\n+\t\t  int LM_column;\n+\t\t  float NN[4];\n+\t\t  float OO[4];\n+\t\t  float PP[4];\n+\t\t  float QQ[4];\n+\t\t  float k;\n+\t\t  int s_index;\n+\t\t  float RR;\n+\n+\t\t  s_index = s + (DD -1);\n+\t\t  RR = f[ ( (s_index)-1) ];\n+\t\t  k = 99.0;\n+\n+\t\t  NN[1 -1] = X[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n+\t\t  NN[2 -1] = Y[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n+\t\t  NN[3 -1] = Z[ ( ((m)-1) + ( ((n)-1)*m_max ))];\n+\t\t  NN[4 -1] = 1.0;\n+\n+\t\t  LM_column = ((liter -1) * 3) + 1;\n+\t\t  OO[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  OO[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  OO[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  OO[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n+\n+\t\t  LM_column = ((liter -1) * 3) + 2;\n+\t\t  PP[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  PP[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  PP[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  PP[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n+\n+\t\t  LM_column = ((liter -1) * 3) + 3;\n+\t\t  QQ[1 -1] = MM[ ( ((1)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  QQ[2 -1] = MM[ ( ((2)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  QQ[3 -1] = MM[ ( ((3)-1) + ( ((LM_column)-1)*4 ))];\n+\t\t  QQ[4 -1] = MM[ ( ((4)-1) + ( ((LM_column)-1)*4 ))];\n+\n+\t      }\n+\t  }\n       }\n-    }\n   }\n \n \n #pragma omp parallel for private(m)\n   for ( n = 1 ; n <= n_max ; n++) {\n-    for ( m = 1 ; m <= m_max ; m++) {\n+      for ( m = 1 ; m <= m_max ; m++) {\n \n \n \n-      int s;\n-      float SSS;\n-      float f1,f2,p1,p2,TT,h,FFF;\n-      SSS = 0.0;\n-      for ( s = 2 ; s <= num_s ; s++) {\n- f1 = f[ ( ((s-1) + (DD - 1))-1) ];\n- f2 = f[ ( ((s) + (DD - 1))-1) ];\n- p1 = cabsf(Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + ((((s-1))-1)*(Ps_slice_stride)) ) ]) ;\n- p2 = cabsf(Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + (((s)-1)*(Ps_slice_stride)) ) ]) ;\n+\t  int s;\n+\t  float SSS;\n+\t  float f1,f2,p1,p2,TT,h,FFF;\n+\t  SSS = 0.0;\n+\t  for ( s = 2 ; s <= num_s ; s++) {\n+\t      f1 = f[ ( ((s-1) + (DD - 1))-1) ];\n+\t      f2 = f[ ( ((s) + (DD - 1))-1) ];\n+\t      p1 = cabsf(Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + ((((s-1))-1)*(Ps_slice_stride)) ) ]) ;\n+\t      p2 = cabsf(Ps[ ( ((m)-1) + (((n)-1)*(m_max)) + (((s)-1)*(Ps_slice_stride)) ) ]) ;\n \n- h = f2 - f1;\n+\t      h = f2 - f1;\n \n- FFF = (f1 + f2) / 2.0;\n+\t      FFF = (f1 + f2) / 2.0;\n \n \n- TT = (1.0 / sqrtf(2.0)) * (((h * p1) + (0.5 * h * (p2 - p1))) * (1.0 / FFF));\n+\t      TT = (1.0 / sqrtf(2.0)) * (((h * p1) + (0.5 * h * (p2 - p1))) * (1.0 / FFF));\n \n- SSS += TT;\n+\t      SSS += TT;\n \n-      }\n+\t  }\n \n-      P[ ( ((m)-1) + ( ((n)-1)*m_max ))] = SSS + ((__extension__ 1.0iF) * 0.0);\n-    }\n+\t  P[ ( ((m)-1) + ( ((n)-1)*m_max ))] = SSS + ((__extension__ 1.0iF) * 0.0);\n+      }\n   }\n \n "}]}