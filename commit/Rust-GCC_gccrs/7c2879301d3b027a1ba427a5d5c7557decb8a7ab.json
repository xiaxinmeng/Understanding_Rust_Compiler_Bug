{"sha": "7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MyODc5MzAxZDNiMDI3YTFiYTQyN2E1ZDVjNzU1N2RlY2I4YTdhYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-06T15:33:51Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-06T15:33:51Z"}, "message": "i386: Use ADD to implement compares with negated operand [PR94913]\n\nUse carry flag from addition to implement GEU/LTU compares\nwith negated operand, so e.g.\n\n\t~x < y\n\ncompiles to:\n\n        addq    %rsi, %rdi\n        setc    %al\n\ninstead of:\n\n        notq    %rdi\n        cmpq    %rsi, %rdi\n        setb    %al\n\n\tPR target/94913\n\t* config/i386/predicates.md (add_comparison_operator): New predicate.\n\t* config/i386/i386.md (compare->add splitter): New splitters.\n\ntestsuite/ChangeLog:\n\n\tPR target/94913\n\t* gcc.target/i386/pr94913-1.c: New test.\n\t* gcc.target/i386/pr94913-2.c: Ditto.", "tree": {"sha": "88de4ce841571a83a2dba3f013b5d79b2768a4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88de4ce841571a83a2dba3f013b5d79b2768a4f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1266778548e20de82983b6446f3cb685068cfb1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1266778548e20de82983b6446f3cb685068cfb1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1266778548e20de82983b6446f3cb685068cfb1e"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "bc27083b7d3903a59fbee4ed1de63018fb1d03c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "patch": "@@ -1,3 +1,9 @@\n+2020-05-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/94913\n+\t* config/i386/predicates.md (add_comparison_operator): New predicate.\n+\t* config/i386/i386.md (compare->add splitter): New splitters.\n+\n 2020-05-06  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (vect_transform_slp_perm_load): Adjust."}, {"sha": "5fe851e0312849aea5ac1aa01e6c1dc9a1e5666e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "patch": "@@ -12324,6 +12324,21 @@\n \f\n ;; Store-flag instructions.\n \n+(define_split\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\")\n+\t(match_operator:QI 1 \"add_comparison_operator\"\n+\t  [(not:SWI (match_operand:SWI 2 \"register_operand\"))\n+\t   (match_operand:SWI 3 \"nonimmediate_operand\")]))]\n+  \"\"\n+  [(parallel\n+     [(set (reg:CCC FLAGS_REG)\n+\t   (compare:CCC\n+\t     (plus:SWI (match_dup 2) (match_dup 3))\n+\t     (match_dup 2)))\n+      (clobber (scratch:SWI))])\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(reg:CCC FLAGS_REG) (const_int 0)]))])\n+\n (define_split\n   [(set (match_operand:QI 0 \"nonimmediate_operand\")\n \t(match_operator:QI 1 \"shr_comparison_operator\"\n@@ -12518,6 +12533,26 @@\n \f\n ;; Basic conditional jump instructions.\n \n+(define_split\n+  [(set (pc)\n+\t(if_then_else\n+\t  (match_operator 1 \"add_comparison_operator\"\n+\t    [(not:SWI (match_operand:SWI 2 \"register_operand\"))\n+\t     (match_operand:SWI 3 \"nonimmediate_operand\")])\n+\t  (label_ref (match_operand 0))\n+\t  (pc)))]\n+  \"\"\n+  [(parallel\n+     [(set (reg:CCC FLAGS_REG)\n+\t   (compare:CCC\n+\t     (plus:SWI (match_dup 2) (match_dup 3))\n+\t     (match_dup 2)))\n+      (clobber (scratch:SWI))])\n+   (set (pc)\n+\t(if_then_else (match_op_dup 1 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_operand 0))\n+\t\t      (pc)))])\n+\n (define_split\n   [(set (pc)\n \t(if_then_else"}, {"sha": "8d8bcb1a765b2c8af22c0a087d2a1faffbd9332c", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "patch": "@@ -1293,6 +1293,9 @@\n (define_predicate \"shr_comparison_operator\"\n   (match_code \"gtu,leu\"))\n \n+(define_predicate \"add_comparison_operator\"\n+  (match_code \"geu,ltu\"))\n+\n ;; Return true if OP is a valid comparison operator in valid mode.\n (define_predicate \"ix86_comparison_operator\"\n   (match_operand 0 \"comparison_operator\")"}, {"sha": "ccdbf989089ae3972ff545d9a16adaf963707243", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "patch": "@@ -1,3 +1,9 @@\n+2020-05-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/94913\n+\t* gcc.target/i386/pr94913-1.c: New test.\n+\t* gcc.target/i386/pr94913-2.c: Ditto.\n+\n 2020-05-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/94963"}, {"sha": "f21032d4522b48903ebb58f36d211c1f21a8eafd", "filename": "gcc/testsuite/gcc.target/i386/pr94913-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-1.c?ref=7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/94913 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+char fooc (unsigned char x, unsigned char y)\n+{\n+  return (unsigned char) ~x < y;\n+}\n+\n+short foos (unsigned short x, unsigned short y)\n+{\n+  return (unsigned short) ~x < y;\n+}\n+\n+long fooi (unsigned long x, unsigned long y)\n+{\n+  return (unsigned long) ~x < y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmp\" } } */\n+/* { dg-final { scan-assembler-times \"add\" 3 } } */"}, {"sha": "22bca2bf27b66b7ee342b6e6518ea75093d4fc1d", "filename": "gcc/testsuite/gcc.target/i386/pr94913-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2879301d3b027a1ba427a5d5c7557decb8a7ab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94913-2.c?ref=7c2879301d3b027a1ba427a5d5c7557decb8a7ab", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/94913 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void f1 (void);\n+void f2 (void);\n+\n+void fooc (unsigned char x, unsigned char y)\n+{\n+  if ((unsigned char) ~x < y) f1 (); else f2 ();\n+}\n+\n+void foos (unsigned short x, unsigned short y)\n+{\n+  if ((unsigned short) ~x < y) f1 (); else f2 ();\n+}\n+\n+void fooi (unsigned long x, unsigned long y)\n+{\n+  if ((unsigned long) ~x < y) f1 (); else f2 ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmp\" } } */\n+/* { dg-final { scan-assembler-times \"add\" 3 } } */"}]}