{"sha": "f5ad31630d0c4912080793a30092202792ca7c4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhZDMxNjMwZDBjNDkxMjA4MDc5M2EzMDA5MjIwMjc5MmNhN2M0YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-03T00:34:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-03T00:34:40Z"}, "message": "re PR libstdc++/33613 (compilation inconsistency upper_bound vs lower_bound with -D_GLIBCXX_DEBUG)\n\n2007-10-03  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/33613\n\t* include/debug/functions.h (__check_partitioned): Rename to...\n\t(__check_partioned_lower): ... this.\n\t(__check_partioned_upper): Add.\n\t* include/debug/macros.h (__glibcxx_check_partitioned): Rename to...\n\t(__glibcxx_check_partitioned_lower): ... this, adjust.\n\t(__glibcxx_check_partitioned_upper): Add.\n\t* include/debug/debug.h (__glibcxx_requires_partitioned): Rename to...\n\t(__glibcxx_requires_partitioned_lower): ... this, adjust.\n\t(__glibcxx_requires_partitioned_upper): Add.\n\t* include/bits/stl_algo.h (lower_bound, upper_bound, equal_range,\n\tbinary search): Use the above.\n\t* testsuite/25_algorithms/lower_bound/33613.cc: New.\n\t* testsuite/25_algorithms/upper_bound/33613.cc: Likewise.\n\nFrom-SVN: r128974", "tree": {"sha": "0328271ff471154d9aad238bb651d9d32f41ce10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0328271ff471154d9aad238bb651d9d32f41ce10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5ad31630d0c4912080793a30092202792ca7c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ad31630d0c4912080793a30092202792ca7c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ad31630d0c4912080793a30092202792ca7c4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ad31630d0c4912080793a30092202792ca7c4a/comments", "author": null, "committer": null, "parents": [{"sha": "af2778d32e8d916747229999a1a359a3af764018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2778d32e8d916747229999a1a359a3af764018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2778d32e8d916747229999a1a359a3af764018"}], "stats": {"total": 200, "additions": 176, "deletions": 24}, "files": [{"sha": "275739f667266c87f1a56b03abbb8bbbe0787a95", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f5ad31630d0c4912080793a30092202792ca7c4a", "patch": "@@ -1,3 +1,20 @@\n+2007-10-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/33613\n+\t* include/debug/functions.h (__check_partitioned): Rename to...\n+\t(__check_partioned_lower): ... this.\n+\t(__check_partioned_upper): Add.\n+\t* include/debug/macros.h (__glibcxx_check_partitioned): Rename to...\n+\t(__glibcxx_check_partitioned_lower): ... this, adjust.\n+\t(__glibcxx_check_partitioned_upper): Add.\n+\t* include/debug/debug.h (__glibcxx_requires_partitioned): Rename to...\n+\t(__glibcxx_requires_partitioned_lower): ... this, adjust.\n+\t(__glibcxx_requires_partitioned_upper): Add.\n+\t* include/bits/stl_algo.h (lower_bound, upper_bound, equal_range,\n+\tbinary search): Use the above.\n+\t* testsuite/25_algorithms/lower_bound/33613.cc: New.\n+\t* testsuite/25_algorithms/upper_bound/33613.cc: Likewise.\n+\n 2007-10-03  Kazu Hirata  <kazu@codesourcery.com>\n \n \tRevert:"}, {"sha": "cd14190d740461e656afb16025a0ffc6dda8c121", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=f5ad31630d0c4912080793a30092202792ca7c4a", "patch": "@@ -2186,7 +2186,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n-      __glibcxx_requires_partitioned(__first, __last, __val);\n+      __glibcxx_requires_partitioned_lower(__first, __last, __val);\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2237,7 +2237,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _ValueType, _Tp>)\n-      __glibcxx_requires_partitioned_pred(__first, __last, __val, __comp);\n+      __glibcxx_requires_partitioned_lower_pred(__first, __last,\n+\t\t\t\t\t\t__val, __comp);\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2283,7 +2284,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n-      __glibcxx_requires_partitioned(__first, __last, __val);\n+      __glibcxx_requires_partitioned_upper(__first, __last, __val);\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2334,7 +2335,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _Tp, _ValueType>)\n-      __glibcxx_requires_partitioned_pred(__first, __last, __val, __comp);\n+      __glibcxx_requires_partitioned_upper_pred(__first, __last,\n+\t\t\t\t\t\t__val, __comp);\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2387,7 +2389,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\t\n-      __glibcxx_requires_partitioned(__first, __last, __val);\n+      __glibcxx_requires_partitioned_lower(__first, __last, __val);\n+      __glibcxx_requires_partitioned_upper(__first, __last, __val);      \n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2451,7 +2454,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t  _ValueType, _Tp>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _Tp, _ValueType>)\n-      __glibcxx_requires_partitioned_pred(__first, __last, __val, __comp);\n+      __glibcxx_requires_partitioned_lower_pred(__first, __last,\n+\t\t\t\t\t\t__val, __comp);\n+      __glibcxx_requires_partitioned_upper_pred(__first, __last,\n+\t\t\t\t\t\t__val, __comp);\n \n       _DistanceType __len = std::distance(__first, __last);\n       _DistanceType __half;\n@@ -2503,7 +2509,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n-      __glibcxx_requires_partitioned(__first, __last, __val);\n+      __glibcxx_requires_partitioned_lower(__first, __last, __val);\n+      __glibcxx_requires_partitioned_upper(__first, __last, __val);\n \n       _ForwardIterator __i = std::lower_bound(__first, __last, __val);\n       return __i != __last && !(__val < *__i);\n@@ -2536,7 +2543,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _Tp, _ValueType>)\n-      __glibcxx_requires_partitioned_pred(__first, __last, __val, __comp);\n+      __glibcxx_requires_partitioned_lower_pred(__first, __last,\n+\t\t\t\t\t\t__val, __comp);\n+      __glibcxx_requires_partitioned_upper_pred(__first, __last,\n+\t\t\t\t\t\t__val, __comp);\n \n       _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);\n       return __i != __last && !bool(__comp(__val, *__i));"}, {"sha": "46e4b6bf09e589dc3723065818c828a4a2fc28a4", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=f5ad31630d0c4912080793a30092202792ca7c4a", "patch": "@@ -69,8 +69,10 @@ namespace __gnu_debug\n # define __glibcxx_requires_valid_range(_First,_Last)\n # define __glibcxx_requires_sorted(_First,_Last)\n # define __glibcxx_requires_sorted_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_partitioned(_First,_Last,_Value)\n-# define __glibcxx_requires_partitioned_pred(_First,_Last,_Value,_Pred)\n+# define __glibcxx_requires_partitioned_lower(_First,_Last,_Value)\n+# define __glibcxx_requires_partitioned_upper(_First,_Last,_Value)\n+# define __glibcxx_requires_partitioned_lower_pred(_First,_Last,_Value,_Pred)\n+# define __glibcxx_requires_partitioned_upper_pred(_First,_Last,_Value,_Pred)\n # define __glibcxx_requires_heap(_First,_Last)\n # define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\n # define __glibcxx_requires_nonempty()\n@@ -123,10 +125,14 @@ namespace std\n      __glibcxx_check_sorted(_First,_Last)\n # define __glibcxx_requires_sorted_pred(_First,_Last,_Pred) \\\n      __glibcxx_check_sorted_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_partitioned(_First,_Last,_Value)\t\\\n-     __glibcxx_check_partitioned(_First,_Last,_Value)\n-# define __glibcxx_requires_partitioned_pred(_First,_Last,_Value,_Pred) \\\n-     __glibcxx_check_partitioned_pred(_First,_Last,_Value,_Pred)\n+# define __glibcxx_requires_partitioned_lower(_First,_Last,_Value)\t\\\n+     __glibcxx_check_partitioned_lower(_First,_Last,_Value)\n+# define __glibcxx_requires_partitioned_upper(_First,_Last,_Value)\t\\\n+     __glibcxx_check_partitioned_upper(_First,_Last,_Value)\n+# define __glibcxx_requires_partitioned_lower_pred(_First,_Last,_Value,_Pred) \\\n+     __glibcxx_check_partitioned_lower_pred(_First,_Last,_Value,_Pred)\n+# define __glibcxx_requires_partitioned_upper_pred(_First,_Last,_Value,_Pred) \\\n+     __glibcxx_check_partitioned_upper_pred(_First,_Last,_Value,_Pred)\n # define __glibcxx_requires_heap(_First,_Last) \\\n      __glibcxx_check_heap(_First,_Last)\n # define __glibcxx_requires_heap_pred(_First,_Last,_Pred) \\"}, {"sha": "15c21541b28defbc2fd9359db5328dd2677b55c0", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=f5ad31630d0c4912080793a30092202792ca7c4a", "patch": "@@ -266,8 +266,8 @@ namespace __gnu_debug\n   // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp>\n     inline bool\n-    __check_partitioned(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t\tconst _Tp& __value)\n+    __check_partitioned_lower(_ForwardIterator __first,\n+\t\t\t      _ForwardIterator __last, const _Tp& __value)\n     {\n       while (__first != __last && *__first < __value)\n \t++__first;\n@@ -276,15 +276,41 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n \n+  template<typename _ForwardIterator, typename _Tp>\n+    inline bool\n+    __check_partitioned_upper(_ForwardIterator __first,\n+\t\t\t      _ForwardIterator __last, const _Tp& __value)\n+    {\n+      while (__first != __last && !(__value < *__first))\n+\t++__first;\n+      while (__first != __last && __value < *__first)\n+\t++__first;\n+      return __first == __last;\n+    }\n+\n   // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n     inline bool\n-    __check_partitioned(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t\tconst _Tp& __value, _Pred __pred)\n+    __check_partitioned_lower(_ForwardIterator __first,\n+\t\t\t      _ForwardIterator __last, const _Tp& __value,\n+\t\t\t      _Pred __pred)\n+    {\n+      while (__first != __last && bool(__pred(*__first, __value)))\n+\t++__first;\n+      while (__first != __last && !bool(__pred(*__first, __value)))\n+\t++__first;\n+      return __first == __last;\n+    }\n+\n+  template<typename _ForwardIterator, typename _Tp, typename _Pred>\n+    inline bool\n+    __check_partitioned_upper(_ForwardIterator __first,\n+\t\t\t      _ForwardIterator __last, const _Tp& __value,\n+\t\t\t      _Pred __pred)\n     {\n-      while (__first != __last && __pred(*__first, __value))\n+      while (__first != __last && !bool(__pred(__value, *__first)))\n \t++__first;\n-      while (__first != __last && !__pred(*__first, __value))\n+      while (__first != __last && bool(__pred(__value, *__first)))\n \t++__first;\n       return __first == __last;\n     }"}, {"sha": "4f4a0ccc9bd1aadc15f2ad8a39bc463650bff670", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=f5ad31630d0c4912080793a30092202792ca7c4a", "patch": "@@ -173,20 +173,41 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n \n /** Verify that the iterator range [_First, _Last) is partitioned\n     w.r.t. the value _Value. */\n-#define __glibcxx_check_partitioned(_First,_Last,_Value)\t\t\\\n+#define __glibcxx_check_partitioned_lower(_First,_Last,_Value)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned(_First, _Last,   \\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_lower(_First, _Last, \\\n \t\t\t\t\t\t\t    _Value),\t\\\n \t\t      _M_message(__gnu_debug::__msg_unpartitioned)      \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Value))\n \n+#define __glibcxx_check_partitioned_upper(_First,_Last,_Value)\t\t\\\n+__glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(_First, _Last, \\\n+\t\t\t\t\t\t\t    _Value),\t\\\n+\t\t      _M_message(__gnu_debug::__msg_unpartitioned)      \\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n+\t\t      ._M_string(#_Value))\n+\n+/** Verify that the iterator range [_First, _Last) is partitioned\n+    w.r.t. the value _Value and predicate _Pred. */\n+#define __glibcxx_check_partitioned_lower_pred(_First,_Last,_Value,_Pred) \\\n+__glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_lower(_First, _Last, \\\n+\t\t\t\t\t\t\t _Value, _Pred), \\\n+\t\t      _M_message(__gnu_debug::__msg_unpartitioned_pred) \\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n+\t\t      ._M_string(#_Pred)\t\t\t\t\\\n+                      ._M_string(#_Value))\n+\n /** Verify that the iterator range [_First, _Last) is partitioned\n     w.r.t. the value _Value and predicate _Pred. */\n-#define __glibcxx_check_partitioned_pred(_First,_Last,_Value,_Pred)\t\\\n+#define __glibcxx_check_partitioned_upper_pred(_First,_Last,_Value,_Pred) \\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned(_First, _Last,   \\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(_First, _Last, \\\n \t\t\t\t\t\t\t _Value, _Pred), \\\n \t\t      _M_message(__gnu_debug::__msg_unpartitioned_pred) \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\"}, {"sha": "189464cb8d4b4fb56d2983a01c527b538d705301", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/33613.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F33613.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F33613.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F33613.cc?ref=f5ad31630d0c4912080793a30092202792ca7c4a", "patch": "@@ -0,0 +1,36 @@\n+// 2007-10-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/33613\n+\n+#include <algorithm>\n+\n+struct A { };\n+struct B { };\n+\n+bool ab(A, B);\n+\n+void test01(A* a, B b)\n+{\n+  std::lower_bound(a, a, b, ab);\n+}"}, {"sha": "a178428d3639bc1d39d1fc0595cc0d84f3e388db", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/33613.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F33613.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ad31630d0c4912080793a30092202792ca7c4a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F33613.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F33613.cc?ref=f5ad31630d0c4912080793a30092202792ca7c4a", "patch": "@@ -0,0 +1,36 @@\n+// 2007-10-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/33613\n+\n+#include <algorithm>\n+\n+struct A { };\n+struct B { };\n+\n+bool ba(B, A);\n+\n+void test01(A* a, B b)\n+{\n+  std::upper_bound(a, a, b, ba);\n+}"}]}