{"sha": "d6fd4b8d1160a795f3f20ca3007bea78290c5415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmZDRiOGQxMTYwYTc5NWYzZjIwY2EzMDA3YmVhNzgyOTBjNTQxNQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-09-20T15:45:21Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-09-20T15:45:21Z"}, "message": "tree-ssa-pre.c (compute_antic_aux): Use malloc'd worklist, to avoid generating useless garbage.\n\n2004-09-20  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-pre.c (compute_antic_aux): Use malloc'd worklist, to avoid\n\tgenerating useless garbage.\n\nFrom-SVN: r87760", "tree": {"sha": "5f94bb0f06df3da62ef2f314d4c40a0952939b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f94bb0f06df3da62ef2f314d4c40a0952939b27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6fd4b8d1160a795f3f20ca3007bea78290c5415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6fd4b8d1160a795f3f20ca3007bea78290c5415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6fd4b8d1160a795f3f20ca3007bea78290c5415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6fd4b8d1160a795f3f20ca3007bea78290c5415/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2dda19b3b1e6e53a807ef3446c6fd8a38be93e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2dda19b3b1e6e53a807ef3446c6fd8a38be93e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2dda19b3b1e6e53a807ef3446c6fd8a38be93e5"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "69fd9328f3967b1d0194a7d62d79e2ececb23729", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fd4b8d1160a795f3f20ca3007bea78290c5415/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fd4b8d1160a795f3f20ca3007bea78290c5415/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6fd4b8d1160a795f3f20ca3007bea78290c5415", "patch": "@@ -1,3 +1,8 @@\n+2004-09-20  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-pre.c (compute_antic_aux): Use malloc'd worklist, to avoid \n+\tgenerating useless garbage.\n+\n 2004-09-20  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* builtins.c (fold_builtin): Call the new omonymous"}, {"sha": "2c9b4ee5c5c9774c11440548f3d356c8f82cd5ea", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fd4b8d1160a795f3f20ca3007bea78290c5415/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fd4b8d1160a795f3f20ca3007bea78290c5415/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d6fd4b8d1160a795f3f20ca3007bea78290c5415", "patch": "@@ -510,8 +510,10 @@ bitmap_insert_into_set (bitmap_set_t set, tree expr)\n   \n   gcc_assert (val);\n   if (!is_gimple_min_invariant (val))\n+  {\n     bitmap_set_bit (set->values, VALUE_HANDLE_ID (val));\n-  bitmap_set_bit (set->expressions, SSA_NAME_VERSION (expr));\n+    bitmap_set_bit (set->expressions, SSA_NAME_VERSION (expr));\n+  }\n }\n \n /* Insert EXPR into SET.  */\n@@ -1098,6 +1100,8 @@ clean (value_set_t set)\n     }\n }\n \n+DEF_VEC_MALLOC_P (basic_block);\n+\n /* Compute the ANTIC set for BLOCK.\n \n ANTIC_OUT[BLOCK] = intersection of ANTIC_IN[b] for all succ(BLOCK), if\n@@ -1164,24 +1168,23 @@ compute_antic_aux (basic_block block)\n      them.  */\n   else\n     {\n-      varray_type worklist;\n+      VEC (basic_block) * worklist;\n       edge e;\n       size_t i;\n       basic_block bprime, first;\n \n-      VARRAY_BB_INIT (worklist, 1, \"succ\");\n+      worklist = VEC_alloc (basic_block, 2);\n       e = block->succ;\n       while (e)\n \t{\n-\t  VARRAY_PUSH_BB (worklist, e->dest);\n+\t  VEC_safe_push (basic_block, worklist, e->dest);\n \t  e = e->succ_next;\n \t}\n-      first = VARRAY_BB (worklist, 0);\n+      first = VEC_index (basic_block, worklist, 0);\n       set_copy (ANTIC_OUT, ANTIC_IN (first));\n \n-      for (i = 1; i < VARRAY_ACTIVE_SIZE (worklist); i++)\n+      for (i = 1; VEC_iterate (basic_block, worklist, i, bprime); i++)\n \t{\n-\t  bprime = VARRAY_BB (worklist, i);\n \t  node = ANTIC_OUT->head;\n \t  while (node)\n \t    {\n@@ -1193,7 +1196,7 @@ compute_antic_aux (basic_block block)\n \t      node = next;\n \t    }\n \t}\n-      VARRAY_CLEAR (worklist);\n+      VEC_free (basic_block, worklist);\n     }\n \n   /* Generate ANTIC_OUT - TMP_GEN */"}]}