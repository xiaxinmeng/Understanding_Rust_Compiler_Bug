{"sha": "83f42cad22eb85b74dff0592029b39870795c381", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmNDJjYWQyMmViODViNzRkZmYwNTkyMDI5YjM5ODcwNzk1YzM4MQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-02-05T19:56:09Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-02-05T19:56:09Z"}, "message": "re PR fortran/52102 ([OOP] Wrong result with ALLOCATE of CLASS components with array constructor SOURCE-expr)\n\n2012-02-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* trans-array.c (gfc_array_allocate): Zero memory for all class\n\tarray allocations.\n\t* trans-stmt.c (gfc_trans_allocate): Ditto for class scalars.\n\n\tPR fortran/52102\n\t* trans-stmt.c (gfc_trans_allocate): Before correcting a class\n\tarray reference, ensure that 'dataref' points to the _data\n\tcomponent that is followed by the array reference..\n\n2012-02-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/52102\n\t* gfortran.dg/class_48.f90 : Add test of allocate class array\n\tcomponent with source in subroutine test3.  Remove commenting\n\tout in subroutine test4, since branching on unitialized variable\n\tis now fixed (no PR for this last.).\n\nFrom-SVN: r183915", "tree": {"sha": "d24f95d7b226dd88ab5c551a6d9d2108472b18c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d24f95d7b226dd88ab5c551a6d9d2108472b18c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83f42cad22eb85b74dff0592029b39870795c381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f42cad22eb85b74dff0592029b39870795c381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f42cad22eb85b74dff0592029b39870795c381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f42cad22eb85b74dff0592029b39870795c381/comments", "author": null, "committer": null, "parents": [{"sha": "a1527f2f5ba5fd27ce9c3461f174aab952bdcaed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1527f2f5ba5fd27ce9c3461f174aab952bdcaed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1527f2f5ba5fd27ce9c3461f174aab952bdcaed"}], "stats": {"total": 118, "additions": 80, "deletions": 38}, "files": [{"sha": "e1e81b7f4dcda6f8229538f7001eaf92ee6b7817", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=83f42cad22eb85b74dff0592029b39870795c381", "patch": "@@ -1,3 +1,14 @@\n+2012-02-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_array_allocate): Zero memory for all class\n+\tarray allocations.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto for class scalars.\n+\n+\tPR fortran/52102\n+\t* trans-stmt.c (gfc_trans_allocate): Before correcting a class\n+\tarray reference, ensure that 'dataref' points to the _data\n+\tcomponent that is followed by the array reference..\n+\n 2012-02-02  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/41587"}, {"sha": "edcde5c4c0cb4bec3713b947681e849ec1a81963", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=83f42cad22eb85b74dff0592029b39870795c381", "patch": "@@ -5111,8 +5111,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n \n   gfc_add_expr_to_block (&se->pre, tmp);\n \n-  if (expr->ts.type == BT_CLASS\n-\t&& (expr3_elem_size != NULL_TREE || expr3))\n+  if (expr->ts.type == BT_CLASS)\n     {\n       tmp = build_int_cst (unsigned_char_type_node, 0);\n       /* With class objects, it is best to play safe and null the "}, {"sha": "7d094b0311eeb55b260c372637c74ed6c74bd2dd", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=83f42cad22eb85b74dff0592029b39870795c381", "patch": "@@ -4957,7 +4957,7 @@ gfc_trans_allocate (gfc_code * code)\n \t      tmp = gfc_nullify_alloc_comp (expr->ts.u.derived, tmp, 0);\n \t      gfc_add_expr_to_block (&se.pre, tmp);\n \t    }\n-\t  else if (al->expr->ts.type == BT_CLASS && code->expr3)\n+\t  else if (al->expr->ts.type == BT_CLASS)\n \t    {\n \t      /* With class objects, it is best to play safe and null the \n \t\t memory because we cannot know if dynamic types have allocatable\n@@ -5076,7 +5076,13 @@ gfc_trans_allocate (gfc_code * code)\n \t      actual->next->expr = gfc_copy_expr (al->expr);\n \t      actual->next->expr->ts.type = BT_CLASS;\n \t      gfc_add_data_component (actual->next->expr);\n+\n \t      dataref = actual->next->expr->ref;\n+\t      /* Make sure we go up through the reference chain to\n+\t\t the _data reference, where the arrayspec is found.  */\n+\t      while (dataref->next && dataref->next->type != REF_ARRAY)\n+\t\tdataref = dataref->next;\n+\n \t      if (dataref->u.c.component->as)\n \t\t{\n \t\t  int dim;"}, {"sha": "4c9c499c60536898a5bb76746d5cdbbc967b0ea4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83f42cad22eb85b74dff0592029b39870795c381", "patch": "@@ -1,3 +1,11 @@\n+2012-02-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/52102\n+\t* gfortran.dg/class_48.f90 : Add test of allocate class array\n+\tcomponent with source in subroutine test3.  Remove commenting\n+\tout in subroutine test4, since branching on unitialized variable\n+\tis now fixed (no PR for this last.).\n+\n 2012-02-05  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.dg/tree-prof/stringop-2.c (main): Add a nomips16 attribute"}, {"sha": "37ee8626c351c5fcd961c230a7edb0817623a34b", "filename": "gcc/testsuite/gfortran.dg/class_48.f90", "status": "modified", "additions": 53, "deletions": 35, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_48.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f42cad22eb85b74dff0592029b39870795c381/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_48.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_48.f90?ref=83f42cad22eb85b74dff0592029b39870795c381", "patch": "@@ -1,6 +1,7 @@\n ! { dg-do run }\n !\n ! PR fortran/51972\n+! Also tests fixes for PR52102\n !\n ! Check whether DT assignment with polymorphic components works.\n !\n@@ -70,16 +71,35 @@ subroutine test3 ()\n \n   type(t2) :: one, two\n \n-  allocate (two%a(2))\n-  two%a(1)%x = 4\n-  two%a(2)%x = 6\n+! Test allocate with array source - PR52102\n+  allocate (two%a(2), source = [t(4), t(6)])\n+\n   if (allocated (one%a)) call abort ()\n+\n   one = two\n   if (.not.allocated (one%a)) call abort ()\n \n   if ((one%a(1)%x /= 4)) call abort ()\n   if ((one%a(2)%x /= 6)) call abort ()\n \n+  deallocate (two%a)\n+  one = two\n+\n+  if (allocated (one%a)) call abort ()\n+\n+! Test allocate with no source followed by assignments.\n+  allocate (two%a(2))\n+  two%a(1)%x = 5\n+  two%a(2)%x = 7\n+\n+  if (allocated (one%a)) call abort ()\n+\n+  one = two\n+  if (.not.allocated (one%a)) call abort ()\n+\n+  if ((one%a(1)%x /= 5)) call abort ()\n+  if ((one%a(2)%x /= 7)) call abort ()\n+\n   deallocate (two%a)\n   one = two\n   if (allocated (one%a)) call abort ()\n@@ -98,38 +118,35 @@ subroutine test4 ()\n \n   if (allocated (one%a)) call abort ()\n   if (allocated (two%a)) call abort ()\n-!\n-! FIXME: Fails due to PR 51754\n-!\n-! NOTE: Might be only visible with MALLOC_PERTURB_ or with valgrind\n-!\n-!  allocate (two%a(2))\n-!  if (allocated (two%a(1)%x)) call abort ()\n-!  if (allocated (two%a(2)%x)) call abort ()\n-!  allocate (two%a(1)%x(3), source=[1,2,3])\n-!  allocate (two%a(2)%x(5), source=[5,6,7,8,9])\n-!  one = two\n-!  if (.not. allocated (one%a)) call abort ()\n-!  if (.not. allocated (one%a(1)%x)) call abort ()\n-!  if (.not. allocated (one%a(2)%x)) call abort ()\n-!\n-!  if (size(one%a) /= 2) call abort()\n-!  if (size(one%a(1)%x) /= 3) call abort()\n-!  if (size(one%a(2)%x) /= 5) call abort()\n-!  if (any (one%a(1)%x /= [1,2,3])) call abort ()\n-!  if (any (one%a(2)%x /= [5,6,7,8,9])) call abort ()\n-!\n-!  deallocate (two%a(1)%x)\n-!  one = two\n-!  if (.not. allocated (one%a)) call abort ()\n-!  if (allocated (one%a(1)%x)) call abort ()\n-!  if (.not. allocated (one%a(2)%x)) call abort ()\n-!\n-!  if (size(one%a) /= 2) call abort()\n-!  if (size(one%a(2)%x) /= 5) call abort()\n-!  if (any (one%a(2)%x /= [5,6,7,8,9])) call abort ()\n-!\n-!  deallocate (two%a)\n+\n+  allocate (two%a(2))\n+\n+  if (allocated (two%a(1)%x)) call abort ()\n+  if (allocated (two%a(2)%x)) call abort ()\n+  allocate (two%a(1)%x(3), source=[1,2,3])\n+  allocate (two%a(2)%x(5), source=[5,6,7,8,9])\n+  one = two\n+  if (.not. allocated (one%a)) call abort ()\n+  if (.not. allocated (one%a(1)%x)) call abort ()\n+  if (.not. allocated (one%a(2)%x)) call abort ()\n+\n+  if (size(one%a) /= 2) call abort()\n+  if (size(one%a(1)%x) /= 3) call abort()\n+  if (size(one%a(2)%x) /= 5) call abort()\n+  if (any (one%a(1)%x /= [1,2,3])) call abort ()\n+  if (any (one%a(2)%x /= [5,6,7,8,9])) call abort ()\n+\n+  deallocate (two%a(1)%x)\n+  one = two\n+  if (.not. allocated (one%a)) call abort ()\n+  if (allocated (one%a(1)%x)) call abort ()\n+  if (.not. allocated (one%a(2)%x)) call abort ()\n+\n+  if (size(one%a) /= 2) call abort()\n+  if (size(one%a(2)%x) /= 5) call abort()\n+  if (any (one%a(2)%x /= [5,6,7,8,9])) call abort ()\n+\n+  deallocate (two%a)\n   one = two\n   if (allocated (one%a)) call abort ()\n   if (allocated (two%a)) call abort ()\n@@ -141,3 +158,4 @@ end subroutine test4\n call test3 ()\n call test4 ()\n end\n+"}]}