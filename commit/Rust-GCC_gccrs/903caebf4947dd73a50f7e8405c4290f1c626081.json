{"sha": "903caebf4947dd73a50f7e8405c4290f1c626081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzY2FlYmY0OTQ3ZGQ3M2E1MGY3ZTg0MDVjNDI5MGYxYzYyNjA4MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-18T06:00:06Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-18T06:00:06Z"}, "message": "Makefile.in: Update.\n\n\t* Makefile.in: Update.\n\t* common.opt: New options.\n\t* opts.c (maybe_warn_unused_parameter, set_Wextra, handle_param,\n\tset_Wunused): New.\n\t(common_handle_option): Handle new options.\n\t* toplev.c (set_target_switch): Export.\n\t(set_Wextra, set_Wunused, maybe_warn_unused_parameter): Move to opts.c.\n\t(decode_W_option): -Wunused and -Wextra handled in opts.c now.\n\t(independent_decode_option): More options handled in opts.c now.\n\tChange prototype.\n\t* toplev.h (set_target_switch): New.\n\nFrom-SVN: r68138", "tree": {"sha": "a292fa66d1c8a6547f19c59f2e263f2f5e28d6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a292fa66d1c8a6547f19c59f2e263f2f5e28d6b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903caebf4947dd73a50f7e8405c4290f1c626081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903caebf4947dd73a50f7e8405c4290f1c626081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903caebf4947dd73a50f7e8405c4290f1c626081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903caebf4947dd73a50f7e8405c4290f1c626081/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3f735eb70c33e4659e9d101c10492d6ff2aec23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f735eb70c33e4659e9d101c10492d6ff2aec23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f735eb70c33e4659e9d101c10492d6ff2aec23"}], "stats": {"total": 245, "additions": 134, "deletions": 111}, "files": [{"sha": "5c054426e5ac89177102c09bcf55c50a3c1acc63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=903caebf4947dd73a50f7e8405c4290f1c626081", "patch": "@@ -1,3 +1,17 @@\n+2003-06-18  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in: Update.\n+\t* common.opt: New options.\n+\t* opts.c (maybe_warn_unused_parameter, set_Wextra, handle_param,\n+\tset_Wunused): New.\n+\t(common_handle_option): Handle new options.\n+\t* toplev.c (set_target_switch): Export.\n+\t(set_Wextra, set_Wunused, maybe_warn_unused_parameter): Move to opts.c.\n+\t(decode_W_option): -Wunused and -Wextra handled in opts.c now.\n+\t(independent_decode_option): More options handled in opts.c now.\n+\tChange prototype.\n+\t* toplev.h (set_target_switch): New.\n+\n 2003-06-17  Robert Abeles  <rabeles@archaelogic.com>\n \n \tPR debug/4252"}, {"sha": "1a72f3236e7c41d73022f4fb3f17ae8b407c8828", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=903caebf4947dd73a50f7e8405c4290f1c626081", "patch": "@@ -1318,7 +1318,7 @@ c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n         c-pragma.h flags.h toplev.h langhooks.h tree-inline.h diagnostic.h \\\n-\tintl.h debug.h $(C_COMMON_H) opts.h options.h\n+\tintl.h debug.h $(C_COMMON_H) opts.h options.h params.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n "}, {"sha": "91fb0c71aacb79ae06c09d55ee8271eb68b44a64", "filename": "gcc/common.opt", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=903caebf4947dd73a50f7e8405c4290f1c626081", "patch": "@@ -25,6 +25,9 @@\n -help\n Common\n \n+-param\n+Common Separate\n+\n -target-help\n Common\n \n@@ -34,6 +37,21 @@ Common\n G\n Common Joined Separate UInteger\n \n+O\n+Common JoinedOrMissing\n+\n+Os\n+Common\n+\n+W\n+Common RejectNegative\n+\n+Wextra\n+Common\n+\n+Wunused\n+Common\n+\n aux-info\n Common Separate\n \n@@ -52,6 +70,9 @@ Common Joined\n dumpbase\n Common Separate\n \n+m\n+Common Joined\n+\n o\n Common Joined Separate\n "}, {"sha": "56415a1eb004eaf5b3c8b5bc4e911c293bfa7cf7", "filename": "gcc/opts.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=903caebf4947dd73a50f7e8405c4290f1c626081", "patch": "@@ -29,6 +29,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"options.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n+#include \"params.h\"\n \n /* Value of the -G xx switch, and whether it was passed or not.  */\n unsigned HOST_WIDE_INT g_switch_value;\n@@ -40,8 +41,13 @@ bool exit_after_options;\n /* If -version.  */\n bool version_flag;\n \n+/* Hack for cooperation between set_Wunused and set_Wextra.  */\n+static bool maybe_warn_unused_parameter;\n+\n static size_t find_opt (const char *, int);\n static int common_handle_option (size_t scode, const char *arg, int value);\n+static void handle_param (const char *);\n+static void set_Wextra (int);\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS on\n@@ -281,6 +287,10 @@ common_handle_option (size_t scode, const char *arg,\n       exit_after_options = true;\n       break;\n \n+    case OPT__param:\n+      handle_param (arg);\n+      break;\n+\n     case OPT__target_help:\n       display_target_options ();\n       exit_after_options = true;\n@@ -296,6 +306,24 @@ common_handle_option (size_t scode, const char *arg,\n       g_switch_set = true;\n       break;\n \n+    case OPT_O:\n+    case OPT_Os:\n+      /* Currently handled in a prescan.  */\n+      break;\n+\n+    case OPT_W:\n+      /* For backward compatibility, -W is the same as -Wextra.  */\n+      set_Wextra (value);\n+      break;\n+\n+    case OPT_Wextra:\n+      set_Wextra (value);\n+      break;\n+\n+    case OPT_Wunused:\n+      set_Wunused (value);\n+      break;\n+\n     case OPT_aux_info:\n     case OPT_aux_info_:\n       aux_info_file_name = arg;\n@@ -323,6 +351,10 @@ common_handle_option (size_t scode, const char *arg,\n       dump_base_name = arg;\n       break;\n \n+    case OPT_m:\n+      set_target_switch (arg);\n+      break;\n+\n     case OPT_o:\n       asm_file_name = arg;\n       break;\n@@ -354,3 +386,63 @@ common_handle_option (size_t scode, const char *arg,\n \n   return 1;\n }\n+\n+/* Handle --param NAME=VALUE.  */\n+static void\n+handle_param (const char *carg)\n+{\n+  char *equal, *arg;\n+  int value;\n+\n+  arg = xstrdup (carg);\n+  equal = strchr (arg, '=');\n+  if (!equal)\n+    error (\"%s: --param arguments should be of the form NAME=VALUE\", arg);\n+  else\n+    {\n+      value = integral_argument (equal + 1);\n+      if (value == -1)\n+\terror (\"invalid --param value `%s'\", equal + 1);\n+      else\n+\t{\n+\t  *equal = '\\0';\n+\t  set_param_value (arg, value);\n+\t}\n+    }\n+\n+  free (arg);\n+}\n+\n+/* Handle -W and -Wextra.  */\n+static void\n+set_Wextra (int setting)\n+{\n+  extra_warnings = setting;\n+  warn_unused_value = setting;\n+  warn_unused_parameter = (setting && maybe_warn_unused_parameter);\n+\n+  /* We save the value of warn_uninitialized, since if they put\n+     -Wuninitialized on the command line, we need to generate a\n+     warning about not using it without also specifying -O.  */\n+  if (setting == 0)\n+    warn_uninitialized = 0;\n+  else if (warn_uninitialized != 1)\n+    warn_uninitialized = 2;\n+}\n+\n+/* Initialize unused warning flags.  */\n+void\n+set_Wunused (int setting)\n+{\n+  warn_unused_function = setting;\n+  warn_unused_label = setting;\n+  /* Unused function parameter warnings are reported when either\n+     ``-Wextra -Wunused'' or ``-Wunused-parameter'' is specified.\n+     Thus, if -Wextra has already been seen, set warn_unused_parameter;\n+     otherwise set maybe_warn_extra_parameter, which will be picked up\n+     by set_Wextra.  */\n+  maybe_warn_unused_parameter = setting;\n+  warn_unused_parameter = (setting && extra_warnings);\n+  warn_unused_variable = setting;\n+  warn_unused_value = setting;\n+}"}, {"sha": "572fa34f077608ef684656df0323d8292ceb60cf", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 110, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=903caebf4947dd73a50f7e8405c4290f1c626081", "patch": "@@ -113,17 +113,14 @@ static int lang_dependent_init (const char *);\n static void init_asm_output (const char *);\n static void finalize (void);\n \n-static void set_target_switch (const char *);\n-\n static void crash_signal (int) ATTRIBUTE_NORETURN;\n static void setup_core_dumping (void);\n static void compile_file (void);\n \n static int decode_f_option (const char *);\n static int decode_W_option (const char *);\n static int decode_g_option (const char *);\n-static unsigned int independent_decode_option (int, char **);\n-static void set_Wextra (int);\n+static unsigned int independent_decode_option (char **);\n \n static int print_single_switch (FILE *, int, int, const char *,\n \t\t\t\tconst char *, const char *,\n@@ -1503,9 +1500,6 @@ int warn_unused_parameter;\n int warn_unused_variable;\n int warn_unused_value;\n \n-/* Used for cooperation between set_Wunused and set_Wextra.  */\n-static int maybe_warn_unused_parameter;\n-\n /* Nonzero to warn about code which is never reached.  */\n \n int warn_notreached;\n@@ -1635,40 +1629,6 @@ static const lang_independent_options W_options[] =\n    N_ (\"Warn about code which might break the strict aliasing rules\") }\n };\n \n-/* Initialize unused warning flags.  */\n-void\n-set_Wunused (int setting)\n-{\n-  warn_unused_function = setting;\n-  warn_unused_label = setting;\n-  /* Unused function parameter warnings are reported when either\n-     ``-Wextra -Wunused'' or ``-Wunused-parameter'' is specified.\n-     Thus, if -Wextra has already been seen, set warn_unused_parameter;\n-     otherwise set maybe_warn_extra_parameter, which will be picked up\n-     by set_Wextra.  */\n-  maybe_warn_unused_parameter = setting;\n-  warn_unused_parameter = (setting && extra_warnings);\n-  warn_unused_variable = setting;\n-  warn_unused_value = setting;\n-}\n-\n-/* Initialize more unused warning flags.  */\n-static void\n-set_Wextra (int setting)\n-{\n-  extra_warnings = setting;\n-  warn_unused_value = setting;\n-  warn_unused_parameter = (setting && maybe_warn_unused_parameter);\n-\n-  /* We save the value of warn_uninitialized, since if they put\n-     -Wuninitialized on the command line, we need to generate a\n-     warning about not using it without also specifying -O.  */\n-  if (setting == 0)\n-    warn_uninitialized = 0;\n-  else if (warn_uninitialized != 1)\n-    warn_uninitialized = 2;\n-}\n-\n /* The following routines are useful in setting all the flags that\n    -ffast-math and -fno-fast-math imply.  */\n \n@@ -4426,22 +4386,6 @@ decode_W_option (const char *arg)\n \n       warn_larger_than = larger_than_size != -1;\n     }\n-  else if (!strcmp (arg, \"unused\"))\n-    {\n-      set_Wunused (1);\n-    }\n-  else if (!strcmp (arg, \"no-unused\"))\n-    {\n-      set_Wunused (0);\n-    }\n-  else if (!strcmp (arg, \"extra\"))\n-    {\n-      set_Wextra (1);\n-    }\n-  else if (!strcmp (arg, \"no-extra\"))\n-    {\n-      set_Wextra (0);\n-    }\n   else\n     return 0;\n \n@@ -4578,7 +4522,7 @@ ignoring option `%s' due to invalid debug level specification\",\n    Return the number of strings consumed.  */\n \n static unsigned int\n-independent_decode_option (int argc, char **argv)\n+independent_decode_option (char **argv)\n {\n   char *arg = argv[0];\n \n@@ -4587,75 +4531,26 @@ independent_decode_option (int argc, char **argv)\n \n   arg++;\n \n-  /* Handle '--param <name>=<value>'.  */\n-  if (strcmp (arg, \"-param\") == 0)\n-    {\n-      char *equal;\n-\n-      if (argc == 1)\n-\t{\n-\t  error (\"-param option missing argument\");\n-\t  return 1;\n-\t}\n-\n-      /* Get the '<name>=<value>' parameter.  */\n-      arg = argv[1];\n-      /* Look for the `='.  */\n-      equal = strchr (arg, '=');\n-      if (!equal)\n-\terror (\"invalid --param option: %s\", arg);\n-      else\n-\t{\n-\t  int val;\n-\n-\t  /* Zero out the `=' sign so that we get two separate strings.  */\n-\t  *equal = '\\0';\n-\t  /* Figure out what value is specified.  */\n-\t  val = read_integral_parameter (equal + 1, NULL, INVALID_PARAM_VAL);\n-\t  if (val != INVALID_PARAM_VAL)\n-\t    set_param_value (arg, val);\n-\t  else\n-\t    error (\"invalid parameter value `%s'\", equal + 1);\n-\t}\n-\n-      return 2;\n-    }\n-\n   switch (*arg)\n     {\n     default:\n       return 0;\n \n-    case 'O':\n-      /* Already been treated in main (). Do nothing.  */\n-      break;\n-\n-    case 'm':\n-      set_target_switch (arg + 1);\n-      break;\n-\n     case 'f':\n       return decode_f_option (arg + 1);\n \n     case 'g':\n       return decode_g_option (arg + 1);\n \n     case 'W':\n-      /* For backward compatibility, -W is the same as -Wextra.  */\n-      if (arg[1] == 0)\n-\tset_Wextra (1);\n-      else\n-\treturn decode_W_option (arg + 1);\n-      break;\n+      return decode_W_option (arg + 1);\n     }\n-\n-  return 1;\n }\n \n /* Decode -m switches.  */\n /* Decode the switch -mNAME.  */\n \n-static void\n+void\n set_target_switch (const char *name)\n {\n   size_t j;\n@@ -5117,7 +5012,7 @@ parse_options_and_default_flags (int argc, char **argv)\n \t/* Now see if the option also has a language independent meaning.\n \t   Some options are both language specific and language independent,\n \t   eg --help.  */\n-\tindep_processed = independent_decode_option (argc - i, argv + i);\n+\tindep_processed = independent_decode_option (argv + i);\n       else\n \t{\n \t  lang_processed = -lang_processed;"}, {"sha": "52ceb5f4ae79c6503de9d6bbaa96e2f1be37a238", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903caebf4947dd73a50f7e8405c4290f1c626081/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=903caebf4947dd73a50f7e8405c4290f1c626081", "patch": "@@ -107,6 +107,7 @@ extern int target_flags_explicit;\n extern void display_help (void);\n extern void display_target_options (void);\n extern void print_version (FILE *, const char *);\n+extern void set_target_switch (const char *);\n \n /* The hashtable, so that the C front ends can pass it to cpplib.  */\n extern struct ht *ident_hash;"}]}