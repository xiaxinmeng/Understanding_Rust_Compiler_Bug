{"sha": "e4e659b947e64c015681361cbae571bf130d4c17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlNjU5Yjk0N2U2NGMwMTU2ODEzNjFjYmFlNTcxYmYxMzBkNGMxNw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-12-13T14:28:17Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-12-13T14:28:17Z"}, "message": "re PR fortran/78737 ([OOP] linking error with deferred, undefined user-defined derived-type I/O)\n\n2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/78737\n\t* gfortran.h (gfc_find_typebound_dtio_proc): New prototype.\n\t* interface.c (gfc_compare_interfaces): Whitespace fix.\n\t(gfc_find_typebound_dtio_proc): New function.\n\t(gfc_find_specific_dtio_proc): Use it. Improve error recovery.\n\t* trans-io.c (get_dtio_proc): Implement polymorphic calls to DTIO\n\tprocedures.\n\n2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/78737\n\t* gfortran.dg/dtio_19.f90: New test case.\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\n\nFrom-SVN: r243609", "tree": {"sha": "16886e0e5dffba38ef9799f2e00573929fd4f3b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16886e0e5dffba38ef9799f2e00573929fd4f3b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4e659b947e64c015681361cbae571bf130d4c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e659b947e64c015681361cbae571bf130d4c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e659b947e64c015681361cbae571bf130d4c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e659b947e64c015681361cbae571bf130d4c17/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a08b7792102aa2851232eec19f5f68047d21ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a08b7792102aa2851232eec19f5f68047d21ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a08b7792102aa2851232eec19f5f68047d21ae"}], "stats": {"total": 154, "additions": 136, "deletions": 18}, "files": [{"sha": "2a4b69dabc7872466bb0d338e420221876c013c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e4e659b947e64c015681361cbae571bf130d4c17", "patch": "@@ -1,3 +1,14 @@\n+2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78737\n+\t* gfortran.h (gfc_find_typebound_dtio_proc): New prototype.\n+\t* interface.c (gfc_compare_interfaces): Whitespace fix.\n+\t(gfc_find_typebound_dtio_proc): New function.\n+\t(gfc_find_specific_dtio_proc): Use it. Improve error recovery.\n+\t* trans-io.c (get_dtio_proc): Implement polymorphic calls to DTIO\n+\tprocedures.\n+\n 2016-12-12  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78392"}, {"sha": "f0189840f274753b966d75c083986b60118d434e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e4e659b947e64c015681361cbae571bf130d4c17", "patch": "@@ -3252,6 +3252,7 @@ int gfc_has_vector_subscript (gfc_expr*);\n gfc_intrinsic_op gfc_equivalent_op (gfc_intrinsic_op);\n bool gfc_check_typebound_override (gfc_symtree*, gfc_symtree*);\n void gfc_check_dtio_interfaces (gfc_symbol*);\n+gfc_symtree* gfc_find_typebound_dtio_proc (gfc_symbol *, bool, bool);\n gfc_symbol* gfc_find_specific_dtio_proc (gfc_symbol*, bool, bool);\n \n "}, {"sha": "90f46e56e4d3b54615ccb548df41d569a3476bba", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=e4e659b947e64c015681361cbae571bf130d4c17", "patch": "@@ -1712,8 +1712,8 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n \treturn 0;\n \n       /* Special case: alternate returns.  If both f1->sym and f2->sym are\n-\t NULL, then the leading formal arguments are alternate returns.  \n-\t The previous conditional should catch argument lists with \n+\t NULL, then the leading formal arguments are alternate returns.\n+\t The previous conditional should catch argument lists with\n \t different number of argument.  */\n       if (f1 && f1->sym == NULL && f2 && f2->sym == NULL)\n \treturn 1;\n@@ -4826,13 +4826,10 @@ gfc_check_dtio_interfaces (gfc_symbol *derived)\n }\n \n \n-gfc_symbol *\n-gfc_find_specific_dtio_proc (gfc_symbol *derived, bool write, bool formatted)\n+gfc_symtree*\n+gfc_find_typebound_dtio_proc (gfc_symbol *derived, bool write, bool formatted)\n {\n   gfc_symtree *tb_io_st = NULL;\n-  gfc_symbol *dtio_sub = NULL;\n-  gfc_symbol *extended;\n-  gfc_typebound_proc *tb_io_proc, *specific_proc;\n   bool t = false;\n \n   if (!derived || derived->attr.flavor != FL_DERIVED)\n@@ -4869,6 +4866,19 @@ gfc_find_specific_dtio_proc (gfc_symbol *derived, bool write, bool formatted)\n \t\t\t\t\t    true,\n \t\t\t\t\t    &derived->declared_at);\n     }\n+  return tb_io_st;\n+}\n+\n+\n+gfc_symbol *\n+gfc_find_specific_dtio_proc (gfc_symbol *derived, bool write, bool formatted)\n+{\n+  gfc_symtree *tb_io_st = NULL;\n+  gfc_symbol *dtio_sub = NULL;\n+  gfc_symbol *extended;\n+  gfc_typebound_proc *tb_io_proc, *specific_proc;\n+\n+  tb_io_st = gfc_find_typebound_dtio_proc (derived, write, formatted);\n \n   if (tb_io_st != NULL)\n     {\n@@ -4893,17 +4903,17 @@ gfc_find_specific_dtio_proc (gfc_symbol *derived, bool write, bool formatted)\n \tdtio_sub = st->n.tb->u.specific->n.sym;\n       else\n \tdtio_sub = specific_proc->u.specific->n.sym;\n-    }\n \n-  if (tb_io_st != NULL)\n-    goto finish;\n+      goto finish;\n+    }\n \n   /* If there is not a typebound binding, look for a generic\n      DTIO interface.  */\n   for (extended = derived; extended;\n        extended = gfc_get_derived_super_type (extended))\n     {\n-      if (extended == NULL || extended->ns == NULL)\n+      if (extended == NULL || extended->ns == NULL\n+\t  || extended->attr.flavor == FL_UNKNOWN)\n \treturn NULL;\n \n       if (formatted == true)"}, {"sha": "b60685ee1572053f6b0097224b3f4a091c60c911", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=e4e659b947e64c015681361cbae571bf130d4c17", "patch": "@@ -2181,15 +2181,37 @@ get_dtio_proc (gfc_typespec * ts, gfc_code * code, gfc_symbol **dtio_sub)\n     }\n \n   if (ts->type == BT_DERIVED)\n-    derived = ts->u.derived;\n-  else\n-    derived = ts->u.derived->components->ts.u.derived;\n+    {\n+      derived = ts->u.derived;\n+      *dtio_sub = gfc_find_specific_dtio_proc (derived, last_dt == WRITE,\n+\t\t\t\t\t      formatted);\n+\n+      if (*dtio_sub)\n+\treturn gfc_build_addr_expr (NULL, gfc_get_symbol_decl (*dtio_sub));\n+    }\n+  else if (ts->type == BT_CLASS)\n+    {\n+      gfc_symtree *tb_io_st;\n \n-  *dtio_sub = gfc_find_specific_dtio_proc (derived, last_dt == WRITE,\n-\t\t\t\t\t   formatted);\n+      derived = ts->u.derived->components->ts.u.derived;\n+      tb_io_st = gfc_find_typebound_dtio_proc (derived,\n+\t\t\t\t\t       last_dt == WRITE, formatted);\n+      if (tb_io_st)\n+\t{\n+\t  gfc_se se;\n+\t  gfc_expr *expr = gfc_find_and_cut_at_last_class_ref (code->expr1);\n+\t  gfc_add_vptr_component (expr);\n+\t  gfc_add_component_ref (expr,\n+\t\t\t\t tb_io_st->n.tb->u.generic->specific_st->name);\n+\t  *dtio_sub = tb_io_st->n.tb->u.generic->specific->u.specific->n.sym;\n+\t  gfc_init_se (&se, NULL);\n+\t  se.want_pointer = 1;\n+\t  gfc_conv_expr (&se, expr);\n+\t  gfc_free_expr (expr);\n+\t  return se.expr;\n+\t}\n+    }\n \n-  if (*dtio_sub)\n-    return gfc_build_addr_expr (NULL, gfc_get_symbol_decl (*dtio_sub));\n \n   return NULL_TREE;\n "}, {"sha": "fa954e539ff74726924aa845e6f7aeb98d190e29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4e659b947e64c015681361cbae571bf130d4c17", "patch": "@@ -1,3 +1,9 @@\n+2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78737\n+\t* gfortran.dg/dtio_19.f90: New test case.\n+\n 2016-12-13  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/78725"}, {"sha": "f4d375748ec23890e7e12cd48f3c5b0f0110590e", "filename": "gcc/testsuite/gfortran.dg/dtio_19.f90", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e659b947e64c015681361cbae571bf130d4c17/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_19.f90?ref=e4e659b947e64c015681361cbae571bf130d4c17", "patch": "@@ -0,0 +1,68 @@\n+! { dg-do run }\n+!\n+! PR78737: [OOP] linking error with deferred, undefined user-defined derived-type I/O\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+\n+module object_interface\n+  character(30) :: buffer(2)\n+  type, abstract :: object\n+  contains\n+    procedure(write_formatted_interface), deferred :: write_formatted\n+    generic :: write(formatted) => write_formatted\n+  end type\n+  abstract interface\n+    subroutine write_formatted_interface(this,unit,iotype,vlist,iostat,iomsg)\n+      import object\n+      class(object), intent(in) :: this\n+      integer, intent(in) :: unit\n+      character (len=*), intent(in) :: iotype\n+      integer, intent(in) :: vlist(:)\n+      integer, intent(out) :: iostat\n+      character (len=*), intent(inout) :: iomsg\n+    end subroutine\n+  end interface\n+  type, extends(object) :: non_abstract_child1\n+    integer :: i\n+  contains\n+    procedure :: write_formatted => write_formatted1\n+  end type\n+  type, extends(object) :: non_abstract_child2\n+    real :: r\n+  contains\n+    procedure :: write_formatted => write_formatted2\n+  end type\n+contains\n+  subroutine write_formatted1(this,unit,iotype,vlist,iostat,iomsg)\n+    class(non_abstract_child1), intent(in) :: this\n+    integer, intent(in) :: unit\n+    character (len=*), intent(in) :: iotype\n+    integer, intent(in) :: vlist(:)\n+    integer, intent(out) :: iostat\n+    character (len=*), intent(inout) :: iomsg\n+    write(unit,'(a,i2/)') \"write_formatted1 => \", this%i\n+  end subroutine\n+  subroutine write_formatted2(this,unit,iotype,vlist,iostat,iomsg)\n+    class(non_abstract_child2), intent(in) :: this\n+    integer, intent(in) :: unit\n+    character (len=*), intent(in) :: iotype\n+    integer, intent(in) :: vlist(:)\n+    integer, intent(out) :: iostat\n+    character (len=*), intent(inout) :: iomsg\n+    write(unit,'(a,f4.1/)') \"write_formatted2 => \", this%r\n+  end subroutine\n+  subroutine assert(a)\n+    class(object):: a\n+    write(buffer,'(DT)') a\n+  end subroutine\n+end module\n+\n+program p\n+  use object_interface\n+\n+  call assert (non_abstract_child1 (99))\n+  if (trim (buffer(1)) .ne. \"write_formatted1 => 99\") call abort\n+\n+  call assert (non_abstract_child2 (42.0))\n+  if (trim (buffer(1)) .ne. \"write_formatted2 => 42.0\") call abort\n+end"}]}