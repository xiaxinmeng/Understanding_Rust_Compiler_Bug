{"sha": "28dd005525dc1a166827d6fe818e01bed7f42e1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkZDAwNTUyNWRjMWExNjY4MjdkNmZlODE4ZTAxYmVkN2Y0MmUxYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-07-03T08:28:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-07-03T08:28:34Z"}, "message": "exp_disp.adb (Expand_Dispatching_Call): Propagate the convention on the designated subprogram type and also set...\n\n\t* exp_disp.adb (Expand_Dispatching_Call): Propagate the convention on\n\tthe designated subprogram type and also set Is_Dispatch_Table_Entity.\n\t(Expand_Interface_Thunk): Propagate the convention on the thunk.\n\t(Set_CPP_Constructors_Old): Set Is_Constructor and Convention_CPP on\n\tthe internal view of the constructors.\n\t(Set_CPP_Constructors): Likewise.\n\t* sem_prag.adb (Analyze_Pragma) <Pragma_CPP_Constructor>: Set the\n\tconvention on the function.\n\t* gcc-interface/gigi.h (is_cplusplus_method): Declare.\n\t* gcc-interface/decl.c (Has_Thiscall_Convention): New macro.\n\t(gnat_to_gnu_entity) <E_Subprogram_Type>: Test it to set the `thiscall'\n\tcalling convention\n\t(get_minimal_subprog_decl): Likewise.\n\t(is_cplusplus_method): New predicate.\n\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Access>: Issue an\n\terror on access to C++ constructor or member function.\n\nFrom-SVN: r189199", "tree": {"sha": "9acc0912d99c8d1fbc910a6130e60a7c459eb40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9acc0912d99c8d1fbc910a6130e60a7c459eb40e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28dd005525dc1a166827d6fe818e01bed7f42e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dd005525dc1a166827d6fe818e01bed7f42e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28dd005525dc1a166827d6fe818e01bed7f42e1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dd005525dc1a166827d6fe818e01bed7f42e1b/comments", "author": null, "committer": null, "parents": [{"sha": "d4d05b5247b56a3658d1fc5136276468d4829623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d05b5247b56a3658d1fc5136276468d4829623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d05b5247b56a3658d1fc5136276468d4829623"}], "stats": {"total": 97, "additions": 92, "deletions": 5}, "files": [{"sha": "0e0456c874016c385c13510c4347ef6b96c41c87", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=28dd005525dc1a166827d6fe818e01bed7f42e1b", "patch": "@@ -1,3 +1,22 @@\n+2012-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Dispatching_Call): Propagate the convention on\n+\tthe designated subprogram type and also set Is_Dispatch_Table_Entity.\n+\t(Expand_Interface_Thunk): Propagate the convention on the thunk.\n+\t(Set_CPP_Constructors_Old): Set Is_Constructor and Convention_CPP on\n+\tthe internal view of the constructors.\n+\t(Set_CPP_Constructors): Likewise.\n+\t* sem_prag.adb (Analyze_Pragma) <Pragma_CPP_Constructor>: Set the\n+\tconvention on the function.\n+\t* gcc-interface/gigi.h (is_cplusplus_method): Declare.\n+\t* gcc-interface/decl.c (Has_Thiscall_Convention): New macro.\n+\t(gnat_to_gnu_entity) <E_Subprogram_Type>: Test it to set the `thiscall'\n+\tcalling convention\n+\t(get_minimal_subprog_decl): Likewise.\n+\t(is_cplusplus_method): New predicate.\n+\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Access>: Issue an\n+\terror on access to C++ constructor or member function.\n+\n 2012-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (gnat_pushdecl): Set TYPE_CONTEXT for types"}, {"sha": "c0fddeb12cf48954e738d86a18f5f67e4aa44a33", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=28dd005525dc1a166827d6fe818e01bed7f42e1b", "patch": "@@ -803,6 +803,11 @@ package body Exp_Disp is\n       Subp_Ptr_Typ := Create_Itype (E_Access_Subprogram_Type, Call_Node);\n       Set_Etype          (Subp_Typ, Res_Typ);\n       Set_Returns_By_Ref (Subp_Typ, Returns_By_Ref (Subp));\n+      Set_Convention     (Subp_Typ, Convention (Subp));\n+\n+      --  Notify gigi that the designated type is a dispatching primitive\n+\n+      Set_Is_Dispatch_Table_Entity (Subp_Typ);\n \n       --  Create a new list of parameters which is a copy of the old formal\n       --  list including the creation of a new set of matching entities.\n@@ -1850,6 +1855,7 @@ package body Exp_Disp is\n \n       Thunk_Id := Make_Temporary (Loc, 'T');\n       Set_Is_Thunk (Thunk_Id);\n+      Set_Convention (Thunk_Id, Convention (Prim));\n \n       --  Procedure case\n \n@@ -8468,8 +8474,9 @@ package body Exp_Disp is\n \n                Set_Init_Proc (Typ, Init);\n                Set_Is_Imported    (Init);\n+               Set_Is_Constructor (Init);\n                Set_Interface_Name (Init, Interface_Name (E));\n-               Set_Convention     (Init, Convention_C);\n+               Set_Convention     (Init, Convention_CPP);\n                Set_Is_Public      (Init);\n                Set_Has_Completion (Init);\n             end if;\n@@ -8562,8 +8569,9 @@ package body Exp_Disp is\n                   Parameter_Specifications => Parms));\n \n             Set_Is_Imported    (Constructor_Id);\n+            Set_Is_Constructor (Constructor_Id);\n             Set_Interface_Name (Constructor_Id, Interface_Name (E));\n-            Set_Convention     (Constructor_Id, Convention_C);\n+            Set_Convention     (Constructor_Id, Convention_CPP);\n             Set_Is_Public      (Constructor_Id);\n             Set_Has_Completion (Constructor_Id);\n "}, {"sha": "9a2dc458b2f6023c27c92099aedf9ee1ffba586f", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=28dd005525dc1a166827d6fe818e01bed7f42e1b", "patch": "@@ -50,19 +50,23 @@\n #include \"ada-tree.h\"\n #include \"gigi.h\"\n \n-/* Convention_Stdcall should be processed in a specific way on 32 bits\n-   Windows targets only.  The macro below is a helper to avoid having to\n-   check for a Windows specific attribute throughout this unit.  */\n+/* \"stdcall\" and \"thiscall\" conventions should be processed in a specific way\n+   on 32-bit x86/Windows only.  The macros below are helpers to avoid having\n+   to check for a Windows specific attribute throughout this unit.  */\n \n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n #ifdef TARGET_64BIT\n #define Has_Stdcall_Convention(E) \\\n   (!TARGET_64BIT && Convention (E) == Convention_Stdcall)\n+#define Has_Thiscall_Convention(E) \\\n+  (!TARGET_64BIT && is_cplusplus_method (E))\n #else\n #define Has_Stdcall_Convention(E) (Convention (E) == Convention_Stdcall)\n+#define Has_Thiscall_Convention(E) (is_cplusplus_method (E))\n #endif\n #else\n #define Has_Stdcall_Convention(E) 0\n+#define Has_Thiscall_Convention(E) 0\n #endif\n \n /* Stack realignment is necessary for functions with foreign conventions when\n@@ -4413,6 +4417,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    (&attr_list, ATTR_MACHINE_ATTRIBUTE,\n \t     get_identifier (\"stdcall\"), NULL_TREE,\n \t     gnat_entity);\n+\telse if (Has_Thiscall_Convention (gnat_entity))\n+\t  prepend_one_attribute_to\n+\t    (&attr_list, ATTR_MACHINE_ATTRIBUTE,\n+\t     get_identifier (\"thiscall\"), NULL_TREE,\n+\t     gnat_entity);\n \n \t/* If we should request stack realignment for a foreign convention\n \t   subprogram, do so.  Note that this applies to task entry points in\n@@ -5276,6 +5285,10 @@ get_minimal_subprog_decl (Entity_Id gnat_entity)\n     prepend_one_attribute_to (&attr_list, ATTR_MACHINE_ATTRIBUTE,\n \t\t\t      get_identifier (\"stdcall\"), NULL_TREE,\n \t\t\t      gnat_entity);\n+  else if (Has_Thiscall_Convention (gnat_entity))\n+    prepend_one_attribute_to (&attr_list, ATTR_MACHINE_ATTRIBUTE,\n+\t\t\t      get_identifier (\"thiscall\"), NULL_TREE,\n+\t\t\t      gnat_entity);\n \n   if (No (Interface_Name (gnat_entity)) && gnu_ext_name == gnu_entity_name)\n     gnu_ext_name = NULL_TREE;\n@@ -5285,6 +5298,39 @@ get_minimal_subprog_decl (Entity_Id gnat_entity)\n \t\t\t false, true, true, true, attr_list, gnat_entity);\n }\n \n+/* Return whether the E_Subprogram_Type/E_Function/E_Procedure GNAT_ENTITY is\n+   a C++ imported method or equivalent.\n+\n+   We use the predicate on 32-bit x86/Windows to find out whether we need to\n+   use the \"thiscall\" calling convention for GNAT_ENTITY.  This convention is\n+   used for C++ methods (functions with METHOD_TYPE) by the back-end.  */\n+\n+bool\n+is_cplusplus_method (Entity_Id gnat_entity)\n+{\n+  if (Convention (gnat_entity) != Convention_CPP)\n+    return False;\n+\n+  /* This is the main case: C++ method imported as a primitive operation.  */\n+  if (Is_Dispatching_Operation (gnat_entity))\n+    return True;\n+\n+  /* A thunk needs to be handled like its associated primitive operation.  */\n+  if (Is_Subprogram (gnat_entity) && Is_Thunk (gnat_entity))\n+    return True;\n+\n+  /* C++ classes with no virtual functions can be imported as limited\n+     record types, but we need to return true for the constructors.  */\n+  if (Is_Constructor (gnat_entity))\n+    return True;\n+\n+  /* This is set on the E_Subprogram_Type built for a dispatching call.  */\n+  if (Is_Dispatch_Table_Entity (gnat_entity))\n+    return True;\n+\n+  return False;\n+}\n+\n /* Finalize the processing of From_With_Type incomplete types.  */\n \n void"}, {"sha": "6edead04b6b58c6af51fda185fa3449df07381b7", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=28dd005525dc1a166827d6fe818e01bed7f42e1b", "patch": "@@ -116,6 +116,10 @@ extern tree get_unpadded_type (Entity_Id gnat_entity);\n    alias is already present, in which case it is returned instead.  */\n extern tree get_minimal_subprog_decl (Entity_Id gnat_entity);\n \n+/* Return whether the E_Subprogram_Type/E_Function/E_Procedure GNAT_ENTITY is\n+   a C++ imported method or equivalent.  */\n+extern bool is_cplusplus_method (Entity_Id gnat_entity);\n+\n /* Create a record type that contains a SIZE bytes long field of TYPE with a\n     starting bit position so that it is aligned to ALIGN bits, and leaving at\n     least ROOM bytes free before the field.  BASE_ALIGN is the alignment the"}, {"sha": "de03cba8b219a3ecba122d0b184e446efeea691f", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=28dd005525dc1a166827d6fe818e01bed7f42e1b", "patch": "@@ -1424,6 +1424,15 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t    TREE_NO_TRAMPOLINE (gnu_expr) = TREE_CONSTANT (gnu_expr) = 1;\n \t}\n \n+      /* For 'Access, issue an error message if the prefix is a C++ method\n+\t since it can use a special calling convention on some platforms,\n+\t which cannot be propagated to the access type.  */\n+      else if (attribute == Attr_Access\n+\t       && Nkind (Prefix (gnat_node)) == N_Identifier\n+\t       && is_cplusplus_method (Entity (Prefix (gnat_node))))\n+\tpost_error (\"access to C++ constructor or member function not allowed\",\n+\t\t    gnat_node);\n+\n       /* For other address attributes applied to a nested function,\n \t find an inner ADDR_EXPR and annotate it so that we can issue\n \t a useful warning with -Wtrampolines.  */"}, {"sha": "13d5a91980e916e7dadfb59489873e3039ecbffa", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dd005525dc1a166827d6fe818e01bed7f42e1b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=28dd005525dc1a166827d6fe818e01bed7f42e1b", "patch": "@@ -7865,6 +7865,7 @@ package body Sem_Prag is\n \n                Set_Has_Completion (Def_Id);\n                Set_Is_Constructor (Def_Id);\n+               Set_Convention (Def_Id, Convention_CPP);\n \n                --  Imported C++ constructors are not dispatching primitives\n                --  because in C++ they don't have a dispatch table slot."}]}