{"sha": "fe7df9c4566e75472fbf5322ca1a6495b197426f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3ZGY5YzQ1NjZlNzU0NzJmYmY1MzIyY2ExYTY0OTViMTk3NDI2Zg==", "commit": {"author": {"name": "Seongbae Park", "email": "seongbae.park@gmail.com", "date": "2008-04-30T17:17:03Z"}, "committer": {"name": "Seongbae Park", "email": "spark@gcc.gnu.org", "date": "2008-04-30T17:17:03Z"}, "message": "gcc.c (wrapper_string): New variable.\n\n2008-04-30  Seongbae Park  <seongbae.park@gmail.com>\n\n\t* gcc.c (wrapper_string): New variable.\n\t(insert_wrapper): New function.\n\t(execute): New option -wrapper.\n\t* doc/invoke.texi (Overall Options): New driver option -wrapper.\n\nFrom-SVN: r134832", "tree": {"sha": "e5863017314cc101fa7a9d8a03e7d9cbe311e6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5863017314cc101fa7a9d8a03e7d9cbe311e6c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe7df9c4566e75472fbf5322ca1a6495b197426f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7df9c4566e75472fbf5322ca1a6495b197426f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7df9c4566e75472fbf5322ca1a6495b197426f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7df9c4566e75472fbf5322ca1a6495b197426f/comments", "author": null, "committer": null, "parents": [{"sha": "802367d7c9052b80798421c6452f1361b75bcf32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802367d7c9052b80798421c6452f1361b75bcf32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802367d7c9052b80798421c6452f1361b75bcf32"}], "stats": {"total": 105, "additions": 100, "deletions": 5}, "files": [{"sha": "ae74e649a9b9d0d0cd3867fb683522cc17ed247c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7df9c4566e75472fbf5322ca1a6495b197426f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7df9c4566e75472fbf5322ca1a6495b197426f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe7df9c4566e75472fbf5322ca1a6495b197426f", "patch": "@@ -1,3 +1,10 @@\n+2008-04-30  Seongbae Park  <seongbae.park@gmail.com>\n+\n+\t* gcc.c (wrapper_string): New variable.\n+\t(insert_wrapper): New function.\n+\t(execute): New option -wrapper.\n+\t* doc/invoke.texi (Overall Options): New driver option -wrapper.\n+\n 2008-04-30  Nathan Froyd  <froydnj@codesourcery.com>\n \n         * config/rs6000/crtresgpr.asm, config/rs6000/crtresxgpr.asm,"}, {"sha": "dfd22afab6cb494ffcf9096092a88d474fcdf07e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7df9c4566e75472fbf5322ca1a6495b197426f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7df9c4566e75472fbf5322ca1a6495b197426f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fe7df9c4566e75472fbf5322ca1a6495b197426f", "patch": "@@ -164,7 +164,7 @@ in the following sections.\n @xref{Overall Options,,Options Controlling the Kind of Output}.\n @gccoptlist{-c  -S  -E  -o @var{file}  -combine  -pipe  -pass-exit-codes  @gol\n -x @var{language}  -v  -###  --help@r{[}=@var{class}@r{]}  --target-help  @gol\n---version @@@var{file}}\n+--version -wrapper@@@var{file}}\n \n @item C Language Options\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n@@ -1251,6 +1251,19 @@ diff /tmp/O2-opts /tmp/O3-opts | grep enabled\n @opindex version\n Display the version number and copyrights of the invoked GCC@.\n \n+@item -wrapper\n+@opindex wrapper\n+Invoke all subcommands under a wrapper program. It takes a single\n+comma separated list as an argument, which will be used to invoke\n+the wrapper:\n+\n+@smallexample\n+gcc -c t.c -wrapper gdb,--args\n+@end smallexample\n+\n+This will invoke all subprograms of gcc under \"gdb --args\",\n+thus cc1 invocation will be \"gdb --args cc1 ...\".\n+\n @include @value{srcdir}/../libiberty/at-file.texi\n @end table\n "}, {"sha": "b9ca22931493264f02c149834b39ef8e6718a9fb", "filename": "gcc/gcc.c", "status": "modified", "additions": 79, "deletions": 4, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7df9c4566e75472fbf5322ca1a6495b197426f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7df9c4566e75472fbf5322ca1a6495b197426f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=fe7df9c4566e75472fbf5322ca1a6495b197426f", "patch": "@@ -285,12 +285,21 @@ static struct obstack obstack;\n \n static struct obstack collect_obstack;\n \n+/* This is a list of a wrapper program and its arguments.\n+   e.g. wrapper_string of \"strace,-c\"\n+   will cause all programs to run as\n+       strace -c program arguments\n+   instead of just\n+       program arguments */\n+static const char  *wrapper_string;\n+\n /* Forward declaration for prototypes.  */\n struct path_prefix;\n struct prefix_list;\n \n static void init_spec (void);\n static void store_arg (const char *, int, int);\n+static void insert_wrapper (const char *);\n static char *load_specs (const char *);\n static void read_specs (const char *, int);\n static void set_spec (const char *, const char *);\n@@ -2845,6 +2854,13 @@ execute (void)\n \n   gcc_assert (!processing_spec_function);\n \n+  if (wrapper_string)\n+    {\n+      string = find_a_file (&exec_prefixes, argbuf[0], X_OK, false);\n+      argbuf[0] = (string) ? string : argbuf[0];\n+      insert_wrapper (wrapper_string);\n+    }\n+\n   /* Count # of piped commands.  */\n   for (n_commands = 1, i = 0; i < argbuf_index; i++)\n     if (strcmp (argbuf[i], \"|\") == 0)\n@@ -2859,10 +2875,12 @@ execute (void)\n \n   commands[0].prog = argbuf[0]; /* first command.  */\n   commands[0].argv = &argbuf[0];\n-  string = find_a_file (&exec_prefixes, commands[0].prog, X_OK, false);\n-\n-  if (string)\n-    commands[0].argv[0] = string;\n+ \n+  if (!wrapper_string)\n+    {\n+      string = find_a_file (&exec_prefixes, commands[0].prog, X_OK, false);\n+      commands[0].argv[0] = (string) ? string : commands[0].argv[0];\n+    }\n \n   for (n_commands = 1, i = 0; i < argbuf_index; i++)\n     if (strcmp (argbuf[i], \"|\") == 0)\n@@ -3798,6 +3816,15 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  use_pipes = 1;\n \t  n_switches++;\n \t}\n+      else if (strcmp (argv[i], \"-wrapper\") == 0)\n+        {\n+\t  if (++i >= argc)\n+\t    fatal (\"argument to '-wrapper' is missing\");\n+\n+          wrapper_string = argv[i];\n+\t  n_switches++;\n+\t  n_switches++;\n+        }\n       else if (strcmp (argv[i], \"-###\") == 0)\n \t{\n \t  /* This is similar to -v except that there is no execution\n@@ -4163,6 +4190,8 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  infiles[n_infiles].language = \"*\";\n \t  infiles[n_infiles++].name = argv[i];\n \t}\n+      else if (strcmp (argv[i], \"-wrapper\") == 0)\n+        i++;\n       else if (strcmp (argv[i], \"-specs\") == 0)\n \ti++;\n       else if (strncmp (argv[i], \"-specs=\", 7) == 0)\n@@ -4414,6 +4443,52 @@ end_going_arg (void)\n     }\n }\n \n+\n+/* Parse the WRAPPER string which is a comma separated list of the command line\n+   and insert them into the beginning of argbuf.  */\n+\n+static void\n+insert_wrapper (const char *wrapper)\n+{\n+  int n = 0;\n+  int i;\n+  char *buf = xstrdup (wrapper);\n+  char *p = buf;\n+\n+  do\n+    {\n+      n++;\n+      while (*p == ',')\n+        p++;\n+    }\n+  while ((p = strchr (p, ',')) != NULL);\n+\n+  if (argbuf_index + n >= argbuf_length)\n+    {\n+      argbuf_length = argbuf_length * 2;\n+      while (argbuf_length < argbuf_index + n)\n+\targbuf_length *= 2;\n+      argbuf = xrealloc (argbuf, argbuf_length * sizeof (const char *));\n+    }\n+  for (i = argbuf_index - 1; i >= 0; i--)\n+    argbuf[i + n] = argbuf[i];\n+\n+  i = 0;\n+  p = buf;\n+  do\n+    {\n+      while (*p == ',')\n+        {\n+          *p = 0;\n+          p++;\n+        }\n+      argbuf[i++] = p;\n+    }\n+  while ((p = strchr (p, ',')) != NULL);\n+  gcc_assert (i == n);\n+  argbuf_index += n;\n+}\n+\n /* Process the spec SPEC and run the commands specified therein.\n    Returns 0 if the spec is successfully processed; -1 if failed.  */\n "}]}