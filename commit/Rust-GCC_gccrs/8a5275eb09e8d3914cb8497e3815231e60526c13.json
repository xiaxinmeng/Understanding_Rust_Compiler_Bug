{"sha": "8a5275eb09e8d3914cb8497e3815231e60526c13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1Mjc1ZWIwOWU4ZDM5MTRjYjg0OTdlMzgxNTIzMWU2MDUyNmMxMw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-04-08T19:53:34Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-04-08T19:53:34Z"}, "message": "function.c (postponed_insns): New.\n\n\t* function.c (postponed_insns): New.\n\t(purge_addressof_1): Postpone processing of insns if addressofs\n\tare not put into stack.\n\t(purge_addressof): Process postponed insns.\n\nFrom-SVN: r65380", "tree": {"sha": "ba324b47e5a824b0ab6e3b63f896cb96f1908bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba324b47e5a824b0ab6e3b63f896cb96f1908bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5275eb09e8d3914cb8497e3815231e60526c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5275eb09e8d3914cb8497e3815231e60526c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5275eb09e8d3914cb8497e3815231e60526c13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5275eb09e8d3914cb8497e3815231e60526c13/comments", "author": null, "committer": null, "parents": [{"sha": "ac55736a0a271f62a2ed018a8d34039d6f458f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac55736a0a271f62a2ed018a8d34039d6f458f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac55736a0a271f62a2ed018a8d34039d6f458f60"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "75333143b52ed727a9938e3f9cde434b085cbcea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5275eb09e8d3914cb8497e3815231e60526c13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5275eb09e8d3914cb8497e3815231e60526c13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a5275eb09e8d3914cb8497e3815231e60526c13", "patch": "@@ -1,3 +1,10 @@\n+2003-04-08  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* function.c (postponed_insns): New.\n+\t(purge_addressof_1): Postpone processing of insns if addressofs\n+\tare not put into stack.\n+\t(purge_addressof): Process postponed insns.\t\n+\n 2003-04-08  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.h (NORMAL_MODE): If interrupt handler and TARGET_FMOVD,"}, {"sha": "0b3a0065200d9a58b14407e2f566250f7cc68116", "filename": "gcc/function.c", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5275eb09e8d3914cb8497e3815231e60526c13/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5275eb09e8d3914cb8497e3815231e60526c13/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8a5275eb09e8d3914cb8497e3815231e60526c13", "patch": "@@ -281,8 +281,7 @@ static int contains\t\tPARAMS ((rtx, varray_type));\n static void emit_return_into_block PARAMS ((basic_block, rtx));\n #endif\n static void put_addressof_into_stack PARAMS ((rtx, htab_t));\n-static bool purge_addressof_1 PARAMS ((rtx *, rtx, int, int,\n-\t\t\t\t\t  htab_t));\n+static bool purge_addressof_1 PARAMS ((rtx *, rtx, int, int, int, htab_t));\n static void purge_single_hard_subreg_set PARAMS ((rtx));\n #if defined(HAVE_epilogue) && defined(INCOMING_RETURN_ADDR_RTX)\n static rtx keep_stack_depressed PARAMS ((rtx));\n@@ -300,6 +299,9 @@ static void instantiate_virtual_regs_lossage PARAMS ((rtx));\n /* Pointer to chain of `struct function' for containing functions.  */\n static GTY(()) struct function *outer_function_chain;\n \n+/* List of insns that were postponed by purge_addressof_1.  */\n+static rtx postponed_insns;\n+\n /* Given a function decl for a containing function,\n    return the `struct function' for it.  */\n \n@@ -2999,13 +3001,14 @@ static rtx purge_addressof_replacements;\n /* Helper function for purge_addressof.  See if the rtx expression at *LOC\n    in INSN needs to be changed.  If FORCE, always put any ADDRESSOFs into\n    the stack.  If the function returns FALSE then the replacement could not\n-   be made.  */\n+   be made.  If MAY_POSTPONE is true and we would not put the addressof\n+   to stack, postpone processing of the insn.  */\n \n static bool\n-purge_addressof_1 (loc, insn, force, store, ht)\n+purge_addressof_1 (loc, insn, force, store, may_postpone, ht)\n      rtx *loc;\n      rtx insn;\n-     int force, store;\n+     int force, store, may_postpone;\n      htab_t ht;\n {\n   rtx x;\n@@ -3028,8 +3031,10 @@ purge_addressof_1 (loc, insn, force, store, ht)\n      memory.  */\n   if (code == SET)\n     {\n-      result = purge_addressof_1 (&SET_DEST (x), insn, force, 1, ht);\n-      result &= purge_addressof_1 (&SET_SRC (x), insn, force, 0, ht);\n+      result = purge_addressof_1 (&SET_DEST (x), insn, force, 1,\n+\t\t\t\t  may_postpone, ht);\n+      result &= purge_addressof_1 (&SET_SRC (x), insn, force, 0,\n+\t\t\t\t   may_postpone, ht);\n       return result;\n     }\n   else if (code == ADDRESSOF)\n@@ -3062,6 +3067,13 @@ purge_addressof_1 (loc, insn, force, store, ht)\n     {\n       rtx sub = XEXP (XEXP (x, 0), 0);\n \n+      if (may_postpone)\n+\t{\n+\t  if (!postponed_insns || XEXP (postponed_insns, 0) != insn)\n+\t    postponed_insns = alloc_INSN_LIST (insn, postponed_insns);\n+\t  return true;\n+\t}\n+\n       if (GET_CODE (sub) == MEM)\n \tsub = adjust_address_nv (sub, GET_MODE (x), 0);\n       else if (GET_CODE (sub) == REG\n@@ -3260,10 +3272,12 @@ purge_addressof_1 (loc, insn, force, store, ht)\n   for (i = 0; i < GET_RTX_LENGTH (code); i++, fmt++)\n     {\n       if (*fmt == 'e')\n-\tresult &= purge_addressof_1 (&XEXP (x, i), insn, force, 0, ht);\n+\tresult &= purge_addressof_1 (&XEXP (x, i), insn, force, 0,\n+\t\t\t\t     may_postpone, ht);\n       else if (*fmt == 'E')\n \tfor (j = 0; j < XVECLEN (x, i); j++)\n-\t  result &= purge_addressof_1 (&XVECEXP (x, i, j), insn, force, 0, ht);\n+\t  result &= purge_addressof_1 (&XVECEXP (x, i, j), insn, force, 0,\n+\t\t\t\t       may_postpone, ht);\n     }\n \n   return result;\n@@ -3391,7 +3405,7 @@ void\n purge_addressof (insns)\n      rtx insns;\n {\n-  rtx insn;\n+  rtx insn, tmp;\n   htab_t ht;\n \n   /* When we actually purge ADDRESSOFs, we turn REGs into MEMs.  That\n@@ -3404,16 +3418,18 @@ purge_addressof (insns)\n   ht = htab_create_ggc (1000, insns_for_mem_hash, insns_for_mem_comp, NULL);\n   compute_insns_for_mem (insns, NULL_RTX, ht);\n \n+  postponed_insns = NULL;\n+\n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n     if (INSN_P (insn))\n       {\n \tif (! purge_addressof_1 (&PATTERN (insn), insn,\n-\t\t\t\t asm_noperands (PATTERN (insn)) > 0, 0, ht))\n+\t\t\t\t asm_noperands (PATTERN (insn)) > 0, 0, 1, ht))\n \t  /* If we could not replace the ADDRESSOFs in the insn,\n \t     something is wrong.  */\n \t  abort ();\n \n-\tif (! purge_addressof_1 (&REG_NOTES (insn), NULL_RTX, 0, 0, ht))\n+\tif (! purge_addressof_1 (&REG_NOTES (insn), NULL_RTX, 0, 0, 0, ht))\n \t  {\n \t    /* If we could not replace the ADDRESSOFs in the insn's notes,\n \t       we can just remove the offending notes instead.  */\n@@ -3433,6 +3449,19 @@ purge_addressof (insns)\n \t  }\n       }\n \n+  /* Process the postponed insns.  */\n+  while (postponed_insns)\n+    {\n+      insn = XEXP (postponed_insns, 0);\n+      tmp = postponed_insns;\n+      postponed_insns = XEXP (postponed_insns, 1);\n+      free_EXPR_LIST_node (tmp);\n+\n+      if (! purge_addressof_1 (&PATTERN (insn), insn,\n+\t\t\t       asm_noperands (PATTERN (insn)) > 0, 0, 0, ht))\n+\tabort ();\n+    }\n+\n   /* Clean up.  */\n   purge_bitfield_addressof_replacements = 0;\n   purge_addressof_replacements = 0;"}]}