{"sha": "92ce93c743b3c81f6911bc3d06056099369e9191", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJjZTkzYzc0M2IzYzgxZjY5MTFiYzNkMDYwNTYwOTkzNjllOTE5MQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-20T10:10:30Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-20T10:10:30Z"}, "message": "Record outer non-cleanup region in TREE EH.\n\n\tPR tree-optimization/93199\n\t* tree-eh.c (struct leh_state): Add\n\tnew field outer_non_cleanup.\n\t(cleanup_is_dead_in): Pass leh_state instead\n\tof eh_region.  Add a checking that state->outer_non_cleanup\n\tpoints to outer non-clean up region.\n\t(lower_try_finally): Record outer_non_cleanup\n\tfor this_state.\n\t(lower_catch): Likewise.\n\t(lower_eh_filter): Likewise.\n\t(lower_eh_must_not_throw): Likewise.\n\t(lower_cleanup): Likewise.", "tree": {"sha": "80246049f8c7eac62cd554f404b547539c506b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80246049f8c7eac62cd554f404b547539c506b90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92ce93c743b3c81f6911bc3d06056099369e9191", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl4lfJYACgkQTcGC3A+n\nN4WOEQf/dafePAKjxl9aYkEm/lAhJK1FPtacg1YXww9oyDCznUtwfBbxlnRsMM3c\nLRTw7RYrMVAoLJFBcxyt3j+uVyyPNz5DlSNlQLxOLaA3pKwfUJPtiZG9tQ3pKTKe\njLstqaZV36+NBcKa4JgLZLavrXZWZST9P9IXEuQFBxZ9uswXeFGEmLsmu+2pXv7y\nP7CeJhy/8c8Q4mZXoQ5b9h0GQaoPLgcHDWo7llEZnRisqDYMkFapoLnjQ/uws10T\nBi92QecMN4hZ2XDZF2dyS1XQ/xbEdYF5rlSoO2KB8tHOkLQ0/Iv7Gs1UBnE/98AZ\nLXMEbXb41lH1WwaNDC32syKwfm0zpQ==\n=JnOH\n-----END PGP SIGNATURE-----", "payload": "tree 80246049f8c7eac62cd554f404b547539c506b90\nparent 9c4f0d311810eba3f4faab1295c47eb57e695fcc\nauthor Martin Liska <mliska@suse.cz> 1579515030 +0100\ncommitter Martin Liska <mliska@suse.cz> 1579515030 +0100\n\nRecord outer non-cleanup region in TREE EH.\n\n\tPR tree-optimization/93199\n\t* tree-eh.c (struct leh_state): Add\n\tnew field outer_non_cleanup.\n\t(cleanup_is_dead_in): Pass leh_state instead\n\tof eh_region.  Add a checking that state->outer_non_cleanup\n\tpoints to outer non-clean up region.\n\t(lower_try_finally): Record outer_non_cleanup\n\tfor this_state.\n\t(lower_catch): Likewise.\n\t(lower_eh_filter): Likewise.\n\t(lower_eh_must_not_throw): Likewise.\n\t(lower_cleanup): Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ce93c743b3c81f6911bc3d06056099369e9191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ce93c743b3c81f6911bc3d06056099369e9191", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ce93c743b3c81f6911bc3d06056099369e9191/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c4f0d311810eba3f4faab1295c47eb57e695fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4f0d311810eba3f4faab1295c47eb57e695fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4f0d311810eba3f4faab1295c47eb57e695fcc"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "53224da0b5b0d1fa6607b9e405069b3e1517c612", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ce93c743b3c81f6911bc3d06056099369e9191/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ce93c743b3c81f6911bc3d06056099369e9191/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92ce93c743b3c81f6911bc3d06056099369e9191", "patch": "@@ -1,3 +1,18 @@\n+2020-01-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/93199\n+\t* tree-eh.c (struct leh_state): Add\n+\tnew field outer_non_cleanup.\n+\t(cleanup_is_dead_in): Pass leh_state instead\n+\tof eh_region.  Add a checking that state->outer_non_cleanup\n+\tpoints to outer non-clean up region.\n+\t(lower_try_finally): Record outer_non_cleanup\n+\tfor this_state.\n+\t(lower_catch): Likewise.\n+\t(lower_eh_filter): Likewise.\n+\t(lower_eh_must_not_throw): Likewise.\n+\t(lower_cleanup): Likewise.\n+\n 2020-01-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93094"}, {"sha": "2a409dcaffe7803959ad27b695bd1d8e193deb59", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ce93c743b3c81f6911bc3d06056099369e9191/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ce93c743b3c81f6911bc3d06056099369e9191/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=92ce93c743b3c81f6911bc3d06056099369e9191", "patch": "@@ -356,6 +356,9 @@ struct leh_state\n      split out into a separate structure so that we don't have to\n      copy so much when processing other nodes.  */\n   struct leh_tf_state *tf;\n+\n+  /* Outer non-clean up region.  */\n+  eh_region outer_non_cleanup;\n };\n \n struct leh_tf_state\n@@ -1624,18 +1627,27 @@ decide_copy_try_finally (int ndests, bool may_throw, gimple_seq finally)\n     return f_estimate < 40 || f_estimate * 2 < sw_estimate * 3;\n }\n \n-/* REG is the enclosing region for a possible cleanup region, or the region\n+/* REG is current region of a LEH state.\n+   is the enclosing region for a possible cleanup region, or the region\n    itself.  Returns TRUE if such a region would be unreachable.\n \n    Cleanup regions within a must-not-throw region aren't actually reachable\n    even if there are throwing stmts within them, because the personality\n    routine will call terminate before unwinding.  */\n \n static bool\n-cleanup_is_dead_in (eh_region reg)\n+cleanup_is_dead_in (leh_state *state)\n {\n-  while (reg && reg->type == ERT_CLEANUP)\n-    reg = reg->outer;\n+  if (flag_checking)\n+    {\n+      eh_region reg = state->cur_region;\n+      while (reg && reg->type == ERT_CLEANUP)\n+\treg = reg->outer;\n+\n+      gcc_assert (reg == state->outer_non_cleanup);\n+    }\n+\n+  eh_region reg = state->outer_non_cleanup;\n   return (reg && reg->type == ERT_MUST_NOT_THROW);\n }\n \n@@ -1658,7 +1670,7 @@ lower_try_finally (struct leh_state *state, gtry *tp)\n   this_tf.try_finally_expr = tp;\n   this_tf.top_p = tp;\n   this_tf.outer = state;\n-  if (using_eh_for_cleanups_p () && !cleanup_is_dead_in (state->cur_region))\n+  if (using_eh_for_cleanups_p () && !cleanup_is_dead_in (state))\n     {\n       this_tf.region = gen_eh_region_cleanup (state->cur_region);\n       this_state.cur_region = this_tf.region;\n@@ -1669,6 +1681,7 @@ lower_try_finally (struct leh_state *state, gtry *tp)\n       this_state.cur_region = state->cur_region;\n     }\n \n+  this_state.outer_non_cleanup = state->outer_non_cleanup;\n   this_state.ehp_region = state->ehp_region;\n   this_state.tf = &this_tf;\n \n@@ -1768,6 +1781,7 @@ lower_catch (struct leh_state *state, gtry *tp)\n     {\n       try_region = gen_eh_region_try (state->cur_region);\n       this_state.cur_region = try_region;\n+      this_state.outer_non_cleanup = this_state.cur_region;\n     }\n \n   lower_eh_constructs_1 (&this_state, gimple_try_eval_ptr (tp));\n@@ -1781,6 +1795,7 @@ lower_catch (struct leh_state *state, gtry *tp)\n   emit_resx (&new_seq, try_region);\n \n   this_state.cur_region = state->cur_region;\n+  this_state.outer_non_cleanup = state->outer_non_cleanup;\n   this_state.ehp_region = try_region;\n \n   /* Add eh_seq from lowering EH in the cleanup sequence after the cleanup\n@@ -1857,6 +1872,7 @@ lower_eh_filter (struct leh_state *state, gtry *tp)\n       this_region = gen_eh_region_allowed (state->cur_region,\n \t\t\t\t           gimple_eh_filter_types (inner));\n       this_state.cur_region = this_region;\n+      this_state.outer_non_cleanup = this_state.cur_region;\n     }\n \n   lower_eh_constructs_1 (&this_state, gimple_try_eval_ptr (tp));\n@@ -1912,6 +1928,7 @@ lower_eh_must_not_throw (struct leh_state *state, gtry *tp)\n       TREE_USED (this_region->u.must_not_throw.failure_decl) = 1;\n \n       this_state.cur_region = this_region;\n+      this_state.outer_non_cleanup = this_state.cur_region;\n     }\n \n   lower_eh_constructs_1 (&this_state, gimple_try_eval_ptr (tp));\n@@ -1929,12 +1946,13 @@ lower_cleanup (struct leh_state *state, gtry *tp)\n   eh_region this_region = NULL;\n   struct leh_tf_state fake_tf;\n   gimple_seq result;\n-  bool cleanup_dead = cleanup_is_dead_in (state->cur_region);\n+  bool cleanup_dead = cleanup_is_dead_in (state);\n \n   if (flag_exceptions && !cleanup_dead)\n     {\n       this_region = gen_eh_region_cleanup (state->cur_region);\n       this_state.cur_region = this_region;\n+      this_state.outer_non_cleanup = state->outer_non_cleanup;\n     }\n \n   lower_eh_constructs_1 (&this_state, gimple_try_eval_ptr (tp));"}]}