{"sha": "2ee4e084b7b20e4da9bbab88fe862932059d1524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlNGUwODRiN2IyMGU0ZGE5YmJhYjg4ZmU4NjI5MzIwNTlkMTUyNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-06-11T23:53:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-06-11T23:53:24Z"}, "message": "pt.c (is_member_template_class): New function.\n\n\t* pt.c (is_member_template_class): New function.\n\t(push_template_decl_real): Use it.\n\nFrom-SVN: r20435", "tree": {"sha": "53de487a5e93cf13ec48b9c1d21ff1ee24063571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53de487a5e93cf13ec48b9c1d21ff1ee24063571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee4e084b7b20e4da9bbab88fe862932059d1524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee4e084b7b20e4da9bbab88fe862932059d1524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee4e084b7b20e4da9bbab88fe862932059d1524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee4e084b7b20e4da9bbab88fe862932059d1524/comments", "author": null, "committer": null, "parents": [{"sha": "9bc6d2c2070cccaaa5f0c129bd7b27bdb728af27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc6d2c2070cccaaa5f0c129bd7b27bdb728af27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc6d2c2070cccaaa5f0c129bd7b27bdb728af27"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "5539b4cce0436308bb00fdd72c3e37c269eb9cba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee4e084b7b20e4da9bbab88fe862932059d1524/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee4e084b7b20e4da9bbab88fe862932059d1524/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ee4e084b7b20e4da9bbab88fe862932059d1524", "patch": "@@ -1,3 +1,8 @@\n+1998-06-11  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* pt.c (is_member_template_class): New function.\n+\t(push_template_decl_real): Use it.\n+\n 1998-06-11  Benjamin Kosnik  <bkoz@elmo.cygnus.com>\n \n \t* friend.c (do_friend): Add support for nested classes using"}, {"sha": "537361edbc5e0830576cf3ca50dd98f111d1d043", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee4e084b7b20e4da9bbab88fe862932059d1524/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee4e084b7b20e4da9bbab88fe862932059d1524/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2ee4e084b7b20e4da9bbab88fe862932059d1524", "patch": "@@ -115,6 +115,7 @@ static tree maybe_get_template_decl_from_type_decl PROTO((tree));\n static int check_cv_quals_for_unify PROTO((int, tree, tree));\n static tree tsubst_template_arg_vector PROTO((tree, tree));\n static void regenerate_decl_from_template PROTO((tree, tree));\n+static int is_member_template_class PROTO((tree));\n \n /* Nonzero if ARGVEC contains multiple levels of template arguments.  */\n #define TMPL_ARGS_HAVE_MULTIPLE_LEVELS(NODE) \t\t\\\n@@ -378,6 +379,31 @@ is_member_template (t)\n   return 0;\n }\n \n+/* Returns non-zero iff T is a member template class.  See\n+   is_member_template for a description of what precisely constitutes\n+   a member template.  */\n+\n+int\n+is_member_template_class (t)\n+     tree t;\n+{\n+  if (!DECL_CLASS_TEMPLATE_P (t))\n+    /* Anything that isn't a class template, is certainly not a member\n+       template.  */\n+    return 0;\n+\n+  if (!DECL_CLASS_SCOPE_P (t))\n+    /* Anything whose context isn't a class type is surely not a\n+       member template.  */\n+    return 0;\n+\n+  /* If there are more levels of template parameters than there are\n+     template classes surrounding the declaration, then we have a\n+     member template.  */\n+  return  (list_length (DECL_TEMPLATE_PARMS (t)) > \n+\t   template_class_depth (DECL_CONTEXT (t)));\n+}\n+\n /* Return a new template argument vector which contains all of ARGS\n    for all outer templates TMPL is contained in, but has as its \n    innermost set of arguments the EXTRA_ARGS.  If UNBOUND_ONLY, we\n@@ -1784,9 +1810,10 @@ push_template_decl_real (decl, is_friend)\n       else\n \ttmpl = DECL_TI_TEMPLATE (decl);\n       \n-      if (is_member_template (tmpl))\n+      if (is_member_template (tmpl) || is_member_template_class (tmpl))\n \t{\n-\t  if (DECL_TEMPLATE_INFO (decl) && DECL_TI_ARGS (decl) \n+\t  if (DECL_FUNCTION_TEMPLATE_P (tmpl)\n+\t      && DECL_TEMPLATE_INFO (decl) && DECL_TI_ARGS (decl) \n \t      && DECL_TEMPLATE_SPECIALIZATION (decl))\n \t    {\n \t      tree new_tmpl;\n@@ -1812,7 +1839,7 @@ push_template_decl_real (decl, is_friend)\n \t    }\n \t  \n \t  a = TREE_VEC_ELT (args, TREE_VEC_LENGTH (args) - 1);\n-\t  t = DECL_INNERMOST_TEMPLATE_PARMS (DECL_TI_TEMPLATE (decl));\n+\t  t = DECL_INNERMOST_TEMPLATE_PARMS (tmpl);\n \t  if (TREE_VEC_LENGTH (t) != TREE_VEC_LENGTH (a))\n \t    {\n \t      cp_error (\"got %d template parameters for `%#D'\","}, {"sha": "f4d035481a07c3e9e78773d3e3b9357ca62df7d6", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memclass12.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee4e084b7b20e4da9bbab88fe862932059d1524/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee4e084b7b20e4da9bbab88fe862932059d1524/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass12.C?ref=2ee4e084b7b20e4da9bbab88fe862932059d1524", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link:\n+\n+struct outer {\n+  template <class T> struct inner;\n+} o;\n+template <class T> struct outer::inner {};"}]}