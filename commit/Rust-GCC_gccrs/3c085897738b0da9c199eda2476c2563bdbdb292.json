{"sha": "3c085897738b0da9c199eda2476c2563bdbdb292", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwODU4OTc3MzhiMGRhOWMxOTllZGEyNDc2YzI1NjNiZGJkYjI5Mg==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "message": "VAX: Correct issues with commented-out insns\n\nCorrect issues with commented-out insns, which fail to build if enabled:\n\n.../gcc/config/vax/vax.md:503:1: repeated operand number 1\n.../gcc/config/vax/vax.md:503:1: repeated operand number 2\n\nand then when the issue with the repeated operands has been corrected:\n\n.../gcc/config/vax/vax.md:107:1: destination operand 0 allows non-lvalue\n.../gcc/config/vax/vax.md:503:1: destination operand 0 allows non-lvalue\n.../gcc/config/vax/vax.md:503:1: destination operand 3 allows non-lvalue\n.../gcc/config/vax/vax.md:744:1: destination operand 0 allows non-lvalue\n\nFix the RTL with the repeated operands and change the relevant output\noperand predicates not to allow immediates.\n\nAlso emit MOVO rather than MOVH assembly instruction with the `movti'\ninsn so that the condition codes are set according to the integer rather\nthan floating-point interpretation of the datum moved, as expected with\nthe operation associated with the pattern.\n\nFinally give `*amulsi4' a name, for easier reference here and elsewhere.\n\nWe may eventually want to have some of these insns enabled at `-Os'.\n\n\tgcc/\n\t* config/vax/vax.md (movti): Fix output predicate.  Emit `movo'\n\trather than `movh'.\n\t(divmoddisi4): Fix output predicates, correct RTL.\n\t(*amulsi4): Name insn.  Fix output predicate.", "tree": {"sha": "fbc3449e6a75d29f65354dcada4408ac2f588667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc3449e6a75d29f65354dcada4408ac2f588667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c085897738b0da9c199eda2476c2563bdbdb292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c085897738b0da9c199eda2476c2563bdbdb292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c085897738b0da9c199eda2476c2563bdbdb292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c085897738b0da9c199eda2476c2563bdbdb292/comments", "author": null, "committer": null, "parents": [{"sha": "2b39f5137a9db4939fd23d39de63257467986f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b39f5137a9db4939fd23d39de63257467986f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b39f5137a9db4939fd23d39de63257467986f80"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "4b0c26d1d58a338f23dc00f94dcab81567e63065", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c085897738b0da9c199eda2476c2563bdbdb292/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c085897738b0da9c199eda2476c2563bdbdb292/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=3c085897738b0da9c199eda2476c2563bdbdb292", "patch": "@@ -105,10 +105,10 @@\n \n ;; Some VAXen don't support this instruction.\n ;;(define_insn \"movti\"\n-;;  [(set (match_operand:TI 0 \"general_operand\" \"=g\")\n+;;  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=g\")\n ;;\t(match_operand:TI 1 \"general_operand\" \"g\"))]\n ;;  \"\"\n-;;  \"movh %1,%0\")\n+;;  \"movo %1,%0\")\n \n (define_insn \"movdi\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=g\")\n@@ -501,12 +501,12 @@\n ;This is left out because it is very slow;\n ;we are better off programming around the \"lack\" of this insn.\n ;(define_insn \"divmoddisi4\"\n-;  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+;  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n ;\t(div:SI (match_operand:DI 1 \"general_operand\" \"g\")\n ;\t\t(match_operand:SI 2 \"general_operand\" \"g\")))\n-;   (set (match_operand:SI 3 \"general_operand\" \"=g\")\n-;\t(mod:SI (match_operand:DI 1 \"general_operand\" \"g\")\n-;\t\t(match_operand:SI 2 \"general_operand\" \"g\")))]\n+;   (set (match_operand:SI 3 \"nonimmediate_operand\" \"=g\")\n+;\t(mod:SI (match_dup 1)\n+;\t\t(match_dup 2)))]\n ;  \"\"\n ;  \"ediv %2,%1,%0,%3\")\n \f\n@@ -741,8 +741,8 @@\n   \"rotl %2,%1,%0\")\n \n ;This insn is probably slower than a multiply and an add.\n-;(define_insn \"\"\n-;  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+;(define_insn \"*amulsi4\"\n+;  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n ;\t(mult:SI (plus:SI (match_operand:SI 1 \"general_operand\" \"g\")\n ;\t\t\t  (match_operand:SI 2 \"general_operand\" \"g\"))\n ;\t\t (match_operand:SI 3 \"general_operand\" \"g\")))]"}]}