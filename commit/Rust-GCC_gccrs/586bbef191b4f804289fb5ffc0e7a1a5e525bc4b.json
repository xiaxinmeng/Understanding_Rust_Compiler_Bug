{"sha": "586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2YmJlZjE5MWI0ZjgwNDI4OWZiNWZmYzBlN2ExYTVlNTI1YmM0Yg==", "commit": {"author": {"name": "Hongtao Liu", "email": "hongtao.liu@intel.com", "date": "2019-11-18T02:22:55Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-11-18T02:22:55Z"}, "message": "Split X86_TUNE_AVX128_OPTIMAL into X86_TUNE_AVX256_SPLIT_REGS\nand X86_TUNE_AVX128_OPTIMAL.\n\nChangelog\ngcc/\n\tPR target/92448\n\t* config/i386/i386-expand.c (ix86_expand_set_or_cpymem):\n\tReplace TARGET_AVX128_OPTIMAL with TARGET_AVX256_SPLIT_REGS.\n\t* config/i386/i386-option.c (ix86_vec_cost): Ditto.\n\t(ix86_reassociation_width): Ditto.\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tReplace TARGET_AVX128_OPTIAML with\n\tix86_tune_features[X86_TUNE_AVX128_OPTIMAL]\n\t* config/i386/i386.h (TARGET_AVX256_SPLIT_REGS): New macro.\n\t(TARGET_AVX128_OPTIMAL): Deleted.\n\t* config/i386/x86-tune.def (X86_TUNE_AVX256_SPLIT_REGS): New\n\tDEF_TUNE.\n\nFrom-SVN: r278385", "tree": {"sha": "a155938b610d8c1e3a049c5c881658fb1e3e14a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a155938b610d8c1e3a049c5c881658fb1e3e14a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a128988785c425f327763b8cc2cf5741ef29a214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a128988785c425f327763b8cc2cf5741ef29a214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a128988785c425f327763b8cc2cf5741ef29a214"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "20eae0487b719495bf22ff4416f76f40c1dbf6f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "patch": "@@ -1,3 +1,18 @@\n+2019-11-18  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/92448\n+\t* config/i386/i386-expand.c (ix86_expand_set_or_cpymem):\n+\tReplace TARGET_AVX128_OPTIMAL with TARGET_AVX256_SPLIT_REGS.\n+\t* config/i386/i386-option.c (ix86_vec_cost): Ditto.\n+\t(ix86_reassociation_width): Ditto.\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tReplace TARGET_AVX128_OPTIAML with\n+\tix86_tune_features[X86_TUNE_AVX128_OPTIMAL]\n+\t* config/i386/i386.h (TARGET_AVX256_SPLIT_REGS): New macro.\n+\t(TARGET_AVX128_OPTIMAL): Deleted.\n+\t* config/i386/x86-tune.def (X86_TUNE_AVX256_SPLIT_REGS): New\n+\tDEF_TUNE.\n+\n 2019-11-16  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (cceq_ior_compare): Rename to..."}, {"sha": "1ff1153e105307d8094f05c49f8e79ac92748fd0", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "patch": "@@ -7347,7 +7347,7 @@ ix86_expand_set_or_cpymem (rtx dst, rtx src, rtx count_exp, rtx val_exp,\n \t     && optab_handler (mov_optab, wider_mode) != CODE_FOR_nothing)\n \tmove_mode = wider_mode;\n \n-      if (TARGET_AVX128_OPTIMAL && GET_MODE_BITSIZE (move_mode) > 128)\n+      if (TARGET_AVX256_SPLIT_REGS && GET_MODE_BITSIZE (move_mode) > 128)\n \tmove_mode = TImode;\n \n       /* Find the corresponding vector mode with the same size as MOVE_MODE."}, {"sha": "128511ecfe28a9a9f3ced3241bae009eb3c0e8bd", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "patch": "@@ -2674,7 +2674,7 @@ ix86_option_override_internal (bool main_args_p,\n \n   /* Enable 128-bit AVX instruction generation\n      for the auto-vectorizer.  */\n-  if (TARGET_AVX128_OPTIMAL\n+  if (ix86_tune_features[X86_TUNE_AVX128_OPTIMAL]\n       && (opts_set->x_prefer_vector_width_type == PVW_NONE))\n     opts->x_prefer_vector_width_type = PVW_AVX128;\n "}, {"sha": "7115ec44c2a41c5a22bbdedc08dfadb5b8386e55", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "patch": "@@ -18959,7 +18959,7 @@ ix86_vec_cost (machine_mode mode, int cost)\n       && TARGET_SSE_SPLIT_REGS)\n     return cost * 2;\n   if (GET_MODE_BITSIZE (mode) > 128\n-      && TARGET_AVX128_OPTIMAL)\n+      && TARGET_AVX256_SPLIT_REGS)\n     return cost * GET_MODE_BITSIZE (mode) / 128;\n   return cost;\n }\n@@ -21297,7 +21297,7 @@ ix86_reassociation_width (unsigned int op, machine_mode mode)\n \treturn 1;\n \n       /* Account for targets that splits wide vectors into multiple parts.  */\n-      if (TARGET_AVX128_OPTIMAL && GET_MODE_BITSIZE (mode) > 128)\n+      if (TARGET_AVX256_SPLIT_REGS && GET_MODE_BITSIZE (mode) > 128)\n \tdiv = GET_MODE_BITSIZE (mode) / 128;\n       else if (TARGET_SSE_SPLIT_REGS && GET_MODE_BITSIZE (mode) > 64)\n \tdiv = GET_MODE_BITSIZE (mode) / 64;"}, {"sha": "108456b14d4c54d9059e9950c64be16426c11ffd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "patch": "@@ -578,8 +578,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_AVOID_LEA_FOR_ADDR]\n #define TARGET_SOFTWARE_PREFETCHING_BENEFICIAL \\\n \tix86_tune_features[X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL]\n-#define TARGET_AVX128_OPTIMAL \\\n-\tix86_tune_features[X86_TUNE_AVX128_OPTIMAL]\n+#define TARGET_AVX256_SPLIT_REGS \\\n+\tix86_tune_features[X86_TUNE_AVX256_SPLIT_REGS]\n #define TARGET_GENERAL_REGS_SSE_SPILL \\\n \tix86_tune_features[X86_TUNE_GENERAL_REGS_SSE_SPILL]\n #define TARGET_AVOID_MEM_OPND_FOR_CMOVE \\"}, {"sha": "328535d38d78e5ac66b00311366b21c970a25651", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586bbef191b4f804289fb5ffc0e7a1a5e525bc4b/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=586bbef191b4f804289fb5ffc0e7a1a5e525bc4b", "patch": "@@ -453,6 +453,10 @@ DEF_TUNE (X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL, \"256_unaligned_load_optimal\",\n DEF_TUNE (X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL, \"256_unaligned_store_optimal\",\n \t  ~(m_NEHALEM | m_SANDYBRIDGE | m_BDVER | m_ZNVER1 | m_GENERIC))\n \n+/* X86_TUNE_AVX256_SPLIT_REGS: if true, AVX256 ops are split into two AVX128 ops.  */\n+DEF_TUNE (X86_TUNE_AVX256_SPLIT_REGS, \"avx256_split_regs\",m_BDVER | m_BTVER2\n+\t  | m_ZNVER1)\n+\n /* X86_TUNE_AVX128_OPTIMAL: Enable 128-bit AVX instruction generation for\n    the auto-vectorizer.  */\n DEF_TUNE (X86_TUNE_AVX128_OPTIMAL, \"avx128_optimal\", m_BDVER | m_BTVER2"}]}