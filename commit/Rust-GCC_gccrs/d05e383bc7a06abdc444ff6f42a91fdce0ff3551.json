{"sha": "d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1ZTM4M2JjN2EwNmFiZGM0NDRmZjZmNDJhOTFmZGNlMGZmMzU1MQ==", "commit": {"author": {"name": "Michael Zolotukhin", "email": "michael.v.zolotukhin@intel.com", "date": "2012-08-08T13:25:58Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2012-08-08T13:25:58Z"}, "message": "i386-common.c (OPTION_MASK_ISA_ADX_SET): New.\n\n\nChangeLog:\n2012-08-08 Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\n        * common/config/i386/i386-common.c (OPTION_MASK_ISA_ADX_SET): New.\n        (OPTION_MASK_ISA_ADX_UNSET): Likewise.\n        (ix86_handle_option): Handle madx option.\n        * config.gcc (i[34567]86-*-*): Add adxintrin.h.\n        (x86_64-*-*): Likewise.\n        * config/i386/adxintrin.h: New header.\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect ADCX/ADOX\n        support.\n        * config/i386/i386-builtin-types.def\n        (UCHAR_FTYPE_UCHAR_UINT_UINT_PUNSIGNED): New function type.\n        (UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG): Likewise.\n        * config/i386/i386-c.c: Define __ADX__ if needed.\n        * config/i386/i386.c (ix86_target_string): Define -madx option.\n        (PTA_ADX): New.\n        (ix86_option_override_internal): Handle new option.\n        (ix86_valid_target_attribute_inner_p): Add OPT_madx.\n        (ix86_builtins): Add IX86_BUILTIN_ADDCARRYX32,\n        IX86_BUILTIN_ADDCARRYX64.\n        (ix86_init_mmx_sse_builtins): Define corresponding built-ins.\n        (ix86_expand_builtin): Handle these built-ins.\n        (ix86_expand_args_builtin): Handle new function types.\n        * config/i386/i386.h (TARGET_ADX): New.\n        * config/i386/i386.md (adcx<mode>3): New define_insn.\n        * config/i386/i386.opt (madx): New.\n        * config/i386/x86intrin.h: Include adxintrin.h.\n\ntestsuite/ChangeLog:\n        * gcc.target/i386/adx-addcarryx32-1.c: New.\n        * gcc.target/i386/adx-addcarryx32-2.c: New.\n        * gcc.target/i386/adx-addcarryx64-1.c: New.\n        * gcc.target/i386/adx-addcarryx64-2.c: New.\n        * gcc.target/i386/adx-check.h: New.\n        * gcc.target/i386/i386.exp (check_effective_target_adx): New.\n        * gcc.target/i386/sse-12.c: Add -madx.\n        * gcc.target/i386/sse-13.c: Ditto.\n        * gcc.target/i386/sse-14.c: Ditto.\n        * gcc.target/i386/sse-22.c: Ditto.\n        * gcc.target/i386/sse-23.c: Ditto.\n        * g++.dg/other/i386-2.C: Ditto.\n        * g++.dg/other/i386-3.C: Ditto.\n\nFrom-SVN: r190227", "tree": {"sha": "08fa7a69df52351b77d733e3e1b596f2a978f98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08fa7a69df52351b77d733e3e1b596f2a978f98f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/comments", "author": null, "committer": null, "parents": [{"sha": "916f8bbf52a678ae51404a571cdcaad19117aff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916f8bbf52a678ae51404a571cdcaad19117aff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916f8bbf52a678ae51404a571cdcaad19117aff3"}], "stats": {"total": 388, "additions": 376, "deletions": 12}, "files": [{"sha": "5aa6902dbbecb0ef009adacb510e2f31ca9ddb86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -1,3 +1,31 @@\n+2012-08-08 Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_ADX_SET): New.\n+\t(OPTION_MASK_ISA_ADX_UNSET): Likewise.\n+\t(ix86_handle_option): Handle madx option.\n+\t* config.gcc (i[34567]86-*-*): Add adxintrin.h.\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/adxintrin.h: New header.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect ADCX/ADOX\n+\tsupport.\n+\t* config/i386/i386-builtin-types.def\n+\t(UCHAR_FTYPE_UCHAR_UINT_UINT_PUNSIGNED): New function type.\n+\t(UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG): Likewise.\n+\t* config/i386/i386-c.c: Define __ADX__ if needed.\n+\t* config/i386/i386.c (ix86_target_string): Define -madx option.\n+\t(PTA_ADX): New.\n+\t(ix86_option_override_internal): Handle new option.\n+\t(ix86_valid_target_attribute_inner_p): Add OPT_madx.\n+\t(ix86_builtins): Add IX86_BUILTIN_ADDCARRYX32,\n+\tIX86_BUILTIN_ADDCARRYX64.\n+\t(ix86_init_mmx_sse_builtins): Define corresponding built-ins.\n+\t(ix86_expand_builtin): Handle these built-ins.\n+\t(ix86_expand_args_builtin): Handle new function types.\n+\t* config/i386/i386.h (TARGET_ADX): New.\n+\t* config/i386/i386.md (adcx<mode>3): New define_insn.\n+\t* config/i386/i386.opt (madx): New.\n+\t* config/i386/x86intrin.h: Include adxintrin.h.\n+\n 2012-08-08  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78.c: Include tree-pass.h."}, {"sha": "e05cd562f44a55d443a0f5a532cd2a82933c8678", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n+#define OPTION_MASK_ISA_ADX_SET OPTION_MASK_ISA_ADX\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -127,6 +128,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n+#define OPTION_MASK_ISA_ADX_UNSET OPTION_MASK_ISA_ADX\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -598,6 +600,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_madx:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_ADX_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_ADX_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_ADX_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_ADX_UNSET;\n+\t}\n+      return true;\n+\n   /* Comes from final.c -- no real reason to change it.  */\n #define MAX_CODE_ALIGN 16\n "}, {"sha": "f40ac0ea739bcfb19d48b07353df71f6c8047225", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -361,7 +361,7 @@ i[34567]86-*-*)\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h bmi2intrin.h tbmintrin.h\n \t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h\"\n+\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h adxintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -375,7 +375,7 @@ x86_64-*-*)\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h tbmintrin.h bmi2intrin.h\n \t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h\"\n+\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h adxintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "2e2a18b62cf5f3f460d9cb19ab8c252055aa4e98", "filename": "gcc/config/i386/adxintrin.h", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fadxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fadxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fadxintrin.h?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -0,0 +1,53 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED && !defined _IMMINTRIN_H_INCLUDED\n+# error \"Never use <adxintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef __ADX__\n+# error \"Flag-preserving add-carry instructions not enabled\"\n+#endif /* __ADX__ */\n+\n+#ifndef _ADXINTRIN_H_INCLUDED\n+#define _ADXINTRIN_H_INCLUDED\n+\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_addcarryx_u32 (unsigned char __CF, unsigned int __X,\n+\t\tunsigned int __Y, unsigned int *__P)\n+{\n+    return __builtin_ia32_addcarryx_u32 (__CF, __X, __Y, __P);\n+}\n+\n+#ifdef __x86_64__\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_addcarryx_u64 (unsigned char __CF, unsigned long __X,\n+\t\tunsigned long __Y, unsigned long long *__P)\n+{\n+    return __builtin_ia32_addcarryx_u64 (__CF, __X, __Y, __P);\n+}\n+#endif\n+\n+#endif /* _ADXINTRIN_H_INCLUDED */"}, {"sha": "0b56f3f47b1351ebdf6eba6d621a15a275ceece2", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -399,7 +399,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_bmi = 0, has_bmi2 = 0, has_tbm = 0, has_lzcnt = 0;\n   unsigned int has_hle = 0, has_rtm = 0;\n   unsigned int has_rdrnd = 0, has_f16c = 0, has_fsgsbase = 0;\n-  unsigned int has_rdseed = 0, has_prfchw = 0;\n+  unsigned int has_rdseed = 0, has_prfchw = 0, has_adx = 0;\n \n   bool arch;\n \n@@ -468,6 +468,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_fsgsbase = ebx & bit_FSGSBASE;\n       has_rdseed = ebx & bit_RDSEED;\n       has_prfchw = ecx & bit_PRFCHW;\n+      has_adx = ebx & bit_ADX;\n     }\n \n   /* Check cpuid level of extended features.  */\n@@ -750,11 +751,12 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *fsgsbase = has_fsgsbase ? \" -mfsgsbase\" : \" -mno-fsgsbase\";\n       const char *rdseed = has_rdseed ? \" -mrdseed\" : \" -mno-rdseed\";\n       const char *prfchw = has_prfchw ? \" -mprfchw\" : \" -mno-prfchw\";\n+      const char *adx = has_adx ? \" -madx\" : \" -mno-adx\";\n \n       options = concat (options, cx16, sahf, movbe, ase, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n-\t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, NULL);\n+\t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx, NULL);\n     }\n \n done:"}, {"sha": "8a199c0a7f8d0eff1fba2c9b5c26fb41c87e5bb9", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -446,6 +446,9 @@ DEF_FUNCTION_TYPE (V16QI, V16QI, INT, V16QI, INT, INT)\n \n DEF_FUNCTION_TYPE (V8QI, QI, QI, QI, QI, QI, QI, QI, QI)\n \n+DEF_FUNCTION_TYPE (UCHAR, UCHAR, UINT, UINT, PUNSIGNED)\n+DEF_FUNCTION_TYPE (UCHAR, UCHAR, ULONGLONG, ULONGLONG, PULONGLONG)\n+\n DEF_FUNCTION_TYPE (V2DF, V2DF, PCDOUBLE, V4SI, V2DF, INT)\n DEF_FUNCTION_TYPE (V4DF, V4DF, PCDOUBLE, V4SI, V4DF, INT)\n DEF_FUNCTION_TYPE (V4DF, V4DF, PCDOUBLE, V8SI, V4DF, INT)"}, {"sha": "d00e0ba54b93910419874f519aca9d4fa9afa983", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -300,6 +300,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__RDSEED__\");\n   if (isa_flag & OPTION_MASK_ISA_PRFCHW)\n     def_or_undef (parse_in, \"__PRFCHW__\");\n+  if (isa_flag & OPTION_MASK_ISA_ADX)\n+    def_or_undef (parse_in, \"__ADX__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))\n     def_or_undef (parse_in, \"__SSE_MATH__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))"}, {"sha": "17d4446b9a6c60b1e149d32a6cabcc1670f295a4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -2769,6 +2769,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n     { \"-mrdseed\",\tOPTION_MASK_ISA_RDSEED },\n     { \"-mprfchw\",\tOPTION_MASK_ISA_PRFCHW },\n+    { \"-madx\",\t\tOPTION_MASK_ISA_ADX },\n     { \"-mtbm\",\t\tOPTION_MASK_ISA_TBM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n@@ -3047,6 +3048,7 @@ ix86_option_override_internal (bool main_args_p)\n #define PTA_HLE\t\t\t(HOST_WIDE_INT_1 << 33)\n #define PTA_PRFCHW\t\t(HOST_WIDE_INT_1 << 34)\n #define PTA_RDSEED\t\t(HOST_WIDE_INT_1 << 35)\n+#define PTA_ADX\t\t\t(HOST_WIDE_INT_1 << 36)\n /* if this reaches 64, need to widen struct pta flags below */\n \n   static struct pta\n@@ -3538,6 +3540,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_RDSEED\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_RDSEED))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_RDSEED;\n+\tif (processor_alias_table[i].flags & PTA_ADX\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_ADX))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_ADX;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -4361,6 +4366,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"hle\",\tOPT_mhle),\n     IX86_ATTR_ISA (\"prfchw\",\tOPT_mprfchw),\n     IX86_ATTR_ISA (\"rdseed\",\tOPT_mrdseed),\n+    IX86_ATTR_ISA (\"adx\",\tOPT_madx),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -26107,6 +26113,10 @@ enum ix86_builtins\n   IX86_BUILTIN_PEXT32,\n   IX86_BUILTIN_PEXT64,\n \n+  /* ADX instructions.  */\n+  IX86_BUILTIN_ADDCARRYX32,\n+  IX86_BUILTIN_ADDCARRYX64,\n+\n   /* FSGSBASE instructions.  */\n   IX86_BUILTIN_RDFSBASE32,\n   IX86_BUILTIN_RDFSBASE64,\n@@ -27957,6 +27967,14 @@ ix86_init_mmx_sse_builtins (void)\n \t       \"__builtin_ia32_rdseed_di_step\",\n \t       INT_FTYPE_PULONGLONG, IX86_BUILTIN_RDSEED64_STEP);\n \n+  /* ADCX */\n+  def_builtin (OPTION_MASK_ISA_ADX, \"__builtin_ia32_addcarryx_u32\",\n+\t       UCHAR_FTYPE_UCHAR_UINT_UINT_PUNSIGNED, IX86_BUILTIN_ADDCARRYX32);\n+  def_builtin (OPTION_MASK_ISA_ADX && OPTION_MASK_ISA_64BIT,\n+\t       \"__builtin_ia32_addcarryx_u64\",\n+\t       UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG,\n+\t       IX86_BUILTIN_ADDCARRYX64);\n+\n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n     {\n@@ -29472,6 +29490,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       nargs = 4;\n       nargs_constant = 2;\n       break;\n+    case UCHAR_FTYPE_UCHAR_UINT_UINT_PUNSIGNED:\n+    case UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG:\n+      nargs = 4;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -30318,7 +30340,62 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n         target = gen_reg_rtx (SImode);\n \n       emit_insn (gen_zero_extendqisi2 (target, op2));\n+      return target;\n+\n+    case IX86_BUILTIN_ADDCARRYX32:\n+      icode = CODE_FOR_adcxsi3;\n+      mode0 = SImode;\n+      goto addcarryx;\n+\n+    case IX86_BUILTIN_ADDCARRYX64:\n+      icode = CODE_FOR_adcxdi3;\n+      mode0 = DImode;\n+\n+addcarryx:\n+      arg0 = CALL_EXPR_ARG (exp, 0); /* unsigned char c_in.  */\n+      arg1 = CALL_EXPR_ARG (exp, 1); /* unsigned int src1.  */\n+      arg2 = CALL_EXPR_ARG (exp, 2); /* unsigned int src2.  */\n+      arg3 = CALL_EXPR_ARG (exp, 3); /* unsigned int *sum_out.  */\n+\n+      op0 = gen_reg_rtx (QImode);\n+\n+      /* Generate CF from input operand.  */\n+      op1 = expand_normal (arg0);\n+      if (GET_MODE (op1) != QImode)\n+\top1 = convert_to_mode (QImode, op1, 1);\n+      op1 = copy_to_mode_reg (QImode, op1);\n+      emit_insn (gen_addqi3_cc (op0, op1, constm1_rtx));\n+\n+      /* Gen ADCX instruction to compute X+Y+CF.  */\n+      op2 = expand_normal (arg1);\n+      op3 = expand_normal (arg2);\n+\n+      if (!REG_P (op2))\n+\top2 = copy_to_mode_reg (mode0, op2);\n+      if (!REG_P (op3))\n+\top3 = copy_to_mode_reg (mode0, op3);\n+\n+      op0 = gen_reg_rtx (mode0);\n+\n+      op4 = gen_rtx_REG (CCCmode, FLAGS_REG);\n+      pat = gen_rtx_LTU (VOIDmode, op4, const0_rtx);\n+      emit_insn (GEN_FCN (icode) (op0, op2, op3, op4, pat));\n+\n+      /* Store the result.  */\n+      op4 = expand_normal (arg3);\n+      if (!address_operand (op4, VOIDmode))\n+\t{\n+\t  op4 = convert_memory_address (Pmode, op4);\n+\t  op4 = copy_addr_to_reg (op4);\n+\t}\n+      emit_move_insn (gen_rtx_MEM (mode0, op4), op0);\n+\n+      /* Return current CF value.  */\n+      if (target == 0)\n+        target = gen_reg_rtx (QImode);\n \n+      PUT_MODE (pat, QImode);\n+      emit_insn (gen_rtx_SET (VOIDmode, target, pat));\n       return target;\n \n     case IX86_BUILTIN_GATHERSIV2DF:"}, {"sha": "c2b44607585c401c7019ac44cdf98ef3c5a99fa9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -78,6 +78,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_HLE\tOPTION_ISA_HLE\n #define TARGET_RDSEED\tOPTION_ISA_RDSEED\n #define TARGET_PRFCHW\tOPTION_ISA_PRFCHW\n+#define TARGET_ADX\tOPTION_ISA_ADX\n \n #define TARGET_LP64\tOPTION_ABI_64\n #define TARGET_X32\tOPTION_ABI_X32"}, {"sha": "6774ae279d6662ed1b392ccd61f0370af22869ea", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -6633,6 +6633,29 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \f\n+;; ADCX instruction\n+\n+(define_insn \"adcx<mode>3\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (plus:SWI48\n+\t    (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\")\n+\t    (plus:SWI48\n+\t      (match_operator 4 \"ix86_carry_flag_operator\"\n+\t       [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n+\t      (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\")))\n+\t  (const_int 0)))\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(plus:SWI48 (match_dup 1)\n+\t\t    (plus:SWI48 (match_op_dup 4\n+\t\t\t\t [(match_dup 3) (const_int 0)])\n+\t\t\t\t(match_dup 2))))]\n+  \"TARGET_ADX && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"adcx\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\f\n ;; Overflow setting add and subtract instructions\n \n (define_insn \"*add<mode>3_cconly_overflow\""}, {"sha": "e4f78f3ce50f38953e289821f4dba6846857b491", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -540,6 +540,10 @@ mprfchw\n Target Report Mask(ISA_PRFCHW) Var(ix86_isa_flags) Save\n Support PREFETCHW instruction\n \n+madx\n+Target Report Mask(ISA_ADX) Var(ix86_isa_flags) Save\n+Support flag-preserving add-carry instructions\n+\n mtbm\n Target Report Mask(ISA_TBM) Var(ix86_isa_flags) Save\n Support TBM built-in functions and code generation"}, {"sha": "dc5c58eebf8af8c412cf54fa8e20b2e6ec90ad6c", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -105,4 +105,8 @@\n #include <prfchwintrin.h>\n #endif\n \n+#ifdef __ADX__\n+#include <adxintrin.h>\n+#endif\n+\n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "dc3523ade1d7b7c50fcb02e37855faa1862fc693", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -1,3 +1,19 @@\n+2012-08-08 Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.target/i386/adx-addcarryx32-1.c: New.\n+\t* gcc.target/i386/adx-addcarryx32-2.c: New.\n+\t* gcc.target/i386/adx-addcarryx64-1.c: New.\n+\t* gcc.target/i386/adx-addcarryx64-2.c: New.\n+\t* gcc.target/i386/adx-check.h: New.\n+\t* gcc.target/i386/i386.exp (check_effective_target_adx): New.\n+\t* gcc.target/i386/sse-12.c: Add -madx.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2012-08-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.dg/tree-ssa/slsr-5.c: New."}, {"sha": "197497fcfe9a4c8febdcdac4276c2167104046d9", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "780731e03589a5d23d012e7f79ec0de859260d70", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "daf5779b1963ea40119c041fa86d314d87fcc507", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx32-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-madx -O2\" } */\n+/* { dg-final { scan-assembler \"adcx\" } } */\n+\n+#include <x86intrin.h>\n+\n+volatile unsigned char c;\n+volatile unsigned int x, y;\n+unsigned int *sum;\n+\n+void extern\n+adx_test (void)\n+{\n+    c = _addcarryx_u32 (c, x, y, sum);\n+}"}, {"sha": "d38d7ee784fc322ce0e7385b663bda5becb39237", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx32-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-2.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-madx -O2\" } */\n+/* { dg-require-effective-target adx } */\n+\n+#include <x86intrin.h>\n+#include \"adx-check.h\"\n+\n+static void\n+adx_test (void)\n+{\n+  volatile unsigned char c;\n+  unsigned int x;\n+  volatile unsigned int y, sum_ref;\n+\n+  c = 0;\n+  x = y = 0xFFFFFFFF;\n+  sum_ref = 0xFFFFFFFE;\n+\n+  /* X = 0xFFFFFFFF, Y = 0xFFFFFFFF, C = 0.  */\n+  c = _addcarryx_u32 (c, x, y, &x);\n+  /* X = 0xFFFFFFFE, Y = 0xFFFFFFFF, C = 1.  */\n+  c = _addcarryx_u32 (c, x, y, &x);\n+  /* X = 0xFFFFFFFE, Y = 0xFFFFFFFF, C = 1.  */\n+\n+  if (x != sum_ref)\n+    abort ();\n+}"}, {"sha": "45beca851f2ed55c5a2f748995b6df0ad5ca51ac", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx64-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-madx -O2\" } */\n+/* { dg-final { scan-assembler \"adcx\" } } */\n+\n+#include <x86intrin.h>\n+\n+volatile unsigned char c;\n+volatile unsigned long long x, y;\n+unsigned long long *sum;\n+\n+void extern\n+adx_test (void)\n+{\n+    c = _addcarryx_u64 (c, x, y, sum);\n+}"}, {"sha": "6aa2539c0d1f454caf7bbe3073fdcd59dc0dcee1", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx64-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-2.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-madx -O2\" } */\n+/* { dg-require-effective-target adx } */\n+\n+#include <x86intrin.h>\n+#include \"adx-check.h\"\n+\n+static void\n+adx_test (void)\n+{\n+  volatile unsigned char c;\n+  unsigned long long x;\n+  volatile unsigned long long y, sum_ref;\n+\n+  c = 0;\n+  x = y = 0xFFFFFFFFFFFFFFFFLL;\n+  sum_ref = 0xFFFFFFFFFFFFFFFELL;\n+\n+  /* X = 0xFFFFFFFFFFFFFFFF, Y = 0xFFFFFFFFFFFFFFFF, C = 0.  */\n+  c = _addcarryx_u64 (c, x, y, &x);\n+  /* X = 0xFFFFFFFFFFFFFFFE, Y = 0xFFFFFFFFFFFFFFFF, C = 1.  */\n+  c = _addcarryx_u64 (c, x, y, &x);\n+  /* X = 0xFFFFFFFFFFFFFFFE, Y = 0xFFFFFFFFFFFFFFFF, C = 1.  */\n+\n+  if (x != sum_ref)\n+    abort ();\n+}"}, {"sha": "580cb49ed439c620b281c4f5cec68dd81051aaf1", "filename": "gcc/testsuite/gcc.target/i386/adx-check.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-check.h?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -0,0 +1,40 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+\n+static void adx_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  adx_test ();\n+}\n+\n+  int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run ADX test only if host has ADX support.  */\n+\n+  if (__get_cpuid_max (0, NULL) < 7)\n+    return 0;\n+\n+  __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+  if ((ebx & bit_ADX) == bit_ADX)\n+    {\n+      do_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+      return 0;\n+    }\n+#ifdef DEBUG\n+  printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}\n+"}, {"sha": "37f43a60f05d730cf158a15831debf052f86d556", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -243,6 +243,18 @@ proc check_effective_target_bmi2 { } {\n     } \"-mbmi2\" ]\n }\n \n+# Return 1 if ADX instructions can be compiled.\n+proc check_effective_target_adx { } {\n+    return [check_no_compiler_messages adx object {\n+\tunsigned char\n+\t_adxcarry_u32 (unsigned char __CF, unsigned int __X,\n+\t\t   unsigned int __Y, unsigned int *__P)\n+\t{\n+\t    return __builtin_ia32_addcarryx_u32 (__CF, __X, __Y, __P);\n+\t}\n+    } \"-madx\" ]\n+}\n+\n # Return 1 if rtm instructions can be compiled.\n proc check_effective_target_rtm { } {\n     return [check_no_compiler_messages rtm object {"}, {"sha": "0d78a0c84dc1e787c2a8c1feb278b28f2c727a26", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "4c575baaf784012f9cbd787ed44ccb389e380fc8", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "c8c13cecb5313c4cf83af40b52c75b54244ca17b", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "ec832552874555d372821f29598e4c6a2553f846", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -50,7 +50,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -264,7 +264,7 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "f046ef643b5e6d540d473a8fc4c65723f73cd9d8", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05e383bc7a06abdc444ff6f42a91fdce0ff3551/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=d05e383bc7a06abdc444ff6f42a91fdce0ff3551", "patch": "@@ -183,7 +183,7 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}