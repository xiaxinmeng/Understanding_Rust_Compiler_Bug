{"sha": "d66f032937c92a8fdc740187cf722715c342d6ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2ZjAzMjkzN2M5MmE4ZmRjNzQwMTg3Y2Y3MjI3MTVjMzQyZDZhZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-02-05T21:34:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-02-05T21:34:46Z"}, "message": "Make lto.exp work with Tcl 8.4\n\n\"dict\" was added in Tcl 8.5, but until a couple of weeks ago the\ntestsuite had worked with 8.4.\n\nThis patch uses arrays instead, like we do for the caching in\ntarget-supports.exp.  It is a bit uglier than using dicts was,\nbut hopefully not too bad...\n\n2018-02-05  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/testsuite/\n\t* lib/lto.exp (lto_handle_diagnostics): Remove messages_by_file\n\targument and use dg-messages-by-file instead.  Expect it to be\n\tan array rather than a dict.\n\t(lto-link-and-maybe-run): Remove messages_by_file argument and\n\tuse an upvar for dg-messages-by-file.  Update call to\n\tlto_handle_diagnostics.\n\t(lt-get-options): Treat dg-messages-by-file as an array\n\trather than a dict.\n\t(lto-get-options-main): Likewise.  Set the entry rather than appending.\n\t(lto-execute): Treat dg-messages-by-file as an array rather than\n\ta dict.  Update call to lto-link-and-maybe-run.\n\nFrom-SVN: r257397", "tree": {"sha": "79c01d719d7057bc3b2fe307a7da9418e71553a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79c01d719d7057bc3b2fe307a7da9418e71553a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d66f032937c92a8fdc740187cf722715c342d6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66f032937c92a8fdc740187cf722715c342d6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66f032937c92a8fdc740187cf722715c342d6ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66f032937c92a8fdc740187cf722715c342d6ad/comments", "author": null, "committer": null, "parents": [{"sha": "60d25b800adf1c70231eceeca1cd3a70d009c5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d25b800adf1c70231eceeca1cd3a70d009c5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d25b800adf1c70231eceeca1cd3a70d009c5a9"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "62ee8f2a26a224b580f79f4412aaae7026aeb978", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66f032937c92a8fdc740187cf722715c342d6ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66f032937c92a8fdc740187cf722715c342d6ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d66f032937c92a8fdc740187cf722715c342d6ad", "patch": "@@ -1,3 +1,17 @@\n+2018-02-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* lib/lto.exp (lto_handle_diagnostics): Remove messages_by_file\n+\targument and use dg-messages-by-file instead.  Expect it to be\n+\tan array rather than a dict.\n+\t(lto-link-and-maybe-run): Remove messages_by_file argument and\n+\tuse an upvar for dg-messages-by-file.  Update call to\n+\tlto_handle_diagnostics.\n+\t(lt-get-options): Treat dg-messages-by-file as an array\n+\trather than a dict.\n+\t(lto-get-options-main): Likewise.  Set the entry rather than appending.\n+\t(lto-execute): Treat dg-messages-by-file as an array rather than\n+\ta dict.  Update call to lto-link-and-maybe-run.\n+\n 2018-02-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/82782"}, {"sha": "58a84aa19369a459fd047f2e37a864202d6d87ef", "filename": "gcc/testsuite/lib/lto.exp", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66f032937c92a8fdc740187cf722715c342d6ad/gcc%2Ftestsuite%2Flib%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66f032937c92a8fdc740187cf722715c342d6ad/gcc%2Ftestsuite%2Flib%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Flto.exp?ref=d66f032937c92a8fdc740187cf722715c342d6ad", "patch": "@@ -111,18 +111,22 @@ proc lto_handle_diagnostics_for_file { name filename messages_for_file text } {\n # the expected diagnostics within TEXT, issuing PASS/FAIL results.\n # Return TEXT, stripped of any diagnostics that were handled.\n #\n-# MESSAGES_BY_FILE is a dict; the keys are source files (with paths)\n-# the values are lists of expected messages, akin to DejaGnu's \"dg-messages\"\n-# variable.\n # TEXT is the textual output from the LTO link.\n \n-proc lto_handle_diagnostics { messages_by_file text } {\n+proc lto_handle_diagnostics { text } {\n     global testcase\n \n+    upvar dg-messages-by-file messages_by_file\n+\n     verbose \"lto_handle_diagnostics: entry: $text\" 2\n-    verbose \"  messages_by_file $messages_by_file\" 3\n \n-    dict for {src dg-messages} $messages_by_file {\n+    if { ![array exists messages_by_file] } {\n+\terror \"lto_handle_diagnostics: messages_by_file not defined\"\n+    }\n+\n+    foreach src [lsort [array names messages_by_file]] {\n+\tset dg-messages $messages_by_file($src)\n+\tverbose \"  messages for $src: ${dg-messages}\" 3\n \tset text [lto_handle_diagnostics_for_file $testcase $src \\\n \t\t      ${dg-messages} $text]\n     }\n@@ -294,16 +298,15 @@ proc lto-obj { source dest optall optfile optstr xfaildata } {\n # OPTALL is a list of compiler and linker options to use for all tests\n # OPTFILE is a list of compiler and linker options to use for this test\n # OPTSTR is the list of options to list in messages\n-# MESSAGES_BY_FILE is a dict of (src, dg-messages)\n-proc lto-link-and-maybe-run { testname objlist dest optall optfile optstr \\\n-\t\t\t      messages_by_file } {\n+proc lto-link-and-maybe-run { testname objlist dest optall optfile optstr } {\n     global testcase\n     global tool\n     global compile_type\n     global board_info\n \n+    upvar dg-messages-by-file dg-messages-by-file\n+\n     verbose \"lto-link-and-maybe-run\" 2\n-    verbose \"  messages_by_file $messages_by_file\" 3\n \n     # Check that all of the objects were built successfully.\n     foreach obj [split $objlist] {\n@@ -342,7 +345,7 @@ proc lto-link-and-maybe-run { testname objlist dest optall optfile optstr \\\n     }\n \n     # Check for diagnostics specified by directives\n-    set comp_output [lto_handle_diagnostics $messages_by_file $comp_output]\n+    set comp_output [lto_handle_diagnostics $comp_output]\n \n     # Prune unimportant visibility warnings before checking output.\n     set comp_output [lto_prune_warns $comp_output]\n@@ -527,7 +530,7 @@ proc lto-get-options-main { src } {\n     }\n \n     verbose \"dg-messages: ${dg-messages}\" 3\n-    dict append dg-messages-by-file $src ${dg-messages}\n+    set dg-messages-by-file($src) ${dg-messages}\n \n     # Return flags to use for compiling the primary source file and for\n     # linking.\n@@ -578,7 +581,11 @@ proc lto-get-options { src } {\n     }\n \n     verbose \"dg-messages: ${dg-messages}\" 3\n-    dict append dg-messages-by-file $src ${dg-messages}\n+    if { [info exists dg-messages-by-file($src)] } {\n+\tappend dg-messages-by-file($src) ${dg-messages}\n+    } else {\n+\tset dg-messages-by-file($src) ${dg-messages}\n+    }\n \n     return ${dg-extra-tool-flags}\n }\n@@ -609,7 +616,7 @@ proc lto-execute { src1 sid } {\n     verbose \"lto-execute: $src1\" 1\n     set compile_type \"run\"\n     set dg-do-what [list ${dg-do-what-default} \"\" P]\n-    set dg-messages-by-file [dict create]\n+    array set dg-messages-by-file [list]\n     set extra_flags(0) [lto-get-options-main $src1]\n     set compile_xfail(0) \"\" \n \n@@ -733,7 +740,7 @@ proc lto-execute { src1 sid } {\n \t    lto-link-and-maybe-run \\\n \t\t    \"[lindex $obj_list 0]-[lindex $obj_list end]\" \\\n \t\t    $obj_list $execname $filtered ${dg-extra-ld-options} \\\n-\t\t    $filtered ${dg-messages-by-file}\n+\t\t    $filtered\n \t}\n \n "}]}