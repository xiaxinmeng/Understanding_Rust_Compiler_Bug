{"sha": "21da6d0f102f64fa2965d25c0d3d367028c5272e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkYTZkMGYxMDJmNjRmYTI5NjVkMjVjMGQzZDM2NzAyOGM1MjcyZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-08-06T19:33:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-08-06T19:33:33Z"}, "message": "compatibility.cc: Make C++0x safe, add in explicit casts to bool for stream sentry objects.\n\n2009-08-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/compatibility.cc: Make C++0x safe, add in explicit casts to\n        bool for stream sentry objects.\n        * include/bits/istream.tcc: Same.\n        * include/bits/ostream.tcc: Same.\n        * include/bits/basic_string.tcc: Same.\n\t* include/bits/ostream_insert.h: Same.\n        * src/istream.cc: Same.\n\nFrom-SVN: r150539", "tree": {"sha": "495603992158a7b3ad1228b7ad2ee93c34be95f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/495603992158a7b3ad1228b7ad2ee93c34be95f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21da6d0f102f64fa2965d25c0d3d367028c5272e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21da6d0f102f64fa2965d25c0d3d367028c5272e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21da6d0f102f64fa2965d25c0d3d367028c5272e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21da6d0f102f64fa2965d25c0d3d367028c5272e/comments", "author": null, "committer": null, "parents": [{"sha": "de2aa20e758bdc2b520855b9a4dc1b344fb51b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2aa20e758bdc2b520855b9a4dc1b344fb51b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de2aa20e758bdc2b520855b9a4dc1b344fb51b18"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "c668f538db177fb220038ae489feae92a02a2d97", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=21da6d0f102f64fa2965d25c0d3d367028c5272e", "patch": "@@ -1,3 +1,13 @@\n+2009-08-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/compatibility.cc: Make C++0x safe, add in explicit casts to\n+        bool for stream sentry objects.\n+        * include/bits/istream.tcc: Same.\n+        * include/bits/ostream.tcc: Same.\n+        * include/bits/basic_string.tcc: Same.\n+\t* include/bits/ostream_insert.h: Same.\n+        * src/istream.cc: Same.\n+\n 2009-08-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/15523"}, {"sha": "10dea7563d8f61dda874b8aa944d70737fb3c8de", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=21da6d0f102f64fa2965d25c0d3d367028c5272e", "patch": "@@ -1007,7 +1007,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __size_type __extracted = 0;\n       typename __ios_base::iostate __err = __ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, false);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -1078,7 +1078,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const __size_type __n = __str.max_size();\n       typename __ios_base::iostate __err = __ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {"}, {"sha": "6d1679d152fb6699d0d3364eab2ffe06a303bbf4", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=21da6d0f102f64fa2965d25c0d3d367028c5272e", "patch": "@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_extract(_ValueT& __v)\n       {\n \tsentry __cerb(*this, false);\n-\tif (__cerb)\n+\tif (static_cast<bool>(__cerb))\n \t  {\n \t    ios_base::iostate __err = ios_base::goodbit;\n \t    __try\n@@ -116,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 118. basic_istream uses nonexistent num_get member functions.\n       sentry __cerb(*this, false);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -161,7 +161,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 118. basic_istream uses nonexistent num_get member functions.\n       sentry __cerb(*this, false);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -205,7 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, false);\n-      if (__cerb && __sbout)\n+      if (__sbout && static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -240,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -274,7 +274,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -311,7 +311,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -358,7 +358,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -402,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n         {\n           __try\n             {\n@@ -461,7 +461,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -494,7 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb && __n > 0)\n+      if (__n > 0 && static_cast<bool>(__cerb))\n         {\n           ios_base::iostate __err = ios_base::goodbit;\n           __try\n@@ -556,7 +556,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb && __n > 0)\n+      if (__n > 0 && static_cast<bool>(__cerb))\n         {\n           ios_base::iostate __err = ios_base::goodbit;\n           __try\n@@ -622,7 +622,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       int_type __c = traits_type::eof();\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -651,7 +651,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -680,7 +680,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -714,7 +714,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // 60. What is a formatted input function?\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -747,7 +747,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // 60. What is a formatted input function?\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -780,7 +780,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // DR60.  Do not change _M_gcount.\n       int __ret = -1;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -906,7 +906,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename __istream_type::int_type         __int_type;\n \n       typename __istream_type::sentry __cerb(__in, false);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -943,7 +943,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       streamsize __extracted = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, false);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {"}, {"sha": "df68a57fa6108942566f89d271fc573179a3177a", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=21da6d0f102f64fa2965d25c0d3d367028c5272e", "patch": "@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_insert(_ValueT __v)\n       {\n \tsentry __cerb(*this);\n-\tif (__cerb)\n+\tif (static_cast<bool>(__cerb))\n \t  {\n \t    ios_base::iostate __err = ios_base::goodbit;\n \t    __try\n@@ -121,7 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this);\n-      if (__cerb && __sbin)\n+      if (__sbin && static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -155,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Unformatted output functions should catch exceptions thrown\n       // from streambuf members.\n       sentry __cerb(*this);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Unformatted output functions should catch exceptions thrown\n       // from streambuf members.\n       sentry __cerb(*this);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    { _M_write(__s, __n); }"}, {"sha": "4fc52c86affdfd7c4c0ff6f5b00bce4ed2f2efb8", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=21da6d0f102f64fa2965d25c0d3d367028c5272e", "patch": "@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename __ostream_type::ios_base    __ios_base;\n \n       typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {"}, {"sha": "53d8e84e4f26d45e9794549f039de084524c987a", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=21da6d0f102f64fa2965d25c0d3d367028c5272e", "patch": "@@ -62,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       \n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb && __n > 0)\n+      if (__n > 0 && static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -134,7 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       \n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb && __n > 0)\n+      if (__n > 0 && static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try"}, {"sha": "0e7cbfb90843dcc454e793a448c6b39636146801", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21da6d0f102f64fa2965d25c0d3d367028c5272e/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=21da6d0f102f64fa2965d25c0d3d367028c5272e", "patch": "@@ -39,7 +39,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n           __try\n \t    {\n@@ -116,12 +116,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb && __n > 0)\n+      if (__n > 0 && static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n-\t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n+\t      const char_type __cdelim = traits_type::to_char_type(__delim);\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n@@ -205,7 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       streamsize __extracted = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, false);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -288,7 +288,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __size_type __extracted = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, false);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -370,7 +370,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const __size_type __n = __str.max_size();\n       ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {\n@@ -446,7 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n           __try\n \t    {\n@@ -523,7 +523,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__cerb && __n > 0)\n+      if (__n > 0 && static_cast<bool>(__cerb))\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -616,7 +616,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const __size_type __n = __str.max_size();\n       ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, true);\n-      if (__cerb)\n+      if (static_cast<bool>(__cerb))\n \t{\n \t  __try\n \t    {"}]}