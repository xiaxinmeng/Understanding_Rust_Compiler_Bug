{"sha": "43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmYTQxYzFhYWE1N2Q1OWNiYjAwZWQ1YzhjZmExODVkMDc1YjEwNQ==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-04-08T06:00:34Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-08T06:00:34Z"}, "message": "[NDS32] New option -malways-align and -malign-functions.\n\ngcc/\n\t* config/nds32/nds32-md-auxiliary.c (output_cond_branch): Output align\n\tinformation if necessary.\n\t(output_cond_branch_compare_zero): Likewise.\n\t* config/nds32/nds32.c (nds32_adjust_insn_length): Consider align case.\n\t(nds32_target_alignment): Refine for alignment.\n\t* config/nds32/nds32.h (NDS32_ALIGN_P): Define.\n\t(FUNCTION_BOUNDARY): Modify.\n\t* config/nds32/nds32.md (call_internal, call_value_internal): Consider\n\talign case.\n\t* config/nds32/nds32.opt (malways-align, malign-functions): New.\n\nFrom-SVN: r259217", "tree": {"sha": "652b54713eade088d9d7858699c190b4c8fb12da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/652b54713eade088d9d7858699c190b4c8fb12da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a"}], "stats": {"total": 134, "additions": 100, "deletions": 34}, "files": [{"sha": "6f98ac7af4b6c588e252fb6746054c3912585be2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "patch": "@@ -1,3 +1,16 @@\n+2018-04-08  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32-md-auxiliary.c (output_cond_branch): Output align\n+\tinformation if necessary.\n+\t(output_cond_branch_compare_zero): Likewise.\n+\t* config/nds32/nds32.c (nds32_adjust_insn_length): Consider align case.\n+\t(nds32_target_alignment): Refine for alignment.\n+\t* config/nds32/nds32.h (NDS32_ALIGN_P): Define.\n+\t(FUNCTION_BOUNDARY): Modify.\n+\t* config/nds32/nds32.md (call_internal, call_value_internal): Consider\n+\talign case.\n+\t* config/nds32/nds32.opt (malways-align, malign-functions): New.\n+\n 2018-04-08  Monk Chiang  <sh.chiang04@gmail.com>\n \n \t* config/nds32/constants.md (unspec_volatile_element): Add values for"}, {"sha": "720e85a20eb321e040bcbda5e764ae942455b642", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "patch": "@@ -128,6 +128,8 @@ output_cond_branch (int code, const char *suffix, bool r5_p,\n {\n   char pattern[256];\n   const char *cond_code;\n+  bool align_p = NDS32_ALIGN_P ();\n+  const char *align = align_p ? \"\\t.align\\t2\\n\" : \"\";\n \n   if (r5_p && REGNO (operands[2]) == 5 && TARGET_16_BIT)\n     {\n@@ -170,14 +172,14 @@ output_cond_branch (int code, const char *suffix, bool r5_p,\n       if (r5_p && TARGET_16_BIT)\n \t{\n \t  snprintf (pattern, sizeof (pattern),\n-\t\t    \"b%ss38\\t %%2, .LCB%%=\\n\\tj\\t%%3\\n.LCB%%=:\",\n-\t\t    cond_code);\n+\t\t    \"b%ss38\\t %%2, .LCB%%=\\n\\tj\\t%%3\\n%s.LCB%%=:\",\n+\t\t    cond_code, align);\n \t}\n       else\n \t{\n \t  snprintf (pattern, sizeof (pattern),\n-\t\t    \"b%s%s\\t%%1, %%2, .LCB%%=\\n\\tj\\t%%3\\n.LCB%%=:\",\n-\t\t    cond_code, suffix);\n+\t\t    \"b%s%s\\t%%1, %%2, .LCB%%=\\n\\tj\\t%%3\\n%s.LCB%%=:\",\n+\t\t    cond_code, suffix, align);\n \t}\n     }\n   else\n@@ -207,6 +209,8 @@ output_cond_branch_compare_zero (int code, const char *suffix,\n {\n   char pattern[256];\n   const char *cond_code;\n+  bool align_p = NDS32_ALIGN_P ();\n+  const char *align = align_p ? \"\\t.align\\t2\\n\" : \"\";\n   if (long_jump_p)\n     {\n       int inverse_code = nds32_inverse_cond_code (code);\n@@ -221,8 +225,8 @@ output_cond_branch_compare_zero (int code, const char *suffix,\n \t      .LCB0:\n \t   */\n \t  snprintf (pattern, sizeof (pattern),\n-\t\t    \"b%sz%s\\t.LCB%%=\\n\\tj\\t%%2\\n.LCB%%=:\",\n-\t\t    cond_code, suffix);\n+\t\t    \"b%sz%s\\t.LCB%%=\\n\\tj\\t%%2\\n%s.LCB%%=:\",\n+\t\t    cond_code, suffix, align);\n \t}\n       else\n \t{\n@@ -233,8 +237,8 @@ output_cond_branch_compare_zero (int code, const char *suffix,\n \t\t.LCB0:\n \t   */\n \t  snprintf (pattern, sizeof (pattern),\n-\t\t    \"b%sz%s\\t%%1, .LCB%%=\\n\\tj\\t%%2\\n.LCB%%=:\",\n-\t\t    cond_code, suffix);\n+\t\t    \"b%sz%s\\t%%1, .LCB%%=\\n\\tj\\t%%2\\n%s.LCB%%=:\",\n+\t\t    cond_code, suffix, align);\n \t}\n     }\n   else"}, {"sha": "76980d3ab1c0ad3ba762db68a2c24b76bfb1ba9b", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "patch": "@@ -1566,6 +1566,12 @@ nds32_adjust_insn_length (rtx_insn *insn, int length)\n     case CODE_FOR_call_internal:\n     case CODE_FOR_call_value_internal:\n       {\n+\tif (NDS32_ALIGN_P ())\n+\t  {\n+\t    rtx_insn *next_insn = next_active_insn (insn);\n+\t    if (next_insn && get_attr_length (next_insn) != 2)\n+\t      adjust_value += 2;\n+\t  }\n \t/* We need insert a nop after a noretun function call\n \t   to prevent software breakpoint corrupt the next function. */\n \tif (find_reg_note (insn, REG_NORETURN, NULL_RTX))\n@@ -4749,6 +4755,28 @@ nds32_ls_333_p (rtx rt, rtx ra, rtx imm, machine_mode mode)\n   return false;\n }\n \n+/* Return alignment for the label.  */\n+int\n+nds32_target_alignment (rtx_insn *label)\n+{\n+  rtx_insn *insn;\n+\n+  if (!NDS32_ALIGN_P ())\n+    return 0;\n+\n+  insn = next_active_insn (label);\n+\n+  /* Always align to 4 byte when first instruction after label is jump\n+     instruction since length for that might changed, so let's always align\n+     it for make sure we don't lose any perfomance here.  */\n+  if (insn == 0\n+      || (get_attr_length (insn) == 2\n+\t  && !JUMP_P (insn) && !CALL_P (insn)))\n+    return 0;\n+  else\n+    return 2;\n+}\n+\n bool\n nds32_split_double_word_load_store_p(rtx *operands, bool load_p)\n {\n@@ -4780,25 +4808,6 @@ nds32_use_blocks_for_constant_p (machine_mode mode,\n     return false;\n }\n \n-/* Return align 2 (log base 2) if the next instruction of LABEL is 4 byte.  */\n-int\n-nds32_target_alignment (rtx_insn *label)\n-{\n-  rtx_insn *insn;\n-\n-  if (optimize_size)\n-    return 0;\n-\n-  insn = next_active_insn (label);\n-\n-  if (insn == 0)\n-    return 0;\n-  else if ((get_attr_length (insn) % 4) == 0)\n-    return 2;\n-  else\n-    return 0;\n-}\n-\n /* ------------------------------------------------------------------------ */\n \n /* PART 5: Initialize target hook structure and definitions.  */"}, {"sha": "dc82c0a94948446bcda0c4229be8969c0544e88d", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "patch": "@@ -135,6 +135,11 @@ enum nds32_16bit_address_type\n #define NDS32_SINGLE_WORD_ALIGN_P(value) (((value) & 0x03) == 0)\n #define NDS32_DOUBLE_WORD_ALIGN_P(value) (((value) & 0x07) == 0)\n \n+/* Determine whether we would like to have code generation strictly aligned.\n+   We set it strictly aligned when -malways-align is enabled.\n+   Check gcc/common/config/nds32/nds32-common.c for the optimizations that\n+   apply -malways-align.  */\n+#define NDS32_ALIGN_P() (TARGET_ALWAYS_ALIGN)\n /* Get alignment according to mode or type information.\n    When 'type' is nonnull, there is no need to look at 'mode'.  */\n #define NDS32_MODE_TYPE_ALIGN(mode, type) \\\n@@ -643,7 +648,8 @@ enum nds32_builtins\n \n #define STACK_BOUNDARY 64\n \n-#define FUNCTION_BOUNDARY 32\n+#define FUNCTION_BOUNDARY \\\n+  ((NDS32_ALIGN_P () || TARGET_ALIGN_FUNCTION) ? 32 : 16)\n \n #define BIGGEST_ALIGNMENT 64\n "}, {"sha": "dd25e0690eff73b180e457d0fb2affdc0bc28b57", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "patch": "@@ -1426,16 +1426,29 @@\n \t      (clobber (reg:SI TA_REGNUM))])]\n   \"\"\n {\n+  rtx_insn *next_insn = next_active_insn (insn);\n+  bool align_p = (!(next_insn && get_attr_length (next_insn) == 2))\n+\t\t && NDS32_ALIGN_P ();\n   switch (which_alternative)\n     {\n     case 0:\n       if (TARGET_16_BIT)\n-\treturn \"jral5\\t%0\";\n+\t{\n+\t  if (align_p)\n+\t    return \"jral5\\t%0\\;.align 2\";\n+\t  else\n+\t    return \"jral5\\t%0\";\n+\t}\n       else\n-\treturn \"jral\\t%0\";\n+\t{\n+\t  if (align_p)\n+\t    return \"jral\\t%0\\;.align 2\";\n+\t  else\n+\t    return \"jral\\t%0\";\n+\t}\n     case 1:\n       return nds32_output_call (insn, operands, operands[0],\n-\t\t\t\t\"bal\\t%0\", \"jal\\t%0\", false);\n+\t\t\t\t\"bal\\t%0\", \"jal\\t%0\", align_p);\n     default:\n       gcc_unreachable ();\n     }\n@@ -1477,16 +1490,29 @@\n \t      (clobber (reg:SI TA_REGNUM))])]\n   \"\"\n {\n+  rtx_insn *next_insn = next_active_insn (insn);\n+  bool align_p = (!(next_insn && get_attr_length (next_insn) == 2))\n+\t\t && NDS32_ALIGN_P ();\n   switch (which_alternative)\n     {\n     case 0:\n       if (TARGET_16_BIT)\n-\treturn \"jral5\\t%1\";\n+\t{\n+\t  if (align_p)\n+\t    return \"jral5\\t%1\\;.align 2\";\n+\t  else\n+\t    return \"jral5\\t%1\";\n+\t}\n       else\n-\treturn \"jral\\t%1\";\n+\t{\n+\t  if (align_p)\n+\t    return \"jral\\t%1\\;.align 2\";\n+\t  else\n+\t    return \"jral\\t%1\";\n+\t}\n     case 1:\n       return nds32_output_call (insn, operands, operands[1],\n-\t\t\t\t\"bal\\t%1\", \"jal\\t%1\", false);\n+\t\t\t\t\"bal\\t%1\", \"jal\\t%1\", align_p);\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "ec6b9d4786454678f96af45b72de75c6ba85a5d2", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa41c1aaa57d59cbb00ed5c8cfa185d075b105/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=43fa41c1aaa57d59cbb00ed5c8cfa185d075b105", "patch": "@@ -69,6 +69,14 @@ Use full-set registers for register allocation.\n \n ; ---------------------------------------------------------------\n \n+malways-align\n+Target Mask(ALWAYS_ALIGN)\n+Always align function entry, jump target and return address.\n+\n+malign-functions\n+Target Mask(ALIGN_FUNCTION)\n+Align function entry to 4 byte.\n+\n mbig-endian\n Target Undocumented RejectNegative Negative(mlittle-endian) Mask(BIG_ENDIAN)\n Generate code in big-endian mode."}]}