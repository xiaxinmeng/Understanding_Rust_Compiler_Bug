{"sha": "c4ac6e9400db96df9e82434acc513060853ed2e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRhYzZlOTQwMGRiOTZkZjllODI0MzRhY2M1MTMwNjA4NTNlZDJlMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-11-09T13:25:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-11-09T13:25:17Z"}, "message": "re PR tree-optimization/51039 (ICE: in estimate_function_body_sizes, at ipa-inline-analysis.c:1977 with -finline-small-functions -fno-ipa-pure-const and passing incompatible function ptr)\n\n2011-11-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51039\n\t* gimple-low.c (gimple_check_call_args): Remove.\n\t(gimple_check_call_matching_types): Always return true.\n\t* tree-inline.c (setup_one_parameter): Always perform a\n\tvalid gimple type change.\n\t(declare_return_variable): Likewise.\n\nFrom-SVN: r181204", "tree": {"sha": "213f7bd1bedc506fcfb59db7f6ffddfe1eb44ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/213f7bd1bedc506fcfb59db7f6ffddfe1eb44ad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4ac6e9400db96df9e82434acc513060853ed2e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ac6e9400db96df9e82434acc513060853ed2e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ac6e9400db96df9e82434acc513060853ed2e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ac6e9400db96df9e82434acc513060853ed2e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3d871e4750ef7715af02375bba7bfb053226d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d871e4750ef7715af02375bba7bfb053226d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3d871e4750ef7715af02375bba7bfb053226d48"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "20307ddb31cf17cfe004de4b019f974ca9978f49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ac6e9400db96df9e82434acc513060853ed2e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ac6e9400db96df9e82434acc513060853ed2e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4ac6e9400db96df9e82434acc513060853ed2e1", "patch": "@@ -1,3 +1,10 @@\n+2011-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51039\n+\t* tree-inline.c (setup_one_parameter): Always perform a\n+\tvalid gimple type change.\n+\t(declare_return_variable): Likewise.\n+\n 2011-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/vector.md (vcondv4sfv4si, vcondv4siv4sf,"}, {"sha": "7daa9d2f513c09444be4a348938bf3b85081d722", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ac6e9400db96df9e82434acc513060853ed2e1/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ac6e9400db96df9e82434acc513060853ed2e1/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c4ac6e9400db96df9e82434acc513060853ed2e1", "patch": "@@ -2574,14 +2574,21 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n       && value != error_mark_node\n       && !useless_type_conversion_p (TREE_TYPE (p), TREE_TYPE (value)))\n     {\n+      /* If we can match up types by promotion/demotion do so.  */\n       if (fold_convertible_p (TREE_TYPE (p), value))\n-\trhs = fold_build1 (NOP_EXPR, TREE_TYPE (p), value);\n+\trhs = fold_convert (TREE_TYPE (p), value);\n       else\n-\t/* ???  For valid (GIMPLE) programs we should not end up here.\n-\t   Still if something has gone wrong and we end up with truly\n-\t   mismatched types here, fall back to using a VIEW_CONVERT_EXPR\n-\t   to not leak invalid GIMPLE to the following passes.  */\n-\trhs = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (p), value);\n+\t{\n+\t  /* ???  For valid programs we should not end up here.\n+\t     Still if we end up with truly mismatched types here, fall back\n+\t     to using a VIEW_CONVERT_EXPR or a literal zero to not leak invalid\n+\t     GIMPLE to the following passes.  */\n+\t  if (!is_gimple_reg_type (TREE_TYPE (value))\n+\t      || TYPE_SIZE (TREE_TYPE (p)) == TYPE_SIZE (TREE_TYPE (value)))\n+\t    rhs = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (p), value);\n+\t  else\n+\t    rhs = build_zero_cst (TREE_TYPE (p));\n+\t}\n     }\n \n   /* Make an equivalent VAR_DECL.  Note that we must NOT remap the type\n@@ -2912,7 +2919,27 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n      promoted, convert it back to the expected type.  */\n   use = var;\n   if (!useless_type_conversion_p (caller_type, TREE_TYPE (var)))\n-    use = fold_convert (caller_type, var);\n+    {\n+      /* If we can match up types by promotion/demotion do so.  */\n+      if (fold_convertible_p (caller_type, var))\n+\tuse = fold_convert (caller_type, var);\n+      else\n+\t{\n+\t  /* ???  For valid programs we should not end up here.\n+\t     Still if we end up with truly mismatched types here, fall back\n+\t     to using a MEM_REF to not leak invalid GIMPLE to the following\n+\t     passes.  */\n+\t  /* Prevent var from being written into SSA form.  */\n+\t  if (TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE\n+\t      || TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE)\n+\t    DECL_GIMPLE_REG_P (var) = false;\n+\t  else if (is_gimple_reg_type (TREE_TYPE (var)))\n+\t    TREE_ADDRESSABLE (var) = true;\n+\t  use = fold_build2 (MEM_REF, caller_type,\n+\t\t\t     build_fold_addr_expr (var),\n+\t\t\t     build_int_cst (ptr_type_node, 0));\n+\t}\n+    }\n \n   STRIP_USELESS_TYPE_CONVERSION (use);\n "}]}