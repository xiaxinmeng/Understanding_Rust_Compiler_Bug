{"sha": "c0532db47d092430f8e8f497b2dc53343527bb13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1MzJkYjQ3ZDA5MjQzMGY4ZThmNDk3YjJkYzUzMzQzNTI3YmIxMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-05T14:15:46Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-05T14:15:46Z"}, "message": "Use __gcov_dump and __gcov_reset in execv and fork context.\n\n\tPR gcov-profile/93623\n\t* libgcov-interface.c (__gcov_fork): Do not flush\n\tand reset only in child process.\n\t(__gcov_execl): Dump counters only and reset them\n\tonly if exec* fails.\n\t(__gcov_execlp): Likewise.\n\t(__gcov_execle): Likewise.\n\t(__gcov_execv): Likewise.\n\t(__gcov_execvp): Likewise.\n\t(__gcov_execve): Likewise.", "tree": {"sha": "2e6692771353d20ab12a16d8768ae8b0a4da4ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e6692771353d20ab12a16d8768ae8b0a4da4ea7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0532db47d092430f8e8f497b2dc53343527bb13", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl6xdRIACgkQTcGC3A+n\nN4WaUAgAtM76ZPqePfeHoqF7A2HwuKZihAPcUZsmpmxU4I9wXtTrZ4NUw6nYLxrK\naFZKdY1/GZpzfa1eEWf9J/GxEBjzOzWxHYppFPdxDc4YgToLHSqW5JJLPrjGr+t+\n48xi52hFiGmMuSxeYRZoqu5atuOuFRBoWYDPx+8mlKD0GsN6AqclR3jBbisuqZga\nvcMmM6xJd9n5cM4axnpNkFW45wEXJt5NBQn29QPdELnmMhIhJbKZVWzQs3nt3mlu\nXtBMDyXe4Qh94l5LZMk1r22IGAFKxK7yiwPPlSCmt7SNA6GHoBcW9ao295rnkfg6\nETkPPIKLxRlyRSFxdn9m66CyMW+3XA==\n=kYx7\n-----END PGP SIGNATURE-----", "payload": "tree 2e6692771353d20ab12a16d8768ae8b0a4da4ea7\nparent d39f7dc8d558ca31a661b02d08ff090ce65e6652\nauthor Martin Liska <mliska@suse.cz> 1588688146 +0200\ncommitter Martin Liska <mliska@suse.cz> 1588688146 +0200\n\nUse __gcov_dump and __gcov_reset in execv and fork context.\n\n\tPR gcov-profile/93623\n\t* libgcov-interface.c (__gcov_fork): Do not flush\n\tand reset only in child process.\n\t(__gcov_execl): Dump counters only and reset them\n\tonly if exec* fails.\n\t(__gcov_execlp): Likewise.\n\t(__gcov_execle): Likewise.\n\t(__gcov_execv): Likewise.\n\t(__gcov_execvp): Likewise.\n\t(__gcov_execve): Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0532db47d092430f8e8f497b2dc53343527bb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0532db47d092430f8e8f497b2dc53343527bb13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0532db47d092430f8e8f497b2dc53343527bb13/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d39f7dc8d558ca31a661b02d08ff090ce65e6652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d39f7dc8d558ca31a661b02d08ff090ce65e6652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d39f7dc8d558ca31a661b02d08ff090ce65e6652"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "6ef5eb9457cf8dd854c8a049dfc09e071220f258", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0532db47d092430f8e8f497b2dc53343527bb13/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0532db47d092430f8e8f497b2dc53343527bb13/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=c0532db47d092430f8e8f497b2dc53343527bb13", "patch": "@@ -1,3 +1,16 @@\n+2020-05-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/93623\n+\t* libgcov-interface.c (__gcov_fork): Do not flush\n+\tand reset only in child process.\n+\t(__gcov_execl): Dump counters only and reset them\n+\tonly if exec* fails.\n+\t(__gcov_execlp): Likewise.\n+\t(__gcov_execle): Likewise.\n+\t(__gcov_execv): Likewise.\n+\t(__gcov_execvp): Likewise.\n+\t(__gcov_execve): Likewise.\n+\n 2020-05-05  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/93623"}, {"sha": "855e8612018d1c9caf90396a3271337aaefdb9b3", "filename": "libgcc/libgcov-interface.c", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0532db47d092430f8e8f497b2dc53343527bb13/libgcc%2Flibgcov-interface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0532db47d092430f8e8f497b2dc53343527bb13/libgcc%2Flibgcov-interface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-interface.c?ref=c0532db47d092430f8e8f497b2dc53343527bb13", "patch": "@@ -197,17 +197,20 @@ __gcov_dump (void)\n #endif /* L_gcov_dump */\n \n #ifdef L_gcov_fork\n-/* A wrapper for the fork function.  Flushes the accumulated profiling data, so\n-   that they are not counted twice.  */\n+/* A wrapper for the fork function.  We reset counters in the child\n+   so that they are not counted twice.  */\n \n pid_t\n __gcov_fork (void)\n {\n   pid_t pid;\n-  __gcov_flush ();\n   pid = fork ();\n   if (pid == 0)\n-    __GTHREAD_MUTEX_INIT_FUNCTION (&__gcov_flush_mx);\n+    {\n+      __GTHREAD_MUTEX_INIT_FUNCTION (&__gcov_flush_mx);\n+      /* We do not need locking as we are the only thread in the child.  */\n+      __gcov_reset_int ();\n+    }\n   return pid;\n }\n #endif\n@@ -223,7 +226,8 @@ __gcov_execl (const char *path, char *arg, ...)\n   unsigned i, length;\n   char **args;\n \n-  __gcov_flush ();\n+  /* Dump counters only, they will be lost after exec.  */\n+  __gcov_dump ();\n \n   va_start (ap, arg);\n   va_copy (aq, ap);\n@@ -239,7 +243,10 @@ __gcov_execl (const char *path, char *arg, ...)\n     args[i] = va_arg (aq, char *);\n   va_end (aq);\n \n-  return execv (path, args);\n+  int ret = execv (path, args);\n+  /* We reach this code only when execv fails, reset counter then here.  */\n+  __gcov_reset ();\n+  return ret;\n }\n #endif\n \n@@ -254,7 +261,8 @@ __gcov_execlp (const char *path, char *arg, ...)\n   unsigned i, length;\n   char **args;\n \n-  __gcov_flush ();\n+  /* Dump counters only, they will be lost after exec.  */\n+  __gcov_dump ();\n \n   va_start (ap, arg);\n   va_copy (aq, ap);\n@@ -270,7 +278,10 @@ __gcov_execlp (const char *path, char *arg, ...)\n     args[i] = va_arg (aq, char *);\n   va_end (aq);\n \n-  return execvp (path, args);\n+  int ret = execvp (path, args);\n+  /* We reach this code only when execv fails, reset counter then here.  */\n+  __gcov_reset ();\n+  return ret;\n }\n #endif\n \n@@ -286,7 +297,8 @@ __gcov_execle (const char *path, char *arg, ...)\n   char **args;\n   char **envp;\n \n-  __gcov_flush ();\n+  /* Dump counters only, they will be lost after exec.  */\n+  __gcov_dump ();\n \n   va_start (ap, arg);\n   va_copy (aq, ap);\n@@ -303,7 +315,10 @@ __gcov_execle (const char *path, char *arg, ...)\n   envp = va_arg (aq, char **);\n   va_end (aq);\n \n-  return execve (path, args, envp);\n+  int ret = execve (path, args, envp);\n+  /* We reach this code only when execv fails, reset counter then here.  */\n+  __gcov_reset ();\n+  return ret;\n }\n #endif\n \n@@ -314,8 +329,12 @@ __gcov_execle (const char *path, char *arg, ...)\n int\n __gcov_execv (const char *path, char *const argv[])\n {\n-  __gcov_flush ();\n-  return execv (path, argv);\n+  /* Dump counters only, they will be lost after exec.  */\n+  __gcov_dump ();\n+  int ret = execv (path, argv);\n+  /* We reach this code only when execv fails, reset counter then here.  */\n+  __gcov_reset ();\n+  return ret;\n }\n #endif\n \n@@ -326,8 +345,12 @@ __gcov_execv (const char *path, char *const argv[])\n int\n __gcov_execvp (const char *path, char *const argv[])\n {\n-  __gcov_flush ();\n-  return execvp (path, argv);\n+  /* Dump counters only, they will be lost after exec.  */\n+  __gcov_dump ();\n+  int ret = execvp (path, argv);\n+  /* We reach this code only when execv fails, reset counter then here.  */\n+  __gcov_reset ();\n+  return ret;\n }\n #endif\n \n@@ -338,8 +361,12 @@ __gcov_execvp (const char *path, char *const argv[])\n int\n __gcov_execve (const char *path, char *const argv[], char *const envp[])\n {\n-  __gcov_flush ();\n-  return execve (path, argv, envp);\n+  /* Dump counters only, they will be lost after exec.  */\n+  __gcov_dump ();\n+  int ret = execve (path, argv, envp);\n+  /* We reach this code only when execv fails, reset counter then here.  */\n+  __gcov_reset ();\n+  return ret;\n }\n #endif\n #endif /* inhibit_libc */"}]}