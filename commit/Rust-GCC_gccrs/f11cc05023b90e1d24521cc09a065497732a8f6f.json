{"sha": "f11cc05023b90e1d24521cc09a065497732a8f6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExY2MwNTAyM2I5MGUxZDI0NTIxY2MwOWEwNjU0OTc3MzJhOGY2Zg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-10-24T12:46:44Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-10-24T12:46:44Z"}, "message": "Cross-port the latest resolution of LWG2756 and some bug-fixes to experimental::optional.\n\nCross-port the latest resolution of LWG2756 and some\nbug-fixes to experimental::optional.\nPR libstdc++/77288\nPR libstdc++/77727\n* include/experimental/optional (_Optional_base):\nRemove constructors that take a _Tp.\n(__is_optional_impl, __is_optional): Remove.\n(__converts_from_optional): New.\n(optional(_Up&&)): Fix constraints, call base with in_place.\n(optional(const optional<_Up>&)): Fix constraints, use emplace.\n(optional(optional<_Up>&&)): Likewise.\n(operator=(_Up&&)): Fix constraints.\n(operator=(const optional<_Up>&)): Likewise.\n(operator=(optional<_Up>&&)): Likewise.\n(emplace(_Args&&...)): Constrain.\n(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n* testsuite/experimental/optional/77288.cc: New.\n* testsuite/experimental/optional/assignment/5.cc: Adjust.\n* testsuite/experimental/optional/cons/77727.cc: New.\n* testsuite/experimental/optional/cons/value.cc: Adjust.\n\nFrom-SVN: r241476", "tree": {"sha": "3a1b63e17adc7ada6334846b6f90783e87546b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a1b63e17adc7ada6334846b6f90783e87546b43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f11cc05023b90e1d24521cc09a065497732a8f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11cc05023b90e1d24521cc09a065497732a8f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11cc05023b90e1d24521cc09a065497732a8f6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11cc05023b90e1d24521cc09a065497732a8f6f/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405def8d4667163a262f6c9fcb4a8f675dae4193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405def8d4667163a262f6c9fcb4a8f675dae4193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405def8d4667163a262f6c9fcb4a8f675dae4193"}], "stats": {"total": 685, "additions": 594, "deletions": 91}, "files": [{"sha": "1a18edeec77b8b4e60cb7d9afa63c73f9c9d6a97", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f11cc05023b90e1d24521cc09a065497732a8f6f", "patch": "@@ -1,3 +1,26 @@\n+2016-10-24  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tCross-port the latest resolution of LWG2756 and some\n+\tbug-fixes to experimental::optional.\n+\tPR libstdc++/77288\n+\tPR libstdc++/77727\n+\t* include/experimental/optional (_Optional_base):\n+\tRemove constructors that take a _Tp.\n+\t(__is_optional_impl, __is_optional): Remove.\n+\t(__converts_from_optional): New.\n+\t(optional(_Up&&)): Fix constraints, call base with in_place.\n+\t(optional(const optional<_Up>&)): Fix constraints, use emplace.\n+\t(optional(optional<_Up>&&)): Likewise.\n+\t(operator=(_Up&&)): Fix constraints.\n+\t(operator=(const optional<_Up>&)): Likewise.\n+\t(operator=(optional<_Up>&&)): Likewise.\n+\t(emplace(_Args&&...)): Constrain.\n+\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* testsuite/experimental/optional/77288.cc: New.\n+\t* testsuite/experimental/optional/assignment/5.cc: Adjust.\n+\t* testsuite/experimental/optional/cons/77727.cc: New.\n+\t* testsuite/experimental/optional/cons/value.cc: Adjust.\n+\n 2016-10-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_vector.h (vector::_M_data_ptr, vector::data):"}, {"sha": "a631158e22d98df2fa2f35814d7e013dd580fb07", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 78, "deletions": 91, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=f11cc05023b90e1d24521cc09a065497732a8f6f", "patch": "@@ -214,12 +214,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Optional_base{} { }\n \n       // Constructors for engaged optionals.\n-      constexpr _Optional_base(const _Tp& __t)\n-      : _M_payload(__t), _M_engaged(true) { }\n-\n-      constexpr _Optional_base(_Tp&& __t)\n-      : _M_payload(std::move(__t)), _M_engaged(true) { }\n-\n       template<typename... _Args>\n         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n         : _M_payload(std::forward<_Args>(__args)...), _M_engaged(true) { }\n@@ -356,12 +350,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Optional_base(nullopt_t) noexcept\n       : _Optional_base{} { }\n \n-      constexpr _Optional_base(const _Tp& __t)\n-      : _M_payload(__t), _M_engaged(true) { }\n-\n-      constexpr _Optional_base(_Tp&& __t)\n-      : _M_payload(std::move(__t)), _M_engaged(true) { }\n-\n       template<typename... _Args>\n         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n         : _M_payload(std::forward<_Args>(__args)...), _M_engaged(true) { }\n@@ -474,19 +462,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n   class optional;\n \n-  template<typename>\n-    struct __is_optional_impl : false_type\n-    { };\n-\n-  template<typename _Tp>\n-  struct __is_optional_impl<optional<_Tp>> : true_type\n-    { };\n-\n-  template<typename _Tp>\n-    struct __is_optional\n-    : public __is_optional_impl<std::remove_cv_t<std::remove_reference_t<_Tp>>>\n-    { };\n-\n+  template<typename _Tp, typename _Up>\n+    using __converts_from_optional =\n+      __or_<is_constructible<_Tp, const optional<_Up>&>,\n+\t    is_constructible<_Tp, optional<_Up>&>,\n+\t    is_constructible<_Tp, const optional<_Up>&&>,\n+\t    is_constructible<_Tp, optional<_Up>&&>,\n+\t    is_convertible<const optional<_Up>&, _Tp>,\n+\t    is_convertible<optional<_Up>&, _Tp>,\n+\t    is_convertible<const optional<_Up>&&, _Tp>,\n+\t    is_convertible<optional<_Up>&&, _Tp>>;\n+\n+  template<typename _Tp, typename _Up>\n+    using __assigns_from_optional =\n+      __or_<is_assignable<_Tp&, const optional<_Up>&>,\n+\t    is_assignable<_Tp&, optional<_Up>&>,\n+\t    is_assignable<_Tp&, const optional<_Up>&&>,\n+\t    is_assignable<_Tp&, optional<_Up>&&>>;\n \n   /**\n     * @brief Class template for optional values.\n@@ -522,75 +514,75 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr optional() = default;\n       // Converting constructors for engaged optionals.\n-      template <typename _Up,\n+      template <typename _Up = _Tp,\n                 enable_if_t<__and_<\n-\t\t\t      __not_<is_same<_Tp, _Up>>,\n+\t\t\t      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n \t\t\t      is_convertible<_Up&&, _Tp>\n \t\t\t      >::value, bool> = true>\n       constexpr optional(_Up&& __t)\n-        : _Base(_Tp(std::forward<_Up>(__t))) { }\n+        : _Base(in_place, std::forward<_Up>(__t)) { }\n \n-      template <typename _Up,\n+      template <typename _Up = _Tp,\n                 enable_if_t<__and_<\n-\t\t\t    __not_<is_same<_Tp, _Up>>,\n-\t\t\t    is_constructible<_Tp, _Up&&>,\n-\t\t\t    __not_<is_convertible<_Up&&, _Tp>>\n-\t\t\t    >::value, bool> = false>\n+\t\t\t      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,\n+\t\t\t      is_constructible<_Tp, _Up&&>,\n+\t\t\t      __not_<is_convertible<_Up&&, _Tp>>\n+\t\t\t      >::value, bool> = false>\n       explicit constexpr optional(_Up&& __t)\n-        : _Base(_Tp(std::forward<_Up>(__t))) { }\n+        : _Base(in_place, std::forward<_Up>(__t)) { }\n \n       template <typename _Up,\n                 enable_if_t<__and_<\n \t\t\t    __not_<is_same<_Tp, _Up>>,\n-\t\t\t    __not_<is_constructible<\n-\t\t\t      _Tp, const optional<_Up>&>>,\n-\t\t\t    __not_<is_convertible<\n-\t\t\t      const optional<_Up>&, _Tp>>,\n \t\t\t    is_constructible<_Tp, const _Up&>,\n-\t\t\t    is_convertible<const _Up&, _Tp>\n+\t\t\t    is_convertible<const _Up&, _Tp>,\n+\t\t\t    __not_<__converts_from_optional<_Tp, _Up>>\n \t\t\t    >::value, bool> = true>\n       constexpr optional(const optional<_Up>& __t)\n-        : _Base(__t ? optional<_Tp>(*__t) : optional<_Tp>()) { }\n+      {\n+\tif (__t)\n+\t  emplace(*__t);\n+      }\n \n       template <typename _Up,\n                  enable_if_t<__and_<\n \t\t\t       __not_<is_same<_Tp, _Up>>,\n-\t\t\t       __not_<is_constructible<\n-\t\t\t\t\t_Tp, const optional<_Up>&>>,\n-\t\t\t       __not_<is_convertible<\n-\t\t\t\t const optional<_Up>&, _Tp>>,\n \t\t\t       is_constructible<_Tp, const _Up&>,\n-\t\t\t       __not_<is_convertible<const _Up&, _Tp>>\n+\t\t\t       __not_<is_convertible<const _Up&, _Tp>>,\n+\t\t\t       __not_<__converts_from_optional<_Tp, _Up>>\n \t\t\t       >::value, bool> = false>\n       explicit constexpr optional(const optional<_Up>& __t)\n-        : _Base(__t ? optional<_Tp>(*__t) : optional<_Tp>()) { }\n+      {\n+\tif (__t)\n+\t  emplace(*__t);\n+      }\n \n       template <typename _Up,\n                 enable_if_t<__and_<\n \t\t\t      __not_<is_same<_Tp, _Up>>,\n-\t\t\t      __not_<is_constructible<\n-\t\t\t\t       _Tp, optional<_Up>&&>>,\n-\t\t\t      __not_<is_convertible<\n-\t\t\t\t       optional<_Up>&&, _Tp>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n-\t\t\t      is_convertible<_Up&&, _Tp>\n+\t\t\t      is_convertible<_Up&&, _Tp>,\n+\t\t\t      __not_<__converts_from_optional<_Tp, _Up>>\n \t\t\t      >::value, bool> = true>\n       constexpr optional(optional<_Up>&& __t)\n-        : _Base(__t ? optional<_Tp>(std::move(*__t)) : optional<_Tp>()) { }\n+      {\n+\tif (__t)\n+\t  emplace(std::move(*__t));\n+      }\n \n       template <typename _Up,\n                 enable_if_t<__and_<\n \t\t\t    __not_<is_same<_Tp, _Up>>,\n-\t\t\t    __not_<is_constructible<\n-\t\t\t\t     _Tp, optional<_Up>&&>>,\n-\t\t\t    __not_<is_convertible<\n-\t\t\t\t     optional<_Up>&&, _Tp>>,\n \t\t\t    is_constructible<_Tp, _Up&&>,\n-\t\t\t    __not_<is_convertible<_Up&&, _Tp>>\n+\t\t\t    __not_<is_convertible<_Up&&, _Tp>>,\n+\t\t\t    __not_<__converts_from_optional<_Tp, _Up>>\n \t\t\t    >::value, bool> = false>\n       explicit constexpr optional(optional<_Up>&& __t)\n-        : _Base(__t ? optional<_Tp>(std::move(*__t)) : optional<_Tp>()) { }\n+      {\n+\tif (__t)\n+\t  emplace(std::move(*__t));\n+      }\n \n       // [X.Y.4.3] (partly) Assignment.\n       optional&\n@@ -600,18 +592,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return *this;\n       }\n \n-      template<typename _Up,\n-               enable_if_t<__and_<\n-\t\t\t   __not_<is_same<_Up, nullopt_t>>,\n-\t\t\t   __not_<__is_optional<_Up>>>::value,\n-\t\t\t bool> = true>\n-        optional&\n+      template<typename _Up = _Tp>\n+        enable_if_t<__and_<\n+\t\t      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,\n+\t\t      is_constructible<_Tp, _Up>,\n+\t\t      __not_<__and_<is_scalar<_Tp>,\n+\t\t\t\t    is_same<_Tp, decay_t<_Up>>>>,\n+\t\t      is_assignable<_Tp&, _Up>>::value,\n+\t\t    optional&>\n         operator=(_Up&& __u)\n         {\n-          static_assert(__and_<is_constructible<_Tp, _Up>,\n-\t\t\t       is_assignable<_Tp&, _Up>>(),\n-                        \"Cannot assign to value type from argument\");\n-\n           if (this->_M_is_engaged())\n             this->_M_get() = std::forward<_Up>(__u);\n           else\n@@ -620,17 +610,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           return *this;\n         }\n \n-      template<typename _Up,\n-               enable_if_t<__and_<\n-\t\t __not_<is_same<_Tp, _Up>>>::value,\n-\t\t\t   bool> = true>\n-        optional&\n+      template<typename _Up>\n+\tenable_if_t<__and_<\n+\t\t      __not_<is_same<_Tp, _Up>>,\n+\t\t      is_constructible<_Tp, const _Up&>,\n+\t\t      is_assignable<_Tp&, _Up>,\n+\t\t      __not_<__converts_from_optional<_Tp, _Up>>,\n+\t\t      __not_<__assigns_from_optional<_Tp, _Up>>\n+\t\t      >::value,\n+\t\t    optional&>\n         operator=(const optional<_Up>& __u)\n         {\n-          static_assert(__and_<is_constructible<_Tp, _Up>,\n-\t\t\t       is_assignable<_Tp&, _Up>>(),\n-                        \"Cannot assign to value type from argument\");\n-\n           if (__u)\n             {\n               if (this->_M_is_engaged())\n@@ -645,17 +635,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           return *this;\n         }\n \n-      template<typename _Up,\n-               enable_if_t<__and_<\n-\t\t __not_<is_same<_Tp, _Up>>>::value,\n-\t\t\t   bool> = true>\n-        optional&\n+      template<typename _Up>\n+\tenable_if_t<__and_<\n+\t\t      __not_<is_same<_Tp, _Up>>,\n+\t\t      is_constructible<_Tp, _Up>,\n+\t\t      is_assignable<_Tp&, _Up>,\n+\t\t      __not_<__converts_from_optional<_Tp, _Up>>,\n+\t\t      __not_<__assigns_from_optional<_Tp, _Up>>\n+\t\t      >::value,\n+\t\t    optional&>\n         operator=(optional<_Up>&& __u)\n         {\n-          static_assert(__and_<is_constructible<_Tp, _Up>,\n-\t\t\t       is_assignable<_Tp&, _Up>>(),\n-                        \"Cannot assign to value type from argument\");\n-\n           if (__u)\n             {\n               if (this->_M_is_engaged())\n@@ -672,18 +662,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         }\n \n       template<typename... _Args>\n-\tvoid\n+\tenable_if_t<is_constructible<_Tp, _Args&&...>::value>\n \templace(_Args&&... __args)\n \t{\n-\t  static_assert(is_constructible<_Tp, _Args&&...>(),\n-\t\t\t\"Cannot emplace value type from arguments\");\n-\n \t  this->_M_reset();\n \t  this->_M_construct(std::forward<_Args>(__args)...);\n \t}\n \n       template<typename _Up, typename... _Args>\n-        enable_if_t<is_constructible<_Tp, initializer_list<_Up>&,\n+\tenable_if_t<is_constructible<_Tp, initializer_list<_Up>&,\n \t\t\t\t     _Args&&...>::value>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{"}, {"sha": "38b1e858120b12514fb74e9c3132d355feab4b76", "filename": "libstdc++-v3/testsuite/experimental/optional/77288.cc", "status": "added", "additions": 405, "deletions": 0, "changes": 405, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2F77288.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2F77288.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2F77288.cc?ref=f11cc05023b90e1d24521cc09a065497732a8f6f", "patch": "@@ -0,0 +1,405 @@\n+// { dg-do run { target c++14 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/optional>\n+#include <experimental/any>\n+\n+using std::experimental::optional;\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+    optional<optional<int>> nested_element;\n+    optional<int> element = {};\n+    nested_element = element;\n+    VERIFY(nested_element);\n+}\n+\n+template <class T>\n+struct service_result\n+{\n+  static optional<T> get_result()\n+  {\n+    T sr;\n+    return sr;\n+  }\n+\n+  static optional<T> get_result_with_cond(bool cond)\n+  {\n+    if (cond)\n+      return T{};\n+    return {};\n+  }\n+};\n+\n+void test02()\n+{\n+  VERIFY(service_result<int>::get_result());\n+  VERIFY(service_result<optional<int>>::get_result());\n+  VERIFY(service_result<int>::get_result_with_cond(true));\n+  VERIFY(service_result<optional<int>>::get_result_with_cond(true));\n+  VERIFY(!service_result<int>::get_result_with_cond(false));\n+  VERIFY(!service_result<optional<int>>::get_result_with_cond(false));\n+}\n+\n+struct Widget\n+{\n+  Widget(int) {}\n+  Widget(optional<int>) {}\n+};\n+\n+\n+void test03()\n+{\n+  optional<Widget> w;\n+  w = optional<int>();\n+  VERIFY(w);\n+  static_assert(!std::is_assignable<optional<Widget>&,\n+\t\toptional<short>>::value);\n+  w = optional<optional<int>>();\n+  VERIFY(!w);\n+  static_assert(!std::is_assignable<optional<Widget>&,\n+\t\toptional<optional<short>>>::value);\n+\n+  optional<Widget> w2{optional<int>()};\n+  VERIFY(w2);\n+  optional<Widget> w3  = optional<int>();\n+  VERIFY(w3);\n+  optional<Widget> w4{optional<short>()};\n+  VERIFY(w4);\n+  static_assert(!std::is_convertible<optional<short>&&,\n+\t\toptional<Widget>>::value);\n+\n+  optional<Widget> w6{optional<optional<int>>()};\n+  VERIFY(!w6);\n+  optional<Widget> w7  = optional<optional<int>>();\n+  VERIFY(!w7);\n+  optional<Widget> w8{optional<optional<short>>()};\n+  VERIFY(!w8);\n+  static_assert(!std::is_convertible<optional<optional<short>>&&,\n+\t\toptional<Widget>>::value);\n+  optional<Widget> w10{optional<optional<short>>(10)};\n+  VERIFY(w10);\n+  optional<Widget> w11 = std::experimental::nullopt;\n+  VERIFY(!w11);\n+  optional<Widget> w12 = {};\n+  VERIFY(!w12);\n+  optional<Widget> w13{std::experimental::nullopt};\n+  VERIFY(!w13);\n+  optional<Widget> w14;\n+  w14 = {};\n+  VERIFY(!w14);\n+}\n+\n+struct Widget2\n+{\n+  Widget2(int) {}\n+  Widget2(optional<int>) {}\n+  Widget2& operator=(int) {return *this;}\n+  Widget2& operator=(optional<int>) {return *this;}\n+};\n+\n+void test04()\n+{\n+  optional<Widget2> w;\n+  w = optional<int>();\n+  VERIFY(w);\n+  w = optional<short>();\n+  VERIFY(w);\n+  w = optional<optional<int>>();\n+  VERIFY(!w);\n+  w = optional<optional<short>>();\n+  VERIFY(!w);\n+  w = optional<optional<short>>(10);\n+  optional<Widget2> w2 = std::experimental::nullopt;\n+  VERIFY(!w2);\n+  optional<Widget2> w3 = {};\n+  VERIFY(!w3);\n+  optional<Widget2> w4{std::experimental::nullopt};\n+  VERIFY(!w4);\n+  optional<Widget2> w5;\n+  w5 = {};\n+  VERIFY(!w5);\n+}\n+\n+struct Thingy\n+{\n+  Thingy(int) {}\n+  Thingy(Widget) {}\n+};\n+\n+void test05()\n+{\n+  optional<Thingy> ot;\n+\n+  static_assert(!std::is_assignable<optional<Thingy>&,\n+\t\toptional<int>>::value);\n+  static_assert(std::is_assignable<optional<Thingy>&,\n+\t\toptional<short>>::value);\n+  static_assert(!std::is_assignable<optional<Thingy>&,\n+\t\toptional<optional<int>>>::value);\n+  ot = optional<Widget>();\n+  VERIFY(!ot);\n+  optional<Thingy> ot2{optional<int>()};\n+  VERIFY(ot2);\n+  static_assert(!std::is_convertible<optional<int>&&,\n+\t\toptional<Thingy>>::value);\n+  optional<Thingy> ot3{optional<short>()};\n+  VERIFY(!ot3);\n+  optional<Thingy> ot4 = optional<short>();\n+  VERIFY(!ot4);\n+\n+  optional<Thingy> ot5{optional<optional<int>>()};\n+  VERIFY(!ot5);\n+  static_assert(!std::is_convertible<optional<optional<int>>&&,\n+\t\toptional<Thingy>>::value);\n+\n+  optional<Thingy> ot7{optional<Widget>()};\n+  VERIFY(!ot7);\n+  optional<Thingy> ot8 = optional<Widget>();\n+  VERIFY(!ot8);\n+  static_assert(!std::is_constructible<optional<Thingy>,\n+\t\toptional<optional<short>>>::value);\n+  static_assert(!std::is_convertible<optional<optional<short>>,\n+\t\toptional<Thingy>>::value);\n+  static_assert(!std::is_assignable<optional<Thingy>&,\n+\t\toptional<optional<short>>>::value);\n+  optional<Thingy> ot9 = std::experimental::nullopt;\n+  VERIFY(!ot9);\n+  optional<Thingy> ot10 = {};\n+  VERIFY(!ot10);\n+  optional<Thingy> ot11{std::experimental::nullopt};\n+  VERIFY(!ot11);\n+  optional<Thingy> ot12;\n+  ot12 = {};\n+  VERIFY(!ot12);\n+}\n+\n+struct RvalueConstructible\n+{\n+  RvalueConstructible(int) {}\n+  RvalueConstructible(optional<int>&&) {}\n+};\n+\n+void test06()\n+{\n+  optional<int> oi;\n+  optional<RvalueConstructible> ori;\n+  static_assert(!std::is_assignable<optional<RvalueConstructible>&,\n+\t\toptional<int>&>::value);\n+  ori = std::move(oi);\n+  VERIFY(ori);\n+\n+  optional<optional<int>> ooi;\n+  static_assert(!std::is_assignable<optional<RvalueConstructible>&,\n+\t\toptional<optional<int>>&>::value);\n+  ori = std::move(ooi);\n+  VERIFY(!ori);\n+\n+  static_assert(!std::is_constructible<optional<RvalueConstructible>,\n+\t\toptional<int>&>::value);\n+  static_assert(!std::is_convertible<optional<int>&,\n+\t\toptional<RvalueConstructible>>::value);\n+\n+  optional<RvalueConstructible> ori2(std::move(oi));\n+  VERIFY(ori2);\n+  optional<RvalueConstructible> ori3 = std::move(oi);\n+  VERIFY(ori3);\n+\n+  static_assert(!std::is_constructible<optional<RvalueConstructible>,\n+\t\toptional<optional<int>>&>::value);\n+  static_assert(!std::is_convertible<optional<optional<int>>&,\n+\t\toptional<RvalueConstructible>>::value);\n+  optional<RvalueConstructible> ori6(std::move(ooi));\n+  VERIFY(!ori6);\n+  optional<RvalueConstructible> ori7 = std::move(ooi);\n+  VERIFY(!ori7);\n+  optional<RvalueConstructible> ori8 = std::experimental::nullopt;\n+  VERIFY(!ori8);\n+  optional<RvalueConstructible> ori9 = {};\n+  VERIFY(!ori9);\n+  optional<RvalueConstructible> ori10{std::experimental::nullopt};\n+  VERIFY(!ori10);\n+  optional<RvalueConstructible> ori11;\n+  ori11 = {};\n+  VERIFY(!ori11);\n+}\n+\n+struct Thingy2\n+{\n+  Thingy2(int) {}\n+  explicit Thingy2(optional<int>) {}\n+  Thingy2(Widget) {}\n+};\n+\n+void test07()\n+{\n+  optional<Thingy2> ot{optional<int>{}};\n+  VERIFY(ot);\n+  static_assert(!std::is_convertible<optional<int>,\n+\t\toptional<Thingy2>>::value);\n+  optional<Thingy2> ot2{optional<short>{}};\n+  VERIFY(ot2);\n+  static_assert(!std::is_convertible<optional<short>,\n+\t\toptional<Thingy2>>::value);\n+  optional<Thingy2> ot3{optional<optional<int>>{}};\n+  VERIFY(!ot3);\n+  static_assert(!std::is_convertible<optional<optional<int>>,\n+\t\toptional<Thingy2>>::value);\n+  optional<Thingy2> ot4{optional<optional<short>>{}};\n+  VERIFY(!ot4);\n+  static_assert(!std::is_convertible<optional<optional<short>>,\n+\t\toptional<Thingy2>>::value);\n+\n+  optional<Thingy2> ot5{optional<Widget>{}};\n+  VERIFY(!ot5);\n+  optional<Thingy2> ot6 = optional<Widget>();\n+  VERIFY(!ot6);\n+\n+  static_assert(!std::is_assignable<optional<Thingy2>&,\n+\t\toptional<int>>::value);\n+  static_assert(!std::is_assignable<optional<Thingy2>&,\n+\t\toptional<short>>::value);\n+  static_assert(!std::is_assignable<optional<Thingy2>&,\n+\t\toptional<optional<int>>>::value);\n+  static_assert(!std::is_assignable<optional<Thingy2>&,\n+\t\toptional<optional<short>>>::value);\n+  optional<Thingy2> ot7;\n+  ot = optional<Widget>();\n+  VERIFY(!ot7);\n+  optional<Thingy2> ot8 = std::experimental::nullopt;\n+  VERIFY(!ot8);\n+  optional<Thingy2> ot9 = {};\n+  VERIFY(!ot9);\n+  optional<Thingy2> ot10{std::experimental::nullopt};\n+  VERIFY(!ot10);\n+  optional<Thingy2> ot11;\n+  ot11 = {};\n+  VERIFY(!ot11);\n+}\n+\n+struct Thingy3\n+{\n+  Thingy3(int) {}\n+  template<class... Args,\n+\t   std::enable_if_t<std::is_constructible<Widget, Args&&...>::value,\n+\t\t\t    bool> = true>\n+  explicit Thingy3(Args&&... args) {}\n+  Thingy3(Widget) {}\n+};\n+\n+void test08()\n+{\n+  optional<Thingy3> ot{optional<int>{}};\n+  VERIFY(ot);\n+  static_assert(!std::is_convertible<optional<int>,\n+\t\toptional<Thingy3>>::value);\n+  optional<Thingy3> ot2{optional<short>{}};\n+  VERIFY(ot2);\n+  static_assert(!std::is_convertible<optional<short>,\n+\t\toptional<Thingy3>>::value);\n+  optional<Thingy3> ot3{optional<optional<int>>{}};\n+  VERIFY(!ot3);\n+  static_assert(!std::is_convertible<optional<optional<int>>,\n+\t\toptional<Thingy3>>::value);\n+  optional<Thingy3> ot4{optional<optional<short>>{}};\n+  VERIFY(!ot4);\n+  static_assert(!std::is_convertible<optional<optional<short>>,\n+\t\toptional<Thingy3>>::value);\n+\n+  optional<Thingy3> ot5{optional<Widget>{}};\n+  VERIFY(!ot5);\n+  optional<Thingy3> ot6 = optional<Widget>();\n+  VERIFY(!ot6);\n+\n+  static_assert(!std::is_assignable<optional<Thingy3>&,\n+\t\toptional<int>>::value);\n+  static_assert(!std::is_assignable<optional<Thingy3>&,\n+\t\toptional<short>>::value);\n+  static_assert(!std::is_assignable<optional<Thingy3>&,\n+\t\toptional<optional<int>>>::value);\n+  static_assert(!std::is_assignable<optional<Thingy3>&,\n+\t\toptional<optional<short>>>::value);\n+  optional<Thingy3> ot7;\n+  ot = optional<Widget>();\n+  VERIFY(!ot7);\n+  optional<Thingy3> ot8 = std::experimental::nullopt;\n+  VERIFY(!ot8);\n+  optional<Thingy3> ot9 = {};\n+  VERIFY(!ot9);\n+  optional<Thingy3> ot10{std::experimental::nullopt};\n+  VERIFY(!ot10);\n+  optional<Thingy3> ot11;\n+  ot11 = {};\n+  VERIFY(!ot11);\n+}\n+\n+void test09()\n+{\n+  std::experimental::any a = 42;\n+  optional<std::experimental::any> oa2 = a;\n+  VERIFY(oa2);\n+  VERIFY(std::experimental::any_cast<int>(*oa2) == 42);\n+  optional<std::experimental::any> oa3 = oa2;\n+  VERIFY(oa3);\n+  VERIFY(std::experimental::any_cast<int>(*oa3) == 42);\n+  optional<std::experimental::any> oa4{oa2};\n+  VERIFY(oa4);\n+  VERIFY(std::experimental::any_cast<int>(*oa4) == 42);\n+  optional<std::experimental::any> oa5(oa2);\n+  VERIFY(oa5);\n+  VERIFY(std::experimental::any_cast<int>(*oa5) == 42);\n+  optional<std::experimental::any> oa6;\n+  VERIFY(!oa6);\n+  optional<std::experimental::any> oa7 = oa6;\n+  VERIFY(!oa7);\n+  optional<std::experimental::any> oa8{oa6};\n+  VERIFY(!oa8);\n+  optional<std::experimental::any> oa9(oa6);\n+  VERIFY(!oa9);\n+}\n+\n+void test10()\n+{\n+  struct X {};\n+  optional<int> oi(std::experimental::in_place);\n+  oi = {};\n+  VERIFY(bool(oi) == false);\n+  optional<X> ot(std::experimental::in_place);\n+  ot = {};\n+  VERIFY(bool(ot) == false);\n+  optional<int> oi2(std::experimental::in_place);\n+  short int si = 6;\n+  oi2 = si;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+  test07();\n+  test08();\n+  test09();\n+  test10();\n+}"}, {"sha": "8ee62015bd279a1cdb4a9aeca0acf3e1d154fb9d", "filename": "libstdc++-v3/testsuite/experimental/optional/assignment/5.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fassignment%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fassignment%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fassignment%2F5.cc?ref=f11cc05023b90e1d24521cc09a065497732a8f6f", "patch": "@@ -18,6 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <experimental/optional>\n+#include <vector>\n #include <testsuite_hooks.h>\n \n int counter = 0;\n@@ -61,5 +62,15 @@ int main()\n     VERIFY( !o );\n   }\n \n+  {\n+    std::experimental::optional<std::vector<int>> ovi{{1, 2, 3}};\n+    VERIFY(ovi->size() == 3);\n+    VERIFY((*ovi)[0] == 1 && (*ovi)[1] == 2 && (*ovi)[2] == 3);\n+    ovi = {4, 5, 6, 7};\n+    VERIFY(ovi->size() == 4);\n+    VERIFY((*ovi)[0] == 4 && (*ovi)[1] == 5 &&\n+\t   (*ovi)[2] == 6 && (*ovi)[3] == 7);\n+  }\n+\n   VERIFY( counter == 0 );\n }"}, {"sha": "e3abedba3936cc4a17f6806310171c70e29ad74d", "filename": "libstdc++-v3/testsuite/experimental/optional/cons/77727.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2F77727.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2F77727.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2F77727.cc?ref=f11cc05023b90e1d24521cc09a065497732a8f6f", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do run { target c++14 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/optional>\n+#include <testsuite_hooks.h>\n+\n+\n+struct NonTransferable\n+{\n+  int x;\n+  NonTransferable(int x) : x(x) {}\n+  NonTransferable(NonTransferable&&) = delete;\n+  NonTransferable& operator=(NonTransferable&&) = delete;\n+  operator int() {return x;}\n+};\n+\n+int main()\n+{\n+  std::experimental::optional<int> oi;\n+  std::experimental::optional<NonTransferable> ot(std::move(oi));\n+  VERIFY(!ot);\n+\n+  std::experimental::optional<int> oi2;\n+  std::experimental::optional<NonTransferable> ot2(oi2);\n+  VERIFY(!ot);\n+\n+  std::experimental::optional<int> oi3{42};\n+  std::experimental::optional<NonTransferable> ot3(std::move(oi3));\n+  VERIFY(ot3 && *ot3 == 42);\n+\n+  std::experimental::optional<int> oi4{666};\n+  std::experimental::optional<NonTransferable> ot4(oi4);\n+  VERIFY(ot4 && *ot4 == 666);\n+}"}, {"sha": "81b2cb8dc2e3abc3a1f8bcd1a32d0cd382023a9d", "filename": "libstdc++-v3/testsuite/experimental/optional/cons/value.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11cc05023b90e1d24521cc09a065497732a8f6f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fcons%2Fvalue.cc?ref=f11cc05023b90e1d24521cc09a065497732a8f6f", "patch": "@@ -254,4 +254,31 @@ int main()\n     std::experimental::optional<X> ox4;\n     ox4 = oi;\n   }\n+\n+  {\n+    std::experimental::optional<std::experimental::optional<int>> ooi =\n+      std::experimental::optional<int>();\n+    VERIFY(bool(ooi));\n+    ooi = std::experimental::optional<int>();\n+    VERIFY(bool(ooi));\n+    ooi = std::experimental::optional<int>(42);\n+    VERIFY(bool(ooi));\n+    VERIFY(bool(*ooi));\n+    std::experimental::optional<std::experimental::optional<int>> ooi2 =\n+      std::experimental::optional<short>();\n+    VERIFY(bool(ooi2));\n+    ooi2 = std::experimental::optional<short>();\n+    VERIFY(bool(ooi2));\n+    ooi2 = std::experimental::optional<short>(6);\n+    VERIFY(bool(ooi2));\n+    VERIFY(bool(*ooi2));\n+    std::experimental::optional<std::experimental::optional<int>> ooi3 =\n+      std::experimental::optional<int>(42);\n+    VERIFY(bool(ooi3));\n+    VERIFY(bool(*ooi3));\n+    std::experimental::optional<std::experimental::optional<int>> ooi4 =\n+      std::experimental::optional<short>(6);\n+    VERIFY(bool(ooi4));\n+    VERIFY(bool(*ooi4));\n+  }\n }"}]}