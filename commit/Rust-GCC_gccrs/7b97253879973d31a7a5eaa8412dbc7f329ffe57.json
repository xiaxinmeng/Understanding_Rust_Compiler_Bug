{"sha": "7b97253879973d31a7a5eaa8412dbc7f329ffe57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5NzI1Mzg3OTk3M2QzMWE3YTVlYWE4NDEyZGJjN2YzMjlmZmU1Nw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-07-03T09:26:31Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-07-03T09:26:31Z"}, "message": "Make stack epilogue more efficient\n\n2017-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* asan.c (asan_emit_stack_protection): Unpoison just red zones\n\tand shadow memory of auto variables which are subject of\n\tuse-after-scope sanitization.\n\t(asan_expand_mark_ifn): Add do set only when is_poison.\n\nFrom-SVN: r249900", "tree": {"sha": "fc25de8701b2ee0a8bda7849e4442238c24e6c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc25de8701b2ee0a8bda7849e4442238c24e6c45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b97253879973d31a7a5eaa8412dbc7f329ffe57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b97253879973d31a7a5eaa8412dbc7f329ffe57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b97253879973d31a7a5eaa8412dbc7f329ffe57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b97253879973d31a7a5eaa8412dbc7f329ffe57/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c78e36522d21297b555185f5eeedd6e848eda684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c78e36522d21297b555185f5eeedd6e848eda684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c78e36522d21297b555185f5eeedd6e848eda684"}], "stats": {"total": 86, "additions": 47, "deletions": 39}, "files": [{"sha": "8724cd99c886de0d2780c5105665220c5e70a8b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b97253879973d31a7a5eaa8412dbc7f329ffe57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b97253879973d31a7a5eaa8412dbc7f329ffe57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b97253879973d31a7a5eaa8412dbc7f329ffe57", "patch": "@@ -1,3 +1,10 @@\n+2017-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* asan.c (asan_emit_stack_protection): Unpoison just red zones\n+\tand shadow memory of auto variables which are subject of\n+\tuse-after-scope sanitization.\n+\t(asan_expand_mark_ifn): Add do set only when is_poison.\n+\n 2016-07-03  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_analyze_loop_operations): Also analyze"}, {"sha": "533a7ec7bebee39aade2afa166ddbb4a8865d115", "filename": "gcc/asan.c", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b97253879973d31a7a5eaa8412dbc7f329ffe57/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b97253879973d31a7a5eaa8412dbc7f329ffe57/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=7b97253879973d31a7a5eaa8412dbc7f329ffe57", "patch": "@@ -1062,7 +1062,7 @@ asan_emit_stack_protection (rtx base, rtx pbase, unsigned int alignb,\n   HOST_WIDE_INT base_offset = offsets[length - 1];\n   HOST_WIDE_INT base_align_bias = 0, offset, prev_offset;\n   HOST_WIDE_INT asan_frame_size = offsets[0] - base_offset;\n-  HOST_WIDE_INT last_offset;\n+  HOST_WIDE_INT last_offset, last_size;\n   int l;\n   unsigned char cur_shadow_byte = ASAN_STACK_MAGIC_LEFT;\n   tree str_cst, decl, id;\n@@ -1297,58 +1297,55 @@ asan_emit_stack_protection (rtx base, rtx pbase, unsigned int alignb,\n   if (STRICT_ALIGNMENT)\n     set_mem_align (shadow_mem, (GET_MODE_ALIGNMENT (SImode)));\n \n-  /* Unpoison shadow memory of a stack at the very end of a function.\n-     As we're poisoning stack variables at the end of their scope,\n-     shadow memory must be properly unpoisoned here.  The easiest approach\n-     would be to collect all variables that should not be unpoisoned and\n-     we unpoison shadow memory of the whole stack except ranges\n-     occupied by these variables.  */\n+  prev_offset = base_offset;\n   last_offset = base_offset;\n-  HOST_WIDE_INT current_offset = last_offset;\n-  if (length)\n+  last_size = 0;\n+  for (l = length; l; l -= 2)\n     {\n-      HOST_WIDE_INT var_end_offset = 0;\n-      HOST_WIDE_INT stack_start = offsets[length - 1];\n-      gcc_assert (last_offset == stack_start);\n-\n-      for (int l = length - 2; l > 0; l -= 2)\n+      offset = base_offset + ((offsets[l - 1] - base_offset)\n+\t\t\t     & ~(ASAN_RED_ZONE_SIZE - HOST_WIDE_INT_1));\n+      if (last_offset + last_size != offset)\n \t{\n-\t  HOST_WIDE_INT var_offset = offsets[l];\n-\t  current_offset = var_offset;\n-\t  var_end_offset = offsets[l - 1];\n-\t  HOST_WIDE_INT rounded_size = ROUND_UP (var_end_offset - var_offset,\n-\t\t\t\t\t     BITS_PER_UNIT);\n+\t  shadow_mem = adjust_address (shadow_mem, VOIDmode,\n+\t\t\t\t       (last_offset - prev_offset)\n+\t\t\t\t       >> ASAN_SHADOW_SHIFT);\n+\t  prev_offset = last_offset;\n+\t  asan_clear_shadow (shadow_mem, last_size >> ASAN_SHADOW_SHIFT);\n+\t  last_offset = offset;\n+\t  last_size = 0;\n+\t}\n+      last_size += base_offset + ((offsets[l - 2] - base_offset)\n+\t\t\t\t  & ~(ASAN_RED_ZONE_SIZE - HOST_WIDE_INT_1))\n+\t\t   - offset;\n \n-\t  /* Should we unpoison the variable?  */\n+      /* Unpoison shadow memory that corresponds to a variable that is \n+\t is subject of use-after-return sanitization.  */\n+      if (l > 2)\n+\t{\n+\t  decl = decls[l / 2 - 2];\n \t  if (asan_handled_variables != NULL\n \t      && asan_handled_variables->contains (decl))\n \t    {\n+\t      HOST_WIDE_INT size = offsets[l - 3] - offsets[l - 2];\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  const char *n = (DECL_NAME (decl)\n \t\t\t\t   ? IDENTIFIER_POINTER (DECL_NAME (decl))\n \t\t\t\t   : \"<unknown>\");\n \t\t  fprintf (dump_file, \"Unpoisoning shadow stack for variable: \"\n-\t\t\t   \"%s (%\" PRId64 \"B)\\n\", n,\n-\t\t\t   var_end_offset - var_offset);\n+\t\t\t   \"%s (%\" PRId64 \" B)\\n\", n, size);\n \t\t}\n \n-\t      unsigned HOST_WIDE_INT s\n-\t\t= shadow_mem_size (current_offset - last_offset);\n-\t      asan_clear_shadow (shadow_mem, s);\n-\t      HOST_WIDE_INT shift\n-\t\t= shadow_mem_size (current_offset - last_offset + rounded_size);\n-\t      shadow_mem = adjust_address (shadow_mem, VOIDmode, shift);\n-\t      last_offset = var_offset + rounded_size;\n-\t      current_offset = last_offset;\n+\t\tlast_size += size & ~(ASAN_RED_ZONE_SIZE - HOST_WIDE_INT_1);\n \t    }\n-\n \t}\n-\n-      /* Handle last redzone.  */\n-      current_offset = offsets[0];\n-      asan_clear_shadow (shadow_mem,\n-\t\t\t shadow_mem_size (current_offset - last_offset));\n+    }\n+  if (last_size)\n+    {\n+      shadow_mem = adjust_address (shadow_mem, VOIDmode,\n+\t\t\t\t   (last_offset - prev_offset)\n+\t\t\t\t   >> ASAN_SHADOW_SHIFT);\n+      asan_clear_shadow (shadow_mem, last_size >> ASAN_SHADOW_SHIFT);\n     }\n \n   /* Clean-up set with instrumented stack variables.  */\n@@ -2802,9 +2799,13 @@ asan_expand_mark_ifn (gimple_stmt_iterator *iter)\n     decl = TREE_OPERAND (decl, 0);\n \n   gcc_checking_assert (TREE_CODE (decl) == VAR_DECL);\n-  if (asan_handled_variables == NULL)\n-    asan_handled_variables = new hash_set<tree> (16);\n-  asan_handled_variables->add (decl);\n+\n+  if (is_poison)\n+    {\n+      if (asan_handled_variables == NULL)\n+\tasan_handled_variables = new hash_set<tree> (16);\n+      asan_handled_variables->add (decl);\n+    }\n   tree len = gimple_call_arg (g, 2);\n \n   gcc_assert (tree_fits_shwi_p (len));"}]}