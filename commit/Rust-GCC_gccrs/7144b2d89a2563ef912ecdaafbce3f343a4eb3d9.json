{"sha": "7144b2d89a2563ef912ecdaafbce3f343a4eb3d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0NGIyZDg5YTI1NjNlZjkxMmVjZGFhZmJjZTNmMzQzYTRlYjNkOQ==", "commit": {"author": {"name": "Dhananjay R. Deshpande", "email": "dhananjayd@kpit.com", "date": "2002-12-06T20:10:50Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-12-06T20:10:50Z"}, "message": "sh.c (calc_live_regs): Save fpscr only if target has FPU.\n\n2002-12-06 Dhananjay Deshpande <dhananjayd@kpit.com>\n\n\t* gcc/config/sh/sh.c (calc_live_regs): Save fpscr only if target has\n\tFPU.\n\t(push): Generate push_fpscr.\n\t(pop): Generate pop_fpscr.\n\t* gcc/config/sh/sh.md : Add define_expand \"push_fpscr\", \"pop_fpscr\".\n\t(fpu_switch): Add alternative to push fpscr.  Enable for TARGET_SH3E.\n\nFrom-SVN: r59893", "tree": {"sha": "084ce1749cec1c073a7d404b9a592d5d495b0247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/084ce1749cec1c073a7d404b9a592d5d495b0247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9/comments", "author": null, "committer": null, "parents": [{"sha": "0cc1565af00c141e5ad2be28e0312d57dcdcced5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc1565af00c141e5ad2be28e0312d57dcdcced5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cc1565af00c141e5ad2be28e0312d57dcdcced5"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "612294ccc35a5623d82a8d9bf90ba072849a25f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7144b2d89a2563ef912ecdaafbce3f343a4eb3d9", "patch": "@@ -1,3 +1,12 @@\n+2002-12-06 Dhananjay Deshpande <dhananjayd@kpit.com>\n+\n+\t* gcc/config/sh/sh.c (calc_live_regs): Save fpscr only if target has\n+\tFPU.\n+\t(push): Generate push_fpscr.\n+\t(pop): Generate pop_fpscr.\n+\t* gcc/config/sh/sh.md : Add define_expand \"push_fpscr\", \"pop_fpscr\".\n+\t(fpu_switch): Add alternative to push fpscr.  Enable for TARGET_SH3E.\n+\n Fri Dec  6 19:36:24 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.c (dump_table): DImode pool constants need only 32 bit alignment."}, {"sha": "c33b57e3eb291a4043d8756eb939edca8c7a0c97", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7144b2d89a2563ef912ecdaafbce3f343a4eb3d9", "patch": "@@ -4305,6 +4305,8 @@ push (rn)\n   rtx x;\n   if (rn == FPUL_REG)\n     x = gen_push_fpul ();\n+  else if (rn == FPSCR_REG)\n+    x = gen_push_fpscr ();\n   else if (TARGET_SH4 && TARGET_FMOVD && ! TARGET_FPU_SINGLE\n \t   && FP_OR_XD_REGISTER_P (rn))\n     {\n@@ -4333,6 +4335,8 @@ pop (rn)\n   rtx x;\n   if (rn == FPUL_REG)\n     x = gen_pop_fpul ();\n+  else if (rn == FPSCR_REG)\n+    x = gen_pop_fpscr ();\n   else if (TARGET_SH4 && TARGET_FMOVD && ! TARGET_FPU_SINGLE\n \t   && FP_OR_XD_REGISTER_P (rn))\n     {\n@@ -4431,7 +4435,9 @@ calc_live_regs (count_ptr, live_regs_mask)\n \t\t  && pr_live))\n \t     && reg != STACK_POINTER_REGNUM && reg != ARG_POINTER_REGNUM\n \t     && reg != RETURN_ADDRESS_POINTER_REGNUM\n-\t     && reg != T_REG && reg != GBR_REG)\n+\t     && reg != T_REG && reg != GBR_REG\n+\t     /* Push fpscr only on targets which have FPU */\n+\t     && (reg != FPSCR_REG || TARGET_FPU_ANY))\n \t  : (/* Only push those regs which are used and need to be saved.  */\n \t     (TARGET_SHCOMPACT\n \t      && flag_pic"}, {"sha": "e545b0a63d2d194a2e42c7d7c343af58d68c80c5", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7144b2d89a2563ef912ecdaafbce3f343a4eb3d9/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=7144b2d89a2563ef912ecdaafbce3f343a4eb3d9", "patch": "@@ -3335,6 +3335,32 @@\n   \"TARGET_SH1 && ! TARGET_SH5\"\n   \"\")\n \n+(define_expand \"push_fpscr\"\n+  [(const_int 0)]\n+  \"TARGET_SH3E\"\n+  \"\n+{\n+  rtx insn = emit_insn (gen_fpu_switch (gen_rtx (MEM, PSImode,\n+\t\t\t\t\t\t gen_rtx (PRE_DEC, Pmode,\n+\t\t\t\t\t\t\t  stack_pointer_rtx)),\n+\t\t\t\t\tget_fpscr_rtx ()));\n+  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, stack_pointer_rtx, NULL_RTX);\n+  DONE;\n+}\")\n+\n+(define_expand \"pop_fpscr\"\n+  [(const_int 0)]\n+  \"TARGET_SH3E\"\n+  \"\n+{\n+  rtx insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (),\n+\t\t\t\t\tgen_rtx (MEM, PSImode,\n+\t\t\t\t\t\t gen_rtx (POST_INC, Pmode,\n+\t\t\t\t\t\t\t  stack_pointer_rtx))));\n+  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, stack_pointer_rtx, NULL_RTX);\n+  DONE;\n+}\")\n+\n ;; These two patterns can happen as the result of optimization, when\n ;; comparisons get simplified to a move of zero or 1 into the T reg.\n ;; They don't disappear completely, because the T reg is a fixed hard reg.\n@@ -7853,9 +7879,9 @@\n ;; The mac_gp type for r/!c might look a bit odd, but it actually schedules\n ;; like a mac -> gpr move.\n (define_insn \"fpu_switch\"\n-  [(set (match_operand:PSI 0 \"register_operand\" \"=c,c,r,c,c,r,m,r\")\n-\t(match_operand:PSI 1 \"general_movsrc_operand\" \"c,>,m,m,r,r,r,!c\"))]\n-  \"TARGET_SH4\n+  [(set (match_operand:PSI 0 \"general_movdst_operand\" \"=c,c,r,c,c,r,m,r,<\")\n+\t(match_operand:PSI 1 \"general_movsrc_operand\" \"c,>,m,m,r,r,r,!c,c\"))]\n+  \"TARGET_SH3E\n    && (! reload_completed\n        || true_regnum (operands[0]) != FPSCR_REG\n        || GET_CODE (operands[1]) != MEM\n@@ -7868,9 +7894,10 @@\n \tlds\t%1,fpscr\n \tmov\t%1,%0\n \tmov.l\t%1,%0\n-\tsts\tfpscr,%0\"\n-  [(set_attr \"length\" \"0,2,2,4,2,2,2,2\")\n-   (set_attr \"type\" \"nil,mem_fpscr,load,mem_fpscr,gp_fpscr,move,store,mac_gp\")])\n+\tsts\tfpscr,%0\n+\tsts.l\tfpscr,%0\"\n+  [(set_attr \"length\" \"0,2,2,4,2,2,2,2,2\")\n+   (set_attr \"type\" \"nil,mem_fpscr,load,mem_fpscr,gp_fpscr,move,store,mac_gp,store\")])\n \n (define_split\n   [(set (reg:PSI FPSCR_REG)"}]}