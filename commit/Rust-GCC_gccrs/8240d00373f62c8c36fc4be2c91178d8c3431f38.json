{"sha": "8240d00373f62c8c36fc4be2c91178d8c3431f38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0MGQwMDM3M2Y2MmM4YzM2ZmM0YmUyYzkxMTc4ZDhjMzQzMWYzOA==", "commit": {"author": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-10-17T19:17:36Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-10-17T19:17:36Z"}, "message": "Add gcc_checking_assert for sbitmap.c.\n\nFrom-SVN: r253825", "tree": {"sha": "6b351b34fde5fc13bcabd361f5ab2aa73c7ad1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b351b34fde5fc13bcabd361f5ab2aa73c7ad1d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8240d00373f62c8c36fc4be2c91178d8c3431f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8240d00373f62c8c36fc4be2c91178d8c3431f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8240d00373f62c8c36fc4be2c91178d8c3431f38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8240d00373f62c8c36fc4be2c91178d8c3431f38/comments", "author": null, "committer": null, "parents": [{"sha": "a584b03d5f53ce92fbdb49552d7b2ece09d789e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a584b03d5f53ce92fbdb49552d7b2ece09d789e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a584b03d5f53ce92fbdb49552d7b2ece09d789e7"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "df933f6516cd6a0a8fcf1e0f27e43cf47f9749ca", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8240d00373f62c8c36fc4be2c91178d8c3431f38/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8240d00373f62c8c36fc4be2c91178d8c3431f38/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=8240d00373f62c8c36fc4be2c91178d8c3431f38", "patch": "@@ -180,13 +180,17 @@ sbitmap_vector_alloc (unsigned int n_vecs, unsigned int n_elms)\n void\n bitmap_copy (sbitmap dst, const_sbitmap src)\n {\n+  gcc_checking_assert (src->size <= dst->size);\n+\n   memcpy (dst->elms, src->elms, sizeof (SBITMAP_ELT_TYPE) * dst->size);\n }\n \n /* Determine if a == b.  */\n int\n bitmap_equal_p (const_sbitmap a, const_sbitmap b)\n {\n+  bitmap_check_sizes (a, b);\n+\n   return !memcmp (a->elms, b->elms, sizeof (SBITMAP_ELT_TYPE) * a->size);\n }\n \n@@ -211,6 +215,8 @@ bitmap_clear_range (sbitmap bmap, unsigned int start, unsigned int count)\n   if (count == 0)\n     return;\n \n+  bitmap_check_index (bmap, start + count - 1);\n+\n   unsigned int start_word = start / SBITMAP_ELT_BITS;\n   unsigned int start_bitno = start % SBITMAP_ELT_BITS;\n \n@@ -267,6 +273,8 @@ bitmap_set_range (sbitmap bmap, unsigned int start, unsigned int count)\n   if (count == 0)\n     return;\n \n+  bitmap_check_index (bmap, start + count - 1);\n+\n   unsigned int start_word = start / SBITMAP_ELT_BITS;\n   unsigned int start_bitno = start % SBITMAP_ELT_BITS;\n \n@@ -324,6 +332,8 @@ bool\n bitmap_bit_in_range_p (const_sbitmap bmap, unsigned int start, unsigned int end)\n {\n   gcc_checking_assert (start <= end);\n+  bitmap_check_index (bmap, end);\n+\n   unsigned int start_word = start / SBITMAP_ELT_BITS;\n   unsigned int start_bitno = start % SBITMAP_ELT_BITS;\n \n@@ -467,6 +477,9 @@ bitmap_vector_ones (sbitmap *bmap, unsigned int n_vecs)\n bool\n bitmap_ior_and_compl (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n+  bitmap_check_sizes (a, b);\n+  bitmap_check_sizes (b, c);\n+\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;\n@@ -489,6 +502,8 @@ bitmap_ior_and_compl (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitm\n void\n bitmap_not (sbitmap dst, const_sbitmap src)\n {\n+  bitmap_check_sizes (src, dst);\n+\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr srcp = src->elms;\n@@ -510,6 +525,9 @@ bitmap_not (sbitmap dst, const_sbitmap src)\n void\n bitmap_and_compl (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n+  bitmap_check_sizes (a, b);\n+  bitmap_check_sizes (b, dst);\n+\n   unsigned int i, dst_size = dst->size;\n   unsigned int min_size = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n@@ -537,6 +555,8 @@ bitmap_and_compl (sbitmap dst, const_sbitmap a, const_sbitmap b)\n bool\n bitmap_intersect_p (const_sbitmap a, const_sbitmap b)\n {\n+  bitmap_check_sizes (a, b);\n+\n   const_sbitmap_ptr ap = a->elms;\n   const_sbitmap_ptr bp = b->elms;\n   unsigned int i, n;\n@@ -555,6 +575,9 @@ bitmap_intersect_p (const_sbitmap a, const_sbitmap b)\n bool\n bitmap_and (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n+  bitmap_check_sizes (a, b);\n+  bitmap_check_sizes (b, dst);\n+\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;\n@@ -577,6 +600,9 @@ bitmap_and (sbitmap dst, const_sbitmap a, const_sbitmap b)\n bool\n bitmap_xor (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n+  bitmap_check_sizes (a, b);\n+  bitmap_check_sizes (b, dst);\n+\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;\n@@ -599,6 +625,9 @@ bitmap_xor (sbitmap dst, const_sbitmap a, const_sbitmap b)\n bool\n bitmap_ior (sbitmap dst, const_sbitmap a, const_sbitmap b)\n {\n+  bitmap_check_sizes (a, b);\n+  bitmap_check_sizes (b, dst);\n+\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;\n@@ -620,6 +649,8 @@ bitmap_ior (sbitmap dst, const_sbitmap a, const_sbitmap b)\n bool\n bitmap_subset_p (const_sbitmap a, const_sbitmap b)\n {\n+  bitmap_check_sizes (a, b);\n+\n   unsigned int i, n = a->size;\n   const_sbitmap_ptr ap, bp;\n \n@@ -636,6 +667,10 @@ bitmap_subset_p (const_sbitmap a, const_sbitmap b)\n bool\n bitmap_or_and (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n+  bitmap_check_sizes (a, b);\n+  bitmap_check_sizes (b, c);\n+  bitmap_check_sizes (c, dst);\n+\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;\n@@ -659,6 +694,10 @@ bitmap_or_and (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n bool\n bitmap_and_or (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n {\n+  bitmap_check_sizes (a, b);\n+  bitmap_check_sizes (b, c);\n+  bitmap_check_sizes (c, dst);\n+\n   unsigned int i, n = dst->size;\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;"}, {"sha": "a5ff0685e435afc5bccae4baf6685153fb09a939", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8240d00373f62c8c36fc4be2c91178d8c3431f38/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8240d00373f62c8c36fc4be2c91178d8c3431f38/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=8240d00373f62c8c36fc4be2c91178d8c3431f38", "patch": "@@ -96,10 +96,29 @@ struct simple_bitmap_def\n /* Return the number of bits in BITMAP.  */\n #define SBITMAP_SIZE(BITMAP) ((BITMAP)->n_bits)\n \n+/* Verify that access at INDEX in bitmap MAP is valid.  */ \n+\n+static inline void\n+bitmap_check_index (const_sbitmap map, int index)\n+{\n+  gcc_checking_assert (index >= 0);\n+  gcc_checking_assert ((unsigned int)index < map->n_bits);\n+}\n+\n+/* Verify that bitmaps A and B have same size.  */ \n+\n+static inline void\n+bitmap_check_sizes (const_sbitmap a, const_sbitmap b)\n+{\n+  gcc_checking_assert (a->n_bits == b->n_bits);\n+}\n+\n /* Test if bit number bitno in the bitmap is set.  */\n static inline SBITMAP_ELT_TYPE\n bitmap_bit_p (const_sbitmap map, int bitno)\n {\n+  bitmap_check_index (map, bitno);\n+\n   size_t i = bitno / SBITMAP_ELT_BITS;\n   unsigned int s = bitno % SBITMAP_ELT_BITS;\n   return (map->elms[i] >> s) & (SBITMAP_ELT_TYPE) 1;\n@@ -110,6 +129,8 @@ bitmap_bit_p (const_sbitmap map, int bitno)\n static inline void\n bitmap_set_bit (sbitmap map, int bitno)\n {\n+  bitmap_check_index (map, bitno);\n+\n   map->elms[bitno / SBITMAP_ELT_BITS]\n     |= (SBITMAP_ELT_TYPE) 1 << (bitno) % SBITMAP_ELT_BITS;\n }\n@@ -119,6 +140,8 @@ bitmap_set_bit (sbitmap map, int bitno)\n static inline void\n bitmap_clear_bit (sbitmap map, int bitno)\n {\n+  bitmap_check_index (map, bitno);\n+\n   map->elms[bitno / SBITMAP_ELT_BITS]\n     &= ~((SBITMAP_ELT_TYPE) 1 << (bitno) % SBITMAP_ELT_BITS);\n }\n@@ -148,6 +171,8 @@ static inline void\n bmp_iter_set_init (sbitmap_iterator *i, const_sbitmap bmp,\n \t\t   unsigned int min, unsigned *bit_no ATTRIBUTE_UNUSED)\n {\n+  bitmap_check_index (bmp, min);\n+\n   i->word_num = min / (unsigned int) SBITMAP_ELT_BITS;\n   i->bit_num = min;\n   i->size = bmp->size;"}]}