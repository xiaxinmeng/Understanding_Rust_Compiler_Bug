{"sha": "22b0476a814a4759bb68f38b9415624a0fe52a7d", "node_id": "C_kwDOANBUbNoAKDIyYjA0NzZhODE0YTQ3NTliYjY4ZjM4Yjk0MTU2MjRhMGZlNTJhN2Q", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2022-03-30T17:03:44Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2022-03-30T17:10:45Z"}, "message": "[PR105032] LRA: modify loop condition to find reload insns for hard reg splitting\n\nWhen trying to split hard reg live range to assign hard reg to a reload\npseudo, LRA searches for reload insns of the reload pseudo\nassuming a specific order of the reload insns.  This order is violated if\nreload involved in inheritance transformation. In such case, the loop used\nfor reload insn searching can become infinite.  The patch fixes this.\n\ngcc/ChangeLog:\n\n\tPR middle-end/105032\n\t* lra-assigns.cc (find_reload_regno_insns): Modify loop condition.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/105032\n\t* gcc.target/i386/pr105032.c: New.", "tree": {"sha": "9460399844ccecd8f5b568625367e47ebf3c1633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9460399844ccecd8f5b568625367e47ebf3c1633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22b0476a814a4759bb68f38b9415624a0fe52a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b0476a814a4759bb68f38b9415624a0fe52a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b0476a814a4759bb68f38b9415624a0fe52a7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b0476a814a4759bb68f38b9415624a0fe52a7d/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a3fda072e6caf149ce5b9616fc52129efaf2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a3fda072e6caf149ce5b9616fc52129efaf2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a3fda072e6caf149ce5b9616fc52129efaf2e9"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "486e94f200638d623e8516df62a6221bcbca57ec", "filename": "gcc/lra-assigns.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22b0476a814a4759bb68f38b9415624a0fe52a7d/gcc%2Flra-assigns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22b0476a814a4759bb68f38b9415624a0fe52a7d/gcc%2Flra-assigns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.cc?ref=22b0476a814a4759bb68f38b9415624a0fe52a7d", "patch": "@@ -1730,7 +1730,8 @@ find_reload_regno_insns (int regno, rtx_insn * &start, rtx_insn * &finish)\n     {\n       for (prev_insn = PREV_INSN (start_insn),\n \t     next_insn = NEXT_INSN (start_insn);\n-\t   insns_num != 1 && (prev_insn != NULL || next_insn != NULL); )\n+\t   insns_num != 1 && (prev_insn != NULL\n+\t\t\t      || (next_insn != NULL && second_insn == NULL)); )\n \t{\n \t  if (prev_insn != NULL)\n \t    {"}, {"sha": "57b21d3cd7ad733232b66f6eba13c8414d332826", "filename": "gcc/testsuite/gcc.target/i386/pr105032.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22b0476a814a4759bb68f38b9415624a0fe52a7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105032.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22b0476a814a4759bb68f38b9415624a0fe52a7d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105032.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105032.c?ref=22b0476a814a4759bb68f38b9415624a0fe52a7d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+/* { dg-additional-options \"-m32\" { target x86_64-*-* } } */\n+\n+typedef unsigned int size_t;\t\n+__extension__ typedef long int __off_t;\n+typedef __off_t off_t;\n+static void *__sys_mmap(void *addr, size_t length, int prot, int flags, int fd,\n+\t\t\toff_t offset)\n+{\n+  offset >>= 12;\n+  return (void *)({ long _ret;\n+      register long _num asm(\"eax\") = (192);\n+      register long _arg1 asm(\"ebx\") = (long)(addr);\n+      register long _arg2 asm(\"ecx\") = (long)(length);\n+      register long _arg3 asm(\"edx\") = (long)(prot);\n+      register long _arg4 asm(\"esi\") = (long)(flags);\n+      register long _arg5 asm(\"edi\") = (long)(fd);\n+      long _arg6 = (long)(offset);\n+      asm volatile (\"pushl\t%[_arg6]\\n\\t\"\n+\t\t    \"pushl\t%%ebp\\n\\t\"\n+\t\t    \"movl\t4(%%esp), %%ebp\\n\\t\"\n+\t\t    \"int\t$0x80\\n\\t\"\n+\t\t    \"popl\t%%ebp\\n\\t\"\n+\t\t    \"addl\t$4,%%esp\\n\\t\"\n+\t\t    : \"=a\"(_ret)\n+\t\t    : \"r\"(_num), \"r\"(_arg1), \"r\"(_arg2), \"r\"(_arg3), \"r\"(_arg4),\"r\"(_arg5), [_arg6]\"m\"(_arg6)\n+\t\t    : \"memory\", \"cc\" );\n+      _ret; });\n+}\n+\n+int main(void)\n+{\n+  __sys_mmap(((void *)0), 0x1000, 0x1 | 0x2, 0x20 | 0x02, -1, 0);\n+  return 0;\n+}"}]}