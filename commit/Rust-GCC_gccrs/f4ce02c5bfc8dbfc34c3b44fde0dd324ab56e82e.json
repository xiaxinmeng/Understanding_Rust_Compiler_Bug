{"sha": "f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjZTAyYzViZmM4ZGJmYzM0YzNiNDRmZGUwZGQzMjRhYjU2ZTgyZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-15T20:02:11Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-15T20:02:11Z"}, "message": "vecir.h: New file with VEC primitives for tree, gimple, and rtl.\n\ngcc/ChangeLog\n\t* vecir.h: New file with VEC primitives for tree, gimple, and rtl.\n\t* Makefile.in: Add it.\n\tFix all other Makefile dependencies for changes below.\n\t* tree.h: Include it instead of defining VEC primitives here.\n\t* gimple.h: Likewise.\n\t* rtl.h: Likewise.\n\t* tree-inline.h: Inlclude vecir.h instead of gimple.h.\n\t* except.h: Include vecir.h, break dependence on tree.h.\n\n\t* gimplify.c (append_to_statement_list_1, append_to_statement_list):\n\tMove from here...\n\t* tree-iterator.c: ...to here.\n\t* tree-iterator.h: Fix file introduction comment.  Add extern markers.\n\n\t* c-lex.c: Include fixed-value.h instead of rtl.h.  Do not include\n\ttm_p.h.\n\t* c-cppbuiltin.c: Explain why debug.h and tm_p.h are included.\n\t* c-objc-common.h: Do not include tm.h, rtl.h, insn-config.h,\n\tintegrate.h, function.h, toplev.h, tree-inline.h, ggc.h,\n\ttree-mudflap.h, and target.h.\n\t* c-semantics.c: Do not include except.h, ggc.h, rtl.h, timevar.h,\n\tpredict.h, tree-inline.h, gimple.h, and langhooks.h.\n\t* c-decl.c: Do not include expr.h, ggc.h, libfuncs.h, except.h.\n\tAdd FIXME for why gimple.h is still included (should be unnecessary\n\tsince GCC 4.5 gimplification unit-at-a-time).\n\t* c-typeck.c: Do not include rtl.h, tm_p.h, ggc.h, and gimple.h.\n\t* c-pragma.c: Add FIXME for why function.h needs to be included just\n\tfor cfun, at front-end level.\n\tAdd note that REGISTER_TARGET_PRAGMAS should probably be a target hook.\n\tDo not include ggc.h, but include vecprim.h for VEC(char).\n\t* c-opts.c: Do not include tm.h, tree-inline.h, and tm_p.h.\n\tExplain why target.h is included.\n\t* c-omp.h: Do not include tm.h, function.h, and bitmap.h.\n\tExplain why gimple.h is included.\n\t* c-ppoutput.c: Do not include tm.h.\n\t* c-common.c: Do not include gimple.h.  Explain why expr.h is included.\n\t* c-parses.c: Explain why rtl.h is included, and that this (and only\n\tthis) is also why tm.h must be included.\n\tDo not include except.h.\n\t* c-lang.c: Do not include ggc.h.\n\ncp/ChangeLog\n\t* decl.c: Include tree-iterator.h, as fixup for tree-inline.h changes.\n\t* Make-lang.in: Fix dependencies accordingly.\n\nFrom-SVN: r159442", "tree": {"sha": "5404e346547ef403d93fdcae7aeef40ed695df63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5404e346547ef403d93fdcae7aeef40ed695df63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/comments", "author": null, "committer": null, "parents": [{"sha": "12201e487393e26e95e0869d36b1bce5aa979db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12201e487393e26e95e0869d36b1bce5aa979db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12201e487393e26e95e0869d36b1bce5aa979db5"}], "stats": {"total": 351, "additions": 197, "deletions": 154}, "files": [{"sha": "fbd970e082783a952bc48263733fe63251bc797e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -1,3 +1,46 @@\n+2010-05-15  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* vecir.h: New file with VEC primitives for tree, gimple, and rtl.\n+\t* Makefile.in: Add it.\n+\tFix all other Makefile dependencies for changes below.\n+\t* tree.h: Include it instead of defining VEC primitives here.\n+\t* gimple.h: Likewise.\n+\t* rtl.h: Likewise.\n+\t* tree-inline.h: Inlclude vecir.h instead of gimple.h.\n+\t* except.h: Include vecir.h, break dependence on tree.h.\n+\n+\t* gimplify.c (append_to_statement_list_1, append_to_statement_list):\n+\tMove from here...\n+\t* tree-iterator.c: ...to here.\n+\t* tree-iterator.h: Fix file introduction comment.  Add extern markers.\n+\n+\t* c-lex.c: Include fixed-value.h instead of rtl.h.  Do not include\n+\ttm_p.h.\n+\t* c-cppbuiltin.c: Explain why debug.h and tm_p.h are included.\n+\t* c-objc-common.h: Do not include tm.h, rtl.h, insn-config.h,\n+\tintegrate.h, function.h, toplev.h, tree-inline.h, ggc.h,\n+\ttree-mudflap.h, and target.h.\n+\t* c-semantics.c: Do not include except.h, ggc.h, rtl.h, timevar.h,\n+\tpredict.h, tree-inline.h, gimple.h, and langhooks.h.\n+\t* c-decl.c: Do not include expr.h, ggc.h, libfuncs.h, except.h.\n+\tAdd FIXME for why gimple.h is still included (should be unnecessary\n+\tsince GCC 4.5 gimplification unit-at-a-time).\n+\t* c-typeck.c: Do not include rtl.h, tm_p.h, ggc.h, and gimple.h.\n+\t* c-pragma.c: Add FIXME for why function.h needs to be included just\n+\tfor cfun, at front-end level.\n+\tAdd note that REGISTER_TARGET_PRAGMAS should probably be a target hook.\n+\tDo not include ggc.h, but include vecprim.h for VEC(char).\n+\t* c-opts.c: Do not include tm.h, tree-inline.h, and tm_p.h.\n+\tExplain why target.h is included.\n+\t* c-omp.h: Do not include tm.h, function.h, and bitmap.h.\n+\tExplain why gimple.h is included.\n+\t* c-ppoutput.c: Do not include tm.h.\n+\t* c-common.c: Do not include gimple.h.  Explain why expr.h is included.\n+\t* c-parses.c: Explain why rtl.h is included, and that this (and only\n+\tthis) is also why tm.h must be included.\n+\tDo not include except.h.\n+\t* c-lang.c: Do not include ggc.h.\n+\n 2010-05-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* targhooks.c (GO_IF_MODE_DEPENDENT_ADDRESS): Use CONST_CAST_RTX."}, {"sha": "91ea5088021b7ed9677988dfc57779d1b45dbf5d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -858,7 +858,7 @@ REVISION_s  := \"\\\"\\\"\"\n endif\n \n # Shorthand variables for dependency lists.\n-EXCEPT_H = except.h sbitmap.h vecprim.h\n+EXCEPT_H = except.h sbitmap.h vecprim.h vecir.h\n TOPLEV_H = toplev.h $(INPUT_H) bversion.h\n TARGET_H = $(TM_H) target.h insn-modes.h\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n@@ -869,19 +869,19 @@ TARGET_DEF_H = target-def.h $(HOOKS_H) targhooks.h\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n   $(INPUT_H) $(REAL_H) statistics.h vec.h $(FIXED_VALUE_H) alias.h\n FIXED_VALUE_H = fixed-value.h $(MACHMODE_H) double-int.h\n-RTL_H = $(RTL_BASE_H) genrtl.h\n+RTL_H = $(RTL_BASE_H) genrtl.h vecir.h\n PARAMS_H = params.h params.def\n BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def\n TREE_H = tree.h all-tree.def tree.def c-common.def $(lang_tree_files) \\\n           $(MACHMODE_H) tree-check.h $(BUILTINS_DEF) \\\n           $(INPUT_H) statistics.h vec.h treestruct.def $(HASHTAB_H) \\\n-          double-int.h alias.h $(SYMTAB_H) options.h\n+          double-int.h alias.h $(SYMTAB_H) options.h vecir.h\n BASIC_BLOCK_H = basic-block.h $(BITMAP_H) sbitmap.h $(PARTITION_H) \\\n           hard-reg-set.h $(PREDICT_H) vec.h $(FUNCTION_H) \\\n           cfghooks.h $(OBSTACK_H)\n GIMPLE_H = gimple.h gimple.def gsstruct.def pointer-set.h vec.h \\\n \t$(GGC_H) $(BASIC_BLOCK_H) $(TM_H) $(TARGET_H) tree-ssa-operands.h \\\n-\ttree-ssa-alias.h\n+\ttree-ssa-alias.h vecir.h\n GCOV_IO_H = gcov-io.h gcov-iov.h auto-host.h\n COVERAGE_H = coverage.h $(GCOV_IO_H)\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n@@ -944,7 +944,7 @@ C_PRETTY_PRINT_H = c-pretty-print.h $(PRETTY_PRINT_H) $(C_COMMON_H) $(TREE_H)\n SCEV_H = tree-scalar-evolution.h $(GGC_H) tree-chrec.h $(PARAMS_H)\n LAMBDA_H = lambda.h $(TREE_H) vec.h $(GGC_H)\n TREE_DATA_REF_H = tree-data-ref.h $(LAMBDA_H) omega.h graphds.h $(SCEV_H)\n-TREE_INLINE_H = tree-inline.h $(GIMPLE_H)\n+TREE_INLINE_H = tree-inline.h vecir.h\n REAL_H = real.h $(MACHMODE_H)\n IRA_INT_H = ira.h ira-int.h $(CFGLOOP_H) alloc-pool.h\n DBGCNT_H = dbgcnt.h dbgcnt.def\n@@ -1959,7 +1959,7 @@ c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n c-parser.o : c-parser.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(GGC_H) $(TIMEVAR_H) $(C_TREE_H) $(INPUT_H) $(FLAGS_H) $(TOPLEV_H) output.h \\\n     $(CPPLIB_H) gt-c-parser.h $(RTL_H) langhooks.h $(C_COMMON_H) $(C_PRAGMA_H) \\\n-    vec.h $(TARGET_H) $(CGRAPH_H) $(PLUGIN_H) $(EXCEPT_H)\n+    vec.h $(TARGET_H) $(CGRAPH_H) $(PLUGIN_H)\n \n srcextra: gcc.srcextra lang.srcextra\n \n@@ -1972,39 +1972,36 @@ incpath.o: incpath.c incpath.h $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) \\\n \n c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) $(C_TREE_H) $(GGC_H) $(TARGET_H) $(FLAGS_H) $(FUNCTION_H) output.h \\\n-    $(EXPR_H) debug.h $(TOPLEV_H) intl.h $(TM_P_H) $(TREE_INLINE_H) $(TIMEVAR_H) \\\n+    debug.h $(TOPLEV_H) intl.h $(TM_P_H) $(TREE_INLINE_H) $(TIMEVAR_H) \\\n     opts.h $(C_PRAGMA_H) gt-c-decl.h $(CGRAPH_H) $(HASHTAB_H) libfuncs.h \\\n     $(EXCEPT_H) $(LANGHOOKS_DEF_H) $(TREE_DUMP_H) $(C_COMMON_H) $(CPPLIB_H) \\\n-    $(DIAGNOSTIC_H) $(INPUT_H) langhooks.h $(GIMPLE_H) tree-mudflap.h  \\\n-    pointer-set.h $(BASIC_BLOCK_H) $(GIMPLE_H) tree-iterator.h c-lang.h $(PLUGIN_H)\n+    $(DIAGNOSTIC_H) $(INPUT_H) langhooks.h tree-mudflap.h  \\\n+    pointer-set.h tree-iterator.h c-lang.h $(PLUGIN_H)\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(TREE_H) $(C_TREE_H) $(TARGET_H) $(FLAGS_H) intl.h output.h $(EXPR_H) \\\n-    $(RTL_H) $(TOPLEV_H) $(TM_P_H) langhooks.h $(GGC_H) $(TREE_FLOW_H) \\\n-    $(GIMPLE_H) tree-iterator.h c-lang.h\n+    $(TOPLEV_H) langhooks.h $(TREE_FLOW_H) tree-iterator.h c-lang.h\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(DIAGNOSTIC_H) \\\n-    $(GGC_H) langhooks.h $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-c.h \\\n+    langhooks.h $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-c.h \\\n     c-objc-common.h $(C_PRAGMA_H) c-common.def $(TREE_INLINE_H)\n stub-objc.o : stub-objc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n     $(C_COMMON_H)\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-    $(RTL_H) debug.h $(C_TREE_H) $(C_COMMON_H) $(REAL_H) $(SPLAY_TREE_H) \\\n+    $(FIXED_VALUE_H) debug.h $(C_TREE_H) $(C_COMMON_H) $(REAL_H) $(SPLAY_TREE_H) \\\n     $(C_PRAGMA_H) $(INPUT_H) intl.h $(FLAGS_H) $(TOPLEV_H) output.h \\\n-    $(CPPLIB_H) $(TARGET_H) $(TIMEVAR_H) $(TM_P_H)\n-c-ppoutput.o : c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+    $(CPPLIB_H) $(TARGET_H) $(TIMEVAR_H)\n+c-ppoutput.o : c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n     $(C_COMMON_H) $(TREE_H) $(CPPLIB_H) $(CPP_INTERNAL_H) $(C_PRAGMA_H)\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-    $(TM_H) $(TREE_H) $(C_TREE_H) $(RTL_H) insn-config.h $(INTEGRATE_H) \\\n-    $(FUNCTION_H) $(FLAGS_H) $(TOPLEV_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) \\\n-    langhooks.h $(GGC_H) $(TARGET_H) $(C_PRETTY_PRINT_H) c-objc-common.h \\\n-    tree-mudflap.h intl.h\n+    $(TREE_H) $(C_TREE_H) $(FLAGS_H) $(DIAGNOSTIC_H) \\\n+    langhooks.h $(GGC_H) $(C_PRETTY_PRINT_H) c-objc-common.h intl.h\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(FLAGS_H) $(TOPLEV_H)\n c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(TREE_H) $(FLAGS_H) $(TOPLEV_H) $(C_COMMON_H) convert.h $(C_TREE_H) \\\n     langhooks.h $(TARGET_H)\n c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-    $(TREE_H) $(FUNCTION_H) $(C_PRAGMA_H) $(TOPLEV_H) output.h $(GGC_H) $(TM_P_H) \\\n+    $(TREE_H) $(FUNCTION_H) $(C_PRAGMA_H) $(TOPLEV_H) output.h $(TM_P_H) \\\n     $(C_COMMON_H) $(TARGET_H) gt-c-pragma.h $(CPPLIB_H) $(FLAGS_H) $(DIAGNOSTIC_H) \\\n     opts.h $(PLUGINS_H)\n graph.o: graph.c $(SYSTEM_H) coretypes.h $(TM_H) $(TOPLEV_H) $(FLAGS_H) output.h \\\n@@ -2051,17 +2048,16 @@ c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(TARGET_H) $(C_TREE_H) tree-iterator.h langhooks.h tree-mudflap.h \\\n \tintl.h opts.h $(REAL_H) $(CPPLIB_H) $(TREE_INLINE_H) $(HASHTAB_H) \\\n \t$(BUILTINS_DEF) $(CGRAPH_H) $(BASIC_BLOCK_H) $(TARGET_DEF_H) \\\n-\t$(GIMPLE_H) libfuncs.h\n+\tlibfuncs.h\n \n c-pretty-print.o : c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n \t$(C_TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(REAL_H) \\\n \t$(DIAGNOSTIC_H) tree-iterator.h fixed-value.h intl.h\n \n-c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\t\\\n-        $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) $(TOPLEV_H) langhooks.h\t\t\\\n-        $(TREE_INLINE_H) $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n-        opts.h options.h $(MKDEPS_H) incpath.h cppdefault.h $(TARGET_H) \\\n-\t$(TM_P_H) $(C_TREE_H)\n+c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+        $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) $(TOPLEV_H) langhooks.h \\\n+        $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n+        opts.h options.h $(MKDEPS_H) incpath.h cppdefault.h $(C_TREE_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n@@ -2083,10 +2079,8 @@ c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) la\n \tc-format.h\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-\t$(TREE_H) $(FLAGS_H) $(TOPLEV_H) output.h $(RTL_H) $(GGC_H) \\\n-\t$(PREDICT_H) $(TREE_INLINE_H) $(C_COMMON_H) $(EXCEPT_H) $(FUNCTION_H) \\\n-\tlanghooks.h $(SPLAY_TREE_H) $(TIMEVAR_H) $(GIMPLE_H) \\\n-\ttree-iterator.h\n+\t$(TREE_H) $(FLAGS_H) $(TOPLEV_H) output.h $(C_COMMON_H) $(FUNCTION_H) \\\n+\tlanghooks.h $(SPLAY_TREE_H) $(TIMEVAR_H) tree-iterator.h\n \n c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(C_TREE_H) $(TREE_DUMP_H)\n@@ -2099,9 +2093,8 @@ c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n \t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n \t  $< $(OUTPUT_OPTION)\n \n-c-omp.o : c-omp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(FUNCTION_H) $(C_COMMON_H) $(TOPLEV_H) $(GIMPLE_H) $(BITMAP_H) \\\n-\tlanghooks.h\n+c-omp.o : c-omp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n+\t$(C_COMMON_H) $(TOPLEV_H) $(GIMPLE_H) langhooks.h\n \n # Language-independent files.\n \n@@ -3585,10 +3578,10 @@ s-constrs-h: $(MD_DEPS) build/genpreds$(build_exeext)\n \t$(STAMP) s-constrs-h\n \n GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n+  $(srcdir)/vecprim.h $(srcdir)/vecir.h \\\n   $(host_xm_file_list) \\\n   $(tm_file_list) $(HASHTAB_H) $(SPLAY_TREE_H) $(srcdir)/bitmap.h \\\n   $(srcdir)/alias.h $(srcdir)/coverage.c $(srcdir)/rtl.h \\\n-  $(srcdir)/vecprim.h \\\n   $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/libfuncs.h $(SYMTAB_H) \\\n   $(srcdir)/real.h $(srcdir)/function.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \\\n   $(srcdir)/fixed-value.h \\"}, {"sha": "720569f722470b1dc2fe086784d256488ffdba55", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-pragma.h\"\n #include \"rtl.h\"\n #include \"ggc.h\"\n-#include \"expr.h\"\n+#include \"expr.h\" /* For vector_mode_valid_p */\n #include \"c-common.h\"\n #include \"tm_p.h\"\n #include \"obstack.h\"\n@@ -48,7 +48,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"real.h\"\n #include \"cgraph.h\"\n #include \"target-def.h\"\n-#include \"gimple.h\"\n #include \"fixed-value.h\"\n #include \"libfuncs.h\"\n "}, {"sha": "89646a317c022997442618d2f6a03df50fc8228c", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -30,9 +30,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-pragma.h\"\n #include \"output.h\"\n #include \"except.h\"\t\t/* For USING_SJLJ_EXCEPTIONS.  */\n-#include \"debug.h\"\t\t/* For dwarf2out_do_frame.  */\n+#include \"debug.h\"\t\t/* For dwarf2out_do_cfi_asm.  */\n #include \"toplev.h\"\n-#include \"tm_p.h\"\t\t/* Target prototypes.  */\n+#include \"tm_p.h\"\t\t/* For TARGET_CPU_CPP_BUILTINS & friends.  */\n #include \"target.h\"\n \n #ifndef TARGET_OS_CPP_BUILTINS"}, {"sha": "554817f548300e6ef3817269e8ea18f60fe76852", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -38,10 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"function.h\"\n #include \"output.h\"\n-#include \"expr.h\"\n #include \"c-tree.h\"\n #include \"toplev.h\"\n-#include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"cpplib.h\"\n #include \"target.h\"\n@@ -53,17 +51,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-lang.h\"\n #include \"langhooks.h\"\n #include \"tree-mudflap.h\"\n-#include \"gimple.h\"\n+#include \"gimple.h\" /* FIXME: For gimple_set_body and gimple_body, but why?  */\n #include \"tree-iterator.h\"\n #include \"diagnostic.h\"\n #include \"tree-dump.h\"\n #include \"cgraph.h\"\n #include \"hashtab.h\"\n-#include \"libfuncs.h\"\n-#include \"except.h\"\n #include \"langhooks-def.h\"\n #include \"pointer-set.h\"\n-#include \"gimple.h\"\n #include \"plugin.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */"}, {"sha": "31a122fba82c29eddfa19184af41afcf8944fcd1", "filename": "gcc/c-lang.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -27,7 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"c-tree.h\"\n #include \"c-common.h\"\n-#include \"ggc.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"tree-inline.h\""}, {"sha": "53a3b06a63b0ff613a491e39e37561f7daf31db2", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n \n #include \"real.h\"\n-#include \"rtl.h\"\n+#include \"fixed-value.h\"\n #include \"tree.h\"\n #include \"input.h\"\n #include \"output.h\"\n@@ -37,7 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-pragma.h\"\n #include \"toplev.h\"\n #include \"intl.h\"\n-#include \"tm_p.h\"\n #include \"splay-tree.h\"\n #include \"debug.h\"\n #include \"target.h\""}, {"sha": "277e97bcab276979fe2f0aafd49d797570d02ac7", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -21,23 +21,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"tree.h\"\n-#include \"rtl.h\"\n-#include \"insn-config.h\"\n-#include \"integrate.h\"\n #include \"c-tree.h\"\n #include \"intl.h\"\n #include \"c-pretty-print.h\"\n-#include \"function.h\"\n #include \"flags.h\"\n-#include \"toplev.h\"\n #include \"diagnostic.h\"\n-#include \"tree-inline.h\"\n-#include \"ggc.h\"\n #include \"langhooks.h\"\n-#include \"tree-mudflap.h\"\n-#include \"target.h\"\n #include \"c-objc-common.h\"\n \n static bool c_tree_printer (pretty_printer *, text_info *, const char *,"}, {"sha": "31970bdeaeebab72a95db3919ff2eeb5caaa7745", "filename": "gcc/c-omp.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-omp.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -24,13 +24,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"tree.h\"\n-#include \"function.h\"\n #include \"c-common.h\"\n #include \"toplev.h\"\n-#include \"gimple.h\"\n-#include \"bitmap.h\"\n+#include \"gimple.h\"\t\t/* For create_tmp_var_raw.  */\n #include \"langhooks.h\"\n \n "}, {"sha": "fb2b8e2349e85bafac39d1dbf64558fd14d11c19", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -22,14 +22,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"tree.h\"\n #include \"c-common.h\"\n #include \"c-pragma.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n #include \"langhooks.h\"\n-#include \"tree-inline.h\"\n #include \"diagnostic.h\"\n #include \"intl.h\"\n #include \"cppdefault.h\"\n@@ -38,8 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"options.h\"\n #include \"mkdeps.h\"\n-#include \"target.h\"\n-#include \"tm_p.h\"\n+#include \"target.h\"\t\t/* For gcc_targetcm.  */\n #include \"c-tree.h\"\t\t/* For c_cpp_error.  */\n \n #ifndef DOLLARS_IN_IDENTIFIERS"}, {"sha": "ea977788bad2bd38fa5f9443aeffd44e97767807", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -40,9 +40,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n+#include \"tm.h\"\t\t\t/* For rtl.h: needs enum reg_class.  */\n #include \"tree.h\"\n-#include \"rtl.h\"\n+#include \"rtl.h\"\t\t/* For decl_default_tls_model.  */\n #include \"langhooks.h\"\n #include \"input.h\"\n #include \"cpplib.h\"\n@@ -58,7 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"cgraph.h\"\n #include \"plugin.h\"\n-#include \"except.h\"\n \n \f\n /* Initialization routine for this file.  */"}, {"sha": "1700fae3ed01e7bb32c066b88bf3512581cc36ce", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -20,7 +20,6 @@\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"../libcpp/internal.h\"\n #include \"tree.h\""}, {"sha": "1fc006cf89be67d479bb4e226d7748b98aa92101", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -24,16 +24,19 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n-#include \"function.h\"\n+#include \"function.h\"\t\t/* For cfun.  FIXME: Does the parser know\n+\t\t\t\t   when it is inside a function, so that\n+\t\t\t\t   we don't have to look at cfun?  */\n #include \"cpplib.h\"\n #include \"c-pragma.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n-#include \"ggc.h\"\n #include \"c-common.h\"\n #include \"output.h\"\n-#include \"tm_p.h\"\n+#include \"tm_p.h\"\t\t/* For REGISTER_TARGET_PRAGMAS (why is\n+\t\t\t\t   this not a target hook?).  */\n #include \"vec.h\"\n+#include \"vecprim.h\"\n #include \"target.h\"\n #include \"diagnostic.h\"\n #include \"opts.h\""}, {"sha": "683655f77c01d219034629daa4e1ff2e92ffb9c5", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -27,22 +27,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"splay-tree.h\"\n #include \"c-common.h\"\n-#include \"except.h\"\n /* In order for the format checking to accept the C frontend\n    diagnostic framework extensions, you must define this token before\n    including toplev.h.  */\n #define GCC_DIAG_STYLE __gcc_cdiag__\n #include \"toplev.h\"\n #include \"flags.h\"\n-#include \"ggc.h\"\n-#include \"rtl.h\"\n #include \"output.h\"\n-#include \"timevar.h\"\n-#include \"predict.h\"\n-#include \"tree-inline.h\"\n-#include \"gimple.h\"\n #include \"tree-iterator.h\"\n-#include \"langhooks.h\"\n \n /* Create an empty statement tree rooted at T.  */\n "}, {"sha": "a9cd10691aca532a6ad5df7d50d84c45a323312c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -29,21 +29,17 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"rtl.h\"\n #include \"tree.h\"\n #include \"langhooks.h\"\n #include \"c-tree.h\"\n #include \"c-lang.h\"\n-#include \"tm_p.h\"\n #include \"flags.h\"\n #include \"output.h\"\n #include \"expr.h\"\n #include \"toplev.h\"\n #include \"intl.h\"\n-#include \"ggc.h\"\n #include \"target.h\"\n #include \"tree-iterator.h\"\n-#include \"gimple.h\"\n #include \"tree-flow.h\"\n \n /* Possible cases of implicit bad conversions.  Used to select"}, {"sha": "1f56ae0b503b19a4fd6d74af3177d0961d88609d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -1,3 +1,8 @@\n+2010-05-15  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* decl.c: Include tree-iterator.h, as fixup for tree-inline.h changes.\n+\t* Make-lang.in: Fix dependencies accordingly.\n+\n 2010-05-14  Jason Merrill  <jason@redhat.com>\n \n \tC++ DR 475"}, {"sha": "a65c078301f959535e00f474f0578cd73df8e02a", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -256,7 +256,7 @@ cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n   output.h $(EXPR_H) except.h toplev.h $(HASHTAB_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(C_PRAGMA_H) \\\n   debug.h gt-cp-decl.h $(TIMEVAR_H) $(TREE_FLOW_H) $(TARGET_H) $(PLUGIN_H) \\\n-  intl.h\n+  intl.h tree-iterator.h\n cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h $(EXPR_H) \\\n   output.h except.h toplev.h $(RTL_H) $(C_COMMON_H) gt-cp-decl2.h $(CGRAPH_H) \\\n   $(C_PRAGMA_H) $(TREE_DUMP_H) intl.h $(TARGET_H) $(GIMPLE_H) $(POINTER_SET_H)"}, {"sha": "148bcf5d55a05ecb7977e5e9cde0b023f60913f7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"flags.h\"\n #include \"cp-tree.h\"\n+#include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n #include \"decl.h\"\n #include \"intl.h\""}, {"sha": "de4fbf79f995d44d501daf005671eb2bc0f79550", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"sbitmap.h\"\n #include \"vecprim.h\"\n+#include \"vecir.h\"\n \n struct function;\n struct eh_region_d;"}, {"sha": "baa839fab6f64b279ac004b9d7b1a62b0f3aae58", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -24,25 +24,15 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"pointer-set.h\"\n #include \"vec.h\"\n+#include \"vecprim.h\"\n+#include \"vecir.h\"\n #include \"ggc.h\"\n #include \"tm.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"tree-ssa-operands.h\"\n #include \"tree-ssa-alias.h\"\n \n-DEF_VEC_P(gimple);\n-DEF_VEC_ALLOC_P(gimple,heap);\n-DEF_VEC_ALLOC_P(gimple,gc);\n-\n-typedef gimple *gimple_p;\n-DEF_VEC_P(gimple_p);\n-DEF_VEC_ALLOC_P(gimple_p,heap);\n-\n-DEF_VEC_P(gimple_seq);\n-DEF_VEC_ALLOC_P(gimple_seq,gc);\n-DEF_VEC_ALLOC_P(gimple_seq,heap);\n-\n /* For each block, the PHI nodes that need to be rewritten are stored into\n    these vectors.  */\n typedef VEC(gimple, heap) *gimple_vec;\n@@ -1048,8 +1038,6 @@ extern gimple gimple_current_bind_expr (void);\n extern VEC(gimple, heap) *gimple_bind_expr_stack (void);\n extern tree voidify_wrapper_expr (tree, tree);\n extern tree build_and_jump (tree *);\n-extern tree alloc_stmt_list (void);\n-extern void free_stmt_list (tree);\n extern tree force_labels_r (tree *, int *, void *);\n extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,\n \t\t\t\t\t\t  gimple_seq *);"}, {"sha": "2b402720b1ad512f393c87505cb7003860211f19", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -340,47 +340,6 @@ delete_omp_context (struct gimplify_omp_ctx *c)\n static void omp_add_variable (struct gimplify_omp_ctx *, tree, unsigned int);\n static bool omp_notice_variable (struct gimplify_omp_ctx *, tree, bool);\n \n-/* A subroutine of append_to_statement_list{,_force}.  T is not NULL.  */\n-\n-static void\n-append_to_statement_list_1 (tree t, tree *list_p)\n-{\n-  tree list = *list_p;\n-  tree_stmt_iterator i;\n-\n-  if (!list)\n-    {\n-      if (t && TREE_CODE (t) == STATEMENT_LIST)\n-\t{\n-\t  *list_p = t;\n-\t  return;\n-\t}\n-      *list_p = list = alloc_stmt_list ();\n-    }\n-\n-  i = tsi_last (list);\n-  tsi_link_after (&i, t, TSI_CONTINUE_LINKING);\n-}\n-\n-/* Add T to the end of the list container pointed to by LIST_P.\n-   If T is an expression with no effects, it is ignored.  */\n-\n-void\n-append_to_statement_list (tree t, tree *list_p)\n-{\n-  if (t && TREE_SIDE_EFFECTS (t))\n-    append_to_statement_list_1 (t, list_p);\n-}\n-\n-/* Similar, but the statement is always added, regardless of side effects.  */\n-\n-void\n-append_to_statement_list_force (tree t, tree *list_p)\n-{\n-  if (t != NULL_TREE)\n-    append_to_statement_list_1 (t, list_p);\n-}\n-\n /* Both gimplify the statement T and append it to *SEQ_P.  This function\n    behaves exactly as gimplify_stmt, but you don't have to pass T as a\n    reference.  */"}, {"sha": "a3e05798d55ec38c705c442653d52bfcf9d15ae6", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"real.h\"\n #include \"vec.h\"\n+#include \"vecir.h\"\n #include \"fixed-value.h\"\n #include \"alias.h\"\n \n@@ -197,10 +198,6 @@ struct GTY(()) block_symbol {\n   HOST_WIDE_INT offset;\n };\n \n-DEF_VEC_P(rtx);\n-DEF_VEC_ALLOC_P(rtx,heap);\n-DEF_VEC_ALLOC_P(rtx,gc);\n-\n /* Describes a group of objects that are to be placed together in such\n    a way that their relative positions are known.  */\n struct GTY(()) object_block {"}, {"sha": "7f62ffc4f10770badbd020d050e29b2a70380b7d", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_INLINE_H\n #define GCC_TREE_INLINE_H\n \n-#include \"gimple.h\"\n+#include \"vecir.h\" /* For VEC(gimple,heap).  */\n \n struct cgraph_edge;\n "}, {"sha": "d5343b447604c9100a0e734f966347f9e11a91ef", "filename": "gcc/tree-iterator.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Ftree-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Ftree-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.c?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -61,6 +61,47 @@ free_stmt_list (tree t)\n   stmt_list_cache = t;\n }\n \n+/* A subroutine of append_to_statement_list{,_force}.  T is not NULL.  */\n+\n+static void\n+append_to_statement_list_1 (tree t, tree *list_p)\n+{\n+  tree list = *list_p;\n+  tree_stmt_iterator i;\n+\n+  if (!list)\n+    {\n+      if (t && TREE_CODE (t) == STATEMENT_LIST)\n+\t{\n+\t  *list_p = t;\n+\t  return;\n+\t}\n+      *list_p = list = alloc_stmt_list ();\n+    }\n+\n+  i = tsi_last (list);\n+  tsi_link_after (&i, t, TSI_CONTINUE_LINKING);\n+}\n+\n+/* Add T to the end of the list container pointed to by LIST_P.\n+   If T is an expression with no effects, it is ignored.  */\n+\n+void\n+append_to_statement_list (tree t, tree *list_p)\n+{\n+  if (t && TREE_SIDE_EFFECTS (t))\n+    append_to_statement_list_1 (t, list_p);\n+}\n+\n+/* Similar, but the statement is always added, regardless of side effects.  */\n+\n+void\n+append_to_statement_list_force (tree t, tree *list_p)\n+{\n+  if (t != NULL_TREE)\n+    append_to_statement_list_1 (t, list_p);\n+}\n+\n /* Links a statement, or a chain of statements, before the current stmt.  */\n \n void"}, {"sha": "12a0edb3d00b68ad3df3ae9f61d91cb231375ca1", "filename": "gcc/tree-iterator.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Ftree-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Ftree-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.h?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -1,4 +1,4 @@\n-/* Iterator routines for manipulating GENERIC and GIMPLE tree statements.\n+/* Iterator routines for manipulating GENERIC tree statement list.\n    Copyright (C) 2003, 2004, 2007 Free Software Foundation, Inc.\n    Contributed by Andrew MacLeod  <amacleod@redhat.com>\n \n@@ -111,9 +111,11 @@ extern void tsi_link_before (tree_stmt_iterator *, tree,\n extern void tsi_link_after (tree_stmt_iterator *, tree,\n \t\t\t    enum tsi_iterator_update);\n \n-void tsi_delink (tree_stmt_iterator *);\n+extern void tsi_delink (tree_stmt_iterator *);\n \n-void append_to_statement_list (tree, tree *);\n-void append_to_statement_list_force (tree, tree *);\n+extern tree alloc_stmt_list (void);\n+extern void free_stmt_list (tree);\n+extern void append_to_statement_list (tree, tree *);\n+extern void append_to_statement_list_force (tree, tree *);\n \n #endif /* GCC_TREE_ITERATOR_H  */"}, {"sha": "a37d81a2b124782d8aa6b1be258ab8c0c73c1f99", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"statistics.h\"\n #include \"vec.h\"\n+#include \"vecir.h\"\n #include \"double-int.h\"\n #include \"alias.h\"\n #include \"options.h\"\n@@ -178,11 +179,6 @@ extern const unsigned char tree_code_length[];\n \n extern const char *const tree_code_name[];\n \n-/* A vectors of trees.  */\n-DEF_VEC_P(tree);\n-DEF_VEC_ALLOC_P(tree,gc);\n-DEF_VEC_ALLOC_P(tree,heap);\n-\n /* We have to be able to tell cgraph about the needed-ness of the target\n    of an alias.  This requires that the decl have been defined.  Aliases\n    that precede their definition have to be queued for later processing.  */"}, {"sha": "97e7b7818409f2de46bdcc7a13b64eda2f892441", "filename": "gcc/vecir.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fvecir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e/gcc%2Fvecir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvecir.h?ref=f4ce02c5bfc8dbfc34c3b44fde0dd324ab56e82e", "patch": "@@ -0,0 +1,52 @@\n+/* VEC types for basic types of the intermediate representations.\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_VECIR_H\n+#define GCC_VECIR_H\n+\n+#ifndef GCC_CORETYPES_H\n+#error \"vecir.h must be included after coretypes.h\"\n+#endif\n+\n+/* A varray of trees.  */\n+DEF_VEC_P(tree);\n+DEF_VEC_ALLOC_P(tree,gc);\n+DEF_VEC_ALLOC_P(tree,heap);\n+\n+/* A varray of gimple statements.  */\n+DEF_VEC_P(gimple);\n+DEF_VEC_ALLOC_P(gimple,heap);\n+DEF_VEC_ALLOC_P(gimple,gc);\n+\n+/* A varray of pointers to gimple statements.  */\n+typedef gimple *gimple_p;\n+DEF_VEC_P(gimple_p);\n+DEF_VEC_ALLOC_P(gimple_p,heap);\n+\n+/* A varray gimple statement sequences.  */\n+DEF_VEC_P(gimple_seq);\n+DEF_VEC_ALLOC_P(gimple_seq,gc);\n+DEF_VEC_ALLOC_P(gimple_seq,heap);\n+\n+/* A varray of RTX objects.  */\n+DEF_VEC_P(rtx);\n+DEF_VEC_ALLOC_P(rtx,heap);\n+DEF_VEC_ALLOC_P(rtx,gc);\n+\n+#endif /* GCC_VECIR_H */"}]}