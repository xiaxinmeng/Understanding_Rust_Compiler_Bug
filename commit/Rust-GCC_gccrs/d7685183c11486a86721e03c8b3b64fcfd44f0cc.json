{"sha": "d7685183c11486a86721e03c8b3b64fcfd44f0cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2ODUxODNjMTE0ODZhODY3MjFlMDNjOGIzYjY0ZmNmZDQ0ZjBjYw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-06-05T19:40:34Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-06-05T19:40:34Z"}, "message": "re PR target/53487 (Unrecognizable insn for conditional move)\n\n[gcc]\n2012-06-04  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/53487\n\t* config/rs6000/rs6000.c (rs6000_generate_compare): If we are\n\tdoing an unsigned compare, make sure the second argument is not a\n\tnegative constant.\n\t(rs6000_emit_cmove): Don't allow floating point comparisons when\n\tgenerating ISEL moves.\n\n[gcc/testsuite]\n2012-06-04  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/pr53487.c: New test.\n\nFrom-SVN: r188248", "tree": {"sha": "2965431741fdd7023479a8b0d618d9a1b0d848e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2965431741fdd7023479a8b0d618d9a1b0d848e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7685183c11486a86721e03c8b3b64fcfd44f0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7685183c11486a86721e03c8b3b64fcfd44f0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7685183c11486a86721e03c8b3b64fcfd44f0cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7685183c11486a86721e03c8b3b64fcfd44f0cc/comments", "author": null, "committer": null, "parents": [{"sha": "951c68fac82a2980b1b703c9daad8f0560daabd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951c68fac82a2980b1b703c9daad8f0560daabd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/951c68fac82a2980b1b703c9daad8f0560daabd1"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "7ed28072a10a26e5ed0ca1452e067a70cb16d675", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7685183c11486a86721e03c8b3b64fcfd44f0cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7685183c11486a86721e03c8b3b64fcfd44f0cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7685183c11486a86721e03c8b3b64fcfd44f0cc", "patch": "@@ -1,3 +1,12 @@\n+2012-06-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/53487\n+\t* config/rs6000/rs6000.c (rs6000_generate_compare): If we are\n+\tdoing an unsigned compare, make sure the second argument is not a\n+\tnegative constant.\n+\t(rs6000_emit_cmove): Don't allow floating point comparisons when\n+\tgenerating ISEL moves.\n+\n 2012-06-05  Edmar Wienskoski  <edmar@freescale.com>\n \n \t* config/rs6000/e5500.md: New file."}, {"sha": "11c4bf725ee25bc03f946f8e7224e2c26b176446", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7685183c11486a86721e03c8b3b64fcfd44f0cc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7685183c11486a86721e03c8b3b64fcfd44f0cc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d7685183c11486a86721e03c8b3b64fcfd44f0cc", "patch": "@@ -15419,6 +15419,16 @@ rs6000_generate_compare (rtx cmp, enum machine_mode mode)\n   else\n     comp_mode = CCmode;\n \n+  /* If we have an unsigned compare, make sure we don't have a signed value as\n+     an immediate.  */\n+  if (comp_mode == CCUNSmode && GET_CODE (op1) == CONST_INT\n+      && INTVAL (op1) < 0)\n+    {\n+      op0 = copy_rtx_if_shared (op0);\n+      op1 = force_reg (GET_MODE (op0), op1);\n+      cmp = gen_rtx_fmt_ee (code, GET_MODE (cmp), op0, op1);\n+    }\n+\n   /* First, the compare.  */\n   compare_result = gen_reg_rtx (comp_mode);\n \n@@ -16172,6 +16182,11 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n   if (GET_MODE (false_cond) != result_mode)\n     return 0;\n \n+  /* Don't allow using floating point comparisons for integer results for\n+     now.  */\n+  if (FLOAT_MODE_P (compare_mode) && !FLOAT_MODE_P (result_mode))\n+    return 0;\n+\n   /* First, work out if the hardware can do this at all, or\n      if it's too slow....  */\n   if (!FLOAT_MODE_P (compare_mode))"}, {"sha": "c25aadbc35ec6e4fe6336caa624c30fd0a80f1d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7685183c11486a86721e03c8b3b64fcfd44f0cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7685183c11486a86721e03c8b3b64fcfd44f0cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7685183c11486a86721e03c8b3b64fcfd44f0cc", "patch": "@@ -1,3 +1,7 @@\n+2012-06-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr53487.c: New test.\n+\n 2012-06-05  Pat Haugen <pthaugen@us.ibm.com>\n \n \t* gcc.target/powerpc/lhs-1.c: Use parm instead of stack space."}, {"sha": "3e8265b371135f38f6ca7a85af9f726d98dbe228", "filename": "gcc/testsuite/gcc.target/powerpc/pr53487.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7685183c11486a86721e03c8b3b64fcfd44f0cc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53487.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7685183c11486a86721e03c8b3b64fcfd44f0cc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53487.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53487.c?ref=d7685183c11486a86721e03c8b3b64fcfd44f0cc", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O3 -mcpu=power7 -misel -ffast-math\" } */\n+\n+struct phylo_s {\n+  int left;\n+};\n+\n+int Cluster(float **dmx, int N, struct phylo_s *tree)\n+{\n+  float **mx;\n+  int *coord;\n+  int i;\n+  int Np;\n+  int row, col;\n+  float min;\n+  for (col = 0; col < N; Np--)\n+    {\n+      for (row = 0; row < Np; row++)\n+\tfor (col = row+1; col < Np; col++)\n+\t  if (mx[row][col] < min)\n+\t    i = row;\n+      tree[Np-2].left = coord[i];\n+    }\n+  Free2DArray((void **) mx, N);\n+}"}]}