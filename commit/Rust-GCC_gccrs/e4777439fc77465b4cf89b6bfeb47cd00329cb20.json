{"sha": "e4777439fc77465b4cf89b6bfeb47cd00329cb20", "node_id": "C_kwDOANBUbNoAKGU0Nzc3NDM5ZmM3NzQ2NWI0Y2Y4OWI2YmZlYjQ3Y2QwMDMyOWNiMjA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-23T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-23T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "9950bf4f8deb8e8fb55708fbc1dc4ea63737f19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9950bf4f8deb8e8fb55708fbc1dc4ea63737f19e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4777439fc77465b4cf89b6bfeb47cd00329cb20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4777439fc77465b4cf89b6bfeb47cd00329cb20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4777439fc77465b4cf89b6bfeb47cd00329cb20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4777439fc77465b4cf89b6bfeb47cd00329cb20/comments", "author": null, "committer": null, "parents": [{"sha": "5098e7077bfcace3e80144e63c81be94546ced16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5098e7077bfcace3e80144e63c81be94546ced16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5098e7077bfcace3e80144e63c81be94546ced16"}], "stats": {"total": 1021, "additions": 1020, "deletions": 1}, "files": [{"sha": "a35c5b711521a879baef7d0d40823ea61a1f0cab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 324, "deletions": 0, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,327 @@\n+2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/55534\n+\t* doc/invoke.texi (-Wno-missing-include-dirs.): Document Fortran\n+\tbehavior.\n+\n+2021-09-22  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd (negation simplifications): Implement some negation\n+\tfolding transformations from fold-const.c's fold_negate_expr.\n+\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup_1): Add a SIMPLIFY\n+\targument, to control whether the op should be simplified prior\n+\tto looking up/assigning a value number.\n+\t(vn_nary_build_or_lookup): Update call to vn_nary_build_or_lookup_1.\n+\t(vn_nary_simplify): Likewise.\n+\t(visit_nary_op): Likewise, but when constructing a NEGATE_EXPR\n+\tnow call vn_nary_build_or_lookup_1 disabling simplification.\n+\n+2021-09-22  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/102087\n+\t* tree-ssa-loop-niter.c (number_of_iterations_until_wrap):\n+\tUpdate bound/cmp/control for niter.\n+\n+2021-09-22  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_range_op):\n+\tMove check for non-empty BB here.\n+\t(fur_source::register_outgoing_edges): ...from here.\n+\n+2021-09-22  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::internal_range_of_expr):\n+\tRemove call to improve_range_with_equivs.\n+\t(path_range_query::improve_range_with_equivs): Remove\n+\t* gimple-range-path.h: Remove improve_range_with_equivs.\n+\n+2021-09-22  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h:\n+\t(_mm512_mask_blend_ph): New intrinsic.\n+\t(_mm512_permutex2var_ph): Ditto.\n+\t(_mm512_permutexvar_ph): Ditto.\n+\t* config/i386/avx512fp16vlintrin.h:\n+\t(_mm256_mask_blend_ph): New intrinsic.\n+\t(_mm256_permutex2var_ph): Ditto.\n+\t(_mm256_permutexvar_ph): Ditto.\n+\t(_mm_mask_blend_ph): Ditto.\n+\t(_mm_permutex2var_ph): Ditto.\n+\t(_mm_permutexvar_ph): Ditto.\n+\n+2021-09-22  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h: Add new intrinsics.\n+\t(_mm512_conj_pch): New intrinsic.\n+\t(_mm512_mask_conj_pch): Ditto.\n+\t(_mm512_maskz_conj_pch): Ditto.\n+\t* config/i386/avx512fp16vlintrin.h: Add new intrinsics.\n+\t(_mm256_conj_pch): New intrinsic.\n+\t(_mm256_mask_conj_pch): Ditto.\n+\t(_mm256_maskz_conj_pch): Ditto.\n+\t(_mm_conj_pch): Ditto.\n+\t(_mm_mask_conj_pch): Ditto.\n+\t(_mm_maskz_conj_pch): Ditto.\n+\n+2021-09-22  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_MM512_REDUCE_OP): New macro\n+\t(_mm512_reduce_add_ph): New intrinsic.\n+\t(_mm512_reduce_mul_ph): Ditto.\n+\t(_mm512_reduce_min_ph): Ditto.\n+\t(_mm512_reduce_max_ph): Ditto.\n+\t* config/i386/avx512fp16vlintrin.h\n+\t(_MM256_REDUCE_OP/_MM_REDUCE_OP): New macro.\n+\t(_mm256_reduce_add_ph): New intrinsic.\n+\t(_mm256_reduce_mul_ph): Ditto.\n+\t(_mm256_reduce_min_ph): Ditto.\n+\t(_mm256_reduce_max_ph): Ditto.\n+\t(_mm_reduce_add_ph): Ditto.\n+\t(_mm_reduce_mul_ph): Ditto.\n+\t(_mm_reduce_min_ph): Ditto.\n+\t(_mm_reduce_max_ph): Ditto.\n+\n+2021-09-22  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (__m512h_u, __m256h_u,\n+\t__m128h_u): New typedef.\n+\t(_mm512_load_ph): New intrinsic.\n+\t(_mm256_load_ph): Ditto.\n+\t(_mm_load_ph): Ditto.\n+\t(_mm512_loadu_ph): Ditto.\n+\t(_mm256_loadu_ph): Ditto.\n+\t(_mm_loadu_ph): Ditto.\n+\t(_mm512_store_ph): Ditto.\n+\t(_mm256_store_ph): Ditto.\n+\t(_mm_store_ph): Ditto.\n+\t(_mm512_storeu_ph): Ditto.\n+\t(_mm256_storeu_ph): Ditto.\n+\t(_mm_storeu_ph): Ditto.\n+\t(_mm512_abs_ph): Ditto.\n+\t* config/i386/avx512fp16vlintrin.h\n+\t(_mm_abs_ph): Ditto.\n+\t(_mm256_abs_ph): Ditto.\n+\n+2021-09-22  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/tpf.md (prologue_tpf, epilogue_tpf): Add cc clobber.\n+\n+2021-09-22  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/102222\n+\t* config/s390/s390.c (s390_expand_insv): Emit a normal move if it\n+\tis actually a full copy of the source operand into the target.\n+\tDon't emit a strict low part move if source and target mode match.\n+\n+2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/102415\n+\t* omp-expand.c (expand_omp_single): If region->exit is NULL,\n+\tassert region->entry is GIMPLE_OMP_SCOPE region and return.\n+\n+2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (OMP_CLAUSE_ALLOCATE_ALIGN): Define.\n+\t* tree.c (omp_clause_num_ops): Change number of OMP_CLAUSE_ALLOCATE\n+\targuments from 2 to 3.\n+\t* tree-pretty-print.c (dump_omp_clause): Print allocator() around\n+\tallocate clause allocator and print align if present.\n+\t* omp-low.c (scan_sharing_clauses): Force allocate_map entry even\n+\tfor omp_default_mem_alloc if align modifier is present.  If align\n+\tmodifier is present, use TREE_LIST to encode both allocator and\n+\talign.\n+\t(lower_private_allocate, lower_rec_input_clauses, create_task_copyfn):\n+\tHandle align modifier on allocator clause if present.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386.md (define_attr \"isa\"): Add\n+\tfma_or_avx512vl.\n+\t(define_attr \"enabled\"): Correspond fma_or_avx512vl to\n+\tTARGET_FMA || TARGET_AVX512VL.\n+\t* config/i386/mmx.md (fmav2sf4): Extend to AVX512 fma.\n+\t(fmsv2sf4): Ditto.\n+\t(fnmav2sf4): Ditto.\n+\t(fnmsv2sf4): Ditto.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386.md (cstorehf3): New define_expand.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386.md (<rounding_insn>hf2): New expander.\n+\t(sse4_1_round<mode>2): Extend from MODEF to MODEFH.\n+\t* config/i386/sse.md (*sse4_1_round<ssescalarmodesuffix>):\n+\tExtend from VF_128 to VFH_128.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-features.c (i386-features.c): Handle\n+\tE_HFmode.\n+\t* config/i386/i386.md (sqrthf2): New expander.\n+\t(*sqrthf2): New define_insn.\n+\t* config/i386/sse.md\n+\t(*<sse>_vmsqrt<mode>2<mask_scalar_name><round_scalar_name>):\n+\tExtend to VFH_128.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_mask_fcmadd_sch):\n+\tNew intrinsic.\n+\t(_mm_mask3_fcmadd_sch): Likewise.\n+\t(_mm_maskz_fcmadd_sch): Likewise.\n+\t(_mm_fcmadd_sch): Likewise.\n+\t(_mm_mask_fmadd_sch): Likewise.\n+\t(_mm_mask3_fmadd_sch): Likewise.\n+\t(_mm_maskz_fmadd_sch): Likewise.\n+\t(_mm_fmadd_sch): Likewise.\n+\t(_mm_mask_fcmadd_round_sch): Likewise.\n+\t(_mm_mask3_fcmadd_round_sch): Likewise.\n+\t(_mm_maskz_fcmadd_round_sch): Likewise.\n+\t(_mm_fcmadd_round_sch): Likewise.\n+\t(_mm_mask_fmadd_round_sch): Likewise.\n+\t(_mm_mask3_fmadd_round_sch): Likewise.\n+\t(_mm_maskz_fmadd_round_sch): Likewise.\n+\t(_mm_fmadd_round_sch): Likewise.\n+\t(_mm_fcmul_sch): Likewise.\n+\t(_mm_mask_fcmul_sch): Likewise.\n+\t(_mm_maskz_fcmul_sch): Likewise.\n+\t(_mm_fmul_sch): Likewise.\n+\t(_mm_mask_fmul_sch): Likewise.\n+\t(_mm_maskz_fmul_sch): Likewise.\n+\t(_mm_fcmul_round_sch): Likewise.\n+\t(_mm_mask_fcmul_round_sch): Likewise.\n+\t(_mm_maskz_fcmul_round_sch): Likewise.\n+\t(_mm_fmul_round_sch): Likewise.\n+\t(_mm_mask_fmul_round_sch): Likewise.\n+\t(_mm_maskz_fmul_round_sch): Likewise.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/sse.md\n+\t(avx512fp16_fmaddcsh_v8hf_maskz<round_expand_name>): New expander.\n+\t(avx512fp16_fcmaddcsh_v8hf_maskz<round_expand_name>): Ditto.\n+\t(avx512fp16_fma_<complexopname>sh_v8hf<mask_scalarcz_name><round_scalarcz_name>):\n+\tNew define insn.\n+\t(avx512fp16_<complexopname>sh_v8hf_mask<round_name>): Ditto.\n+\t(avx512fp16_<complexopname>sh_v8hf<mask_scalarc_name><round_scalarcz_name>):\n+\tDitto.\n+\t* config/i386/subst.md (mask_scalarcz_name): New.\n+\t(mask_scalarc_name): Ditto.\n+\t(mask_scalarc_operand3): Ditto.\n+\t(mask_scalarcz_operand4): Ditto.\n+\t(round_scalarcz_name): Ditto.\n+\t(round_scalarc_mask_operand3): Ditto.\n+\t(round_scalarcz_mask_operand4): Ditto.\n+\t(round_scalarc_mask_op3): Ditto.\n+\t(round_scalarcz_mask_op4): Ditto.\n+\t(round_scalarcz_constraint): Ditto.\n+\t(round_scalarcz_nimm_predicate): Ditto.\n+\t(mask_scalarcz): Ditto.\n+\t(mask_scalarc): Ditto.\n+\t(round_scalarcz): Ditto.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_fcmadd_pch):\n+\tNew intrinsic.\n+\t(_mm512_mask_fcmadd_pch): Likewise.\n+\t(_mm512_mask3_fcmadd_pch): Likewise.\n+\t(_mm512_maskz_fcmadd_pch): Likewise.\n+\t(_mm512_fmadd_pch): Likewise.\n+\t(_mm512_mask_fmadd_pch): Likewise.\n+\t(_mm512_mask3_fmadd_pch): Likewise.\n+\t(_mm512_maskz_fmadd_pch): Likewise.\n+\t(_mm512_fcmadd_round_pch): Likewise.\n+\t(_mm512_mask_fcmadd_round_pch): Likewise.\n+\t(_mm512_mask3_fcmadd_round_pch): Likewise.\n+\t(_mm512_maskz_fcmadd_round_pch): Likewise.\n+\t(_mm512_fmadd_round_pch): Likewise.\n+\t(_mm512_mask_fmadd_round_pch): Likewise.\n+\t(_mm512_mask3_fmadd_round_pch): Likewise.\n+\t(_mm512_maskz_fmadd_round_pch): Likewise.\n+\t(_mm512_fcmul_pch): Likewise.\n+\t(_mm512_mask_fcmul_pch): Likewise.\n+\t(_mm512_maskz_fcmul_pch): Likewise.\n+\t(_mm512_fmul_pch): Likewise.\n+\t(_mm512_mask_fmul_pch): Likewise.\n+\t(_mm512_maskz_fmul_pch): Likewise.\n+\t(_mm512_fcmul_round_pch): Likewise.\n+\t(_mm512_mask_fcmul_round_pch): Likewise.\n+\t(_mm512_maskz_fcmul_round_pch): Likewise.\n+\t(_mm512_fmul_round_pch): Likewise.\n+\t(_mm512_mask_fmul_round_pch): Likewise.\n+\t(_mm512_maskz_fmul_round_pch): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm_fmadd_pch):\n+\tNew intrinsic.\n+\t(_mm_mask_fmadd_pch): Likewise.\n+\t(_mm_mask3_fmadd_pch): Likewise.\n+\t(_mm_maskz_fmadd_pch): Likewise.\n+\t(_mm256_fmadd_pch): Likewise.\n+\t(_mm256_mask_fmadd_pch): Likewise.\n+\t(_mm256_mask3_fmadd_pch): Likewise.\n+\t(_mm256_maskz_fmadd_pch): Likewise.\n+\t(_mm_fcmadd_pch): Likewise.\n+\t(_mm_mask_fcmadd_pch): Likewise.\n+\t(_mm_mask3_fcmadd_pch): Likewise.\n+\t(_mm_maskz_fcmadd_pch): Likewise.\n+\t(_mm256_fcmadd_pch): Likewise.\n+\t(_mm256_mask_fcmadd_pch): Likewise.\n+\t(_mm256_mask3_fcmadd_pch): Likewise.\n+\t(_mm256_maskz_fcmadd_pch): Likewise.\n+\t(_mm_fmul_pch): Likewise.\n+\t(_mm_mask_fmul_pch): Likewise.\n+\t(_mm_maskz_fmul_pch): Likewise.\n+\t(_mm256_fmul_pch): Likewise.\n+\t(_mm256_mask_fmul_pch): Likewise.\n+\t(_mm256_maskz_fmul_pch): Likewise.\n+\t(_mm_fcmul_pch): Likewise.\n+\t(_mm_mask_fcmul_pch): Likewise.\n+\t(_mm_maskz_fcmul_pch): Likewise.\n+\t(_mm256_fcmul_pch): Likewise.\n+\t(_mm256_mask_fcmul_pch): Likewise.\n+\t(_mm256_maskz_fcmul_pch): Likewise.\n+\t* config/i386/i386-builtin-types.def (V8HF_FTYPE_V8HF_V8HF_V8HF,\n+\tV8HF_FTYPE_V16HF_V16HF_V16HF, V16HF_FTYPE_V16HF_V16HF_V16HF_UQI,\n+\tV32HF_FTYPE_V32HF_V32HF_V32HF_INT,\n+\tV32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT): Add new builtin types.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/i386-expand.c: Handle new builtin types.\n+\t* config/i386/subst.md (SUBST_CV): New.\n+\t(maskc_name): Ditto.\n+\t(maskc_operand3): Ditto.\n+\t(maskc): Ditto.\n+\t(sdc_maskz_name): Ditto.\n+\t(sdc_mask_op4): Ditto.\n+\t(sdc_mask_op5): Ditto.\n+\t(sdc_mask_mode512bit_condition): Ditto.\n+\t(sdc): Ditto.\n+\t(round_maskc_operand3): Ditto.\n+\t(round_sdc_mask_operand4): Ditto.\n+\t(round_maskc_op3): Ditto.\n+\t(round_sdc_mask_op4): Ditto.\n+\t(round_saeonly_sdc_mask_operand5): Ditto.\n+\t* config/i386/sse.md (unspec): Add complex fma unspecs.\n+\t(avx512fmaskcmode): New.\n+\t(UNSPEC_COMPLEX_F_C_MA): Ditto.\n+\t(UNSPEC_COMPLEX_F_C_MUL): Ditto.\n+\t(complexopname): Ditto.\n+\t(<avx512>_fmaddc_<mode>_maskz<round_expand_name>): New expander.\n+\t(<avx512>_fcmaddc_<mode>_maskz<round_expand_name>): Ditto.\n+\t(fma_<complexopname>_<mode><sdc_maskz_name><round_name>): New\n+\tdefine insn.\n+\t(<avx512>_<complexopname>_<mode>_mask<round_name>): Ditto.\n+\t(<avx512>_<complexopname>_<mode><maskc_name><round_name>): Ditto.\n+\n+2021-09-22  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.opt (rs6000-density-pct-threshold,\n+\trs6000-density-size-threshold, rs6000-density-penalty,\n+\trs6000-density-load-pct-threshold,\n+\trs6000-density-load-num-threshold): New parameter.\n+\t* config/rs6000/rs6000.c (rs6000_density_test): Adjust with\n+\tcorresponding parameters.\n+\n 2021-09-21  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimple-range-path.cc (path_range_query::defined_outside_path):"}, {"sha": "d6fc0609448ea1879f4ad1dd6c0123b560b4c2d0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1 +1 @@\n-20210922\n+20210923"}, {"sha": "4d44d799baecb3224705fc24d154033d57b0e3a0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 407, "deletions": 0, "changes": 407, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,410 @@\n+2021-09-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-strfix.ads (Trim): Simplify contracts.\n+\t* libgnat/a-strfix.adb (Trim): Remove white space.\n+\n+2021-09-22  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Eq): Reuse Is_Attribute_Result.\n+\t* exp_prag.adb (Expand_Attributes): Reuse Is_Attribute_Old.\n+\n+2021-09-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Do not insert a\n+\tpredicate check after a deferred constant declaration.\n+\n+2021-09-22  Bob Duff  <duff@adacore.com>\n+\n+\t* contracts.adb, einfo-utils.adb, einfo-utils.ads, exp_ch7.adb,\n+\texp_ch9.adb, exp_disp.adb, exp_prag.adb, exp_smem.adb,\n+\texp_util.adb, freeze.adb, sem_aggr.adb, sem_attr.adb,\n+\tsem_ch8.adb, sem_prag.ads, sem_util.adb, sem_util.ads: Fix\n+\tconformance errors.\n+\t* errout.adb, erroutc.adb: Remove pragmas Suppress.\n+\t* err_vars.ads: Initialize variables that were previously being\n+\tread uninitialized.\n+\n+2021-09-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-strunb.ads: Mark package in SPARK with private part\n+\tnot in SPARK.\n+\t(Free): Mark not in SPARK.\n+\n+2021-09-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* snames.ads-tmpl: Update status of some attributes.\n+\n+2021-09-22  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnarl/s-interr__vxworks.adb (Interfaces.C): Remove as\n+\tunused.\n+\t(System.VxWorks.Ext): Import.\n+\t(System.VxWorks.Ext.STATUS): use type.\n+\t(STATUS): New subtype.\n+\t(OK): New constant.\n+\t(Interrupt_Connector): Return STATUS type vice int.\n+\t(Interrupt_Connect, Notify_Interrupt, Unbind_Handler,\n+\tInterrupt_Server_Task): Rename Status to Result. Assert Result =\n+\tOK.\n+\t* libgnarl/s-osinte__vxworks.adb (To_Clock_Ticks): Define constant\n+\tIERR, and return it vice ERROR.\n+\t(Binary_Semaphore_Delete): Return STATUS type vice int.\n+\t(Binary_Semaphore_Obtain): Likewise.\n+\t(Binary_Semaphore_Release): Likewise.\n+\t(Binary_Semaphore_Flush): Likewise.\n+\t* libgnarl/s-osinte__vxworks.ads (SVE): Renaming of\n+\tSystem.VxWorks.Ext.\n+\t(STATUS): Use SVE in declaration of subtype.\n+\t(BOOL): Likewise.\n+\t(vx_freq_t): Likewise.\n+\t(t_id): Likewise.\n+\t(gitpid): Use SVE in renaming of subprogram\n+\t(Task_Stop): Likewise.\n+\t(Task_Cont): Likewise.\n+\t(Int_Lock): Likewise.\n+\t(Int_Unlock): Likewise.\n+\t(Set_Time_Slice): Likewise.\n+\t(semDelete): Likewise.\n+\t(taskCpuAffinitySet): Likewise.\n+\t(taskMaskAffinitySet): Likewise.\n+\t(sigset_t): Use SVE in declaration of type.\n+\t(OK): Remove as unused.\n+\t(ERROR): Likewise.\n+\t(taskOptionsGet): return STATUS vice int.\n+\t(taskSuspend): Likewise.\n+\t(taskResume): Likewise.\n+\t(taskDelay): Likewise.\n+\t(taskVarAdd): Likewise.\n+\t(taskVarDelete): Likewise.\n+\t(taskVarSet): Likewise.\n+\t(tlkKeyCreate): Likewise.\n+\t(taskPrioritySet): Likewise.\n+\t(semGive): Likewise.\n+\t(semTake): Likewise.\n+\t(Binary_Semaphore_Delete): Likewise.\n+\t(Binary_Semaphore_Obtain): Likewise.\n+\t(Binary_Semaphore_Release): Likewise.\n+\t(Binary_Semaphore_Flush): Likewise.\n+\t(Interrupt_Connect): Likewise.\n+\t* libgnarl/s-taprop__vxworks.adb\n+\t(System.VxWorks.Ext.STATUS): use type.\n+\t(int): Syntactically align subtype.\n+\t(STATUS): New subtype.\n+\t(OK): New constant.\n+\t(Finalize_Lock): Check STATUS vice int. Assert OK.\n+\t(Finalize_Lock): Likewise.\n+\t(Write_Lock): Likewise.\n+\t(Write_Lock): Likewise.\n+\t(Write_Lock): Likewise.\n+\t(Unlock): Likewise.\n+\t(Unlock): Likewise.\n+\t(Unlock): Likewise.\n+\t(Unlock): Likewise.\n+\t(Sleep): Likewise.\n+\t(Sleep): Likewise.\n+\t(Sleep): Likewise.\n+\t(Timed_Sleep): Likewise and test Result.\n+\t(Timed_Delay): Likewise and test Result.\n+\t(Wakeup): Likewise.\n+\t(Yield): Likewise.\n+\t(Finalize_TCB): Likewise.\n+\t(Suspend_Until_True): Check OK.\n+\t(Stop_All_Tasks): Declare Dummy STATUS vice in.  Check OK.\n+\t(Is_Task_Context): Use OSI renaming.\n+\t(Initialize): Use STATUS vice int.\n+\t* libgnarl/s-vxwext.adb\n+\t(IERR): Renamed from ERROR.\n+\t(taskCpuAffinitySet): Return IERR (int).\n+\t(taskMaskAffinitySet): Likewise.\n+\t* libgnarl/s-vxwext.ads\n+\t(STATUS): New subtype.\n+\t(OK): New STATUS constant.\n+\t(ERROR): Likewise.\n+\t* libgnarl/s-vxwext__kernel-smp.adb\n+\t(IERR): Renamed from ERROR.\n+\t(Int_Lock): Return IERR.\n+\t(semDelete): Return STATUS.\n+\t(Task_Cont): Likewise.\n+\t(Task_Stop): Likewise.\n+\t* libgnarl/s-vxwext__kernel.adb\n+\t(IERR): Renamed from ERROR.\n+\t(semDelete): Return STATUS.\n+\t(Task_Cont): Likewise.\n+\t(Task_Stop): Likewise.\n+\t(taskCpuAffinitySet): Return IERR (int)\n+\t(taskMaskAffinitySet): Likewise.\n+\t* libgnarl/s-vxwext__kernel.ads\n+\t(STATUS): New subtype.\n+\t(OK): New STATUS constant.\n+\t(ERROR): Likewise.\n+\t(Interrupt_Connect): Return STATUS\n+\t(semDelete): Likewise.\n+\t(Task_Cont): Likewise.\n+\t(Task_Stop): Likewise.\n+\t(Set_Time_Slice): Likewise.\n+\t* libgnarl/s-vxwext__rtp-smp.adb\n+\t(IERR): Renamed from ERROR.\n+\t(Int_Lock): return IERR constant vice ERROR.\n+\t(Interrupt_Connect): Return STATUS.\n+\t(semDelete): Likewise.\n+\t(Set_Time_Slice): Likewise.\n+\t* libgnarl/s-vxwext__rtp.adb\n+\t(IERR): Renamed from ERROR.\n+\t(Int_Lock): return IERR constant vice ERROR.\n+\t(Int_Unlock): Return STATUS.\n+\t(semDelete): Likewise.\n+\t(Set_Time_Slice): Likewise.\n+\t(taskCpuAffinitySet): Return IERR (int)\n+\t(taskMaskAffinitySet): Likewise.\n+\t* libgnarl/s-vxwext__rtp.ads\n+\t(STATUS): New subtype.\n+\t(OK): New STATUS constant.\n+\t(ERROR): Likewise.\n+\t(Interrupt_Connect): Return STATUS\n+\t(semDelete): Likewise.\n+\t(Task_Cont): Likewise.\n+\t(Task_Stop): Likewise.\n+\t(Set_Time_Slice): Likewise.\n+\n+2021-09-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* prep.adb (Preprocess): Allow for more flexibility when\n+\tRelaxed_RM_Semantics is set.\n+\n+2021-09-22  Pierre-Alexandre Bazin  <bazin@adacore.com>\n+\n+\t* libgnat/a-strbou.adb: Turn SPARK_Mode on.\n+\t* libgnat/a-strbou.ads: Write contracts.\n+\t* libgnat/a-strfix.ads (Index): Fix grammar error in a comment.\n+\t* libgnat/a-strsea.ads (Index): Likewise.\n+\t* libgnat/a-strsup.adb: Rewrite the body to take into account\n+\tthe new definition of Super_String using Relaxed_Initialization\n+\tand a predicate.\n+\t(Super_Replicate, Super_Translate, Times): Added loop\n+\tinvariants, and ghost lemmas for Super_Replicate and Times.\n+\t(Super_Trim): Rewrite the body using search functions to\n+\tdetermine the cutting points.\n+\t(Super_Element, Super_Length, Super_Slice, Super_To_String):\n+\tRemove (now written as expression functions in a-strsup.ads).\n+\t* libgnat/a-strsup.ads: Added contracts.\n+\t(Super_Element, Super_Length, Super_Slice, Super_To_String):\n+\tRewrite as expression functions.\n+\n+2021-09-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Predicate_Functions): Add guard.\n+\n+2021-09-22  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnarl/s-vxwext.ads (BOOL): New int type.\n+\t(Interrupt_Context): Change return type to BOOL.\n+\t* libgnarl/s-vxwext__kernel.ads: Likewise.\n+\t* libgnarl/s-vxwext__rtp-smp.adb: Likewise.\n+\t* libgnarl/s-vxwext__rtp.adb: Likewise.\n+\t* libgnarl/s-vxwext__rtp.ads: Likewise.\n+\t* libgnarl/s-osinte__vxworks.adb (Interrupt_Context): Change\n+\treturn type to BOOL.\n+\t* libgnarl/s-osinte__vxworks.ads (BOOL) New subtype.\n+\t(taskIsSuspended): Change return type to BOOL.\n+\t(Interrupt_Context): Change return type to BOOL. Adjust comments\n+\taccordingly.\n+\t* libgnarl/s-taprop__vxworks.adb (System.VxWorks.Ext.BOOL):\n+\tuse type.\n+\t(Is_Task_Context): Test Interrupt_Context against 0.\n+\t* libgnat/i-vxwork.ads (BOOL): New int.\n+\t(intContext): Change return type to BOOL. Adjust comments.\n+\t* libgnat/i-vxwork__x86.ads: Likewise.\n+\n+2021-09-22  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aux.adb, sem_aux.ads (Package_Body): Moved from GNATprove.\n+\t* sem_elab.adb (Spec_And_Body_From_Entity): Refine type of parameter.\n+\n+2021-09-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_ugn/platform_specific_information.rst: Improve doc\n+\ton permission and containers.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-09-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* atree.adb (Rewrite): Fix parent node of shared aspects.\n+\t* atree.ads (Rewrite): Add ??? comment on incorrect\n+\tdocumentation.\n+\t* einfo-utils.adb (Known_Esize): Fix logic.\n+\t* sem_ch13.adb (Alignment_Check_For_Size_Change,\n+\tAnalyze_Attribute_Definition_Clause): Protect against unset\n+\tSize.\n+\n+2021-09-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* freeze.adb (Build_Renamed_Body): Special case for GNATprove.\n+\t* sem_ch6.adb (Analyze_Expression_Function): Remove useless test\n+\tfor a node to come from source, which becomes harmful otherwise.\n+\n+2021-09-22  Justin Squirek  <squirek@adacore.com>\n+\n+\t* ali.adb, ali.ads (Scan_ALI): Remove use of deprecated\n+\tparameter Ignore_ED, and all specification for Lower in call to\n+\tGet_File_Name.\n+\t* ali-util.adb (Read_Withed_ALIs): Modify call to Scan_ALI.\n+\t* clean.adb (Clean_Executables): Likewise.\n+\t* gnatbind.adb (Add_Artificial_ALI_File, Executable section):\n+\tLikewise.\n+\t* gnatlink.adb (Executable section): Likewise.\n+\t* gnatls.adb (Executable section): Likewise.\n+\t* make.adb (Check, Wait_For_Available_Slot): Likewise.\n+\t* aspects.ads: Add Aspect_No_Controlled_Parts to\n+\tNonoverridable_Aspect_Id\n+\t* opt.ads: Remove function pointers used as a workaround for\n+\tASIS.\n+\t* osint-c.adb (Executable section): Remove setting of function\n+\tpointer workarounds needed for ASIS.\n+\t* osint.adb (Read_Default_Search_Dirs): Correct behavior to\n+\tdetect EOL characters.\n+\t* par_sco.adb (Output_Header): Remove comment regarding use of\n+\tFirst_Sloc.\n+\t(Traverse_Sync_Definition): Renamed to\n+\tTraverse_Protected_Or_Task_Definition.\n+\t* pprint.adb (Interal_List_Name): Add description about purpose,\n+\tand refactor conditional statement.\n+\t(Prepend): Removed.\n+\t* repinfo.adb (List_Rep_Info, Write_Info_Line): Remove use of\n+\tsubprogram pointer.\n+\t* scng.adb (Scan): Remove CODEFIX question, and minor comment\n+\tchange.\n+\t* sem_attr.adb (Analyze_Image_Attribute): Remove special\n+\tprocessing for 'Img.\n+\t* sem_ch6.adb (Check_Untagged_Equality): Add RM reference.\n+\t(FCE): Add comment describing behavior.\n+\t(Is_Non_Overriding_Operation): Minor comment formatting change.\n+\t* sem_type.adb (Is_Actual_Subprogram): Add comment about\n+\tComes_From_Source test.\n+\t(Matching_Types): Describe non-matching cases.\n+\t* sem_util.adb (Is_Confirming): Add stub case for\n+\tNo_Controlled_Parts.\n+\n+2021-09-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Predicate_Functions): Access\n+\tPredicated_Parent only on subtypes.\n+\n+2021-09-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Process_Import_Or_Interface): Relax error when\n+\tRelaxed_RM_Semantics.\n+\n+2021-09-22  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/s-regpat.adb (Match): Handle the case where Self.First\n+\tis not NUL (so we know the first character we are looking for),\n+\tbut case-insensitive matching has\n+\tbeen specified.\n+\t(Optimize): In the case of an EXACTF Op, set Self.First as is\n+\tdone in the EXACT case, except with the addition of a call to\n+\tLower_Case.\n+\n+2021-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-imenne.ads, libgnat/s-imenne.adb: Delete.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Remove s-imenne.o.\n+\t(GNATBIND_OBJS): Likewise.\n+\n+2021-09-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.ads: Fix comments.\n+\t* exp_aggr.adb: Fix variable name.\n+\t* exp_util.adb: Fix comments.\n+\t* sem_ch13.adb: Fix comments.\n+\t* sem_ch3.adb: Fix comments and variable name.\n+\n+2021-09-22  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnarl/s-osinte__vxworks.ads: Make procedure vice function.\n+\t* libgnarl/s-vxwext.ads: Likewise.\n+\t* libgnarl/s-vxwext__kernel-smp.adb: Likewise.\n+\t* libgnarl/s-vxwext__kernel.adb: Likewise.\n+\t* libgnarl/s-vxwext__kernel.ads: Likewise.\n+\t* libgnarl/s-vxwext__rtp-smp.adb: Likewise.\n+\t* libgnarl/s-vxwext__rtp.adb: Likewise.\n+\t* libgnarl/s-vxwext__rtp.ads: Likewise.\n+\t* libgnarl/s-taprop__vxworks.adb (Stop_All_Tasks): Call\n+\tInt_Unlock as a procedure.\n+\n+2021-09-22  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnarl/s-osinte__vxworks.ads (SVE): New package renaming\n+\t(vx_freq_t): New subtype.\n+\t(sysClkRateGet): Return vx_freq_t.\n+\t* libgnarl/s-vxwext.ads (vx_freq_t): New type.\n+\t* libgnarl/s-vxwext__kernel.ads: Likewise.\n+\t* libgnarl/s-vxwext__rtp.ads: Likewise.\n+\n+2021-09-22  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_case.adb (Composite_Case_Ops): Replace 'Image with\n+\tError_Msg_Uint.\n+\n+2021-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_If_Expression): Generate an intermediate\n+\ttemporary when the expression is a condition in an outer decision\n+\tand control-flow optimizations are suppressed.\n+\n+2021-09-22  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_General_Case_Statement.Pattern_Match): Add\n+\tnew function Indexed_Element to handle array element\n+\tcomparisons. Handle case choices that are array aggregates,\n+\tstring literals, or names denoting constants.\n+\t* sem_case.adb (Composite_Case_Ops.Array_Case_Ops): New package\n+\tproviding utilities needed for casing on arrays.\n+\t(Composite_Case_Ops.Choice_Analysis): If necessary, include\n+\tarray length as a \"component\" (like a discriminant) when\n+\ttraversing components. We do not (yet) partition choice analysis\n+\tto deal with unequal length choices separately. Instead, we\n+\tembed everything in the minimum-dimensionality Cartesian product\n+\tspace needed to handle all choices properly; this is determined\n+\tby the length of the longest choice pattern.\n+\t(Composite_Case_Ops.Choice_Analysis.Traverse_Discrete_Parts):\n+\tInclude length as a \"component\" in the traversal if necessary.\n+\t(Composite_Case_Ops.Choice_Analysis.Parse_Choice.Traverse_Choice):\n+\tAdd support for case choices that are string literals or names\n+\tdenoting constants.\n+\t(Composite_Case_Ops.Choice_Analysis): Include length as a\n+\t\"component\" in the analysis if necessary.\n+\t(Check_Choices.Check_Case_Pattern_Choices.Ops.Value_Sets.Value_Index_Count):\n+\tImprove error message when capacity exceeded.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update\n+\tdocumentation to reflect current implementation status.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Check_Component_Storage_Order): Give a specific error\n+\tmessage for non-byte-aligned component in the packed case.  Replace\n+\t\"composite\" with \"record\" in both cases.\n+\n+2021-09-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnarl/a-tasini.ads, libgnarl/a-tasini.adb: Make compatible\n+\twith No_Elaboration_Code_All.\n+\t* libgnarl/s-taskin.ads, libgnarl/s-tassta.adb: Adjust\n+\taccordingly.\n+\n+2021-09-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Returns): Change message on missing return.\n+\n+2021-09-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnatfind.adb, gnatxref.adb: Mark these tools as obsolete\n+\tbefore removing them completely.\n+\n+2021-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (range_cannot_be_superflat): Tweak comments.\n+\n 2021-09-21  Doug Rupp  <rupp@adacore.com>\n \n \t* init.c (__gnat_error_handler) [LynxOS]: Add a comment about"}, {"sha": "48bcb4f7df17336a9415cf772a3b499b8e235d0b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,7 @@\n+2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-omp.c (c_omp_split_clauses): Copy over OMP_CLAUSE_ALLOCATE_ALIGN.\n+\n 2021-09-20  Matthias Kretz  <m.kretz@gsi.de>\n \n \t* c-cppbuiltin.c (c_cpp_builtins_optimize_pragma): Define or"}, {"sha": "f9f899bd0848528b3b035f41e617caea0de3fc3c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,8 @@\n+2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_allocate): Parse allocate clause\n+\tmodifiers.\n+\n 2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_order): Parse unconstrained"}, {"sha": "794472644e9f39f5d7825a2d26592f8bdf44bd20", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,31 @@\n+2021-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 2446\n+\tPR c++/102412\n+\t* constexpr.c (cxx_eval_constant_expression)\n+\t<case TEMPLATE_ID_EXPR>: Check value_dependent_expression_p\n+\tinstead of processing_template_decl.\n+\t* pt.c (value_dependent_expression_p) <case TEMPLATE_ID_EXPR>:\n+\tReturn true only if any_dependent_template_arguments_p.\n+\t(instantiation_dependent_r) <case CALL_EXPR>: Remove this case.\n+\t<case TEMPLATE_ID_EXPR>: Likewise.\n+\n+2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_allocate): Parse allocate clause\n+\tmodifiers.\n+\t* semantics.c (finish_omp_clauses) <OMP_CLAUSE_ALLOCATE>: Perform\n+\tsemantic analysis of OMP_CLAUSE_ALLOCATE_ALIGN.\n+\t* pt.c (tsubst_omp_clauses) <case OMP_CLAUSE_ALLOCATE>: Handle\n+\talso OMP_CLAUSE_ALLOCATE_ALIGN.\n+\n+2021-09-22  Barrett Adair  <barrettellisadair@gmail.com>\n+\n+\t* pt.c (find_parm_usage_r): New walk_tree callback to find func\n+\tparms.\n+\t(any_template_arguments_need_structural_equality_p): New special\n+\tcase.\n+\n 2021-09-21  wangpc  <pc.wang@linux.alibaba.com>\n \n \t* decl.c (start_decl_1): Move verify_type_context to ..."}, {"sha": "f96198d5e5dabc507c9fd91f7cbb46b45ebb05e6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,48 @@\n+2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/101319\n+\t* interface.c (gfc_compare_actual_formal): Extend existing\n+\tassumed-type diagnostic to also check for argument with type\n+\tparameters.\n+\n+2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/101334\n+\t* check.c (gfc_check_associated): Allow an assumed-rank\n+\tarray for the pointer argument.\n+\t* interface.c (compare_parameter): Also give rank mismatch\n+\terror on assumed-rank array.\n+\n+2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* trans-stmt.c (trans_associate_var): Check that result of\n+\tGFC_DECL_SAVED_DESCRIPTOR is not null before using it.\n+\n+2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/55534\n+\t* cpp.c (gfc_cpp_register_include_paths, gfc_cpp_post_options):\n+\tAdd new bool verbose_missing_dir_warn argument.\n+\t* cpp.h (gfc_cpp_post_options): Update prototype.\n+\t* f95-lang.c (gfc_init): Remove duplicated file-not found diag.\n+\t* gfortran.h (gfc_check_include_dirs): Takes bool\n+\tverbose_missing_dir_warn arg.\n+\t(gfc_new_file): Returns now void.\n+\t* options.c (gfc_post_options): Update to warn for -I and -J,\n+\tonly, by default but for all when user requested.\n+\t* scanner.c (gfc_do_check_include_dir):\n+\t(gfc_do_check_include_dirs, gfc_check_include_dirs): Take bool\n+\tverbose warn arg and update to avoid printing the same message\n+\ttwice or never.\n+\t(load_file): Fix indent.\n+\t(gfc_new_file): Return void and exit when load_file failed\n+\tas all other load_file users do.\n+\n+2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-expr.c (gfc_simple_for_loop): New.\n+\t* trans.h (gfc_simple_for_loop): New prototype.\n+\n 2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/55534"}, {"sha": "0605e9fd77046326fde10d3424d4d309dd4a355f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,180 @@\n+2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/101319\n+\t* gfortran.dg/c-interop/assumed-type-dummy.f90: Remove xfail.\n+\n+2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/101334\n+\t* gfortran.dg/c-interop/c535b-2.f90: Remove xfails.\n+\t* gfortran.dg/c-interop/c535b-3.f90: Likewise.\n+\n+2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gfortran.dg/assumed_rank_18.f90 (g): Wrap call to h in\n+\tselect rank.\n+\t* gfortran.dg/assumed_type_10.f90 (test_array): Likewise for\n+\tcall to test_lib.\n+\t* gfortran.dg/assumed_type_11.f90 (test_array): Likewise.\n+\n+2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/55534\n+\t* gfortran.dg/include_14.f90: Add -J testcase and update dg-output.\n+\t* gfortran.dg/include_15.f90: Likewise.\n+\t* gfortran.dg/include_16.f90: Likewise.\n+\t* gfortran.dg/include_17.f90: Likewise.\n+\t* gfortran.dg/include_18.f90: Likewise.\n+\t* gfortran.dg/include_19.f90: Likewise.\n+\n+2021-09-22  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-negate-1.c: New test case.\n+\n+2021-09-22  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/auto-init-2.c: Replace ia32 with { ! lp64 }.\n+\t* gcc.target/i386/auto-init-3.c (dg-options): Add -msse.\n+\t(dg-additional-options): Add -mfpmath=387 for ia32.\n+\tReplace lp64 with { ! ia32 }. Add a space after ia32.\n+\t* gcc.target/i386/auto-init-4.c: Replace lp64 with { ! ia32 }.\n+\t* gcc.target/i386/auto-init-5.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-3.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-7.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-8.c: Likewise.\n+\t* gcc.target/i386/auto-init-padding-9.c: Likewise.\n+\n+2021-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 2446\n+\tPR c++/102412\n+\t* g++.dg/cpp2a/concepts-nondep2.C: New test.\n+\t* g++.dg/cpp2a/concepts-nondep3.C: New test.\n+\n+2021-09-22  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/102087\n+\t* gcc.dg/pr102087.c: New test.\n+\n+2021-09-22  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-14.c: New test.\n+\n+2021-09-22  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-conjugation-1.c: New test.\n+\t* gcc.target/i386/avx512fp16vl-conjugation-1.c: New test.\n+\n+2021-09-22  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-reduce-op-1.c: New test.\n+\t* gcc.target/i386/avx512fp16vl-reduce-op-1.c: Ditto.\n+\n+2021-09-22  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-13.c: New test.\n+\n+2021-09-22  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/pr102222.c: New test.\n+\n+2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/102415\n+\t* c-c++-common/gomp/scope-3.c: New test.\n+\n+2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/allocate-6.c: New test.\n+\t* c-c++-common/gomp/allocate-7.c: New test.\n+\t* g++.dg/gomp/allocate-4.C: New test.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512vl-pr95046.c: New test.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr92658-avx512f.c: Refine testcase.\n+\t* gcc.target/i386/pr92658-avx512vl.c: Adjust scan-assembler,\n+\tonly v2di->v2qi truncate is not supported, v4di->v4qi should\n+\tbe supported.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-builtin-fpcompare-1.c: New test.\n+\t* gcc.target/i386/avx512fp16-builtin-fpcompare-2.c: New test.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-builtin-round-1.c: New test.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-builtin-sqrt-1.c: New test.\n+\t* gcc.target/i386/avx512fp16vl-builtin-sqrt-1.c: New test.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfcmulcsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfcmulcsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmaddcsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmaddcsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmulcsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmulcsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-complex-constraints.c: Ditto.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-helper.h\n+\t(init_src): Adjust init value.\n+\t(NET_CMASK): New net mask for complex input.\n+\t* gcc.target/i386/avx512fp16-vfcmaddcph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vfcmaddcph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfcmulcph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfcmulcph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmaddcph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmaddcph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmulcph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmulcph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfcmaddcph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfcmaddcph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfcmulcph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfcmulcph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmaddcph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmaddcph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmulcph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmulcph-1b.c: Ditto.\n+\n+2021-09-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-22  Barrett Adair  <barrettellisadair@gmail.com>\n+\n+\t* g++.dg/cpp0x/constexpr-52830.C: Remove unwanted dg-ice.\n+\t* g++.dg/template/canon-type-15.C: New test.\n+\t* g++.dg/template/canon-type-16.C: New test.\n+\t* g++.dg/template/canon-type-17.C: New test.\n+\t* g++.dg/template/canon-type-18.C: New test.\n+\t* g++.dg/template/dependent-name15.C: New regression test.\n+\t* g++.dg/template/dependent-name16.C: New regression test.\n+\n 2021-09-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/102421"}, {"sha": "d43a997d690947c2d57e6c18b1e5db2df233a380", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,8 @@\n+2021-09-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* obstack.h (__PTR_ALIGN): Expand and simplify __BPTR_ALIGN\n+\trather than calculating relative to a NULL pointer.\n+\n 2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gomp-constants.h (GOMP_TASK_FLAG_STRICT): Define."}, {"sha": "2bef573ebe43567180dfd93ef2ae8b03621001c3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,8 @@\n+2021-09-22  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/i386/sfp-machine.h: Guard Mach-O-specific code\n+\tusing __APPLE__.\n+\n 2021-09-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/t-slibgcc-darwin: Delete unused code."}, {"sha": "989fb3a3686954dc86dd9e15a1f995fae0fe14b0", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,10 @@\n+2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/55534\n+\t* configure.ac (AM_FCFLAGS): Revert r12-3722 by removing\n+\t-Wno-missing-include-dirs.\n+\t* configure: Regenerate.\n+\n 2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/55534"}, {"sha": "e1c9f72d86b929fee72f3f30ba12e1d2a6330e3e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4777439fc77465b4cf89b6bfeb47cd00329cb20/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4777439fc77465b4cf89b6bfeb47cd00329cb20/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e4777439fc77465b4cf89b6bfeb47cd00329cb20", "patch": "@@ -1,3 +1,15 @@\n+2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/55534\n+\t* testsuite/libgomp.fortran/fortran.exp (ALWAYS_CFLAGS): Revert\n+\tr12-3722 by removing -Wno-missing-include-dirs.\n+\t* testsuite/libgomp.oacc-fortran/fortran.exp (ALWAYS_CFLAGS): Likewise.\n+\n+2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/allocate-2.c: New test.\n+\t* testsuite/libgomp.c-c++-common/allocate-3.c: New test.\n+\n 2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/55534"}]}