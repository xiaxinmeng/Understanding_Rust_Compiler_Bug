{"sha": "faf7a23d6d3bc281c386865971f7bffd8cb7057c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmN2EyM2Q2ZDNiYzI4MWMzODY4NjU5NzFmN2JmZmQ4Y2I3MDU3Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-08-04T15:39:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-08-04T15:39:40Z"}, "message": "re PR middle-end/49968 (ICE in calls.c:3141 / assert after emit_stack_restore)\n\nPR middle-end/49968\n        * calls.c (expand_call): Use fixup_args_size_notes for\n        emit_stack_restore.\n        * expr.c (fixup_args_size_notes): Allow STACK_POINTER_REGNUM sets\n        in non-standard modes.\n\nFrom-SVN: r177404", "tree": {"sha": "31c68b481009457f22ecf8ae103929ff23f553af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31c68b481009457f22ecf8ae103929ff23f553af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faf7a23d6d3bc281c386865971f7bffd8cb7057c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf7a23d6d3bc281c386865971f7bffd8cb7057c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf7a23d6d3bc281c386865971f7bffd8cb7057c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf7a23d6d3bc281c386865971f7bffd8cb7057c/comments", "author": null, "committer": null, "parents": [{"sha": "0319cacc3928720fda058dc7e6c60f575169f576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0319cacc3928720fda058dc7e6c60f575169f576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0319cacc3928720fda058dc7e6c60f575169f576"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "861320b612b293d15456ee79bd39bb03a80a46c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7a23d6d3bc281c386865971f7bffd8cb7057c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7a23d6d3bc281c386865971f7bffd8cb7057c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=faf7a23d6d3bc281c386865971f7bffd8cb7057c", "patch": "@@ -1,3 +1,11 @@\n+2011-08-04  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/49968\n+\t* calls.c (expand_call): Use fixup_args_size_notes for\n+\temit_stack_restore.\n+\t* expr.c (fixup_args_size_notes): Allow STACK_POINTER_REGNUM sets\n+\tin non-standard modes.\n+\n 2011-08-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c (self_spec): New variable."}, {"sha": "26c320095e000685ca3fc7b5f1196e948d90f3cf", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7a23d6d3bc281c386865971f7bffd8cb7057c/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7a23d6d3bc281c386865971f7bffd8cb7057c/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=faf7a23d6d3bc281c386865971f7bffd8cb7057c", "patch": "@@ -3128,18 +3128,12 @@ expand_call (tree exp, rtx target, int ignore)\n \n       if (old_stack_level)\n \t{\n-\t  rtx last, set;\n+\t  rtx prev = get_last_insn ();\n \n \t  emit_stack_restore (SAVE_BLOCK, old_stack_level);\n \t  stack_pointer_delta = old_stack_pointer_delta;\n \n-\t  /* ??? Is this assert warrented, given emit_stack_restore?\n-\t     or should we just mark the last insn no matter what?  */\n-\t  last = get_last_insn ();\n-\t  set = single_set (last);\n-\t  gcc_assert (set != NULL);\n-\t  gcc_assert (SET_DEST (set) == stack_pointer_rtx);\n-\t  add_reg_note (last, REG_ARGS_SIZE, GEN_INT (stack_pointer_delta));\n+\t  fixup_args_size_notes (prev, get_last_insn (), stack_pointer_delta);\n \n \t  pending_stack_adjust = old_pending_adj;\n \t  old_stack_allocated = stack_pointer_delta - pending_stack_adjust;"}, {"sha": "e5bec34e78c5775636fc057b68c1f2e14cad7f00", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf7a23d6d3bc281c386865971f7bffd8cb7057c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf7a23d6d3bc281c386865971f7bffd8cb7057c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=faf7a23d6d3bc281c386865971f7bffd8cb7057c", "patch": "@@ -3620,11 +3620,14 @@ fixup_args_size_notes (rtx prev, rtx last, int end_args_size)\n       dest = SET_DEST (set);\n \n       /* Look for direct modifications of the stack pointer.  */\n-      if (dest == stack_pointer_rtx)\n+      if (REG_P (dest) && REGNO (dest) == STACK_POINTER_REGNUM)\n \t{\n \t  gcc_assert (!saw_unknown);\n \t  /* Look for a trivial adjustment, otherwise assume nothing.  */\n-\t  if (GET_CODE (SET_SRC (set)) == PLUS\n+\t  /* Note that the SPU restore_stack_block pattern refers to\n+\t     the stack pointer in V4SImode.  Consider that non-trivial.  */\n+\t  if (SCALAR_INT_MODE_P (GET_MODE (dest))\n+\t      && GET_CODE (SET_SRC (set)) == PLUS\n \t      && XEXP (SET_SRC (set), 0) == stack_pointer_rtx\n \t      && CONST_INT_P (XEXP (SET_SRC (set), 1)))\n \t    this_delta = INTVAL (XEXP (SET_SRC (set), 1));"}]}