{"sha": "d79d9445d69a20a0e0361fb47584bbb8f5c6e84b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5ZDk0NDVkNjlhMjBhMGUwMzYxZmI0NzU4NGJiYjhmNWM2ZTg0Yg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T09:19:39Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T09:25:11Z"}, "message": "Add is_gimple_min_invariant dropped from previous patch.\n\ngcc/ChangeLog:\n\n\t* vr-values.c (simplify_using_ranges::vrp_evaluate_conditional):\n\tCall is_gimple_min_invariant dropped from previous patch.", "tree": {"sha": "f67c25f8cabde7cca4a50e8ca9787d54ee900cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67c25f8cabde7cca4a50e8ca9787d54ee900cdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d79d9445d69a20a0e0361fb47584bbb8f5c6e84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79d9445d69a20a0e0361fb47584bbb8f5c6e84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79d9445d69a20a0e0361fb47584bbb8f5c6e84b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79d9445d69a20a0e0361fb47584bbb8f5c6e84b/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e0ad452cdf001bccd12c1cb5f4797df1114a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e0ad452cdf001bccd12c1cb5f4797df1114a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e0ad452cdf001bccd12c1cb5f4797df1114a3a"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "511342f2f132124e260d03e3ff4301c398f98bc7", "filename": "gcc/vr-values.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79d9445d69a20a0e0361fb47584bbb8f5c6e84b/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79d9445d69a20a0e0361fb47584bbb8f5c6e84b/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=d79d9445d69a20a0e0361fb47584bbb8f5c6e84b", "patch": "@@ -2495,7 +2495,9 @@ simplify_using_ranges::vrp_evaluate_conditional (tree_code code, tree op0,\n       tree type = TREE_TYPE (op0);\n       const value_range_equiv *vr0 = get_value_range (op0);\n \n-      if (vr0->varying_p () && INTEGRAL_TYPE_P (type))\n+      if (vr0->varying_p ()\n+\t  && INTEGRAL_TYPE_P (type)\n+\t  && is_gimple_min_invariant (op1))\n \t{\n \t  location_t location;\n "}]}