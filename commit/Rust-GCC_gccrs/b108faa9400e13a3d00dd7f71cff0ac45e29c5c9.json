{"sha": "b108faa9400e13a3d00dd7f71cff0ac45e29c5c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwOGZhYTk0MDBlMTNhM2QwMGRkN2Y3MWNmZjBhYzQ1ZTI5YzVjOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-19T13:33:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-19T13:33:11Z"}, "message": "libstdc++: Fix overflow checks to use the correct \"time_t\" [PR 93456]\n\nI recently added overflow checks to src/c++11/futex.cc for PR 93456, but\nthen changed the type of the timespec for PR 93421. This meant the\noverflow checks were no longer using the right range, because the\nvariable being written to might be smaller than time_t.\n\nThis introduces new typedef that corresponds to the tv_sec member of the\nstruct being passed to the syscall, and uses that typedef in the range\nchecks.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/93421\n\tPR libstdc++/93456\n\t* src/c++11/futex.cc (syscall_time_t): New typedef for\n\tthe type of the syscall_timespec::tv_sec member.\n\t(relative_timespec, _M_futex_wait_until)\n\t(_M_futex_wait_until_steady): Use syscall_time_t in overflow\n\tchecks, not time_t.", "tree": {"sha": "46b5434fd6d1c44308337d97d5cb23e66124f416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46b5434fd6d1c44308337d97d5cb23e66124f416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b108faa9400e13a3d00dd7f71cff0ac45e29c5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b108faa9400e13a3d00dd7f71cff0ac45e29c5c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b108faa9400e13a3d00dd7f71cff0ac45e29c5c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b108faa9400e13a3d00dd7f71cff0ac45e29c5c9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf425849f1dfa11f509e9ec251056d1e769b1ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf425849f1dfa11f509e9ec251056d1e769b1ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf425849f1dfa11f509e9ec251056d1e769b1ac2"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "290201ae25408429b0a1c0e3c3077e73418eed1c", "filename": "libstdc++-v3/src/c++11/futex.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b108faa9400e13a3d00dd7f71cff0ac45e29c5c9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b108faa9400e13a3d00dd7f71cff0ac45e29c5c9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc?ref=b108faa9400e13a3d00dd7f71cff0ac45e29c5c9", "patch": "@@ -64,8 +64,10 @@ namespace\n   // The SYS_futex syscall still uses the old definition of timespec\n   // where tv_sec is 32 bits, so define a type that matches that.\n   struct syscall_timespec { long tv_sec; long tv_nsec; };\n+  using syscall_time_t = long;\n #else\n   using syscall_timespec = ::timespec;\n+  using syscall_time_t = time_t;\n #endif\n \n   // Return the relative duration from (now_s + now_ns) to (abs_s + abs_ns)\n@@ -86,9 +88,9 @@ namespace\n     const auto rel_s = abs_s.count() - now_s;\n \n     // Convert the absolute timeout to a relative timeout, without overflow.\n-    if (rel_s > __int_traits<time_t>::__max) [[unlikely]]\n+    if (rel_s > __int_traits<syscall_time_t>::__max) [[unlikely]]\n       {\n-\trt.tv_sec = __int_traits<time_t>::__max;\n+\trt.tv_sec = __int_traits<syscall_time_t>::__max;\n \trt.tv_nsec = 999999999;\n       }\n     else\n@@ -130,8 +132,8 @@ namespace\n \t      return false;\n \n \t    syscall_timespec rt;\n-\t    if (__s.count() > __int_traits<time_t>::__max) [[unlikely]]\n-\t      rt.tv_sec = __int_traits<time_t>::__max;\n+\t    if (__s.count() > __int_traits<syscall_time_t>::__max) [[unlikely]]\n+\t      rt.tv_sec = __int_traits<syscall_time_t>::__max;\n \t    else\n \t      rt.tv_sec = __s.count();\n \t    rt.tv_nsec = __ns.count();\n@@ -206,8 +208,8 @@ namespace\n \t      return false;\n \n \t    syscall_timespec rt;\n-\t    if (__s.count() > __int_traits<time_t>::__max) [[unlikely]]\n-\t      rt.tv_sec = __int_traits<time_t>::__max;\n+\t    if (__s.count() > __int_traits<syscall_time_t>::__max) [[unlikely]]\n+\t      rt.tv_sec = __int_traits<syscall_time_t>::__max;\n \t    else\n \t      rt.tv_sec = __s.count();\n \t    rt.tv_nsec = __ns.count();"}]}