{"sha": "934392185369af22fee845e4edd92c420b8c248b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0MzkyMTg1MzY5YWYyMmZlZTg0NWU0ZWRkOTJjNDIwYjhjMjQ4Yg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-09-03T14:37:41Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-09-03T14:37:41Z"}, "message": "re PR middle-end/91603 (Unaligned access in expand_assignment)\n\n2019-09-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/91603\n        PR middle-end/91612\n        PR middle-end/91613\n        * expr.c (expand_expr_real_1): Handle unaligned decl_rtl\n        and SSA_NAME referring to CONSTANT_P correctly.\n\ntestsuite:\n2019-09-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/91603\n        * testsuite/gcc.target/arm/pr91603.c: New test.\n\nFrom-SVN: r275342", "tree": {"sha": "e13e59cecc7a4efdcf0a55187dcac5ea3900e569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e13e59cecc7a4efdcf0a55187dcac5ea3900e569"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934392185369af22fee845e4edd92c420b8c248b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934392185369af22fee845e4edd92c420b8c248b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934392185369af22fee845e4edd92c420b8c248b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934392185369af22fee845e4edd92c420b8c248b/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6c2d1bc9bc3eb3606af6a198e74170bd906e199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c2d1bc9bc3eb3606af6a198e74170bd906e199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c2d1bc9bc3eb3606af6a198e74170bd906e199"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "9c8800670401e03d2295ab39a84ea39cc612d7e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934392185369af22fee845e4edd92c420b8c248b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934392185369af22fee845e4edd92c420b8c248b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=934392185369af22fee845e4edd92c420b8c248b", "patch": "@@ -1,3 +1,11 @@\n+2019-09-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/91603\n+\tPR middle-end/91612\n+\tPR middle-end/91613\n+\t* expr.c (expand_expr_real_1): Handle unaligned decl_rtl\n+\tand SSA_NAME referring to CONSTANT_P correctly.\n+\n 2019-09-03  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.h (vn_nary_op_lookup): Remove.\n@@ -76,7 +84,7 @@\n \tPR middle-end/91605\n \t* expr.c (addr_expr_of_non_mem_decl_p_1): Refactor into...\n \t(non_mem_decl_p): ...this.\n-\t(mem_ref_refers_to_non_mem_p): Handle DECL_P as well ase MEM_REF.\n+\t(mem_ref_refers_to_non_mem_p): Handle DECL_P as well as MEM_REF.\n \t(expand_assignment): Call mem_ref_referes_to_non_mem_p\n \tunconditionally as before.\n "}, {"sha": "0c96551ec2c78c1581411ec3c390f260b993f115", "filename": "gcc/expr.c", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934392185369af22fee845e4edd92c420b8c248b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934392185369af22fee845e4edd92c420b8c248b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=934392185369af22fee845e4edd92c420b8c248b", "patch": "@@ -10062,6 +10062,42 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t{\n \t  if (exp && MEM_P (temp) && REG_P (XEXP (temp, 0)))\n \t    mark_reg_pointer (XEXP (temp, 0), DECL_ALIGN (exp));\n+\t}\n+      else if (MEM_P (decl_rtl))\n+\ttemp = decl_rtl;\n+\n+      if (temp != 0)\n+\t{\n+\t  if (MEM_P (temp)\n+\t      && modifier != EXPAND_WRITE\n+\t      && modifier != EXPAND_MEMORY\n+\t      && modifier != EXPAND_INITIALIZER\n+\t      && modifier != EXPAND_CONST_ADDRESS\n+\t      && modifier != EXPAND_SUM\n+\t      && !inner_reference_p\n+\t      && mode != BLKmode\n+\t      && MEM_ALIGN (temp) < GET_MODE_ALIGNMENT (mode))\n+\t    {\n+\t      enum insn_code icode;\n+\n+\t      if ((icode = optab_handler (movmisalign_optab, mode))\n+\t\t  != CODE_FOR_nothing)\n+\t\t{\n+\t\t  class expand_operand ops[2];\n+\n+\t\t  /* We've already validated the memory, and we're creating a\n+\t\t     new pseudo destination.  The predicates really can't fail,\n+\t\t     nor can the generator.  */\n+\t\t  create_output_operand (&ops[0], NULL_RTX, mode);\n+\t\t  create_fixed_operand (&ops[1], temp);\n+\t\t  expand_insn (icode, 2, ops);\n+\t\t  temp = ops[0].value;\n+\t\t}\n+\t      else if (targetm.slow_unaligned_access (mode, MEM_ALIGN (temp)))\n+\t\ttemp = extract_bit_field (temp, GET_MODE_BITSIZE (mode),\n+\t\t\t\t\t  0, unsignedp, NULL_RTX,\n+\t\t\t\t\t  mode, mode, false, NULL);\n+\t    }\n \n \t  return temp;\n \t}\n@@ -10974,9 +11010,10 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  op0 = copy_rtx (op0);\n \n \t/* Don't set memory attributes if the base expression is\n-\t   SSA_NAME that got expanded as a MEM.  In that case, we should\n-\t   just honor its original memory attributes.  */\n-\tif (TREE_CODE (tem) != SSA_NAME || !MEM_P (orig_op0))\n+\t   SSA_NAME that got expanded as a MEM or a CONSTANT.  In that case,\n+\t   we should just honor its original memory attributes.  */\n+\tif (!(TREE_CODE (tem) == SSA_NAME\n+\t      && (MEM_P (orig_op0) || CONSTANT_P (orig_op0))))\n \t  set_mem_attributes (op0, exp, 0);\n \n \tif (REG_P (XEXP (op0, 0)))"}, {"sha": "24e0d2b17e416bd23bfc6905e43d815be1759c2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934392185369af22fee845e4edd92c420b8c248b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934392185369af22fee845e4edd92c420b8c248b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=934392185369af22fee845e4edd92c420b8c248b", "patch": "@@ -1,3 +1,8 @@\n+2019-09-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/91603\n+\t* gcc.target/arm/pr91603.c: New test.\n+\n 2019-09-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* gcc.target/s390/sigfpe-eh.c: New test."}, {"sha": "ab09c3bb9250f9dfe49d04229d7302ff798d5c78", "filename": "gcc/testsuite/gcc.target/arm/pr91603.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934392185369af22fee845e4edd92c420b8c248b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr91603.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934392185369af22fee845e4edd92c420b8c248b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr91603.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr91603.c?ref=934392185369af22fee845e4edd92c420b8c248b", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-add-options arm_neon } */\n+\n+typedef __simd64_int32_t int32x2_t;\n+typedef __attribute__((aligned (1))) int32x2_t unalignedvec;\n+\n+unalignedvec a = {11, 13};\n+\n+void foo(unalignedvec *);\n+\n+void test()\n+{\n+  unalignedvec x = a;\n+  foo (&x);\n+  a = x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vld1.32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vst1.32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vldr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstr\" 1 } } */"}]}