{"sha": "b8388bb06202fa5a007193f189d8a4dc24b98f6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzODhiYjA2MjAyZmE1YTAwNzE5M2YxODlkOGE0ZGMyNGI5OGY2Yw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-04-15T16:33:07Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-04-15T16:33:07Z"}, "message": "re PR libfortran/48589 (Invalid G0/G0.d editing for NaN/infinity)\n\n2011-04-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/48589\n\t* gfortran.dg/fmt_g0_5.f08: New test.\n\nFrom-SVN: r172503", "tree": {"sha": "4a8bf848067ae54e9789178558daf307084ebb88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a8bf848067ae54e9789178558daf307084ebb88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8388bb06202fa5a007193f189d8a4dc24b98f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8388bb06202fa5a007193f189d8a4dc24b98f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8388bb06202fa5a007193f189d8a4dc24b98f6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8388bb06202fa5a007193f189d8a4dc24b98f6c/comments", "author": null, "committer": null, "parents": [{"sha": "0b0a0c945fad9f4a8ec83c4eabd9e141294d6ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0a0c945fad9f4a8ec83c4eabd9e141294d6ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0a0c945fad9f4a8ec83c4eabd9e141294d6ea5"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "0cb6d3aea8f10c736f7f357f5247d566cdfd9d16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8388bb06202fa5a007193f189d8a4dc24b98f6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8388bb06202fa5a007193f189d8a4dc24b98f6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8388bb06202fa5a007193f189d8a4dc24b98f6c", "patch": "@@ -1,3 +1,8 @@\n+2011-04-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/48589\n+\t* gfortran.dg/fmt_g0_5.f08: New test.\n+\n 2011-04-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/48286"}, {"sha": "a7ec0f17f70eb74a529a21d3fcf33919a71a38e5", "filename": "gcc/testsuite/gfortran.dg/fmt_g0_5.f08", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8388bb06202fa5a007193f189d8a4dc24b98f6c/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_5.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8388bb06202fa5a007193f189d8a4dc24b98f6c/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_5.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_5.f08?ref=b8388bb06202fa5a007193f189d8a4dc24b98f6c", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! PR48589 Invalid G0/G0.d editing for NaN/infinity\n+! Test case by Thomas Henlich\n+program test_g0_special\n+\n+    call check_all(\"(g10.3)\", \"(f10.3)\")\n+    call check_all(\"(g10.3e3)\", \"(f10.3)\")\n+    call check_all(\"(spg10.3)\", \"(spf10.3)\")\n+    call check_all(\"(spg10.3e3)\", \"(spf10.3)\")\n+    !print *, \"-----------------------------------\"\n+    call check_all(\"(g0)\", \"(f0.0)\")\n+    call check_all(\"(g0.15)\", \"(f0.0)\")\n+    call check_all(\"(spg0)\", \"(spf0.0)\")\n+    call check_all(\"(spg0.15)\", \"(spf0.0)\")\n+contains\n+    subroutine check_all(fmt1, fmt2)\n+        character(len=*), intent(in) :: fmt1, fmt2\n+        real(8) :: one = 1.0D0, zero = 0.0D0, nan, pinf, minf\n+\n+        nan = zero / zero\n+        pinf = one / zero\n+        minf = -one / zero\n+        call check_equal(fmt1, fmt2, nan)\n+        call check_equal(fmt1, fmt2, pinf)\n+        call check_equal(fmt1, fmt2, minf)\n+    end subroutine check_all\n+    subroutine check_equal(fmt1, fmt2, r)\n+        real(8), intent(in) :: r\n+        character(len=*), intent(in) :: fmt1, fmt2\n+        character(len=80) :: s1, s2\n+        \n+        write(s1, fmt1) r\n+        write(s2, fmt2) r\n+        if (s1 /= s2) call abort\n+        !if (s1 /= s2) print \"(6a)\", trim(fmt1), \": '\", trim(s1), \"' /= '\", trim(s2), \"'\"\n+\t!print \"(6a)\", trim(fmt1), \": '\", trim(s1), \"' /= '\", trim(s2), \"'\"\n+    end subroutine check_equal\n+end program test_g0_special"}]}