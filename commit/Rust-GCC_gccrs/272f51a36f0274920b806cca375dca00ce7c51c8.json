{"sha": "272f51a36f0274920b806cca375dca00ce7c51c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyZjUxYTM2ZjAyNzQ5MjBiODA2Y2NhMzc1ZGNhMDBjZTdjNTFjOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-01-24T22:07:01Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-01-24T22:07:01Z"}, "message": "builtins.c (DEF_BUILTIN): Accept 10 arguments.\n\n\t* builtins.c (DEF_BUILTIN): Accept 10 arguments.\n\t(implicit_built_in_decls): New global array.\n\t(mathfn_built_in): New global function.\n\t(fold_trunc_transparent_mathfn): New static function\n\t(expand_builtin_strstr, expand_bultin_strchr,\n\texpand_builtin_strpbrk, expand_builtin_strcpy,\n\texpand_builtin_strncpy, expand_bultin_strcmp,\n\texpand_bultin_strncat, expand_builtin_fputs): Use\n\timplicint_built_in_decls.\n\t(fold_builtin): Fold floor/trunc/round/ceil/nearbyint.\n\t* builtins.def: Fix comments.\n\t(DEF_GCC_BUILTIN, DEF_FALLBACK_BUILTIN, DEF_EXT_FALLBACK_BUILTIN,\n\tDEF_LIB_BUILTIN, DEF_LIB_ALWAYS_BUILTIN, DEF_EXT_LIB_BUILTIN,\n\tDEF_C99_BULTIN, DEF_FRONT_END_LIB_BUILTIN,\n\tDEF_EXT_FRONT_END_LIB_BUILTIN): Pass implicit as needed.\n\t(DEF_C99_C90RES_BULTIN): New.\n\t(*f, *l builtins): Update.\n\t* c-common.c (DEF_BUILTIN): Initialize implicit array.\n\t(c_expand_builtin_printf, c_expand_builtin_fprintf): Update.\n\t* convert.c (strip_float_extensions): New global function.\n\t* tree.h (DEF_BUILTIN): Accept 10 arguments.\n\t(implicit_built_in_decls, mathfn_built_in, strip_float_extension):\n\tDeclare.\n\t* java/builtins.c (define_builtin): Handle implicit.\n\t(DEF_BUILTIN): Update.\n\t* tm.texi (TARGET_C99_FUNCTIONS): Document.\n\t* defaults.h (TARGET_C99_FUNCTIONS): Default to 0.\n\t* config/linux.h (TARGET_C99_FUNCTIONS): Default to 1\n\twhen using glibc2.\n\nFrom-SVN: r61738", "tree": {"sha": "897959d6b91a286bdf8aff97f680af56bc3b6e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/897959d6b91a286bdf8aff97f680af56bc3b6e8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/272f51a36f0274920b806cca375dca00ce7c51c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272f51a36f0274920b806cca375dca00ce7c51c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272f51a36f0274920b806cca375dca00ce7c51c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272f51a36f0274920b806cca375dca00ce7c51c8/comments", "author": null, "committer": null, "parents": [{"sha": "0ced43354fe55cfeed8e70eefc1110209ffb8c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ced43354fe55cfeed8e70eefc1110209ffb8c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ced43354fe55cfeed8e70eefc1110209ffb8c5f"}], "stats": {"total": 489, "additions": 367, "deletions": 122}, "files": [{"sha": "de8a841d2bf34fa3bf1cabdc11a33c63f7f17f23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -1,3 +1,35 @@\n+Fri Jan 24 23:03:32 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* builtins.c (DEF_BUILTIN): Accept 10 arguments.\n+\t(implicit_built_in_decls): New global array.\n+\t(mathfn_built_in): New global function.\n+\t(fold_trunc_transparent_mathfn): New static function\n+\t(expand_builtin_strstr, expand_bultin_strchr,\n+\texpand_builtin_strpbrk, expand_builtin_strcpy,\n+\texpand_builtin_strncpy, expand_bultin_strcmp,\n+\texpand_bultin_strncat, expand_builtin_fputs): Use\n+\timplicint_built_in_decls.\n+\t(fold_builtin): Fold floor/trunc/round/ceil/nearbyint.\n+\t* builtins.def: Fix comments.\n+\t(DEF_GCC_BUILTIN, DEF_FALLBACK_BUILTIN, DEF_EXT_FALLBACK_BUILTIN,\n+\tDEF_LIB_BUILTIN, DEF_LIB_ALWAYS_BUILTIN, DEF_EXT_LIB_BUILTIN,\n+\tDEF_C99_BULTIN, DEF_FRONT_END_LIB_BUILTIN,\n+\tDEF_EXT_FRONT_END_LIB_BUILTIN): Pass implicit as needed.\n+\t(DEF_C99_C90RES_BULTIN): New.\n+\t(*f, *l builtins): Update.\n+\t* c-common.c (DEF_BUILTIN): Initialize implicit array.\n+\t(c_expand_builtin_printf, c_expand_builtin_fprintf): Update.\n+\t* convert.c (strip_float_extensions): New global function.\n+\t* tree.h (DEF_BUILTIN): Accept 10 arguments.\n+\t(implicit_built_in_decls, mathfn_built_in, strip_float_extension):\n+\tDeclare.\n+\t* java/builtins.c (define_builtin): Handle implicit.\n+\t(DEF_BUILTIN): Update.\n+\t* tm.texi (TARGET_C99_FUNCTIONS): Document.\n+\t* defaults.h (TARGET_C99_FUNCTIONS): Default to 0.\n+\t* config/linux.h (TARGET_C99_FUNCTIONS): Default to 1\n+\twhen using glibc2.\n+\n 2003-01-24  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config.gcc (xtensa-*-elf*): Removed assignments to with_newlib,"}, {"sha": "bb1f023f2725fe00976dabf70d2d6a42eabfd819", "filename": "gcc/builtins.c", "status": "modified", "additions": 183, "deletions": 14, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -64,7 +64,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n const char *const built_in_class_names[4]\n   = {\"NOT_BUILT_IN\", \"BUILT_IN_FRONTEND\", \"BUILT_IN_MD\", \"BUILT_IN_NORMAL\"};\n \n-#define DEF_BUILTIN(X, N, C, T, LT, B, F, NA, AT) STRINGX(X),\n+#define DEF_BUILTIN(X, N, C, T, LT, B, F, NA, AT, IM) STRINGX(X),\n const char *const built_in_names[(int) END_BUILTINS] =\n {\n #include \"builtins.def\"\n@@ -74,6 +74,10 @@ const char *const built_in_names[(int) END_BUILTINS] =\n /* Setup an array of _DECL trees, make sure each element is\n    initialized to NULL_TREE.  */\n tree built_in_decls[(int) END_BUILTINS];\n+/* Declarations used when constructing the builtin implicitly in the compiler.\n+   It may be NULL_TREE when this is invalid (for instance runtime is not\n+   required to implement the function call in all cases.  */\n+tree implicit_built_in_decls[(int) END_BUILTINS];\n \n static int get_pointer_alignment\tPARAMS ((tree, unsigned int));\n static tree c_strlen\t\t\tPARAMS ((tree));\n@@ -153,6 +157,7 @@ static tree fold_builtin_classify_type\tPARAMS ((tree));\n static tree fold_builtin_inf\t\tPARAMS ((tree, int));\n static tree fold_builtin_nan\t\tPARAMS ((tree, tree, int));\n static int validate_arglist\t\tPARAMS ((tree, ...));\n+static tree fold_trunc_transparent_mathfn PARAMS ((tree));\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n@@ -1469,6 +1474,170 @@ expand_builtin_constant_p (exp)\n   return tmp;\n }\n \n+/* Return mathematic function equivalent to FN but operating directly on TYPE,\n+   if available.  */\n+tree\n+mathfn_built_in (type, fn)\n+     tree type;\n+     enum built_in_function fn;\n+{\n+  enum built_in_function fcode = NOT_BUILT_IN;\n+  if (TYPE_MODE (type) == TYPE_MODE (double_type_node))\n+    switch (fn)\n+      {\n+      case BUILT_IN_SQRT:\n+      case BUILT_IN_SQRTF:\n+      case BUILT_IN_SQRTL:\n+\tfcode = BUILT_IN_SQRT;\n+\tbreak;\n+      case BUILT_IN_SIN:\n+      case BUILT_IN_SINF:\n+      case BUILT_IN_SINL:\n+\tfcode = BUILT_IN_SIN;\n+\tbreak;\n+      case BUILT_IN_COS:\n+      case BUILT_IN_COSF:\n+      case BUILT_IN_COSL:\n+\tfcode = BUILT_IN_COS;\n+\tbreak;\n+      case BUILT_IN_EXP:\n+      case BUILT_IN_EXPF:\n+      case BUILT_IN_EXPL:\n+\tfcode = BUILT_IN_EXP;\n+\tbreak;\n+      case BUILT_IN_FLOOR:\n+      case BUILT_IN_FLOORF:\n+      case BUILT_IN_FLOORL:\n+\tfcode = BUILT_IN_FLOOR;\n+\tbreak;\n+      case BUILT_IN_CEIL:\n+      case BUILT_IN_CEILF:\n+      case BUILT_IN_CEILL:\n+\tfcode = BUILT_IN_CEIL;\n+\tbreak;\n+      case BUILT_IN_TRUNC:\n+      case BUILT_IN_TRUNCF:\n+      case BUILT_IN_TRUNCL:\n+\tfcode = BUILT_IN_TRUNC;\n+\tbreak;\n+      case BUILT_IN_ROUND:\n+      case BUILT_IN_ROUNDF:\n+      case BUILT_IN_ROUNDL:\n+\tfcode = BUILT_IN_ROUND;\n+\tbreak;\n+      case BUILT_IN_NEARBYINT:\n+      case BUILT_IN_NEARBYINTF:\n+      case BUILT_IN_NEARBYINTL:\n+\tfcode = BUILT_IN_NEARBYINT;\n+\tbreak;\n+      default:\n+\tabort ();\n+      }\n+  else if (TYPE_MODE (type) == TYPE_MODE (float_type_node))\n+    switch (fn)\n+      {\n+      case BUILT_IN_SQRT:\n+      case BUILT_IN_SQRTF:\n+      case BUILT_IN_SQRTL:\n+\tfcode = BUILT_IN_SQRTF;\n+\tbreak;\n+      case BUILT_IN_SIN:\n+      case BUILT_IN_SINF:\n+      case BUILT_IN_SINL:\n+\tfcode = BUILT_IN_SINF;\n+\tbreak;\n+      case BUILT_IN_COS:\n+      case BUILT_IN_COSF:\n+      case BUILT_IN_COSL:\n+\tfcode = BUILT_IN_COSF;\n+\tbreak;\n+      case BUILT_IN_EXP:\n+      case BUILT_IN_EXPF:\n+      case BUILT_IN_EXPL:\n+\tfcode = BUILT_IN_EXPF;\n+\tbreak;\n+      case BUILT_IN_FLOOR:\n+      case BUILT_IN_FLOORF:\n+      case BUILT_IN_FLOORL:\n+\tfcode = BUILT_IN_FLOORF;\n+\tbreak;\n+      case BUILT_IN_CEIL:\n+      case BUILT_IN_CEILF:\n+      case BUILT_IN_CEILL:\n+\tfcode = BUILT_IN_CEILF;\n+\tbreak;\n+      case BUILT_IN_TRUNC:\n+      case BUILT_IN_TRUNCF:\n+      case BUILT_IN_TRUNCL:\n+\tfcode = BUILT_IN_TRUNCF;\n+\tbreak;\n+      case BUILT_IN_ROUND:\n+      case BUILT_IN_ROUNDF:\n+      case BUILT_IN_ROUNDL:\n+\tfcode = BUILT_IN_ROUNDF;\n+\tbreak;\n+      case BUILT_IN_NEARBYINT:\n+      case BUILT_IN_NEARBYINTF:\n+      case BUILT_IN_NEARBYINTL:\n+\tfcode = BUILT_IN_NEARBYINTF;\n+\tbreak;\n+      default:\n+\tabort ();\n+      }\n+  else if (TYPE_MODE (type) == TYPE_MODE (long_double_type_node))\n+    switch (fn)\n+      {\n+      case BUILT_IN_SQRT:\n+      case BUILT_IN_SQRTF:\n+      case BUILT_IN_SQRTL:\n+\tfcode = BUILT_IN_SQRTL;\n+\tbreak;\n+      case BUILT_IN_SIN:\n+      case BUILT_IN_SINF:\n+      case BUILT_IN_SINL:\n+\tfcode = BUILT_IN_SINL;\n+\tbreak;\n+      case BUILT_IN_COS:\n+      case BUILT_IN_COSF:\n+      case BUILT_IN_COSL:\n+\tfcode = BUILT_IN_COSL;\n+\tbreak;\n+      case BUILT_IN_EXP:\n+      case BUILT_IN_EXPF:\n+      case BUILT_IN_EXPL:\n+\tfcode = BUILT_IN_EXPL;\n+\tbreak;\n+      case BUILT_IN_FLOOR:\n+      case BUILT_IN_FLOORF:\n+      case BUILT_IN_FLOORL:\n+\tfcode = BUILT_IN_FLOORL;\n+\tbreak;\n+      case BUILT_IN_CEIL:\n+      case BUILT_IN_CEILF:\n+      case BUILT_IN_CEILL:\n+\tfcode = BUILT_IN_CEILL;\n+\tbreak;\n+      case BUILT_IN_TRUNC:\n+      case BUILT_IN_TRUNCF:\n+      case BUILT_IN_TRUNCL:\n+\tfcode = BUILT_IN_TRUNCL;\n+\tbreak;\n+      case BUILT_IN_ROUND:\n+      case BUILT_IN_ROUNDF:\n+      case BUILT_IN_ROUNDL:\n+\tfcode = BUILT_IN_ROUNDL;\n+\tbreak;\n+      case BUILT_IN_NEARBYINT:\n+      case BUILT_IN_NEARBYINTF:\n+      case BUILT_IN_NEARBYINTL:\n+\tfcode = BUILT_IN_NEARBYINTL;\n+\tbreak;\n+      default:\n+\tabort ();\n+      }\n+  return implicit_built_in_decls[fcode];\n+}\n+\n /* Expand a call to one of the builtin math functions (sin, cos, or sqrt).\n    Return 0 if a normal call should be emitted rather than expanding the\n    function in-line.  EXP is the expression that is a call to the builtin\n@@ -1756,7 +1925,7 @@ expand_builtin_strstr (arglist, target, mode)\n       if (p2[1] != '\\0')\n \treturn 0;\n \n-      fn = built_in_decls[BUILT_IN_STRCHR];\n+      fn = implicit_built_in_decls[BUILT_IN_STRCHR];\n       if (!fn)\n \treturn 0;\n \n@@ -1860,7 +2029,7 @@ expand_builtin_strrchr (arglist, target, mode)\n       if (! integer_zerop (s2))\n \treturn 0;\n \n-      fn = built_in_decls[BUILT_IN_STRCHR];\n+      fn = implicit_built_in_decls[BUILT_IN_STRCHR];\n       if (!fn)\n \treturn 0;\n \n@@ -1918,7 +2087,7 @@ expand_builtin_strpbrk (arglist, target, mode)\n       if (p2[1] != '\\0')\n \treturn 0;  /* Really call strpbrk.  */\n \n-      fn = built_in_decls[BUILT_IN_STRCHR];\n+      fn = implicit_built_in_decls[BUILT_IN_STRCHR];\n       if (!fn)\n \treturn 0;\n \n@@ -2057,7 +2226,7 @@ expand_builtin_strcpy (exp, target, mode)\n   if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n \n-  fn = built_in_decls[BUILT_IN_MEMCPY];\n+  fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n   if (!fn)\n     return 0;\n \n@@ -2159,7 +2328,7 @@ expand_builtin_strncpy (arglist, target, mode)\n \t}\n \n       /* OK transform into builtin memcpy.  */\n-      fn = built_in_decls[BUILT_IN_MEMCPY];\n+      fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n       if (!fn)\n \treturn 0;\n       return expand_expr (build_function_call_expr (fn, arglist),\n@@ -2575,7 +2744,7 @@ expand_builtin_strcmp (exp, target, mode)\n   if (TREE_SIDE_EFFECTS (len))\n     return 0;\n \n-  fn = built_in_decls[BUILT_IN_MEMCMP];\n+  fn = implicit_built_in_decls[BUILT_IN_MEMCMP];\n   if (!fn)\n     return 0;\n \n@@ -2669,7 +2838,7 @@ expand_builtin_strncmp (exp, target, mode)\n   if (!len)\n     return 0;\n \n-  fn = built_in_decls[BUILT_IN_MEMCMP];\n+  fn = implicit_built_in_decls[BUILT_IN_MEMCMP];\n   if (!fn)\n     return 0;\n \n@@ -2750,7 +2919,7 @@ expand_builtin_strncat (arglist, target, mode)\n \t{\n \t  tree newarglist\n \t    = tree_cons (NULL_TREE, dst, build_tree_list (NULL_TREE, src));\n-\t  tree fn = built_in_decls[BUILT_IN_STRCAT];\n+\t  tree fn = implicit_built_in_decls[BUILT_IN_STRCAT];\n \n \t  /* If the replacement _DECL isn't initialized, don't do the\n \t     transformation.  */\n@@ -2838,7 +3007,7 @@ expand_builtin_strcspn (arglist, target, mode)\n       if (p2 && *p2 == '\\0')\n \t{\n \t  tree newarglist = build_tree_list (NULL_TREE, s1),\n-\t    fn = built_in_decls[BUILT_IN_STRLEN];\n+\t    fn = implicit_built_in_decls[BUILT_IN_STRLEN];\n \n \t  /* If the replacement _DECL isn't initialized, don't do the\n \t     transformation.  */\n@@ -3445,10 +3614,10 @@ expand_builtin_fputs (arglist, ignore, unlocked)\n      int unlocked;\n {\n   tree len, fn;\n-  tree fn_fputc = unlocked ? built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n-    : built_in_decls[BUILT_IN_FPUTC];\n-  tree fn_fwrite = unlocked ? built_in_decls[BUILT_IN_FWRITE_UNLOCKED]\n-    : built_in_decls[BUILT_IN_FWRITE];\n+  tree fn_fputc = unlocked ? implicit_built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n+    : implicit_built_in_decls[BUILT_IN_FPUTC];\n+  tree fn_fwrite = unlocked ? implicit_built_in_decls[BUILT_IN_FWRITE_UNLOCKED]\n+    : implicit_built_in_decls[BUILT_IN_FWRITE];\n \n   /* If the return value is used, or the replacement _DECL isn't\n      initialized, don't do the transformation.  */"}, {"sha": "23a69df8b67af8547b858387535829f0b9873639", "filename": "gcc/builtins.def", "status": "modified", "additions": 112, "deletions": 98, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -22,7 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Before including this file, you should define a macro:\n \n      DEF_BUILTIN (ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P,\n-                  FALLBACK_P, NONANSI_P, ATTRS)\n+                  FALLBACK_P, NONANSI_P, ATTRS, IMPLICIT)\n \n    This macro will be called once for each builtin function.  The\n    ENUM will be of type `enum built_in_function', and will indicate\n@@ -53,15 +53,21 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    exist when compiling in ANSI conformant mode.\n \n    ATTRs is an attribute list as defined in builtin-attrs.def that\n-   describes the attributes of this builtin function.  */\n+   describes the attributes of this builtin function.  \n+\n+   IMPLICIT specifies condition when the builtin can be produced by\n+   compiler.  For instance C90 reserves floorf function, but does not\n+   define it's meaning.  When user uses floorf we may assume that the\n+   floorf has the meaning we expect, but we can't produce floorf by\n+   simplifing floor((double)float) since runtime don't need to implement it.  */\n    \n /* A GCC builtin (like __builtin_saveregs) is provided by the\n    compiler, but does not correspond to a function in the standard\n    library.  */\n #undef DEF_GCC_BUILTIN\n #define DEF_GCC_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,\t\\\n-               false, false, false, ATTRS)\n+               false, false, false, ATTRS, true)\n \n \n /* A fallback builtin is a builtin (like __builtin_puts) that falls\n@@ -71,7 +77,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_FALLBACK_BUILTIN\t\t\t\t\n #define DEF_FALLBACK_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       false, true, false, ATTRS)\n+\t       false, true, false, ATTRS, true)\n \n /* Like DEF_FALLBACK_BUILTIN, except that the function is not one that\n    is specified by ANSI/ISO C.  So, when we're being fully conformant\n@@ -80,7 +86,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_EXT_FALLBACK_BUILTIN\n #define DEF_EXT_FALLBACK_BUILTIN(ENUM, NAME, TYPE)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       false, true, true, ATTR_NOTHROW_LIST)\n+\t       false, true, true, ATTR_NOTHROW_LIST, true)\n \n /* A library builtin (like __builtin_strchr) is a builtin equivalent\n    of an ANSI/ISO standard library function.  In addition to the\n@@ -91,14 +97,14 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_LIB_BUILTIN\t\t\t\t\t\n #define DEF_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, false, ATTRS)\n+\t       true, true, false, ATTRS, true)\n \n /* Like DEF_LIB_BUILTIN, except that a call to the builtin should\n    never fall back to the library version.  */\n #undef DEF_LIB_ALWAYS_BUILTIN\t\t\t\t\n #define DEF_LIB_ALWAYS_BUILTIN(ENUM, NAME, TYPE)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-    \t       true, false, true, ATTR_CONST_NOTHROW_LIST)\n+    \t       true, false, true, ATTR_CONST_NOTHROW_LIST, true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is not one that is\n    specified by ANSI/ISO C.  So, when we're being fully conformant we\n@@ -107,21 +113,29 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_EXT_LIB_BUILTIN\t\t\t\t\n #define DEF_EXT_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-   \t       true, true, true, ATTRS)\n+   \t       true, true, true, ATTRS, false)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C99 or above.  */\n #undef DEF_C99_BUILTIN\t\t\t\t\t\n #define DEF_C99_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-   \t       true, true, !flag_isoc99, ATTRS)\n+   \t       true, true, !flag_isoc99, ATTRS, TARGET_C99_FUNCTIONS)\n+\n+/* Builtin that is specified by C99 and C90 reserve the name for future use.\n+   We can still recognize the builtin in C90 mode but we can't produce it\n+   implicitly.  */\n+#undef DEF_C99_C90RES_BUILTIN\t\t\t\t\t\n+#define DEF_C99_C90RES_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+   \t       true, true, !flag_isoc99, ATTRS, TARGET_C99_FUNCTIONS)\n \n /* Like DEF_LIB_BUILTIN, except that the function is expanded in the\n    front-end.  */\n #undef DEF_FRONT_END_LIB_BUILTIN\t\t\t\n #define DEF_FRONT_END_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,\t\\\n-\t       true, true, false, ATTRS)\n+\t       true, true, false, ATTRS, true)\n \n /* Like DEF_FRONT_END_LIB_BUILTIN, except that the function is not one\n    that is specified by ANSI/ISO C.  So, when we're being fully\n@@ -130,13 +144,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_EXT_FRONT_END_LIB_BUILTIN\t\t\t\n #define DEF_EXT_FRONT_END_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,\t\\\n-\t       true, true, true, ATTRS)\n+\t       true, true, true, ATTRS, true)\n \n /* A built-in that is not currently used.  */\n #undef DEF_UNUSED_BUILTIN\t\t\t\t\t\n #define DEF_UNUSED_BUILTIN(X)\t\t\t\t\t\\\n   DEF_BUILTIN (X, (const char *) NULL, NOT_BUILT_IN, BT_LAST,\t\\\n-\t       BT_LAST, false, false, false, ATTR_NOTHROW_LIST)\n+\t       BT_LAST, false, false, false, ATTR_NOTHROW_LIST, false)\n \n /* If SMALL_STACK is defined, then `alloca' is only defined in its\n    `__builtin' form.  */\n@@ -173,27 +187,27 @@ DEF_LIB_BUILTIN(BUILT_IN_FLOOR,\n                 \"__builtin_floor\",\n                 BT_FN_DOUBLE_DOUBLE,\n \t\tATTR_CONST_NOTHROW_LIST)\n-DEF_LIB_BUILTIN(BUILT_IN_FLOORF,\n-                \"__builtin_floorf\",\n-                BT_FN_FLOAT_FLOAT,\n-\t\tATTR_CONST_NOTHROW_LIST)\n-DEF_LIB_BUILTIN(BUILT_IN_FLOORL,\n-                \"__builtin_floorl\",\n-                BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n-\t\tATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_FLOORF,\n+\t\t       \"__builtin_floorf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_FLOORL,\n+\t\t       \"__builtin_floorl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       ATTR_CONST_NOTHROW_LIST)\n \n DEF_LIB_BUILTIN(BUILT_IN_CEIL,\n                 \"__builtin_ceil\",\n                 BT_FN_DOUBLE_DOUBLE,\n \t\tATTR_CONST_NOTHROW_LIST)\n-DEF_LIB_BUILTIN(BUILT_IN_CEILF,\n-                \"__builtin_ceilf\",\n-                BT_FN_FLOAT_FLOAT,\n-\t\tATTR_CONST_NOTHROW_LIST)\n-DEF_LIB_BUILTIN(BUILT_IN_CEILL,\n-\t\t\"__builtin_ceill\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n-\t\tATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_CEILF,\n+\t\t       \"__builtin_ceilf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_CEILL,\n+\t\t       \"__builtin_ceill\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       ATTR_CONST_NOTHROW_LIST)\n \n DEF_C99_BUILTIN(BUILT_IN_ROUND,\n \t\t\"__builtin_round\",\n@@ -295,14 +309,14 @@ DEF_BUILTIN (BUILT_IN_BZERO,\n \t     BT_FN_VOID_PTR_SIZE, \n \t     BT_FN_VOID_VAR,\n \t     true, true, true,\n-\t     ATTR_NOTHROW_LIST)\n+\t     ATTR_NOTHROW_LIST, false)\n DEF_BUILTIN (BUILT_IN_BCMP,\n \t     \"__builtin_bcmp\",\n \t     BUILT_IN_NORMAL,\n \t     BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n \t     BT_FN_INT_VAR,\n \t     true, true, true,\n-\t     ATTR_PURE_NOTHROW_LIST)\n+\t     ATTR_PURE_NOTHROW_LIST, false)\n \n DEF_EXT_LIB_BUILTIN(BUILT_IN_FFS,\n \t\t    \"__builtin_ffs\",\n@@ -414,68 +428,68 @@ DEF_LIB_BUILTIN(BUILT_IN_LOG,\n \t\t\t\t: (flag_unsafe_math_optimizations\n \t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n-DEF_LIB_BUILTIN(BUILT_IN_SQRTF,\n-\t\t\"__builtin_sqrtf\",\n-\t\tBT_FN_FLOAT_FLOAT,\n-\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n-\t\t\t\t: (flag_unsafe_math_optimizations\n-\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n-DEF_LIB_BUILTIN(BUILT_IN_SINF,\n-\t\t\"__builtin_sinf\",\n-\t\tBT_FN_FLOAT_FLOAT,\n-\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n-DEF_LIB_BUILTIN(BUILT_IN_COSF,\n-\t\t\"__builtin_cosf\",\n-\t\tBT_FN_FLOAT_FLOAT,\n-\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n-DEF_LIB_BUILTIN(BUILT_IN_EXPF,\n-\t\t\"__builtin_expf\",\n-\t\tBT_FN_FLOAT_FLOAT,\n-\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n-\t\t\t\t: (flag_unsafe_math_optimizations\n-\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n-DEF_LIB_BUILTIN(BUILT_IN_LOGF,\n-\t\t\"__builtin_logf\",\n-\t\tBT_FN_FLOAT_FLOAT,\n-\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n-\t\t\t\t: (flag_unsafe_math_optimizations\n-\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n-DEF_LIB_BUILTIN(BUILT_IN_SQRTL,\n-\t\t\"__builtin_sqrtl\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n-\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n-\t\t\t\t: (flag_unsafe_math_optimizations\n-\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n-DEF_LIB_BUILTIN(BUILT_IN_SINL,\n-\t\t\"__builtin_sinl\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n-\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n-DEF_LIB_BUILTIN(BUILT_IN_COSL,\n-\t\t\"__builtin_cosl\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n-\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n-DEF_LIB_BUILTIN(BUILT_IN_EXPL,\n-\t\t\"__builtin_expl\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n-\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n-\t\t\t\t: (flag_unsafe_math_optimizations\n-\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n-DEF_LIB_BUILTIN(BUILT_IN_LOGL,\n-\t\t\"__builtin_logl\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n-\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n-\t\t\t\t: (flag_unsafe_math_optimizations\n-\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n-\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_SQRTF,\n+\t\t       \"__builtin_sqrtf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_SINF,\n+\t\t       \"__builtin_sinf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       flag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t\t      : ATTR_PURE_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_COSF,\n+\t\t       \"__builtin_cosf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       flag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t\t      : ATTR_PURE_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_EXPF,\n+\t\t       \"__builtin_expf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_LOGF,\n+\t\t       \"__builtin_logf\",\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_SQRTL,\n+\t\t       \"__builtin_sqrtl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_SINL,\n+\t\t       \"__builtin_sinl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t\t      : ATTR_PURE_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_COSL,\n+\t\t       \"__builtin_cosl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t\t      : ATTR_PURE_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_EXPL,\n+\t\t       \"__builtin_expl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_LOGL,\n+\t\t       \"__builtin_logl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n \n DEF_GCC_BUILTIN(BUILT_IN_INF,\n \t\t\"__builtin_inf\",\n@@ -616,7 +630,7 @@ DEF_BUILTIN (BUILT_IN_FPUTS,\n \t     BUILT_IN_NORMAL,\n \t     BT_FN_INT_CONST_STRING_PTR,\n \t     BT_FN_INT_VAR,\n-\t     true, true, false, ATTR_NOTHROW_LIST)\n+\t     true, true, false, ATTR_NOTHROW_LIST, true)\n DEF_FALLBACK_BUILTIN(BUILT_IN_FWRITE,\n \t\t     \"__builtin_fwrite\",\n \t\t     BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n@@ -650,7 +664,7 @@ DEF_BUILTIN (BUILT_IN_FPUTS_UNLOCKED,\n \t     BUILT_IN_NORMAL,\n \t     BT_FN_INT_CONST_STRING_PTR,\n \t     BT_FN_INT_VAR,\n-\t     true, true, true, ATTR_NOTHROW_LIST)\n+\t     true, true, true, ATTR_NOTHROW_LIST, true)\n DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FWRITE_UNLOCKED,\n \t\t\t \"__builtin_fwrite_unlocked\",\n \t\t\t BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR)\n@@ -755,29 +769,29 @@ DEF_BUILTIN (BUILT_IN_ABORT,\n \t     BT_FN_VOID,\n \t     BT_FN_VOID,\n \t     1, 0, 0,\n-\t     ATTR_NORETURN_NOTHROW_LIST)\n+\t     ATTR_NORETURN_NOTHROW_LIST, true)\n \n DEF_BUILTIN (BUILT_IN_EXIT,\n \t     \"__builtin_exit\",\n \t     NOT_BUILT_IN,\n \t     BT_FN_VOID_INT,\n \t     BT_FN_VOID_INT,\n \t     1, 0, 0,\n-\t     ATTR_NORETURN_NOTHROW_LIST)\n+\t     ATTR_NORETURN_NOTHROW_LIST, true)\n \n DEF_BUILTIN (BUILT_IN__EXIT,\n \t     \"__builtin__exit\",\n \t     NOT_BUILT_IN,\n \t     BT_FN_VOID_INT,\n \t     BT_FN_VOID_INT,\n \t     1, 0, 1,\n-\t     ATTR_NORETURN_NOTHROW_LIST)\n+\t     ATTR_NORETURN_NOTHROW_LIST, false)\n \n DEF_BUILTIN (BUILT_IN__EXIT2,\n \t     \"__builtin__Exit\",\n \t     NOT_BUILT_IN,\n \t     BT_FN_VOID_INT,\n \t     BT_FN_VOID_INT,\n \t     1, 0, !flag_isoc99,\n-\t     ATTR_NORETURN_NOTHROW_LIST)\n+\t     ATTR_NORETURN_NOTHROW_LIST, false)\n "}, {"sha": "cf7fb0706e5478a05abcfc12dd673cb0dececf48", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -3549,7 +3549,7 @@ c_common_nodes_and_builtins ()\n     c_init_attributes ();\n \n #define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE,\t\t\t\\\n-\t\t    BOTH_P, FALLBACK_P, NONANSI_P, ATTRS)\t\t\\\n+\t\t    BOTH_P, FALLBACK_P, NONANSI_P, ATTRS, IMPLICIT)\t\\\n   if (NAME)\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       tree decl;\t\t\t\t\t\t\t\\\n@@ -3576,6 +3576,8 @@ c_common_nodes_and_builtins ()\n \t\t\t\t   built_in_attributes[(int) ATTRS]);\t\\\n \t\t\t\t\t\t\t\t\t\\\n       built_in_decls[(int) ENUM] = decl;\t\t\t\t\\\n+      if (IMPLICIT)\t\t\t\t\t\t\t\\\n+        implicit_built_in_decls[(int) ENUM] = decl;\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n@@ -4507,9 +4509,9 @@ c_expand_builtin_printf (arglist, target, tmode, modifier, ignore, unlocked)\n      int unlocked;\n {\n   tree fn_putchar = unlocked ?\n-    built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED] : built_in_decls[BUILT_IN_PUTCHAR];\n+    implicit_built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED] : implicit_built_in_decls[BUILT_IN_PUTCHAR];\n   tree fn_puts = unlocked ?\n-    built_in_decls[BUILT_IN_PUTS_UNLOCKED] : built_in_decls[BUILT_IN_PUTS];\n+    implicit_built_in_decls[BUILT_IN_PUTS_UNLOCKED] : implicit_built_in_decls[BUILT_IN_PUTS];\n   tree fn, format_arg, stripped_string;\n \n   /* If the return value is used, or the replacement _DECL isn't\n@@ -4611,9 +4613,9 @@ c_expand_builtin_fprintf (arglist, target, tmode, modifier, ignore, unlocked)\n      int unlocked;\n {\n   tree fn_fputc = unlocked ?\n-    built_in_decls[BUILT_IN_FPUTC_UNLOCKED] : built_in_decls[BUILT_IN_FPUTC];\n+    implicit_built_in_decls[BUILT_IN_FPUTC_UNLOCKED] : implicit_built_in_decls[BUILT_IN_FPUTC];\n   tree fn_fputs = unlocked ?\n-    built_in_decls[BUILT_IN_FPUTS_UNLOCKED] : built_in_decls[BUILT_IN_FPUTS];\n+    implicit_built_in_decls[BUILT_IN_FPUTS_UNLOCKED] : implicit_built_in_decls[BUILT_IN_FPUTS];\n   tree fn, format_arg, stripped_string;\n \n   /* If the return value is used, or the replacement _DECL isn't"}, {"sha": "948ae4956872fa21aac9ed91b91b326e5da5847b", "filename": "gcc/config/linux.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -110,3 +110,10 @@ Boston, MA 02111-1307, USA.  */\n \n /* Define this so we can compile MS code for use with WINE.  */\n #define HANDLE_PRAGMA_PACK_PUSH_POP\n+\n+\n+/* Determine whether the the entire c99 runtime\n+   is present in the runtime library.  */\n+#ifndef USE_GNULIBC_1\n+#define TARGET_C99_FUNCTIONS 1\n+#endif"}, {"sha": "2dc9d749858f229dec40b8bd3ef6bfc560464cd4", "filename": "gcc/defaults.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -638,4 +638,10 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define EXTRA_CONSTRAINT_STR(OP, C,STR) EXTRA_CONSTRAINT (OP, C)\n #endif\n \n+/* Determine whether the the entire c99 runtime\n+   is present in the runtime library.  */\n+#ifndef TARGET_C99_FUNCTIONS\n+#define TARGET_C99_FUNCTIONS 0\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "e66f768663425efb2bae0c6720f4a1dd00f53e33", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -4779,6 +4779,15 @@ Define this macro if GCC should generate calls to the ISO C\n (and System V) library functions @code{memcpy}, @code{memmove} and\n @code{memset} rather than the BSD functions @code{bcopy} and @code{bzero}.\n \n+@findex TARGET_C99_FUNCTIONS\n+@cindex C99 math functions, implicit usage\n+@item TARGET_C99_FUNCTIONS\n+When this macro is nonzero, GCC will implicitly optimize @code{sin} calls into\n+@code{sinf} and similary for other functions defined by C99 standard.  The\n+default is nonzero that should be proper value for most modern systems, however\n+number of existing systems lacks support for these functions in the runtime so\n+they needs this macro to be redefined to 0.\n+\n @findex LIBGCC_NEEDS_DOUBLE\n @item LIBGCC_NEEDS_DOUBLE\n Define this macro if @code{float} arguments cannot be passed to library"}, {"sha": "1e388d887e1c2386dcc3972b6496c7d4585b112a", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -70,7 +70,7 @@ static tree sqrt_builtin (tree, tree);\n \n static tree java_build_function_call_expr (tree, tree);\n static void define_builtin (enum built_in_function, const char *,\n-\t\t\t    enum built_in_class, tree, int);\n+\t\t\t    enum built_in_class, tree, int, int);\n static tree define_builtin_type (int, int, int, int, int);\n \n \f\n@@ -189,7 +189,8 @@ define_builtin (enum built_in_function val,\n \t\tconst char *name,\n \t\tenum built_in_class class,\n \t\ttree type,\n-\t\tint fallback_p)\n+\t\tint fallback_p,\n+\t\tint implicit)\n {\n   tree decl;\n \n@@ -209,6 +210,8 @@ define_builtin (enum built_in_function val,\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = val;\n   built_in_decls[val] = decl;\n+  if (implicit)\n+    implicit_built_in_decls[val] = decl;\n }\n \n /* Compute the type for a builtin.  */\n@@ -306,8 +309,8 @@ initialize_builtins (void)\n #include \"builtin-types.def\"\n \n #define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, \\\n-                    FALLBACK_P, NONANSI_P, ATTRS) \\\n-  define_builtin (ENUM, NAME, CLASS, builtin_types[TYPE], FALLBACK_P);\n+                    FALLBACK_P, NONANSI_P, ATTRS, IMPLICIT) \\\n+  define_builtin (ENUM, NAME, CLASS, builtin_types[TYPE], FALLBACK_P, IMPLICIT);\n #include \"builtins.def\"\n }\n "}, {"sha": "626c49d44cf26163e2b48b8eb8af0d424304359c", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272f51a36f0274920b806cca375dca00ce7c51c8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=272f51a36f0274920b806cca375dca00ce7c51c8", "patch": "@@ -84,7 +84,7 @@ extern const char *const built_in_class_names[4];\n /* Codes that identify the various built in functions\n    so that expand_call can identify them quickly.  */\n \n-#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT) ENUM,\n+#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT, IM) ENUM,\n enum built_in_function\n {\n #include \"builtins.def\"\n@@ -99,6 +99,7 @@ extern const char *const built_in_names[(int) END_BUILTINS];\n \n /* An array of _DECL trees for the above.  */\n extern GTY(()) tree built_in_decls[(int) END_BUILTINS];\n+extern GTY(()) tree implicit_built_in_decls[(int) END_BUILTINS];\n \f\n /* The definition of tree nodes fills the next several pages.  */\n \n@@ -2928,6 +2929,8 @@ extern tree invert_truthvalue\tPARAMS ((tree));\n extern tree fold_builtin\t\t\t\tPARAMS ((tree));\n extern enum built_in_function builtin_mathfn_code\tPARAMS ((tree));\n extern tree build_function_call_expr\t\t\tPARAMS ((tree, tree));\n+extern tree mathfn_built_in\t\t\t\tPARAMS ((tree, enum built_in_function fn));\n+extern tree strip_float_extensions\t\t\tPARAMS ((tree));\n \n /* In convert.c */\n extern tree strip_float_extensions\t\t\tPARAMS ((tree));"}]}