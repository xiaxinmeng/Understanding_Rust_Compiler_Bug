{"sha": "1c0d49b9ce9ab011fa77d4eac689fa1a038123ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwZDQ5YjljZTlhYjAxMWZhNzdkNGVhYzY4OWZhMWEwMzgxMjNlZg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-20T01:50:13Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-20T01:50:13Z"}, "message": "rs6000: Support [u]mul<mode>3_highpart for vector\n\nThis patch is to make Power10 newly introduced vector\nmultiply high (part) instructions exploited in vectorized\nloops, it renames existing define_insns as standard pattern\nnames.  It depends on that patch which enables vectorizer\nto recog mul_highpart.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/vsx.md (mulhs_<mode>): Rename to...\n\t(smul<mode>3_highpart): ... this.\n\t(mulhu_<mode>): Rename to...\n\t(umul<mode>3_highpart): ... this.\n\t* config/rs6000/rs6000-builtin.def (MULHS_V2DI, MULHS_V4SI,\n\tMULHU_V2DI, MULHU_V4SI): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/mul-vectorize-3.c: New test.\n\t* gcc.target/powerpc/mul-vectorize-4.c: New test.", "tree": {"sha": "72a56c5504a35a7a8293552024dad92dd28d9e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72a56c5504a35a7a8293552024dad92dd28d9e9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d27560770818c514ad1ad6683f89e1e1bcd0ec"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "9dbf16f48c40afcb65aafb99d25ef1073caac06d", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=1c0d49b9ce9ab011fa77d4eac689fa1a038123ef", "patch": "@@ -3035,10 +3035,10 @@ BU_P10V_AV_2 (MODS_V2DI, \"vmodsd\", CONST, modv2di3)\n BU_P10V_AV_2 (MODS_V4SI, \"vmodsw\", CONST, modv4si3)\n BU_P10V_AV_2 (MODU_V2DI, \"vmodud\", CONST, umodv2di3)\n BU_P10V_AV_2 (MODU_V4SI, \"vmoduw\", CONST, umodv4si3)\n-BU_P10V_AV_2 (MULHS_V2DI, \"vmulhsd\", CONST, mulhs_v2di)\n-BU_P10V_AV_2 (MULHS_V4SI, \"vmulhsw\", CONST, mulhs_v4si)\n-BU_P10V_AV_2 (MULHU_V2DI, \"vmulhud\", CONST, mulhu_v2di)\n-BU_P10V_AV_2 (MULHU_V4SI, \"vmulhuw\", CONST, mulhu_v4si)\n+BU_P10V_AV_2 (MULHS_V2DI, \"vmulhsd\", CONST, smulv2di3_highpart)\n+BU_P10V_AV_2 (MULHS_V4SI, \"vmulhsw\", CONST, smulv4si3_highpart)\n+BU_P10V_AV_2 (MULHU_V2DI, \"vmulhud\", CONST, umulv2di3_highpart)\n+BU_P10V_AV_2 (MULHU_V4SI, \"vmulhuw\", CONST, umulv4si3_highpart)\n BU_P10V_AV_2 (MULLD_V2DI, \"vmulld\", CONST, mulv2di3)\n \n BU_P10V_VSX_1 (VXXSPLTIW_V4SI, \"vxxspltiw_v4si\", CONST, xxspltiw_v4si)"}, {"sha": "6f6fc0bd83503a6fe09f5518ea363587368a7447", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=1c0d49b9ce9ab011fa77d4eac689fa1a038123ef", "patch": "@@ -6351,7 +6351,7 @@\n   [(set_attr \"type\" \"vecdiv\")\n    (set_attr \"size\" \"<bits>\")])\n \n-(define_insn \"mulhs_<mode>\"\n+(define_insn \"smul<mode>3_highpart\"\n   [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n \t(mult:VIlong (ashiftrt\n \t\t       (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n@@ -6363,7 +6363,7 @@\n   \"vmulhs<wd> %0,%1,%2\"\n   [(set_attr \"type\" \"veccomplex\")])\n \n-(define_insn \"mulhu_<mode>\"\n+(define_insn \"umul<mode>3_highpart\"\n   [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n \t(us_mult:VIlong (ashiftrt\n \t\t\t  (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")"}, {"sha": "2c89c0faec285f895ec88a4122145ff82fd9e2d6", "filename": "gcc/testsuite/gcc.target/powerpc/mul-vectorize-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-3.c?ref=1c0d49b9ce9ab011fa77d4eac689fa1a038123ef", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test vectorizer can exploit ISA 3.1 instructions Vector Multiply\n+   High Signed/Unsigned Word for both signed and unsigned int high part\n+   multiplication.  */\n+\n+#define N 128\n+\n+extern signed int si_a[N], si_b[N], si_c[N];\n+extern unsigned int ui_a[N], ui_b[N], ui_c[N];\n+\n+typedef signed long long sLL;\n+typedef unsigned long long uLL;\n+\n+__attribute__ ((noipa)) void\n+test_si ()\n+{\n+  for (int i = 0; i < N; i++)\n+    si_c[i] = ((sLL) si_a[i] * (sLL) si_b[i]) >> 32;\n+}\n+\n+__attribute__ ((noipa)) void\n+test_ui ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ui_c[i] = ((uLL) ui_a[i] * (uLL) ui_b[i]) >> 32;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvmulhsw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmulhuw\\M} 1 } } */"}, {"sha": "265e7588bb6e2d7f158e5ce246e008d3845225cc", "filename": "gcc/testsuite/gcc.target/powerpc/mul-vectorize-4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0d49b9ce9ab011fa77d4eac689fa1a038123ef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-4.c?ref=1c0d49b9ce9ab011fa77d4eac689fa1a038123ef", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test vectorizer can exploit ISA 3.1 instructions Vector Multiply\n+   High Signed/Unsigned Doubleword for both signed and unsigned long\n+   long high part multiplication.  */\n+\n+#define N 128\n+\n+extern signed long long sll_a[N], sll_b[N], sll_c[N];\n+extern unsigned long long ull_a[N], ull_b[N], ull_c[N];\n+\n+typedef signed __int128 s128;\n+typedef unsigned __int128 u128;\n+\n+__attribute__ ((noipa)) void\n+test_sll ()\n+{\n+  for (int i = 0; i < N; i++)\n+    sll_c[i] = ((s128) sll_a[i] * (s128) sll_b[i]) >> 64;\n+}\n+\n+__attribute__ ((noipa)) void\n+test_ull ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ull_c[i] = ((u128) ull_a[i] * (u128) ull_b[i]) >> 64;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvmulhsd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmulhud\\M} 1 } } */"}]}