{"sha": "06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlZWQ5ZjU4OGZlNmVlZjZmZDE0YWVkOTlkMDBjZGQ4YzcwYjJlNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-06-30T16:24:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-30T16:24:30Z"}, "message": "stl_deque.h (deque<>::insert(iterator, size_type, const value_type&), [...]): Adjust C++11 signatures to take a const_iterator.\n\n2013-06-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_deque.h (deque<>::insert(iterator,\n\tsize_type, const value_type&), deque<>::insert(iterator,\n\tinitializer_list<>), deque<>::insert(iterator, _InputIterator,\n\t_InputIterator)): Adjust C++11 signatures to take a const_iterator.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/debug/deque: Adjust.\n\t* include/debug/vector: Likewise.\n\t* include/profile/deque: Likewise.\n\t* include/profile/vector: Likewise.\n\t* testsuite/23_containers/deque/modifiers/insert/const_iterator.cc:\n\tExtend.\n\t* testsuite/23_containers/vector/bool/modifiers/insert/\n\tconst_iterator.cc: Likewise.\n\t* testsuite/23_containers/vector/modifiers/insert/const_iterator.cc:\n\tLikewise.\n\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r200571", "tree": {"sha": "83347806f74e9a3b4ea1901cf1df2a4ea1238bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83347806f74e9a3b4ea1901cf1df2a4ea1238bfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/comments", "author": null, "committer": null, "parents": [{"sha": "e8f24c86b881dc855159e0812aa4e205efedd059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f24c86b881dc855159e0812aa4e205efedd059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f24c86b881dc855159e0812aa4e205efedd059"}], "stats": {"total": 391, "additions": 312, "deletions": 79}, "files": [{"sha": "14c49db86d24b6e5f7dcb3918a2bd8e636cb1150", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -1,3 +1,39 @@\n+2013-06-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_deque.h (deque<>::insert(iterator,\n+\tsize_type, const value_type&), deque<>::insert(iterator,\n+\tinitializer_list<>), deque<>::insert(iterator, _InputIterator,\n+\t_InputIterator)): Adjust C++11 signatures to take a const_iterator.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/debug/deque: Adjust.\n+\t* include/debug/vector: Likewise.\n+\t* include/profile/deque: Likewise.\n+\t* include/profile/vector: Likewise.\n+\t* testsuite/23_containers/deque/modifiers/insert/const_iterator.cc:\n+\tExtend.\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/\n+\tconst_iterator.cc: Likewise.\n+\t* testsuite/23_containers/vector/modifiers/insert/const_iterator.cc:\n+\tLikewise.\n+\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2013-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/21_strings/basic_string/operations/*: Move inside"}, {"sha": "887ea16ae556578decca7e9d26351bb57470638e", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -881,10 +881,15 @@ template<typename _Alloc>\n #if __cplusplus >= 201103L\n     template<typename _InputIterator,\n \t     typename = std::_RequireInputIter<_InputIterator>>\n-      void\n-      insert(iterator __position,\n+      iterator\n+      insert(const_iterator __position,\n \t     _InputIterator __first, _InputIterator __last)\n-      { _M_insert_dispatch(__position, __first, __last, __false_type()); }\n+      {\n+\tdifference_type __offset = __position - cbegin();\n+\t_M_insert_dispatch(__position._M_const_cast(),\n+\t\t\t   __first, __last, __false_type());\n+\treturn begin() + __offset;\n+      }\n #else\n     template<typename _InputIterator>\n       void\n@@ -896,13 +901,24 @@ template<typename _Alloc>\n       }\n #endif\n \n+#if __cplusplus >= 201103L\n+    iterator\n+    insert(const_iterator __position, size_type __n, const bool& __x)\n+    {\n+      difference_type __offset = __position - cbegin();\n+      _M_fill_insert(__position._M_const_cast(), __n, __x);\n+      return begin() + __offset;\n+    }\n+#else\n     void\n     insert(iterator __position, size_type __n, const bool& __x)\n     { _M_fill_insert(__position, __n, __x); }\n+#endif\n \n #if __cplusplus >= 201103L\n-    void insert(iterator __p, initializer_list<bool> __l)\n-    { this->insert(__p, __l.begin(), __l.end()); }\n+    iterator\n+    insert(const_iterator __p, initializer_list<bool> __l)\n+    { return this->insert(__p, __l.begin(), __l.end()); }\n #endif\n \n     void"}, {"sha": "a4656734469e35563d36b1f33f87a2b66f5aac1b", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -1517,11 +1517,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  initializer_list @a __l into the %deque before the location\n        *  specified by @a __p.  This is known as <em>list insert</em>.\n        */\n-      void\n-      insert(iterator __p, initializer_list<value_type> __l)\n-      { this->insert(__p, __l.begin(), __l.end()); }\n+      iterator\n+      insert(const_iterator __p, initializer_list<value_type> __l)\n+      { return this->insert(__p, __l.begin(), __l.end()); }\n #endif\n \n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Inserts a number of copies of given data into the %deque.\n+       *  @param  __position  A const_iterator into the %deque.\n+       *  @param  __n  Number of elements to be inserted.\n+       *  @param  __x  Data to be inserted.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert a specified number of copies of the given\n+       *  data before the location specified by @a __position.\n+       */\n+      iterator\n+      insert(const_iterator __position, size_type __n, const value_type& __x)\n+      {\n+\tdifference_type __offset = __position - cbegin();\n+\t_M_fill_insert(__position._M_const_cast(), __n, __x);\n+\treturn begin() + __offset;\n+      }\n+#else\n       /**\n        *  @brief  Inserts a number of copies of given data into the %deque.\n        *  @param  __position  An iterator into the %deque.\n@@ -1534,25 +1553,42 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       insert(iterator __position, size_type __n, const value_type& __x)\n       { _M_fill_insert(__position, __n, __x); }\n+#endif\n \n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts a range into the %deque.\n-       *  @param  __position  An iterator into the %deque.\n+       *  @param  __position  A const_iterator into the %deque.\n        *  @param  __first  An input iterator.\n        *  @param  __last   An input iterator.\n+       *  @return  An iterator that points to the inserted data.\n        *\n        *  This function will insert copies of the data in the range\n        *  [__first,__last) into the %deque before the location specified\n        *  by @a __position.  This is known as <em>range insert</em>.\n        */\n-#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n-        void\n-        insert(iterator __position, _InputIterator __first,\n+        iterator\n+        insert(const_iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n-        { _M_insert_dispatch(__position, __first, __last, __false_type()); }\n+        {\n+\t  difference_type __offset = __position - cbegin();\n+\t  _M_insert_dispatch(__position._M_const_cast(),\n+\t\t\t     __first, __last, __false_type());\n+\t  return begin() + __offset;\n+\t}\n #else\n+      /**\n+       *  @brief  Inserts a range into the %deque.\n+       *  @param  __position  An iterator into the %deque.\n+       *  @param  __first  An input iterator.\n+       *  @param  __last   An input iterator.\n+       *\n+       *  This function will insert copies of the data in the range\n+       *  [__first,__last) into the %deque before the location specified\n+       *  by @a __position.  This is known as <em>range insert</em>.\n+       */\n       template<typename _InputIterator>\n         void\n         insert(iterator __position, _InputIterator __first,"}, {"sha": "726693918a3fadc94e5fecf021eb53d48c220417", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -1015,11 +1015,34 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  %vector and if it is frequently used the user should\n        *  consider using std::list.\n        */\n-      void\n-      insert(iterator __position, initializer_list<value_type> __l)\n-      { this->insert(__position, __l.begin(), __l.end()); }\n+      iterator\n+      insert(const_iterator __position, initializer_list<value_type> __l)\n+      { return this->insert(__position, __l.begin(), __l.end()); }\n #endif\n \n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Inserts a number of copies of given data into the %vector.\n+       *  @param  __position  A const_iterator into the %vector.\n+       *  @param  __n  Number of elements to be inserted.\n+       *  @param  __x  Data to be inserted.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert a specified number of copies of\n+       *  the given data before the location specified by @a position.\n+       *\n+       *  Note that this kind of operation could be expensive for a\n+       *  %vector and if it is frequently used the user should\n+       *  consider using std::list.\n+       */\n+      iterator\n+      insert(const_iterator __position, size_type __n, const value_type& __x)\n+      {\n+\tdifference_type __offset = __position - cbegin();\n+\t_M_fill_insert(__position._M_const_cast(), __n, __x);\n+\treturn begin() + __offset;\n+      }\n+#else\n       /**\n        *  @brief  Inserts a number of copies of given data into the %vector.\n        *  @param  __position  An iterator into the %vector.\n@@ -1036,12 +1059,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       insert(iterator __position, size_type __n, const value_type& __x)\n       { _M_fill_insert(__position, __n, __x); }\n+#endif\n \n+#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts a range into the %vector.\n-       *  @param  __position  An iterator into the %vector.\n+       *  @param  __position  A const_iterator into the %vector.\n        *  @param  __first  An input iterator.\n        *  @param  __last   An input iterator.\n+       *  @return  An iterator that points to the inserted data.\n        *\n        *  This function will insert copies of the data in the range\n        *  [__first,__last) into the %vector before the location specified\n@@ -1051,14 +1077,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  %vector and if it is frequently used the user should\n        *  consider using std::list.\n        */\n-#if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n-        void\n-        insert(iterator __position, _InputIterator __first,\n+        iterator\n+        insert(const_iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n-        { _M_insert_dispatch(__position, __first, __last, __false_type()); }\n+        {\n+\t  difference_type __offset = __position - cbegin();\n+\t  _M_insert_dispatch(__position._M_const_cast(),\n+\t\t\t     __first, __last, __false_type());\n+\t  return begin() + __offset;\n+\t}\n #else\n+      /**\n+       *  @brief  Inserts a range into the %vector.\n+       *  @param  __position  An iterator into the %vector.\n+       *  @param  __first  An input iterator.\n+       *  @param  __last   An input iterator.\n+       *\n+       *  This function will insert copies of the data in the range\n+       *  [__first,__last) into the %vector before the location specified\n+       *  by @a pos.\n+       *\n+       *  Note that this kind of operation could be expensive for a\n+       *  %vector and if it is frequently used the user should\n+       *  consider using std::list.\n+       */\n       template<typename _InputIterator>\n         void\n         insert(iterator __position, _InputIterator __first,"}, {"sha": "e5e902dfc7b09e59db141f8a2860630be37f066a", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -411,28 +411,51 @@ namespace __debug\n       insert(const_iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n-      void\n-      insert(iterator __p, initializer_list<value_type> __l)\n+      iterator\n+      insert(const_iterator __position, initializer_list<value_type> __l)\n       {\n-\t_Base::insert(__p, __l);\n+\t__glibcxx_check_insert(__position);\n+\t_Base_iterator __res = _Base::insert(__position.base(), __l);\n \tthis->_M_invalidate_all();\n+\treturn iterator(__res, this);\n       }\n #endif\n \n+#if __cplusplus >= 201103L\n+      iterator\n+      insert(const_iterator __position, size_type __n, const _Tp& __x)\n+      {\n+\t__glibcxx_check_insert(__position);\n+\t_Base_iterator __res = _Base::insert(__position.base(), __n, __x);\n+\tthis->_M_invalidate_all();\n+\treturn iterator(__res, this);\n+      }\n+#else\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \t_Base::insert(__position.base(), __n, __x);\n \tthis->_M_invalidate_all();\n       }\n+#endif\n \n #if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\titerator\n+        insert(const_iterator __position,\n+\t       _InputIterator __first, _InputIterator __last)\n+        {\n+\t  __glibcxx_check_insert_range(__position, __first, __last);\n+\t  _Base_iterator __res = _Base::insert(__position.base(),\n+\t\t\t\t\t       __gnu_debug::__base(__first),\n+\t\t\t\t\t       __gnu_debug::__base(__last));\n+\t  this->_M_invalidate_all();\n+\t  return iterator(__res, this);\n+\t}\n #else\n       template<class _InputIterator>\n-#endif\n         void\n         insert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n@@ -442,6 +465,7 @@ namespace __debug\n \t\t\t\t\t   __gnu_debug::__base(__last));\n \t  this->_M_invalidate_all();\n \t}\n+#endif\n \n       void\n       pop_front()"}, {"sha": "7b28177c2a0a9028f367af4c48046a8120d432db", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -471,11 +471,27 @@ namespace __debug\n         insert(const_iterator __position, _Tp&& __x)\n         { return emplace(__position, std::move(__x)); }\n \n-      void\n-      insert(iterator __position, initializer_list<value_type> __l)\n-      { this->insert(__position, __l.begin(), __l.end()); }\n+      iterator\n+      insert(const_iterator __position, initializer_list<value_type> __l)\n+      { return this->insert(__position, __l.begin(), __l.end()); }\n #endif\n \n+#if __cplusplus >= 201103L\n+      iterator\n+      insert(const_iterator __position, size_type __n, const _Tp& __x)\n+      {\n+\t__glibcxx_check_insert(__position);\n+\tbool __realloc = _M_requires_reallocation(this->size() + __n);\n+\tdifference_type __offset = __position.base() - _Base::cbegin();\n+\t_Base_iterator __res = _Base::insert(__position.base(), __n, __x);\n+\tif (__realloc)\n+\t  this->_M_invalidate_all();\n+\telse\n+\t  this->_M_invalidate_after_nth(__offset);\n+\t_M_update_guaranteed_capacity();\n+\treturn iterator(__res, this);\n+      }\n+#else\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n@@ -489,13 +505,35 @@ namespace __debug\n \t  this->_M_invalidate_after_nth(__offset);\n \t_M_update_guaranteed_capacity();\n       }\n+#endif\n \n #if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+        iterator\n+        insert(const_iterator __position,\n+\t       _InputIterator __first, _InputIterator __last)\n+        {\n+\t  __glibcxx_check_insert_range(__position, __first, __last);\n+\n+\t  /* Hard to guess if invalidation will occur, because __last\n+\t     - __first can't be calculated in all cases, so we just\n+\t     punt here by checking if it did occur. */\n+\t  _Base_iterator __old_begin = _M_base().begin();\n+\t  difference_type __offset = __position.base() - _Base::cbegin();\n+\t  _Base_iterator __res = _Base::insert(__position.base(),\n+\t\t\t\t\t       __gnu_debug::__base(__first),\n+\t\t\t\t\t       __gnu_debug::__base(__last));\n+\n+\t  if (_M_base().begin() != __old_begin)\n+\t    this->_M_invalidate_all();\n+\t  else\n+\t    this->_M_invalidate_after_nth(__offset);\n+\t  _M_update_guaranteed_capacity();\n+\t  return iterator(__res, this);\n+\t}\n #else\n       template<class _InputIterator>\n-#endif\n         void\n         insert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n@@ -516,6 +554,7 @@ namespace __debug\n \t    this->_M_invalidate_after_nth(__offset);\n \t  _M_update_guaranteed_capacity();\n \t}\n+#endif\n \n       iterator\n #if __cplusplus >= 201103L"}, {"sha": "c46618e27e4a1bdde128282059b64995be7eaa70", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -344,31 +344,35 @@ namespace __profile\n       insert(const_iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n-      void\n-      insert(iterator __p, initializer_list<value_type> __l)\n-      {\n-\t_Base::insert(__p, __l);\n-      }\n+      iterator\n+      insert(const_iterator __p, initializer_list<value_type> __l)\n+      { return _Base::insert(__p, __l); }\n #endif\n \n+#if __cplusplus >= 201103L\n+      iterator\n+      insert(const_iterator __position, size_type __n, const _Tp& __x)\n+      { return _Base::insert(__position, __n, __x); }\n+#else\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n-      {\n-\t_Base::insert(__position, __n, __x);\n-      }\n+      { _Base::insert(__position, __n, __x); }\n+#endif\n \n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+        iterator\n+        insert(const_iterator __position,\n+\t       _InputIterator __first, _InputIterator __last)\n+        { return _Base::insert(__position, __first, __last); }\n #else\n       template<typename _InputIterator>\n-#endif\n         void\n         insert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n-        {\n-\t  _Base::insert(__position, __first, __last);\n-\t}\n+        { _Base::insert(__position, __first, __last); }\n+#endif\n \n       void\n       pop_front()"}, {"sha": "3ef04ff0a7c5f5c4ede5c4c4ecbe6666c6520177", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -44,6 +44,9 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::vector<_Tp, _Allocator> _Base;\n \n+      typedef typename _Base::iterator _Base_iterator;\n+      typedef typename _Base::const_iterator _Base_const_iterator;\n+\n #if __cplusplus >= 201103L\n       typedef __gnu_cxx::__alloc_traits<_Allocator>  _Alloc_traits;\n #endif\n@@ -52,9 +55,9 @@ namespace __profile\n       typedef typename _Base::reference             reference;\n       typedef typename _Base::const_reference       const_reference;\n \n-      typedef __iterator_tracker<typename _Base::iterator, vector>\n+      typedef __iterator_tracker<_Base_iterator, vector>\n                                                     iterator;\n-      typedef __iterator_tracker<typename _Base::const_iterator, vector>\n+      typedef __iterator_tracker<_Base_const_iterator, vector>\n \t\t\t\t                    const_iterator;\n \n       typedef typename _Base::size_type             size_type;\n@@ -361,7 +364,7 @@ namespace __profile\n         __profcxx_vector_insert(this, __position.base() - _Base::begin(),\n                                 this->size());\n         size_type __old_size = this->capacity();\n-\ttypename _Base::iterator __res = _Base::insert(__position.base(), __x);\n+\t_Base_iterator __res = _Base::insert(__position.base(), __x);\n         _M_profile_resize(this, __old_size, this->capacity());\n \treturn iterator(__res, this);\n       }\n@@ -370,10 +373,10 @@ namespace __profile\n       iterator\n       insert(const_iterator __position, _Tp&& __x)\n       {\n-        __profcxx_vector_insert(this, __position.base() - _Base::begin(),\n+        __profcxx_vector_insert(this, __position.base() - _Base::cbegin(),\n                                 this->size());\n         size_type __old_size = this->capacity();\n-\ttypename _Base::iterator __res = _Base::insert(__position.base(), __x);\n+\t_Base_iterator __res = _Base::insert(__position.base(), __x);\n         _M_profile_resize(this, __old_size, this->capacity());\n \treturn iterator(__res, this);\n       }\n@@ -382,15 +385,14 @@ namespace __profile\n         iterator\n         emplace(const_iterator __position, _Args&&... __args)\n         {\n-\t  typename _Base::iterator __res\n-\t    = _Base::emplace(__position.base(),\n-\t\t\t     std::forward<_Args>(__args)...);\n+\t  _Base_iterator __res = _Base::emplace(__position.base(),\n+\t\t\t\t\t\tstd::forward<_Args>(__args)...);\n \t  return iterator(__res, this);\n \t}\n \n-      void\n-      insert(iterator __position, initializer_list<value_type> __l)\n-      { this->insert(__position, __l.begin(), __l.end()); }\n+      iterator\n+      insert(const_iterator __position, initializer_list<value_type> __l)\n+      { return this->insert(__position, __l.begin(), __l.end()); }\n #endif\n \n #if __cplusplus >= 201103L\n@@ -404,12 +406,24 @@ namespace __profile\n       void\n       swap(vector& __x)\n #if __cplusplus >= 201103L\n-\t\t\tnoexcept(_Alloc_traits::_S_nothrow_swap())\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n #endif\n       {\n         _Base::swap(__x);\n       }\n \n+#if __cplusplus >= 201103L\n+      iterator\n+      insert(const_iterator __position, size_type __n, const _Tp& __x)\n+      {\n+        __profcxx_vector_insert(this, __position.base() - _Base::cbegin(),\n+                                this->size());\n+        size_type __old_size = this->capacity();\n+        _Base_iterator __res = _Base::insert(__position, __n, __x);\n+        _M_profile_resize(this, __old_size, this->capacity());\n+\treturn iterator(__res, this);\n+      }\n+#else\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n@@ -419,23 +433,35 @@ namespace __profile\n         _Base::insert(__position, __n, __x);\n         _M_profile_resize(this, __old_size, this->capacity());\n       }\n+#endif\n \n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\titerator\n+\tinsert(const_iterator __position,\n+\t       _InputIterator __first, _InputIterator __last)\n+        {\n+\t  __profcxx_vector_insert(this, __position.base() - _Base::cbegin(),\n+\t\t\t\t  this->size());\n+\t  size_type __old_size = this->capacity();\n+\t  _Base_iterator __res = _Base::insert(__position, __first, __last);\n+\t  _M_profile_resize(this, __old_size, this->capacity());\n+\t  return iterator(__res, this);\n+\t}\n #else\n       template<typename _InputIterator>\n+\tvoid\n+\tinsert(iterator __position,\n+\t       _InputIterator __first, _InputIterator __last)\n+        {\n+\t  __profcxx_vector_insert(this, __position.base() - _Base::begin(),\n+\t\t\t\t  this->size());\n+\t  size_type __old_size = this->capacity();\n+\t  _Base::insert(__position, __first, __last);\n+\t  _M_profile_resize(this, __old_size, this->capacity());\n+\t}\n #endif\n-      void\n-      insert(iterator __position,\n-             _InputIterator __first, _InputIterator __last)\n-      {\n-        __profcxx_vector_insert(this, __position.base()-_Base::begin(),\n-                                this->size());\n-        size_type __old_size = this->capacity();\n-        _Base::insert(__position, __first, __last);\n-        _M_profile_resize(this, __old_size, this->capacity());\n-      }\n \n       iterator\n #if __cplusplus >= 201103L\n@@ -444,7 +470,7 @@ namespace __profile\n       erase(iterator __position)\t\n #endif\n       {\n-\ttypename _Base::iterator __res = _Base::erase(__position.base());\n+\t_Base_iterator __res = _Base::erase(__position.base());\n \treturn iterator(__res, this);\n       }\n \n@@ -457,8 +483,7 @@ namespace __profile\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n-\ttypename _Base::iterator __res = _Base::erase(__first.base(),\n-                                                      __last.base());\n+\t_Base_iterator __res = _Base::erase(__first.base(), __last.base());\n \treturn iterator(__res, this);\n       }\n "}, {"sha": "9af2bc908864425af564e23919fd178ae2faa96e", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/insert/const_iterator.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Finsert%2Fconst_iterator.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -24,6 +24,9 @@ void test01()\n {\n   std::deque<int> d1;\n   int n = 0;\n-  d1.insert(d1.cbegin(), n);\n-  d1.insert(d1.cbegin(), 1);\n+  std::deque<int>::iterator it = d1.insert(d1.cbegin(), n);\n+  it = d1.insert(d1.cbegin(), 1);\n+  it = d1.insert(d1.cbegin(), {2, 3});\n+  it = d1.insert(d1.cbegin(), 1, 4);\n+  it = d1.insert(d1.cbegin(), d1.begin(), d1.end());\n }"}, {"sha": "7558ac7d8558c2a06f26a3bb0eaae7baac3441a9", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1724 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1760 }\n \n #include <deque>\n "}, {"sha": "ee6b721d9d39854a63008d0e929c067931109b69", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1657 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1693 }\n \n #include <deque>\n "}, {"sha": "d36964efa4e1c0056c5e8e69552828601315a27f", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1657 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1693 }\n \n #include <deque>\n #include <utility>"}, {"sha": "cda684d29f5b3526eb798602cc12301767b1cfb8", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1808 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1844 }\n \n #include <deque>\n "}, {"sha": "93f3d9287115cc895c3c088e33d6e5b4972261bf", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/modifiers/insert/const_iterator.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2Fconst_iterator.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -23,5 +23,8 @@\n void test01()\n {\n   std::vector<bool> vb1;\n-  vb1.insert(vb1.cbegin(), true);\n+  std::vector<bool>::iterator it = vb1.insert(vb1.cbegin(), true);\n+  it = vb1.insert(vb1.cbegin(), {false, true});\n+  it = vb1.insert(vb1.cbegin(), 1, false);\n+  it = vb1.insert(vb1.cbegin(), vb1.begin(), vb1.end());  \n }"}, {"sha": "b1bf91edc221ee1214611ad87e15fcba57aeef43", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/insert/const_iterator.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fconst_iterator.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -24,6 +24,9 @@ void test01()\n {\n   std::vector<int> v1;\n   int n = 0;\n-  v1.insert(v1.cbegin(), n);\n-  v1.insert(v1.cbegin(), 1);\n+  std::vector<int>::iterator it = v1.insert(v1.cbegin(), n);\n+  it = v1.insert(v1.cbegin(), 1);\n+  it = v1.insert(v1.cbegin(), {2, 3});\n+  it = v1.insert(v1.cbegin(), 1, 4);\n+  it = v1.insert(v1.cbegin(), v1.begin(), v1.end());\n }"}, {"sha": "f7353ab325caead9506de1b47b0e7f9d6cb84a3a", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1264 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1308 }\n \n #include <vector>\n "}, {"sha": "f404a7009da36bbd2b00a59b0fc95b19dd565b98", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1190 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1234 }\n \n #include <vector>\n "}, {"sha": "070295676a543e44cadd9ee8baaf00c8094ab5df", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1190 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1234 }\n \n #include <vector>\n #include <utility>"}, {"sha": "95af05795ce858a78dd6d56e6ce35015c9e533cf", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=06eed9f588fe6eef6fd14aed99d00cdd8c70b2e6", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1305 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1349 }\n \n #include <vector>\n "}]}