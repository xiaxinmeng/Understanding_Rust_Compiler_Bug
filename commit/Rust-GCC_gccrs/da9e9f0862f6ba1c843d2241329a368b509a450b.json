{"sha": "da9e9f0862f6ba1c843d2241329a368b509a450b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5ZTlmMDg2MmY2YmExYzg0M2QyMjQxMzI5YTM2OGI1MDlhNDUwYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-11-27T05:00:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-11-27T05:00:06Z"}, "message": "builtins.c (expand_builtin_strncmp, [...]): New functions.\n\n\t* builtins.c (expand_builtin_strncmp, expand_builtin_strncpy): New\n\tfunctions.\n\t(expand_builtin): Handle BUILT_IN_STRNCPY and BUILT_IN_STRNCMP.\n\n\t* builtins.def (BUILT_IN_STRNCPY, BUILT_IN_STRNCMP): New entries.\n\n\t* c-common.c (c_common_nodes_and_builtins): Declare builtin\n\tstrncpy and strncmp.\n\n\t* extend.texi (strncmp, strncpy): Document new builtins.\n\ntestsuite:\n\t* gcc.c-torture/execute/string-opt-7.c: New test.\n\t* gcc.c-torture/execute/string-opt-8.c: Likewise.\n\nFrom-SVN: r37777", "tree": {"sha": "415bfe1eb788d734afb9ccfea25ebbb397482eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/415bfe1eb788d734afb9ccfea25ebbb397482eff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da9e9f0862f6ba1c843d2241329a368b509a450b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9e9f0862f6ba1c843d2241329a368b509a450b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9e9f0862f6ba1c843d2241329a368b509a450b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9e9f0862f6ba1c843d2241329a368b509a450b/comments", "author": null, "committer": null, "parents": [{"sha": "231db5f4ec6703b6b9a931fa37c0eab18d4d49d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231db5f4ec6703b6b9a931fa37c0eab18d4d49d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231db5f4ec6703b6b9a931fa37c0eab18d4d49d8"}], "stats": {"total": 338, "additions": 332, "deletions": 6}, "files": [{"sha": "44ad079ae6893820d045da43ae297f52bb5c11d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da9e9f0862f6ba1c843d2241329a368b509a450b", "patch": "@@ -1,3 +1,16 @@\n+2000-11-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strncmp, expand_builtin_strncpy): New\n+\tfunctions.\n+\t(expand_builtin): Handle BUILT_IN_STRNCPY and BUILT_IN_STRNCMP.\n+\n+\t* builtins.def (BUILT_IN_STRNCPY, BUILT_IN_STRNCMP): New entries.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Declare builtin\n+\tstrncpy and strncmp.\n+\n+\t* extend.texi (strncmp, strncpy): Document new builtins.\n+\n 2000-11-26  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/elfos.h (ASM_OUTPUT_SECTION_NAME): Use a hash table, not"}, {"sha": "7db9b2622a2632b4277b9d3ae323e9395e91c061", "filename": "gcc/builtins.c", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=da9e9f0862f6ba1c843d2241329a368b509a450b", "patch": "@@ -104,8 +104,12 @@ static rtx expand_builtin_memcmp\tPARAMS ((tree, tree, rtx));\n #endif\n static rtx expand_builtin_strcmp\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n+static rtx expand_builtin_strncmp\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_memcpy\tPARAMS ((tree));\n static rtx expand_builtin_strcpy\tPARAMS ((tree));\n+static rtx expand_builtin_strncpy\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_memset\tPARAMS ((tree));\n static rtx expand_builtin_bzero\t\tPARAMS ((tree));\n static rtx expand_builtin_strlen\tPARAMS ((tree, rtx));\n@@ -1770,6 +1774,63 @@ expand_builtin_strcpy (exp)\n   return result;\n }\n \n+/* Expand expression EXP, which is a call to the strncpy builtin.  Return 0\n+   if we failed the caller should emit a normal call.  */\n+\n+static rtx\n+expand_builtin_strncpy (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  if (arglist == 0\n+      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+\t  != POINTER_TYPE)\n+      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE\n+\t\t\t\t(TREE_CHAIN (TREE_CHAIN (arglist)))))\n+\t  != INTEGER_TYPE))\n+    return 0;\n+  else\n+    {\n+      tree slen = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)));\n+      tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+\n+      /* We must be passed a constant len parameter.  */\n+      if (TREE_CODE (len) != INTEGER_CST)\n+\treturn 0;\n+\n+      /* If the len parameter is zero, return the dst parameter.  */\n+      if (compare_tree_int (len, 0) == 0)\n+        {\n+\t/* Evaluate and ignore the src argument in case it has\n+           side-effects.  */\n+\t  expand_expr (TREE_VALUE (TREE_CHAIN (arglist)), const0_rtx,\n+\t\t       VOIDmode, EXPAND_NORMAL);\n+\t  /* Return the dst parameter.  */\t\t       \n+\t  return expand_expr (TREE_VALUE (arglist), target, mode,\n+\t\t\t      EXPAND_NORMAL);\n+\t}\n+      \n+      /* Now, we must be passed a constant src ptr parameter.  */\n+      if (slen == 0)\n+\treturn 0;\n+\n+      slen = size_binop (PLUS_EXPR, slen, ssize_int (1));\n+\n+      /* We're required to pad with trailing zeros if the requested\n+         len is greater than strlen(s2)+1, so in that case punt.  */\n+      if (tree_int_cst_lt (slen, len))\n+\treturn 0;\n+      \n+      /* OK transform into builtin memcpy.  */\n+      return expand_builtin_memcpy (arglist);\n+    }\n+}\n+\n /* Expand expression EXP, which is a call to the memset builtin.  Return 0\n    if we failed the caller should emit a normal call.  */\n \n@@ -2051,6 +2112,83 @@ expand_builtin_strcmp (exp, target, mode)\n #endif\n }\n \n+/* Expand expression EXP, which is a call to the strncmp builtin.  Return 0\n+   if we failed the caller should emit a normal call, otherwise try to get\n+   the result in TARGET, if convenient.  */\n+static rtx\n+expand_builtin_strncmp (exp, target, mode)\n+     tree exp;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree arg1, arg2, arg3;\n+  const char *p1, *p2;\n+\n+  /* If we need to check memory accesses, call the library function.  */\n+  if (current_function_check_memory_usage)\n+    return 0;\n+\n+  if (arglist == 0\n+      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE\n+      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))))) != INTEGER_TYPE)\n+    return 0;\n+\n+  arg1 = TREE_VALUE (arglist);\n+  arg2 = TREE_VALUE (TREE_CHAIN (arglist));\n+  arg3 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+\n+  /* We must be passed a constant len parameter.  */\n+  if (TREE_CODE (arg3) != INTEGER_CST)\n+    return 0;\n+  \n+  /* If the len parameter is zero, return zero.  */\n+  if (compare_tree_int (arg3, 0) == 0)\n+  {\n+    /* Evaluate and ignore arg1 and arg2 in case they have\n+       side-effects.  */\n+    expand_expr (arg1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    expand_expr (arg2, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    return const0_rtx;\n+  }\n+\n+  p1 = c_getstr (arg1);\n+  p2 = c_getstr (arg2);\n+\n+  /* If all arguments are constant, evaluate at compile-time.  */\n+  if (p1 && p2)\n+  {\n+    const int r = strncmp (p1, p2, TREE_INT_CST_LOW (arg3));\n+    return (r < 0 ? constm1_rtx : (r > 0 ? const1_rtx : const0_rtx));\n+  }\n+\n+  /* If either string parameter is constant and its strlen is strictly\n+     less than the length parameter, call expand_builtin_strcmp().  */\n+  if ((p1 && compare_tree_int (arg3, strlen (p1)) > 0)\n+      || (p2 && compare_tree_int (arg3, strlen (p2)) > 0))\n+  {\n+    tree newarglist =\n+      tree_cons (NULL_TREE, arg1, build_tree_list (NULL_TREE, arg2));\n+    rtx result;\n+\n+    /* Call expand_builtin_strcmp with the modified newarglist.  If\n+       the expansion does not occur, do not allow strncmp to expand to\n+       strcmp since strcmp requires that both strings be NULL\n+       terminated whereas strncmp does not.  */\n+    TREE_OPERAND (exp, 1) = newarglist;\n+    result = expand_builtin_strcmp (exp, target, mode);\n+    /* Always restore the original arguments.  */\n+    TREE_OPERAND (exp, 1) = arglist;\n+    return result;\n+  }\n+  \n+  return 0;\n+}\n+\n /* Expand a call to __builtin_saveregs, generating the result in TARGET,\n    if that's convenient.  */\n \n@@ -2752,6 +2890,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || fcode == BUILT_IN_INDEX || fcode == BUILT_IN_RINDEX\n \t  || fcode == BUILT_IN_STRCHR || fcode == BUILT_IN_STRRCHR\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n+\t  || fcode == BUILT_IN_STRNCPY || fcode == BUILT_IN_STRNCMP\n \t  || fcode == BUILT_IN_STRSTR || fcode == BUILT_IN_STRPBRK\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS\n \t  || fcode == BUILT_IN_PUTCHAR || fcode == BUILT_IN_PUTS\n@@ -2881,6 +3020,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n       \n+    case BUILT_IN_STRNCPY:\n+      target = expand_builtin_strncpy (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n     case BUILT_IN_STRSTR:\n       target = expand_builtin_strstr (arglist, target, mode);\n       if (target)\n@@ -2931,6 +3076,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n \n+    case BUILT_IN_STRNCMP:\n+      target = expand_builtin_strncmp (exp, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+\n /* These comparison functions need an instruction that returns an actual\n    index.  An ordinary compare that just sets the condition codes\n    is not enough.  */"}, {"sha": "ec4325284a32f4c740a067bef2236d02449718f2", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=da9e9f0862f6ba1c843d2241329a368b509a450b", "patch": "@@ -39,7 +39,9 @@ DEF_BUILTIN(BUILT_IN_BCMP)\n DEF_BUILTIN(BUILT_IN_INDEX)\n DEF_BUILTIN(BUILT_IN_RINDEX)\n DEF_BUILTIN(BUILT_IN_STRCPY)\n+DEF_BUILTIN(BUILT_IN_STRNCPY)\n DEF_BUILTIN(BUILT_IN_STRCMP)\n+DEF_BUILTIN(BUILT_IN_STRNCMP)\n DEF_BUILTIN(BUILT_IN_STRLEN)\n DEF_BUILTIN(BUILT_IN_STRSTR)\n DEF_BUILTIN(BUILT_IN_STRPBRK)"}, {"sha": "d59386d96c59cb87dd44bec93153856247e820db", "filename": "gcc/c-common.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=da9e9f0862f6ba1c843d2241329a368b509a450b", "patch": "@@ -4887,6 +4887,7 @@ c_common_nodes_and_builtins ()\n   tree int_ftype_cptr_cptr_sizet;\n   tree int_ftype_string_string, string_ftype_ptr_ptr;\n   tree string_ftype_string_int, string_ftype_string_string;\n+  tree string_ftype_string_cstring_sizet, int_ftype_cstring_cstring_sizet;\n   tree long_ftype_long;\n   tree longlong_ftype_longlong;\n   /* Either char* or void*.  */\n@@ -4987,6 +4988,14 @@ c_common_nodes_and_builtins ()\n \t\t\t\t\t\t const_string_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  /* Prototype for strncpy.  */\n+  string_ftype_string_cstring_sizet\n+    = build_function_type (string_type_node,\n+\t\t\t   tree_cons (NULL_TREE, string_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t const_string_type_node,\n+\t\t\t\t\t\t sizetype_endlink)));\n+\n   traditional_len_type_node = ((flag_traditional && \n \t\t\t\tc_language != clk_cplusplus)\n \t\t\t       ? integer_type_node : sizetype);\n@@ -5001,6 +5010,14 @@ c_common_nodes_and_builtins ()\n \t\t\t\t\t\t const_string_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  /* Prototype for strncmp.  */\n+  int_ftype_cstring_cstring_sizet\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t const_string_type_node,\n+\t\t\t\t\t\t sizetype_endlink)));\n+\n   /* Prototype for strstr, strpbrk, etc.  */\n   string_ftype_string_string\n     = build_function_type (string_type_node,\n@@ -5246,8 +5263,11 @@ c_common_nodes_and_builtins ()\n \t\t    BUILT_IN_INDEX, BUILT_IN_NORMAL, \"index\");\n   builtin_function (\"__builtin_rindex\", string_ftype_string_int,\n \t\t    BUILT_IN_RINDEX, BUILT_IN_NORMAL, \"rindex\");\n-  builtin_function (\"__builtin_strcmp\", int_ftype_string_string,\n-\t\t    BUILT_IN_STRCMP, BUILT_IN_NORMAL, \"strcmp\");\n+  built_in_decls[BUILT_IN_STRCMP] =\n+    builtin_function (\"__builtin_strcmp\", int_ftype_string_string,\n+\t\t      BUILT_IN_STRCMP, BUILT_IN_NORMAL, \"strcmp\");\n+  builtin_function (\"__builtin_strncmp\", int_ftype_cstring_cstring_sizet,\n+\t\t    BUILT_IN_STRNCMP, BUILT_IN_NORMAL, \"strncmp\");\n   builtin_function (\"__builtin_strstr\", string_ftype_string_string,\n \t\t    BUILT_IN_STRSTR, BUILT_IN_NORMAL, \"strstr\");\n   builtin_function (\"__builtin_strpbrk\", string_ftype_string_string,\n@@ -5259,6 +5279,8 @@ c_common_nodes_and_builtins ()\n \t\t    BUILT_IN_STRRCHR, BUILT_IN_NORMAL, \"strrchr\");\n   builtin_function (\"__builtin_strcpy\", string_ftype_ptr_ptr,\n \t\t    BUILT_IN_STRCPY, BUILT_IN_NORMAL, \"strcpy\");\n+  builtin_function (\"__builtin_strncpy\", string_ftype_string_cstring_sizet,\n+\t\t    BUILT_IN_STRNCPY, BUILT_IN_NORMAL, \"strncpy\");\n   builtin_function (\"__builtin_strlen\", strlen_ftype,\n \t\t    BUILT_IN_STRLEN, BUILT_IN_NORMAL, \"strlen\");\n   builtin_function (\"__builtin_sqrtf\", float_ftype_float,\n@@ -5325,6 +5347,8 @@ c_common_nodes_and_builtins ()\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strcmp\", int_ftype_string_string, BUILT_IN_STRCMP,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"strncmp\", int_ftype_cstring_cstring_sizet,\n+\t\t\tBUILT_IN_STRNCMP, BUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strstr\", string_ftype_string_string, BUILT_IN_STRSTR,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strchr\", string_ftype_string_int, BUILT_IN_STRCHR,\n@@ -5335,6 +5359,8 @@ c_common_nodes_and_builtins ()\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strcpy\", string_ftype_ptr_ptr, BUILT_IN_STRCPY,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"strncpy\", string_ftype_string_cstring_sizet,\n+\t\t\tBUILT_IN_STRNCPY, BUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strlen\", strlen_ftype, BUILT_IN_STRLEN,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"sqrtf\", float_ftype_float, BUILT_IN_FSQRT,"}, {"sha": "0efab127c21565ab92bc47d6403b1243891e5fac", "filename": "gcc/extend.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=da9e9f0862f6ba1c843d2241329a368b509a450b", "patch": "@@ -3294,6 +3294,8 @@ function as well.\n @findex strcmp\n @findex strcpy\n @findex strlen\n+@findex strncmp\n+@findex strncpy\n @findex strpbrk\n @findex strrchr\n @findex strstr\n@@ -3338,10 +3340,11 @@ The following ISO C89 functions are recognized as builtins unless\n @samp{-fno-builtin} is specified: @code{abs}, @code{cos}, @code{fabs},\n @code{fputs}, @code{labs}, @code{memcmp}, @code{memcpy}, @code{memset},\n @code{printf}, @code{sin}, @code{sqrt}, @code{strchr}, @code{strcmp},\n-@code{strcpy}, @code{strlen}, @code{strpbrk}, @code{strrchr}, and\n-@code{strstr}.  All of these functions have corresponding versions\n-prefixed with @code{__builtin_}, except that the version for @code{sqrt}\n-is called @code{__builtin_fsqrt}.\n+@code{strcpy}, @code{strlen}, @code{strncmp}, @code{strncpy},\n+@code{strpbrk}, @code{strrchr}, and @code{strstr}.  All of these\n+functions have corresponding versions prefixed with @code{__builtin_},\n+except that the version for @code{sqrt} is called\n+@code{__builtin_fsqrt}.\n \n GNU CC provides builtin versions of the ISO C99 floating point\n comparison macros (that avoid raising exceptions for unordered"}, {"sha": "105b3dc95ba14db3286adff724b930c69ea4916d", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-7.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-7.c?ref=da9e9f0862f6ba1c843d2241329a368b509a450b", "patch": "@@ -0,0 +1,71 @@\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strncpy occur and\n+   perform correctly.\n+\n+   Written by Kaveh R. Ghazi, 11/25/2000.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern char *strncpy (char *, const char *, size_t);\n+extern int strcmp (const char *, const char *);\n+extern int strncmp (const char *, const char *, size_t);\n+extern void *memset (void *, int, size_t);\n+\n+int main ()\n+{\n+  const char *const src = \"hello world\";\n+  const char *src2;\n+  char dst[64], *dst2;\n+  \n+  memset (dst, 0, sizeof (dst));\n+  if (strncpy (dst, src, 4) != dst || strncmp (dst, src, 4))\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (strncpy (dst+16, src, 4) != dst+16 || strncmp (dst+16, src, 4))\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (strncpy (dst+32, src+5, 4) != dst+32 || strncmp (dst+32, src+5, 4))\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  dst2 = dst;\n+  if (strncpy (++dst2, src+5, 4) != dst+1 || strncmp (dst2, src+5, 4)\n+      || dst2 != dst+1)\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (strncpy (dst, src, 0) != dst || strcmp (dst, \"\"))\n+    abort();\n+  \n+  memset (dst, 0, sizeof (dst));\n+  dst2 = dst; src2 = src;\n+  if (strncpy (++dst2, ++src2, 0) != dst+1 || strcmp (dst2, \"\")\n+      || dst2 != dst+1 || src2 != src+1)\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  dst2 = dst; src2 = src;\n+  if (strncpy (++dst2+5, ++src2+5, 0) != dst+6 || strcmp (dst2+5, \"\")\n+      || dst2 != dst+1 || src2 != src+1)\n+    abort();\n+\n+  memset (dst, 0, sizeof (dst));\n+  if (strncpy (dst, src, 12) != dst || strcmp (dst, src))\n+    abort();\n+\n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static char *\n+strncpy(char *s1, const char *s2, size_t n)\n+{\n+  abort();\n+}\n+#endif"}, {"sha": "ca386f0ab370f0da7cf33b4acc979acc7c52d5f1", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-8.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9e9f0862f6ba1c843d2241329a368b509a450b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c?ref=da9e9f0862f6ba1c843d2241329a368b509a450b", "patch": "@@ -0,0 +1,60 @@\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strncmp occur and\n+   perform correctly.\n+\n+   Written by Kaveh R. Ghazi, 11/26/2000.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern int strncmp (const char *, const char *, size_t);\n+\n+int main ()\n+{\n+  const char *const s1 = \"hello world\";\n+  const char *s2, *s3;\n+  \n+  if (strncmp (s1, \"hello world\", 12) != 0)\n+    abort();\n+  if (strncmp (\"hello world\", s1, 12) != 0)\n+    abort();\n+  if (strncmp (\"hello\", \"hello\", 6) != 0)\n+    abort();\n+  if (strncmp (\"hello\", \"hello\", 2) != 0)\n+    abort();\n+  if (strncmp (\"hello\", \"hello\", 100) != 0)\n+    abort();\n+  if (strncmp (s1+10, \"d\", 100) != 0)\n+    abort();\n+  if (strncmp (10+s1, \"d\", 100) != 0)\n+    abort();\n+  if (strncmp (\"d\", s1+10, 1) != 0)\n+    abort();\n+  if (strncmp (\"d\", 10+s1, 1) != 0)\n+    abort();\n+  if (strncmp (\"hello\", \"aaaaa\", 100) <= 0)\n+    abort();\n+  if (strncmp (\"aaaaa\", \"hello\", 100) >= 0)\n+    abort();\n+  if (strncmp (\"hello\", \"aaaaa\", 1) <= 0)\n+    abort();\n+  if (strncmp (\"aaaaa\", \"hello\", 1) >= 0)\n+    abort();\n+\n+  s2 = s1; s3 = s1+4;\n+  if (strncmp (++s2, ++s3, 0) != 0 || s2 != s1+1 || s3 != s1+5)\n+    abort();\n+  \n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static char *\n+strncmp(const char *s1, const char *s2, size_t n)\n+{\n+  abort();\n+}\n+#endif"}]}