{"sha": "9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3NGYyMGQwNDBiODA2OGQ5ZjU1ZTJkZjdlMWQzZDNjMDJmMDgxOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T14:13:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T14:13:22Z"}, "message": "ddg: Use rtx_insn\n\ngcc/\n\t* ddg.h (struct ddg_node): Strengthen fields \"insn\" and\n\t\"first_note\" from rtx to rtx_insn *.\n\t(get_node_of_insn): Likewise for param 2 \"insn\".\n\t(autoinc_var_is_used_p): Likewise for params \"def_insn\" and \"use_insn\".\n\n\t* ddg.c (mem_read_insn_p): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(mem_write_insn_p): Likewise.\n\t(mem_access_insn_p): Likewise.\n\t(autoinc_var_is_used_p): Likewise for params \"def_insn\" and \"use_insn\".\n\t(def_has_ccmode_p): Likewise for param \"insn\".\n\t(add_cross_iteration_register_deps): Likewise for locals\n\t\"def_insn\" and \"use_insn\".\n\t(insns_may_alias_p): Likewise for params \"insn1\" and \"insn2\".\n\t(build_intra_loop_deps): Likewise for local \"src_insn\".\n\t(create_ddg): Strengthen locals \"insn\" and \"first_note\" from rtx\n\tto rtx_insn *.\n\t(get_node_of_insn): Likewise for param \"insn\".\n\nFrom-SVN: r214317", "tree": {"sha": "df2cf1097d5054b7d2ea33dcfcbc64caa7b843b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df2cf1097d5054b7d2ea33dcfcbc64caa7b843b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9774f20d040b8068d9f55e2df7e1d3d3c02f0819/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ece93214a1e4547b01fcb2e61c8672b33965a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ece93214a1e4547b01fcb2e61c8672b33965a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ece93214a1e4547b01fcb2e61c8672b33965a5d"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "75ab1fe58b3548047acd490d9279399128dc754b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9774f20d040b8068d9f55e2df7e1d3d3c02f0819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9774f20d040b8068d9f55e2df7e1d3d3c02f0819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "patch": "@@ -1,3 +1,24 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* ddg.h (struct ddg_node): Strengthen fields \"insn\" and\n+\t\"first_note\" from rtx to rtx_insn *.\n+\t(get_node_of_insn): Likewise for param 2 \"insn\".\n+\t(autoinc_var_is_used_p): Likewise for params \"def_insn\" and \"use_insn\".\n+\n+\t* ddg.c (mem_read_insn_p): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(mem_write_insn_p): Likewise.\n+\t(mem_access_insn_p): Likewise.\n+\t(autoinc_var_is_used_p): Likewise for params \"def_insn\" and \"use_insn\".\n+\t(def_has_ccmode_p): Likewise for param \"insn\".\n+\t(add_cross_iteration_register_deps): Likewise for locals\n+\t\"def_insn\" and \"use_insn\".\n+\t(insns_may_alias_p): Likewise for params \"insn1\" and \"insn2\".\n+\t(build_intra_loop_deps): Likewise for local \"src_insn\".\n+\t(create_ddg): Strengthen locals \"insn\" and \"first_note\" from rtx\n+\tto rtx_insn *.\n+\t(get_node_of_insn): Likewise for param \"insn\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* dce.c (worklist): Strengthen from vec<rtx> to vec<rtx_insn *>."}, {"sha": "503965f0e6083b7a83810fd944db645a7f855c1f", "filename": "gcc/ddg.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9774f20d040b8068d9f55e2df7e1d3d3c02f0819/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9774f20d040b8068d9f55e2df7e1d3d3c02f0819/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "patch": "@@ -80,7 +80,7 @@ mark_mem_use_1 (rtx *x, void *data)\n \n /* Returns nonzero if INSN reads from memory.  */\n static bool\n-mem_read_insn_p (rtx insn)\n+mem_read_insn_p (rtx_insn *insn)\n {\n   mem_ref_p = false;\n   note_uses (&PATTERN (insn), mark_mem_use_1, NULL);\n@@ -96,7 +96,7 @@ mark_mem_store (rtx loc, const_rtx setter ATTRIBUTE_UNUSED, void *data ATTRIBUTE\n \n /* Returns nonzero if INSN writes to memory.  */\n static bool\n-mem_write_insn_p (rtx insn)\n+mem_write_insn_p (rtx_insn *insn)\n {\n   mem_ref_p = false;\n   note_stores (PATTERN (insn), mark_mem_store, NULL);\n@@ -138,7 +138,7 @@ rtx_mem_access_p (rtx x)\n \n /* Returns nonzero if INSN reads to or writes from memory.  */\n static bool\n-mem_access_insn_p (rtx insn)\n+mem_access_insn_p (rtx_insn *insn)\n {\n   return rtx_mem_access_p (PATTERN (insn));\n }\n@@ -152,7 +152,7 @@ mem_access_insn_p (rtx insn)\n    by use_insn, if use_insn uses an address register auto-inc'ed by\n    def_insn.  */\n bool\n-autoinc_var_is_used_p (rtx def_insn, rtx use_insn)\n+autoinc_var_is_used_p (rtx_insn *def_insn, rtx_insn *use_insn)\n {\n   rtx note;\n \n@@ -167,7 +167,7 @@ autoinc_var_is_used_p (rtx def_insn, rtx use_insn)\n /* Return true if one of the definitions in INSN has MODE_CC.  Otherwise\n    return false.  */\n static bool\n-def_has_ccmode_p (rtx insn)\n+def_has_ccmode_p (rtx_insn *insn)\n {\n   df_ref def;\n \n@@ -293,7 +293,7 @@ add_cross_iteration_register_deps (ddg_ptr g, df_ref last_def)\n   int regno = DF_REF_REGNO (last_def);\n   struct df_link *r_use;\n   int has_use_in_bb_p = false;\n-  rtx def_insn = DF_REF_INSN (last_def);\n+  rtx_insn *def_insn = DF_REF_INSN (last_def);\n   ddg_node_ptr last_def_node = get_node_of_insn (g, def_insn);\n   ddg_node_ptr use_node;\n #ifdef ENABLE_CHECKING\n@@ -313,7 +313,7 @@ add_cross_iteration_register_deps (ddg_ptr g, df_ref last_def)\n   /* Create inter-loop true dependences and anti dependences.  */\n   for (r_use = DF_REF_CHAIN (last_def); r_use != NULL; r_use = r_use->next)\n     {\n-      rtx use_insn = DF_REF_INSN (r_use->ref);\n+      rtx_insn *use_insn = DF_REF_INSN (r_use->ref);\n \n       if (BLOCK_FOR_INSN (use_insn) != g->bb)\n \tcontinue;\n@@ -429,7 +429,7 @@ walk_mems_1 (rtx *x, rtx *pat)\n \n /* Return 1 if two specified instructions have mem expr with conflict alias sets*/\n static int\n-insns_may_alias_p (rtx insn1, rtx insn2)\n+insns_may_alias_p (rtx_insn *insn1, rtx_insn *insn2)\n {\n   /* For each pair of MEMs in INSN1 and INSN2 check their independence.  */\n   return  for_each_rtx (&PATTERN (insn1), (rtx_function) walk_mems_1,\n@@ -530,7 +530,7 @@ build_intra_loop_deps (ddg_ptr g)\n \n       FOR_EACH_DEP (dest_node->insn, SD_LIST_BACK, sd_it, dep)\n \t{\n-\t  rtx src_insn = DEP_PRO (dep);\n+\t  rtx_insn *src_insn = DEP_PRO (dep);\n \t  ddg_node_ptr src_node;\n \n \t  /* Don't add dependencies on debug insns to non-debug insns\n@@ -594,7 +594,7 @@ ddg_ptr\n create_ddg (basic_block bb, int closing_branch_deps)\n {\n   ddg_ptr g;\n-  rtx insn, first_note;\n+  rtx_insn *insn, *first_note;\n   int i;\n   int num_nodes = 0;\n \n@@ -634,7 +634,7 @@ create_ddg (basic_block bb, int closing_branch_deps)\n   g->nodes = (ddg_node_ptr) xcalloc (num_nodes, sizeof (struct ddg_node));\n   g->closing_branch = NULL;\n   i = 0;\n-  first_note = NULL_RTX;\n+  first_note = NULL;\n   for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb));\n        insn = NEXT_INSN (insn))\n     {\n@@ -664,7 +664,7 @@ create_ddg (basic_block bb, int closing_branch_deps)\n       bitmap_clear (g->nodes[i].predecessors);\n       g->nodes[i].first_note = (first_note ? first_note : insn);\n       g->nodes[i++].insn = insn;\n-      first_note = NULL_RTX;\n+      first_note = NULL;\n     }\n \n   /* We must have found a branch in DDG.  */\n@@ -957,7 +957,7 @@ add_scc_to_ddg (ddg_all_sccs_ptr g, ddg_scc_ptr scc)\n \n /* Given the instruction INSN return the node that represents it.  */\n ddg_node_ptr\n-get_node_of_insn (ddg_ptr g, rtx insn)\n+get_node_of_insn (ddg_ptr g, rtx_insn *insn)\n {\n   int i;\n "}, {"sha": "e372134bd000b9a6667925c1c67cd0214f78655a", "filename": "gcc/ddg.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9774f20d040b8068d9f55e2df7e1d3d3c02f0819/gcc%2Fddg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9774f20d040b8068d9f55e2df7e1d3d3c02f0819/gcc%2Fddg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.h?ref=9774f20d040b8068d9f55e2df7e1d3d3c02f0819", "patch": "@@ -51,13 +51,13 @@ struct ddg_node\n   int cuid;\n \n   /* The insn represented by the node.  */\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* A note preceding INSN (or INSN itself), such that all insns linked\n      from FIRST_NOTE until INSN (inclusive of both) are moved together\n      when reordering the insns.  This takes care of notes that should\n      continue to precede INSN.  */\n-  rtx first_note;\n+  rtx_insn *first_note;\n \n   /* Incoming and outgoing dependency edges.  */\n   ddg_edge_ptr in;\n@@ -173,7 +173,7 @@ void vcg_print_ddg (FILE *, ddg_ptr);\n void print_ddg_edge (FILE *, ddg_edge_ptr);\n void print_sccs (FILE *, ddg_all_sccs_ptr, ddg_ptr);\n \n-ddg_node_ptr get_node_of_insn (ddg_ptr, rtx);\n+ddg_node_ptr get_node_of_insn (ddg_ptr, rtx_insn *);\n \n void find_successors (sbitmap result, ddg_ptr, sbitmap);\n void find_predecessors (sbitmap result, ddg_ptr, sbitmap);\n@@ -184,6 +184,6 @@ void free_ddg_all_sccs (ddg_all_sccs_ptr);\n int find_nodes_on_paths (sbitmap result, ddg_ptr, sbitmap from, sbitmap to);\n int longest_simple_path (ddg_ptr, int from, int to, sbitmap via);\n \n-bool autoinc_var_is_used_p (rtx, rtx);\n+bool autoinc_var_is_used_p (rtx_insn *, rtx_insn *);\n \n #endif /* GCC_DDG_H */"}]}