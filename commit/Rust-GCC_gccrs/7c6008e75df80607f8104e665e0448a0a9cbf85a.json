{"sha": "7c6008e75df80607f8104e665e0448a0a9cbf85a", "node_id": "C_kwDOANBUbNoAKDdjNjAwOGU3NWRmODA2MDdmODEwNGU2NjVlMDQ0OGEwYTljYmY4NWE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-04T15:05:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-05T14:01:30Z"}, "message": "libstdc++: Do not use SFINAE for propagate_const conversions [PR107525]\n\nAs the PR notes, the current conversion operators are defined as\nfunction templates so that we can use SFINAE. But this changes how they\nare considered for overload resolution. This moves those operators into\nbase classes that can be specialized so the operators are obsent unless\nthe constraints are satisfied.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107525\n\t* include/experimental/propagate_const (operator element_type*()):\n\tMove into base class that can be partially specilized to iompose\n\tconstraints.\n\t(operator const element_type*()): Likewise.\n\t* testsuite/experimental/propagate_const/observers/107525.cc: New test.", "tree": {"sha": "7da8e5862b490f7a0f6ffaef7f117bcd0bd0016d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7da8e5862b490f7a0f6ffaef7f117bcd0bd0016d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c6008e75df80607f8104e665e0448a0a9cbf85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6008e75df80607f8104e665e0448a0a9cbf85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6008e75df80607f8104e665e0448a0a9cbf85a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6008e75df80607f8104e665e0448a0a9cbf85a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e50ea3a42f058c14ee29327d5277ab0435e3d36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50ea3a42f058c14ee29327d5277ab0435e3d36b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e50ea3a42f058c14ee29327d5277ab0435e3d36b"}], "stats": {"total": 135, "additions": 113, "deletions": 22}, "files": [{"sha": "12b0f27462aff9770674bf983b74a396f7d2ba2e", "filename": "libstdc++-v3/include/experimental/propagate_const", "status": "modified", "additions": 66, "deletions": 22, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6008e75df80607f8104e665e0448a0a9cbf85a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6008e75df80607f8104e665e0448a0a9cbf85a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const?ref=7c6008e75df80607f8104e665e0448a0a9cbf85a", "patch": "@@ -50,6 +50,48 @@ namespace experimental\n {\n inline namespace fundamentals_v2\n {\n+  template<typename _Tp>\n+    using __propagate_const_elem_type\n+      = remove_reference_t<decltype(*std::declval<_Tp&>())>;\n+\n+  template<typename _Tp,\n+\t   typename _Elem = __propagate_const_elem_type<_Tp>,\n+\t   bool = is_convertible<const _Tp, const _Elem*>::value>\n+    struct __propagate_const_conversion_c\n+    { };\n+\n+  template<typename _Tp, typename _Elem>\n+    struct __propagate_const_conversion_c<_Tp, _Elem, true>\n+    {\n+      constexpr operator const _Elem*() const;\n+    };\n+\n+  template<typename _Tp,\n+\t   typename _Elem = __propagate_const_elem_type<_Tp>,\n+\t   bool = is_convertible<_Tp, _Elem*>::value>\n+    struct __propagate_const_conversion_nc\n+    { };\n+\n+  template<typename _Tp, typename _Elem>\n+    struct __propagate_const_conversion_nc<_Tp, _Elem, true>\n+    {\n+      constexpr operator _Elem*();\n+    };\n+\n+  // Base class of propagate_const<T> when T is a class type.\n+  template <typename _Tp>\n+    struct __propagate_const_conversions\n+    : __propagate_const_conversion_c<_Tp>, __propagate_const_conversion_nc<_Tp>\n+    { };\n+\n+  // Base class of propagate_const<T> when T is a pointer type.\n+  template<typename _Tp>\n+    struct __propagate_const_conversions<_Tp*>\n+    {\n+      constexpr operator const _Tp*() const noexcept;\n+      constexpr operator _Tp*() noexcept;\n+    };\n+\n   /**\n    * @defgroup propagate_const Const-propagating wrapper\n    * @ingroup libfund-ts\n@@ -63,10 +105,10 @@ inline namespace fundamentals_v2\n \n   /// Const-propagating wrapper.\n   template <typename _Tp>\n-    class propagate_const\n+    class propagate_const : public __propagate_const_conversions<_Tp>\n     {\n     public:\n-      typedef remove_reference_t<decltype(*std::declval<_Tp&>())> element_type;\n+      using element_type = __propagate_const_elem_type<_Tp>;\n \n     private:\n       template <typename _Up>\n@@ -186,16 +228,6 @@ inline namespace fundamentals_v2\n \treturn get();\n       }\n \n-      template <typename _Up = _Tp,\n-\t\ttypename enable_if<__or_<is_pointer<_Up>,\n-\t\t\t\t\t is_convertible<_Up,\n-\t\t\t\t\t\t\tconst element_type*>\n-\t\t\t\t\t >::value, bool>::type = true>\n-      constexpr operator const element_type*() const\n-      {\n-\treturn get();\n-      }\n-\n       constexpr const element_type& operator*() const\n       {\n \treturn *get();\n@@ -212,16 +244,6 @@ inline namespace fundamentals_v2\n \treturn get();\n       }\n \n-      template <typename _Up = _Tp,\n-\t\ttypename enable_if<__or_<is_pointer<_Up>,\n-\t\t\t\t\t is_convertible<_Up,\n-\t\t\t\t\t\t        const element_type*>\n-\t\t\t\t\t >::value, bool>::type = true>\n-      constexpr operator element_type*()\n-      {\n-\treturn get();\n-      }\n-\n       constexpr element_type& operator*()\n       {\n \treturn *get();\n@@ -430,6 +452,28 @@ inline namespace fundamentals_v2\n       return __pt._M_t;\n     }\n \n+  template<typename _Tp>\n+    constexpr\n+    __propagate_const_conversions<_Tp*>::operator const _Tp*() const noexcept\n+    { return static_cast<const propagate_const<_Tp*>*>(this)->get(); }\n+\n+  template<typename _Tp>\n+    constexpr\n+    __propagate_const_conversions<_Tp*>::operator _Tp*() noexcept\n+    { return static_cast<propagate_const<_Tp*>*>(this)->get(); }\n+\n+  template<typename _Tp, typename _Elem>\n+    constexpr\n+    __propagate_const_conversion_c<_Tp, _Elem, true>::\n+    operator const _Elem*() const\n+    { return static_cast<const propagate_const<_Tp>*>(this)->get(); }\n+\n+  template<typename _Tp, typename _Elem>\n+    constexpr\n+    __propagate_const_conversion_nc<_Tp, _Elem, true>::\n+    operator _Elem*()\n+    { return static_cast<propagate_const<_Tp>*>(this)->get(); }\n+\n   /// @} group propagate_const\n } // namespace fundamentals_v2\n } // namespace experimental"}, {"sha": "e7ecff73c1ae7fea8c6044ce3bc2ce7909e0026f", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/observers/107525.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6008e75df80607f8104e665e0448a0a9cbf85a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fobservers%2F107525.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6008e75df80607f8104e665e0448a0a9cbf85a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fobservers%2F107525.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fobservers%2F107525.cc?ref=7c6008e75df80607f8104e665e0448a0a9cbf85a", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do run { target c++14 } }\n+\n+#include <experimental/propagate_const>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::propagate_const;\n+\n+void\n+test_base_conversion()\n+{\n+  struct Base { };\n+  struct Derived : Base { };\n+\n+  static_assert(std::is_convertible<propagate_const<Derived*>, Base*>::value,\n+      \"PR libstdc++/107525 - SFINAE breaks conversion operators\");\n+  static_assert(std::is_convertible<const propagate_const<Derived*>, const Base*>::value,\n+      \"PR libstdc++/107525 - SFINAE breaks conversion operators\");\n+}\n+\n+void\n+test_const_conversion()\n+{\n+  struct X\n+  {\n+    int* p = nullptr;\n+\n+    int& operator*() const { return *p; }\n+    int* operator->() const { return p; }\n+    int* get() const { return p; }\n+\n+    operator int*() { return p; }\n+    operator const int*() const = delete;\n+  };\n+\n+  static_assert(!std::is_convertible_v<const X, const int*>,\n+\t\t\"Cannot convert const X to const int*\");\n+  // So should not be able to convert const propagate_const<X> to const int*.\n+  static_assert(!std::is_convertible_v<const propagate_const<X>, const int*>,\n+\t\t\"So should not be able to convert const propagate_const<X> to \"\n+\t\t\"const int* (although this is not what LFTSv3 says)\");\n+}\n+\n+int main()\n+{\n+  test_base_conversion();\n+  test_const_conversion();\n+}"}]}