{"sha": "567f3d36034ac69ab042945ed545bcc398ebc93b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY3ZjNkMzYwMzRhYzY5YWIwNDI5NDVlZDU0NWJjYzM5OGViYzkzYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-02-12T23:18:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-12T23:18:26Z"}, "message": "com.c (type_for_mode): Add explicit braces to avoid ambiguous `else'.\n\n        * com.c (type_for_mode): Add explicit braces to avoid ambiguous `else'.\n        * expr.c (ffeexpr_type_combine): Likewise.\n        (ffeexpr_reduce_): Likewise.\n        (ffeexpr_declare_parenthesized_): Likewise.\n        * src.c (ffesrc_strcmp_1ns2i): Likewise.\n        (ffesrc_strcmp_2c): Likewise.\n        (ffesrc_strncmp_2c): Likewise.\n        * stb.c (ffestb_halt1_): Likewise.\n        (ffestb_R90910_): Likewise.\n        (ffestb_R9109_): Likewise.\n        * stc.c (ffestc_R544_equiv_): Likewise.\n        * std.c (ffestd_subr_copy_easy_): Likewise.\n        (ffestd_R1001dump_): Likewise.\n        (ffestd_R1001dump_1005_1_): Likewise.\n        (ffestd_R1001dump_1005_2_): Likewise.\n        (ffestd_R1001dump_1005_3_): Likewise.\n        (ffestd_R1001dump_1005_4_): Likewise.\n        (ffestd_R1001dump_1005_5_): Likewise.\n        (ffestd_R1001dump_1010_2_): Likewise.\n        * ste.c (ffeste_R840): Likewise.\n        * sts.c (ffests_puttext): Likewise.\n        * symbol.c (ffesymbol_check_token_): Likewise.\n        * target.c (ffetarget_real1): Likewise.\n        (ffetarget_real2): Likewise.\n\nFrom-SVN: r17884", "tree": {"sha": "1eb478f06fc9a3bbfdb8e87eb73dde4310ba3b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eb478f06fc9a3bbfdb8e87eb73dde4310ba3b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/567f3d36034ac69ab042945ed545bcc398ebc93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567f3d36034ac69ab042945ed545bcc398ebc93b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567f3d36034ac69ab042945ed545bcc398ebc93b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567f3d36034ac69ab042945ed545bcc398ebc93b/comments", "author": null, "committer": null, "parents": [{"sha": "c4e8876e9b153cbf6fd7b50b005b43d435163196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e8876e9b153cbf6fd7b50b005b43d435163196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e8876e9b153cbf6fd7b50b005b43d435163196"}], "stats": {"total": 430, "additions": 262, "deletions": 168}, "files": [{"sha": "ba3cbe06a6565f0b3484bac31eeb65eed61d1362", "filename": "gcc/f/ChangeLog.egcs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2FChangeLog.egcs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2FChangeLog.egcs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog.egcs?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -1,3 +1,39 @@\n+Fri Feb 13 00:14:56 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c (type_for_mode): Add explicit braces to avoid ambiguous `else'.\n+ \n+\t* expr.c (ffeexpr_type_combine): Likewise.\n+\t(ffeexpr_reduce_): Likewise.\n+\t(ffeexpr_declare_parenthesized_): Likewise.\n+ \n+\t* src.c (ffesrc_strcmp_1ns2i): Likewise.\n+\t(ffesrc_strcmp_2c): Likewise.\n+\t(ffesrc_strncmp_2c): Likewise.\n+ \n+\t* stb.c (ffestb_halt1_): Likewise.\n+\t(ffestb_R90910_): Likewise.\n+\t(ffestb_R9109_): Likewise.\n+\n+\t* stc.c (ffestc_R544_equiv_): Likewise.\n+ \n+\t* std.c (ffestd_subr_copy_easy_): Likewise.\n+\t(ffestd_R1001dump_): Likewise.\n+\t(ffestd_R1001dump_1005_1_): Likewise.\n+\t(ffestd_R1001dump_1005_2_): Likewise.\n+\t(ffestd_R1001dump_1005_3_): Likewise.\n+\t(ffestd_R1001dump_1005_4_): Likewise.\n+\t(ffestd_R1001dump_1005_5_): Likewise.\n+\t(ffestd_R1001dump_1010_2_): Likewise.\n+ \n+\t* ste.c (ffeste_R840): Likewise.\n+ \n+\t* sts.c (ffests_puttext): Likewise.\n+ \n+\t* symbol.c (ffesymbol_check_token_): Likewise.\n+ \n+\t* target.c (ffetarget_real1): Likewise.\n+\t(ffetarget_real2): Likewise.\n+ \n Wed Feb 11 01:44:48 1998  Richard Henderson  (rth@cygnus.com)\n \n \t* com.c (ffecom_ptr_to_expr) [FFEBLD_opARRAYREF]:  Do upper - lower"}, {"sha": "659652f529b738e11d440f3f3f7302b0cc733ae0", "filename": "gcc/f/com.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -15477,10 +15477,12 @@ type_for_mode (mode, unsignedp)\n       {\n \tif (((t = ffecom_tree_type[i][j]) != NULL_TREE)\n \t    && (mode == TYPE_MODE (t)))\n-\t  if ((i == FFEINFO_basictypeINTEGER) && unsignedp)\n-\t    return ffecom_tree_type[FFEINFO_basictypeHOLLERITH][j];\n-\t  else\n-\t    return t;\n+\t  {\n+\t    if ((i == FFEINFO_basictypeINTEGER) && unsignedp)\n+\t      return ffecom_tree_type[FFEINFO_basictypeHOLLERITH][j];\n+\t    else\n+\t      return t;\n+\t  }\n       }\n \n   return 0;"}, {"sha": "4d618db23b3f788179d6a4d584bd2459b7743979", "filename": "gcc/f/expr.c", "status": "modified", "additions": 44, "deletions": 34, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -8761,10 +8761,12 @@ ffeexpr_type_combine (ffeinfoBasictype *xnbt, ffeinfoKindtype *xnkt,\n   else\n     {\t\t\t\t/* The normal stuff. */\n       if (nbt == lbt)\n-\tif (nbt == rbt)\n-\t  nkt = ffeinfo_kindtype_max (nbt, lkt, rkt);\n-\telse\n-\t  nkt = lkt;\n+\t{\n+\t  if (nbt == rbt)\n+\t    nkt = ffeinfo_kindtype_max (nbt, lkt, rkt);\n+\t  else\n+\t    nkt = lkt;\n+\t}\n       else if (nbt == rbt)\n \tnkt = rkt;\n       else\n@@ -10022,26 +10024,30 @@ ffeexpr_reduce_ ()\n \t      && (left_operand->previous->type != FFEEXPR_exprtypeOPERAND_)\n \t      && (left_operand->previous->u.operator.op\n \t\t  == FFEEXPR_operatorSUBTRACT_))\n-\t    if (left_operand->previous->type == FFEEXPR_exprtypeUNARY_)\n-\t      ffetarget_integer_bad_magical_precedence (left_operand->token,\n-\t\t\t\t\t      left_operand->previous->token,\n-\t\t\t\t\t\t\toperator->token);\n-\t    else\n-\t      ffetarget_integer_bad_magical_precedence_binary\n-\t\t(left_operand->token,\n-\t\t left_operand->previous->token,\n-\t\t operator->token);\n+\t    {\n+\t      if (left_operand->previous->type == FFEEXPR_exprtypeUNARY_)\n+\t\tffetarget_integer_bad_magical_precedence (left_operand->token,\n+\t\t\t\t\t\t\t  left_operand->previous->token,\n+\t\t\t\t\t\t\t  operator->token);\n+\t      else\n+\t\tffetarget_integer_bad_magical_precedence_binary\n+\t\t  (left_operand->token,\n+\t\t   left_operand->previous->token,\n+\t\t   operator->token);\n+\t    }\n \t  else\n \t    ffetarget_integer_bad_magical (left_operand->token);\n \t}\n       if ((ffebld_op (expr) == FFEBLD_opCONTER)\n \t  && (ffebld_conter_orig (expr) == NULL)\n \t  && ffebld_constant_is_magical (constnode = ffebld_conter (expr)))\n-\tif (submag)\n-\t  ffetarget_integer_bad_magical_binary (operand->token,\n-\t\t\t\t\t\toperator->token);\n-\telse\n-\t  ffetarget_integer_bad_magical (operand->token);\n+\t{\n+\t  if (submag)\n+\t    ffetarget_integer_bad_magical_binary (operand->token,\n+\t\t\t\t\t\t  operator->token);\n+\t  else\n+\t    ffetarget_integer_bad_magical (operand->token);\n+\t}\n       ffeexpr_stack_->exprstack = left_operand->previous;\t/* Pops binary-op\n \t\t\t\t\t\t\t\t   operands off stack. */\n       ffeexpr_expr_kill_ (left_operand);\n@@ -17901,13 +17907,15 @@ ffeexpr_declare_parenthesized_ (ffelexToken t, bool maybe_intrin,\n \n \tcase FFEINFO_kindENTITY:\n \t  if (ffesymbol_rank (s) == 0)\n-\t    if (ffesymbol_basictype (s) == FFEINFO_basictypeCHARACTER)\n-\t      *paren_type = FFEEXPR_parentypeSUBSTRING_;\n-\t    else\n-\t      {\n-\t\tbad = TRUE;\n-\t\t*paren_type = FFEEXPR_parentypeANY_;\n-\t      }\n+\t    {\n+\t      if (ffesymbol_basictype (s) == FFEINFO_basictypeCHARACTER)\n+\t\t*paren_type = FFEEXPR_parentypeSUBSTRING_;\n+\t      else\n+\t\t{\n+\t\t  bad = TRUE;\n+\t\t  *paren_type = FFEEXPR_parentypeANY_;\n+\t\t}\n+\t    }\n \t  else\n \t    *paren_type = FFEEXPR_parentypeARRAY_;\n \t  break;\n@@ -18028,15 +18036,17 @@ ffeexpr_declare_parenthesized_ (ffelexToken t, bool maybe_intrin,\n \n \tcase FFEINFO_kindENTITY:\n \t  if (ffesymbol_rank (s) == 0)\n-\t    if (ffeexpr_stack_->context == FFEEXPR_contextEQUIVALENCE)\n-\t      *paren_type = FFEEXPR_parentypeEQUIVALENCE_;\n-\t    else if (ffesymbol_basictype (s) == FFEINFO_basictypeCHARACTER)\n-\t      *paren_type = FFEEXPR_parentypeSUBSTRING_;\n-\t    else\n-\t      {\n-\t\tbad = TRUE;\n-\t\t*paren_type = FFEEXPR_parentypeANY_;\n-\t      }\n+\t    {\n+\t      if (ffeexpr_stack_->context == FFEEXPR_contextEQUIVALENCE)\n+\t\t*paren_type = FFEEXPR_parentypeEQUIVALENCE_;\n+\t      else if (ffesymbol_basictype (s) == FFEINFO_basictypeCHARACTER)\n+\t\t*paren_type = FFEEXPR_parentypeSUBSTRING_;\n+\t      else\n+\t\t{\n+\t\t  bad = TRUE;\n+\t\t  *paren_type = FFEEXPR_parentypeANY_;\n+\t\t}\n+\t    }\n \t  else\n \t    *paren_type = FFEEXPR_parentypeARRAY_;\n \t  break;"}, {"sha": "fe39961daa295efd10e00f67b38ad0ee1d33a035", "filename": "gcc/f/src.c", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fsrc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fsrc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsrc.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -234,10 +234,12 @@ ffesrc_strcmp_1ns2i (ffeCase mcase, const char *var, int len,\n \t  c = ffesrc_toupper (c);\t/* Upcase source. */\n \t  d = ffesrc_toupper (*str_ic);\t/* Upcase InitialCaps char. */\n \t  if (c != d)\n-\t    if ((d != '\\0') && (c < d))\n-\t      return -1;\n-\t    else\n-\t      return 1;\n+\t    {\n+\t      if ((d != '\\0') && (c < d))\n+\t\treturn -1;\n+\t      else\n+\t\treturn 1;\n+\t    }\n \t}\n       break;\n \n@@ -247,10 +249,12 @@ ffesrc_strcmp_1ns2i (ffeCase mcase, const char *var, int len,\n \t  c = ffesrc_char_source (*var);\t/* Transform source. */\n \t  d = ffesrc_toupper (*str_ic);\t/* Transform InitialCaps char. */\n \t  if (c != d)\n-\t    if ((d != '\\0') && (c < d))\n-\t      return -1;\n-\t    else\n-\t      return 1;\n+\t    {\n+\t      if ((d != '\\0') && (c < d))\n+\t\treturn -1;\n+\t      else\n+\t\treturn 1;\n+\t    }\n \t}\n       break;\n \n@@ -260,10 +264,12 @@ ffesrc_strcmp_1ns2i (ffeCase mcase, const char *var, int len,\n \t  c = ffesrc_char_source (*var);\t/* Transform source. */\n \t  d = ffesrc_tolower (*str_ic);\t/* Transform InitialCaps char. */\n \t  if (c != d)\n-\t    if ((d != '\\0') && (c < d))\n-\t      return -1;\n-\t    else\n-\t      return 1;\n+\t    {\n+\t      if ((d != '\\0') && (c < d))\n+\t\treturn -1;\n+\t      else\n+\t\treturn 1;\n+\t    }\n \t}\n       break;\n \n@@ -320,10 +326,12 @@ ffesrc_strcmp_2c (ffeCase mcase, const char *var, const char *str_uc,\n \t{\n \t  c = ffesrc_toupper (*var);\t/* Upcase source. */\n \t  if (c != *str_uc)\n-\t    if ((*str_uc != '\\0') && (c < *str_uc))\n-\t      return -1;\n-\t    else\n-\t      return 1;\n+\t    {\n+\t      if ((*str_uc != '\\0') && (c < *str_uc))\n+\t\treturn -1;\n+\t      else\n+\t\treturn 1;\n+\t    }\n \t}\n       if (*str_uc == '\\0')\n \treturn 0;\n@@ -388,10 +396,12 @@ ffesrc_strncmp_2c (ffeCase mcase, const char *var, const char *str_uc,\n \t{\n \t  c = ffesrc_toupper (*var);\t/* Upcase source. */\n \t  if (c != *str_uc)\n-\t    if (c < *str_uc)\n-\t      return -1;\n-\t    else\n-\t      return 1;\n+\t    {\n+\t      if (c < *str_uc)\n+\t\treturn -1;\n+\t      else\n+\t\treturn 1;\n+\t    }\n \t}\n       return 0;\n "}, {"sha": "9cf655fa56bd0d048cf1a7841bf2a69735561f93", "filename": "gcc/f/stb.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fstb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fstb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstb.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -3773,10 +3773,12 @@ ffestb_halt1_ (ffelexToken ft, ffebld expr, ffelexToken t)\n     case FFELEX_typeSEMICOLON:\n       ffesta_confirmed ();\n       if (!ffesta_is_inhibited ())\n-\tif (ffesta_first_kw == FFESTR_firstSTOP)\n-\t  ffestc_R842 (expr, ft);\n-\telse\n-\t  ffestc_R843 (expr, ft);\n+\t{\n+\t  if (ffesta_first_kw == FFESTR_firstSTOP)\n+\t    ffestc_R842 (expr, ft);\n+\t  else\n+\t    ffestc_R843 (expr, ft);\n+\t}\n       return (ffelexHandler) ffesta_zero (t);\n \n     default:\n@@ -15553,11 +15555,13 @@ ffestb_R90910_ (ffelexToken ft, ffebld expr, ffelexToken t)\n     case FFELEX_typeCOMMA:\n     case FFELEX_typeCLOSE_PAREN:\n       if (expr == NULL)\n-\tif (ffestb_local_.read.context == FFEEXPR_contextFILEFORMAT)\n-\t  ffestp_file.read.read_spec[ffestb_local_.read.ix]\n-\t    .value_is_label = TRUE;\n-\telse\n-\t  break;\n+\t{\n+\t  if (ffestb_local_.read.context == FFEEXPR_contextFILEFORMAT)\n+\t    ffestp_file.read.read_spec[ffestb_local_.read.ix]\n+\t      .value_is_label = TRUE;\n+\t  else\n+\t    break;\n+\t}\n       ffestp_file.read.read_spec[ffestb_local_.read.ix].value_present\n \t= TRUE;\n       ffestp_file.read.read_spec[ffestb_local_.read.ix].value\n@@ -16169,11 +16173,13 @@ ffestb_R9109_ (ffelexToken ft, ffebld expr, ffelexToken t)\n     case FFELEX_typeCOMMA:\n     case FFELEX_typeCLOSE_PAREN:\n       if (expr == NULL)\n-\tif (ffestb_local_.write.context == FFEEXPR_contextFILEFORMAT)\n-\t  ffestp_file.write.write_spec[ffestb_local_.write.ix]\n-\t    .value_is_label = TRUE;\n-\telse\n-\t  break;\n+\t{\n+\t  if (ffestb_local_.write.context == FFEEXPR_contextFILEFORMAT)\n+\t    ffestp_file.write.write_spec[ffestb_local_.write.ix]\n+\t      .value_is_label = TRUE;\n+\t  else\n+\t    break;\n+\t}\n       ffestp_file.write.write_spec[ffestb_local_.write.ix].value_present\n \t= TRUE;\n       ffestp_file.write.write_spec[ffestb_local_.write.ix].value"}, {"sha": "872b81756ad7301a0bdaea862067cf1530f9b243", "filename": "gcc/f/stc.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fstc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fstc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstc.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -8238,16 +8238,18 @@ ffestc_R544_equiv_ (ffebld expr, ffelexToken t)\n   /* See if symbol has an equivalence object already. */\n \n   if (ffesymbol_equiv (s) != NULL)\n-    if (ffestc_local_.equiv.eq == NULL)\n-      ffestc_local_.equiv.eq = ffesymbol_equiv (s);\t/* New equiv obj. */\n-    else if (ffestc_local_.equiv.eq != ffesymbol_equiv (s))\n-      {\n-\tffestc_local_.equiv.eq = ffeequiv_merge (ffesymbol_equiv (s),\n-\t\t\t\t\t\t ffestc_local_.equiv.eq,\n-\t\t\t\t\t\t t);\n-\tif (ffestc_local_.equiv.eq == NULL)\n-\t  ffestc_local_.equiv.ok = FALSE;\t/* Couldn't merge. */\n-      }\n+    {\n+      if (ffestc_local_.equiv.eq == NULL)\n+\tffestc_local_.equiv.eq = ffesymbol_equiv (s);\t/* New equiv obj. */\n+      else if (ffestc_local_.equiv.eq != ffesymbol_equiv (s))\n+\t{\n+\t  ffestc_local_.equiv.eq = ffeequiv_merge (ffesymbol_equiv (s),\n+\t\t\t\t\t\t   ffestc_local_.equiv.eq,\n+\t\t\t\t\t\t   t);\n+\t  if (ffestc_local_.equiv.eq == NULL)\n+\t    ffestc_local_.equiv.ok = FALSE;\t/* Couldn't merge. */\n+\t}\n+    }\n \n   if (ffesymbol_is_save (s))\n     ffestc_local_.equiv.save = TRUE;"}, {"sha": "5c11c40a9a37585a52bbbe4dca21a5355582659a", "filename": "gcc/f/std.c", "status": "modified", "additions": 58, "deletions": 40, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fstd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fstd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstd.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -1105,13 +1105,15 @@ ffestd_subr_copy_easy_ (ffestpInquireIx max)\n \t   = ffestp_file.inquire.inquire_spec[ix].kw_or_val_present)\n \t  && (stmt->inquire_spec[ix].value_present\n \t      = ffestp_file.inquire.inquire_spec[ix].value_present))\n-\tif ((stmt->inquire_spec[ix].value_is_label\n-\t     = ffestp_file.inquire.inquire_spec[ix].value_is_label))\n-\t  stmt->inquire_spec[ix].u.label\n-\t    = ffestp_file.inquire.inquire_spec[ix].u.label;\n-\telse\n-\t  stmt->inquire_spec[ix].u.expr\n-\t    = ffestp_file.inquire.inquire_spec[ix].u.expr;\n+\t{\n+\t  if ((stmt->inquire_spec[ix].value_is_label\n+\t       = ffestp_file.inquire.inquire_spec[ix].value_is_label))\n+\t    stmt->inquire_spec[ix].u.label\n+\t      = ffestp_file.inquire.inquire_spec[ix].u.label;\n+\t  else\n+\t    stmt->inquire_spec[ix].u.expr\n+\t      = ffestp_file.inquire.inquire_spec[ix].u.expr;\n+\t}\n     }\n \n   return stmt;\n@@ -4356,11 +4358,13 @@ ffestd_R1001dump_ (ffests s, ffesttFormatList list)\n \n \tcase FFESTP_formattypeFORMAT:\n \t  if (next->u.R1003D.R1004.present)\n-\t    if (next->u.R1003D.R1004.rtexpr)\n-\t      ffestd_R1001error_ (next);\n-\t    else\n-\t      ffests_printf_1U (s, \"%lu\",\n-\t\t\t\tnext->u.R1003D.R1004.u.unsigned_val);\n+\t    {\n+\t      if (next->u.R1003D.R1004.rtexpr)\n+\t\tffestd_R1001error_ (next);\n+\t      else\n+\t\tffests_printf_1U (s, \"%lu\",\n+\t\t\t\t  next->u.R1003D.R1004.u.unsigned_val);\n+\t    }\n \n \t  ffests_putc (s, '(');\n \t  ffestd_R1001dump_ (s, next->u.R1003D.format);\n@@ -4387,18 +4391,22 @@ ffestd_R1001dump_1005_1_ (ffests s, ffesttFormatList f, char *string)\n   assert (!f->u.R1005.R1009.present);\n \n   if (f->u.R1005.R1004.present)\n-    if (f->u.R1005.R1004.rtexpr)\n-      ffestd_R1001error_ (f);\n-    else\n-      ffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    {\n+      if (f->u.R1005.R1004.rtexpr)\n+\tffestd_R1001error_ (f);\n+      else\n+\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    }\n \n   ffests_puts (s, string);\n \n   if (f->u.R1005.R1006.present)\n-    if (f->u.R1005.R1006.rtexpr)\n-      ffestd_R1001error_ (f);\n-    else\n-      ffests_printf_1U (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n+    {\n+      if (f->u.R1005.R1006.rtexpr)\n+\tffestd_R1001error_ (f);\n+      else\n+\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n+    }\n }\n \n /* ffestd_R1001dump_1005_2_ -- Dump a particular format\n@@ -4416,10 +4424,12 @@ ffestd_R1001dump_1005_2_ (ffests s, ffesttFormatList f, char *string)\n   assert (f->u.R1005.R1006.present);\n \n   if (f->u.R1005.R1004.present)\n-    if (f->u.R1005.R1004.rtexpr)\n-      ffestd_R1001error_ (f);\n-    else\n-      ffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    {\n+      if (f->u.R1005.R1004.rtexpr)\n+\tffestd_R1001error_ (f);\n+      else\n+\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    }\n \n   ffests_puts (s, string);\n \n@@ -4443,10 +4453,12 @@ ffestd_R1001dump_1005_3_ (ffests s, ffesttFormatList f, char *string)\n   assert (f->u.R1005.R1006.present);\n \n   if (f->u.R1005.R1004.present)\n-    if (f->u.R1005.R1004.rtexpr)\n-      ffestd_R1001error_ (f);\n-    else\n-      ffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    {\n+      if (f->u.R1005.R1004.rtexpr)\n+\tffestd_R1001error_ (f);\n+      else\n+\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    }\n \n   ffests_puts (s, string);\n \n@@ -4481,10 +4493,12 @@ ffestd_R1001dump_1005_4_ (ffests s, ffesttFormatList f, char *string)\n   assert (f->u.R1005.R1006.present);\n \n   if (f->u.R1005.R1004.present)\n-    if (f->u.R1005.R1004.rtexpr)\n-      ffestd_R1001error_ (f);\n-    else\n-      ffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    {\n+      if (f->u.R1005.R1004.rtexpr)\n+\tffestd_R1001error_ (f);\n+      else\n+\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    }\n \n   ffests_puts (s, string);\n \n@@ -4514,10 +4528,12 @@ ffestd_R1001dump_1005_5_ (ffests s, ffesttFormatList f, char *string)\n   assert (f->u.R1005.R1006.present);\n \n   if (f->u.R1005.R1004.present)\n-    if (f->u.R1005.R1004.rtexpr)\n-      ffestd_R1001error_ (f);\n-    else\n-      ffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    {\n+      if (f->u.R1005.R1004.rtexpr)\n+\tffestd_R1001error_ (f);\n+      else\n+\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+    }\n \n   ffests_puts (s, string);\n \n@@ -4568,10 +4584,12 @@ static void\n ffestd_R1001dump_1010_2_ (ffests s, ffesttFormatList f, char *string)\n {\n   if (f->u.R1010.val.present)\n-    if (f->u.R1010.val.rtexpr)\n-      ffestd_R1001error_ (f);\n-    else\n-      ffests_printf_1U (s, \"%lu\", f->u.R1010.val.u.unsigned_val);\n+    {\n+      if (f->u.R1010.val.rtexpr)\n+\tffestd_R1001error_ (f);\n+      else\n+\tffests_printf_1U (s, \"%lu\", f->u.R1010.val.u.unsigned_val);\n+    }\n \n   ffests_puts (s, string);\n }"}, {"sha": "91698f17aae0c0a4fc9291cab96d04d3e71e1867", "filename": "gcc/f/ste.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -2905,22 +2905,24 @@ ffeste_R840 (ffebld expr, ffelab neg, ffelab zero, ffelab pos)\n     ffecom_push_calltemps ();\n \n     if (neg == zero)\n-      if (neg == pos)\n-\texpand_goto (gzero);\n-      else\n-\t{\t\t\t/* IF (expr.LE.0) THEN GOTO neg/zero ELSE\n-\t\t\t\t   GOTO pos. */\n-\t  texpr = ffecom_expr (expr);\n-\t  texpr = ffecom_2 (LE_EXPR, integer_type_node,\n-\t\t\t    texpr,\n-\t\t\t    convert (TREE_TYPE (texpr),\n-\t\t\t\t     integer_zero_node));\n-\t  expand_start_cond (ffecom_truth_value (texpr), 0);\n+      {\n+\tif (neg == pos)\n \t  expand_goto (gzero);\n-\t  expand_start_else ();\n-\t  expand_goto (gpos);\n-\t  expand_end_cond ();\n-\t}\n+\telse\n+\t  {\t\t\t/* IF (expr.LE.0) THEN GOTO neg/zero ELSE\n+\t\t\t\t   GOTO pos. */\n+\t    texpr = ffecom_expr (expr);\n+\t    texpr = ffecom_2 (LE_EXPR, integer_type_node,\n+\t\t\t      texpr,\n+\t\t\t      convert (TREE_TYPE (texpr),\n+\t\t\t\t       integer_zero_node));\n+\t    expand_start_cond (ffecom_truth_value (texpr), 0);\n+\t    expand_goto (gzero);\n+\t    expand_start_else ();\n+\t    expand_goto (gpos);\n+\t    expand_end_cond ();\n+\t  }\n+      }\n     else if (neg == pos)\n       {\t\t\t\t/* IF (expr.NE.0) THEN GOTO neg/pos ELSE GOTO\n \t\t\t\t   zero. */"}, {"sha": "dabb919d566c4d8e05186bfcc9e723f7c7a0672c", "filename": "gcc/f/sts.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fsts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fsts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsts.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -252,19 +252,21 @@ ffests_puttext (ffests s, char *text, ffestsLength length)\n \n   newlen = s->len_ + length;\n   if (newlen > s->max_)\n-    if (s->text_ == NULL)\n-      {\n-\ts->max_ = 40;\n-\ts->text_ = malloc_new_ksr (s->pool_, \"ffests\", s->max_);\n-      }\n-    else\n-      {\n-\tnewmax = s->max_ << 1;\n-\twhile (newmax < newlen)\n-\t  newmax <<= 1;\n-\ts->text_ = malloc_resize_ksr (s->pool_, s->text_, newmax, s->max_);\n-\ts->max_ = newmax;\n-      }\n+    {\n+      if (s->text_ == NULL)\n+\t{\n+\t  s->max_ = 40;\n+\t  s->text_ = malloc_new_ksr (s->pool_, \"ffests\", s->max_);\n+\t}\n+      else\n+\t{\n+\t  newmax = s->max_ << 1;\n+\t  while (newmax < newlen)\n+\t    newmax <<= 1;\n+\t  s->text_ = malloc_resize_ksr (s->pool_, s->text_, newmax, s->max_);\n+\t  s->max_ = newmax;\n+\t}\n+    }\n \n   memcpy (s->text_ + s->len_, text, length);\n   s->len_ = newlen;"}, {"sha": "5e87cf50919921aad546121358ecf93a4357d80b", "filename": "gcc/f/symbol.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsymbol.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -170,10 +170,12 @@ ffesymbol_check_token_ (ffelexToken t, char *c)\n     }\n \n   if (bad != FFEBAD)\n-    if (i >= len)\n-      *c = *(ffelex_token_text (t));\n-    else\n-      *c = *p;\n+    {\n+      if (i >= len)\n+\t*c = *(ffelex_token_text (t));\n+      else\n+\t*c = *p;\n+    }\n \n   return bad;\n }"}, {"sha": "b66aad6ce26fd8a015309c92ffceb1b415b19b5c", "filename": "gcc/f/target.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567f3d36034ac69ab042945ed545bcc398ebc93b/gcc%2Ff%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.c?ref=567f3d36034ac69ab042945ed545bcc398ebc93b", "patch": "@@ -2191,13 +2191,15 @@ ffetarget_real1 (ffetargetReal1 *value, ffelexToken integer,\n   dotoktxt (exponent);\n \n   if (exponent_sign != NULL)\n-    if (ffelex_token_type (exponent_sign) == FFELEX_typePLUS)\n-      *p++ = '+';\n-    else\n-      {\n-\tassert (ffelex_token_type (exponent_sign) == FFELEX_typeMINUS);\n-\t*p++ = '-';\n-      }\n+    {\n+      if (ffelex_token_type (exponent_sign) == FFELEX_typePLUS)\n+\t*p++ = '+';\n+      else\n+\t{\n+\t  assert (ffelex_token_type (exponent_sign) == FFELEX_typeMINUS);\n+\t  *p++ = '-';\n+\t}\n+    }\n \n   dotoktxt (exponent_digits);\n \n@@ -2275,13 +2277,15 @@ ffetarget_real2 (ffetargetReal2 *value, ffelexToken integer,\n   dotoktxtexp (exponent);\n \n   if (exponent_sign != NULL)\n-    if (ffelex_token_type (exponent_sign) == FFELEX_typePLUS)\n-      *p++ = '+';\n-    else\n-      {\n-\tassert (ffelex_token_type (exponent_sign) == FFELEX_typeMINUS);\n-\t*p++ = '-';\n-      }\n+    {\n+      if (ffelex_token_type (exponent_sign) == FFELEX_typePLUS)\n+\t*p++ = '+';\n+      else\n+\t{\n+\t  assert (ffelex_token_type (exponent_sign) == FFELEX_typeMINUS);\n+\t  *p++ = '-';\n+\t}\n+    }\n \n   dotoktxt (exponent_digits);\n "}]}