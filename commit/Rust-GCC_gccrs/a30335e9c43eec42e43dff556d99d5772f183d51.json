{"sha": "a30335e9c43eec42e43dff556d99d5772f183d51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwMzM1ZTljNDNlZWM0MmU0M2RmZjU1NmQ5OWQ1NzcyZjE4M2Q1MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-04T18:10:10Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-04T18:10:10Z"}, "message": "Makefile.am: Update target_ to host_.\n\n\n2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/Makefile.am: Update target_ to host_.\n\t* include/Makefile.in: Regenerate.\n\t* src/Makefile.am: Same.\n\t* src/Makefile.in: Regenerate.\n\n\t* config/os/gnu-linux/os_defines.h: Remove glibc-2.0 support.\n\nFrom-SVN: r68926", "tree": {"sha": "6264da3bf4ca11342284c82f95e9b56ce8c47ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6264da3bf4ca11342284c82f95e9b56ce8c47ec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30335e9c43eec42e43dff556d99d5772f183d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30335e9c43eec42e43dff556d99d5772f183d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30335e9c43eec42e43dff556d99d5772f183d51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30335e9c43eec42e43dff556d99d5772f183d51/comments", "author": null, "committer": null, "parents": [{"sha": "d8d81f62c135f4345422ee308e77738de763421e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d81f62c135f4345422ee308e77738de763421e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d81f62c135f4345422ee308e77738de763421e"}], "stats": {"total": 291, "additions": 141, "deletions": 150}, "files": [{"sha": "80fbe633248b8a24d16542cddb0a715bf011b115", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a30335e9c43eec42e43dff556d99d5772f183d51", "patch": "@@ -1,3 +1,12 @@\n+2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/Makefile.am: Update target_ to host_.\n+\t* include/Makefile.in: Regenerate.\n+\t* src/Makefile.am: Same.\n+\t* src/Makefile.in: Regenerate.\n+\n+\t* config/os/gnu-linux/os_defines.h: Remove glibc-2.0 support.\n+\t\n 2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_DEBUG_FLAGS): To"}, {"sha": "714a095d137c09ee65cf5f99ebe54cb1f1938874", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=a30335e9c43eec42e43dff556d99d5772f183d51", "patch": "@@ -92,6 +92,8 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+FPOS_H = @FPOS_H@\n+FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@"}, {"sha": "e917ced9f89e3345e203e26ad9b0217c78b92fd3", "filename": "libstdc++-v3/config/os/gnu-linux/os_defines.h", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fos_defines.h?ref=a30335e9c43eec42e43dff556d99d5772f183d51", "patch": "@@ -1,6 +1,6 @@\n // Specific definitions for GNU/Linux  -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,30 +38,8 @@\n \n #include <features.h>\n \n-#if !defined (__GLIBC__) || (__GLIBC__ == 2 && __GLIBC_MINOR__+ 0 == 0)\n-\n-// The types __off_t and __off64_t are not defined through <sys/types.h>\n-// as _G_config assumes.  For libc5 and glibc 2.0 instead use\n-// <gnu/types.h> and the old name for __off64_t.\n-#include <gnu/types.h>\n-typedef __loff_t __off64_t;\n-\n-// These systems have declarations mismatching those in libio.h by\n-// omitting throw qualifiers.  Cleanest way out is to not provide\n-// throw-qualifiers at all.  Defining it as empty here will make libio.h\n-// not define it.\n-#undef __THROW\n-#define __THROW\n-\n-// Tell Glibc not to try to provide its own inline versions of\n-// some math functions.  Those cause assembly-time clashes with\n-// our definitions.\n-#define __NO_MATH_INLINES\n-\n-#endif \n-\n-#if defined __GLIBC__ && __GLIBC__ >= 2\n // We must not see the optimized string functions GNU libc defines.\n+#if defined __GLIBC__ && __GLIBC__ >= 2\n #define __NO_STRING_INLINES\n #endif\n "}, {"sha": "4c62208f535522c40dd5eddbf55c4c60ee7b8b2c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=a30335e9c43eec42e43dff556d99d5772f183d51", "patch": "@@ -315,38 +315,38 @@ else\n c_compatibility_headers_extra = \n endif\n \n-target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n-target_builddir = ./${target_alias}/bits\n-target_headers = \\\n-\t${target_srcdir}/ctype_base.h \\\n-\t${target_srcdir}/ctype_inline.h \\\n-\t${target_srcdir}/ctype_noninline.h \\\n-\t${target_srcdir}/os_defines.h \\\n+host_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n+host_builddir = ./${host_alias}/bits\n+host_headers = \\\n+\t${host_srcdir}/ctype_base.h \\\n+\t${host_srcdir}/ctype_inline.h \\\n+\t${host_srcdir}/ctype_noninline.h \\\n+\t${host_srcdir}/os_defines.h \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n \t${glibcpp_srcdir}/@FPOS_INC_SRCDIR@/fpos.h \n \n-# Non-installed target_header files.\n-target_headers_noinst = \\\n+# Non-installed host_header files.\n+host_headers_noinst = \\\n \t${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@\n \n-# These target_headers_extra files are all built with ad hoc naming rules.\n-target_headers_extra = \\\n-\t${target_builddir}/basic_file.h \\\n-\t${target_builddir}/c++config.h \\\n-\t${target_builddir}/c++io.h \\\n-\t${target_builddir}/c++locale.h \\\n-\t${target_builddir}/messages_members.h \\\n-\t${target_builddir}/time_members.h \\\n-\t${target_builddir}/codecvt_specializations.h\n-\n-thread_target_headers = \\\n-\t${target_builddir}/gthr.h \\\n-\t${target_builddir}/gthr-single.h \\\n-\t${target_builddir}/gthr-posix.h \\\n-\t${target_builddir}/gthr-default.h\n-\n-pch_input = ${target_builddir}/stdc++.h\n-pch_output_builddir = ${target_builddir}/stdc++.h.gch\n+# These host_headers_extra files are all built with ad hoc naming rules.\n+host_headers_extra = \\\n+\t${host_builddir}/basic_file.h \\\n+\t${host_builddir}/c++config.h \\\n+\t${host_builddir}/c++io.h \\\n+\t${host_builddir}/c++locale.h \\\n+\t${host_builddir}/messages_members.h \\\n+\t${host_builddir}/time_members.h \\\n+\t${host_builddir}/codecvt_specializations.h\n+\n+thread_host_headers = \\\n+\t${host_builddir}/gthr.h \\\n+\t${host_builddir}/gthr-single.h \\\n+\t${host_builddir}/gthr-posix.h \\\n+\t${host_builddir}/gthr-default.h\n+\n+pch_input = ${host_builddir}/stdc++.h\n+pch_output_builddir = ${host_builddir}/stdc++.h.gch\n pch_source = ${glibcpp_srcdir}/include/stdc++.h\n PCHFLAGS=-Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n if GLIBCPP_BUILD_PCH\n@@ -361,13 +361,13 @@ endif\n # CLEANFILES and all-local are kept up-to-date.\n allstamped = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-target \n+\tstamp-backward stamp-ext stamp-host \n \n # List of all files that are created by explicit building, editing, or\n # catenation.\n allcreated = \\\n-\t${target_builddir}/c++config.h \\\n-\t${thread_target_headers} \\\n+\t${host_builddir}/c++config.h \\\n+\t${thread_host_headers} \\\n \t${pch_build}\n \n # Here are the rules for building the headers\n@@ -440,32 +440,32 @@ stamp-ext: ${ext_headers}\n \t  echo `date` > stamp-ext ;\\\n \tfi\n \n-stamp-${target_alias}:\n-\t@if [ ! -d ${target_builddir} ]; then \\\n-\t  mkdir -p ${target_builddir} ;\\\n-\t  echo `date` > stamp-${target_alias} ;\\\n+stamp-${host_alias}:\n+\t@if [ ! -d ${host_builddir} ]; then \\\n+\t  mkdir -p ${host_builddir} ;\\\n+\t  echo `date` > stamp-${host_alias} ;\\\n \tfi\n \n-# Target includes static.\n-# XXX Missing dependency info for {target_headers_extra}\n-stamp-target: ${target_headers} ${target_headers_noinst} stamp-${target_alias}\n-\t@if [ ! -f stamp-target ]; then \\\n-\t  (cd ${target_builddir} ;\\\n-\t  @LN_S@ ${target_headers} . || true ;\\\n+# Host includes static.\n+# XXX Missing dependency info for {host_headers_extra}\n+stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n+\t@if [ ! -f stamp-host ]; then \\\n+\t  (cd ${host_builddir} ;\\\n+\t  @LN_S@ ${host_headers} . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CTIME_H@ time_members.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n-\t  echo `date` > stamp-target ; \\\n+\t  echo `date` > stamp-host ; \\\n \tfi\n \n-# Target includes dynamic.\n-${target_builddir}/c++config.h: ${CONFIG_HEADER} \\\n+# Host includes dynamic.\n+${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n-\t\t\t\tstamp-${target_alias}\n+\t\t\t\tstamp-${host_alias}\n \t@cat ${glibcpp_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCPP_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCPP_PACKAGE/g' \\\n@@ -474,38 +474,38 @@ ${target_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n \n-# Target includes for threads\n+# Host includes for threads\n glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n-${target_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${target_alias}\n+${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}\n \tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr.h > $@\n \n-${target_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n-\t\t\t\t  stamp-${target_alias}\n+${host_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n+\t\t\t\t  stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-single.h > $@\n \n-${target_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n-\t\t\t\t   stamp-${target_alias}\n+${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n+\t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-posix.h > $@\n \n-${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n-\t\t\t\t   stamp-${target_alias}\n+${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n+\t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n \n # Build a precompiled C++ include, stdc++.h.gch.\n-${pch_input}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n+${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}\n \ttouch ${pch_input}; \\\n \tif [ ! -d \"${pch_output_builddir}\" ]; then \\\n \t  mkdir -p ${pch_output_builddir}; \\\n@@ -519,7 +519,7 @@ ${pch_input}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n # components.  Yes, with minor differences, this is sheer duplication\n # of the staging rules above using $(INSTALL_DATA) instead of LN_S and\n # `$(mkinstalldirs)' instead of `mkdir -p'.  In particular,\n-# target_headers_extra are taken out of the build tree staging area;\n+# host_headers_extra are taken out of the build tree staging area;\n # the rest are taken from the original source tree.\n gxx_include_dir = @gxx_include_dir@\n \n@@ -548,10 +548,10 @@ install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${std_builddir}\n \tfor file in ${std_headers_rename}; do \\\n \t  $(INSTALL_DATA) ${std_builddir}/$${file} $(DESTDIR)${gxx_include_dir}/${std_builddir}; done\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${target_builddir}\n-\tfor file in ${target_headers} ${target_headers_extra} \\\n-\t ${thread_target_headers}; do \\\n-\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${target_builddir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${host_builddir}\n+\tfor file in ${host_headers} ${host_headers_extra} \\\n+\t ${thread_host_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${host_builddir}; done\n \n install-pch:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}"}, {"sha": "93369a3131c2dcbeb83aadb8de70a02d1da9125d", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=a30335e9c43eec42e43dff556d99d5772f183d51", "patch": "@@ -427,42 +427,42 @@ c_compatibility_headers = \\\n @GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = @GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@${c_compatibility_headers}\n @GLIBCPP_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n-target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n-target_builddir = ./${target_alias}/bits\n-target_headers = \\\n-\t${target_srcdir}/ctype_base.h \\\n-\t${target_srcdir}/ctype_inline.h \\\n-\t${target_srcdir}/ctype_noninline.h \\\n-\t${target_srcdir}/os_defines.h \\\n+host_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n+host_builddir = ./${host_alias}/bits\n+host_headers = \\\n+\t${host_srcdir}/ctype_base.h \\\n+\t${host_srcdir}/ctype_inline.h \\\n+\t${host_srcdir}/ctype_noninline.h \\\n+\t${host_srcdir}/os_defines.h \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n \t${glibcpp_srcdir}/@FPOS_INC_SRCDIR@/fpos.h \n \n \n-# Non-installed target_header files.\n-target_headers_noinst = \\\n+# Non-installed host_header files.\n+host_headers_noinst = \\\n \t${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@\n \n \n-# These target_headers_extra files are all built with ad hoc naming rules.\n-target_headers_extra = \\\n-\t${target_builddir}/basic_file.h \\\n-\t${target_builddir}/c++config.h \\\n-\t${target_builddir}/c++io.h \\\n-\t${target_builddir}/c++locale.h \\\n-\t${target_builddir}/messages_members.h \\\n-\t${target_builddir}/time_members.h \\\n-\t${target_builddir}/codecvt_specializations.h\n+# These host_headers_extra files are all built with ad hoc naming rules.\n+host_headers_extra = \\\n+\t${host_builddir}/basic_file.h \\\n+\t${host_builddir}/c++config.h \\\n+\t${host_builddir}/c++io.h \\\n+\t${host_builddir}/c++locale.h \\\n+\t${host_builddir}/messages_members.h \\\n+\t${host_builddir}/time_members.h \\\n+\t${host_builddir}/codecvt_specializations.h\n \n \n-thread_target_headers = \\\n-\t${target_builddir}/gthr.h \\\n-\t${target_builddir}/gthr-single.h \\\n-\t${target_builddir}/gthr-posix.h \\\n-\t${target_builddir}/gthr-default.h\n+thread_host_headers = \\\n+\t${host_builddir}/gthr.h \\\n+\t${host_builddir}/gthr-single.h \\\n+\t${host_builddir}/gthr-posix.h \\\n+\t${host_builddir}/gthr-default.h\n \n \n-pch_input = ${target_builddir}/stdc++.h\n-pch_output_builddir = ${target_builddir}/stdc++.h.gch\n+pch_input = ${host_builddir}/stdc++.h\n+pch_output_builddir = ${host_builddir}/stdc++.h.gch\n pch_source = ${glibcpp_srcdir}/include/stdc++.h\n PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n @GLIBCPP_BUILD_PCH_TRUE@pch_build = @GLIBCPP_BUILD_PCH_TRUE@${pch_input}\n@@ -474,18 +474,18 @@ PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n # CLEANFILES and all-local are kept up-to-date.\n allstamped = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-target \n+\tstamp-backward stamp-ext stamp-host \n \n \n # List of all files that are created by explicit building, editing, or\n # catenation.\n allcreated = \\\n-\t${target_builddir}/c++config.h \\\n-\t${thread_target_headers} \\\n+\t${host_builddir}/c++config.h \\\n+\t${thread_host_headers} \\\n \t${pch_build}\n \n \n-# Target includes for threads\n+# Host includes for threads\n glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n@@ -495,7 +495,7 @@ uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n # components.  Yes, with minor differences, this is sheer duplication\n # of the staging rules above using $(INSTALL_DATA) instead of LN_S and\n # `$(mkinstalldirs)' instead of `mkdir -p'.  In particular,\n-# target_headers_extra are taken out of the build tree staging area;\n+# host_headers_extra are taken out of the build tree staging area;\n # the rest are taken from the original source tree.\n gxx_include_dir = @gxx_include_dir@\n \n@@ -674,32 +674,32 @@ stamp-ext: ${ext_headers}\n \t  echo `date` > stamp-ext ;\\\n \tfi\n \n-stamp-${target_alias}:\n-\t@if [ ! -d ${target_builddir} ]; then \\\n-\t  mkdir -p ${target_builddir} ;\\\n-\t  echo `date` > stamp-${target_alias} ;\\\n+stamp-${host_alias}:\n+\t@if [ ! -d ${host_builddir} ]; then \\\n+\t  mkdir -p ${host_builddir} ;\\\n+\t  echo `date` > stamp-${host_alias} ;\\\n \tfi\n \n-# Target includes static.\n-# XXX Missing dependency info for {target_headers_extra}\n-stamp-target: ${target_headers} ${target_headers_noinst} stamp-${target_alias}\n-\t@if [ ! -f stamp-target ]; then \\\n-\t  (cd ${target_builddir} ;\\\n-\t  @LN_S@ ${target_headers} . || true ;\\\n+# Host includes static.\n+# XXX Missing dependency info for {host_headers_extra}\n+stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n+\t@if [ ! -f stamp-host ]; then \\\n+\t  (cd ${host_builddir} ;\\\n+\t  @LN_S@ ${host_headers} . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CTIME_H@ time_members.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n-\t  echo `date` > stamp-target ; \\\n+\t  echo `date` > stamp-host ; \\\n \tfi\n \n-# Target includes dynamic.\n-${target_builddir}/c++config.h: ${CONFIG_HEADER} \\\n+# Host includes dynamic.\n+${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t\t${glibcpp_srcdir}/include/bits/c++config \\\n-\t\t\t\tstamp-${target_alias}\n+\t\t\t\tstamp-${host_alias}\n \t@cat ${glibcpp_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCPP_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCPP_PACKAGE/g' \\\n@@ -708,34 +708,34 @@ ${target_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"#endif // _CPP_CPPCONFIG_\" >>$@\n \n-${target_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${target_alias}\n+${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}\n \tsed -e '/^#/s/\\(${uppercase}${uppercase}*\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr.h > $@\n \n-${target_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n-\t\t\t\t  stamp-${target_alias}\n+${host_builddir}/gthr-single.h: ${toplevel_srcdir}/gcc/gthr-single.h \\\n+\t\t\t\t  stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-single.h > $@\n \n-${target_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n-\t\t\t\t   stamp-${target_alias}\n+${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n+\t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-posix.h > $@\n \n-${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n-\t\t\t\t   stamp-${target_alias}\n+${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n+\t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n \t    -e 's,^#include \"\\(.*\\)\",#include <bits/\\1>,g' \\\n \t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n \n # Build a precompiled C++ include, stdc++.h.gch.\n-${pch_input}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n+${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}\n \ttouch ${pch_input}; \\\n \tif [ ! -d \"${pch_output_builddir}\" ]; then \\\n \t  mkdir -p ${pch_output_builddir}; \\\n@@ -768,10 +768,10 @@ install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${std_builddir}\n \tfor file in ${std_headers_rename}; do \\\n \t  $(INSTALL_DATA) ${std_builddir}/$${file} $(DESTDIR)${gxx_include_dir}/${std_builddir}; done\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${target_builddir}\n-\tfor file in ${target_headers} ${target_headers_extra} \\\n-\t ${thread_target_headers}; do \\\n-\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${target_builddir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${host_builddir}\n+\tfor file in ${host_headers} ${host_headers_extra} \\\n+\t ${thread_host_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${host_builddir}; done\n \n install-pch:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}"}, {"sha": "2dbf697440e6338811945b5bf4a70bd0315b5b7e", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=a30335e9c43eec42e43dff556d99d5772f183d51", "patch": "@@ -71,8 +71,8 @@ INCLUDES = \\\n \t$(TOPLEVEL_INCLUDES)\n \n # Source files linked in via configuration/make substitution for a\n-# particular target.\n-target_sources = \\\n+# particular host.\n+host_sources = \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n \tctype_members.cc \\\n@@ -103,8 +103,8 @@ time_members.cc: ${glibcpp_srcdir}/@CTIME_CC@\n \t@LN_S@ ${glibcpp_srcdir}/@CTIME_CC@ . || true\n \n # Source files linked in via configuration/make substitution for a\n-# particular target, but with ad hoc naming rules.\n-target_sources_extra = \\\n+# particular host, but with ad hoc naming rules.\n+host_sources_extra = \\\n \tbasic_file.cc \\\n \tc++locale.cc \n \n@@ -142,8 +142,8 @@ sources = \\\n \tstrstream.cc \\\n \tvalarray-inst.cc \\\n \twstring-inst.cc \\\n-\t${target_sources} \\\n-\t${target_sources_extra}\n+\t${host_sources} \\\n+\t${host_sources_extra}\n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n "}, {"sha": "764da3fabb7329e06824a2288f71f4210a585437", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30335e9c43eec42e43dff556d99d5772f183d51/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=a30335e9c43eec42e43dff556d99d5772f183d51", "patch": "@@ -90,6 +90,8 @@ DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+FPOS_H = @FPOS_H@\n+FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n@@ -177,8 +179,8 @@ INCLUDES = \\\n \n \n # Source files linked in via configuration/make substitution for a\n-# particular target.\n-target_sources = \\\n+# particular host.\n+host_sources = \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n \tctype_members.cc \\\n@@ -189,8 +191,8 @@ target_sources = \\\n \n \n # Source files linked in via configuration/make substitution for a\n-# particular target, but with ad hoc naming rules.\n-target_sources_extra = \\\n+# particular host, but with ad hoc naming rules.\n+host_sources_extra = \\\n \tbasic_file.cc \\\n \tc++locale.cc \n \n@@ -223,8 +225,8 @@ sources = \\\n \tstrstream.cc \\\n \tvalarray-inst.cc \\\n \twstring-inst.cc \\\n-\t${target_sources} \\\n-\t${target_sources_extra}\n+\t${host_sources} \\\n+\t${host_sources_extra}\n \n \n VPATH = $(top_srcdir)/src:$(top_srcdir)"}]}