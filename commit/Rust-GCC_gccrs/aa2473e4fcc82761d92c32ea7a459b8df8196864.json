{"sha": "aa2473e4fcc82761d92c32ea7a459b8df8196864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyNDczZTRmY2M4Mjc2MWQ5MmMzMmVhN2E0NTliOGRmODE5Njg2NA==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-04-09T20:30:20Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-04-09T20:30:20Z"}, "message": "ArrayValue.java: New file.\n\n2007-04-09  Kyle Galloway  <kgallowa@redhat.com>\n\n\t* classpath/gnu/classpath/jdwp/value/ArrayValue.java: New file.\n\t* classpath/lib/gnu/classpath/jdwp/value/ArrayValue.class: New file.\n\t* gnu/classpath/jdwp/ArrayValue.h: New file.\n\t* gnu/classpath/jdwp/natVMFrame.cc (getValue): Add array case.\n\t(setValue): Ditto.\n\nFrom-SVN: r123680", "tree": {"sha": "62049d983f02fe621abaebc533f5b1e3aafaeca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62049d983f02fe621abaebc533f5b1e3aafaeca8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa2473e4fcc82761d92c32ea7a459b8df8196864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2473e4fcc82761d92c32ea7a459b8df8196864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2473e4fcc82761d92c32ea7a459b8df8196864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2473e4fcc82761d92c32ea7a459b8df8196864/comments", "author": null, "committer": null, "parents": [{"sha": "a607b96e80f5790c88b80a8ac0b0c0dd88fe413b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a607b96e80f5790c88b80a8ac0b0c0dd88fe413b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a607b96e80f5790c88b80a8ac0b0c0dd88fe413b"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "dc120cabc49d65335b4fb5ff4b884d38e5a5d283", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=aa2473e4fcc82761d92c32ea7a459b8df8196864", "patch": "@@ -1,3 +1,11 @@\n+2007-04-09  Kyle Galloway  <kgallowa@redhat.com>\n+\n+\t* classpath/gnu/classpath/jdwp/value/ArrayValue.java: New file.\n+\t* classpath/lib/gnu/classpath/jdwp/value/ArrayValue.class: New file.\n+\t* gnu/classpath/jdwp/ArrayValue.h: New file.\n+\t* gnu/classpath/jdwp/natVMFrame.cc (getValue): Add array case.\n+\t(setValue): Ditto. \n+\n 2007-04-09  David Daney  <ddaney@avtrex.com>\n \n \tPR libgcj/23758"}, {"sha": "c5e00a019d944a7fcb8f5a85cd6f73388e3d25bc", "filename": "libjava/classpath/gnu/classpath/jdwp/value/ArrayValue.java", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.java?ref=aa2473e4fcc82761d92c32ea7a459b8df8196864", "patch": "@@ -0,0 +1,92 @@\n+/* ArrayValue.java -- JDWP wrapper class for an Object value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMIdManager;\n+import gnu.classpath.jdwp.id.ObjectId;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an Array value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public class ArrayValue\n+    extends Value\n+{\n+  // The Array wrapped by this class represented as a Object\n+  Object _value;\n+\n+  /**\n+   * Create a new ArrayValue from an Object\n+   * \n+   * @param value the Object to wrap\n+   */\n+  public ArrayValue(Object value)\n+  {\n+    super(JdwpConstants.Tag.ARRAY);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return _value;\n+  }\n+\n+  /**\n+   * Write the wrapped object to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    ObjectId oid = VMIdManager.getDefault().getObjectId(_value);\n+    oid.write(os);\n+  }\n+}"}, {"sha": "f2352401ec7824dd7000c9a245b59203151dde1c", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/ArrayValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.class?ref=aa2473e4fcc82761d92c32ea7a459b8df8196864"}, {"sha": "6f2d523323300c99e6578544009d2d05ba5742eb", "filename": "libjava/gnu/classpath/jdwp/natVMFrame.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc?ref=aa2473e4fcc82761d92c32ea7a459b8df8196864", "patch": "@@ -24,6 +24,7 @@ details. */\n #include <gnu/classpath/jdwp/exception/JdwpInternalErrorException.h>\n #include <gnu/classpath/jdwp/exception/TypeMismatchException.h>\n #include <gnu/classpath/jdwp/util/NullObject.h>\n+#include <gnu/classpath/jdwp/value/ArrayValue.h>\n #include <gnu/classpath/jdwp/value/ByteValue.h>\n #include <gnu/classpath/jdwp/value/BooleanValue.h>\n #include <gnu/classpath/jdwp/value/CharValue.h>\n@@ -240,6 +241,14 @@ gnu::classpath::jdwp::VMFrame::getValue (jint slot, jbyte sig)\n     case 'V':\n       value = new VoidValue ();\n       break;\n+    case '[':\n+      {\n+        Object *obj = getObjectJVMTI (env, thread, slot, depth, sig);\n+        if (obj == NULL)\n+          obj = new util::NullObject ();\n+        value = new ArrayValue (obj);\n+        break;\n+      }\n     default:\n       Object *obj = getObjectJVMTI (env, thread, slot, depth, sig);\n       if (obj == NULL)\n@@ -313,6 +322,12 @@ gnu::classpath::jdwp::VMFrame::setValue (jint slot, Value* value)\n       }\n     case 'V':\n       break;\n+    case '[':\n+      {\n+        ArrayValue *val = reinterpret_cast<ArrayValue *> (value);\n+        setObjectJVMTI (env, thread, slot, depth, sig, val->getObject ());\n+        break;\n+      }\n     default:\n       {\n         ObjectValue *val = reinterpret_cast<ObjectValue *> (value);"}, {"sha": "3c6e6935e30442ccb0bffe9acb47d53d7b9789b3", "filename": "libjava/gnu/classpath/jdwp/value/ArrayValue.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2473e4fcc82761d92c32ea7a459b8df8196864/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FArrayValue.h?ref=aa2473e4fcc82761d92c32ea7a459b8df8196864", "patch": "@@ -0,0 +1,41 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_ArrayValue__\n+#define __gnu_classpath_jdwp_value_ArrayValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class ArrayValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::ArrayValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  ArrayValue(::java::lang::Object *);\n+public: // actually protected\n+  virtual ::java::lang::Object * getObject();\n+  virtual void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  ::java::lang::Object * __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_ArrayValue__"}]}