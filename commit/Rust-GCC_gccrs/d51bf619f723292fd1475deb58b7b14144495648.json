{"sha": "d51bf619f723292fd1475deb58b7b14144495648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxYmY2MTlmNzIzMjkyZmQxNDc1ZGViNThiN2IxNDE0NDQ5NTY0OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-04-07T15:05:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:15Z"}, "message": "[Ada] ACATS C452005/C452006 memberships use wrong equality operation\n\n2020-06-16  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* sem_aux.ads, sem_aux.adb (Is_Record_Or_Limited_Type): New\n\tfunction.\n\t* exp_ch4.adb, sem_ch4.adb (Analyze_Membership_Op,\n\tExpand_Set_Membership.Make_Cond): Choose between primitive and\n\tpredefined equality for membership tests.", "tree": {"sha": "379b3136c732eac2b97401a2e7789b4d3084adb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/379b3136c732eac2b97401a2e7789b4d3084adb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d51bf619f723292fd1475deb58b7b14144495648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51bf619f723292fd1475deb58b7b14144495648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51bf619f723292fd1475deb58b7b14144495648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51bf619f723292fd1475deb58b7b14144495648/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c9a82fec0e08b24ee49c94c3cdfd6c426042f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9a82fec0e08b24ee49c94c3cdfd6c426042f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9a82fec0e08b24ee49c94c3cdfd6c426042f64"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "3d706bf9507f09bab2d9fb97a775bc85f978bfe1", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51bf619f723292fd1475deb58b7b14144495648/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51bf619f723292fd1475deb58b7b14144495648/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=d51bf619f723292fd1475deb58b7b14144495648", "patch": "@@ -12717,10 +12717,13 @@ package body Exp_Ch4 is\n                 Left_Opnd  => L,\n                 Right_Opnd => R);\n \n-            --  We reset the Entity since we do not want to bypass the operator\n-            --  resolution.\n+            if Is_Record_Or_Limited_Type (Etype (Alt)) then\n \n-            Set_Entity (Cond, Empty);\n+               --  We reset the Entity in order to use the primitive equality\n+               --  of the type, as per RM 4.5.2 (28.1/4).\n+\n+               Set_Entity (Cond, Empty);\n+            end if;\n          end if;\n \n          return Cond;"}, {"sha": "dbff7d8e20cc2549acb044c07b6bc7bb710d29d0", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51bf619f723292fd1475deb58b7b14144495648/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51bf619f723292fd1475deb58b7b14144495648/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=d51bf619f723292fd1475deb58b7b14144495648", "patch": "@@ -1330,6 +1330,15 @@ package body Sem_Aux is\n                                N_Protected_Definition);\n    end Is_Protected_Operation;\n \n+   -------------------------------\n+   -- Is_Record_Or_Limited_Type --\n+   -------------------------------\n+\n+   function Is_Record_Or_Limited_Type (Typ : Entity_Id) return Boolean is\n+   begin\n+      return Is_Record_Type (Typ) or else Is_Limited_Type (Typ);\n+   end Is_Record_Or_Limited_Type;\n+\n    ----------------------\n    -- Nearest_Ancestor --\n    ----------------------"}, {"sha": "c15c2712e2adfd1404eb20049d16a9b48975964b", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51bf619f723292fd1475deb58b7b14144495648/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51bf619f723292fd1475deb58b7b14144495648/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=d51bf619f723292fd1475deb58b7b14144495648", "patch": "@@ -362,6 +362,9 @@ package Sem_Aux is\n    --  Given a subprogram or entry, determines whether E is a protected entry\n    --  or subprogram.\n \n+   function Is_Record_Or_Limited_Type (Typ : Entity_Id) return Boolean;\n+   --  Return True if Typ requires is a record or limited type.\n+\n    function Nearest_Ancestor (Typ : Entity_Id) return Entity_Id;\n    --  Given a subtype Typ, this function finds out the nearest ancestor from\n    --  which constraints and predicates are inherited. There is no simple link"}, {"sha": "fe8aed59768727bf5fb790d168ac4a41965a6f7f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51bf619f723292fd1475deb58b7b14144495648/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51bf619f723292fd1475deb58b7b14144495648/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d51bf619f723292fd1475deb58b7b14144495648", "patch": "@@ -3018,10 +3018,14 @@ package body Sem_Ch4 is\n                Op := Make_Op_Ne (Loc, Left_Opnd  => L, Right_Opnd => R);\n             end if;\n \n-            --  We reset the Entity since we do not want to bypass the operator\n-            --  resolution.\n+            if Is_Record_Or_Limited_Type (Etype (L)) then\n+\n+               --  We reset the Entity in order to use the primitive equality\n+               --  of the type, as per RM 4.5.2 (28.1/4).\n+\n+               Set_Entity (Op, Empty);\n+            end if;\n \n-            Set_Entity (Op, Empty);\n             Rewrite (N, Op);\n             Analyze (N);\n             return;"}]}