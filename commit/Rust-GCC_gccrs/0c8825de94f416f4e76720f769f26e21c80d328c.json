{"sha": "0c8825de94f416f4e76720f769f26e21c80d328c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4ODI1ZGU5NGY0MTZmNGU3NjcyMGY3NjlmMjZlMjFjODBkMzI4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-03-04T22:10:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-04T22:10:49Z"}, "message": "re PR c++/70035 (Calling a non-virtual member in base-class constructor call with ubsan causes segfault when superclass has virtual member with same name)\n\n\tPR c++/70035\n\t* cp-tree.h (cp_ubsan_maybe_initialize_vtbl_ptrs): New prototype.\n\t* decl.c (start_preparsed_function): Call\n\tcp_ubsan_maybe_initialize_vtbl_ptrs if needed.\n\t* cp-ubsan.c (cp_ubsan_dfs_initialize_vtbl_ptrs,\n\tcp_ubsan_maybe_initialize_vtbl_ptrs): New functions.\n\n\t* g++.dg/ubsan/pr70035.C: New test.\n\nFrom-SVN: r233984", "tree": {"sha": "8a513c754cfa209a3137cc23ee5567d3dfd1c8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a513c754cfa209a3137cc23ee5567d3dfd1c8f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c8825de94f416f4e76720f769f26e21c80d328c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8825de94f416f4e76720f769f26e21c80d328c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8825de94f416f4e76720f769f26e21c80d328c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8825de94f416f4e76720f769f26e21c80d328c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "188e53bd7e191526f2c6804601c031f8f7c53e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188e53bd7e191526f2c6804601c031f8f7c53e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188e53bd7e191526f2c6804601c031f8f7c53e14"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "1bfb146bf37d3ee023a123e326816ed1eda47adc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c8825de94f416f4e76720f769f26e21c80d328c", "patch": "@@ -1,3 +1,12 @@\n+2016-03-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70035\n+\t* cp-tree.h (cp_ubsan_maybe_initialize_vtbl_ptrs): New prototype.\n+\t* decl.c (start_preparsed_function): Call\n+\tcp_ubsan_maybe_initialize_vtbl_ptrs if needed.\n+\t* cp-ubsan.c (cp_ubsan_dfs_initialize_vtbl_ptrs,\n+\tcp_ubsan_maybe_initialize_vtbl_ptrs): New functions.\n+\n 2016-03-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67364"}, {"sha": "7de0a55e3f5965b6126e43114cdca77b1f2f9231", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0c8825de94f416f4e76720f769f26e21c80d328c", "patch": "@@ -6940,6 +6940,7 @@ extern void cp_ubsan_maybe_instrument_member_call (tree);\n extern void cp_ubsan_instrument_member_accesses (tree *);\n extern tree cp_ubsan_maybe_instrument_downcast\t(location_t, tree, tree, tree);\n extern tree cp_ubsan_maybe_instrument_cast_to_vbase (location_t, tree, tree);\n+extern void cp_ubsan_maybe_initialize_vtbl_ptrs (tree);\n \n /* -- end of C++ */\n "}, {"sha": "2ad0a26207f33f42e924b59d33460bdbc1ed781b", "filename": "gcc/cp/cp-ubsan.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Fcp%2Fcp-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Fcp%2Fcp-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-ubsan.c?ref=0c8825de94f416f4e76720f769f26e21c80d328c", "patch": "@@ -272,3 +272,55 @@ cp_ubsan_maybe_instrument_cast_to_vbase (location_t loc, tree type, tree op)\n   return cp_ubsan_maybe_instrument_vptr (loc, op, type, true,\n \t\t\t\t\t UBSAN_CAST_TO_VBASE);\n }\n+\n+/* Called from initialize_vtbl_ptrs via dfs_walk.  BINFO is the base\n+   which we want to initialize the vtable pointer for, DATA is\n+   TREE_LIST whose TREE_VALUE is the this ptr expression.  */\n+\n+static tree\n+cp_ubsan_dfs_initialize_vtbl_ptrs (tree binfo, void *data)\n+{\n+  if (!TYPE_CONTAINS_VPTR_P (BINFO_TYPE (binfo)))\n+    return dfs_skip_bases;\n+\n+  if (!BINFO_PRIMARY_P (binfo) || BINFO_VIRTUAL_P (binfo))\n+    {\n+      tree base_ptr = TREE_VALUE ((tree) data);\n+\n+      base_ptr = build_base_path (PLUS_EXPR, base_ptr, binfo, /*nonnull=*/1,\n+\t\t\t\t  tf_warning_or_error);\n+\n+      /* Compute the location of the vtpr.  */\n+      tree vtbl_ptr\n+\t= build_vfield_ref (cp_build_indirect_ref (base_ptr, RO_NULL,\n+\t\t\t\t\t\t   tf_warning_or_error),\n+\t\t\t    TREE_TYPE (binfo));\n+      gcc_assert (vtbl_ptr != error_mark_node);\n+\n+      /* Assign NULL to the vptr.  */\n+      tree vtbl = build_zero_cst (TREE_TYPE (vtbl_ptr));\n+      finish_expr_stmt (cp_build_modify_expr (vtbl_ptr, NOP_EXPR, vtbl,\n+\t\t\t\t\t      tf_warning_or_error));\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Initialize all the vtable pointers in the object pointed to by\n+   ADDR to NULL, so that we catch invalid calls to methods before\n+   mem-initializers are completed.  */\n+\n+void\n+cp_ubsan_maybe_initialize_vtbl_ptrs (tree addr)\n+{\n+  if (!cp_ubsan_instrument_vptr_p (NULL_TREE))\n+    return;\n+\n+  tree type = TREE_TYPE (TREE_TYPE (addr));\n+  tree list = build_tree_list (type, addr);\n+\n+  /* Walk through the hierarchy, initializing the vptr in each base\n+     class to NULL.  */\n+  dfs_walk_once (TYPE_BINFO (type), cp_ubsan_dfs_initialize_vtbl_ptrs,\n+\t\t NULL, list);\n+}"}, {"sha": "0edf1665b014fcda524ff0b8262ed8adfeec796a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0c8825de94f416f4e76720f769f26e21c80d328c", "patch": "@@ -14136,6 +14136,13 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n       finish_expr_stmt (exprstmt);\n     }\n \n+  if (!processing_template_decl\n+      && DECL_CONSTRUCTOR_P (decl1)\n+      && (flag_sanitize & SANITIZE_VPTR)\n+      && !DECL_CLONED_FUNCTION_P (decl1)\n+      && !implicit_default_ctor_p (decl1))\n+    cp_ubsan_maybe_initialize_vtbl_ptrs (current_class_ptr);\n+\n   return true;\n }\n "}, {"sha": "c97c20d567392b1c99183d76c3a932400f4218d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c8825de94f416f4e76720f769f26e21c80d328c", "patch": "@@ -1,5 +1,8 @@\n 2016-03-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/70035\n+\t* g++.dg/ubsan/pr70035.C: New test.\n+\n \tPR target/70062\n \t* gcc.target/i386/pr70062.c: New test.\n "}, {"sha": "a1d3dc2ec1698a9ab0667e18571989ec35f523eb", "filename": "gcc/testsuite/g++.dg/ubsan/pr70035.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70035.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8825de94f416f4e76720f769f26e21c80d328c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70035.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70035.C?ref=0c8825de94f416f4e76720f769f26e21c80d328c", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/70035\n+// { dg-do run }\n+// { dg-shouldfail \"ubsan\" }\n+// { dg-options \"-fsanitize=vptr -fno-sanitize-recover=undefined\" }\n+\n+struct A {\n+  A (int) {}\n+  virtual int foo () { return 1; }\n+};\n+struct B : public A {\n+  using A::foo;\n+  B (int x) : A (foo (x)) {}\n+  int foo (int x) { return x * 2; }\n+};\n+\n+int\n+main ()\n+{\n+  B b (20);\n+}\n+\n+// { dg-output \"\\[^\\n\\r]*pr70035.C:12:\\[0-9]*: runtime error: member call on address 0x\\[0-9a-fA-F]* which does not point to an object of type 'B'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"0x\\[0-9a-fA-F]*: note: object has invalid vptr(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"  ?.. .. .. ..  ?.. .. .. ..  ?.. .. .. .. \\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"              ?\\\\^~~~~~~~~~~\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"              ?invalid vptr\" }"}]}