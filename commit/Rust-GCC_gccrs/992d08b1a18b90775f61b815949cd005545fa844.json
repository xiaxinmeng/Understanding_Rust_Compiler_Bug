{"sha": "992d08b1a18b90775f61b815949cd005545fa844", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkyZDA4YjFhMThiOTA3NzVmNjFiODE1OTQ5Y2QwMDU1NDVmYTg0NA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-05-03T11:48:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-05-03T11:48:37Z"}, "message": "darwin.c (machopic_define_symbol): Use gcc_assert or gcc_unreachable as appropriate.\n\n\t* config/darwin.c (machopic_define_symbol): Use gcc_assert or\n\tgcc_unreachable as appropriate.\n\t(machopic_function_base_name, machopic_indirect_data_reference,\n\tmachopic_legitimize_pic_address, darwin_non_lazy_pcrel): Likewise.\n\t* config/host-darwin.c (darwin_gt_pch_use_address): Likewise\n\t* config/rs6000/altivec.md (*mov<mode>_internal,\n\tbuild_vector_mask_for_load): Likewise.\n\t* config/rs6000/darwin.md (movdf_low_si, movdf_low_di,\n\t*call_nonlocal_darwin64, *call_value_nonlocal_darwin64,\n\t*sibcall_symbolic_64, *sibcall_value_symbolic_64): Likewise.\n\t* config/rs6000/predicates.md (easy_fp_constant,\n\tlogical_operand): Likewise.\n\t* config/rs6000/rs6000.c (spe_expand_predicate_builtin,\n\tcompute_save_world_info, rs6000_emit_prologue,\n\trs6000_output_mi_thunk): Reword comments to avoid 'abort'.\n\t* config/rs6000/host-darwin.c (segv_handler): Use fancy_abort\n\tdirectly.\n\nFrom-SVN: r99152", "tree": {"sha": "3982d7ef496e9978739764a7e3cbdbff3fe9ffa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3982d7ef496e9978739764a7e3cbdbff3fe9ffa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/992d08b1a18b90775f61b815949cd005545fa844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992d08b1a18b90775f61b815949cd005545fa844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/992d08b1a18b90775f61b815949cd005545fa844", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992d08b1a18b90775f61b815949cd005545fa844/comments", "author": null, "committer": null, "parents": [{"sha": "8d8e6b952b47193957cb744bd923890185f43002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8e6b952b47193957cb744bd923890185f43002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8e6b952b47193957cb744bd923890185f43002"}], "stats": {"total": 215, "additions": 150, "deletions": 65}, "files": [{"sha": "f6ab7945c682b0b9b93015a503708b5b4d8deb37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992d08b1a18b90775f61b815949cd005545fa844/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992d08b1a18b90775f61b815949cd005545fa844/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=992d08b1a18b90775f61b815949cd005545fa844", "patch": "@@ -1,3 +1,23 @@\n+2005-05-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/darwin.c (machopic_define_symbol): Use gcc_assert or\n+\tgcc_unreachable as appropriate.\n+\t(machopic_function_base_name, machopic_indirect_data_reference,\n+\tmachopic_legitimize_pic_address, darwin_non_lazy_pcrel): Likewise.\n+\t* config/host-darwin.c (darwin_gt_pch_use_address): Likewise\n+\t* config/rs6000/altivec.md (*mov<mode>_internal,\n+\tbuild_vector_mask_for_load): Likewise.\n+\t* config/rs6000/darwin.md (movdf_low_si, movdf_low_di,\n+\t*call_nonlocal_darwin64, *call_value_nonlocal_darwin64,\n+\t*sibcall_symbolic_64, *sibcall_value_symbolic_64): Likewise.\n+\t* config/rs6000/predicates.md (easy_fp_constant,\n+\tlogical_operand): Likewise.\n+\t* config/rs6000/rs6000.c (spe_expand_predicate_builtin,\n+\tcompute_save_world_info, rs6000_emit_prologue,\n+\trs6000_output_mi_thunk): Reword comments to avoid 'abort'.\n+\t* config/rs6000/host-darwin.c (segv_handler): Use fancy_abort\n+\tdirectly.\n+\n 2005-05-03  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR middle-end/21282"}, {"sha": "602df2f7f703a82139b82b7add4ae7d2fb14b89a", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=992d08b1a18b90775f61b815949cd005545fa844", "patch": "@@ -191,8 +191,8 @@ void\n machopic_define_symbol (rtx mem)\n {\n   rtx sym_ref;\n-  if (GET_CODE (mem) != MEM)\n-    abort ();\n+  \n+  gcc_assert (GET_CODE (mem) == MEM);\n   sym_ref = XEXP (mem, 0);\n   SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_DEFINED;\n }\n@@ -203,8 +203,7 @@ const char *\n machopic_function_base_name (void)\n {\n   /* if dynamic-no-pic is on, we should not get here */\n-  if (MACHO_DYNAMIC_NO_PIC_P)\n-    abort ();\n+  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);\n \n   if (function_base == NULL)\n     function_base =\n@@ -237,8 +236,7 @@ machopic_output_function_base_name (FILE *file)\n   const char *current_name;\n \n   /* If dynamic-no-pic is on, we should not get here.  */\n-  if (MACHO_DYNAMIC_NO_PIC_P)\n-    abort ();\n+  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);\n   current_name =\n     IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n   if (function_base_func_name != current_name)\n@@ -425,7 +423,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n  \t  emit_insn (gen_macho_low (reg, reg, orig));\n #else\n \t   /* some other cpu -- writeme!  */\n-\t   abort ();\n+\t   gcc_unreachable ();\n #endif\n \t   return reg;\n \t}\n@@ -440,8 +438,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n #if defined (TARGET_TOC) /* i.e., PowerPC */\n \t  rtx hi_sum_reg = (no_new_pseudos ? reg : gen_reg_rtx (Pmode));\n \n-\t  if (reg == NULL)\n-\t    abort ();\n+\t  gcc_assert (reg);\n \n \t  emit_insn (gen_rtx_SET (Pmode, hi_sum_reg,\n \t\t\t      gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n@@ -452,7 +449,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t  orig = reg;\n #else\n #if defined (HAVE_lo_sum)\n-\t  if (reg == 0) abort ();\n+\t  gcc_assert (reg);\n \n \t  emit_insn (gen_rtx_SET (VOIDmode, reg,\n \t\t\t\t  gen_rtx_HIGH (Pmode, offset)));\n@@ -602,10 +599,8 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t{\n \t  if (reg == 0)\n \t    {\n-\t      if (reload_in_progress)\n-\t\tabort ();\n-\t      else\n-\t\treg = gen_reg_rtx (Pmode);\n+\t      gcc_assert (!reload_in_progress);\n+\t      reg = gen_reg_rtx (Pmode);\n \t    }\n \n #ifdef HAVE_lo_sum\n@@ -624,7 +619,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t      emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n #else\n \t      /* Some other CPU -- WriteMe! but right now there are no other platform that can use dynamic-no-pic  */\n-\t      abort ();\n+\t      gcc_unreachable ();\n #endif\n \t      pic_ref = reg;\n \t    }\n@@ -717,10 +712,8 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \n \t      if (reg == 0)\n \t\t{\n-\t\t  if (reload_in_progress)\n-\t\t    abort ();\n-\t\t  else\n-\t\t    reg = gen_reg_rtx (Pmode);\n+\t\t  gcc_assert (!reload_in_progress);\n+\t\t  reg = gen_reg_rtx (Pmode);\n \t\t}\n \n \t      hi_sum_reg = reg;\n@@ -1315,8 +1308,7 @@ darwin_non_lazy_pcrel (FILE *file, rtx addr)\n {\n   const char *nlp_name;\n \n-  if (GET_CODE (addr) != SYMBOL_REF)\n-    abort ();\n+  gcc_assert (GET_CODE (addr) == SYMBOL_REF);\n \n   nlp_name = machopic_indirection_name (addr, /*stub_p=*/false);\n   fputs (\"\\t.long\\t\", file);"}, {"sha": "f94120f10bb397ceb445eb284563476f57e4032b", "filename": "gcc/config/host-darwin.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Fhost-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Fhost-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fhost-darwin.c?ref=992d08b1a18b90775f61b815949cd005545fa844", "patch": "@@ -49,9 +49,8 @@ darwin_gt_pch_use_address (void *addr, size_t sz, int fd, size_t off)\n   void *mmap_result;\n   int ret;\n \n-  if ((size_t)pch_address_space % pagesize != 0\n-      || sizeof (pch_address_space) % pagesize != 0)\n-    abort ();\n+  gcc_assert ((size_t)pch_address_space % pagesize == 0\n+\t      && sizeof (pch_address_space) % pagesize == 0);\n   \n   ret = (addr == pch_address_space && sz <= sizeof (pch_address_space));\n   if (! ret)\n@@ -73,8 +72,7 @@ darwin_gt_pch_use_address (void *addr, size_t sz, int fd, size_t off)\n       ret = mmap_result != (void *) MAP_FAILED;\n \n       /* Sanity check for broken MAP_FIXED.  */\n-      if (ret && mmap_result != addr)\n-\tabort ();\n+      gcc_assert (!ret || mmap_result == addr);\n     }\n \n   return ret;"}, {"sha": "4b4f9502ec37f5e1a280798e16923d1900b07dd4", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=992d08b1a18b90775f61b815949cd005545fa844", "patch": "@@ -102,7 +102,7 @@\n     case 4: return \"#\";\n     case 5: return \"#\";\n     case 6: return output_vec_const_move (operands);\n-    default: abort();\n+    default: gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"vecstore,vecload,vecsimple,store,load,*,*\")])\n@@ -1649,8 +1649,7 @@\n   rtx addr;\n   rtx temp;\n \n-  if (GET_CODE (operands[1]) != MEM)\n-    abort ();\n+  gcc_assert (GET_CODE (operands[1]) == MEM);\n \n   addr = XEXP (operands[1], 0);\n   temp = gen_reg_rtx (GET_MODE (addr));"}, {"sha": "b27e6e8664689d0ddfd453fc7c844f901a2a3f87", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=992d08b1a18b90775f61b815949cd005545fa844", "patch": "@@ -63,7 +63,7 @@ Boston, MA 02111-1307, USA.  */\n \t  }\n \t}\n       default:\n-\tabort();\n+\tgcc_unreachable ();\n     }\n }\"\n   [(set_attr \"type\" \"load\")\n@@ -84,7 +84,7 @@ Boston, MA 02111-1307, USA.  */\n       case 1:\n \treturn \\\"ld %0,lo16(%2)(%1)\\\";\n       default:\n-\tabort();\n+\tgcc_unreachable ();\n     }\n }\"\n   [(set_attr \"type\" \"load\")\n@@ -342,7 +342,7 @@ Boston, MA 02111-1307, USA.  */\n #if TARGET_MACHO\n   return output_call(insn, operands, 0, 2);\n #else\n-  abort();\n+  gcc_unreachable ();\n #endif\n }\n   [(set_attr \"type\" \"branch,branch\")\n@@ -373,7 +373,7 @@ Boston, MA 02111-1307, USA.  */\n #if TARGET_MACHO\n   return output_call(insn, operands, 1, 3);\n #else\n-  abort();\n+  gcc_unreachable ();\n #endif\n }\n   [(set_attr \"type\" \"branch,branch\")\n@@ -423,7 +423,7 @@ Boston, MA 02111-1307, USA.  */\n     {\n       case 0:  return \\\"b %z0\\\";\n       case 1:  return \\\"b%T0\\\";\n-      default:  abort();\n+      default:  gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"type\" \"branch\")\n@@ -443,7 +443,7 @@ Boston, MA 02111-1307, USA.  */\n     {\n       case 0:  return \\\"b %z1\\\";\n       case 1:  return \\\"b%T1\\\";\n-      default:  abort();\n+      default:  gcc_unreachable ();\n     }\n }\"\n   [(set_attr \"type\" \"branch\")"}, {"sha": "ca32cffb465ca61546733dd2f5be3e6562d84914", "filename": "gcc/config/rs6000/host-darwin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c?ref=992d08b1a18b90775f61b815949cd005545fa844", "patch": "@@ -107,7 +107,7 @@ segv_handler (int sig ATTRIBUTE_UNUSED,\n \t}\n       \n       if (global_dc->abort_on_error)\n-\tabort ();\n+\tfancy_abort (__FILE__, __LINE__, __FUNCTION__);\n \n       exit (FATAL_EXIT_CODE);\n     }"}, {"sha": "05db033089afb7045294719412d9798ca348dea4", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=992d08b1a18b90775f61b815949cd005545fa844", "patch": "@@ -178,6 +178,9 @@\n (define_predicate \"easy_fp_constant\"\n   (match_code \"const_double\")\n {\n+  long k[4];\n+  REAL_VALUE_TYPE rv;\n+\n   if (GET_MODE (op) != mode\n       || (GET_MODE_CLASS (mode) != MODE_FLOAT && mode != DImode))\n     return 0;\n@@ -198,25 +201,18 @@\n     return 0;\n #endif\n \n-  if (mode == TFmode)\n+  switch (mode)\n     {\n-      long k[4];\n-      REAL_VALUE_TYPE rv;\n-\n+    case TFmode:\n       REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n       REAL_VALUE_TO_TARGET_LONG_DOUBLE (rv, k);\n \n       return (num_insns_constant_wide ((HOST_WIDE_INT) k[0]) == 1\n \t      && num_insns_constant_wide ((HOST_WIDE_INT) k[1]) == 1\n \t      && num_insns_constant_wide ((HOST_WIDE_INT) k[2]) == 1\n \t      && num_insns_constant_wide ((HOST_WIDE_INT) k[3]) == 1);\n-    }\n-\n-  else if (mode == DFmode)\n-    {\n-      long k[2];\n-      REAL_VALUE_TYPE rv;\n \n+    case DFmode:\n       /* Force constants to memory before reload to utilize\n \t compress_float_constant.\n \t Avoid this when flag_unsafe_math_optimizations is enabled\n@@ -232,13 +228,8 @@\n \n       return (num_insns_constant_wide ((HOST_WIDE_INT) k[0]) == 1\n \t      && num_insns_constant_wide ((HOST_WIDE_INT) k[1]) == 1);\n-    }\n-\n-  else if (mode == SFmode)\n-    {\n-      long l;\n-      REAL_VALUE_TYPE rv;\n \n+    case SFmode:\n       /* Force constants to memory before reload to utilize\n \t compress_float_constant.\n \t Avoid this when flag_unsafe_math_optimizations is enabled\n@@ -249,20 +240,21 @@\n \treturn 0;\n \n       REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n-      REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+      REAL_VALUE_TO_TARGET_SINGLE (rv, k[0]);\n \n-      return num_insns_constant_wide (l) == 1;\n-    }\n+      return num_insns_constant_wide (k[0]) == 1;\n \n-  else if (mode == DImode)\n+  case DImode:\n     return ((TARGET_POWERPC64\n \t     && GET_CODE (op) == CONST_DOUBLE && CONST_DOUBLE_LOW (op) == 0)\n \t    || (num_insns_constant (op, DImode) <= 2));\n \n-  else if (mode == SImode)\n+  case SImode:\n     return 1;\n-  else\n-    abort ();\n+\n+  default:\n+    gcc_unreachable ();\n+  }\n })\n \n ;; Return 1 if the operand is a CONST_VECTOR and can be loaded into a\n@@ -406,8 +398,7 @@\n     }\n   else if (GET_CODE (op) == CONST_DOUBLE)\n     {\n-      if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n-\tabort ();\n+      gcc_assert (GET_MODE_BITSIZE (mode) > HOST_BITS_PER_WIDE_INT);\n \n       opl = CONST_DOUBLE_LOW (op);\n       oph = CONST_DOUBLE_HIGH (op);"}, {"sha": "3e49dd008a5468cd41d2b0d7ac4331512b6bebbb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 89, "deletions": 4, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992d08b1a18b90775f61b815949cd005545fa844/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=992d08b1a18b90775f61b815949cd005545fa844", "patch": "@@ -1832,9 +1832,13 @@ num_insns_constant_wide (HOST_WIDE_INT value)\n int\n num_insns_constant (rtx op, enum machine_mode mode)\n {\n+<<<<<<< rs6000.c\n+  switch (GET_CODE (op))\n+=======\n   HOST_WIDE_INT low, high;\n   \n   switch (GET_CODE (op))\n+>>>>>>> 1.815\n     {\n     case CONST_INT:\n #if HOST_BITS_PER_WIDE_INT == 64\n@@ -1856,6 +1860,54 @@ num_insns_constant (rtx op, enum machine_mode mode)\n \t    return num_insns_constant_wide ((HOST_WIDE_INT) l);\n \t  }\n \n+<<<<<<< rs6000.c\n+\t{\n+\t  HOST_WIDE_INT low;\n+\t  HOST_WIDE_INT high;\n+\t  long l[2];\n+\t  REAL_VALUE_TYPE rv;\n+\t  int endian = (WORDS_BIG_ENDIAN == 0);\n+\t  \n+\t  if (mode == VOIDmode || mode == DImode)\n+\t    {\n+\t      high = CONST_DOUBLE_HIGH (op);\n+\t      low  = CONST_DOUBLE_LOW (op);\n+\t    }\n+\t  else\n+\t    {\n+\t      REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n+\t      REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n+\t      high = l[endian];\n+\t      low  = l[1 - endian];\n+\t    }\n+\n+\t  if (TARGET_32BIT)\n+\t    return (num_insns_constant_wide (low)\n+\t\t    + num_insns_constant_wide (high));\n+\t  \n+\t  else\n+\t    {\n+\t      if (high == 0 && low >= 0)\n+\t\treturn num_insns_constant_wide (low);\n+\t      \n+\t      else if (high == -1 && low < 0)\n+\t\treturn num_insns_constant_wide (low);\n+\t      \n+\t      else if (mask64_operand (op, mode))\n+\t\treturn 2;\n+\t      \n+\t      else if (low == 0)\n+\t\treturn num_insns_constant_wide (high) + 1;\n+\t      \n+\t      else\n+\t\treturn (num_insns_constant_wide (high)\n+\t\t\t+ num_insns_constant_wide (low) + 1);\n+\t    }\n+\t}\n+\t\n+    default:\n+      gcc_unreachable ();\n+=======\n \tif (mode == VOIDmode || mode == DImode)\n \t  {\n \t    high = CONST_DOUBLE_HIGH (op);\n@@ -1894,6 +1946,7 @@ num_insns_constant (rtx op, enum machine_mode mode)\n \t\n     default:\n       gcc_unreachable ();\n+>>>>>>> 1.815\n     }\n }\n \n@@ -3275,10 +3328,16 @@ rs6000_emit_set_const (rtx dest, enum machine_mode mode,\n \t\t\t      gen_rtx_IOR (SImode, result,\n \t\t\t\t\t   GEN_INT (INTVAL (source) & 0xffff))));\n       result = dest;\n+<<<<<<< rs6000.c\n+\n+    case DImode:\n+      switch (GET_CODE (source))\n+=======\n       break;\n \n     case DImode:\n       switch (GET_CODE (source))\n+>>>>>>> 1.815\n \t{\n \tcase CONST_INT:\n \t  c0 = INTVAL (source);\n@@ -7058,7 +7117,7 @@ spe_expand_predicate_builtin (enum insn_code icode, tree arglist, rtx target)\n     case 0:\n       /* We need to get to the OV bit, which is the ORDERED bit.  We\n \t could generate (ordered:SI (reg:CC xx) (const_int 0)), but\n-\t that's ugly and will trigger a validate_condition_mode abort.\n+\t that's ugly and will make validate_condition_mode die.\n \t So let's just use another pattern.  */\n       emit_insn (gen_move_from_CR_ov_bit (target, scratch));\n       return target;\n@@ -7233,13 +7292,24 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     if (d->code == fcode)\n       return rs6000_expand_binop_builtin (d->icode, arglist, target);\n \n+<<<<<<< rs6000.c\n+  /* Handle simple ternary operations.  */\n+  d = (struct builtin_description *) bdesc_3arg;\n+  for (i = 0; i < ARRAY_SIZE  (bdesc_3arg); i++, d++)\n+    if (d->code == fcode)\n+      return rs6000_expand_ternop_builtin (d->icode, arglist, target);\n+  \n+  gcc_unreachable ();\n+  return NULL_RTX;\n+=======\n   /* Handle simple ternary operations.  */\n   d = (struct builtin_description *) bdesc_3arg;\n   for (i = 0; i < ARRAY_SIZE  (bdesc_3arg); i++, d++)\n     if (d->code == fcode)\n       return rs6000_expand_ternop_builtin (d->icode, arglist, target);\n   \n   gcc_unreachable ();\n+>>>>>>> 1.815\n }\n \n static tree\n@@ -11718,7 +11788,7 @@ compute_save_world_info (rs6000_stack_t *info_ptr)\n \n       /* Because the Darwin register save/restore routines only handle\n \t F14 .. F31 and V20 .. V31 as per the ABI, perform a consistency\n-\t check and abort if there's something worng.  */\n+\t check.  */\n       gcc_assert (info_ptr->first_fp_reg_save >= FIRST_SAVED_FP_REGNO\n \t\t  && (info_ptr->first_altivec_reg_save\n \t\t      >= FIRST_SAVED_ALTIVEC_REGNO));\n@@ -13126,7 +13196,7 @@ rs6000_emit_prologue (void)\n \n       /* The SAVE_WORLD and RESTORE_WORLD routines make a number of\n \t assumptions about the offsets of various bits of the stack\n-\t frame.  Abort if things aren't what they should be.  */\n+\t frame.  */\n       gcc_assert (info->gp_save_offset == -220\n \t\t  && info->fp_save_offset == -144\n \t\t  && info->lr_save_offset == 8\n@@ -14542,7 +14612,7 @@ rs6000_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n #endif\n \n   /* gen_sibcall expects reload to convert scratch pseudo to LR so we must\n-     generate sibcall RTL explicitly to avoid constraint abort.  */\n+     generate sibcall RTL explicitly.  */\n   insn = emit_call_insn (\n \t   gen_rtx_PARALLEL (VOIDmode,\n \t     gen_rtvec (4,\n@@ -16882,6 +16952,20 @@ rs6000_machopic_legitimize_pic_address (rtx orig, enum machine_mode mode,\n \t  && XEXP (XEXP (orig, 0), 0) == pic_offset_table_rtx)\n \treturn orig;\n \n+<<<<<<< rs6000.c\n+      gcc_assert (GET_CODE (XEXP (orig, 0)) == PLUS);\n+      \n+      /* Use a different reg for the intermediate value, as\n+\t it will be marked UNCHANGING.  */\n+      rtx reg_temp = no_new_pseudos ? reg : gen_reg_rtx (Pmode);\n+      \n+      base = rs6000_machopic_legitimize_pic_address (XEXP (XEXP (orig, 0), 0),\n+\t\t\t\t\t\t     Pmode, reg_temp);\n+      offset =\n+\trs6000_machopic_legitimize_pic_address (XEXP (XEXP (orig, 0), 1),\n+\t\t\t\t\t\tPmode, reg);\n+      \n+=======\n       gcc_assert (GET_CODE (XEXP (orig, 0)) == PLUS);\n       \n       /* Use a different reg for the intermediate value, as\n@@ -16893,6 +16977,7 @@ rs6000_machopic_legitimize_pic_address (rtx orig, enum machine_mode mode,\n \trs6000_machopic_legitimize_pic_address (XEXP (XEXP (orig, 0), 1),\n \t\t\t\t\t\tPmode, reg);\n       \n+>>>>>>> 1.815\n       if (GET_CODE (offset) == CONST_INT)\n \t{\n \t  if (SMALL_INT (offset))"}]}