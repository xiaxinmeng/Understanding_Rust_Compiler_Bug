{"sha": "1824b90d080d42328675176590f8ad08e31fd5ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyNGI5MGQwODBkNDIzMjg2NzUxNzY1OTBmOGFkMDhlMzFmZDVhZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-01-31T14:46:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-01-31T14:46:55Z"}, "message": "tree.h (TYPE_BINFO_SIZE, [...]): Remove.\n\n\t* tree.h (TYPE_BINFO_SIZE, TYPE_BINFO_SIZE_UNIT): Remove.\n\t(BINFO_ELTS): New #define.\n\t* stor-layout.c (finalize_record_size): Don't set them.\n\t* cp/cp-tree.h (BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX,\n\tBINFO_PRIMARY_BASE_OF): Use BINFO_ELTS.\n\t(BINFO_LANG_ELTS): New #define.\n\t* cp/tree.c (make_binfo): Use BINFO_LANG_ELTS.\n\t* java/class.c (make_class): Use BINFO_ELTS.\n\t(set_super_info): Likewse.\n\t(add_interface_do): Likewise.\n\t* objc/objc-act.c (start_class): Use BINFO_ELTS.\n\nFrom-SVN: r62180", "tree": {"sha": "f9db26320f2c4a347eadef38033370d1da458f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9db26320f2c4a347eadef38033370d1da458f7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1824b90d080d42328675176590f8ad08e31fd5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1824b90d080d42328675176590f8ad08e31fd5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1824b90d080d42328675176590f8ad08e31fd5ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1824b90d080d42328675176590f8ad08e31fd5ad/comments", "author": null, "committer": null, "parents": [{"sha": "8f9a402caa6504394a3292da303cdcd84df2e89a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9a402caa6504394a3292da303cdcd84df2e89a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9a402caa6504394a3292da303cdcd84df2e89a"}], "stats": {"total": 72, "additions": 44, "deletions": 28}, "files": [{"sha": "96b25f5ea5fe8d6adc854ec1f73ea000449afce3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -1,3 +1,17 @@\n+2003-01-31  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree.h (TYPE_BINFO_SIZE, TYPE_BINFO_SIZE_UNIT): Remove.\n+\t(BINFO_ELTS): New #define.\n+\t* stor-layout.c (finalize_record_size): Don't set them.\n+\t* cp/cp-tree.h (BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX,\n+\tBINFO_PRIMARY_BASE_OF): Use BINFO_ELTS.\n+\t(BINFO_LANG_ELTS): New #define.\n+\t* cp/tree.c (make_binfo): Use BINFO_LANG_ELTS.\n+\t* java/class.c (make_class): Use BINFO_ELTS.\n+\t(set_super_info): Likewse.\n+\t(add_interface_do): Likewise.\n+\t* objc/objc-act.c (start_class): Use BINFO_ELTS.\n+\n 2003-01-31 Danny Smith <dannysmith@users.sourceforge.net>\n \n \t* timevar.c (getrusage): Don't ever declare if not HAVE_GETRUSAGE."}, {"sha": "4589a912fd110c135d15773430493ca8236ad3b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -1,3 +1,10 @@\n+2003-01-31  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX,\n+\tBINFO_PRIMARY_BASE_OF): Use BINFO_ELTS.\n+\t(BINFO_LANG_ELTS): New #define.\n+\t* tree.c (make_binfo): Use BINFO_LANG_ELTS.\n+\n 2003-01-30  Geoffrey Keating  <geoffk@apple.com>\n \n \t* cp/Make-lang.in: Remove -Wno-error from cp/decl.o."}, {"sha": "764c42827bb2d9751d0ad25385f363790f1c0984", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -1630,17 +1630,21 @@ struct lang_type GTY(())\n \n /* The index in the VTT where this subobject's sub-VTT can be found.\n    NULL_TREE if there is no sub-VTT.  */\n-#define BINFO_SUBVTT_INDEX(NODE) TREE_VEC_ELT (NODE, 8)\n+#define BINFO_SUBVTT_INDEX(NODE) TREE_VEC_ELT (NODE, BINFO_ELTS + 0)\n \n /* The index in the VTT where the vptr for this subobject can be\n    found.  NULL_TREE if there is no secondary vptr in the VTT.  */\n-#define BINFO_VPTR_INDEX(NODE) TREE_VEC_ELT (NODE, 9)\n+#define BINFO_VPTR_INDEX(NODE) TREE_VEC_ELT (NODE, BINFO_ELTS + 1)\n \n /* The binfo of which NODE is a primary base.  (This is different from\n    BINFO_INHERITANCE_CHAIN for virtual base because a virtual base is\n    sometimes a primary base for a class for which it is not an\n    immediate base.)  */\n-#define BINFO_PRIMARY_BASE_OF(NODE) TREE_VEC_ELT (NODE, 10)\n+#define BINFO_PRIMARY_BASE_OF(NODE) TREE_VEC_ELT (NODE, BINFO_ELTS + 2)\n+\n+/* C++ binfos have 3 additional entries.  */\n+\n+#define BINFO_LANG_ELTS (BINFO_ELTS + 3)\n \n /* Nonzero if this binfo has lost its primary base binfo (because that\n    is a nearly-empty virtual base that has been taken by some other"}, {"sha": "320ea9585c8bf56d34f9cc5c257c006c8cdb7bb5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -893,7 +893,7 @@ make_binfo (offset, binfo, vtable, virtuals)\n      tree offset, binfo;\n      tree vtable, virtuals;\n {\n-  tree new_binfo = make_tree_vec (11);\n+  tree new_binfo = make_tree_vec (BINFO_LANG_ELTS);\n   tree type;\n \n   if (TREE_CODE (binfo) == TREE_VEC)"}, {"sha": "062c368bea4ab4203dcf138bd6c23bac63c5d37f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -1,3 +1,9 @@\n+2003-01-31  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (make_class): Use BINFO_ELTS.\n+\t(set_super_info): Likewse.\n+\t(add_interface_do): Likewise.\n+\n 2003-01-30  Tom Tromey  <tromey@redhat.com>\n \n \t* jcf-parse.c (read_class): Update identifier's class value if it"}, {"sha": "43468b32d90a703789798c559924910bdd3b584e", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -275,7 +275,7 @@ make_class (void)\n {\n   tree type;\n   type = make_node (RECORD_TYPE);\n-  TYPE_BINFO (type) = make_tree_vec (6);\n+  TYPE_BINFO (type) = make_tree_vec (BINFO_ELTS);\n   MAYBE_CREATE_TYPE_TYPE_LANG_SPECIFIC (type);\n \n   return type;\n@@ -360,7 +360,7 @@ set_super_info (int access_flags, tree this_class,\n   TYPE_BINFO_BASETYPES (this_class) = make_tree_vec (total_supers);\n   if (super_class)\n     {\n-      tree super_binfo = make_tree_vec (6);\n+      tree super_binfo = make_tree_vec (BINFO_ELTS);\n       BINFO_TYPE (super_binfo) = super_class;\n       BINFO_OFFSET (super_binfo) = integer_zero_node;\n       TREE_VIA_PUBLIC (super_binfo) = 1;\n@@ -492,7 +492,7 @@ int common_enclosing_context_p (tree type1, tree type2)\n static void\n add_interface_do (tree basetype_vec, tree interface_class, int i)\n {\n-  tree interface_binfo = make_tree_vec (6);\n+  tree interface_binfo = make_tree_vec (BINFO_ELTS);\n   BINFO_TYPE (interface_binfo) = interface_class;\n   BINFO_OFFSET (interface_binfo) = integer_zero_node;\n   BINFO_VPTR_FIELD (interface_binfo) = integer_zero_node;"}, {"sha": "fb3b79f925880a2cb27a300d27de2fc0e7d6c4ed", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -6146,7 +6146,7 @@ start_class (code, class_name, super_name, protocol_list)\n     }\n \n   class = make_node (code);\n-  TYPE_BINFO (class) = make_tree_vec (6);\n+  TYPE_BINFO (class) = make_tree_vec (BINFO_ELTS);\n \n   CLASS_NAME (class) = class_name;\n   CLASS_SUPER_NAME (class) = super_name;"}, {"sha": "8fd70adf143651d110df640ec6270ea3af73da92", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -1254,15 +1254,7 @@ finalize_record_size (rli)\n     unpadded_size_unit\n       = size_binop (PLUS_EXPR, unpadded_size_unit, size_one_node);\n \n-  /* Record the un-rounded size in the binfo node.  But first we check\n-     the size of TYPE_BINFO to make sure that BINFO_SIZE is available.  */\n-  if (TYPE_BINFO (rli->t) && TREE_VEC_LENGTH (TYPE_BINFO (rli->t)) > 6)\n-    {\n-      TYPE_BINFO_SIZE (rli->t) = unpadded_size;\n-      TYPE_BINFO_SIZE_UNIT (rli->t) = unpadded_size_unit;\n-    }\n-\n-    /* Round the size up to be a multiple of the required alignment */\n+  /* Round the size up to be a multiple of the required alignment */\n #ifdef ROUND_TYPE_SIZE\n   TYPE_SIZE (rli->t) = ROUND_TYPE_SIZE (rli->t, unpadded_size,\n \t\t\t\t\tTYPE_ALIGN (rli->t));"}, {"sha": "2d4c74169745129c8f694e808015878284e281ea", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1824b90d080d42328675176590f8ad08e31fd5ad/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1824b90d080d42328675176590f8ad08e31fd5ad", "patch": "@@ -1357,19 +1357,12 @@ struct tree_type GTY(())\n \n /* For a BINFO record describing a virtual base class, i.e., one where\n    TREE_VIA_VIRTUAL is set, this field assists in locating the virtual\n-   base.  The actual contents are language-dependent.  Under the old\n-   ABI, the C++ front-end uses a FIELD_DECL whose contents are a\n-   pointer to the virtual base; under the new ABI this field is\n-   instead an INTEGER_CST giving an offset into the vtable where the\n-   offset to the virtual base can be found.  */\n+   base.  The actual contents are language-dependent.  In the C++\n+   front-end this field is an INTEGER_CST giving an offset into the\n+   vtable where the offset to the virtual base can be found.  */\n #define BINFO_VPTR_FIELD(NODE) TREE_VEC_ELT (NODE, 5)\n \n-/* The size of a base class subobject of this type.  Not all frontends\n-   currently allocate the space for these fields.  */\n-#define BINFO_SIZE(NODE) TREE_VEC_ELT (NODE, 6)\n-#define BINFO_SIZE_UNIT(NODE) TREE_VEC_ELT (NODE, 7)\n-#define TYPE_BINFO_SIZE(NODE) BINFO_SIZE (TYPE_BINFO (NODE))\n-#define TYPE_BINFO_SIZE_UNIT(NODE) BINFO_SIZE_UNIT (TYPE_BINFO (NODE))\n+#define BINFO_ELTS 6\n \n /* Slot used to build a chain that represents a use of inheritance.\n    For example, if X is derived from Y, and Y is derived from Z,"}]}