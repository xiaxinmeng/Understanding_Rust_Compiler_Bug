{"sha": "18f988a06bd585a53af224091ef2e6a29074a511", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmOTg4YTA2YmQ1ODVhNTNhZjIyNDA5MWVmMmU2YTI5MDc0YTUxMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-01-07T23:15:47Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-01-07T23:15:47Z"}, "message": "builtins.def (BUILT_IN_FPRINTF): New entry.\n\n\t* builtins.def (BUILT_IN_FPRINTF): New entry.\n\n\t* c-common.c (c_expand_builtin_fprintf): New function.\n\t(init_function_format_info): Handle __builtin_fprintf.\n\t(c_common_nodes_and_builtins): Declare fprintf/__builtin_fprintf.\n\t(c_expand_builtin): Handle BUILT_IN_FPRINTF.\n\n\t* c-decl.c (duplicate_decls): Adjust comment.\n\n\t* extend.texi (fprintf): Document new builtin.\n\ntestsuite:\n\t* gcc.c-torture/execute/stdio-opt-3.c: New test.\n\nFrom-SVN: r38788", "tree": {"sha": "aa1f223abf0f413165eb86ffc04a6cb9aa07d467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa1f223abf0f413165eb86ffc04a6cb9aa07d467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18f988a06bd585a53af224091ef2e6a29074a511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f988a06bd585a53af224091ef2e6a29074a511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f988a06bd585a53af224091ef2e6a29074a511", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f988a06bd585a53af224091ef2e6a29074a511/comments", "author": null, "committer": null, "parents": [{"sha": "45b8ddb4915e571fd5a71c46cd5c7ee10de0b3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b8ddb4915e571fd5a71c46cd5c7ee10de0b3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b8ddb4915e571fd5a71c46cd5c7ee10de0b3e9"}], "stats": {"total": 204, "additions": 195, "deletions": 9}, "files": [{"sha": "a9c499a5b17082189dd612542a2218aeca032127", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18f988a06bd585a53af224091ef2e6a29074a511", "patch": "@@ -1,3 +1,16 @@\n+2001-01-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.def (BUILT_IN_FPRINTF): New entry.\n+\n+\t* c-common.c (c_expand_builtin_fprintf): New function.\n+\t(init_function_format_info): Handle __builtin_fprintf.\n+\t(c_common_nodes_and_builtins): Declare fprintf/__builtin_fprintf.\n+\t(c_expand_builtin): Handle BUILT_IN_FPRINTF.\n+\n+\t* c-decl.c (duplicate_decls): Adjust comment.\n+\n+\t* extend.texi (fprintf): Document new builtin.\n+\n 2001-01-07  Richard Henderson  <rth@redhat.com>\n \n \t* jump.c (simplejump_p): Recognize any single_set jump"}, {"sha": "cd715d9db963c5e7c13576c31d6a39c2fc5d4b84", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=18f988a06bd585a53af224091ef2e6a29074a511", "patch": "@@ -79,6 +79,7 @@ DEF_BUILTIN(BUILT_IN_PRINTF)\n DEF_BUILTIN(BUILT_IN_FPUTC)\n DEF_BUILTIN(BUILT_IN_FPUTS)\n DEF_BUILTIN(BUILT_IN_FWRITE)\n+DEF_BUILTIN(BUILT_IN_FPRINTF)\n \n   /* ISO C99 floating point unordered comparisons.  */\n DEF_BUILTIN(BUILT_IN_ISGREATER)"}, {"sha": "98d96e2a555e2016ebaab12aa88b448b7fb0e5cb", "filename": "gcc/c-common.c", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=18f988a06bd585a53af224091ef2e6a29074a511", "patch": "@@ -1951,6 +1951,8 @@ static int is_valid_printf_arglist PARAMS ((tree));\n static rtx c_expand_builtin PARAMS ((tree, rtx, enum machine_mode, enum expand_modifier));\n static rtx c_expand_builtin_printf PARAMS ((tree, rtx, enum machine_mode,\n \t\t\t\t\t    enum expand_modifier, int));\n+static rtx c_expand_builtin_fprintf PARAMS ((tree, rtx, enum machine_mode,\n+\t\t\t\t\t     enum expand_modifier, int));\n \n /* Initialize the table of functions to perform format checking on.\n    The ISO C functions are always checked (whether <stdio.h> is\n@@ -1976,6 +1978,8 @@ init_function_format_info ()\n \t\t\t      printf_format_type, 1, 2);\n       record_function_format (get_identifier (\"fprintf\"), NULL_TREE,\n \t\t\t      printf_format_type, 2, 3);\n+      record_function_format (get_identifier (\"__builtin_fprintf\"), NULL_TREE,\n+\t\t\t      printf_format_type, 2, 3);\n       record_function_format (get_identifier (\"sprintf\"), NULL_TREE,\n \t\t\t      printf_format_type, 2, 3);\n       record_function_format (get_identifier (\"scanf\"), NULL_TREE,\n@@ -5127,7 +5131,7 @@ c_common_nodes_and_builtins ()\n   tree temp;\n   tree memcpy_ftype, memset_ftype, strlen_ftype;\n   tree bzero_ftype, bcmp_ftype, puts_ftype, printf_ftype;\n-  tree fputs_ftype, fputc_ftype, fwrite_ftype;\n+  tree fputs_ftype, fputc_ftype, fwrite_ftype, fprintf_ftype;\n   tree endlink, int_endlink, double_endlink, unsigned_endlink;\n   tree cstring_endlink, sizetype_endlink;\n   tree ptr_ftype, ptr_ftype_unsigned;\n@@ -5539,6 +5543,14 @@ c_common_nodes_and_builtins ()\n \t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n \t\t\t\t      tree_cons (NULL_TREE, ptr_type_node, endlink)));\n \n+  /* Prototype for fprintf.  */\n+  fprintf_ftype\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t const_string_type_node,\n+\t\t\t\t\t\t NULL_TREE)));\n+\n   builtin_function (\"__builtin_constant_p\", default_function_type,\n \t\t    BUILT_IN_CONSTANT_P, BUILT_IN_NORMAL, NULL_PTR);\n \n@@ -5817,6 +5829,9 @@ c_common_nodes_and_builtins ()\n   builtin_function_2 (\"__builtin_printf\", \"printf\",\n \t\t      printf_ftype, printf_ftype,\n \t\t      BUILT_IN_PRINTF, BUILT_IN_FRONTEND, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_fprintf\", \"fprintf\",\n+\t\t      fprintf_ftype, fprintf_ftype,\n+\t\t      BUILT_IN_FPRINTF, BUILT_IN_FRONTEND, 1, 0, 0);\n   built_in_decls[BUILT_IN_FWRITE] =\n     builtin_function (\"__builtin_fwrite\", fwrite_ftype,\n \t\t      BUILT_IN_FWRITE, BUILT_IN_NORMAL, \"fwrite\");\n@@ -6614,6 +6629,13 @@ c_expand_builtin (exp, target, tmode, modifier)\n \treturn target;\n       break;\n \n+    case BUILT_IN_FPRINTF:\n+      target = c_expand_builtin_fprintf (arglist, target, tmode,\n+\t\t\t\t\t modifier, ignore);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     default:\t\t\t/* just do library call, if unknown builtin */\n       error (\"built-in function `%s' not currently supported\",\n \t     IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n@@ -6751,6 +6773,86 @@ c_expand_builtin_printf (arglist, target, tmode, modifier, ignore)\n \t\t      (ignore ? const0_rtx : target),\n \t\t      tmode, modifier);\n }\n+\n+/* If the arguments passed to fprintf are suitable for optimizations,\n+   we attempt to transform the call. */\n+static rtx\n+c_expand_builtin_fprintf (arglist, target, tmode, modifier, ignore)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode tmode;\n+     enum expand_modifier modifier;\n+     int ignore;\n+{\n+  tree fn_fputc = built_in_decls[BUILT_IN_FPUTC],\n+    fn_fputs = built_in_decls[BUILT_IN_FPUTS];\n+  tree fn, format_arg, stripped_string;\n+\n+  /* If the return value is used, or the replacement _DECL isn't\n+     initialized, don't do the transformation. */\n+  if (!ignore || !fn_fputc || !fn_fputs)\n+    return 0;\n+\n+  /* Verify the required arguments in the original call. */\n+  if (arglist == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE)\n+      || (TREE_CHAIN (arglist) == 0)\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) !=\n+\t  POINTER_TYPE))\n+    return 0;\n+  \n+  /* Check the specifier vs. the parameters. */\n+  if (!is_valid_printf_arglist (TREE_CHAIN (arglist)))\n+    return 0;\n+  \n+  format_arg = TREE_VALUE (TREE_CHAIN (arglist));\n+  stripped_string = format_arg;\n+  STRIP_NOPS (stripped_string);\n+  if (stripped_string && TREE_CODE (stripped_string) == ADDR_EXPR)\n+    stripped_string = TREE_OPERAND (stripped_string, 0);\n+\n+  /* If the format specifier isn't a STRING_CST, punt.  */\n+  if (TREE_CODE (stripped_string) != STRING_CST)\n+    return 0;\n+  \n+  /* OK!  We can attempt optimization.  */\n+\n+  /* If the format specifier was \"%s\", call __builtin_fputs(arg3, arg1). */\n+  if (strcmp (TREE_STRING_POINTER (stripped_string), \"%s\") == 0)\n+    {\n+      tree newarglist = build_tree_list (NULL_TREE, TREE_VALUE (arglist));\n+      arglist = tree_cons (NULL_TREE,\n+\t\t\t   TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))),\n+\t\t\t   newarglist);\n+      fn = fn_fputs;\n+    }\n+  /* If the format specifier was \"%c\", call __builtin_fputc (arg3, arg1). */\n+  else if (strcmp (TREE_STRING_POINTER (stripped_string), \"%c\") == 0)\n+    {\n+      tree newarglist = build_tree_list (NULL_TREE, TREE_VALUE (arglist));\n+      arglist = tree_cons (NULL_TREE,\n+\t\t\t   TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))),\n+\t\t\t   newarglist);\n+      fn = fn_fputc;\n+    }\n+  else\n+    {\n+     /* We can't handle anything else with % args or %% ... yet. */\n+      if (strchr (TREE_STRING_POINTER (stripped_string), '%'))\n+\treturn 0;\n+      \n+      /* When \"string\" doesn't contain %, replace all cases of\n+         fprintf(stream,string) with fputs(string,stream).  The fputs\n+         builtin will take take of special cases like length==1.  */\n+      arglist = tree_cons (NULL_TREE, TREE_VALUE (TREE_CHAIN (arglist)),\n+\t\t\t   build_tree_list (NULL_TREE, TREE_VALUE (arglist)));\n+      fn = fn_fputs;\n+    }\n+  \n+  return expand_expr (build_function_call (fn, arglist),\n+\t\t      (ignore ? const0_rtx : target),\n+\t\t      tmode, modifier);\n+}\n \f\n \n /* Given a boolean expression ARG, return a tree representing an increment"}, {"sha": "95272f97c078b875b753db9b7e0818f8fcd830e9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=18f988a06bd585a53af224091ef2e6a29074a511", "patch": "@@ -1511,7 +1511,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t\toldtype = trytype;\n \t    }\n \t  /* Accept harmless mismatch in first argument type also.\n-\t     This is for ffs.  */\n+\t     This is for the ffs and fprintf builtins.  */\n \t  if (TYPE_ARG_TYPES (TREE_TYPE (newdecl)) != 0\n \t      && TYPE_ARG_TYPES (oldtype) != 0\n \t      && TREE_VALUE (TYPE_ARG_TYPES (newtype)) != 0"}, {"sha": "bee479a8f6148c0ee05b1a560cac0c1aa4955f0b", "filename": "gcc/extend.texi", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=18f988a06bd585a53af224091ef2e6a29074a511", "patch": "@@ -3376,6 +3376,7 @@ function as well.\n @findex fabsf\n @findex fabsl\n @findex ffs\n+@findex fprintf\n @findex fputs\n @findex imaxabs\n @findex index\n@@ -3447,13 +3448,13 @@ corresponding versions prefixed with @code{__builtin_}.\n \n The following ISO C89 functions are recognized as builtins unless\n @samp{-fno-builtin} is specified: @code{abs}, @code{cos}, @code{fabs},\n-@code{fputs}, @code{labs}, @code{memcmp}, @code{memcpy}, @code{memset},\n-@code{printf}, @code{sin}, @code{sqrt}, @code{strcat}, @code{strchr},\n-@code{strcmp}, @code{strcpy}, @code{strcspn}, @code{strlen},\n-@code{strncat}, @code{strncmp}, @code{strncpy}, @code{strpbrk},\n-@code{strrchr}, @code{strspn}, and @code{strstr}.  All of these\n-functions have corresponding versions prefixed with @code{__builtin_},\n-except that the version for @code{sqrt} is called\n+@code{fprintf}, @code{fputs}, @code{labs}, @code{memcmp}, @code{memcpy},\n+@code{memset}, @code{printf}, @code{sin}, @code{sqrt}, @code{strcat},\n+@code{strchr}, @code{strcmp}, @code{strcpy}, @code{strcspn},\n+@code{strlen}, @code{strncat}, @code{strncmp}, @code{strncpy},\n+@code{strpbrk}, @code{strrchr}, @code{strspn}, and @code{strstr}.  All\n+of these functions have corresponding versions prefixed with\n+@code{__builtin_}, except that the version for @code{sqrt} is called\n @code{__builtin_fsqrt}.\n \n GNU CC provides builtin versions of the ISO C99 floating point"}, {"sha": "87b4b6f6cec56f73d4e49a334134ab6c3b526626", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18f988a06bd585a53af224091ef2e6a29074a511", "patch": "@@ -1,3 +1,7 @@\n+2001-01-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/stdio-opt-3.c: New test.\n+\n 2001-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/compile/20010107-1.c: New test."}, {"sha": "fb56a3ff54072af6b09156974be799e87d16cdb5", "filename": "gcc/testsuite/gcc.c-torture/execute/stdio-opt-3.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f988a06bd585a53af224091ef2e6a29074a511/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstdio-opt-3.c?ref=18f988a06bd585a53af224091ef2e6a29074a511", "patch": "@@ -0,0 +1,65 @@\n+/* Copyright (C) 2001  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin fprintf occur and\n+   that we honor side effects in the arguments.\n+\n+   Written by Kaveh R. Ghazi, 1/7/2001.  */\n+\n+#include <stdio.h>\n+extern int fprintf (FILE *, const char *, ...);\n+extern void abort(void);\n+\n+int main()\n+{\n+  FILE *s_array[] = {stdout, NULL}, **s_ptr = s_array;\n+  const char *const s1 = \"hello world\";\n+  const char *const s2[] = { s1, 0 }, *const*s3;\n+  \n+  fprintf (*s_ptr, \"%s\", \"hello\");\n+  fprintf (*s_ptr, \"%s\", \"\\n\");\n+  fprintf (*s_ptr, \"%s\", *s2);\n+  s3 = s2;\n+  fprintf (*s_ptr, \"%s\", *s3++);\n+  if (s3 != s2+1 || *s3 != 0)\n+    abort();\n+  s3 = s2;\n+  fprintf (*s_ptr++, \"%s\", *s3++);\n+  if (s3 != s2+1 || *s3 != 0 || s_ptr != s_array+1 || *s_ptr != 0)\n+    abort();\n+  \n+  s_ptr = s_array;\n+  fprintf (*s_ptr, \"%c\", '\\n');\n+  fprintf (*s_ptr, \"%c\", **s2);\n+  s3 = s2;\n+  fprintf (*s_ptr, \"%c\", **s3++);\n+  if (s3 != s2+1 || *s3 != 0)\n+    abort();\n+  s3 = s2;\n+  fprintf (*s_ptr++, \"%c\", **s3++);\n+  if (s3 != s2+1 || *s3 != 0 || s_ptr != s_array+1 || *s_ptr != 0)\n+    abort();\n+  \n+  s_ptr = s_array;\n+  fprintf (*s_ptr++, \"hello world\");\n+  if (s_ptr != s_array+1 || *s_ptr != 0)\n+    abort();\n+  s_ptr = s_array;\n+  fprintf (*s_ptr, \"\\n\");\n+    \n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  __builtin_fprintf (*s_ptr, \"%s\", \"hello world\\n\");\n+\n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static int\n+fprintf (FILE *stream, const char *string, ...)\n+{\n+  abort();\n+}\n+#endif"}]}