{"sha": "0b7c9254998b3fb2c39f6b86b5b196f415530205", "node_id": "C_kwDOANBUbNoAKDBiN2M5MjU0OTk4YjNmYjJjMzlmNmI4NmI1YjE5NmY0MTU1MzAyMDU", "commit": {"author": {"name": "Will Hawkins", "email": "whh8b@obs.cr", "date": "2022-08-24T06:16:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-24T14:22:44Z"}, "message": "libstdc++: Optimize operator+(string/char*, char*/string) equally\n\nUntil now operator+(char*, const string&) and operator+(const string&,\nchar*) had different performance characteristics. The former required a\nsingle memory allocation and the latter required two. This patch makes\nthe performance equal.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (operator+(const string&, const char*)):\n\tRemove naive implementation.\n\t* include/bits/basic_string.tcc (operator+(const string&, const char*)):\n\tAdd single-allocation implementation.\n\nSigned-off-by: Will Hawkins <whh8b@obs.cr>", "tree": {"sha": "3c5842373e17a003ff7159b0ba506af72f971152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c5842373e17a003ff7159b0ba506af72f971152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b7c9254998b3fb2c39f6b86b5b196f415530205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7c9254998b3fb2c39f6b86b5b196f415530205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7c9254998b3fb2c39f6b86b5b196f415530205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7c9254998b3fb2c39f6b86b5b196f415530205/comments", "author": {"login": "hawkinsw", "id": 8715530, "node_id": "MDQ6VXNlcjg3MTU1MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/8715530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsw", "html_url": "https://github.com/hawkinsw", "followers_url": "https://api.github.com/users/hawkinsw/followers", "following_url": "https://api.github.com/users/hawkinsw/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsw/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsw/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsw/orgs", "repos_url": "https://api.github.com/users/hawkinsw/repos", "events_url": "https://api.github.com/users/hawkinsw/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02de9d26b1820e4af35ebdd271c3a788e3c99035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02de9d26b1820e4af35ebdd271c3a788e3c99035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02de9d26b1820e4af35ebdd271c3a788e3c99035"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "fa6738925bb1732094d409c7fb6dee67624ee2c8", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7c9254998b3fb2c39f6b86b5b196f415530205/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7c9254998b3fb2c39f6b86b5b196f415530205/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=0b7c9254998b3fb2c39f6b86b5b196f415530205", "patch": "@@ -3521,14 +3521,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _GLIBCXX20_CONSTEXPR\n-    inline basic_string<_CharT, _Traits, _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n-\t      const _CharT* __rhs)\n-    {\n-      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);\n-      __str.append(__rhs);\n-      return __str;\n-    }\n+\t      const _CharT* __rhs);\n \n   /**\n    *  @brief  Concatenate string and character."}, {"sha": "95ba8e503e9b38a43257fbb553ef9ec80e373d90", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7c9254998b3fb2c39f6b86b5b196f415530205/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7c9254998b3fb2c39f6b86b5b196f415530205/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=0b7c9254998b3fb2c39f6b86b5b196f415530205", "patch": "@@ -640,6 +640,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __str;\n     }\n \n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n+    basic_string<_CharT, _Traits, _Alloc>\n+    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n+\t      const _CharT* __rhs)\n+    {\n+      __glibcxx_requires_string(__rhs);\n+      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n+      typedef typename __string_type::size_type\t  __size_type;\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+\trebind<_CharT>::other _Char_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\n+      const __size_type __len = _Traits::length(__rhs);\n+      __string_type __str(_Alloc_traits::_S_select_on_copy(\n+          __lhs.get_allocator()));\n+      __str.reserve(__len + __lhs.size());\n+      __str.append(__lhs);\n+      __str.append(__rhs, __len);\n+      return __str;\n+    }\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type"}]}