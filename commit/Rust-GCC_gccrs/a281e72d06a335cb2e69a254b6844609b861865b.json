{"sha": "a281e72d06a335cb2e69a254b6844609b861865b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI4MWU3MmQwNmEzMzVjYjJlNjlhMjU0YjY4NDQ2MDliODYxODY1Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-11T11:42:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-11T11:42:11Z"}, "message": "(store_field): Support BLKmode bitfield if aligned on byte boundary using emit_block_move.\n\n(store_field): Support BLKmode bitfield if aligned on byte boundary using\nemit_block_move.\n(expand_expr, case COMPONENT_REF): Likewise.\n\nFrom-SVN: r11971", "tree": {"sha": "d631d973de309a4d67349630dea33308c4b690d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d631d973de309a4d67349630dea33308c4b690d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a281e72d06a335cb2e69a254b6844609b861865b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a281e72d06a335cb2e69a254b6844609b861865b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a281e72d06a335cb2e69a254b6844609b861865b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a281e72d06a335cb2e69a254b6844609b861865b/comments", "author": null, "committer": null, "parents": [{"sha": "574baa641db6d80b3656164a97efec735d588d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574baa641db6d80b3656164a97efec735d588d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574baa641db6d80b3656164a97efec735d588d4d"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "87305aa5dc93b71bb0ab0bad9f807f0af9ccb962", "filename": "gcc/expr.c", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281e72d06a335cb2e69a254b6844609b861865b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281e72d06a335cb2e69a254b6844609b861865b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a281e72d06a335cb2e69a254b6844609b861865b", "patch": "@@ -3915,6 +3915,27 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode,\n \t  && mode != TYPE_MODE (TREE_TYPE (exp)))\n \ttemp = convert_modes (mode, TYPE_MODE (TREE_TYPE (exp)), temp, 1);\n \n+      /* If the modes of TARGET and TEMP are both BLKmode, both\n+\t must be in memory and BITPOS must be aligned on a byte\n+\t boundary.  If so, we simply do a block copy.  */\n+      if (GET_MODE (target) == BLKmode && GET_MODE (temp) == BLKmode)\n+\t{\n+\t  if (GET_CODE (target) != MEM || GET_CODE (temp) != MEM\n+\t      || bitpos % BITS_PER_UNIT != 0)\n+\t    abort ();\n+\n+\t  temp = change_address (temp, VOIDmode,\n+\t\t\t\t plus_constant (XEXP (temp, 0),\n+\t\t\t\t\t\tbitpos / BITS_PER_UNIT));\n+\n+\t  emit_block_move (target, temp,\n+\t\t\t   GEN_INT ((bitsize + BITS_PER_UNIT - 1)\n+\t\t\t\t    / BITS_PER_UNIT),\n+\t\t\t   1);\n+\n+\t  return value_mode == VOIDmode ? const0_rtx : target;\n+\t}\n+\n       /* Store the value in the bitfield.  */\n       store_bit_field (target, bitsize, bitpos, mode, temp, align, total_size);\n       if (value_mode != VOIDmode)\n@@ -5350,7 +5371,27 @@ expand_expr (exp, target, tmode, modifier)\n \t      ext_mode = mode_for_size (bitsize, MODE_INT, 1);\n \n \t    if (ext_mode == BLKmode)\n-\t      abort ();\n+\t      {\n+\t\t/* In this case, BITPOS must start at a byte boundary and\n+\t\t   TARGET, if specified, must be a MEM.  */\n+\t\tif (GET_CODE (op0) != MEM\n+\t\t    || (target != 0 && GET_CODE (target) != MEM)\n+\t\t    || bitpos % BITS_PER_UNIT != 0)\n+\t\t  abort ();\n+\n+\t\top0 = change_address (op0, VOIDmode,\n+\t\t\t\t      plus_constant (XEXP (op0, 0),\n+\t\t\t\t\t\t     bitpos / BITS_PER_UNIT));\n+\t\tif (target == 0)\n+\t\t  target = assign_temp (type, 0, 1, 1);\n+\n+\t\temit_block_move (target, op0,\n+\t\t\t\t GEN_INT ((bitsize + BITS_PER_UNIT - 1)\n+\t\t\t\t\t  / BITS_PER_UNIT),\n+\t\t\t\t 1);\n+\t\t\n+\t\treturn target;\n+\t      }\n \n \t    op0 = validize_mem (op0);\n "}]}