{"sha": "0513e3d517795ce27335c60af6289f27c1328fb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxM2UzZDUxNzc5NWNlMjczMzVjNjBhZjYyODlmMjdjMTMyOGZiMw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2018-05-08T10:21:34Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-05-08T10:21:34Z"}, "message": "[arm] PR target/85658 Fix operator precedence errors in parsecpu.awk\n\nThere are a number of places in parsecpu.awk where I've managed to get\nthe operator precedence between ! and 'in' incorrect (! binds more\ntightly).  In most cases this just makes a consistency test\nineffective, but in a few cases it means we fail to correctly diagnose\nerrors by the user (for example, when passing an invalid cpu or\narchitecture name to configure.  This patch fixes all the cases I\ncould find, based on searching for all uses of the two operators in\nthe same expression.  The tweak to the API of check_fpu is to bring it\ninto line with the other check functions - it now returns the result\nrather than printing it directly.  The caller now does the printing,\nin the same way that the chkarch and chkcpu commands do.\n\n\tPR target/85658\n\t* config/arm/parsecpu.awk (check_cpu): Fix operator precedence.\n\t(check_arch): Likewise.\n\t(check_fpu): Return the result rather than printing it.\n\t(end arch): Fix operator precedence.\n\t(end cpu): Likewise.\n\t(END): Print the result from check_fpu.\n\nFrom-SVN: r260032", "tree": {"sha": "9f7fd8e048df2b20806533cc81202aa342af9f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f7fd8e048df2b20806533cc81202aa342af9f49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0513e3d517795ce27335c60af6289f27c1328fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0513e3d517795ce27335c60af6289f27c1328fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0513e3d517795ce27335c60af6289f27c1328fb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0513e3d517795ce27335c60af6289f27c1328fb3/comments", "author": null, "committer": null, "parents": [{"sha": "cee99fa01b0e014c24b91c6291ca0f0b51080be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cee99fa01b0e014c24b91c6291ca0f0b51080be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cee99fa01b0e014c24b91c6291ca0f0b51080be9"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "924a033b8cd7c89dc743f9706c5f3bc5d8106cbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0513e3d517795ce27335c60af6289f27c1328fb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0513e3d517795ce27335c60af6289f27c1328fb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0513e3d517795ce27335c60af6289f27c1328fb3", "patch": "@@ -1,3 +1,13 @@\n+2018-05-08  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/85658\n+\t* config/arm/parsecpu.awk (check_cpu): Fix operator precedence.\n+\t(check_arch): Likewise.\n+\t(check_fpu): Return the result rather than printing it.\n+\t(end arch): Fix operator precedence.\n+\t(end cpu): Likewise.\n+\t(END): Print the result from check_fpu.\n+\n 2018-05-08  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "4d234c360705f09104ef3fe55cca9fcff8fb025d", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0513e3d517795ce27335c60af6289f27c1328fb3/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0513e3d517795ce27335c60af6289f27c1328fb3/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=0513e3d517795ce27335c60af6289f27c1328fb3", "patch": "@@ -463,7 +463,7 @@ function gen_opt () {\n function check_cpu (name) {\n     exts = split (name, extensions, \"+\")\n \n-    if (! extensions[1] in cpu_cnames) {\n+    if (! (extensions[1] in cpu_cnames)) {\n \treturn \"error\"\n     }\n \n@@ -477,15 +477,16 @@ function check_cpu (name) {\n }\n \n function check_fpu (name) {\n-    if (name in fpu_cnames) {\n-\tprint fpu_cnames[name]\n-    } else print \"error\"\n+    if (! (name in fpu_cnames)) {\n+\treturn \"error\"\n+    }\n+    return fpu_cnames[name]\n }\n \n function check_arch (name) {\n     exts = split (name, extensions, \"+\")\n \n-    if (! extensions[1] in arch_isa) {\n+    if (! (extensions[1] in arch_isa)) {\n \treturn \"error\"\n     }\n \n@@ -600,10 +601,10 @@ BEGIN {\n /^end arch / {\n     if (NF != 3) fatal(\"syntax: end arch <name>\")\n     if (arch_name != $3) fatal(\"mimatched end arch\")\n-    if (! arch_name in arch_tune_for) {\n+    if (! (arch_name in arch_tune_for)) {\n \tfatal(\"arch definition lacks a \\\"tune for\\\" statement\")\n     }\n-    if (! arch_name in arch_isa) {\n+    if (! (arch_name in arch_isa)) {\n \tfatal(\"arch definition lacks an \\\"isa\\\" statement\")\n     }\n     arch_list = arch_list \" \" arch_name\n@@ -742,7 +743,7 @@ BEGIN {\n \tcpu_cnames[cpu_name] = cpu_name\n \tgsub(/[-+.]/, \"_\", cpu_cnames[cpu_name])\n     }\n-    if (! cpu_name in cpu_arch) fatal(\"cpu definition lacks an architecture\")\n+    if (! (cpu_name in cpu_arch)) fatal(\"cpu definition lacks an architecture\")\n     cpu_list = cpu_list \" \" cpu_name\n     cpu_name = \"\"\n     parse_ok = 1\n@@ -776,6 +777,6 @@ END {\n \tprint check_arch(target[2])\n     } else if (cmd ~ /^chkfpu /) {\n \tsplit (cmd, target)\n-\tcheck_fpu(target[2])\n+\tprint check_fpu(target[2])\n     } else fatal(\"unrecognized command: \"cmd)\n }"}]}