{"sha": "4d0839ffa09e52ebf5078fb9c1e0be073932de32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwODM5ZmZhMDllNTJlYmY1MDc4ZmI5YzFlMGJlMDczOTMyZGUzMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-07-17T22:02:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-07-17T22:02:09Z"}, "message": "re PR c++/22139 (Segfault with templates and friend functions)\n\n\tPR c++/22139\n\t* cp-tree.h (DECL_TEMPLATE_INFO): Improve documentation.\n\t* decl.c (duplicate_decls): Re-register template specializations\n\tfor functions that have DECL_TEMLPLATE_INFO, even if they do not\n\thave DECL_TEMPLATE_INSTANTIATION set.\n\n\tPR c++/22139\n\t* g++.dg/template/friend36.C: New test.\n\nFrom-SVN: r102118", "tree": {"sha": "4d70f2e6000447d2f08e910d9fb5dea2f5bd0f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d70f2e6000447d2f08e910d9fb5dea2f5bd0f1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d0839ffa09e52ebf5078fb9c1e0be073932de32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0839ffa09e52ebf5078fb9c1e0be073932de32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d0839ffa09e52ebf5078fb9c1e0be073932de32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0839ffa09e52ebf5078fb9c1e0be073932de32/comments", "author": null, "committer": null, "parents": [{"sha": "17c999e88a90037ad64a39473f05f5cbc6617fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c999e88a90037ad64a39473f05f5cbc6617fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c999e88a90037ad64a39473f05f5cbc6617fcf"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "4c048cf4bd83111b4a77a08a8b31b3c7afd6f945", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d0839ffa09e52ebf5078fb9c1e0be073932de32", "patch": "@@ -1,3 +1,11 @@\n+2005-07-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/22139\n+\t* cp-tree.h (DECL_TEMPLATE_INFO): Improve documentation.\n+\t* decl.c (duplicate_decls): Re-register template specializations\n+\tfor functions that have DECL_TEMLPLATE_INFO, even if they do not\n+\thave DECL_TEMPLATE_INSTANTIATION set.\n+\n 2005-07-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* call.c (diagnostic_fn_t): New."}, {"sha": "2d5e5f1f41d518413c8029ac5fa40afc08b4fcdb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4d0839ffa09e52ebf5078fb9c1e0be073932de32", "patch": "@@ -2056,8 +2056,24 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define DECL_DEFERRED_FN(DECL) \\\n   (DECL_LANG_SPECIFIC (DECL)->decl_flags.deferred)\n \n-/* For a VAR_DECL, FUNCTION_DECL, TYPE_DECL or TEMPLATE_DECL:\n-   template-specific information.  */\n+/* If non-NULL for a VAR_DECL, FUNCTION_DECL, TYPE_DECL or\n+   TEMPLATE_DECL, the entity is a template specialization.  In that\n+   case, DECL_TEMPLATE_INFO is a TREE_LIST, whose TREE_PURPOSE is the\n+   TEMPLATE_DECL of which this entity is a specialization.  The TREE_\n+   TREE_VALUE is the template arguments used to specialize the\n+   template.  \n+\n+   In general, DECL_TEMPLATE_INFO is non-NULL only if\n+   DECL_USE_TEMPLATE is non-zero.  However, for friends, we sometimes\n+   have DECL_TEMPLATE_INFO even when DECL_USE_TEMPLATE is zero.\n+   Consider:\n+\n+      template <typename T> struct S { friend void f(T) {} };\n+\n+   In this case, S<int>::f is, from the point of view of the compiler,\n+   an instantiation of a template -- but, from the point of view of\n+   the language, each instantiation of S results in a wholly unrelated\n+   global function f.  */ \n #define DECL_TEMPLATE_INFO(NODE) \\\n   (DECL_LANG_SPECIFIC (VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK (NODE)) \\\n    ->decl_flags.u.template_info)"}, {"sha": "855906a01885cb7845964d71e00ca1e16a2eeaa3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4d0839ffa09e52ebf5078fb9c1e0be073932de32", "patch": "@@ -1838,7 +1838,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n       memcpy ((char *) olddecl + sizeof (struct tree_decl_common),\n \t      (char *) newdecl + sizeof (struct tree_decl_common),\n \t      sizeof (struct tree_function_decl) - sizeof (struct tree_decl_common));\n-      if (DECL_TEMPLATE_INSTANTIATION (newdecl))\n+      if (DECL_TEMPLATE_INFO (newdecl))\n \t/* If newdecl is a template instantiation, it is possible that\n \t   the following sequence of events has occurred:\n "}, {"sha": "2f18605274562025428821d69605b61b3e0b95c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d0839ffa09e52ebf5078fb9c1e0be073932de32", "patch": "@@ -1,3 +1,8 @@\n+2005-07-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/22139\n+\t* g++.dg/template/friend36.C: New test.\n+\n 2005-07-16  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR fortran/21730"}, {"sha": "5f07db486c76183ac8f3a54dc39c84093d2e2ab7", "filename": "gcc/testsuite/g++.dg/template/friend36.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0839ffa09e52ebf5078fb9c1e0be073932de32/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend36.C?ref=4d0839ffa09e52ebf5078fb9c1e0be073932de32", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/22139\n+// { dg-options \"--param ggc-min-expand=0 --param ggc-min-heapsize=0\" }\n+ \n+template <int rank, int dim> class Tensor;\n+template <int rank, int dim> struct SymmetricTensor {     \n+  SymmetricTensor (const Tensor<2,dim> &t);\n+  friend void foo(); \n+};\n+template <> SymmetricTensor<2,2>::SymmetricTensor (const Tensor<2,2> &t) {}\n+template <> SymmetricTensor<2,3>::SymmetricTensor (const Tensor<2,3> &t) {}"}]}