{"sha": "d859ab0146cd0002afc640d406997efb12a50d98", "node_id": "C_kwDOANBUbNoAKGQ4NTlhYjAxNDZjZDAwMDJhZmM2NDBkNDA2OTk3ZWZiMTJhNTBkOTg", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-23T15:50:47Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-24T12:07:22Z"}, "message": "macros: Allow repetitions of tokens in follow-set in follow-set\n\nWhen checking if a follow-up is valid, we previously always returned\nfalse when comparing with MacroMatchRepetitions. This is however\ninvalid, as we should be comparing with the first match of the\nrepetition to be sure.", "tree": {"sha": "c59410d587bc2d9226b3bab9b3d8e50df076b319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c59410d587bc2d9226b3bab9b3d8e50df076b319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d859ab0146cd0002afc640d406997efb12a50d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d859ab0146cd0002afc640d406997efb12a50d98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d859ab0146cd0002afc640d406997efb12a50d98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d859ab0146cd0002afc640d406997efb12a50d98/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8283724bc24efc0c11960947f2d4e99bc20b3765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8283724bc24efc0c11960947f2d4e99bc20b3765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8283724bc24efc0c11960947f2d4e99bc20b3765"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "50d2efe4fc692b93f5f6bd3163ff66052522d902", "filename": "gcc/rust/parse/rust-parse.cc", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d859ab0146cd0002afc640d406997efb12a50d98/gcc%2Frust%2Fparse%2Frust-parse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d859ab0146cd0002afc640d406997efb12a50d98/gcc%2Frust%2Fparse%2Frust-parse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.cc?ref=d859ab0146cd0002afc640d406997efb12a50d98", "patch": "@@ -100,6 +100,30 @@ contains (std::vector<T> &vec, T elm)\n   return std::find (vec.begin (), vec.end (), elm) != vec.end ();\n }\n \n+/**\n+ * Avoid UB by calling .front() and .back() on empty containers...\n+ */\n+\n+template <typename T>\n+static T *\n+get_back_ptr (std::vector<std::unique_ptr<T>> &values)\n+{\n+  if (values.empty ())\n+    return nullptr;\n+\n+  return values.back ().get ();\n+}\n+\n+template <typename T>\n+static T *\n+get_front_ptr (std::vector<std::unique_ptr<T>> &values)\n+{\n+  if (values.empty ())\n+    return nullptr;\n+\n+  return values.front ().get ();\n+}\n+\n static bool\n peculiar_fragment_match_compatible_fragment (\n   const AST::MacroFragSpec &last_spec, const AST::MacroFragSpec &spec,\n@@ -196,8 +220,9 @@ peculiar_fragment_match_compatible (AST::MacroMatchFragment &last_match,\n       case AST::MacroMatch::Repetition: {\n \tauto repetition = static_cast<AST::MacroMatchRepetition *> (&match);\n \tauto &matches = repetition->get_matches ();\n-\tif (!matches.empty ())\n-\t  error_locus = matches.front ()->get_match_locus ();\n+\tauto first_frag = get_front_ptr (matches);\n+\tif (first_frag)\n+\t  return peculiar_fragment_match_compatible (last_match, *first_frag);\n \tbreak;\n       }\n       case AST::MacroMatch::Matcher: {\n@@ -231,30 +256,6 @@ peculiar_fragment_match_compatible (AST::MacroMatchFragment &last_match,\n   return false;\n }\n \n-/**\n- * Avoid UB by calling .front() and .back() on empty containers...\n- */\n-\n-template <typename T>\n-static T *\n-get_back_ptr (std::vector<std::unique_ptr<T>> &values)\n-{\n-  if (values.empty ())\n-    return nullptr;\n-\n-  return values.back ().get ();\n-}\n-\n-template <typename T>\n-static T *\n-get_front_ptr (std::vector<std::unique_ptr<T>> &values)\n-{\n-  if (values.empty ())\n-    return nullptr;\n-\n-  return values.front ().get ();\n-}\n-\n bool\n is_match_compatible (AST::MacroMatch &last_match, AST::MacroMatch &match)\n {"}, {"sha": "31459907c08f9888a1fee9ba3d4234fcf57820a0", "filename": "gcc/testsuite/rust/compile/macro-issue1053-2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d859ab0146cd0002afc640d406997efb12a50d98/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d859ab0146cd0002afc640d406997efb12a50d98/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053-2.rs?ref=d859ab0146cd0002afc640d406997efb12a50d98", "patch": "@@ -0,0 +1,5 @@\n+macro_rules! m {\n+    ($e:expr $(forbidden)*) => {{}}; // { dg-error \"token .identifier. is not allowed after .expr. fragment\" }\n+                                     // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-1 }\n+                                     // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "1e968496e0ce3d2f247aaa487aa12b14bdc3d58d", "filename": "gcc/testsuite/rust/compile/macro-issue1053.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d859ab0146cd0002afc640d406997efb12a50d98/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d859ab0146cd0002afc640d406997efb12a50d98/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053.rs?ref=d859ab0146cd0002afc640d406997efb12a50d98", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! m {\n+    ($e:expr $(,)*) => {{}};\n+}"}, {"sha": "8002f284ecfff9ecaf69ffe58c529a0b34a7d91b", "filename": "gcc/testsuite/rust/compile/macro28.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d859ab0146cd0002afc640d406997efb12a50d98/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro28.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d859ab0146cd0002afc640d406997efb12a50d98/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro28.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro28.rs?ref=d859ab0146cd0002afc640d406997efb12a50d98", "patch": "@@ -1,6 +1,6 @@\n macro_rules! m {\n     ($a:expr $(tok $es:expr)*) => {\n-        // { dg-error \"fragment is not allowed after .expr. fragment\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"token .identifier. is not allowed after .expr. fragment\" \"\" { target *-*-* } .-1 }\n         // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-2 }\n         // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-3 }\n         $a"}]}