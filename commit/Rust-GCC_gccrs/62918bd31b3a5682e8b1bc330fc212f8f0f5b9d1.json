{"sha": "62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI5MThiZDMxYjNhNTY4MmU4YjFiYzMzMGZjMjEyZjhmMGY1YjlkMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-11-10T01:16:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-11-10T01:16:13Z"}, "message": "alpha.c (decl_in_text_section): New.\n\n        * config/alpha/alpha.c (decl_in_text_section): New.\n        (current_file_function_operand): Use it.\n        (alpha_encode_section_info, alpha_end_function): Likewise.\n\nFrom-SVN: r46910", "tree": {"sha": "c0a779ab33724916e1e6393a60cce11412fe9d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0a779ab33724916e1e6393a60cce11412fe9d61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1/comments", "author": null, "committer": null, "parents": [{"sha": "243a707078d20d78057fe4660a9388028db83489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243a707078d20d78057fe4660a9388028db83489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243a707078d20d78057fe4660a9388028db83489"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "2cb68c6489b3feb1aef5646f2128f6e3d5783444", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "patch": "@@ -1,3 +1,9 @@\n+2001-11-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (decl_in_text_section): New.\n+\t(current_file_function_operand): Use it.\n+\t(alpha_encode_section_info, alpha_end_function): Likewise.\n+\n 2001-11-07  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config.gcc: Add FreeBSD/IA-64 target. Expand config/i64/elf.h headers."}, {"sha": "f1c72771e747678c2a0168038cf22d62669b3288", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "patch": "@@ -114,6 +114,8 @@ int alpha_this_literal_sequence_number;\n int alpha_this_gpdisp_sequence_number;\n \n /* Declarations of static functions.  */\n+static bool decl_in_text_section\n+  PARAMS ((tree));\n static bool local_symbol_p\n   PARAMS ((rtx));\n static void alpha_set_memflags_1\n@@ -832,7 +834,7 @@ input_operand (op, mode)\n }\n \n /* Return 1 if OP is a SYMBOL_REF for a function known to be in this\n-   file.  */\n+   file, and in the same section as the current function.  */\n \n int\n current_file_function_operand (op, mode)\n@@ -842,11 +844,18 @@ current_file_function_operand (op, mode)\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n \n-  if (! SYMBOL_REF_FLAG (op)\n-      && op != XEXP (DECL_RTL (current_function_decl), 0))\n-    return 0;\n+  /* Easy test for recursion.  */\n+  if (op == XEXP (DECL_RTL (current_function_decl), 0))\n+    return 1;\n \n-  return 1;\n+  /* Otherwise, we need the DECL for the SYMBOL_REF, which we can't get.\n+     So SYMBOL_REF_FLAG has been declared to imply that the function is\n+     in the default text section.  So we must also check that the current\n+     function is also in the text section.  */\n+  if (SYMBOL_REF_FLAG (op) && decl_in_text_section (current_function_decl))\n+    return 1;\n+\n+  return 0;\n }\n \n /* Return 1 if OP is a SYMBOL_REF for which we can make a call via bsr.  */\n@@ -1392,6 +1401,22 @@ alpha_tablejump_best_label (insn)\n   return best_label ? best_label : const0_rtx;\n }\n \f\n+/* Return true if the function DECL will be placed in the default text\n+   section.  */\n+/* ??? Ideally we'd be able to always move from a SYMBOL_REF back to the\n+   decl, as that would allow us to determine if two functions are in the\n+   same section, which is what we really want to know.  */\n+\n+static bool\n+decl_in_text_section (decl)\n+     tree decl;\n+{\n+  return (DECL_SECTION_NAME (decl) == NULL_TREE\n+\t  && ! (flag_function_sections\n+\t        || (targetm.have_named_sections\n+\t\t    && DECL_ONE_ONLY (decl))));\n+}\n+\n /* If we are referencing a function that is static, make the SYMBOL_REF\n    special.  We use this to see indicate we can branch to this function\n    without setting PV or restoring GP. \n@@ -1409,8 +1434,16 @@ alpha_encode_section_info (decl)\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      if (! TREE_PUBLIC (decl))\n-\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+      /* We mark public functions once they are emitted; otherwise we\n+\t don't know that they exist in this unit of translation.  */\n+      if (TREE_PUBLIC (decl))\n+\treturn;\n+      /* Do not mark functions that are not in .text; otherwise we\n+\t don't know that they are near enough for a direct branch.  */\n+      if (! decl_in_text_section (decl))\n+\treturn;\n+\n+      SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n       return;\n     }\n \n@@ -6673,10 +6706,15 @@ alpha_end_function (file, fnname, decl)\n \n      Don't do this for global functions in object files destined for a\n      shared library because the function may be overridden by the application\n-     or other libraries.  Similarly, don't do this for weak functions.  */\n+     or other libraries.  Similarly, don't do this for weak functions.\n+\n+     Don't do this for functions not defined in the .text section, as\n+     otherwise it's not unlikely that the destination is out of range\n+     for a direct branch.  */\n \n   if (!DECL_WEAK (current_function_decl)\n-      && (!flag_pic || !TREE_PUBLIC (current_function_decl)))\n+      && (!flag_pic || !TREE_PUBLIC (current_function_decl))\n+      && decl_in_text_section (current_function_decl))\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (current_function_decl), 0)) = 1;\n \n   /* Output jump tables and the static subroutine information block.  */"}]}