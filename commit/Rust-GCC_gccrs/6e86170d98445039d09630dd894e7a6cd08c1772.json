{"sha": "6e86170d98445039d09630dd894e7a6cd08c1772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU4NjE3MGQ5ODQ0NTAzOWQwOTYzMGRkODk0ZTdhNmNkMDhjMTc3Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-03-07T16:42:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-03-07T16:42:33Z"}, "message": "mn10300.c (expand_prologue): Rework to avoid unnecessary \"add\" operations.\n\n        * mn10300/mn10300.c (expand_prologue): Rework to avoid unnecessary\n        \"add\" operations.\n        (expand_epilogue): Likewise.\n        * mn10300/mn10300.h (STARTING_FRAME_OFFSET): Is zero after the last\n        round of prologue/epilogue changes.\n        (FIRST_PARM_OFFSET): Is now 16 (-4 for REG_PARM_STACK_SPACE + 20 for\n        register save area).\n        (REG_PARM_STACK_SPACE): Define as 4 bytes.\n        (OUTGOING_REG_PARM_STACK_SPACE): Define so caller allocates it.\n        * mn10300/mn10300.md (call expander): Don't emit insns to adjust the\n        stack here anymore.\n        (call_value expander): Likewise.\n\n        * mn10300/mn10300.md (bCC patterns): Just use \"bCC target\" now that\n        the assembler handles relaxing.\n\nFrom-SVN: r13696", "tree": {"sha": "ff3c0572ea230bd4a6a7b115250a813bd7769903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff3c0572ea230bd4a6a7b115250a813bd7769903"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e86170d98445039d09630dd894e7a6cd08c1772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e86170d98445039d09630dd894e7a6cd08c1772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e86170d98445039d09630dd894e7a6cd08c1772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e86170d98445039d09630dd894e7a6cd08c1772/comments", "author": null, "committer": null, "parents": [{"sha": "e035031935a5160976ef3cf0b626701df1c3fd23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e035031935a5160976ef3cf0b626701df1c3fd23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e035031935a5160976ef3cf0b626701df1c3fd23"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "0d9e6fc5b04fd24f78726a4e97af398952b0e176", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e86170d98445039d09630dd894e7a6cd08c1772/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e86170d98445039d09630dd894e7a6cd08c1772/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=6e86170d98445039d09630dd894e7a6cd08c1772", "patch": "@@ -219,12 +219,7 @@ expand_prologue ()\n   emit_insn (gen_store_movm ());\n \n   if (frame_pointer_needed)\n-    {\n-      emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n-      emit_insn (gen_addsi3 (frame_pointer_rtx,\n-\t\t\t     frame_pointer_rtx,\n-\t\t\t     GEN_INT (20)));\n-    }\n+    emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n \n   if (size)\n     emit_insn (gen_addsi3 (stack_pointer_rtx,\n@@ -240,9 +235,6 @@ expand_epilogue ()\n   /* Cut back the stack.  */\n   if (frame_pointer_needed)\n     {\n-      emit_insn (gen_addsi3 (frame_pointer_rtx,\n-\t\t\t     frame_pointer_rtx,\n-\t\t\t     GEN_INT (-20)));\n       emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n       size = 0;\n     }"}, {"sha": "0f1074cf645567f419b82ca11ae15b7e6f59595a", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e86170d98445039d09630dd894e7a6cd08c1772/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e86170d98445039d09630dd894e7a6cd08c1772/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=6e86170d98445039d09630dd894e7a6cd08c1772", "patch": "@@ -337,13 +337,13 @@ enum reg_class {\n    first local allocated.  Otherwise, it is the offset to the BEGINNING\n    of the first local allocated.  */\n \n-#define STARTING_FRAME_OFFSET -20\n+#define STARTING_FRAME_OFFSET 0\n \n /* Offset of first parameter from the argument pointer register value.  */\n /* Is equal to the size of the saved fp + pc, even if an fp isn't\n    saved since the value is used before we know.  */\n \n-#define FIRST_PARM_OFFSET(FNDECL) 0\n+#define FIRST_PARM_OFFSET(FNDECL) (-4 + 20)\n \n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n@@ -374,7 +374,7 @@ enum reg_class {\n    as of the start of the function body.  This depends on the layout\n    of the fixed parts of the stack frame and on how registers are saved.  */\n \n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 0\n+#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 20\n \n /* A guess for the MN10300.  */\n #define PROMOTE_PROTOTYPES 1\n@@ -388,6 +388,17 @@ enum reg_class {\n \n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n \n+/* On the mn10300, the caller is responsible for allocating and deallocating\n+   a stack slot for the \"call\" and \"calls\" instructions to save their return\n+   pointer.  We used to do this in the \"call\" and \"call_value\" expanders,\n+   but that generated poor code.\n+\n+   Now we pretend that we have an outgoing register parameter space so that\n+   the generic function calling code will allocate the slot.  */\n+   \n+#define REG_PARM_STACK_SPACE(FNDECL) 4\n+#define OUTGOING_REG_PARM_STACK_SPACE\n+\n /* 1 if N is a possible register number for function argument passing.\n    On the MN10300, no registers are used in this way.  */\n "}, {"sha": "52546c85a56a777d4755e76ac48fe8855991cd52", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e86170d98445039d09630dd894e7a6cd08c1772/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e86170d98445039d09630dd894e7a6cd08c1772/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=6e86170d98445039d09630dd894e7a6cd08c1772", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for Matsushita MN10300\n-;; Copyright (C) 1996 Free Software Foundation, Inc.\n+;; Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n \n ;;   Contributed by Jeff Law (law@cygnus.com).\n \n@@ -469,7 +469,7 @@\n \t  || GET_CODE (operands[1]) == LE\n \t  || GET_CODE (operands[1]) == LT))\n     return 0;\n-  return \\\"b%B1 .+8\\\\n\\\\tjmp %0\\\\n\\\";\n+  return \\\"b%b1 %0\\\";\n }\"\n  [(set_attr \"cc\" \"none\")])\n \n@@ -488,7 +488,7 @@\n \t  || GET_CODE (operands[1]) == LE\n \t  || GET_CODE (operands[1]) == LT))\n     return 0;\n-  return \\\"b%b1 .+8\\\\n\\\\tjmp %0\\\\n\\\";\n+  return \\\"b%B1 %0\\\";\n }\"\n  [(set_attr \"cc\" \"none\")])\n \n@@ -522,15 +522,9 @@\n   \"\"\n   \"\n {\n-  emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t stack_pointer_rtx,\n-\t\t\t GEN_INT (-4)));\n   if (! call_address_operand (XEXP (operands[0], 0)))\n     XEXP (operands[0], 0) = force_reg (SImode, XEXP (operands[0], 0));\n   emit_call_insn (gen_call_internal (XEXP (operands[0], 0), operands[1]));\n-  emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t stack_pointer_rtx,\n-\t\t\t GEN_INT (4)));\n   DONE;\n }\")\n \n@@ -551,17 +545,11 @@\n   \"\"\n   \"\n {\n-  emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t stack_pointer_rtx,\n-\t\t\t GEN_INT (-4)));\n   if (! call_address_operand (XEXP (operands[1], 0)))\n     XEXP (operands[1], 0) = force_reg (SImode, XEXP (operands[1], 0));\n   emit_call_insn (gen_call_value_internal (operands[0],\n \t\t\t\t\t   XEXP (operands[1], 0),\n \t\t\t\t\t   operands[2]));\n-  emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t stack_pointer_rtx,\n-\t\t\t GEN_INT (4)));\n   DONE;\n }\")\n "}]}