{"sha": "8a5b8fc719f5c5bd6bd732d95646193238343f39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1YjhmYzcxOWY1YzViZDZiZDczMmQ5NTY0NjE5MzIzODM0M2YzOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-15T04:41:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-15T20:56:50Z"}, "message": "compiler: discard global sink variables with static initializers\n\nThis is specifically for the test fixedbugs/issue23781.go, which\nbuilds a large static array.  The code does compile and work without\nthis change, but it takes a long time and generates a large object\nfile.  Discarding the unnecessary static initializer makes this test\nmuch faster.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/278172", "tree": {"sha": "eddea22d69c0152b414957227fac616c3d41c6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eddea22d69c0152b414957227fac616c3d41c6b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5b8fc719f5c5bd6bd732d95646193238343f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b8fc719f5c5bd6bd732d95646193238343f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5b8fc719f5c5bd6bd732d95646193238343f39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b8fc719f5c5bd6bd732d95646193238343f39/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23753c710d54fdf6f6c6cbe93c5b0fdbf209fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23753c710d54fdf6f6c6cbe93c5b0fdbf209fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23753c710d54fdf6f6c6cbe93c5b0fdbf209fc8"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "a596b241a4e8d02f76696ea2a5eb7e1d46a90010", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b8fc719f5c5bd6bd732d95646193238343f39/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b8fc719f5c5bd6bd732d95646193238343f39/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8a5b8fc719f5c5bd6bd732d95646193238343f39", "patch": "@@ -1,4 +1,4 @@\n-8b913a1865e36d4bd105f29aa0b12264a4e03515\n+85c390ec75c6c3f3fbfe08f6dac58585588c6211\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "fbf8935bb06a4b3333f591f45887c7cf63307a02", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b8fc719f5c5bd6bd732d95646193238343f39/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b8fc719f5c5bd6bd732d95646193238343f39/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=8a5b8fc719f5c5bd6bd732d95646193238343f39", "patch": "@@ -1558,6 +1558,17 @@ Gogo::write_globals()\n \t  || (no->is_const() && no->const_value()->is_sink()))\n         continue;\n \n+      // Skip global sink variables with static initializers.  With\n+      // non-static initializers we have to evaluate for side effects,\n+      // and we wind up initializing a dummy variable.  That is not\n+      // ideal but it works and it's a rare case.\n+      if (no->is_variable()\n+\t  && no->var_value()->is_global_sink()\n+\t  && !no->var_value()->has_pre_init()\n+\t  && (no->var_value()->init() == NULL\n+\t      || no->var_value()->init()->is_static_initializer()))\n+\tcontinue;\n+\n       // There is nothing useful we can output for constants which\n       // have ideal or non-integral type.\n       if (no->is_const())\n@@ -7447,7 +7458,7 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n   : type_(type), init_(init), preinit_(NULL), location_(location),\n     backend_(NULL), is_global_(is_global), is_parameter_(is_parameter),\n     is_closure_(false), is_receiver_(is_receiver),\n-    is_varargs_parameter_(false), is_used_(false),\n+    is_varargs_parameter_(false), is_global_sink_(false), is_used_(false),\n     is_address_taken_(false), is_non_escaping_address_taken_(false),\n     seen_(false), init_is_lowered_(false), init_is_flattened_(false),\n     type_from_init_tuple_(false), type_from_range_index_(false),"}, {"sha": "bdb3166006d068f654faed725ada4698b79d0341", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b8fc719f5c5bd6bd732d95646193238343f39/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b8fc719f5c5bd6bd732d95646193238343f39/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=8a5b8fc719f5c5bd6bd732d95646193238343f39", "patch": "@@ -2113,6 +2113,20 @@ class Variable\n   is_varargs_parameter() const\n   { return this->is_varargs_parameter_; }\n \n+  // Return whether this is a global sink variable, created only to\n+  // run an initializer.\n+  bool\n+  is_global_sink() const\n+  { return this->is_global_sink_; }\n+\n+  // Record that this is a global sink variable.\n+  void\n+  set_is_global_sink()\n+  {\n+    go_assert(this->is_global_);\n+    this->is_global_sink_ = true;\n+  }\n+\n   // Whether this variable's address is taken.\n   bool\n   is_address_taken() const\n@@ -2340,6 +2354,9 @@ class Variable\n   bool is_receiver_ : 1;\n   // Whether this is the varargs parameter of a function.\n   bool is_varargs_parameter_ : 1;\n+  // Whether this is a global sink variable created to run an\n+  // initializer.\n+  bool is_global_sink_ : 1;\n   // Whether this variable is ever referenced.\n   bool is_used_ : 1;\n   // Whether something takes the address of this variable.  For a"}, {"sha": "3b2e5a7aa86c7a7043ffbf495b179f8b76c64b43", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b8fc719f5c5bd6bd732d95646193238343f39/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b8fc719f5c5bd6bd732d95646193238343f39/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=8a5b8fc719f5c5bd6bd732d95646193238343f39", "patch": "@@ -2075,6 +2075,7 @@ Parse::create_dummy_global(Type* type, Expression* init,\n   if (type == NULL && init == NULL)\n     type = Type::lookup_bool_type();\n   Variable* var = new Variable(type, init, true, false, false, location);\n+  var->set_is_global_sink();\n   static int count;\n   char buf[30];\n   snprintf(buf, sizeof buf, \"_.%d\", count);"}]}