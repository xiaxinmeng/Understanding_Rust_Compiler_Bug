{"sha": "b18cfc286169fd26073ec1655f6a72d10fd6552d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE4Y2ZjMjg2MTY5ZmQyNjA3M2VjMTY1NWY2YTcyZDEwZmQ2NTUyZA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1998-10-22T16:11:16Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1998-10-22T16:11:16Z"}, "message": "rtl.def (POST_MODIFY, PRE_MODIFY): New generalized operators for addressing modes with side effects.\n\n\t* rtl.def (POST_MODIFY, PRE_MODIFY): New generalized operators for\n  \taddressing modes with side effects.  These are currently\n  \tplaceholders for the C4x target.\n\nFrom-SVN: r23228", "tree": {"sha": "5d2fc6e699cf3bcf783dee5bbc6986bc78316e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2fc6e699cf3bcf783dee5bbc6986bc78316e23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b18cfc286169fd26073ec1655f6a72d10fd6552d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18cfc286169fd26073ec1655f6a72d10fd6552d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b18cfc286169fd26073ec1655f6a72d10fd6552d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18cfc286169fd26073ec1655f6a72d10fd6552d/comments", "author": null, "committer": null, "parents": [{"sha": "f76707606ed9a8bd6b2de43536e6125c98206c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76707606ed9a8bd6b2de43536e6125c98206c2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76707606ed9a8bd6b2de43536e6125c98206c2f"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "23b3802564db916aa4772f2bad545b7841940594", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18cfc286169fd26073ec1655f6a72d10fd6552d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18cfc286169fd26073ec1655f6a72d10fd6552d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b18cfc286169fd26073ec1655f6a72d10fd6552d", "patch": "@@ -1,3 +1,9 @@\n+Fri Oct 23 11:11:56 1998  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* rtl.def (POST_MODIFY, PRE_MODIFY): New generalized operators for\n+  \taddressing modes with side effects.  These are currently\n+  \tplaceholders for the C4x target.\n+\n Thu Oct 22 16:46:35 1998  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n \n \t* loop.c (express_from): Make sure that when generating a PLUS of"}, {"sha": "5273fdffa8c76051ed4c66cbdbfe867b4825b00d", "filename": "gcc/rtl.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18cfc286169fd26073ec1655f6a72d10fd6552d/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18cfc286169fd26073ec1655f6a72d10fd6552d/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=b18cfc286169fd26073ec1655f6a72d10fd6552d", "patch": "@@ -723,6 +723,14 @@ DEF_RTL_EXPR(PRE_INC, \"pre_inc\", \"e\", 'x')\n DEF_RTL_EXPR(POST_DEC, \"post_dec\", \"e\", 'x')\n DEF_RTL_EXPR(POST_INC, \"post_inc\", \"e\", 'x')\n \n+/* These binary operations are used to represent generic address\n+   side-effects in memory addresses, except for simple incrementation\n+   or decrementation which use the above operations.  They are\n+   created automatically by the life_analysis pass in flow.c. \n+   (Note that these operators are currently placeholders.)  */\n+DEF_RTL_EXPR(PRE_MODIFY, \"pre_modify\", \"ee\", 'x')\n+DEF_RTL_EXPR(POST_MODIFY, \"post_modify\", \"ee\", 'x')\n+\n /* Comparison operations.  The ordered comparisons exist in two\n    flavors, signed and unsigned.  */\n DEF_RTL_EXPR(NE, \"ne\", \"ee\", '<')"}, {"sha": "2e8e69a5de107dc794d01a7244f9171795964913", "filename": "gcc/rtl.texi", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18cfc286169fd26073ec1655f6a72d10fd6552d/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18cfc286169fd26073ec1655f6a72d10fd6552d/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=b18cfc286169fd26073ec1655f6a72d10fd6552d", "patch": "@@ -2036,7 +2036,7 @@ and of @var{min} and @var{max} to @var{base}.  See rtl.def for details.@refill\n @cindex RTL predecrement\n @cindex RTL postdecrement\n \n-Four special side-effect expression codes appear as memory addresses.\n+Six special side-effect expression codes appear as memory addresses.\n \n @table @code\n @findex pre_dec\n@@ -2071,6 +2071,38 @@ being decremented.\n @findex post_inc\n @item (post_inc:@var{m} @var{x})\n Similar, but specifies incrementing @var{x} instead of decrementing it.\n+\n+@findex post_modify\n+@item (post_modify:@var{m} @var{x} @var{y})\n+\n+Represents the side effect of setting @var{x} to @var{y} and\n+represents @var{x} before @var{x} is modified.  @var{x} must be a\n+@code{reg} or @code{mem}, but most machines allow only a @code{reg}.\n+@var{m} must be the machine mode for pointers on the machine in use.\n+The amount @var{x} is decremented by is the length in bytes of the\n+machine mode of the containing memory reference of which this expression\n+serves as the address.  Note that this is not currently implemented.\n+\n+The expression @var{y} must be one of three forms:\n+@table @code\n+@code{(plus:@var{m} @var{x} @var{z})},\n+@code{(minus:@var{m} @var{x} @var{z})}, or\n+@code{(plus:@var{m} @var{x} @var{i})},\n+@end table\n+where @var{z} is an index register and @var{i} is a constant.\n+\n+Here is an example of its use:@refill\n+\n+@example\n+(mem:SF (post_modify:SI (reg:SI 42) (plus (reg:SI 42) (reg:SI 48))))\n+@end example\n+\n+This says to modify pseudo register 42 by adding the contents of pseudo\n+register 48 to it, after the use of what ever 42 points to.\n+\n+@findex post_modify\n+@item (pre_modify:@var{m} @var{x} @var{expr})\n+Similar except side effects happen before the use.\n @end table\n \n These embedded side effect expressions must be used with care.  Instruction"}]}