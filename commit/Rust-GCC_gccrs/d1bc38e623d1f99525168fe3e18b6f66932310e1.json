{"sha": "d1bc38e623d1f99525168fe3e18b6f66932310e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiYzM4ZTYyM2QxZjk5NTI1MTY4ZmUzZTE4YjZmNjY5MzIzMTBlMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-10T11:28:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-10T11:28:12Z"}, "message": "re PR rtl-optimization/55247 (internal compiler error: Max. number of generated reload insns per insn is achieved (90))\n\n\tPR target/55247\n\t* config/i386/i386.md (*movti_internal_rex64): Add \"!\" to riF->o\n\talternative.\n\ntestsuite/ChangeLog:\n\n\tPR target/55247\n\t* gcc.target/i386/pr55247.c: New test.\n\nFrom-SVN: r193388", "tree": {"sha": "002557346fe77d05d34ab9cc9dab784fe9ab8783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/002557346fe77d05d34ab9cc9dab784fe9ab8783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1bc38e623d1f99525168fe3e18b6f66932310e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bc38e623d1f99525168fe3e18b6f66932310e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1bc38e623d1f99525168fe3e18b6f66932310e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bc38e623d1f99525168fe3e18b6f66932310e1/comments", "author": null, "committer": null, "parents": [{"sha": "a22e57398097cc439bfa0f0cb4a1fecc64349e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22e57398097cc439bfa0f0cb4a1fecc64349e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a22e57398097cc439bfa0f0cb4a1fecc64349e07"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "b35dc900daabb13cbd6cd541b74a6c6569cc3de7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bc38e623d1f99525168fe3e18b6f66932310e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bc38e623d1f99525168fe3e18b6f66932310e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1bc38e623d1f99525168fe3e18b6f66932310e1", "patch": "@@ -1,3 +1,10 @@\n+2012-11-10  Vladimir Makarov  <vmakarov@redhat.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/55247\n+\t* config/i386/i386.md (*movti_internal_rex64): Add \"!\" to riF->o\n+\talternative.\n+\n 2012-11-09  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/54413\n@@ -23,9 +30,8 @@\n \t* lra.c (setup_operand_alternative): Use them.\n \t* lra-constraints.c (LOSER_COST_FACTOR, MAX_OVERALL_COST_BOUND):\n \tRemove.\n-\t(process_alt_operands): Use LRA_LOSER_COST_FACTOR and\n-\tLRA_MAX_REJECT.  Accumulate reject instead of setting for\n-\tnon-const.\n+\t(process_alt_operands): Use LRA_LOSER_COST_FACTOR and LRA_MAX_REJECT.\n+\tAccumulate reject instead of setting for non-const.\n \t(curr_insn_transform): Initialize best_losers and best_overall by\n \tINT_MAX.\n \n@@ -67,8 +73,8 @@\n \n \tPR rtl-optimization/54472\n \t* sel-sched-ir.c (has_dependence_note_reg_set): Handle implicit sets.\n-\t(has_dependence_note_reg_clobber,\n-\thas_dependence_note_reg_use): Likewise. \n+\t(has_dependence_note_reg_clobber, has_dependence_note_reg_use):\n+\tLikewise.\n \n 2012-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "2598a1f0da56e362fe6a2c1f3c05e55f8bb3b95c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bc38e623d1f99525168fe3e18b6f66932310e1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bc38e623d1f99525168fe3e18b6f66932310e1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d1bc38e623d1f99525168fe3e18b6f66932310e1", "patch": "@@ -1874,7 +1874,7 @@\n \t      (const_string \"OI\")))])\n \n (define_insn \"*movti_internal_rex64\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o  ,x,x ,m\")\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,!o ,x,x ,m\")\n \t(match_operand:TI 1 \"general_operand\"      \"riFo,riF,C,xm,x\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {"}, {"sha": "f27261f01b25e216aa31684d90fc627ee89be4dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bc38e623d1f99525168fe3e18b6f66932310e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bc38e623d1f99525168fe3e18b6f66932310e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1bc38e623d1f99525168fe3e18b6f66932310e1", "patch": "@@ -1,3 +1,8 @@\n+2012-11-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/55247\n+\t* gcc.target/i386/pr55247.c: New test.\n+\n 2012-11-09  Andrew Pinski  <apinski@cavium.com>\n \n \t* gcc.c-torture/execute/20121108-1.c: New test.\n@@ -84,7 +89,7 @@\n \tPR rtl-optimization/55151\n \t* gcc.dg/pr55151.c: Use ia32 instead of x86_64.\n \n-2012-11-05  Uros Bizjak  <ubizjak@gmail.com>\n+2012-11-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/tree-ssa/cunroll-1.c: Scan cunrolli dump.\n "}, {"sha": "4b5e626da3ce6234c208132175dc579223ebb685", "filename": "gcc/testsuite/gcc.target/i386/pr55247.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bc38e623d1f99525168fe3e18b6f66932310e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bc38e623d1f99525168fe3e18b6f66932310e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247.c?ref=d1bc38e623d1f99525168fe3e18b6f66932310e1", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mx32 -maddress-mode=long -mno-sse\" } */\n+\n+typedef unsigned int uint32_t;\n+typedef unsigned int uintptr_t;\n+typedef uint32_t Elf32_Word;\n+typedef uint32_t Elf32_Addr;\n+typedef struct {\n+  Elf32_Word st_name;\n+  Elf32_Addr st_value;\n+  Elf32_Word st_size;\n+  unsigned char st_other;\n+} Elf32_Sym;\n+typedef struct {\n+  Elf32_Word r_info;\n+}\n+Elf32_Rela;\n+typedef struct {\n+  union     {\n+    Elf32_Addr d_ptr;\n+  }\n+  d_un;\n+} Elf32_Dyn;\n+struct link_map   {\n+  Elf32_Dyn *l_info[34];\n+};\n+typedef struct link_map *lookup_t;\n+extern void symbind32 (Elf32_Sym *);\n+void\n+_dl_profile_fixup (struct link_map *l, Elf32_Word reloc_arg)\n+{\n+  const Elf32_Sym *const symtab  = (const void *) (l)->l_info[6]->d_un.d_ptr;\n+  const Elf32_Rela *const reloc  = (const void *) ((l)->l_info[23]->d_un.d_ptr + reloc_arg * sizeof (Elf32_Rela));\n+  const Elf32_Sym *refsym = &symtab[((reloc->r_info) >> 8)];\n+  const Elf32_Sym *defsym = refsym;\n+  Elf32_Sym sym = *defsym;\n+  symbind32 (&sym);\n+}"}]}