{"sha": "43439d5e8424f3a746003ef8953e1cdc120fbbd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0MzlkNWU4NDI0ZjNhNzQ2MDAzZWY4OTUzZTFjZGMxMjBmYmJkNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-29T01:45:54Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-29T01:45:54Z"}, "message": "c++: Parameter pack in requires parameter list [PR94808]\n\nWhen printing the substituted parameter list of a requires-expression as\npart of the \"in requirements with ...\" context line during concepts\ndiagnostics, we weren't considering that substitution into a parameter\npack can yield zero or multiple parameters.\n\nThis patch changes the way we print the parameter list of a\nrequires-expression in print_requires_expression_info.  We now print the\ndependent form of the parameter list (along with its template parameter\nmapping) instead of printing its substituted form.  Besides being an\nimprovement in its own, this also sidesteps the substitution issue in the\nPR altogether.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94808\n\t* error.c (print_requires_expression_info): Print the dependent\n\tform of the parameter list with its template parameter mapping,\n\trather than printing the substituted form.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94808\n\t* g++.dg/concepts/diagnostic12.C: New test.\n\t* g++.dg/concepts/diagnostic5.C: Adjust dg-message.", "tree": {"sha": "04b68af12b869de33fd41fbfaaca1673ff5d275c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04b68af12b869de33fd41fbfaaca1673ff5d275c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43439d5e8424f3a746003ef8953e1cdc120fbbd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43439d5e8424f3a746003ef8953e1cdc120fbbd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43439d5e8424f3a746003ef8953e1cdc120fbbd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43439d5e8424f3a746003ef8953e1cdc120fbbd7/comments", "author": null, "committer": null, "parents": [{"sha": "50a2f53562bfbf0cdc37be5d6fd7fd9e6271dba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a2f53562bfbf0cdc37be5d6fd7fd9e6271dba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a2f53562bfbf0cdc37be5d6fd7fd9e6271dba7"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "c0558015eb8359ec67a25d1f671dfeef7ca989c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43439d5e8424f3a746003ef8953e1cdc120fbbd7", "patch": "@@ -1,3 +1,10 @@\n+2020-04-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94808\n+\t* error.c (print_requires_expression_info): Print the dependent\n+\tform of the parameter list with its template parameter mapping,\n+\trather than printing the substituted form.\n+\n 2020-04-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/94583"}, {"sha": "46970f9b69914e62337aab685b1b7e77888ed1f7", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=43439d5e8424f3a746003ef8953e1cdc120fbbd7", "patch": "@@ -3746,7 +3746,6 @@ print_requires_expression_info (diagnostic_context *context, tree constr, tree a\n   map = tsubst_parameter_mapping (map, args, tf_none, NULL_TREE);\n   if (map == error_mark_node)\n     return;\n-  args = get_mapped_args (map);\n \n   print_location (context, cp_expr_loc_or_input_loc (expr));\n   pp_verbatim (context->printer, \"in requirements \");\n@@ -3756,19 +3755,12 @@ print_requires_expression_info (diagnostic_context *context, tree constr, tree a\n     pp_verbatim (context->printer, \"with \");\n   while (parms)\n     {\n-      tree next = TREE_CHAIN (parms);\n-\n-      TREE_CHAIN (parms) = NULL_TREE;\n-      cp_unevaluated u;\n-      tree p = tsubst (parms, args, tf_none, NULL_TREE);\n-      pp_verbatim (context->printer, \"%q#D\", p);\n-      TREE_CHAIN (parms) = next;\n-\n-      if (next)\n+      pp_verbatim (context->printer, \"%q#D\", parms);\n+      if (TREE_CHAIN (parms))\n         pp_separate_with_comma ((cxx_pretty_printer *)context->printer);\n-\n-      parms = next;\n+      parms = TREE_CHAIN (parms);\n     }\n+  pp_cxx_parameter_mapping ((cxx_pretty_printer *)context->printer, map);\n \n   pp_verbatim (context->printer, \"\\n\");\n }"}, {"sha": "a824ba8424ea14ef272c021bcc817f3defd31def", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43439d5e8424f3a746003ef8953e1cdc120fbbd7", "patch": "@@ -1,3 +1,9 @@\n+2020-04-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94808\n+\t* g++.dg/concepts/diagnostic12.C: New test.\n+\t* g++.dg/concepts/diagnostic5.C: Adjust dg-message.\n+\n 2020-04-28  Alexandre Oliva <oliva@adacore.com>\n \n \tPR target/94812"}, {"sha": "a757342f75462a851c39ef7bdfec69d90f60930b", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic12.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C?ref=43439d5e8424f3a746003ef8953e1cdc120fbbd7", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/94808\n+// { dg-do compile { target concepts } }\n+\n+template<typename T, typename... Args>\n+  concept c1 = requires (T t, Args... args) { *t; };\n+// { dg-message \"in requirements with .T t., .Args ... args. .with.* Args = \\{\\}\" \"\" { target *-*-* } .-1 }\n+\n+static_assert(c1<int>); // { dg-error \"failed\" }\n+\n+void f(...);\n+\n+template<typename... Args>\n+  concept c2 = requires (Args... args) { f(*args...); };\n+// { dg-message \"in requirements with .Args ... args. .with Args = \\{int, char\\}\" \"\" { target *-*-* } .-1 }\n+\n+static_assert(c2<int, char>); // { dg-error \"failed\" }"}, {"sha": "81705f6a0c6d3891983ac91e63d4c4e8d2bbea3f", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43439d5e8424f3a746003ef8953e1cdc120fbbd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic5.C?ref=43439d5e8424f3a746003ef8953e1cdc120fbbd7", "patch": "@@ -9,7 +9,7 @@ template<typename T>\n template<typename T>\n   concept c2 = requires (T x) { *x; };\n // { dg-message \"satisfaction of .c2<T>. .with T = char.\" \"\" { target *-*-* } .-1 }\n-// { dg-message \"in requirements with .char x.\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"in requirements with .T x. .with T = char.\" \"\" { target *-*-* } .-2 }\n // { dg-message \"required expression .* is invalid\" \"\" { target *-*-* } .-3 }\n \n template<typename T>\n@@ -25,7 +25,7 @@ template<typename T>\n template<typename T>\n   concept c5 = requires (T x) { { &x } -> c1; };\n // { dg-message \"satisfaction of .c5<T>. .with T = char.\" \"\" { target *-*-* } .-1 }\n-// { dg-message \"in requirements with .char x.\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"in requirements with .T x. .with T = char.\" \"\" { target *-*-* } .-2 }\n \n template<typename T>\n   requires (c1<T> || c2<T>) || (c3<T> || c4<T>) || c5<T> // { dg-message \"49: no operand\" }"}]}