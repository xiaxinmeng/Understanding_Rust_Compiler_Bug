{"sha": "f3f73e86ec8613f176db3e52bbfbfbb9636cb714", "node_id": "C_kwDOANBUbNoAKGYzZjczZTg2ZWM4NjEzZjE3NmRiM2U1MmJiZmJmYmI5NjM2Y2I3MTQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-27T06:44:49Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-27T06:44:49Z"}, "message": "[PATCH] PR tree-optimization/94026: Simplify (X>>8)&6 != 0 as X&1536 != 0.\n\nThis patch implements the missed optimization described in PR 94026,\nwhere a the shift can be eliminated from the sequence of a shift,\nfollowed by a bit-wise AND followed by an equality/inequality test.\nSpecifically, ((X << C1) & C2) cmp C3 into (X & (C2 >> C1)) cmp (C3 >> C1)\nand likewise ((X >> C1) & C2) cmp C3 into (X & (C2 << C1)) cmp (C3 << C1)\nwhere cmp is == or !=, and C1, C2 and C3 are integer constants.\nThe example in the subject line is taken from the hot function\nself_atari from the Go program Leela (in SPEC CPU 2017).\n\n2022-06-27  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/94026\n\t* match.pd (((X << C1) & C2) eq/ne C3): New simplification.\n\t(((X >> C1) & C2) eq/ne C3): Likewise.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/94026\n\t* gcc.dg/pr94026.c: New test case.", "tree": {"sha": "d1d5494a41fd8953a3de98c88875ad5875b484bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1d5494a41fd8953a3de98c88875ad5875b484bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f73e86ec8613f176db3e52bbfbfbb9636cb714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f73e86ec8613f176db3e52bbfbfbb9636cb714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f73e86ec8613f176db3e52bbfbfbb9636cb714", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f73e86ec8613f176db3e52bbfbfbb9636cb714/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae7895416a7aa4fc9e7f9fa646dca1f51bdea56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae7895416a7aa4fc9e7f9fa646dca1f51bdea56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae7895416a7aa4fc9e7f9fa646dca1f51bdea56"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "24cbbbb5bc1d718bd03af7712fc7255213f2a742", "filename": "gcc/match.pd", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f73e86ec8613f176db3e52bbfbfbb9636cb714/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f73e86ec8613f176db3e52bbfbfbb9636cb714/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f3f73e86ec8613f176db3e52bbfbfbb9636cb714", "patch": "@@ -3572,6 +3572,29 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t && wi::lshift (wi::to_wide (@0), cand) == wi::to_wide (@2))\n      (cmp @1 { build_int_cst (TREE_TYPE (@1), cand); }))))))\n \n+/* Fold ((X << C1) & C2) cmp C3 into (X & (C2 >> C1)) cmp (C3 >> C1)\n+\t((X >> C1) & C2) cmp C3 into (X & (C2 << C1)) cmp (C3 << C1).  */\n+(for cmp (ne eq)\n+ (simplify\n+  (cmp (bit_and:s (lshift:s @0 INTEGER_CST@1) INTEGER_CST@2) INTEGER_CST@3)\n+  (if (tree_fits_shwi_p (@1)\n+       && tree_to_shwi (@1) > 0\n+       && tree_to_shwi (@1) < TYPE_PRECISION (TREE_TYPE (@0))\n+       && tree_to_shwi (@1) <= wi::ctz (wi::to_wide (@3)))\n+   (with { wide_int c1 = wi::to_wide (@1);\n+\t   wide_int c2 = wi::lrshift (wi::to_wide (@2), c1);\n+\t   wide_int c3 = wi::lrshift (wi::to_wide (@3), c1); }\n+    (cmp (bit_and @0 { wide_int_to_tree (TREE_TYPE (@0), c2); })\n+\t { wide_int_to_tree (TREE_TYPE (@0), c3); }))))\n+ (simplify\n+  (cmp (bit_and:s (rshift:s @0 INTEGER_CST@1) INTEGER_CST@2) INTEGER_CST@3)\n+  (if (tree_fits_shwi_p (@1)\n+       && tree_to_shwi (@1) > 0\n+       && tree_to_shwi (@1) < TYPE_PRECISION (TREE_TYPE (@0))\n+       && tree_to_shwi (@1) <= wi::clz (wi::to_wide (@2))\n+       && tree_to_shwi (@1) <= wi::clz (wi::to_wide (@3)))\n+   (cmp (bit_and @0 (lshift @2 @1)) (lshift @3 @1)))))\n+\n /* Fold (X << C1) & C2 into (X << C1) & (C2 | ((1 << C1) - 1))\n         (X >> C1) & C2 into (X >> C1) & (C2 | ~((type) -1 >> C1))\n    if the new mask might be further optimized.  */"}, {"sha": "deb4efd57dc69942563c57b9fee7734de4a33e85", "filename": "gcc/testsuite/gcc.dg/pr94026.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f73e86ec8613f176db3e52bbfbfbb9636cb714/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94026.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f73e86ec8613f176db3e52bbfbfbb9636cb714/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94026.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94026.c?ref=f3f73e86ec8613f176db3e52bbfbfbb9636cb714", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int f1(int x) { return ((x >> 8) & 6) != 0; }\n+int f2(int x) { return ((x << 2) & 24) != 0; }\n+int f3(unsigned x) { return ((x << 2) & 15) != 0; }\n+int f4(unsigned x) { return ((x >> 2) & 14) != 0; }\n+\n+int fifth (int c)\n+{\n+    int a = (c >> 8) & 7;\n+\n+    if (a >= 2) {\n+\treturn 1;\n+    } else {\n+\treturn 0;\n+    }\n+}\n+/* { dg-final { scan-tree-dump-not \" << \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" >> \" \"optimized\" } } */\n+"}]}