{"sha": "e1666ebd9ad31dbd8b9b933c883bdd882cfd1522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE2NjZlYmQ5YWQzMWRiZDhiOWI5MzNjODgzYmRkODgyY2ZkMTUyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-14T02:28:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-14T02:35:14Z"}, "message": "c++: lambda in non-type template parm type [PR99478]\n\nIn this testcase, the non-type template parameter has the type of a\nlambda-expression.  This makes no sense because a lambda in template context\nis specified to be distinct between different specializations of the\ntemplate, even if the lambda is non-dependent, but here which specialization\nwe are dealing with depends on which lambda we have, and vice versa.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99478\n\t* parser.c (cp_parser_lambda_expression): Reject lambda\n\tin template parameter type.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99478\n\t* g++.dg/cpp2a/lambda-uneval14.C: New test.", "tree": {"sha": "50b0a965cfcd7ae9f3ccc3b08cfa4f27c7aa8d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50b0a965cfcd7ae9f3ccc3b08cfa4f27c7aa8d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1666ebd9ad31dbd8b9b933c883bdd882cfd1522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1666ebd9ad31dbd8b9b933c883bdd882cfd1522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1666ebd9ad31dbd8b9b933c883bdd882cfd1522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1666ebd9ad31dbd8b9b933c883bdd882cfd1522/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0589be0c59767cf4cbb0ef0e7d918cf6aa3d606c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0589be0c59767cf4cbb0ef0e7d918cf6aa3d606c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0589be0c59767cf4cbb0ef0e7d918cf6aa3d606c"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "3a10720631831c0d212101cf39595689e2bb179e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1666ebd9ad31dbd8b9b933c883bdd882cfd1522/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1666ebd9ad31dbd8b9b933c883bdd882cfd1522/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e1666ebd9ad31dbd8b9b933c883bdd882cfd1522", "patch": "@@ -10796,7 +10796,21 @@ cp_parser_lambda_expression (cp_parser* parser)\n   LAMBDA_EXPR_LOCATION (lambda_expr) = token->location;\n \n   if (cxx_dialect >= cxx20)\n-    /* C++20 allows lambdas in unevaluated context.  */;\n+    {\n+      /* C++20 allows lambdas in unevaluated context, but one in the type of a\n+\t non-type parameter is nonsensical.\n+\n+\t Distinguish a lambda in the parameter type from a lambda in the\n+\t default argument by looking at local_variables_forbidden_p, which is\n+\t only set in default arguments.  */\n+      if (processing_template_parmlist && !parser->local_variables_forbidden_p)\n+\t{\n+\t  error_at (token->location,\n+\t\t    \"lambda-expression in template parameter type\");\n+\t  token->error_reported = true;\n+\t  ok = false;\n+\t}\n+    }\n   else if (cp_unevaluated_operand)\n     {\n       if (!token->error_reported)"}, {"sha": "a18035954e16c3f50cdc1f805c4300c0f6ccfe97", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval14.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1666ebd9ad31dbd8b9b933c883bdd882cfd1522/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1666ebd9ad31dbd8b9b933c883bdd882cfd1522/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval14.C?ref=e1666ebd9ad31dbd8b9b933c883bdd882cfd1522", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/99478\n+// { dg-do compile { target c++20 } }\n+\n+template <decltype ([] {})> auto f() {} // { dg-error \"lambda\" }\n+\n+int main() { f<{}>(); }\t\t// { dg-prune-output \"no match\" }"}]}