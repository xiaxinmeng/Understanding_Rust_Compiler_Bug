{"sha": "259ee451e5455640a2ca975d45725496e08fab8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5ZWU0NTFlNTQ1NTY0MGEyY2E5NzVkNDU3MjU0OTZlMDhmYWI4ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-25T15:31:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-25T15:31:31Z"}, "message": "re PR tree-optimization/56175 (Issue with combine phase on x86.)\n\n2013-02-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56175\n\t* tree-ssa-forwprop.c (hoist_conversion_for_bitop_p): New predicate,\n\tsplit out from ...\n\t(simplify_bitwise_binary): ... here.  Also guard the conversion\n\tof (type) X op CST to (type) (X op ((type-x) CST)) with it.\n\n\t* gcc.dg/tree-ssa/forwprop-24.c: New testcase.\n\nFrom-SVN: r196263", "tree": {"sha": "2fae06852bcfc3d5f8c5c7798fab758d652f646e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fae06852bcfc3d5f8c5c7798fab758d652f646e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/259ee451e5455640a2ca975d45725496e08fab8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259ee451e5455640a2ca975d45725496e08fab8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/259ee451e5455640a2ca975d45725496e08fab8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259ee451e5455640a2ca975d45725496e08fab8e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5621a5d7b10710eb5dac52ee668c711bcc42fa72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5621a5d7b10710eb5dac52ee668c711bcc42fa72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5621a5d7b10710eb5dac52ee668c711bcc42fa72"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "ec210d638ddf16c05d8170f3d68637d8154e3d11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259ee451e5455640a2ca975d45725496e08fab8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259ee451e5455640a2ca975d45725496e08fab8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=259ee451e5455640a2ca975d45725496e08fab8e", "patch": "@@ -1,3 +1,11 @@\n+2013-02-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56175\n+\t* tree-ssa-forwprop.c (hoist_conversion_for_bitop_p): New predicate,\n+\tsplit out from ...\n+\t(simplify_bitwise_binary): ... here.  Also guard the conversion\n+\tof (type) X op CST to (type) (X op ((type-x) CST)) with it.\n+\n 2013-02-25  Catherine Moore  <clm@codesourcery.com>\n \n \tRevert:"}, {"sha": "bd2b6d6a63dc4f5b6665449baf9b1a75efa2ac49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259ee451e5455640a2ca975d45725496e08fab8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259ee451e5455640a2ca975d45725496e08fab8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=259ee451e5455640a2ca975d45725496e08fab8e", "patch": "@@ -1,3 +1,8 @@\n+2013-02-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56175\n+\t* gcc.dg/tree-ssa/forwprop-24.c: New testcase.\n+\n 2013-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/56403"}, {"sha": "74207cf1a812ea09cb4ffd53dbfe8e1146079f9f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-24.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259ee451e5455640a2ca975d45725496e08fab8e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259ee451e5455640a2ca975d45725496e08fab8e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-24.c?ref=259ee451e5455640a2ca975d45725496e08fab8e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\r\n+\r\n+void bar (void);\r\n+unsigned short\r\n+foo (unsigned char x, unsigned short y)\r\n+{\r\n+  unsigned char t = (unsigned char)((x & 1) ^ ((unsigned char)y & 1));\r\n+  if (t == 1)\r\n+    bar ();\r\n+  return y;\r\n+}\r\n+\r\n+/* We should have combined this to require only one bitwise and\r\n+   as in (x ^ (char) y) & 1.  */\r\n+\r\n+/* { dg-final { scan-tree-dump-times \" & \" 1 \"cddce1\" } } */\r\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */\r"}, {"sha": "edcf92918b7d597e704222cee4d447c3c2e9a6dd", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/259ee451e5455640a2ca975d45725496e08fab8e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/259ee451e5455640a2ca975d45725496e08fab8e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=259ee451e5455640a2ca975d45725496e08fab8e", "patch": "@@ -1772,6 +1772,29 @@ defcodefor_name (tree name, enum tree_code *code, tree *arg1, tree *arg2)\n   /* Ignore arg3 currently. */\n }\n \n+/* Return true if a conversion of an operand from type FROM to type TO\n+   should be applied after performing the operation instead.  */\n+\n+static bool\n+hoist_conversion_for_bitop_p (tree to, tree from)\n+{\n+  /* That's a good idea if the conversion widens the operand, thus\n+     after hoisting the conversion the operation will be narrower.  */\n+  if (TYPE_PRECISION (from) < TYPE_PRECISION (to))\n+    return true;\n+\n+  /* It's also a good idea if the conversion is to a non-integer mode.  */\n+  if (GET_MODE_CLASS (TYPE_MODE (to)) != MODE_INT)\n+    return true;\n+\n+  /* Or if the precision of TO is not the same as the precision\n+     of its mode.  */\n+  if (TYPE_PRECISION (to) != GET_MODE_PRECISION (TYPE_MODE (to)))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Simplify bitwise binary operations.\n    Return true if a transformation applied, otherwise return false.  */\n \n@@ -1789,9 +1812,11 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n   defcodefor_name (arg1, &def1_code, &def1_arg1, &def1_arg2);\n   defcodefor_name (arg2, &def2_code, &def2_arg1, &def2_arg2);\n \n-  /* Try to fold (type) X op CST -> (type) (X op ((type-x) CST)).  */\n+  /* Try to fold (type) X op CST -> (type) (X op ((type-x) CST))\n+     when profitable.  */\n   if (TREE_CODE (arg2) == INTEGER_CST\n       && CONVERT_EXPR_CODE_P (def1_code)\n+      && hoist_conversion_for_bitop_p (TREE_TYPE (arg1), TREE_TYPE (def1_arg1))\n       && INTEGRAL_TYPE_P (TREE_TYPE (def1_arg1))\n       && int_fits_type_p (arg2, TREE_TYPE (def1_arg1)))\n     {\n@@ -1816,15 +1841,7 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n   if (CONVERT_EXPR_CODE_P (def1_code)\n       && CONVERT_EXPR_CODE_P (def2_code)\n       && types_compatible_p (TREE_TYPE (def1_arg1), TREE_TYPE (def2_arg1))\n-      /* Make sure that the conversion widens the operands, or has same\n-\t precision,  or that it changes the operation to a bitfield\n-\t precision.  */\n-      && ((TYPE_PRECISION (TREE_TYPE (def1_arg1))\n-\t   <= TYPE_PRECISION (TREE_TYPE (arg1)))\n-\t  || (GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (arg1)))\n-\t      != MODE_INT)\n-\t  || (TYPE_PRECISION (TREE_TYPE (arg1))\n-\t      != GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (arg1))))))\n+      && hoist_conversion_for_bitop_p (TREE_TYPE (arg1), TREE_TYPE (def1_arg1)))\n     {\n       gimple newop;\n       tree tem = make_ssa_name (TREE_TYPE (def1_arg1), NULL);"}]}