{"sha": "7e43c821f0301ea2d61568390afe223a240a754e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U0M2M4MjFmMDMwMWVhMmQ2MTU2ODM5MGFmZTIyM2EyNDBhNzU0ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-25T22:20:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-25T22:20:15Z"}, "message": "stormy16-protos.h: Remove the prototype for xstormy16_setup_incoming_varargs.\n\n\t* config/stormy16/stormy16-protos.h: Remove the prototype for\n\txstormy16_setup_incoming_varargs.\n\t* config/stormy16/stormy16.c\n\t(xstormy16_setup_incoming_varargs): Remove.\n\t(xstormy16_return_in_memory): New.\n\t(TARGET_PROMOTE_FUNCTION_ARGS): Likewise.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t* config/stormy16/stormy16.h (PROMOTE_FUNCTION_ARGS): Remove.\n\t(PROMOTE_FUNCTION_RETURN): Likewise\n\t(PROMOTE_PROTOTYPES): Likewise\n\t(RETURN_IN_MEMORY): Likewise\n\t(STRUCT_VALUE): Likewise\n\t(SETUP_INCOMING_VARARGS): Likewise\n\nFrom-SVN: r76590", "tree": {"sha": "2008cd228b55ca8d8569963af5e58ca7e65bc878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2008cd228b55ca8d8569963af5e58ca7e65bc878"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e43c821f0301ea2d61568390afe223a240a754e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e43c821f0301ea2d61568390afe223a240a754e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e43c821f0301ea2d61568390afe223a240a754e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e43c821f0301ea2d61568390afe223a240a754e/comments", "author": null, "committer": null, "parents": [{"sha": "01b84e139bccdc098b20c2cef7049110ad49b51b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b84e139bccdc098b20c2cef7049110ad49b51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b84e139bccdc098b20c2cef7049110ad49b51b"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "64cc3881fa1e25e331cb0ae7f62f2d5cee71805a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e43c821f0301ea2d61568390afe223a240a754e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e43c821f0301ea2d61568390afe223a240a754e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e43c821f0301ea2d61568390afe223a240a754e", "patch": "@@ -1,3 +1,22 @@\n+2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/stormy16/stormy16-protos.h: Remove the prototype for\n+\txstormy16_setup_incoming_varargs.\n+\t* config/stormy16/stormy16.c\n+\t(xstormy16_setup_incoming_varargs): Remove.\n+\t(xstormy16_return_in_memory): New.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS): Likewise.\n+\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t* config/stormy16/stormy16.h (PROMOTE_FUNCTION_ARGS): Remove.\n+\t(PROMOTE_FUNCTION_RETURN): Likewise\n+\t(PROMOTE_PROTOTYPES): Likewise\n+\t(RETURN_IN_MEMORY): Likewise\n+\t(STRUCT_VALUE): Likewise\n+\t(SETUP_INCOMING_VARARGS): Likewise\n+\n 2004-01-25  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_offset_within_object_p): New function."}, {"sha": "9fc544db3b3a5e26cb4448486e598dd79fcdda3e", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e43c821f0301ea2d61568390afe223a240a754e/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e43c821f0301ea2d61568390afe223a240a754e/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=7e43c821f0301ea2d61568390afe223a240a754e", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in xstormy16.c\n-   Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GCC.\n@@ -30,15 +30,11 @@ extern int xstormy16_interrupt_function_p (void);\n extern int xstormy16_epilogue_uses (int);\n extern void xstormy16_function_profiler (void);\n \n-#if defined (TREE_CODE)\n-#  if defined (HAVE_MACHINE_MODES)\n+#if defined (TREE_CODE) && defined (HAVE_MACHINE_MODES)\n extern CUMULATIVE_ARGS xstormy16_function_arg_advance \n  (CUMULATIVE_ARGS, enum machine_mode, tree, int);\n extern rtx xstormy16_function_arg\n  (CUMULATIVE_ARGS, enum machine_mode, tree, int);\n-#  endif\n-extern void xstormy16_setup_incoming_varargs \n- (CUMULATIVE_ARGS, int, tree, int *);\n #endif\n \n #if defined (TREE_CODE) && defined (RTX_CODE)"}, {"sha": "88b885e283b610888b2bfc1019faf2cd2c5d97dd", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e43c821f0301ea2d61568390afe223a240a754e/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e43c821f0301ea2d61568390afe223a240a754e/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=7e43c821f0301ea2d61568390afe223a240a754e", "patch": "@@ -1,5 +1,5 @@\n /* Xstormy16 target functions.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -57,6 +57,7 @@ static void xstormy16_init_builtins (void);\n static rtx xstormy16_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static bool xstormy16_rtx_costs (rtx, int, int, int *);\n static int xstormy16_address_cost (rtx);\n+static bool xstormy16_return_in_memory (tree, tree);\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -1233,16 +1234,6 @@ xstormy16_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n   return gen_rtx_REG (mode, cum + 2);\n }\n \n-/* Do any needed setup for a variadic function.  CUM has not been updated\n-   for the last named argument which has type TYPE and mode MODE.  */\n-void\n-xstormy16_setup_incoming_varargs (CUMULATIVE_ARGS cum ATTRIBUTE_UNUSED,\n-\t\t\t\t  int int_mode ATTRIBUTE_UNUSED,\n-\t\t\t\t  tree type ATTRIBUTE_UNUSED,\n-\t\t\t\t  int *pretend_size ATTRIBUTE_UNUSED)\n-{\n-}\n-\n /* Build the va_list type.\n \n    For this chip, va_list is a record containing a counter and a pointer.\n@@ -1436,8 +1427,9 @@ xstormy16_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n    relevant.  (Actually, on most machines, scalar values are returned\n    in the same place regardless of mode).\n \n-   If `PROMOTE_FUNCTION_RETURN' is defined, you must apply the same promotion\n-   rules specified in `PROMOTE_MODE' if VALTYPE is a scalar type.\n+   If `TARGET_PROMOTE_FUNCTION_RETURN' is defined to return true, you\n+   must apply the same promotion rules specified in `PROMOTE_MODE' if\n+   VALTYPE is a scalar type.\n \n    If the precise function being called is known, FUNC is a tree node\n    (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This makes it\n@@ -2194,7 +2186,12 @@ xstormy16_expand_builtin(tree exp, rtx target,\n \n   return retval;\n }\n-\n+\f\n+static bool\n+xstormy16_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return int_size_in_bytes (type) > UNITS_PER_WORD * NUM_ARGUMENT_REGISTERS;\n+}\n \f\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.hword\\t\"\n@@ -2214,4 +2211,16 @@ xstormy16_expand_builtin(tree exp, rtx target,\n #undef TARGET_BUILD_BUILTIN_VA_LIST_TYPE\n #define TARGET_BUILD_BUILTIN_VA_LIST_TYPE xstormy16_build_builtin_va_list\n \n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY xstormy16_return_in_memory\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "64d6cc96d05b8826de745071f5df1773b58d8052", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e43c821f0301ea2d61568390afe223a240a754e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e43c821f0301ea2d61568390afe223a240a754e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=7e43c821f0301ea2d61568390afe223a240a754e", "patch": "@@ -1,5 +1,5 @@\n /* Xstormy16 cpu description.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -89,10 +89,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     (MODE) = HImode;\t\t\t\t\t\t\t\\\n } while (0)\n \n-#define PROMOTE_FUNCTION_ARGS 1\n-\n-#define PROMOTE_FUNCTION_RETURN 1\n-\n #define PARM_BOUNDARY 16\n \n #define STACK_BOUNDARY 16\n@@ -402,8 +398,6 @@ enum reg_class\n \f\n /* Passing Function Arguments on the Stack */\n \n-#define PROMOTE_PROTOTYPES 1\n-\n #define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)\n \n #define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n@@ -458,14 +452,6 @@ enum reg_class\n \n #define FUNCTION_VALUE_REGNO_P(REGNO) ((REGNO) == RETURN_VALUE_REGNUM)\n \n-\f\n-/* How Large Values are Returned */\n-\n-#define RETURN_IN_MEMORY(TYPE) \\\n-  (int_size_in_bytes (TYPE) > UNITS_PER_WORD * NUM_ARGUMENT_REGISTERS)\n-\n-#define STRUCT_VALUE 0\n-\n \f\n /* Function Entry and Exit */\n \n@@ -492,10 +478,6 @@ enum reg_class\n \f\n /* Implementing the Varargs Macros.  */\n \n-#define SETUP_INCOMING_VARARGS(ARGS_SO_FAR, MODE, TYPE, PRETEND_ARGS_SIZE, SECOND_TIME) \\\n-  if (! SECOND_TIME) \\\n-    xstormy16_setup_incoming_varargs (ARGS_SO_FAR, MODE, TYPE, & PRETEND_ARGS_SIZE)\n-\n /* Implement the stdarg/varargs va_start macro.  STDARG_P is nonzero if this\n    is stdarg.h instead of varargs.h.  VALIST is the tree of the va_list\n    variable to initialize.  NEXTARG is the machine independent notion of the"}]}