{"sha": "bdf057c6e206b32e59f8f287cae912cccee80d2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmMDU3YzZlMjA2YjMyZTU5ZjhmMjg3Y2FlOTEyY2NjZWU4MGQyYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-10T12:26:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-10T12:26:25Z"}, "message": "alpha.c (alpha_setup_incoming_varargs): Pass pointer to cum struct in the call to function_arg_advance.\n\n2010-10-10  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/alpha/alpha.c (alpha_setup_incoming_varargs): Pass pointer\n\tto cum struct in the call to function_arg_advance.\n\t(alpha_function_arg_advance): Mark named as unused.\n\nFrom-SVN: r165252", "tree": {"sha": "4024c92d6019d2a2f1385e89e04acbb1e7a99ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4024c92d6019d2a2f1385e89e04acbb1e7a99ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdf057c6e206b32e59f8f287cae912cccee80d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf057c6e206b32e59f8f287cae912cccee80d2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf057c6e206b32e59f8f287cae912cccee80d2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf057c6e206b32e59f8f287cae912cccee80d2c/comments", "author": null, "committer": null, "parents": [{"sha": "4304395d8602b0913bcfb1e65984e3aefa5bcf69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4304395d8602b0913bcfb1e65984e3aefa5bcf69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4304395d8602b0913bcfb1e65984e3aefa5bcf69"}], "stats": {"total": 79, "additions": 36, "deletions": 43}, "files": [{"sha": "53f05f61fa6daec2b38fa2e3d964206f6918f4c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf057c6e206b32e59f8f287cae912cccee80d2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf057c6e206b32e59f8f287cae912cccee80d2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdf057c6e206b32e59f8f287cae912cccee80d2c", "patch": "@@ -1,3 +1,9 @@\n+2010-10-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_setup_incoming_varargs): Pass pointer\n+\tto cum struct in the call to function_arg_advance.\n+\t(alpha_function_arg_advance): Mark named as unused.\n+\n 2010-10-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_handle_option): Make \"value\" with\n@@ -130,8 +136,7 @@\n 2010-10-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45945\n-\t* tree-ssa.c (execute_update_addresses_taken): Fixup LHS\n-\tscanning.\n+\t* tree-ssa.c (execute_update_addresses_taken): Fixup LHS scanning.\n \n 2010-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -170,7 +175,7 @@\n \n \tPR tree-optimization/45903\n \t* simplify-rtx.c (simplify_subreg): Optimize lowpart SUBREG\n-\tof *SHIFTRT of MEM.\n+\tof {A,L}SHIFTRT of MEM.\n \n 2010-10-08  Richard Guenther  <rguenther@suse.de>\n \n@@ -202,8 +207,7 @@\n \t* common.opt (flag_complex_method, flag_evaluation_order,\n \tflag_ira_algorithm, flag_ira_region, flag_warn_unused_result): New\n \tVariable declarations.\n-\t* configure.ac (tm_include_list): Include flags.h instead of\n-\toptions.h.\n+\t* configure.ac (tm_include_list): Include flags.h instead of options.h.\n \t* configure: Regenerate.\n \t* flags.h: Condition out contents for target libraries.  Include\n \toptions.h at end of file.\n@@ -379,8 +383,7 @@\n 2010-10-07  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* builtins.c (rewrite_call_expr): Move code to...\n-\t(rewrite_call_expr_valist): ...here.  Call\n-\tbuild_call_expr_loc_array.\n+\t(rewrite_call_expr_valist): ...here.  Call build_call_expr_loc_array.\n \t(rewrite_call_expr_array): New function.\n \t(fold_builtin_sprintf_chk_1): New function.\n \t(fold_builtin_sprintf_chk): Call it.\n@@ -640,11 +643,9 @@\n \n 2010-10-06  Nick Clifton  <nickc@redhat.com>\n \n-\t* config/mn10300/mn10300.h (FIRST_PSEUDO_REGISTER): Increment by\n-\tone.\n+\t* config/mn10300/mn10300.h (FIRST_PSEUDO_REGISTER): Increment by one.\n \t(MDR_REGNUM): Define.\n-\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Add MDR as a fixed\n-\tregister.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Add MDR as a fixed register.\n \t(REG_CLASS_CONTENTS): Add MDR to ALL_REGS.\n \t(INCOMING_RETURN_ADDR_RTX): Define in terms of MDR.\n \t(REGISTER_NAMES): Add MDR.\n@@ -654,8 +655,7 @@\n \t(mn10300_gen_multiple_store): Use F.\n \t(expand_prologue): Use F.  Use gen_movsf() to push floating\n \tpoint registers.\n-\t(expand_epilogue): Use gen_movsf() to pop floating point\n-\tregisters.\n+\t(expand_epilogue): Use gen_movsf() to pop floating point registers.\n \t(mn10300_option_override): Disable combine stack adjust pass.\n \n 2010-10-06  Thomas Schwinge  <thomas@schwinge.name>\n@@ -717,8 +717,7 @@\n \tread_cmdline_option, set_option): Add diagnostic_context\n \tparameter.  Update calls among these functions.\n \t(set_option): Don't use global_dc.\n-\t* opts.c (read_cmdline_options): Pass global_dc to\n-\tread_cmdline_option.\n+\t* opts.c (read_cmdline_options): Pass global_dc to read_cmdline_option.\n \t(decode_options): Pass global_dc to enable_warning_as_error.\n \t(common_handle_option): Pass global_dc to enable_warning_as_error.\n \t(enable_warning_as_error): Add diagnostic_context parameter.\n@@ -750,7 +749,7 @@\n \tdiagnostic_context typedef.\n \n 2010-10-05  Olivier Hainque  <hainque@adacore.com>\n-            Nicolas Roche  <roche@adacore.com>\n+\t    Nicolas Roche  <roche@adacore.com>\n \n \t* config/vxworksae.h: Add missing VXWORKS_OS_CPP_BUILTINS.\n \t* config/rs6000/vxworks.h: Remove redundant CPP builtin definitions.\n@@ -791,7 +790,7 @@\n \t(pass_ipa_tree_profile): Declare.\n \n 2010-10-05  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n-            Christian Borntraeger  <Christian.Borntraeger@de.ibm.com>\n+\t    Christian Borntraeger  <Christian.Borntraeger@de.ibm.com>\n \n \t* gcc/config/s390/s390.c (z196_cost): New.\n \t(s390_handle_arch_option): Add -march=z196.\n@@ -836,15 +835,16 @@\n \tinsn definition.\n \t(add<mode>3, *add<mode>3_carry1_cc, *add<mode>3_carry1_cconly)\n \t(*add<mode>3_carry2_cc, *add<mode>3_carry2_cconly, *add<mode>3_cc)\n-\t(*add<mode>3_cconly, *add<mode>3_cconly2, *add<mode>3_imm_cc, *sub<mode>3)\n-\t(*sub<mode>3_borrow_cc, *sub<mode>3_borrow_cconly, *sub<mode>3_cc)\n-\t(*sub<mode>3_cc2, *sub<mode>3_cconly, *sub<mode>3_cconly2)\n-\t(*anddi3_cc, *anddi3_cconly, *anddi3, *andsi3_cc, *andsi3_cconly)\n-\t(*andsi3_zarch, *andsi3_esa, *andhi3_zarch, *andqi3_zarch, *iordi3_cc)\n-\t(*iordi3_cconly, *iordi3, *iorsi3_cc, *iorsi3_cconly, *iorsi3_zarch)\n-\t(*iorhi3_zarch, *iorqi3_zarch, *xordi3_cc, *xordi3_cconly, *xordi3)\n-\t(*xorsi3_cc, *xorsi3_cconly, *xorsi3, *xorhi3, *xorqi3, *<shift><mode>3)\n-\t(*<shift><mode>3_and, *ashr<mode>3_cc, *ashr<mode>3_cconly, *ashr<mode>3)\n+\t(*add<mode>3_cconly, *add<mode>3_cconly2, *add<mode>3_imm_cc)\n+\t(*sub<mode>3, *sub<mode>3_borrow_cc, *sub<mode>3_borrow_cconly)\n+\t(*sub<mode>3_cc, *sub<mode>3_cc2, *sub<mode>3_cconly)\n+\t(*sub<mode>3_cconly2, *anddi3_cc, *anddi3_cconly, *anddi3, *andsi3_cc)\n+\t(*andsi3_cconly, *andsi3_zarch, *andsi3_esa, *andhi3_zarch\n+\t(*andqi3_zarch, *iordi3_cc, *iordi3_cconly, *iordi3, *iorsi3_cc)\n+\t(*iorsi3_cconly, *iorsi3_zarch, *iorhi3_zarch, *iorqi3_zarch)\n+\t(*xordi3_cc, *xordi3_cconly, *xordi3, *xorsi3_cc, *xorsi3_cconly)\n+\t(*xorsi3, *xorhi3, *xorqi3, *<shift><mode>3, *<shift><mode>3_and)\n+\t(*ashr<mode>3_cc, *ashr<mode>3_cconly, *ashr<mode>3)\n \t(*ashr<mode>3_cc_and, *ashr<mode>3_cconly_and, *ashr<mode>3_and):\n \tSupport new z196 instructions.\n \n@@ -877,8 +877,7 @@\n \t* flags.h (g_switch_value, g_switch_set): Remove.\n \t* opts.c (g_switch_value, g_switch_set): Remove.\n \t* config/g.opt (G): Add Var(g_switch_value).\n-\t* config/alpha/alpha.c (alpha_handle_option): Don't handle -G\n-\there.\n+\t* config/alpha/alpha.c (alpha_handle_option): Don't handle -G here.\n \t(alpha_option_override): Check global_options_set.x_g_switch_value\n \tinstead of g_switch_set.\n \t(alpha_in_small_data_p): Remove cast in comparison with\n@@ -890,8 +889,7 @@\n \t(frv_handle_option): Don't handle -G here.\n \t(frv_option_override): Check global_options_set.x_g_switch_value\n \tinstead of g_switch_set.  Don't modify g_switch_set.\n-\t(frv_in_small_data_p): Remove cast in comparison with\n-\tg_switch_value.\n+\t(frv_in_small_data_p): Remove cast in comparison with g_switch_value.\n \t* config/frv/frv.h (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Cast\n \tg_switch_value to unsigned HOST_WIDE_INT.\n \t* config/ia64/ia64.c (ia64_handle_option): Don't handle -G here.\n@@ -911,26 +909,23 @@\n \tg_switch_value.\n \t(m32r_file_start): Format g_switch_value with %d.\n \t* config/m32r/m32r.h (ASM_OUTPUT_ALIGNED_COMMON,\n-\tASM_OUTPUT_ALIGNED_BSS): Cast g_switch_value to unsigned\n-\tHOST_WIDE_INT.\n+\tASM_OUTPUT_ALIGNED_BSS): Cast g_switch_value to unsigned HOST_WIDE_INT.\n \t* config/microblaze/microblaze.c (microblaze_handle_option): Don't\n \thandle -G here.\n \t(microblaze_option_override): Check\n \tglobal_options_set.x_g_switch_value instead of g_switch_set.\n \t* config/mips/mips.c (mips_handle_option): Don't handle -G here.\n \t(mips_option_override): Check global_options_set.x_g_switch_value\n \tinstead of g_switch_set.\n-\t* config/rs6000/rs6000.c (rs6000_handle_option): Don't handle -G\n-\there.\n+\t* config/rs6000/rs6000.c (rs6000_handle_option): Don't handle -G here.\n \t(rs6000_file_start): Format g_switch_value with %d.\n \t(small_data_operand, rs6000_elf_in_small_data_p): Remove casts in\n \tcomparisons with g_switch_value.\n \t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Check\n \tglobal_options_set.x_g_switch_value instead of g_switch_set.\n \t* config/rs6000/vxworks.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Check\n \tglobal_options_set.x_g_switch_value instead of g_switch_set.\n-\t* config/score/score.c (score_handle_option): Don't handle -G\n-\there.\n+\t* config/score/score.c (score_handle_option): Don't handle -G here.\n \t* config/score/score3.c (score3_option_override): Check\n \tglobal_options_set.x_g_switch_value instead of g_switch_set.\n \t* config/score/score7.c (score7_option_override): Check\n@@ -1054,8 +1049,7 @@\n \tflag_speculative_prefetching_set): Remove.\n \t* gcc.c (driver_handle_option): Take opts_set parameter.  Assert\n \tthat it is &global_options_set.\n-\t(process_command): Pass &global_options_set to\n-\tread_cmdline_option.\n+\t(process_command): Pass &global_options_set to read_cmdline_option.\n \t* lto-opts.c (lto_reissue_options): Pass &global_options_set to\n \tset_option.\n \t* toplev.c (target_flags_explicit): Remove.\n@@ -1086,8 +1080,7 @@\n \t(convert_to_anonymous_field): New static function.\n \t(convert_for_assignment): If -fplan9-extensions, permit converting\n \tpointer to struct to pointer to anonymous field.\n-\t* c-decl.c (grokfield): If -fplan9-extensions, permit anonymous\n-\tfields.\n+\t* c-decl.c (grokfield): If -fplan9-extensions, permit anonymous fields.\n \t(is_duplicate_field): New static function.\n \t(detect_field_duplicates_hash): If -fplan9-extensions, check for\n \ttypedef names duplicating field names.\n@@ -1118,7 +1111,7 @@\n \n 2010-10-03  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386/i386.md (*ashl<mode>3_mask): Change operand 2 preticate\n+\t* config/i386/i386.md (*ashl<mode>3_mask): Change operand 2 predicate\n \tto nonimmediate_operand.  Force operand 2 to register when allowed.\n \t(*<shiftrt_insn><mode>3_mask): Ditto.\n \t(*<rotate_insn><mode>3_mask): Ditto."}, {"sha": "bd118f7b95b564b917cb7475c7bb1232536ccc04", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf057c6e206b32e59f8f287cae912cccee80d2c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf057c6e206b32e59f8f287cae912cccee80d2c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=bdf057c6e206b32e59f8f287cae912cccee80d2c", "patch": "@@ -5697,7 +5697,7 @@ alpha_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n static void\n alpha_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t\t    const_tree type, bool named)\n+\t\t\t    const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   bool onstack = targetm.calls.must_pass_in_stack (mode, type);\n   int increment = onstack ? 6 : ALPHA_ARG_SIZE (mode, type, named);\n@@ -6138,7 +6138,7 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n   CUMULATIVE_ARGS cum = *pcum;\n \n   /* Skip the current argument.  */\n-  targetm.calls.function_arg_advance (cum, mode, type, true);\n+  targetm.calls.function_arg_advance (&cum, mode, type, true);\n \n #if TARGET_ABI_UNICOSMK\n   /* On Unicos/Mk, the standard subroutine __T3E_MISMATCH stores all register"}]}