{"sha": "9268ba9ad692f010dc8447c165404ac201d0a6d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2OGJhOWFkNjkyZjAxMGRjODQ0N2MxNjU0MDRhYzIwMWQwYTZkNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-08-29T18:50:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-08-29T18:50:30Z"}, "message": "gfortran.h (gfc_use_list): Add where field.\n\n\t* gfortran.h (gfc_use_list): Add where field.\n\t* module.c (use_locus): New static variable.\n\t(gfc_match_use): Set it.\n\t(gfc_use_module): Copy it to gfc_use_list's where field.\n\t* trans-decl.c (gfc_generate_module_vars): Call gfc_trans_use_stmts.\n\t(gfc_trans_use_stmts): Set backend locus before calling the debug\n\thook.  Allow non-VAR_DECLs to be created even for non-external\n\tmodule.  Don't emit anything so far for renames from different\n\tmodules.\n\nFrom-SVN: r139780", "tree": {"sha": "608299ccb142373813b47b20670e29f7a75ee3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/608299ccb142373813b47b20670e29f7a75ee3c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9268ba9ad692f010dc8447c165404ac201d0a6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9268ba9ad692f010dc8447c165404ac201d0a6d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9268ba9ad692f010dc8447c165404ac201d0a6d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9268ba9ad692f010dc8447c165404ac201d0a6d4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f51d8f1af29a9c5db950dbf4158387067eecce7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51d8f1af29a9c5db950dbf4158387067eecce7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51d8f1af29a9c5db950dbf4158387067eecce7e"}], "stats": {"total": 72, "additions": 50, "deletions": 22}, "files": [{"sha": "aee333944afc07591cefe403257e304761bab54a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9268ba9ad692f010dc8447c165404ac201d0a6d4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9268ba9ad692f010dc8447c165404ac201d0a6d4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9268ba9ad692f010dc8447c165404ac201d0a6d4", "patch": "@@ -1,5 +1,15 @@\n 2008-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gfortran.h (gfc_use_list): Add where field.\n+\t* module.c (use_locus): New static variable.\n+\t(gfc_match_use): Set it.\n+\t(gfc_use_module): Copy it to gfc_use_list's where field.\n+\t* trans-decl.c (gfc_generate_module_vars): Call gfc_trans_use_stmts.\n+\t(gfc_trans_use_stmts): Set backend locus before calling the debug\n+\thook.  Allow non-VAR_DECLs to be created even for non-external\n+\tmodule.  Don't emit anything so far for renames from different\n+\tmodules.\n+\n \tPR fortran/24790\n \t* trans-decl.c (create_function_arglist): Set DECL_BY_REFERENCE on\n \tPARM_DECLs with pointer or reference type."}, {"sha": "d64435155675eb9f4ee134f3a5f5c84f355a7275", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9268ba9ad692f010dc8447c165404ac201d0a6d4/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9268ba9ad692f010dc8447c165404ac201d0a6d4/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9268ba9ad692f010dc8447c165404ac201d0a6d4", "patch": "@@ -1153,6 +1153,7 @@ typedef struct gfc_use_list\n   const char *module_name;\n   int only_flag;\n   struct gfc_use_rename *rename;\n+  locus where;\n   /* Next USE statement.  */\n   struct gfc_use_list *next;\n }"}, {"sha": "0f504efededfc6d0ab68b67e0693899cf4cd558b", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9268ba9ad692f010dc8447c165404ac201d0a6d4/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9268ba9ad692f010dc8447c165404ac201d0a6d4/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=9268ba9ad692f010dc8447c165404ac201d0a6d4", "patch": "@@ -188,6 +188,8 @@ static int symbol_number;\t/* Counter for assigning symbol numbers */\n /* Tells mio_expr_ref to make symbols for unused equivalence members.  */\n static bool in_load_equiv;\n \n+static locus use_locus;\n+\n \n \n /*****************************************************************/\n@@ -546,6 +548,8 @@ gfc_match_use (void)\n \t}\n     }\n \n+  use_locus = gfc_current_locus;\n+\n   m = gfc_match_name (module_name);\n   if (m != MATCH_YES)\n     return m;\n@@ -5142,6 +5146,7 @@ gfc_use_module (void)\n   use_stmt->module_name = gfc_get_string (module_name);\n   use_stmt->only_flag = only_flag;\n   use_stmt->rename = gfc_rename_list;\n+  use_stmt->where = use_locus;\n   gfc_rename_list = NULL;\n   use_stmt->next = gfc_current_ns->use_stmts;\n   gfc_current_ns->use_stmts = use_stmt;"}, {"sha": "042821df121f78a973e5a56aac4e99b6fcf28758", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9268ba9ad692f010dc8447c165404ac201d0a6d4/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9268ba9ad692f010dc8447c165404ac201d0a6d4/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=9268ba9ad692f010dc8447c165404ac201d0a6d4", "patch": "@@ -3151,26 +3151,7 @@ gfc_create_module_variable (gfc_symbol * sym)\n     }\n }\n \n-\n-/* Generate all the required code for module variables.  */\n-\n-void\n-gfc_generate_module_vars (gfc_namespace * ns)\n-{\n-  module_namespace = ns;\n-  cur_module = gfc_find_module (ns->proc_name->name);\n-\n-  /* Check if the frontend left the namespace in a reasonable state.  */\n-  gcc_assert (ns->proc_name && !ns->proc_name->tlink);\n-\n-  /* Generate COMMON blocks.  */\n-  gfc_trans_common (ns);\n-\n-  /* Create decls for all the module variables.  */\n-  gfc_traverse_ns (ns, gfc_create_module_variable);\n-\n-  cur_module = NULL;\n-}\n+/* Emit debug information for USE statements.  */\n \n static void\n gfc_trans_use_stmts (gfc_namespace * ns)\n@@ -3190,6 +3171,7 @@ gfc_trans_use_stmts (gfc_namespace * ns)\n \t\t\t  void_type_node);\n \t  DECL_EXTERNAL (entry->namespace_decl) = 1;\n \t}\n+      gfc_set_backend_locus (&use_stmt->where);\n       if (!use_stmt->only_flag)\n \t(*debug_hooks->imported_module_or_decl) (entry->namespace_decl,\n \t\t\t\t\t\t NULL_TREE,\n@@ -3214,9 +3196,14 @@ gfc_trans_use_stmts (gfc_namespace * ns)\n \t\t\t\t     rent->local_name[0]\n \t\t\t\t     ? rent->local_name : rent->use_name);\n \t      gcc_assert (st && st->n.sym->attr.use_assoc);\n-\t      if (st->n.sym->backend_decl && DECL_P (st->n.sym->backend_decl))\n+\t      if (st->n.sym->backend_decl\n+\t\t  && DECL_P (st->n.sym->backend_decl)\n+\t\t  && st->n.sym->module\n+\t\t  && strcmp (st->n.sym->module, use_stmt->module_name) == 0)\n \t\t{\n-\t\t  gcc_assert (DECL_EXTERNAL (entry->namespace_decl));\n+\t\t  gcc_assert (DECL_EXTERNAL (entry->namespace_decl)\n+\t\t\t      || (TREE_CODE (st->n.sym->backend_decl)\n+\t\t\t\t  != VAR_DECL));\n \t\t  decl = copy_node (st->n.sym->backend_decl);\n \t\t  DECL_CONTEXT (decl) = entry->namespace_decl;\n \t\t  DECL_EXTERNAL (decl) = 1;\n@@ -3236,13 +3223,38 @@ gfc_trans_use_stmts (gfc_namespace * ns)\n \t    local_name = get_identifier (rent->local_name);\n \t  else\n \t    local_name = NULL_TREE;\n+\t  gfc_set_backend_locus (&rent->where);\n \t  (*debug_hooks->imported_module_or_decl) (decl, local_name,\n \t\t\t\t\t\t   ns->proc_name->backend_decl,\n \t\t\t\t\t\t   !use_stmt->only_flag);\n \t}\n     }\n }\n \n+\n+/* Generate all the required code for module variables.  */\n+\n+void\n+gfc_generate_module_vars (gfc_namespace * ns)\n+{\n+  module_namespace = ns;\n+  cur_module = gfc_find_module (ns->proc_name->name);\n+\n+  /* Check if the frontend left the namespace in a reasonable state.  */\n+  gcc_assert (ns->proc_name && !ns->proc_name->tlink);\n+\n+  /* Generate COMMON blocks.  */\n+  gfc_trans_common (ns);\n+\n+  /* Create decls for all the module variables.  */\n+  gfc_traverse_ns (ns, gfc_create_module_variable);\n+\n+  cur_module = NULL;\n+\n+  gfc_trans_use_stmts (ns);\n+}\n+\n+\n static void\n gfc_generate_contained_functions (gfc_namespace * parent)\n {"}]}