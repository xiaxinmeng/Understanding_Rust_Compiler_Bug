{"sha": "cde43acdba16efdb6e4e4488ec19e4106b5396c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlNDNhY2RiYTE2ZWZkYjZlNGU0NDg4ZWMxOWU0MTA2YjUzOTZjNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-09-14T17:08:42Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-09-14T17:08:42Z"}, "message": "Temporarily revert previous\n\nFrom-SVN: r191306", "tree": {"sha": "95a34b6ced24ac7d8b25b3d0768dbbb429f9ac2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a34b6ced24ac7d8b25b3d0768dbbb429f9ac2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cde43acdba16efdb6e4e4488ec19e4106b5396c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde43acdba16efdb6e4e4488ec19e4106b5396c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde43acdba16efdb6e4e4488ec19e4106b5396c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde43acdba16efdb6e4e4488ec19e4106b5396c7/comments", "author": null, "committer": null, "parents": [{"sha": "57132d23faff3f5e18d4773892070763bf6a89ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57132d23faff3f5e18d4773892070763bf6a89ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57132d23faff3f5e18d4773892070763bf6a89ca"}], "stats": {"total": 15, "additions": 2, "deletions": 13}, "files": [{"sha": "847b12089d97379d2ec41d162768e7139f57dbe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde43acdba16efdb6e4e4488ec19e4106b5396c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde43acdba16efdb6e4e4488ec19e4106b5396c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cde43acdba16efdb6e4e4488ec19e4106b5396c7", "patch": "@@ -1,8 +1,3 @@\n-2012-09-14  Richard Earnshaw  <rearnsha@arm.com>\n-\n-\t* reload.c (find_dummy_reload): Don't use OUT as a reload reg\n-\tfor IN if it overlaps a fixed register.\n-\n 2012-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/44194"}, {"sha": "f4f3ed03d859fb59a251cc3bfc32fe592d041b2d", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde43acdba16efdb6e4e4488ec19e4106b5396c7/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde43acdba16efdb6e4e4488ec19e4106b5396c7/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=cde43acdba16efdb6e4e4488ec19e4106b5396c7", "patch": "@@ -2036,12 +2036,7 @@ find_dummy_reload (rtx real_in, rtx real_out, rtx *inloc, rtx *outloc,\n \t However, we only ignore IN in its role as this reload.\n \t If the insn uses IN elsewhere and it contains OUT,\n \t that counts.  We can't be sure it's the \"same\" operand\n-\t so it might not go through this reload.  \n-\n-         We also need to avoid using OUT if it, or part of it, is a\n-         fixed register.  Modifying such registers, even transiently,\n-         may have undefined effects on the machine, such as modifying\n-         the stack pointer.  */\n+\t so it might not go through this reload.  */\n       saved_rtx = *inloc;\n       *inloc = const0_rtx;\n \n@@ -2054,8 +2049,7 @@ find_dummy_reload (rtx real_in, rtx real_out, rtx *inloc, rtx *outloc,\n \n \t  for (i = 0; i < nwords; i++)\n \t    if (! TEST_HARD_REG_BIT (reg_class_contents[(int) rclass],\n-\t\t\t\t     regno + i)\n-\t\t|| fixed_regs[regno + i])\n+\t\t\t\t     regno + i))\n \t      break;\n \n \t  if (i == nwords)"}]}