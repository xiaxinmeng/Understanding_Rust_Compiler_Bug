{"sha": "ca90143868968cc364ba9d1aeff851ca4429b58a", "node_id": "C_kwDOANBUbNoAKGNhOTAxNDM4Njg5NjhjYzM2NGJhOWQxYWVmZjg1MWNhNDQyOWI1OGE", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-09-02T18:31:26Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-12T08:16:52Z"}, "message": "[Ada] Improve CUDA host-side and device-side binder support\n\nUse switches (one already existing, one newly added here) to indicate to\nthe binder that CUDA support code is to be generated for either the\nhost side or for the device side. Add an invocation of Adainit on the\ndevice side from Adainit on the host side; similarly for Adafinal.\n\ngcc/ada/\n\n\t* bindgen.adb: When the binder is invoked for the host, it\n\tdeclares imported subprograms corresponding to the Adainit and\n\tAdafinal routines on the device. Declare string constants and\n\texpression functions for the Ada source names and the link names\n\tof these routines. Generate these subprogram declarations (and\n\taccompanying Import pragmas) in Gen_CUDA_Defs. Generate\n\tCUDA_Execute pragmas to call these subprograms from the host in\n\tGen_Adafinal and Gen_CUDA_Init. When the binder is invoked for the\n\tdevice, include a CUDA_Global aspect declaration in the\n\tdeclarations of Adainit and Adafinal and use the aforementioned\n\tlink names in the Export pragmas generated for those two routines.\n\t* debug.adb: Update comments about \"d_c\" and \"d_d\" switches.\n\t* opt.ads: Declare new Boolean variable,\n\tEnable_CUDA_Device_Expansion. This complements the existing\n\tEnable_CUDA_Expansion variable, which is used to enable host-side\n\tCUDA expansion. The new variable enables device-side CUDA\n\texpansion. It is currently never set during compilation; it is\n\tonly set via a binder switch.\n\t* switch-b.adb\n\t(scan_debug_switches): Add new use of the \"-d_d\" binder switch.\n\tThe new switch and the variable Opt.Enabled_CUDA_Device_Expansion\n\tfollow the existing pattern of the \"-d_c\" switch and the variable\n\tOpt.Enabled_CUDA_Expansion. Flag error if both \"-d_c\" and \"-d_d\"\n\tare specified.", "tree": {"sha": "9f7b727500af257bd76a36c68b816db6fa69a375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f7b727500af257bd76a36c68b816db6fa69a375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca90143868968cc364ba9d1aeff851ca4429b58a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca90143868968cc364ba9d1aeff851ca4429b58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca90143868968cc364ba9d1aeff851ca4429b58a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca90143868968cc364ba9d1aeff851ca4429b58a/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "1b21230458edb29a8968604740f6c65ab018fe7f", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 57, "deletions": 7, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca90143868968cc364ba9d1aeff851ca4429b58a/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca90143868968cc364ba9d1aeff851ca4429b58a/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=ca90143868968cc364ba9d1aeff851ca4429b58a", "patch": "@@ -114,6 +114,29 @@ package body Bindgen is\n    --  For CodePeer, introduce a wrapper subprogram which calls the\n    --  user-defined main subprogram.\n \n+   --  Names and link_names for CUDA device adainit/adafinal procs.\n+\n+   Device_Subp_Name_Prefix : constant String := \"imported_device_\";\n+   Device_Link_Name_Prefix : constant String := \"__device_\";\n+\n+   function Device_Ada_Final_Link_Name return String is\n+     (Device_Link_Name_Prefix & Ada_Final_Name.all);\n+\n+   function Device_Ada_Final_Subp_Name return String is\n+     (Device_Subp_Name_Prefix & Ada_Final_Name.all);\n+\n+   function Device_Ada_Init_Link_Name return String is\n+     (Device_Link_Name_Prefix & Ada_Init_Name.all);\n+\n+   function Device_Ada_Init_Subp_Name return String is\n+     (Device_Subp_Name_Prefix & Ada_Init_Name.all);\n+\n+   --  Text for aspect specifications (if any) given as part of the\n+   --  Adainit and Adafinal spec declarations.\n+\n+   function Aspect_Text return String is\n+     (if Enable_CUDA_Device_Expansion then \" with CUDA_Global\" else \"\");\n+\n    ----------------------------------\n    -- Interface_State Pragma Table --\n    ----------------------------------\n@@ -501,6 +524,12 @@ package body Bindgen is\n          WBI (\"      System.Standard_Library.Adafinal;\");\n       end if;\n \n+      --  perform device (as opposed to host) finalization\n+      if Enable_CUDA_Expansion then\n+         WBI (\"      pragma CUDA_Execute (\" &\n+                Device_Ada_Final_Subp_Name & \", 1, 1);\");\n+      end if;\n+\n       WBI (\"   end \" & Ada_Final_Name.all & \";\");\n       WBI (\"\");\n    end Gen_Adafinal;\n@@ -512,7 +541,6 @@ package body Bindgen is\n    procedure Gen_Adainit (Elab_Order : Unit_Id_Array) is\n       Main_Priority : Int renames ALIs.Table (ALIs.First).Main_Priority;\n       Main_CPU      : Int renames ALIs.Table (ALIs.First).Main_CPU;\n-\n    begin\n       --  Declare the access-to-subprogram type used for initialization of\n       --  of __gnat_finalize_library_objects. This is declared at library\n@@ -1334,6 +1362,13 @@ package body Bindgen is\n          end;\n       end loop;\n \n+      WBI (\"   procedure \" & Device_Ada_Init_Subp_Name & \";\");\n+      WBI (\"   pragma Import (C, \" & Device_Ada_Init_Subp_Name &\n+             \", Link_Name => \"\"\" & Device_Ada_Init_Link_Name & \"\"\");\");\n+      WBI (\"   procedure \" & Device_Ada_Final_Subp_Name & \";\");\n+      WBI (\"   pragma Import (C, \" & Device_Ada_Final_Subp_Name &\n+             \", Link_Name => \"\"\" & Device_Ada_Final_Link_Name & \"\"\");\");\n+\n       WBI (\"\");\n    end Gen_CUDA_Defs;\n \n@@ -1393,6 +1428,10 @@ package body Bindgen is\n       end loop;\n \n       WBI (\"      CUDA_Register_Fat_Binary_End (Fat_Binary_Handle);\");\n+\n+      --  perform device (as opposed to host) elaboration\n+      WBI (\"      pragma CUDA_Execute (\" &\n+             Device_Ada_Init_Subp_Name & \", 1, 1);\");\n    end Gen_CUDA_Init;\n \n    --------------------------\n@@ -2602,9 +2641,14 @@ package body Bindgen is\n       end if;\n \n       WBI (\"\");\n-      WBI (\"   procedure \" & Ada_Init_Name.all & \";\");\n-      WBI (\"   pragma Export (C, \" & Ada_Init_Name.all & \", \"\"\" &\n-           Ada_Init_Name.all & \"\"\");\");\n+      WBI (\"   procedure \" & Ada_Init_Name.all & Aspect_Text & \";\");\n+      if Enable_CUDA_Device_Expansion then\n+         WBI (\"   pragma Export (C, \" & Ada_Init_Name.all &\n+                \", Link_Name => \"\"\" & Device_Ada_Init_Link_Name & \"\"\");\");\n+      else\n+         WBI (\"   pragma Export (C, \" & Ada_Init_Name.all & \", \"\"\" &\n+              Ada_Init_Name.all & \"\"\");\");\n+      end if;\n \n       --  If -a has been specified use pragma Linker_Constructor for the init\n       --  procedure and pragma Linker_Destructor for the final procedure.\n@@ -2615,9 +2659,15 @@ package body Bindgen is\n \n       if not Cumulative_Restrictions.Set (No_Finalization) then\n          WBI (\"\");\n-         WBI (\"   procedure \" & Ada_Final_Name.all & \";\");\n-         WBI (\"   pragma Export (C, \" & Ada_Final_Name.all & \", \"\"\" &\n-              Ada_Final_Name.all & \"\"\");\");\n+         WBI (\"   procedure \" & Ada_Final_Name.all & Aspect_Text & \";\");\n+\n+         if Enable_CUDA_Device_Expansion then\n+            WBI (\"   pragma Export (C, \" & Ada_Final_Name.all &\n+                   \", Link_Name => \"\"\" & Device_Ada_Final_Link_Name & \"\"\");\");\n+         else\n+            WBI (\"   pragma Export (C, \" & Ada_Final_Name.all & \", \"\"\" &\n+                 Ada_Final_Name.all & \"\"\");\");\n+         end if;\n \n          if Use_Pragma_Linker_Constructor then\n             WBI (\"   pragma Linker_Destructor (\" & Ada_Final_Name.all & \");\");"}, {"sha": "94e729e9bcc455e9a3ed9ba5e0f20c34cf53b245", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca90143868968cc364ba9d1aeff851ca4429b58a/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca90143868968cc364ba9d1aeff851ca4429b58a/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=ca90143868968cc364ba9d1aeff851ca4429b58a", "patch": "@@ -142,7 +142,7 @@ package body Debug is\n    --  d_a  Stop elaboration checks on accept or select statement\n    --  d_b  Use designated type model under No_Dynamic_Accessibility_Checks\n    --  d_c  CUDA compilation : compile for the host\n-   --  d_d\n+   --  d_d  CUDA compilation : compile for the device\n    --  d_e  Ignore entry calls and requeue statements for elaboration\n    --  d_f  Issue info messages related to GNATprove usage\n    --  d_g  Disable large static aggregates\n@@ -345,8 +345,8 @@ package body Debug is\n \n    --  d_a  Ignore the effects of pragma Elaborate_All\n    --  d_b  Ignore the effects of pragma Elaborate_Body\n-   --  d_c\n-   --  d_d\n+   --  d_c  CUDA compilation : compile/bind for the host\n+   --  d_d  CUDA compilation : compile/bind for the device\n    --  d_e  Ignore the effects of pragma Elaborate\n    --  d_f\n    --  d_g"}, {"sha": "8f903ca7efd7d5d744b56a27d0c27c2c0b409c98", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca90143868968cc364ba9d1aeff851ca4429b58a/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca90143868968cc364ba9d1aeff851ca4429b58a/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=ca90143868968cc364ba9d1aeff851ca4429b58a", "patch": "@@ -544,6 +544,13 @@ package Opt is\n    --  Set to True to enable CUDA host expansion:\n    --    - Removal of CUDA_Global and CUDA_Device symbols\n    --    - Generation of kernel registration code in packages\n+   --    - Binder invokes device elaboration/finalization code\n+\n+   Enable_CUDA_Device_Expansion : Boolean := False;\n+   --  GNATBIND\n+   --  Set to True to enable CUDA device (as opposed to host) expansion:\n+   --    - Binder generates elaboration/finalization code that can be\n+   --      invoked from corresponding binder-generated host-side code.\n \n    Error_Msg_Line_Length : Nat := 0;\n    --  GNAT"}, {"sha": "c40cb970bef48c1b478e695f143b670305b7d359", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca90143868968cc364ba9d1aeff851ca4429b58a/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca90143868968cc364ba9d1aeff851ca4429b58a/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=ca90143868968cc364ba9d1aeff851ca4429b58a", "patch": "@@ -158,9 +158,18 @@ package body Switch.B is\n \n                elsif Underscore then\n                   Set_Underscored_Debug_Flag (C);\n+\n                   if Debug_Flag_Underscore_C then\n                      Enable_CUDA_Expansion := True;\n                   end if;\n+                  if Debug_Flag_Underscore_D then\n+                     Enable_CUDA_Device_Expansion := True;\n+                  end if;\n+                  if Enable_CUDA_Expansion and Enable_CUDA_Device_Expansion\n+                  then\n+                     Bad_Switch (Switch_Chars);\n+                  end if;\n+\n                   Underscore := False;\n \n                --    letter"}]}