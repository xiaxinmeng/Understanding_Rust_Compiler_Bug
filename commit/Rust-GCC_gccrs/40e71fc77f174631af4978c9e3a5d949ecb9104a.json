{"sha": "40e71fc77f174631af4978c9e3a5d949ecb9104a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlNzFmYzc3ZjE3NDYzMWFmNDk3OGM5ZTNhNWQ5NDllY2I5MTA0YQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-04-14T15:13:26Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-04-14T15:13:26Z"}, "message": "cp-tree.def (FOR_STMT, [...]): Add an extra operand.\n\n\t* cp-tree.def (FOR_STMT, RANGE_FOR_STMT): Add an extra operand.\n\t* cp-objcp-common.c (cp_common_init_ts): Mark them as TS_TYPED.\n\t* cp-tree.h (FOR_SCOPE, RANGE_FOR_SCOPE): Define.\n\t* semantics.c (begin_for_stmt): Pass an extra arg to build_stmt.\n\tUse FOR_SCOPE instead of TREE_CHAIN.\n\t(begin_range_for_stmt): Likewise, with RANGE_FOR_SCOPE.\n\t(finish_for_stmt): Likewise.\n\nFrom-SVN: r172436", "tree": {"sha": "fc965b46ea0d94f0b61f89e0efa758b5a4ba1979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc965b46ea0d94f0b61f89e0efa758b5a4ba1979"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40e71fc77f174631af4978c9e3a5d949ecb9104a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e71fc77f174631af4978c9e3a5d949ecb9104a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e71fc77f174631af4978c9e3a5d949ecb9104a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e71fc77f174631af4978c9e3a5d949ecb9104a/comments", "author": null, "committer": null, "parents": [{"sha": "c2aa8dc92665461b3a02d22db401f5736b0a1d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2aa8dc92665461b3a02d22db401f5736b0a1d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2aa8dc92665461b3a02d22db401f5736b0a1d43"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "719b1a1c5a761c80d5532679e0e7d645a0eeef8a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=40e71fc77f174631af4978c9e3a5d949ecb9104a", "patch": "@@ -1,3 +1,13 @@\n+2011-04-14  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* cp-tree.def (FOR_STMT, RANGE_FOR_STMT): Add an extra operand.\n+\t* cp-objcp-common.c (cp_common_init_ts): Mark them as TS_TYPED.\n+\t* cp-tree.h (FOR_SCOPE, RANGE_FOR_SCOPE): Define.\n+\t* semantics.c (begin_for_stmt): Pass an extra arg to build_stmt.\n+\tUse FOR_SCOPE instead of TREE_CHAIN.\n+\t(begin_range_for_stmt): Likewise, with RANGE_FOR_SCOPE.\n+\t(finish_for_stmt): Likewise.\n+\n 2011-04-14  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (cp_parser_postfix_expression): Fix flags passed to"}, {"sha": "38d341595d902b8df8b53a730e252fdee37b53fe", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=40e71fc77f174631af4978c9e3a5d949ecb9104a", "patch": "@@ -236,7 +236,6 @@ cp_common_init_ts (void)\n   MARK_TS_COMMON (TEMPLATE_PARM_INDEX);\n   MARK_TS_COMMON (OVERLOAD);\n   MARK_TS_COMMON (TEMPLATE_INFO);\n-  MARK_TS_COMMON (FOR_STMT);\n   MARK_TS_COMMON (TYPENAME_TYPE);\n   MARK_TS_COMMON (TYPEOF_TYPE);\n   MARK_TS_COMMON (IF_STMT);\n@@ -247,8 +246,9 @@ cp_common_init_ts (void)\n   MARK_TS_COMMON (DECLTYPE_TYPE);\n   MARK_TS_COMMON (BOUND_TEMPLATE_TEMPLATE_PARM);\n   MARK_TS_COMMON (UNBOUND_CLASS_TEMPLATE);\n-  MARK_TS_COMMON (RANGE_FOR_STMT);\n \n+  MARK_TS_TYPED (FOR_STMT);\n+  MARK_TS_TYPED (RANGE_FOR_STMT);\n   MARK_TS_TYPED (AGGR_INIT_EXPR);\n   MARK_TS_TYPED (EXPR_STMT);\n   MARK_TS_TYPED (EH_SPEC_BLOCK);"}, {"sha": "fdfe9b5110e27c09fe541c8917ecf2f991df6792", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=40e71fc77f174631af4978c9e3a5d949ecb9104a", "patch": "@@ -291,12 +291,12 @@ DEFTREECODE (IF_STMT, \"if_stmt\", tcc_statement, 3)\n \n /* Used to represent a `for' statement. The operands are\n    FOR_INIT_STMT, FOR_COND, FOR_EXPR, and FOR_BODY, respectively.  */\n-DEFTREECODE (FOR_STMT, \"for_stmt\", tcc_statement, 4)\n+DEFTREECODE (FOR_STMT, \"for_stmt\", tcc_statement, 5)\n \n /* Used to represent a range-based `for' statement. The operands are\n-   RANGE_FOR_DECL, RANGE_FOR_EXPR, RANGE_FOR_BODY, respectively.  Only used\n-   in templates.  */\n-DEFTREECODE (RANGE_FOR_STMT, \"range_for_stmt\", tcc_statement, 3)\n+   RANGE_FOR_DECL, RANGE_FOR_EXPR, RANGE_FOR_BODY, and RANGE_FOR_SCOPE,\n+   respectively.  Only used in templates.  */\n+DEFTREECODE (RANGE_FOR_STMT, \"range_for_stmt\", tcc_statement, 4)\n \n /* Used to represent a 'while' statement. The operands are WHILE_COND\n    and WHILE_BODY, respectively.  */"}, {"sha": "aab05b62e2dd92fabc88e2e8d56fbc85fde33b0f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=40e71fc77f174631af4978c9e3a5d949ecb9104a", "patch": "@@ -3810,12 +3810,14 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define FOR_COND(NODE)\t\tTREE_OPERAND (FOR_STMT_CHECK (NODE), 1)\n #define FOR_EXPR(NODE)\t\tTREE_OPERAND (FOR_STMT_CHECK (NODE), 2)\n #define FOR_BODY(NODE)\t\tTREE_OPERAND (FOR_STMT_CHECK (NODE), 3)\n+#define FOR_SCOPE(NODE)\t\tTREE_OPERAND (FOR_STMT_CHECK (NODE), 4)\n \n /* RANGE_FOR_STMT accessors. These give access to the declarator,\n-   expression and body of the statement, respectively.  */\n+   expression, body, and scope of the statement, respectively.  */\n #define RANGE_FOR_DECL(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 0)\n #define RANGE_FOR_EXPR(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 1)\n #define RANGE_FOR_BODY(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 2)\n+#define RANGE_FOR_SCOPE(NODE)\tTREE_OPERAND (RANGE_FOR_STMT_CHECK (NODE), 3)\n \n #define SWITCH_STMT_COND(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 0)\n #define SWITCH_STMT_BODY(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 1)"}, {"sha": "b0dcb2b775a79cfaac364a4a8abd65bc030e77b4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e71fc77f174631af4978c9e3a5d949ecb9104a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=40e71fc77f174631af4978c9e3a5d949ecb9104a", "patch": "@@ -856,7 +856,7 @@ begin_for_stmt (tree scope, tree init)\n   tree r;\n \n   r = build_stmt (input_location, FOR_STMT, NULL_TREE, NULL_TREE,\n-\t\t  NULL_TREE, NULL_TREE);\n+\t\t  NULL_TREE, NULL_TREE, NULL_TREE);\n \n   if (scope == NULL_TREE)\n     {\n@@ -865,7 +865,7 @@ begin_for_stmt (tree scope, tree init)\n \tscope = begin_for_scope (&init);\n     }\n   FOR_INIT_STMT (r) = init;\n-  TREE_CHAIN (r) = scope;\n+  FOR_SCOPE (r) = scope;\n \n   return r;\n }\n@@ -940,8 +940,12 @@ finish_for_stmt (tree for_stmt)\n   /* Pop the scope for the body of the loop.  */\n   if (flag_new_for_scope > 0)\n     {\n-      tree scope = TREE_CHAIN (for_stmt);\n-      TREE_CHAIN (for_stmt) = NULL;\n+      tree scope;\n+      tree *scope_ptr = (TREE_CODE (for_stmt) == RANGE_FOR_STMT\n+\t\t\t ? &RANGE_FOR_SCOPE (for_stmt)\n+\t\t\t : &FOR_SCOPE (for_stmt));\n+      scope = *scope_ptr;\n+      *scope_ptr = NULL;\n       add_stmt (do_poplevel (scope));\n     }\n \n@@ -959,7 +963,7 @@ begin_range_for_stmt (tree scope, tree init)\n   tree r;\n \n   r = build_stmt (input_location, RANGE_FOR_STMT,\n-\t\t  NULL_TREE, NULL_TREE, NULL_TREE);\n+\t\t  NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE);\n \n   if (scope == NULL_TREE)\n     {\n@@ -972,7 +976,7 @@ begin_range_for_stmt (tree scope, tree init)\n      pop it now.  */\n   if (init)\n     pop_stmt_list (init);\n-  TREE_CHAIN (r) = scope;\n+  RANGE_FOR_SCOPE (r) = scope;\n \n   return r;\n }"}]}