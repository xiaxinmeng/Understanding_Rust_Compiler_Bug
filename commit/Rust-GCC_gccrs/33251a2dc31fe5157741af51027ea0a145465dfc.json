{"sha": "33251a2dc31fe5157741af51027ea0a145465dfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyNTFhMmRjMzFmZTUxNTc3NDFhZjUxMDI3ZWEwYTE0NTQ2NWRmYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-07-06T23:30:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-06T23:30:14Z"}, "message": "random (class gamma_distribution<>): Add.\n\n2006-07-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (class gamma_distribution<>): Add.\n\t* include/tr1/random.tcc (gamma_distribution<>::operator(),\n\toperator<<(std::basic_ostream<>&, const gamma_distribution<>&)):\n\tDefine.\n\t* testsuite/tr1/5_numerical_facilities/random/gamma_distribution/\n\trequirements/typedefs.cc: New.\n\nFrom-SVN: r115236", "tree": {"sha": "d8fa637602cdecb36811c5f9e29e03f076f178f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8fa637602cdecb36811c5f9e29e03f076f178f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33251a2dc31fe5157741af51027ea0a145465dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33251a2dc31fe5157741af51027ea0a145465dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33251a2dc31fe5157741af51027ea0a145465dfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33251a2dc31fe5157741af51027ea0a145465dfc/comments", "author": null, "committer": null, "parents": [{"sha": "21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21dc66848e94ed6e0269b9a1c76f0ac76f02c541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21dc66848e94ed6e0269b9a1c76f0ac76f02c541"}], "stats": {"total": 221, "additions": 221, "deletions": 0}, "files": [{"sha": "9395a4aa7e8262fbbb3cdcfed269e44475076ca7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33251a2dc31fe5157741af51027ea0a145465dfc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33251a2dc31fe5157741af51027ea0a145465dfc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=33251a2dc31fe5157741af51027ea0a145465dfc", "patch": "@@ -1,3 +1,12 @@\n+2006-07-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (class gamma_distribution<>): Add.\n+\t* include/tr1/random.tcc (gamma_distribution<>::operator(),\n+\toperator<<(std::basic_ostream<>&, const gamma_distribution<>&)):\n+\tDefine.\n+\t* testsuite/tr1/5_numerical_facilities/random/gamma_distribution/\n+\trequirements/typedefs.cc: New.\n+\n 2006-07-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util/regression/trait/assoc/trait.hpp: Format."}, {"sha": "897d871a5beafcae98d9852173235be0fd7af995", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33251a2dc31fe5157741af51027ea0a145465dfc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33251a2dc31fe5157741af51027ea0a145465dfc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=33251a2dc31fe5157741af51027ea0a145465dfc", "patch": "@@ -1952,6 +1952,91 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       bool        _M_saved_available;     \n     };\n \n+\n+  /**\n+   * @brief A gamma continuous distribution for random numbers.\n+   *\n+   * The formula for the gamma probability mass function is \n+   * @f$ p(x) = \\frac{1}{\\Gamma(\\alpha)} x^{\\alpha - 1} e^{-x} } @f$.\n+   */\n+  template<typename _RealType = double>\n+    class gamma_distribution;\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const gamma_distribution<_RealType>& __x);\n+\n+  template<typename _RealType>\n+    class gamma_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _RealType result_type;\n+\n+    public:\n+      /**\n+       * Constructs a gamma distribution with parameters @f$ \\alpha @f$.\n+       */\n+      explicit\n+      gamma_distribution(const result_type& __alpha = result_type(1))\n+      : _M_alpha(__alpha)\n+      { \n+\t_GLIBCXX_DEBUG_ASSERT(_M_alpha > 0);\n+      }\n+\n+      /**\n+       * Gets the @f$ \\alpha @f$ of the distribution.\n+       */\n+      _RealType\n+      alpha() const\n+      { return _M_alpha; }\n+\n+      /**\n+       * Resets the distribution.\n+       */\n+      void\n+      reset() { }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %gamma_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %gamma_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const gamma_distribution<_RealType1>& __x);\n+\n+      /**\n+       * Extracts a %gamma_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %gamma_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   gamma_distribution<_RealType1>& __x)\n+        { return __is >> __x._M_alpha; }\n+\n+    private:\n+      result_type _M_alpha;\n+    };\n+\n   /* @} */ // group tr1_random_distributions_continuous\n   /* @} */ // group tr1_random_distributions\n   /* @} */ // group tr1_random"}, {"sha": "fe77abb021c6fd3a4699601d440bf635ef3c5096", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33251a2dc31fe5157741af51027ea0a145465dfc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33251a2dc31fe5157741af51027ea0a145465dfc/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=33251a2dc31fe5157741af51027ea0a145465dfc", "patch": "@@ -767,5 +767,95 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return __is;\n     }\n \n+\n+  /**\n+   * Cheng's rejection algorithm GB for alpha >= 1 and a modification\n+   * of Vaduva's rejection from Weibull algorithm due to Devroye for\n+   * alpha < 1.\n+   *\n+   * References:\n+   * Cheng, R. C. \"The Generation of Gamma Random Variables with Non-integral\n+   * Shape Parameter.\" Applied Statistics, 26, 71-75, 1977.\n+   *\n+   * Vaduva, I. \"Computer Generation of Gamma Gandom Variables by Rejection\n+   * and Composition Procedures.\" Math. Operationsforschung and Statistik,\n+   * Series in Statistics, 8, 545-576, 1977.\n+   *\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Sect. 3.4.\n+   */\n+  template<typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename gamma_distribution<_RealType>::result_type\n+      gamma_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tresult_type __x;\n+\n+\tif (_M_alpha >= 1)\n+\t  {\n+\t    // alpha - log(4)\n+\t    const result_type __b = _M_alpha\n+\t      - result_type(1.3862943611198906188344642429163531L);\n+\t    const result_type __c = _M_alpha + std::sqrt(2 * _M_alpha - 1);\n+\n+\t    // 1 + log(9 / 2)\n+\t    const result_type __k = 2.5040773967762740733732583523868748L;\n+\n+\t    result_type __z, __r;\n+\t    do\n+\t      {\n+\t\tconst result_type __u = __urng();\n+\t\tconst result_type __v = __urng();\n+\n+\t\tconst result_type __y = _M_alpha * std::log(__v / (1 - __v));\n+\t\t__x = _M_alpha * std::exp(__v);\n+\n+\t\t__z = __u * __v * __v;\n+\t\t__r = __b + __c * __y - __x;\n+\t      }\n+\t    while (__r < result_type(4.5) * __z - __k\n+\t\t   && __r < std::log(__z));\n+\t  }\n+\telse\n+\t  {\n+\t    const result_type __c = 1 / _M_alpha;\n+\t    const result_type __d =\n+\t      std::pow(_M_alpha, _M_alpha / (1 - _M_alpha)) * (1 - _M_alpha);\n+\n+\t    result_type __z, __e;\n+\t    do\n+\t      {\n+\t\t__z = -std::log(__urng());\n+\t\t__e = -std::log(__urng());\n+\n+\t\t__x = std::pow(__z, __c);\n+\t      }\n+\t    while (__z + __e > __d + __x);\n+\t  }\n+\n+\treturn __x;\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const gamma_distribution<_RealType>& __x)\n+    {\n+      const std::ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(std::ios_base::scientific | std::ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(_Private::_Max_digits10<_RealType>::__value);\n+\n+      __os << __x.alpha();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n _GLIBCXX_END_NAMESPACE\n }"}, {"sha": "e10944e52d357bc68d7f32038ec9c316f2639b02", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/gamma_distribution/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33251a2dc31fe5157741af51027ea0a145465dfc/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33251a2dc31fe5157741af51027ea0a145465dfc/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc?ref=33251a2dc31fe5157741af51027ea0a145465dfc", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-07-06  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.9 Class template gamma_distribution [tr.rand.dist.gamma]\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef gamma_distribution<double> test_type;\n+\n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}]}