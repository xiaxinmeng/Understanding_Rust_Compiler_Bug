{"sha": "ca9431f7fef9512a725599a554ee44c1f89e353f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E5NDMxZjdmZWY5NTEyYTcyNTU5OWE1NTRlZTQ0YzFmODllMzUzZg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2013-12-22T14:57:53Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2013-12-22T14:57:53Z"}, "message": "chi2_quality.h: Break out from chi2_quality.cc.\n\n\t* testsuite/20_util/hash/chi2_quality.h: Break out from\n\tchi2_quality.cc.\n\t* testsuite/20_util/hash/chi2_q_bit_flip_set.cc: Ditto.\n\t* testsuite/20_util/hash/chi2_q_document_words.cc: Ditto.\n\t* testsuite/20_util/hash/chi2_q_bit_string_set.cc: Ditto.  Increase\n\tSAMPLES to 35000 for simulator targets.\n\t* testsuite/20_util/hash/chi2_q_numeric_pattern_set.cc: Ditto.\n\t* testsuite/20_util/hash/chi2_q_uniform_random.cc: Ditto.\n\t* testsuite/20_util/hash/chi2_quality.cc: Remove.\n\nFrom-SVN: r206167", "tree": {"sha": "116f84327e26da1fc1a99a6318c0760e42dba501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/116f84327e26da1fc1a99a6318c0760e42dba501"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca9431f7fef9512a725599a554ee44c1f89e353f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9431f7fef9512a725599a554ee44c1f89e353f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9431f7fef9512a725599a554ee44c1f89e353f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9431f7fef9512a725599a554ee44c1f89e353f/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96758521f7b9f3fb94ae966e1511c8af4137d347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96758521f7b9f3fb94ae966e1511c8af4137d347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96758521f7b9f3fb94ae966e1511c8af4137d347"}], "stats": {"total": 577, "additions": 359, "deletions": 218}, "files": [{"sha": "820b029a783b829c27c3a07e74a3b5a5b23117c9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca9431f7fef9512a725599a554ee44c1f89e353f", "patch": "@@ -1,3 +1,15 @@\n+2013-12-22  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* testsuite/20_util/hash/chi2_quality.h: Break out from\n+\tchi2_quality.cc.\n+\t* testsuite/20_util/hash/chi2_q_bit_flip_set.cc: Ditto.\n+\t* testsuite/20_util/hash/chi2_q_document_words.cc: Ditto.\n+\t* testsuite/20_util/hash/chi2_q_bit_string_set.cc: Ditto.  Increase\n+\tSAMPLES to 35000 for simulator targets.\n+\t* testsuite/20_util/hash/chi2_q_numeric_pattern_set.cc: Ditto.\n+\t* testsuite/20_util/hash/chi2_q_uniform_random.cc: Ditto.\n+\t* testsuite/20_util/hash/chi2_quality.cc: Remove.\n+\n 2013-12-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/20_util/is_base_of/value.cc: Add test."}, {"sha": "4d4f183bb176e79bab1a47813b553e7663afe04c", "filename": "libstdc++-v3/testsuite/20_util/hash/chi2_q_bit_flip_set.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_bit_flip_set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_bit_flip_set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_bit_flip_set.cc?ref=ca9431f7fef9512a725599a554ee44c1f89e353f", "patch": "@@ -0,0 +1,61 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// Use smaller statistics when running on simulators, so it takes less time.\n+// { dg-options \"-std=gnu++0x -DSAMPLES=30000\" { target simulator } }\n+\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"chi2_quality.h\"\n+\n+// Tests chi^2 for a distribution of strings that differ from each\n+// other by only a few bits. We start with an arbitrary base string, and\n+// flip three random bits for each member of the set.\n+void\n+test_bit_flip_set()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const unsigned long N = SAMPLES;\n+  const unsigned long k = N/100;\n+  const unsigned int len = 67;\n+  const unsigned int bitlen = len * 8;\n+  const unsigned int bits_to_flip = 3;\n+  const char base[len+1] = \"abcdefghijklmnopqrstuvwxyz\"\n+                           \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+                           \"0123456789!@#$%\";\n+\n+  std::unordered_set<std::string> set;\n+  while (set.size() < N)\n+    {\n+      std::string s(base, base+len);\n+      for (unsigned int i = 0; i < bits_to_flip; ++i)\n+        {\n+          int bit = rand() % bitlen;\n+          s[bit/8] ^= (1 << (bit%8));\n+        }\n+      set.insert(s);\n+    }\n+\n+  double chi2 = chi2_hash(set, k);\n+  VERIFY( chi2 < k*1.1 );\n+}\n+\n+int\n+main()\n+{\n+  test_bit_flip_set();\n+  return 0;\n+}"}, {"sha": "6fb90120ac35cac4d148076701bcec5b7b12ce15", "filename": "libstdc++-v3/testsuite/20_util/hash/chi2_q_bit_string_set.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_bit_string_set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_bit_string_set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_bit_string_set.cc?ref=ca9431f7fef9512a725599a554ee44c1f89e353f", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// Use smaller statistics when running on simulators, so it takes less time.\n+// For e.g. cris-elf, mipsisa32r2el-elf, powerpc-eabi and i386-linux-gnu,\n+// this test fails for SAMPLES=30000.\n+// { dg-options \"-std=gnu++0x -DSAMPLES=35000\" { target simulator } }\n+\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"chi2_quality.h\"\n+\n+// Tests chi^2 for a set of strings that all consist of '1' and '0'.\n+void\n+test_bit_string_set()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const unsigned long N = SAMPLES;\n+  const unsigned long k = N/100;\n+  std::vector<std::string> set;\n+  std::string s;\n+  for (unsigned long i = 0; i < N; ++i)\n+    {\n+      s.clear();\n+      for (unsigned int j = 0; j < sizeof(unsigned long) * 8; ++j)\n+        {\n+          const bool bit = (1UL << j) & i;\n+          s.push_back(bit ? '1' : '0');\n+        }\n+      set.push_back(s);\n+    }\n+\n+  double chi2 = chi2_hash(set, k);\n+  VERIFY( chi2 < k*1.1 );\n+}\n+\n+int\n+main()\n+{\n+  test_bit_string_set();\n+  return 0;\n+}"}, {"sha": "befd3c83ccc5b277a3690dcad6b087652478da09", "filename": "libstdc++-v3/testsuite/20_util/hash/chi2_q_document_words.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_document_words.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_document_words.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_document_words.cc?ref=ca9431f7fef9512a725599a554ee44c1f89e353f", "patch": "@@ -0,0 +1,52 @@\n+// On some simulators, the workload is simply too large with values big\n+// enough for the test to pass the quality test, so just skip it altogether.\n+// { dg-do run { target { ! simulator } } }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"chi2_quality.h\"\n+\n+// Tests chi^2 for a set of words taken from a document written in English.\n+void\n+test_document_words()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::string f_name = \"thirty_years_among_the_dead_preproc.txt\";\n+  std::ifstream in(f_name);\n+  VERIFY( in.is_open() );\n+  std::vector<std::string> words;\n+  words.assign(std::istream_iterator<std::string>(in),\n+               std::istream_iterator<std::string>());\n+  VERIFY( words.size() > 100000 );\n+  std::sort(words.begin(), words.end());\n+  auto it = std::unique(words.begin(), words.end());\n+  words.erase(it, words.end());\n+  VERIFY( words.size() > 5000 );\n+\n+  const unsigned long k = words.size() / 20;\n+  double chi2 = chi2_hash(words, k);\n+  VERIFY( chi2 < k*1.1 );\n+}\n+\n+int\n+main()\n+{\n+  test_document_words();\n+  return 0;\n+}"}, {"sha": "2819ec24727127dbac0ac693b1fe1ac255ac6611", "filename": "libstdc++-v3/testsuite/20_util/hash/chi2_q_numeric_pattern_set.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_numeric_pattern_set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_numeric_pattern_set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_numeric_pattern_set.cc?ref=ca9431f7fef9512a725599a554ee44c1f89e353f", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// Use smaller statistics when running on simulators, so it takes less time.\n+// For x86_64-linux-gnu SAMPLES=30000 fails, so increase slightly.\n+// { dg-options \"-std=gnu++0x -DSAMPLES=35000\" { target simulator } }\n+\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"chi2_quality.h\"\n+\n+// Tests chi^2 of a set of strings that all have a similar pattern,\n+// intended to mimic some sort of ID string.\n+void\n+test_numeric_pattern_set()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const unsigned long N = SAMPLES;\n+  const unsigned long k = N/100;\n+  std::vector<std::string> set;\n+  for (unsigned long i = 0; i < N; ++i)\n+    {\n+      long i1 = i % 100000;\n+      long i2 = i / 100000;\n+      char buf[16];\n+      std::sprintf(buf, \"XX-%05lu-%05lu\", i1, i2);\n+      set.push_back(buf);\n+    }\n+\n+  double chi2 = chi2_hash(set, k);\n+  VERIFY( chi2 < k*1.1 );\n+}\n+\n+int\n+main()\n+{\n+  test_numeric_pattern_set();\n+  return 0;\n+}"}, {"sha": "5440fe3f2efa4f433fc781b5de0929c6c71b7591", "filename": "libstdc++-v3/testsuite/20_util/hash/chi2_q_uniform_random.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_uniform_random.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_uniform_random.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_q_uniform_random.cc?ref=ca9431f7fef9512a725599a554ee44c1f89e353f", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// Use smaller statistics when running on simulators, so it takes less time.\n+// For powerpc-eabi, SAMPLES=30000 fails.\n+// { dg-options \"-std=gnu++0x -DSAMPLES=35000\" { target simulator } }\n+\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"chi2_quality.h\"\n+\n+// Tests chi^2 for a distribution of uniformly generated random strings.\n+void\n+test_uniform_random()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::srand(137);\n+  std::unordered_set<std::string> set;\n+  std::string s;\n+  const unsigned long N = SAMPLES;\n+  const unsigned long k = N/100;\n+  const unsigned int len = 25;\n+  while (set.size() < N)\n+    {\n+      s.clear();\n+      for (unsigned int i = 0; i < len; ++i)\n+       s.push_back(rand() % 128);\n+      set.insert(s);\n+    }\n+\n+  double chi2 = chi2_hash(set, k);\n+  VERIFY( chi2 < k*1.1 );\n+}\n+\n+int\n+main()\n+{\n+  test_uniform_random();\n+  return 0;\n+}"}, {"sha": "4e50da0ff3f69205c8080b22276700d2eb4d4a94", "filename": "libstdc++-v3/testsuite/20_util/hash/chi2_quality.cc", "status": "removed", "additions": 0, "deletions": 218, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96758521f7b9f3fb94ae966e1511c8af4137d347/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96758521f7b9f3fb94ae966e1511c8af4137d347/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.cc?ref=96758521f7b9f3fb94ae966e1511c8af4137d347", "patch": "@@ -1,218 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Use smaller statistics when running on simulators, so it takes less time.\n-// { dg-options \"-std=gnu++0x -DSAMPLES=30000\" { target simulator } }\n-\n-// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// This file uses the chi^2 test to measure the quality of a hash\n-// function, by computing the uniformity with which it distributes a set\n-// of N strings into k buckets (where k is significantly greater than N).\n-//\n-// Each bucket has B[i] strings in it. The expected value of each bucket\n-// for a uniform distribution is z = N/k, so\n-//   chi^2 = Sum_i (B[i] - z)^2 / z.\n-//\n-// We check whether chi^2 is small enough to be consistent with the\n-// hypothesis of a uniform distribution. If F(chi^2, k-1) is close to\n-// 0 (where F is the cumulative probability distribution), we can\n-// reject that hypothesis. So we don't want F to be too small, which\n-// for large k, means we want chi^2 to be not too much larger than k.\n-//\n-// We use the chi^2 test for several sets of strings. Any non-horrible\n-// hash function should do well with purely random strings. A really\n-// good hash function will also do well with more structured sets,\n-// including ones where the strings differ by only a few bits.\n-\n-#include <algorithm>\n-#include <cstdlib>\n-#include <cstdio>\n-#include <fstream>\n-#include <functional>\n-#include <iostream>\n-#include <iterator>\n-#include <string>\n-#include <unordered_set>\n-#include <vector>\n-#include <testsuite_hooks.h>\n-\n-#ifndef SAMPLES\n-#define SAMPLES 300000\n-#endif\n-\n-template <typename Container>\n-  double\n-  chi2_hash(const Container& c, long buckets)\n-  {\n-    std::vector<int> counts(buckets);\n-    std::hash<std::string> hasher;\n-    double elements = 0;\n-    for (auto i = c.begin(); i != c.end(); ++i)\n-      {\n-        ++counts[hasher(*i) % buckets];\n-        ++elements;\n-      }\n-\n-    const double z = elements / buckets;\n-    double sum = 0;\n-    for (long i = 0; i < buckets; ++i)\n-      {\n-        double delta = counts[i] - z;\n-        sum += delta*delta;\n-      }\n-    return sum/z;\n-  }\n-\n-// Tests chi^2 for a distribution of uniformly generated random strings.\n-void\n-test_uniform_random()\n-{\n-  bool test __attribute__((unused)) = true;\n-  std::srand(137);\n-  std::unordered_set<std::string> set;\n-  std::string s;\n-  const unsigned long N = SAMPLES;\n-  const unsigned long k = N/100;\n-  const unsigned int len = 25;\n-  while (set.size() < N)\n-    {\n-      s.clear();\n-      for (unsigned int i = 0; i < len; ++i)\n-\ts.push_back(rand() % 128);\n-      set.insert(s);\n-    }\n-\n-  double chi2 = chi2_hash(set, k);\n-  VERIFY( chi2 < k*1.1 );\n-}\n-\n-// Tests chi^2 for a distribution of strings that differ from each\n-// other by only a few bits. We start with an arbitrary base string, and\n-// flip three random bits for each member of the set.\n-void\n-test_bit_flip_set()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const unsigned long N = SAMPLES;\n-  const unsigned long k = N/100;\n-  const unsigned int len = 67;\n-  const unsigned int bitlen = len * 8;\n-  const unsigned int bits_to_flip = 3;\n-  const char base[len+1] = \"abcdefghijklmnopqrstuvwxyz\"\n-                           \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-                           \"0123456789!@#$%\";\n-\n-  std::unordered_set<std::string> set;\n-  while (set.size() < N)\n-    {\n-      std::string s(base, base+len);\n-      for (unsigned int i = 0; i < bits_to_flip; ++i)\n-        {\n-          int bit = rand() % bitlen;\n-          s[bit/8] ^= (1 << (bit%8));\n-        }\n-      set.insert(s);\n-    }\n-\n-  double chi2 = chi2_hash(set, k);\n-  VERIFY( chi2 < k*1.1 );\n-}\n-\n-// Tests chi^2 of a set of strings that all have a similar pattern,\n-// intended to mimic some sort of ID string.\n-void\n-test_numeric_pattern_set()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const unsigned long N = SAMPLES;\n-  const unsigned long k = N/100;\n-  std::vector<std::string> set;\n-  for (unsigned long i = 0; i < N; ++i)\n-    {\n-      long i1 = i % 100000;\n-      long i2 = i / 100000;\n-      char buf[16];\n-      std::sprintf(buf, \"XX-%05lu-%05lu\", i1, i2);\n-      set.push_back(buf);\n-    }\n-\n-  double chi2 = chi2_hash(set, k);\n-  VERIFY( chi2 < k*1.1 );\n-}\n-\n-// Tests chi^2 for a set of strings that all consist of '1' and '0'.\n-void\n-test_bit_string_set()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const unsigned long N = SAMPLES;\n-  const unsigned long k = N/100;\n-  std::vector<std::string> set;\n-  std::string s;\n-  for (unsigned long i = 0; i < N; ++i)\n-    {\n-      s.clear();\n-      for (unsigned int j = 0; j < sizeof(unsigned long) * 8; ++j)\n-        {\n-          const bool bit = (1UL << j) & i;\n-          s.push_back(bit ? '1' : '0');\n-        }\n-      set.push_back(s);\n-    }\n-\n-  double chi2 = chi2_hash(set, k);\n-  VERIFY( chi2 < k*1.1 );\n-}\n-\n-// Tests chi^2 for a set of words taken from a document written in English.\n-void\n-test_document_words()\n-{\n-  // That file is 187587 single-word lines.  To avoid a timeout, just skip\n-  // this part, which would take up to 95% of the program runtime (with\n-  // SAMPLES == 10000), if we're not supposed to run anywhere that long.\n-#if SAMPLES >= 100000\n-  bool test __attribute__((unused)) = true;\n-  const std::string f_name = \"thirty_years_among_the_dead_preproc.txt\";\n-  std::ifstream in(f_name);\n-  VERIFY( in.is_open() );\n-  std::vector<std::string> words;\n-  words.assign(std::istream_iterator<std::string>(in),\n-               std::istream_iterator<std::string>());\n-  VERIFY( words.size() > 100000 );\n-  std::sort(words.begin(), words.end());\n-  auto it = std::unique(words.begin(), words.end());\n-  words.erase(it, words.end());\n-  VERIFY( words.size() > 5000 );\n-\n-  const unsigned long k = words.size() / 20;\n-  double chi2 = chi2_hash(words, k);\n-  VERIFY( chi2 < k*1.1 );\n-#endif\n-}\n-\n-int\n-main()\n-{\n-  test_uniform_random();\n-  test_bit_flip_set();\n-  test_numeric_pattern_set();\n-  test_bit_string_set();\n-  test_document_words();\n-  return 0;\n-}"}, {"sha": "09da79926acbf6cb6bd58adf9107b9c8361a0fcf", "filename": "libstdc++-v3/testsuite/20_util/hash/chi2_quality.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9431f7fef9512a725599a554ee44c1f89e353f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.h?ref=ca9431f7fef9512a725599a554ee44c1f89e353f", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2010-2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file uses the chi^2 test to measure the quality of a hash\n+// function, by computing the uniformity with which it distributes a set\n+// of N strings into k buckets (where k is significantly greater than N).\n+//\n+// Each bucket has B[i] strings in it. The expected value of each bucket\n+// for a uniform distribution is z = N/k, so\n+//   chi^2 = Sum_i (B[i] - z)^2 / z.\n+//\n+// We check whether chi^2 is small enough to be consistent with the\n+// hypothesis of a uniform distribution. If F(chi^2, k-1) is close to\n+// 0 (where F is the cumulative probability distribution), we can\n+// reject that hypothesis. So we don't want F to be too small, which\n+// for large k, means we want chi^2 to be not too much larger than k.\n+//\n+// We use the chi^2 test for several sets of strings. Any non-horrible\n+// hash function should do well with purely random strings. A really\n+// good hash function will also do well with more structured sets,\n+// including ones where the strings differ by only a few bits.\n+\n+#include <algorithm>\n+#include <cstdlib>\n+#include <cstdio>\n+#include <fstream>\n+#include <functional>\n+#include <iostream>\n+#include <iterator>\n+#include <string>\n+#include <unordered_set>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+#ifndef SAMPLES\n+#define SAMPLES 300000\n+#endif\n+\n+template <typename Container>\n+  double\n+  chi2_hash(const Container& c, long buckets)\n+  {\n+    std::vector<int> counts(buckets);\n+    std::hash<std::string> hasher;\n+    double elements = 0;\n+    for (auto i = c.begin(); i != c.end(); ++i)\n+      {\n+        ++counts[hasher(*i) % buckets];\n+        ++elements;\n+      }\n+\n+    const double z = elements / buckets;\n+    double sum = 0;\n+    for (long i = 0; i < buckets; ++i)\n+      {\n+        double delta = counts[i] - z;\n+        sum += delta*delta;\n+      }\n+    return sum/z;\n+  }"}]}