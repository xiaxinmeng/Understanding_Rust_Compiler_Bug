{"sha": "4591f7e5329dcc6ee9af2f314a050936d470ab5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5MWY3ZTUzMjlkY2M2ZWU5YWYyZjMxNGEwNTA5MzZkNDcwYWI1Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-12T10:37:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-12T14:30:12Z"}, "message": "libstdc++: Fix bootstrap with -fno-rtti [PR 99077]\n\nWhen libstdc++ is built without RTTI the __ios_failure type is just an\nalias for std::ios_failure, so trying to construct it from an int won't\ncompile. This changes the RTTI-enabled __ios_failure type to have the\nsame constructor parameters as std::ios_failure, so that the constructor\ntakes the same arguments whether RTTI is enabled or not.\n\nThe __throw_ios_failure function now constructs the error_code, instead\nof the __ios_failure constructor. As a drive-by fix that error_code is\nconstructed with std::generic_category() not std::system_category(),\nbecause the int comes from errno which corresponds to the generic\ncategory.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/99077\n\t* src/c++11/cxx11-ios_failure.cc (__ios_failure(const char*, int)):\n\tChange int parameter to error_code, to match std::ios_failure.\n\t(__throw_ios_failure(const char*, int)): Construct error_code\n\tfrom int parameter.", "tree": {"sha": "ed5797f420c605bbf8a024737f5e7931cb5787da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5797f420c605bbf8a024737f5e7931cb5787da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4591f7e5329dcc6ee9af2f314a050936d470ab5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4591f7e5329dcc6ee9af2f314a050936d470ab5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4591f7e5329dcc6ee9af2f314a050936d470ab5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4591f7e5329dcc6ee9af2f314a050936d470ab5b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b8ed7c61bc6f80df41f9aa3cf9eb57fb664e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b8ed7c61bc6f80df41f9aa3cf9eb57fb664e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b8ed7c61bc6f80df41f9aa3cf9eb57fb664e77"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "a918ab21015f58f454c3027a6ea81419309b9982", "filename": "libstdc++-v3/src/c++11/cxx11-ios_failure.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4591f7e5329dcc6ee9af2f314a050936d470ab5b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4591f7e5329dcc6ee9af2f314a050936d470ab5b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc?ref=4591f7e5329dcc6ee9af2f314a050936d470ab5b", "patch": "@@ -114,7 +114,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __ios_failure(const char* s) : failure(s)\n     { __construct_ios_failure(buf, runtime_error::what()); }\n \n-    __ios_failure(const char* s, int e) : failure(s, to_error_code(e))\n+    __ios_failure(const char* s, const error_code& e) : failure(s, e)\n     { __construct_ios_failure(buf, runtime_error::what()); }\n \n     ~__ios_failure()\n@@ -125,10 +125,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // There are assertions in src/c++98/ios_failure.cc to ensure the size\n     // and alignment assumptions are valid.\n     alignas(runtime_error) unsigned char buf[sizeof(runtime_error)];\n-\n-    static error_code\n-    to_error_code(int e)\n-    { return e ? error_code(e, system_category()) : io_errc::stream; }\n   };\n \n   // Custom type info for __ios_failure.\n@@ -171,7 +167,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   void\n   __throw_ios_failure(const char* str __attribute__((unused)),\n \t\t      int err __attribute__((unused)))\n-  { _GLIBCXX_THROW_OR_ABORT(__ios_failure(_(str), err)); }\n+  {\n+    _GLIBCXX_THROW_OR_ABORT(__ios_failure(_(str),\n+\t  err ? error_code(err, generic_category()) : io_errc::stream));\n+  }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}]}