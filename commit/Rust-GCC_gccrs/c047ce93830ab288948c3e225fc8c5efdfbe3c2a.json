{"sha": "c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0N2NlOTM4MzBhYjI4ODk0OGMzZTIyNWZjOGM1ZWZkZmJlM2MyYQ==", "commit": {"author": {"name": "Simon Baldwin", "email": "simonb@google.com", "date": "2008-09-18T15:39:08Z"}, "committer": {"name": "Simon Baldwin", "email": "simonb@gcc.gnu.org", "date": "2008-09-18T15:39:08Z"}, "message": "cpplib.h (struct cpp_options): Add new boolean flag warn_builtin_macro_redefined.\n\n\n\t* include/cpplib.h (struct cpp_options): Add new boolean flag\n\twarn_builtin_macro_redefined.\n\t* init.c (cpp_create_reader): Initialize warn_builtin_macro_redefined.\n\t* (struct builtin_operator): Split out from previous struct builtin,\n\tenhance extra const correctness.\n\t* (struct builtin_macro): Split out from previous struct builtin, add\n\tnew always_warn_if_redefined flag, enhance const correctness.\n\t* (mark_named_operators): Use struct builtin_operator.\n\t* (cpp_init_special_builtins): Use struct builtin_macro, add NODE_WARN\n\tto builtins selectively.\n\t* macro.c (warn_of_redefinition): Return false if a builtin macro\n\tis not flagged with NODE_WARN.\n\n\t* c-opts.c (c_common_handle_option): Add handling for\n\t-Wbuiltin-macro-redefined command line option.\n\t* c.opt: Added builtin-macro-redefined option.\n\t* doc/invoke.texi (Warning Options): Add -Wbuiltin-macro-redefined\n\tdocumentation.\n\n\t* gcc.dg/builtin-redefine.c: New.\n\nFrom-SVN: r140461", "tree": {"sha": "e6725c527874d936bd2e164a6a7f885ebaffaf47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6725c527874d936bd2e164a6a7f885ebaffaf47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/comments", "author": null, "committer": null, "parents": [{"sha": "1d295886287812ee7e5b5bfc63ff598a2a9e9958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d295886287812ee7e5b5bfc63ff598a2a9e9958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d295886287812ee7e5b5bfc63ff598a2a9e9958"}], "stats": {"total": 186, "additions": 165, "deletions": 21}, "files": [{"sha": "99b34c52c4e92844c58c3f80678a05d8276b25ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -1,3 +1,11 @@\n+2008-09-18  Simon Baldwin  <simonb@google.com>\n+\n+\t* c-opts.c (c_common_handle_option): Add handling for\n+\t-Wbuiltin-macro-redefined command line option.\n+\t* c.opt: Added builtin-macro-redefined option.\n+\t* doc/invoke.texi (Warning Options): Add -Wbuiltin-macro-redefined\n+\tdocumentation.\n+\n 2008-09-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37258"}, {"sha": "589b05be3893baf3b763e338e3815fe340d5482b", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -426,6 +426,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \twarn_pointer_sign = 1;\n       break;\n \n+    case OPT_Wbuiltin_macro_redefined:\n+      cpp_opts->warn_builtin_macro_redefined = value;\n+      break;\n+\n     case OPT_Wcomment:\n     case OPT_Wcomments:\n       cpp_opts->warn_comments = value;"}, {"sha": "94d6047a5a399082f10d50f0673aa58850175f46", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -131,6 +131,10 @@ Wbad-function-cast\n C ObjC Var(warn_bad_function_cast) Warning\n Warn about casting functions to incompatible types\n \n+Wbuiltin-macro-redefined\n+C ObjC C++ ObjC++ Warning\n+Warn when a built-in preprocessor macro is undefined or redefined\n+\n Wc++-compat\n C ObjC Var(warn_cxx_compat) Warning\n Warn about C constructs that are not in the common subset of C and C++"}, {"sha": "05fc091009de45cb0311fc339843f823e1ebe8b0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -228,7 +228,8 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @gccoptlist{-fsyntax-only  -pedantic  -pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  -Warray-bounds @gol\n--Wno-attributes -Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n+-Wno-attributes -Wno-builtin-macro-redefined @gol\n+-Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n -Wconversion  -Wcoverage-mismatch  -Wno-deprecated  @gol\n -Wno-deprecated-declarations -Wdisabled-optimization  @gol\n@@ -3731,6 +3732,13 @@ unrecognized attributes, function attributes applied to variables,\n etc.  This will not stop errors for incorrect use of supported\n attributes.\n \n+@item -Wno-builtin-macro-redefined\n+@opindex Wno-builtin-macro-redefined\n+@opindex Wbuiltin-macro-redefined\n+Do not warn if certain built-in macros are redefined.  This suppresses\n+warnings for redefinition of @code{__TIMESTAMP__}, @code{__TIME__},\n+@code{__DATE__}, @code{__FILE__}, and @code{__BASE_FILE__}.\n+\n @item -Wstrict-prototypes @r{(C and Objective-C only)}\n @opindex Wstrict-prototypes\n @opindex Wno-strict-prototypes"}, {"sha": "dbeb7e68e5b17170206f0ad461f2862c1a43fada", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -1,3 +1,7 @@\n+2008-09-18  Simon Baldwin  <simonb@google.com>\n+\n+\t* gcc.dg/builtin-redefine.c: New.\n+\n 2008-09-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37258"}, {"sha": "f94d3f3d83d275e669d7065b59ac52dd15959a5a", "filename": "gcc/testsuite/gcc.dg/builtin-redefine.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -0,0 +1,79 @@\n+/* Test -Wno-builtin-macro-redefined warnings.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-builtin-macro-redefined -U__DATE__ -D__TIME__=X\" } */\n+\n+/* Check date, time, and datestamp built-ins warnings may be suppressed.  */\n+\n+#if defined(__DATE__)\n+#error \"__DATE__ is defined, but should not be (-U command line error)\"\n+/* { dg-bogus \"__DATE__ is defined\" \"\" { target *-*-* } 9 } */\n+#endif\n+\n+#if __TIME__ != X\n+#error \"__TIME__ is not defined as expected (-D command line error)\"\n+/* { dg-bogus \"__TIME__ is not defined\" \"\" { target *-*-* } 14 } */\n+#endif\n+\n+#if !defined(__TIMESTAMP__)\n+#error \"__TIMESTAMP__ is not defined (built-in macro expectation error)\"\n+/* { dg-bogus \"__TIMESTAMP__ is not defined\" \"\" { target *-*-* } 19 } */\n+#endif\n+\n+\n+#undef __TIME__              /* Undefine while defined.  */\n+#undef __TIME__              /* Undefine while already undefined.  */\n+\n+#define __TIME__ \"X\"         /* Define while undefined.  */\n+#define __TIME__ \"X\"         /* Re-define while defined.  */\n+\n+#define __TIME__ \"Y\"         /* { dg-warning \"\\\"__TIME__\\\" redefined\" } */\n+/* { dg-warning \"previous definition\" \"\" { target *-*-* } 28 } */\n+\n+#undef __TIME__              /* Undefine while defined.  */\n+\n+\n+#undef __DATE__              /* Undefine while already undefined.  */\n+\n+#define __DATE__ \"X\"         /* Define while undefined.  */\n+#define __DATE__ \"X\"         /* Re-define while defined.  */\n+\n+#define __DATE__ \"Y\"         /* { dg-warning \"\\\"__DATE__\\\" redefined\" } */\n+/* { dg-warning \"previous definition\" \"\" { target *-*-* } 39 } */\n+\n+#undef __DATE__              /* Undefine while defined.  */\n+\n+\n+#define __TIMESTAMP__ \"X\"    /* Define while already defined.  */\n+#define __TIMESTAMP__ \"X\"    /* Re-define while defined.  */\n+\n+#define __TIMESTAMP__ \"Y\"    /* { dg-warning \"\\\"__TIMESTAMP__\\\" redefined\" } */\n+/* { dg-warning \"previous definition\" \"\" { target *-*-* } 48 } */\n+\n+#undef __TIMESTAMP__         /* Undefine while defined.  */\n+\n+\n+/* Check other built-ins with warnings that may be suppressed.  */\n+\n+#if !defined(__FILE__) || !defined(__BASE_FILE__)\n+#error \"Expected built-in is not defined (built-in macro expectation error)\"\n+/* { dg-bogus \"Expected built-in is not defined\" \"\" { target *-*-* } 59 } */\n+#endif\n+\n+#define __FILE__ \"X\"         /* Define while already defined.  */\n+#define __BASE_FILE__ \"X\"    /* Define while already defined.  */\n+\n+\n+/* Check selected built-ins not affected by warning suppression. */\n+\n+#if !defined(__LINE__) || !defined(__INCLUDE_LEVEL__) || !defined(__COUNTER__)\n+#error \"Expected built-in is not defined (built-in macro expectation error)\"\n+/* { dg-bogus \"Expected built-in is not defined\" \"\" { target *-*-* } 70 } */\n+#endif\n+\n+#define __LINE__ 0           /* { dg-warning \"\\\"__LINE__\\\" redef\" } */\n+#define __INCLUDE_LEVEL__ 0  /* { dg-warning \"\\\"__INCLUDE_LEVEL__\\\" redef\" } */\n+#define __COUNTER__ 0        /* { dg-warning \"\\\"__COUNTER__\\\" redef\" } */\n+\n+\n+int unused;  /* Silence `ISO C forbids an empty translation unit' warning.  */"}, {"sha": "39be98972ae8ef174d3fe5a966787805a8a311b1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -1,3 +1,18 @@\n+2008-09-18  Simon Baldwin  <simonb@google.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add new boolean flag\n+\twarn_builtin_macro_redefined.\n+\t* init.c (cpp_create_reader): Initialize warn_builtin_macro_redefined.\n+\t* (struct builtin_operator): Split out from previous struct builtin,\n+\tenhance extra const correctness.\n+\t* (struct builtin_macro): Split out from previous struct builtin, add\n+\tnew always_warn_if_redefined flag, enhance const correctness.\n+\t* (mark_named_operators): Use struct builtin_operator.\n+\t* (cpp_init_special_builtins): Use struct builtin_macro, add NODE_WARN\n+\tto builtins selectively.\n+\t* macro.c (warn_of_redefinition): Return false if a builtin macro\n+\tis not flagged with NODE_WARN.\n+\n 2008-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/36649"}, {"sha": "4f073f9943330262d3e6e666c1f9500d184f82d9", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -349,6 +349,10 @@ struct cpp_options\n      Presumably the usage is protected by the appropriate #ifdef.  */\n   unsigned char warn_variadic_macros;\n \n+  /* Nonzero means warn about builtin macros that are redefined or\n+     explicitly undefined.  */\n+  unsigned char warn_builtin_macro_redefined;\n+\n   /* Nonzero means turn warnings into errors.  */\n   unsigned char warnings_are_errors;\n "}, {"sha": "0db167c133c4ed287c741642a2d4e31fd9de94cb", "filename": "libcpp/init.c", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -163,6 +163,7 @@ cpp_create_reader (enum c_lang lang, hash_table *table,\n   CPP_OPTION (pfile, dollars_in_ident) = 1;\n   CPP_OPTION (pfile, warn_dollars) = 1;\n   CPP_OPTION (pfile, warn_variadic_macros) = 1;\n+  CPP_OPTION (pfile, warn_builtin_macro_redefined) = 1;\n   CPP_OPTION (pfile, warn_normalize) = normalized_C;\n \n   /* Default CPP arithmetic to something sensible for the host for the\n@@ -303,31 +304,41 @@ cpp_destroy (cpp_reader *pfile)\n    altered through #define, and #if recognizes them as operators.  In\n    C, these are not entered into the hash table at all (but see\n    <iso646.h>).  The value is a token-type enumerator.  */\n-struct builtin\n+struct builtin_macro\n {\n-  const uchar *name;\n-  unsigned short len;\n-  unsigned short value;\n+  const uchar *const name;\n+  const unsigned short len;\n+  const unsigned short value;\n+  const bool always_warn_if_redefined;\n };\n \n-#define B(n, t)    { DSC(n), t }\n-static const struct builtin builtin_array[] =\n+#define B(n, t, f)    { DSC(n), t, f }\n+static const struct builtin_macro builtin_array[] =\n {\n-  B(\"__TIMESTAMP__\",\t BT_TIMESTAMP),\n-  B(\"__TIME__\",\t\t BT_TIME),\n-  B(\"__DATE__\",\t\t BT_DATE),\n-  B(\"__FILE__\",\t\t BT_FILE),\n-  B(\"__BASE_FILE__\",\t BT_BASE_FILE),\n-  B(\"__LINE__\",\t\t BT_SPECLINE),\n-  B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL),\n-  B(\"__COUNTER__\",\t BT_COUNTER),\n+  B(\"__TIMESTAMP__\",\t BT_TIMESTAMP,     false),\n+  B(\"__TIME__\",\t\t BT_TIME,          false),\n+  B(\"__DATE__\",\t\t BT_DATE,          false),\n+  B(\"__FILE__\",\t\t BT_FILE,          false),\n+  B(\"__BASE_FILE__\",\t BT_BASE_FILE,     false),\n+  B(\"__LINE__\",\t\t BT_SPECLINE,      true),\n+  B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL, true),\n+  B(\"__COUNTER__\",\t BT_COUNTER,       true),\n   /* Keep builtins not used for -traditional-cpp at the end, and\n      update init_builtins() if any more are added.  */\n-  B(\"_Pragma\",\t\t BT_PRAGMA),\n-  B(\"__STDC__\",\t\t BT_STDC),\n+  B(\"_Pragma\",\t\t BT_PRAGMA,        true),\n+  B(\"__STDC__\",\t\t BT_STDC,          true),\n+};\n+#undef B\n+\n+struct builtin_operator\n+{\n+  const uchar *const name;\n+  const unsigned short len;\n+  const unsigned short value;\n };\n \n-static const struct builtin operator_array[] =\n+#define B(n, t)    { DSC(n), t }\n+static const struct builtin_operator operator_array[] =\n {\n   B(\"and\",\tCPP_AND_AND),\n   B(\"and_eq\",\tCPP_AND_EQ),\n@@ -347,7 +358,7 @@ static const struct builtin operator_array[] =\n static void\n mark_named_operators (cpp_reader *pfile)\n {\n-  const struct builtin *b;\n+  const struct builtin_operator *b;\n \n   for (b = operator_array;\n        b < (operator_array + ARRAY_SIZE (operator_array));\n@@ -363,7 +374,7 @@ mark_named_operators (cpp_reader *pfile)\n void\n cpp_init_special_builtins (cpp_reader *pfile)\n {\n-  const struct builtin *b;\n+  const struct builtin_macro *b;\n   size_t n = ARRAY_SIZE (builtin_array);\n \n   if (CPP_OPTION (pfile, traditional))\n@@ -376,7 +387,10 @@ cpp_init_special_builtins (cpp_reader *pfile)\n     {\n       cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n       hp->type = NT_MACRO;\n-      hp->flags |= NODE_BUILTIN | NODE_WARN;\n+      hp->flags |= NODE_BUILTIN;\n+      if (b->always_warn_if_redefined\n+          || CPP_OPTION (pfile, warn_builtin_macro_redefined))\n+\thp->flags |= NODE_WARN;\n       hp->value.builtin = (enum builtin_type) b->value;\n     }\n }"}, {"sha": "8122648ea396d8b98cd036abe26958bd8aaddd54", "filename": "libcpp/macro.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c047ce93830ab288948c3e225fc8c5efdfbe3c2a/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=c047ce93830ab288948c3e225fc8c5efdfbe3c2a", "patch": "@@ -1392,6 +1392,10 @@ warn_of_redefinition (cpp_reader *pfile, const cpp_hashnode *node,\n   if (node->flags & NODE_WARN)\n     return true;\n \n+  /* Suppress warnings for builtins that lack the NODE_WARN flag.  */\n+  if (node->flags & NODE_BUILTIN)\n+    return false;\n+\n   /* Redefinitions of conditional (context-sensitive) macros, on\n      the other hand, must be allowed silently.  */\n   if (node->flags & NODE_CONDITIONAL)"}]}