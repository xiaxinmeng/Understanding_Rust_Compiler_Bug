{"sha": "129a1319c0ab73f4bfc5598dffedb06378b00fc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5YTEzMTljMGFiNzNmNGJmYzU1OThkZmZlZGIwNjM3OGIwMGZjMA==", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2020-08-13T17:05:46Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2020-08-14T13:29:19Z"}, "message": "diagnostics: Add new option -fdiagnostics-plain-output\n\nAdds the new option -fdiagnostics-plain-output, which is an alias for\nseveral others:\n\n    -fno-diagnostics-show-caret\n    -fno-diagnostics-show-line-numbers\n    -fdiagnostics-color=never\n    -fdiagnostics-urls=never\n\nThe idea is that in the future, if the default behavior of diagnostics is\nchanged to add some fancy feature or other, then the\n-fdiagnostics-plain-output option will also be changed accordingly so that\nthe old behavior is preserved in the presence of this option. This allows\nus to use -fdiagnostics-plain-output in in the testsuite, such that the\ntestsuite (specifically the setting of TEST_ALWAYS_FLAGS in prune.exp)\ndoes not need to be touched whenever diagnostics get a new look. This also\nremoves the need to add workarounds to compat.exp for every new option\nthat may be needed in a newer version of the compiler, but is not\nsupported in older versions.\n\ngcc/ChangeLog:\n\n\t* common.opt: Add new option -fdiagnostics-plain-output.\n\t* doc/invoke.texi: Document it.\n\t* opts-common.c (decode_cmdline_options_to_array): Implement it.\n\t(decode_cmdline_option): Add missing const qualifier to argv.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/lib/libstdc++.exp: Use the new option\n\t-fdiagnostics-plain-output.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/prune.exp: Change TEST_ALWAYS_FLAGS to use -fdiagnostics-plain-output.\n\t* lib/c-compat.exp: Adapt to the prune.exp change.", "tree": {"sha": "968c9d5710c2a4431c5c98d8e15ca9474b7ca9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/968c9d5710c2a4431c5c98d8e15ca9474b7ca9be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129a1319c0ab73f4bfc5598dffedb06378b00fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129a1319c0ab73f4bfc5598dffedb06378b00fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129a1319c0ab73f4bfc5598dffedb06378b00fc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129a1319c0ab73f4bfc5598dffedb06378b00fc0/comments", "author": null, "committer": null, "parents": [{"sha": "22dc89f8073cd0126efa72aa3ab88e80c78d45e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22dc89f8073cd0126efa72aa3ab88e80c78d45e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22dc89f8073cd0126efa72aa3ab88e80c78d45e3"}], "stats": {"total": 93, "additions": 84, "deletions": 9}, "files": [{"sha": "513125f0c00be3068b804dbec7ccaa8d5e14553e", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=129a1319c0ab73f4bfc5598dffedb06378b00fc0", "patch": "@@ -1378,6 +1378,10 @@ fdiagnostics-path-format=\n Common Joined RejectNegative Var(flag_diagnostics_path_format) Enum(diagnostic_path_format) Init(DPF_INLINE_EVENTS)\n Specify how to print any control-flow path associated with a diagnostic.\n \n+fdiagnostics-plain-output\n+Driver Common RejectNegative\n+Turn off any diagnostics features that complicate the output, such as line numbers, color, and warning URLs.\n+\n ftabstop=\n Common Joined RejectNegative UInteger\n -ftabstop=<number>      Distance between tab stops for column reporting."}, {"sha": "70dc1ab73a12b64d47c48f8834d88ea246c9e4c3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=129a1319c0ab73f4bfc5598dffedb06378b00fc0", "patch": "@@ -280,6 +280,7 @@ Objective-C and Objective-C++ Dialects}.\n @item Diagnostic Message Formatting Options\n @xref{Diagnostic Message Formatting Options,,Options to Control Diagnostic Messages Formatting}.\n @gccoptlist{-fmessage-length=@var{n}  @gol\n+-fdiagnostics-plain-output @gol\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n -fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n -fdiagnostics-urls=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n@@ -4291,6 +4292,19 @@ Note - this option also affects the display of the @samp{#error} and\n function/type/variable attribute.  It does not however affect the\n @samp{pragma GCC warning} and @samp{pragma GCC error} pragmas.\n \n+@item -fdiagnostics-plain-output\n+This option requests that diagnostic output look as plain as possible, which\n+may be useful when running @command{dejagnu} or other utilities that need to\n+parse diagnostics output and prefer that it remain more stable over time.\n+@option{-fdiagnostics-plain-output} is currently equivalent to the following\n+options:\n+@gccoptlist{-fno-diagnostics-show-caret @gol\n+-fno-diagnostics-show-line-numbers @gol\n+-fdiagnostics-color=never @gol\n+-fdiagnostics-urls=never}\n+In the future, if GCC changes the default appearance of its diagnostics, the\n+corresponding option to disable the new behavior will be added to this list.\n+\n @item -fdiagnostics-show-location=once\n @opindex fdiagnostics-show-location\n Only meaningful in line-wrapping mode.  Instructs the diagnostic messages"}, {"sha": "237e4ce454e69c16994741278503bccc704ed9e4", "filename": "gcc/opts-common.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=129a1319c0ab73f4bfc5598dffedb06378b00fc0", "patch": "@@ -529,7 +529,7 @@ add_misspelling_candidates (auto_vec<char *> *candidates,\n    consumed.  */\n \n static unsigned int\n-decode_cmdline_option (const char **argv, unsigned int lang_mask,\n+decode_cmdline_option (const char *const *argv, unsigned int lang_mask,\n \t\t       struct cl_decoded_option *decoded)\n {\n   size_t opt_index;\n@@ -944,7 +944,8 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n   struct cl_decoded_option *opt_array;\n   unsigned int num_decoded_options;\n \n-  opt_array = XNEWVEC (struct cl_decoded_option, argc);\n+  int opt_array_len = argc;\n+  opt_array = XNEWVEC (struct cl_decoded_option, opt_array_len);\n \n   opt_array[0].opt_index = OPT_SPECIAL_program_name;\n   opt_array[0].warn_message = NULL;\n@@ -981,6 +982,40 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n \t  argv[++i] = replacement;\n \t}\n \n+      /* Expand -fdiagnostics-plain-output to its constituents.  This needs\n+\t to happen here so that prune_options can handle -fdiagnostics-color\n+\t specially.  */\n+      if (!strcmp (opt, \"-fdiagnostics-plain-output\"))\n+\t{\n+\t  /* If you have changed the default diagnostics output, and this new\n+\t     output is not appropriately \"plain\" (e.g., the change needs to be\n+\t     undone in order for the testsuite to work properly), then please do\n+\t     the following:\n+\t\t 1.  Add the necessary option to undo the new behavior to\n+\t\t     the array below.\n+\t\t 2.  Update the documentation for -fdiagnostics-plain-output\n+\t\t     in invoke.texi.  */\n+\t  const char *const expanded_args[] = {\n+\t    \"-fno-diagnostics-show-caret\",\n+\t    \"-fno-diagnostics-show-line-numbers\",\n+\t    \"-fdiagnostics-color=never\",\n+\t    \"-fdiagnostics-urls=never\",\n+\t  };\n+\t  const int num_expanded = ARRAY_SIZE (expanded_args);\n+\t  opt_array_len += num_expanded - 1;\n+\t  opt_array = XRESIZEVEC (struct cl_decoded_option,\n+\t\t\t\t  opt_array, opt_array_len);\n+\t  for (int j = 0, nj; j < num_expanded; j += nj)\n+\t    {\n+\t      nj = decode_cmdline_option (expanded_args + j, lang_mask,\n+\t\t\t\t\t  &opt_array[num_decoded_options]);\n+\t      num_decoded_options++;\n+\t    }\n+\n+\t  n = 1;\n+\t  continue;\n+\t}\n+\n       n = decode_cmdline_option (argv + i, lang_mask,\n \t\t\t\t &opt_array[num_decoded_options]);\n       num_decoded_options++;"}, {"sha": "2b673179115ca0f690849dec7c460daa6e33f7cd", "filename": "gcc/testsuite/lib/c-compat.exp", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Ftestsuite%2Flib%2Fc-compat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Ftestsuite%2Flib%2Fc-compat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-compat.exp?ref=129a1319c0ab73f4bfc5598dffedb06378b00fc0", "patch": "@@ -36,24 +36,34 @@ load_lib target-libpath.exp\n proc compat-use-alt-compiler { } {\n     global GCC_UNDER_TEST ALT_CC_UNDER_TEST\n     global compat_same_alt compat_alt_caret compat_alt_color compat_no_line_no\n-    global compat_alt_urls\n+    global compat_alt_urls compat_alt_plain_output\n     global TEST_ALWAYS_FLAGS\n \n     # We don't need to do this if the alternate compiler is actually\n     # the same as the compiler under test.\n     if { $compat_same_alt == 0 } then {\n \tset GCC_UNDER_TEST $ALT_CC_UNDER_TEST\n+\n+\t# These flags are no longer added to TEST_ALWAYS_FLAGS by prune.exp\n+\t# because they are subsumed by -fdiagnostics-plain-output. Add them back\n+\t# for compatibility testing with older compilers that do not understand\n+\t# -fdiagnostics-plain-output.\n+\tset TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-color=never -fdiagnostics-urls=never $TEST_ALWAYS_FLAGS\"\n+\n \tif { $compat_alt_caret == 0 } then {\n-\t    regsub -- \"-fno-diagnostics-show-caret\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n+\t    regsub -all -- \"-fno-diagnostics-show-caret\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n \t}\n \tif { $compat_alt_color == 0 } then {\n-\t    regsub -- \"-fdiagnostics-color=never\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n+\t    regsub -all -- \"-fdiagnostics-color=never\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n \t}\n \tif { $compat_alt_urls == 0 } then {\n-\t    regsub -- \"-fdiagnostics-urls=never\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n+\t    regsub -all -- \"-fdiagnostics-urls=never\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n \t}\n \tif { $compat_no_line_no == 0 } then {\n-\t    regsub -- \"-fno-diagnostics-show-line-numbers\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n+\t    regsub -all -- \"-fno-diagnostics-show-line-numbers\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n+\t}\n+\tif { $compat_alt_plain_output == 0 } then {\n+\t    regsub -all -- \"-fdiagnostics-plain-output\" $TEST_ALWAYS_FLAGS \"\" TEST_ALWAYS_FLAGS\n \t}\n \trestore_gcc_exec_prefix_env_var\n     }\n@@ -85,12 +95,14 @@ proc compat_setup_dfp { } {\n     global compat_alt_caret\n     global compat_alt_color\n     global compat_alt_urls\n+    global compat_alt_plain_output\n     global compat_no_line_no\n     global TEST_ALWAYS_FLAGS compat_save_TEST_ALWAYS_FLAGS\n \n     set compat_alt_caret 0\n     set compat_alt_color 0\n     set compat_alt_urls 0\n+    set compat_alt_plain_output 0\n     set compat_no_line_no 0\n     set compat_save_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n \n@@ -119,6 +131,10 @@ proc compat_setup_dfp { } {\n \t\tint dummy; } \"-fno-diagnostics-show-line-numbers\"] != 0 } {\n \t    set compat_no_line_no 1\n \t}\n+\tif { [check_no_compiler_messages_nocache compat_alt_has_plain_output object {\n+\t\tint dummy; } \"-fdiagnostics-plain-output\"] != 0 } {\n+\t    set compat_alt_plain_output 1\n+\t}\n \t\n \tcompat-use-tst-compiler\n     }"}, {"sha": "190367c44e0f7d5cd5ece03075701f2d20ec13a3", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129a1319c0ab73f4bfc5598dffedb06378b00fc0/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=129a1319c0ab73f4bfc5598dffedb06378b00fc0", "patch": "@@ -18,10 +18,16 @@\n \n load_lib multiline.exp\n \n+# Add options to TEST_ALWAYS_FLAGS so that diagnostics have the expected output\n+# format.  Note: You should not normally need to add more options here.  If you\n+# have made a change to the default diagnostic output format and are wanting to\n+# undo that in the testsuite here, then please update the handling of\n+# -fdiagnostics-plain-output in opts-common.c instead.\n+\n if ![info exists TEST_ALWAYS_FLAGS] {\n     set TEST_ALWAYS_FLAGS \"\"\n }\n-set TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-color=never  -fdiagnostics-urls=never $TEST_ALWAYS_FLAGS\"\n+set TEST_ALWAYS_FLAGS \"-fdiagnostics-plain-output $TEST_ALWAYS_FLAGS\"\n \n proc prune_gcc_output { text } {\n     global srcdir"}, {"sha": "78484f7c9afe799afbcc97c92a9190f97e3bf131", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129a1319c0ab73f4bfc5598dffedb06378b00fc0/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129a1319c0ab73f4bfc5598dffedb06378b00fc0/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=129a1319c0ab73f4bfc5598dffedb06378b00fc0", "patch": "@@ -482,7 +482,7 @@ proc v3_target_compile { source dest type options } {\n     global STATIC_LIBCXXFLAGS\n     global tool\n \n-    lappend options \"additional_flags=-fno-diagnostics-show-caret -fdiagnostics-color=never -fdiagnostics-urls=never\"\n+    lappend options \"additional_flags=-fdiagnostics-plain-output\"\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\""}]}