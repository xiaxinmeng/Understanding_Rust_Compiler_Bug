{"sha": "ca4d28516878755a01ab8c2ba48d083100aba3fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0ZDI4NTE2ODc4NzU1YTAxYWI4YzJiYTQ4ZDA4MzEwMGFiYTNmYg==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2017-05-10T16:44:45Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2017-05-10T16:44:45Z"}, "message": "tree-cfg.c (gimple_seq_unreachable_p): New function.\n\ngcc/\n\t* tree-cfg.c (gimple_seq_unreachable_p): New function.\n\t(assert_unreachable_fallthru_edge_p): Use it.\n\t(group_case_labels_stmt): Likewise.\n\t* tree-cfg.h: Prototype it.\n\t* stmt.c: Include cfghooks.h and tree-cfg.h.\n\t(emit_case_dispatch_table) <gap_label>: New local variable.\n\tUse it to fill dispatch table gaps.\n\tTest for default_label before updating probabilities.\n\t(expand_case) <default_label>: Remove unneeded initialization.\n\tTest for unreachable default case statement and remove its edge.\n\tSet default_label accordingly.\n\t* tree-ssa-ccp.c (optimize_unreachable): Update comment.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/pr51513.c: New test.\n\t* gcc.dg/predict-13.c: Replace __builtin_unreachable() with\n\t__builtin_abort().\n\t* gcc.dg/predict-14.c: Likewise.\n\nFrom-SVN: r247844", "tree": {"sha": "70d19af5ced974c859545f07f4ad66c75b41b3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d19af5ced974c859545f07f4ad66c75b41b3be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4d28516878755a01ab8c2ba48d083100aba3fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4d28516878755a01ab8c2ba48d083100aba3fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4d28516878755a01ab8c2ba48d083100aba3fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4d28516878755a01ab8c2ba48d083100aba3fb/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "415dcf965368a67599b93579848181ecec24f860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415dcf965368a67599b93579848181ecec24f860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/415dcf965368a67599b93579848181ecec24f860"}], "stats": {"total": 152, "additions": 114, "deletions": 38}, "files": [{"sha": "a3fe233c69c113cd520079d31bb0790a3eb00570", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -1,3 +1,18 @@\n+2017-05-10  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* tree-cfg.c (gimple_seq_unreachable_p): New function.\n+\t(assert_unreachable_fallthru_edge_p): Use it.\n+\t(group_case_labels_stmt): Likewise.\n+\t* tree-cfg.h: Prototype it.\n+\t* stmt.c: Include cfghooks.h and tree-cfg.h.\n+\t(emit_case_dispatch_table) <gap_label>: New local variable.\n+\tUse it to fill dispatch table gaps.\n+\tTest for default_label before updating probabilities.\n+\t(expand_case) <default_label>: Remove unneeded initialization.\n+\tTest for unreachable default case statement and remove its edge.\n+\tSet default_label accordingly.\n+\t* tree-ssa-ccp.c (optimize_unreachable): Update comment.\n+\n 2017-05-10  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-c: Add support for built-in functions"}, {"sha": "9b5157d345bc6bdac2d81f91a3f5d349522246de", "filename": "gcc/stmt.c", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"cfghooks.h\"\n #include \"predict.h\"\n #include \"alloc-pool.h\"\n #include \"memmodel.h\"\n@@ -49,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"langhooks.h\"\n #include \"cfganal.h\"\n+#include \"tree-cfg.h\"\n #include \"params.h\"\n #include \"dumpfile.h\"\n #include \"builtins.h\"\n@@ -1007,20 +1009,21 @@ emit_case_dispatch_table (tree index_expr, tree index_type,\n \t  = gen_rtx_LABEL_REF (Pmode, label_rtx (n->code_label));\n     }\n \n-  /* Fill in the gaps with the default.  We may have gaps at\n-     the beginning if we tried to avoid the minval subtraction,\n-     so substitute some label even if the default label was\n-     deemed unreachable.  */\n-  if (!default_label)\n-    default_label = fallback_label;\n+  /* The dispatch table may contain gaps, including at the beginning of\n+     the table if we tried to avoid the minval subtraction.  We fill the\n+     dispatch table slots associated with the gaps with the default case label.\n+     However, in the event the default case is unreachable, we then use\n+     any label from one of the case statements.  */\n+  rtx gap_label = (default_label) ? default_label : fallback_label;\n+\n   for (i = 0; i < ncases; i++)\n     if (labelvec[i] == 0)\n       {\n-        has_gaps = true;\n-        labelvec[i] = gen_rtx_LABEL_REF (Pmode, default_label);\n+\thas_gaps = true;\n+\tlabelvec[i] = gen_rtx_LABEL_REF (Pmode, gap_label);\n       }\n \n-  if (has_gaps)\n+  if (has_gaps && default_label)\n     {\n       /* There is at least one entry in the jump table that jumps\n          to default label. The default label can either be reached\n@@ -1115,7 +1118,7 @@ void\n expand_case (gswitch *stmt)\n {\n   tree minval = NULL_TREE, maxval = NULL_TREE, range = NULL_TREE;\n-  rtx_code_label *default_label = NULL;\n+  rtx_code_label *default_label;\n   unsigned int count, uniq;\n   int i;\n   int ncases = gimple_switch_num_labels (stmt);\n@@ -1232,9 +1235,21 @@ expand_case (gswitch *stmt)\n                              case_list, default_label,\n                              default_prob);\n   else\n-    emit_case_dispatch_table (index_expr, index_type,\n-\t\t\t      case_list, default_label,\n-\t\t\t      minval, maxval, range, bb);\n+    {\n+      /* If the default case is unreachable, then set default_label to NULL\n+\t so that we omit the range check when generating the dispatch table.\n+\t We also remove the edge to the unreachable default case.  The block\n+\t itself will be automatically removed later.  */\n+      if (EDGE_COUNT (default_edge->dest->succs) == 0\n+\t  && gimple_seq_unreachable_p (bb_seq (default_edge->dest)))\n+\t{\n+\t  default_label = NULL;\n+\t  remove_edge (default_edge);\n+\t}\n+      emit_case_dispatch_table (index_expr, index_type,\n+\t\t\t\tcase_list, default_label,\n+\t\t\t\tminval, maxval, range, bb);\n+    }\n \n   reorder_insns (NEXT_INSN (before_case), get_last_insn (), before_case);\n "}, {"sha": "3e465e47d163ee464199938a45cbfb51ebde7917", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -1,3 +1,10 @@\n+2017-05-10  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr51513.c: New test.\n+\t* gcc.dg/predict-13.c: Replace __builtin_unreachable() with\n+\t__builtin_abort().\n+\t* gcc.dg/predict-14.c: Likewise.\n+\n 2017-05-10  Carl Love  <cel@us.ibm.com>\n \t* gcc.target/powerpc/builtins-3.c: Add tests for the new built-ins to\n \tto the test suite file."}, {"sha": "7fe714a0d72f6bebc9a7f73b05b14865deb6110c", "filename": "gcc/testsuite/gcc.dg/predict-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -10,9 +10,9 @@ int main(int argc, char **argv)\n     case 2:\n       return 2;\n     case 3:\n-      __builtin_unreachable();\n+      __builtin_abort();\n     case 4:\n-      __builtin_unreachable();\n+      __builtin_abort();\n     default:\n       return 5;\n     }"}, {"sha": "18ede8f39c057fd7272345369267e1b35f504afd", "filename": "gcc/testsuite/gcc.dg/predict-14.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-14.c?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -6,11 +6,11 @@ int main(int argc, char **argv)\n   switch (argc)\n     {\n     case 1:\n-      __builtin_unreachable();\n+      __builtin_abort();\n     case 4:\n-      __builtin_unreachable();\n+      __builtin_abort();\n     default:\n-      __builtin_unreachable();\n+      __builtin_abort();\n     }\n \n   return 10;"}, {"sha": "1c72a75502a1e22cc30cfde6913dda27163663da", "filename": "gcc/testsuite/gcc.target/powerpc/pr51513.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr51513.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr51513.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr51513.c?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-options \"-O2 -fjump-tables --param case-values-threshold=1\" } */\n+/* Verify we created a jump table.  */\n+/* { dg-final { scan-assembler-times \"mtctr \"  1 } } */\n+/* { dg-final { scan-assembler-times \"bctr\" 1 } } */\n+/* Verify we eliminated the range check.  */\n+/* { dg-final { scan-assembler-not \"cmpldi\" } } */\n+/* { dg-final { scan-assembler-not \"cmplwi\" } } */\n+\n+long\n+bug (long cond, long v0, long v1, long v2)\n+{\n+  switch (cond)\n+    {\n+      case 0:\n+\treturn v0;\n+      case 1:\n+\treturn v1;\n+      case 2:\n+\treturn v2;\n+      default:\n+\t__builtin_unreachable ();\n+    }\n+  __builtin_abort ();\n+}"}, {"sha": "77cb3d62368637d15d624f39e015b90255532e8d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -452,6 +452,31 @@ computed_goto_p (gimple *t)\n \t  && TREE_CODE (gimple_goto_dest (t)) != LABEL_DECL);\n }\n \n+/* Returns true if the sequence of statements STMTS only contains\n+   a call to __builtin_unreachable ().  */\n+\n+bool\n+gimple_seq_unreachable_p (gimple_seq stmts)\n+{\n+  if (stmts == NULL)\n+    return false;\n+\n+  gimple_stmt_iterator gsi = gsi_last (stmts);\n+\n+  if (!gimple_call_builtin_p (gsi_stmt (gsi), BUILT_IN_UNREACHABLE))\n+    return false;\n+\n+  for (gsi_prev (&gsi); !gsi_end_p (gsi); gsi_prev (&gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      if (gimple_code (stmt) != GIMPLE_LABEL\n+\t  && !is_gimple_debug (stmt)\n+\t  && !gimple_clobber_p (stmt))\n+      return false;\n+    }\n+  return true;\n+}\n+\n /* Returns true for edge E where e->src ends with a GIMPLE_COND and\n    the other edge points to a bb with just __builtin_unreachable ().\n    I.e. return true for C->M edge in:\n@@ -476,22 +501,7 @@ assert_unreachable_fallthru_edge_p (edge e)\n       if (other_bb == e->dest)\n \tother_bb = EDGE_SUCC (pred_bb, 1)->dest;\n       if (EDGE_COUNT (other_bb->succs) == 0)\n-\t{\n-\t  gimple_stmt_iterator gsi = gsi_after_labels (other_bb);\n-\t  gimple *stmt;\n-\n-\t  if (gsi_end_p (gsi))\n-\t    return false;\n-\t  stmt = gsi_stmt (gsi);\n-\t  while (is_gimple_debug (stmt) || gimple_clobber_p (stmt))\n-\t    {\n-\t      gsi_next (&gsi);\n-\t      if (gsi_end_p (gsi))\n-\t\treturn false;\n-\t      stmt = gsi_stmt (gsi);\n-\t    }\n-\t  return gimple_call_builtin_p (stmt, BUILT_IN_UNREACHABLE);\n-\t}\n+\treturn gimple_seq_unreachable_p (bb_seq (other_bb));\n     }\n   return false;\n }\n@@ -1668,9 +1678,11 @@ group_case_labels_stmt (gswitch *stmt)\n       gcc_assert (base_case);\n       base_bb = label_to_block (CASE_LABEL (base_case));\n \n-      /* Discard cases that have the same destination as the\n-\t default case.  */\n-      if (base_bb == default_bb)\n+      /* Discard cases that have the same destination as the default case\n+\t or if their destination block is unreachable.  */\n+      if (base_bb == default_bb\n+\t  || (EDGE_COUNT (base_bb->succs) == 0\n+\t      && gimple_seq_unreachable_p (bb_seq (base_bb))))\n \t{\n \t  gimple_switch_set_label (stmt, i, NULL_TREE);\n \t  i++;"}, {"sha": "a3af5a40567f1fc9967ce557133d55a41192f404", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -56,6 +56,7 @@ extern bool is_ctrl_stmt (gimple *);\n extern bool is_ctrl_altering_stmt (gimple *);\n extern bool simple_goto_p (gimple *);\n extern bool stmt_ends_bb_p (gimple *);\n+extern bool gimple_seq_unreachable_p (gimple_seq);\n extern bool assert_unreachable_fallthru_edge_p (edge);\n extern void delete_tree_cfg_annotations (function *);\n extern gphi *get_virtual_phi (basic_block);"}, {"sha": "80dcae5af1f4cc562dd54543fff6fa441261a987", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4d28516878755a01ab8c2ba48d083100aba3fb/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ca4d28516878755a01ab8c2ba48d083100aba3fb", "patch": "@@ -2715,7 +2715,8 @@ optimize_unreachable (gimple_stmt_iterator i)\n \t}\n       else\n \t{\n-\t  /* Todo: handle other cases, f.i. switch statement.  */\n+\t  /* Todo: handle other cases.  Note that unreachable switch case\n+\t     statements have already been removed.  */\n \t  continue;\n \t}\n "}]}