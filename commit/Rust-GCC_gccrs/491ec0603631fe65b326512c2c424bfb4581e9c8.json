{"sha": "491ec0603631fe65b326512c2c424bfb4581e9c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxZWMwNjAzNjMxZmU2NWIzMjY1MTJjMmM0MjRiZmI0NTgxZTljOA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-09-01T11:34:49Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-09-01T11:34:49Z"}, "message": "This patch adds legitimize_address_displacement hook so that stack accesses...\n\nThis patch adds legitimize_address_displacement hook so that stack accesses\nwith large offsets are split into a more efficient sequence.  Unaligned and\nTI/TFmode use a 256-byte range, byte and halfword accesses use a 4KB range,\nwider accesses use a 16KB range to maximise the available addressing range\nand increase opportunities to share the base address.\n\nint f(int x)\n{\n  int arr[8192];\n  arr[4096] = 0;\n  arr[6000] = 0;\n  arr[7000] = 0;\n  arr[8191] = 0;\n  return arr[x];\n}\n\nNow generates:\n\n  sub   sp, sp, #32768\n  add   x1, sp, 16384\n  str   wzr, [x1]\n  str   wzr, [x1, 7616]\n  str   wzr, [x1, 11616]\n  str   wzr, [x1, 16380]\n  ldr   w0, [sp, w0, sxtw 2]\n  add   sp, sp, 32768\n  ret\n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_legitimize_address_displacement):\n\tNew function.\n\t(TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT): Define.\n\nFrom-SVN: r239923", "tree": {"sha": "b02de5909c79bd9673638eac207a1c2a2d817c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b02de5909c79bd9673638eac207a1c2a2d817c11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/491ec0603631fe65b326512c2c424bfb4581e9c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491ec0603631fe65b326512c2c424bfb4581e9c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491ec0603631fe65b326512c2c424bfb4581e9c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491ec0603631fe65b326512c2c424bfb4581e9c8/comments", "author": null, "committer": null, "parents": [{"sha": "f79d87865b55f24f8a7dda9e0c3bb139247d7d21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79d87865b55f24f8a7dda9e0c3bb139247d7d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79d87865b55f24f8a7dda9e0c3bb139247d7d21"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "dca92035308f6a2bec92458fe0a604953b77c422", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491ec0603631fe65b326512c2c424bfb4581e9c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491ec0603631fe65b326512c2c424bfb4581e9c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=491ec0603631fe65b326512c2c424bfb4581e9c8", "patch": "@@ -1,3 +1,9 @@\n+2016-09-01  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_legitimize_address_displacement):\n+\tNew function.\n+\t(TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT): Define.\n+\n 2016-09-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (*ands<mode>_compare0): New pattern."}, {"sha": "5efad462f11f2954a65386b3b6b8d51bd61c51c1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491ec0603631fe65b326512c2c424bfb4581e9c8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491ec0603631fe65b326512c2c424bfb4581e9c8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=491ec0603631fe65b326512c2c424bfb4581e9c8", "patch": "@@ -4191,6 +4191,24 @@ aarch64_legitimate_address_p (machine_mode mode, rtx x,\n   return aarch64_classify_address (&addr, x, mode, outer_code, strict_p);\n }\n \n+/* Split an out-of-range address displacement into a base and offset.\n+   Use 4KB range for 1- and 2-byte accesses and a 16KB range otherwise\n+   to increase opportunities for sharing the base address of different sizes.\n+   For TI/TFmode and unaligned accesses use a 256-byte range.  */\n+static bool\n+aarch64_legitimize_address_displacement (rtx *disp, rtx *off, machine_mode mode)\n+{\n+  HOST_WIDE_INT mask = GET_MODE_SIZE (mode) < 4 ? 0xfff : 0x3fff;\n+\n+  if (mode == TImode || mode == TFmode ||\n+      (INTVAL (*disp) & (GET_MODE_SIZE (mode) - 1)) != 0)\n+    mask = 0xff;\n+\n+  *off = GEN_INT (INTVAL (*disp) & ~mask);\n+  *disp = GEN_INT (INTVAL (*disp) & mask);\n+  return true;\n+}\n+\n /* Return TRUE if rtx X is immediate constant 0.0 */\n bool\n aarch64_float_const_zero_rtx_p (rtx x)\n@@ -14135,6 +14153,10 @@ aarch64_optab_supported_p (int op, machine_mode mode1, machine_mode,\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P aarch64_legitimate_constant_p\n \n+#undef TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT\n+#define TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT \\\n+  aarch64_legitimize_address_displacement\n+\n #undef TARGET_LIBGCC_CMP_RETURN_MODE\n #define TARGET_LIBGCC_CMP_RETURN_MODE aarch64_libgcc_cmp_return_mode\n "}]}