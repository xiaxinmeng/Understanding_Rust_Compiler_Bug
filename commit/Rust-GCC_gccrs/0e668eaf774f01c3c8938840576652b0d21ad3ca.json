{"sha": "0e668eaf774f01c3c8938840576652b0d21ad3ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2NjhlYWY3NzRmMDFjM2M4OTM4ODQwNTc2NjUyYjBkMjFhZDNjYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-12-03T17:28:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-03T17:28:10Z"}, "message": "sanitizer.def: Add Address Sanitizer builtins.\n\n\t* sanitizer.def: Add Address Sanitizer builtins.\n\tRename BUILT_IN_TSAN_READ_* to BUILT_IN_TSAN_READ* and\n\tBUILT_IN_TSAN_WRITE_* to BUILT_IN_TSAN_WRITE*.\n\t* Makefile.in (asan.o): Depend on langhooks.h.\n\t(tsan.o): Depend on asan.h.\n\t* asan.h (initialize_sanitizer_builtins): New prototype.\n\t* asan.c: Include langhooks.h.\n\t(report_error_func): Use builtin_decl_implicit of corresponding\n\tBUILT_IN_ASAN_REPORT_{LOAD,STORE}*.\n\t(asan_init_func): Removed.\n\t(initialize_sanitizer_builtins): New function.\n\t(asan_finish_file): Call it.  Use builtin_decl_implicit\n\ton BUILT_IN_ASAN_{INIT,{,UN}REGISTER_GLOBALS}.\n\t(asan_instrument): Call initialize_sanitizer_builtins.\n\t* builtins.def (DEF_SANITIZER_BUILTIN): Change condition to\n\t(flag_asan || flag_tsan).\n\t* tsan.c: Include asan.h and tsan.h.\n\t(get_memory_access_decl): Rename BUILT_IN_TSAN_{READ,WRITE}_*\n\tto BUILT_IN_TSAN_{READ,WRITE}*.\n\t(tsan_pass): Call initialize_sanitizer_builtins.\n\t(tsan_gate, tsan_gate_O0): Don't check if\n\tbuiltin_decl_implicit_p (BUILT_IN_TSAN_INIT) is true.\n\t(tsan_finish_file): Call initialize_sanitizer_builtins.\n\t* builtin-types.def (BT_FN_VOID_PTR_PTRMODE): New fn type.\n\nFrom-SVN: r194103", "tree": {"sha": "55f4cd1c97e18b820a954968b02285db3ceae803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55f4cd1c97e18b820a954968b02285db3ceae803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e668eaf774f01c3c8938840576652b0d21ad3ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e668eaf774f01c3c8938840576652b0d21ad3ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e668eaf774f01c3c8938840576652b0d21ad3ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e668eaf774f01c3c8938840576652b0d21ad3ca/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f41e5bd19ddc48d291b01a270623c379568d325d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41e5bd19ddc48d291b01a270623c379568d325d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41e5bd19ddc48d291b01a270623c379568d325d"}], "stats": {"total": 249, "additions": 174, "deletions": 75}, "files": [{"sha": "8c7af76284cde221eace934e455ccf317cc7619b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e668eaf774f01c3c8938840576652b0d21ad3ca", "patch": "@@ -1,3 +1,30 @@\n+2012-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* sanitizer.def: Add Address Sanitizer builtins.\n+\tRename BUILT_IN_TSAN_READ_* to BUILT_IN_TSAN_READ* and\n+\tBUILT_IN_TSAN_WRITE_* to BUILT_IN_TSAN_WRITE*.\n+\t* Makefile.in (asan.o): Depend on langhooks.h.\n+\t(tsan.o): Depend on asan.h.\n+\t* asan.h (initialize_sanitizer_builtins): New prototype.\n+\t* asan.c: Include langhooks.h.\n+\t(report_error_func): Use builtin_decl_implicit of corresponding\n+\tBUILT_IN_ASAN_REPORT_{LOAD,STORE}*.\n+\t(asan_init_func): Removed.\n+\t(initialize_sanitizer_builtins): New function.\n+\t(asan_finish_file): Call it.  Use builtin_decl_implicit\n+\ton BUILT_IN_ASAN_{INIT,{,UN}REGISTER_GLOBALS}.\n+\t(asan_instrument): Call initialize_sanitizer_builtins.\n+\t* builtins.def (DEF_SANITIZER_BUILTIN): Change condition to\n+\t(flag_asan || flag_tsan).\n+\t* tsan.c: Include asan.h and tsan.h.\n+\t(get_memory_access_decl): Rename BUILT_IN_TSAN_{READ,WRITE}_*\n+\tto BUILT_IN_TSAN_{READ,WRITE}*.\n+\t(tsan_pass): Call initialize_sanitizer_builtins.\n+\t(tsan_gate, tsan_gate_O0): Don't check if\n+\tbuiltin_decl_implicit_p (BUILT_IN_TSAN_INIT) is true.\n+\t(tsan_finish_file): Call initialize_sanitizer_builtins.\n+\t* builtin-types.def (BT_FN_VOID_PTR_PTRMODE): New fn type.\n+\n 2012-12-03  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/55401"}, {"sha": "ebf9c563c31f9ef42bcc2f8a3f46eecc9918b516", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0e668eaf774f01c3c8938840576652b0d21ad3ca", "patch": "@@ -2228,13 +2228,13 @@ stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n asan.o : asan.c asan.h $(CONFIG_H) $(SYSTEM_H) $(GIMPLE_H) \\\n    output.h coretypes.h $(GIMPLE_PRETTY_PRINT_H) \\\n    tree-iterator.h $(TREE_FLOW_H) $(TREE_PASS_H) \\\n-   $(TARGET_H) $(EXPR_H) $(OPTABS_H) $(TM_P_H)\n+   $(TARGET_H) $(EXPR_H) $(OPTABS_H) $(TM_P_H) langhooks.h\n tsan.o : $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TREE_INLINE_H) \\\n    $(GIMPLE_H) $(DIAGNOSTIC_H) langhooks.h \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_PASS_H) $(CGRAPH_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) $(FLAGS_H) $(FUNCTION_H) \\\n    $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) tree-iterator.h \\\n-   intl.h cfghooks.h output.h options.h c-family/c-common.h tsan.h\n+   intl.h cfghooks.h output.h options.h c-family/c-common.h tsan.h asan.h\n tree-ssa-tail-merge.o: tree-ssa-tail-merge.c \\\n    $(SYSTEM_H) $(CONFIG_H) coretypes.h $(TM_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(TM_P_H) $(BASIC_BLOCK_H) \\"}, {"sha": "221649ca1a7e32369d1e50162d965ff267821fdf", "filename": "gcc/asan.c", "status": "modified", "additions": 54, "deletions": 44, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=0e668eaf774f01c3c8938840576652b0d21ad3ca", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n+#include \"langhooks.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average.\n@@ -485,38 +486,16 @@ asan_protect_global (tree decl)\n static tree\n report_error_func (bool is_store, int size_in_bytes)\n {\n-  tree fn_type;\n-  tree def;\n-  char name[100];\n-\n-  sprintf (name, \"__asan_report_%s%d\",\n-\t   is_store ? \"store\" : \"load\", size_in_bytes);\n-  fn_type = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  def = build_fn_decl (name, fn_type);\n-  TREE_NOTHROW (def) = 1;\n-  DECL_IGNORED_P (def) = 1;\n-  TREE_THIS_VOLATILE (def) = 1;  /* Attribute noreturn. Surprise!  */\n-  DECL_ATTRIBUTES (def) = tree_cons (get_identifier (\"leaf\"),\n-\t\t\t\t     NULL, DECL_ATTRIBUTES (def));\n-  return def;\n+  static enum built_in_function report[2][5]\n+    = { { BUILT_IN_ASAN_REPORT_LOAD1, BUILT_IN_ASAN_REPORT_LOAD2,\n+\t  BUILT_IN_ASAN_REPORT_LOAD4, BUILT_IN_ASAN_REPORT_LOAD8,\n+\t  BUILT_IN_ASAN_REPORT_LOAD16 },\n+\t{ BUILT_IN_ASAN_REPORT_STORE1, BUILT_IN_ASAN_REPORT_STORE2,\n+\t  BUILT_IN_ASAN_REPORT_STORE4, BUILT_IN_ASAN_REPORT_STORE8,\n+\t  BUILT_IN_ASAN_REPORT_STORE16 } };\n+  return builtin_decl_implicit (report[is_store][exact_log2 (size_in_bytes)]);\n }\n \n-/* Construct a function tree for __asan_init().  */\n-\n-static tree\n-asan_init_func (void)\n-{\n-  tree fn_type;\n-  tree def;\n-\n-  fn_type = build_function_type_list (void_type_node, NULL_TREE);\n-  def = build_fn_decl (\"__asan_init\", fn_type);\n-  TREE_NOTHROW (def) = 1;\n-  DECL_IGNORED_P (def) = 1;\n-  return def;\n-}\n-\n-\n #define PROB_VERY_UNLIKELY\t(REG_BR_PROB_BASE / 2000 - 1)\n #define PROB_ALWAYS\t\t(REG_BR_PROB_BASE)\n \n@@ -1510,6 +1489,38 @@ asan_add_global (tree decl, tree type, vec<constructor_elt, va_gc> *v)\n   CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, init);\n }\n \n+/* Initialize sanitizer.def builtins if the FE hasn't initialized them.  */\n+void\n+initialize_sanitizer_builtins (void)\n+{\n+  tree decl;\n+\n+  if (builtin_decl_implicit_p (BUILT_IN_ASAN_INIT))\n+    return;\n+\n+  tree BT_FN_VOID = build_function_type_list (void_type_node, NULL_TREE);\n+  tree BT_FN_VOID_PTR\n+    = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n+  tree BT_FN_VOID_PTR_PTRMODE\n+    = build_function_type_list (void_type_node, ptr_type_node,\n+\t\t\t\tbuild_nonstandard_integer_type (POINTER_SIZE,\n+\t\t\t\t\t\t\t\t1), NULL_TREE);\n+#undef ATTR_NOTHROW_LEAF_LIST\n+#define ATTR_NOTHROW_LEAF_LIST ECF_NOTHROW | ECF_LEAF\n+#undef ATTR_NORETURN_NOTHROW_LEAF_LIST\n+#define ATTR_NORETURN_NOTHROW_LEAF_LIST ECF_NORETURN | ATTR_NOTHROW_LEAF_LIST\n+#undef DEF_SANITIZER_BUILTIN\n+#define DEF_SANITIZER_BUILTIN(ENUM, NAME, TYPE, ATTRS) \\\n+  decl = add_builtin_function (\"__builtin_\" NAME, TYPE, ENUM,\t\t\\\n+\t\t\t       BUILT_IN_NORMAL, NAME, NULL_TREE);\t\\\n+  set_call_expr_flags (decl, ATTRS);\t\t\t\t\t\\\n+  set_builtin_decl (ENUM, decl, true);\n+\n+#include \"sanitizer.def\"\n+\n+#undef DEF_SANITIZER_BUILTIN\n+}\n+\n /* Needs to be GTY(()), because cgraph_build_static_cdtor may\n    invoke ggc_collect.  */\n static GTY(()) tree asan_ctor_statements;\n@@ -1525,14 +1536,16 @@ asan_finish_file (void)\n   struct varpool_node *vnode;\n   unsigned HOST_WIDE_INT gcount = 0;\n \n-  append_to_statement_list (build_call_expr (asan_init_func (), 0),\n-\t\t\t    &asan_ctor_statements);\n+  initialize_sanitizer_builtins ();\n+\n+  tree fn = builtin_decl_implicit (BUILT_IN_ASAN_INIT);\n+  append_to_statement_list (build_call_expr (fn, 0), &asan_ctor_statements);\n   FOR_EACH_DEFINED_VARIABLE (vnode)\n     if (asan_protect_global (vnode->symbol.decl))\n       ++gcount;\n   if (gcount)\n     {\n-      tree type = asan_global_struct (), var, ctor, decl;\n+      tree type = asan_global_struct (), var, ctor;\n       tree uptr = build_nonstandard_integer_type (POINTER_SIZE, 1);\n       tree dtor_statements = NULL_TREE;\n       vec<constructor_elt, va_gc> *v;\n@@ -1556,20 +1569,14 @@ asan_finish_file (void)\n       DECL_INITIAL (var) = ctor;\n       varpool_assemble_decl (varpool_node_for_decl (var));\n \n-      type = build_function_type_list (void_type_node, ptr_type_node,\n-\t\t\t\t       uptr, NULL_TREE);\n-      decl = build_fn_decl (\"__asan_register_globals\", type);\n-      TREE_NOTHROW (decl) = 1;\n-      DECL_IGNORED_P (decl) = 1;\n-      append_to_statement_list (build_call_expr (decl, 2,\n+      fn = builtin_decl_implicit (BUILT_IN_ASAN_REGISTER_GLOBALS);\n+      append_to_statement_list (build_call_expr (fn, 2,\n \t\t\t\t\t\t build_fold_addr_expr (var),\n \t\t\t\t\t\t build_int_cst (uptr, gcount)),\n \t\t\t\t&asan_ctor_statements);\n \n-      decl = build_fn_decl (\"__asan_unregister_globals\", type);\n-      TREE_NOTHROW (decl) = 1;\n-      DECL_IGNORED_P (decl) = 1;\n-      append_to_statement_list (build_call_expr (decl, 2,\n+      fn = builtin_decl_implicit (BUILT_IN_ASAN_UNREGISTER_GLOBALS);\n+      append_to_statement_list (build_call_expr (fn, 2,\n \t\t\t\t\t\t build_fold_addr_expr (var),\n \t\t\t\t\t\t build_int_cst (uptr, gcount)),\n \t\t\t\t&dtor_statements);\n@@ -1600,7 +1607,10 @@ static unsigned int\n asan_instrument (void)\n {\n   if (shadow_ptr_types[0] == NULL_TREE)\n-    asan_init_shadow_ptr_types ();\n+    {\n+      asan_init_shadow_ptr_types ();\n+      initialize_sanitizer_builtins ();\n+    }\n   transform_statements ();\n   return 0;\n }"}, {"sha": "36f2f4335ba07069677f0a304523a241b59dc42c", "filename": "gcc/asan.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=0e668eaf774f01c3c8938840576652b0d21ad3ca", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n extern void asan_finish_file (void);\n extern rtx asan_emit_stack_protection (rtx, HOST_WIDE_INT *, tree *, int);\n extern bool asan_protect_global (tree);\n+extern void initialize_sanitizer_builtins (void);\n \n /* Alias set for accessing the shadow memory.  */\n extern alias_set_type asan_shadow_set;"}, {"sha": "1d18cdaf9b5cd88a7dda7a953e42321856f7dfd4", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=0e668eaf774f01c3c8938840576652b0d21ad3ca", "patch": "@@ -253,6 +253,8 @@ DEF_FUNCTION_TYPE_2 (BT_FN_INT_INT_FILEPTR,\n \t\t     BT_INT, BT_INT, BT_FILEPTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTRMODE_PTR,\n \t\t     BT_VOID, BT_PTRMODE, BT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_PTRMODE,\n+\t\t     BT_VOID, BT_PTR, BT_PTRMODE)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_VALIST_REF_VALIST_ARG,\n \t\t     BT_VOID, BT_VALIST_REF, BT_VALIST_ARG)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONG_LONG_LONG,"}, {"sha": "9f0692d2c3fe5fea9aaa672cbf36b7fb59f24cc5", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=0e668eaf774f01c3c8938840576652b0d21ad3ca", "patch": "@@ -156,7 +156,7 @@ along with GCC; see the file COPYING3.  If not see\n #define DEF_SANITIZER_BUILTIN(ENUM, NAME, TYPE, ATTRS) \\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\\n \t       true, true, true, ATTRS, true, \\\n-\t       flag_tsan)\n+\t       (flag_asan || flag_tsan))\n \n /* Define an attribute list for math functions that are normally\n    \"impure\" because some of them may write into global memory for"}, {"sha": "c2ee9729f12b7318b359ae0d3346c9b80ad1a7e2", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 69, "deletions": 10, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=0e668eaf774f01c3c8938840576652b0d21ad3ca", "patch": "@@ -1,3 +1,62 @@\n+/* This file contains the definitions and documentation for the\n+   Address Sanitizer and Thread Sanitizer builtins used in the GNU compiler.\n+   Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Before including this file, you should define a macro:\n+\n+     DEF_SANITIZER_BUILTIN (ENUM, NAME, TYPE, ATTRS)\n+\n+   See builtins.def for details.\n+   The builtins are created by the C-family of FEs in c-family/c-common.c,\n+   for other FEs by asan.c.  */\n+\n+/* Address Sanitizer */\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_INIT, \"__asan_init\",\n+\t\t      BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD1, \"__asan_report_load1\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD2, \"__asan_report_load2\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD4, \"__asan_report_load4\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD8, \"__asan_report_load8\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_LOAD16, \"__asan_report_load16\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE1, \"__asan_report_store1\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE2, \"__asan_report_store2\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE4, \"__asan_report_store4\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE8, \"__asan_report_store8\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REPORT_STORE16, \"__asan_report_store16\",\n+\t\t      BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_REGISTER_GLOBALS,\n+\t\t      \"__asan_register_globals\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_UNREGISTER_GLOBALS,\n+\t\t      \"__asan_unregister_globals\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n+\n+/* Thread Sanitizer */\n DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_INIT, \"__tsan_init\", \n \t\t      BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_FUNC_ENTRY, \"__tsan_func_entry\",\n@@ -6,23 +65,23 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_FUNC_EXIT, \"__tsan_func_exit\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_VPTR_UPDATE, \"__tsan_vptr_update\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ_1, \"__tsan_read1\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ1, \"__tsan_read1\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ_2, \"__tsan_read2\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ2, \"__tsan_read2\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ_4, \"__tsan_read4\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ4, \"__tsan_read4\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ_8, \"__tsan_read8\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ8, \"__tsan_read8\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ_16, \"__tsan_read16\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_READ16, \"__tsan_read16\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE_1, \"__tsan_write1\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE1, \"__tsan_write1\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE_2, \"__tsan_write2\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE2, \"__tsan_write2\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE_4, \"__tsan_write4\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE4, \"__tsan_write4\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE_8, \"__tsan_write8\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE8, \"__tsan_write8\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE_16, \"__tsan_write16\",\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE16, \"__tsan_write16\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)"}, {"sha": "4184d6a660928d92152d7cd648722fb04aec9d18", "filename": "gcc/tsan.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e668eaf774f01c3c8938840576652b0d21ad3ca/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=0e668eaf774f01c3c8938840576652b0d21ad3ca", "patch": "@@ -37,6 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"cgraph.h\"\n #include \"diagnostic.h\"\n+#include \"tsan.h\"\n+#include \"asan.h\"\n \n /* Number of instrumented memory accesses in the current function.  */\n \n@@ -49,20 +51,20 @@ get_memory_access_decl (bool is_write, unsigned size)\n   enum built_in_function fcode;\n \n   if (size <= 1)\n-    fcode = is_write ? BUILT_IN_TSAN_WRITE_1\n-\t\t     : BUILT_IN_TSAN_READ_1;\n+    fcode = is_write ? BUILT_IN_TSAN_WRITE1\n+\t\t     : BUILT_IN_TSAN_READ1;\n   else if (size <= 3)\n-    fcode = is_write ? BUILT_IN_TSAN_WRITE_2\n-\t\t     : BUILT_IN_TSAN_READ_2;\n+    fcode = is_write ? BUILT_IN_TSAN_WRITE2\n+\t\t     : BUILT_IN_TSAN_READ2;\n   else if (size <= 7)\n-    fcode = is_write ? BUILT_IN_TSAN_WRITE_4\n-\t\t     : BUILT_IN_TSAN_READ_4;\n+    fcode = is_write ? BUILT_IN_TSAN_WRITE4\n+\t\t     : BUILT_IN_TSAN_READ4;\n   else if (size <= 15)\n-    fcode = is_write ? BUILT_IN_TSAN_WRITE_8\n-\t\t     : BUILT_IN_TSAN_READ_8;\n+    fcode = is_write ? BUILT_IN_TSAN_WRITE8\n+\t\t     : BUILT_IN_TSAN_READ8;\n   else\n-    fcode = is_write ? BUILT_IN_TSAN_WRITE_16\n-\t\t     : BUILT_IN_TSAN_READ_16;\n+    fcode = is_write ? BUILT_IN_TSAN_WRITE16\n+\t\t     : BUILT_IN_TSAN_READ16;\n \n   return builtin_decl_implicit (fcode);\n }\n@@ -285,6 +287,7 @@ instrument_func_exit (void)\n static unsigned\n tsan_pass (void)\n {\n+  initialize_sanitizer_builtins ();\n   if (instrument_memory_accesses ())\n     {\n       instrument_func_entry ();\n@@ -298,20 +301,18 @@ tsan_pass (void)\n static bool\n tsan_gate (void)\n {\n-  return flag_tsan != 0\n-\t && builtin_decl_implicit_p (BUILT_IN_TSAN_INIT);\n+  return flag_tsan != 0;\n }\n \n /* Inserts __tsan_init () into the list of CTORs.  */\n \n void\n tsan_finish_file (void)\n {\n-  tree ctor_statements;\n-  tree init_decl;\n+  tree ctor_statements = NULL_TREE;\n \n-  ctor_statements = NULL_TREE;\n-  init_decl = builtin_decl_implicit (BUILT_IN_TSAN_INIT);\n+  initialize_sanitizer_builtins ();\n+  tree init_decl = builtin_decl_implicit (BUILT_IN_TSAN_INIT);\n   append_to_statement_list (build_call_expr (init_decl, 0),\n \t\t\t    &ctor_statements);\n   cgraph_build_static_cdtor ('I', ctor_statements,\n@@ -343,8 +344,7 @@ struct gimple_opt_pass pass_tsan =\n static bool\n tsan_gate_O0 (void)\n {\n-  return flag_tsan != 0 && !optimize\n-\t && builtin_decl_implicit_p (BUILT_IN_TSAN_INIT);\n+  return flag_tsan != 0 && !optimize;\n }\n \n struct gimple_opt_pass pass_tsan_O0 ="}]}