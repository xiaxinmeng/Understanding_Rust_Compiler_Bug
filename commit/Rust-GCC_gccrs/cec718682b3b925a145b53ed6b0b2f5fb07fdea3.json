{"sha": "cec718682b3b925a145b53ed6b0b2f5fb07fdea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjNzE4NjgyYjNiOTI1YTE0NWI1M2VkNmIwYjJmNWZiMDdmZGVhMw==", "commit": {"author": {"name": "Chris Sears", "email": "cbsears_sf@yahoo.com", "date": "2002-01-12T00:19:05Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-12T00:19:05Z"}, "message": "interpret.cc (NULLARRAYCHECK): New macro.\n\n2002-01-11  Chris Sears  <cbsears_sf@yahoo.com>\n\n\t* interpret.cc (NULLARRAYCHECK): New macro.\n\t(SAVE_PC): Just store `pc'.\n\t(find_exception): Subtract one from `pc' here.\n\t(continue1) [insn_iaload, insn_laload, insn_faload, insn_daload,\n\tinsn_aaload, insn_baload, insn_caload, insn_saload, insn_iastore,\n\tinsn_lastore, insn_fastore, insn_dastore, insn_aastore,\n\tinsn_bastore, insn_castore, insn_sastore]: Use NULLARRAYCHECK, and\n\tdon't call SAVE_PC.\n\t(continue1) [insn_fdiv, insn_ddiv, insn_frem, insn_drem]: Don't\n\tcall SAVE_PC.\n\nFrom-SVN: r48787", "tree": {"sha": "2cfdf898457ddc7727902d4e65c193a35fe8803a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cfdf898457ddc7727902d4e65c193a35fe8803a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cec718682b3b925a145b53ed6b0b2f5fb07fdea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec718682b3b925a145b53ed6b0b2f5fb07fdea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec718682b3b925a145b53ed6b0b2f5fb07fdea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec718682b3b925a145b53ed6b0b2f5fb07fdea3/comments", "author": null, "committer": null, "parents": [{"sha": "0b0d4c5b3ae9aa6a82e08742a542095f193383ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0d4c5b3ae9aa6a82e08742a542095f193383ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0d4c5b3ae9aa6a82e08742a542095f193383ea"}], "stats": {"total": 79, "additions": 38, "deletions": 41}, "files": [{"sha": "9a1d3c44c7f398f85a5560fff19977a1aea15ec8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec718682b3b925a145b53ed6b0b2f5fb07fdea3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec718682b3b925a145b53ed6b0b2f5fb07fdea3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cec718682b3b925a145b53ed6b0b2f5fb07fdea3", "patch": "@@ -1,3 +1,16 @@\n+2002-01-11  Chris Sears  <cbsears_sf@yahoo.com>\n+\n+\t* interpret.cc (NULLARRAYCHECK): New macro.\n+\t(SAVE_PC): Just store `pc'.\n+\t(find_exception): Subtract one from `pc' here.\n+\t(continue1) [insn_iaload, insn_laload, insn_faload, insn_daload,\n+\tinsn_aaload, insn_baload, insn_caload, insn_saload, insn_iastore,\n+\tinsn_lastore, insn_fastore, insn_dastore, insn_aastore,\n+\tinsn_bastore, insn_castore, insn_sastore]: Use NULLARRAYCHECK, and\n+\tdon't call SAVE_PC.\n+\t(continue1) [insn_fdiv, insn_ddiv, insn_frem, insn_drem]: Don't\n+\tcall SAVE_PC.\n+\n 2002-01-11  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natSystem.cc (init_properties): Only look for default"}, {"sha": "7a847c5c363b66341cbd610d698a6427917a3bc3", "filename": "libjava/interpret.cc", "status": "modified", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec718682b3b925a145b53ed6b0b2f5fb07fdea3/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec718682b3b925a145b53ed6b0b2f5fb07fdea3/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=cec718682b3b925a145b53ed6b0b2f5fb07fdea3", "patch": "@@ -182,9 +182,12 @@ static jint get4(unsigned char* loc) {\n \n #ifdef HANDLE_SEGV\n #define NULLCHECK(X) \n+#define NULLARRAYCHECK(X) do { SAVE_PC; } while (0)\n #else\n #define NULLCHECK(X) \\\n   do { if ((X)==NULL) throw_null_pointer_exception (); } while (0)\n+#define NULLARRAYCHECK(X) \\\n+  do { if ((X)==NULL) { SAVE_PC; throw_null_pointer_exception (); } } while (0)\n #endif\n \n #define ARRAYBOUNDSCHECK(array, index)\t\t\t\t\t      \\\n@@ -298,10 +301,14 @@ _Jv_InterpMethod::run (ffi_cif* cif,\n   return ex;\n }\n \n+#define SAVE_PC   inv->pc = pc\n+\n bool _Jv_InterpMethod::find_exception (jobject ex,\n \t\t\t\t       _Jv_InterpMethodInvocation *inv)\n {\n-  int logical_pc = inv->pc - bytecode ();\n+  // We subtract one because the PC was incremented before it was\n+  // saved.\n+  int logical_pc = inv->pc - 1 - bytecode ();\n   _Jv_InterpException *exc = exceptions ();\n   jclass exc_class = ex->getClass ();\n \n@@ -622,8 +629,6 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n     INSN_LABEL(jsr_w),\n   };\n \n-#define SAVE_PC   inv->pc = pc-1\n-\n   /* If the macro INLINE_SWITCH is not defined, then the main loop\n      operates as one big (normal) switch statement.  If it is defined,\n      then the case selection is performed `inline' in the end of the\n@@ -960,88 +965,80 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       NEXT_INSN;\n \n      insn_iaload:\n-      SAVE_PC;\n       {\n \tjint index = POPI();\n \tjintArray arr = (jintArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \tPUSHI( elements(arr)[index] );\n       }\n       NEXT_INSN;\n \n      insn_laload:\n-      SAVE_PC;\n       {\n \tjint index = POPI();\n \tjlongArray arr = (jlongArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \tPUSHL( elements(arr)[index] );\n       }\n       NEXT_INSN;\n \n      insn_faload:\n-      SAVE_PC;\n       {\n \tjint index = POPI();\n \tjfloatArray arr = (jfloatArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \tPUSHF( elements(arr)[index] );\n       }\n       NEXT_INSN;\n \n      insn_daload:\n-      SAVE_PC;\n       {\n \tjint index = POPI();\n \tjdoubleArray arr = (jdoubleArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \tPUSHD( elements(arr)[index] );\n       }\n       NEXT_INSN;\n \n      insn_aaload:\n-      SAVE_PC;\n       {\n \tjint index = POPI();\n \tjobjectArray arr = (jobjectArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \tPUSHA( elements(arr)[index] );\n       }\n       NEXT_INSN;\n \n      insn_baload:\n-      SAVE_PC;\n       {\n \tjint index = POPI();\n \tjbyteArray arr = (jbyteArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \tPUSHI( elements(arr)[index] );\n       }\n       NEXT_INSN;\n \n      insn_caload:\n-      SAVE_PC;\n       {\n \tjint index = POPI();\n \tjcharArray arr = (jcharArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \tPUSHI( elements(arr)[index] );\n       }\n       NEXT_INSN;\n \n      insn_saload:\n-      SAVE_PC;\n       {\n \tjint index = POPI();\n \tjshortArray arr = (jshortArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \tPUSHI( elements(arr)[index] );\n       }\n@@ -1148,97 +1145,89 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       NEXT_INSN;\n \n      insn_iastore:\n-      SAVE_PC;\n       {\n \tjint value = POPI();\n \tjint index  = POPI();\n \tjintArray arr = (jintArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n \n      insn_lastore:\n-      SAVE_PC;\n       {\n \tjlong value = POPL();\n \tjint index  = POPI();\n \tjlongArray arr = (jlongArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n \n      insn_fastore:\n-      SAVE_PC;\n       {\n \tjfloat value = POPF();\n \tjint index  = POPI();\n \tjfloatArray arr = (jfloatArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n \n      insn_dastore:\n-      SAVE_PC;\n       {\n \tjdouble value = POPD();\n \tjint index  = POPI();\n \tjdoubleArray arr = (jdoubleArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n \n      insn_aastore:\n-      SAVE_PC;\n       {\n \tjobject value = POPA();\n \tjint index  = POPI();\n \tjobjectArray arr = (jobjectArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \t_Jv_CheckArrayStore (arr, value);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n \n      insn_bastore:\n-      SAVE_PC;\n       {\n \tjbyte value = (jbyte) POPI();\n \tjint index  = POPI();\n \tjbyteArray arr = (jbyteArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n \n      insn_castore:\n-      SAVE_PC;\n       {\n \tjchar value = (jchar) POPI();\n \tjint index  = POPI();\n \tjcharArray arr = (jcharArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n       NEXT_INSN;\n \n      insn_sastore:\n-      SAVE_PC;\n       {\n \tjshort value = (jshort) POPI();\n \tjint index  = POPI();\n \tjshortArray arr = (jshortArray) POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tARRAYBOUNDSCHECK (arr, index);\n \telements(arr)[index] = value;\n       }\n@@ -1357,7 +1346,6 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       NEXT_INSN;\n \n      insn_fdiv:\n-      SAVE_PC;\n       {\n \tjfloat value2 = POPF();\n \tjfloat value1 = POPF();\n@@ -1367,7 +1355,6 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       NEXT_INSN;\n \n      insn_ddiv:\n-      SAVE_PC;\n       {\n \tjdouble value2 = POPD();\n \tjdouble value1 = POPD();\n@@ -1397,7 +1384,6 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       NEXT_INSN;\n \n      insn_frem:\n-      SAVE_PC;\n       {\n \tjfloat value2 = POPF();\n \tjfloat value1 = POPF();\n@@ -1407,7 +1393,6 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       NEXT_INSN;\n \n      insn_drem:\n-      SAVE_PC;\n       {\n \tjdouble value2 = POPD();\n \tjdouble value1 = POPD();\n@@ -2185,10 +2170,9 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       NEXT_INSN;\n \n      insn_arraylength:\n-      SAVE_PC;\n       {\n \t__JArray *arr = (__JArray*)POPA();\n-\tNULLCHECK (arr);\n+\tNULLARRAYCHECK (arr);\n \tPUSHI (arr->length);\n       }\n       NEXT_INSN;"}]}