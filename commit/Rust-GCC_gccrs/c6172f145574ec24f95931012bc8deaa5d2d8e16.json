{"sha": "c6172f145574ec24f95931012bc8deaa5d2d8e16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxNzJmMTQ1NTc0ZWMyNGY5NTkzMTAxMmJjOGRlYWE1ZDJkOGUxNg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-05-28T09:17:46Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-05-28T09:17:46Z"}, "message": "sparc.md (cpu): Tidy.\n\n2002-05-28  David S. Miller  <davem@redhat.com>\n\n\t* config/sparc/sparc.md (cpu): Tidy.\n\t(type): Delete 'return', add 'ialuX', 'flushw', 'iflush', and\n\t'trap'.\n\t(in_call_delay): Delete reference to 'return' type.\n\t(eligible_for_return_delay, in_return_delay, define_delay\n\treferencing those): Delete.\n\t(rest of file): Use new type attributes as appropriate.\n\t* config/sparc/sparc-protos.h (eligible_for_return_delay): Delete.\n\t* config/sparc/sparc.c (eligible_for_return_delay): Likewise.\n\t* config/sparc/ultra1_2.md (us1_single): New reservation.\n\t(us1_ialuX): Likewise.\n\t* config/sparc/ultra3.md (us3_single): Likewise.\n\t(us3_ialuX): Likewise.\n\t(us3_imul, us3_idiv): Tweak.\n\nFrom-SVN: r53953", "tree": {"sha": "51941649e57799feb2e4309bd0161a1f60b75687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51941649e57799feb2e4309bd0161a1f60b75687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6172f145574ec24f95931012bc8deaa5d2d8e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6172f145574ec24f95931012bc8deaa5d2d8e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6172f145574ec24f95931012bc8deaa5d2d8e16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6172f145574ec24f95931012bc8deaa5d2d8e16/comments", "author": null, "committer": null, "parents": [{"sha": "34a6c2ec1324e358a2f132e1069dc2da98300b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a6c2ec1324e358a2f132e1069dc2da98300b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a6c2ec1324e358a2f132e1069dc2da98300b86"}], "stats": {"total": 155, "additions": 90, "deletions": 65}, "files": [{"sha": "f7a4c6040e7ee27eff0c274949af94337f2becb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6172f145574ec24f95931012bc8deaa5d2d8e16", "patch": "@@ -1,3 +1,20 @@\n+2002-05-28  David S. Miller  <davem@redhat.com>\n+\n+\t* config/sparc/sparc.md (cpu): Tidy.\n+\t(type): Delete 'return', add 'ialuX', 'flushw', 'iflush', and\n+\t'trap'.\n+\t(in_call_delay): Delete reference to 'return' type.\n+\t(eligible_for_return_delay, in_return_delay, define_delay\n+\treferencing those): Delete.\n+\t(rest of file): Use new type attributes as appropriate.\n+\t* config/sparc/sparc-protos.h (eligible_for_return_delay): Delete.\n+\t* config/sparc/sparc.c (eligible_for_return_delay): Likewise.\n+\t* config/sparc/ultra1_2.md (us1_single): New reservation.\n+\t(us1_ialuX): Likewise.\n+\t* config/sparc/ultra3.md (us3_single): Likewise.\n+\t(us3_ialuX): Likewise.\n+\t(us3_imul, us3_idiv): Tweak.\n+\t\n 2002-05-28  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (alpha_in_small_data_p): Return false for"}, {"sha": "6a1c3c298abcd3dccbb87f757cba98c2817b6f06", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=c6172f145574ec24f95931012bc8deaa5d2d8e16", "patch": "@@ -102,7 +102,6 @@ extern int fp_zero_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n extern int empty_delay_slot PARAMS ((rtx));\n extern int eligible_for_epilogue_delay PARAMS ((rtx, int));\n-extern int eligible_for_return_delay PARAMS ((rtx));\n extern int eligible_for_sibcall_delay PARAMS ((rtx));\n extern int emit_move_sequence PARAMS ((rtx, enum machine_mode));\n extern int fp_sethi_p PARAMS ((rtx));"}, {"sha": "a43f48bd0f99b816cf585385fc90c0f8a2aebe7f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c6172f145574ec24f95931012bc8deaa5d2d8e16", "patch": "@@ -3065,17 +3065,6 @@ check_return_regs (x)\n \n }\n \n-/* Return 1 if TRIAL references only in and global registers.  */\n-int\n-eligible_for_return_delay (trial)\n-     rtx trial;\n-{\n-  if (GET_CODE (PATTERN (trial)) != SET)\n-    return 0;\n-\n-  return check_return_regs (PATTERN (trial));\n-}\n-\n int\n short_branch (uid1, uid2)\n      int uid1, uid2;"}, {"sha": "193d6a97899b38666d5304aa3132f17d6edfe26c", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c6172f145574ec24f95931012bc8deaa5d2d8e16", "patch": "@@ -57,7 +57,17 @@\n \n ;; Attribute for cpu type.\n ;; These must match the values for enum processor_type in sparc.h.\n-(define_attr \"cpu\" \"v7,cypress,v8,supersparc,sparclite,f930,f934,hypersparc,sparclite86x,sparclet,tsc701,v9,ultrasparc,ultrasparc3\"\n+(define_attr \"cpu\"\n+  \"v7,\n+   cypress,\n+   v8,\n+   supersparc,\n+   sparclite,f930,f934,\n+   hypersparc,sparclite86x,\n+   sparclet,tsc701,\n+   v9,\n+   ultrasparc,\n+   ultrasparc3\"\n   (const (symbol_ref \"sparc_cpu_attr\")))\n \n ;; Attribute for the instruction set.\n@@ -79,7 +89,19 @@\n ;; Insn type.\n \n (define_attr \"type\"\n-  \"ialu,compare,shift,load,sload,store,uncond_branch,branch,call,sibcall,call_no_delay_slot,return,imul,idiv,fpload,fpstore,fp,fpmove,fpcmove,fpcrmove,fpcmp,fpmul,fpdivs,fpdivd,fpsqrts,fpsqrtd,cmove,multi,misc\"\n+  \"ialu,compare,shift,\n+   load,sload,store,\n+   uncond_branch,branch,call,sibcall,call_no_delay_slot,\n+   imul,idiv,\n+   fpload,fpstore,\n+   fp,fpmove,\n+   fpcmove,fpcrmove,\n+   fpcmp,\n+   fpmul,fpdivs,fpdivd,\n+   fpsqrts,fpsqrtd,\n+   cmove,\n+   ialuX,\n+   multi,flushw,iflush,trap\"\n   (const_string \"ialu\"))\n \n ;; true if branch/call has empty delay slot and will emit a nop in it\n@@ -168,7 +190,7 @@\n ;; Attributes for instruction and branch scheduling\n \n (define_attr \"in_call_delay\" \"false,true\"\n-  (cond [(eq_attr \"type\" \"uncond_branch,branch,call,sibcall,call_no_delay_slot,return,multi\")\n+  (cond [(eq_attr \"type\" \"uncond_branch,branch,call,sibcall,call_no_delay_slot,multi\")\n \t \t(const_string \"false\")\n \t (eq_attr \"type\" \"load,fpload,store,fpstore\")\n \t \t(if_then_else (eq_attr \"length\" \"1\")\n@@ -190,21 +212,6 @@\n (define_attr \"leaf_function\" \"false,true\"\n   (const (symbol_ref \"current_function_uses_only_leaf_regs\")))\n \n-(define_attr \"eligible_for_return_delay\" \"false,true\"\n-  (symbol_ref \"eligible_for_return_delay (insn)\"))\n-\n-(define_attr \"in_return_delay\" \"false,true\"\n-  (if_then_else (and (and (and (eq_attr \"type\" \"ialu,load,sload,store\")\n-\t\t\t       (eq_attr \"length\" \"1\"))\n-\t\t\t  (eq_attr \"leaf_function\" \"false\"))\n-\t\t     (eq_attr \"eligible_for_return_delay\" \"false\"))\n-\t\t(const_string \"true\")\n-\t\t(const_string \"false\")))\n-\n-(define_delay (and (eq_attr \"type\" \"return\")\n-\t\t   (eq_attr \"isa\" \"v9\"))\n-  [(eq_attr \"in_return_delay\" \"true\") (nil) (nil)])\n-\n ;; ??? Should implement the notion of predelay slots for floating point\n ;; branches.  This would allow us to remove the nop always inserted before\n ;; a floating point branch.\n@@ -1170,14 +1177,14 @@\n \t(ltu:SI (reg:CC 100) (const_int 0)))]\n   \"\"\n   \"addx\\\\t%%g0, 0, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*neg_sltu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (ltu:SI (reg:CC 100) (const_int 0))))]\n   \"\"\n   \"subx\\\\t%%g0, 0, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n ;; ??? Combine should canonicalize these next two to the same pattern.\n (define_insn \"*neg_sltu_minus_x\"\n@@ -1186,29 +1193,29 @@\n \t\t  (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"subx\\\\t%%g0, %1, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*neg_sltu_plus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n \t\t\t (match_operand:SI 1 \"arith_operand\" \"rI\"))))]\n   \"\"\n   \"subx\\\\t%%g0, %1, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(geu:SI (reg:CC 100) (const_int 0)))]\n   \"\"\n   \"subx\\\\t%%g0, -1, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*neg_sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (geu:SI (reg:CC 100) (const_int 0))))]\n   \"\"\n   \"addx\\\\t%%g0, -1, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n ;; We can also do (x + ((unsigned) i >= 0)) and related, so put them in.\n ;; ??? The addx/subx insns use the 32 bit carry flag so there are no DImode\n@@ -1220,7 +1227,7 @@\n \t\t (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"addx\\\\t%%g0, %1, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*sltu_plus_x_plus_y\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1229,15 +1236,15 @@\n \t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n   \"\"\n   \"addx\\\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*x_minus_sltu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (ltu:SI (reg:CC 100) (const_int 0))))]\n   \"\"\n   \"subx\\\\t%1, 0, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n ;; ??? Combine should canonicalize these next two to the same pattern.\n (define_insn \"*x_minus_y_minus_sltu\"\n@@ -1247,7 +1254,7 @@\n \t\t  (ltu:SI (reg:CC 100) (const_int 0))))]\n   \"\"\n   \"subx\\\\t%r1, %2, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*x_minus_sltu_plus_y\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1256,23 +1263,23 @@\n \t\t\t   (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n   \"\"\n   \"subx\\\\t%r1, %2, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*sgeu_plus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (geu:SI (reg:CC 100) (const_int 0))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"subx\\\\t%1, -1, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*x_minus_sgeu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (geu:SI (reg:CC 100) (const_int 0))))]\n   \"\"\n   \"addx\\\\t%1, -1, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -1780,13 +1787,6 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"3\")])\n \n-;; Currently unused...\n-;; (define_insn \"get_pc_via_rdpc\"\n-;;   [(set (match_operand 0 \"register_operand\" \"=r\") (pc))]\n-;;   \"TARGET_V9\"\n-;;   \"rd\\\\t%%pc, %0\"\n-;;   [(set_attr \"type\" \"misc\")])\n-\n \f\n ;; Move instructions\n \n@@ -5061,7 +5061,7 @@\n \t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n   \"\"\n   \"addx\\\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*addx_extend_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5091,7 +5091,7 @@\n                                  (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n   \"TARGET_ARCH64\"\n   \"addx\\\\t%r1, %2, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"subx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -5100,7 +5100,7 @@\n \t\t  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n   \"\"\n   \"subx\\\\t%r1, %2, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*subx_extend_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5109,7 +5109,7 @@\n                                   (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n   \"TARGET_ARCH64\"\n   \"subx\\\\t%r1, %2, %0\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*subx_extend\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -8126,7 +8126,7 @@\n   [(unspec_volatile [(const_int 0)] UNSPECV_FLUSHW)]\n   \"\"\n   \"* return TARGET_V9 ? \\\"flushw\\\" : \\\"ta\\\\t3\\\";\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"flushw\")])\n \n (define_insn \"goto_handler_and_restore\"\n   [(unspec_volatile [(match_operand 0 \"register_operand\" \"=r\")] UNSPECV_GOTO)]\n@@ -8189,7 +8189,7 @@\n \t   SPARC_STACK_BIAS + 15 * UNITS_PER_WORD);\n   return \\\"\\\";\n }\"\n-  [(set_attr \"type\" \"misc\")\n+  [(set_attr \"type\" \"multi\")\n    (set (attr \"length\") (if_then_else (eq_attr \"pic\" \"true\")\n \t\t\t\t       (const_int 4)\n \t\t\t\t       (const_int 3)))])\n@@ -8245,13 +8245,13 @@\n   [(unspec_volatile [(match_operand:SI 0 \"memory_operand\" \"m\")] UNSPECV_FLUSH)]\n   \"\"\n   \"* return TARGET_V9 ? \\\"flush\\\\t%f0\\\" : \\\"iflush\\\\t%f0\\\";\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"iflush\")])\n \n (define_insn \"flushdi\"\n   [(unspec_volatile [(match_operand:DI 0 \"memory_operand\" \"m\")] UNSPECV_FLUSH)]\n   \"\"\n   \"* return TARGET_V9 ? \\\"flush\\\\t%f0\\\" : \\\"iflush\\\\t%f0\\\";\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"iflush\")])\n \n \f\n ;; find first set.\n@@ -8750,7 +8750,7 @@\n   [(trap_if (const_int 1) (const_int 5))]\n   \"\"\n   \"ta\\\\t5\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"trap\")])\n \n (define_expand \"conditional_trap\"\n   [(trap_if (match_operator 0 \"noov_compare_op\"\n@@ -8766,11 +8766,11 @@\n \t    (match_operand:SI 1 \"arith_operand\" \"rM\"))]\n   \"\"\n   \"t%C0\\\\t%1\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"trap\")])\n \n (define_insn \"\"\n   [(trap_if (match_operator 0 \"noov_compare_op\" [(reg:CCX 100) (const_int 0)])\n \t    (match_operand:SI 1 \"arith_operand\" \"rM\"))]\n   \"TARGET_V9\"\n   \"t%C0\\\\t%%xcc, %1\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"trap\")])"}, {"sha": "84cbb4b622b30d9286f22925ac151fe72c1297c9", "filename": "gcc/config/sparc/ultra1_2.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra1_2.md?ref=c6172f145574ec24f95931012bc8deaa5d2d8e16", "patch": "@@ -78,6 +78,11 @@\n (absence_set \"us1_slot1\" \"us1_slot2,us1_slot3\")\n (absence_set \"us1_slot2\" \"us1_slot3\")\n \n+(define_insn_reservation \"us1_single\" 1\n+  (and (eq_attr \"cpu\" \"ultrasparc\")\n+    (eq_attr \"type\" \"multi,flushw,iflush,trap\"))\n+  \"us1_single_issue\")\n+\n (define_insn_reservation \"us1_simple_ieuN\" 1\n   (and (eq_attr \"cpu\" \"ultrasparc\")\n     (eq_attr \"type\" \"ialu\"))\n@@ -93,6 +98,11 @@\n     (eq_attr \"type\" \"compare\"))\n   \"us1_ieu1 + us1_slot012\")\n \n+(define_insn_reservation \"us1_ialuX\" 1\n+  (and (eq_attr \"cpu\" \"ultrasparc\")\n+    (eq_attr \"type\" \"ialuX\"))\n+  \"us1_single_issue\")\n+\n (define_insn_reservation \"us1_cmove\" 2\n   (and (eq_attr \"cpu\" \"ultrasparc\")\n     (eq_attr \"type\" \"cmove\"))"}, {"sha": "cebc9f2aa80af4d656e1399a351d319148de6193", "filename": "gcc/config/sparc/ultra3.md", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fultra3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6172f145574ec24f95931012bc8deaa5d2d8e16/gcc%2Fconfig%2Fsparc%2Fultra3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra3.md?ref=c6172f145574ec24f95931012bc8deaa5d2d8e16", "patch": "@@ -35,11 +35,21 @@\n (define_reservation \"us3_single_issue\" \"us3_slot0 + us3_slot1 + us3_slot2 + us3_slot3\")\n (define_reservation \"us3_ax\" \"(us3_a0 | us3_a1)\")\n \n+(define_insn_reservation \"us3_single\" 1\n+  (and (eq_attr \"cpu\" \"ultrasparc3\")\n+    (eq_attr \"type\" \"multi,flushw,iflush,trap\"))\n+  \"us3_single_issue\")\n+\n (define_insn_reservation \"us3_integer\" 1\n   (and (eq_attr \"cpu\" \"ultrasparc3\")\n     (eq_attr \"type\" \"ialu,shift,compare\"))\n   \"us3_ax + us3_slotany\")\n \n+(define_insn_reservation \"us3_ialuX\" 5\n+  (and (eq_attr \"cpu\" \"ultrasparc3\")\n+    (eq_attr \"type\" \"ialu,shift,compare\"))\n+  \"us3_single_issue*4, nothing\")\n+\n (define_insn_reservation \"us3_cmove\" 2\n   (and (eq_attr \"cpu\" \"ultrasparc3\")\n     (eq_attr \"type\" \"cmove\"))\n@@ -54,15 +64,15 @@\n ;; ??? here, but the variable cycles are not.\n ;; ??? Currently I have no idea how to determine the variability, but once\n ;; ??? known we can simply add a define_bypass or similar to model it.\n-(define_insn_reservation \"us3_imul\" 6\n+(define_insn_reservation \"us3_imul\" 7\n   (and (eq_attr \"cpu\" \"ultrasparc3\")\n     (eq_attr \"type\" \"imul\"))\n-  \"us3_ms + us3_slotany, us3_single_issue*5\")\n+  \"us3_ms + us3_slotany, us3_single_issue*4, nothing*2\")\n \n-(define_insn_reservation \"us3_idiv\" 71\n+(define_insn_reservation \"us3_idiv\" 72\n   (and (eq_attr \"cpu\" \"ultrasparc3\")\n     (eq_attr \"type\" \"idiv\"))\n-  \"us3_ms + us3_slotany, us3_single_issue*70\")\n+  \"us3_ms + us3_slotany, us3_single_issue*69, nothing*2\")\n \n ;; UltraSPARC-III has a similar load delay as UltraSPARC-I/II except\n ;; that all loads except 32-bit/64-bit unsigned loads take the extra"}]}