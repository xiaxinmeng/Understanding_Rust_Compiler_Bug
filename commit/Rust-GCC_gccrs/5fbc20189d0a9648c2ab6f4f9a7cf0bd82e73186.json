{"sha": "5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZiYzIwMTg5ZDBhOTY0OGMyYWI2ZjRmOWE3Y2YwYmQ4MmU3MzE4Ng==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-09-26T09:21:10Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:21Z"}, "message": "Test even more generic algorithm for parsing in for lifetimes", "tree": {"sha": "d905f99c6b50fd22c46b4cbc33d27aad36f9b0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d905f99c6b50fd22c46b4cbc33d27aad36f9b0ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41b1bad402aa3dcb3657c75e0c93e2a114d2e2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b1bad402aa3dcb3657c75e0c93e2a114d2e2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b1bad402aa3dcb3657c75e0c93e2a114d2e2cb"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "fadbfb475b726e9441670be8c896a8cb593d751a", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186", "patch": "@@ -2868,14 +2868,6 @@ Parser<ManagedTokenSource>::parse_lifetime_params_objs (\n {\n   std::vector<AST::LifetimeParam> lifetime_params;\n \n-  // DEBUG:\n-  fprintf (\n-    stderr,\n-    \"about to start parse_lifetime_params_objs - current token: '%s', \"\n-    \"is_end_token(...): '%s'\\n\",\n-    lexer.peek_token ()->get_token_description (),\n-    std::to_string (is_end_token (lexer.peek_token ()->get_id ())).c_str ());\n-\n   while (!is_end_token (lexer.peek_token ()->get_id ()))\n     {\n       AST::LifetimeParam lifetime_param = parse_lifetime_param ();\n@@ -2900,22 +2892,17 @@ Parser<ManagedTokenSource>::parse_lifetime_params_objs (\n \n   lifetime_params.shrink_to_fit ();\n \n-  // DEBUG:\n-  fprintf (stderr,\n-\t   \"returned lifetime_params of length %d. Current token is '%s'\\n\",\n-\t   static_cast<int> (lifetime_params.size ()),\n-\t   lexer.peek_token ()->get_token_description ());\n-\n   return lifetime_params;\n }\n \n-/* Parses various types of generic parameters (templated). Will also consume any\n- * trailing comma. Has extra is_end_token predicate checking.\n+/* Parses a sequence of a certain grammar rule in object form (not pointer or\n+ * smart pointer), delimited by commas and ending when 'is_end_token' is\n+ * satisfied (templated). Will also consume any trailing comma.\n  * TODO: is this best solution? implements most of the same algorithm. */\n template <typename ManagedTokenSource>\n template <typename ParseFunction, typename EndTokenPred>\n auto\n-Parser<ManagedTokenSource>::parse_generic_params (\n+Parser<ManagedTokenSource>::parse_non_ptr_sequence (\n   ParseFunction parsing_function, EndTokenPred is_end_token,\n   std::string error_msg) -> std::vector<decltype (parsing_function ())>\n {\n@@ -3316,7 +3303,10 @@ Parser<ManagedTokenSource>::parse_for_lifetimes ()\n \n   /* cannot specify end token due to parsing problems with '>' tokens being\n    * nested */\n-  params = parse_lifetime_params_objs (is_right_angle_tok);\n+  //params = parse_lifetime_params_objs (is_right_angle_tok);\n+  params = parse_non_ptr_sequence (\n+    parse_lifetime_param, is_right_angle_tok,\n+    \"failed to parse lifetime param in lifetime params\");\n \n   if (!skip_generics_right_angle ())\n     {"}, {"sha": "928bb963c49041be55bec4fe48affd9ed80f529c", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=5fbc20189d0a9648c2ab6f4f9a7cf0bd82e73186", "patch": "@@ -156,7 +156,7 @@ template <typename ManagedTokenSource> class Parser\n   template <typename EndTokenPred>\n   std::vector<AST::LifetimeParam> parse_lifetime_params_objs (EndTokenPred is_end_token);\n   template <typename ParseFunction, typename EndTokenPred>\n-  auto parse_generic_params (ParseFunction parsing_function, EndTokenPred is_end_token, std::string error_msg = \"failed to parse generic param in generic params\") -> std::vector<decltype(parsing_function ())>;\n+  auto parse_non_ptr_sequence (ParseFunction parsing_function, EndTokenPred is_end_token, std::string error_msg = \"failed to parse generic param in generic params\") -> std::vector<decltype(parsing_function ())>;\n   AST::LifetimeParam parse_lifetime_param ();\n   std::vector<std::unique_ptr<AST::TypeParam> > parse_type_params ();\n   std::unique_ptr<AST::TypeParam> parse_type_param ();"}]}