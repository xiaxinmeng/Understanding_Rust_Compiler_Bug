{"sha": "e221ef54b8cb4feb7e3b3def11afae562be2c559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIyMWVmNTRiOGNiNGZlYjdlM2IzZGVmMTFhZmFlNTYyYmUyYzU1OQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-11-09T20:46:19Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-11-09T20:46:19Z"}, "message": "s390-protos.h (s390_pool_operand): Remove.\n\nChangeLog:\n\n\t* config/s390/s390-protos.h (s390_pool_operand): Remove.\n\t* config/s390/s390.c (s390_pool_operand): Likewise.\n\t(s390_extra_constraint_str): Handle 'B' constraints.\n\t* config/s390/s390.h (CONSTRAINT_LEN): Handle 'B' constraints.\n\t* config/s390/s390.md: Document 'B' constraints.\n\t(\"*cmpdi_cct\", \"*cmpsi_cct\"): Use 'B' constraint instead of\n\ts390_pool_operand to prevent insns with two literal pool\n\treferences.  Make pattern commutative.\n\t(\"*cmpdi_ccu\", \"*cmpsi_ccu\", \"*cmphi_ccu\", \"*cmpqi_ccu\"): Use\n\t'B' constraint instead of s390_pool_operand.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/20041109-1.c: New test.\n\nFrom-SVN: r90364", "tree": {"sha": "701431a891b98eaf7d09525617e359e3028a5a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/701431a891b98eaf7d09525617e359e3028a5a56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e221ef54b8cb4feb7e3b3def11afae562be2c559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e221ef54b8cb4feb7e3b3def11afae562be2c559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e221ef54b8cb4feb7e3b3def11afae562be2c559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e221ef54b8cb4feb7e3b3def11afae562be2c559/comments", "author": null, "committer": null, "parents": [{"sha": "3172e26ca4384003dbd1bcdf367f65af061ae1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3172e26ca4384003dbd1bcdf367f65af061ae1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3172e26ca4384003dbd1bcdf367f65af061ae1b7"}], "stats": {"total": 152, "additions": 84, "deletions": 68}, "files": [{"sha": "76b4af76da7d3c031c481cc9cfcb1cee12d7c871", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e221ef54b8cb4feb7e3b3def11afae562be2c559", "patch": "@@ -1,3 +1,16 @@\n+2004-11-09  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_pool_operand): Remove.\n+\t* config/s390/s390.c (s390_pool_operand): Likewise.\n+\t(s390_extra_constraint_str): Handle 'B' constraints.\n+\t* config/s390/s390.h (CONSTRAINT_LEN): Handle 'B' constraints.\n+\t* config/s390/s390.md: Document 'B' constraints.\n+\t(\"*cmpdi_cct\", \"*cmpsi_cct\"): Use 'B' constraint instead of\n+\ts390_pool_operand to prevent insns with two literal pool\n+\treferences.  Make pattern commutative.\n+\t(\"*cmpdi_ccu\", \"*cmpsi_ccu\", \"*cmphi_ccu\", \"*cmpqi_ccu\"): Use\n+\t'B' constraint instead of s390_pool_operand.\n+\n 2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-cfg.c (create_bb): Remove unnecessary memset."}, {"sha": "25aeef869915f66ad77b48db8d823584c104e6e4", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=e221ef54b8cb4feb7e3b3def11afae562be2c559", "patch": "@@ -89,7 +89,6 @@ extern void s390_expand_logical_operator (enum rtx_code,\n \t\t\t\t\t  enum machine_mode, rtx *);\n extern bool s390_logical_operator_ok_p (rtx *);\n extern void s390_narrow_logical_operator (enum rtx_code, rtx *, rtx *);\n-extern bool s390_pool_operand (rtx);\n extern void s390_split_access_reg (rtx, rtx *, rtx *);\n \n extern bool s390_output_addr_const_extra (FILE*, rtx);"}, {"sha": "a6f0d64dc7bb53df47b8eb954e84165b2d2fb408", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e221ef54b8cb4feb7e3b3def11afae562be2c559", "patch": "@@ -1508,41 +1508,6 @@ s_operand (rtx op, enum machine_mode mode)\n   return 1;\n }\n \n-/* Return true if OP is a memory operand pointing to the\n-   literal pool, or an immediate operand.  */\n-\n-bool\n-s390_pool_operand (rtx op)\n-{\n-  struct s390_address addr;\n-\n-  /* Just like memory_operand, allow (subreg (mem ...))\n-     after reload.  */\n-  if (reload_completed\n-      && GET_CODE (op) == SUBREG\n-      && GET_CODE (SUBREG_REG (op)) == MEM)\n-    op = SUBREG_REG (op);\n-\n-  switch (GET_CODE (op))\n-    {\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-      return true;\n-\n-    case MEM:\n-      if (!s390_decompose_address (XEXP (op, 0), &addr))\n-\treturn false;\n-      if (addr.base && REG_P (addr.base) && REGNO (addr.base) == BASE_REGNUM)\n-\treturn true;\n-      if (addr.indx && REG_P (addr.indx) && REGNO (addr.indx) == BASE_REGNUM)\n-\treturn true;\n-      return false;\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n /* Return true if OP a valid shift count operand.\n    OP is the current operation.\n    MODE is the current operation mode.  */\n@@ -1634,6 +1599,21 @@ s390_extra_constraint_str (rtx op, int c, const char * str)\n       c = str[1];\n     }\n \n+  /* Check for non-literal-pool variants of memory constraints.  */\n+  else if (c == 'B')\n+    {\n+      if (GET_CODE (op) != MEM)\n+\treturn 0;\n+      if (!s390_decompose_address (XEXP (op, 0), &addr))\n+\treturn 0;\n+      if (addr.base && REG_P (addr.base) && REGNO (addr.base) == BASE_REGNUM)\n+\treturn 0;\n+      if (addr.indx && REG_P (addr.indx) && REGNO (addr.indx) == BASE_REGNUM)\n+\treturn 0;\n+\n+      c = str[1];\n+    }\n+\n   switch (c)\n     {\n     case 'Q':"}, {"sha": "694dcb81717a64da1de4cbbedb947a5acd3cd839", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=e221ef54b8cb4feb7e3b3def11afae562be2c559", "patch": "@@ -583,7 +583,8 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n \n #define CONSTRAINT_LEN(C, STR)                                  \t\\\n   ((C) == 'N' ? 5 : \t\t\t\t\t\t\t\\\n-   (C) == 'A' ? 2 : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n+   (C) == 'A' ? 2 :\t\t\t\t\t\t\t\\\n+   (C) == 'B' ? 2 : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n \n /* Stack layout and calling conventions.  */\n "}, {"sha": "dbeaea4678b0a6448a682b6ecf28512e6d256a39", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=e221ef54b8cb4feb7e3b3def11afae562be2c559", "patch": "@@ -50,6 +50,9 @@\n ;;    T -- Memory reference with index register and long displacement.\n ;;    A -- Multiple letter constraint followed by Q, R, S, or T:\n ;;         Offsettable memory reference of type specified by second letter.\n+;;    B -- Multiple letter constraint followed by Q, R, S, or T:\n+;;         Memory reference of the type specified by second letter that\n+;;         does *not* refer to a literal pool entry.\n ;;    U -- Pointer with short displacement.\n ;;    W -- Pointer with long displacement.\n ;;    Y -- Shift count operand.\n@@ -525,33 +528,28 @@\n \n (define_insn \"*cmpdi_cct\"\n   [(set (reg 33)\n-        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,d,d,m,Q\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,K,m,d,Q\")))]\n-  \"s390_match_ccmode (insn, CCTmode) && TARGET_64BIT\n-   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\"\n+        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"%d,d,d,Q\")\n+                 (match_operand:DI 1 \"general_operand\" \"d,K,m,BQ\")))]\n+  \"s390_match_ccmode (insn, CCTmode) && TARGET_64BIT\"\n   \"@\n    cgr\\t%0,%1\n    cghi\\t%0,%c1\n    cg\\t%0,%1\n-   cg\\t%1,%0\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RI,RXY,RXY,SS\")])\n+  [(set_attr \"op_type\" \"RRE,RI,RXY,SS\")])\n \n (define_insn \"*cmpsi_cct\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,d,d,d,R,T,Q\")\n-                 (match_operand:SI 1 \"general_operand\" \"d,K,R,T,d,d,Q\")))]\n-  \"s390_match_ccmode (insn, CCTmode)\n-   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\"\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"%d,d,d,d,Q\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,K,R,T,BQ\")))]\n+  \"s390_match_ccmode (insn, CCTmode)\"\n   \"@\n    cr\\t%0,%1\n    chi\\t%0,%c1\n    c\\t%0,%1\n    cy\\t%0,%1\n-   c\\t%1,%0\n-   cy\\t%1,%0\n    #\"\n-  [(set_attr \"op_type\" \"RR,RI,RX,RXY,RX,RXY,SS\")])\n+  [(set_attr \"op_type\" \"RR,RI,RX,RXY,SS\")])\n \n \n ; Compare (signed) instructions\n@@ -614,56 +612,56 @@\n \n (define_insn \"*cmpdi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,d,Q\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,m,Q\")))]\n-  \"s390_match_ccmode (insn, CCUmode) && TARGET_64BIT\n-   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\"\n+        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,d,Q,BQ\")\n+                 (match_operand:DI 1 \"general_operand\" \"d,m,BQ,Q\")))]\n+  \"s390_match_ccmode (insn, CCUmode) && TARGET_64BIT\"\n   \"@\n    clgr\\t%0,%1\n    clg\\t%0,%1\n+   #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RXY,SS\")])\n+  [(set_attr \"op_type\" \"RRE,RXY,SS,SS\")])\n \n (define_insn \"*cmpsi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,d,d,Q\")\n-                 (match_operand:SI 1 \"general_operand\" \"d,R,T,Q\")))]\n-  \"s390_match_ccmode (insn, CCUmode)\n-   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\"\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,d,d,Q,BQ\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,R,T,BQ,Q\")))]\n+  \"s390_match_ccmode (insn, CCUmode)\"\n   \"@\n    clr\\t%0,%1\n    cl\\t%0,%1\n    cly\\t%0,%1\n+   #\n    #\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,SS\")])\n+  [(set_attr \"op_type\" \"RR,RX,RXY,SS,SS\")])\n \n (define_insn \"*cmphi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:HI 0 \"nonimmediate_operand\" \"d,d,Q\")\n-                 (match_operand:HI 1 \"general_operand\" \"Q,S,Q\")))]\n+        (compare (match_operand:HI 0 \"nonimmediate_operand\" \"d,d,Q,BQ\")\n+                 (match_operand:HI 1 \"general_operand\" \"Q,S,BQ,Q\")))]\n   \"s390_match_ccmode (insn, CCUmode)\n-   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\n    && !register_operand (operands[1], HImode)\"\n   \"@\n    clm\\t%0,3,%S1\n    clmy\\t%0,3,%S1\n+   #\n    #\"\n-  [(set_attr \"op_type\" \"RS,RSY,SS\")])\n+  [(set_attr \"op_type\" \"RS,RSY,SS,SS\")])\n \n (define_insn \"*cmpqi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:QI 0 \"nonimmediate_operand\" \"d,d,Q,S,Q\")\n-                 (match_operand:QI 1 \"general_operand\" \"Q,S,n,n,Q\")))]\n+        (compare (match_operand:QI 0 \"nonimmediate_operand\" \"d,d,Q,S,Q,BQ\")\n+                 (match_operand:QI 1 \"general_operand\" \"Q,S,n,n,BQ,Q\")))]\n   \"s390_match_ccmode (insn, CCUmode)\n-   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\n    && !register_operand (operands[1], QImode)\"\n   \"@\n    clm\\t%0,1,%S1\n    clmy\\t%0,1,%S1\n    cli\\t%S0,%b1\n    cliy\\t%S0,%b1\n+   #\n    #\"\n-  [(set_attr \"op_type\" \"RS,RSY,SI,SIY,SS\")])\n+  [(set_attr \"op_type\" \"RS,RSY,SI,SIY,SS,SS\")])\n \n \n ; Block compare (CLC) instruction patterns."}, {"sha": "66df19999b2f828712d7c456d33afc9502643afa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e221ef54b8cb4feb7e3b3def11afae562be2c559", "patch": "@@ -1,3 +1,7 @@\n+2004-11-09  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* gcc.dg/20041109-1.c: New test.\n+\n 2004-11-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR objc/18406"}, {"sha": "8b072339dd885ec1785a1264bde44c2a7f24b648", "filename": "gcc/testsuite/gcc.dg/20041109-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Ftestsuite%2Fgcc.dg%2F20041109-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e221ef54b8cb4feb7e3b3def11afae562be2c559/gcc%2Ftestsuite%2Fgcc.dg%2F20041109-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20041109-1.c?ref=e221ef54b8cb4feb7e3b3def11afae562be2c559", "patch": "@@ -0,0 +1,21 @@\n+/* This used to ICE due to a literal pool handling bug on s390x.  */\n+\n+/* { dg-do compile { target s390*-*-* } } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+static struct table { int x; } table[3];\n+\n+int test (void)\n+{\n+  struct table *t;\n+\n+  for (t = table; t < &table[3]; t++)\n+    asm volatile (\"\" : : : \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"12\");\n+\n+  for (t = table; t < &table[3]; t++)\n+    if (t->x)\n+      return 1;\n+\n+  return 0;\n+}\n+"}]}