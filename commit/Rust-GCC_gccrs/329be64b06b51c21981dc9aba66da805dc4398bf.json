{"sha": "329be64b06b51c21981dc9aba66da805dc4398bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5YmU2NGIwNmI1MWMyMTk4MWRjOWFiYTY2ZGE4MDVkYzQzOThiZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-05-30T21:13:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-05-30T21:13:59Z"}, "message": "adaint.c: Test for __linux__ instead of linux and __sun__ instead of sun.\n\n\t* adaint.c: Test for __linux__ instead of linux and __sun__ instead\n\tof sun.  Add missing leading underscore to AIX.  Remove #elif 0.\n\t* adaint.h: Likewise.\n\t* cio.c: Likewise.\n\t* cstreams.c: Likewise.\n\t* env.c: Likewise.\n\t* gsocket.h: Likewise.\n\t* init.c: Likewise.  Test for __i386__ instead of i386.\n\t* link.c: Likewise.\n\t* s-oscons-tmplt.c: Likewise.\n\t* sysdep.c: Likewise.\n\t* terminals.c: Likewise.  Use BSD symbol instead of FREEBSD.\n\t* tracebak.c: Likewise.  Test for __sparc__ instead of sparc.\n\nFrom-SVN: r223890", "tree": {"sha": "939ed8411c661f6e8dcf7ab478a1cc1abfa98185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/939ed8411c661f6e8dcf7ab478a1cc1abfa98185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329be64b06b51c21981dc9aba66da805dc4398bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329be64b06b51c21981dc9aba66da805dc4398bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329be64b06b51c21981dc9aba66da805dc4398bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329be64b06b51c21981dc9aba66da805dc4398bf/comments", "author": null, "committer": null, "parents": [{"sha": "c67e8801d95237cf126a5b8ad6c2f59fc92c455a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67e8801d95237cf126a5b8ad6c2f59fc92c455a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67e8801d95237cf126a5b8ad6c2f59fc92c455a"}], "stats": {"total": 149, "additions": 82, "deletions": 67}, "files": [{"sha": "0a8d80114b1f1e8150678a07f9f0500cfdda7470", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -1,3 +1,19 @@\n+2015-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* adaint.c: Test for __linux__ instead of linux and __sun__ instead\n+\tof sun.  Add missing leading underscore to AIX.  Remove #elif 0.\n+\t* adaint.h: Likewise.\n+\t* cio.c: Likewise.\n+\t* cstreams.c: Likewise.\n+\t* env.c: Likewise.\n+\t* gsocket.h: Likewise.\n+\t* init.c: Likewise.  Test for __i386__ instead of i386.\n+\t* link.c: Likewise.\n+\t* s-oscons-tmplt.c: Likewise.\n+\t* sysdep.c: Likewise.\n+\t* terminals.c: Likewise.  Use BSD symbol instead of FREEBSD.\n+\t* tracebak.c: Likewise.  Test for __sparc__ instead of sparc.\n+\n 2015-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (max_size) <tcc_binary>: Add special code to"}, {"sha": "f1e7b360bbc773d9fa1572a076cc445bb41662bf", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -743,7 +743,7 @@ __gnat_rmdir (char *path)\n #endif\n }\n \n-#if defined (_WIN32) || defined (linux) || defined (sun) \\\n+#if defined (_WIN32) || defined (__linux__) || defined (__sun__) \\\n   || defined (__FreeBSD__)\n #define HAS_TARGET_WCHAR_T\n #endif\n@@ -982,7 +982,7 @@ __gnat_open_new_temp (char *path, int fmode)\n   strcpy (path, \"GNAT-XXXXXX\");\n \n #if (defined (__FreeBSD__) || defined (__NetBSD__) || defined (__OpenBSD__) \\\n-  || defined (linux) || defined(__GLIBC__)) && !defined (__vxworks)\n+  || defined (__linux__) || defined (__GLIBC__)) && !defined (__vxworks)\n   return mkstemp (path);\n #elif defined (__Lynx__)\n   mktemp (path);\n@@ -1153,8 +1153,8 @@ __gnat_tmp_name (char *tmp_filename)\n     free (pname);\n   }\n \n-#elif defined (linux) || defined (__FreeBSD__) || defined (__NetBSD__) \\\n-  || defined (__OpenBSD__) || defined(__GLIBC__) || defined (__ANDROID__)\n+#elif defined (__linux__) || defined (__FreeBSD__) || defined (__NetBSD__) \\\n+  || defined (__OpenBSD__) || defined (__GLIBC__) || defined (__ANDROID__)\n #define MAX_SAFE_PATH 1000\n   char *tmpdir = getenv (\"TMPDIR\");\n \n@@ -1224,7 +1224,7 @@ DIR* __gnat_opendir (char *name)\n /* Read the next entry in a directory.  The returned string points somewhere\n    in the buffer.  */\n \n-#if defined (sun) && defined (__SVR4)\n+#if defined (__sun__)\n /* For Solaris, be sure to use the 64-bit version, otherwise NFS reads may\n    fail with EOVERFLOW if the server uses 64-bit cookies.  */\n #define dirent dirent64\n@@ -2160,7 +2160,7 @@ __gnat_is_symbolic_link (char *name ATTRIBUTE_UNUSED)\n    return __gnat_is_symbolic_link_attr (name, &attr);\n }\n \n-#if defined (sun) && defined (__SVR4)\n+#if defined (__sun__)\n /* Using fork on Solaris will duplicate all the threads. fork1, which\n    duplicates only the active thread, must be used instead, or spawning\n    subprocess from a program with tasking will lead into numerous problems.  */\n@@ -2267,7 +2267,8 @@ __gnat_number_of_cpus (void)\n {\n   int cores = 1;\n \n-#if defined (linux) || defined (sun) || defined (AIX) || defined (__APPLE__)\n+#if defined (__linux__) || defined (__sun__) || defined (_AIX) \\\n+  || defined (__APPLE__)\n   cores = (int) sysconf (_SC_NPROCESSORS_ONLN);\n \n #elif defined (__hpux__)\n@@ -3066,7 +3067,7 @@ __gnat_lwp_self (void)\n    return (void *) pthread_self ();\n }\n \n-#elif defined (linux)\n+#elif defined (__linux__)\n /* There is no function in the glibc to retrieve the LWP of the current\n    thread. We need to do a system call in order to retrieve this\n    information. */\n@@ -3155,7 +3156,7 @@ __gnat_cpu_set (int cpu, size_t count ATTRIBUTE_UNUSED, cpu_set_t *set)\n   CPU_SET (cpu - 1, set);\n }\n #endif /* !CPU_ALLOC */\n-#endif /* linux */\n+#endif /* __linux__ */\n \n /* Return the load address of the executable, or 0 if not known.  In the\n    specific case of error, (void *)-1 can be returned. Beware: this unit may\n@@ -3164,8 +3165,6 @@ __gnat_cpu_set (int cpu, size_t count ATTRIBUTE_UNUSED, cpu_set_t *set)\n \n #if defined (__APPLE__)\n #include <mach-o/dyld.h>\n-#elif 0 && defined (__linux__)\n-#include <link.h>\n #endif\n \n const void *"}, {"sha": "0ec9dd2ce71f54e2071d17895dfd1a042c8b5ba2", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -51,7 +51,7 @@ extern \"C\" {\n    determine at compile time what support the system offers for large files.\n    For now we just list the platforms we have manually tested. */\n \n-#if defined (__GLIBC__) || defined (sun)\n+#if defined (__GLIBC__) || defined (__sun__)\n #define GNAT_FOPEN fopen64\n #define GNAT_OPEN open64\n #define GNAT_STAT stat64\n@@ -279,10 +279,10 @@ extern char * __gnat_locate_file_with_predicate    (char *, char *,\n \t\t\t\t\t\t    int (*)(char*));\n \n #if defined (__ANDROID__)\n-#undef linux\n+#undef __linux__\n extern void   *__gnat_lwp_self                     (void);\n \n-#elif defined (linux)\n+#elif defined (__linux__)\n extern void   *__gnat_lwp_self\t\t\t   (void);\n \n /* Routines for interface to required CPU set primitives */"}, {"sha": "81c61484b7257e3901e11e0ee8a128a7aa651e5a", "filename": "gcc/ada/cio.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fcio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fcio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcio.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -49,7 +49,7 @@ extern \"C\" {\n \n /* Don't use macros on GNU/Linux since they cause incompatible changes between\n    glibc 2.0 and 2.1 */\n-#ifdef linux\n+#ifdef __linux__\n #undef putchar\n #undef getchar\n #undef fputc"}, {"sha": "16b61c9bf8045455247ebe854f62d9224f5c3dab", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -69,7 +69,7 @@ extern \"C\" {\n #include <unixlib.h>\n #endif\n \n-#ifdef linux\n+#ifdef __linux__\n /* Don't use macros on GNU/Linux since they cause incompatible changes between\n    glibc 2.0 and 2.1 */\n \n@@ -277,8 +277,8 @@ __gnat_fseek64 (FILE *stream, __int64 offset, int origin)\n   return _fseeki64 (stream, offset, origin);\n }\n \n-#elif defined(linux) || defined(sun) \\\n-  || defined (__FreeBSD__) || defined(__APPLE__)\n+#elif defined (__linux__) || defined (__sun__) || defined (__FreeBSD__) \\\n+  || defined (__APPLE__)\n /* section for platforms having ftello/fseeko */\n \n __int64"}, {"sha": "dcb03f7e76c3d6cd5ade06252236da5fa7fc4a9c", "filename": "gcc/ada/env.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -211,7 +211,7 @@ __gnat_environ (void)\n   return NULL;\n #elif defined (__MINGW32__)\n   return _environ;\n-#elif defined (sun)\n+#elif defined (__sun__)\n   extern char **_environ;\n   return _environ;\n #elif defined (__APPLE__) && !defined (__arm__)\n@@ -229,7 +229,7 @@ void __gnat_unsetenv (char *name)\n #if defined (VMS)\n   /* Not implemented */\n   return;\n-#elif defined (__hpux__) || defined (sun) \\\n+#elif defined (__hpux__) || defined (__sun__) \\\n      || (defined (__vxworks) && ! defined (__RTP__)) \\\n      || defined (_AIX) || defined (__Lynx__)\n \n@@ -288,7 +288,7 @@ void __gnat_clearenv (void)\n #if defined (VMS)\n   /* not implemented */\n   return;\n-#elif defined (sun) \\\n+#elif defined (__sun__) \\\n   || (defined (__vxworks) && ! defined (__RTP__)) || defined (__Lynx__) \\\n   || defined (__PikeOS__)\n   /* On Solaris, VxWorks (not RTPs), and Lynx there is no system"}, {"sha": "0ef6992101c07d4c64446bca0569b50efdd036dd", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -212,9 +212,9 @@\n     defined (_WIN32) || defined (__APPLE__) || defined (__ANDROID__)\n # define HAVE_THREAD_SAFE_GETxxxBYyyy 1\n \n-#elif defined (linux) || defined (__GLIBC__) || \\\n-     (defined (sun) && defined (__SVR4) && !defined (__vxworks)) || \\\n-      defined(__rtems__)\n+#elif defined (__linux__) || defined (__GLIBC__) || \\\n+     (defined (__sun__) && !defined (__vxworks)) || \\\n+      defined (__rtems__)\n # define HAVE_GETxxxBYyyy_R 1\n #endif\n "}, {"sha": "d1a9b02835b403ac366fdeabab78670f2e8153b8", "filename": "gcc/ada/init.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -49,7 +49,7 @@\n #endif\n \n #ifdef __ANDROID__\n-#undef linux\n+#undef __linux__\n #endif\n \n #ifdef IN_RTS\n@@ -403,7 +403,7 @@ __gnat_install_handler (void)\n /* GNU/Linux Section */\n /*********************/\n \n-#elif defined (linux)\n+#elif defined (__linux__)\n \n #include <signal.h>\n \n@@ -452,7 +452,7 @@ void fake_linux_sigemptyset (sigset_t *set)\n \n #endif\n \n-#if defined (i386) || defined (__x86_64__) || defined (__ia64__) \\\n+#if defined (__i386__) || defined (__x86_64__) || defined (__ia64__) \\\n     || defined (__ARMEL__)\n \n #define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n@@ -480,7 +480,7 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n      The stack checking code guarantees that this address is unused by the\n      time this happens.  */\n \n-#if defined (i386)\n+#if defined (__i386__)\n   unsigned long *pc = (unsigned long *)mcontext->gregs[REG_EIP];\n   /* The pattern is \"orl $0x0,(%esp)\" for a probe in 32-bit mode.  */\n   if (signo == SIGSEGV && pc && *pc == 0x00240c83)\n@@ -703,7 +703,7 @@ __gnat_install_handler(void)\n /* Solaris Section */\n /*******************/\n \n-#elif defined (sun) && defined (__SVR4) && !defined (__vxworks)\n+#elif defined (__sun__) && !defined (__vxworks)\n \n #include <signal.h>\n #include <siginfo.h>\n@@ -1702,7 +1702,7 @@ __gnat_install_handler ()\n \n #include <signal.h>\n #include <taskLib.h>\n-#if (defined (i386) || defined (__i386__)) && !defined (VTHREADS)\n+#if defined (__i386__) && !defined (VTHREADS)\n #include <sysLib.h>\n #endif\n \n@@ -1898,7 +1898,7 @@ __gnat_map_signal (int sig, siginfo_t *si ATTRIBUTE_UNUSED,\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n-#if (defined (i386) || defined (__i386__)) && !defined (VTHREADS)\n+#if defined (__i386__) && !defined (VTHREADS)\n extern void\n __gnat_vxsim_error_handler (int sig, siginfo_t *si, void *sc);\n \n@@ -1921,15 +1921,15 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n   sigdelset (&mask, sig);\n   sigprocmask (SIG_SETMASK, &mask, NULL);\n \n-#if defined (__ARMEL__) || defined (__PPC__) || defined (i386) || defined (__i386__)\n+#if defined (__ARMEL__) || defined (__PPC__) || defined (__i386__)\n   /* On certain targets, kernel mode, we process signals through a Call Frame\n      Info trampoline, voiding the need for myriads of fallback_frame_state\n      variants in the ZCX runtime.  We have no simple way to distinguish ZCX\n      from SJLJ here, so we do this for SJLJ as well even though this is not\n      necessary.  This only incurs a few extra instructions and a tiny\n      amount of extra stack usage.  */\n \n-#if (defined (i386) || defined (__i386__)) && !defined (VTHREADS)\n+#if defined (__i386__) && !defined (VTHREADS)\n    /* On x86, the vxsim signal context is subtly different and is processeed\n       by a handler compiled especially for vxsim.  */\n \n@@ -2021,7 +2021,7 @@ __gnat_install_handler (void)\n   trap_0_entry->inst_fourth = 0xa1480000;\n #endif\n \n-#if (defined (i386) || defined (__i386__)) && !defined (VTHREADS)\n+#if defined (__i386__) && !defined (VTHREADS)\n   /*  By experiment, found that sysModel () returns the following string\n       prefix for vxsim when running on Linux and Windows.  */\n   model = sysModel ();\n@@ -2054,7 +2054,7 @@ __gnat_init_float (void)\n #endif\n #endif\n \n-#if (defined (__i386__) || defined (i386)) && !defined (VTHREADS)\n+#if defined (__i386__) && !defined (VTHREADS)\n   /* This is used to properly initialize the FPU on an x86 for each\n      process thread.  */\n   asm (\"finit\");\n@@ -2530,7 +2530,7 @@ __gnat_install_handler (void)\n void\n __gnat_init_float (void)\n {\n-#if defined (__i386__) || defined (i386) || defined (__x86_64)\n+#if defined (__i386__) || defined (__x86_64__)\n \n   /* This is used to properly initialize the FPU on an x86 for each\n      process thread.  */"}, {"sha": "fa8ebb38269116c6fa60b0de67754f9db9e5b57c", "filename": "gcc/ada/link.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -125,7 +125,7 @@ const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 1;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n \n-#elif defined (linux) || defined(__GLIBC__)\n+#elif defined (__linux__) || defined (__GLIBC__)\n const char *__gnat_object_file_option = \"-Wl,@\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n char __gnat_shared_libgnat_default = STATIC;\n@@ -183,7 +183,7 @@ const char *__gnat_object_library_extension = \".olb\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n \n-#elif defined (sun)\n+#elif defined (__sun__)\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"-Wl,-R\";\n char __gnat_shared_libgnat_default = STATIC;\n@@ -200,7 +200,7 @@ const char *__gnat_default_libgcc_subdir = \"lib/amd64\";\n const char *__gnat_default_libgcc_subdir = \"lib\";\n #endif\n \n-#elif defined (__svr4__) && defined (i386)\n+#elif defined (__svr4__) && defined (__i386__)\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"\";\n char __gnat_shared_libgnat_default = STATIC;"}, {"sha": "55ecfeecc2481a625f03d6bfdac00a13e8c5d4f2", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -1014,7 +1014,7 @@ CNU(RTS_CONTROL_ENABLE, \"Enable RTS flow ctrl\")\n \n */\n \n-#if defined (__FreeBSD__) || defined (linux)\n+#if defined (__FreeBSD__) || defined (__linux__)\n # define PTY_Library \"-lutil\"\n #else\n # define PTY_Library \"\"\n@@ -1321,7 +1321,7 @@ CND(SIZEOF_tv_usec, \"tv_usec\")\n  ** hard-wired limit of 100 million.\n  ** On IA64 HP-UX the limit is 2**31 - 1.\n  **/\n-#if defined (sun)\n+#if defined (__sun__)\n # define MAX_tv_sec \"100_000_000\"\n \n #elif defined (__hpux__)"}, {"sha": "e671ab0bfa6e209a12aea5401323385f85fb64e8", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -49,7 +49,7 @@\n #endif\n \n #ifdef __ANDROID__\n-#undef linux\n+#undef __linux__\n #endif\n \n #ifdef IN_RTS\n@@ -66,7 +66,7 @@\n #include <time.h>\n #include <errno.h>\n \n-#if defined (sun) && defined (__SVR4) && !defined (__vxworks)\n+#if defined (__sun__) && !defined (__vxworks)\n /* The declaration is present in <time.h> but conditionalized\n    on a couple of macros we don't define.  */\n extern struct tm *localtime_r(const time_t *, struct tm *);\n@@ -282,10 +282,10 @@ __gnat_ttyname (int filedes)\n }\n #endif\n \f\n-#if defined (linux) || defined (sun) \\\n+#if defined (__linux__) || defined (__sun__) \\\n   || defined (WINNT) \\\n   || defined (__MACHTEN__) || defined (__hpux__) || defined (_AIX) \\\n-  || (defined (__svr4__) && defined (i386)) || defined (__Lynx__) \\\n+  || (defined (__svr4__) && defined (__i386__)) || defined (__Lynx__) \\\n   || defined (__CYGWIN__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n   || defined (__GLIBC__) || defined (__APPLE__)\n \n@@ -335,9 +335,9 @@ getc_immediate_common (FILE *stream,\n                        int *avail,\n                        int waiting ATTRIBUTE_UNUSED)\n {\n-#if defined (linux) || defined (sun) \\\n+#if defined (__linux__) || defined (__sun__) \\\n     || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (__hpux__) \\\n-    || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n+    || defined (_AIX) || (defined (__svr4__) && defined (__i386__)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n     || defined (__GLIBC__) || defined (__APPLE__)\n   char c;\n@@ -355,9 +355,9 @@ getc_immediate_common (FILE *stream,\n       /* Set RAW mode, with no echo */\n       termios_rec.c_lflag = termios_rec.c_lflag & ~ICANON & ~ECHO;\n \n-#if defined(linux) || defined (sun) \\\n+#if defined (__linux__) || defined (__sun__) \\\n     || defined (__MACHTEN__) || defined (__hpux__) \\\n-    || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n+    || defined (_AIX) || (defined (__svr4__) && defined (__i386__)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n     || defined (__GLIBC__) || defined (__APPLE__)\n       eof_ch = termios_rec.c_cc[VEOF];\n@@ -756,7 +756,7 @@ __gnat_localtime_tzoff (const time_t *timer ATTRIBUTE_UNUSED,\n   struct tm tp ATTRIBUTE_UNUSED;\n \n /* AIX, HPUX, Sun Solaris */\n-#if defined (_AIX) || defined (__hpux__) || defined (sun)\n+#if defined (_AIX) || defined (__hpux__) || defined (__sun__)\n {\n   (*Lock_Task) ();\n \n@@ -819,7 +819,7 @@ __gnat_localtime_tzoff (const time_t *timer ATTRIBUTE_UNUSED,\n /* Darwin, Free BSD, Linux, where component tm_gmtoff is present in\n    struct tm */\n \n-#elif defined (__APPLE__) || defined (__FreeBSD__) || defined (linux) \\\n+#elif defined (__APPLE__) || defined (__FreeBSD__) || defined (__linux__) \\\n   || defined (__GLIBC__)\n {\n   localtime_r (timer, &tp);"}, {"sha": "69fe358c21d81ae4c219a4d25723355346eb0550", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -1059,7 +1059,7 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n  || defined (__OpenBSD__) \\\n  || defined (__NetBSD__)  \\\n  || defined (__DragonFly__)\n-#   define FREEBSD\n+#   define BSD\n #endif\n \n /* Include every system header we need */\n@@ -1070,8 +1070,8 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n \n /* On some system termio is either absent or including it will disable termios\n    (HP-UX) */\n-#if ! defined (__hpux__) && ! defined (FREEBSD) && \\\n-    ! defined (__APPLE__) && ! defined(__rtems__)\n+#if !defined (__hpux__) && !defined (BSD) && !defined (__APPLE__) \\\n+  && !defined (__rtems__)\n #   include <termio.h>\n #endif\n \n@@ -1083,10 +1083,10 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n #include <sys/types.h>\n #include <sys/wait.h>\n #include <unistd.h>\n-#if defined (sun)\n+#if defined (__sun__)\n #   include <sys/stropts.h>\n #endif\n-#if defined (FREEBSD) || defined (sun)\n+#if defined (BSD) || defined (__sun__)\n #   include <sys/signal.h>\n #endif\n #if defined (__hpux__)\n@@ -1098,7 +1098,7 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n \n /* On HP-UX and Sun system, there is a bzero function but with a different\n    signature. Use memset instead */\n-#if defined (__hpux__) || defined (sun) || defined (_AIX)\n+#if defined (__hpux__) || defined (__sun__) || defined (_AIX)\n #   define bzero(s,n) memset (s,0,n)\n #endif\n \n@@ -1116,11 +1116,11 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n */\n \n /* Configurable part */\n-#if defined (__APPLE__) || defined (FREEBSD)\n+#if defined (__APPLE__) || defined (BSD)\n #define USE_OPENPTY\n-#elif defined (linux)\n+#elif defined (__linux__)\n #define USE_GETPT\n-#elif defined (sun)\n+#elif defined (__sun__)\n #define USE_CLONE_DEVICE \"/dev/ptmx\"\n #elif defined (_AIX)\n #define USE_CLONE_DEVICE \"/dev/ptc\"\n@@ -1406,7 +1406,7 @@ __gnat_setup_child_communication\n     desc->slave_fd = open (desc->slave_name, O_RDWR, 0);\n #endif\n \n-#if defined (sun) || defined (__hpux__)\n+#if defined (__sun__) || defined (__hpux__)\n   /* On systems such as Solaris we are using stream. We need to push the right\n      \"modules\" in order to get the expected terminal behaviors. Otherwise\n      functionalities such as termios are not available.  */"}, {"sha": "31579f54121f50c9b937baf36859c4523c3819b1", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329be64b06b51c21981dc9aba66da805dc4398bf/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=329be64b06b51c21981dc9aba66da805dc4398bf", "patch": "@@ -335,7 +335,7 @@ extern void __runnit(); /* thread entry point.  */\n /*-------------------- PPC ELF (GNU/Linux & VxWorks) ---------------------*/\n \n #elif (defined (_ARCH_PPC) && defined (__vxworks)) ||  \\\n-  (defined (linux) && defined (__powerpc__))\n+  (defined (__linux__) && defined (__powerpc__))\n \n #define USE_GENERIC_UNWINDER\n \n@@ -363,7 +363,7 @@ struct layout\n \n /*-------------------------- SPARC Solaris -----------------------------*/\n \n-#elif defined (sun) && defined (sparc)\n+#elif defined (__sun__) && defined (__sparc__)\n \n #define USE_GENERIC_UNWINDER\n \n@@ -401,12 +401,12 @@ struct layout\n \n /*------------------------------- x86 ----------------------------------*/\n \n-#elif defined (i386)\n+#elif defined (__i386__)\n \n #if defined (__WIN32)\n #include <windows.h>\n #define IS_BAD_PTR(ptr) (IsBadCodePtr((FARPROC)ptr))\n-#elif defined (sun)\n+#elif defined (__sun__)\n #define IS_BAD_PTR(ptr) ((unsigned long)ptr == -1UL)\n #else\n #define IS_BAD_PTR(ptr) 0\n@@ -415,7 +415,7 @@ struct layout\n /* Starting with GCC 4.6, -fomit-frame-pointer is turned on by default for\n    32-bit x86/Linux as well and DWARF 2 unwind tables are emitted instead.\n    See the x86-64 case below for the drawbacks with this approach.  */\n-#if defined (linux) && (__GNUC__ * 10 + __GNUC_MINOR__ > 45)\n+#if defined (__linux__) && (__GNUC__ * 10 + __GNUC_MINOR__ > 45)\n #define USE_GCC_UNWINDER\n #else\n #define USE_GENERIC_UNWINDER\n@@ -481,7 +481,7 @@ struct layout\n \n /*----------------------------- ia64 ---------------------------------*/\n \n-#elif defined (__ia64__) && (defined (linux) || defined (__hpux__))\n+#elif defined (__ia64__) && (defined (__linux__) || defined (__hpux__))\n \n #define USE_GCC_UNWINDER\n /* Use _Unwind_Backtrace driven exceptions on ia64 HP-UX and ia64"}]}