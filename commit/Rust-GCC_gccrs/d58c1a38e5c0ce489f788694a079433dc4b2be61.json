{"sha": "d58c1a38e5c0ce489f788694a079433dc4b2be61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU4YzFhMzhlNWMwY2U0ODlmNzg4Njk0YTA3OTQzM2RjNGIyYmU2MQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-06T23:56:28Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-06T23:56:28Z"}, "message": "revert: simplify-rtx.c (simplify_const_binary_operation): Use the shift_truncation_mask hook instead of performing modulo by width.\n\n\tRevert:\n\t* simplify-rtx.c (simplify_const_binary_operation): Use the\n\tshift_truncation_mask hook instead of performing modulo by\n\twidth.  Compare against mode precision, not bitsize.\n\t* combine.c (combine_simplify_rtx, simplify_shift_const_1):\n\tUse shift_truncation_mask instead of constructing the value\n\tmanually.\n\nFrom-SVN: r175949", "tree": {"sha": "d99807e2dbeb0883a50f58e795079c5ca73dd4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d99807e2dbeb0883a50f58e795079c5ca73dd4dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d58c1a38e5c0ce489f788694a079433dc4b2be61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58c1a38e5c0ce489f788694a079433dc4b2be61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58c1a38e5c0ce489f788694a079433dc4b2be61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58c1a38e5c0ce489f788694a079433dc4b2be61/comments", "author": null, "committer": null, "parents": [{"sha": "5511bc5ada2bd2bc9ab835d0ed9fd96a83d3260d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5511bc5ada2bd2bc9ab835d0ed9fd96a83d3260d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5511bc5ada2bd2bc9ab835d0ed9fd96a83d3260d"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "9295bb4fcaa0f59b92e00013a3471898a6b63fde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58c1a38e5c0ce489f788694a079433dc4b2be61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58c1a38e5c0ce489f788694a079433dc4b2be61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d58c1a38e5c0ce489f788694a079433dc4b2be61", "patch": "@@ -44,6 +44,14 @@\n \tsimplify_comparison, record_promoted_value, simplify_compare_const,\n \trecord_dead_and_set_regs_1): Likewise.\n \n+\tRevert:\n+\t* simplify-rtx.c (simplify_const_binary_operation): Use the\n+\tshift_truncation_mask hook instead of performing modulo by\n+\twidth.  Compare against mode precision, not bitsize.\n+\t* combine.c (combine_simplify_rtx, simplify_shift_const_1):\n+\tUse shift_truncation_mask instead of constructing the value\n+\tmanually.\n+\n 2011-07-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_call_indirect_aix): New"}, {"sha": "4dbf022fd1be5b6e6dabb0b8470055fab43cfb87", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58c1a38e5c0ce489f788694a079433dc4b2be61/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58c1a38e5c0ce489f788694a079433dc4b2be61/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d58c1a38e5c0ce489f788694a079433dc4b2be61", "patch": "@@ -5939,7 +5939,9 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int in_dest,\n       else if (SHIFT_COUNT_TRUNCATED && !REG_P (XEXP (x, 1)))\n \tSUBST (XEXP (x, 1),\n \t       force_to_mode (XEXP (x, 1), GET_MODE (XEXP (x, 1)),\n-\t\t\t      targetm.shift_truncation_mask (GET_MODE (x)),\n+\t\t\t      ((unsigned HOST_WIDE_INT) 1\n+\t\t\t       << exact_log2 (GET_MODE_BITSIZE (GET_MODE (x))))\n+\t\t\t      - 1,\n \t\t\t      0));\n       break;\n \n@@ -9875,7 +9877,7 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n      want to do this inside the loop as it makes it more difficult to\n      combine shifts.  */\n   if (SHIFT_COUNT_TRUNCATED)\n-    orig_count &= targetm.shift_truncation_mask (mode);\n+    orig_count &= GET_MODE_BITSIZE (mode) - 1;\n \n   /* If we were given an invalid count, don't do anything except exactly\n      what was requested.  */"}, {"sha": "82b818b02f1c597c02e4618269b47beb19d8ad70", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58c1a38e5c0ce489f788694a079433dc4b2be61/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58c1a38e5c0ce489f788694a079433dc4b2be61/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d58c1a38e5c0ce489f788694a079433dc4b2be61", "patch": "@@ -3768,8 +3768,8 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     shift_truncation_mask, since the shift might not be part of an\n \t     ashlM3, lshrM3 or ashrM3 instruction.  */\n \t  if (SHIFT_COUNT_TRUNCATED)\n-\t    arg1 &= targetm.shift_truncation_mask (mode);\n-\t  else if (arg1 < 0 || arg1 >= GET_MODE_PRECISION (mode))\n+\t    arg1 = (unsigned HOST_WIDE_INT) arg1 % width;\n+\t  else if (arg1 < 0 || arg1 >= GET_MODE_BITSIZE (mode))\n \t    return 0;\n \n \t  val = (code == ASHIFT"}]}