{"sha": "f0343c749001041ed2ac488058581cbcecda6ae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAzNDNjNzQ5MDAxMDQxZWQyYWM0ODgwNTg1ODFjYmNlY2RhNmFlMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-18T23:30:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-18T23:30:08Z"}, "message": "(try_combine): Don't split a PARALLEL of a SIGN_EXTEND and the object being...\n\n(try_combine): Don't split a PARALLEL of a SIGN_EXTEND and the object\nbeing sign extended if we have made assumptions about the form the\nI2DEST.\n\nFrom-SVN: r5184", "tree": {"sha": "14eafefc92a2bf02983c1fd12e7c410225609f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14eafefc92a2bf02983c1fd12e7c410225609f5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0343c749001041ed2ac488058581cbcecda6ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0343c749001041ed2ac488058581cbcecda6ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0343c749001041ed2ac488058581cbcecda6ae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0343c749001041ed2ac488058581cbcecda6ae0/comments", "author": null, "committer": null, "parents": [{"sha": "0840fd91a3ecc27805284548c687bc365581d031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0840fd91a3ecc27805284548c687bc365581d031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0840fd91a3ecc27805284548c687bc365581d031"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "4a91a3f4751eb19cdab7fd907a1f3f7f2e226a82", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0343c749001041ed2ac488058581cbcecda6ae0/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0343c749001041ed2ac488058581cbcecda6ae0/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f0343c749001041ed2ac488058581cbcecda6ae0", "patch": "@@ -1825,7 +1825,11 @@ try_combine (i3, i2, i1)\n      we have a PARALLEL with both loads from the same memory location.\n      We can split this into a load from memory followed by a register-register\n      copy.  This saves at least one insn, more if register allocation can\n-     eliminate the copy.  */\n+     eliminate the copy.\n+\n+     We cannot do this if the destination of the second assignment is\n+     a register that we have already assumed is zero-extended.  Similarly\n+     for a SUBREG of such a register.  */\n \n   else if (i1 && insn_code_number < 0 && asm_noperands (newpat) < 0\n \t   && GET_CODE (newpat) == PARALLEL\n@@ -1839,6 +1843,21 @@ try_combine (i3, i2, i1)\n \t\t\t\t   INSN_CUID (i2))\n \t   && GET_CODE (SET_DEST (XVECEXP (newpat, 0, 1))) != ZERO_EXTRACT\n \t   && GET_CODE (SET_DEST (XVECEXP (newpat, 0, 1))) != STRICT_LOW_PART\n+\t   && ! (temp = SET_DEST (XVECEXP (newpat, 0, 1)),\n+\t\t (GET_CODE (temp) == REG\n+\t\t  && reg_nonzero_bits[REGNO (temp)] != 0\n+\t\t  && GET_MODE_BITSIZE (GET_MODE (temp)) < BITS_PER_WORD\n+\t\t  && GET_MODE_BITSIZE (GET_MODE (temp)) < HOST_BITS_PER_INT\n+\t\t  && (reg_nonzero_bits[REGNO (temp)]\n+\t\t      != GET_MODE_MASK (word_mode))))\n+\t   && ! (GET_CODE (SET_DEST (XVECEXP (newpat, 0, 1))) == SUBREG\n+\t\t && (temp = SUBREG_REG (SET_DEST (XVECEXP (newpat, 0, 1))),\n+\t\t     (GET_CODE (temp) == REG\n+\t\t      && reg_nonzero_bits[REGNO (temp)] != 0\n+\t\t      && GET_MODE_BITSIZE (GET_MODE (temp)) < BITS_PER_WORD\n+\t\t      && GET_MODE_BITSIZE (GET_MODE (temp)) < HOST_BITS_PER_INT\n+\t\t      && (reg_nonzero_bits[REGNO (temp)]\n+\t\t\t  != GET_MODE_MASK (word_mode)))))\n \t   && ! reg_overlap_mentioned_p (SET_DEST (XVECEXP (newpat, 0, 1)),\n \t\t\t\t\t SET_SRC (XVECEXP (newpat, 0, 1)))\n \t   && ! find_reg_note (i3, REG_UNUSED,"}]}