{"sha": "725a74a517294915302c713ee309340779514621", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1YTc0YTUxNzI5NDkxNTMwMmM3MTNlZTMwOTM0MDc3OTUxNDYyMQ==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dominiq@lps.ens.fr", "date": "2012-01-12T06:53:59Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-12T06:53:59Z"}, "message": "re PR testsuite/51057 (FAIL: gfortran.dg/quad_2.f90  -O0  execution test on powerpc*-*-*)\n\n2012-01-12  Dominique d'Humieres  <dominiq@lps.ens.fr>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51057\n        PR fortran/51616\n        * lib/target-supports.exp\n        (check_effective_target_fortran_largest_fp_has_sqrt): New.\n        * gfortran.dg/quad_2.f90: Use it, add pattern for IBM's\n        real(16).\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r183121", "tree": {"sha": "32cc7b2fcc804e5b6415fa45cc87ae003a2aa5b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32cc7b2fcc804e5b6415fa45cc87ae003a2aa5b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/725a74a517294915302c713ee309340779514621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725a74a517294915302c713ee309340779514621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725a74a517294915302c713ee309340779514621", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725a74a517294915302c713ee309340779514621/comments", "author": {"login": "DominiquedHumieres", "id": 18394944, "node_id": "MDQ6VXNlcjE4Mzk0OTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/18394944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DominiquedHumieres", "html_url": "https://github.com/DominiquedHumieres", "followers_url": "https://api.github.com/users/DominiquedHumieres/followers", "following_url": "https://api.github.com/users/DominiquedHumieres/following{/other_user}", "gists_url": "https://api.github.com/users/DominiquedHumieres/gists{/gist_id}", "starred_url": "https://api.github.com/users/DominiquedHumieres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DominiquedHumieres/subscriptions", "organizations_url": "https://api.github.com/users/DominiquedHumieres/orgs", "repos_url": "https://api.github.com/users/DominiquedHumieres/repos", "events_url": "https://api.github.com/users/DominiquedHumieres/events{/privacy}", "received_events_url": "https://api.github.com/users/DominiquedHumieres/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efcc9293a66671758a373804b60e7bb9517b8eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc9293a66671758a373804b60e7bb9517b8eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcc9293a66671758a373804b60e7bb9517b8eac"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "b576b6928d42eeb893ea65a7cc1ff44b86161a75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725a74a517294915302c713ee309340779514621/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725a74a517294915302c713ee309340779514621/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=725a74a517294915302c713ee309340779514621", "patch": "@@ -1,3 +1,12 @@\n+2012-01-12  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51057\n+\tPR fortran/51616\n+\t* lib/target-supports.exp\n+\t(check_effective_target_fortran_largest_fp_has_sqrt): New.\n+\t* gfortran.dg/quad_2.f90: Use it, add pattern for IBM's real(16).\n+\n 2012-01-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51565"}, {"sha": "d3c90a0bc2a42e1d72a14d3ce8fcbaa616eca1ca", "filename": "gcc/testsuite/gfortran.dg/quad_2.f90", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725a74a517294915302c713ee309340779514621/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725a74a517294915302c713ee309340779514621/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_2.f90?ref=725a74a517294915302c713ee309340779514621", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do run }\n+! { dg-require-effective-target fortran_largest_fp_has_sqrt }\n !\n ! This test checks whether the largest possible\n ! floating-point number works.\n@@ -40,22 +41,36 @@ program test_qp\n        if (str2 /= \"1.0000000000000000\") call abort()\n        if (str3 /= \"   1.4142135623730951\") call abort()\n        if (str4 /= \"1.4142135623730951\") call abort()\n+\n      case (10)\n        if (str1 /= \"   1.00000000000000000000\") call abort()\n        if (str2 /= \"1.00000000000000000000\") call abort()\n        if (str3 /= \"   1.41421356237309504876\") call abort()\n        if (str4 /= \"1.41421356237309504876\") call abort()\n+\n      case (16)\n        if (str1 /= \"   1.00000000000000000000000000000000000\") call abort()\n        if (str2 /= \"1.00000000000000000000000000000000000\") call abort()\n-       if (str3 /= \"   1.41421356237309504880168872420969798\") call abort()\n-       if (str4 /= \"1.41421356237309504880168872420969798\") call abort()\n+\n+       if (digits(1.0_qp) == 113) then\n+         ! IEEE 754 binary 128 format\n+         ! e.g. libquadmath/__float128 on i686/x86_64/ia64\n+         if (str3 /= \"   1.41421356237309504880168872420969798\") call abort()\n+         if (str4 /= \"1.41421356237309504880168872420969798\") call abort()\n+       else if (digits(1.0_qp) == 106) then\n+         ! IBM binary 128 format\n+         if (str3(1:37) /= \"   1.41421356237309504880168872420969\") call abort()\n+         if (str4(1:34) /= \"1.41421356237309504880168872420969\") call abort()\n+       end if\n+\n+       ! Do a libm run-time test\n        block\n          real(qp), volatile :: fp2a\n          fp2a = 2.0_qp\n          fp2a = sqrt (fp2a)\n          if (abs (fp2a - fp2) > sqrt(2.0_qp)-nearest(sqrt(2.0_qp),-1.0_qp)) call abort()\n        end block\n+\n      case default\n        call abort()\n    end select"}, {"sha": "be33407a4096521856c507a005d9ba7cfcf8ad9a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725a74a517294915302c713ee309340779514621/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725a74a517294915302c713ee309340779514621/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=725a74a517294915302c713ee309340779514621", "patch": "@@ -984,6 +984,28 @@ proc check_effective_target_fortran_real_16 { } {\n     }]\n }\n \n+\n+# Return 1 if the target supports SQRT for the largest floating-point\n+# type. (Some targets lack the libm support for this FP type.)\n+# On most targets, this check effectively checks either whether sqrtl is\n+# available or on __float128 systems whether libquadmath is installed,\n+# which provides sqrtq.\n+#\n+# When the target name changes, replace the cached result.\n+\n+proc check_effective_target_fortran_largest_fp_has_sqrt { } {\n+    return [check_no_compiler_messages fortran_largest_fp_has_sqrt executable {\n+\t! Fortran\n+        use iso_fortran_env, only: real_kinds\n+        integer,parameter:: maxFP = real_kinds(ubound(real_kinds,dim=1))\n+\treal(kind=maxFP), volatile :: x\n+        x = 2.0_maxFP\n+\tx = sqrt (x)\n+\tend\n+    }]\n+}\n+\n+\n # Return 1 if the target supports Fortran integer kinds larger than\n # integer(8), 0 otherwise.\n #"}]}