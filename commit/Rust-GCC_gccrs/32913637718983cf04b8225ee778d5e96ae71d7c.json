{"sha": "32913637718983cf04b8225ee778d5e96ae71d7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5MTM2Mzc3MTg5ODNjZjA0YjgyMjVlZTc3OGQ1ZTk2YWU3MWQ3Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-12-09T12:18:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-12-09T12:18:36Z"}, "message": "re PR c++/78550 (bit field and std::initializer_list)\n\n\tPR c++/78550\n\t* convert.c (convert_to_integer_1): Maybe fold conversions to\n\tintegral types with fewer bits than its mode.\n\n\ttestsuite/\n\tPR c++/78550\n\t* g++.dg/cpp1y/pr78550.C: New.\n\nFrom-SVN: r243479", "tree": {"sha": "2e55f013560430187cd9f24a7fddc5304d96720f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e55f013560430187cd9f24a7fddc5304d96720f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32913637718983cf04b8225ee778d5e96ae71d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32913637718983cf04b8225ee778d5e96ae71d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32913637718983cf04b8225ee778d5e96ae71d7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32913637718983cf04b8225ee778d5e96ae71d7c/comments", "author": null, "committer": null, "parents": [{"sha": "345bd7ebbb38f0e1d5acf33ab3f680111cfa7871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345bd7ebbb38f0e1d5acf33ab3f680111cfa7871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345bd7ebbb38f0e1d5acf33ab3f680111cfa7871"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "d2e5f478cc42c76adf2e7436fe36514bc595a7a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32913637718983cf04b8225ee778d5e96ae71d7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32913637718983cf04b8225ee778d5e96ae71d7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32913637718983cf04b8225ee778d5e96ae71d7c", "patch": "@@ -1,3 +1,9 @@\n+2016-12-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR C++/78550\n+\t* convert.c (convert_to_integer_1): Maybe fold conversions to\n+\tintegral types with fewer bits than its mode.\n+\n 2016-12-09  Martin Liska  <mliska@suse.cz>\n \n \t* tree-pretty-print.c (pretty_print_string): Escape non-printable\n@@ -67,9 +73,8 @@\n \n 2016-12-08  Dmitry Vyukov  <dvyukov@google.com>\n \n-\t* opts.c (finish_options): Enable\n-\t-fsanitize-address-use-after-scope only if -fsanitize=address is enabled\n-\t(not -fsanitize=kernel-address).\n+\t* opts.c (finish_options): Enable -fsanitize-address-use-after-scope\n+\tonly if -fsanitize=address is enabled (not -fsanitize=kernel-address).\n \t* doc/invoke.texi (-fsanitize=kernel-address):\n \tDon't say that it enables -fsanitize-address-use-after-scope.\n "}, {"sha": "54b0a5d8327823a3939e13d7a5a73a7a715a45dd", "filename": "gcc/convert.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32913637718983cf04b8225ee778d5e96ae71d7c/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32913637718983cf04b8225ee778d5e96ae71d7c/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=32913637718983cf04b8225ee778d5e96ae71d7c", "patch": "@@ -646,10 +646,11 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t to TYPE.  */\n       else if (TREE_CODE (type) == ENUMERAL_TYPE\n \t       || outprec != GET_MODE_PRECISION (TYPE_MODE (type)))\n-\treturn build1 (NOP_EXPR, type,\n-\t\t       convert (lang_hooks.types.type_for_mode\n-\t\t\t\t(TYPE_MODE (type), TYPE_UNSIGNED (type)),\n-\t\t\t\texpr));\n+\t{\n+\t  expr = convert (lang_hooks.types.type_for_mode\n+\t\t\t  (TYPE_MODE (type), TYPE_UNSIGNED (type)), expr);\n+\t  return maybe_fold_build1_loc (dofold, loc, NOP_EXPR, type, expr);\n+\t}\n \n       /* Here detect when we can distribute the truncation down past some\n \t arithmetic.  For example, if adding two longs and converting to an"}, {"sha": "2f15e89d4563787d9cff2ad420793232e0b38cd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32913637718983cf04b8225ee778d5e96ae71d7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32913637718983cf04b8225ee778d5e96ae71d7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32913637718983cf04b8225ee778d5e96ae71d7c", "patch": "@@ -1,3 +1,8 @@\n+2016-12-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/78550\n+\t* g++.dg/cpp1y/pr78550.C: New.\n+\n 2016-12-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/44265"}, {"sha": "95596b10d7c619f1c5160897f40221bba83d1f75", "filename": "gcc/testsuite/g++.dg/cpp1y/pr78550.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32913637718983cf04b8225ee778d5e96ae71d7c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr78550.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32913637718983cf04b8225ee778d5e96ae71d7c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr78550.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr78550.C?ref=32913637718983cf04b8225ee778d5e96ae71d7c", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile { target c++14 } }\n+\n+// PR 78550 ICE with initializer_list and bitfield member\n+\n+namespace std\n+{\n+  template <class T>\n+  struct initializer_list\n+    {\n+      const T *a;\n+      __SIZE_TYPE__ b;\n+      constexpr initializer_list (const T *x, __SIZE_TYPE__ y) : a(x), b(y) { }\n+    };\n+}\n+template <typename T>\n+struct A {\n+  A (std::initializer_list<T>);\n+};\n+struct B {\n+  int k : 1;\n+};\n+A<B> a{{0}};"}]}