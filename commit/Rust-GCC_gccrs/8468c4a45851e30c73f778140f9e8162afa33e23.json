{"sha": "8468c4a45851e30c73f778140f9e8162afa33e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2OGM0YTQ1ODUxZTMwYzczZjc3ODE0MGY5ZTgxNjJhZmEzM2UyMw==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:29:02Z"}, "committer": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:29:02Z"}, "message": "In gcc/:\n\n\t* bitmap.c (bitmap_element_allocate): Remove unused parameter;\n\tchange callers accordingly.\n\t* cplus-dem.c (arm_special): Remove unused parameter work in prototype\n\tand definition; change all callers accordingly.\n\t* except.c (init_eh): Avoid assignment of unused return value of\n\tbuild_pointer_type; cast it to void, instead, and remove unused\n\tvariable type.\n\t* gcc.c (lang_specific_driver): Define prototype only #ifdef\n\tLANG_SPECIFIC_DRIVER.\n\t(temp_names): Define only #ifdef MKTEMP_EACH_FILE.\n\t* genoutput.c (output_epilogue): Initialize next_name to 0.\n\t* real.c (efrexp): #if 0 prototype and function definition.\n\t(eremain): Likewise.\n\t(uditoe): Likewise.\n\t(ditoe): Likewise.\n\t(etoudi): Likewise.\n\t(etodi): Likewise.\n\t(esqrt): Likewise.\n\t* reload.c (push_secondary_reload): Define prototype only\n\t#ifdef HAVE_SECONDARY_RELOADS.\n\t* varasm.c (assemble_static_space): Define rounded only\n\t#ifndef ASM_OUTPUT_ALIGNED_LOCAL.\nIn gcc/cp/:\n\t* call.c (default_parm_conversions): Remove prototype definition.\n\t(build_method_call): Remove unused variable result.\n\t* cvt.c (ocp_convert): Remove unused variable conversion.\n\t* decl2.c (ambiguous_decl): Add explicit parameter definition for name.\n\t* except.c (do_unwind): #if 0 definition of unused variables fcall\n\tand next_pc.\n\t* expr.c (extract_scalar_init): #if 0 prototype and function definition.\n\t* init.c (expand_aggr_init_1): Remove unused variable init_type.\n\t(build_new_1): Remove unused variable t.\n\t* pt.c (instantiate_class_template): Remove unused variable newtag;\n\tcast called function return value to void.\n\t(do_decl_instantiation): Remove unused variables name and fn.\n\t* tree.c (get_type_decl): Add default return to shut up compiler from\n\tcomplaining control reaches end of non-void function.\n\t* typeck.c (build_x_conditional_expr): Remove unused variable rval.\n\nFrom-SVN: r18495", "tree": {"sha": "8edd79a374d4944c6916ae5033602bd88d39b7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8edd79a374d4944c6916ae5033602bd88d39b7e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8468c4a45851e30c73f778140f9e8162afa33e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8468c4a45851e30c73f778140f9e8162afa33e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8468c4a45851e30c73f778140f9e8162afa33e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8468c4a45851e30c73f778140f9e8162afa33e23/comments", "author": null, "committer": null, "parents": [{"sha": "9e2d6f95ca0ce77628feefc3254a0c120211830d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2d6f95ca0ce77628feefc3254a0c120211830d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2d6f95ca0ce77628feefc3254a0c120211830d"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "afef6c14043ec5cfe82856571839a717aa744221", "filename": "gcc/real.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8468c4a45851e30c73f778140f9e8162afa33e23/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8468c4a45851e30c73f778140f9e8162afa33e23/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=8468c4a45851e30c73f778140f9e8162afa33e23", "patch": "@@ -399,11 +399,15 @@ static void asctoe113\tPROTO((char *, unsigned EMUSHORT *));\n static void asctoe\tPROTO((char *, unsigned EMUSHORT *));\n static void asctoeg\tPROTO((char *, unsigned EMUSHORT *, int));\n static void efloor\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+#if 0\n static void efrexp\tPROTO((unsigned EMUSHORT *, int *,\n \t\t\t       unsigned EMUSHORT *));\n+#endif\n static void eldexp\tPROTO((unsigned EMUSHORT *, int, unsigned EMUSHORT *));\n+#if 0\n static void eremain\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *,\n \t\t\t       unsigned EMUSHORT *));\n+#endif\n static void eiremain\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void mtherr\tPROTO((char *, int));\n #ifdef DEC\n@@ -420,11 +424,13 @@ static void toibm\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *,\n \t\t\t       enum machine_mode));\n #endif\n static void make_nan\tPROTO((unsigned EMUSHORT *, int, enum machine_mode));\n+#if 0\n static void uditoe\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void ditoe\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void etoudi\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void etodi\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void esqrt\tPROTO((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+#endif\n \f\n /* Copy 32-bit numbers obtained from array containing 16-bit numbers,\n    swapping ends if required, into output array of longs.  The\n@@ -5308,6 +5314,7 @@ efloor (x, y)\n }\n \n \n+#if 0\n /* Return S and EXP such that  S * 2^EXP = X and .5 <= S < 1.\n    For example, 1.1 = 0.55 * 2^1.  */\n \n@@ -5332,6 +5339,7 @@ efrexp (x, exp, s)\n   emovo (xi, s);\n   *exp = (int) (li - 0x3ffe);\n }\n+#endif\n \n /* Return e type Y = X * 2^PWR2.  */\n \n@@ -5354,6 +5362,7 @@ eldexp (x, pwr2, y)\n }\n \n \n+#if 0\n /* C = remainder after dividing B by A, all e type values.\n    Least significant integer quotient bits left in EQUOT.  */\n \n@@ -5389,6 +5398,7 @@ eremain (a, b, c)\n     num[0] = 0xffff;\n   emovo (num, c);\n }\n+#endif\n \n /*  Return quotient of exploded e-types NUM / DEN in EQUOT,\n     remainder in NUM.  */\n@@ -5955,6 +5965,7 @@ ereal_from_double (d)\n }\n \n \n+#if 0\n /* Convert target computer unsigned 64-bit integer to e-type.\n    The endian-ness of DImode follows the convention for integers,\n    so we use WORDS_BIG_ENDIAN here, not REAL_WORDS_BIG_ENDIAN.  */\n@@ -6325,6 +6336,7 @@ esqrt (x, y)\n   emdnorm (sq, k, 0, exp, 64);\n   emovo (sq, y);\n }\n+#endif\n #endif /* EMU_NON_COMPILE not defined */\n \f\n /* Return the binary precision of the significand for a given"}]}