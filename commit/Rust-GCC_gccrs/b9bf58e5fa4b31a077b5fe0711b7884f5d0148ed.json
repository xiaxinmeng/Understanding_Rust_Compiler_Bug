{"sha": "b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliZjU4ZTVmYTRiMzFhMDc3YjVmZTA3MTFiNzg4NGY1ZDAxNDhlZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-10-13T14:04:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-10-13T14:04:32Z"}, "message": "re PR target/14454 (virtual function with vararg won't compile)\n\n\tPR target/14454\n\t* config/sparc/sparc.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): Set to\n\tsparc_can_output_mi_thunk.\n\t(sparc_output_mi_thunk): Simplify handling of delta offset.  Add\n\thandling of vcall offset.\n\t(sparc_can_output_mi_thunk): New predicate.\n\t* doc/tm.texi (TARGET_ASM_OUTPUT_MI_THUNK): Document VCALL_OFFSET.\n\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Delete.\n\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New target hook.\n\n\t* config/sparc/sparc.c (emit_and_preserve): Preserve stack alignment.\n\n\t* config/sparc/sparc.md (movdi): Remove redundant test.\n\nFrom-SVN: r88985", "tree": {"sha": "2a05cc75f88b727c5ea8b1c92233af46aedb9734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a05cc75f88b727c5ea8b1c92233af46aedb9734"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a10039cc9a027f15afbad9fa47455cfe9f10c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a10039cc9a027f15afbad9fa47455cfe9f10c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a10039cc9a027f15afbad9fa47455cfe9f10c3e"}], "stats": {"total": 128, "additions": 105, "deletions": 23}, "files": [{"sha": "923175c1f7f0b4ec4f5dce79a6d95532e9d62024", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "patch": "@@ -1,3 +1,19 @@\n+2004-10-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/14454\n+\t* config/sparc/sparc.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): Set to\n+\tsparc_can_output_mi_thunk.\n+\t(sparc_output_mi_thunk): Simplify handling of delta offset.  Add\n+\thandling of vcall offset.\n+\t(sparc_can_output_mi_thunk): New predicate.\n+\t* doc/tm.texi (TARGET_ASM_OUTPUT_MI_THUNK): Document VCALL_OFFSET.\n+\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Delete.\n+\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New target hook.\n+\n+\t* config/sparc/sparc.c (emit_and_preserve): Preserve stack alignment.\n+\n+\t* config/sparc/sparc.md (movdi): Remove redundant test.\n+\n 2004-10-13  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* tree-dump.c (dump_options): Remove TDF_TREE, TDF_RTL,"}, {"sha": "3371db95aef48d2d75e77524b78c847bfe9ab8e7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 84, "deletions": 21, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "patch": "@@ -334,6 +334,8 @@ static bool sparc_function_ok_for_sibcall (tree, tree);\n static void sparc_init_libfuncs (void);\n static void sparc_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t   HOST_WIDE_INT, tree);\n+static bool sparc_can_output_mi_thunk (tree, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, tree);\n static struct machine_function * sparc_init_machine_status (void);\n static bool sparc_cannot_force_const_mem (rtx);\n static rtx sparc_tls_get_addr (void);\n@@ -425,7 +427,7 @@ enum processor_type sparc_cpu;\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK sparc_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK sparc_can_output_mi_thunk\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS sparc_rtx_costs\n@@ -8511,23 +8513,25 @@ emit_and_preserve (rtx seq, rtx reg)\n   rtx slot = gen_rtx_MEM (word_mode,\n \t\t\t  plus_constant (stack_pointer_rtx, SPARC_STACK_BIAS));\n \n-  emit_stack_pointer_decrement (GEN_INT (UNITS_PER_WORD));\n+  emit_stack_pointer_decrement (GEN_INT (STACK_BOUNDARY/BITS_PER_UNIT));\n   emit_insn (gen_rtx_SET (VOIDmode, slot, reg));\n   emit_insn (seq);\n   emit_insn (gen_rtx_SET (VOIDmode, reg, slot));\n-  emit_stack_pointer_increment (GEN_INT (UNITS_PER_WORD));\n+  emit_stack_pointer_increment (GEN_INT (STACK_BOUNDARY/BITS_PER_UNIT));\n }\n \n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n+/* Output the assembler code for a thunk function.  THUNK_DECL is the\n+   declaration for the thunk function itself, FUNCTION is the decl for\n+   the target function.  DELTA is an immediate constant offset to be\n+   added to THIS.  If VCALL_OFFSET is nonzero, the word at address\n+   (*THIS + VCALL_OFFSET) should be additionally added to THIS.  */\n \n static void\n sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n-\t\t       HOST_WIDE_INT delta,\n-\t\t       HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n+\t\t       HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t       tree function)\n {\n-  rtx this, insn, funexp, delta_rtx;\n+  rtx this, insn, funexp;\n   unsigned int int_arg_first;\n \n   reload_completed = 1;\n@@ -8566,27 +8570,73 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* Add DELTA.  When possible use a plain add, otherwise load it into\n      a register first.  */\n-  delta_rtx = GEN_INT (delta);\n-  if (!SPARC_SIMM13_P (delta))\n+  if (delta)\n     {\n+      rtx delta_rtx = GEN_INT (delta);\n+\n+      if (! SPARC_SIMM13_P (delta))\n+\t{\n+\t  rtx scratch = gen_rtx_REG (Pmode, 1);\n+\t  emit_move_insn (scratch, delta_rtx);\n+\t  delta_rtx = scratch;\n+\t}\n+\n+      /* THIS += DELTA.  */\n+      emit_insn (gen_add2_insn (this, delta_rtx));\n+    }\n+\n+  /* Add the word at address (*THIS + VCALL_OFFSET).  */\n+  if (vcall_offset)\n+    {\n+      rtx vcall_offset_rtx = GEN_INT (vcall_offset);\n       rtx scratch = gen_rtx_REG (Pmode, 1);\n \n-      if (input_operand (delta_rtx, GET_MODE (scratch)))\n-\temit_insn (gen_rtx_SET (VOIDmode, scratch, delta_rtx));\n+      if (vcall_offset >= 0)\n+\tabort ();\n+\n+      /* SCRATCH = *THIS.  */\n+      emit_move_insn (scratch, gen_rtx_MEM (Pmode, this));\n+\n+      /* Prepare for adding VCALL_OFFSET.  The difficulty is that we\n+\t may not have any available scratch register at this point.  */\n+      if (SPARC_SIMM13_P (vcall_offset))\n+\t;\n+      /* This is the case if ARCH64 (unless -ffixed-g5 is passed).  */\n+      else if (! fixed_regs[5]\n+\t       /* The below sequence is made up of at least 2 insns,\n+\t\t  while the default method may need only one.  */\n+\t       && vcall_offset < -8192)\n+\t{\n+\t  rtx scratch2 = gen_rtx_REG (Pmode, 5);\n+\t  emit_move_insn (scratch2, vcall_offset_rtx);\n+\t  vcall_offset_rtx = scratch2;\n+\t}\n       else\n \t{\n-\t  if (TARGET_ARCH64)\n-\t    sparc_emit_set_const64 (scratch, delta_rtx);\n-\t  else\n-\t    sparc_emit_set_const32 (scratch, delta_rtx);\n+\t  rtx increment = GEN_INT (-4096);\n+\n+\t  /* VCALL_OFFSET is a negative number whose typical range can be\n+\t     estimated as -32768..0 in 32-bit mode.  In almost all cases\n+\t     it is therefore cheaper to emit multiple add insns than\n+\t     spilling and loading the constant into a register (at least\n+\t     6 insns).  */\n+\t  while (! SPARC_SIMM13_P (vcall_offset))\n+\t    {\n+\t      emit_insn (gen_add2_insn (scratch, increment));\n+\t      vcall_offset += 4096;\n+\t    }\n+\t  vcall_offset_rtx = GEN_INT (vcall_offset); /* cannot be 0 */\n \t}\n \n-      delta_rtx = scratch;\n-    }\n+      /* SCRATCH = *(*THIS + VCALL_OFFSET).  */\n+      emit_move_insn (scratch, gen_rtx_MEM (Pmode,\n+\t\t\t\t\t    gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\t  scratch,\n+\t\t\t\t\t\t\t  vcall_offset_rtx)));\n \n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  this,\n-\t\t\t  gen_rtx_PLUS (Pmode, this, delta_rtx)));\n+      /* THIS += *(*THIS + VCALL_OFFSET).  */\n+      emit_insn (gen_add2_insn (this, scratch));\n+    }\n \n   /* Generate a tail call to the target function.  */\n   if (! TREE_USED (function))\n@@ -8674,6 +8724,19 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   no_new_pseudos = 0;\n }\n \n+/* Return true if sparc_output_mi_thunk would be able to output the\n+   assembler code for the thunk function specified by the arguments\n+   it is passed, and false otherwise.  */\n+static bool\n+sparc_can_output_mi_thunk (tree thunk_fndecl ATTRIBUTE_UNUSED,\n+\t\t\t   HOST_WIDE_INT delta ATTRIBUTE_UNUSED,\n+\t\t\t   HOST_WIDE_INT vcall_offset,\n+\t\t\t   tree function ATTRIBUTE_UNUSED)\n+{\n+  /* Bound the loop used in the default method above.  */\n+  return (vcall_offset >= -32768 || ! fixed_regs[5]);\n+}\n+\n /* How to allocate a 'struct machine_function'.  */\n \n static struct machine_function *"}, {"sha": "1000fbb3063a6c9f9ea21ada4eb32fe05167facf", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "patch": "@@ -2099,7 +2099,6 @@\n   if (! CONSTANT_P (operands[1]) || input_operand (operands[1], DImode))\n     ;\n   else if (TARGET_ARCH64\n-\t   && CONSTANT_P (operands[1])\n            && GET_CODE (operands[1]) != HIGH\n            && GET_CODE (operands[1]) != LO_SUM)\n     {"}, {"sha": "a87db9ace560c4ceba45c0877c386fd4f8a808aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "patch": "@@ -1,3 +1,7 @@\n+2004-10-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* g++.dg/inherit/thunk1.C: Run on the SPARC.\n+\n 2004-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/17724"}, {"sha": "3bbd05069df37261fad512b074cf463b90029b1a", "filename": "gcc/testsuite/g++.dg/inherit/thunk1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C?ref=b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target i?86-*-* x86_64-*-* s390*-*-* alpha*-*-* ia64-*-* } }\n+// { dg-do run { target i?86-*-* x86_64-*-* s390*-*-* alpha*-*-* ia64-*-* sparc*-*-* } }\n \n #include <stdarg.h>\n "}]}