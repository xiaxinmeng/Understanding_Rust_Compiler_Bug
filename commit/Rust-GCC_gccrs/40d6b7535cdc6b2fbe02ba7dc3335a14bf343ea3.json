{"sha": "40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBkNmI3NTM1Y2RjNmIyZmJlMDJiYTdkYzMzMzVhMTRiZjM0M2VhMw==", "commit": {"author": {"name": "Rong Xu", "email": "xur@google.com", "date": "2014-01-08T16:37:08Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2014-01-08T16:37:08Z"}, "message": "gcov-io.c (gcov_var): Move from gcov-io.h.\n\n2014-01-08  Rong Xu  <xur@google.com> \n\n\t* gcc/gcov-io.c (gcov_var): Move from gcov-io.h.\n\t(gcov_position): Ditto.\n\t(gcov_is_error): Ditto.\n\t(gcov_rewrite): Ditto.\n\t* gcc/gcov-io.h: Refactor. Move gcov_var to gcov-io.h, and libgcov\n\tonly part to libgcc/libgcov.h.\n\t* libgcc/libgcov-driver.c: Use libgcov.h.\n\t(buffer_fn_data): Use xmalloc instead of malloc.\n\t(gcov_exit_merge_gcda): Ditto.\n\t* libgcc/libgcov-driver-system.c (allocate_filename_struct): Ditto.\n\t* libgcc/libgcov.h: New common header files for libgcov-*.h.\n\t* libgcc/libgcov-interface.c: Use libgcov.h\n\t* libgcc/libgcov-merge.c: Ditto.\n\t* libgcc/libgcov-profiler.c: Ditto.\n\t* libgcc/Makefile.in: Add dependence to libgcov.h\n\nFrom-SVN: r206435", "tree": {"sha": "fffc9c28e27be439d23aa1e73163256e25cf97f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fffc9c28e27be439d23aa1e73163256e25cf97f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/comments", "author": {"login": "xur-llvm", "id": 59886942, "node_id": "MDQ6VXNlcjU5ODg2OTQy", "avatar_url": "https://avatars.githubusercontent.com/u/59886942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xur-llvm", "html_url": "https://github.com/xur-llvm", "followers_url": "https://api.github.com/users/xur-llvm/followers", "following_url": "https://api.github.com/users/xur-llvm/following{/other_user}", "gists_url": "https://api.github.com/users/xur-llvm/gists{/gist_id}", "starred_url": "https://api.github.com/users/xur-llvm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xur-llvm/subscriptions", "organizations_url": "https://api.github.com/users/xur-llvm/orgs", "repos_url": "https://api.github.com/users/xur-llvm/repos", "events_url": "https://api.github.com/users/xur-llvm/events{/privacy}", "received_events_url": "https://api.github.com/users/xur-llvm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab04b46efc42eda6fe74b5fb4551409d29538777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab04b46efc42eda6fe74b5fb4551409d29538777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab04b46efc42eda6fe74b5fb4551409d29538777"}], "stats": {"total": 645, "additions": 325, "deletions": 320}, "files": [{"sha": "2fc426d85358c5813033660d35f67910923711bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -1,3 +1,12 @@\n+2014-01-08  Rong Xu  <xur@google.com> \n+\n+\t* gcov-io.c (gcov_var): Move from gcov-io.h.\n+\t(gcov_position): Ditto.\n+\t(gcov_is_error): Ditto.\n+\t(gcov_rewrite): Ditto.\n+\t* gcov-io.h: Refactor. Move gcov_var to gcov-io.h, and libgcov\n+\tonly part to libgcc/libgcov.h.\n+\n 2014-01-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/59669"}, {"sha": "b710f596e378be3b65288785f800b129f26d0c03", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -36,6 +36,61 @@ static const gcov_unsigned_t *gcov_read_words (unsigned);\n static void gcov_allocate (unsigned);\n #endif\n \n+/* Optimum number of gcov_unsigned_t's read from or written to disk.  */\n+#define GCOV_BLOCK_SIZE (1 << 10)\n+\n+GCOV_LINKAGE struct gcov_var\n+{\n+  FILE *file;\n+  gcov_position_t start;\t/* Position of first byte of block */\n+  unsigned offset;\t\t/* Read/write position within the block.  */\n+  unsigned length;\t\t/* Read limit in the block.  */\n+  unsigned overread;\t\t/* Number of words overread.  */\n+  int error;\t\t\t/* < 0 overflow, > 0 disk error.  */\n+  int mode;\t                /* < 0 writing, > 0 reading */\n+#if IN_LIBGCOV\n+  /* Holds one block plus 4 bytes, thus all coverage reads & writes\n+     fit within this buffer and we always can transfer GCOV_BLOCK_SIZE\n+     to and from the disk. libgcov never backtracks and only writes 4\n+     or 8 byte objects.  */\n+  gcov_unsigned_t buffer[GCOV_BLOCK_SIZE + 1];\n+#else\n+  int endian;\t\t\t/* Swap endianness.  */\n+  /* Holds a variable length block, as the compiler can write\n+     strings and needs to backtrack.  */\n+  size_t alloc;\n+  gcov_unsigned_t *buffer;\n+#endif\n+} gcov_var;\n+\n+/* Save the current position in the gcov file.  */\n+static inline gcov_position_t\n+gcov_position (void)\n+{\n+  gcc_assert (gcov_var.mode > 0); \n+  return gcov_var.start + gcov_var.offset;\n+}\n+\n+/* Return nonzero if the error flag is set.  */\n+static inline int \n+gcov_is_error (void)\n+{\n+  return gcov_var.file ? gcov_var.error : 1;\n+}\n+\n+#if IN_LIBGCOV\n+/* Move to beginning of file and initialize for writing.  */\n+GCOV_LINKAGE inline void\n+gcov_rewrite (void)\n+{\n+  gcc_assert (gcov_var.mode > 0); \n+  gcov_var.mode = -1; \n+  gcov_var.start = 0;\n+  gcov_var.offset = 0;\n+  fseek (gcov_var.file, 0L, SEEK_SET);\n+}\n+#endif\n+\n static inline gcov_unsigned_t from_file (gcov_unsigned_t value)\n {\n #if !IN_LIBGCOV"}, {"sha": "cbf95cfc5523cb04f9714d860aff14931a8ae340", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 7, "deletions": 263, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -164,51 +164,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef GCC_GCOV_IO_H\n #define GCC_GCOV_IO_H\n \n-#if IN_LIBGCOV\n-/* About the target */\n-\n-#if BITS_PER_UNIT == 8\n-typedef unsigned gcov_unsigned_t __attribute__ ((mode (SI)));\n-typedef unsigned gcov_position_t __attribute__ ((mode (SI)));\n-#if LONG_LONG_TYPE_SIZE > 32\n-typedef signed gcov_type __attribute__ ((mode (DI)));\n-typedef unsigned gcov_type_unsigned __attribute__ ((mode (DI)));\n-#else\n-typedef signed gcov_type __attribute__ ((mode (SI)));\n-typedef unsigned gcov_type_unsigned __attribute__ ((mode (SI)));\n-#endif\n-#else\n-#if BITS_PER_UNIT == 16\n-typedef unsigned gcov_unsigned_t __attribute__ ((mode (HI)));\n-typedef unsigned gcov_position_t __attribute__ ((mode (HI)));\n-#if LONG_LONG_TYPE_SIZE > 32\n-typedef signed gcov_type __attribute__ ((mode (SI)));\n-typedef unsigned gcov_type_unsigned __attribute__ ((mode (SI)));\n-#else\n-typedef signed gcov_type __attribute__ ((mode (HI)));\n-typedef unsigned gcov_type_unsigned __attribute__ ((mode (HI)));\n-#endif\n-#else\n-typedef unsigned gcov_unsigned_t __attribute__ ((mode (QI)));\n-typedef unsigned gcov_position_t __attribute__ ((mode (QI)));\n-#if LONG_LONG_TYPE_SIZE > 32\n-typedef signed gcov_type __attribute__ ((mode (HI)));\n-typedef unsigned gcov_type_unsigned __attribute__ ((mode (HI)));\n-#else\n-typedef signed gcov_type __attribute__ ((mode (QI)));\n-typedef unsigned gcov_type_unsigned __attribute__ ((mode (QI)));\n-#endif\n-#endif\n-#endif\n-\n-\n-#if defined (TARGET_POSIX_IO)\n-#define GCOV_LOCKED 1\n-#else\n-#define GCOV_LOCKED 0\n-#endif\n-\n-#else /* !IN_LIBGCOV */\n+#ifndef IN_LIBGCOV\n /* About the host */\n \n typedef unsigned gcov_unsigned_t;\n@@ -231,47 +187,9 @@ typedef unsigned HOST_WIDEST_INT gcov_type_unsigned;\n #define GCOV_LOCKED 0\n #endif\n \n-#endif /* !IN_LIBGCOV */\n-\n-/* In gcov we want function linkage to be static.  In the compiler we want\n-   it extern, so that they can be accessed from elsewhere.  In libgcov we\n-   need these functions to be extern, so prefix them with __gcov.  In\n-   libgcov they must also be hidden so that the instance in the executable\n-   is not also used in a DSO.  */\n-#if IN_LIBGCOV\n-\n-#include \"tconfig.h\"\n-\n-#define gcov_var __gcov_var\n-#define gcov_open __gcov_open\n-#define gcov_close __gcov_close\n-#define gcov_write_tag_length __gcov_write_tag_length\n-#define gcov_position __gcov_position\n-#define gcov_seek __gcov_seek\n-#define gcov_rewrite __gcov_rewrite\n-#define gcov_is_error __gcov_is_error\n-#define gcov_write_unsigned __gcov_write_unsigned\n-#define gcov_write_counter __gcov_write_counter\n-#define gcov_write_summary __gcov_write_summary\n-#define gcov_read_unsigned __gcov_read_unsigned\n-#define gcov_read_counter __gcov_read_counter\n-#define gcov_read_summary __gcov_read_summary\n-\n-/* Poison these, so they don't accidentally slip in.  */\n-#pragma GCC poison gcov_write_string gcov_write_tag gcov_write_length\n-#pragma GCC poison gcov_read_string gcov_sync gcov_time gcov_magic\n-\n-#ifdef HAVE_GAS_HIDDEN\n-#define ATTRIBUTE_HIDDEN  __attribute__ ((__visibility__ (\"hidden\")))\n-#else\n-#define ATTRIBUTE_HIDDEN\n-#endif\n-\n-#else\n-\n #define ATTRIBUTE_HIDDEN\n \n-#endif\n+#endif /* !IN_LIBGOCV */\n \n #ifndef GCOV_LINKAGE\n #define GCOV_LINKAGE extern\n@@ -442,132 +360,7 @@ struct gcov_summary\n   struct gcov_ctr_summary ctrs[GCOV_COUNTERS_SUMMABLE];\n };\n \n-/* Structures embedded in coveraged program.  The structures generated\n-   by write_profile must match these.  */\n-\n-#if IN_LIBGCOV\n-/* Information about counters for a single function.  */\n-struct gcov_ctr_info\n-{\n-  gcov_unsigned_t num;\t\t/* number of counters.  */\n-  gcov_type *values;\t\t/* their values.  */\n-};\n-\n-/* Information about a single function.  This uses the trailing array\n-   idiom. The number of counters is determined from the merge pointer\n-   array in gcov_info.  The key is used to detect which of a set of\n-   comdat functions was selected -- it points to the gcov_info object\n-   of the object file containing the selected comdat function.  */\n-\n-struct gcov_fn_info\n-{\n-  const struct gcov_info *key;\t\t/* comdat key */\n-  gcov_unsigned_t ident;\t\t/* unique ident of function */\n-  gcov_unsigned_t lineno_checksum;\t/* function lineo_checksum */\n-  gcov_unsigned_t cfg_checksum;\t\t/* function cfg checksum */\n-  struct gcov_ctr_info ctrs[0];\t\t/* instrumented counters */\n-};\n-\n-/* Type of function used to merge counters.  */\n-typedef void (*gcov_merge_fn) (gcov_type *, gcov_unsigned_t);\n-\n-/* Information about a single object file.  */\n-struct gcov_info\n-{\n-  gcov_unsigned_t version;\t/* expected version number */\n-  struct gcov_info *next;\t/* link to next, used by libgcov */\n-\n-  gcov_unsigned_t stamp;\t/* uniquifying time stamp */\n-  const char *filename;\t\t/* output file name */\n-\n-  gcov_merge_fn merge[GCOV_COUNTERS];  /* merge functions (null for\n-\t\t\t\t\t  unused) */\n-  \n-  unsigned n_functions;\t\t/* number of functions */\n-  const struct gcov_fn_info *const *functions; /* pointer to pointers\n-\t\t\t\t\t          to function information  */\n-};\n-\n-/* Register a new object file module.  */\n-extern void __gcov_init (struct gcov_info *) ATTRIBUTE_HIDDEN;\n-\n-/* Called before fork, to avoid double counting.  */\n-extern void __gcov_flush (void) ATTRIBUTE_HIDDEN;\n-\n-/* Function to reset all counters to 0.  */\n-extern void __gcov_reset (void);\n-\n-/* Function to enable early write of profile information so far.  */\n-extern void __gcov_dump (void);\n-\n-/* The merge function that just sums the counters.  */\n-extern void __gcov_merge_add (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n-\n-/* The merge function to choose the most common value.  */\n-extern void __gcov_merge_single (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n-\n-/* The merge function to choose the most common difference between\n-   consecutive values.  */\n-extern void __gcov_merge_delta (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n-\n-/* The merge function that just ors the counters together.  */\n-extern void __gcov_merge_ior (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n-\n-extern void __gcov_merge_time_profile (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n-\n-/* The profiler functions.  */\n-extern void __gcov_interval_profiler (gcov_type *, gcov_type, int, unsigned);\n-extern void __gcov_pow2_profiler (gcov_type *, gcov_type);\n-extern void __gcov_one_value_profiler (gcov_type *, gcov_type);\n-extern void __gcov_indirect_call_profiler (gcov_type*, gcov_type,\n-                                           void*, void*);\n-extern void __gcov_indirect_call_profiler_v2 (gcov_type, void *);\n-extern void __gcov_average_profiler (gcov_type *, gcov_type);\n-extern void __gcov_ior_profiler (gcov_type *, gcov_type);\n-extern void __gcov_time_profiler (gcov_type *);\n-\n-#ifndef inhibit_libc\n-/* The wrappers around some library functions..  */\n-extern pid_t __gcov_fork (void) ATTRIBUTE_HIDDEN;\n-extern int __gcov_execl (const char *, char *, ...) ATTRIBUTE_HIDDEN;\n-extern int __gcov_execlp (const char *, char *, ...) ATTRIBUTE_HIDDEN;\n-extern int __gcov_execle (const char *, char *, ...) ATTRIBUTE_HIDDEN;\n-extern int __gcov_execv (const char *, char *const []) ATTRIBUTE_HIDDEN;\n-extern int __gcov_execvp (const char *, char *const []) ATTRIBUTE_HIDDEN;\n-extern int __gcov_execve (const char *, char  *const [], char *const [])\n-  ATTRIBUTE_HIDDEN;\n-#endif\n-\n-#endif /* IN_LIBGCOV */\n-\n-#if IN_LIBGCOV >= 0\n-\n-/* Optimum number of gcov_unsigned_t's read from or written to disk.  */\n-#define GCOV_BLOCK_SIZE (1 << 10)\n-\n-GCOV_LINKAGE struct gcov_var\n-{\n-  FILE *file;\n-  gcov_position_t start;\t/* Position of first byte of block */\n-  unsigned offset;\t\t/* Read/write position within the block.  */\n-  unsigned length;\t\t/* Read limit in the block.  */\n-  unsigned overread;\t\t/* Number of words overread.  */\n-  int error;\t\t\t/* < 0 overflow, > 0 disk error.  */\n-  int mode;\t                /* < 0 writing, > 0 reading */\n-#if IN_LIBGCOV\n-  /* Holds one block plus 4 bytes, thus all coverage reads & writes\n-     fit within this buffer and we always can transfer GCOV_BLOCK_SIZE\n-     to and from the disk. libgcov never backtracks and only writes 4\n-     or 8 byte objects.  */\n-  gcov_unsigned_t buffer[GCOV_BLOCK_SIZE + 1];\n-#else\n-  int endian;\t\t\t/* Swap endianness.  */\n-  /* Holds a variable length block, as the compiler can write\n-     strings and needs to backtrack.  */\n-  size_t alloc;\n-  gcov_unsigned_t *buffer;\n-#endif\n-} gcov_var ATTRIBUTE_HIDDEN;\n+#if !defined(inhibit_libc)\n \n /* Functions for reading and writing gcov files. In libgcov you can\n    open the file for reading then writing. Elsewhere you can open the\n@@ -578,38 +371,20 @@ GCOV_LINKAGE struct gcov_var\n    you use the functions for reading, then gcov_rewrite then the\n    functions for writing.  Your file may become corrupted if you break\n    these invariants.  */\n-#if IN_LIBGCOV\n-GCOV_LINKAGE int gcov_open (const char */*name*/) ATTRIBUTE_HIDDEN;\n-#else\n+\n+#if !IN_LIBGCOV\n GCOV_LINKAGE int gcov_open (const char */*name*/, int /*direction*/);\n GCOV_LINKAGE int gcov_magic (gcov_unsigned_t, gcov_unsigned_t);\n #endif\n-GCOV_LINKAGE int gcov_close (void) ATTRIBUTE_HIDDEN;\n \n /* Available everywhere.  */\n-static gcov_position_t gcov_position (void);\n-static int gcov_is_error (void);\n-\n+GCOV_LINKAGE int gcov_close (void) ATTRIBUTE_HIDDEN;\n GCOV_LINKAGE gcov_unsigned_t gcov_read_unsigned (void) ATTRIBUTE_HIDDEN;\n GCOV_LINKAGE gcov_type gcov_read_counter (void) ATTRIBUTE_HIDDEN;\n GCOV_LINKAGE void gcov_read_summary (struct gcov_summary *) ATTRIBUTE_HIDDEN;\n-\n-#if IN_LIBGCOV\n-/* Available only in libgcov */\n-GCOV_LINKAGE void gcov_write_counter (gcov_type) ATTRIBUTE_HIDDEN;\n-GCOV_LINKAGE void gcov_write_tag_length (gcov_unsigned_t, gcov_unsigned_t)\n-    ATTRIBUTE_HIDDEN;\n-GCOV_LINKAGE void gcov_write_summary (gcov_unsigned_t /*tag*/,\n-\t\t\t\t      const struct gcov_summary *)\n-    ATTRIBUTE_HIDDEN;\n-static void gcov_rewrite (void);\n-GCOV_LINKAGE void gcov_seek (gcov_position_t /*position*/) ATTRIBUTE_HIDDEN;\n-#else\n-/* Available outside libgcov */\n GCOV_LINKAGE const char *gcov_read_string (void);\n GCOV_LINKAGE void gcov_sync (gcov_position_t /*base*/,\n \t\t\t     gcov_unsigned_t /*length */);\n-#endif\n \n #if !IN_GCOV\n /* Available outside gcov */\n@@ -651,37 +426,6 @@ GCOV_LINKAGE void compute_working_sets (const struct gcov_ctr_summary *summary,\n GCOV_LINKAGE time_t gcov_time (void);\n #endif\n \n-/* Save the current position in the gcov file.  */\n-\n-static inline gcov_position_t\n-gcov_position (void)\n-{\n-  gcc_assert (gcov_var.mode > 0);\n-  return gcov_var.start + gcov_var.offset;\n-}\n-\n-/* Return nonzero if the error flag is set.  */\n-\n-static inline int\n-gcov_is_error (void)\n-{\n-  return gcov_var.file ? gcov_var.error : 1;\n-}\n-\n-#if IN_LIBGCOV\n-/* Move to beginning of file and initialize for writing.  */\n-\n-static inline void\n-gcov_rewrite (void)\n-{\n-  gcc_assert (gcov_var.mode > 0);\n-  gcov_var.mode = -1;\n-  gcov_var.start = 0;\n-  gcov_var.offset = 0;\n-  fseek (gcov_var.file, 0L, SEEK_SET);\n-}\n-#endif\n-\n-#endif /* IN_LIBGCOV >= 0 */\n+#endif /* !inhibit_libc  */\n \n #endif /* GCC_GCOV_IO_H */"}, {"sha": "574d73096737ca88ca590f8c3136dad5ea5d4b33", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -1,3 +1,15 @@\n+2014-01-08  Rong Xu  <xur@google.com> \n+\n+\t* libgcov-driver.c: Use libgcov.h.\n+\t(buffer_fn_data): Use xmalloc instead of malloc.\n+\t(gcov_exit_merge_gcda): Ditto.\n+\t* libgcov-driver-system.c (allocate_filename_struct): Ditto.\n+\t* libgcov.h: New common header files for libgcov-*.h.\n+\t* libgcov-interface.c: Use libgcov.h\n+\t* libgcov-merge.c: Ditto.\n+\t* libgcov-profiler.c: Ditto.\n+\t* Makefile.in: Add dependence to libgcov.h\n+\n 2014-01-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/rs6000/ibm-ldouble.c (__gcc_qdiv): Scale up arguments in"}, {"sha": "e86e98de476d6f5329c78e08b9ccd66a96627be1", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -868,14 +868,14 @@ libgcov-driver-objects = $(patsubst %,%$(objext),$(LIBGCOV_DRIVER))\n libgcov-objects = $(libgcov-merge-objects) $(libgcov-profiler-objects) \\\n                  $(libgcov-interface-objects) $(libgcov-driver-objects)\n \n-$(libgcov-merge-objects): %$(objext): $(srcdir)/libgcov-merge.c\n+$(libgcov-merge-objects): %$(objext): $(srcdir)/libgcov-merge.c $(srcdir)/libgcov.h\n \t$(gcc_compile) -DL$* -c $(srcdir)/libgcov-merge.c\n-$(libgcov-profiler-objects): %$(objext): $(srcdir)/libgcov-profiler.c\n+$(libgcov-profiler-objects): %$(objext): $(srcdir)/libgcov-profiler.c $(srcdir)/libgcov.h\n \t$(gcc_compile) -DL$* -c $(srcdir)/libgcov-profiler.c\n-$(libgcov-interface-objects): %$(objext): $(srcdir)/libgcov-interface.c\n+$(libgcov-interface-objects): %$(objext): $(srcdir)/libgcov-interface.c $(srcdir)/libgcov.h\n \t$(gcc_compile) -DL$* -c $(srcdir)/libgcov-interface.c\n $(libgcov-driver-objects): %$(objext): $(srcdir)/libgcov-driver.c \\\n-  $(srcdir)/libgcov-driver-system.c\n+  $(srcdir)/libgcov-driver-system.c $(srcdir)/libgcov.h\n \t$(gcc_compile) -DL$* -c $(srcdir)/libgcov-driver.c\n \n "}, {"sha": "1bb7402813f9f634336b83454bfd13bf87fa6cc5", "filename": "libgcc/libgcov-driver-system.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-driver-system.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-driver-system.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver-system.c?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -124,7 +124,7 @@ allocate_filename_struct (struct gcov_filename_aux *gf)\n       prefix_length = 1;\n     }\n   /* Allocate and initialize the filename scratch space plus one.  */\n-  gi_filename = (char *) malloc (prefix_length + gcov_max_filename + 2);\n+  gi_filename = (char *) xmalloc (prefix_length + gcov_max_filename + 2);\n   if (prefix_length)\n     memcpy (gi_filename, gcov_prefix, prefix_length);\n   gi_filename_up = gi_filename + prefix_length;"}, {"sha": "8429c69085a48a64189e6b87316624f3f4facecb", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -23,21 +23,7 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"libgcc_tm.h\"\n-\n-#if defined(inhibit_libc)\n-#define IN_LIBGCOV (-1)\n-#else\n-#define IN_LIBGCOV 1\n-#if defined(L_gcov)\n-#define GCOV_LINKAGE /* nothing */\n-#endif\n-#endif\n-#include \"gcov-io.h\"\n+#include \"libgcov.h\"\n \n #if defined(inhibit_libc)\n /* If libc and its header files are not available, provide dummy functions.  */\n@@ -156,7 +142,7 @@ buffer_fn_data (const char *filename, const struct gcov_info *gi_ptr,\n       n_ctrs++;\n \n   len = sizeof (*fn_buffer) + sizeof (fn_buffer->info.ctrs[0]) * n_ctrs;\n-  fn_buffer = (struct gcov_fn_buffer *)malloc (len);\n+  fn_buffer = (struct gcov_fn_buffer *) xmalloc (len);\n \n   if (!fn_buffer)\n     goto fail;\n@@ -183,7 +169,7 @@ buffer_fn_data (const char *filename, const struct gcov_info *gi_ptr,\n \n       length = GCOV_TAG_COUNTER_NUM (gcov_read_unsigned ());\n       len = length * sizeof (gcov_type);\n-      values = (gcov_type *)malloc (len);\n+      values = (gcov_type *) xmalloc (len);\n       if (!values)\n         goto fail;\n \n@@ -450,7 +436,7 @@ gcov_exit_merge_gcda (struct gcov_info *gi_ptr,\n              histogram entries that will be emitted, and thus the\n              size of the merged summary.  */\n           (*sum_tail) = (struct gcov_summary_buffer *)\n-              malloc (sizeof(struct gcov_summary_buffer));\n+              xmalloc (sizeof(struct gcov_summary_buffer));\n           (*sum_tail)->summary = tmp;\n           (*sum_tail)->next = 0;\n           sum_tail = &((*sum_tail)->next);\n@@ -718,7 +704,7 @@ gcov_exit_merge_summary (const struct gcov_info *gi_ptr, struct gcov_summary *pr\n              }\n #endif\n     }\n-\n+  \n   prg->checksum = crc32;\n \n   return 0;"}, {"sha": "7f831f2ef240bb4a68795dddf62f51273eceba09", "filename": "libgcc/libgcov-interface.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-interface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-interface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-interface.c?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -23,20 +23,9 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"libgcc_tm.h\"\n+#include \"libgcov.h\"\n #include \"gthr.h\"\n \n-#if defined(inhibit_libc)\n-#define IN_LIBGCOV (-1)\n-#else\n-#define IN_LIBGCOV 1\n-#endif\n-#include \"gcov-io.h\"\n-\n #if defined(inhibit_libc)\n \n #ifdef L_gcov_flush"}, {"sha": "488d5426c9132ae74c7050152f82ad89d9c985cb", "filename": "libgcc/libgcov-merge.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-merge.c?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -23,19 +23,7 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"libgcc_tm.h\"\n-\n-#if defined(inhibit_libc)\n-#define IN_LIBGCOV (-1)\n-#else\n-#define IN_LIBGCOV 1\n-#endif\n-\n-#include \"gcov-io.h\"\n+#include \"libgcov.h\"\n \n #if defined(inhibit_libc)\n /* If libc and its header files are not available, provide dummy functions.  */"}, {"sha": "3290bf62cc2b0dee064a7b095fb9d3d7bf01e584", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -23,15 +23,8 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"libgcc_tm.h\"\n-\n+#include \"libgcov.h\"\n #if !defined(inhibit_libc)\n-#define IN_LIBGCOV 1\n-#include \"gcov-io.h\"\n \n #ifdef L_gcov_interval_profiler\n /* If VALUE is in interval <START, START + STEPS - 1>, then increases the"}, {"sha": "1e831de698acbcca9f96eb66e000cbfc4cd443fc", "filename": "libgcc/libgcov.h", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=40d6b7535cdc6b2fbe02ba7dc3335a14bf343ea3", "patch": "@@ -0,0 +1,229 @@\n+/* Header file for libgcov-*.c.\n+   Copyright (C) 1996-2014 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_LIBGCOV_H\n+#define GCC_LIBGCOV_H\n+\n+/* work around the poisoned malloc/calloc in system.h.  */\n+#ifndef xmalloc\n+#define xmalloc malloc\n+#endif\n+#ifndef xcalloc\n+#define xcalloc calloc\n+#endif\n+\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"libgcc_tm.h\"\n+\n+#if BITS_PER_UNIT == 8\n+typedef unsigned gcov_unsigned_t __attribute__ ((mode (SI)));\n+typedef unsigned gcov_position_t __attribute__ ((mode (SI)));\n+#if LONG_LONG_TYPE_SIZE > 32\n+typedef signed gcov_type __attribute__ ((mode (DI)));\n+typedef unsigned gcov_type_unsigned __attribute__ ((mode (DI)));\n+#else\n+typedef signed gcov_type __attribute__ ((mode (SI)));\n+typedef unsigned gcov_type_unsigned __attribute__ ((mode (SI)));\n+#endif\n+#else\n+#if BITS_PER_UNIT == 16\n+typedef unsigned gcov_unsigned_t __attribute__ ((mode (HI)));\n+typedef unsigned gcov_position_t __attribute__ ((mode (HI)));\n+#if LONG_LONG_TYPE_SIZE > 32\n+typedef signed gcov_type __attribute__ ((mode (SI)));\n+typedef unsigned gcov_type_unsigned __attribute__ ((mode (SI)));\n+#else\n+typedef signed gcov_type __attribute__ ((mode (HI)));\n+typedef unsigned gcov_type_unsigned __attribute__ ((mode (HI)));\n+#endif\n+#else\n+typedef unsigned gcov_unsigned_t __attribute__ ((mode (QI)));\n+typedef unsigned gcov_position_t __attribute__ ((mode (QI)));\n+#if LONG_LONG_TYPE_SIZE > 32\n+typedef signed gcov_type __attribute__ ((mode (HI)));\n+typedef unsigned gcov_type_unsigned __attribute__ ((mode (HI)));\n+#else\n+typedef signed gcov_type __attribute__ ((mode (QI)));\n+typedef unsigned gcov_type_unsigned __attribute__ ((mode (QI)));\n+#endif\n+#endif\n+#endif\n+\n+#if defined (TARGET_POSIX_IO)\n+#define GCOV_LOCKED 1\n+#else\n+#define GCOV_LOCKED 0\n+#endif\n+\n+#if defined(inhibit_libc)\n+#define IN_LIBGCOV (-1)\n+#else\n+#define IN_LIBGCOV 1\n+#if defined(L_gcov)\n+#define GCOV_LINKAGE /* nothing */\n+#endif\n+#endif\n+\n+/* In libgcov we need these functions to be extern, so prefix them with\n+   __gcov.  In libgcov they must also be hidden so that the instance in\n+   the executable is not also used in a DSO.  */\n+#define gcov_var __gcov_var\n+#define gcov_open __gcov_open\n+#define gcov_close __gcov_close\n+#define gcov_write_tag_length __gcov_write_tag_length\n+#define gcov_position __gcov_position\n+#define gcov_seek __gcov_seek\n+#define gcov_rewrite __gcov_rewrite\n+#define gcov_is_error __gcov_is_error\n+#define gcov_write_unsigned __gcov_write_unsigned\n+#define gcov_write_counter __gcov_write_counter\n+#define gcov_write_summary __gcov_write_summary\n+#define gcov_read_unsigned __gcov_read_unsigned\n+#define gcov_read_counter __gcov_read_counter\n+#define gcov_read_summary __gcov_read_summary\n+\n+/* Poison these, so they don't accidentally slip in.  */\n+#pragma GCC poison gcov_write_string gcov_write_tag gcov_write_length\n+#pragma GCC poison gcov_time gcov_magic\n+\n+#ifdef HAVE_GAS_HIDDEN\n+#define ATTRIBUTE_HIDDEN  __attribute__ ((__visibility__ (\"hidden\")))\n+#else\n+#define ATTRIBUTE_HIDDEN\n+#endif\n+\n+#include \"gcov-io.h\"\n+\n+/* Structures embedded in coveraged program.  The structures generated\n+   by write_profile must match these.  */\n+\n+/* Information about counters for a single function.  */\n+struct gcov_ctr_info\n+{\n+  gcov_unsigned_t num;\t\t/* number of counters.  */\n+  gcov_type *values;\t\t/* their values.  */\n+};\n+\n+/* Information about a single function.  This uses the trailing array\n+   idiom. The number of counters is determined from the merge pointer\n+   array in gcov_info.  The key is used to detect which of a set of\n+   comdat functions was selected -- it points to the gcov_info object\n+   of the object file containing the selected comdat function.  */\n+\n+struct gcov_fn_info\n+{\n+  const struct gcov_info *key;\t\t/* comdat key */\n+  gcov_unsigned_t ident;\t\t/* unique ident of function */\n+  gcov_unsigned_t lineno_checksum;\t/* function lineo_checksum */\n+  gcov_unsigned_t cfg_checksum;\t\t/* function cfg checksum */\n+  struct gcov_ctr_info ctrs[0];\t\t/* instrumented counters */\n+};\n+\n+/* Type of function used to merge counters.  */\n+typedef void (*gcov_merge_fn) (gcov_type *, gcov_unsigned_t);\n+\n+/* Information about a single object file.  */\n+struct gcov_info\n+{\n+  gcov_unsigned_t version;\t/* expected version number */\n+  struct gcov_info *next;\t/* link to next, used by libgcov */\n+\n+  gcov_unsigned_t stamp;\t/* uniquifying time stamp */\n+  const char *filename;\t\t/* output file name */\n+\n+  gcov_merge_fn merge[GCOV_COUNTERS];  /* merge functions (null for\n+\t\t\t\t\t  unused) */\n+  \n+  unsigned n_functions;\t\t/* number of functions */\n+  const struct gcov_fn_info *const *functions; /* pointer to pointers\n+\t\t\t\t\t          to function information  */\n+};\n+\n+/* Register a new object file module.  */\n+extern void __gcov_init (struct gcov_info *) ATTRIBUTE_HIDDEN;\n+\n+/* Called before fork, to avoid double counting.  */\n+extern void __gcov_flush (void) ATTRIBUTE_HIDDEN;\n+\n+/* Function to reset all counters to 0.  */\n+extern void __gcov_reset (void);\n+\n+/* Function to enable early write of profile information so far.  */\n+extern void __gcov_dump (void);\n+\n+/* The merge function that just sums the counters.  */\n+extern void __gcov_merge_add (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n+\n+/* The merge function to select the minimum valid counter value.  */\n+extern void __gcov_merge_time_profile (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n+\n+/* The merge function to choose the most common value.  */\n+extern void __gcov_merge_single (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n+\n+/* The merge function to choose the most common difference between\n+   consecutive values.  */\n+extern void __gcov_merge_delta (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n+\n+/* The merge function that just ors the counters together.  */\n+extern void __gcov_merge_ior (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n+\n+/* The profiler functions.  */\n+extern void __gcov_interval_profiler (gcov_type *, gcov_type, int, unsigned);\n+extern void __gcov_pow2_profiler (gcov_type *, gcov_type);\n+extern void __gcov_one_value_profiler (gcov_type *, gcov_type);\n+extern void __gcov_indirect_call_profiler (gcov_type*, gcov_type,\n+                                           void*, void*);\n+extern void __gcov_indirect_call_profiler_v2 (gcov_type, void *);\n+extern void __gcov_time_profiler (gcov_type *);\n+extern void __gcov_average_profiler (gcov_type *, gcov_type);\n+extern void __gcov_ior_profiler (gcov_type *, gcov_type);\n+\n+#ifndef inhibit_libc\n+/* The wrappers around some library functions..  */\n+extern pid_t __gcov_fork (void) ATTRIBUTE_HIDDEN;\n+extern int __gcov_execl (const char *, char *, ...) ATTRIBUTE_HIDDEN;\n+extern int __gcov_execlp (const char *, char *, ...) ATTRIBUTE_HIDDEN;\n+extern int __gcov_execle (const char *, char *, ...) ATTRIBUTE_HIDDEN;\n+extern int __gcov_execv (const char *, char *const []) ATTRIBUTE_HIDDEN;\n+extern int __gcov_execvp (const char *, char *const []) ATTRIBUTE_HIDDEN;\n+extern int __gcov_execve (const char *, char  *const [], char *const [])\n+  ATTRIBUTE_HIDDEN;\n+\n+/* Functions that only available in libgcov.  */\n+GCOV_LINKAGE int gcov_open (const char */*name*/) ATTRIBUTE_HIDDEN;\n+GCOV_LINKAGE void gcov_write_counter (gcov_type) ATTRIBUTE_HIDDEN;\n+GCOV_LINKAGE void gcov_write_tag_length (gcov_unsigned_t, gcov_unsigned_t)\n+    ATTRIBUTE_HIDDEN;\n+GCOV_LINKAGE void gcov_write_summary (gcov_unsigned_t /*tag*/,\n+                                      const struct gcov_summary *)\n+    ATTRIBUTE_HIDDEN;\n+GCOV_LINKAGE void gcov_seek (gcov_position_t /*position*/) ATTRIBUTE_HIDDEN;\n+GCOV_LINKAGE inline void gcov_rewrite (void);\n+\n+#endif /* !inhibit_libc */\n+\n+#endif /* GCC_LIBGCOV_H */"}]}