{"sha": "f087ea4445c639926873179da29955c3a968ddc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4N2VhNDQ0NWM2Mzk5MjY4NzMxNzlkYTI5OTU1YzNhOTY4ZGRjNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T12:51:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T12:51:34Z"}, "message": "[multiple changes]\n\n2014-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Is_Effectively_Volatile): New routine.\n\n2014-07-31  Fedor Rybin  <frybin@adacore.com>\n\n\t* gnat_ugn.texi: Document --test-duration option for gnattest.\n\n2014-07-31  Javier Miranda  <miranda@adacore.com>\n\n\t* opt.ads (Back_End_Inlining): New variable which controls\n\tactivation of inlining by back-end expansion.\n\t* gnat1drv.adb (Adjust_Global_Switches): Initialize Back_End_Inlining\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not build\n\tthe body to be inlined by the frontend if Back_End_Inlining\n\tis enabled.\n\t* exp_ch6.adb (Register_Backend_Call): Moved to inline.adb.\n\t(Expand_Call): If backend inlining is enabled let the backend to\n\thandle inlined subprograms.\n\t* inline.ads (Register_Backend_Call): Moved here from exp_ch6\n\t* inline.adb (Register_Backend_Call): Moved here from exp_ch6.\n\t(Add_Inlined_Subprogram): Add subprograms when Back_End_Inlining is set.\n\t(Must_Inline): Do not return Inline_Call if Back_End_Inlining is\n\tenabled.\n\t* debug.adb Document -gnatd.z\n\t* fe.h Import Back_End_Inlining variable.\n\t* gcc-interface/utils.c (create_subprog_decl): If Back_End_Inlining is\n\tenabled then declare attribute \"always inline\"\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* a-ngelfu.ads: Minor comment fix.\n\nFrom-SVN: r213353", "tree": {"sha": "22a06ca7e0f64d9f875617f4a6913429cf2785ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22a06ca7e0f64d9f875617f4a6913429cf2785ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f087ea4445c639926873179da29955c3a968ddc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f087ea4445c639926873179da29955c3a968ddc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f087ea4445c639926873179da29955c3a968ddc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f087ea4445c639926873179da29955c3a968ddc7/comments", "author": null, "committer": null, "parents": [{"sha": "d780e54fa036407bc057a43f2ebf7d945b80add0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d780e54fa036407bc057a43f2ebf7d945b80add0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d780e54fa036407bc057a43f2ebf7d945b80add0"}], "stats": {"total": 175, "additions": 151, "deletions": 24}, "files": [{"sha": "75940fe0e48c3be71eb6ddcdb3fd91e2b8284f3f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -1,3 +1,36 @@\n+2014-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Is_Effectively_Volatile): New routine.\n+\n+2014-07-31  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Document --test-duration option for gnattest.\n+\n+2014-07-31  Javier Miranda  <miranda@adacore.com>\n+\n+\t* opt.ads (Back_End_Inlining): New variable which controls\n+\tactivation of inlining by back-end expansion.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Initialize Back_End_Inlining\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not build\n+\tthe body to be inlined by the frontend if Back_End_Inlining\n+\tis enabled.\n+\t* exp_ch6.adb (Register_Backend_Call): Moved to inline.adb.\n+\t(Expand_Call): If backend inlining is enabled let the backend to\n+\thandle inlined subprograms.\n+\t* inline.ads (Register_Backend_Call): Moved here from exp_ch6\n+\t* inline.adb (Register_Backend_Call): Moved here from exp_ch6.\n+\t(Add_Inlined_Subprogram): Add subprograms when Back_End_Inlining is set.\n+\t(Must_Inline): Do not return Inline_Call if Back_End_Inlining is\n+\tenabled.\n+\t* debug.adb Document -gnatd.z\n+\t* fe.h Import Back_End_Inlining variable.\n+\t* gcc-interface/utils.c (create_subprog_decl): If Back_End_Inlining is\n+\tenabled then declare attribute \"always inline\"\n+\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-ngelfu.ads: Minor comment fix.\n+\n 2014-07-31  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* freeze.adb (Freeze_Record_Type): Replace all calls to"}, {"sha": "8afb7332204c8ca560dee369808d3ade5b987267", "filename": "gcc/ada/a-ngelfu.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fa-ngelfu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fa-ngelfu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.ads?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -49,7 +49,7 @@ package Ada.Numerics.Generic_Elementary_Functions is\n        --  and the sqrt of numbers less than 1 is greater than the argument).\n \n        --  This property is useful in particular for static analysis. The\n-       --  property that X is positive is not expressed as (X > 0), as\n+       --  property that X is positive is not expressed as (X > 0.0), as\n        --  the value X may be held in registers that have larger range and\n        --  precision on some architecture (for example, on x86 using x387\n        --  FPU, as opposed to SSE2). So, it might be possible for X to be"}, {"sha": "be1eff3e135761c02b826b5aae3c3ccd3bf8ae95", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -116,7 +116,7 @@ package body Debug is\n    --  d.w  Do not check for infinite loops\n    --  d.x  No exception handlers\n    --  d.y\n-   --  d.z\n+   --  d.z  Enable new support for backend inlining\n \n    --  d.A  Read/write Aspect_Specifications hash table to tree\n    --  d.B\n@@ -594,6 +594,8 @@ package body Debug is\n    --       fully compiled and analyzed, they just get eliminated from the\n    --       code generation step.\n \n+   --  d.z  Need documentation of this flag ???\n+\n    --  d.A  There seems to be a problem with ASIS if we activate the circuit\n    --       for reading and writing the aspect specification hash table, so\n    --       for now, this is controlled by the debug flag d.A. The hash table"}, {"sha": "87a4ccbfa03bc69099cef3c045c3b82e747a3ccc", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -2113,9 +2113,6 @@ package body Exp_Ch6 is\n          --  then register the enclosing unit of Subp to Inlined_Bodies so that\n          --  the body of Subp can be retrieved and analyzed by the backend.\n \n-         procedure Register_Backend_Call (N : Node_Id);\n-         --  Append N to the list Backend_Calls\n-\n          -----------------------\n          -- Do_Backend_Inline --\n          -----------------------\n@@ -2174,19 +2171,6 @@ package body Exp_Ch6 is\n             end if;\n          end Do_Backend_Inline;\n \n-         ---------------------------\n-         -- Register_Backend_Call --\n-         ---------------------------\n-\n-         procedure Register_Backend_Call (N : Node_Id) is\n-         begin\n-            if Backend_Calls = No_Elist then\n-               Backend_Calls := New_Elmt_List;\n-            end if;\n-\n-            Append_Elmt (N, To => Backend_Calls);\n-         end Register_Backend_Call;\n-\n       --  Start of processing for Do_Inline\n \n       begin\n@@ -3846,9 +3830,17 @@ package body Exp_Ch6 is\n             return;\n          end if;\n \n+         --  Back end inlining: let the back end handle it\n+\n+         if Back_End_Inlining\n+           and then Is_Inlined (Subp)\n+         then\n+            Add_Inlined_Body (Subp);\n+            Register_Backend_Call (Call_Node);\n+\n          --  Handle inlining (old semantics)\n \n-         if Is_Inlined (Subp) and then not Debug_Flag_Dot_K then\n+         elsif Is_Inlined (Subp) and then not Debug_Flag_Dot_K then\n             Inlined_Subprogram : declare\n                Bod         : Node_Id;\n                Must_Inline : Boolean := False;"}, {"sha": "905283fb958bb9fae0e3d9f5d685dc0ce269c03e", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -173,6 +173,7 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n \n /* opt: */\n \n+#define Back_End_Inlining              opt__back_end_inlining\n #define Exception_Extra_Info           opt__exception_extra_info\n #define Exception_Locations_Suppressed opt__exception_locations_suppressed\n #define Exception_Mechanism            opt__exception_mechanism\n@@ -182,6 +183,7 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n \n typedef enum {Setjmp_Longjmp, Back_End_Exceptions} Exception_Mechanism_Type;\n \n+extern Boolean Back_End_Inlining;\n extern Boolean Exception_Extra_Info;\n extern Boolean Exception_Locations_Suppressed;\n extern Exception_Mechanism_Type Exception_Mechanism;"}, {"sha": "e9e634e52286a999680f7bce84ecf662348fe77e", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -449,7 +449,9 @@ enum inline_status_t\n   /* No inlining is requested for the subprogram.  */\n   is_disabled,\n   /* Inlining is requested for the subprogram.  */\n-  is_enabled\n+  is_enabled,\n+  /* Inlining is required for the subprogram.  */\n+  is_required\n };\n \n extern GTY(()) tree gnat_std_decls[(int) ADT_LAST];"}, {"sha": "fa6f791c452c1c8454eaf9d9d5ba58ede01a1a5d", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -94,6 +94,7 @@ static tree handle_nonnull_attribute (tree *, tree, tree, int, bool *);\n static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_leaf_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_always_inline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_malloc_attribute (tree *, tree, tree, int, bool *);\n static tree handle_type_generic_attribute (tree *, tree, tree, int, bool *);\n static tree handle_vector_size_attribute (tree *, tree, tree, int, bool *);\n@@ -125,6 +126,8 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n     false },\n   { \"leaf\",         0, 0,  true,  false, false, handle_leaf_attribute,\n     false },\n+  { \"always_inline\",0, 0,  true,  false, false, handle_always_inline_attribute,\n+    false },\n   { \"malloc\",       0, 0,  true,  false, false, handle_malloc_attribute,\n     false },\n   { \"type generic\", 0, 0,  false, true, true, handle_type_generic_attribute,\n@@ -2715,6 +2718,14 @@ create_subprog_decl (tree subprog_name, tree asm_name, tree subprog_type,\n     case is_disabled:\n       break;\n \n+    case is_required:\n+      if (Back_End_Inlining)\n+        decl_attributes (&subprog_decl,\n+\t\t\t\t  tree_cons (get_identifier (\"always_inline\"),\n+                    NULL_TREE, NULL_TREE),\n+              ATTR_FLAG_TYPE_IN_PLACE);\n+      /* ... fall through ... */\n+\n     case is_enabled:\n       DECL_DECLARED_INLINE_P (subprog_decl) = 1;\n       DECL_NO_INLINE_WARNING_P (subprog_decl) = artificial_flag;\n@@ -5790,6 +5801,7 @@ gnat_write_global_declarations (void)\n       TREE_STATIC (dummy_global) = 1;\n       node = varpool_node::get_create (dummy_global);\n       node->definition = 1;\n+      node->definition = 1;\n       node->force_output = 1;\n \n       while (!types_used_by_cur_var_decl->is_empty ())\n@@ -6382,8 +6394,7 @@ handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_leaf_attribute (tree *node, tree name,\n-\t\t       tree ARG_UNUSED (args),\n+handle_leaf_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n@@ -6400,6 +6411,27 @@ handle_leaf_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* Handle a \"always_inline\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_always_inline_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t\tint ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      /* Set the attribute and mark it for disregarding inline limits.  */\n+      DECL_DISREGARD_INLINE_LIMITS (*node) = 1;\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"malloc\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "0f6cc4451e9d78cb06f7a2ee6965b77499271815", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -594,6 +594,17 @@ procedure Gnat1drv is\n          end if;\n       end if;\n \n+      --  No backend inlining for AAMP, VM. Turn off inlining under GNATprove\n+      --  mode which would confuse formal verification output. Turn off backend\n+      --  inlining if the frontend inlining is enabled.\n+\n+      Back_End_Inlining :=\n+        VM_Target = No_VM\n+          and then not AAMP_On_Target\n+          and then not GNATprove_Mode\n+          and then not Front_End_Inlining\n+          and then Debug_Flag_Dot_Z;\n+\n       --  Output warning if -gnateE specified and cannot be supported\n \n       if Exception_Extra_Info"}, {"sha": "bbbe553c1bf5e5521eae60f4710b5650769c0196", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -19987,6 +19987,10 @@ by hand.\n Suppresses comment line containing file name and line number of corresponding\n subprograms in test skeletons.\n \n+@item --test-duration\n+@cindex @option{--test-duration} (@command{gnattest})\n+Adds time measurements for each test in generated test driver.\n+\n @end table\n \n @option{--tests_root}, @option{--subdir} and @option{--tests-dir} switches are"}, {"sha": "b7775b4855f8bde379f6469fcf2348dbf9bd29f8", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -376,6 +376,15 @@ package body Inline is\n                   Set_Is_Inlined (Pack);\n                   Inlined_Bodies.Increment_Last;\n                   Inlined_Bodies.Table (Inlined_Bodies.Last) := Pack;\n+\n+               --  If the backend takes care of inlining the call then we must\n+               --  ensure that it has available the body of the subprogram.\n+\n+               elsif Level = Inline_Call\n+                 and then Back_End_Inlining\n+               then\n+                  Inlined_Bodies.Increment_Last;\n+                  Inlined_Bodies.Table (Inlined_Bodies.Last) := Pack;\n                end if;\n             end if;\n          end;\n@@ -458,11 +467,16 @@ package body Inline is\n       --  subprogram has been generated by the compiler, and if it is declared\n       --  at the library level not in the main unit, and if it can be inlined\n       --  by the back-end, then insert it in the list of inlined subprograms.\n+      --  We also add it when its unit is not inlined but we are compiling with\n+      --  Back_End_Inlining since at this stage we know that Add_Inlined_Body\n+      --  forced loading its unit to allow the backend to inline single calls\n+      --  at -gnatn1\n \n       if Is_Inlined (E)\n         and then (Is_Inlined (Pack)\n                    or else Is_Generic_Instance (Pack)\n-                   or else Is_Internal (E))\n+                   or else Is_Internal (E)\n+                   or else Back_End_Inlining)\n         and then not In_Main_Unit_Or_Subunit (E)\n         and then not Is_Nested (E)\n         and then not Has_Initialized_Type (E)\n@@ -4602,6 +4616,19 @@ package body Inline is\n       Inlined.Release;\n    end Lock;\n \n+   ---------------------------\n+   -- Register_Backend_Call --\n+   ---------------------------\n+\n+   procedure Register_Backend_Call (N : Node_Id) is\n+   begin\n+      if Backend_Calls = No_Elist then\n+         Backend_Calls := New_Elmt_List;\n+      end if;\n+\n+      Append_Elmt (N, To => Backend_Calls);\n+   end Register_Backend_Call;\n+\n    --------------------------\n    -- Remove_Dead_Instance --\n    --------------------------"}, {"sha": "34720b432389d1f320f982066498b7d2cc0c93c2", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -231,6 +231,9 @@ package Inline is\n    --  expressions in the body must be converted to the desired type (which\n    --  is simply not noted in the tree without inline expansion).\n \n+   procedure Register_Backend_Call (N : Node_Id);\n+   --  Append N to the list Backend_Calls\n+\n    procedure Remove_Dead_Instance (N : Node_Id);\n    --  If an instantiation appears in unreachable code, delete the pending\n    --  body instance."}, {"sha": "6f79fc12fb9c6b7512446b5c8a1e67f16a5706e8", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -246,6 +246,10 @@ package Opt is\n    --  default can be modified using -gnatd.L (sets the flag True). This is\n    --  used to test the possibility of having the backend handle this.\n \n+   Back_End_Inlining : Boolean := False;\n+   --  GNAT\n+   --  Set True to activate inlining by back-end expansion\n+\n    Bind_Alternate_Main_Name : Boolean := False;\n    --  GNATBIND\n    --  True if main should be called Alternate_Main_Name.all."}, {"sha": "3143a93c82fa16f81fb2c452a4a4b64c639848f1", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -3553,7 +3553,19 @@ package body Sem_Ch6 is\n       --  Old semantics\n \n       if not Debug_Flag_Dot_K then\n+\n+         --  If the backend inlining is available then at this stage we only\n+         --  have to mark the subprogram as inlined. The expander will take\n+         --  care of registering it in the table of subprograms inlined by\n+         --  the backend a part of processing calls to it (cf. Expand_Call)\n+\n          if Present (Spec_Id)\n+           and then Expander_Active\n+           and then Back_End_Inlining\n+         then\n+            Set_Is_Inlined (Spec_Id);\n+\n+         elsif Present (Spec_Id)\n            and then Expander_Active\n            and then\n              (Has_Pragma_Inline_Always (Spec_Id)"}, {"sha": "e0f979bd209cea8fdd0af4d53fdfb08f2ade849d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f087ea4445c639926873179da29955c3a968ddc7/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f087ea4445c639926873179da29955c3a968ddc7", "patch": "@@ -10150,7 +10150,10 @@ package body Sem_Util is\n       --  Otherwise Id denotes an object\n \n       else\n-         return Is_Volatile (Id) or else Is_Effectively_Volatile (Etype (Id));\n+         return\n+           Is_Volatile (Id)\n+             or else Has_Volatile_Components (Id)\n+             or else Is_Effectively_Volatile (Etype (Id));\n       end if;\n    end Is_Effectively_Volatile;\n "}]}