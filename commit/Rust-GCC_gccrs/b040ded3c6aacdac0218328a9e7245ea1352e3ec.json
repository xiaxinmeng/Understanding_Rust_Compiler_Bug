{"sha": "b040ded3c6aacdac0218328a9e7245ea1352e3ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0MGRlZDNjNmFhY2RhYzAyMTgzMjhhOWU3MjQ1ZWExMzUyZTNlYw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-10T06:51:20Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-10T06:51:20Z"}, "message": "AVX-512. Update float unspecs: storeu, rcp14, rsqrt14, scalef, getexp, fixupimm, rndscale, getmant.\n\ngcc/\n\t* config/i386/i386.c\n\t(avx512f_vgetmantv2df_round): Rename from \"avx512f_getmantv2df_round\".\n\t(avx512f_vgetmantv4sf_round): Rename from \"avx512f_vgetmantv4sf_round\".\n\t(ix86_expand_args_builtin): Handle avx512vl_getmantv8sf_mask,\n\tavx512vl_getmantv4df_mask, avx512vl_getmantv4sf_mask,\n\tavx512vl_getmantv2df_mask.\n\t(ix86_expand_round_builtin): Handle avx512f_vgetmantv2df_round,\n\tavx512f_vgetmantv4sf_round.\n\t* config/i386/sse.md\n\t(define_insn \"<avx512>_storeu<ssemodesuffix><avxsizesuffix>_mask\"):\n\tRename from \"avx512f_storeu<ssemodesuffix>512_mask\" and update\n\tmode iterator.\n\t(define_insn \"<mask_codefor>rcp14<mode><mask_name>\"): Use VF_AVX512VL.\n\t(define_insn \"<mask_codefor>rsqrt14<mode><mask_name>\"): Ditto.\n\t(define_insn \"<avx512>_scalef<mode><mask_name><round_name>\"): Rename\n\tfrom \"avx512f_scalef<mode><mask_name><round_name>\" and update mode\n\titerator..\n\t(define_insn \"<avx512>_getexp<mode><mask_name><round_saeonly_name>\"):\n\tRename from \"avx512f_getexp<mode><mask_name><round_saeonly_name>\" and\n\tupdate mode iterator.\n\t(define_expand\n\t\"<avx512>_fixupimm<mode>_maskz<round_saeonly_expand_name>\"): Rename from\n\t\"avx512f_fixupimm<mode>_maskz<round_saeonly_expand_name>\" and update\n\tmode iterator.\n\t(define_insn\n\t\"<avx512>_fixupimm<mode><sd_maskz_name><round_saeonly_name>\"): Rename\n\tfrom \"avx512f_fixupimm<mode><sd_maskz_name><round_saeonly_name>\" and\n\tupdate mode iterator.\n\t(define_insn \"<avx512>_fixupimm<mode>_mask<round_saeonly_name>\"): Rename\n\tfrom \"avx512f_fixupimm<mode>_mask<round_saeonly_name>\" and update mode\n\titerator..\n\t(define_insn\n\t\"<avx512>_rndscale<mode><mask_name><round_saeonly_name>\"): rename from\n\t\"avx512f_rndscale<mode><mask_name><round_saeonly_name>\" and update\n\tmode iterator..\n\t(define_insn \"<avx512>_getmant<mode><mask_name><round_saeonly_name>\"):\n\tRename from \"avx512f_getmant<mode><mask_name><round_saeonly_name>\" and\n\tupdate mode iterator.\n\t(define_insn \"avx512f_vgetmant<mode><round_saeonly_name>\"): Rename from\n\t\"avx512f_getmant<mode><round_saeonly_name>\".\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215106", "tree": {"sha": "72834cab65b668d0b2c3986ed0b4c8b2fe535f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72834cab65b668d0b2c3986ed0b4c8b2fe535f81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b040ded3c6aacdac0218328a9e7245ea1352e3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b040ded3c6aacdac0218328a9e7245ea1352e3ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b040ded3c6aacdac0218328a9e7245ea1352e3ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b040ded3c6aacdac0218328a9e7245ea1352e3ec/comments", "author": null, "committer": null, "parents": [{"sha": "21833f2df07ba269b517e98946605b5a8385625c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21833f2df07ba269b517e98946605b5a8385625c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21833f2df07ba269b517e98946605b5a8385625c"}], "stats": {"total": 156, "additions": 106, "deletions": 50}, "files": [{"sha": "5145acab20a849f8ed7c5e28f46657926e6c3e87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040ded3c6aacdac0218328a9e7245ea1352e3ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040ded3c6aacdac0218328a9e7245ea1352e3ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b040ded3c6aacdac0218328a9e7245ea1352e3ec", "patch": "@@ -1,3 +1,53 @@\n+2014-09-10  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.c\n+\t(avx512f_vgetmantv2df_round): Rename from \"avx512f_getmantv2df_round\".\n+\t(avx512f_vgetmantv4sf_round): Rename from \"avx512f_vgetmantv4sf_round\".\n+\t(ix86_expand_args_builtin): Handle avx512vl_getmantv8sf_mask,\n+\tavx512vl_getmantv4df_mask, avx512vl_getmantv4sf_mask,\n+\tavx512vl_getmantv2df_mask.\n+\t(ix86_expand_round_builtin): Handle avx512f_vgetmantv2df_round,\n+\tavx512f_vgetmantv4sf_round.\n+\t* config/i386/sse.md\n+\t(define_insn \"<avx512>_storeu<ssemodesuffix><avxsizesuffix>_mask\"):\n+\tRename from \"avx512f_storeu<ssemodesuffix>512_mask\" and update\n+\tmode iterator.\n+\t(define_insn \"<mask_codefor>rcp14<mode><mask_name>\"): Use VF_AVX512VL.\n+\t(define_insn \"<mask_codefor>rsqrt14<mode><mask_name>\"): Ditto.\n+\t(define_insn \"<avx512>_scalef<mode><mask_name><round_name>\"): Rename\n+\tfrom \"avx512f_scalef<mode><mask_name><round_name>\" and update mode\n+\titerator..\n+\t(define_insn \"<avx512>_getexp<mode><mask_name><round_saeonly_name>\"):\n+\tRename from \"avx512f_getexp<mode><mask_name><round_saeonly_name>\" and\n+\tupdate mode iterator.\n+\t(define_expand\n+\t\"<avx512>_fixupimm<mode>_maskz<round_saeonly_expand_name>\"): Rename from\n+\t\"avx512f_fixupimm<mode>_maskz<round_saeonly_expand_name>\" and update\n+\tmode iterator.\n+\t(define_insn\n+\t\"<avx512>_fixupimm<mode><sd_maskz_name><round_saeonly_name>\"): Rename\n+\tfrom \"avx512f_fixupimm<mode><sd_maskz_name><round_saeonly_name>\" and\n+\tupdate mode iterator.\n+\t(define_insn \"<avx512>_fixupimm<mode>_mask<round_saeonly_name>\"): Rename\n+\tfrom \"avx512f_fixupimm<mode>_mask<round_saeonly_name>\" and update mode\n+\titerator..\n+\t(define_insn\n+\t\"<avx512>_rndscale<mode><mask_name><round_saeonly_name>\"): rename from\n+\t\"avx512f_rndscale<mode><mask_name><round_saeonly_name>\" and update\n+\tmode iterator..\n+\t(define_insn \"<avx512>_getmant<mode><mask_name><round_saeonly_name>\"):\n+\tRename from \"avx512f_getmant<mode><mask_name><round_saeonly_name>\" and\n+\tupdate mode iterator.\n+\t(define_insn \"avx512f_vgetmant<mode><round_saeonly_name>\"): Rename from\n+\t\"avx512f_getmant<mode><round_saeonly_name>\".\n+\n 2014-09-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/63166"}, {"sha": "844908939df7361ccd5c5a43cc77fc2b455a4726", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040ded3c6aacdac0218328a9e7245ea1352e3ec/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040ded3c6aacdac0218328a9e7245ea1352e3ec/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b040ded3c6aacdac0218328a9e7245ea1352e3ec", "patch": "@@ -30285,8 +30285,8 @@ static const struct builtin_description bdesc_round_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sgetexpv4sf_round, \"__builtin_ia32_getexpss128_round\", IX86_BUILTIN_GETEXPSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv8df_mask_round, \"__builtin_ia32_getmantpd512_mask\", IX86_BUILTIN_GETMANTPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_INT_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv16sf_mask_round, \"__builtin_ia32_getmantps512_mask\", IX86_BUILTIN_GETMANTPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_INT_V16SF_HI_INT },\n-  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv2df_round, \"__builtin_ia32_getmantsd_round\", IX86_BUILTIN_GETMANTSD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_INT },\n-  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv4sf_round, \"__builtin_ia32_getmantss_round\", IX86_BUILTIN_GETMANTSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vgetmantv2df_round, \"__builtin_ia32_getmantsd_round\", IX86_BUILTIN_GETMANTSD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vgetmantv4sf_round, \"__builtin_ia32_getmantss_round\", IX86_BUILTIN_GETMANTSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_smaxv8df3_mask_round, \"__builtin_ia32_maxpd512_mask\", IX86_BUILTIN_MAXPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_smaxv16sf3_mask_round, \"__builtin_ia32_maxps512_mask\", IX86_BUILTIN_MAXPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsmaxv2df3_round, \"__builtin_ia32_maxsd_round\", IX86_BUILTIN_MAXSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n@@ -34086,6 +34086,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t      case CODE_FOR_avx_vpermilv4df:\n \t      case CODE_FOR_avx512f_getmantv8df_mask:\n \t      case CODE_FOR_avx512f_getmantv16sf_mask:\n+\t      case CODE_FOR_avx512vl_getmantv8sf_mask:\n+\t      case CODE_FOR_avx512vl_getmantv4df_mask:\n+\t      case CODE_FOR_avx512vl_getmantv4sf_mask:\n+\t      case CODE_FOR_avx512vl_getmantv2df_mask:\n \t\terror (\"the last argument must be a 4-bit immediate\");\n \t\treturn const0_rtx;\n \n@@ -34492,8 +34496,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n \t\t{\n \t\tcase CODE_FOR_avx512f_getmantv8df_mask_round:\n \t\tcase CODE_FOR_avx512f_getmantv16sf_mask_round:\n-\t\tcase CODE_FOR_avx512f_getmantv2df_round:\n-\t\tcase CODE_FOR_avx512f_getmantv4sf_round:\n+\t\tcase CODE_FOR_avx512f_vgetmantv2df_round:\n+\t\tcase CODE_FOR_avx512f_vgetmantv4sf_round:\n \t\t  error (\"the immediate argument must be a 4-bit immediate\");\n \t\t  return const0_rtx;\n \t\tcase CODE_FOR_avx512f_cmpv8df3_mask_round:"}, {"sha": "1706e4ca1ca9e6f0dbe15c496344f6f7e8f82bf7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040ded3c6aacdac0218328a9e7245ea1352e3ec/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040ded3c6aacdac0218328a9e7245ea1352e3ec/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b040ded3c6aacdac0218328a9e7245ea1352e3ec", "patch": "@@ -1170,11 +1170,11 @@\n \t      ]\n \t      (const_string \"<MODE>\")))])\n \n-(define_insn \"avx512f_storeu<ssemodesuffix>512_mask\"\n-  [(set (match_operand:VF_512 0 \"memory_operand\" \"=m\")\n-\t(vec_merge:VF_512\n-\t  (unspec:VF_512\n-\t    [(match_operand:VF_512 1 \"register_operand\" \"v\")]\n+(define_insn \"<avx512>_storeu<ssemodesuffix><avxsizesuffix>_mask\"\n+  [(set (match_operand:VF_AVX512VL 0 \"memory_operand\" \"=m\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (unspec:VF_AVX512VL\n+\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")]\n \t    UNSPEC_STOREU)\n \t  (match_dup 0)\n \t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n@@ -1183,6 +1183,8 @@\n   switch (get_attr_mode (insn))\n     {\n     case MODE_V16SF:\n+    case MODE_V8SF:\n+    case MODE_V4SF:\n       return \"vmovups\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n     default:\n       return \"vmovu<ssemodesuffix>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n@@ -1702,9 +1704,9 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"<mask_codefor>rcp14<mode><mask_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_AVX512VL\n+\t  [(match_operand:VF_AVX512VL 1 \"nonimmediate_operand\" \"vm\")]\n \t  UNSPEC_RCP14))]\n   \"TARGET_AVX512F\"\n   \"vrcp14<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n@@ -1797,9 +1799,9 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<mask_codefor>rsqrt14<mode><mask_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")]\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_AVX512VL\n+\t  [(match_operand:VF_AVX512VL 1 \"nonimmediate_operand\" \"vm\")]\n \t  UNSPEC_RSQRT14))]\n   \"TARGET_AVX512F\"\n   \"vrsqrt14<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n@@ -7104,11 +7106,11 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\"  \"<ssescalarmode>\")])\n \n-(define_insn \"avx512f_scalef<mode><mask_name><round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t   (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n+(define_insn \"<avx512>_scalef<mode><mask_name><round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_AVX512VL\n+\t  [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")]\n \t  UNSPEC_SCALEF))]\n   \"TARGET_AVX512F\"\n   \"vscalef<ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n@@ -7161,9 +7163,9 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_getexp<mode><mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-        (unspec:VF_512 [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n+(define_insn \"<avx512>_getexp<mode><mask_name><round_saeonly_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+        (unspec:VF_AVX512VL [(match_operand:VF_AVX512VL 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n                         UNSPEC_GETEXP))]\n    \"TARGET_AVX512F\"\n    \"vgetexp<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\";\n@@ -7227,42 +7229,42 @@\n })\n \n \n-(define_expand \"avx512f_fixupimm<mode>_maskz<round_saeonly_expand_name>\"\n-  [(match_operand:VF_512 0 \"register_operand\")\n-   (match_operand:VF_512 1 \"register_operand\")\n-   (match_operand:VF_512 2 \"register_operand\")\n+(define_expand \"<avx512>_fixupimm<mode>_maskz<round_saeonly_expand_name>\"\n+  [(match_operand:VF_AVX512VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512VL 1 \"register_operand\")\n+   (match_operand:VF_AVX512VL 2 \"register_operand\")\n    (match_operand:<sseintvecmode> 3 \"<round_saeonly_expand_nimm_predicate>\")\n    (match_operand:SI 4 \"const_0_to_255_operand\")\n    (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n-  emit_insn (gen_avx512f_fixupimm<mode>_maskz_1<round_saeonly_expand_name> (\n+  emit_insn (gen_<avx512>_fixupimm<mode>_maskz_1<round_saeonly_expand_name> (\n \toperands[0], operands[1], operands[2], operands[3],\n \toperands[4], CONST0_RTX (<MODE>mode), operands[5]\n \t<round_saeonly_expand_operand6>));\n   DONE;\n })\n \n-(define_insn \"avx512f_fixupimm<mode><sd_maskz_name><round_saeonly_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-        (unspec:VF_512\n-          [(match_operand:VF_512 1 \"register_operand\" \"0\")\n-\t   (match_operand:VF_512 2 \"register_operand\" \"v\")\n-           (match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+(define_insn \"<avx512>_fixupimm<mode><sd_maskz_name><round_saeonly_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+        (unspec:VF_AVX512VL\n+          [(match_operand:VF_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VF_AVX512VL 2 \"register_operand\" \"v\")\n+           (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n            (match_operand:SI 4 \"const_0_to_255_operand\")]\n            UNSPEC_FIXUPIMM))]\n   \"TARGET_AVX512F\"\n   \"vfixupimm<ssemodesuffix>\\t{%4, <round_saeonly_sd_mask_op5>%3, %2, %0<sd_mask_op5>|%0<sd_mask_op5>, %2, %3<round_saeonly_sd_mask_op5>, %4}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fixupimm<mode>_mask<round_saeonly_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_512\n-          (unspec:VF_512\n-            [(match_operand:VF_512 1 \"register_operand\" \"0\")\n-\t     (match_operand:VF_512 2 \"register_operand\" \"v\")\n-             (match_operand:<sseintvecmode> 3 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+(define_insn \"<avx512>_fixupimm<mode>_mask<round_saeonly_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_AVX512VL\n+          (unspec:VF_AVX512VL\n+            [(match_operand:VF_AVX512VL 1 \"register_operand\" \"0\")\n+\t     (match_operand:VF_AVX512VL 2 \"register_operand\" \"v\")\n+             (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n              (match_operand:SI 4 \"const_0_to_255_operand\")]\n              UNSPEC_FIXUPIMM)\n \t  (match_dup 1)\n@@ -7323,10 +7325,10 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"avx512f_rndscale<mode><mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+(define_insn \"<avx512>_rndscale<mode><mask_name><round_saeonly_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_AVX512VL\n+\t  [(match_operand:VF_AVX512VL 1 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_AVX512F\"\n@@ -16752,18 +16754,18 @@\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_getmant<mode><mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+(define_insn \"<avx512>_getmant<mode><mask_name><round_saeonly_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VF_AVX512VL\n+\t  [(match_operand:VF_AVX512VL 1 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 2 \"const_0_to_15_operand\")]\n \t  UNSPEC_GETMANT))]\n   \"TARGET_AVX512F\"\n   \"vgetmant<ssemodesuffix>\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\";\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_getmant<mode><round_saeonly_name>\"\n+(define_insn \"avx512f_vgetmant<mode><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128"}]}