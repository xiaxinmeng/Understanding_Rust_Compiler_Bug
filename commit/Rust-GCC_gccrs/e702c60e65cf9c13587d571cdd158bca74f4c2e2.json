{"sha": "e702c60e65cf9c13587d571cdd158bca74f4c2e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcwMmM2MGU2NWNmOWMxMzU4N2Q1NzFjZGQxNThiY2E3NGY0YzJlMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-04T21:26:58Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-05T06:06:16Z"}, "message": "libcc1: use std::vector when building function types\n\nThis changes libcc1 to use std::vector in the code that builds\nfunction types.  This avoids some explicit memory management.\n\nlibcc1\n\n\t* libcp1plugin.cc (plugin_build_function_type): Use std::vector.\n\t* libcc1plugin.cc (plugin_build_function_type): Use std::vector.", "tree": {"sha": "31d006d9df56bda3152d914660c879297844adab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31d006d9df56bda3152d914660c879297844adab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e702c60e65cf9c13587d571cdd158bca74f4c2e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e702c60e65cf9c13587d571cdd158bca74f4c2e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e702c60e65cf9c13587d571cdd158bca74f4c2e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e702c60e65cf9c13587d571cdd158bca74f4c2e2/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "410d5719b78519d8c53855a4c789cc0d656b480a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410d5719b78519d8c53855a4c789cc0d656b480a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410d5719b78519d8c53855a4c789cc0d656b480a"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "65e748258f40e80544379fcd602c6cd50e8dfdb8", "filename": "libcc1/libcc1plugin.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e702c60e65cf9c13587d571cdd158bca74f4c2e2/libcc1%2Flibcc1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e702c60e65cf9c13587d571cdd158bca74f4c2e2/libcc1%2Flibcc1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1plugin.cc?ref=e702c60e65cf9c13587d571cdd158bca74f4c2e2", "patch": "@@ -67,6 +67,8 @@\n #include \"rpc.hh\"\n #include \"gcc-c-interface.h\"\n \n+#include <vector>\n+\n #ifdef __GNUC__\n #pragma GCC visibility push(default)\n #endif\n@@ -672,24 +674,21 @@ plugin_build_function_type (cc1_plugin::connection *self,\n \t\t\t    const struct gcc_type_array *argument_types_in,\n \t\t\t    int is_varargs)\n {\n-  tree *argument_types;\n   tree return_type = convert_in (return_type_in);\n   tree result;\n \n-  argument_types = new tree[argument_types_in->n_elements];\n+  std::vector<tree> argument_types (argument_types_in->n_elements);\n   for (int i = 0; i < argument_types_in->n_elements; ++i)\n     argument_types[i] = convert_in (argument_types_in->elements[i]);\n \n   if (is_varargs)\n     result = build_varargs_function_type_array (return_type,\n \t\t\t\t\t\targument_types_in->n_elements,\n-\t\t\t\t\t\targument_types);\n+\t\t\t\t\t\targument_types.data ());\n   else\n     result = build_function_type_array (return_type,\n \t\t\t\t\targument_types_in->n_elements,\n-\t\t\t\t\targument_types);\n-\n-  delete[] argument_types;\n+\t\t\t\t\targument_types.data ());\n \n   plugin_context *ctx = static_cast<plugin_context *> (self);\n   return convert_out (ctx->preserve (result));"}, {"sha": "1fc8e269f0759968dd990cef8a5192129dea6aef", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e702c60e65cf9c13587d571cdd158bca74f4c2e2/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e702c60e65cf9c13587d571cdd158bca74f4c2e2/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=e702c60e65cf9c13587d571cdd158bca74f4c2e2", "patch": "@@ -70,6 +70,8 @@\n #include \"marshall-cp.hh\"\n #include \"rpc.hh\"\n \n+#include <vector>\n+\n #ifdef __GNUC__\n #pragma GCC visibility push(default)\n #endif\n@@ -1980,24 +1982,21 @@ plugin_build_function_type (cc1_plugin::connection *self,\n \t\t\t    const struct gcc_type_array *argument_types_in,\n \t\t\t    int is_varargs)\n {\n-  tree *argument_types;\n   tree return_type = convert_in (return_type_in);\n   tree result;\n \n-  argument_types = new tree[argument_types_in->n_elements];\n+  std::vector<tree> argument_types (argument_types_in->n_elements);\n   for (int i = 0; i < argument_types_in->n_elements; ++i)\n     argument_types[i] = convert_in (argument_types_in->elements[i]);\n \n   if (is_varargs)\n     result = build_varargs_function_type_array (return_type,\n \t\t\t\t\t\targument_types_in->n_elements,\n-\t\t\t\t\t\targument_types);\n+\t\t\t\t\t\targument_types.data ());\n   else\n     result = build_function_type_array (return_type,\n \t\t\t\t\targument_types_in->n_elements,\n-\t\t\t\t\targument_types);\n-\n-  delete[] argument_types;\n+\t\t\t\t\targument_types.data ());\n \n   plugin_context *ctx = static_cast<plugin_context *> (self);\n   return convert_out (ctx->preserve (result));"}]}