{"sha": "ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NmYzRjOTFiYjM4YWU5MWU0ZmUyMDZmY2E2NTczNjZlNWY3Y2FhNw==", "commit": {"author": {"name": "Ollie Wild", "email": "aaw@google.com", "date": "2007-07-30T18:29:20Z"}, "committer": {"name": "Ollie Wild", "email": "aaw@gcc.gnu.org", "date": "2007-07-30T18:29:20Z"}, "message": "directives-only.c: New file.\n\n\tlibcpp/\n\t* directives-only.c: New file.\n\t* internal.h (struct _cpp_dir_only_callbacks): New.\n\t(_cpp_preprocess_dir_only): New function.\n\t* directives.c (_cpp_handle_directive): Check directives_only before\n\tdisabling execution of indented directives.\n\t* files.c (_cpp_stack_file): Add directives_only check.\n\t* include/cpplib.h (struct cpp_options): Add directives_only.\n\t(cpp_init_special_builtins): New function.\n\t* init.c (cpp_init_special_builtins): New function.\n\t(cpp_init_builtins): Move builtin_array initialization to\n\tcpp_init_special_builtins.\n\t(post_options): Check directives_only before setting\n\tpfile->state.prevent_expansion = 1.\n\t* macro.c (_cpp_builtin_macro_text): Print an error if __COUNTER__\n\tis expanded inside a directive while -fdirectives-only is enabled.\n\t* Makefile.in (libcpp_a_OBJS): Add directives-only.o.\n\t(libcpp_a_SOURCES): Add directives-only.c.\n\n\tgcc/\n\t* c-ppoutput.c (print_lines_directives_only): New function.\n\t(scan_translation_unit_directives_only): New function.\n\t(preprocess_file): Add call to scan_translation_unit_directives_only.\n\t* c-opts.c (c_common_handle_option): Add OPT_fdirectives_only.\n\t(sanitize_cpp_opts): Add default flag_dump_macros setting for\n\t-fdirectives-only.  Add errors for -fdirectives-only conflict with\n\t-Wunused-macros and -traditional.\n\t(finish_options): Add builtin macro initialization for\n\t-fdirectives-only + -fpreprocessed.\n\t* c.opt (fdirectives-only): New.\n\t* doc/cppopts.texi (fdirectives-only): New.\n\n\tgcc/testsuite/\n\t* gcc.dg/cpp/counter-2.c: New test.\n\t* gcc.dg/cpp/counter-3.c: New test.\n\t* gcc.dg/cpp/dir-only-1.c: New test.\n\t* gcc.dg/cpp/dir-only-1.h: New file.\n\t* gcc.dg/cpp/dir-only-2.c: New test.\n\t* gcc.dg/cpp/dir-only-3.c: New test.\n\t* gcc.dg/cpp/dir-only-3a.h: New file.\n\t* gcc.dg/cpp/dir-only-3b.h: New file.\n\t* gcc.dg/cpp/dir-only-4.c: New test.\n\t* gcc.dg/cpp/dir-only-5.c: New test.\n\t* gcc.dg/cpp/dir-only-6.c: New test.\n\nFrom-SVN: r127066", "tree": {"sha": "bb584ffda6bfb46d8b03b533da0e2f408e0bbd23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb584ffda6bfb46d8b03b533da0e2f408e0bbd23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/comments", "author": {"login": "olliewild", "id": 11523068, "node_id": "MDQ6VXNlcjExNTIzMDY4", "avatar_url": "https://avatars.githubusercontent.com/u/11523068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olliewild", "html_url": "https://github.com/olliewild", "followers_url": "https://api.github.com/users/olliewild/followers", "following_url": "https://api.github.com/users/olliewild/following{/other_user}", "gists_url": "https://api.github.com/users/olliewild/gists{/gist_id}", "starred_url": "https://api.github.com/users/olliewild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olliewild/subscriptions", "organizations_url": "https://api.github.com/users/olliewild/orgs", "repos_url": "https://api.github.com/users/olliewild/repos", "events_url": "https://api.github.com/users/olliewild/events{/privacy}", "received_events_url": "https://api.github.com/users/olliewild/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7bc980e1d9410f6182088fe4b60f125634e71941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc980e1d9410f6182088fe4b60f125634e71941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bc980e1d9410f6182088fe4b60f125634e71941"}], "stats": {"total": 589, "additions": 572, "deletions": 17}, "files": [{"sha": "a2371b0fbb37a82bb08b90034f01d854b702876a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -1,3 +1,17 @@\n+2007-07-30  Ollie Wild  <aaw@google.com>\n+\n+\t* c-ppoutput.c (print_lines_directives_only): New function.\n+\t(scan_translation_unit_directives_only): New function.\n+\t(preprocess_file): Add call to scan_translation_unit_directives_only.\n+\t* c-opts.c (c_common_handle_option): Add OPT_fdirectives_only.\n+\t(sanitize_cpp_opts): Add default flag_dump_macros setting for\n+\t-fdirectives-only.  Add errors for -fdirectives-only conflict with\n+\t-Wunused-macros and -traditional.\n+\t(finish_options): Add builtin macro initialization for\n+\t-fdirectives-only + -fpreprocessed.\n+\t* c.opt (fdirectives-only): New.\n+\t* doc/cppopts.texi (fdirectives-only): New.\n+\n 2007-07-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alias.c (record_set, memory_modified_1): Constify."}, {"sha": "a637ffc70c5cb9ff3aa387c9031913b4494159f6", "filename": "gcc/c-opts.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -618,6 +618,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \tdisable_builtin_function (arg);\n       break;\n \n+    case OPT_fdirectives_only:\n+      cpp_opts->directives_only = 1;\n+      break;\n+\n     case OPT_fdollars_in_identifiers:\n       cpp_opts->dollars_in_ident = value;\n       break;\n@@ -1406,6 +1410,11 @@ sanitize_cpp_opts (void)\n   if (flag_dump_macros == 'M')\n     flag_no_output = 1;\n \n+  /* By default, -fdirectives-only implies -dD.  This allows subsequent phases\n+     to perform proper macro expansion.  */\n+  if (cpp_opts->directives_only && !cpp_opts->preprocessed && !flag_dump_macros)\n+    flag_dump_macros = 'D';\n+\n   /* Disable -dD, -dN and -dI if normal output is suppressed.  Allow\n      -dM since at least glibc relies on -M -dM to work.  */\n   /* Also, flag_no_output implies flag_no_line_commands, always.  */\n@@ -1436,6 +1445,14 @@ sanitize_cpp_opts (void)\n      actually output the current directory?  */\n   if (flag_working_directory == -1)\n     flag_working_directory = (debug_info_level != DINFO_LEVEL_NONE);\n+\n+  if (cpp_opts->directives_only)\n+    {\n+      if (warn_unused_macros)\n+\terror (\"-fdirectives-only is incompatible with -Wunused_macros\");\n+      if (cpp_opts->traditional)\n+\terror (\"-fdirectives-only is incompatible with -traditional\");\n+    }\n }\n \n /* Add include path with a prefix at the front of its name.  */\n@@ -1519,6 +1536,8 @@ finish_options (void)\n \t    }\n \t}\n     }\n+  else if (cpp_opts->directives_only)\n+    cpp_init_special_builtins (parse_in);\n \n   include_cursor = 0;\n   push_command_line_include ();"}, {"sha": "22ee0f6a887b81a4d9fe7c6ce9870c936b658023", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -41,6 +41,8 @@ static struct\n \n /* General output routines.  */\n static void scan_translation_unit (cpp_reader *);\n+static void print_lines_directives_only (int, const void *, size_t);\n+static void scan_translation_unit_directives_only (cpp_reader *);\n static void scan_translation_unit_trad (cpp_reader *);\n static void account_for_newlines (const unsigned char *, size_t);\n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n@@ -75,6 +77,9 @@ preprocess_file (cpp_reader *pfile)\n     }\n   else if (cpp_get_options (pfile)->traditional)\n     scan_translation_unit_trad (pfile);\n+  else if (cpp_get_options (pfile)->directives_only\n+\t   && !cpp_get_options (pfile)->preprocessed)\n+    scan_translation_unit_directives_only (pfile);\n   else\n     scan_translation_unit (pfile);\n \n@@ -179,6 +184,26 @@ scan_translation_unit (cpp_reader *pfile)\n     }\n }\n \n+static void\n+print_lines_directives_only (int lines, const void *buf, size_t size)\n+{\n+  print.src_line += lines;\n+  fwrite (buf, 1, size, print.outf);\n+}\n+\n+/* Writes out the preprocessed file, handling spacing and paste\n+   avoidance issues.  */\n+static void\n+scan_translation_unit_directives_only (cpp_reader *pfile)\n+{\n+  struct _cpp_dir_only_callbacks cb;\n+\n+  cb.print_lines = print_lines_directives_only;\n+  cb.maybe_print_line = maybe_print_line;\n+\n+  _cpp_preprocess_dir_only (pfile, &cb);\n+}\n+\n /* Adjust print.src_line for newlines embedded in output.  */\n static void\n account_for_newlines (const unsigned char *str, size_t len)"}, {"sha": "37c55bedadf6627647214e16ba27a8e8d8c1feb1", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -523,6 +523,10 @@ fdefault-inline\n C++ ObjC++\n Inline member functions by default\n \n+fdirectives-only\n+C ObjC C++ ObjC++\n+Preprocess directives only.\n+\n fdollars-in-identifiers\n C ObjC C++ ObjC++\n Permit '$' as an identifier character"}, {"sha": "dbc8f0e6e67f713e722af290f3565204b89dcc93", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -518,6 +518,28 @@ Search @var{dir} only for header files requested with\n If @var{dir} begins with @code{=}, then the @code{=} will be replaced\n by the sysroot prefix; see @option{--sysroot} and @option{-isysroot}.\n \n+@item -fdirectives-only\n+@opindex fdirectives-only\n+When preprocessing, handle directives, but do not expand macros.\n+\n+The option's behavior depends on the @option{-E} and @option{-fpreprocessed}\n+options.\n+\n+With @option{-E}, preprocessing is limited to the handling of directives\n+such as @code{#define}, @code{#ifdef}, and @code{#error}.  Other\n+preprocessor operations, such as macro expansion and trigraph\n+conversion are not performed.  In addition, the @option{-dD} option is\n+implicitly enabled.\n+\n+With @option{-fpreprocessed}, predefinition of command line and most\n+builtin macros is disabled.  Macros such as @code{__LINE__}, which are\n+contextually dependent, are handled normally.  This enables compilation of\n+files previously preprocessed with @code{-E -fdirectives-only}.\n+\n+With both @option{-E} and @option{-fpreprocessed}, the rules for\n+@option{-fpreprocessed} take precedence.  This enables full preprocessing of\n+files previously preprocessed with @code{-E -fdirectives-only}.\n+\n @item -fdollars-in-identifiers\n @opindex fdollars-in-identifiers\n @anchor{fdollars-in-identifiers}"}, {"sha": "7d6cd5e7a38d0b795f865f7e551ce2bd3ce26dce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -1,3 +1,17 @@\n+2007-07-30  Ollie Wild  <aaw@google.com>\n+\n+\t* gcc.dg/cpp/counter-2.c: New test.\n+\t* gcc.dg/cpp/counter-3.c: New test.\n+\t* gcc.dg/cpp/dir-only-1.c: New test.\n+\t* gcc.dg/cpp/dir-only-1.h: New file.\n+\t* gcc.dg/cpp/dir-only-2.c: New test.\n+\t* gcc.dg/cpp/dir-only-3.c: New test.\n+\t* gcc.dg/cpp/dir-only-3a.h: New file.\n+\t* gcc.dg/cpp/dir-only-3b.h: New file.\n+\t* gcc.dg/cpp/dir-only-4.c: New test.\n+\t* gcc.dg/cpp/dir-only-5.c: New test.\n+\t* gcc.dg/cpp/dir-only-6.c: New test.\n+\n 2007-07-30  Julian Brown  <julian@codesourcery.com>\n \n \t* gcc.target/arm/neon/v*.c: Regenerate."}, {"sha": "7d6578d9ce378a7e71bb27664ac0e1b55cfdd8d3", "filename": "gcc/testsuite/gcc.dg/cpp/counter-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-2.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,14 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options -fdirectives-only } */\n+\n+/* Tests __COUNTER__ macro expansion is disabled inside directives with\n+   -fdirectives-only. */\n+\n+#ifdef __COUNTER__  /* Macro not expanded. */\n+#endif\n+\n+#if __COUNTER__ == 0  /* { dg-error \"__COUNTER__ expanded inside directive with -fdirectives-only\" } */\n+#endif"}, {"sha": "3b1824f25d58b0a19678326b5eb5a335556bf0f7", "filename": "gcc/testsuite/gcc.dg/cpp/counter-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcounter-3.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,10 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fdirectives-only -fpreprocessed\" } */\n+\n+/* Tests __COUNTER__ macro expansion is enabled outside directives with\n+   -fdirectives-only. */\n+\n+int zero = __COUNTER__;"}, {"sha": "3c2261683c90cc90f5caa1eb5cb330fbcf161108", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-1.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-1.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,73 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options -fdirectives-only } */\n+\n+/* Tests scan_translation_unit_directives_only()'s handling of corner cases. */\n+\n+/* Ignore directives inside block comments...\n+#error directive inside block comment\n+*/\n+\n+// Escaped newline doesn't terminate line comment \\\n+#error directive inside line comment\n+\n+/* A comment canot start inside a string. */\n+const char *c1 = \"/*\";\n+#define NOT_IN_COMMENT\n+const char *c2 = \"*/\";\n+#ifndef NOT_IN_COMMENT\n+#error Comment started inside a string literal\n+#endif\n+\n+/* Escaped newline handling. */\n+int i; \\\n+#error ignored escaped newline\n+  \\\n+  \\\n+#define BOL\n+#ifndef BOL\n+#error escaped newline did not preserve beginning of line\n+#endif\n+\n+/* Handles \\\\ properly at the end of a string. */\n+\"string ends in \\\\\"/*\n+#error Missed string terminator.\n+*/\n+\n+/* Handles macro expansion in preprocessing directives. */\n+#define HEADER \"dir-only-1.h\"\n+#include HEADER\n+#ifndef GOT_HEADER\n+#error Failed to include header.\n+#endif\n+\n+/\\\n+*\n+#define IN_COMMENT\n+*/\n+#ifdef IN_COMMENT\n+#error Escaped newline breaks block comment initiator.\n+#endif\n+\n+/*\n+*\\\n+/\n+#define NOT_IN_COMMENT2\n+/**/\n+#ifndef NOT_IN_COMMENT2\n+#error Escaped newline breaks block comment terminator.\n+#endif\n+\n+/* Test escaped newline inside character escape sequence. */\n+\"\\\\\n+\\\"/*\n+#error Missed string terminator\n+*/\n+\n+/* Block comments don't mask trailing preprocessing\n+   directive. */ #define NOT_MASKED\n+#ifndef NOT_MASKED\n+#error Comment masks trailing directive.\n+#endif"}, {"sha": "96dbcc0483ce770e9182df5d36a5a52c84c6e3d4", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-1.h", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-1.h?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,3 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+#define GOT_HEADER"}, {"sha": "489b4d6ee3455554ed3a365dfd034d63e0900f26", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-2.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,12 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fpreprocessed -fdirectives-only -DNOT_SET\" } */\n+\n+/* Tests -fdirectives-only + -fpreprocessed. */\n+\n+/* Check this is not defined. */\n+#ifdef NOT_SET\n+#error Command line macro not disabled.\n+#endif"}, {"sha": "e6eaa018096281a5be47b9c8ed98f343e4557f98", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,13 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fdirectives-only -H\" } */\n+/* { dg-message \"dir-only-3a\\.h\\n\\[^\\n\\]*dir-only-3b\\.h\\n\\[^\\n\\]*dir-only-3a\\.h\\n\" \"include guard check\" { target *-*-* } 0 } */\n+\n+/* Tests include guards. */\n+\n+#include \"dir-only-3a.h\"\n+#include \"dir-only-3b.h\"\n+#include \"dir-only-3b.h\"\n+#include \"dir-only-3a.h\""}, {"sha": "6644bbfb0d4999681c52c5c9fd9f7b34e514934f", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-3a.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3a.h?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,8 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+extern int outside_guard\n+\n+#ifndef DIR_ONLY_3A_H\n+#define DIR_ONLY_3A_H\n+#endif"}, {"sha": "4edaa7b6ba5f9ab672501ba955e55da07dd62c1b", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-3b.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-3b.h?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,9 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+#ifndef DIR_ONLY_3B_H\n+#define DIR_ONLY_3B_H\n+\n+extern int inside guard;\n+\n+#endif"}, {"sha": "a7b5f048f5c5f50765c0447b289ca644f923ef85", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-4.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,6 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fdirectives-only -Wunused-macros\" } */\n+/* { dg-error \"-fdirectives-only is incompatible with -Wunused_macros\\n\" \"-Wunused-macros check\" { target *-*-* } 0 } */"}, {"sha": "643a4d7ad36db1700c1be8e9d626301e90d7a285", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-5.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,6 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fdirectives-only -traditional\" } */\n+/* { dg-error \"-fdirectives-only is incompatible with -traditional\\n\" \"-traditional check\" { target *-*-* } 0 } */"}, {"sha": "0023205faf756c745ffdd9a49e8b50f02a05e131", "filename": "gcc/testsuite/gcc.dg/cpp/dir-only-6.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdir-only-6.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,7 @@\n+/* Copyright 2007 Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options -fdirectives-only } */\n+\n+/* { dg-error \"unterminated comment\" }"}, {"sha": "0157cf3cee252fb543fc5104cff68f81bbfe050a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -1,3 +1,23 @@\n+2007-07-30  Ollie Wild  <aaw@google.com>\n+\n+\t* directives-only.c: New file.\n+\t* internal.h (struct _cpp_dir_only_callbacks): New.\n+\t(_cpp_preprocess_dir_only): New function.\n+\t* directives.c (_cpp_handle_directive): Check directives_only before\n+\tdisabling execution of indented directives.\n+\t* files.c (_cpp_stack_file): Add directives_only check.\n+\t* include/cpplib.h (struct cpp_options): Add directives_only.\n+\t(cpp_init_special_builtins): New function.\n+\t* init.c (cpp_init_special_builtins): New function.\n+\t(cpp_init_builtins): Move builtin_array initialization to\n+\tcpp_init_special_builtins.\n+\t(post_options): Check directives_only before setting\n+\tpfile->state.prevent_expansion = 1.\n+\t* macro.c (_cpp_builtin_macro_text): Print an error if __COUNTER__\n+\tis expanded inside a directive while -fdirectives-only is enabled.\n+\t* Makefile.in (libcpp_a_OBJS): Add directives-only.o.\n+\t(libcpp_a_SOURCES): Add directives-only.c.\n+\n 2007-07-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* traditional.c (_cpp_scan_out_logical_line): Initialize"}, {"sha": "960a42d56e3f24e8b12968282201067c484df60b", "filename": "libcpp/Makefile.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FMakefile.in?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -69,14 +69,14 @@ INCLUDES = -I$(srcdir) -I. -I$(srcdir)/../include @INCINTL@ \\\n \n ALL_CFLAGS = $(CFLAGS) $(WARN_CFLAGS) $(INCLUDES) $(CPPFLAGS)\n \n-libcpp_a_OBJS = charset.o directives.o errors.o expr.o files.o \\\n-\tidentifiers.o init.o lex.o line-map.o macro.o mkdeps.o \\\n-\tpch.o symtab.o traditional.o\n+libcpp_a_OBJS = charset.o directives.o directives-only.o errors.o \\\n+\texpr.o files.o identifiers.o init.o lex.o line-map.o macro.o \\\n+\tmkdeps.o pch.o symtab.o traditional.o\n makedepend_OBJS = makedepend.o\n \n-libcpp_a_SOURCES = charset.c directives.c errors.c expr.c files.c \\\n-\tidentifiers.c init.c lex.c line-map.c macro.c mkdeps.c \\\n-\tpch.c symtab.c traditional.c\n+libcpp_a_SOURCES = charset.c directives.c directives-only.c errors.c \\\n+\texpr.c files.c identifiers.c init.c lex.c line-map.c macro.c \\\n+\tmkdeps.c pch.c symtab.c traditional.c\n \n all: libcpp.a makedepend$(EXEEXT) $(USED_CATALOGS)\n "}, {"sha": "d50cebbdae3c5696019cfe4c5c194913e522ed5f", "filename": "libcpp/directives-only.c", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Fdirectives-only.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Fdirectives-only.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives-only.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -0,0 +1,240 @@\n+/* CPP Library - directive only preprocessing for distributed compilation.\n+   Copyright (C) 2007\n+   Free Software Foundation, Inc.\n+   Contributed by Ollie Wild <aaw@google.com>.\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"cpplib.h\"\n+#include \"internal.h\"\n+\n+/* DO (Directive only) flags. */\n+#define DO_BOL\t\t (1 << 0) /* At the beginning of a logical line. */\n+#define DO_STRING\t (1 << 1) /* In a string constant. */\n+#define DO_CHAR\t\t (1 << 2) /* In a character constant. */\n+#define DO_BLOCK_COMMENT (1 << 3) /* In a block comment. */\n+#define DO_LINE_COMMENT\t (1 << 4) /* In a single line \"//-style\" comment. */\n+\n+#define DO_LINE_SPECIAL (DO_STRING | DO_CHAR | DO_LINE_COMMENT)\n+#define DO_SPECIAL\t(DO_LINE_SPECIAL | DO_BLOCK_COMMENT)\n+\n+/* Writes out the preprocessed file, handling spacing and paste\n+   avoidance issues.  */\n+void\n+_cpp_preprocess_dir_only (cpp_reader *pfile,\n+\t\t\t  const struct _cpp_dir_only_callbacks *cb)\n+{\n+  struct cpp_buffer *buffer;\n+  const unsigned char *cur, *base, *next_line, *rlimit;\n+  cppchar_t c, last_c;\n+  unsigned flags;\n+  int lines, col;\n+  source_location loc;\n+\n+ restart:\n+  /* Buffer initialization ala _cpp_clean_line(). */\n+  buffer = pfile->buffer;\n+  buffer->cur_note = buffer->notes_used = 0;\n+  buffer->cur = buffer->line_base = buffer->next_line;\n+  buffer->need_line = false;\n+\n+  /* This isn't really needed.  It prevents a compiler warning, though. */\n+  loc = pfile->line_table->highest_line;\n+\n+  /* Scan initialization. */\n+  next_line = cur = base = buffer->cur;\n+  rlimit = buffer->rlimit;\n+  flags = DO_BOL;\n+  lines = 0;\n+  col = 1;\n+\n+  for (last_c = '\\n', c = *cur; cur < rlimit; last_c = c, c = *++cur, ++col)\n+    {\n+      /* Skip over escaped newlines. */\n+      if (__builtin_expect (c == '\\\\', false))\n+\t{\n+\t  const unsigned char *tmp = cur + 1;\n+\n+\t  while (is_nvspace (*tmp) && tmp < rlimit)\n+\t    tmp++;\n+\t  if (*tmp == '\\r')\n+\t    tmp++;\n+\t  if (*tmp == '\\n' && tmp < rlimit)\n+\t    {\n+\t      CPP_INCREMENT_LINE (pfile, 0);\n+\t      lines++;\n+\t      col = 0;\n+\t      cur = tmp;\n+\t      c = last_c;\n+\t      continue;\n+\t    }\n+\t}\n+\n+      if (__builtin_expect (last_c == '#', false) && !(flags & DO_SPECIAL))\n+\t{\n+\t  if (c != '#' && (flags & DO_BOL))\n+\t  {\n+\t    struct line_maps *line_table;\n+\n+\t    if (!pfile->state.skipping && next_line != base)\n+\t      cb->print_lines (lines, base, next_line - base);\n+\n+\t    /* Prep things for directive handling. */\n+\t    buffer->next_line = cur;\n+\t    buffer->need_line = true;\n+\t    _cpp_get_fresh_line (pfile);\n+\n+\t    /* Ensure proper column numbering for generated error messages. */\n+\t    buffer->line_base -= col - 1;\n+\n+\t    _cpp_handle_directive (pfile, 0 /* ignore indented */);\n+\n+\t    /* Sanitize the line settings.  Duplicate #include's can mess\n+\t       things up. */\n+\t    line_table = pfile->line_table;\n+\t    line_table->highest_location = line_table->highest_line;\n+\n+\t    /* The if block prevents us from outputing line information when\n+\t       the file ends with a directive and no newline.  Note that we\n+\t       must use pfile->buffer, not buffer. */\n+\t    if (pfile->buffer->next_line < pfile->buffer->rlimit)\n+\t      cb->maybe_print_line (pfile->line_table->highest_line);\n+\n+\t    goto restart;\n+\t  }\n+\n+\t  flags &= ~DO_BOL;\n+\t  pfile->mi_valid = false;\n+\t}\n+      else if (__builtin_expect (last_c == '/', false) \\\n+\t       && !(flags & DO_SPECIAL) && c != '*' && c != '/')\n+\t{\n+\t  /* If a previous slash is not starting a block comment, clear the\n+\t     DO_BOL flag.  */\n+\t  flags &= ~DO_BOL;\n+\t  pfile->mi_valid = false;\n+\t}\n+\n+      switch (c)\n+\t{\n+\tcase '/':\n+\t  if ((flags & DO_BLOCK_COMMENT) && last_c == '*')\n+\t    {\n+\t      flags &= ~DO_BLOCK_COMMENT;\n+\t      c = 0;\n+\t    }\n+\t  else if (!(flags & DO_SPECIAL) && last_c == '/')\n+\t    flags |= DO_LINE_COMMENT;\n+\t  else if (!(flags & DO_SPECIAL))\n+\t    /* Mark the position for possible error reporting. */\n+\t    LINEMAP_POSITION_FOR_COLUMN (loc, pfile->line_table, col);\n+\n+\t  break;\n+\n+\tcase '*':\n+\t  if (!(flags & DO_SPECIAL))\n+\t    {\n+\t      if (last_c == '/')\n+\t\tflags |= DO_BLOCK_COMMENT;\n+\t      else\n+\t\t{\n+\t\t  flags &= ~DO_BOL;\n+\t\t  pfile->mi_valid = false;\n+\t\t}\n+\t    }\n+\n+\t  break;\n+\n+\tcase '\\'':\n+\tcase '\"':\n+\t  {\n+\t    unsigned state = (c == '\"') ? DO_STRING : DO_CHAR;\n+\n+\t    if (!(flags & DO_SPECIAL))\n+\t      {\n+\t\tflags |= state;\n+\t\tflags &= ~DO_BOL;\n+\t\tpfile->mi_valid = false;\n+\t      }\n+\t    else if ((flags & state) && last_c != '\\\\')\n+\t      flags &= ~state;\n+\n+\t    break;\n+\t  }\n+\n+\tcase '\\\\':\n+\t  {\n+\t    if ((flags & (DO_STRING | DO_CHAR)) && last_c == '\\\\')\n+\t      c = 0;\n+\n+\t    if (!(flags & DO_SPECIAL))\n+\t      {\n+\t\tflags &= ~DO_BOL;\n+\t\tpfile->mi_valid = false;\n+\t      }\n+\n+\t    break;\n+\t  }\n+\n+\tcase '\\n':\n+\t  CPP_INCREMENT_LINE (pfile, 0);\n+\t  lines++;\n+\t  col = 0;\n+\t  flags &= ~DO_LINE_SPECIAL;\n+\t  if (!(flags & DO_SPECIAL))\n+\t    flags |= DO_BOL;\n+\t  break;\n+\n+\tcase '#':\n+\t  next_line = cur;\n+\t  /* Don't update DO_BOL yet. */\n+\t  break;\n+\n+\tcase ' ': case '\\t': case '\\f': case '\\v': case '\\0':\n+\t  break;\n+\n+\tdefault:\n+\t  if (!(flags & DO_SPECIAL))\n+\t    {\n+\t      flags &= ~DO_BOL;\n+\t      pfile->mi_valid = false;\n+\t    }\n+\t  break;\n+\t}\n+    }\n+\n+  if (flags & DO_BLOCK_COMMENT)\n+    cpp_error_with_line (pfile, CPP_DL_ERROR, loc, 0, \"unterminated comment\");\n+\n+  if (!pfile->state.skipping && cur != base)\n+    {\n+      /* If the file was not newline terminated, add rlimit, which is\n+         guaranteed to point to a newline, to the end of our range.  */\n+      if (cur[-1] != '\\n')\n+\t{\n+\t  cur++;\n+\t  CPP_INCREMENT_LINE (pfile, 0);\n+\t  lines++;\n+\t}\n+\n+      cb->print_lines (lines, base, cur - base);\n+    }\n+\n+  _cpp_pop_buffer (pfile);\n+  if (pfile->buffer)\n+    goto restart;\n+}"}, {"sha": "38ca949f8c9561be9e6acb5501ea3a9a6380a72b", "filename": "libcpp/directives.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -424,8 +424,13 @@ _cpp_handle_directive (cpp_reader *pfile, int indented)\n \t does not cause '#define foo bar' to get executed when\n \t compiled with -save-temps, we recognize directives in\n \t -fpreprocessed mode only if the # is in column 1.  macro.c\n-\t puts a space in front of any '#' at the start of a macro.  */\n+\t puts a space in front of any '#' at the start of a macro.\n+\t \n+\t We exclude the -fdirectives-only case because macro expansion\n+\t has not been performed yet, and block comments can cause spaces\n+\t to preceed the directive.  */\n       if (CPP_OPTION (pfile, preprocessed)\n+\t  && !CPP_OPTION (pfile, directives_only)\n \t  && (indented || !(dir->flags & IN_I)))\n \t{\n \t  skip = 0;"}, {"sha": "73f88bb3cde35748f95968c1364426fa9c831329", "filename": "libcpp/files.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -791,7 +791,8 @@ _cpp_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n \n   /* Stack the buffer.  */\n   buffer = cpp_push_buffer (pfile, file->buffer, file->st.st_size,\n-\t\t\t    CPP_OPTION (pfile, preprocessed));\n+\t\t\t    CPP_OPTION (pfile, preprocessed)\n+\t\t\t    && !CPP_OPTION (pfile, directives_only));\n   buffer->file = file;\n   buffer->sysp = sysp;\n "}, {"sha": "2dac4c2d988d1071cf1c51ec00de44b5c266937c", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -440,6 +440,9 @@ struct cpp_options\n \n   /* True means error callback should be used for diagnostics.  */\n   bool client_diagnostic;\n+\n+  /* True disables tokenization outside of preprocessing directives. */\n+  bool directives_only;\n };\n \n /* Callback for header lookup for HEADER, which is the name of a\n@@ -644,6 +647,10 @@ extern struct deps *cpp_get_deps (cpp_reader *);\n    too.  If there was an error opening the file, it returns NULL.  */\n extern const char *cpp_read_main_file (cpp_reader *, const char *);\n \n+/* Set up built-ins with special behavior.  Use cpp_init_builtins()\n+   instead unless your know what you are doing.  */\n+extern void cpp_init_special_builtins (cpp_reader *);\n+\n /* Set up built-ins like __FILE__.  */\n extern void cpp_init_builtins (cpp_reader *, int);\n "}, {"sha": "62f4f95dcf49fb79372bda4ae96cfb52103b7541", "filename": "libcpp/init.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -350,11 +350,8 @@ mark_named_operators (cpp_reader *pfile)\n     }\n }\n \n-/* Read the builtins table above and enter them, and language-specific\n-   macros, into the hash table.  HOSTED is true if this is a hosted\n-   environment.  */\n void\n-cpp_init_builtins (cpp_reader *pfile, int hosted)\n+cpp_init_special_builtins (cpp_reader *pfile)\n {\n   const struct builtin *b;\n   size_t n = ARRAY_SIZE (builtin_array);\n@@ -363,10 +360,7 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n     n -= 2;\n   else if (! CPP_OPTION (pfile, stdc_0_in_system_headers)\n \t   || CPP_OPTION (pfile, std))\n-    {\n-      n--;\n-      _cpp_define_builtin (pfile, \"__STDC__ 1\");\n-    }\n+    n--;\n \n   for (b = builtin_array; b < builtin_array + n; b++)\n     {\n@@ -375,6 +369,20 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n       hp->flags |= NODE_BUILTIN | NODE_WARN;\n       hp->value.builtin = (enum builtin_type) b->value;\n     }\n+}\n+\n+/* Read the builtins table above and enter them, and language-specific\n+   macros, into the hash table.  HOSTED is true if this is a hosted\n+   environment.  */\n+void\n+cpp_init_builtins (cpp_reader *pfile, int hosted)\n+{\n+  cpp_init_special_builtins (pfile);\n+\n+  if (!CPP_OPTION (pfile, traditional)\n+      && (! CPP_OPTION (pfile, stdc_0_in_system_headers)\n+\t  || CPP_OPTION (pfile, std)))\n+    _cpp_define_builtin (pfile, \"__STDC__ 1\");\n \n   if (CPP_OPTION (pfile, cplusplus))\n     _cpp_define_builtin (pfile, \"__cplusplus 1\");\n@@ -622,7 +630,8 @@ post_options (cpp_reader *pfile)\n      preprocessed text.  Read preprocesed source in ISO mode.  */\n   if (CPP_OPTION (pfile, preprocessed))\n     {\n-      pfile->state.prevent_expansion = 1;\n+      if (!CPP_OPTION (pfile, directives_only))\n+\tpfile->state.prevent_expansion = 1;\n       CPP_OPTION (pfile, traditional) = 0;\n     }\n "}, {"sha": "8561088f9054cfdd89e783b842b78266b616f29d", "filename": "libcpp/internal.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -575,6 +575,17 @@ extern void _cpp_do_file_change (cpp_reader *, enum lc_reason, const char *,\n \t\t\t\t unsigned int, unsigned int);\n extern void _cpp_pop_buffer (cpp_reader *);\n \n+/* In directives.c */\n+struct _cpp_dir_only_callbacks\n+{\n+  /* Called to print a block of lines. */\n+  void (*print_lines) (int, const void *, size_t);\n+  void (*maybe_print_line) (source_location);\n+};\n+\n+extern void _cpp_preprocess_dir_only (cpp_reader *,\n+\t\t\t\t      const struct _cpp_dir_only_callbacks *);\n+\n /* In traditional.c.  */\n extern bool _cpp_scan_out_logical_line (cpp_reader *, cpp_macro *);\n extern bool _cpp_read_logical_line_trad (cpp_reader *);"}, {"sha": "f2427172ca0e9944fb855f11cf153a3c5c2b2033", "filename": "libcpp/macro.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfc4c91bb38ae91e4fe206fca657366e5f7caa7/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=ccfc4c91bb38ae91e4fe206fca657366e5f7caa7", "patch": "@@ -265,6 +265,9 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n       break;\n \n     case BT_COUNTER:\n+      if (CPP_OPTION (pfile, directives_only) && pfile->state.in_directive)\n+\tcpp_error (pfile, CPP_DL_ERROR,\n+\t    \"__COUNTER__ expanded inside directive with -fdirectives-only\");\n       number = pfile->counter++;\n       break;\n     }"}]}