{"sha": "7a1929e1dce250f3f6991c995035d32cc3b650e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExOTI5ZTFkY2UyNTBmM2Y2OTkxYzk5NTAzNWQzMmNjM2I2NTBlMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-11-01T14:49:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-11-01T14:49:33Z"}, "message": "3b1.h: Fix comment formatting.\n\n\t* config/m68k/3b1.h: Fix comment formatting.\n\t* config/m68k/3b1g.h: Likewise.\n\t* config/m68k/a-ux.h: Likewise.\n\t* config/m68k/amix.h: Likewise.\n\t* config/m68k/apollo68.h: Likewise.\n\t* config/m68k/atari.h: Likewise.\n\t* config/m68k/aux-exit.c: Likewise.\n\t* config/m68k/ccur-GAS.h: Likewise.\n\t* config/m68k/crds.h: Likewise.\n\t* config/m68k/dpx2.h: Likewise.\n\t* config/m68k/dpx2g.h: Likewise.\n\t* config/m68k/hp310.h: Likewise.\n\t* config/m68k/hp320.h: Likewise.\n\t* config/m68k/isi.h: Likewise.\n\t* config/m68k/linux.h: Likewise.\n\t* config/m68k/lynx.h: Likewise.\n\t* config/m68k/m68k-psos.h: Likewise.\n\t* config/m68k/m68k.c: Likewise.\n\t* config/m68k/m68k.h: Likewise.\n\t* config/m68k/m68k.md: Likewise.\n\t* config/m68k/m68kelf.h: Likewise.\n\t* config/m68k/m68kv4.h: Likewise.\n\t* config/m68k/mot3300.h: Likewise.\n\t* config/m68k/news.h: Likewise.\n\t* config/m68k/next.h: Likewise.\n\t* config/m68k/pbb.h: Likewise.\n\t* config/m68k/plexus.h: Likewise.\n\t* config/m68k/sgs.h: Likewise.\n\t* config/m68k/sun3.h: Likewise.\n\t* config/m68k/tower.h: Likewise.\n\t* config/m68k/vxm68k.h: Likewise.\n\nFrom-SVN: r46692", "tree": {"sha": "aa16e6bce62d6104ff53355393814d3f77676a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa16e6bce62d6104ff53355393814d3f77676a88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1929e1dce250f3f6991c995035d32cc3b650e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1929e1dce250f3f6991c995035d32cc3b650e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1929e1dce250f3f6991c995035d32cc3b650e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1929e1dce250f3f6991c995035d32cc3b650e3/comments", "author": null, "committer": null, "parents": [{"sha": "3c4e7c50811511bb73db16d2838262e0355020ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4e7c50811511bb73db16d2838262e0355020ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4e7c50811511bb73db16d2838262e0355020ce"}], "stats": {"total": 358, "additions": 196, "deletions": 162}, "files": [{"sha": "55f5d46c1d2e9dbdbb4e0d98f2223a9154e4c507", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -1,3 +1,37 @@\n+2001-11-01  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/m68k/3b1.h: Fix comment formatting.\n+\t* config/m68k/3b1g.h: Likewise.\n+\t* config/m68k/a-ux.h: Likewise.\n+\t* config/m68k/amix.h: Likewise.\n+\t* config/m68k/apollo68.h: Likewise.\n+\t* config/m68k/atari.h: Likewise.\n+\t* config/m68k/aux-exit.c: Likewise.\n+\t* config/m68k/ccur-GAS.h: Likewise.\n+\t* config/m68k/crds.h: Likewise.\n+\t* config/m68k/dpx2.h: Likewise.\n+\t* config/m68k/dpx2g.h: Likewise.\n+\t* config/m68k/hp310.h: Likewise.\n+\t* config/m68k/hp320.h: Likewise.\n+\t* config/m68k/isi.h: Likewise.\n+\t* config/m68k/linux.h: Likewise.\n+\t* config/m68k/lynx.h: Likewise.\n+\t* config/m68k/m68k-psos.h: Likewise.\n+\t* config/m68k/m68k.c: Likewise.\n+\t* config/m68k/m68k.h: Likewise.\n+\t* config/m68k/m68k.md: Likewise.\n+\t* config/m68k/m68kelf.h: Likewise.\n+\t* config/m68k/m68kv4.h: Likewise.\n+\t* config/m68k/mot3300.h: Likewise.\n+\t* config/m68k/news.h: Likewise.\n+\t* config/m68k/next.h: Likewise.\n+\t* config/m68k/pbb.h: Likewise.\n+\t* config/m68k/plexus.h: Likewise.\n+\t* config/m68k/sgs.h: Likewise.\n+\t* config/m68k/sun3.h: Likewise.\n+\t* config/m68k/tower.h: Likewise.\n+\t* config/m68k/vxm68k.h: Likewise.\n+\n 2001-10-31  DJ Delorie  <dj@redhat.com>\n \n \t* config/mips/mips.h (mips_cache_flush_func): Prototype."}, {"sha": "31194c82309d34d0d2dbe076cd3a2fb18e52996c", "filename": "gcc/config/m68k/3b1.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2F3b1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2F3b1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -167,7 +167,7 @@ do { long l;\t\t\t\t\t\\\n \n #define ASM_NO_SKIP_IN_TEXT 1\n \n-/* The beginnings of sdb support... */\n+/* The beginnings of sdb support...  */\n \n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, FILENAME) \\\n   do {\tfprintf (FILE, \"\\tfile\\t\");\t\t\\\n@@ -180,7 +180,7 @@ do { long l;\t\t\t\t\t\\\n \t   (sdb_begin_function_line\t\t\\\n \t    ? (LINENO) - sdb_begin_function_line : 1))\n \n-/* Yet another null terminated string format. */\n+/* Yet another null terminated string format.  */\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN) \\\n   do { register int sp = 0, lp = 0; \\\n@@ -380,7 +380,7 @@ do { long l;\t\t\t\t\t\\\n    we want.  This difference can be accommodated by making the assembler\n    define such \"LDnnn\" to be either \"Lnnn-LInnn-2.b\", \"Lnnn\", or any other\n    string, as necessary.  This is accomplished via the ASM_OUTPUT_CASE_END\n-   macro. */\n+   macro.  */\n \n #define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\t\t\\\n { if (switch_table_difference_label_flag)\t\t\t\t\\"}, {"sha": "f13d263e97acbdaf2a7bfc755f18dc3877f1008b", "filename": "gcc/config/m68k/3b1g.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2F3b1g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2F3b1g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1g.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -43,7 +43,7 @@ Boston, MA 02111-1307, USA.  */\n /* This is (not really) BSD, so (but) it wants DBX format.  */\n #define DBX_DEBUGGING_INFO\n \n-/* Brain damage. */\n+/* Brain damage.  */\n #define SCCS_DIRECTIVE\n \n /* Specify how to pad function arguments."}, {"sha": "761bf73e01ae253b43f6a113c8043b26a9e4c25a", "filename": "gcc/config/m68k/a-ux.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fa-ux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fa-ux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fa-ux.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -109,7 +109,7 @@ crt2.o%s \"\n    and how to find (in the caller) the value returned by a function.  VALTYPE\n    is the data type of the value (as a tree).  If the precise function being\n    called is known, FUNC is its FUNCTION_DECL; otherwise, FUNC is 0.\n-   For A/UX generate the result in d0, a0, or fp0 as appropriate. */\n+   For A/UX generate the result in d0, a0, or fp0 as appropriate.  */\n \n #undef FUNCTION_VALUE\n #define FUNCTION_VALUE(VALTYPE, FUNC)                                  \\\n@@ -127,7 +127,7 @@ crt2.o%s \"\n /* 1 if N is a possible register number for a function value.\n    For A/UX allow d0, a0, or fp0 as return registers, for integral,\n    pointer, or floating types, respectively. Reject fp0 if not using a\n-   68881 coprocessor. */\n+   68881 coprocessor.  */\n \n #undef FUNCTION_VALUE_REGNO_P\n #define FUNCTION_VALUE_REGNO_P(N) \\\n@@ -144,7 +144,7 @@ crt2.o%s \"\n    A/UX convention is to copy the value returned for pointer functions\n    from a0 to d0 in the function epilogue, so that callers that have\n    neglected to properly declare the callee can still find the correct return\n-   value. */\n+   value.  */\n \n #define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "d59ad0ffb981dee7289679a2212595ee873230f3", "filename": "gcc/config/m68k/amix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Famix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Famix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Famix.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n /* Names to predefine in the preprocessor for this target machine.  For the\n    Amiga, these definitions match those of the native AT&T compiler.  Note\n    that we override the definition in m68kv4.h, where SVR4 is defined and\n-   AMIX isn't. */\n+   AMIX isn't.  */\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n@@ -95,7 +95,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* This definition of ASM_OUTPUT_ASCII is the same as the one in m68k/sgs.h,\n    which has been overridden by the one in svr4.h.  However, we can't use\n    the one in svr4.h because the amix assembler croaks on some of the\n-   strings that it emits (such as .string \"\\\"%s\\\"\\n\"). */\n+   strings that it emits (such as .string \"\\\"%s\\\"\\n\").  */\n \n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\"}, {"sha": "bd44afab18a9dadd8fb586ce9239bbbd4420b02d", "filename": "gcc/config/m68k/apollo68.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fapollo68.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fapollo68.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fapollo68.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -31,7 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Target switches for the Apollo is the same as in m68k.h, except\n-   there is no Sun FPA. */\n+   there is no Sun FPA.  */\n \n #undef TARGET_SWITCHES\n #define TARGET_SWITCHES  \\\n@@ -138,7 +138,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Specify how to pad function arguments.\n    Arguments are not padded at all; the stack is kept aligned on long\n-   boundaries. */\n+   boundaries.  */\n \n #define FUNCTION_ARG_PADDING(mode, size) none\n \n@@ -152,7 +152,7 @@ Boston, MA 02111-1307, USA.  */\n    a scalar value cannot be returned in registers.\n    For Apollo, anything larger than one integer register is returned\n    using the structure-value mechanism, i.e. objects of DFmode are\n-   returned that way. */\n+   returned that way.  */\n \n #define RETURN_IN_MEMORY(type) \\\n   (TYPE_MODE (type) == BLKmode \\"}, {"sha": "e17530a913fcfdd518c4af8596d5b6213bebc1ed", "filename": "gcc/config/m68k/atari.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fatari.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fatari.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fatari.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"m68k/m68kv4.h\"\n \n-/* Dollars and dots in labels are not allowed. */\n+/* Dollars and dots in labels are not allowed.  */\n \n #define NO_DOLLAR_IN_LABEL\n #define NO_DOT_IN_LABEL\n@@ -55,7 +55,7 @@ int switch_table_difference_label_flag;\n /* This definition of ASM_OUTPUT_ASCII is the same as the one in m68k/sgs.h,\n    which has been overridden by the one in svr4.h.  However, we can't use\n    the one in svr4.h because the ASV assembler croaks on some of the\n-   strings that it emits (such as .string \"\\\"%s\\\"\\n\"). */\n+   strings that it emits (such as .string \"\\\"%s\\\"\\n\").  */\n \n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\"}, {"sha": "b6619d9ece56e03deaa060db1971338d6a8c99a1", "filename": "gcc/config/m68k/aux-exit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Faux-exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Faux-exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-exit.c?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -84,7 +84,7 @@ void exit(int status)\n       if (block == &atexit_fns)\n \tbreak;\n       /* I know what you are thinking -- we are about to exit, why free?\n-\t Because it is friendly to memory leak detectors, that's why. */\n+\t Because it is friendly to memory leak detectors, that's why.  */\n       old_block = block;\n       block = block->next;\n       free(old_block);"}, {"sha": "08909a83ade3a6b9e2669ea4fb5d81bf3da770df", "filename": "gcc/config/m68k/ccur-GAS.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fccur-GAS.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fccur-GAS.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fccur-GAS.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -59,10 +59,10 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (68k, GNU GAS syntax)\");\n \n-/* Discard internal local symbols beginning with 'L'. */\n+/* Discard internal local symbols beginning with 'L'.  */\n #define LINK_SPEC \"-X\"\n \n-/* Every structure or union's size must be a multiple of 4 bytes. */\n+/* Every structure or union's size must be a multiple of 4 bytes.  */\n #define STRUCTURE_SIZE_BOUNDARY 16 \n \n /* No data type wants to be aligned rounder than this.  */\n@@ -81,7 +81,7 @@ Boston, MA 02111-1307, USA.  */\n #undef  FUNCTION_BOUNDARY\n #define FUNCTION_BOUNDARY 32\n \n-/* Make strings long-word aligned so dhrystones will run faster. */\n+/* Make strings long-word aligned so dhrystones will run faster.  */\n #define CONSTANT_ALIGNMENT(EXP, ALIGN) \\\n    (TREE_CODE (EXP) == STRING_CST \\\n     && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))"}, {"sha": "896285a531f4d32005964d9c5f8c4b71b7e0a603", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -86,7 +86,7 @@ Boston, MA 02111-1307, USA.  */\n #define NEED_PROBE (-2048)\n #endif\n \n-/* use memcpy, memset instead of bcopy, etc. */\n+/* use memcpy, memset instead of bcopy, etc.  */\n \n #define TARGET_MEM_FUNCTIONS\n \n@@ -258,7 +258,7 @@ do {  int i;\t\t\t\t\t\t\t\t\\\n        or print pair of registers as rx:ry.\n    'y' for a FPA insn (print pair of registers as rx:ry).  This also outputs\n        CONST_DOUBLE's as SunFPA constant RAM registers if\n-       possible, so it should not be used except for the SunFPA. */\n+       possible, so it should not be used except for the SunFPA.  */\n \n #undef PRINT_OPERAND_PUNCT_VALID_P\n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\"}, {"sha": "84f431df8f7face3064a1fd0ddb242bf727c27b3", "filename": "gcc/config/m68k/dpx2.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -112,7 +112,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Define if you don't want extended real, but do want to use the\n    software floating point emulator for REAL_ARITHMETIC and\n-   decimal <-> binary conversion. */\n+   decimal <-> binary conversion.  */\n #define REAL_ARITHMETIC \n \n #undef ASM_OUTPUT_SOURCE_FILENAME\n@@ -273,7 +273,7 @@ Boston, MA 02111-1307, USA.  */\n     }                                                   \\\n }\n \n-/* This is how to output a `long double' extended real constant. */\n+/* This is how to output a `long double' extended real constant.  */\n #undef ASM_OUTPUT_LONG_DOUBLE \n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n do { long l[3];\t\t\t\t\t\t\t\t\\\n@@ -348,7 +348,7 @@ do { long l;\t\t\t\t\t\t\\\n   asm_fprintf (FILE, \"\\tdc.w %LL%d-%LL%d\\n\", VALUE, REL)\n \n /* Currently, JUMP_TABLES_IN_TEXT_SECTION must be defined in order to\n-   keep switch tables in the text section. */\n+   keep switch tables in the text section.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n /* Output a float value (represented as a C double) as an immediate operand."}, {"sha": "812f6f7cd7eaf84b70977663d0ec08c24e5c0be9", "filename": "gcc/config/m68k/dpx2g.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fdpx2g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fdpx2g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2g.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -10,7 +10,7 @@\n   \"%{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}\\\n   huge.o%s\"\n \n-/* Gas understands dollars in labels. */\n+/* Gas understands dollars in labels.  */\n #undef NO_DOLLAR_IN_LABEL\n /* GAS does not understand .ident so don't output anything for #ident.  */\n #undef ASM_OUTPUT_IDENT"}, {"sha": "8f1d9c7adfddabf9b5eb45e76a69353654931a7e", "filename": "gcc/config/m68k/hp310.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fhp310.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fhp310.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp310.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  HP-UX 68010 version.  */\n \n-/* See m68k.h.  0 means 68000 without 68881 and no bitfields.   */\n+/* See m68k.h.  0 means 68000 without 68881 and no bitfields.  */\n #define\tTARGET_DEFAULT 0\n \n #include \"m68k/hp320.h\""}, {"sha": "ac87eddbe27c427ff380b2494a067f4a4eb5473c", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -79,7 +79,7 @@ Boston, MA 02111-1307, USA.  */\n /* These definitions differ from those used for GAS by defining __HPUX_ASM__.\n    This is needed because some programs, particularly GDB, need to\n    know which assembler is being used so that the correct `asm'\n-   instructions can be used. */\n+   instructions can be used.  */\n \n #define CPP_SPEC \\\n \"%{!msoft-float:-D__HAVE_68881__ }\\\n@@ -133,7 +133,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define STRUCTURE_SIZE_BOUNDARY 16\n \n-/* hpux doesn't use static area for struct returns. */\n+/* hpux doesn't use static area for struct returns.  */\n #undef PCC_STATIC_STRUCT_RETURN\n \n /* Generate calls to memcpy, memcmp and memset.  */\n@@ -621,7 +621,7 @@ do { register int i;\t\t\t\\\n #endif /* not HPUX_ASM */\n \n /* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is an\n-   operand of a function call. */\n+   operand of a function call.  */\n #undef LEGITIMATE_PIC_OPERAND_P\n #define LEGITIMATE_PIC_OPERAND_P(X) \\\n   ((! symbolic_operand (X, VOIDmode) \\"}, {"sha": "e7faced8da6fd0e9faffe96498a40d01d8ee1a7f", "filename": "gcc/config/m68k/isi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fisi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fisi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fisi.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"m68k/m68k.h\"\n \n-/* See m68k.h.  7 means 68020 with 68881. */\n+/* See m68k.h.  7 means 68020 with 68881.  */\n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_BITFIELD|MASK_68881|MASK_68020)\n #endif"}, {"sha": "6c3c8f0ddd06a80e3c5440661e39aa9cdcf53673", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n /* TODO: convert includes to ${tm_file} list in config.gcc.  */\n #include <m68k/m68k.h>\n \n-/* Make sure CC1 is undefined. */\n+/* Make sure CC1 is undefined.  */\n #undef CC1_SPEC\n \n #include \"elfos.h\"\n@@ -61,12 +61,12 @@ Boston, MA 02111-1307, USA.  */\n #define REGISTER_PREFIX \"%\"\n \n /* The prefix for local (compiler generated) labels.\n-   These labels will not appear in the symbol table. */\n+   These labels will not appear in the symbol table.  */\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\"\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\"\n@@ -75,7 +75,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number.\n-   Motorola format uses different register names than defined in m68k.h. */\n+   Motorola format uses different register names than defined in m68k.h.  */\n \n #undef REGISTER_NAMES\n \n@@ -154,7 +154,7 @@ Boston, MA 02111-1307, USA.  */\n    When the -shared link option is used a final link is not being\n    done.  */\n \n-/* If ELF is the default format, we should not use /lib/elf. */\n+/* If ELF is the default format, we should not use /lib/elf.  */\n \n #undef\tLINK_SPEC\n #ifdef USE_GNULIBC_1\n@@ -269,7 +269,7 @@ Boston, MA 02111-1307, USA.  */\n    function.  VALTYPE is the data type of the value (as a tree).  If\n    the precise function being called is known, FUNC is its\n    FUNCTION_DECL; otherwise, FUNC is 0.  For m68k/SVR4 generate the\n-   result in d0, a0, or fp0 as appropriate. */\n+   result in d0, a0, or fp0 as appropriate.  */\n    \n #undef FUNCTION_VALUE\n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n@@ -306,7 +306,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    : gen_rtx_REG ((MODE), 0))\n \n /* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is\n-   an operand of a function call. */\n+   an operand of a function call.  */\n #undef LEGITIMATE_PIC_OPERAND_P\n #define LEGITIMATE_PIC_OPERAND_P(X) \\\n   ((! symbolic_operand (X, VOIDmode) \\\n@@ -326,7 +326,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (flag_pic) flag_no_function_cse = 1;\n \n /* For m68k SVR4, structures are returned using the reentrant\n-   technique. */\n+   technique.  */\n #undef PCC_STATIC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}, {"sha": "92bded348548fbe2defd14d6e22a49293c8ac732", "filename": "gcc/config/m68k/lynx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flynx.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -48,7 +48,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define STRUCTURE_SIZE_BOUNDARY 16\n \n-/* Lynx uses d2 and d3 as scratch registers. */\n+/* Lynx uses d2 and d3 as scratch registers.  */\n #undef CALL_USED_REGISTERS\n #define CALL_USED_REGISTERS \\\n  {1, 1, 1, 1, 0, 0, 0, 0,   \\"}, {"sha": "14f7f68c33f18fea19491a5054fd2567400440cc", "filename": "gcc/config/m68k/m68k-psos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68k-psos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68k-psos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-psos.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -25,19 +25,19 @@ Boston, MA 02111-1307, USA.  */\n \n #define MOTOROLA\n \n-/* Get generic m68k definitions. */\n+/* Get generic m68k definitions.  */\n \n #include \"m68k/m68k.h\"\n #include \"m68k/m68kemb.h\"\n \n /* Default processor type is a (pure) 68040 with 68881 emulation using\n-   the floating-point support package. */\n+   the floating-point support package.  */\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_68040_ONLY|MASK_BITFIELD|MASK_68881|MASK_68020)\n \n /* Options passed to CPP, GAS, CC1 and CC1PLUS. We override\n-   m68k-none.h for consistency with TARGET_DEFAULT. */\n+   m68k-none.h for consistency with TARGET_DEFAULT.  */\n \n #undef CPP_SPEC\n #define CPP_SPEC \\\n@@ -59,7 +59,7 @@ Boston, MA 02111-1307, USA.  */\n  \"%{m68000:%{!m68881:-msoft-float }}%{m68302:-m68000}%{m68332:-m68020 -mnobitfield %{!m68881:-msoft-float}}%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-m68040}}}}}}}}}}\"\n \n \n-/* Get processor-independent pSOS definitions. */\n+/* Get processor-independent pSOS definitions.  */\n \n #include \"psos.h\"\n "}, {"sha": "fc15157cf489ab5a780c71b26fd98a700e19576c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -68,18 +68,18 @@ static void m68k_svr3_asm_out_constructor PARAMS ((rtx, int));\n \f\n \n /* Alignment to use for loops and jumps */\n-/* Specify power of two alignment used for loops. */\n+/* Specify power of two alignment used for loops.  */\n const char *m68k_align_loops_string;\n-/* Specify power of two alignment used for non-loop jumps. */\n+/* Specify power of two alignment used for non-loop jumps.  */\n const char *m68k_align_jumps_string;\n-/* Specify power of two alignment used for functions. */\n+/* Specify power of two alignment used for functions.  */\n const char *m68k_align_funcs_string;\n \n-/* Specify power of two alignment used for loops. */\n+/* Specify power of two alignment used for loops.  */\n int m68k_align_loops;\n-/* Specify power of two alignment used for non-loop jumps. */\n+/* Specify power of two alignment used for non-loop jumps.  */\n int m68k_align_jumps;\n-/* Specify power of two alignment used for functions. */\n+/* Specify power of two alignment used for functions.  */\n int m68k_align_funcs;\n \n /* Nonzero if the last compare/test insn had FP operands.  The\n@@ -290,7 +290,7 @@ m68k_output_function_prologue (stream, size)\n \n       int i;\n \n-      /* Undo the work from above. */\n+      /* Undo the work from above.  */\n       for (i = 0; i< 16; i++)\n         if (mask & (1 << i))\n           fprintf (stream, \"\\tmove.l %s,-(sp)\\n\", reg_names[15 - i]);\n@@ -470,7 +470,7 @@ m68k_output_function_prologue (stream, size)\n \t    {\n \t      if (!TARGET_5200)\n \t\t{\n-\t\t  /* asm_fprintf() cannot handle %. */\n+\t\t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t\t  asm_fprintf (stream, \"\\tsubq.w %0I%d,%Rsp\\n\", fsize + 4);\n #else\n@@ -479,7 +479,7 @@ m68k_output_function_prologue (stream, size)\n \t\t}\n \t      else\n \t\t{\n-\t\t  /* asm_fprintf() cannot handle %. */\n+\t\t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t\t  asm_fprintf (stream, \"\\tsubq.l %0I%d,%Rsp\\n\", fsize + 4);\n #else\n@@ -490,8 +490,8 @@ m68k_output_function_prologue (stream, size)\n \t  else if (fsize + 4 <= 16 && TARGET_CPU32)\n \t    {\n \t      /* On the CPU32 it is faster to use two subqw instructions to\n-\t\t subtract a small integer (8 < N <= 16) to a register. */\n-\t      /* asm_fprintf() cannot handle %. */\n+\t\t subtract a small integer (8 < N <= 16) to a register.  */\n+\t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t      asm_fprintf (stream, \"\\tsubq.w %0I8,%Rsp\\n\\tsubq.w %0I%d,%Rsp\\n\",\n \t\t\t   fsize + 4 - 8);\n@@ -505,7 +505,7 @@ m68k_output_function_prologue (stream, size)\n \t  if (TARGET_68040)\n \t    {\n \t      /* Adding negative number is faster on the 68040.  */\n-\t      /* asm_fprintf() cannot handle %. */\n+\t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t      asm_fprintf (stream, \"\\tadd.w %0I%d,%Rsp\\n\", - (fsize + 4));\n #else\n@@ -523,7 +523,7 @@ m68k_output_function_prologue (stream, size)\n \t}\n       else\n \t{\n-\t/* asm_fprintf() cannot handle %. */\n+\t/* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t  asm_fprintf (stream, \"\\tadd.l %0I%d,%Rsp\\n\", - (fsize + 4));\n #else\n@@ -649,7 +649,7 @@ m68k_output_function_prologue (stream, size)\n \n       int i;\n \n-      /* Undo the work from above. */\n+      /* Undo the work from above.  */\n       for (i = 0; i< 16; i++)\n         if (mask & (1 << i))\n \t  {\n@@ -951,11 +951,11 @@ m68k_output_function_epilogue (stream, size)\n       /* Restore each separately in the same order moveml does.\n          Using two movel instructions instead of a single moveml\n          is about 15% faster for the 68020 and 68030 at no expense\n-         in code size. */\n+         in code size.  */\n \n       int i;\n \n-      /* Undo the work from above. */\n+      /* Undo the work from above.  */\n       for (i = 0; i< 16; i++)\n         if (mask & (1 << i))\n           {\n@@ -1230,7 +1230,7 @@ m68k_output_function_epilogue (stream, size)\n   offset = foffset + nregs * 4;\n   /* FIXME : leaf_function_p below is too strong.\n      What we really need to know there is if there could be pending\n-     stack adjustment needed at that point. */\n+     stack adjustment needed at that point.  */\n   restore_from_sp = ! frame_pointer_needed\n \t     || (! current_function_calls_alloca && leaf_function_p ());\n   if (offset + fsize >= 0x8000\n@@ -1249,11 +1249,11 @@ m68k_output_function_epilogue (stream, size)\n       /* Restore each separately in the same order moveml does.\n          Using two movel instructions instead of a single moveml\n          is about 15% faster for the 68020 and 68030 at no expense\n-         in code size. */\n+         in code size.  */\n \n       int i;\n \n-      /* Undo the work from above. */\n+      /* Undo the work from above.  */\n       for (i = 0; i< 16; i++)\n         if (mask & (1 << i))\n           {\n@@ -1440,8 +1440,8 @@ m68k_output_function_epilogue (stream, size)\n       else if (fsize + 4 <= 16 && TARGET_CPU32)\n \t{\n \t  /* On the CPU32 it is faster to use two addqw instructions to\n-\t     add a small integer (8 < N <= 16) to a register. */\n-\t  /* asm_fprintf() cannot handle %. */\n+\t     add a small integer (8 < N <= 16) to a register.  */\n+\t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t  asm_fprintf (stream, \"\\taddq.w %0I8,%Rsp\\n\\taddq.w %0I%d,%Rsp\\n\",\n \t\t       fsize + 4 - 8);\n@@ -1456,7 +1456,7 @@ m68k_output_function_epilogue (stream, size)\n \t{\n \t  if (TARGET_68040)\n \t    { \n-\t      /* asm_fprintf() cannot handle %. */\n+\t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t      asm_fprintf (stream, \"\\tadd.w %0I%d,%Rsp\\n\", fsize + 4);\n #else\n@@ -1474,7 +1474,7 @@ m68k_output_function_epilogue (stream, size)\n \t}\n       else\n \t{\n-\t/* asm_fprintf() cannot handle %. */\n+\t/* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n \t  asm_fprintf (stream, \"\\tadd.l %0I%d,%Rsp\\n\", fsize + 4);\n #else\n@@ -1635,7 +1635,7 @@ output_dbcc_and_branch (operands)\n     }\n \n   /* If the decrement is to be done in SImode, then we have\n-     to compensate for the fact that dbcc decrements in HImode. */\n+     to compensate for the fact that dbcc decrements in HImode.  */\n   switch (GET_MODE (operands[0]))\n     {\n       case SImode:\n@@ -1915,7 +1915,7 @@ symbolic_operand (op, mode)\n     }\n }\n \f\n-/* Check for sign_extend or zero_extend.  Used for bit-count operands. */\n+/* Check for sign_extend or zero_extend.  Used for bit-count operands.  */\n \n int\n extend_operator(x, mode)\n@@ -2043,12 +2043,12 @@ const_method (constant)\n   if (USE_MOVQ (i))\n     return MOVQ;\n \n-  /* The Coldfire doesn't have byte or word operations. */\n+  /* The Coldfire doesn't have byte or word operations.  */\n   /* FIXME: This may not be useful for the m68060 either */\n   if (!TARGET_5200) \n     {\n       /* if -256 < N < 256 but N is not in range for a moveq\n-\t N^ff will be, so use moveq #N^ff, dreg; not.b dreg. */\n+\t N^ff will be, so use moveq #N^ff, dreg; not.b dreg.  */\n       if (USE_MOVQ (i ^ 0xff))\n \treturn NOTB;\n       /* Likewise, try with not.w */\n@@ -2622,7 +2622,7 @@ output_move_double (operands)\n \t  if (addreg0 || addreg1)\n \t    abort ();\n \n-\t  /* Only the middle reg conflicts; simply put it last. */\n+\t  /* Only the middle reg conflicts; simply put it last.  */\n \t  output_asm_insn (singlemove_string (operands), operands);\n \t  output_asm_insn (singlemove_string (latehalf), latehalf);\n \t  output_asm_insn (singlemove_string (middlehalf), middlehalf);\n@@ -2808,7 +2808,7 @@ output_addsi3 (operands)\n \t}\n       /* On the CPU32 it is faster to use two addql instructions to\n \t add a small integer (8 < N <= 16) to a register.\n-\t Likewise for subql. */\n+\t Likewise for subql.  */\n       if (TARGET_CPU32 && REG_P (operands[0]))\n \t{\n \t  if (INTVAL (operands[2]) > 8\n@@ -2945,7 +2945,7 @@ notice_update_cc (exp, insn)\n \t/* (SET r1 (ZERO_EXTEND r2)) on this machine\n \t   ends with a move insn moving r2 in r2's mode.\n \t   Thus, the cc's are set for r2.\n-\t   This can set N bit spuriously. */\n+\t   This can set N bit spuriously.  */\n \tcc_status.flags |= CC_NOT_NEGATIVE; \n \n       default:\n@@ -3035,7 +3035,7 @@ output_move_const_single (operands)\n    The value, anded with 0xff, gives the code to use in fmovecr\n    to get the desired constant.  */\n \n-/* This code has been fixed for cross-compilation. */\n+/* This code has been fixed for cross-compilation.  */\n   \n static int inited_68881_table = 0;\n \n@@ -3062,7 +3062,7 @@ static const int codes_68881[7] = {\n REAL_VALUE_TYPE values_68881[7];\n \n /* Set up values_68881 array by converting the decimal values\n-   strings_68881 to binary.   */\n+   strings_68881 to binary.  */\n \n void\n init_68881_table ()\n@@ -3094,7 +3094,7 @@ standard_68881_constant_p (x)\n #endif\n \n   /* fmovecr must be emulated on the 68040 and 68060, so it shouldn't be\n-     used at all on those chips. */\n+     used at all on those chips.  */\n   if (TARGET_68040 || TARGET_68060)\n     return 0;\n \n@@ -3167,7 +3167,7 @@ floating_exact_log2 (x)\n /* Return nonzero if X, a CONST_DOUBLE, has a value that we can get\n    from the Sun FPA's constant RAM.\n    The value returned, anded with 0x1ff, gives the code to use in fpmove\n-   to get the desired constant. */\n+   to get the desired constant.  */\n \n static int inited_FPA_table = 0;\n \n@@ -3262,7 +3262,7 @@ static const int codes_FPA[38] = {\n \n REAL_VALUE_TYPE values_FPA[38];\n \n-/* This code has been fixed for cross-compilation. */\n+/* This code has been fixed for cross-compilation.  */\n \n void\n init_FPA_table ()\n@@ -3834,7 +3834,7 @@ print_operand_address (file, addr)\n \t  {\n #ifdef MOTOROLA\n #ifdef SGS\n-\t    /* Many SGS assemblers croak on size specifiers for constants. */\n+\t    /* Many SGS assemblers croak on size specifiers for constants.  */\n \t    fprintf (file, \"%d\", (int) INTVAL (addr));\n #else\n \t    fprintf (file, \"%d.w\", (int) INTVAL (addr));"}, {"sha": "914b9b41a49e256d569ab11234d475ced503604c", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -93,7 +93,7 @@ extern int target_flags;\n    The 68040 will execute all 68030 and 68881/2 instructions, but some\n    of them must be emulated in software by the OS.  When TARGET_68040 is\n    turned on, these instructions won't be used.  This code will still\n-   run on a 68030 and 68881/2. */\n+   run on a 68030 and 68881/2.  */\n #define MASK_68040\t256\n #define TARGET_68040 (target_flags & MASK_68040)\n \n@@ -106,7 +106,7 @@ extern int target_flags;\n    The 68060 will execute all 68030 and 68881/2 instructions, but some\n    of them must be emulated in software by the OS.  When TARGET_68060 is\n    turned on, these instructions won't be used.  This code will still\n-   run on a 68030 and 68881/2. */\n+   run on a 68030 and 68881/2.  */\n #define MASK_68060\t1024\n #define TARGET_68060 (target_flags & MASK_68060)\n \n@@ -137,7 +137,7 @@ extern int target_flags;\n #define MASK_PCREL\t8192\n #define TARGET_PCREL\t(target_flags & MASK_PCREL)\n \n-/* Relax strict alignment. */\n+/* Relax strict alignment.  */\n #define MASK_NO_STRICT_ALIGNMENT 16384\n #define TARGET_STRICT_ALIGNMENT  (~target_flags & MASK_NO_STRICT_ALIGNMENT)\n \n@@ -290,7 +290,7 @@ extern int target_flags;\n \n /* Define if you don't want extended real, but do want to use the\n    software floating point emulator for REAL_ARITHMETIC and\n-   decimal <-> binary conversion. */\n+   decimal <-> binary conversion.  */\n /* #define REAL_ARITHMETIC */\n \n /* Define this if most significant bit is lowest numbered\n@@ -343,7 +343,7 @@ extern int target_flags;\n    Most published ABIs say that ints should be aligned on 16 bit\n    boundaries, but cpus with 32 bit busses get better performance\n    aligned on 32 bit boundaries.  Coldfires without a misalignment\n-   module require 32 bit alignment. */\n+   module require 32 bit alignment.  */\n #define BIGGEST_ALIGNMENT (TARGET_ALIGN_INT ? 32 : 16)\n \n /* Set this nonzero if move instructions will actually fail to work\n@@ -356,7 +356,7 @@ extern int target_flags;\n /* Align loop starts for optimal branching.  */\n #define LOOP_ALIGN(LABEL) (m68k_align_loops)\n \n-/* This is how to align an instruction for optimal branching. */\n+/* This is how to align an instruction for optimal branching.  */\n #define LABEL_ALIGN_AFTER_BARRIER(LABEL) (m68k_align_jumps)\n \n #define SELECT_RTX_SECTION(MODE, X, ALIGN)\t\t\t\t\\\n@@ -395,7 +395,7 @@ extern int target_flags;\n #define FIRST_PSEUDO_REGISTER 56\n #endif\n \n-/* This defines the register which is used to hold the offset table for PIC. */\n+/* This defines the register which is used to hold the offset table for PIC.  */\n #define PIC_OFFSET_TABLE_REGNUM 13\n \n #ifndef SUPPORT_SUN_FPA\n@@ -433,7 +433,7 @@ extern int target_flags;\n    On the 68000, only the stack pointer is such.  */\n \n /* fpa0 is also reserved so that it can be used to move data back and\n-   forth between high fpa regs and everything else. */\n+   forth between high fpa regs and everything else.  */\n \n #define FIXED_REGISTERS        \\\n  {/* Data registers.  */       \\\n@@ -651,7 +651,7 @@ enum reg_class {\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n  { \"NO_REGS\", \"DATA_REGS\",              \\\n@@ -704,7 +704,7 @@ enum reg_class { NO_REGS, LO_FPA_REGS, FPA_REGS, FP_REGS,\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n  { \"NO_REGS\", \"LO_FPA_REGS\", \"FPA_REGS\", \"FP_REGS\",  \\\n@@ -754,7 +754,7 @@ extern enum reg_class regno_reg_class[];\n    machine description; we zorch the constraint letters that aren't\n    appropriate for a specific target.  This allows us to guarantee\n    that a specific kind of register will not be used for a given target\n-   without fiddling with the register classes above. */\n+   without fiddling with the register classes above.  */\n \n #ifndef SUPPORT_SUN_FPA\n \n@@ -957,7 +957,7 @@ extern enum reg_class regno_reg_class[];\n    On the 5200 (coldfire), sp@- in a byte insn pushes just a byte.  */\n #define PUSH_ROUNDING(BYTES) (TARGET_5200 ? BYTES : ((BYTES) + 1) & ~1)\n \n-/* We want to avoid trying to push bytes. */\n+/* We want to avoid trying to push bytes.  */\n #define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN) < MOVE_RATIO \\\n     && (((SIZE) >=16 && (ALIGN) >= 16) || (TARGET_5200)))\n@@ -1134,7 +1134,7 @@ do\t\t\t\t\t\t\t\\\n while(0)\n \n /* Output assembler code to FILE to indicate return from \n-   a function during basic block profiling. */\n+   a function during basic block profiling.  */\n \n #define FUNCTION_BLOCK_PROFILER_EXIT(FILE)\t\t\\\n   asm_fprintf (FILE, \"\\tjsr %U__bb_trace_ret\\n\");\n@@ -1209,7 +1209,7 @@ while(0)\n #endif /* __mcf5200__ */\n #endif /* MOTOROLA */\n \n-/* Restore all registers saved by MACHINE_STATE_SAVE. */\n+/* Restore all registers saved by MACHINE_STATE_SAVE.  */\n \n #ifdef MOTOROLA\n #if defined(__mcf5200__)\n@@ -1668,7 +1668,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n@@ -1866,7 +1866,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    an empty string, or any arbitrary string (such as \".\", \".L%\", etc)\n    without having to make any other changes to account for the specific\n    definition.  Note it is a string literal, not interpreted by printf\n-   and friends. */\n+   and friends.  */\n \n #define LOCAL_LABEL_PREFIX \"\"\n \n@@ -1954,7 +1954,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s%s%d\", LOCAL_LABEL_PREFIX, PREFIX, NUM)\n \n-/* This is how to output a `long double' extended real constant. */\n+/* This is how to output a `long double' extended real constant.  */\n   \n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n do { long l[3];\t\t\t\t\t\t\t\t\\\n@@ -2128,7 +2128,7 @@ do { long l;\t\t\t\t\t\t\\\n        or print pair of registers as rx:ry.\n    'y' for a FPA insn (print pair of registers as rx:ry).  This also outputs\n        CONST_DOUBLE's as SunFPA constant RAM registers if\n-       possible, so it should not be used except for the SunFPA. */\n+       possible, so it should not be used except for the SunFPA.  */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n   ((CODE) == '.' || (CODE) == '#' || (CODE) == '-'\t\t\t\\"}, {"sha": "b2463f1d60842355245c647278d3eb22788b1407", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -913,7 +913,7 @@\n \t{\n #ifdef MOTOROLA\n #ifdef SGS\n-\t  /* Many SGS assemblers croak on size specifiers for constants. */\n+\t  /* Many SGS assemblers croak on size specifiers for constants.  */\n \t  return \\\"lea 0,%0\\\";\n #else\n \t  return \\\"lea 0.w,%0\\\";\n@@ -1152,7 +1152,7 @@\n \t    {\n #ifdef MOTOROLA\n #ifdef SGS\n-\t      /* Many SGS assemblers croak on size specifiers for constants. */\n+\t      /* Many SGS assemblers croak on size specifiers for constants.  */\n \t      return \\\"lea 0,%0\\\";\n #else\n \t      return \\\"lea 0.w,%0\\\";\n@@ -2365,7 +2365,7 @@\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n \t add a small integer (8 < N <= 16) to a register.  \n-\t Likewise for subqw. */\n+\t Likewise for subqw.  */\n       if (TARGET_CPU32 && REG_P (operands[0]))\n \t{\n \t  if (INTVAL (operands[2]) > 8\n@@ -2427,7 +2427,7 @@\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n \t add a small integer (8 < N <= 16) to a register. \n-\t Likewise for subqw. */\n+\t Likewise for subqw.  */\n       if (TARGET_CPU32 && REG_P (operands[0]))\n \t{\n \t  if (INTVAL (operands[1]) > 8\n@@ -2483,7 +2483,7 @@\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n \t add a small integer (8 < N <= 16) to a register.\n-\t Likewise for subqw. */\n+\t Likewise for subqw.  */\n       if (TARGET_CPU32 && REG_P (operands[0])) \n \t{\n \t  if (INTVAL (operands[1]) > 8\n@@ -3631,7 +3631,7 @@\n   \"*\n {\n   CC_STATUS_INIT;\n-  /* We can get CONST_DOUBLE, but also const1_rtx etc. */\n+  /* We can get CONST_DOUBLE, but also const1_rtx etc.  */\n   if (CONSTANT_P (operands[2]))\n     {\n       rtx hi, lo;\n@@ -3796,7 +3796,7 @@\n   \"*\n {\n   CC_STATUS_INIT;\n-  /* We can get CONST_DOUBLE, but also const1_rtx etc. */\n+  /* We can get CONST_DOUBLE, but also const1_rtx etc.  */\n   if (CONSTANT_P (operands[2]))\n     {\n       rtx hi, lo;\n@@ -3975,7 +3975,7 @@\n   \"*\n {\n   CC_STATUS_INIT;\n-  /* We can get CONST_DOUBLE, but also const1_rtx etc. */\n+  /* We can get CONST_DOUBLE, but also const1_rtx etc.  */\n \n   if (CONSTANT_P (operands[2]))\n     {"}, {"sha": "c75203e6b143be8ab18962dfce560d7c983f6b9c", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -49,12 +49,12 @@ Boston, MA 02111-1307, USA.  */\n #define REGISTER_PREFIX \"%\"\n \n /* The prefix for local (compiler generated) labels.\n-   These labels will not appear in the symbol table. */\n+   These labels will not appear in the symbol table.  */\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\"\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\"\n@@ -116,7 +116,7 @@ Boston, MA 02111-1307, USA.  */\n     g++ assembler names.  When this is defined, g++ uses embedded '.'\n     characters and some m68k assemblers have problems with this.  The\n     chances are much greater that any particular assembler will permit\n-    embedded '$' characters. */\n+    embedded '$' characters.  */\n \n #undef NO_DOLLAR_IN_LABEL\n \n@@ -137,7 +137,7 @@ Boston, MA 02111-1307, USA.  */\n #define BSS_ASM_OP\t\"\\t.lcomm\\t\"\n \n /* Register in which address to store a structure value is passed to a\n-   function.  The default in m68k.h is a1.  For m68k/SVR4 it is a0. */\n+   function.  The default in m68k.h is a1.  For m68k/SVR4 it is a0.  */\n \n #undef STRUCT_VALUE_REGNUM\n #define STRUCT_VALUE_REGNUM 8\n@@ -150,7 +150,7 @@ Boston, MA 02111-1307, USA.  */\n /* Define how the m68k registers should be numbered for Dwarf output.\n    The numbering provided here should be compatible with the native\n    SVR4 SDB debugger in the m68k/SVR4 reference port, where d0-d7\n-   are 0-7, a0-a8 are 8-15, and fp0-fp7 are 16-23. */\n+   are 0-7, a0-a8 are 8-15, and fp0-fp7 are 16-23.  */\n \n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n@@ -159,7 +159,7 @@ Boston, MA 02111-1307, USA.  */\n    It is then overridden by m68k/sgs.h to use \".space\", and again by svr4.h\n    to use \".zero\".  The m68k/SVR4 assembler uses \".space\", so repeat the\n    definition from m68k/sgs.h here.  Note that ASM_NO_SKIP_IN_TEXT is\n-   defined in m68k/sgs.h, so we don't have to repeat it here. */\n+   defined in m68k/sgs.h, so we don't have to repeat it here.  */\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n@@ -168,15 +168,15 @@ Boston, MA 02111-1307, USA.  */\n #if 0\n /* SVR4 m68k assembler is bitching on the `comm i,1,1' which askes for \n    1 byte alignment. Don't generate alignment for COMMON seems to be\n-   safer until we the assembler is fixed. */\n+   safer until we the assembler is fixed.  */\n #undef ASM_OUTPUT_ALIGNED_COMMON\n /* Same problem with this one.  */\n #undef ASM_OUTPUT_ALIGNED_LOCAL\n #endif\n \n /* The `string' directive on m68k svr4 does not handle string with\n    escape char (ie., `\\') right. Use normal way to output ASCII bytes\n-   seems to be safer. */\n+   seems to be safer.  */\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n@@ -233,18 +233,18 @@ extern int switch_table_difference_label_flag;\n   fprintf ((FILE), \",%u\\n\", (SIZE)))\n \n /* Currently, JUMP_TABLES_IN_TEXT_SECTION must be defined in order to\n-   keep switch tables in the text section. */\n+   keep switch tables in the text section.  */\n    \n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n /* Override the definition in svr4.h. In m68k svr4, using swbeg is the \n-   standard way to do switch table. */\n+   standard way to do switch table.  */\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\\\n   fprintf ((FILE), \"%s&%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n \n /* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is an\n-   operand of a function call. */\n+   operand of a function call.  */\n #undef LEGITIMATE_PIC_OPERAND_P\n \n #define LEGITIMATE_PIC_OPERAND_P(X)\t\\\n@@ -256,7 +256,7 @@ extern int switch_table_difference_label_flag;\n    to be done as `bsr foo@PLTPC', so it will force the assembler to create \n    the PLT entry for `foo'. Doing function cse will cause the address of `foo'\n    to be loaded into a register, which is exactly what we want to avoid when\n-   we are doing PIC on svr4 m68k. */\n+   we are doing PIC on svr4 m68k.  */\n #undef OVERRIDE_OPTIONS\n #define OVERRIDE_OPTIONS\t\t\\\n {\t\t\t\t\t\\\n@@ -294,7 +294,7 @@ extern int switch_table_difference_label_flag;\n    specified as the number of bits.\n \n    Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro. */\n+   `varasm.c' when defining this macro.  */\n #ifndef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)"}, {"sha": "4914cf47eadd9f0e44c6934568fbb6264bf0ec3e", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -41,7 +41,7 @@ Boston, MA 02111-1307, USA.  */\n     g++ assembler names.  When this is defined, g++ uses embedded '.'\n     characters and some m68k assemblers have problems with this.  The\n     chances are much greater that any particular assembler will permit\n-    embedded '$' characters. */\n+    embedded '$' characters.  */\n \n #undef NO_DOLLAR_IN_LABEL\n \n@@ -67,7 +67,7 @@ Boston, MA 02111-1307, USA.  */\n    If a 68881 is the default, gcc will use inline 68881 instructions, by\n    predefining __HAVE_68881__, unless -msoft-float is specified.\n    If a 68881 is not the default, gcc will only define __HAVE_68881__ if\n-   -m68881 is specified. */\n+   -m68881 is specified.  */\n \n #if TARGET_DEFAULT & MASK_68881\n #define CPP_SPEC \"%{!msoft-float:-D__HAVE_68881__}\"\n@@ -79,7 +79,7 @@ Boston, MA 02111-1307, USA.  */\n    for profiling a function entry.  We override the definition in m68k.h\n    and match the way the native m68k/SVR4 compiler does profiling, with the\n    address of the profile counter in a1, not a0, and using bsr rather\n-   than jsr. */\n+   than jsr.  */\n \n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n@@ -94,7 +94,7 @@ Boston, MA 02111-1307, USA.  */\n #define BSS_ASM_OP\t\"\\t.lcomm\\t\"\n \n /* Register in which address to store a structure value is passed to a\n-   function.  The default in m68k.h is a1.  For m68k/SVR4 it is a0. */\n+   function.  The default in m68k.h is a1.  For m68k/SVR4 it is a0.  */\n \n #undef STRUCT_VALUE_REGNUM\n #define STRUCT_VALUE_REGNUM 8\n@@ -114,15 +114,15 @@ Boston, MA 02111-1307, USA.  */\n /* Define how the m68k registers should be numbered for Dwarf output.\n    The numbering provided here should be compatible with the native\n    SVR4 SDB debugger in the m68k/SVR4 reference port, where d0-d7\n-   are 0-7, a0-a8 are 8-15, and fp0-fp7 are 16-23. */\n+   are 0-7, a0-a8 are 8-15, and fp0-fp7 are 16-23.  */\n \n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n \n /* The ASM_OUTPUT_SKIP macro is first defined in m68k.h, using \".skip\".\n    It is then overridden by m68k/sgs.h to use \".space\", and again by svr4.h\n    to use \".zero\".  The m68k/SVR4 assembler uses \".space\", so repeat the\n    definition from m68k/sgs.h here.  Note that ASM_NO_SKIP_IN_TEXT is\n-   defined in m68k/sgs.h, so we don't have to repeat it here. */\n+   defined in m68k/sgs.h, so we don't have to repeat it here.  */\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n@@ -131,7 +131,7 @@ Boston, MA 02111-1307, USA.  */\n /* 1 if N is a possible register number for a function value.\n    For m68k/SVR4 allow d0, a0, or fp0 as return registers, for integral,\n    pointer, or floating types, respectively. Reject fp0 if not using a\n-   68881 coprocessor. */\n+   68881 coprocessor.  */\n \n #undef FUNCTION_VALUE_REGNO_P\n #define FUNCTION_VALUE_REGNO_P(N) \\\n@@ -147,7 +147,7 @@ Boston, MA 02111-1307, USA.  */\n    and how to find (in the caller) the value returned by a function.  VALTYPE\n    is the data type of the value (as a tree).  If the precise function being\n    called is known, FUNC is its FUNCTION_DECL; otherwise, FUNC is 0.\n-   For m68k/SVR4 generate the result in d0, a0, or fp0 as appropriate. */\n+   For m68k/SVR4 generate the result in d0, a0, or fp0 as appropriate.  */\n    \n #undef FUNCTION_VALUE\n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n@@ -162,7 +162,7 @@ Boston, MA 02111-1307, USA.  */\n    m68k/SVR4 convention is to copy the value returned for pointer functions\n    from a0 to d0 in the function epilogue, so that callers that have\n    neglected to properly declare the callee can still find the correct return\n-   value. */\n+   value.  */\n \n #define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -174,7 +174,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Define how to find the value returned by a library function assuming the\n    value has mode MODE.\n    For m68k/SVR4 look for integer values in d0, pointer values in d0\n-   (returned in both d0 and a0), and floating values in fp0. */\n+   (returned in both d0 and a0), and floating values in fp0.  */\n \n #undef LIBCALL_VALUE\n #define LIBCALL_VALUE(MODE)\t\t\t\t\t\t\\\n@@ -184,13 +184,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n    : gen_rtx_REG ((MODE), 0))\n \n /* Boundary (in *bits*) on which stack pointer should be aligned.\n-   The m68k/SVR4 convention is to keep the stack pointer longword aligned. */\n+   The m68k/SVR4 convention is to keep the stack pointer longword aligned.  */\n  \n #undef STACK_BOUNDARY\n #define STACK_BOUNDARY 32\n \n /* Alignment of field after `int : 0' in a structure.\n-   For m68k/SVR4, this is the next longword boundary. */\n+   For m68k/SVR4, this is the next longword boundary.  */\n \n #undef EMPTY_FIELD_BOUNDARY\n #define EMPTY_FIELD_BOUNDARY 32\n@@ -204,14 +204,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* SVR4 m68k assembler is bitching on the `comm i,1,1' which asks for \n    1 byte alignment. Don't generate alignment for COMMON seems to be\n-   safer until we the assembler is fixed. */\n+   safer until we the assembler is fixed.  */\n #undef ASM_OUTPUT_ALIGNED_COMMON\n /* Same problem with this one.  */\n #undef ASM_OUTPUT_ALIGNED_LOCAL\n \n /* The `string' directive on m68k svr4 does not handle string with\n    escape char (ie., `\\') right. Use normal way to output ASCII bytes\n-   seems to be safer. */\n+   seems to be safer.  */\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n@@ -268,13 +268,13 @@ int switch_table_difference_label_flag;\n   fprintf ((FILE), \",%u\\n\", (SIZE)))\n \n /* Override the definition in svr4.h. In m68k svr4, using swbeg is the \n-   standard way to do switch table. */\n+   standard way to do switch table.  */\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\\\n   fprintf ((FILE), \"%s&%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n \n /* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is an\n-   operand of a function call. */\n+   operand of a function call.  */\n #undef LEGITIMATE_PIC_OPERAND_P\n #define LEGITIMATE_PIC_OPERAND_P(X) \\\n   ((! symbolic_operand (X, VOIDmode) \\\n@@ -288,7 +288,7 @@ int switch_table_difference_label_flag;\n    to be done as `bsr foo@PLTPC', so it will force the assembler to create \n    the PLT entry for `foo'. Doing function cse will cause the address of `foo'\n    to be loaded into a register, which is exactly what we want to avoid when\n-   we are doing PIC on svr4 m68k. */\n+   we are doing PIC on svr4 m68k.  */\n #undef OVERRIDE_OPTIONS\n #define OVERRIDE_OPTIONS\t\t\\\n {\t\t\t\t\t\\"}, {"sha": "be2e05705062138f08ef586b7c601be64f4b86fb", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -235,11 +235,11 @@ Boston, MA 02111-1307, USA.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n /* If TARGET_68881, return SF and DF values in fp0 instead of d0.  */\n-/* NYI: If FP=M68881U return SF and DF values in d0. */\n+/* NYI: If FP=M68881U return SF and DF values in d0.  */\n /* NYI: If -mold return pointer in a0 and d0 */\n \n #undef FUNCTION_VALUE\n-/* sysV68 (brain damaged) cc convention support. */\n+/* sysV68 (brain damaged) cc convention support.  */\n #define FUNCTION_VALUE(VALTYPE,FUNC) \\\n   (TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_68881 \t\\\n    ? gen_rtx_REG (TYPE_MODE (VALTYPE), 16)\t\t\\\n@@ -262,7 +262,7 @@ Boston, MA 02111-1307, USA.  */\n    d0 may be used, and fp0 as well if -msoft-float is not specified.  */\n \n #undef FUNCTION_VALUE_REGNO_P\n-/* sysV68 (brain damaged) cc convention support. */\n+/* sysV68 (brain damaged) cc convention support.  */\n #define FUNCTION_VALUE_REGNO_P(N) \\\n  ((N) == 0 || (N) == 8 || (TARGET_68881 && (N) == 16))\n \n@@ -399,7 +399,7 @@ do { long l;\t\t\t\t\t\\\n /* The beginnings of sdb support...  */\n \n /* Undefining these will allow `output_file_directive' (in toplev.c)\n-   to default to the right thing. */\n+   to default to the right thing.  */\n #undef ASM_OUTPUT_MAIN_SOURCE_FILENAME\n #ifndef USE_GAS\n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, FILENAME) \\\n@@ -475,7 +475,7 @@ do { long l;\t\t\t\t\t\\\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n     asm_fprintf (FILE, \"%L%s%d:\\n\", PREFIX, NUM)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\"\n@@ -736,7 +736,7 @@ do {(CUM).offset = 0;\\\n    tell g++.c about that.  */\n #define ALT_LIBM\t\"-lm881\"\n \n-#if (TARGET_DEFAULT & MASK_68881)      /* The default configuration has a 6888[12] FPU. */\n+#if (TARGET_DEFAULT & MASK_68881)      /* The default configuration has a 6888[12] FPU.  */\n #define MATH_LIBRARY\t\"-lm881\"\n #endif\n \n@@ -752,7 +752,7 @@ do {(CUM).offset = 0;\\\n       _cleanup ();\t\t\t\t\t\t\\\n     } while (0)\n \n-/* FINALIZE_TRAMPOLINE clears the instruction cache. */\n+/* FINALIZE_TRAMPOLINE clears the instruction cache.  */\n \n #undef FINALIZE_TRAMPOLINE\n #define FINALIZE_TRAMPOLINE(TRAMP)\t\\"}, {"sha": "edb05c00479aa50dd77aa6fb3d07db2ccc937211", "filename": "gcc/config/m68k/news.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fnews.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fnews.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnews.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -171,7 +171,7 @@ do { char dstr[30];\t\t\t\t\t\\\n \n #if 0\n /* The NEWS assembler in version 3.4 complains about fmove.d, but this\n-   macro proved not to work right.  3.4 is old, so forget about it. */\n+   macro proved not to work right.  3.4 is old, so forget about it.  */\n #define ASM_OUTPUT_OPCODE(FILE, STRING) \\\n {\t\t\t\t\t\t\\\n   if (!strncmp (STRING, \"fmove.d\", 7)\t\t\\"}, {"sha": "501b1117e8a7513b18546b1f1ef807c79cb7e58d", "filename": "gcc/config/m68k/next.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnext.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -158,7 +158,7 @@ Boston, MA 02111-1307, USA.  */\n    tables using pc relative addressing, since they are not in the text\n    section, so we undefine CASE_VECTOR_PC_RELATIVE.  This also\n    causes the compiler to use absolute addresses in the jump table,\n-   so we redefine CASE_VECTOR_MODE to be SImode. */\n+   so we redefine CASE_VECTOR_MODE to be SImode.  */\n \n #undef\tCASE_VECTOR_MODE\n #define CASE_VECTOR_MODE SImode\n@@ -177,21 +177,21 @@ Boston, MA 02111-1307, USA.  */\n #define GO_IF_INDEXABLE_BASE(X, ADDR)\t\\\n { if (LEGITIMATE_BASE_REG_P (X)) goto ADDR; }\n \n-/* This accounts for the return pc and saved fp on the m68k. */\n+/* This accounts for the return pc and saved fp on the m68k.  */\n \n #define OBJC_FORWARDING_STACK_OFFSET 8\n #define OBJC_FORWARDING_MIN_OFFSET 8\n \n /* FINALIZE_TRAMPOLINE enables executable stack.  The\n-   __enable_execute_stack also clears the insn cache. */\n+   __enable_execute_stack also clears the insn cache.  */\n \n #undef FINALIZE_TRAMPOLINE\n #define FINALIZE_TRAMPOLINE(TRAMP) \\\n   emit_library_call(gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"), \\\n \t\t    0, VOIDmode, 1, memory_address (SImode, (TRAMP)), Pmode)\n \n /* A C expression used to clear the instruction cache from \n-   address BEG to address END.   On NeXTSTEP this i a system trap. */\n+   address BEG to address END.   On NeXTSTEP this i a system trap.  */\n \n #define CLEAR_INSN_CACHE(BEG, END)   \\\n    asm volatile (\"trap #2\")"}, {"sha": "37e3e23e0e36fce952a20bd09c7c893f4a871882", "filename": "gcc/config/m68k/pbb.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fpbb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fpbb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpbb.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -53,7 +53,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_MEM_FUNCTIONS\n \n-/* -m68000 requires special flags to the assembler. */\n+/* -m68000 requires special flags to the assembler.  */\n \n #define ASM_SPEC \\\n  \" %{m68000:-mc68010}%{mc68000:-mc68010}\"\n@@ -130,7 +130,7 @@ Boston, MA 02111-1307, USA.  */\n /* similar to default, but allows for the table defined by ld with gcc.ifile. \n    nptrs is always 0.  So we need to instead check that __DTOR_LIST__[1] != 0.\n    The old check is left in so that the same macro can be used if and when  \n-   a future version of gas does support section directives. */\n+   a future version of gas does support section directives.  */\n \n #define DO_GLOBAL_DTORS_BODY {int nptrs = *(int *)__DTOR_LIST__; int i; \\\n   if (nptrs == -1 || (__DTOR_LIST__[0] == 0 && __DTOR_LIST__[1] != 0))  \\"}, {"sha": "765702c56a0ee3539340d047b88deee7164bdd94", "filename": "gcc/config/m68k/plexus.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fplexus.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fplexus.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fplexus.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -34,7 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"m68k/m68k.h\"\n \n /* Define __HAVE_68881 in preprocessor only if -m68881 is specified.\n-   This will control the use of inline 68881 insns in certain macros. */\n+   This will control the use of inline 68881 insns in certain macros.  */\n \n #define TARGET_DEFAULT (MASK_BITFIELD|MASK_68020)\n "}, {"sha": "2901246df8209dc0a57940eae86c422dec1555ed", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"m68k/m68k.h\"\n \n-/* SGS specific assembler pseudo ops. */\n+/* SGS specific assembler pseudo ops.  */\n \n #define\tBYTE_ASM_OP\t\t\"\\t.byte \"\n #define WORD_ASM_OP\t\t\"\\t.short \"\n@@ -60,12 +60,12 @@ Boston, MA 02111-1307, USA.  */\n #define REGISTER_PREFIX \"%\"\n \n /* The prefix for local (compiler generated) labels.\n-   These labels will not appear in the symbol table. */\n+   These labels will not appear in the symbol table.  */\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\"\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\"\n@@ -103,7 +103,7 @@ Boston, MA 02111-1307, USA.  */\n #endif /* defined SUPPORT_SUN_FPA */\n \n /* This is how to output an assembler line defining an `int' constant.  */\n-/* The SGS assembler doesn't understand \".word\". */\n+/* The SGS assembler doesn't understand \".word\".  */\n \n #undef ASM_OUTPUT_SHORT\n #define ASM_OUTPUT_SHORT(FILE,VALUE)\t\t\t\\\n@@ -153,7 +153,7 @@ do { long l;\t\t\t\t\t\t\\\n    1023 bytes.  There is no \"partial string op\" which works like \".string\"\n    but doesn't append a null byte, so we can't chop the input string up\n    into small pieces and use that.  Our only remaining alternative is to\n-   output the string one byte at a time. */\n+   output the string one byte at a time.  */\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n@@ -186,7 +186,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n \n /* SGS based assemblers don't understand #NO_APP and #APP, so just don't\n-   bother emitting them. */\n+   bother emitting them.  */\n \n #undef ASM_APP_ON\n #define ASM_APP_ON \"\"\n@@ -225,7 +225,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* How to output a block of SIZE zero bytes.  Note that the `space' pseudo,\n    when used in the text segment, causes SGS assemblers to output nop insns\n-   rather than 0s, so we set ASM_NO_SKIP_IN_TEXT to prevent this. */\n+   rather than 0s, so we set ASM_NO_SKIP_IN_TEXT to prevent this.  */\n \n #define ASM_NO_SKIP_IN_TEXT 1\n \n@@ -389,7 +389,7 @@ do {\t\t\t\t\t\t\t\t\\\n /* This macro outputs the label at the start of a switch table.  The\n    \".swbeg <N>\" is an assembler directive that causes the switch table\n    size to be inserted into the object code so that disassemblers, for\n-   example, can identify that it is the start of a switch table. */\n+   example, can identify that it is the start of a switch table.  */\n \n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\\\n   fprintf ((FILE), \"%s&%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n@@ -406,7 +406,7 @@ do {\t\t\t\t\t\t\t\t\\\n    we want.  This difference can be accommodated by making the assembler\n    define such \"LDnnn\" to be either \"Lnnn-LInnn-2.b\", \"Lnnn\", or any other\n    string, as necessary.  This is accomplished via the ASM_OUTPUT_CASE_END\n-   macro. */\n+   macro.  */\n \n #undef ASM_OUTPUT_CASE_END\n #define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\\\n@@ -424,7 +424,7 @@ extern int switch_table_difference_label_flag;\n   asm_fprintf (FILE, \"%s%LL%d-%LL%d\\n\", WORD_ASM_OP, VALUE, REL)\n \n /* Currently, JUMP_TABLES_IN_TEXT_SECTION must be defined in order to\n-   keep switch tables in the text section. */\n+   keep switch tables in the text section.  */\n    \n #define JUMP_TABLES_IN_TEXT_SECTION 1\n "}, {"sha": "cecbd635c1e4b4b4edd6c2d861af1f3f407d7561", "filename": "gcc/config/m68k/sun3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fsun3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fsun3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun3.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -287,7 +287,7 @@ Boston, MA 02111-1307, USA.  */\n #if 0\n /* This was turned off as it caused linking errors on sunos4.1.\n    `gcc -a' links in /usr/lib/bb_link.o which does not provide __bb_link\n-   but its own version of __bb_init_func. */\n+   but its own version of __bb_init_func.  */\n #undef BLOCK_PROFILER_CODE\n #define BLOCK_PROFILER_CODE\t\t\t\t\t\t\\\n extern int ___tcov_init;\t\t\t\t\t\t\\"}, {"sha": "1c76368223731bbfa9ac7122939d728f28d2b48e", "filename": "gcc/config/m68k/tower.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Ftower.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Ftower.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -96,7 +96,7 @@ Boston, MA 02111-1307, USA.  */\n #undef IMMEDIATE_PREFIX\n #define IMMEDIATE_PREFIX \"&\"\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n /* We do not want leading underscores.  */\n "}, {"sha": "433595be93dc90ca2099c3323b538dded595c536", "filename": "gcc/config/m68k/vxm68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fvxm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1929e1dce250f3f6991c995035d32cc3b650e3/gcc%2Fconfig%2Fm68k%2Fvxm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fvxm68k.h?ref=7a1929e1dce250f3f6991c995035d32cc3b650e3", "patch": "@@ -82,7 +82,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n \n #define LIB_SPEC \"\"\n \n-/* Provide required defaults for linker. */\n+/* Provide required defaults for linker.  */\n  \n #define LINK_SPEC \"-r\"\n "}]}