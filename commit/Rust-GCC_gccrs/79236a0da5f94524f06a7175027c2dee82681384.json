{"sha": "79236a0da5f94524f06a7175027c2dee82681384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkyMzZhMGRhNWY5NDUyNGYwNmE3MTc1MDI3YzJkZWU4MjY4MTM4NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-22T14:35:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-22T14:35:45Z"}, "message": "(objc_malloc): Renamed from __objc_xmalloc.\n\n(objc_realloc): Renamed from __objc_realloc.\n(objc_atomic_malloc): New function.\n(objc_valloc): New function.\n(objc_calloc): Renamed from __objc_calloc.\n(objc_free): New function.\n\nFrom-SVN: r12763", "tree": {"sha": "ae0726d54b98c97e0a94fe1640564ddc975ad560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae0726d54b98c97e0a94fe1640564ddc975ad560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79236a0da5f94524f06a7175027c2dee82681384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79236a0da5f94524f06a7175027c2dee82681384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79236a0da5f94524f06a7175027c2dee82681384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79236a0da5f94524f06a7175027c2dee82681384/comments", "author": null, "committer": null, "parents": [{"sha": "9d46282b6cde36acb5b40a9d8c60a530de0e1328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d46282b6cde36acb5b40a9d8c60a530de0e1328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d46282b6cde36acb5b40a9d8c60a530de0e1328"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "ec58d9d4e8b72fefd8317680db3ef9975ae6877b", "filename": "gcc/objc/misc.c", "status": "modified", "additions": 61, "deletions": 13, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79236a0da5f94524f06a7175027c2dee82681384/gcc%2Fobjc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79236a0da5f94524f06a7175027c2dee82681384/gcc%2Fobjc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fmisc.c?ref=79236a0da5f94524f06a7175027c2dee82681384", "patch": "@@ -1,7 +1,6 @@\n /* GNU Objective C Runtime Miscellaneous \n-   Copyright (C) 1993, 1994, 1995 Free Software Foundation, Inc.\n-\n-Author: Kresten Krab Thorup\n+   Copyright (C) 1993, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Contrbuted by Kresten Krab Thorup\n \n This file is part of GNU CC.\n \n@@ -26,8 +25,9 @@ Boston, MA 02111-1307, USA.  */\n    however invalidate any other reasons why the executable file might be\n    covered by the GNU General Public License.  */\n \n-#ifdef __alpha__\n #include <stdlib.h>\n+\n+#ifdef __alpha__\n extern int write (int, const char*, int);\n extern size_t strlen (const char*);\n #endif\n@@ -52,29 +52,77 @@ objc_fatal(const char* msg)\n   abort();\n }\n \n-void*\n-__objc_xmalloc(size_t size)\n+/*\n+** Standard functions for memory allocation and disposal.\n+** Users should use these functions in their ObjC programs so\n+** that they work properly with garbage collectors as well as\n+** can take advantage of the exception/error handling available.\n+*/\n+\n+void *\n+objc_malloc(size_t size)\n+{\n+  void* res = (void*) (*_objc_malloc)(size);\n+  if(!res)\n+    objc_fatal(\"Virtual memory exhausted\\n\");\n+  return res;\n+}\n+\n+void *\n+objc_atomic_malloc(size_t size)\n {\n-  void* res = (void*) malloc(size);\n+  void* res = (void*) (*_objc_atomic_malloc)(size);\n   if(!res)\n     objc_fatal(\"Virtual memory exhausted\\n\");\n   return res;\n }\n \n-void*\n-__objc_xrealloc(void* mem, size_t size)\n+void *\n+objc_valloc(size_t size)\n {\n-  void* res = (void*) realloc(mem, size);\n+  void* res = (void*) (*_objc_valloc)(size);\n   if(!res)\n     objc_fatal(\"Virtual memory exhausted\\n\");\n   return res;\n }\n \n-void*\n-__objc_xcalloc(size_t nelem, size_t size)\n+void *\n+objc_realloc(void *mem, size_t size)\n {\n-  void* res = (void*)calloc(nelem, size);\n+  void* res = (void*) (*_objc_realloc)(mem, size);\n   if(!res)\n     objc_fatal(\"Virtual memory exhausted\\n\");\n   return res;\n }\n+\n+void *\n+objc_calloc(size_t nelem, size_t size)\n+{\n+  void* res = (void*) (*_objc_calloc)(nelem, size);\n+  if(!res)\n+    objc_fatal(\"Virtual memory exhausted\\n\");\n+  return res;\n+}\n+\n+void\n+objc_free(void *mem)\n+{\n+  (*_objc_free)(mem);\n+}\n+\n+/*\n+** Hook functions for memory allocation and disposal.\n+** This makes it easy to substitute garbage collection systems\n+** such as Boehm's GC by assigning these function pointers\n+** to the GC's allocation routines.  By default these point\n+** to the ANSI standard malloc, realloc, free, etc.\n+**\n+** Users should call the normal objc routines above for\n+** memory allocation and disposal within their programs.\n+*/\n+void *(*_objc_malloc)(size_t) = malloc;\n+void *(*_objc_atomic_malloc)(size_t) = malloc;\n+void *(*_objc_valloc)(size_t) = malloc;\n+void *(*_objc_realloc)(void *, size_t) = realloc;\n+void *(*_objc_calloc)(size_t, size_t) = calloc;\n+void (*_objc_free)(void *) = free;"}]}