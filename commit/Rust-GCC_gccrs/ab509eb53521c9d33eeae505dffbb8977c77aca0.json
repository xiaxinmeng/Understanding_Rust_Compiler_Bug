{"sha": "ab509eb53521c9d33eeae505dffbb8977c77aca0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI1MDllYjUzNTIxYzlkMzNlZWFlNTA1ZGZmYmI4OTc3Yzc3YWNhMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-10T12:00:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-10T12:00:05Z"}, "message": "re PR middle-end/54109 (ICE at tree-ssa-structalias.c:3049 in get_constraint_for_component_ref)\n\n2012-08-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/54109\n\t* tree-ssa-forwprop.c\n\t(forward_propagate_addr_into_variable_array_index): Remove.\n\t(forward_propagate_addr_expr_1): Adjust.\n\n\t* gcc.dg/torture/pr54109.c: New testcase.\n\t* gcc.dg/tree-ssa/forwprop-1.c: Adjust.\n\t* gcc.dg/tree-ssa/forwprop-2.c: Likewise.\n\nFrom-SVN: r190291", "tree": {"sha": "299ec0417c555e578ea5e1b1e80ae7cd74e79155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/299ec0417c555e578ea5e1b1e80ae7cd74e79155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab509eb53521c9d33eeae505dffbb8977c77aca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab509eb53521c9d33eeae505dffbb8977c77aca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab509eb53521c9d33eeae505dffbb8977c77aca0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab509eb53521c9d33eeae505dffbb8977c77aca0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e28b8a605478ae7303fb7afa78a67f2052ba2c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28b8a605478ae7303fb7afa78a67f2052ba2c2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28b8a605478ae7303fb7afa78a67f2052ba2c2d"}], "stats": {"total": 188, "additions": 47, "deletions": 141}, "files": [{"sha": "fd92f9d7ecd87ef08660d03661b51ab9cafdfdd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab509eb53521c9d33eeae505dffbb8977c77aca0", "patch": "@@ -1,3 +1,10 @@\n+2012-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54109\n+\t* tree-ssa-forwprop.c\n+\t(forward_propagate_addr_into_variable_array_index): Remove.\n+\t(forward_propagate_addr_expr_1): Adjust.\n+\n 2012-08-10  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (dump_function_to_file): Make sure to dump"}, {"sha": "85aa7d235f3c5cafc9ab0c0132f74a8b7c3de5ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab509eb53521c9d33eeae505dffbb8977c77aca0", "patch": "@@ -1,3 +1,10 @@\n+2012-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54109\n+\t* gcc.dg/torture/pr54109.c: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-1.c: Adjust.\n+\t* gcc.dg/tree-ssa/forwprop-2.c: Likewise.\n+\n 2012-08-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/54027"}, {"sha": "d4d05263d4dc2fb720ee0baca0f7a510024f77ae", "filename": "gcc/testsuite/gcc.dg/torture/pr54109.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54109.c?ref=ab509eb53521c9d33eeae505dffbb8977c77aca0", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+\n+typedef struct\n+{\n+  unsigned long bits[4];\n+} nodemask_t;\n+\n+struct cpuset\n+{\n+  long flags;\n+  nodemask_t mems_allowed;\n+  struct cpuset *parent;\n+} b;\n+\n+void func1(unsigned long *p1, int p2)\n+{\n+  p1[p2 - 1] = 0;\n+}\n+\n+void func2(nodemask_t *p1, int p2)\n+{\n+  func1(p1->bits, p2);\n+}\n+\n+void func3(void)\n+{\n+  /* This accesses b.flags.  */\n+  func2(&b.mems_allowed, 0);\n+}"}, {"sha": "955e767913425005d964b19967a9b26165251931", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c?ref=ab509eb53521c9d33eeae505dffbb8977c77aca0", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-forwprop1\" }  */\n \n-/* We should be able to optimize this to b->t[i] = 1 during\n-   early optimizations.  */\n+/* We may not optimize this to b->t[i] = 1.  */\n \n struct a\n {\n@@ -15,5 +14,5 @@ void f(struct a * b, __SIZE_TYPE__ i)\n   c[i] = 1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"t\\\\\\[i.*\\\\\\].* = 1;\" 1 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\[\\[^\\n\\r\\]*\\\\\\] = 1;\" 0 \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "bcdd78d108e1abdfa46c4ff627c43f83f59d535d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c?ref=ab509eb53521c9d33eeae505dffbb8977c77aca0", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-forwprop1\" }  */\n \n-/* We should be able to optimize this to b->t[i] = 1 during\n-   early optimizations.  */\n+/* We may not optimize this to b->t[i] = 1.  */\n \n struct a\n {\n@@ -17,5 +16,5 @@ void f(__SIZE_TYPE__ i)\n   c[i] = 1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"t\\\\\\[i.*\\\\\\].* = 1;\" 1 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\[\\[^\\n\\r\\]*\\\\\\] = 1;\" 0 \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop?\" } } */"}, {"sha": "662fe49bb83c5d5b4b51264f7778258de486e7e5", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab509eb53521c9d33eeae505dffbb8977c77aca0/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=ab509eb53521c9d33eeae505dffbb8977c77aca0", "patch": "@@ -697,128 +697,6 @@ tidy_after_forward_propagate_addr (gimple stmt)\n      recompute_tree_invariant_for_addr_expr (gimple_assign_rhs1 (stmt));\n }\n \n-/* DEF_RHS contains the address of the 0th element in an array.\n-   USE_STMT uses type of DEF_RHS to compute the address of an\n-   arbitrary element within the array.  The (variable) byte offset\n-   of the element is contained in OFFSET.\n-\n-   We walk back through the use-def chains of OFFSET to verify that\n-   it is indeed computing the offset of an element within the array\n-   and extract the index corresponding to the given byte offset.\n-\n-   We then try to fold the entire address expression into a form\n-   &array[index].\n-\n-   If we are successful, we replace the right hand side of USE_STMT\n-   with the new address computation.  */\n-\n-static bool\n-forward_propagate_addr_into_variable_array_index (tree offset,\n-\t\t\t\t\t\t  tree def_rhs,\n-\t\t\t\t\t\t  gimple_stmt_iterator *use_stmt_gsi)\n-{\n-  tree index, tunit;\n-  gimple offset_def, use_stmt = gsi_stmt (*use_stmt_gsi);\n-  tree new_rhs, tmp;\n-\n-  if (TREE_CODE (TREE_OPERAND (def_rhs, 0)) == ARRAY_REF)\n-    tunit = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (def_rhs)));\n-  else if (TREE_CODE (TREE_TYPE (TREE_OPERAND (def_rhs, 0))) == ARRAY_TYPE)\n-    tunit = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (TREE_TYPE (def_rhs))));\n-  else\n-    return false;\n-  if (!host_integerp (tunit, 1))\n-    return false;\n-\n-  /* Get the offset's defining statement.  */\n-  offset_def = SSA_NAME_DEF_STMT (offset);\n-\n-  /* Try to find an expression for a proper index.  This is either a\n-     multiplication expression by the element size or just the ssa name we came\n-     along in case the element size is one. In that case, however, we do not\n-     allow multiplications because they can be computing index to a higher\n-     level dimension (PR 37861). */\n-  if (integer_onep (tunit))\n-    {\n-      if (is_gimple_assign (offset_def)\n-\t  && gimple_assign_rhs_code (offset_def) == MULT_EXPR)\n-\treturn false;\n-\n-      index = offset;\n-    }\n-  else\n-    {\n-      /* The statement which defines OFFSET before type conversion\n-         must be a simple GIMPLE_ASSIGN.  */\n-      if (!is_gimple_assign (offset_def))\n-\treturn false;\n-\n-      /* The RHS of the statement which defines OFFSET must be a\n-\t multiplication of an object by the size of the array elements.\n-\t This implicitly verifies that the size of the array elements\n-\t is constant.  */\n-     if (gimple_assign_rhs_code (offset_def) == MULT_EXPR\n-\t && TREE_CODE (gimple_assign_rhs2 (offset_def)) == INTEGER_CST\n-\t && tree_int_cst_equal (gimple_assign_rhs2 (offset_def), tunit))\n-       {\n-\t /* The first operand to the MULT_EXPR is the desired index.  */\n-\t index = gimple_assign_rhs1 (offset_def);\n-       }\n-     /* If we have idx * tunit + CST * tunit re-associate that.  */\n-     else if ((gimple_assign_rhs_code (offset_def) == PLUS_EXPR\n-\t       || gimple_assign_rhs_code (offset_def) == MINUS_EXPR)\n-\t      && TREE_CODE (gimple_assign_rhs1 (offset_def)) == SSA_NAME\n-\t      && TREE_CODE (gimple_assign_rhs2 (offset_def)) == INTEGER_CST\n-\t      && (tmp = div_if_zero_remainder (EXACT_DIV_EXPR,\n-\t\t\t\t\t       gimple_assign_rhs2 (offset_def),\n-\t\t\t\t\t       tunit)) != NULL_TREE)\n-       {\n-\t gimple offset_def2 = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (offset_def));\n-\t if (is_gimple_assign (offset_def2)\n-\t     && gimple_assign_rhs_code (offset_def2) == MULT_EXPR\n-\t     && TREE_CODE (gimple_assign_rhs2 (offset_def2)) == INTEGER_CST\n-\t     && tree_int_cst_equal (gimple_assign_rhs2 (offset_def2), tunit))\n-\t   {\n-\t     index = fold_build2 (gimple_assign_rhs_code (offset_def),\n-\t\t\t\t  TREE_TYPE (offset),\n-\t\t\t\t  gimple_assign_rhs1 (offset_def2), tmp);\n-\t   }\n-\t else\n-\t   return false;\n-       }\n-     else\n-\treturn false;\n-    }\n-\n-  /* Replace the pointer addition with array indexing.  */\n-  index = force_gimple_operand_gsi (use_stmt_gsi, index, true, NULL_TREE,\n-\t\t\t\t    true, GSI_SAME_STMT);\n-  if (TREE_CODE (TREE_OPERAND (def_rhs, 0)) == ARRAY_REF)\n-    {\n-      new_rhs = unshare_expr (def_rhs);\n-      TREE_OPERAND (TREE_OPERAND (new_rhs, 0), 1) = index;\n-    }\n-  else\n-    {\n-      new_rhs = build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (TREE_TYPE (def_rhs))),\n-\t\t\tunshare_expr (TREE_OPERAND (def_rhs, 0)),\n-\t\t\tindex, integer_zero_node, NULL_TREE);\n-      new_rhs = build_fold_addr_expr (new_rhs);\n-      if (!useless_type_conversion_p (TREE_TYPE (gimple_assign_lhs (use_stmt)),\n-\t\t\t\t      TREE_TYPE (new_rhs)))\n-\t{\n-\t  new_rhs = force_gimple_operand_gsi (use_stmt_gsi, new_rhs, true,\n-\t\t\t\t\t      NULL_TREE, true, GSI_SAME_STMT);\n-\t  new_rhs = fold_convert (TREE_TYPE (gimple_assign_lhs (use_stmt)),\n-\t\t\t\t  new_rhs);\n-\t}\n-    }\n-  gimple_assign_set_rhs_from_tree (use_stmt_gsi, new_rhs);\n-  fold_stmt (use_stmt_gsi);\n-  tidy_after_forward_propagate_addr (gsi_stmt (*use_stmt_gsi));\n-  return true;\n-}\n-\n /* NAME is a SSA_NAME representing DEF_RHS which is of the form\n    ADDR_EXPR <whatever>.\n \n@@ -1111,19 +989,6 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n       return true;\n     }\n \n-  /* Try to optimize &x[0] p+ OFFSET where OFFSET is defined by\n-     converting a multiplication of an index by the size of the\n-     array elements, then the result is converted into the proper\n-     type for the arithmetic.  */\n-  if (TREE_CODE (rhs2) == SSA_NAME\n-      && (TREE_CODE (array_ref) != ARRAY_REF\n-\t  || integer_zerop (TREE_OPERAND (array_ref, 1)))\n-      && useless_type_conversion_p (TREE_TYPE (name), TREE_TYPE (def_rhs))\n-      /* Avoid problems with IVopts creating PLUS_EXPRs with a\n-\t different type than their operands.  */\n-      && useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (def_rhs)))\n-    return forward_propagate_addr_into_variable_array_index (rhs2, def_rhs,\n-\t\t\t\t\t\t\t     use_stmt_gsi);\n   return false;\n }\n "}]}