{"sha": "9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhNDgzYTJkODdlMmQxYTVkOTc2ZGRmOWVjZDYzNTJkOGVlYmY5ZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-01-25T11:10:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-01-25T11:10:30Z"}, "message": "[ARM] PR target/79145 Fix xordi3 expander for immediate operands in iWMMXt\n\n\tPR target/79145\n\t* config/arm/arm.md (xordi3): Force constant operand into a register\n\tfor TARGET_IWMMXT.\n\n\t* gcc.target/arm/pr79145.c: New test.\n\nFrom-SVN: r244894", "tree": {"sha": "a92aa52013146cabe4ac2b6eafaa46d986c0e1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a92aa52013146cabe4ac2b6eafaa46d986c0e1bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5a2202779dec6edce80112fa3ed664f0412673a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a2202779dec6edce80112fa3ed664f0412673a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a2202779dec6edce80112fa3ed664f0412673a"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "6bd1c69982f818b10abd98262807e02c7f8cf71d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e", "patch": "@@ -1,3 +1,9 @@\n+2016-01-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/79145\n+\t* config/arm/arm.md (xordi3): Force constant operand into a register\n+\tfor TARGET_IWMMXT.\n+\n 2016-01-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* doc/invoke.texi (-fstore-merging): Correct default optimization"}, {"sha": "8720a7178d3efdad489ad27d7dca788005dd19ee", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e", "patch": "@@ -3313,7 +3313,14 @@\n \t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n \t\t(match_operand:DI 2 \"arm_xordi_operand\" \"\")))]\n   \"TARGET_32BIT\"\n-  \"\"\n+  {\n+    /* The iWMMXt pattern for xordi3 accepts only register operands but we want\n+       to reuse this expander for all TARGET_32BIT targets so just force the\n+       constants into a register.  Unlike for the anddi3 and iordi3 there are\n+       no NEON instructions that take an immediate.  */\n+    if (TARGET_IWMMXT && !REG_P (operands[2]))\n+      operands[2] = force_reg (DImode, operands[2]);\n+  }\n )\n \n (define_insn_and_split \"*xordi3_insn\""}, {"sha": "9eb748f9fde58bf69fdeff88e45646d5c25a6ce2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e", "patch": "@@ -1,3 +1,8 @@\n+2016-01-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/79145\n+\t* gcc.target/arm/pr79145.c: New test.\n+\n 2017-01-25  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/78363"}, {"sha": "667824400390d6fe72d05a85769d210791b8c378", "filename": "gcc/testsuite/gcc.target/arm/pr79145.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr79145.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr79145.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr79145.c?ref=9aa483a2d87e2d1a5d976ddf9ecd6352d8eebf9e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"Test is specific to the iWMMXt\" { arm*-*-* } { \"-mcpu=*\" } { \"-mcpu=iwmmxt\" } } */\n+/* { dg-skip-if \"Test is specific to the iWMMXt\" { arm*-*-* } { \"-mabi=*\" } { \"-mabi=iwmmxt\" } } */\n+/* { dg-skip-if \"Test is specific to the iWMMXt\" { arm*-*-* } { \"-march=*\" } { \"-march=iwmmxt\" } } */\n+/* { dg-skip-if \"Test is specific to ARM mode\" { arm*-*-* } { \"-mthumb\" } { \"\" } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-require-effective-target arm_iwmmxt_ok } */\n+/* { dg-options \"-mcpu=iwmmxt\" } */\n+\n+int\n+main (void)\n+{\n+  volatile long long t1;\n+  t1 ^= 0x55;\n+  return 0;\n+}"}]}