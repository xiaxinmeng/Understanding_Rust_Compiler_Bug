{"sha": "348d4b0a54328f618754aa5f7f7067ea50e7b3bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ4ZDRiMGE1NDMyOGY2MTg3NTRhYTVmN2Y3MDY3ZWE1MGU3YjNiYw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2014-06-04T03:45:50Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2014-06-04T03:45:50Z"}, "message": "* config/aarch64/aarch64.c (aarch64_classify_address)\n\t(aarch64_legitimize_reload_address): Support full addressing modes\n\tfor vector modes.\n\t* config/aarch64/aarch64.md (mov<mode>, movmisalign<mode>)\n\t(*aarch64_simd_mov<mode>, *aarch64_simd_mov<mode>): Relax predicates.\n\nFrom-SVN: r211211", "tree": {"sha": "a7d5682908854f0ee0bc05e9c8b99bc079e21873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d5682908854f0ee0bc05e9c8b99bc079e21873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/348d4b0a54328f618754aa5f7f7067ea50e7b3bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348d4b0a54328f618754aa5f7f7067ea50e7b3bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348d4b0a54328f618754aa5f7f7067ea50e7b3bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348d4b0a54328f618754aa5f7f7067ea50e7b3bc/comments", "author": null, "committer": null, "parents": [{"sha": "1b1b580c5baa662d0d739fba67c7eed8e06f6040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1b580c5baa662d0d739fba67c7eed8e06f6040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1b580c5baa662d0d739fba67c7eed8e06f6040"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "c188d41d3f5cebfd2bb8bd0389a0fa15073ad5d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348d4b0a54328f618754aa5f7f7067ea50e7b3bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348d4b0a54328f618754aa5f7f7067ea50e7b3bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=348d4b0a54328f618754aa5f7f7067ea50e7b3bc", "patch": "@@ -1,3 +1,11 @@\n+2014-06-04  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_classify_address)\n+\t(aarch64_legitimize_reload_address): Support full addressing modes\n+\tfor vector modes.\n+\t* config/aarch64/aarch64.md (mov<mode>, movmisalign<mode>)\n+\t(*aarch64_simd_mov<mode>, *aarch64_simd_mov<mode>): Relax predicates.\n+\n 2014-06-03  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): Allow non comparisons"}, {"sha": "8b3cfa19ccd50705c2fab91a52c889f74af4a070", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348d4b0a54328f618754aa5f7f7067ea50e7b3bc/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348d4b0a54328f618754aa5f7f7067ea50e7b3bc/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=348d4b0a54328f618754aa5f7f7067ea50e7b3bc", "patch": "@@ -19,8 +19,8 @@\n ;; <http://www.gnu.org/licenses/>.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VALL 0 \"aarch64_simd_nonimmediate_operand\" \"\")\n-\t(match_operand:VALL 1 \"aarch64_simd_general_operand\" \"\"))]\n+  [(set (match_operand:VALL 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:VALL 1 \"general_operand\" \"\"))]\n   \"TARGET_SIMD\"\n   \"\n     if (GET_CODE (operands[0]) == MEM)\n@@ -29,8 +29,8 @@\n )\n \n (define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:VALL 0 \"aarch64_simd_nonimmediate_operand\" \"\")\n-        (match_operand:VALL 1 \"aarch64_simd_general_operand\" \"\"))]\n+  [(set (match_operand:VALL 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:VALL 1 \"general_operand\" \"\"))]\n   \"TARGET_SIMD\"\n {\n   /* This pattern is not permitted to fail during expansion: if both arguments\n@@ -91,9 +91,9 @@\n )\n \n (define_insn \"*aarch64_simd_mov<mode>\"\n-  [(set (match_operand:VD 0 \"aarch64_simd_nonimmediate_operand\"\n+  [(set (match_operand:VD 0 \"nonimmediate_operand\"\n \t\t\"=w, m,  w, ?r, ?w, ?r, w\")\n-\t(match_operand:VD 1 \"aarch64_simd_general_operand\"\n+\t(match_operand:VD 1 \"general_operand\"\n \t\t\"m,  w,  w,  w,  r,  r, Dn\"))]\n   \"TARGET_SIMD\n    && (register_operand (operands[0], <MODE>mode)\n@@ -119,9 +119,9 @@\n )\n \n (define_insn \"*aarch64_simd_mov<mode>\"\n-  [(set (match_operand:VQ 0 \"aarch64_simd_nonimmediate_operand\"\n+  [(set (match_operand:VQ 0 \"nonimmediate_operand\"\n \t\t\"=w, m,  w, ?r, ?w, ?r, w\")\n-\t(match_operand:VQ 1 \"aarch64_simd_general_operand\"\n+\t(match_operand:VQ 1 \"general_operand\"\n \t\t\"m,  w,  w,  w,  r,  r, Dn\"))]\n   \"TARGET_SIMD\n    && (register_operand (operands[0], <MODE>mode)"}, {"sha": "b26e5f54fae40c65f46f4a644391a9eb460262e3", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348d4b0a54328f618754aa5f7f7067ea50e7b3bc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348d4b0a54328f618754aa5f7f7067ea50e7b3bc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=348d4b0a54328f618754aa5f7f7067ea50e7b3bc", "patch": "@@ -3158,11 +3158,11 @@ aarch64_classify_address (struct aarch64_address_info *info,\n   enum rtx_code code = GET_CODE (x);\n   rtx op0, op1;\n   bool allow_reg_index_p =\n-    outer_code != PARALLEL && GET_MODE_SIZE(mode) != 16;\n-\n+    outer_code != PARALLEL && (GET_MODE_SIZE (mode) != 16\n+\t\t\t       || aarch64_vector_mode_supported_p (mode));\n   /* Don't support anything other than POST_INC or REG addressing for\n      AdvSIMD.  */\n-  if (aarch64_vector_mode_p (mode)\n+  if (aarch64_vect_struct_mode_p (mode)\n       && (code != POST_INC && code != REG))\n     return false;\n \n@@ -4092,8 +4092,8 @@ aarch64_legitimize_reload_address (rtx *x_p,\n {\n   rtx x = *x_p;\n \n-  /* Do not allow mem (plus (reg, const)) if vector mode.  */\n-  if (aarch64_vector_mode_p (mode)\n+  /* Do not allow mem (plus (reg, const)) if vector struct mode.  */\n+  if (aarch64_vect_struct_mode_p (mode)\n       && GET_CODE (x) == PLUS\n       && REG_P (XEXP (x, 0))\n       && CONST_INT_P (XEXP (x, 1)))"}]}