{"sha": "7bb9b33b3b89f6c0b78e069fbcb596472440d2e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiOWIzM2IzYjg5ZjZjMGI3OGUwNjlmYmNiNTk2NDcyNDQwZDJlNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-22T12:46:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-22T12:46:28Z"}, "message": "basic_string.h (_M_replace_safe): Change signatures to take size_types and const _CharT*.\n\n2004-01-22  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (_M_replace_safe): Change\n\tsignatures to take size_types and const _CharT*.\n\t(_M_replace_aux): Likewise, takes size_types instead of\n\titerators.\n\t(append(size_type, _CharT)): Update call.\n\t(assign(size_type, _CharT)): Ditto.\n\t(replace(iterator, iterator, size_type, _CharT)): Ditto.\n\t(_M_replace_dispatch(iterator, iterator, _Integer,\n\t_Integer, __true_type)): Ditto.\n\t* include/bits/basic_string.tcc (assign(const _CharT*,\n\tsize_type)): Ditto.\n\t(insert(size_type, const _CharT*, size_type)): Ditto.\n\t(replace(size_type, size_type, const _CharT*,\n\tsize_type)): Ditto.\n\t(_M_replace(iterator, iterator, _InputIterator,\n\t_InputIterator)): Ditto.\n\t(append(const basic_string&)): Ditto.\n\t(append(const basic_string&, size_type, size_type): Ditto.\n\t(append(const _CharT*, size_type): Ditto.\n\t(_M_replace_safe, _M_replace_safe): Change definitions\n\taccordingly, simplify.\n\t* string-inst.cc (_M_replace_safe): Don't instantiate.\n\nFrom-SVN: r76353", "tree": {"sha": "31a2aa236aa151397769550efc96f4ebce1b7ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31a2aa236aa151397769550efc96f4ebce1b7ab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/comments", "author": null, "committer": null, "parents": [{"sha": "bb51e27026e8f068ad191b7200f51439aaa292af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb51e27026e8f068ad191b7200f51439aaa292af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb51e27026e8f068ad191b7200f51439aaa292af"}], "stats": {"total": 120, "additions": 61, "deletions": 59}, "files": [{"sha": "15973591c7e24ff53d707b22875d218e3832a8d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7bb9b33b3b89f6c0b78e069fbcb596472440d2e7", "patch": "@@ -1,3 +1,28 @@\n+2004-01-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (_M_replace_safe): Change\n+\tsignatures to take size_types and const _CharT*.\n+\t(_M_replace_aux): Likewise, takes size_types instead of\n+\titerators.\n+\t(append(size_type, _CharT)): Update call.\n+\t(assign(size_type, _CharT)): Ditto.\n+\t(replace(iterator, iterator, size_type, _CharT)): Ditto.\n+\t(_M_replace_dispatch(iterator, iterator, _Integer,\n+\t_Integer, __true_type)): Ditto.\n+\t* include/bits/basic_string.tcc (assign(const _CharT*,\n+\tsize_type)): Ditto.\n+\t(insert(size_type, const _CharT*, size_type)): Ditto.\n+\t(replace(size_type, size_type, const _CharT*,\n+\tsize_type)): Ditto.\n+\t(_M_replace(iterator, iterator, _InputIterator,\n+\t_InputIterator)): Ditto.\n+\t(append(const basic_string&)): Ditto.\n+\t(append(const basic_string&, size_type, size_type): Ditto.\n+\t(append(const _CharT*, size_type): Ditto.\n+\t(_M_replace_safe, _M_replace_safe): Change definitions\n+\taccordingly, simplify.\n+\t* string-inst.cc (_M_replace_safe): Don't instantiate.\n+\n 2004-01-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.tcc (append(const basic_string&)):"}, {"sha": "56efb5441cd250d2d3f64a1ac6a5a465188dec24", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=7bb9b33b3b89f6c0b78e069fbcb596472440d2e7", "patch": "@@ -750,7 +750,7 @@ namespace std\n        */\n       basic_string&\n       append(size_type __n, _CharT __c)\n-      { return _M_replace_aux(_M_iend(), _M_iend(), __n, __c); }\n+      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }\n \n       /**\n        *  @brief  Append a range of characters.\n@@ -836,7 +836,7 @@ namespace std\n        */\n       basic_string&\n       assign(size_type __n, _CharT __c)\n-      { return _M_replace_aux(_M_ibegin(), _M_iend(), __n, __c); }\n+      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }\n \n       /**\n        *  @brief  Set value to a range of characters.\n@@ -1281,7 +1281,7 @@ namespace std\n       { \n \t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t && __i2 <= _M_iend());\n-\treturn _M_replace_aux(__i1, __i2, __n, __c); \n+\treturn _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c); \n       }\n \n       /**\n@@ -1359,7 +1359,7 @@ namespace std\n \tbasic_string&\n \t_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n, \n \t\t\t    _Integer __val, __true_type)\n-        { return _M_replace_aux(__i1, __i2, __n, __val); }\n+        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }\n \n       template<class _InputIterator>\n \tbasic_string&\n@@ -1368,17 +1368,16 @@ namespace std\n         { return _M_replace(__i1, __i2, __k1, __k2); }\n \n       basic_string&\n-      _M_replace_aux(iterator __i1, iterator __i2, size_type __n2, _CharT __c);\n+      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c);\n \n       template<class _InputIterator>\n         basic_string&\n         _M_replace(iterator __i1, iterator __i2, _InputIterator __k1,\n \t\t   _InputIterator __k2);\n \n-      template<class _ForwardIterator>\n-        basic_string&\n-        _M_replace_safe(iterator __i1, iterator __i2, _ForwardIterator __k1,\n-\t\t   _ForwardIterator __k2);\n+      basic_string&\n+      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n+\t\t      size_type __n2);\n \n       // _S_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIter is an integral type"}, {"sha": "bf6af34767da45af6e28382dce0e10107f7d7d12", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=7bb9b33b3b89f6c0b78e069fbcb596472440d2e7", "patch": "@@ -287,7 +287,7 @@ namespace std\n \t __throw_length_error(\"basic_string::assign\");\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n \t   || less<const _CharT*>()(_M_data() + this->size(), __s))\n-\t return _M_replace_safe(_M_ibegin(), _M_iend(), __s, __s + __n);\n+\t return _M_replace_safe(size_type(0), this->size(), __s, __n);\n        else\n \t {\n \t   // Work in-place\n@@ -324,8 +324,7 @@ namespace std\n          __throw_length_error(\"basic_string::insert\");\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n            || less<const _CharT*>()(_M_data() + this->size(), __s))\n-         return _M_replace_safe(_M_ibegin() + __pos, _M_ibegin() + __pos,\n-                                __s, __s + __n);\n+         return _M_replace_safe(__pos, size_type(0), __s, __n);\n        else\n          {\n            // Work in-place. If _M_mutate reallocates the string, __s\n@@ -361,8 +360,7 @@ namespace std\n          __throw_length_error(\"basic_string::replace\");\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n            || less<const _CharT*>()(_M_data() + this->size(), __s))\n-         return _M_replace_safe(_M_ibegin() + __pos,\n-\t\t\t\t_M_ibegin() + __pos + __n1, __s, __s + __n2);\n+         return _M_replace_safe(__pos, __n1, __s, __n2);\n        // Todo: optimized in-place replace.\n        else\n \t return _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __n1,\n@@ -608,16 +606,14 @@ namespace std\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n-    _M_replace_aux(iterator __i1, iterator __i2, size_type __n2, _CharT __c)\n+    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n+\t\t   _CharT __c)\n     {\n-      const size_type __n1 = __i2 - __i1;\n-      const size_type __off1 = __i1 - _M_ibegin();\n-      if (max_size() - (this->size() - __n1) <= __n2)\n+      if (this->size() - __n1 > this->max_size() - __n2)\n \t__throw_length_error(\"basic_string::_M_replace_aux\");\n-      _M_mutate(__off1, __n1, __n2);\n-      // Invalidated __i1, __i2\n+      _M_mutate(__pos1, __n1, __n2);\n       if (__n2)\n-\ttraits_type::assign(_M_data() + __off1, __n2, __c);\n+\ttraits_type::assign(_M_data() + __pos1, __n2, __c);\n       return *this;\n     }\n \n@@ -630,36 +626,26 @@ namespace std\n       _M_replace(iterator __i1, iterator __i2, _InputIterator __k1, \n \t\t _InputIterator __k2)\n       {\n-\t// Save concerned source string data in a temporary.\n \tconst basic_string __s(__k1, __k2);\n-\treturn _M_replace_safe(__i1, __i2, __s._M_ibegin(), __s._M_iend());\n+\treturn _M_replace_safe(__i1 - _M_ibegin(), __i2 - __i1, __s._M_data(),\n+\t\t\t       __s.size());\n       }\n \n-  // This is a special replace helper, which does not buffer internally\n-  // and can be used in \"safe\" situations involving forward iterators,\n+  // This helper doesn't buffer internally and can be used in \"safe\" situations,\n   // i.e., when source and destination ranges are known to not overlap.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template<typename _ForwardIterator>\n-      basic_string<_CharT, _Traits, _Alloc>&\n-      basic_string<_CharT, _Traits, _Alloc>::\n-      _M_replace_safe(iterator __i1, iterator __i2, _ForwardIterator __k1, \n-\t\t      _ForwardIterator __k2)\n-      {\n-\tconst size_type __dnew = static_cast<size_type>(std::distance(__k1, __k2));\n-\tconst size_type __dold = __i2 - __i1;\n-\tconst size_type __dmax = this->max_size();\n-\n-\tif (__dmax <= __dnew)\n-\t  __throw_length_error(\"basic_string::_M_replace_safe\");\n-\tconst size_type __off = __i1 - _M_ibegin();\n-\t_M_mutate(__off, __dold, __dnew);\n-\n-\t// Invalidated __i1, __i2\n-        if (__dnew)\n-\t  _S_copy_chars(_M_data() + __off, __k1, __k2);\n-\n-\treturn *this;\n-      }\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n+\t\t    size_type __n2)\n+    {\n+      if (this->size() - __n1 > this->max_size() - __n2)\n+\t__throw_length_error(\"basic_string::_M_replace_safe\");\n+      _M_mutate(__pos1, __n1, __n2);\n+      if (__n2)\n+\ttraits_type::copy(_M_data() + __pos1, __s, __n2);\n+      return *this;\n+    }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n@@ -684,8 +670,8 @@ namespace std\n       const size_type __len = __size + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n-      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_ibegin(),\n-\t\t\t     __str._M_iend());\n+      return _M_replace_safe(this->size(), size_type(0), __str._M_data(),\n+\t\t\t     __str.size());\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -701,8 +687,8 @@ namespace std\n       const size_type __len = __n + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n-      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_ibegin()\n-\t\t\t     + __pos, __str._M_ibegin() + __pos + __n);\n+      return _M_replace_safe(this->size(), size_type(0), __str._M_data()\n+\t\t\t     + __pos, __n);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -714,7 +700,7 @@ namespace std\n       const size_type __len = __n + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n-      return _M_replace_safe(_M_iend(), _M_iend(), __s, __s + __n);\n+      return _M_replace_safe(this->size(), size_type(0), __s, __n);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "db041799689261bdf5b7db2a66a04ede3115dedf", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb9b33b3b89f6c0b78e069fbcb596472440d2e7/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=7bb9b33b3b89f6c0b78e069fbcb596472440d2e7", "patch": "@@ -67,14 +67,6 @@ namespace std\n     S&\n     S::_M_replace(S::iterator, S::iterator, const C*, const C*);  \n \n-  template \n-    S& \n-    S::_M_replace_safe(S::iterator, S::iterator, S::iterator, S::iterator);\n-\n-  template\n-    S&\n-    S::_M_replace_safe(S::iterator, S::iterator, const C*, const C*);  \n-\n   template \n     C* \n     S::_S_construct(S::iterator, S::iterator, "}]}