{"sha": "2036a15c6d3583a413934700c527ae626be01075", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzNmExNWM2ZDM1ODNhNDEzOTM0NzAwYzUyN2FlNjI2YmUwMTA3NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-12-03T16:58:03Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-12-03T16:58:03Z"}, "message": "class.c (handle_using_decl): Fix comment.\n\n\t* class.c (handle_using_decl): Fix comment.  Don't lookup\n\tconstructors in base classes.\n\t(validate_lhs): Fix typo in comment.\n\t* search.c (lookup_field_1): Don't return a USING_DECL.\n\t* cp-tree.h (DECL_ACCESS): Improve documentation.\n\t* decl.c (expand_static_init): Don't set the initialization-done\n\tflag until the initialization is done.\n\nFrom-SVN: r24076", "tree": {"sha": "b46735bab28a343106b9d77c6ed5d1bb21f63107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b46735bab28a343106b9d77c6ed5d1bb21f63107"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2036a15c6d3583a413934700c527ae626be01075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2036a15c6d3583a413934700c527ae626be01075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2036a15c6d3583a413934700c527ae626be01075", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2036a15c6d3583a413934700c527ae626be01075/comments", "author": null, "committer": null, "parents": [{"sha": "52e01aa669275fa5ad78b13e6f2cd9330a928f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e01aa669275fa5ad78b13e6f2cd9330a928f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e01aa669275fa5ad78b13e6f2cd9330a928f7f"}], "stats": {"total": 102, "additions": 70, "deletions": 32}, "files": [{"sha": "41e9f2ff959bc43b5914b0550919000f70b0714c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2036a15c6d3583a413934700c527ae626be01075", "patch": "@@ -1,3 +1,15 @@\n+1998-12-03  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* class.c (handle_using_decl): Fix comment.  Don't lookup\n+\tconstructors in base classes.\n+\t(validate_lhs): Fix typo in comment.\n+\t* search.c (lookup_field_1): Don't return a USING_DECL.\n+\t\n+\t* cp-tree.h (DECL_ACCESS): Improve documentation.\n+\n+\t* decl.c (expand_static_init): Don't set the initialization-done\n+\tflag until the initialization is done.\n+\t\n 1998-12-02  Mark Mitchell  <mark@markmitchell.com>\n \n \t* decl2.c (validate_nonmember_using_decl): Complain about using"}, {"sha": "8cd1c82ba8dd2f2a3196a73257d83610e936d3e8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2036a15c6d3583a413934700c527ae626be01075", "patch": "@@ -1457,8 +1457,7 @@ alter_access (t, binfo, fdecl, access)\n }\n \n /* Process the USING_DECL, which is a member of T.  The METHOD_VEC, if\n-   non-NULL, is the methods of T.  The FIELDS are the fields of T.\n-   Returns 1 if the USING_DECL was valid, 0 otherwise.  */\n+   non-NULL, is the methods of T.  The FIELDS are the fields of T.  */\n \n void\n handle_using_decl (using_decl, t, method_vec, fields)\n@@ -1485,8 +1484,11 @@ handle_using_decl (using_decl, t, method_vec, fields)\n   \n   if (name == constructor_name (ctype)\n       || name == constructor_name_full (ctype))\n-    cp_error_at (\"using-declaration for constructor\", using_decl);\n-  \n+    {\n+      cp_error_at (\"using-declaration for constructor\", using_decl);\n+      return;\n+    }\n+\n   fdecl = lookup_member (binfo, name, 0, 0);\n   \n   if (!fdecl)\n@@ -4994,7 +4996,7 @@ validate_lhs (lhstype, complain)\n \n /* This function will instantiate the type of the expression given in\n    RHS to match the type of LHSTYPE.  If errors exist, then return\n-   error_mark_node.  If only complain is COMPLAIN is set.  If we are\n+   error_mark_node.  We only complain is COMPLAIN is set.  If we are\n    not complaining, never modify rhs, as overload resolution wants to\n    try many possible instantiations, in hopes that at least one will\n    work."}, {"sha": "8f2dc856c98dcf6ce23b2ad36513debf1ba26fad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2036a15c6d3583a413934700c527ae626be01075", "patch": "@@ -1687,8 +1687,12 @@ extern int flag_new_for_scope;\n    NULL_TREE.  */\n #define DECL_FRIENDLIST(NODE)\t\t(DECL_INITIAL (NODE))\n \n-/* The DECL_ACCESS is used to record under which context\n-   special access rules apply.  */\n+/* The DECL_ACCESS, if non-NULL, is a TREE_LIST.  The TREE_PURPOSE of\n+   each node is a type; the TREE_VALUE is the access granted for this\n+   DECL in that type.  The DECL_ACCESS is set by access declarations.\n+   For example, if a member that would normally be public in a\n+   derived class is made protected, then the derived class and the\n+   protected_access_node will appear in the DECL_ACCESS for the node.  */\n #define DECL_ACCESS(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.access)\n \n /* C++: all of these are overloaded!"}, {"sha": "4a4f13822acc467673ef367faacc014795c18ad7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2036a15c6d3583a413934700c527ae626be01075", "patch": "@@ -7869,14 +7869,39 @@ expand_static_init (decl, init)\n       /* Remember this information until end of file.  */\n       push_obstacks (&permanent_obstack, &permanent_obstack);\n \n-      /* Emit code to perform this initialization but once.  */\n+      /* Emit code to perform this initialization but once.  This code\n+\t looks like:\n+\n+           static int temp = 0;\n+           if (!temp) {\n+             // Do initialization.\n+\t     temp = 1;\n+\t     // Register variable for destruction at end of program.\n+\t   }\n+\n+\t Note that the `temp' variable is only set to 1 *after* the\n+\t initialization is complete.  This ensures that an exception,\n+\t thrown during the construction, will cause the variable to\n+\t reinitialized when we pass through this code again, as per:\n+\t \n+\t   [stmt.dcl]\n+\n+\t   If the initialization exits by throwing an exception, the\n+\t   initialization is not complete, so it will be tried again\n+\t   the next time control enters the declaration.\n+\n+         In theory, this process should be thread-safe, too; multiple\n+\t threads should not be able to initialize the variable more\n+\t than once.  We don't yet attempt to ensure thread-safety.  */\n       temp = get_temp_name (integer_type_node, 1);\n       rest_of_decl_compilation (temp, NULL_PTR, 0, 0);\n+\n+      /* Begin the conditional initialization.  */\n       expand_start_cond (build_binary_op (EQ_EXPR, temp,\n \t\t\t\t\t  integer_zero_node, 1), 0);\n       expand_start_target_temps ();\n \n-      expand_assignment (temp, integer_one_node, 0, 0);\n+      /* Do the initialization itself.  */\n       if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl))\n \t  || (init && TREE_CODE (init) == TREE_LIST))\n \t{\n@@ -7886,9 +7911,17 @@ expand_static_init (decl, init)\n       else if (init)\n \texpand_assignment (decl, init, 0, 0);\n \n-      /* Cleanup any temporaries needed for the initial value.  */\n+      /* Set TEMP to 1.  */\n+      expand_assignment (temp, integer_one_node, 0, 0);\n+\n+      /* Cleanup any temporaries needed for the initial value.  If\n+\t destroying one of the temporaries causes an exception to be\n+\t thrown, then the object itself has still been fully\n+\t constructed.  */\n       expand_end_target_temps ();\n \n+      /* Use atexit to register a function for destroying this static\n+\t variable.  */\n       if (TYPE_NEEDS_DESTRUCTOR (TREE_TYPE (decl)))\n \t{\n \t  tree cleanup, fcall;"}, {"sha": "8b1576458f94c9a0fd2bb540572d83fd9b5e12ab", "filename": "gcc/cp/search.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2036a15c6d3583a413934700c527ae626be01075/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=2036a15c6d3583a413934700c527ae626be01075", "patch": "@@ -523,7 +523,14 @@ lookup_field_1 (type, name)\n \t  if (temp)\n \t    return temp;\n \t}\n-      if (DECL_NAME (field) == name)\n+      if (TREE_CODE (field) == USING_DECL)\n+\t/* For now, we're just treating member using declarations as\n+\t   old ARM-style access declarations.  Thus, there's no reason\n+\t   to return a USING_DECL, and the rest of the compiler can't\n+\t   handle it.  Once the class is defined, these are purged\n+\t   from TYPE_FIELDS anyhow; see handle_using_decl.  */\n+\t;\n+      else if (DECL_NAME (field) == name)\n \t{\n \t  if ((TREE_CODE(field) == VAR_DECL || TREE_CODE(field) == CONST_DECL)\n \t      && DECL_ASSEMBLER_NAME (field) != NULL)"}, {"sha": "3b17da029e83999daa35f69be9fb1c36002c37d7", "filename": "gcc/testsuite/g++.old-deja/g++.other/init7.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2036a15c6d3583a413934700c527ae626be01075/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2036a15c6d3583a413934700c527ae626be01075/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit7.C?ref=2036a15c6d3583a413934700c527ae626be01075", "patch": "@@ -4,8 +4,6 @@\n // The initialization of a static local variable must be retried if a\n // previous try finished by throwing an exception [stmt.dcl]/4\n \n-// execution test - XFAIL *-*-*\n-\n struct foo {\n   foo() { throw true; }\n };"}, {"sha": "075d83ac79a5c49857bc3af1971aa986ed4a51b5", "filename": "gcc/testsuite/g++.old-deja/g++.other/singleton.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2036a15c6d3583a413934700c527ae626be01075/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2036a15c6d3583a413934700c527ae626be01075/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C?ref=2036a15c6d3583a413934700c527ae626be01075", "patch": "@@ -1,4 +1,3 @@\n-// execution test - re-initialization of statics XFAIL *-*-*\n // This tests two things:\n // 1. there is an annoying warning.\n // singleton.C:26: warning: `class singleton' only defines private constructors and has no friends"}, {"sha": "31aa7cd560d5cf2970d20db9f7a85c3c9616318a", "filename": "gcc/testsuite/g++.old-deja/g++.other/using6.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2036a15c6d3583a413934700c527ae626be01075/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2036a15c6d3583a413934700c527ae626be01075/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing6.C?ref=2036a15c6d3583a413934700c527ae626be01075", "patch": "@@ -3,13 +3,11 @@\n // Based on bug report by Klaus-Georg Adams\n // <Klaus-Georg.Adams@chemie.uni-karlsruhe.de>\n \n-// crash test - XFAIL *-*-*\n-\n struct bar {\n   typedef bar t;\n };\n \n struct foo : bar {\n   using bar::t;\n-  t baz(); // gets bogus error - XFAIL *-*-*\n+  t baz(); \n };"}, {"sha": "76af0de7b062d46815e303259311475b4631b0aa", "filename": "gcc/testsuite/g++.old-deja/g++.other/using7.C", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e01aa669275fa5ad78b13e6f2cd9330a928f7f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e01aa669275fa5ad78b13e6f2cd9330a928f7f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fusing7.C?ref=52e01aa669275fa5ad78b13e6f2cd9330a928f7f", "patch": "@@ -1,15 +0,0 @@\n-// Build don't link:\n-\n-// Based on bug report by Klaus-Georg Adams\n-// <Klaus-Georg.Adams@chemie.uni-karlsruhe.de>\n-\n-// crash test - XFAIL *-*-*\n-\n-struct bar {\n-  typedef bar t;\n-};\n-\n-struct foo : bar {\n-  using bar::t;\n-  t baz; // gets bogus error - XFAIL *-*-*\n-};"}]}