{"sha": "7ecc260031bb303b3fb04895f1951d8914ac7f73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjYzI2MDAzMWJiMzAzYjNmYjA0ODk1ZjE5NTFkODkxNGFjN2Y3Mw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-25T18:05:29Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-25T18:05:29Z"}, "message": "c-pretty-print.h (c_pretty_printer::primary_expression): Now a virtua member function.\n\nc-family/\n\t* c-pretty-print.h (c_pretty_printer::primary_expression): Now a\n\tvirtua member function.\n\t(pp_primary_expression): Adjust.\n\t(pp_c_primary_expression): Remove.\n\t* c-pretty-print.c (c_pretty_printer::primary_expression): Rename\n\tfrom pp_c_primary_expression.  Adjust.\n\t(pp_c_initializer_list): Use pp_primary_expression.\n\t(c_pretty_printer::c_pretty_printer): Do not assign to\n\tprimary_expression.\n\ncp/\n\t* cxx-pretty-print.h (cxx_pretty_printer::primary_expression): Now\n\tan overrider of c_pretty_printer::primary_expression.\n\t* cxx-pretty-print.c (cxx_pretty_printer::primary_expression):\n\tRename from pp_cxx_primary_expression.  Adjust.\n\t(pp_cxx_postfix_expression): Use pp_primary_expression.\n\t(pp_cxx_ctor_initializer): Likewise.\n\t(cxx_pretty_printer::cxx_pretty_printer): Do not assign to\n\tprimary_expression.\n\nFrom-SVN: r201978", "tree": {"sha": "e3e822c597db970f5994f185079de90625e74346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3e822c597db970f5994f185079de90625e74346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ecc260031bb303b3fb04895f1951d8914ac7f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ecc260031bb303b3fb04895f1951d8914ac7f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ecc260031bb303b3fb04895f1951d8914ac7f73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ecc260031bb303b3fb04895f1951d8914ac7f73/comments", "author": null, "committer": null, "parents": [{"sha": "d5c3d3ef5464dd5a89a8158ffe8b38df5a4c1708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c3d3ef5464dd5a89a8158ffe8b38df5a4c1708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c3d3ef5464dd5a89a8158ffe8b38df5a4c1708"}], "stats": {"total": 107, "additions": 64, "deletions": 43}, "files": [{"sha": "28c6ff05f39db0f76b8772ae10eda308486ff957", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7ecc260031bb303b3fb04895f1951d8914ac7f73", "patch": "@@ -1,3 +1,15 @@\n+2013-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.h (c_pretty_printer::primary_expression): Now a\n+\tvirtua member function.\n+\t(pp_primary_expression): Adjust.\n+\t(pp_c_primary_expression): Remove.\n+\t* c-pretty-print.c (c_pretty_printer::primary_expression): Rename\n+\tfrom pp_c_primary_expression.  Adjust.\n+\t(pp_c_initializer_list): Use pp_primary_expression.\n+\t(c_pretty_printer::c_pretty_printer): Do not assign to\n+\tprimary_expression.\n+\n 2013-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-pretty-print.h (c_pretty_printer::translate_string): Declare."}, {"sha": "870a5c78fa96142c007de447bcb0ff50fed16025", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=7ecc260031bb303b3fb04895f1951d8914ac7f73", "patch": "@@ -1212,7 +1212,7 @@ pp_c_identifier (c_pretty_printer *pp, const char *id)\n       ( expression )   */\n \n void\n-pp_c_primary_expression (c_pretty_printer *pp, tree e)\n+c_pretty_printer::primary_expression (tree e)\n {\n   switch (TREE_CODE (e))\n     {\n@@ -1222,49 +1222,49 @@ pp_c_primary_expression (c_pretty_printer *pp, tree e)\n     case CONST_DECL:\n     case FUNCTION_DECL:\n     case LABEL_DECL:\n-      pp_c_tree_decl_identifier (pp, e);\n+      pp_c_tree_decl_identifier (this, e);\n       break;\n \n     case IDENTIFIER_NODE:\n-      pp_c_tree_identifier (pp, e);\n+      pp_c_tree_identifier (this, e);\n       break;\n \n     case ERROR_MARK:\n-      pp->translate_string (\"<erroneous-expression>\");\n+      translate_string (\"<erroneous-expression>\");\n       break;\n \n     case RESULT_DECL:\n-      pp->translate_string (\"<return-value>\");\n+      translate_string (\"<return-value>\");\n       break;\n \n     case INTEGER_CST:\n     case REAL_CST:\n     case FIXED_CST:\n     case STRING_CST:\n-      pp_constant (pp, e);\n+      constant (e);\n       break;\n \n     case TARGET_EXPR:\n-      pp_c_ws_string (pp, \"__builtin_memcpy\");\n-      pp_c_left_paren (pp);\n-      pp_ampersand (pp);\n-      pp_primary_expression (pp, TREE_OPERAND (e, 0));\n-      pp_separate_with (pp, ',');\n-      pp_ampersand (pp);\n-      pp_initializer (pp, TREE_OPERAND (e, 1));\n+      pp_c_ws_string (this, \"__builtin_memcpy\");\n+      pp_c_left_paren (this);\n+      pp_ampersand (this);\n+      primary_expression (TREE_OPERAND (e, 0));\n+      pp_separate_with (this, ',');\n+      pp_ampersand (this);\n+      pp_initializer (this, TREE_OPERAND (e, 1));\n       if (TREE_OPERAND (e, 2))\n \t{\n-\t  pp_separate_with (pp, ',');\n-\t  pp_c_expression (pp, TREE_OPERAND (e, 2));\n+\t  pp_separate_with (this, ',');\n+\t  pp_c_expression (this, TREE_OPERAND (e, 2));\n \t}\n-      pp_c_right_paren (pp);\n+      pp_c_right_paren (this);\n       break;\n \n     default:\n       /* FIXME:  Make sure we won't get into an infinite loop.  */\n-      pp_c_left_paren (pp);\n-      pp_expression (pp, e);\n-      pp_c_right_paren (pp);\n+      pp_c_left_paren (this);\n+      pp_expression (this, e);\n+      pp_c_right_paren (this);\n       break;\n     }\n }\n@@ -1356,7 +1356,7 @@ pp_c_initializer_list (c_pretty_printer *pp, tree e)\n \t    if (code == RECORD_TYPE || code == UNION_TYPE)\n \t      {\n \t\tpp_c_dot (pp);\n-\t\tpp_c_primary_expression (pp, TREE_PURPOSE (init));\n+\t\tpp_primary_expression (pp, TREE_PURPOSE (init));\n \t      }\n \t    else\n \t      {\n@@ -2119,7 +2119,7 @@ pp_c_assignment_expression (c_pretty_printer *pp, tree e)\n   Implementation note:  instead of going through the usual recursion\n   chain, I take the liberty of dispatching nodes to the appropriate\n   functions.  This makes some redundancy, but it worths it. That also\n-  prevents a possible infinite recursion between pp_c_primary_expression ()\n+  prevents a possible infinite recursion between pp_primary_expression ()\n   and pp_c_expression ().  */\n \n void\n@@ -2344,7 +2344,6 @@ c_pretty_printer::c_pretty_printer ()\n \n   statement                 = pp_c_statement;\n \n-  primary_expression        = pp_c_primary_expression;\n   postfix_expression        = pp_c_postfix_expression;\n   unary_expression          = pp_c_unary_expression;\n   initializer               = pp_c_initializer;"}, {"sha": "9e95e143ca024548b9cfaeda9fdf2b6011027eda", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=7ecc260031bb303b3fb04895f1951d8914ac7f73", "patch": "@@ -56,6 +56,7 @@ struct c_pretty_printer : pretty_printer\n \n   virtual void constant (tree);\n   virtual void id_expression (tree);\n+  virtual void primary_expression (tree);\n   /* Points to the first element of an array of offset-list.\n      Not used yet.  */\n   int *offset_list;\n@@ -81,7 +82,6 @@ struct c_pretty_printer : pretty_printer\n \n   c_pretty_print_fn statement;\n \n-  c_pretty_print_fn primary_expression;\n   c_pretty_print_fn postfix_expression;\n   c_pretty_print_fn unary_expression;\n   c_pretty_print_fn multiplicative_expression;\n@@ -114,7 +114,7 @@ struct c_pretty_printer : pretty_printer\n \n #define pp_constant(PP, E)              (PP)->constant (E)\n #define pp_id_expression(PP, E)         (PP)->id_expression (E)\n-#define pp_primary_expression(PP, E)    (PP)->primary_expression (PP, E)\n+#define pp_primary_expression(PP, E)    (PP)->primary_expression (E)\n #define pp_postfix_expression(PP, E)    (PP)->postfix_expression (PP, E)\n #define pp_unary_expression(PP, E)      (PP)->unary_expression (PP, E)\n #define pp_initializer(PP, E)           (PP)->initializer (PP, E)\n@@ -170,7 +170,6 @@ void pp_c_call_argument_list (c_pretty_printer *, tree);\n void pp_c_unary_expression (c_pretty_printer *, tree);\n void pp_c_cast_expression (c_pretty_printer *, tree);\n void pp_c_postfix_expression (c_pretty_printer *, tree);\n-void pp_c_primary_expression (c_pretty_printer *, tree);\n void pp_c_init_declarator (c_pretty_printer *, tree);\n void pp_c_ws_string (c_pretty_printer *, const char *);\n void pp_c_identifier (c_pretty_printer *, const char *);"}, {"sha": "0bc0b9a7e19c14dc7ca04bbcdbf42fea462890db", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7ecc260031bb303b3fb04895f1951d8914ac7f73", "patch": "@@ -1,3 +1,14 @@\n+2013-08-25  Gabriel Dos Reis  <gdr@cs.tamu.edu>\n+\n+\t* cxx-pretty-print.h (cxx_pretty_printer::primary_expression): Now\n+\tan overrider of c_pretty_printer::primary_expression.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::primary_expression):\n+\tRename from pp_cxx_primary_expression.  Adjust.\n+\t(pp_cxx_postfix_expression): Use pp_primary_expression.\n+\t(pp_cxx_ctor_initializer): Likewise.\n+\t(cxx_pretty_printer::cxx_pretty_printer): Do not assign to\n+\tprimary_expression.\n+\n 2013-08-23  Jan Hubicka  <jh@suse.cz>\n \n \t* cp-tree.h (struct lang_type_class): Free is_final bit."}, {"sha": "2ee72a7d96fa6458ace202097aed2b8cc7b9c81f", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=7ecc260031bb303b3fb04895f1951d8914ac7f73", "patch": "@@ -407,20 +407,20 @@ pp_cxx_userdef_literal (cxx_pretty_printer *pp, tree t)\n      __is_trivial ( type-id )\n      __is_union ( type-id )  */\n \n-static void\n-pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::primary_expression (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n     case INTEGER_CST:\n     case REAL_CST:\n     case COMPLEX_CST:\n     case STRING_CST:\n-      pp_constant (pp, t);\n+      constant (t);\n       break;\n \n     case USERDEF_LITERAL:\n-      pp_cxx_userdef_literal (pp, t);\n+      pp_cxx_userdef_literal (this, t);\n       break;\n \n     case BASELINK:\n@@ -432,36 +432,36 @@ pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n     case OVERLOAD:\n     case CONST_DECL:\n     case TEMPLATE_DECL:\n-      pp_id_expression (pp, t);\n+      id_expression (t);\n       break;\n \n     case RESULT_DECL:\n     case TEMPLATE_TYPE_PARM:\n     case TEMPLATE_TEMPLATE_PARM:\n     case TEMPLATE_PARM_INDEX:\n-      pp_cxx_unqualified_id (pp, t);\n+      pp_cxx_unqualified_id (this, t);\n       break;\n \n     case STMT_EXPR:\n-      pp_cxx_left_paren (pp);\n-      pp_cxx_statement (pp, STMT_EXPR_STMT (t));\n-      pp_cxx_right_paren (pp);\n+      pp_cxx_left_paren (this);\n+      pp_cxx_statement (this, STMT_EXPR_STMT (t));\n+      pp_cxx_right_paren (this);\n       break;\n \n     case TRAIT_EXPR:\n-      pp_cxx_trait_expression (pp, t);\n+      pp_cxx_trait_expression (this, t);\n       break;\n \n     case VA_ARG_EXPR:\n-      pp_cxx_va_arg_expression (pp, t);\n+      pp_cxx_va_arg_expression (this, t);\n       break;\n \n     case OFFSETOF_EXPR:\n-      pp_cxx_offsetof_expression (pp, t);\n+      pp_cxx_offsetof_expression (this, t);\n       break;\n \n     default:\n-      pp_c_primary_expression (pp, t);\n+      c_pretty_printer::primary_expression (t);\n       break;\n     }\n }\n@@ -591,7 +591,7 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n     case CONST_DECL:\n     case TEMPLATE_DECL:\n     case RESULT_DECL:\n-      pp_cxx_primary_expression (pp, t);\n+      pp_primary_expression (pp, t);\n       break;\n \n     case DYNAMIC_CAST_EXPR:\n@@ -1069,7 +1069,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n     case TEMPLATE_PARM_INDEX:\n     case TEMPLATE_TEMPLATE_PARM:\n     case STMT_EXPR:\n-      pp_cxx_primary_expression (pp, t);\n+      pp_primary_expression (pp, t);\n       break;\n \n     case CALL_EXPR:\n@@ -1608,9 +1608,9 @@ pp_cxx_ctor_initializer (cxx_pretty_printer *pp, tree t)\n       bool is_pack = PACK_EXPANSION_P (purpose);\n \n       if (is_pack)\n-\tpp_cxx_primary_expression (pp, PACK_EXPANSION_PATTERN (purpose));\n+\tpp_primary_expression (pp, PACK_EXPANSION_PATTERN (purpose));\n       else\n-\tpp_cxx_primary_expression (pp, purpose);\n+\tpp_primary_expression (pp, purpose);\n       pp_cxx_call_argument_list (pp, TREE_VALUE (t));\n       if (is_pack)\n \tpp_cxx_ws_string (pp, \"...\");\n@@ -2448,7 +2448,6 @@ cxx_pretty_printer::cxx_pretty_printer ()\n \n   /* pp->statement = (pp_fun) pp_cxx_statement;  */\n \n-  primary_expression = (pp_fun) pp_cxx_primary_expression;\n   postfix_expression = (pp_fun) pp_cxx_postfix_expression;\n   unary_expression = (pp_fun) pp_cxx_unary_expression;\n   multiplicative_expression = (pp_fun) pp_cxx_multiplicative_expression;"}, {"sha": "2e2391f8e3e13790b7af5252d00525ea336fbf00", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecc260031bb303b3fb04895f1951d8914ac7f73/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=7ecc260031bb303b3fb04895f1951d8914ac7f73", "patch": "@@ -35,6 +35,7 @@ struct cxx_pretty_printer : c_pretty_printer\n \n   void constant (tree);\n   void id_expression (tree);\n+  void primary_expression (tree);\n   /* This is the enclosing scope of the entity being pretty-printed.  */\n   tree enclosing_scope;\n };"}]}