{"sha": "b76e99102f8a10f25b43e4dd64f2721922c272c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2ZTk5MTAyZjhhMTBmMjViNDNlNGRkNjRmMjcyMTkyMmMyNzJjOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-04T20:54:24Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-04T20:54:24Z"}, "message": "omp-low.c (struct omp_context): Remove reduction_map field.\n\n\t* omp-low.c (struct omp_context): Remove reduction_map field.\n\t(lookup_oacc_reduction, maybe_lookup_oacc_reduction): Delete.\n\t(new_omp_context, delete_omp_context, scan_omp_target): Remove\n\treduction_map handling.\n\t(lower_omp_target): Remove obsolete openacc reduction handling.\n\nFrom-SVN: r229781", "tree": {"sha": "0066dd24ed4d419d10a58642e11d261a1918cba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0066dd24ed4d419d10a58642e11d261a1918cba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b76e99102f8a10f25b43e4dd64f2721922c272c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76e99102f8a10f25b43e4dd64f2721922c272c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76e99102f8a10f25b43e4dd64f2721922c272c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76e99102f8a10f25b43e4dd64f2721922c272c9/comments", "author": null, "committer": null, "parents": [{"sha": "ccc8282babb2336eab6457a0541a884348c7bafb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc8282babb2336eab6457a0541a884348c7bafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccc8282babb2336eab6457a0541a884348c7bafb"}], "stats": {"total": 58, "additions": 11, "deletions": 47}, "files": [{"sha": "0500a0c191fc91d812115ca63461b867de2cef72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e99102f8a10f25b43e4dd64f2721922c272c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e99102f8a10f25b43e4dd64f2721922c272c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b76e99102f8a10f25b43e4dd64f2721922c272c9", "patch": "@@ -1,3 +1,11 @@\n+2015-11-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* omp-low.c (struct omp_context): Remove reduction_map field.\n+\t(lookup_oacc_reduction, maybe_lookup_oacc_reduction): Delete.\n+\t(new_omp_context, delete_omp_context, scan_omp_target): Remove\n+\treduction_map handling.\n+\t(lower_omp_target): Remove obsolete openacc reduction handling.\n+\n 2015-11-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/nvptx/nvptx.c (nvptx_goacc_validate_dims): Add checking."}, {"sha": "ac88fa58d7aef5204df58de4c1ac5c2206be90a4", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 47, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76e99102f8a10f25b43e4dd64f2721922c272c9/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76e99102f8a10f25b43e4dd64f2721922c272c9/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b76e99102f8a10f25b43e4dd64f2721922c272c9", "patch": "@@ -169,11 +169,6 @@ struct omp_context\n      construct.  In the case of a parallel, this is in the child function.  */\n   tree block_vars;\n \n-  /* A map of reduction pointer variables.  For accelerators, each\n-     reduction variable is replaced with an array.  Each thread, in turn,\n-     is assigned to a slot on that array.  */\n-  splay_tree reduction_map;\n-\n   /* Label to which GOMP_cancel{,llation_point} and explicit and implicit\n      barriers should jump to during omplower pass.  */\n   tree cancel_label;\n@@ -1090,23 +1085,6 @@ maybe_lookup_field (tree var, omp_context *ctx)\n   return maybe_lookup_field ((splay_tree_key) var, ctx);\n }\n \n-static inline tree\n-lookup_oacc_reduction (const char *id, omp_context *ctx)\n-{\n-  splay_tree_node n;\n-  n = splay_tree_lookup (ctx->reduction_map, (splay_tree_key) id);\n-  return (tree) n->value;\n-}\n-\n-static inline tree\n-maybe_lookup_oacc_reduction (tree var, omp_context *ctx)\n-{\n-  splay_tree_node n = NULL;\n-  if (ctx->reduction_map)\n-    n = splay_tree_lookup (ctx->reduction_map, (splay_tree_key) var);\n-  return n ? (tree) n->value : NULL_TREE;\n-}\n-\n /* Return true if DECL should be copied by pointer.  SHARED_CTX is\n    the parallel context if DECL is to be shared.  */\n \n@@ -1667,7 +1645,6 @@ new_omp_context (gimple *stmt, omp_context *outer_ctx)\n       ctx->cb = outer_ctx->cb;\n       ctx->cb.block = NULL;\n       ctx->depth = outer_ctx->depth + 1;\n-      ctx->reduction_map = outer_ctx->reduction_map;\n     }\n   else\n     {\n@@ -1740,13 +1717,6 @@ delete_omp_context (splay_tree_value value)\n     splay_tree_delete (ctx->field_map);\n   if (ctx->sfield_map)\n     splay_tree_delete (ctx->sfield_map);\n-  /* Reduction map is copied to nested contexts, so only delete it in the\n-     owner.  */\n-  if (ctx->reduction_map\n-      && gimple_code (ctx->stmt) == GIMPLE_OMP_TARGET\n-      && is_gimple_omp_offloaded (ctx->stmt)\n-      && is_gimple_omp_oacc (ctx->stmt))\n-    splay_tree_delete (ctx->reduction_map);\n \n   /* We hijacked DECL_ABSTRACT_ORIGIN earlier.  We need to clear it before\n      it produces corrupt debug information.  */\n@@ -3077,10 +3047,6 @@ scan_omp_target (gomp_target *stmt, omp_context *outer_ctx)\n   TYPE_ARTIFICIAL (ctx->record_type) = 1;\n   if (offloaded)\n     {\n-      if (is_gimple_omp_oacc (stmt))\n-\tctx->reduction_map = splay_tree_new (splay_tree_compare_pointers,\n-\t\t\t\t\t     0, 0);\n-\n       create_omp_child_function (ctx, false);\n       gimple_omp_target_set_child_fn (stmt, ctx->cb.dst_fn);\n     }\n@@ -14549,7 +14515,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   tree child_fn, t, c;\n   gomp_target *stmt = as_a <gomp_target *> (gsi_stmt (*gsi_p));\n   gbind *tgt_bind, *bind, *dep_bind = NULL;\n-  gimple_seq tgt_body, olist, ilist, orlist, irlist, new_body;\n+  gimple_seq tgt_body, olist, ilist, new_body;\n   location_t loc = gimple_location (stmt);\n   bool offloaded, data_region;\n   unsigned int map_cnt = 0;\n@@ -14602,9 +14568,6 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n   push_gimplify_context ();\n \n-  irlist = NULL;\n-  orlist = NULL;\n-\n   for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n     switch (OMP_CLAUSE_CODE (c))\n       {\n@@ -14900,13 +14863,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t\t\tctx);\n \t\telse\n \t\t  x = build_sender_ref (ovar, ctx);\n-\t\tif (maybe_lookup_oacc_reduction (var, ctx))\n-\t\t  {\n-\t\t    gcc_checking_assert (offloaded\n-\t\t\t\t\t && is_gimple_omp_oacc (stmt));\n-\t\t    gimplify_assign (x, var, &ilist);\n-\t\t  }\n-\t\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\n+\t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n \t\t\t && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_POINTER\n \t\t\t && !OMP_CLAUSE_MAP_ZERO_BIAS_ARRAY_SECTION (c)\n \t\t\t && TREE_CODE (TREE_TYPE (ovar)) == ARRAY_TYPE)\n@@ -15553,11 +15511,9 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t    tgt_bind ? gimple_bind_block (tgt_bind)\n \t\t\t\t     : NULL_TREE);\n   gsi_replace (gsi_p, dep_bind ? dep_bind : bind, true);\n-  gimple_bind_add_seq (bind, irlist);\n   gimple_bind_add_seq (bind, ilist);\n   gimple_bind_add_stmt (bind, stmt);\n   gimple_bind_add_seq (bind, olist);\n-  gimple_bind_add_seq (bind, orlist);\n \n   pop_gimplify_context (NULL);\n "}]}