{"sha": "b9553e20ad92d1c29416d72061816712b7bea39d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk1NTNlMjBhZDkyZDFjMjk0MTZkNzIwNjE4MTY3MTJiN2JlYTM5ZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-08-24T10:56:37Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-08-24T10:56:37Z"}, "message": "Revert \"Drop excess size used for run time allocated stack variables.\"\n\nThis patch caused a bootstrap failure on AIX.\n\n2016-08-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tRevert\n\t2016-08-23  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* explow.c (get_dynamic_stack_size): Take known alignment of stack\n\tpointer + STACK_DYNAMIC_OFFSET into account when calculating the\n\tsize needed.\n\nFrom-SVN: r239735", "tree": {"sha": "2e11fdf0443fbb511d7ed3a149f4acbf9633d951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e11fdf0443fbb511d7ed3a149f4acbf9633d951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9553e20ad92d1c29416d72061816712b7bea39d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9553e20ad92d1c29416d72061816712b7bea39d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9553e20ad92d1c29416d72061816712b7bea39d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9553e20ad92d1c29416d72061816712b7bea39d/comments", "author": null, "committer": null, "parents": [{"sha": "0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0630b8ec3d991a3a7bbd1e041a167a1424c1d388"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "66ec428cc8ed669c516065f5267f36d2ee8b91b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9553e20ad92d1c29416d72061816712b7bea39d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9553e20ad92d1c29416d72061816712b7bea39d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9553e20ad92d1c29416d72061816712b7bea39d", "patch": "@@ -1,3 +1,12 @@\n+2016-08-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tRevert\n+\t2016-08-23  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* explow.c (get_dynamic_stack_size): Take known alignment of stack\n+\tpointer + STACK_DYNAMIC_OFFSET into account when calculating the size\n+\tneeded.\n+\n 2016-08-24  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* doc/fragments.texi (MULTILIB_REUSE): Mention that only options in"}, {"sha": "b14291d8653a01e0d9f0f8b0cc7fe87b6ede421c", "filename": "gcc/explow.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9553e20ad92d1c29416d72061816712b7bea39d/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9553e20ad92d1c29416d72061816712b7bea39d/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=b9553e20ad92d1c29416d72061816712b7bea39d", "patch": "@@ -1224,15 +1224,9 @@ get_dynamic_stack_size (rtx *psize, unsigned size_align,\n      example), so we must preventively align the value.  We leave space\n      in SIZE for the hole that might result from the alignment operation.  */\n \n-  unsigned known_align = REGNO_POINTER_ALIGN (VIRTUAL_STACK_DYNAMIC_REGNUM);\n-  if (known_align == 0)\n-    known_align = BITS_PER_UNIT;\n-  if (required_align > known_align)\n-    {\n-      extra = (required_align - known_align) / BITS_PER_UNIT;\n-      size = plus_constant (Pmode, size, extra);\n-      size = force_operand (size, NULL_RTX);\n-    }\n+  extra = (required_align - BITS_PER_UNIT) / BITS_PER_UNIT;\n+  size = plus_constant (Pmode, size, extra);\n+  size = force_operand (size, NULL_RTX);\n \n   if (flag_stack_usage_info && pstack_usage_size)\n     *pstack_usage_size += extra;"}]}