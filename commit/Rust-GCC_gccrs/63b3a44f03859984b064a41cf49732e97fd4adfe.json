{"sha": "63b3a44f03859984b064a41cf49732e97fd4adfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiM2E0NGYwMzg1OTk4NGIwNjRhNDFjZjQ5NzMyZTk3ZmQ0YWRmZQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2002-01-26T03:26:14Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2002-01-26T03:26:14Z"}, "message": "pthread1.cc: Use one condition variable per predicate instead of tricky use of one condition...\n\n        * testsuite/thread/pthread1.cc: Use one condition variable\n        per predicate instead of tricky use of one condition variable.\n\nFrom-SVN: r49239", "tree": {"sha": "dde8f5e870c2080b8cb7675245ea1963794eab6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dde8f5e870c2080b8cb7675245ea1963794eab6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63b3a44f03859984b064a41cf49732e97fd4adfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b3a44f03859984b064a41cf49732e97fd4adfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63b3a44f03859984b064a41cf49732e97fd4adfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b3a44f03859984b064a41cf49732e97fd4adfe/comments", "author": null, "committer": null, "parents": [{"sha": "33c7f925c66c9e03e95c3ceaf76cb65bf4d218c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c7f925c66c9e03e95c3ceaf76cb65bf4d218c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c7f925c66c9e03e95c3ceaf76cb65bf4d218c1"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "3370daeff9f6682431fb1750c001ac4e2d131cb3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b3a44f03859984b064a41cf49732e97fd4adfe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b3a44f03859984b064a41cf49732e97fd4adfe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=63b3a44f03859984b064a41cf49732e97fd4adfe", "patch": "@@ -1,3 +1,8 @@\n+2002-01-25  Loren Rittle <ljrittle@acm.org>\n+\n+\t* testsuite/thread/pthread1.cc: Use one condition variable\n+\tper predicate instead of tricky use of one condition variable.\n+\n 2002-01-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/fstream.tcc (filebuf::close()): Fix close for input"}, {"sha": "71afefcc758ef7f83f95d52dca0c9dab8cd6aa88", "filename": "libstdc++-v3/testsuite/thread/pthread1.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b3a44f03859984b064a41cf49732e97fd4adfe/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b3a44f03859984b064a41cf49732e97fd4adfe/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2Fpthread1.cc?ref=63b3a44f03859984b064a41cf49732e97fd4adfe", "patch": "@@ -48,19 +48,19 @@ class task_queue\n   task_queue ()\n   {\n     pthread_mutex_init (&fooLock, NULL);\n-    pthread_cond_init (&fooCond, NULL);\n+    pthread_cond_init (&fooCond1, NULL);\n+    pthread_cond_init (&fooCond2, NULL);\n   }\n   ~task_queue ()\n   {\n     pthread_mutex_destroy (&fooLock);\n-    pthread_cond_destroy (&fooCond);\n+    pthread_cond_destroy (&fooCond1);\n+    pthread_cond_destroy (&fooCond2);\n   }\n   list<int> foo;\n   pthread_mutex_t fooLock;\n-  // This code uses a special case that allows us to use just one\n-  // condition variable - in general, don't use this idiom unless you\n-  // know what you are doing. ;-)\n-  pthread_cond_t fooCond;\n+  pthread_cond_t fooCond1;\n+  pthread_cond_t fooCond2;\n };\n \n void*\n@@ -72,9 +72,9 @@ produce (void* t)\n     {\n       pthread_mutex_lock (&tq.fooLock);\n       while (tq.foo.size () >= max_size)\n-\tpthread_cond_wait (&tq.fooCond, &tq.fooLock);\n+\tpthread_cond_wait (&tq.fooCond1, &tq.fooLock);\n       tq.foo.push_back (num++);\n-      pthread_cond_signal (&tq.fooCond);\n+      pthread_cond_signal (&tq.fooCond2);\n       pthread_mutex_unlock (&tq.fooLock);\n     }\n   return 0;\n@@ -89,11 +89,11 @@ consume (void* t)\n     {\n       pthread_mutex_lock (&tq.fooLock);\n       while (tq.foo.size () == 0)\n-\tpthread_cond_wait (&tq.fooCond, &tq.fooLock);\n+\tpthread_cond_wait (&tq.fooCond2, &tq.fooLock);\n       if (tq.foo.front () != num++)\n \tabort ();\n       tq.foo.pop_front ();\n-      pthread_cond_signal (&tq.fooCond);\n+      pthread_cond_signal (&tq.fooCond1);\n       pthread_mutex_unlock (&tq.fooLock);\n     }\n   return 0;"}]}