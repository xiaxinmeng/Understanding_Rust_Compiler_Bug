{"sha": "053665d7610ea0be96e5c43ba290ebde1c18b7eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzNjY1ZDc2MTBlYTBiZTk2ZTVjNDNiYTI5MGViZGUxYzE4YjdlYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1995-02-16T22:01:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1995-02-16T22:01:16Z"}, "message": "Add r4650 functional units and r4650 mul instruction\n\nFrom-SVN: r8959", "tree": {"sha": "2587ea8ef51f66f7320d1676b785ec000ead4814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2587ea8ef51f66f7320d1676b785ec000ead4814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053665d7610ea0be96e5c43ba290ebde1c18b7eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053665d7610ea0be96e5c43ba290ebde1c18b7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053665d7610ea0be96e5c43ba290ebde1c18b7eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053665d7610ea0be96e5c43ba290ebde1c18b7eb/comments", "author": null, "committer": null, "parents": [{"sha": "04742f20273efee1098bd3fc73e4f1e7abc6dd07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04742f20273efee1098bd3fc73e4f1e7abc6dd07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04742f20273efee1098bd3fc73e4f1e7abc6dd07"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "82d283c471923440861ce4cf42eb21b4f05e125b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053665d7610ea0be96e5c43ba290ebde1c18b7eb/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053665d7610ea0be96e5c43ba290ebde1c18b7eb/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=053665d7610ea0be96e5c43ba290ebde1c18b7eb", "patch": "@@ -3200,10 +3200,8 @@ override_options ()\n \t    mips_cpu = PROCESSOR_R4000;\n \t  else if (!strcmp (p, \"4600\"))\n \t    mips_cpu = PROCESSOR_R4600;\n-\t  /* Although the r4650 adds a couple of instructions, it uses\n-             the r4600 pipeline.  */\n \t  else if (!strcmp (p, \"4650\"))\n-\t    mips_cpu = PROCESSOR_R4600;\n+\t    mips_cpu = PROCESSOR_R4650;\n \t  break;\n \n \tcase '6':\n@@ -3231,7 +3229,9 @@ override_options ()\n \n   if ((mips_cpu == PROCESSOR_R3000 && mips_isa > 1)\n       || (mips_cpu == PROCESSOR_R6000 && mips_isa > 2)\n-      || ((mips_cpu == PROCESSOR_R4000 || mips_cpu == PROCESSOR_R4600)\n+      || ((mips_cpu == PROCESSOR_R4000\n+\t   || mips_cpu == PROCESSOR_R4600\n+\t   || mips_cpu == PROCESSOR_R4650)\n \t  && mips_isa > 3))\n     error (\"-mcpu=%s does not support -mips%d\", mips_cpu_string, mips_isa);\n "}, {"sha": "6e2227f43a7a5876aa7a23e51c39d009ca8fcb10", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053665d7610ea0be96e5c43ba290ebde1c18b7eb/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053665d7610ea0be96e5c43ba290ebde1c18b7eb/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=053665d7610ea0be96e5c43ba290ebde1c18b7eb", "patch": "@@ -66,6 +66,7 @@ enum processor_type {\n   PROCESSOR_R6000,\n   PROCESSOR_R4000,\n   PROCESSOR_R4600,\n+  PROCESSOR_R4650,\n   PROCESSOR_R8000\n };\n "}, {"sha": "ee7fa8e93833c5a825ab51759df801d95aa9f657", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053665d7610ea0be96e5c43ba290ebde1c18b7eb/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053665d7610ea0be96e5c43ba290ebde1c18b7eb/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=053665d7610ea0be96e5c43ba290ebde1c18b7eb", "patch": "@@ -92,7 +92,7 @@\n ;;          (const_string \"default\"))))\n \n ;; ??? Fix everything that tests this attribute.\n-(define_attr \"cpu\" \"default,r3000,r6000,r4000,r4600,r8000\"\n+(define_attr \"cpu\" \"default,r3000,r6000,r4000,r4600,r4650,r8000\"\n   (const (symbol_ref \"mips_cpu_attr\")))\n \n ;; Attribute defining whether or not we can use the branch-likely instructions\n@@ -150,11 +150,11 @@\n ;; Make the default case (PROCESSOR_DEFAULT) handle the worst case\n \n (define_function_unit \"memory\" 1 0\n-  (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"!r3000,r4600\"))\n+  (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"!r3000,r4600,r4650\"))\n   3 0)\n \n (define_function_unit \"memory\" 1 0\n-  (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"r3000,r4600\"))\n+  (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"r3000,r4600,r4650\"))\n   2 0)\n \n (define_function_unit \"memory\"   1 0 (eq_attr \"type\" \"store\") 1 0)\n@@ -166,7 +166,7 @@\n   1 3)\n \n (define_function_unit \"imuldiv\"  1 0\n-  (and (eq_attr \"type\" \"imul\") (eq_attr \"cpu\" \"!r3000,r4000,r4600\"))\n+  (and (eq_attr \"type\" \"imul\") (eq_attr \"cpu\" \"!r3000,r4000,r4600,r4650\"))\n   17 17)\n \n (define_function_unit \"imuldiv\"  1 0\n@@ -178,7 +178,11 @@\n   10 10)\n \n (define_function_unit \"imuldiv\"  1 0\n-  (and (eq_attr \"type\" \"idiv\") (eq_attr \"cpu\" \"!r3000,r4000,r4600\"))\n+  (and (eq_attr \"type\" \"imul\") (eq_attr \"cpu\" \"r4650\"))\n+  4 4)\n+\n+(define_function_unit \"imuldiv\"  1 0\n+  (and (eq_attr \"type\" \"idiv\") (eq_attr \"cpu\" \"!r3000,r4000,r4600,r4650\"))\n   38 38)\n \n (define_function_unit \"imuldiv\"  1 0\n@@ -189,6 +193,10 @@\n   (and (eq_attr \"type\" \"idiv\") (eq_attr \"cpu\" \"r4600\"))\n   42 42)\n \n+(define_function_unit \"imuldiv\"  1 0\n+  (and (eq_attr \"type\" \"idiv\") (eq_attr \"cpu\" \"r4650\"))\n+  36 36)\n+\n (define_function_unit \"imuldiv\"  1 0\n   (and (eq_attr \"type\" \"idiv\") (eq_attr \"cpu\" \"r4000\"))\n   69 69)\n@@ -214,15 +222,15 @@\n   3 0)\n \n (define_function_unit \"adder\" 1 1\n-  (and (eq_attr \"type\" \"fabs,fneg\") (eq_attr \"cpu\" \"!r3000,r4600\"))\n+  (and (eq_attr \"type\" \"fabs,fneg\") (eq_attr \"cpu\" \"!r3000,r4600,r4650\"))\n   2 0)\n \n (define_function_unit \"adder\" 1 1\n-  (and (eq_attr \"type\" \"fabs,fneg\") (eq_attr \"cpu\" \"r3000,r4600\"))\n+  (and (eq_attr \"type\" \"fabs,fneg\") (eq_attr \"cpu\" \"r3000,r4600,r4650\"))\n   1 0)\n \n (define_function_unit \"mult\" 1 1\n-  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600\")))\n+  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650\")))\n   7 0)\n \n (define_function_unit \"mult\" 1 1\n@@ -234,7 +242,7 @@\n   5 0)\n \n (define_function_unit \"mult\" 1 1\n-  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4600\")))\n+  (and (eq_attr \"type\" \"fmul\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   8 0)\n \n (define_function_unit \"mult\" 1 1\n@@ -250,7 +258,7 @@\n   6 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600\")))\n+  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650\")))\n   23 0)\n \n (define_function_unit \"divide\" 1 1\n@@ -262,11 +270,11 @@\n   15 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4600\")))\n+  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   32 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600\")))\n+  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r3000,r6000,r4600,r4650\")))\n   36 0)\n \n (define_function_unit \"divide\" 1 1\n@@ -278,23 +286,23 @@\n   16 0)\n \n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4600\")))\n+  (and (eq_attr \"type\" \"fdiv\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   61 0)\n \n ;;; ??? Is this number right?\n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r4600\")))\n+  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"!r4600,r4650\")))\n   54 0)\n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4600\")))\n+  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"SF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   31 0)\n \n ;;; ??? Is this number right?\n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r4600\")))\n+  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"!r4600,r4650\")))\n   112 0)\n (define_function_unit \"divide\" 1 1\n-  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4600\")))\n+  (and (eq_attr \"type\" \"fsqrt\") (and (eq_attr \"mode\" \"DF\") (eq_attr \"cpu\" \"r4600,r4650\")))\n   60 0)\n \n \f\n@@ -826,7 +834,9 @@\n   \"\"\n   \"\n {\n-  if (mips_cpu != PROCESSOR_R4000)\n+  if (TARGET_MAD)\n+    emit_insn (gen_mulsi3_r4650 (operands[0], operands[1], operands[2]));\n+  else if (mips_cpu != PROCESSOR_R4000)\n     emit_insn (gen_mulsi3_internal (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_mulsi3_r4000 (operands[0], operands[1], operands[2]));\n@@ -866,6 +876,18 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\t\t;; mult + mflo + delay\n \n+(define_insn \"mulsi3_r4650\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t (match_operand:SI 2 \"register_operand\" \"d\")))\n+   (clobber (match_scratch:SI 3 \"=h\"))\n+   (clobber (match_scratch:SI 4 \"=l\"))]\n+  \"TARGET_MAD\"\n+  \"mul\\\\t%0,%1,%2\"\n+  [(set_attr \"type\"\t\"imul\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"1\")])\n+\n (define_expand \"muldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n \t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")"}]}