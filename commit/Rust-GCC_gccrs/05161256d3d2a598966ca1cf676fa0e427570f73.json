{"sha": "05161256d3d2a598966ca1cf676fa0e427570f73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxNjEyNTZkM2QyYTU5ODk2NmNhMWNmNjc2ZmEwZTQyNzU3MGY3Mw==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-08-31T21:12:31Z"}, "committer": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-11-02T17:29:56Z"}, "message": "Add bcd builtings listed in appendix B of the ABI\n\n2020-10-29  Carl Love  <cel@us.ibm.com>\n\ngcc/\n\tPR target/93449\n\t* config/rs6000/altivec.h (__builtin_bcdadd, __builtin_bcdadd_lt,\n\t__builtin_bcdadd_eq, __builtin_bcdadd_gt, __builtin_bcdadd_ofl,\n\t__builtin_bcdadd_ov, __builtin_bcdsub, __builtin_bcdsub_lt,\n\t__builtin_bcdsub_eq, __builtin_bcdsub_gt, __builtin_bcdsub_ofl,\n\t__builtin_bcdsub_ov, __builtin_bcdinvalid, __builtin_bcdmul10,\n\t__builtin_bcddiv10, __builtin_bcd2dfp, __builtin_bcdcmpeq,\n\t__builtin_bcdcmpgt, __builtin_bcdcmplt, __builtin_bcdcmpge,\n\t__builtin_bcdcmple): Add defines.\n\t* config/rs6000/altivec.md: Add UNSPEC_BCDSHIFT.\n\t(BCD_TEST): Add le, ge to code iterator.\n\tAdd VBCD mode iterator.\n\t(bcd<bcd_add_sub>_test, *bcd<bcd_add_sub>_test2,\n\tbcd<bcd_add_sub>_<code>, bcd<bcd_add_sub>_<code>): Add mode to name.\n\tChange iterator from V1TI to VBCD.\n\t(*bcdinvalid_<mode>, bcdshift_v16qi): New define_insn.\n\t(bcdinvalid_<mode>, bcdmul10_v16qi, bcddiv10_v16qi): New define.\n\t* config/rs6000/dfp.md (dfp_denbcd_v16qi_inst): New define_insn.\n\t(dfp_denbcd_v16qi): New define_expand.\n\t* config/rs6000/rs6000-builtin.def (BU_P8V_MISC_1): New define.\n\t(BCDADD): Replaced with BCDADD_V1TI and BCDADD_V16QI.\n\t(BCDADD_LT): Replaced with BCDADD_LT_V1TI and BCDADD_LT_V16QI.\n\t(BCDADD_EQ): Replaced with BCDADD_EQ_V1TI and BCDADD_EQ_V16QI.\n\t(BCDADD_GT): Replaced with BCDADD_GT_V1TI and BCDADD_GT_V16QI.\n\t(BCDADD_OV): Replaced with BCDADD_OV_V1TI and BCDADD_OV_V16QI.\n\t(BCDSUB_V1TI, BCDSUB_V16QI, BCDSUB_LT_V1TI, BCDSUB_LT_V16QI,\n\tBCDSUB_LE_V1TI, BCDSUB_LE_V16QI, BCDSUB_EQ_V1TI, BCDSUB_EQ_V16QI,\n\tBCDSUB_GT_V1TI, BCDSUB_GT_V16QI, BCDSUB_GE_V1TI, BCDSUB_GE_V16QI,\n\tBCDSUB_OV_V1TI, BCDSUB_OV_V16QI, BCDINVALID_V1TI, BCDINVALID_V16QI,\n\tBCDMUL10_V16QI, BCDDIV10_V16QI, DENBCD_V16QI): New builtin definitions.\n\t(BCDADD, BCDADD_LT, BCDADD_EQ, BCDADD_GT, BCDADD_OV, BCDSUB, BCDSUB_LT,\n\tBCDSUB_LE, BCDSUB_EQ, BCDSUB_GT, BCDSUB_GE, BCDSUB_OV, BCDINVALID,\n\tBCDMUL10, BCDDIV10, DENBCD): New overload definitions.\n\t* config/rs6000/rs6000-call.c (P8V_BUILTIN_VEC_BCDADD, P8V_BUILTIN_VEC_BCDADD_LT,\n\tP8V_BUILTIN_VEC_BCDADD_EQ, P8V_BUILTIN_VEC_BCDADD_GT, P8V_BUILTIN_VEC_BCDADD_OV,\n\tP8V_BUILTIN_VEC_BCDINVALID, P9V_BUILTIN_VEC_BCDMUL10, P8V_BUILTIN_VEC_DENBCD.\n\tP8V_BUILTIN_VEC_BCDSUB, P8V_BUILTIN_VEC_BCDSUB_LT, P8V_BUILTIN_VEC_BCDSUB_LE,\n\tP8V_BUILTIN_VEC_BCDSUB_EQ, P8V_BUILTIN_VEC_BCDSUB_GT, P8V_BUILTIN_VEC_BCDSUB_GE,\n\tP8V_BUILTIN_VEC_BCDSUB_OV): New overloaded specifications.\n\t(CODE_FOR_bcdadd): Replaced with CODE_FOR_bcdadd_v16qi and CODE_FOR_bcdadd_v1ti.\n\t(CODE_FOR_bcdadd_lt): Replaced with CODE_FOR_bcdadd_lt_v16qi and CODE_FOR_bcdadd_lt_v1ti.\n\t(CODE_FOR_bcdadd_eq): Replaced with CODE_FOR_bcdadd_eq_v16qi and CODE_FOR_bcdadd_eq_v1ti.\n\t(CODE_FOR_bcdadd_gt): Replaced with CODE_FOR_bcdadd_gt_v16qi and CODE_FOR_bcdadd_gt_v1ti.\n\t(CODE_FOR_bcdsub): Replaced with CODE_FOR_bcdsub_v16qi and CODE_FOR_bcdsub_v1ti.\n\t(CODE_FOR_bcdsub_lt): Replaced with CODE_FOR_bcdsub_lt_v16qi and CODE_FOR_bcdsub_lt_v1ti.\n\t(CODE_FOR_bcdsub_eq): Replaced with CODE_FOR_bcdsub_eq_v16qi and CODE_FOR_bcdsub_eq_v1ti.\n\t(CODE_FOR_bcdsub_gt): Replaced with CODE_FOR_bcdsub_gt_v16qi and CODE_FOR_bcdsub_gt_v1ti.\n\t(rs6000_expand_ternop_builtin):  Add CODE_FOR_dfp_denbcd_v16qi to else if.\n\t* doc/extend.texi: Add documentation for new builtins.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/bcd-2.c: Add include altivec.h.\n\t* gcc.target/powerpc/bcd-3.c: Add include altivec.h.\n\t* gcc.target/powerpc/bcd-4.c: New test.", "tree": {"sha": "f02e14d340bd1f38fd1266c7561c283cced0491d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f02e14d340bd1f38fd1266c7561c283cced0491d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05161256d3d2a598966ca1cf676fa0e427570f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05161256d3d2a598966ca1cf676fa0e427570f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05161256d3d2a598966ca1cf676fa0e427570f73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05161256d3d2a598966ca1cf676fa0e427570f73/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a07912f2d1f73f298d93dcd27bd8fbe84427106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a07912f2d1f73f298d93dcd27bd8fbe84427106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a07912f2d1f73f298d93dcd27bd8fbe84427106"}], "stats": {"total": 859, "additions": 823, "deletions": 36}, "files": [{"sha": "e1884f51bd8b34f222460d926cb690a2a203917a", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -497,8 +497,33 @@\n \n #define vec_xlx __builtin_vec_vextulx\n #define vec_xrx __builtin_vec_vexturx\n+\n #endif\n \n+/* BCD builtins, map ABI builtin name to existing builtin name.  */\n+#define __builtin_bcdadd     __builtin_vec_bcdadd\n+#define __builtin_bcdadd_lt  __builtin_vec_bcdadd_lt\n+#define __builtin_bcdadd_eq  __builtin_vec_bcdadd_eq\n+#define __builtin_bcdadd_gt  __builtin_vec_bcdadd_gt\n+#define __builtin_bcdadd_ofl __builtin_vec_bcdadd_ov\n+#define __builtin_bcdadd_ov  __builtin_vec_bcdadd_ov\n+#define __builtin_bcdsub     __builtin_vec_bcdsub\n+#define __builtin_bcdsub_lt  __builtin_vec_bcdsub_lt\n+#define __builtin_bcdsub_eq  __builtin_vec_bcdsub_eq\n+#define __builtin_bcdsub_gt  __builtin_vec_bcdsub_gt\n+#define __builtin_bcdsub_ofl __builtin_vec_bcdsub_ov\n+#define __builtin_bcdsub_ov  __builtin_vec_bcdsub_ov\n+#define __builtin_bcdinvalid __builtin_vec_bcdinvalid\n+#define __builtin_bcdmul10   __builtin_vec_bcdmul10\n+#define __builtin_bcddiv10   __builtin_vec_bcddiv10\n+#define __builtin_bcd2dfp    __builtin_vec_denb2dfp\n+#define __builtin_bcdcmpeq(a,b)   __builtin_vec_bcdsub_eq(a,b,0)\n+#define __builtin_bcdcmpgt(a,b)   __builtin_vec_bcdsub_gt(a,b,0)\n+#define __builtin_bcdcmplt(a,b)   __builtin_vec_bcdsub_lt(a,b,0)\n+#define __builtin_bcdcmpge(a,b)   __builtin_vec_bcdsub_ge(a,b,0)\n+#define __builtin_bcdcmple(a,b)   __builtin_vec_bcdsub_le(a,b,0)\n+\n+\n /* Predicates.\n    For C++, we use templates in order to allow non-parenthesized arguments.\n    For C, instead, we use macros since non-parenthesized arguments were"}, {"sha": "6a6ce0f84ed5ba4d9f578deb9b83210cc4ff92e2", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 87, "deletions": 17, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -160,6 +160,7 @@\n    UNSPEC_BCDADD\n    UNSPEC_BCDSUB\n    UNSPEC_BCD_OVERFLOW\n+   UNSPEC_BCDSHIFT\n    UNSPEC_VRLMI\n    UNSPEC_VRLNM\n    UNSPEC_VCFUGED\n@@ -4410,12 +4411,13 @@\n (define_int_attr bcd_add_sub [(UNSPEC_BCDADD \"add\")\n \t\t\t      (UNSPEC_BCDSUB \"sub\")])\n \n-(define_code_iterator BCD_TEST [eq lt gt unordered])\n+(define_code_iterator BCD_TEST [eq lt le gt ge unordered])\n+(define_mode_iterator VBCD [V1TI V16QI])\n \n-(define_insn \"bcd<bcd_add_sub>\"\n-  [(set (match_operand:V1TI 0 \"gpc_reg_operand\" \"=v\")\n-\t(unspec:V1TI [(match_operand:V1TI 1 \"gpc_reg_operand\" \"v\")\n-\t\t      (match_operand:V1TI 2 \"gpc_reg_operand\" \"v\")\n+(define_insn \"bcd<bcd_add_sub>_<mode>\"\n+  [(set (match_operand:VBCD 0 \"register_operand\" \"=v\")\n+\t(unspec:VBCD [(match_operand:VBCD 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:VBCD 2 \"register_operand\" \"v\")\n \t\t      (match_operand:QI 3 \"const_0_to_1_operand\" \"n\")]\n \t\t     UNSPEC_BCD_ADD_SUB))\n    (clobber (reg:CCFP CR6_REGNO))]\n@@ -4428,23 +4430,23 @@\n ;; UNORDERED test on an integer type (like V1TImode) is not defined.  The type\n ;; probably should be one that can go in the VMX (Altivec) registers, so we\n ;; can't use DDmode or DFmode.\n-(define_insn \"*bcd<bcd_add_sub>_test\"\n+(define_insn \"*bcd<bcd_add_sub>_test_<mode>\"\n   [(set (reg:CCFP CR6_REGNO)\n \t(compare:CCFP\n-\t (unspec:V2DF [(match_operand:V1TI 1 \"register_operand\" \"v\")\n-\t\t       (match_operand:V1TI 2 \"register_operand\" \"v\")\n+\t (unspec:V2DF [(match_operand:VBCD 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:VBCD 2 \"register_operand\" \"v\")\n \t\t       (match_operand:QI 3 \"const_0_to_1_operand\" \"i\")]\n \t\t      UNSPEC_BCD_ADD_SUB)\n \t (match_operand:V2DF 4 \"zero_constant\" \"j\")))\n-   (clobber (match_scratch:V1TI 0 \"=v\"))]\n+   (clobber (match_scratch:VBCD 0 \"=v\"))]\n   \"TARGET_P8_VECTOR\"\n   \"bcd<bcd_add_sub>. %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-(define_insn \"*bcd<bcd_add_sub>_test2\"\n-  [(set (match_operand:V1TI 0 \"register_operand\" \"=v\")\n-\t(unspec:V1TI [(match_operand:V1TI 1 \"register_operand\" \"v\")\n-\t\t      (match_operand:V1TI 2 \"register_operand\" \"v\")\n+(define_insn \"*bcd<bcd_add_sub>_test2_<mode>\"\n+  [(set (match_operand:VBCD 0 \"register_operand\" \"=v\")\n+\t(unspec:VBCD [(match_operand:VBCD 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:VBCD 2 \"register_operand\" \"v\")\n \t\t      (match_operand:QI 3 \"const_0_to_1_operand\" \"i\")]\n \t\t     UNSPEC_BCD_ADD_SUB))\n    (set (reg:CCFP CR6_REGNO)\n@@ -4540,15 +4542,15 @@\n }\n    [(set_attr \"type\" \"vecsimple\")])\n \n-(define_expand \"bcd<bcd_add_sub>_<code>\"\n+(define_expand \"bcd<bcd_add_sub>_<code>_<mode>\"\n   [(parallel [(set (reg:CCFP CR6_REGNO)\n \t\t   (compare:CCFP\n-\t\t    (unspec:V2DF [(match_operand:V1TI 1 \"register_operand\")\n-\t\t\t\t  (match_operand:V1TI 2 \"register_operand\")\n+\t\t    (unspec:V2DF [(match_operand:VBCD 1 \"register_operand\")\n+\t\t\t\t  (match_operand:VBCD 2 \"register_operand\")\n \t\t\t\t  (match_operand:QI 3 \"const_0_to_1_operand\")]\n \t\t\t\t UNSPEC_BCD_ADD_SUB)\n \t\t    (match_dup 4)))\n-\t      (clobber (match_scratch:V1TI 5))])\n+\t      (clobber (match_scratch:VBCD 5))])\n    (set (match_operand:SI 0 \"register_operand\")\n \t(BCD_TEST:SI (reg:CCFP CR6_REGNO)\n \t\t     (const_int 0)))]\n@@ -4557,6 +4559,74 @@\n   operands[4] = CONST0_RTX (V2DFmode);\n })\n \n+(define_insn \"*bcdinvalid_<mode>\"\n+  [(set (reg:CCFP CR6_REGNO)\n+\t(compare:CCFP\n+\t (unspec:V2DF [(match_operand:VBCD 1 \"register_operand\" \"v\")]\n+\t\t      UNSPEC_BCDADD)\n+\t (match_operand:V2DF 2 \"zero_constant\" \"j\")))\n+   (clobber (match_scratch:VBCD 0 \"=v\"))]\n+  \"TARGET_P8_VECTOR\"\n+  \"bcdadd. %0,%1,%1,0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"bcdinvalid_<mode>\"\n+  [(parallel [(set (reg:CCFP CR6_REGNO)\n+\t\t   (compare:CCFP\n+\t\t    (unspec:V2DF [(match_operand:VBCD 1 \"register_operand\")]\n+\t\t\t\t UNSPEC_BCDADD)\n+\t\t    (match_dup 2)))\n+\t      (clobber (match_scratch:VBCD 3))])\n+   (set (match_operand:SI 0 \"register_operand\")\n+\t(unordered:SI (reg:CCFP CR6_REGNO)\n+\t\t      (const_int 0)))]\n+  \"TARGET_P8_VECTOR\"\n+{\n+  operands[2] = CONST0_RTX (V2DFmode);\n+})\n+\n+(define_insn \"bcdshift_v16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")\n+\t\t       (match_operand:QI 3 \"const_0_to_1_operand\" \"n\")]\n+\t\t     UNSPEC_BCDSHIFT))\n+   (clobber (reg:CCFP CR6_REGNO))]\n+  \"TARGET_P8_VECTOR\"\n+  \"bcds. %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"bcdmul10_v16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\")]\n+\t\t      UNSPEC_BCDSHIFT))\n+   (clobber (reg:CCFP CR6_REGNO))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  rtx one = gen_reg_rtx (V16QImode);\n+\n+  emit_insn (gen_altivec_vspltisb (one, const1_rtx));\n+  emit_insn (gen_bcdshift_v16qi (operands[0], one, operands[1], const0_rtx));\n+\n+  DONE;\n+})\n+\n+(define_expand \"bcddiv10_v16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\")]\n+\t\t      UNSPEC_BCDSHIFT))\n+   (clobber (reg:CCFP CR6_REGNO))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  rtx one = gen_reg_rtx (V16QImode);\n+\n+  emit_insn (gen_altivec_vspltisb (one, constm1_rtx));\n+  emit_insn (gen_bcdshift_v16qi (operands[0], one, operands[1], const0_rtx));\n+\n+  DONE;\n+})\n+\n+\n ;; Peephole2 pattern to combine a bcdadd/bcdsub that calculates the value and\n ;; the bcdadd/bcdsub that tests the value.  The combiner won't work since\n ;; CR6 is a hard coded register.  Unfortunately, all of the Altivec predicate"}, {"sha": "9a952300cd64c4f0001d9d7409df82cff5275c81", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -273,6 +273,28 @@\n   \"denbcd<q> %1,%0,%2\"\n   [(set_attr \"type\" \"dfp\")])\n \n+(define_insn \"dfp_denbcd_v16qi_inst\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:TD [(match_operand:QI 1 \"const_0_to_1_operand\" \"i\")\n+\t\t    (match_operand:V16QI 2 \"register_operand\" \"d\")]\n+\t\t   UNSPEC_DENBCD))]\n+  \"TARGET_DFP\"\n+  \"denbcdq %1,%0,%2\"\n+  [(set_attr \"type\" \"dfp\")])\n+\n+(define_expand \"dfp_denbcd_v16qi\"\n+  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:TD [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n+\t\t   UNSPEC_DENBCD))]\n+  \"TARGET_DFP\"\n+ {\n+   // Move vs128 upper 64-bits and lower 64-bits to fp register pair\n+   convert_move (operands[0], operands[1], true);\n+   emit_insn (gen_dfp_denbcd_v16qi_inst (operands[0], GEN_INT(1),\n+\t\t\t\t\t operands[0]));\n+   DONE;\n+ })\n+\n (define_insn \"dfp_dxex_<mode>\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n \t(unspec:DI [(match_operand:DDTD 1 \"gpc_reg_operand\" \"d\")]"}, {"sha": "a58102c3785b35a5d1c375085fc08166351bd33e", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -696,6 +696,14 @@\n /* Miscellaneous builtins for instructions added in ISA 2.07.  These\n    instructions do require the ISA 2.07 vector support, but they aren't vector\n    instructions.  */\n+#define BU_P8V_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P8_VECTOR,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n #define BU_P8V_MISC_3(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_3 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n@@ -2668,16 +2676,55 @@ BU_P7_MISC_1 (CBCDTD,\t\t\"cbcdtd\",\tCONST,\tcbcdtd)\n BU_P7_MISC_2 (ADDG6S,\t\t\"addg6s\",\tCONST,\taddg6s)\n \n /* 3 argument BCD functions added in ISA 2.07.  */\n-BU_P8V_MISC_3 (BCDADD,\t\t\"bcdadd\",\tCONST,\tbcdadd)\n-BU_P8V_MISC_3 (BCDADD_LT,\t\"bcdadd_lt\",\tCONST,\tbcdadd_lt)\n-BU_P8V_MISC_3 (BCDADD_EQ,\t\"bcdadd_eq\",\tCONST,\tbcdadd_eq)\n-BU_P8V_MISC_3 (BCDADD_GT,\t\"bcdadd_gt\",\tCONST,\tbcdadd_gt)\n-BU_P8V_MISC_3 (BCDADD_OV,\t\"bcdadd_ov\",\tCONST,\tbcdadd_unordered)\n-BU_P8V_MISC_3 (BCDSUB,\t\t\"bcdsub\",\tCONST,\tbcdsub)\n-BU_P8V_MISC_3 (BCDSUB_LT,\t\"bcdsub_lt\",\tCONST,\tbcdsub_lt)\n-BU_P8V_MISC_3 (BCDSUB_EQ,\t\"bcdsub_eq\",\tCONST,\tbcdsub_eq)\n-BU_P8V_MISC_3 (BCDSUB_GT,\t\"bcdsub_gt\",\tCONST,\tbcdsub_gt)\n-BU_P8V_MISC_3 (BCDSUB_OV,\t\"bcdsub_ov\",\tCONST,\tbcdsub_unordered)\n+BU_P8V_MISC_3 (BCDADD_V1TI,\t\"bcdadd_v1ti\",\tCONST,\tbcdadd_v1ti)\n+BU_P8V_MISC_3 (BCDADD_V16QI,\t\"bcdadd_v16qi\",\tCONST,\tbcdadd_v16qi)\n+BU_P8V_MISC_3 (BCDADD_LT_V1TI,\t\"bcdadd_lt_v1ti\",  CONST, bcdadd_lt_v1ti)\n+BU_P8V_MISC_3 (BCDADD_LT_V16QI,\t\"bcdadd_lt_v16qi\", CONST, bcdadd_lt_v16qi)\n+BU_P8V_MISC_3 (BCDADD_EQ_V1TI,\t\"bcdadd_eq_v1ti\",  CONST, bcdadd_eq_v1ti)\n+BU_P8V_MISC_3 (BCDADD_EQ_V16QI,\t\"bcdadd_eq_v16qi\", CONST, bcdadd_eq_v16qi)\n+BU_P8V_MISC_3 (BCDADD_GT_V1TI,\t\"bcdadd_gt_v1ti\",  CONST, bcdadd_gt_v1ti)\n+BU_P8V_MISC_3 (BCDADD_GT_V16QI,\t\"bcdadd_gt_v16qi\", CONST, bcdadd_gt_v16qi)\n+BU_P8V_MISC_3 (BCDADD_OV_V1TI,\t\"bcdadd_ov_v1ti\",  CONST, bcdadd_unordered_v1ti)\n+BU_P8V_MISC_3 (BCDADD_OV_V16QI,\t\"bcdadd_ov_v16qi\", CONST, bcdadd_unordered_v16qi)\n+\n+BU_P8V_MISC_3 (BCDSUB_V1TI,\t\"bcdsub_v1ti\",\tCONST,\tbcdsub_v1ti)\n+BU_P8V_MISC_3 (BCDSUB_V16QI,\t\"bcdsub_v16qi\",\tCONST,\tbcdsub_v16qi)\n+BU_P8V_MISC_3 (BCDSUB_LT_V1TI,\t\"bcdsub_lt_v1ti\",  CONST, bcdsub_lt_v1ti)\n+BU_P8V_MISC_3 (BCDSUB_LT_V16QI,\t\"bcdsub_lt_v16qi\", CONST, bcdsub_lt_v16qi)\n+BU_P8V_MISC_3 (BCDSUB_LE_V1TI,\t\"bcdsub_le_v1ti\",  CONST, bcdsub_le_v1ti)\n+BU_P8V_MISC_3 (BCDSUB_LE_V16QI,\t\"bcdsub_le_v16qi\", CONST, bcdsub_le_v16qi)\n+BU_P8V_MISC_3 (BCDSUB_EQ_V1TI,\t\"bcdsub_eq_v1ti\",  CONST, bcdsub_eq_v1ti)\n+BU_P8V_MISC_3 (BCDSUB_EQ_V16QI,\t\"bcdsub_eq_v16qi\", CONST, bcdsub_eq_v16qi)\n+BU_P8V_MISC_3 (BCDSUB_GT_V1TI,\t\"bcdsub_gt_v1ti\",  CONST, bcdsub_gt_v1ti)\n+BU_P8V_MISC_3 (BCDSUB_GT_V16QI,\t\"bcdsub_gt_v16qi\", CONST, bcdsub_gt_v16qi)\n+BU_P8V_MISC_3 (BCDSUB_GE_V1TI,\t\"bcdsub_ge_v1ti\",  CONST, bcdsub_ge_v1ti)\n+BU_P8V_MISC_3 (BCDSUB_GE_V16QI,\t\"bcdsub_ge_v16qi\", CONST, bcdsub_ge_v16qi)\n+BU_P8V_MISC_3 (BCDSUB_OV_V1TI,\t\"bcdsub_ov_v1ti\",  CONST, bcdsub_unordered_v1ti)\n+BU_P8V_MISC_3 (BCDSUB_OV_V16QI,\t\"bcdsub_ov_v16qi\", CONST, bcdsub_unordered_v16qi)\n+\n+BU_P8V_MISC_1 (BCDINVALID_V1TI,\t\"bcdinvalid_v1ti\",  CONST, bcdinvalid_v1ti)\n+BU_P8V_MISC_1 (BCDINVALID_V16QI, \"bcdinvalid_v16qi\", CONST, bcdinvalid_v16qi)\n+\n+BU_P9V_AV_1 (BCDMUL10_V16QI, \"bcdmul10_v16qi\", CONST, bcdmul10_v16qi)\n+BU_P9V_AV_1 (BCDDIV10_V16QI, \"bcddiv10_v16qi\", CONST, bcddiv10_v16qi)\n+BU_P8V_MISC_1 (DENBCD_V16QI,\t\"denb2dfp_v16qi\", CONST, dfp_denbcd_v16qi)\n+\n+BU_P8V_OVERLOAD_3 (BCDADD,\t\"bcdadd\")\n+BU_P8V_OVERLOAD_3 (BCDADD_LT,\t\"bcdadd_lt\")\n+BU_P8V_OVERLOAD_3 (BCDADD_EQ,\t\"bcdadd_eq\")\n+BU_P8V_OVERLOAD_3 (BCDADD_GT,\t\"bcdadd_gt\")\n+BU_P8V_OVERLOAD_3 (BCDADD_OV,\t\"bcdadd_ov\")\n+BU_P8V_OVERLOAD_3 (BCDSUB,\t\"bcdsub\")\n+BU_P8V_OVERLOAD_3 (BCDSUB_LT,\t\"bcdsub_lt\")\n+BU_P8V_OVERLOAD_3 (BCDSUB_LE,\t\"bcdsub_le\")\n+BU_P8V_OVERLOAD_3 (BCDSUB_EQ,\t\"bcdsub_eq\")\n+BU_P8V_OVERLOAD_3 (BCDSUB_GT,\t\"bcdsub_gt\")\n+BU_P8V_OVERLOAD_3 (BCDSUB_GE,\t\"bcdsub_ge\")\n+BU_P8V_OVERLOAD_3 (BCDSUB_OV,\t\"bcdsub_ov\")\n+BU_P8V_OVERLOAD_1 (BCDINVALID,\t\"bcdinvalid\")\n+BU_P9V_OVERLOAD_1 (BCDMUL10,\t\"bcdmul10\")\n+BU_P9V_OVERLOAD_1 (BCDDIV10,\t\"bcddiv10\")\n+BU_P8V_OVERLOAD_1 (DENBCD,\t\"denb2dfp\")\n \n /* 2 argument pack/unpack 128-bit floating point types.  */\n BU_DFP_MISC_2 (PACK_TD,\t\t\"pack_dec128\",\t\tCONST,\tpacktd)"}, {"sha": "92378e958a95cc025f1a440d1987e8514975e477", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 94, "deletions": 9, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -985,6 +985,82 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_V4SF, RS6000_BTI_INTSI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CTU, VSX_BUILTIN_XVCVDPUXDS_SCALE,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DF, RS6000_BTI_INTSI, 0 },\n+\n+  { P8V_BUILTIN_VEC_BCDADD, MISC_BUILTIN_BCDADD_V1TI,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD, MISC_BUILTIN_BCDADD_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD_LT, MISC_BUILTIN_BCDADD_LT_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD_LT, MISC_BUILTIN_BCDADD_LT_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD_EQ, MISC_BUILTIN_BCDADD_EQ_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD_EQ, MISC_BUILTIN_BCDADD_EQ_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD_GT, MISC_BUILTIN_BCDADD_GT_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD_GT, MISC_BUILTIN_BCDADD_GT_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD_OV, MISC_BUILTIN_BCDADD_OV_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDADD_OV, MISC_BUILTIN_BCDADD_OV_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDINVALID, MISC_BUILTIN_BCDINVALID_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, 0, 0 },\n+  { P8V_BUILTIN_VEC_BCDINVALID, MISC_BUILTIN_BCDINVALID_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+\n+  { P9V_BUILTIN_VEC_BCDMUL10, P9V_BUILTIN_BCDMUL10_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_BCDDIV10, P9V_BUILTIN_BCDDIV10_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+\n+  { P8V_BUILTIN_VEC_DENBCD, MISC_BUILTIN_DENBCD_V16QI,\n+    RS6000_BTI_dfloat128, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+\n+  { P8V_BUILTIN_VEC_BCDSUB, MISC_BUILTIN_BCDSUB_V1TI,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB, MISC_BUILTIN_BCDSUB_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_LT, MISC_BUILTIN_BCDSUB_LT_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_LT, MISC_BUILTIN_BCDSUB_LT_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_LE, MISC_BUILTIN_BCDSUB_LE_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_LE, MISC_BUILTIN_BCDSUB_LE_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_EQ, MISC_BUILTIN_BCDSUB_EQ_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_EQ, MISC_BUILTIN_BCDSUB_EQ_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_GT, MISC_BUILTIN_BCDSUB_GT_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI,  RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_GT, MISC_BUILTIN_BCDSUB_GT_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_GE, MISC_BUILTIN_BCDSUB_GE_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI,  RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_GE, MISC_BUILTIN_BCDSUB_GE_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_OV, MISC_BUILTIN_BCDSUB_OV_V1TI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_INTSI },\n+  { P8V_BUILTIN_VEC_BCDSUB_OV, MISC_BUILTIN_BCDSUB_OV_V16QI,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+\n+\n   { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_XVDIVSP,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_XVDIVDP,\n@@ -10570,14 +10646,22 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n     }\n   else if (icode == CODE_FOR_vsx_set_v2df\n            || icode == CODE_FOR_vsx_set_v2di\n-\t   || icode == CODE_FOR_bcdadd\n-\t   || icode == CODE_FOR_bcdadd_lt\n-\t   || icode == CODE_FOR_bcdadd_eq\n-\t   || icode == CODE_FOR_bcdadd_gt\n-\t   || icode == CODE_FOR_bcdsub\n-\t   || icode == CODE_FOR_bcdsub_lt\n-\t   || icode == CODE_FOR_bcdsub_eq\n-\t   || icode == CODE_FOR_bcdsub_gt)\n+\t   || icode == CODE_FOR_bcdadd_v16qi\n+\t   || icode == CODE_FOR_bcdadd_v1ti\n+\t   || icode == CODE_FOR_bcdadd_lt_v16qi\n+\t   || icode == CODE_FOR_bcdadd_lt_v1ti\n+\t   || icode == CODE_FOR_bcdadd_eq_v16qi\n+\t   || icode == CODE_FOR_bcdadd_eq_v1ti\n+\t   || icode == CODE_FOR_bcdadd_gt_v16qi\n+\t   || icode == CODE_FOR_bcdadd_gt_v1ti\n+\t   || icode == CODE_FOR_bcdsub_v16qi\n+\t   || icode == CODE_FOR_bcdsub_v1ti\n+\t   || icode == CODE_FOR_bcdsub_lt_v16qi\n+\t   || icode == CODE_FOR_bcdsub_lt_v1ti\n+\t   || icode == CODE_FOR_bcdsub_eq_v16qi\n+\t   || icode == CODE_FOR_bcdsub_eq_v1ti\n+\t   || icode == CODE_FOR_bcdsub_gt_v16qi\n+\t   || icode == CODE_FOR_bcdsub_gt_v1ti)\n     {\n       /* Only allow 1-bit unsigned literals.  */\n       STRIP_NOPS (arg2);\n@@ -10601,7 +10685,8 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n \t}\n     }\n   else if (icode == CODE_FOR_dfp_denbcd_dd\n-\t   || icode == CODE_FOR_dfp_denbcd_td)\n+\t   || icode == CODE_FOR_dfp_denbcd_td\n+\t   || icode == CODE_FOR_dfp_denbcd_v16qi)\n     {\n       /* Only allow 1-bit unsigned literals.  */\n       STRIP_NOPS (arg0);"}, {"sha": "7a6ecce6a84c98fe1c5be12161f9dca86ad98425", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -20257,15 +20257,28 @@ __int128 vec_vsubuqm (__int128, __int128);\n __uint128 vec_vsubuqm (__uint128, __uint128);\n \n vector __int128 __builtin_bcdadd (vector __int128, vector __int128, const int);\n+vector unsigned char __builtin_bcdadd (vector unsigned char, vector unsigned char,\n+                                       const int);\n int __builtin_bcdadd_lt (vector __int128, vector __int128, const int);\n+int __builtin_bcdadd_lt (vector unsigned char, vector unsigned char, const int);\n int __builtin_bcdadd_eq (vector __int128, vector __int128, const int);\n+int __builtin_bcdadd_eq (vector unsigned char, vector unsigned char, const int);\n int __builtin_bcdadd_gt (vector __int128, vector __int128, const int);\n+int __builtin_bcdadd_gt (vector unsigned char, vector unsigned char, const int);\n int __builtin_bcdadd_ov (vector __int128, vector __int128, const int);\n+int __builtin_bcdadd_ov (vector unsigned char, vector unsigned char, const int);\n+\n vector __int128 __builtin_bcdsub (vector __int128, vector __int128, const int);\n+vector unsigned char __builtin_bcdsub (vector unsigned char, vector unsigned char,\n+                                       const int);\n int __builtin_bcdsub_lt (vector __int128, vector __int128, const int);\n+int __builtin_bcdsub_lt (vector unsigned char, vector unsigned char, const int);\n int __builtin_bcdsub_eq (vector __int128, vector __int128, const int);\n+int __builtin_bcdsub_eq (vector unsigned char, vector unsigned char, const int);\n int __builtin_bcdsub_gt (vector __int128, vector __int128, const int);\n+int __builtin_bcdsub_gt (vector unsigned char, vector unsigned char, const int);\n int __builtin_bcdsub_ov (vector __int128, vector __int128, const int);\n+int __builtin_bcdsub_ov (vector unsigned char, vector unsigned char, const int);\n @end smallexample\n \n @node PowerPC AltiVec Built-in Functions Available on ISA 3.0"}, {"sha": "95c3699a144cac09f7cf1d9d1b01f4aa459255d8", "filename": "gcc/testsuite/gcc.target/powerpc/bcd-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-2.c?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -14,6 +14,8 @@\n /* { dg-final { scan-assembler-not   \"stxvw4x\" \t      } } */\n /* { dg-final { scan-assembler-not   \"stxvd2x\" \t      } } */\n \n+#include <altivec.h>\n+\n typedef __int128_t __attribute__((__vector_size__(16)))\tvector_128_t;\n typedef __int128_t\t\t\t\t\tscalar_128_t;\n typedef\tunsigned long long\t\t\t\tscalar_64_t;"}, {"sha": "7948a0c95e2d90cb1350e5f7dbaf854fc4d2de1e", "filename": "gcc/testsuite/gcc.target/powerpc/bcd-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-3.c?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -18,6 +18,8 @@ typedef __int128_t __attribute__((__vector_size__(16)))\tvector_128_t;\n typedef __int128_t\t\t\t\t\tscalar_128_t;\n typedef\tunsigned long long\t\t\t\tscalar_64_t;\n \n+#include <altivec.h>\n+\n /* Test whether the peephole works to allow folding a bcdadd, with a\n    bcdadd_<test> into a single instruction.  */\n "}, {"sha": "2c8554dfe82e0a42ff9b4d0b53d1d276023f33be", "filename": "gcc/testsuite/gcc.target/powerpc/bcd-4.c", "status": "added", "additions": 521, "deletions": 0, "changes": 521, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05161256d3d2a598966ca1cf676fa0e427570f73/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbcd-4.c?ref=05161256d3d2a598966ca1cf676fa0e427570f73", "patch": "@@ -0,0 +1,521 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -save-temps\" } */\n+/* { dg-final { scan-assembler-times {\\mbcdadd\\M} 7 } } */\n+/* { dg-final { scan-assembler-times {\\mbcdsub\\M} 18 } } */\n+/* { dg-final { scan-assembler-times {\\mbcds\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mdenbcdq\\M} 1 } } */\n+\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+\n+#define BCD_POS0  12    //  0xC\n+#define BCD_POS1  15    //  0xF\n+#define BCD_NEG   13    //  0xD\n+\n+void abort (void);\n+\n+  union conv_t\n+    {\n+      _Decimal128 d128;\n+      vector  unsigned char ch;\n+      vector  long long unsigned int vllui;\n+    } conv;\n+  \n+_Decimal128 convert_vec_char (vector unsigned char a)\n+{\n+  union conv_t conv;\n+  _Decimal128 result;\n+  \n+  conv.ch = a;\n+  result = conv.d128;\n+  return result;\n+}\n+\t\t\t      \n+vector unsigned char maxbcd(unsigned int sign)\n+{\n+  vector unsigned char result;\n+  int i;\n+\n+  for (i = 15; i > 0; i--)\n+    result[i] = 0x99;\n+\n+  result[0] = sign << 4 | 0x9;\n+}\n+\n+vector unsigned char num2bcd(long int a, int encoding)\n+{\n+  int i;\n+  unsigned int hi, low, sign;\n+  \n+  vector unsigned char result;\n+\n+  if (a > 0) {\n+    if (encoding == 0)\n+      sign = BCD_POS0;\n+    else\n+      sign = BCD_POS1;\n+\n+  } else {\n+    sign = BCD_NEG;\n+    a = -a;\n+  }\n+\n+  hi = a % 10;   // 1st digit\n+  a = a / 10;\n+  result[0] = hi << 4| sign;\n+\n+  for (i = 1; i < 16; i++)\n+    {\n+      low = a % 10;\n+      a = a / 10;\n+      hi = a % 10;\n+      a = a / 10;\n+      result[i] = hi << 4 | low;\n+    }\n+\n+\n+  return result;\n+}\n+\n+int main ()\n+{\n+  int i;\n+  long int value_a, value_b, value_result;\n+  vector unsigned char a, b, result, exp_result;\n+  _Decimal128 result_d128, exp_result_d128;\n+\n+  /* Make a and b positive BCD numbers */\n+  value_a = 1020304;\n+  a = num2bcd(value_a, 0);\n+\n+  value_b = 101010;\n+  b = num2bcd(value_b, 0);\n+ \n+  value_result = value_a + value_b;\n+  exp_result = num2bcd(value_result, 0);\n+  \n+  result = __builtin_bcdadd (a, b, 0);\n+\n+  for (i = 0; i < 16; i++)\n+    if (exp_result[i] != result[i]) {\n+\n+#if DEBUG\n+      printf(\"ERROR: __builtin_bcdadd result[%d] = %d does not match \"\n+\t     \"expected_result[%d] = %d\\n\",\n+\t     i, result[i], i, exp_result[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* result should be positive */\n+  if ((result[0] & 0xF) != BCD_POS0)\n+#if DEBUG\n+      printf(\"ERROR: __builtin_bcdadd sign of result is %d.  Does not match \"\n+\t     \"expected_result = %d\\n\",\n+\t     result[0] & 0xF, BCD_POS0);\n+#else\n+      abort();\n+#endif\n+\n+  /* Make a and b positive BCD numbers using alternate positive encoding.  */\n+  value_a = 1030507;\n+  a = num2bcd(value_a, 1);\n+\n+  value_b = 204060;\n+  b = num2bcd(value_b, 1);\n+\n+  value_result = value_a + value_b;\n+  exp_result = num2bcd(value_result, 1);\n+  \n+  result = __builtin_bcdadd (a, b, 1);\n+\n+  for (i = 0; i < 16; i++)\n+    if (exp_result[i] != result[i]) {\n+#if DEBUG\n+      printf(\"ERROR: __builtin_bcdadd result[%d] = %d does not match \"\n+\t     \"expected_result[%d] = %d\\n\",\n+\t     i, result[i], i, exp_result[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* Result should be positive, alternate encoding.  */\n+  if ((result[0] & 0xF) != BCD_POS1)\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcdadd sign of result is %d.  Does not \"\n+\t   \"match expected_result = %d\\n\",\n+\t     result[0] & 0xF, BCD_POS1);\n+#else\n+    abort();\n+#endif\n+\n+  /* Make a and b negative BCD numbers */\n+  value_a = -1030507;\n+  a = num2bcd(value_a, 0);\n+\n+  value_b = -1010101;\n+  b = num2bcd(value_b, 0);\n+\n+  value_result = value_a + value_b;\n+  exp_result = num2bcd(value_result, 0);\n+  \n+  result = __builtin_bcdadd (a, b, 0);\n+\n+  for (i = 0; i < 16; i++)\n+    if (exp_result[i]  != result[i]) {\n+#if DEBUG\n+      printf(\"ERROR: __builtin_bcdadd, neg result[%d] = %d does not match \"\n+\t     \"expected_result[%d] = %d\\n\",\n+\t     i, result[i], i, exp_result[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* result should be negative */\n+  if ((result[0] & 0xF) != BCD_NEG)\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcdadd sign, neg of result is %d.  Does not \"\n+\t   \"match expected_result = %d\\n\",\n+\t     result[0] & 0xF, BCD_NEG);\n+#else\n+    abort();\n+#endif\n+\n+ \n+  /* Make a negative, b positive BCD numbers */\n+  value_a = -1030507;\n+  a = num2bcd(value_a, 0);\n+\n+  value_b = 1010101;\n+  b = num2bcd(value_b, 0);\n+\n+  value_result = value_a - value_b;\n+  exp_result = num2bcd(value_result, 0);\n+  \n+  result = __builtin_bcdsub (a, b, 0);\n+\n+  for (i = 0; i < 16; i++)\n+    if (exp_result[i] != result[i]) {\n+#if DEBUG\n+      printf(\"ERROR: __builtin_bcdsub, neg result[%d] = %d does not match \"\n+\t     \"expected_result[%d] = %d\\n\",\n+\t     i, result[i], i, exp_result[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* result should be positive, alt encoding */\n+  if ((result[0] & 0xF) != BCD_NEG)\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcdadd sign, of result is %d.  Does not match \"\n+\t   \"expected_result = %d\\n\",\n+\t     result[0] & 0xF, BCD_NEG);\n+#else\n+    abort();\n+#endif\n+\n+  /* Make a and b positive BCD numbers */\n+  value_a = 1030507;\n+  a = num2bcd(value_a, 1);\n+\n+  value_b = 1010101;\n+  b = num2bcd(value_b, 1);\n+\n+  value_result = value_a - value_b;\n+  exp_result = num2bcd(value_result, 1);\n+  \n+  result = __builtin_bcdsub (a, b, 1);\n+\n+  for (i = 0; i < 16; i++)\n+    if (exp_result[i] != result[i]) {\n+#if DEBUG\n+      printf(\"ERROR:carll __builtin_bcdsub, pos result[%d] = %d does not \"\n+\t     \"match expected_result[%d] = %d\\n\",\n+\t     i, result[i], i, exp_result[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* result should be positive */\n+  if ((result[0] & 0xF) != BCD_POS1)\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcdsub sign, result is %d.  Does not match \"\n+\t   \"expected_result = %d\\n\",\n+\t     result[0] & 0xF, BCD_POS1);\n+#else\n+      abort();\n+#endif\n+\n+  /* Test overflow add and subtract.  */\n+  a = maxbcd(BCD_POS0);\n+  b = maxbcd(BCD_POS0);\n+\n+  if(__builtin_bcdadd_ofl (a, b, 0) == 0)\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcdadd did not overflow as expected\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  value_a = 99999999;\n+  a = num2bcd(value_a, 0);\n+\n+  value_b = 999999999;\n+  b = num2bcd(value_b, 0);\n+\n+  if(__builtin_bcdadd_ofl (a, b, 0))\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcdadd unexpectedly overflowed\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a = maxbcd(BCD_NEG);\n+  b = maxbcd(BCD_NEG);\n+\n+  if (__builtin_bcdsub_ofl (a, b, 0) == 0)\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcdsub did not overflow as expected\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  value_a = -99999999;\n+  a = num2bcd(value_a, 0);\n+\n+  value_b = -999999999;\n+  b = num2bcd(value_b, 0);\n+\n+  if (__builtin_bcdsub_ofl (a, b, 0))\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcdsub unexpectedly overflowed\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  /* Test arguments for valid/invalid */\n+  if (__builtin_bcdinvalid (a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin_invalid input is unexpectedly invalid.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a[3] = 0xBB;     /* an invalid BCD digit */\n+  if (!__builtin_bcdinvalid (a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin_invalid input is unexpectedly valid.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  value_a = 1020304;\n+  a = num2bcd(value_a, 0);\n+\n+  value_b = 101010;\n+  b = num2bcd(value_b, 0);\n+\n+  /* Test equality */\n+  if (__builtin_bcdcmpeq (a, b))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmpeq result is unexpectedly 1.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (!__builtin_bcdcmpeq (a, a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmpeq result is unexpectedly 0.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+\n+  /* Test a greater then b, inputs already setup this way.  */\n+  if (!__builtin_bcdcmpgt (a, b))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmpgt result is unexpectedly 0.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (__builtin_bcdcmpgt (b, a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmpgt result is unexpectedly 1.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (__builtin_bcdcmpgt (a, a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmpgt input equal, result is unexpectedly \"\n+\t   \"1.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+\n+  if (!__builtin_bcdcmpge (a, b))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmpge result is unexpectedly 0.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (__builtin_bcdcmpge (b, a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmpge result is unexpectedly 1.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (!__builtin_bcdcmpge (b, b))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmpge inputs equal result is unexpectedly \"\n+\t   \"0.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  /* Test a less then b.  */\n+  value_a = 101010;\n+  a = num2bcd(value_a, 0);\n+  value_b = 1020304;\n+  b = num2bcd(value_b, 0);\n+\n+  if (!__builtin_bcdcmplt (a, b))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmplt result is unexpectedly 0.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (__builtin_bcdcmplt (b, a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmplt result is unexpectedly 1.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (__builtin_bcdcmplt (b, b))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmplt inputs equal result is unexpectedly \"\n+\t   \"1.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+\n+  if (!__builtin_bcdcmple (a, b))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmple result is unexpectedly 0.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (__builtin_bcdcmple (b, a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmple result is unexpectedly 1.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (!__builtin_bcdcmple (a, a))\n+#if DEBUG\n+    printf(\"ERROR: __builtin__bcdcmple inputs equal result is unexpectedly \"\n+\t   \"0.\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  /* Test multipy 10 */\n+  value_a = 1020304;\n+  a = num2bcd(value_a, 0);\n+\n+  value_result = value_a * 10;\n+  exp_result = num2bcd(value_result, 0);\n+  \n+  result = __builtin_bcdmul10 (a);\n+\n+  for (i = 0; i < 16; i++)\n+    if (exp_result[i] != result[i]) {\n+#if DEBUG\n+      printf(\"ERROR:carll __builtin_bcdmul10, pos result[%d] = %d does not \"\n+\t     \"match expected_result[%d] = %d\\n\",\n+\t     i, result[i], i, exp_result[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* result should be positive */\n+  if ((result[0] & 0xF) != BCD_POS0)\n+#if 0\n+    printf(\"ERROR: __builtin_bcdmul10 sign, result is %d.  Does not match \"\n+\t   \"expected_result = %d\\n\",\n+\t   result[0] & 0xF, BCD_POS1);\n+#else\n+    abort();\n+#endif\n+\n+  /* Test divide 10 */\n+  value_a = 1020304;\n+  a = num2bcd(value_a, 0);\n+\n+  value_result = value_a / 10;\n+  exp_result = num2bcd(value_result, 0);\n+  \n+  result = __builtin_bcddiv10 (a);\n+\n+  for (i = 0; i < 16; i++)\n+    if (exp_result[i] != result[i]) {\n+#if DEBUG\n+      printf(\"ERROR:carll __builtin_bcddiv10, pos result[%d] = %d does not \"\n+\t     \"match expected_result[%d] = %d\\n\",\n+\t     i, result[i], i, exp_result[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* result should be positive */\n+  if ((result[0] & 0xF) != BCD_POS0)\n+#if DEBUG\n+    printf(\"ERROR: __builtin_bcddiv10 sign, result is %d.  Does not match \"\n+\t   \"expected_result = %d\\n\",\n+\t     result[0] & 0xF, BCD_POS1);\n+#else\n+    abort();\n+#endif\n+\n+   value_a = 1020304;\n+   exp_result_d128 = 1020304;\n+   a = num2bcd(value_a, 0);\n+\n+   conv.ch = a;\n+   conv.d128 = __builtin_bcd2dfp (a);\n+   result_d128 = conv.d128;\n+   \n+   if (result_d128 != exp_result_d128)\n+#if DEBUG\n+     printf(\"ERROR: __builtin_bcd2dfp, result does not match expected_result.\"\n+\t    \"\\n\");\n+#else\n+     abort();\n+#endif\n+     return 0;\n+}\n+"}]}