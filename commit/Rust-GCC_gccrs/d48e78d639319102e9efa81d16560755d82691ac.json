{"sha": "d48e78d639319102e9efa81d16560755d82691ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4ZTc4ZDYzOTMxOTEwMmU5ZWZhODFkMTY1NjA3NTVkODI2OTFhYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-11-12T01:07:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-11-12T01:07:49Z"}, "message": "i386: Convert from -mfused-madd to -ffp-contract.\n\n\t* config/fused-madd.opt: New file.\n\t* config.gcc [i386-*, x86_64-*] (extra_options): Use it.\n\t* config/i386/i386.c (ix86_extra_costs): Handle FMA.\n\t(TARGET_DEFAULT_TARGET_FLAGS): Remove MASK_FUSED_MADD.\n\t* config/i386/i386.opt (mfused-madd): Remove.\n\t* config/i386/sse.md (split_fma): Remove.\n\t(split_fms, split_fnma, split_fnms): Remove.\n\nFrom-SVN: r166642", "tree": {"sha": "b900887d0aed2abe706e7520ec61bade3fc4cce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b900887d0aed2abe706e7520ec61bade3fc4cce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48e78d639319102e9efa81d16560755d82691ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48e78d639319102e9efa81d16560755d82691ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48e78d639319102e9efa81d16560755d82691ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48e78d639319102e9efa81d16560755d82691ac/comments", "author": null, "committer": null, "parents": [{"sha": "75d319c280bc44f9c0a0c975f778c27c3de00ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d319c280bc44f9c0a0c975f778c27c3de00ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d319c280bc44f9c0a0c975f778c27c3de00ddd"}], "stats": {"total": 175, "additions": 72, "deletions": 103}, "files": [{"sha": "6f5a3640390ad9f3dce9804d19e478ea4b72abd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48e78d639319102e9efa81d16560755d82691ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48e78d639319102e9efa81d16560755d82691ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d48e78d639319102e9efa81d16560755d82691ac", "patch": "@@ -1,3 +1,13 @@\n+2010-11-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/fused-madd.opt: New file.\n+\t* config.gcc [i386-*, x86_64-*] (extra_options): Use it.\n+\t* config/i386/i386.c (ix86_extra_costs): Handle FMA.\n+\t(TARGET_DEFAULT_TARGET_FLAGS): Remove MASK_FUSED_MADD.\n+\t* config/i386/i386.opt (mfused-madd): Remove.\n+\t* config/i386/sse.md (split_fma): Remove.\n+\t(split_fms, split_fnma, split_fnms): Remove.\n+\n 2010-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/46088"}, {"sha": "f92483de52aaf81600addb164a22c5e92afc967f", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d48e78d639319102e9efa81d16560755d82691ac", "patch": "@@ -311,6 +311,7 @@ i[34567]86-*-*)\n \tcpu_type=i386\n \tc_target_objs=\"i386-c.o\"\n \tcxx_target_objs=\"i386-c.o\"\n+\textra_options=\"${extra_options} fused-madd.opt\"\n \textra_headers=\"cpuid.h mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n@@ -322,6 +323,7 @@ x86_64-*-*)\n \tcpu_type=i386\n \tc_target_objs=\"i386-c.o\"\n \tcxx_target_objs=\"i386-c.o\"\n+\textra_options=\"${extra_options} fused-madd.opt\"\n \textra_headers=\"cpuid.h mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h"}, {"sha": "b1214cbb4dc1cd37d8b3b0df40107f2a7a38fd12", "filename": "gcc/config/fused-madd.opt", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig%2Ffused-madd.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig%2Ffused-madd.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffused-madd.opt?ref=d48e78d639319102e9efa81d16560755d82691ac", "patch": "@@ -0,0 +1,25 @@\n+; -mfused-madd option (some targets only).\n+;\n+; Copyright (C) 2010\n+; Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+mfused-madd\n+Target Undocumented Alias(ffp-contract=, fast, off) Warn(%<-mfused-madd%> is deprecated; use %<-ffp-contract=%> instead)\n+\n+; This comment is to ensure we retain the blank line above."}, {"sha": "15e8b271b9dfd9a4a57fa54b556a327738cd5746", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d48e78d639319102e9efa81d16560755d82691ac", "patch": "@@ -28587,6 +28587,31 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total, bool speed)\n \t}\n       return false;\n \n+    case FMA:\n+      {\n+\trtx sub;\n+\n+        gcc_assert (FLOAT_MODE_P (mode));\n+        gcc_assert (TARGET_FMA || TARGET_FMA4);\n+\n+        /* ??? SSE scalar/vector cost should be used here.  */\n+        /* ??? Bald assumption that fma has the same cost as fmul.  */\n+        *total = cost->fmul;\n+\t*total += rtx_cost (XEXP (x, 1), FMA, speed);\n+\n+        /* Negate in op0 or op2 is free: FMS, FNMA, FNMS.  */\n+\tsub = XEXP (x, 0);\n+\tif (GET_CODE (sub) == NEG)\n+\t  sub = XEXP (x, 0);\n+\t*total += rtx_cost (sub, FMA, speed);\n+\n+\tsub = XEXP (x, 2);\n+\tif (GET_CODE (sub) == NEG)\n+\t  sub = XEXP (x, 0);\n+\t*total += rtx_cost (sub, FMA, speed);\n+\treturn true;\n+      }\n+\n     case MULT:\n       if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n \t{\n@@ -34483,8 +34508,7 @@ ix86_autovectorize_vector_sizes (void)\n #define TARGET_DEFAULT_TARGET_FLAGS\t\\\n   (TARGET_DEFAULT\t\t\t\\\n    | TARGET_SUBTARGET_DEFAULT\t\t\\\n-   | TARGET_TLS_DIRECT_SEG_REFS_DEFAULT \\\n-   | MASK_FUSED_MADD)\n+   | TARGET_TLS_DIRECT_SEG_REFS_DEFAULT)\n \n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION ix86_handle_option"}, {"sha": "026f1c7acc231b7605869ed32b16f1880aeb6a4b", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=d48e78d639319102e9efa81d16560755d82691ac", "patch": "@@ -261,12 +261,6 @@ Target Report Mask(VZEROUPPER) Save\n Generate vzeroupper instruction before a transfer of control flow out of\n the function.\n \n-mfused-madd\n-Target Report Mask(FUSED_MADD) Save\n-Enable automatic generation of fused floating point multiply-add instructions\n-if the ISA supports such instructions.  The -mfused-madd option is on by\n-default.\n-\n mdispatch-scheduler\n Target RejectNegative Var(flag_dispatch_scheduler)\n Do dispatch scheduling if processor is bdver1 and Haifa scheduling"}, {"sha": "279f11128ec53ea903e6d35d93f8fe2c23bd54bf", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 94, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d48e78d639319102e9efa81d16560755d82691ac", "patch": "@@ -1856,6 +1856,10 @@\n ;;\t(set (reg1) (mem (addr1)))\n ;;\t(set (reg2) (mult (reg1) (mem (addr2))))\n ;;\t(set (reg3) (plus (reg2) (mem (addr3))))\n+;;\n+;; ??? This is historic, pre-dating the gimple fma transformation.\n+;; We could now properly represent that only one memory operand is\n+;; allowed and not be penalized during optimization.\n \n ;; Intrinsic FMA operations.\n \n@@ -2178,100 +2182,6 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-;;\n-;; Non-intrinsic versions, matched when fused-multiply-add is allowed.\n-;;\n-;; ??? If fused-madd were a generic flag, combine could do this without\n-;; needing splitters here in the backend.  Irritatingly, combine won't\n-;; recognize many of these with mere splits, since only 3 or more insns\n-;; are allowed to split during combine.  Thankfully, there's always a\n-;; split_all_insns pass that runs before reload.\n-;;\n-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-\n-(define_insn_and_split \"*split_fma\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\")\n-\t(plus:FMAMODE\n-\t  (mult:FMAMODE\n-\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n-\t    (match_operand:FMAMODE 2 \"nonimmediate_operand\"))\n-\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE_MATH && TARGET_FUSED_MADD\n-   && (TARGET_FMA || TARGET_FMA4)\n-   && !(reload_in_progress || reload_completed)\"\n-  { gcc_unreachable (); }\n-  \"&& 1\"\n-  [(set (match_dup 0)\n-\t(fma:FMAMODE\n-\t  (match_dup 1)\n-\t  (match_dup 2)\n-\t  (match_dup 3)))]\n-  \"\")\n-\n-;; Floating multiply and subtract.\n-(define_insn_and_split \"*split_fms\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\")\n-\t(minus:FMAMODE\n-\t  (mult:FMAMODE\n-\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n-\t    (match_operand:FMAMODE 2 \"nonimmediate_operand\"))\n-\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE_MATH && TARGET_FUSED_MADD\n-   && (TARGET_FMA || TARGET_FMA4)\n-   && !(reload_in_progress || reload_completed)\"\n-  { gcc_unreachable (); }\n-  \"&& 1\"\n-  [(set (match_dup 0)\n-\t(fma:FMAMODE\n-\t  (match_dup 1)\n-\t  (match_dup 2)\n-\t  (neg:FMAMODE (match_dup 3))))]\n-  \"\")\n-\n-;; Floating point negative multiply and add.\n-;; Recognize (-a * b + c) via the canonical form: c - (a * b).\n-(define_insn_and_split \"*split_fnma\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\")\n-\t(minus:FMAMODE\n-\t (match_operand:FMAMODE 3 \"nonimmediate_operand\")\n-\t (mult:FMAMODE\n-\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n-\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\"))))]\n-  \"TARGET_SSE_MATH && TARGET_FUSED_MADD\n-   && (TARGET_FMA || TARGET_FMA4)\n-   && !(reload_in_progress || reload_completed)\"\n-  { gcc_unreachable (); }\n-  \"&& 1\"\n-  [(set (match_dup 0)\n-\t(fma:FMAMODE\n-\t  (neg:FMAMODE (match_dup 1))\n-\t  (match_dup 2)\n-\t  (match_dup 3)))]\n-  \"\")\n-\n-;; Floating point negative multiply and subtract.\n-;; Recognize (-a * b - c) via the canonical form: c - (-a * b).\n-(define_insn_and_split \"*split_fnms\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\")\n-\t(minus:FMAMODE\n-\t  (mult:FMAMODE\n-\t    (neg:FMAMODE\n-\t      (match_operand:FMAMODE 1 \"nonimmediate_operand\"))\n-\t    (match_operand:FMAMODE 2 \"nonimmediate_operand\"))\n-\t (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE_MATH && TARGET_FUSED_MADD\n-   && (TARGET_FMA || TARGET_FMA4)\n-   && !(reload_in_progress || reload_completed)\"\n-  { gcc_unreachable (); }\n-  \"&& 1\"\n-  [(set (match_dup 0)\n-\t(fma:FMAMODE\n-\t  (neg:FMAMODE (match_dup 1))\n-\t  (match_dup 2)\n-\t  (neg:FMAMODE (match_dup 3))))]\n-  \"\")\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations"}, {"sha": "ef7278f253dbf28623049281744fd9f831cc4168", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d48e78d639319102e9efa81d16560755d82691ac", "patch": "@@ -1,3 +1,7 @@\n+2010-11-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.target/i386/sse-24.c: Use -ffp-contract.\n+\n 2010-11-11  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/inline-5.c: Fix testcase."}, {"sha": "daeb968a24f36f1e926dc0e75da2933476d92f31", "filename": "gcc/testsuite/gcc.target/i386/sse-24.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48e78d639319102e9efa81d16560755d82691ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-24.c?ref=d48e78d639319102e9efa81d16560755d82691ac", "patch": "@@ -1,5 +1,5 @@\n /* PR target/44338 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -mno-fused-madd\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -ffp-contract=off\" } */\n \n #include \"sse-23.c\""}]}