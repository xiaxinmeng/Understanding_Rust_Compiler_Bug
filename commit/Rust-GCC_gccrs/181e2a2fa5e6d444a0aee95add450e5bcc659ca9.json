{"sha": "181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgxZTJhMmZhNWU2ZDQ0NGEwYWVlOTVhZGQ0NTBlNWJjYzY1OWNhOQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-03-04T12:29:38Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-03-04T12:30:22Z"}, "message": "IBM Z: zTPF: Add tpf trace customization options\n\nThe zTPF OS implements a tracing facility for function entry and exit\nwhich uses global flags and trace function addresses. The addresses of\nthe flags as well as the trace functions are currently hard-coded in\nthe zTPF specific GCC parts of the IBM Z back-end.\n\nWith this patch these addresses can be changed at compile-time using\nthe new command line options.  For convenience one additional command\nline option (-mtpf-trace-skip) implements a new set of hard-coded\naddresses.\n\ngcc/ChangeLog:\n\n2020-03-04  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390.c (s390_emit_prologue): Specify the 2 new\n\toperands to the prologue_tpf expander.\n\t(s390_emit_epilogue): Likewise.\n\t(s390_option_override_internal): Do error checking and setup for\n\tthe new options.\n\t* config/s390/tpf.h (TPF_TRACE_PROLOGUE_CHECK)\n\t(TPF_TRACE_EPILOGUE_CHECK, TPF_TRACE_PROLOGUE_TARGET)\n\t(TPF_TRACE_EPILOGUE_TARGET, TPF_TRACE_PROLOGUE_SKIP_TARGET)\n\t(TPF_TRACE_EPILOGUE_SKIP_TARGET): New macro definitions.\n\t* config/s390/tpf.md (\"prologue_tpf\", \"epilogue_tpf\"): Add two new\n\toperands for the check flag and the branch target.\n\t* config/s390/tpf.opt (\"mtpf-trace-hook-prologue-check\")\n\t(\"mtpf-trace-hook-prologue-target\")\n\t(\"mtpf-trace-hook-epilogue-check\")\n\t(\"mtpf-trace-hook-epilogue-target\", \"mtpf-trace-skip\"): New\n\toptions.\n\t* doc/invoke.texi: Document -mtpf-trace-skip option. The other\n\toptions are for debugging purposes and will not be documented\n\there.", "tree": {"sha": "1a535cbf2551e241c3d04b332eafef3c32a461d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a535cbf2551e241c3d04b332eafef3c32a461d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20fb4a47421527d6dae2db2f751df036e6b85ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fb4a47421527d6dae2db2f751df036e6b85ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fb4a47421527d6dae2db2f751df036e6b85ded"}], "stats": {"total": 114, "additions": 96, "deletions": 18}, "files": [{"sha": "31af842eb352610fceb7bbbf9e47ce2291c6b355", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "patch": "@@ -11363,17 +11363,21 @@ s390_emit_prologue (void)\n       emit_insn (insns);\n     }\n \n+#if TARGET_TPF != 0\n   if (TARGET_TPF_PROFILING)\n     {\n-      /* Generate a BAS instruction to serve as a function\n-\t entry intercept to facilitate the use of tracing\n-\t algorithms located at the branch target.  */\n-      emit_insn (gen_prologue_tpf ());\n+      /* Generate a BAS instruction to serve as a function entry\n+\t intercept to facilitate the use of tracing algorithms located\n+\t at the branch target.  */\n+      emit_insn (gen_prologue_tpf (\n+\t\t   GEN_INT (s390_tpf_trace_hook_prologue_check),\n+\t\t   GEN_INT (s390_tpf_trace_hook_prologue_target)));\n \n-      /* Emit a blockage here so that all code\n-\t lies between the profiling mechanisms.  */\n+      /* Emit a blockage here so that all code lies between the\n+\t profiling mechanisms.  */\n       emit_insn (gen_blockage ());\n     }\n+#endif\n }\n \n /* Expand the epilogue into a bunch of separate insns.  */\n@@ -11386,19 +11390,22 @@ s390_emit_epilogue (bool sibcall)\n   int next_offset;\n   int i;\n \n+#if TARGET_TPF != 0\n   if (TARGET_TPF_PROFILING)\n     {\n+      /* Generate a BAS instruction to serve as a function entry\n+\t intercept to facilitate the use of tracing algorithms located\n+\t at the branch target.  */\n \n-      /* Generate a BAS instruction to serve as a function\n-\t entry intercept to facilitate the use of tracing\n-\t algorithms located at the branch target.  */\n-\n-      /* Emit a blockage here so that all code\n-\t lies between the profiling mechanisms.  */\n+      /* Emit a blockage here so that all code lies between the\n+\t profiling mechanisms.  */\n       emit_insn (gen_blockage ());\n \n-      emit_insn (gen_epilogue_tpf ());\n+      emit_insn (gen_epilogue_tpf (\n+\t\t   GEN_INT (s390_tpf_trace_hook_epilogue_check),\n+\t\t   GEN_INT (s390_tpf_trace_hook_epilogue_target)));\n     }\n+#endif\n \n   /* Check whether to use frame or stack pointer for restore.  */\n \n@@ -15266,6 +15273,26 @@ s390_option_override_internal (struct gcc_options *opts,\n   if (!DISP_IN_RANGE ((1 << param_stack_clash_protection_probe_interval)))\n     param_stack_clash_protection_probe_interval = 12;\n \n+#if TARGET_TPF != 0\n+  if (!CONST_OK_FOR_J (opts->x_s390_tpf_trace_hook_prologue_check))\n+    error (\"-mtpf-trace-hook-prologue-check requires integer in range 0..4095\");\n+\n+  if (!CONST_OK_FOR_J (opts->x_s390_tpf_trace_hook_prologue_target))\n+    error (\"-mtpf-trace-hook-prologue-target requires integer in range 0..4095\");\n+\n+  if (!CONST_OK_FOR_J (opts->x_s390_tpf_trace_hook_epilogue_check))\n+    error (\"-mtpf-trace-hook-epilogue-check requires integer in range 0..4095\");\n+\n+  if (!CONST_OK_FOR_J (opts->x_s390_tpf_trace_hook_epilogue_target))\n+    error (\"-mtpf-trace-hook-epilogue-target requires integer in range 0..4095\");\n+\n+  if (s390_tpf_trace_skip)\n+    {\n+      opts->x_s390_tpf_trace_hook_prologue_target = TPF_TRACE_PROLOGUE_SKIP_TARGET;\n+      opts->x_s390_tpf_trace_hook_epilogue_target = TPF_TRACE_EPILOGUE_SKIP_TARGET;\n+    }\n+#endif\n+\n #ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n   if (!TARGET_LONG_DOUBLE_128_P (opts_set->x_target_flags))\n     opts->x_target_flags |= MASK_LONG_DOUBLE_128;"}, {"sha": "22adf27c30b5e756d16d500380b5a6198100f52c", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "patch": "@@ -131,4 +131,20 @@ along with GCC; see the file COPYING3.  If not see\n /* GAS supports it, but the debuggers don't, so avoid it.  */\n #define SUPPORTS_DISCRIMINATOR 0\n \n+/* z/TPF hardcoded values for the -mtpf-trace feature.  */\n+\n+/* The *_CHECK value specify addresses in the lowcore whose byte\n+   values can be used to turn on/off the tracing.  */\n+#define TPF_TRACE_PROLOGUE_CHECK 4065\n+#define TPF_TRACE_EPILOGUE_CHECK 4071\n+\n+/* The target addresses for the z/TPF trace facility.  */\n+#define TPF_TRACE_PROLOGUE_TARGET 4064\n+#define TPF_TRACE_EPILOGUE_TARGET 4070\n+\n+/* Alternate target addresses for the z/TPF trace facility.  These\n+   will be used with the -mtpf-trace-skip switch.  */\n+#define TPF_TRACE_PROLOGUE_SKIP_TARGET 4076\n+#define TPF_TRACE_EPILOGUE_SKIP_TARGET 4082\n+\n #endif /* ! _TPF_H */"}, {"sha": "19c53a18b8ae4909a42848ccc1fd7510125c95ba", "filename": "gcc/config/s390/tpf.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fconfig%2Fs390%2Ftpf.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fconfig%2Fs390%2Ftpf.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.md?ref=181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "patch": "@@ -18,16 +18,20 @@\n ;; <http://www.gnu.org/licenses/>.\n \n (define_insn \"prologue_tpf\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_TPF_PROLOGUE)\n+  [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"J\")\n+\t\t     (match_operand 1 \"const_int_operand\" \"J\")]\n+\t\t    UNSPECV_TPF_PROLOGUE)\n    (clobber (reg:DI 1))]\n   \"TARGET_TPF_PROFILING\"\n-  \"larl\\t%%r1,.+14\\;tm\\t4065,255\\;bnz\\t4064\"\n+  \"larl\\t%%r1,.+14\\;tm\\t%0,255\\;bnz\\t%1\"\n   [(set_attr \"length\"   \"14\")])\n \n \n (define_insn \"epilogue_tpf\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_TPF_EPILOGUE)\n+  [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"J\")\n+\t\t     (match_operand 1 \"const_int_operand\" \"J\")]\n+\t\t    UNSPECV_TPF_EPILOGUE)\n    (clobber (reg:DI 1))]\n   \"TARGET_TPF_PROFILING\"\n-  \"larl\\t%%r1,.+14\\;tm\\t4071,255\\;bnz\\t4070\"\n+  \"larl\\t%%r1,.+14\\;tm\\t%0,255\\;bnz\\t%1\"\n   [(set_attr \"length\"   \"14\")])"}, {"sha": "9876a55c57f54d0c0f6934c8387d72cb6472baca", "filename": "gcc/config/s390/tpf.opt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fconfig%2Fs390%2Ftpf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fconfig%2Fs390%2Ftpf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.opt?ref=181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "patch": "@@ -22,6 +22,26 @@ mtpf-trace\n Target Report Mask(TPF_PROFILING)\n Enable TPF-OS tracing code.\n \n+mtpf-trace-hook-prologue-check=\n+Target RejectNegative Report Joined UInteger Var(s390_tpf_trace_hook_prologue_check) Init(TPF_TRACE_PROLOGUE_CHECK)\n+Set the trace check address for prologue tpf hook\n+\n+mtpf-trace-hook-prologue-target=\n+Target RejectNegative Report Joined UInteger Var(s390_tpf_trace_hook_prologue_target) Init(TPF_TRACE_PROLOGUE_TARGET)\n+Set the trace jump address for prologue tpf hook\n+\n+mtpf-trace-hook-epilogue-check=\n+Target RejectNegative Report Joined UInteger Var(s390_tpf_trace_hook_epilogue_check) Init(TPF_TRACE_EPILOGUE_CHECK)\n+Set the trace check address for epilogue tpf hook\n+\n+mtpf-trace-hook-epilogue-target=\n+Target RejectNegative Report Joined UInteger Var(s390_tpf_trace_hook_epilogue_target) Init(TPF_TRACE_EPILOGUE_TARGET)\n+Set the trace jump address for epilogue tpf hook\n+\n+mtpf-trace-skip\n+Target Report Var(s390_tpf_trace_skip) Init(0)\n+Set the prologue and epilogue hook addresses to TPF_TRACE_PROLOGUE_SKIP_TARGET and TPF_TRACE_EPILOGUE_SKIP_TARGET. Equivalent to using -mtpf-trace-hook-prologue-target=TPF_TRACE_PROLOGUE_SKIP_TARGET and -mtpf-trace-hook-epilogue-target=TPF_TRACE_EPILOGUE_SKIP_TARGET\n+\n mmain\n Target Report\n Specify main object for TPF-OS."}, {"sha": "af28015234c7e8cd4a2a081f3abbc801eac951cb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e2a2fa5e6d444a0aee95add450e5bcc659ca9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=181e2a2fa5e6d444a0aee95add450e5bcc659ca9", "patch": "@@ -1223,7 +1223,8 @@ See RS/6000 and PowerPC Options.\n -msmall-exec  -mno-small-exec  -mmvcle  -mno-mvcle @gol\n -m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch @gol\n -mhtm  -mvx  -mzvector @gol\n--mtpf-trace  -mno-tpf-trace  -mfused-madd  -mno-fused-madd @gol\n+-mtpf-trace  -mno-tpf-trace  -mtpf-trace-skip  -mno-tpf-trace-skip @gol\n+-mfused-madd  -mno-fused-madd @gol\n -mwarn-framesize  -mwarn-dynamicstack  -mstack-size  -mstack-guard @gol\n -mhotpatch=@var{halfwords},@var{halfwords}}\n \n@@ -26953,6 +26954,16 @@ Generate code that adds (does not add) in TPF OS specific branches to trace\n routines in the operating system.  This option is off by default, even\n when compiling for the TPF OS@.\n \n+@item -mtpf-trace-skip\n+@itemx -mno-tpf-trace-skip\n+@opindex mtpf-trace-skip\n+@opindex mno-tpf-trace-skip\n+Generate code that changes (does not change) the default branch\n+targets enabled by @option{-mtpf-trace} to point to specialized trace\n+routines providing the ability of selectively skipping function trace\n+entries for the TPF OS.  This option is off by default, even when\n+compiling for the TPF OS and specifying @option{-mtpf-trace}.\n+\n @item -mfused-madd\n @itemx -mno-fused-madd\n @opindex mfused-madd"}]}