{"sha": "ace65db9215882b95e2ead1bb0dc8c54c2ea69be", "node_id": "C_kwDOANBUbNoAKGFjZTY1ZGI5MjE1ODgyYjk1ZTJlYWQxYmIwZGM4YzU0YzJlYTY5YmU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-08T08:06:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-09T13:28:12Z"}, "message": "middle-end/108995 - avoid folding when sanitizing overflow\n\nThe following plugs one place in extract_muldiv where it should avoid\nfolding when sanitizing overflow.\n\n\tPR middle-end/108995\n\t* fold-const.cc (extract_muldiv_1): Avoid folding\n\t(CST * b) / CST2 when sanitizing overflow and we rely on\n\toverflow being undefined.\n\n\t* gcc.dg/ubsan/pr108995.c: New testcase.", "tree": {"sha": "9418917716b26f7435a3e3af6974369308de599c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9418917716b26f7435a3e3af6974369308de599c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ace65db9215882b95e2ead1bb0dc8c54c2ea69be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace65db9215882b95e2ead1bb0dc8c54c2ea69be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace65db9215882b95e2ead1bb0dc8c54c2ea69be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace65db9215882b95e2ead1bb0dc8c54c2ea69be/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad177e848787258070415dbe002b2c6fba1c511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad177e848787258070415dbe002b2c6fba1c511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad177e848787258070415dbe002b2c6fba1c511"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "02a24c5fe65116f2bc6ba2cb0cd56a9fbbe96e5b", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace65db9215882b95e2ead1bb0dc8c54c2ea69be/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace65db9215882b95e2ead1bb0dc8c54c2ea69be/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=ace65db9215882b95e2ead1bb0dc8c54c2ea69be", "patch": "@@ -7093,6 +7093,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t If we have an unsigned type, we cannot do this since it will change\n \t the result if the original computation overflowed.  */\n       if (TYPE_OVERFLOW_UNDEFINED (ctype)\n+\t  && !TYPE_OVERFLOW_SANITIZED (ctype)\n \t  && ((code == MULT_EXPR && tcode == EXACT_DIV_EXPR)\n \t      || (tcode == MULT_EXPR\n \t\t  && code != TRUNC_MOD_EXPR && code != CEIL_MOD_EXPR\n@@ -7102,8 +7103,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t  if (wi::multiple_of_p (wi::to_wide (op1), wi::to_wide (c),\n \t\t\t\t TYPE_SIGN (type)))\n \t    {\n-\t      if (TYPE_OVERFLOW_UNDEFINED (ctype))\n-\t\t*strict_overflow_p = true;\n+\t      *strict_overflow_p = true;\n \t      return fold_build2 (tcode, ctype, fold_convert (ctype, op0),\n \t\t\t\t  fold_convert (ctype,\n \t\t\t\t\t\tconst_binop (TRUNC_DIV_EXPR,\n@@ -7112,8 +7112,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t  else if (wi::multiple_of_p (wi::to_wide (c), wi::to_wide (op1),\n \t\t\t\t      TYPE_SIGN (type)))\n \t    {\n-\t      if (TYPE_OVERFLOW_UNDEFINED (ctype))\n-\t\t*strict_overflow_p = true;\n+\t      *strict_overflow_p = true;\n \t      return fold_build2 (code, ctype, fold_convert (ctype, op0),\n \t\t\t\t  fold_convert (ctype,\n \t\t\t\t\t\tconst_binop (TRUNC_DIV_EXPR,"}, {"sha": "166825b2ef827495abc5b7458d9574f4440a17c3", "filename": "gcc/testsuite/gcc.dg/ubsan/pr108995.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace65db9215882b95e2ead1bb0dc8c54c2ea69be/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr108995.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace65db9215882b95e2ead1bb0dc8c54c2ea69be/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr108995.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr108995.c?ref=ace65db9215882b95e2ead1bb0dc8c54c2ea69be", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target int32 } } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* With optimization we constant fold and diagnose the overflow and do\n+   not sanitize anything.  */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { ! \"-O0\" } } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n+\n+int a;\n+const int b = 44514;\n+int *c = &a;\n+\n+int main ()\n+{\n+  *c = 65526 * b / 6;\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: 44514 \\\\* 65526 cannot be represented in type 'int'\" } */"}]}