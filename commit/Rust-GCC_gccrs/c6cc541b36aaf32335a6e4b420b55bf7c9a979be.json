{"sha": "c6cc541b36aaf32335a6e4b420b55bf7c9a979be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZjYzU0MWIzNmFhZjMyMzM1YTZlNGI0MjBiNTViZjdjOWE5NzliZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-04-01T20:04:21Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-01T20:04:21Z"}, "message": "2005-04-01  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/PipedInputStream.java\n\t(read): Make sure a positive byte value is returned. Revised javadoc.\n\tThanks to Olafur Bragason for reporting these bugs.\n\nFrom-SVN: r97416", "tree": {"sha": "63a04daa2c80c5e824b3c2addaeb8a198f30b260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63a04daa2c80c5e824b3c2addaeb8a198f30b260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6cc541b36aaf32335a6e4b420b55bf7c9a979be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6cc541b36aaf32335a6e4b420b55bf7c9a979be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6cc541b36aaf32335a6e4b420b55bf7c9a979be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6cc541b36aaf32335a6e4b420b55bf7c9a979be/comments", "author": null, "committer": null, "parents": [{"sha": "ef87438639663154314e2cc5cd692eddaebfc799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef87438639663154314e2cc5cd692eddaebfc799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef87438639663154314e2cc5cd692eddaebfc799"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "3a928e5177ccdf64167e14c8b0510f321b9ce974", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cc541b36aaf32335a6e4b420b55bf7c9a979be/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cc541b36aaf32335a6e4b420b55bf7c9a979be/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c6cc541b36aaf32335a6e4b420b55bf7c9a979be", "patch": "@@ -1,3 +1,9 @@\n+2005-04-01  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/PipedInputStream.java\n+\t(read): Make sure a positive byte value is returned. Revised javadoc.\n+\tThanks to Olafur Bragason for reporting these bugs.\n+\n 2005-04-01  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natVMClassLoader.cc (getSystemClassLoaderInternal):"}, {"sha": "d424587889adf4c1c6261504a8cb25b209b699e6", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cc541b36aaf32335a6e4b420b55bf7c9a979be/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cc541b36aaf32335a6e4b420b55bf7c9a979be/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=c6cc541b36aaf32335a6e4b420b55bf7c9a979be", "patch": "@@ -1,5 +1,5 @@\n /* PipedInputStream.java -- Read portion of piped streams.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -226,18 +226,17 @@ synchronized void receive(byte[] buf, int offset, int len)\n   }\n   \n   /**\n-    * This method reads bytes from the stream into a caller supplied buffer.\n-    * It starts storing bytes at position <code>offset</code> into the \n-    * buffer and\n-    * reads a maximum of <code>len</code> bytes.  Note that this method \n-    * can actually\n-    * read fewer than <code>len</code> bytes.  The actual number of bytes \n-    * read is\n-    * returned.  A -1 is returned to indicated that no bytes can be read\n+    * This method reads one byte from the stream.\n+    * -1 is returned to indicated that no bytes can be read\n     * because the end of the stream was reached.  If the stream is already\n     * closed, a -1 will again be returned to indicate the end of the stream.\n-    * <p>\n-    * This method will block if no byte is available to be read.\n+    * \n+    * <p>This method will block if no byte is available to be read.</p>\n+    *\n+    * @return the value of the read byte value, or -1 of the end of the stream\n+    * was reached\n+    * \n+    * @throws IOException if an error occured\n     */\n   public int read() throws IOException\n   {\n@@ -248,7 +247,7 @@ public int read() throws IOException\n     // if this method is never called.\n \n     int r = read(read_buf, 0, 1);\n-    return r != -1 ? read_buf[0] : -1;\n+    return r != -1 ? (read_buf[0] & 0xff) : -1;\n   }\n   \n   /**"}]}