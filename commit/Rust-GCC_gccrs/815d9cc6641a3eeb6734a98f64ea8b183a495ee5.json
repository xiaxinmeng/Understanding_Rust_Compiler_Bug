{"sha": "815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1ZDljYzY2NDFhM2VlYjY3MzRhOThmNjRlYThiMTgzYTQ5NWVlNQ==", "commit": {"author": {"name": "Xi Ruoyao", "email": "ryxi@stu.xidian.edu.cn", "date": "2017-05-01T22:26:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-05-01T22:26:02Z"}, "message": "re PR c++/80038 (Random segfault using local vectors in Cilk function)\n\n2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n\n        PR c++/80038\n\t* cilk_common.c (expand_builtin_cilk_detach): Move pedigree\n\toperations here.\n\t* gimplify.c (gimplify_cilk_detach): New function.\n\t(gimplify_call_expr, gimplify_modify_expr): Call it as needed.\n\t* tree-core.h: Document EXPR_CILK_SPAWN.\n\t* tree.h (EXPR_CILK_SPAWN): Define.\n\n        PR c++/80038\n\t* c-common.h (cilk_gimplify_call_params_in_spawned_fn): Remove\n\tprototype.\n\t(cilk_install_body_pedigree_operations): Likewise.\n\t* cilk.c (cilk_set_spawn_marker): Mark functions that should be\n\tdetatched.\n\t(cilk_gimplify_call_params_in_spawned_fn): Remove.\n\t(cilk_install_body_pedigree_operations): Likewise.\n\t(gimplify_cilk_spawn): Add EXPR_STMT and CLEANUP_POINT_EXPR\n\tunwrapping.\n\n        PR c++/80038\n\t* c-gimplify.c (c_gimplify_expr): Remove calls to\n\tcilk_gimplifY_call_params_in_spawned_fn.\n\n        PR c++/80038\n\t* cp-cilkplus.c (cilk_install_body_with_frame_cleanup): Don't\n\tadd pedigree operation and detach call here.\n\t* cp-gimplify.c (cp_gimplify_expr): Remove the calls to\n\tcilk_cp_gimplify_call_params_in_spawned_fn.\n\t(cilk_cp_gimplify_call_params_in_spawned_fn): Remove function.\n\t* semantics.c (simplify_aggr_init_expr): Copy EXPR_CILK_SPAWN.\n\n        PR c++/80038\n\t* lto-lang.c (lto_init): Set in_lto_p earlier.\n\n\tPR c++/80038\n\t* g++.dg/cilk-plus/CK/pr80038.cc: New test.\n\nFrom-SVN: r247446", "tree": {"sha": "a8a033d722da210460642c7a397ad087d9c87d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a033d722da210460642c7a397ad087d9c87d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "338035aa194405df94875cebb389d593cf9ef00a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338035aa194405df94875cebb389d593cf9ef00a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338035aa194405df94875cebb389d593cf9ef00a"}], "stats": {"total": 352, "additions": 199, "deletions": 153}, "files": [{"sha": "4b01ed82fb837b4e0035c63017de9c94130708e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1,3 +1,13 @@\n+2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n+\n+        PR c++/80038\n+\t* cilk_common.c (expand_builtin_cilk_detach): Move pedigree\n+\toperations here.\n+\t* gimplify.c (gimplify_cilk_detach): New function.\n+\t(gimplify_call_expr, gimplify_modify_expr): Call it as needed.\n+\t* tree-core.h: Document EXPR_CILK_SPAWN.\n+\t* tree.h (EXPR_CILK_SPAWN): Define. \n+\n 2017-05-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-show-locus.c (layout::get_expanded_location): Rewrite"}, {"sha": "23f52389ee099a1623afa37a54188d61a0954a4f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1,3 +1,16 @@\n+2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n+\n+        PR c++/80038\n+\t* c-common.h (cilk_gimplify_call_params_in_spawned_fn): Remove\n+\tprototype.\n+\t(cilk_install_body_pedigree_operations): Likewise.\n+\t* cilk.c (cilk_set_spawn_marker): Mark functions that should be\n+\tdetatched.\n+\t(cilk_gimplify_call_params_in_spawned_fn): Remove.\n+\t(cilk_install_body_pedigree_operations): Likewise.\n+\t(gimplify_cilk_spawn): Add EXPR_STMT and CLEANUP_POINT_EXPR\n+\tunwrapping.\n+\n 2017-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/80534"}, {"sha": "138a0a675ac82d737b9eb8f14cc2f51c351af0b1", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1463,15 +1463,13 @@ extern bool is_cilkplus_vector_p (tree);\n extern tree insert_cilk_frame (tree);\n extern void cilk_init_builtins (void);\n extern int gimplify_cilk_spawn (tree *);\n-extern void cilk_gimplify_call_params_in_spawned_fn (tree *, gimple_seq *);\n extern void cilk_install_body_with_frame_cleanup (tree, tree, void *);\n extern bool cilk_detect_spawn_and_unwrap (tree *);\n extern bool cilk_set_spawn_marker (location_t, tree);\n extern tree build_cilk_sync (void);\n extern tree build_cilk_spawn (location_t, tree);\n extern tree make_cilk_frame (tree);\n extern tree create_cilk_function_exit (tree, bool, bool);\n-extern tree cilk_install_body_pedigree_operations (tree);\n extern void cilk_outline (tree, tree *, void *);\n extern bool contains_cilk_spawn_stmt (tree);\n extern tree cilk_for_number_of_iterations (tree);"}, {"sha": "1ae75d294ff6bd9a53c8b63c2dd28a10be981bdf", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -280,10 +280,7 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n \t\t && cilk_detect_spawn_and_unwrap (expr_p));\n \n       if (!seen_error ())\n-\t{\n-\t  cilk_gimplify_call_params_in_spawned_fn (expr_p, pre_p);\n-\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\t}\n+        return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n       return GS_ERROR;\n \n     case MODIFY_EXPR:\n@@ -295,10 +292,7 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n \t     original expression (MODIFY/INIT/CALL_EXPR) is processes as\n \t     it is supposed to be.  */\n \t  && !seen_error ())\n-\t{\n-\t  cilk_gimplify_call_params_in_spawned_fn (expr_p, pre_p);\n-\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\t}\n+        return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n \n     default:;\n     }"}, {"sha": "e6df498e471a05d623d579e97e376720ce4808c1", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 10, "deletions": 92, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -109,6 +109,10 @@ cilk_set_spawn_marker (location_t loc, tree fcall)\n   else\n     {\n       cfun->calls_cilk_spawn = true;\n+      if (TREE_CODE (fcall) == CALL_EXPR)\n+        EXPR_CILK_SPAWN (fcall) = 1;\n+      else /* TREE_CODE (fcall) == TARGET_EXPR */\n+        EXPR_CILK_SPAWN (TREE_OPERAND (fcall, 1)) = 1;\n       return true;\n     }\n }\n@@ -775,37 +779,6 @@ create_cilk_wrapper (tree exp, tree *args_out)\n   return fndecl;\n }\n \n-/* Gimplify all the parameters for the Spawned function.  *EXPR_P can be a\n-   CALL_EXPR, INIT_EXPR, MODIFY_EXPR or TARGET_EXPR.  *PRE_P and *POST_P are\n-   gimple sequences from the caller of gimplify_cilk_spawn.  */\n-\n-void\n-cilk_gimplify_call_params_in_spawned_fn (tree *expr_p, gimple_seq *pre_p)\n-{\n-  int ii = 0;\n-  tree *fix_parm_expr = expr_p;\n-\n-  /* Remove CLEANUP_POINT_EXPR and EXPR_STMT from *spawn_p.  */\n-  while (TREE_CODE (*fix_parm_expr) == CLEANUP_POINT_EXPR\n-\t || TREE_CODE (*fix_parm_expr) == EXPR_STMT)\n-    *fix_parm_expr = TREE_OPERAND (*fix_parm_expr, 0);\n-\n-  if ((TREE_CODE (*expr_p) == INIT_EXPR)\n-      || (TREE_CODE (*expr_p) == TARGET_EXPR)\n-      || (TREE_CODE (*expr_p) == MODIFY_EXPR))\n-    fix_parm_expr = &TREE_OPERAND (*expr_p, 1);\n-\n-  if (TREE_CODE (*fix_parm_expr) == CALL_EXPR)\n-    {\n-      /* Cilk outlining assumes GENERIC bodies, avoid leaking SSA names\n-         via parameters.  */\n-      for (ii = 0; ii < call_expr_nargs (*fix_parm_expr); ii++)\n-\tgimplify_arg (&CALL_EXPR_ARG (*fix_parm_expr, ii), pre_p,\n-\t\t      EXPR_LOCATION (*fix_parm_expr), false);\n-    }\n-}\n-\n-\n /* Transform *SPAWN_P, a spawned CALL_EXPR, to gimple.  *SPAWN_P can be a\n    CALL_EXPR, INIT_EXPR or MODIFY_EXPR.  Returns GS_OK if everything is fine,\n    and GS_UNHANDLED, otherwise.  */\n@@ -823,6 +796,12 @@ gimplify_cilk_spawn (tree *spawn_p)\n \n   cfun->calls_cilk_spawn = 1;\n   cfun->is_cilk_function = 1;\n+\n+  /* Remove CLEANUP_POINT_EXPR and EXPR_STMT from *spawn_p.  */\n+  while (TREE_CODE (expr) == CLEANUP_POINT_EXPR\n+         || TREE_CODE (expr) == EXPR_STMT)\n+    expr = TREE_OPERAND (expr, 0);\n+\n   new_args = NULL;\n   function = create_cilk_wrapper (expr, &new_args);\n \n@@ -889,67 +868,6 @@ make_cilk_frame (tree fn)\n   return decl;\n }\n \n-/* Returns a STATEMENT_LIST with all the pedigree operations required for\n-   install body with frame cleanup functions.  FRAME_PTR is the pointer to\n-   __cilkrts_stack_frame created by make_cilk_frame.  */\n-\n-tree\n-cilk_install_body_pedigree_operations (tree frame_ptr)\n-{\n-  tree body_list = alloc_stmt_list ();\n-  tree enter_frame = build_call_expr (cilk_enter_fast_fndecl, 1, frame_ptr); \n-  append_to_statement_list (enter_frame, &body_list);\n-  \n-  tree parent = cilk_arrow (frame_ptr, CILK_TI_FRAME_PARENT, 0);\n-  tree worker = cilk_arrow (frame_ptr, CILK_TI_FRAME_WORKER, 0);\n-\n-  tree pedigree = cilk_arrow (frame_ptr, CILK_TI_FRAME_PEDIGREE, 0);\n-  tree pedigree_rank = cilk_dot (pedigree, CILK_TI_PEDIGREE_RANK, 0);\n-  tree parent_pedigree = cilk_dot (pedigree, CILK_TI_PEDIGREE_PARENT, 0);\n-  tree pedigree_parent = cilk_arrow (parent, CILK_TI_FRAME_PEDIGREE, 0);\n-  tree pedigree_parent_rank = cilk_dot (pedigree_parent, \n-\t\t\t\t\tCILK_TI_PEDIGREE_RANK, 0);\n-  tree pedigree_parent_parent = cilk_dot (pedigree_parent, \n-\t\t\t\t     CILK_TI_PEDIGREE_PARENT, 0);\n-  tree worker_pedigree = cilk_arrow (worker, CILK_TI_WORKER_PEDIGREE, 1);\n-  tree w_pedigree_rank = cilk_dot (worker_pedigree, CILK_TI_PEDIGREE_RANK, 0);\n-  tree w_pedigree_parent = cilk_dot (worker_pedigree, \n-\t\t\t\t     CILK_TI_PEDIGREE_PARENT, 0);\n-\n-  /* sf.pedigree.rank = worker->pedigree.rank.  */\n-  tree exp1 = build2 (MODIFY_EXPR, void_type_node, pedigree_rank,\n-\t\t     w_pedigree_rank);\n-  append_to_statement_list (exp1, &body_list);\n-\n-  /* sf.pedigree.parent = worker->pedigree.parent.  */\n-  exp1 = build2 (MODIFY_EXPR, void_type_node, parent_pedigree,\n-\t\t w_pedigree_parent);\n-  append_to_statement_list (exp1, &body_list);\n-\n-  /* sf.call_parent->pedigree.rank = worker->pedigree.rank.  */\n-  exp1 = build2 (MODIFY_EXPR, void_type_node, pedigree_parent_rank,\n-\t\t w_pedigree_rank);\n-  append_to_statement_list (exp1, &body_list);\n-\n-  /* sf.call_parent->pedigree.parent = worker->pedigree.parent.  */\n-  exp1 = build2 (MODIFY_EXPR, void_type_node, pedigree_parent_parent,\n-\t\t w_pedigree_parent);\n-  append_to_statement_list (exp1, &body_list);\n-\n-  /* sf->worker.pedigree.rank = 0.  */\n-  exp1 = build2 (MODIFY_EXPR, void_type_node, w_pedigree_rank, \n-\t\t build_zero_cst (uint64_type_node));\n-  append_to_statement_list (exp1, &body_list);\n-\n-  /* sf->pedigree.parent = &sf->pedigree.  */\n-  exp1 = build2 (MODIFY_EXPR, void_type_node, w_pedigree_parent,\n-\t\t build1 (ADDR_EXPR,\n-\t\t\t build_pointer_type (cilk_pedigree_type_decl),\n-\t\t\t pedigree));\n-  append_to_statement_list (exp1, &body_list);\n-  return body_list;\n-}\n-\n /* Add a new variable, VAR to a variable list in WD->DECL_MAP.  HOW indicates\n    whether the variable is previously defined, currently defined, or a variable \n    that is being written to.  */"}, {"sha": "3c26eac90508a5fdb6133001848eb95b31cdfe12", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1,3 +1,9 @@\n+2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n+\n+        PR c++/80038\n+\t* c-gimplify.c (c_gimplify_expr): Remove calls to\n+\tcilk_gimplifY_call_params_in_spawned_fn.\n+\n 2017-04-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-parser.c (c_parser_struct_or_union_specifier): Add fix-it"}, {"sha": "6f9909c6396ef77b005c30c89a24984aab5b8856", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -14215,14 +14215,8 @@ cilk_install_body_with_frame_cleanup (tree fndecl, tree body, void *w)\n   add_local_decl (cfun, frame);\n   \n   DECL_SAVED_TREE (fndecl) = list;\n-  tree frame_ptr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (frame)), \n-\t\t\t   frame);\n-  tree body_list = cilk_install_body_pedigree_operations (frame_ptr);\n-  gcc_assert (TREE_CODE (body_list) == STATEMENT_LIST);\n-  \n-  tree detach_expr = build_call_expr (cilk_detach_fndecl, 1, frame_ptr); \n-  append_to_statement_list (detach_expr, &body_list);\n \n+  tree body_list = alloc_stmt_list ();\n   cilk_outline (fndecl, &body, (struct wrapper_data *) w);\n   body = fold_build_cleanup_point_expr (void_type_node, body);\n "}, {"sha": "9cbe03f8e02abc010a399eb28ab5829aab1cd98a", "filename": "gcc/cilk-common.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcilk-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcilk-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcilk-common.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -365,11 +365,60 @@ expand_builtin_cilk_detach (tree exp)\n   tree worker = cilk_dot (fptr, CILK_TI_FRAME_WORKER, 0);\n   tree tail = cilk_arrow (worker, CILK_TI_WORKER_TAIL, 1);\n \n+  tree faddr = build1 (ADDR_EXPR, cilk_frame_ptr_type_decl, fptr);\n+  tree enter_frame = build_call_expr (cilk_enter_fast_fndecl, 1, faddr);\n+  expand_expr (enter_frame, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  tree pedigree = cilk_dot (fptr, CILK_TI_FRAME_PEDIGREE, 0);\n+  tree pedigree_rank = cilk_dot (pedigree, CILK_TI_PEDIGREE_RANK, 0);\n+  tree parent_pedigree = cilk_dot (pedigree, CILK_TI_PEDIGREE_PARENT, 0);\n+  tree pedigree_parent = cilk_arrow (parent, CILK_TI_FRAME_PEDIGREE, 0);\n+  tree pedigree_parent_rank = cilk_dot (pedigree_parent,\n+\t\t\t\t\tCILK_TI_PEDIGREE_RANK, 0);\n+  tree pedigree_parent_parent = cilk_dot (pedigree_parent,\n+\t\t\t\t     CILK_TI_PEDIGREE_PARENT, 0);\n+  tree worker_pedigree = cilk_arrow (worker, CILK_TI_WORKER_PEDIGREE, 1);\n+  tree w_pedigree_rank = cilk_dot (worker_pedigree, CILK_TI_PEDIGREE_RANK, 0);\n+  tree w_pedigree_parent = cilk_dot (worker_pedigree,\n+\t\t\t\t     CILK_TI_PEDIGREE_PARENT, 0);\n+\n   rtx wreg = expand_expr (worker, NULL_RTX, Pmode, EXPAND_NORMAL);\n   if (GET_CODE (wreg) != REG)\n     wreg = copy_to_reg (wreg);\n   rtx preg = expand_expr (parent, NULL_RTX, Pmode, EXPAND_NORMAL);\n \n+  /* sf.pedigree.rank = worker->pedigree.rank.  */\n+  tree exp1 = build2 (MODIFY_EXPR, void_type_node, pedigree_rank,\n+\t\t     w_pedigree_rank);\n+  expand_expr (exp1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  /* sf.pedigree.parent = worker->pedigree.parent.  */\n+  exp1 = build2 (MODIFY_EXPR, void_type_node, parent_pedigree,\n+\t\t w_pedigree_parent);\n+  expand_expr (exp1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  /* sf.call_parent->pedigree.rank = worker->pedigree.rank.  */\n+  exp1 = build2 (MODIFY_EXPR, void_type_node, pedigree_parent_rank,\n+\t\t w_pedigree_rank);\n+  expand_expr (exp1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  /* sf.call_parent->pedigree.parent = worker->pedigree.parent.  */\n+  exp1 = build2 (MODIFY_EXPR, void_type_node, pedigree_parent_parent,\n+\t\t w_pedigree_parent);\n+  expand_expr (exp1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  /* sf->worker.pedigree.rank = 0.  */\n+  exp1 = build2 (MODIFY_EXPR, void_type_node, w_pedigree_rank,\n+\t\t build_zero_cst (uint64_type_node));\n+  expand_expr (exp1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  /* sf->pedigree.parent = &sf->pedigree.  */\n+  exp1 = build2 (MODIFY_EXPR, void_type_node, w_pedigree_parent,\n+\t\t build1 (ADDR_EXPR,\n+\t\t\t build_pointer_type (cilk_pedigree_type_decl),\n+\t\t\t pedigree));\n+  expand_expr (exp1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n   /* TMP <- WORKER.TAIL\n     *TMP <- PARENT\n      TMP <- TMP + 1"}, {"sha": "183f7365a5990bb5240616465ad74f888433d4c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1,3 +1,13 @@\n+2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n+\n+        PR c++/80038\n+\t* cp-cilkplus.c (cilk_install_body_with_frame_cleanup): Don't\n+\tadd pedigree operation and detach call here.\n+\t* cp-gimplify.c (cp_gimplify_expr): Remove the calls to\n+\tcilk_cp_gimplify_call_params_in_spawned_fn.\n+\t(cilk_cp_gimplify_call_params_in_spawned_fn): Remove function.\n+\t* semantics.c (simplify_aggr_init_expr): Copy EXPR_CILK_SPAWN.\n+\n 2017-04-29  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* parser.c (cp_parser_member_declaration): Add fix-it hints for"}, {"sha": "7c664482371539b613993f7e2980ddb731d2d273", "filename": "gcc/cp/cp-cilkplus.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcp%2Fcp-cilkplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcp%2Fcp-cilkplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-cilkplus.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -223,11 +223,7 @@ cilk_install_body_with_frame_cleanup (tree fndecl, tree orig_body, void *wd)\n   location_t loc = EXPR_LOCATION (orig_body);\n   tree list = alloc_stmt_list ();\n   DECL_SAVED_TREE (fndecl) = list;\n-  tree fptr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (frame)), frame);\n-  tree body = cilk_install_body_pedigree_operations (fptr);\n-  gcc_assert (TREE_CODE (body) == STATEMENT_LIST);\n-  tree detach_expr = build_call_expr (cilk_detach_fndecl, 1, fptr);\n-  append_to_statement_list (detach_expr, &body);\n+  tree body = alloc_stmt_list ();\n   cilk_outline (fndecl, &orig_body, (struct wrapper_data *) wd);\n   append_to_statement_list (orig_body, &body);\n   if (flag_exceptions)"}, {"sha": "de62414ec3c975b376f8dc5f52d4d0fe070ef21f", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -88,25 +88,6 @@ finish_bc_block (tree *block, enum bc_t bc, tree label)\n   DECL_CHAIN (label) = NULL_TREE;\n }\n \n-/* This function is a wrapper for cilk_gimplify_call_params_in_spawned_fn.\n-   *EXPR_P can be a CALL_EXPR, INIT_EXPR, MODIFY_EXPR, AGGR_INIT_EXPR or\n-   TARGET_EXPR.  *PRE_P and *POST_P are gimple sequences from the caller\n-   of gimplify_cilk_spawn.  */\n-\n-static void\n-cilk_cp_gimplify_call_params_in_spawned_fn (tree *expr_p, gimple_seq *pre_p,\n-\t\t\t\t\t    gimple_seq *post_p)\n-{\n-  int ii = 0;\n-\n-  cilk_gimplify_call_params_in_spawned_fn (expr_p, pre_p);\n-  if (TREE_CODE (*expr_p) == AGGR_INIT_EXPR)\n-    for (ii = 0; ii < aggr_init_expr_nargs (*expr_p); ii++)\n-      gimplify_expr (&AGGR_INIT_EXPR_ARG (*expr_p, ii), pre_p, post_p,\n-\t\t     is_gimple_reg, fb_rvalue);\n-}\n-\n-\n /* Get the LABEL_EXPR to represent a break or continue statement\n    in the current block scope.  BC indicates which.  */\n \n@@ -647,11 +628,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       if (fn_contains_cilk_spawn_p (cfun))\n \t{\n \t  if (cilk_cp_detect_spawn_and_unwrap (expr_p))\n-\t    {\n-\t      cilk_cp_gimplify_call_params_in_spawned_fn (expr_p,\n-\t\t\t\t\t\t\t  pre_p, post_p);\n-\t      return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\t    }\n+\t    return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n \t  if (seen_error () && contains_cilk_spawn_stmt (*expr_p))\n \t    return GS_ERROR;\n \t}\n@@ -666,10 +643,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \tif (fn_contains_cilk_spawn_p (cfun)\n \t    && cilk_cp_detect_spawn_and_unwrap (expr_p)\n \t    && !seen_error ())\n-\t  {\n-\t    cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n-\t    return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\t  }\n+\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n \t/* If the back end isn't clever enough to know that the lhs and rhs\n \t   types are the same, add an explicit conversion.  */\n \ttree op0 = TREE_OPERAND (*expr_p, 0);\n@@ -787,20 +761,14 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t\t && cilk_cp_detect_spawn_and_unwrap (expr_p));\n \n       if (!seen_error ())\n-\t{\n-\t  cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n-\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\t}\n+        return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n       return GS_ERROR;\n \n     case CALL_EXPR:\n       if (fn_contains_cilk_spawn_p (cfun)\n \t  && cilk_cp_detect_spawn_and_unwrap (expr_p)\n \t  && !seen_error ())\n-\t{\n-\t  cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n-\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\t}\n+        return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n       ret = GS_OK;\n       if (!CALL_EXPR_FN (*expr_p))\n \t/* Internal function call.  */;"}, {"sha": "4db2462734dc093d80f7e3e1b2e99354e9e6fb3e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -4103,6 +4103,8 @@ simplify_aggr_init_expr (tree *tp)\n     = CALL_EXPR_OPERATOR_SYNTAX (aggr_init_expr);\n   CALL_EXPR_ORDERED_ARGS (call_expr) = CALL_EXPR_ORDERED_ARGS (aggr_init_expr);\n   CALL_EXPR_REVERSE_ARGS (call_expr) = CALL_EXPR_REVERSE_ARGS (aggr_init_expr);\n+  /* Preserve CILK_SPAWN flag.  */\n+  EXPR_CILK_SPAWN (call_expr) = EXPR_CILK_SPAWN (aggr_init_expr);\n \n   if (style == ctor)\n     {"}, {"sha": "fd27eb1523f22f28f0c512d38a3ed54801438d0e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -3071,6 +3071,19 @@ maybe_fold_stmt (gimple_stmt_iterator *gsi)\n   return fold_stmt (gsi);\n }\n \n+/* Add a gimple call to __builtin_cilk_detach to GIMPLE sequence PRE_P,\n+   with the pointer to the proper cilk frame.  */\n+static void\n+gimplify_cilk_detach (gimple_seq *pre_p)\n+{\n+  tree frame = cfun->cilk_frame_decl;\n+  tree ptrf = build1 (ADDR_EXPR, cilk_frame_ptr_type_decl,\n+\t\t      frame);\n+  gcall *detach = gimple_build_call (cilk_detach_fndecl, 1,\n+\t\t\t\t     ptrf);\n+  gimplify_seq_add_stmt(pre_p, detach);\n+}\n+\n /* Gimplify the CALL_EXPR node *EXPR_P into the GIMPLE sequence PRE_P.\n    WANT_VALUE is true if the result of the call is desired.  */\n \n@@ -3107,6 +3120,9 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t\t\tEXPR_LOCATION (*expr_p));\n \t  vargs.quick_push (CALL_EXPR_ARG (*expr_p, i));\n \t}\n+\n+      if (EXPR_CILK_SPAWN (*expr_p))\n+        gimplify_cilk_detach (pre_p);\n       gimple *call = gimple_build_call_internal_vec (ifn, vargs);\n       gimplify_seq_add_stmt (pre_p, call);\n       return GS_ALL_DONE;\n@@ -3338,6 +3354,8 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n       call = gimple_build_call_from_tree (*expr_p);\n       gimple_call_set_fntype (call, TREE_TYPE (fnptrtype));\n       notice_special_calls (call);\n+      if (EXPR_CILK_SPAWN (*expr_p))\n+        gimplify_cilk_detach (pre_p);\n       gimplify_seq_add_stmt (pre_p, call);\n       gsi = gsi_last (*pre_p);\n       maybe_fold_stmt (&gsi);\n@@ -5620,6 +5638,9 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t   SSA name w/o a definition.  We may have uses in the GIMPLE IL.\n \t   ???  This doesn't make it a default-def.  */\n \tSSA_NAME_DEF_STMT (*to_p) = gimple_build_nop ();\n+\n+      if (EXPR_CILK_SPAWN (*from_p))\n+        gimplify_cilk_detach (pre_p);\n       assign = call_stmt;\n     }\n   else"}, {"sha": "62304fcc3a1a92fe07fc0b2a80d976bcb3043e05", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1,3 +1,8 @@\n+2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n+\n+        PR c++/80038\n+\t* lto-lang.c (lto_init): Set in_lto_p earlier.\n+\n 2017-04-12  Richard Biener  <rguenther@suse.de>\n \tBernd Edlinger  <bernd.edlinger@hotmail.de>\n "}, {"sha": "52ab2a8cb812a0b33d6dc0cd21de1bec45541b8f", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1201,6 +1201,9 @@ lto_init (void)\n {\n   int i;\n \n+  /* Initialize LTO-specific data structures.  */\n+  in_lto_p = true;\n+\n   /* We need to generate LTO if running in WPA mode.  */\n   flag_generate_lto = (flag_wpa != NULL);\n \n@@ -1283,9 +1286,6 @@ lto_init (void)\n       }\n #undef NAME_TYPE\n \n-  /* Initialize LTO-specific data structures.  */\n-  in_lto_p = true;\n-\n   return true;\n }\n "}, {"sha": "205c083e3be0e756323e344aeafaf47221e37904", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1,3 +1,8 @@\n+2017-05-01  Xi Ruoyao  <ryxi@stu.xidian.edu.cn>\n+\n+\tPR c++/80038\n+\t* g++.dg/cilk-plus/CK/pr80038.cc: New test.\n+\n 2017-05-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/Wmissing-braces-fixits.c: Update expected output to"}, {"sha": "85990e5a0076d75e152c625eba1d2bbe2abfd40b", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/pr80038.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr80038.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr80038.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr80038.cc?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target cilkplus_runtime } */\n+\n+#include <unistd.h>\n+extern \"C\" {\n+  extern int __cilkrts_set_param (const char *, const char *);\n+}\n+\n+int objcnt = 0;\n+\n+struct foo\n+{\n+  int live;\n+  foo ()\n+    { objcnt++; }\n+  foo (const foo &)\n+    { objcnt++; }\n+  ~foo ()\n+    { objcnt--; }\n+};\n+\n+void\n+spawnee (foo f)\n+{\n+  usleep(2000);\n+  /* Now both my_test::f and spawnee::f should be alive.  */\n+  if (objcnt != 2)\n+    __builtin_abort ();\n+}\n+\n+void\n+my_test ()\n+{\n+  foo f;\n+  _Cilk_spawn spawnee (f);\n+  _Cilk_sync ;\n+}\n+\n+int\n+main ()\n+{\n+  if (__cilkrts_set_param (\"nworkers\", \"2\") != 0)\n+    __builtin_abort ();\n+\n+  my_test ();\n+}"}, {"sha": "c76fc7bc8efe58dc70e32ed4dd82e591a061afe2", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -1194,6 +1194,10 @@ struct GTY(()) tree_base {\n        SSA_NAME_OCCURS_IN_ABNORMAL_PHI in\n            SSA_NAME\n \n+       EXPR_CILK_SPAWN in\n+           CALL_EXPR\n+           AGGR_INIT_EXPR\n+\n    used_flag:\n \n        TREE_USED in"}, {"sha": "3bca90a38a50d8292132ef2133be7193b86ed7bc", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815d9cc6641a3eeb6734a98f64ea8b183a495ee5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=815d9cc6641a3eeb6734a98f64ea8b183a495ee5", "patch": "@@ -894,6 +894,12 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* Cilk keywords accessors.  */\n #define CILK_SPAWN_FN(NODE) TREE_OPERAND (CILK_SPAWN_STMT_CHECK (NODE), 0)\n \n+/* If this is true, we should insert a __cilk_detach call just before\n+   this function call.  */\n+#define EXPR_CILK_SPAWN(NODE) \\\n+  (tree_check2 (NODE, __FILE__, __LINE__, __FUNCTION__, \\\n+                CALL_EXPR, AGGR_INIT_EXPR)->base.u.bits.unsigned_flag)\n+\n /* In a RESULT_DECL, PARM_DECL and VAR_DECL, means that it is\n    passed by invisible reference (and the TREE_TYPE is a pointer to the true\n    type).  */"}]}