{"sha": "3fa4fad4974c7c1e39ca387b9e55ffb3607879a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhNGZhZDQ5NzRjN2MxZTM5Y2EzODdiOWU1NWZmYjM2MDc4NzlhMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-20T12:37:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-20T12:37:14Z"}, "message": "gimple.h (gimple_phi_result): Add gphi * overload.\n\n2017-07-20  Richard Biener  <rguenther@suse.de>\n\n\t* gimple.h (gimple_phi_result): Add gphi * overload.\n\t(gimple_phi_result_ptr): Likewise.\n\t(gimple_phi_arg): Likewise.  Adjust index assert to only\n\tallow actual argument accesses rather than all slots available\n\tby capacity.\n\t(gimple_phi_arg_def): Add gphi * overload.\n\t* tree-phinodes.c (make_phi_node): Initialize only actual\n\targuments.\n\t(resize_phi_node): Clear memory not covered by old node,\n\tdo not initialize excess argument slots.\n\t(reserve_phi_args_for_new_edge): Initialize new argument slot\n\tcompletely.\n\nFrom-SVN: r250385", "tree": {"sha": "057d05e0ccff4798133bb024656d689b2fda464f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/057d05e0ccff4798133bb024656d689b2fda464f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73c4b4df26d90486debc267cd61c55ab350de4e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c4b4df26d90486debc267cd61c55ab350de4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c4b4df26d90486debc267cd61c55ab350de4e0"}], "stats": {"total": 74, "additions": 55, "deletions": 19}, "files": [{"sha": "ff8417971bcc03bc03ddaf5eb71e3d074038e766", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fa4fad4974c7c1e39ca387b9e55ffb3607879a3", "patch": "@@ -1,3 +1,18 @@\n+2017-07-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple.h (gimple_phi_result): Add gphi * overload.\n+\t(gimple_phi_result_ptr): Likewise.\n+\t(gimple_phi_arg): Likewise.  Adjust index assert to only\n+\tallow actual argument accesses rather than all slots available\n+\tby capacity.\n+\t(gimple_phi_arg_def): Add gphi * overload.\n+\t* tree-phinodes.c (make_phi_node): Initialize only actual\n+\targuments.\n+\t(resize_phi_node): Clear memory not covered by old node,\n+\tdo not initialize excess argument slots.\n+\t(reserve_phi_args_for_new_edge): Initialize new argument slot\n+\tcompletely.\n+\n 2017-07-20  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/81388"}, {"sha": "2d81eedab4ade2b63e85ce76b04ef0ba1027ef87", "filename": "gcc/gimple.h", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3fa4fad4974c7c1e39ca387b9e55ffb3607879a3", "patch": "@@ -4307,20 +4307,32 @@ gimple_phi_num_args (const gimple *gs)\n \n /* Return the SSA name created by GIMPLE_PHI GS.  */\n \n+static inline tree\n+gimple_phi_result (const gphi *gs)\n+{\n+  return gs->result;\n+}\n+\n static inline tree\n gimple_phi_result (const gimple *gs)\n {\n   const gphi *phi_stmt = as_a <const gphi *> (gs);\n-  return phi_stmt->result;\n+  return gimple_phi_result (phi_stmt);\n }\n \n /* Return a pointer to the SSA name created by GIMPLE_PHI GS.  */\n \n+static inline tree *\n+gimple_phi_result_ptr (gphi *gs)\n+{\n+  return &gs->result;\n+}\n+\n static inline tree *\n gimple_phi_result_ptr (gimple *gs)\n {\n   gphi *phi_stmt = as_a <gphi *> (gs);\n-  return &phi_stmt->result;\n+  return gimple_phi_result_ptr (phi_stmt);\n }\n \n /* Set RESULT to be the SSA name created by GIMPLE_PHI PHI.  */\n@@ -4337,12 +4349,18 @@ gimple_phi_set_result (gphi *phi, tree result)\n /* Return the PHI argument corresponding to incoming edge INDEX for\n    GIMPLE_PHI GS.  */\n \n+static inline struct phi_arg_d *\n+gimple_phi_arg (gphi *gs, unsigned index)\n+{\n+  gcc_gimple_checking_assert (index < gs->nargs);\n+  return &(gs->args[index]);\n+}\n+\n static inline struct phi_arg_d *\n gimple_phi_arg (gimple *gs, unsigned index)\n {\n   gphi *phi_stmt = as_a <gphi *> (gs);\n-  gcc_gimple_checking_assert (index < phi_stmt->capacity);\n-  return &(phi_stmt->args[index]);\n+  return gimple_phi_arg (phi_stmt, index);\n }\n \n /* Set PHIARG to be the argument corresponding to incoming edge INDEX\n@@ -4376,6 +4394,12 @@ phi_nodes_ptr (basic_block bb)\n \n /* Return the tree operand for argument I of PHI node GS.  */\n \n+static inline tree\n+gimple_phi_arg_def (gphi *gs, size_t index)\n+{\n+  return gimple_phi_arg (gs, index)->def;\n+}\n+\n static inline tree\n gimple_phi_arg_def (gimple *gs, size_t index)\n {"}, {"sha": "1c2e5c555ab4421bae8156ab27ab1f57b72b6c69", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa4fad4974c7c1e39ca387b9e55ffb3607879a3/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=3fa4fad4974c7c1e39ca387b9e55ffb3607879a3", "patch": "@@ -190,7 +190,7 @@ make_phi_node (tree var, int len)\n   else\n     gimple_phi_set_result (phi, make_ssa_name (var, phi));\n \n-  for (i = 0; i < capacity; i++)\n+  for (i = 0; i < len; i++)\n     {\n       use_operand_p  imm;\n \n@@ -248,6 +248,10 @@ resize_phi_node (gphi *phi, size_t len)\n   new_phi = allocate_phi_node (len);\n \n   memcpy (new_phi, phi, old_size);\n+  memset ((char *)new_phi + old_size, 0,\n+\t  (sizeof (struct gphi)\n+\t   - sizeof (struct phi_arg_d)\n+\t   + sizeof (struct phi_arg_d) * len) - old_size);\n \n   for (i = 0; i < gimple_phi_num_args (new_phi); i++)\n     {\n@@ -260,18 +264,6 @@ resize_phi_node (gphi *phi, size_t len)\n \n   new_phi->capacity = len;\n \n-  for (i = gimple_phi_num_args (new_phi); i < len; i++)\n-    {\n-      use_operand_p imm;\n-\n-      gimple_phi_arg_set_location (new_phi, i, UNKNOWN_LOCATION);\n-      imm = gimple_phi_arg_imm_use_ptr (new_phi, i);\n-      imm->use = gimple_phi_arg_def_ptr (new_phi, i);\n-      imm->prev = NULL;\n-      imm->next = NULL;\n-      imm->loc.stmt = new_phi;\n-    }\n-\n   return new_phi;\n }\n \n@@ -300,17 +292,22 @@ reserve_phi_args_for_new_edge (basic_block bb)\n \t  stmt = new_phi;\n \t}\n \n+      stmt->nargs++;\n+\n       /* We represent a \"missing PHI argument\" by placing NULL_TREE in\n \t the corresponding slot.  If PHI arguments were added\n \t immediately after an edge is created, this zeroing would not\n \t be necessary, but unfortunately this is not the case.  For\n \t example, the loop optimizer duplicates several basic blocks,\n \t redirects edges, and then fixes up PHI arguments later in\n \t batch.  */\n+      use_operand_p imm = gimple_phi_arg_imm_use_ptr (stmt, len - 1);\n+      imm->use = gimple_phi_arg_def_ptr (stmt, len - 1);\n+      imm->prev = NULL;\n+      imm->next = NULL;\n+      imm->loc.stmt = stmt;\n       SET_PHI_ARG_DEF (stmt, len - 1, NULL_TREE);\n       gimple_phi_arg_set_location (stmt, len - 1, UNKNOWN_LOCATION);\n-\n-      stmt->nargs++;\n     }\n }\n "}]}