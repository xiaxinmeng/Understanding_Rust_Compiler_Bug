{"sha": "c471289ac8af8608dab424693d9411be6042ded6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3MTI4OWFjOGFmODYwOGRhYjQyNDY5M2Q5NDExYmU2MDQyZGVkNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-12T08:11:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-12T08:11:11Z"}, "message": "i386.c (ix86_legitimate_combined_insn): Reject combined insn if the alignment of vector mode memory operand is less...\n\n\t* config/i386/i386.c (ix86_legitimate_combined_insn): Reject\n\tcombined insn if the alignment of vector mode memory operand\n\tis less than ssememalign.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse-1.c (swizzle): Assume that a is\n\taligned to 64 bits.\n\nFrom-SVN: r230215", "tree": {"sha": "dfcac8342e9525146193da3073ee6dfceaf8eb3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfcac8342e9525146193da3073ee6dfceaf8eb3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c471289ac8af8608dab424693d9411be6042ded6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c471289ac8af8608dab424693d9411be6042ded6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c471289ac8af8608dab424693d9411be6042ded6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c471289ac8af8608dab424693d9411be6042ded6/comments", "author": null, "committer": null, "parents": [{"sha": "61fb1f74fe6402b72c227181833337acc131f205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fb1f74fe6402b72c227181833337acc131f205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fb1f74fe6402b72c227181833337acc131f205"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "815bb089575c905c22e779b9b972a802c425c315", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471289ac8af8608dab424693d9411be6042ded6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471289ac8af8608dab424693d9411be6042ded6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c471289ac8af8608dab424693d9411be6042ded6", "patch": "@@ -1,12 +1,18 @@\n+2015-11-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_legitimate_combined_insn): Reject\n+\tcombined insn if the alignment of vector mode memory operand\n+\tis less than ssememalign.\n+\n 2015-11-12  Tom de Vries  <tom@codesourcery.com>\n \n-\t* gen-pass-instances.awk (handle_line): Print parentheses and pass_name\n-\texplicitly.\n+\t* gen-pass-instances.awk (handle_line): Print parentheses and\n+\tpass_name explicitly.\n \n 2015-11-12  Tom de Vries  <tom@codesourcery.com>\n \n-\t* gen-pass-instances.awk (handle_line): Add pass_num, prefix and postfix\n-\tvars.\n+\t* gen-pass-instances.awk (handle_line): Add pass_num, prefix\n+\tand postfix vars.\n \n 2015-11-12  Tom de Vries  <tom@codesourcery.com>\n \n@@ -45,7 +51,7 @@\n \tMove Convert C1/(X*C2) into (C1/C2)/X to match.pd.\n \tMove Optimize (X & (-A)) / A where A is a power of 2, to\n \tX >> log2(A) to match.pd.\n-       \n+\n \t* match.pd (rdiv (rdiv:s @0 @1) @2): New simplifier.\n \t(rdiv @0 (rdiv:s @1 @2)): New simplifier.\n \t(div (convert? (bit_and @0 INTEGER_CST@1)) INTEGER_CST@2):"}, {"sha": "d048b19f3855d9fae9eb02b063bc6c3429d60153", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471289ac8af8608dab424693d9411be6042ded6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471289ac8af8608dab424693d9411be6042ded6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c471289ac8af8608dab424693d9411be6042ded6", "patch": "@@ -7236,11 +7236,12 @@ ix86_legitimate_combined_insn (rtx_insn *insn)\n \t  /* For pre-AVX disallow unaligned loads/stores where the\n \t     instructions don't support it.  */\n \t  if (!TARGET_AVX\n-\t      && VECTOR_MODE_P (GET_MODE (op))\n-\t      && misaligned_operand (op, GET_MODE (op)))\n+\t      && VECTOR_MODE_P (mode)\n+\t      && misaligned_operand (op, mode))\n \t    {\n-\t      int min_align = get_attr_ssememalign (insn);\n-\t      if (min_align == 0)\n+\t      unsigned int min_align = get_attr_ssememalign (insn);\n+\t      if (min_align == 0\n+\t\t  || MEM_ALIGN (op) < min_align)\n \t\treturn false;\n \t    }\n "}, {"sha": "a7326b56eacbe6cf3bf0a07f13ea6d7b95a3a646", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471289ac8af8608dab424693d9411be6042ded6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471289ac8af8608dab424693d9411be6042ded6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c471289ac8af8608dab424693d9411be6042ded6", "patch": "@@ -1,3 +1,8 @@\n+2015-11-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse-1.c (swizzle): Assume that a is\n+\taligned to 64 bits.\n+\n 2015-11-11  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.dg/pr65521.c: Fail on AIX."}, {"sha": "15d38f9d5dd8bdbddaaee0d1f6da1064591c3526", "filename": "gcc/testsuite/gcc.target/i386/sse-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c471289ac8af8608dab424693d9411be6042ded6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c471289ac8af8608dab424693d9411be6042ded6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-1.c?ref=c471289ac8af8608dab424693d9411be6042ded6", "patch": "@@ -14,8 +14,10 @@ typedef union\n void\n swizzle (const void *a, vector4_t * b, vector4_t * c)\n {\n-  b->v = _mm_loadl_pi (b->v, (__m64 *) a);\n-  c->v = _mm_loadl_pi (c->v, ((__m64 *) a) + 1);\n+  __m64 *t = __builtin_assume_aligned (a, 64);\n+\n+  b->v = _mm_loadl_pi (b->v, t);\n+  c->v = _mm_loadl_pi (c->v, t + 1);\n }\n \n /* While one legal rendering of each statement would be movaps;movlps;movaps,"}]}