{"sha": "88d599dcf67fd7be5c2a6bdd279bbd7e1ac7f7aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkNTk5ZGNmNjdmZDdiZTVjMmE2YmRkMjc5YmJkN2UxYWM3ZjdhYQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-12-13T14:07:26Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-12-13T14:07:26Z"}, "message": "life -> live; one favourite typo of mine.\n\nFrom-SVN: r182285", "tree": {"sha": "40dcf4bce7e31e0a1ffc5e9a2271291a37a22225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40dcf4bce7e31e0a1ffc5e9a2271291a37a22225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88d599dcf67fd7be5c2a6bdd279bbd7e1ac7f7aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d599dcf67fd7be5c2a6bdd279bbd7e1ac7f7aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d599dcf67fd7be5c2a6bdd279bbd7e1ac7f7aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d599dcf67fd7be5c2a6bdd279bbd7e1ac7f7aa/comments", "author": null, "committer": null, "parents": [{"sha": "f6dbed32690215c4495ab919fbdeb5bca922d025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6dbed32690215c4495ab919fbdeb5bca922d025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6dbed32690215c4495ab919fbdeb5bca922d025"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "295d6246a0e8158f02a53d896169af6c81de9366", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d599dcf67fd7be5c2a6bdd279bbd7e1ac7f7aa/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d599dcf67fd7be5c2a6bdd279bbd7e1ac7f7aa/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=88d599dcf67fd7be5c2a6bdd279bbd7e1ac7f7aa", "patch": "@@ -486,8 +486,8 @@ add_scope_conflicts_1 (basic_block bb, bitmap work, bool for_conflict)\n \t      && visit == visit_op)\n \t    {\n \t      /* If this is the first real instruction in this BB we need\n-\t         to add conflicts for everything life at this point now.\n-\t\t Unlike classical lifeness for named objects we can't\n+\t         to add conflicts for everything live at this point now.\n+\t\t Unlike classical liveness for named objects we can't\n \t\t rely on seeing a def/use of the names we're interested in.\n \t\t There might merely be indirect loads/stores.  We'd not add any\n \t\t conflicts for such partitions.  */\n@@ -517,15 +517,15 @@ add_scope_conflicts (void)\n   bool changed;\n   bitmap work = BITMAP_ALLOC (NULL);\n \n-  /* We approximate the life range of a stack variable by taking the first\n+  /* We approximate the live range of a stack variable by taking the first\n      mention of its name as starting point(s), and by the end-of-scope\n      death clobber added by gimplify as ending point(s) of the range.\n      This overapproximates in the case we for instance moved an address-taken\n      operation upward, without also moving a dereference to it upwards.\n      But it's conservatively correct as a variable never can hold values\n      before its name is mentioned at least once.\n \n-     We then do a mostly classical bitmap lifeness algorithm.  */\n+     We then do a mostly classical bitmap liveness algorithm.  */\n \n   FOR_ALL_BB (bb)\n     bb->aux = BITMAP_ALLOC (NULL);"}]}