{"sha": "065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY1YmJmZTZiZjhhNzA1YmNmYTVhNzM5NjU1OWFjNmUxNjYwZDdlNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-05-06T02:42:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-05-06T02:42:06Z"}, "message": "h8300.c (notice_update_cc): Use CC_SET_ZN and CC_SET_ZNV.\n\n        * h8300.c (notice_update_cc): Use CC_SET_ZN and CC_SET_ZNV.\n        (shift_one, shift_two): Set CC_NO_CARRY as needed.  Remove\n        references to CC_OVERFLOW_0.\n        (emit_a_shift): Similarly.\n        * h8300.h (CC_OVERFLOW_0): Remove.\n        * h8300.md: Use set_zn and set_znv for cc0 tracking.\n        (bCC): Restore the comparison is CC_OVERFLOW_UNUSABLE is set and\n        the comparison needs the overflow bits.\n\nFrom-SVN: r14020", "tree": {"sha": "1767ec0acf41db4573aa149590be8607125370f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1767ec0acf41db4573aa149590be8607125370f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6/comments", "author": null, "committer": null, "parents": [{"sha": "d116300be8faa3424f7ce009072201a698b89f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d116300be8faa3424f7ce009072201a698b89f58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d116300be8faa3424f7ce009072201a698b89f58"}], "stats": {"total": 168, "additions": 92, "deletions": 76}, "files": [{"sha": "77cb6ce9b36118122131f23c2f1840d897ec1d0a", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "patch": "@@ -1597,15 +1597,7 @@ notice_update_cc (body, insn)\n \tcc_status.value1 = 0;\n       break;\n \n-    case CC_SET:\n-      /* Insn sets the Z,N,V flags of CC to recog_operand[0].\n-\t C may or may not be set to 0 but that's ok\n-\t because alter_cond will change tests to use EQ/NE.  */\n-      CC_STATUS_INIT;\n-      cc_status.value1 = recog_operand[0];\n-      break;\n-\n-    case CC_SET_ZN_C0:\n+    case CC_SET_ZN:\n       /* Insn sets the Z,N flags of CC to recog_operand[0].\n \t The V flag is unusable.  The C flag may or may not be known but\n \t that's ok because alter_cond will change tests to use EQ/NE.  */\n@@ -1614,6 +1606,15 @@ notice_update_cc (body, insn)\n       cc_status.value1 = recog_operand[0];\n       break;\n \n+    case CC_SET_ZNV:\n+      /* Insn sets the Z,N,V flags of CC to recog_operand[0].\n+\t The C flag may or may not be known but that's ok because\n+\t alter_cond will change tests to use EQ/NE.  */\n+      CC_STATUS_INIT;\n+      cc_status.flags |= CC_NO_CARRY;\n+      cc_status.value1 = recog_operand[0];\n+      break;\n+\n     case CC_COMPARE:\n       /* The insn is a compare instruction.  */\n       CC_STATUS_INIT;\n@@ -1907,13 +1908,13 @@ static const struct shift_insn shift_one[2][3][3] =\n   {\n /* SHIFT_ASHIFT */\n     {\n-      { \"shll\\t%X0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n+      { \"shll\\t%X0\", CC_NO_CARRY },\n       { \"add.w\\t%T0,%T0\", CC_OVERFLOW_UNUSABLE | CC_NO_CARRY },\n       { \"add.w\\t%f0,%f0\\n\\taddx\\t%y0,%y0\\n\\taddx\\t%z0,%z0\", 0 }\n     },\n /* SHIFT_LSHIFTRT */\n     {\n-      { \"shlr\\t%X0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n+      { \"shlr\\t%X0\", CC_NO_CARRY },\n       { \"shlr\\t%t0\\n\\trotxr\\t%s0\", 0 },\n       { \"shlr\\t%z0\\n\\trotxr\\t%y0\\n\\trotxr\\t%x0\\n\\trotxr\\t%w0\", 0 }\n     },\n@@ -1928,15 +1929,15 @@ static const struct shift_insn shift_one[2][3][3] =\n   {\n /* SHIFT_ASHIFT */\n     {\n-      { \"shll.b\\t%X0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n-      { \"shll.w\\t%T0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n-      { \"shll.l\\t%S0\", CC_OVERFLOW_0 | CC_NO_CARRY }\n+      { \"shll.b\\t%X0\", CC_NO_CARRY },\n+      { \"shll.w\\t%T0\", CC_NO_CARRY },\n+      { \"shll.l\\t%S0\", CC_NO_CARRY }\n     },\n /* SHIFT_LSHIFTRT */\n     {\n-      { \"shlr.b\\t%X0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n-      { \"shlr.w\\t%T0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n-      { \"shlr.l\\t%S0\", CC_OVERFLOW_0 | CC_NO_CARRY }\n+      { \"shlr.b\\t%X0\", CC_NO_CARRY },\n+      { \"shlr.w\\t%T0\", CC_NO_CARRY },\n+      { \"shlr.l\\t%S0\", CC_NO_CARRY }\n     },\n /* SHIFT_ASHIFTRT */\n     {\n@@ -1951,15 +1952,15 @@ static const struct shift_insn shift_two[3][3] =\n {\n /* SHIFT_ASHIFT */\n     {\n-      { \"shll.b\\t#2,%X0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n-      { \"shll.w\\t#2,%T0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n-      { \"shll.l\\t#2,%S0\", CC_OVERFLOW_0 | CC_NO_CARRY }\n+      { \"shll.b\\t#2,%X0\", CC_NO_CARRY },\n+      { \"shll.w\\t#2,%T0\", CC_NO_CARRY },\n+      { \"shll.l\\t#2,%S0\", CC_NO_CARRY }\n     },\n /* SHIFT_LSHIFTRT */\n     {\n-      { \"shlr.b\\t#2,%X0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n-      { \"shlr.w\\t#2,%T0\", CC_OVERFLOW_0 | CC_NO_CARRY },\n-      { \"shlr.l\\t#2,%S0\", CC_OVERFLOW_0 | CC_NO_CARRY }\n+      { \"shlr.b\\t#2,%X0\", CC_NO_CARRY },\n+      { \"shlr.w\\t#2,%T0\", CC_NO_CARRY },\n+      { \"shlr.l\\t#2,%S0\", CC_NO_CARRY }\n     },\n /* SHIFT_ASHIFTRT */\n     {\n@@ -2658,7 +2659,7 @@ emit_a_shift (insn, operands)\n \t\t    sprintf (insn_buf, \"and #%d,%%X0\",\n \t\t\t     mask, n);\n \t\t    cc_status.value1 = operands[0];\n-\t\t    cc_status.flags |= CC_OVERFLOW_0 | CC_NO_CARRY;\n+\t\t    cc_status.flags |= CC_NO_CARRY;\n \t\t    break;\n \t\t  case HImode:\n \t\t    sprintf (insn_buf, \"and #%d,%%s0\\n\\tand #%d,%%t0\",\n@@ -2674,7 +2675,7 @@ emit_a_shift (insn, operands)\n \t\t\t \"bwl\"[shift_mode], mask,\n \t\t\t mode == QImode ? 'X' : mode == HImode ? 'T' : 'S');\n \t\tcc_status.value1 = operands[0];\n-\t\tcc_status.flags |= CC_OVERFLOW_0 | CC_NO_CARRY;\n+\t\tcc_status.flags |= CC_NO_CARRY;\n \t      }\n \t    output_asm_insn (insn_buf, operands);\n \t    return \"\";"}, {"sha": "d7c17b2e52c2dc95dd49b77d9607fbb69588ff92", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "patch": "@@ -999,8 +999,6 @@ h8300_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n \n #define NOTICE_UPDATE_CC(EXP, INSN) notice_update_cc(EXP, INSN)\n \n-/* The mov,and,or,xor insns always set V to 0.  */\n-#define CC_OVERFLOW_0 0400\n /* The add insns don't set overflow in a usable way.  */\n #define CC_OVERFLOW_UNUSABLE 01000\n /* The mov,and,or,xor insns don't set carry.  That's ok though as the\n@@ -1009,7 +1007,6 @@ h8300_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n    CC_NO_OVERFLOW defined for this purpose.  Rename it to something more\n    understandable.  */\n #define CC_NO_CARRY CC_NO_OVERFLOW\n-/* ??? Use CC_Z_IN_NOT_C for bld insns?  */\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "79da8bfb9235703138f3aa69d05160fb61d117b5", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 66, "deletions": 48, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "patch": "@@ -86,13 +86,11 @@\n ;; none_0hit - insn does not affect cc but it does modify operand 0\n ;;\tThis attribute is used to keep track of when operand 0 changes.\n ;; \tSee the description of NOTICE_UPDATE_CC for more info.\n-;; set - insn sets flags z,n,v.  c are set to 0.\n-;;\t(c may not really be set to 0 but that's ok, we don't need it anyway).\n-;; set_zn_c0 - insn sets z,n to usable values.  v is unknown.  c may or may not\n-;;\tbe known (if it isn't that's ok, we don't need it anyway).\n+;; set_znv - insn sets z,n,v to usable values (like a tst insn); c is unknown.\n+;; set_zn  - insn sets z,n to usable values; v,c are unknown.\n ;; compare - compare instruction\n ;; clobber - value of cc is unknown\n-(define_attr \"cc\" \"none,none_0hit,set,set_zn_c0,compare,clobber\"\n+(define_attr \"cc\" \"none,none_0hit,set_znv,set_zn,compare,clobber\"\n   (const_string \"clobber\"))\n \f\n ;; ----------------------------------------------------------------------\n@@ -113,7 +111,7 @@\n     return \\\"push.l\t%S1\\\";\n }\"\n   [(set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n@@ -131,7 +129,7 @@\n      [(const_int 2) (const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"\")\n@@ -159,7 +157,7 @@\n   [(set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv\")])\n    \n ;; movhi\n \n@@ -177,7 +175,7 @@\n     return \\\"push.l\t%S1\\\";\n }\"\n   [(set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n@@ -195,7 +193,7 @@\n      [(const_int 2) (const_int 2) (const_int 2) (const_int 4)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"\")\n@@ -223,7 +221,7 @@\n   [(set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2) (const_int 4)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv\")])\n \n ;; movsi\n \n@@ -440,7 +438,7 @@\n    return \\\"mov.l\t%S1,%S0\\\";\n }\"\n   [(set_attr \"length\" \"2,2,10,10,4,4,2,6,4\")\n-   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,none_0hit,none_0hit,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv,none_0hit,none_0hit,set_znv\")])\n \n (define_insn \"movsf_h8300h\"\n   [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,m,<,r\")\n@@ -456,7 +454,7 @@\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n   [(set_attr \"length\" \"2,2,10,10,4,4\")\n-   (set_attr \"cc\" \"set,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; TEST INSTRUCTIONS\n@@ -469,7 +467,7 @@\n   \"\"\n   \"btst\t%Z1,%R0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"\"\n   [(set (cc0) (zero_extract:HI (match_operand:QI 0 \"bit_memory_operand\" \"rU\")\n@@ -478,7 +476,7 @@\n   \"\"\n   \"btst\t%Z1,%Y0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"\"\n   [(set (cc0) (zero_extract:SI (match_operand:QI 0 \"bit_memory_operand\" \"rU\")\n@@ -487,7 +485,7 @@\n   \"\"\n   \"btst\t%Z1,%Y0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"\"\n   [(set (cc0) (zero_extract:QI (match_operand:HI 0 \"register_operand\" \"r\")\n@@ -496,7 +494,7 @@\n   \"\"\n   \"btst\t%Z1,%R0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n   \n (define_insn \"\"\n   [(set (cc0) (zero_extract:HI (match_operand:HI 0 \"register_operand\" \"r\")\n@@ -505,7 +503,7 @@\n   \"\"\n   \"btst\t%Z1,%Y0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"\"\n   [(set (cc0) (zero_extract:SI (match_operand:HI 0 \"register_operand\" \"r\")\n@@ -514,28 +512,28 @@\n   \"\"\n   \"btst\t%Z1,%Y0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"tstqi\"\n   [(set (cc0) (match_operand:QI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"mov.b\t%X0,%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"tsthi\"\n   [(set (cc0) (match_operand:HI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"mov.w\t%T0,%T0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"tstsi\"\n   [(set (cc0) (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"mov.l\t%S0,%S0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"cmpqi\"\n   [(set (cc0)\n@@ -597,7 +595,7 @@\n   \"\"\n   \"add.b\t%X2,%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_expand \"addhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -631,7 +629,7 @@\n    add.w\t%T2,%T0\n    mov.w        %T1,%T0\\;add.w  %T2,%T0\"\n   [(set_attr \"length\" \"4,2,6\")\n-   (set_attr \"cc\" \"clobber,set,set\")])\n+   (set_attr \"cc\" \"clobber,set_zn,set_zn\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -642,7 +640,7 @@\n    add.w\t%T2,%T0\n    add.w\t%T2,%T0\"\n   [(set_attr \"length\" \"4,2\")\n-   (set_attr \"cc\" \"set,set\")])\n+   (set_attr \"cc\" \"set_zn,set_zn\")])\n \n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -687,7 +685,7 @@\n    add.l\t%S2,%S0\n    add.l\t%S2,%S0\"\n   [(set_attr \"length\" \"6,2\")\n-   (set_attr \"cc\" \"set,set\")])\n+   (set_attr \"cc\" \"set_zn,set_zn\")])\n \n ;; ----------------------------------------------------------------------\n ;; SUBTRACT INSTRUCTIONS\n@@ -702,7 +700,7 @@\n    sub.b\t%X2,%X0\n    add.b\t%G2,%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_expand \"subhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -740,7 +738,7 @@\n    sub.w\t%T2,%T0\n    add.b\t%E2,%s0\\;addx\t%F2,%t0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set,clobber\")])\n+   (set_attr \"cc\" \"set_zn,clobber\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,&r\")\n@@ -751,7 +749,7 @@\n    sub.w\t%T2,%T0\n    sub.w\t%T2,%T0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set,set\")])\n+   (set_attr \"cc\" \"set_zn,set_zn\")])\n \n (define_expand \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -798,7 +796,7 @@\n    sub.l\t%S2,%S0\n    sub.l\t%S2,%S0\"\n   [(set_attr \"length\" \"2,6\")\n-   (set_attr \"cc\" \"set,set\")])\n+   (set_attr \"cc\" \"set_zn,set_zn\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; MULTIPLY INSTRUCTIONS\n@@ -813,7 +811,7 @@\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"mulxs.b\t%X2,%T0\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"mulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -822,7 +820,7 @@\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"mulxs.w\t%T2,%S0\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_insn \"umulqihi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -985,7 +983,7 @@\n    and\t%X2,%X0\n    bclr\t%W2,%R0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set_zn_c0,none_0hit\")])\n+   (set_attr \"cc\" \"set_znv,none_0hit\")])\n \n (define_expand \"andqi3\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"\")\n@@ -1089,7 +1087,7 @@\n    or\t%X2,%X0\n    bset\t%V2,%R0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set_zn_c0,none_0hit\")])\n+   (set_attr \"cc\" \"set_znv,none_0hit\")])\n \n (define_expand \"iorqi3\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=r,U\")\n@@ -1175,7 +1173,7 @@\n    xor\t%X2,%X0\n    bnot\t%V2,%R0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set_zn_c0,none_0hit\")])\n+   (set_attr \"cc\" \"set_znv,none_0hit\")])\n \n (define_expand \"xorqi3\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=r,U\")\n@@ -1258,7 +1256,7 @@\n   \"\"\n   \"neg\t%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_expand \"neghi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1288,7 +1286,7 @@\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"neg\t%T0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n (define_expand \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1318,7 +1316,7 @@\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"neg\t%S0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_zn\")])\n \n ;; ----------------------------------------------------------------------\n ;; NOT INSTRUCTIONS\n@@ -1330,7 +1328,7 @@\n   \"\"\n   \"not\t%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"one_cmplhi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1474,6 +1472,16 @@\n   \"\"\n   \"*\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n+      && (GET_CODE (operands[1]) == GT\n+          || GET_CODE (operands[1]) == GE\n+          || GET_CODE (operands[1]) == LE\n+          || GET_CODE (operands[1]) == LT))\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   if (get_attr_length (insn) == 2) \n     return \\\"b%j1\t%l0\\\";\n   else if (get_attr_length (insn) == 4) \n@@ -1493,6 +1501,16 @@\n   \"\"\n   \"*\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n+      && (GET_CODE (operands[1]) == GT\n+          || GET_CODE (operands[1]) == GE\n+          || GET_CODE (operands[1]) == LE\n+          || GET_CODE (operands[1]) == LT))\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   if (get_attr_length (insn) == 2) \n     return \\\"b%k1\t%l0\\\";\n   else if (get_attr_length (insn) == 4) \n@@ -1689,7 +1707,7 @@\n   extu.l\t%S0\n   mov.w\t%T1,%T0\\;extu.l\t%S0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv,set_znv\")])\n \n (define_expand \"extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -1715,7 +1733,7 @@\n   exts.w\t%T0\n   mov.b\t%R1,%s0\\;exts.w\t%T0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv,set_znv\")])\n \n ;; The compiler can synthesize a 300H variant of this which is\n ;; just as efficient as one that we'd create\n@@ -1772,7 +1790,7 @@\n   exts.l\t%S0\n   mov.w\t%T1,%T0\\;exts.l\t%S0\"\n   [(set_attr \"length\" \"2,4\")\n-   (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv,set_znv\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; SHIFTS\n@@ -2242,7 +2260,7 @@\n   \"(INTVAL(operands[2]) == INTVAL(operands[4])+1) && REGNO(operands[0]) +1 == REGNO(operands[3])\"\n   \"mov.w\t@(%u4,%T1),%T0\"\n   [(set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_peephole\n   [(set (mem:QI (plus:HI (match_operand:HI 1 \"register_operand\" \"r\")\n@@ -2254,7 +2272,7 @@\n   \"(INTVAL(operands[2]) == INTVAL(operands[4])+1) && REGNO(operands[0]) +1 == REGNO(operands[3])\"\n   \"mov.w\t%T0,@(%u4,%T1)\"\n   [(set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n ;; Notice a move which could be post incremented.\n \n@@ -2265,7 +2283,7 @@\n   \"REGNO(operands[1]) != REGNO(operands[0])\"\n   \"mov.b\t@%T1+,%X0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_peephole \n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -2274,7 +2292,7 @@\n   \"REGNO(operands[1]) != REGNO(operands[0])\"\n   \"mov.w\t@%T1+,%T0\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n ;; Notice a move which could be predecremented.\n \n@@ -2286,7 +2304,7 @@\n   \"REGNO(operands[1]) != REGNO(operands[0])\"\n   \"mov.b\t%X0,@-%T1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n \n (define_peephole \n   [(set (match_operand:HI 1 \"register_operand\" \"\")\n@@ -2296,5 +2314,5 @@\n   \"REGNO(operands[1]) != REGNO(operands[0])\"\n   \"mov.w\t%T0,@-%T1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn_c0\")])\n+   (set_attr \"cc\" \"set_znv\")])\n "}]}