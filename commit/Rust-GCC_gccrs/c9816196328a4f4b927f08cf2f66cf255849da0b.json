{"sha": "c9816196328a4f4b927f08cf2f66cf255849da0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk4MTYxOTYzMjhhNGY0YjkyN2YwOGNmMmY2NmNmMjU1ODQ5ZGEwYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-04T15:04:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-04T15:04:48Z"}, "message": "c++: Fix up [[nodiscard]] on ctors on targetm.cxx.cdtor_returns_this targets [PR99362]\n\nIn the P1771R1 changes JeanHeyd reverted part of Alex' PR88146 fix,\nbut that seems to be incorrect to me.\nWhere P1771R1 suggests warnings for [[nodiscard]] on constructors is\nhandled in a different place - in particular the TARGET_EXPR handling\nof convert_to_void.  When we have CALL_EXPR of a ctor, on most arches\nthat call has void return type and so returns early, and on arm where\nthe ctor returns the this pointer it is undesirable to warn as it warns\nabout all ctor calls, not just the ones where it should warn.\n\nThe P1771R1 changes added a test for this, but as it was given *.c\nextension rather than *.C, the test was never run and so this didn't get\nspotted immediately.  The test also had a bug, (?n) can't be used\nin dg-warning/dg-error because those are implemented by prepending\nsome regexp before the user provided one and (?n) must come at the start\nof the regexp.  Furthermore, while -ftrack-macro-expansion=0 is useful\nin one nodiscard test which uses macros, I don't see how it would be\nrelevant to all the other cpp2a/nodiscard* tests which don't use any\nmacros.\n\n2021-03-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/88146\n\tPR c++/99362\ngcc/cp/\n\t* cvt.c (convert_to_void): Revert 2019-10-17 changes.  Clarify\n\tcomment.\ngcc/testsuite/\n\t* g++.dg/cpp2a/nodiscard-constructor.c: Renamed to ...\n\t* g++.dg/cpp2a/nodiscard-constructor1.C: ... this.  Remove\n\t-ftrack-macro-expansion=0 from dg-options.  Don't use (?n) in\n\tdg-warning regexps, instead replace .* with \\[^\\n\\r]*.\n\t* g++.dg/cpp2a/nodiscard-constructor2.C: New test.\n\t* g++.dg/cpp2a/nodiscard-reason-only-one.C: Remove\n\t-ftrack-macro-expansion=0 from dg-options.\n\t* g++.dg/cpp2a/nodiscard-reason-nonstring.C: Likewise.\n\t* g++.dg/cpp2a/nodiscard-once.C: Likewise.", "tree": {"sha": "d17ef73ab41bded8b05b45d682246d40ddc86003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d17ef73ab41bded8b05b45d682246d40ddc86003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9816196328a4f4b927f08cf2f66cf255849da0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9816196328a4f4b927f08cf2f66cf255849da0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9816196328a4f4b927f08cf2f66cf255849da0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9816196328a4f4b927f08cf2f66cf255849da0b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b56c3ef70036af6d171d61ea48ad4c368fcb5b"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "2ea32101f07f9e81de34de05aaba6b7db01d7f05", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=c9816196328a4f4b927f08cf2f66cf255849da0b", "patch": "@@ -1231,12 +1231,14 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n     case CALL_EXPR:   /* We have a special meaning for volatile void fn().  */\n       /* cdtors may return this or void, depending on\n \t targetm.cxx.cdtor_returns_this, but this shouldn't affect our\n-\t decisions here: neither nodiscard warnings (nodiscard cdtors\n-\t are nonsensical), nor should any constexpr or template\n-\t instantiations be affected by an ABI property that is, or at\n-\t least ought to be transparent to the language.  */\n+\t decisions here: neither nodiscard warnings (nodiscard dtors\n+\t are nonsensical and ctors have a different behavior with that\n+\t attribute that is handled in the TARGET_EXPR case), nor should\n+\t any constexpr or template instantiations be affected by an ABI\n+\t property that is, or at least ought to be transparent to the\n+\t language.  */\n       if (tree fn = cp_get_callee_fndecl_nofold (expr))\n-\tif (DECL_DESTRUCTOR_P (fn))\n+\tif (DECL_CONSTRUCTOR_P (fn) || DECL_DESTRUCTOR_P (fn))\n \t  return expr;\n \n       if (complain & tf_warning)"}, {"sha": "6aa33149a0f8dd1b7f67ac01296223b04c89d1fd", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-constructor1.C", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor1.C?ref=c9816196328a4f4b927f08cf2f66cf255849da0b", "patch": "@@ -1,13 +1,13 @@\n /* nodiscard attribute tests  */\n /* { dg-do compile { target c++20 } } */\n-/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+/* { dg-options \"-O\" } */\n \n struct A { [[nodiscard(\"bad constructor\")]] A() {} };\n struct B { [[nodiscard]] B() {} };\n \n void\n test (void)\n {\n-  A{}; /* { dg-warning \"(?n)nodiscard.*bad constructor\" } */\n-  B{}; /* { dg-warning \"(?n)nodiscard\" } */\n+  A{}; /* { dg-warning \"nodiscard\\[^\\n\\r]*bad constructor\" } */\n+  B{}; /* { dg-warning \"nodiscard\" } */\n }", "previous_filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-constructor.c"}, {"sha": "3abb11847d1097943928cbedfd6d4d3bbf075ce3", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-constructor2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor2.C?ref=c9816196328a4f4b927f08cf2f66cf255849da0b", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/99362\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  [[nodiscard]] S() {}\n+  S(int) {}\n+};\n+\n+int main()\n+{\n+  S s;\n+  S();\t\t// { dg-warning \"ignoring return value\" }\n+  (void)(S());\n+  S t = 1;\n+  S(1);\n+  (void)(S(1));\n+}"}, {"sha": "c533f9cf7d0c3113af7cc9ef1e466a68c90cd6c1", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-once.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C?ref=c9816196328a4f4b927f08cf2f66cf255849da0b", "patch": "@@ -1,6 +1,6 @@\n /* nodiscard attribute tests  */\n /* { dg-do compile { target c++20 } } */\n-/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+/* { dg-options \"-O\" } */\n \n [[nodiscard, nodiscard]] int check1 (void); // { dg-warning \"specified multiple times\" }\n "}, {"sha": "091c3e56bd23c50953378acbc6428a4827d1bc1d", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-reason-nonstring.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-nonstring.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-nonstring.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-nonstring.C?ref=c9816196328a4f4b927f08cf2f66cf255849da0b", "patch": "@@ -1,6 +1,6 @@\n /* nodiscard attribute tests  */\n /* { dg-do compile { target c++20 } } */\n-/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+/* { dg-options \"-O\" } */\n \n [[nodiscard(123)]] int check1 (void); /* { dg-error \"nodiscard\\[^\\n\\r]*must be a string constant\" } */\n "}, {"sha": "01fbb37436f62644ea889ab904866ce8c6447f72", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-reason-only-one.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-only-one.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9816196328a4f4b927f08cf2f66cf255849da0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-only-one.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-only-one.C?ref=c9816196328a4f4b927f08cf2f66cf255849da0b", "patch": "@@ -1,6 +1,6 @@\n /* nodiscard attribute tests  */\n /* { dg-do compile { target c++20 } } */\n-/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+/* { dg-options \"-O\" } */\n \n [[nodiscard(\"not\", \"allowed\")]] int check1 (void); /* { dg-error \"wrong number of arguments.\\[^\\n\\r]*nodiscard\" } */\n "}]}