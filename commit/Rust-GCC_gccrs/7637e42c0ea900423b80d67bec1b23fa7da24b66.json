{"sha": "7637e42c0ea900423b80d67bec1b23fa7da24b66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzN2U0MmMwZWE5MDA0MjNiODBkNjdiZWMxYjIzZmE3ZGEyNGI2Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-04-22T08:42:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-04-22T08:42:25Z"}, "message": "i386.md (length_immediate): Use gcc_assert or gcc_unreachable, as appropriate.\n\n\t* config/i386/i386.md (length_immediate): Use gcc_assert or\n\tgcc_unreachable, as appropriate.\n\t(*movsi_1, *movqi_1, reload_outqi, *movdi_1_rex64, *pushsf,\n\t*pushsf_rex64, *truncxfsf2_mixed, *truncxfsf2_i387,\n\t*truncxfdf2_mixed, *truncxfdf2_i387, *adddi_1_rex64,\n\t*adddi_2_rex64, *adddi_3_rex64, *adddi_4_rex64, *adddi_5_rex64,\n\t*addsi_1, addsi_1_zext, *addsi_2, *addsi_2_zext, *addsi_3,\n\t*addsi_3_zext, *addsi_4, *addsi_5, *addhi_1_lea, *addhi_1,\n\t*addhi_2, *addhi_3, *addhi_4, *addhi_5, *addqi_1_lea, *addqi_1,\n\t*addqi_1_slp, *addqi_2, *addqi_3, *addqi_4, *addqi_5, addqi_ext_1,\n\t*addqi_ext_1_rex64, *anddi_1_rex64, *andsi_1, *andhi_1,\n\t*ashldi3_1_rex64, *ashldi3_cmp_rex64, *ashlsi3_1, *ashlsi3_1_zext,\n\t*ashlsi3_cmp, *ashlsi3_cmp_zext, *ashlhi3_1_lea, *ashlhi3_1,\n\t*ashlhi3_cmp, *ashlqi3_1_lea, *ashlqi3_1, *ashlqi3_cmp,\n\tpro_epilogue_adjust_stack_1, pro_epilogue_adjust_stack_rex64,\n\tpro_epilogue_adjust_stack_rex64_2, prefetch, *prefetch_sse,\n\t*prefetch_sse_rex): Likewise.\n\t* config/i386/predicates.md (x86_64_immediate_operand,\n\tx86_64_zext_immediate_operand, symbolic_operand,\n\tno_seg_address_operand, aligned_operand,\n\tmemory_displacement_operand): Likewise.\n\t* config/i386/sse.md (*mov<mode>_internal,\n\t*movv2df_internal): Likewise.\n\nFrom-SVN: r98549", "tree": {"sha": "2b24f570751298848c2798d28aa8c8c411d79faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b24f570751298848c2798d28aa8c8c411d79faa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7637e42c0ea900423b80d67bec1b23fa7da24b66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7637e42c0ea900423b80d67bec1b23fa7da24b66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7637e42c0ea900423b80d67bec1b23fa7da24b66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7637e42c0ea900423b80d67bec1b23fa7da24b66/comments", "author": null, "committer": null, "parents": [{"sha": "ca31b95fa3f967fce4ea405dc56ed26182270209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca31b95fa3f967fce4ea405dc56ed26182270209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca31b95fa3f967fce4ea405dc56ed26182270209"}], "stats": {"total": 607, "additions": 300, "deletions": 307}, "files": [{"sha": "d6dd3953cccadbc2fea83808e3c36d5a0c48a09f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7637e42c0ea900423b80d67bec1b23fa7da24b66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7637e42c0ea900423b80d67bec1b23fa7da24b66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7637e42c0ea900423b80d67bec1b23fa7da24b66", "patch": "@@ -1,11 +1,38 @@\n+2005-04-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/i386/i386.md (length_immediate): Use gcc_assert or\n+\tgcc_unreachable, as appropriate.\n+\t(*movsi_1, *movqi_1, reload_outqi, *movdi_1_rex64, *pushsf,\n+\t*pushsf_rex64, *truncxfsf2_mixed, *truncxfsf2_i387,\n+\t*truncxfdf2_mixed, *truncxfdf2_i387, *adddi_1_rex64,\n+\t*adddi_2_rex64, *adddi_3_rex64, *adddi_4_rex64, *adddi_5_rex64,\n+\t*addsi_1, addsi_1_zext, *addsi_2, *addsi_2_zext, *addsi_3,\n+\t*addsi_3_zext, *addsi_4, *addsi_5, *addhi_1_lea, *addhi_1,\n+\t*addhi_2, *addhi_3, *addhi_4, *addhi_5, *addqi_1_lea, *addqi_1,\n+\t*addqi_1_slp, *addqi_2, *addqi_3, *addqi_4, *addqi_5, addqi_ext_1,\n+\t*addqi_ext_1_rex64, *anddi_1_rex64, *andsi_1, *andhi_1,\n+\t*ashldi3_1_rex64, *ashldi3_cmp_rex64, *ashlsi3_1, *ashlsi3_1_zext,\n+\t*ashlsi3_cmp, *ashlsi3_cmp_zext, *ashlhi3_1_lea, *ashlhi3_1,\n+\t*ashlhi3_cmp, *ashlqi3_1_lea, *ashlqi3_1, *ashlqi3_cmp,\n+\tpro_epilogue_adjust_stack_1, pro_epilogue_adjust_stack_rex64,\n+\tpro_epilogue_adjust_stack_rex64_2, prefetch, *prefetch_sse,\n+\t*prefetch_sse_rex): Likewise.\n+\t* config/i386/predicates.md (x86_64_immediate_operand,\n+\tx86_64_zext_immediate_operand, symbolic_operand,\n+\tno_seg_address_operand, aligned_operand,\n+\tmemory_displacement_operand): Likewise.\n+\t* config/i386/sse.md (*mov<mode>_internal,\n+\t*movv2df_internal): Likewise.\n+\n 2005-04-22  Jan Hubicka  <jh@suse.cz>\n \n \t* Makefile.in (ipa.o, ipa-inline.o): New files.\n \t* cgraph.h (cgraph_remove_unreachable_nodes, cgraph_postorder,\n \tcgraph_decide_inlining_incrementally, cgraph_clone_inlined_nodes,\n \tcgraph_mark_inline_edge, cgraph_default_inline_p): Declare.\n-\t* cgraphunit.c (cgraph_default_inline_p, cgraph_decide_inlining_incrementally, \n-\tncalls_inlined, nfunctions_inlined, initial_insns, overall_insns,\n+\t* cgraphunit.c (cgraph_default_inline_p,\n+\tcgraph_decide_inlining_incrementally,  ncalls_inlined,\n+\tnfunctions_inlined, initial_insns, overall_insns, \n \tcgraph_estimate_size_after_inlining, cgraph_estimate_growth,\n \tcgraph_clone_inlined_nodes, cgraph_mark_inline_edge,\n \tcgraph_mark_inline, cgraph_check_inline_limits,"}, {"sha": "66659ae5abc42f5f099d0fd97e1329f377bdfde3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 255, "deletions": 294, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7637e42c0ea900423b80d67bec1b23fa7da24b66/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7637e42c0ea900423b80d67bec1b23fa7da24b66/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7637e42c0ea900423b80d67bec1b23fa7da24b66", "patch": "@@ -238,7 +238,7 @@\n \t   (const_int 1)\n \t ]\n \t (symbol_ref \"/* Update immediate_length and other attributes! */\n-\t\t      abort(),1\")))\n+\t\t      gcc_unreachable (),1\")))\n \n ;; The (bounding maximum) length of an instruction address.\n (define_attr \"length_address\" \"\"\n@@ -1178,8 +1178,7 @@\n       return \"lea{l}\\t{%1, %0|%0, %1}\";\n \n     default:\n-      if (flag_pic && !LEGITIMATE_PIC_OPERAND_P (operands[1]))\n-\tabort();\n+      gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n       return \"mov{l}\\t{%1, %0|%0, %1}\";\n     }\n }\n@@ -1462,8 +1461,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_IMOVX:\n-      if (!ANY_QI_REG_P (operands[1]) && GET_CODE (operands[1]) != MEM)\n-\tabort ();\n+      gcc_assert (ANY_QI_REG_P (operands[1]) || GET_CODE (operands[1]) == MEM);\n       return \"movz{bl|x}\\t{%1, %k0|%k0, %1}\";\n     default:\n       if (get_attr_mode (insn) == MODE_SI)\n@@ -1521,8 +1519,7 @@\n   rtx op0, op1, op2;\n   op0 = operands[0]; op1 = operands[1]; op2 = operands[2];\n \n-  if (reg_overlap_mentioned_p (op2, op0))\n-    abort ();\n+  gcc_assert (!reg_overlap_mentioned_p (op2, op0));\n   if (! q_regs_operand (op1, QImode))\n     {\n       emit_insn (gen_movqi (op2, op1));\n@@ -1979,8 +1976,7 @@\n     case TYPE_LEA:\n       return \"lea{q}\\t{%a1, %0|%0, %a1}\";\n     default:\n-      if (flag_pic && !LEGITIMATE_PIC_OPERAND_P (operands[1]))\n-\tabort ();\n+      gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n       if (get_attr_mode (insn) == MODE_SI)\n \treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n       else if (which_alternative == 2)\n@@ -2121,7 +2117,7 @@\n       else\n \treturn \"movdqa\\t{%1, %0|%0, %1}\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"ssemov,ssemov,ssemov\")\n@@ -2166,7 +2162,7 @@\n       else\n \treturn \"movdqa\\t{%1, %0|%0, %1}\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"*,*,ssemov,ssemov,ssemov\")\n@@ -2206,15 +2202,9 @@\n \t(match_operand:SF 1 \"general_no_elim_operand\" \"f#rx,rFm#fx,x#rf\"))]\n   \"!TARGET_64BIT\"\n {\n-  switch (which_alternative)\n-    {\n-    case 1:\n-      return \"push{l}\\t%1\";\n-\n-    default:\n-      /* This insn should be already split before reg-stack.  */\n-      abort ();\n-    }\n+  /* Anything else should be already split before reg-stack.  */\n+  gcc_assert (which_alternative == 1);\n+  return \"push{l}\\t%1\";\n }\n   [(set_attr \"type\" \"multi,push,multi\")\n    (set_attr \"mode\" \"SF,SI,SF\")])\n@@ -2224,15 +2214,9 @@\n \t(match_operand:SF 1 \"nonmemory_no_elim_operand\" \"f#rx,rF#fx,x#rf\"))]\n   \"TARGET_64BIT\"\n {\n-  switch (which_alternative)\n-    {\n-    case 1:\n-      return \"push{q}\\t%q1\";\n-\n-    default:\n-      /* This insn should be already split before reg-stack.  */\n-      abort ();\n-    }\n+  /* Anything else should be already split before reg-stack.  */\n+  gcc_assert (which_alternative == 1);\n+  return \"push{q}\\t%q1\";\n }\n   [(set_attr \"type\" \"multi,push,multi\")\n    (set_attr \"mode\" \"SF,DI,SF\")])\n@@ -2314,7 +2298,7 @@\n       return \"movq\\t{%1, %0|%0, %1}\";\n \n     default:\n-      abort();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,imov,imov,ssemov,ssemov,ssemov,ssemov,mmxmov,mmxmov,mmxmov\")\n@@ -2385,7 +2369,7 @@\n   \"!TARGET_64BIT && !TARGET_INTEGER_DFMODE_MOVES\"\n {\n   /* This insn should be already split before reg-stack.  */\n-  abort ();\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"DF,SI,SI,DF\")])\n@@ -2396,7 +2380,7 @@\n   \"TARGET_64BIT || TARGET_INTEGER_DFMODE_MOVES\"\n {\n   /* This insn should be already split before reg-stack.  */\n-  abort ();\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"DF,SI,DF\")])\n@@ -2468,7 +2452,7 @@\n \tcase MODE_TI:\n \t  return \"pxor\\t%0, %0\";\n \tdefault:\n-\t  abort ();\n+\t  gcc_unreachable ();\n \t}\n     case 6:\n     case 7:\n@@ -2490,11 +2474,11 @@\n \tcase MODE_V2SF:\n \t  return \"movlps\\t{%1, %0|%0, %1}\";\n \tdefault:\n-\t  abort ();\n+\t  gcc_unreachable ();\n \t}\n \n     default:\n-      abort();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi,ssemov,ssemov,ssemov,ssemov\")\n@@ -2589,7 +2573,7 @@\n \tcase MODE_TI:\n \t  return \"pxor\\t%0, %0\";\n \tdefault:\n-\t  abort ();\n+\t  gcc_unreachable ();\n \t}\n     case 6:\n     case 7:\n@@ -2611,11 +2595,11 @@\n \tcase MODE_V2SF:\n \t  return \"movlps\\t{%1, %0|%0, %1}\";\n \tdefault:\n-\t  abort ();\n+\t  gcc_unreachable ();\n \t}\n \n     default:\n-      abort();\n+      gcc_unreachable();\n     }\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi,ssemov,ssemov,ssemov,ssemov\")\n@@ -2718,7 +2702,7 @@\n   \"optimize_size\"\n {\n   /* This insn should be already split before reg-stack.  */\n-  abort ();\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"XF,SI,SI\")])\n@@ -2729,7 +2713,7 @@\n   \"!optimize_size\"\n {\n   /* This insn should be already split before reg-stack.  */\n-  abort ();\n+  gcc_unreachable ();\n }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"XF,SI\")])\n@@ -2788,8 +2772,9 @@\n \n     case 3: case 4:\n       return \"#\";\n+    default:\n+      gcc_unreachable ();\n     }\n-  abort();\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi\")\n    (set_attr \"mode\" \"XF,XF,XF,SI,SI\")])\n@@ -2821,8 +2806,10 @@\n \n     case 3: case 4:\n       return \"#\";\n+\n+    default:\n+      gcc_unreachable ();\n     }\n-  abort();\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi\")\n    (set_attr \"mode\" \"XF,XF,XF,SI,SI\")])\n@@ -2922,7 +2909,7 @@\n       else\n \treturn \"movdqa\\t{%1, %0|%0, %1}\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"*,*,ssemov,ssemov,ssemov\")\n@@ -3537,7 +3524,7 @@\n       return \"cvtss2sd\\t{%1, %0|%0, %1}\";\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov,fmov,ssecvt\")\n@@ -3570,7 +3557,7 @@\n         return \"fst%z0\\t%y0\";\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov\")\n@@ -3609,7 +3596,7 @@\n         return \"fstp%z0\\t%y0\\n\\tfld%z0\\t%y0\";\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov\")\n@@ -3648,7 +3635,7 @@\n         return \"fstp%z0\\t%y0\";\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov\")\n@@ -3707,7 +3694,7 @@\n     case 2:\n       return \"cvtsd2ss\\t{%1, %0|%0, %1}\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov,fmov,ssecvt\")\n@@ -3752,7 +3739,7 @@\n     case 2:\n       return \"cvtsd2ss\\t{%1, %0|%0, %1}\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov,multi,ssecvt\")\n@@ -3775,7 +3762,7 @@\n     case 1:\n       return \"#\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"fmov,multi\")\n@@ -3837,16 +3824,11 @@\n    (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n   \"TARGET_MIX_SSE_I387\"\n {\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n-    default:\n-      abort();\n-    }\n+  gcc_assert (!which_alternative);\n+  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n+    return \"fstp%z0\\t%y0\";\n+  else\n+    return \"fst%z0\\t%y0\";\n }\n   [(set_attr \"type\" \"fmov,multi,multi,multi\")\n    (set_attr \"mode\" \"SF\")])\n@@ -3868,16 +3850,11 @@\n    (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m\"))]\n   \"TARGET_80387\"\n {\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n-    default:\n-      abort ();\n-    }\n+  gcc_assert (!which_alternative);\n+  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n+    return \"fstp%z0\\t%y0\";\n+   else\n+     return \"fst%z0\\t%y0\";\n }\n   [(set_attr \"type\" \"fmov,multi,multi\")\n    (set_attr \"mode\" \"SF\")])\n@@ -3943,17 +3920,11 @@\n    (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m,m\"))]\n   \"TARGET_SSE2 && TARGET_MIX_SSE_I387\"\n {\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n-    default:\n-      abort();\n-    }\n-  abort ();\n+  gcc_assert (!which_alternative);\n+  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n+    return \"fstp%z0\\t%y0\";\n+  else\n+    return \"fst%z0\\t%y0\";\n }\n   [(set_attr \"type\" \"fmov,multi,multi,multi\")\n    (set_attr \"mode\" \"DF\")])\n@@ -3975,16 +3946,11 @@\n    (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m\"))]\n   \"TARGET_80387\"\n {\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n-    default:\n-      abort ();\n-    }\n+  gcc_assert (!which_alternative);\n+  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n+    return \"fstp%z0\\t%y0\";\n+  else\n+    return \"fst%z0\\t%y0\";\n }\n   [(set_attr \"type\" \"fmov,multi,multi\")\n    (set_attr \"mode\" \"DF\")])\n@@ -5050,18 +5016,17 @@\n       return \"lea{q}\\t{%a2, %0|%0, %a2}\";\n \n     case TYPE_INCDEC:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{q}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{q}\\t%0\";\n       else\n-\tabort ();\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{q}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n \n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n@@ -5121,18 +5086,17 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{q}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{q}\\t%0\";\n       else\n-\tabort ();\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{q}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* ???? We ought to handle there the 32bit case too\n \t - do we need new constraint?  */\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5171,18 +5135,17 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{q}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{q}\\t%0\";\n       else\n-\tabort ();\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{q}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* ???? We ought to handle there the 32bit case too\n \t - do we need new constraint?  */\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5227,14 +5190,14 @@\n     case TYPE_INCDEC:\n       if (operands[2] == constm1_rtx)\n         return \"inc{q}\\t%0\";\n-      else if (operands[2] == const1_rtx)\n-        return \"dec{q}\\t%0\";\n       else\n-\tabort();\n+        {\n+\t  gcc_assert (operands[2] == const1_rtx);\n+          return \"dec{q}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n       if ((INTVAL (operands[2]) == -128\n@@ -5270,18 +5233,17 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{q}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{q}\\t%0\";\n       else\n-\tabort();\n+        {\n+          gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{q}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n       if (GET_CODE (operands[2]) == CONST_INT\n@@ -5318,18 +5280,17 @@\n       return \"lea{l}\\t{%a2, %0|%0, %a2}\";\n \n     case TYPE_INCDEC:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{l}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{l}\\t%0\";\n       else\n-\tabort();\n+\t{\n+  \t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{l}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n \n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n@@ -5405,10 +5366,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n         return \"inc{l}\\t%k0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{l}\\t%k0\";\n       else\n-\tabort();\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{l}\\t%k0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5470,18 +5432,17 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{l}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{l}\\t%0\";\n       else\n-\tabort();\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{l}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n       if (GET_CODE (operands[2]) == CONST_INT\n@@ -5521,10 +5482,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n         return \"inc{l}\\t%k0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{l}\\t%k0\";\n       else\n-\tabort();\n+\t{\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{l}\\t%k0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5560,18 +5522,17 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{l}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{l}\\t%0\";\n       else\n-\tabort();\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{l}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n       if (GET_CODE (operands[2]) == CONST_INT\n@@ -5609,10 +5570,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n         return \"inc{l}\\t%k0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{l}\\t%k0\";\n       else\n-\tabort();\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{l}\\t%k0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5655,14 +5617,14 @@\n     case TYPE_INCDEC:\n       if (operands[2] == constm1_rtx)\n         return \"inc{l}\\t%0\";\n-      else if (operands[2] == const1_rtx)\n-        return \"dec{l}\\t%0\";\n       else\n-\tabort();\n+        {\n+\t  gcc_assert (operands[2] == const1_rtx);\n+          return \"dec{l}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n       if ((INTVAL (operands[2]) == -128\n@@ -5695,18 +5657,17 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_INCDEC:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (operands[2] == const1_rtx)\n         return \"inc{l}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-        return \"dec{l}\\t%0\";\n       else\n-\tabort();\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+          return \"dec{l}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n       if (GET_CODE (operands[2]) == CONST_INT\n@@ -5753,9 +5714,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-\treturn \"dec{w}\\t%0\";\n-      abort();\n+      else\n+\t{\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+\t  return \"dec{w}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5792,9 +5755,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-\treturn \"dec{w}\\t%0\";\n-      abort();\n+      else\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+\t  return \"dec{w}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5832,9 +5797,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-\treturn \"dec{w}\\t%0\";\n-      abort();\n+      else\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+\t  return \"dec{w}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5869,9 +5836,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-\treturn \"dec{w}\\t%0\";\n-      abort();\n+      else\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+\t  return \"dec{w}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5907,14 +5876,14 @@\n     case TYPE_INCDEC:\n       if (operands[2] == constm1_rtx)\n         return \"inc{w}\\t%0\";\n-      else if (operands[2] == const1_rtx)\n-        return \"dec{w}\\t%0\";\n       else\n-\tabort();\n+\t{\n+\t  gcc_assert (operands[2] == const1_rtx);\n+          return \"dec{w}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n \t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n       if ((INTVAL (operands[2]) == -128\n@@ -5947,9 +5916,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{w}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-\treturn \"dec{w}\\t%0\";\n-      abort();\n+      else\n+\t{\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+\t  return \"dec{w}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -5996,9 +5967,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn widen ? \"inc{l}\\t%k0\" : \"inc{b}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-\treturn widen ? \"dec{l}\\t%k0\" : \"dec{b}\\t%0\";\n-      abort();\n+      else\n+\t{\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+\t  return widen ? \"dec{l}\\t%k0\" : \"dec{b}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -6042,9 +6015,11 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn widen ? \"inc{l}\\t%k0\" : \"inc{b}\\t%0\";\n-      else if (operands[2] == constm1_rtx)\n-\treturn widen ? \"dec{l}\\t%k0\" : \"dec{b}\\t%0\";\n-      abort();\n+      else\n+\t{\n+\t  gcc_assert (operands[2] == constm1_rtx);\n+\t  return widen ? \"dec{l}\\t%k0\" : \"dec{b}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -6085,9 +6060,11 @@\n     case TYPE_INCDEC:\n       if (operands[1] == const1_rtx)\n \treturn \"inc{b}\\t%0\";\n-      else if (operands[1] == constm1_rtx)\n-\treturn \"dec{b}\\t%0\";\n-      abort();\n+      else\n+\t{\n+\t  gcc_assert (operands[1] == constm1_rtx);\n+\t  return \"dec{b}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.  */\n@@ -6126,11 +6103,13 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{b}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 255))\n-\treturn \"dec{b}\\t%0\";\n-      abort();\n+      else\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx\n+\t\t      || (GET_CODE (operands[2]) == CONST_INT\n+\t\t          && INTVAL (operands[2]) == 255));\n+\t  return \"dec{b}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subb $4,%al' rather than `addb $-4, %al'.  */\n@@ -6162,11 +6141,13 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{b}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 255))\n-\treturn \"dec{b}\\t%0\";\n-      abort();\n+      else\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx\n+\t\t      || (GET_CODE (operands[2]) == CONST_INT\n+\t\t\t  && INTVAL (operands[2]) == 255));\n+\t  return \"dec{b}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subb $4,%al' rather than `addb $-4, %al'.  */\n@@ -6201,14 +6182,14 @@\n \t  || (GET_CODE (operands[2]) == CONST_INT\n \t      && INTVAL (operands[2]) == 255))\n         return \"inc{b}\\t%0\";\n-      else if (operands[2] == const1_rtx)\n-        return \"dec{b}\\t%0\";\n       else\n-\tabort();\n+\t{\n+\t  gcc_assert (operands[2] == const1_rtx);\n+          return \"dec{b}\\t%0\";\n+\t}\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (INTVAL (operands[2]) < 0)\n         {\n           operands[2] = GEN_INT (-INTVAL (operands[2]));\n@@ -6239,11 +6220,13 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{b}\\t%0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 255))\n-\treturn \"dec{b}\\t%0\";\n-      abort();\n+      else\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx\n+\t\t      || (GET_CODE (operands[2]) == CONST_INT\n+\t\t\t  && INTVAL (operands[2]) == 255));\n+\t  return \"dec{b}\\t%0\";\n+\t}\n \n     default:\n       /* Make things pretty and `subb $4,%al' rather than `addb $-4, %al'.  */\n@@ -6281,11 +6264,13 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{b}\\t%h0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 255))\n-\treturn \"dec{b}\\t%h0\";\n-      abort();\n+      else\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx\n+\t\t      || (GET_CODE (operands[2]) == CONST_INT\n+\t\t\t  && INTVAL (operands[2]) == 255));\n+          return \"dec{b}\\t%h0\";\n+\t}\n \n     default:\n       return \"add{b}\\t{%2, %h0|%h0, %2}\";\n@@ -6315,11 +6300,13 @@\n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n \treturn \"inc{b}\\t%h0\";\n-      else if (operands[2] == constm1_rtx\n-\t       || (GET_CODE (operands[2]) == CONST_INT\n-\t\t   && INTVAL (operands[2]) == 255))\n-\treturn \"dec{b}\\t%h0\";\n-      abort();\n+      else\n+        {\n+\t  gcc_assert (operands[2] == constm1_rtx\n+\t\t      || (GET_CODE (operands[2]) == CONST_INT\n+\t\t\t  && INTVAL (operands[2]) == 255));\n+          return \"dec{b}\\t%h0\";\n+        }\n \n     default:\n       return \"add{b}\\t{%2, %h0|%h0, %2}\";\n@@ -7341,8 +7328,7 @@\n     }\n   else\n     {\n-      if (true_regnum (operands[1]))\n-\tabort();\n+      gcc_assert (!true_regnum (operands[1]));\n       operands[4] = operands[1];\n     }\n })\n@@ -7425,8 +7411,7 @@\n     }\n   else\n     {\n-      if (true_regnum (operands[1]))\n-\tabort();\n+      gcc_assert (!true_regnum (operands[1]));\n       operands[4] = operands[1];\n     }\n })\n@@ -7920,14 +7905,14 @@\n       {\n \tenum machine_mode mode;\n \n-\tif (GET_CODE (operands[2]) != CONST_INT)\n-\t  abort ();\n+\tgcc_assert (GET_CODE (operands[2]) == CONST_INT);\n         if (INTVAL (operands[2]) == 0xff)\n \t  mode = QImode;\n-\telse if (INTVAL (operands[2]) == 0xffff)\n-\t  mode = HImode;\n \telse\n-\t  abort ();\n+\t  {\n+\t    gcc_assert (INTVAL (operands[2]) == 0xffff);\n+\t    mode = HImode;\n+\t  }\n \t\n \toperands[1] = gen_lowpart (mode, operands[1]);\n \tif (mode == QImode)\n@@ -7937,8 +7922,7 @@\n       }\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (get_attr_mode (insn) == MODE_SI)\n \treturn \"and{l}\\t{%k2, %k0|%k0, %k2}\";\n       else\n@@ -7986,14 +7970,14 @@\n       {\n \tenum machine_mode mode;\n \n-\tif (GET_CODE (operands[2]) != CONST_INT)\n-\t  abort ();\n+\tgcc_assert (GET_CODE (operands[2]) == CONST_INT);\n         if (INTVAL (operands[2]) == 0xff)\n \t  mode = QImode;\n-\telse if (INTVAL (operands[2]) == 0xffff)\n-\t  mode = HImode;\n \telse\n-\t  abort ();\n+\t  {\n+\t    gcc_assert (INTVAL (operands[2]) == 0xffff);\n+\t    mode = HImode;\n+\t  }\n \t\n \toperands[1] = gen_lowpart (mode, operands[1]);\n \tif (mode == QImode)\n@@ -8003,8 +7987,7 @@\n       }\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       return \"and{l}\\t{%2, %0|%0, %2}\";\n     }\n }\n@@ -8106,15 +8089,12 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_IMOVX:\n-      if (GET_CODE (operands[2]) != CONST_INT)\n-\tabort ();\n-      if (INTVAL (operands[2]) == 0xff)\n-\treturn \"movz{bl|x}\\t{%b1, %k0|%k0, %b1}\";\n-      abort ();\n+      gcc_assert (GET_CODE (operands[2]) == CONST_INT);\n+      gcc_assert (INTVAL (operands[2]) == 0xff);\n+      return \"movz{bl|x}\\t{%b1, %k0|%k0, %b1}\";\n \n     default:\n-      if (! rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n \n       return \"and{w}\\t{%2, %0|%0, %2}\";\n     }\n@@ -10086,16 +10066,13 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n-      if (!rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       return \"add{q}\\t{%0, %0|%0, %0}\";\n \n     case TYPE_LEA:\n-      if (GET_CODE (operands[2]) != CONST_INT\n-\t  || (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 3)\n-\tabort ();\n+      gcc_assert (GET_CODE (operands[2]) == CONST_INT);\n+      gcc_assert ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) <= 3);\n       operands[1] = gen_rtx_MULT (DImode, operands[1],\n \t\t\t\t  GEN_INT (1 << INTVAL (operands[2])));\n       return \"lea{q}\\t{%a1, %0|%0, %a1}\";\n@@ -10152,8 +10129,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       return \"add{q}\\t{%0, %0|%0, %0}\";\n \n     default:\n@@ -10287,10 +10263,8 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n-      if (!rtx_equal_p (operands[0], operands[1]))\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n+      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       return \"add{l}\\t{%0, %0|%0, %0}\";\n \n     case TYPE_LEA:\n@@ -10375,8 +10349,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       return \"add{l}\\t{%k0, %k0|%k0, %k0}\";\n \n     case TYPE_LEA:\n@@ -10436,8 +10409,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       return \"add{l}\\t{%0, %0|%0, %0}\";\n \n     default:\n@@ -10474,8 +10446,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       return \"add{l}\\t{%k0, %k0|%k0, %k0}\";\n \n     default:\n@@ -10518,8 +10489,7 @@\n     case TYPE_LEA:\n       return \"#\";\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       return \"add{w}\\t{%0, %0|%0, %0}\";\n \n     default:\n@@ -10555,8 +10525,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       return \"add{w}\\t{%0, %0|%0, %0}\";\n \n     default:\n@@ -10596,8 +10565,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       return \"add{w}\\t{%0, %0|%0, %0}\";\n \n     default:\n@@ -10643,8 +10611,7 @@\n     case TYPE_LEA:\n       return \"#\";\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       if (REG_P (operands[1]) && !ANY_QI_REG_P (operands[1]))\n         return \"add{l}\\t{%k0, %k0|%k0, %k0}\";\n       else\n@@ -10698,8 +10665,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       if (REG_P (operands[1]) && !ANY_QI_REG_P (operands[1]))\n         return \"add{l}\\t{%k0, %k0|%k0, %k0}\";\n       else\n@@ -10757,8 +10723,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ALU:\n-      if (operands[2] != const1_rtx)\n-\tabort ();\n+      gcc_assert (operands[2] == const1_rtx);\n       return \"add{b}\\t{%0, %0|%0, %0}\";\n \n     default:\n@@ -18284,7 +18249,7 @@\n       return \"lea{l}\\t{%a2, %0|%0, %a2}\";\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set (attr \"type\")\n@@ -18327,7 +18292,7 @@\n       return \"lea{q}\\t{%a2, %0|%0, %a2}\";\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set (attr \"type\")\n@@ -18358,7 +18323,7 @@\n       return \"lea{q}\\t{%a2, %0|%0, %a2}\";\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"alu,lea\")\n@@ -19676,12 +19641,10 @@\n   int rw = INTVAL (operands[1]);\n   int locality = INTVAL (operands[2]);\n \n-  if (rw != 0 && rw != 1)\n-    abort ();\n-  if (locality < 0 || locality > 3)\n-    abort ();\n-  if (GET_MODE (operands[0]) != Pmode && GET_MODE (operands[0]) != VOIDmode)\n-    abort ();\n+  gcc_assert (rw == 0 || rw == 1);\n+  gcc_assert (locality >= 0 && locality <= 3);\n+  gcc_assert (GET_MODE (operands[0]) == Pmode\n+\t      || GET_MODE (operands[0]) == VOIDmode);\n \n   /* Use 3dNOW prefetch in case we are asking for write prefetch not\n      supported by SSE counterpart or the SSE prefetch is not available\n@@ -19704,8 +19667,7 @@\n   };\n \n   int locality = INTVAL (operands[1]);\n-  if (locality < 0 || locality > 3)\n-    abort ();\n+  gcc_assert (locality >= 0 && locality <= 3);\n \n   return patterns[locality];  \n }\n@@ -19723,8 +19685,7 @@\n   };\n \n   int locality = INTVAL (operands[1]);\n-  if (locality < 0 || locality > 3)\n-    abort ();\n+  gcc_assert (locality >= 0 && locality <= 3);\n \n   return patterns[locality];  \n }"}, {"sha": "0d1546808c5404d7db6b3e6263c676c6219e8a35", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7637e42c0ea900423b80d67bec1b23fa7da24b66/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7637e42c0ea900423b80d67bec1b23fa7da24b66/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=7637e42c0ea900423b80d67bec1b23fa7da24b66", "patch": "@@ -195,7 +195,7 @@\n       break;\n \n       default:\n-\tabort ();\n+\tgcc_unreachable ();\n     }\n \n   return 0;\n@@ -275,7 +275,7 @@\n       break;\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n   return 0;\n })\n@@ -359,7 +359,7 @@\n       return 0;\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n })\n \n@@ -656,8 +656,10 @@\n   (match_operand 0 \"address_operand\")\n {\n   struct ix86_address parts;\n-  if (! ix86_decompose_address (op, &parts))\n-    abort ();\n+  int ok;\n+\n+  ok = ix86_decompose_address (op, &parts);\n+  gcc_assert (ok);\n   return parts.seg == SEG_DEFAULT;\n })\n \n@@ -666,6 +668,7 @@\n   (match_operand 0 \"general_operand\")\n {\n   struct ix86_address parts;\n+  int ok;\n \n   /* Registers and immediate operands are always \"aligned\".  */\n   if (GET_CODE (op) != MEM)\n@@ -682,8 +685,8 @@\n     return 1;\n \n   /* Decode the address.  */\n-  if (!ix86_decompose_address (op, &parts))\n-    abort ();\n+  ok = ix86_decompose_address (op, &parts);\n+  gcc_assert (ok);\n \n   /* Look for some component that isn't known to be aligned.  */\n   if (parts.index)\n@@ -712,8 +715,10 @@\n   (match_operand 0 \"memory_operand\")\n {\n   struct ix86_address parts;\n-  if (!ix86_decompose_address (XEXP (op, 0), &parts))\n-    abort ();\n+  int ok;\n+\n+  ok = ix86_decompose_address (XEXP (op, 0), &parts);\n+  gcc_assert (ok);\n   return parts.disp != NULL_RTX;\n })\n "}, {"sha": "ee2e6147a15c9bd927132d8bb585e8fdbe5f8b27", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7637e42c0ea900423b80d67bec1b23fa7da24b66/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7637e42c0ea900423b80d67bec1b23fa7da24b66/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7637e42c0ea900423b80d67bec1b23fa7da24b66", "patch": "@@ -75,7 +75,7 @@\n       else\n \treturn \"movdqa\\t{%1, %0|%0, %1}\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n@@ -161,7 +161,7 @@\n       else\n \treturn \"movapd\\t{%1, %0|%0, %1}\";\n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")"}]}