{"sha": "65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmYTc5YzNkYmYxNGVlOWIyNGVjMjNiNjg1ZmJkZWRlZWFkY2E5OA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-08-21T02:00:51Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-08-21T02:00:51Z"}, "message": "altivec.h (vec_cpsgn): New #define.\n\n[gcc]\n\n2014-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_cpsgn): New #define.\n\t(vec_mergee): Likewise.\n\t(vec_mergeo): Likewise.\n\t(vec_cntlz): Likewise.\n\t* config/rs600/rs6000-c.c (altivec_overloaded_builtins): Add new\n\tentries for VEC_AND, VEC_ANDC, VEC_MERGEH, VEC_MERGEL, VEC_NOR,\n\tVEC_OR, VEC_PACKSU, VEC_XOR, VEC_PERM, VEC_SEL, VEC_VCMPGT_P,\n\tVMRGEW, and VMRGOW.\n\t* doc/extend.texi: Document various forms of vec_cpsgn,\n\tvec_splats, vec_and, vec_andc, vec_mergeh, vec_mergel, vec_nor,\n\tvec_or, vec_perm, vec_sel, vec_sub, vec_xor, vec_all_eq,\n\tvec_all_ge, vec_all_gt, vec_all_le, vec_all_lt, vec_all_ne,\n\tvec_any_eq, vec_any_ge, vec_any_gt, vec_any_le, vec_any_lt,\n\tvec_any_ne, vec_mergee, vec_mergeo, vec_packsu, and vec_cntlz.\n\n[gcc/testsuite]\n\n2014-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* testsuite/gcc.target/powerpc/builtins-1.c: New test.\n\nFrom-SVN: r214255", "tree": {"sha": "7f7e9e0b313754df8a3d54333b6f1e9a99371379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7e9e0b313754df8a3d54333b6f1e9a99371379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fa6eb35446c6fc17b41caa615e700420eb5f7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa6eb35446c6fc17b41caa615e700420eb5f7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa6eb35446c6fc17b41caa615e700420eb5f7be"}], "stats": {"total": 375, "additions": 371, "deletions": 4}, "files": [{"sha": "e997a32f19549ab248d3fbe2b70181c29da4a84e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "patch": "@@ -1,3 +1,20 @@\n+2014-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_cpsgn): New #define.\n+\t(vec_mergee): Likewise.\n+\t(vec_mergeo): Likewise.\n+\t(vec_cntlz): Likewise.\n+\t* config/rs600/rs6000-c.c (altivec_overloaded_builtins): Add new\n+\tentries for VEC_AND, VEC_ANDC, VEC_MERGEH, VEC_MERGEL, VEC_NOR,\n+\tVEC_OR, VEC_PACKSU, VEC_XOR, VEC_PERM, VEC_SEL, VEC_VCMPGT_P,\n+\tVMRGEW, and VMRGOW.\n+\t* doc/extend.texi: Document various forms of vec_cpsgn,\n+\tvec_splats, vec_and, vec_andc, vec_mergeh, vec_mergel, vec_nor,\n+\tvec_or, vec_perm, vec_sel, vec_sub, vec_xor, vec_all_eq,\n+\tvec_all_ge, vec_all_gt, vec_all_le, vec_all_lt, vec_all_ne,\n+\tvec_any_eq, vec_any_ge, vec_any_gt, vec_any_le, vec_any_lt,\n+\tvec_any_ne, vec_mergee, vec_mergeo, vec_packsu, and vec_cntlz.\n+\n 2014-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (context.h): New include."}, {"sha": "560501beb99f35eadce817876a6695813e1cbc5d", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "patch": "@@ -124,6 +124,7 @@\n #define vec_vcfux __builtin_vec_vcfux\n #define vec_cts __builtin_vec_cts\n #define vec_ctu __builtin_vec_ctu\n+#define vec_cpsgn __builtin_vec_copysign\n #define vec_expte __builtin_vec_expte\n #define vec_floor __builtin_vec_floor\n #define vec_loge __builtin_vec_loge\n@@ -214,8 +215,10 @@\n #define vec_lvsl __builtin_vec_lvsl\n #define vec_lvsr __builtin_vec_lvsr\n #define vec_max __builtin_vec_max\n+#define vec_mergee __builtin_vec_vmrgew\n #define vec_mergeh __builtin_vec_mergeh\n #define vec_mergel __builtin_vec_mergel\n+#define vec_mergeo __builtin_vec_vmrgow\n #define vec_min __builtin_vec_min\n #define vec_mladd __builtin_vec_mladd\n #define vec_msum __builtin_vec_msum\n@@ -336,6 +339,7 @@\n #define vec_vadduqm __builtin_vec_vadduqm\n #define vec_vbpermq __builtin_vec_vbpermq\n #define vec_vclz __builtin_vec_vclz\n+#define vec_cntlz __builtin_vec_vclz\n #define vec_vclzb __builtin_vec_vclzb\n #define vec_vclzd __builtin_vec_vclzd\n #define vec_vclzh __builtin_vec_vclzh"}, {"sha": "7cc61e156ed258a164084d28566e667e0554515a", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "patch": "@@ -883,6 +883,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n     RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_AND, ALTIVEC_BUILTIN_VAND,\n@@ -937,6 +949,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n     RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n@@ -1602,6 +1626,16 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n   { ALTIVEC_BUILTIN_VEC_MERGEH, VSX_BUILTIN_VEC_MERGEH_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEH, VSX_BUILTIN_VEC_MERGEH_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEH, VSX_BUILTIN_VEC_MERGEH_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEH, VSX_BUILTIN_VEC_MERGEH_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEH, VSX_BUILTIN_VEC_MERGEH_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEH, VSX_BUILTIN_VEC_MERGEH_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMRGHW, ALTIVEC_BUILTIN_VMRGHW,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMRGHW, ALTIVEC_BUILTIN_VMRGHW,\n@@ -1650,6 +1684,16 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n   { ALTIVEC_BUILTIN_VEC_MERGEL, VSX_BUILTIN_VEC_MERGEL_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEL, VSX_BUILTIN_VEC_MERGEL_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEL, VSX_BUILTIN_VEC_MERGEL_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEL, VSX_BUILTIN_VEC_MERGEL_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEL, VSX_BUILTIN_VEC_MERGEL_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEL, VSX_BUILTIN_VEC_MERGEL_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMRGLW, ALTIVEC_BUILTIN_VMRGLW,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMRGLW, ALTIVEC_BUILTIN_VMRGLW,\n@@ -1818,6 +1862,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n@@ -1848,6 +1904,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n     RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n@@ -1952,6 +2020,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_PACKSU, P8V_BUILTIN_VPKSDUS,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_PACKSU, P8V_BUILTIN_VPKSDUS,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKSWUS, ALTIVEC_BUILTIN_VPKSWUS,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKSHUS, ALTIVEC_BUILTIN_VPKSHUS,\n@@ -2525,6 +2595,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n     RS6000_BTI_V2DF, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n+    RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n@@ -2785,6 +2867,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_4SI,\n@@ -2825,6 +2909,12 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V2DI },\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DI },\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_bool_V4SI },\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_4SF,\n@@ -3438,6 +3528,18 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI },\n   { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTSW_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, P8V_BUILTIN_VCMPGTUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, P8V_BUILTIN_VCMPGTUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, P8V_BUILTIN_VCMPGTUD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, P8V_BUILTIN_VCMPGTSD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, P8V_BUILTIN_VCMPGTSD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_VCMPGT_P, P8V_BUILTIN_VCMPGTSD_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_V2DI },\n   { ALTIVEC_BUILTIN_VEC_VCMPGT_P, ALTIVEC_BUILTIN_VCMPGTFP_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n   { ALTIVEC_BUILTIN_VEC_VCMPGT_P, VSX_BUILTIN_XVCMPGTDP_P,\n@@ -3896,12 +3998,16 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGEW, P8V_BUILTIN_VMRGEW,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n \n   { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n+  { P8V_BUILTIN_VEC_VMRGOW, P8V_BUILTIN_VMRGOW,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n \n   { P8V_BUILTIN_VEC_VPOPCNT, P8V_BUILTIN_VPOPCNTB,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },"}, {"sha": "ba8bf02838ce789b4438d36aab900828d7229ead", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 102, "deletions": 4, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "patch": "@@ -13878,6 +13878,8 @@ vector bool int vec_cmplt (vector unsigned int, vector unsigned int);\n vector bool int vec_cmplt (vector signed int, vector signed int);\n vector bool int vec_cmplt (vector float, vector float);\n \n+vector float vec_cpsgn (vector float, vector float);\n+\n vector float vec_ctf (vector unsigned int, const int);\n vector float vec_ctf (vector signed int, const int);\n \n@@ -14724,6 +14726,14 @@ vector signed int vec_splat (vector signed int, const int);\n vector unsigned int vec_splat (vector unsigned int, const int);\n vector bool int vec_splat (vector bool int, const int);\n \n+vector signed char vec_splats (signed char);\n+vector unsigned char vec_splats (unsigned char);\n+vector signed short vec_splats (signed short);\n+vector unsigned short vec_splats (unsigned short);\n+vector signed int vec_splats (signed int);\n+vector unsigned int vec_splats (unsigned int);\n+vector float vec_splats (float);\n+\n vector float vec_vspltw (vector float, const int);\n vector signed int vec_vspltw (vector signed int, const int);\n vector unsigned int vec_vspltw (vector unsigned int, const int);\n@@ -15427,15 +15437,28 @@ vector double vec_add (vector double, vector double);\n vector double vec_and (vector double, vector double);\n vector double vec_and (vector double, vector bool long);\n vector double vec_and (vector bool long, vector double);\n+vector long vec_and (vector long, vector long);\n+vector long vec_and (vector long, vector bool long);\n+vector long vec_and (vector bool long, vector long);\n+vector unsigned long vec_and (vector unsigned long, vector unsigned long);\n+vector unsigned long vec_and (vector unsigned long, vector bool long);\n+vector unsigned long vec_and (vector bool long, vector unsigned long);\n vector double vec_andc (vector double, vector double);\n vector double vec_andc (vector double, vector bool long);\n vector double vec_andc (vector bool long, vector double);\n+vector long vec_andc (vector long, vector long);\n+vector long vec_andc (vector long, vector bool long);\n+vector long vec_andc (vector bool long, vector long);\n+vector unsigned long vec_andc (vector unsigned long, vector unsigned long);\n+vector unsigned long vec_andc (vector unsigned long, vector bool long);\n+vector unsigned long vec_andc (vector bool long, vector unsigned long);\n vector double vec_ceil (vector double);\n vector bool long vec_cmpeq (vector double, vector double);\n vector bool long vec_cmpge (vector double, vector double);\n vector bool long vec_cmpgt (vector double, vector double);\n vector bool long vec_cmple (vector double, vector double);\n vector bool long vec_cmplt (vector double, vector double);\n+vector double vec_cpsgn (vector double, vector double);\n vector float vec_div (vector float, vector float);\n vector double vec_div (vector double, vector double);\n vector double vec_floor (vector double);\n@@ -15447,6 +15470,18 @@ vector unsigned char vec_lvsl (int, const volatile double *);\n vector unsigned char vec_lvsr (int, const volatile double *);\n vector double vec_madd (vector double, vector double, vector double);\n vector double vec_max (vector double, vector double);\n+vector signed long vec_mergeh (vector signed long, vector signed long);\n+vector signed long vec_mergeh (vector signed long, vector bool long);\n+vector signed long vec_mergeh (vector bool long, vector signed long);\n+vector unsigned long vec_mergeh (vector unsigned long, vector unsigned long);\n+vector unsigned long vec_mergeh (vector unsigned long, vector bool long);\n+vector unsigned long vec_mergeh (vector bool long, vector unsigned long);\n+vector signed long vec_mergel (vector signed long, vector signed long);\n+vector signed long vec_mergel (vector signed long, vector bool long);\n+vector signed long vec_mergel (vector bool long, vector signed long);\n+vector unsigned long vec_mergel (vector unsigned long, vector unsigned long);\n+vector unsigned long vec_mergel (vector unsigned long, vector bool long);\n+vector unsigned long vec_mergel (vector bool long, vector unsigned long);\n vector double vec_min (vector double, vector double);\n vector float vec_msub (vector float, vector float, vector float);\n vector double vec_msub (vector double, vector double, vector double);\n@@ -15458,27 +15493,58 @@ vector float vec_nmadd (vector float, vector float, vector float);\n vector double vec_nmadd (vector double, vector double, vector double);\n vector double vec_nmsub (vector double, vector double, vector double);\n vector double vec_nor (vector double, vector double);\n+vector long vec_nor (vector long, vector long);\n+vector long vec_nor (vector long, vector bool long);\n+vector long vec_nor (vector bool long, vector long);\n+vector unsigned long vec_nor (vector unsigned long, vector unsigned long);\n+vector unsigned long vec_nor (vector unsigned long, vector bool long);\n+vector unsigned long vec_nor (vector bool long, vector unsigned long);\n vector double vec_or (vector double, vector double);\n vector double vec_or (vector double, vector bool long);\n vector double vec_or (vector bool long, vector double);\n-vector double vec_perm (vector double,\n-                        vector double,\n-                        vector unsigned char);\n+vector long vec_or (vector long, vector long);\n+vector long vec_or (vector long, vector bool long);\n+vector long vec_or (vector bool long, vector long);\n+vector unsigned long vec_or (vector unsigned long, vector unsigned long);\n+vector unsigned long vec_or (vector unsigned long, vector bool long);\n+vector unsigned long vec_or (vector bool long, vector unsigned long);\n+vector double vec_perm (vector double, vector double, vector unsigned char);\n+vector long vec_perm (vector long, vector long, vector unsigned char);\n+vector unsigned long vec_perm (vector unsigned long, vector unsigned long,\n+                               vector unsigned char);\n vector double vec_rint (vector double);\n vector double vec_recip (vector double, vector double);\n vector double vec_rsqrt (vector double);\n vector double vec_rsqrte (vector double);\n vector double vec_sel (vector double, vector double, vector bool long);\n vector double vec_sel (vector double, vector double, vector unsigned long);\n-vector double vec_sub (vector double, vector double);\n+vector long vec_sel (vector long, vector long, vector long);\n+vector long vec_sel (vector long, vector long, vector unsigned long);\n+vector long vec_sel (vector long, vector long, vector bool long);\n+vector unsigned long vec_sel (vector unsigned long, vector unsigned long,\n+                              vector long);\n+vector unsigned long vec_sel (vector unsigned long, vector unsigned long,\n+                              vector unsigned long);\n+vector unsigned long vec_sel (vector unsigned long, vector unsigned long,\n+                              vector bool long);\n+vector double vec_splats (double);\n+vector signed long vec_splats (signed long);\n+vector unsigned long vec_splats (unsigned long);\n vector float vec_sqrt (vector float);\n vector double vec_sqrt (vector double);\n void vec_st (vector double, int, vector double *);\n void vec_st (vector double, int, double *);\n+vector double vec_sub (vector double, vector double);\n vector double vec_trunc (vector double);\n vector double vec_xor (vector double, vector double);\n vector double vec_xor (vector double, vector bool long);\n vector double vec_xor (vector bool long, vector double);\n+vector long vec_xor (vector long, vector long);\n+vector long vec_xor (vector long, vector bool long);\n+vector long vec_xor (vector bool long, vector long);\n+vector unsigned long vec_xor (vector unsigned long, vector unsigned long);\n+vector unsigned long vec_xor (vector unsigned long, vector bool long);\n+vector unsigned long vec_xor (vector bool long, vector unsigned long);\n int vec_all_eq (vector double, vector double);\n int vec_all_ge (vector double, vector double);\n int vec_all_gt (vector double, vector double);\n@@ -15607,17 +15673,30 @@ vector unsigned long long vec_add (vector unsigned long long,\n                                    vector unsigned long long);\n \n int vec_all_eq (vector long long, vector long long);\n+int vec_all_eq (vector unsigned long long, vector unsigned long long);\n int vec_all_ge (vector long long, vector long long);\n+int vec_all_ge (vector unsigned long long, vector unsigned long long);\n int vec_all_gt (vector long long, vector long long);\n+int vec_all_gt (vector unsigned long long, vector unsigned long long);\n int vec_all_le (vector long long, vector long long);\n+int vec_all_le (vector unsigned long long, vector unsigned long long);\n int vec_all_lt (vector long long, vector long long);\n+int vec_all_lt (vector unsigned long long, vector unsigned long long);\n int vec_all_ne (vector long long, vector long long);\n+int vec_all_ne (vector unsigned long long, vector unsigned long long);\n+\n int vec_any_eq (vector long long, vector long long);\n+int vec_any_eq (vector unsigned long long, vector unsigned long long);\n int vec_any_ge (vector long long, vector long long);\n+int vec_any_ge (vector unsigned long long, vector unsigned long long);\n int vec_any_gt (vector long long, vector long long);\n+int vec_any_gt (vector unsigned long long, vector unsigned long long);\n int vec_any_le (vector long long, vector long long);\n+int vec_any_le (vector unsigned long long, vector unsigned long long);\n int vec_any_lt (vector long long, vector long long);\n+int vec_any_lt (vector unsigned long long, vector unsigned long long);\n int vec_any_ne (vector long long, vector long long);\n+int vec_any_ne (vector unsigned long long, vector unsigned long long);\n \n vector long long vec_eqv (vector long long, vector long long);\n vector long long vec_eqv (vector bool long long, vector long long);\n@@ -15655,6 +15734,14 @@ vector long long vec_max (vector long long, vector long long);\n vector unsigned long long vec_max (vector unsigned long long,\n                                    vector unsigned long long);\n \n+vector signed int vec_mergee (vector signed int, vector signed int);\n+vector unsigned int vec_mergee (vector unsigned int, vector unsigned int);\n+vector bool int vec_mergee (vector bool int, vector bool int);\n+\n+vector signed int vec_mergeo (vector signed int, vector signed int);\n+vector unsigned int vec_mergeo (vector unsigned int, vector unsigned int);\n+vector bool int vec_mergeo (vector bool int, vector bool int);\n+\n vector long long vec_min (vector long long, vector long long);\n vector unsigned long long vec_min (vector unsigned long long,\n                                    vector unsigned long long);\n@@ -15733,6 +15820,8 @@ vector unsigned int vec_packs (vector unsigned long long,\n                                vector unsigned long long);\n \n vector unsigned int vec_packsu (vector long long, vector long long);\n+vector unsigned int vec_packsu (vector unsigned long long,\n+                                vector unsigned long long);\n \n vector long long vec_rl (vector long long,\n                          vector unsigned long long);\n@@ -15774,6 +15863,15 @@ vector unsigned long long vec_vaddudm (vector unsigned long long,\n vector long long vec_vbpermq (vector signed char, vector signed char);\n vector long long vec_vbpermq (vector unsigned char, vector unsigned char);\n \n+vector long long vec_cntlz (vector long long);\n+vector unsigned long long vec_cntlz (vector unsigned long long);\n+vector int vec_cntlz (vector int);\n+vector unsigned int vec_cntlz (vector int);\n+vector short vec_cntlz (vector short);\n+vector unsigned short vec_cntlz (vector unsigned short);\n+vector signed char vec_cntlz (vector signed char);\n+vector unsigned char vec_cntlz (vector unsigned char);\n+\n vector long long vec_vclz (vector long long);\n vector unsigned long long vec_vclz (vector unsigned long long);\n vector int vec_vclz (vector int);"}, {"sha": "c5b9d83811c0664f3f7974ba8a9c16a0c959c12e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "patch": "@@ -1,3 +1,7 @@\n+2014-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* testsuite/gcc.target/powerpc/builtins-1.c: New test.\n+\n 2014-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/swaps-p8-1.c: New test."}, {"sha": "a22e6f645c0a25161f40df0f5afe8d81b22e2670", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.c", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fa79c3dbf14ee9b24ec23b685fbdedeeadca98/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c?ref=65fa79c3dbf14ee9b24ec23b685fbdedeeadca98", "patch": "@@ -0,0 +1,138 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-options \"-mcpu=power8 -O0\" } */\n+\n+/* Test that a number of newly added builtin overloads are accepted\n+   by the compiler.  */\n+\n+#include <altivec.h>\n+\n+int main ()\n+{\n+  vector float fa = {1.0, 2.0, 3.0, -4.0};\n+  vector float fb = {-2.0, -3.0, -4.0, -5.0};\n+  vector float fc = vec_cpsgn (fa, fb);\n+\n+  vector long long la = {5L, 14L};\n+  vector long long lb = {3L, 86L};\n+  vector long long lc = vec_and (la, lb);\n+  vector bool long long ld = {0, -1};\n+  vector long long le = vec_and (la, ld);\n+  vector long long lf = vec_and (ld, lb);\n+\n+  vector unsigned long long ua = {5L, 14L};\n+  vector unsigned long long ub = {3L, 86L};\n+  vector unsigned long long uc = vec_and (ua, ub);\n+  vector bool long long ud = {0, -1};\n+  vector unsigned long long ue = vec_and (ua, ud);\n+  vector unsigned long long uf = vec_and (ud, ub);\n+\n+  vector long long lg = vec_andc (la, lb);\n+  vector long long lh = vec_andc (la, ld);\n+  vector long long li = vec_andc (ld, lb);\n+\n+  vector unsigned long long ug = vec_andc (ua, ub);\n+  vector unsigned long long uh = vec_andc (ua, ud);\n+  vector unsigned long long ui = vec_andc (ud, ub);\n+\n+  vector double da = {1.0, -4.0};\n+  vector double db = {-2.0, 5.0};\n+  vector double dc = vec_cpsgn (da, db);\n+\n+  vector long long lj = vec_mergeh (la, lb);\n+  vector long long lk = vec_mergeh (la, ld);\n+  vector long long ll = vec_mergeh (ld, la);\n+\n+  vector unsigned long long uj = vec_mergeh (ua, ub);\n+  vector unsigned long long uk = vec_mergeh (ua, ud);\n+  vector unsigned long long ul = vec_mergeh (ud, ua);\n+\n+  vector long long lm = vec_mergel (la, lb);\n+  vector long long ln = vec_mergel (la, ld);\n+  vector long long lo = vec_mergel (ld, la);\n+\n+  vector unsigned long long um = vec_mergel (ua, ub);\n+  vector unsigned long long un = vec_mergel (ua, ud);\n+  vector unsigned long long uo = vec_mergel (ud, ua);\n+\n+  vector long long lp = vec_nor (la, lb);\n+  vector long long lq = vec_nor (la, ld);\n+  vector long long lr = vec_nor (ld, la);\n+\n+  vector unsigned long long up = vec_nor (ua, ub);\n+  vector unsigned long long uq = vec_nor (ua, ud);\n+  vector unsigned long long ur = vec_nor (ud, ua);\n+\n+  vector long long ls = vec_or (la, lb);\n+  vector long long lt = vec_or (la, ld);\n+  vector long long lu = vec_or (ld, la);\n+\n+  vector unsigned long long us = vec_or (ua, ub);\n+  vector unsigned long long ut = vec_or (ua, ud);\n+  vector unsigned long long uu = vec_or (ud, ua);\n+\n+  vector unsigned char ca = {0,4,8,1,5,9,2,6,10,3,7,11,15,12,14,13};\n+  vector long long lv = vec_perm (la, lb, ca);\n+  vector unsigned long long uv = vec_perm (ua, ub, ca);\n+\n+  vector long long lw = vec_sel (la, lb, lc);\n+  vector long long lx = vec_sel (la, lb, uc);\n+  vector long long ly = vec_sel (la, lb, ld);\n+\n+  vector unsigned long long uw = vec_sel (ua, ub, lc);\n+  vector unsigned long long ux = vec_sel (ua, ub, uc);\n+  vector unsigned long long uy = vec_sel (ua, ub, ld);\n+\n+  vector long long lz = vec_xor (la, lb);\n+  vector long long l0 = vec_xor (la, ld);\n+  vector long long l1 = vec_xor (ld, la);\n+\n+  vector unsigned long long uz = vec_xor (ua, ub);\n+  vector unsigned long long u0 = vec_xor (ua, ud);\n+  vector unsigned long long u1 = vec_xor (ud, ua);\n+\n+  int ia = vec_all_eq (ua, ub);\n+  int ib = vec_all_ge (ua, ub);\n+  int ic = vec_all_gt (ua, ub);\n+  int id = vec_all_le (ua, ub);\n+  int ie = vec_all_lt (ua, ub);\n+  int ig = vec_all_ne (ua, ub);\n+\n+  int ih = vec_any_eq (ua, ub);\n+  int ii = vec_any_ge (ua, ub);\n+  int ij = vec_any_gt (ua, ub);\n+  int ik = vec_any_le (ua, ub);\n+  int il = vec_any_lt (ua, ub);\n+  int im = vec_any_ne (ua, ub);\n+\n+  vector int sia = {9, 16, 25, 36};\n+  vector int sib = {-8, -27, -64, -125};\n+  vector int sic = vec_mergee (sia, sib);\n+  vector int sid = vec_mergeo (sia, sib);\n+\n+  vector unsigned int uia = {9, 16, 25, 36};\n+  vector unsigned int uib = {8, 27, 64, 125};\n+  vector unsigned int uic = vec_mergee (uia, uib);\n+  vector unsigned int uid = vec_mergeo (uia, uib);\n+\n+  vector bool int bia = {0, -1, -1, 0};\n+  vector bool int bib = {-1, -1, 0, -1};\n+  vector bool int bic = vec_mergee (bia, bib);\n+  vector bool int bid = vec_mergeo (bia, bib);\n+\n+  vector unsigned int uie = vec_packsu (ua, ub);\n+\n+  vector long long l2 = vec_cntlz (la);\n+  vector unsigned long long u2 = vec_cntlz (ua);\n+  vector int sie = vec_cntlz (sia);\n+  vector unsigned int uif = vec_cntlz (uia);\n+  vector short ssa = {20, -40, -60, 80, 100, -120, -140, 160};\n+  vector short ssb = vec_cntlz (ssa);\n+  vector unsigned short usa = {81, 72, 63, 54, 45, 36, 27, 18};\n+  vector unsigned short usb = vec_cntlz (usa);\n+  vector signed char sca = {-4, 3, -9, 15, -31, 31, 0, 0,\n+\t\t            1, 117, -36, 99, 98, 97, 96, 95};\n+  vector signed char scb = vec_cntlz (sca);\n+  vector unsigned char cb = vec_cntlz (ca);\n+\n+  return 0;\n+}"}]}