{"sha": "78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "node_id": "C_kwDOANBUbNoAKDc4YjViNzZmOTM1ZjViYTNhNWQ0YjU4Y2NkMGFiMjFiN2JmZTZmMzk", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-15T09:29:31Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:20Z"}, "message": "arm: improve tests and fix vadd*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vaddlvq_p_<supf>v4si)\n\t(mve_vaddq_n_<supf><mode>, mve_vaddvaq_<supf><mode>)\n\t(mve_vaddlvaq_<supf>v4si, mve_vaddq_n_f<mode>)\n\t(mve_vaddlvaq_p_<supf>v4si, mve_vaddq<mode>, mve_vaddq_f<mode>):\n\tFix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_s32.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvaq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddvq_u8.c: Likewise.", "tree": {"sha": "51d978474dfd7f2bb228d63a96df6afb597f49cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d978474dfd7f2bb228d63a96df6afb597f49cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf6b04c6baa12fccc0dad53d45ae808def34fb6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6b04c6baa12fccc0dad53d45ae808def34fb6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6b04c6baa12fccc0dad53d45ae808def34fb6c"}], "stats": {"total": 2116, "additions": 1864, "deletions": 252}, "files": [{"sha": "5ce2a28922509c5fa27f5d44c241dececacbd27b", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -636,7 +636,7 @@\n \t VADDLVQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vaddlv.<supf>32 %Q0, %R0, %q1\"\n+  \"vaddlv.<supf>32\\t%Q0, %R0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -817,7 +817,7 @@\n \t VADDLVQ_P))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vpst\\;vaddlvt.<supf>32 %Q0, %R0, %q1\"\n+  \"vpst\\;vaddlvt.<supf>32\\t%Q0, %R0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n@@ -879,7 +879,7 @@\n \t VADDQ_N))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vadd.i%#<V_sz_elem>\t%q0, %q1, %2\"\n+  \"vadd.i%#<V_sz_elem>\\t%q0, %q1, %2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -894,7 +894,7 @@\n \t VADDVAQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vaddva.<supf>%#<V_sz_elem>\t%0, %q2\"\n+  \"vaddva.<supf>%#<V_sz_elem>\\t%0, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -1834,7 +1834,7 @@\n \t VADDLVAQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vaddlva.<supf>32 %Q0, %R0, %q2\"\n+  \"vaddlva.<supf>32\\t%Q0, %R0, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -1849,7 +1849,7 @@\n \t VADDQ_N_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vadd.f%#<V_sz_elem>\t%q0, %q1, %2\"\n+  \"vadd.f%#<V_sz_elem>\\t%q0, %q1, %2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -3717,7 +3717,7 @@\n \t VADDLVAQ_P))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vpst\\;vaddlvat.<supf>32 %Q0, %R0, %q2\"\n+  \"vpst\\;vaddlvat.<supf>32\\t%Q0, %R0, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n ;;\n@@ -8928,7 +8928,7 @@\n \t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vadd.i%#<V_sz_elem>  %q0, %q1, %q2\"\n+  \"vadd.i%#<V_sz_elem>\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -8942,7 +8942,7 @@\n \t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vadd.f%#<V_sz_elem> %q0, %q1, %q2\"\n+  \"vadd.f%#<V_sz_elem>\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "3a9504df94edbe383116b15492b08e7fa804199f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvaq_p_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvat.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n foo (int64_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vaddlvaq_p_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddlvat.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvat.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n foo1 (int64_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vaddlvaq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddlvat.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6e2613ee09972506dcccc2c1cc906984f8944bd1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvaq_p_u32.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_p_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvat.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint64_t\n foo (uint64_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vaddlvaq_p_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddlvat.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvat.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint64_t\n foo1 (uint64_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vaddlvaq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddlvat.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvat.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint64_t\n+foo2 (uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddlvaq_p (1, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "180dc9b2debd81a7c3d59ab5e105d5b3096b6691", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvaq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddlva.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n foo (int64_t a, int32x4_t b)\n {\n   return vaddlvaq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddlva.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddlva.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n foo1 (int64_t a, int32x4_t b)\n {\n   return vaddlvaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddlva.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1f899e92c3cef19b2d63672cac88abf46aed02c7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvaq_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvaq_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddlva.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint64_t\n foo (uint64_t a, uint32x4_t b)\n {\n   return vaddlvaq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddlva.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddlva.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint64_t\n foo1 (uint64_t a, uint32x4_t b)\n {\n   return vaddlvaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddlva.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvaddlva.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint64_t\n+foo2 (uint32x4_t b)\n+{\n+  return vaddlvaq (1, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5b22da49c1d050d8b5204ad4a7cf53de735b59df", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvq_p_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvt.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n foo (int32x4_t a, mve_pred16_t p)\n {\n   return vaddlvq_p_s32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddlvt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvt.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n foo1 (int32x4_t a, mve_pred16_t p)\n {\n   return vaddlvq_p (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddlvt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2c85139435a509002fcff39716c1ba8799591885", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvq_p_u32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvt.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint64_t\n foo (uint32x4_t a, mve_pred16_t p)\n {\n   return vaddlvq_p_u32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddlvt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddlvt.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint64_t\n foo1 (uint32x4_t a, mve_pred16_t p)\n {\n   return vaddlvq_p (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddlvt.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bdb04b5214f6bfeda329845e878879417d6c4a1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvq_s32.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddlv.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n foo (int32x4_t a)\n {\n   return vaddlvq_s32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddlv.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddlv.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n foo1 (int32x4_t a)\n {\n-  return vaddlvq_s32 (a);\n+  return vaddlvq (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddlv.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bcd9d21df4fd66f0f96095af859779cfb48f86c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvq_u32.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddlv.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint64_t\n foo (uint32x4_t a)\n {\n-    return vaddlvq_u32 (a);\n+  return vaddlvq_u32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddlv.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddlv.u32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint64_t\n foo1 (uint32x4_t a)\n {\n-    return vaddlvq (a);\n+  return vaddlvq (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddlv.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "58462177473f6bb8a51c2e024a1c435fd260c4a4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_f16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vaddq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f3fcd286f4d395019761a30de72c796af5bb9f2b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_f32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vaddq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "291e65f32cc7c456b717e1c6ad9057d125dd03e6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_f16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vaddq_m_f16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0346f65a33082501fd2661641f024f6021f8123d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_f32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vaddq_m_f32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9d57bbd27b984b1fbbc112e5af04d6dc72628c43", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_f16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vaddq_m_n_f16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float16x8_t\n+foo2 (float16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9939aa0012d0d1c4aa027f080f32e9196fbd30b2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_f32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vaddq_m_n_f32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float32x4_t\n+foo2 (float32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "50b138fc7633bb3d50adc5d12938d91ab655b798", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vaddq_m_n_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "66c2be777ce53e7ed28a6ac41a8845836feba634", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vaddq_m_n_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "87dba75dff1b4a52f1907c877998e639c69b73d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vaddq_m_n_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a8e9ea576b30331e91c3c8fc33c5c4f44b21ad1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vaddq_m_n_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "045e5024d5dafc9f48e8105ace33549aff4a4804", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_u32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vaddq_m_n_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3d17afcbe56e2fef95b77fc7c6d7a95a7ea4a3ba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_u8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vaddq_m_n_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "87210a41dae19b30b49871cfee0b73c89f7bfef1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vaddq_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1acb0b67fa9f86502229147fb5fbd622369a993b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vaddq_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6136c54cbb8d85e616c4f6c13ba7b7aa126db865", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vaddq_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b60d98e06918a8809e1d60ec33d38b9bc4ae5541", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_u16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vaddq_m_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d56bbae9b03937ff9664a03d24d99b85917faddb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_u32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vaddq_m_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f0b623c3e8d5b9f091caddb6777e338e5d1386e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_u8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vaddq_m_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vaddq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5df23a6e61fff9deabcc4932d654195a76966196", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_f16.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16_t b)\n {\n   return vaddq_n_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvadd.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float16x8_t\n+foo2 (float16x8_t a)\n+{\n+  return vaddq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d07927c427e2a62d12f6d970a9c1c5efa1498413", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_f32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_f32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32_t b)\n {\n   return vaddq_n_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvadd.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float32x4_t\n+foo2 (float32x4_t a)\n+{\n+  return vaddq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9ae30406f516685064650c31863f86a0d1357d14", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16_t b)\n {\n   return vaddq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3271d4d5af14db06a407e3a4ca9ce45c499cdbc2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32_t b)\n {\n   return vaddq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "119fd5d5528d6268dbdb3342e52856f1ff96f5cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vaddq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ef0722e4dcd28f3699b437b1a0bae7869f661b7f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_u16.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16_t b)\n {\n   return vaddq_n_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t a)\n+{\n+  return vaddq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "67513819f398b0c20c3a6096cd481a03c564c115", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32_t b)\n {\n   return vaddq_n_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t a)\n+{\n+  return vaddq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2aa79e5e9168cd5840739378e40b73a809ec2f29", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_n_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_n_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8_t b)\n {\n   return vaddq_n_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t a)\n+{\n+  return vaddq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "24b12a6aee1eb62544c65e45f069e2ab41ff4e78", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vaddq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3fdfa3d86e6fcc406bcb637c7eb019f6986f7887", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vaddq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6b32b8ccfd5e6e2989b7d3bae9960e8b9679dfe5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vaddq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0deefa14ac6b8410131e6c044eca19078127be64", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_u16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vaddq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "44df963f0f87eb4edbce74975874bf2f955aef3b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_u32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vaddq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7349fa165bf972a92a3195cefbe0dbfb2dc07a76", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_u8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vaddq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvadd.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vaddq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b1d48a1d26092c316ba0ba99995bc62acad6ad73", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_f16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vaddq_x_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "047043d6526bb92d8bcb13ebdf9156eee0afeced", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_f32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vaddq_x_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ed67007df51d03ba696985fe12f521b2b0ab2c7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_f16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vaddq_x_n_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float16x8_t\n+foo2 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vaddq_x (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fa17d6b4aa291ab9c1df3300143b63832d1461b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_f32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vaddq_x_n_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float32x4_t\n+foo2 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vaddq_x (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d6c3252132adce68578f7474d0027524aaf40d6b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vaddq_x_n_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c2a861706d907ad69f9ed01c57da85c3833cf0cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vaddq_x_n_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "abc90a4c86b1f67737a76efc8d0f215cbb4c6df5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vaddq_x_n_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8866a07bc8e6b8cc4d6826826c2412abeaa33c19", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vaddq_x_n_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vaddq_x (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4123ad594ed07c08722c72a476635133eab41f7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_u32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vaddq_x_n_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vaddq_x (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d610930a3115bd23117063bacf16e654160be161", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_u8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vaddq_x_n_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vaddq_x (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "323010a6d333e491a03141a36f8488cd23f7e325", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vaddq_x_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "98773e7ba6f4e7d8de072ceee5a5c79f82d4bb17", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vaddq_x_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bff0bda11095140f033d4cb381657d0fb3e39bcf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vaddq_x_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "85f5cd4db7a7724ca520704d7ac5926b28385bb7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_u16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vaddq_x_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ad0e7afbc397c4d7cbfa717513845fca897042f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_u32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vaddq_x_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a3cfc5686e2943ebb35b00959d1c9d9543babf0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_u8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vaddq_x_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddt.i8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vaddq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "16b51514be1b82436a76f827c53ad178dcc0763c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_s16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vaddvaq_p_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vaddvaq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bbf04aa0d0890103e104d27ce72de3421154f06e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vaddvaq_p_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vaddvaq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f06623b18939d90cbcae440ef74beacc9816a74d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vaddvaq_p_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vaddvaq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7bfb4bb9cbe4109ba4c395f23cd56c6112acc7d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_u16.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vaddvaq_p_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vaddvaq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint16x8_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (1, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9aea5caa4fea0abf01b3b9e8dadc3684ba524549", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_u32.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vaddvaq_p_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vaddvaq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (1, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b5113b209c093d4f938b62333be92392a4b03515", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_p_u8.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_p_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vaddvaq_p_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vaddvaq_p (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvat.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvat.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint8x16_t b, mve_pred16_t p)\n+{\n+  return vaddvaq_p (1, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1b9af185a0d29b9a74b5368e99200a931829006a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddva.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int16x8_t b)\n {\n   return vaddvaq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddva.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int16x8_t b)\n {\n   return vaddvaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e25487954d2aa6e1d6f39067e787f7fc052c71e4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddva.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int32x4_t b)\n {\n   return vaddvaq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddva.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int32x4_t b)\n {\n   return vaddvaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d37c916c94dd21d005cad7e72a27ddd6d208e377", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddva.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int8x16_t b)\n {\n   return vaddvaq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddva.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int8x16_t b)\n {\n   return vaddvaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b3583ce57259d1798676662df2190c373fb99f15", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_u16.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddva.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint16x8_t b)\n {\n   return vaddvaq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddva.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint16x8_t b)\n {\n   return vaddvaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvaddva.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint16x8_t b)\n+{\n+  return vaddvaq (1, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "006c0a3734fbb71afc37e6a8fe4e50f0464888cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddva.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint32x4_t b)\n {\n   return vaddvaq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddva.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint32x4_t b)\n {\n   return vaddvaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvaddva.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint32x4_t b)\n+{\n+  return vaddvaq (1, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cfe29bfd7bed494865890dea46f579522eac6913", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvaq_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvaq_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddva.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint8x16_t b)\n {\n   return vaddvaq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddva.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint8x16_t b)\n {\n   return vaddvaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vaddva.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvaddva.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint8x16_t b)\n+{\n+  return vaddvaq (1, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3d19b46fdc6d737e06e3529931d23f0a2c55c6c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_s16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int16x8_t a, mve_pred16_t p)\n {\n   return vaddvq_p_s16 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int16x8_t a, mve_pred16_t p)\n {\n   return vaddvq_p (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a148d15ead1743a4dcac3ee3eee957e460027fd4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32x4_t a, mve_pred16_t p)\n {\n   return vaddvq_p_s32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32x4_t a, mve_pred16_t p)\n {\n   return vaddvq_p (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f0b0c499d0d51e259404623866d645ec5490661e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int8x16_t a, mve_pred16_t p)\n {\n   return vaddvq_p_s8 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int8x16_t a, mve_pred16_t p)\n {\n   return vaddvq_p (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2fb316c50abcbb43ca9ec7d638936c2a8e1d8571", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_u16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint16x8_t a, mve_pred16_t p)\n {\n   return vaddvq_p_u16 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint16x8_t a, mve_pred16_t p)\n {\n   return vaddvq_p (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "24bde90ec774c80583ea9a54181d7537891111f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_u32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32x4_t a, mve_pred16_t p)\n {\n   return vaddvq_p_u32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32x4_t a, mve_pred16_t p)\n {\n   return vaddvq_p (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f671094111957de3ca0dc5d26c6424a964c97ef7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_p_u8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_p_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint8x16_t a, mve_pred16_t p)\n {\n   return vaddvq_p_u8 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvaddvt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint8x16_t a, mve_pred16_t p)\n {\n   return vaddvq_p (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vaddvt.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6b9a99f2b0702527db31015677848b44a313d621", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_s16.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddv.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int16x8_t a)\n {\n   return vaddvq_s16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddv.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int16x8_t a)\n {\n-  return vaddvq_s16 (a);\n+  return vaddvq (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "50823b65ecc6aab62d60725acf96a732dfff4537", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_s32.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddv.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32x4_t a)\n {\n   return vaddvq_s32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddv.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32x4_t a)\n {\n-  return vaddvq_s32 (a);\n+  return vaddvq (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "131edbe2b3f81b66de4cf5a3cff1e9595a1c67fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_s8.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_s8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddv.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int8x16_t a)\n {\n   return vaddvq_s8 (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddv.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int8x16_t a)\n {\n   return vaddvq (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7c0ac0e1395d3ef92359705e713dfd05ecb85ad0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_u16.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u16.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddv.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint16x8_t a)\n {\n-    return vaddvq_u16 (a);\n+  return vaddvq_u16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddv.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint16x8_t a)\n {\n-    return vaddvq (a);\n+  return vaddvq (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "40779ed0f999393fa645a6e579e408589020b90d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_u32.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u32.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddv.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32x4_t a)\n {\n-    return vaddvq_u32 (a);\n+  return vaddvq_u32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddv.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32x4_t a)\n {\n-    return vaddvq (a);\n+  return vaddvq (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d2a6ba8f0fb4413c2dfcb28f93a57179edaa3488", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddvq_u8.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddvq_u8.c?ref=78b5b76f935f5ba3a5d4b58ccd0ab21b7bfe6f39", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvaddv.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint8x16_t a)\n {\n-    return vaddvq_u8 (a);\n+  return vaddvq_u8 (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvaddv.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint8x16_t a)\n {\n-    return vaddvq (a);\n+  return vaddvq (a);\n }\n \n-/* { dg-final { scan-assembler \"vaddv.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}