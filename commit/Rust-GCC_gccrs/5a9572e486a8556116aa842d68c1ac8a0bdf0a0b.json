{"sha": "5a9572e486a8556116aa842d68c1ac8a0bdf0a0b", "node_id": "C_kwDOANBUbNoAKDVhOTU3MmU0ODZhODU1NjExNmFhODQyZDY4YzFhYzhhMGJkZjBhMGI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-17T10:46:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-17T17:28:44Z"}, "message": "libstdc++: Simplify std::string constructors\n\nSeveral std::basic_string constructors dispatch to one of the\ntwo-argument overloads of _M_construct, which then dispatches again to\n_M_construct_aux to detect whether the arguments are iterators or not.\nThat then dispatches to one of _M_construct(size_type, char_type) or\n_M_construct(Iter, Iter, iterator_traits<Iter>::iterator_category{}).\n\nFor most of those constructors this is a waste of time, because we know\nthe arguments are already iterators. For basic_string(const CharT*) and\nbasic_string(initializer_list<C>) we know that we call _M_construct with\ntwo pointers, and for basic_string(const basic_string&) we call it with\ntwo const_iterators.  Those constructors can call the three-argument\noverload of _M_construct with the iterator category tag right away,\nwithout the intermediate dispatching.\n\nThe case where this doesn't apply is basic_string(InputIter, InputIter),\nbut for C++11 and later this is constrained so we know it's an iterator\nhere as well. We can restrict the dispatching in this constructor to\nonly be done for C++98 and to call _M_construct_aux directly, which\nallows us to remove the two-argument _M_construct(InputIter, InputIter)\noverload entirely.\n\nN.B. When calling the three-arg _M_construct with pointers or string\niterators, we pass forward_iterator_tag not random_access_iterator_tag.\nThis is because it makes no difference which overload gets called, and\nsimplifies overload resolution to not have to do a base-to-derived\ncheck. If we ever add a new overload of M_construct for random access\niterators we would have to revisit this, but that seems unlikely.\n\nThis patch also moves the __is_null_pointer checks from the three-arg\n_M_construct into the constructors where a null pointer argument is\nactually possible. This avoids redundant checks where we know we have a\nnon-null pointer, or don't have a pointer at all.\n\nFinally, this patch replaces some try-blocks with an RAII type, so that\nmemory is deallocated during unwinding. This avoids the overhead of\ncatching and rethrowing an exception.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (_M_construct_aux): Only define\n\tfor C++98. Remove constexpr.\n\t(_M_construct_aux_2): Likewise.\n\t(_M_construct(InputIter, InputIter)): Remove.\n\t(basic_string(const basic_string&)): Call _M_construct with\n\titerator category argument.\n\t(basic_string(const basic_string&, size_type, const Alloc&)):\n\tLikewise.\n\t(basic_string(const basic_string&, size_type, size_type)):\n\tLikewise.\n\t(basic_string(const charT*, size_type, const Alloc&)): Likewise.\n\tCheck for null pointer.\n\t(basic_string(const charT*, const Alloc&)): Likewise.\n\t(basic_string(initializer_list<charT>, const Alloc&)): Call\n\t_M_construct with iterator category argument.\n\t(basic_string(const basic_string&, const Alloc&)): Likewise.\n\t(basic_string(basic_string&&, const Alloc&)): Likewise.\n\t(basic_string(_InputIter, _InputIter, const Alloc&)): Likewise\n\tfor C++11 and later, call _M_construct_aux for C++98.\n\t* include/bits/basic_string.tcc\n\t(_M_construct(I, I, input_iterator_tag)): Replace try-block with\n\tRAII type.\n\t(_M_construct(I, I, forward_iterator_tag)): Likewise. Remove\n\t__is_null_pointer check.", "tree": {"sha": "ab8f880903de0047b12d4109993c741a235f8936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab8f880903de0047b12d4109993c741a235f8936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a9572e486a8556116aa842d68c1ac8a0bdf0a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9572e486a8556116aa842d68c1ac8a0bdf0a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9572e486a8556116aa842d68c1ac8a0bdf0a0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9572e486a8556116aa842d68c1ac8a0bdf0a0b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afa1083c6ee7b31629fb0c16299b952cb17868c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afa1083c6ee7b31629fb0c16299b952cb17868c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afa1083c6ee7b31629fb0c16299b952cb17868c"}], "stats": {"total": 130, "additions": 74, "deletions": 56}, "files": [{"sha": "d29c9cdc410c7ecc1348a3a682edf24e0cbabbc6", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9572e486a8556116aa842d68c1ac8a0bdf0a0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9572e486a8556116aa842d68c1ac8a0bdf0a0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=5a9572e486a8556116aa842d68c1ac8a0bdf0a0b", "patch": "@@ -262,10 +262,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_destroy(size_type __size) throw()\n       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }\n \n+#if __cplusplus < 201103L || defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS\n       // _M_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIterator is an integral type\n       template<typename _InIterator>\n-\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_construct_aux(_InIterator __beg, _InIterator __end,\n \t\t\t std::__false_type)\n@@ -277,24 +277,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n-\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)\n \t{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }\n \n-      _GLIBCXX20_CONSTEXPR\n       void\n       _M_construct_aux_2(size_type __req, _CharT __c)\n       { _M_construct(__req, __c); }\n-\n-      template<typename _InIterator>\n-\t_GLIBCXX20_CONSTEXPR\n-        void\n-        _M_construct(_InIterator __beg, _InIterator __end)\n-\t{\n-\t  typedef typename std::__is_integer<_InIterator>::__type _Integral;\n-\t  _M_construct_aux(__beg, __end, _Integral());\n-        }\n+#endif\n \n       // For Input Iterators, used in istreambuf_iterators, etc.\n       template<typename _InIterator>\n@@ -514,7 +504,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string(const basic_string& __str)\n       : _M_dataplus(_M_local_data(),\n \t\t    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))\n-      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }\n+      {\n+\t_M_construct(__str._M_data(), __str._M_data() + __str.length(),\n+\t\t     std::forward_iterator_tag());\n+      }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2583. no way to supply an allocator for basic_string(str, pos)\n@@ -531,7 +524,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       {\n \tconst _CharT* __start = __str._M_data()\n \t  + __str._M_check(__pos, \"basic_string::basic_string\");\n-\t_M_construct(__start, __start + __str._M_limit(__pos, npos));\n+\t_M_construct(__start, __start + __str._M_limit(__pos, npos),\n+\t\t     std::forward_iterator_tag());\n       }\n \n       /**\n@@ -547,7 +541,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       {\n \tconst _CharT* __start = __str._M_data()\n \t  + __str._M_check(__pos, \"basic_string::basic_string\");\n-\t_M_construct(__start, __start + __str._M_limit(__pos, __n));\n+\t_M_construct(__start, __start + __str._M_limit(__pos, __n),\n+\t\t     std::forward_iterator_tag());\n       }\n \n       /**\n@@ -564,7 +559,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       {\n \tconst _CharT* __start\n \t  = __str._M_data() + __str._M_check(__pos, \"string::string\");\n-\t_M_construct(__start, __start + __str._M_limit(__pos, __n));\n+\t_M_construct(__start, __start + __str._M_limit(__pos, __n),\n+\t\t     std::forward_iterator_tag());\n       }\n \n       /**\n@@ -580,7 +576,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string(const _CharT* __s, size_type __n,\n \t\t   const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n-      { _M_construct(__s, __s + __n); }\n+      {\n+\t// NB: Not required, but considered best practice.\n+\tif (__s == 0 && __n > 0)\n+\t  std::__throw_logic_error(__N(\"basic_string: \"\n+\t\t\t\t       \"construction from null is not valid\"));\n+\t_M_construct(__s, __s + __n, std::forward_iterator_tag());\n+      }\n \n       /**\n        *  @brief  Construct string as copy of a C string.\n@@ -596,10 +598,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n       {\n-\tconst _CharT* __end = __s ? __s + traits_type::length(__s)\n-\t  // We just need a non-null pointer here to get an exception:\n-\t  : reinterpret_cast<const _CharT*>(__alignof__(_CharT));\n-\t_M_construct(__s, __end, random_access_iterator_tag());\n+\t// NB: Not required, but considered best practice.\n+\tif (__s == 0)\n+\t  std::__throw_logic_error(__N(\"basic_string: \"\n+\t\t\t\t       \"construction from null is not valid\"));\n+\tconst _CharT* __end = __s + traits_type::length(__s);\n+\t_M_construct(__s, __end, forward_iterator_tag());\n       }\n \n       /**\n@@ -657,12 +661,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX20_CONSTEXPR\n       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n-      { _M_construct(__l.begin(), __l.end()); }\n+      { _M_construct(__l.begin(), __l.end(), std::forward_iterator_tag()); }\n \n       _GLIBCXX20_CONSTEXPR\n       basic_string(const basic_string& __str, const _Alloc& __a)\n       : _M_dataplus(_M_local_data(), __a)\n-      { _M_construct(__str.begin(), __str.end()); }\n+      { _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag()); }\n \n       _GLIBCXX20_CONSTEXPR\n       basic_string(basic_string&& __str, const _Alloc& __a)\n@@ -686,7 +690,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t    __str._M_set_length(0);\n \t  }\n \telse\n-\t  _M_construct(__str.begin(), __str.end());\n+\t  _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag());\n       }\n \n       basic_string(nullptr_t) = delete;\n@@ -709,7 +713,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n         basic_string(_InputIterator __beg, _InputIterator __end,\n \t\t     const _Alloc& __a = _Alloc())\n \t: _M_dataplus(_M_local_data(), __a)\n-\t{ _M_construct(__beg, __end); }\n+\t{\n+#if __cplusplus >= 201103L\n+\t  _M_construct(__beg, __end, std::__iterator_category(__beg));\n+#else\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n+\t  _M_construct_aux(__beg, __end, _Integral());\n+#endif\n+\t}\n \n #if __cplusplus >= 201703L\n       /**"}, {"sha": "9a54b63b93386663170cfe8601ab98038a848505", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9572e486a8556116aa842d68c1ac8a0bdf0a0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9572e486a8556116aa842d68c1ac8a0bdf0a0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=5a9572e486a8556116aa842d68c1ac8a0bdf0a0b", "patch": "@@ -178,29 +178,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    ++__beg;\n \t  }\n \n-\t__try\n+\tstruct _Guard\n+\t{\n+\t  _GLIBCXX20_CONSTEXPR\n+\t  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }\n+\n+\t  _GLIBCXX20_CONSTEXPR\n+\t  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }\n+\n+\t  basic_string* _M_guarded;\n+\t} __guard(this);\n+\n+\twhile (__beg != __end)\n \t  {\n-\t    while (__beg != __end)\n+\t    if (__len == __capacity)\n \t      {\n-\t\tif (__len == __capacity)\n-\t\t  {\n-\t\t    // Allocate more space.\n-\t\t    __capacity = __len + 1;\n-\t\t    pointer __another = _M_create(__capacity, __len);\n-\t\t    this->_S_copy(__another, _M_data(), __len);\n-\t\t    _M_dispose();\n-\t\t    _M_data(__another);\n-\t\t    _M_capacity(__capacity);\n-\t\t  }\n-\t\t_M_data()[__len++] = *__beg;\n-\t\t++__beg;\n+\t\t// Allocate more space.\n+\t\t__capacity = __len + 1;\n+\t\tpointer __another = _M_create(__capacity, __len);\n+\t\tthis->_S_copy(__another, _M_data(), __len);\n+\t\t_M_dispose();\n+\t\t_M_data(__another);\n+\t\t_M_capacity(__capacity);\n \t      }\n+\t    _M_data()[__len++] = *__beg;\n+\t    ++__beg;\n \t  }\n-\t__catch(...)\n-\t  {\n-\t    _M_dispose();\n-\t    __throw_exception_again;\n-\t  }\n+\n+\t__guard._M_guarded = 0;\n \n \t_M_set_length(__len);\n       }\n@@ -213,11 +218,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_construct(_InIterator __beg, _InIterator __end,\n \t\t   std::forward_iterator_tag)\n       {\n-\t// NB: Not required, but considered best practice.\n-\tif (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)\n-\t  std::__throw_logic_error(__N(\"basic_string::\"\n-\t\t\t\t       \"_M_construct null not valid\"));\n-\n \tsize_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n \n \tif (__dnew > size_type(_S_local_capacity))\n@@ -229,13 +229,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_use_local_data();\n \n \t// Check for out_of_range and length_error exceptions.\n-\t__try\n-\t  { this->_S_copy_chars(_M_data(), __beg, __end); }\n-\t__catch(...)\n-\t  {\n-\t    _M_dispose();\n-\t    __throw_exception_again;\n-\t  }\n+\tstruct _Guard\n+\t{\n+\t  _GLIBCXX20_CONSTEXPR\n+\t  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }\n+\n+\t  _GLIBCXX20_CONSTEXPR\n+\t  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }\n+\n+\t  basic_string* _M_guarded;\n+\t} __guard(this);\n+\n+\tthis->_S_copy_chars(_M_data(), __beg, __end);\n+\n+\t__guard._M_guarded = 0;\n \n \t_M_set_length(__dnew);\n       }"}]}