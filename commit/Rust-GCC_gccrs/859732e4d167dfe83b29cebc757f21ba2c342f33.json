{"sha": "859732e4d167dfe83b29cebc757f21ba2c342f33", "node_id": "C_kwDOANBUbNoAKDg1OTczMmU0ZDE2N2RmZTgzYjI5Y2ViYzc1N2YyMWJhMmMzNDJmMzM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-10T15:40:23Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-10T15:40:55Z"}, "message": "Remove AddressTakenContext\n\nWe can reuse more C front-end code c_mark_addressable can be used instead\nof trying to track TREE_ADDRESSABLE as part of type-checking. This also\npulls the GCC::Backend::address_expression to be part of the HIRCompileBase\nclass during code-generation.", "tree": {"sha": "2616a6c1fdc52ae274b836a055e710f19bc59ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2616a6c1fdc52ae274b836a055e710f19bc59ffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/859732e4d167dfe83b29cebc757f21ba2c342f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859732e4d167dfe83b29cebc757f21ba2c342f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859732e4d167dfe83b29cebc757f21ba2c342f33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859732e4d167dfe83b29cebc757f21ba2c342f33/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ba472caf42db1f5f2f98b73afccf448b36c322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba472caf42db1f5f2f98b73afccf448b36c322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ba472caf42db1f5f2f98b73afccf448b36c322"}], "stats": {"total": 402, "additions": 109, "deletions": 293}, "files": [{"sha": "660ed235a74f8f74cb7b1fd617331a39bbd1d4aa", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -88,7 +88,6 @@ GRS_OBJS = \\\n     rust/rust-hir-trait-resolve.o \\\n     rust/rust-hir-type-check-type.o \\\n     rust/rust-hir-type-check-struct.o \\\n-    rust/rust-hir-address-taken.o \\\n     rust/rust-hir-type-check-pattern.o \\\n     rust/rust-autoderef.o \\\n     rust/rust-substitution-mapper.o \\"}, {"sha": "81598c4dc5bcda947f5c7842e89d871d76be0f4b", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -17,6 +17,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-compile-base.h\"\n+#include \"fold-const.h\"\n #include \"stringpool.h\"\n \n namespace Rust {\n@@ -88,5 +89,85 @@ HIRCompileBase::setup_abi_options (tree fndecl, ABI abi)\n     }\n }\n \n+// ported from gcc/c/c-typecheck.c\n+//\n+// Mark EXP saying that we need to be able to take the\n+// address of it; it should not be allocated in a register.\n+// Returns true if successful.  ARRAY_REF_P is true if this\n+// is for ARRAY_REF construction - in that case we don't want\n+// to look through VIEW_CONVERT_EXPR from VECTOR_TYPE to ARRAY_TYPE,\n+// it is fine to use ARRAY_REFs for vector subscripts on vector\n+// register variables.\n+bool\n+HIRCompileBase::mark_addressable (tree exp, Location locus)\n+{\n+  tree x = exp;\n+\n+  while (1)\n+    switch (TREE_CODE (x))\n+      {\n+      case VIEW_CONVERT_EXPR:\n+\tif (TREE_CODE (TREE_TYPE (x)) == ARRAY_TYPE\n+\t    && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (x, 0))))\n+\t  return true;\n+\tx = TREE_OPERAND (x, 0);\n+\tbreak;\n+\n+      case COMPONENT_REF:\n+\t// TODO\n+\t// if (DECL_C_BIT_FIELD (TREE_OPERAND (x, 1)))\n+\t//   {\n+\t//     error (\"cannot take address of bit-field %qD\", TREE_OPERAND (x,\n+\t//     1)); return false;\n+\t//   }\n+\n+\t/* FALLTHRU */\n+      case ADDR_EXPR:\n+      case ARRAY_REF:\n+      case REALPART_EXPR:\n+      case IMAGPART_EXPR:\n+\tx = TREE_OPERAND (x, 0);\n+\tbreak;\n+\n+      case COMPOUND_LITERAL_EXPR:\n+\tTREE_ADDRESSABLE (x) = 1;\n+\tTREE_ADDRESSABLE (COMPOUND_LITERAL_EXPR_DECL (x)) = 1;\n+\treturn true;\n+\n+      case CONSTRUCTOR:\n+\tTREE_ADDRESSABLE (x) = 1;\n+\treturn true;\n+\n+      case VAR_DECL:\n+      case CONST_DECL:\n+      case PARM_DECL:\n+      case RESULT_DECL:\n+\t// (we don't have a concept of a \"register\" declaration)\n+\t// fallthrough */\n+\n+\t/* FALLTHRU */\n+      case FUNCTION_DECL:\n+\tTREE_ADDRESSABLE (x) = 1;\n+\n+\t/* FALLTHRU */\n+      default:\n+\treturn true;\n+      }\n+\n+  return false;\n+}\n+\n+tree\n+HIRCompileBase::address_expression (tree expr, Location location)\n+{\n+  if (expr == error_mark_node)\n+    return error_mark_node;\n+\n+  if (!mark_addressable (expr, location))\n+    return error_mark_node;\n+\n+  return build_fold_addr_expr_loc (location.gcc_location (), expr);\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "ec7535648aa6735dd6a241d76a1fca5f7fd1040d", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -77,6 +77,10 @@ class HIRCompileBase : public HIR::HIRFullVisitorBase\n     const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs);\n \n   static void setup_abi_options (tree fndecl, ABI abi);\n+\n+  static tree address_expression (tree, Location);\n+\n+  static bool mark_addressable (tree, Location);\n };\n \n } // namespace Compile"}, {"sha": "f65e1fd54c837fd5af8873722d70e4cb052ed243", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -123,6 +123,13 @@ CompileExpr::visit (HIR::NegationExpr &expr)\n     = ctx->get_backend ()->negation_expression (op, negated_expr, location);\n }\n \n+void\n+CompileExpr::visit (HIR::BorrowExpr &expr)\n+{\n+  tree main_expr = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n+  translated = address_expression (main_expr, expr.get_locus ());\n+}\n+\n void\n CompileExpr::visit (HIR::DereferenceExpr &expr)\n {\n@@ -973,7 +980,7 @@ CompileExpr::compile_string_literal (const HIR::LiteralExpr &expr,\n \n   auto base = ctx->get_backend ()->string_constant_expression (\n     literal_value.as_string ());\n-  return ctx->get_backend ()->address_expression (base, expr.get_locus ());\n+  return address_expression (base, expr.get_locus ());\n }\n \n tree\n@@ -1006,8 +1013,7 @@ CompileExpr::compile_byte_string_literal (const HIR::LiteralExpr &expr,\n \t\t\t\t\t\t\t vals,\n \t\t\t\t\t\t\t expr.get_locus ());\n \n-  return ctx->get_backend ()->address_expression (constructed,\n-\t\t\t\t\t\t  expr.get_locus ());\n+  return address_expression (constructed, expr.get_locus ());\n }\n \n tree\n@@ -1190,7 +1196,7 @@ HIRCompileBase::resolve_adjustements (\n \n \tcase Resolver::Adjustment::AdjustmentType::IMM_REF:\n \tcase Resolver::Adjustment::AdjustmentType::MUT_REF:\n-\t  e = ctx->get_backend ()->address_expression (e, locus);\n+\t  e = address_expression (e, locus);\n \t  break;\n \n \tcase Resolver::Adjustment::AdjustmentType::DEREF_REF:\n@@ -1235,8 +1241,7 @@ HIRCompileBase::resolve_deref_adjustment (Resolver::Adjustment &adjustment,\n \t\t      != Resolver::Adjustment::AdjustmentType::ERROR;\n   if (needs_borrow)\n     {\n-      adjusted_argument\n-\t= ctx->get_backend ()->address_expression (expression, locus);\n+      adjusted_argument = address_expression (expression, locus);\n     }\n \n   // make the call"}, {"sha": "592d2806b215c52531959a5d5b445e011b5af6a2", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -797,13 +797,7 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (goto_label);\n   }\n \n-  void visit (HIR::BorrowExpr &expr) override\n-  {\n-    tree main_expr = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n-\n-    translated\n-      = ctx->get_backend ()->address_expression (main_expr, expr.get_locus ());\n-  }\n+  void visit (HIR::BorrowExpr &expr) override;\n \n   void visit (HIR::DereferenceExpr &expr) override;\n "}, {"sha": "137bcad79aa71472a9b417f9f4a610ddac1abd04", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -20,7 +20,6 @@\n #define RUST_COMPILE_FNPARAM\n \n #include \"rust-compile-base.h\"\n-#include \"rust-hir-address-taken.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -34,7 +33,7 @@ class CompileFnParam : public HIRCompileBase\n \t\t\t     HIR::FunctionParam *param, tree decl_type,\n \t\t\t     Location locus)\n   {\n-    CompileFnParam compiler (ctx, fndecl, decl_type, locus, *param);\n+    CompileFnParam compiler (ctx, fndecl, decl_type, locus);\n     param->get_param_name ()->accept_vis (compiler);\n     return compiler.compiled_param;\n   }\n@@ -45,9 +44,6 @@ class CompileFnParam : public HIRCompileBase\n       decl_type = ctx->get_backend ()->immutable_type (decl_type);\n \n     bool address_taken = false;\n-    address_taken_context->lookup_addess_taken (\n-      param.get_mappings ().get_hirid (), &address_taken);\n-\n     compiled_param = ctx->get_backend ()->parameter_variable (\n       fndecl, pattern.get_identifier (), decl_type, address_taken, locus);\n   }\n@@ -63,20 +59,15 @@ class CompileFnParam : public HIRCompileBase\n   }\n \n private:\n-  CompileFnParam (Context *ctx, tree fndecl, tree decl_type, Location locus,\n-\t\t  const HIR::FunctionParam &param)\n+  CompileFnParam (Context *ctx, tree fndecl, tree decl_type, Location locus)\n     : HIRCompileBase (ctx), fndecl (fndecl), decl_type (decl_type),\n-      locus (locus), param (param),\n-      compiled_param (ctx->get_backend ()->error_variable ()),\n-      address_taken_context (Resolver::AddressTakenContext::get ())\n+      locus (locus), compiled_param (ctx->get_backend ()->error_variable ())\n   {}\n \n   tree fndecl;\n   tree decl_type;\n   Location locus;\n-  const HIR::FunctionParam &param;\n   Bvariable *compiled_param;\n-  const Resolver::AddressTakenContext *address_taken_context;\n };\n \n class CompileSelfParam : public HIRCompileBase\n@@ -91,11 +82,7 @@ class CompileSelfParam : public HIRCompileBase\n     if (is_immutable)\n       decl_type = ctx->get_backend ()->immutable_type (decl_type);\n \n-    const auto &address_taken_context = Resolver::AddressTakenContext::get ();\n     bool address_taken = false;\n-    address_taken_context->lookup_addess_taken (\n-      self.get_mappings ().get_hirid (), &address_taken);\n-\n     return ctx->get_backend ()->parameter_variable (fndecl, \"self\", decl_type,\n \t\t\t\t\t\t    address_taken, locus);\n   }"}, {"sha": "1da6cd4bca602347e7ae6ee89a9644272f2ed5a4", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -20,7 +20,6 @@\n #define RUST_COMPILE_VAR_DECL\n \n #include \"rust-compile-base.h\"\n-#include \"rust-hir-address-taken.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -47,9 +46,6 @@ class CompileVarDecl : public HIRCompileBase\n \t\t\t\t\t      &resolved_type);\n     rust_assert (ok);\n \n-    address_taken_context->lookup_addess_taken (\n-      stmt.get_mappings ().get_hirid (), &address_taken);\n-\n     translated_type = TyTyResolveCompile::compile (ctx, resolved_type);\n     stmt.get_pattern ()->accept_vis (*this);\n   }\n@@ -59,6 +55,9 @@ class CompileVarDecl : public HIRCompileBase\n     if (!pattern.is_mut ())\n       translated_type = ctx->get_backend ()->immutable_type (translated_type);\n \n+    // this gets updated when the compilation _actually_ wants to take an\n+    // address\n+    bool address_taken = false;\n     compiled_variable\n       = ctx->get_backend ()->local_variable (fndecl, pattern.get_identifier (),\n \t\t\t\t\t     translated_type, NULL /*decl_var*/,\n@@ -68,6 +67,10 @@ class CompileVarDecl : public HIRCompileBase\n   void visit (HIR::WildcardPattern &pattern) override\n   {\n     translated_type = ctx->get_backend ()->immutable_type (translated_type);\n+\n+    // this gets updated when the compilation _actually_ wants to take an\n+    // address\n+    bool address_taken = false;\n     compiled_variable\n       = ctx->get_backend ()->local_variable (fndecl, \"_\", translated_type,\n \t\t\t\t\t     NULL /*decl_var*/, address_taken,\n@@ -78,17 +81,13 @@ class CompileVarDecl : public HIRCompileBase\n   CompileVarDecl (Context *ctx, tree fndecl)\n     : HIRCompileBase (ctx), fndecl (fndecl),\n       translated_type (ctx->get_backend ()->error_type ()),\n-      compiled_variable (ctx->get_backend ()->error_variable ()),\n-      address_taken (false),\n-      address_taken_context (Resolver::AddressTakenContext::get ())\n+      compiled_variable (ctx->get_backend ()->error_variable ())\n   {}\n \n   tree fndecl;\n   tree translated_type;\n   Location locus;\n   Bvariable *compiled_variable;\n-  bool address_taken;\n-  const Resolver::AddressTakenContext *address_taken_context;\n };\n \n } // namespace Compile"}, {"sha": "2299ddbb93cfe4ef81211f45fbc2fd1023255557", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -387,8 +387,7 @@ HIRCompileBase::coerce_to_dyn_object (tree compiled_ref,\n       rust_assert (ok);\n \n       resulting_dyn_object_ref\n-\t= ctx->get_backend ()->address_expression (resulting_dyn_object_ref,\n-\t\t\t\t\t\t   locus);\n+\t= address_expression (resulting_dyn_object_ref, locus);\n     }\n   return resulting_dyn_object_ref;\n }"}, {"sha": "7d288923d7fbab21cdf02c64bc2ed1512779862e", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -255,9 +255,6 @@ class Backend\n   // get the address of the code for a function.\n   virtual tree function_code_expression (tree, Location) = 0;\n \n-  // Create an expression that takes the address of an expression.\n-  virtual tree address_expression (tree, Location) = 0;\n-\n   // Return an expression for the field at INDEX in BSTRUCT.\n   virtual tree struct_field_expression (tree bstruct, size_t index, Location)\n     = 0;"}, {"sha": "d83dd4d2e1eeaf8ccbb39edfa4e853f33f6ddbcc", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -231,8 +231,6 @@ class Gcc_backend : public Backend\n \n   tree function_code_expression (tree, Location);\n \n-  tree address_expression (tree, Location);\n-\n   tree struct_field_expression (tree, size_t, Location);\n \n   tree compound_expression (tree, tree, Location);\n@@ -1338,17 +1336,6 @@ Gcc_backend::function_code_expression (tree func, Location location)\n   return ret;\n }\n \n-// Get the address of an expression.\n-\n-tree\n-Gcc_backend::address_expression (tree expr, Location location)\n-{\n-  if (expr == error_mark_node)\n-    return this->error_expression ();\n-\n-  return build_fold_addr_expr_loc (location.gcc_location (), expr);\n-}\n-\n // Return an expression for the field at INDEX in BSTRUCT.\n \n tree"}, {"sha": "8fcbb377f64df03f506d48c83ba8862799123f76", "filename": "gcc/rust/typecheck/rust-hir-address-taken.cc", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Ftypecheck%2Frust-hir-address-taken.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Ftypecheck%2Frust-hir-address-taken.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-address-taken.cc?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -1,65 +0,0 @@\n-// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n-\n-// This file is part of GCC.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with GCC; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include \"rust-hir-address-taken.h\"\n-#include \"rust-hir-full.h\"\n-\n-namespace Rust {\n-namespace Resolver {\n-\n-AddressTakenContext *\n-AddressTakenContext::get ()\n-{\n-  static AddressTakenContext *instance;\n-  if (instance == nullptr)\n-    instance = new AddressTakenContext ();\n-\n-  return instance;\n-}\n-\n-AddressTakenContext::~AddressTakenContext () {}\n-\n-bool\n-AddressTakenContext::lookup_addess_taken (HirId id, bool *address_taken) const\n-{\n-  const auto &it = ctx.find (id);\n-  if (it == ctx.end ())\n-    return false;\n-\n-  *address_taken = it->second;\n-  return true;\n-}\n-\n-void\n-AddressTakenContext::insert_address_taken (HirId id, bool address_taken)\n-{\n-  const auto &it = ctx.find (id);\n-  if (it != ctx.end ())\n-    {\n-      // assert that we never change a true result to a negative\n-      if (it->second == true)\n-\t{\n-\t  rust_assert (address_taken != false);\n-\t}\n-    }\n-\n-  ctx[id] = address_taken;\n-}\n-\n-} // namespace Resolver\n-} // namespace Rust"}, {"sha": "32a1445ae4dd94dfd4e88753f1890815ee1d40f7", "filename": "gcc/rust/typecheck/rust-hir-address-taken.h", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Ftypecheck%2Frust-hir-address-taken.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ba472caf42db1f5f2f98b73afccf448b36c322/gcc%2Frust%2Ftypecheck%2Frust-hir-address-taken.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-address-taken.h?ref=f6ba472caf42db1f5f2f98b73afccf448b36c322", "patch": "@@ -1,159 +0,0 @@\n-// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n-\n-// This file is part of GCC.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with GCC; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef RUST_HIR_ADDRESS_TAKEN\n-#define RUST_HIR_ADDRESS_TAKEN\n-\n-#include \"rust-hir-type-check-base.h\"\n-\n-namespace Rust {\n-namespace Resolver {\n-\n-class AddressTakenContext\n-{\n-public:\n-  static AddressTakenContext *get ();\n-\n-  ~AddressTakenContext ();\n-\n-  bool lookup_addess_taken (HirId id, bool *address_taken) const;\n-\n-  void insert_address_taken (HirId id, bool address_taken);\n-\n-private:\n-  std::map<HirId, bool> ctx;\n-};\n-\n-class AddressTakenResolver : public TypeCheckBase\n-{\n-  using Rust::Resolver::TypeCheckBase::visit;\n-\n-public:\n-  static void SetAddressTaken (HIR::Expr &expr)\n-  {\n-    AddressTakenResolver resolver;\n-    expr.accept_vis (resolver);\n-  }\n-\n-  void visit (HIR::IdentifierExpr &expr) override\n-  {\n-    NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n-    NodeId ref_node_id = UNKNOWN_NODEID;\n-    if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n-      {\n-\t// these ref_node_ids will resolve to a pattern declaration but we are\n-\t// interested in the definition that this refers to get the parent id\n-\tDefinition def;\n-\tif (!resolver->lookup_definition (ref_node_id, &def))\n-\t  {\n-\t    rust_error_at (expr.get_locus (),\n-\t\t\t   \"unknown reference for resolved name\");\n-\t    return;\n-\t  }\n-\tref_node_id = def.parent;\n-      }\n-\n-    if (ref_node_id == UNKNOWN_NODEID)\n-      return;\n-\n-    // node back to HIR\n-    HirId ref = UNKNOWN_HIRID;\n-    bool reverse_lookup\n-      = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t      ref_node_id, &ref);\n-    rust_assert (reverse_lookup);\n-    context->insert_address_taken (ref, true);\n-  }\n-\n-  void visit (HIR::PathInExpression &expr) override\n-  {\n-    NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n-    NodeId ref_node_id = UNKNOWN_NODEID;\n-    if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n-      {\n-\t// these ref_node_ids will resolve to a pattern declaration but we are\n-\t// interested in the definition that this refers to get the parent id\n-\tDefinition def;\n-\tif (!resolver->lookup_definition (ref_node_id, &def))\n-\t  {\n-\t    rust_error_at (expr.get_locus (),\n-\t\t\t   \"unknown reference for resolved name\");\n-\t    return;\n-\t  }\n-\tref_node_id = def.parent;\n-      }\n-\n-    if (ref_node_id == UNKNOWN_NODEID)\n-      return;\n-\n-    // node back to HIR\n-    HirId ref = UNKNOWN_HIRID;\n-    bool reverse_lookup\n-      = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t      ref_node_id, &ref);\n-    rust_assert (reverse_lookup);\n-    context->insert_address_taken (ref, true);\n-  }\n-\n-  void visit (HIR::QualifiedPathInExpression &expr) override\n-  {\n-    NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n-    NodeId ref_node_id = UNKNOWN_NODEID;\n-    if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n-      {\n-\t// these ref_node_ids will resolve to a pattern declaration but we are\n-\t// interested in the definition that this refers to get the parent id\n-\tDefinition def;\n-\tif (!resolver->lookup_definition (ref_node_id, &def))\n-\t  {\n-\t    rust_error_at (expr.get_locus (),\n-\t\t\t   \"unknown reference for resolved name\");\n-\t    return;\n-\t  }\n-\tref_node_id = def.parent;\n-      }\n-\n-    if (ref_node_id == UNKNOWN_NODEID)\n-      return;\n-\n-    // node back to HIR\n-    HirId ref = UNKNOWN_HIRID;\n-    bool reverse_lookup\n-      = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t      ref_node_id, &ref);\n-    rust_assert (reverse_lookup);\n-    context->insert_address_taken (ref, true);\n-  }\n-\n-  void visit (HIR::DereferenceExpr &expr) override\n-  {\n-    expr.get_expr ()->accept_vis (*this);\n-  }\n-\n-private:\n-  AddressTakenResolver ()\n-    : TypeCheckBase (), context (AddressTakenContext::get ())\n-  {}\n-\n-  AddressTakenContext *context;\n-};\n-\n-} // namespace Resolver\n-} // namespace Rust\n-\n-#endif // RUST_HIR_ADDRESS_TAKEN"}, {"sha": "2cb4461886e957276230049770c7a4e715b5be6f", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859732e4d167dfe83b29cebc757f21ba2c342f33/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=859732e4d167dfe83b29cebc757f21ba2c342f33", "patch": "@@ -30,7 +30,6 @@\n #include \"rust-hir-trait-resolve.h\"\n #include \"rust-hir-type-bounds.h\"\n #include \"rust-hir-dot-operator.h\"\n-#include \"rust-hir-address-taken.h\"\n #include \"rust-hir-type-check-pattern.h\"\n \n namespace Rust {\n@@ -260,10 +259,6 @@ class TypeCheckExpr : public TypeCheckBase\n     Adjuster adj (receiver_tyty);\n     TyTy::BaseType *adjusted_self = adj.adjust_type (candidate.adjustments);\n \n-    // mark the required tree addressable\n-    if (Adjuster::needs_address (candidate.adjustments))\n-      AddressTakenResolver::SetAddressTaken (*expr.get_receiver ().get ());\n-\n     // store the adjustments for code-generation to know what to do\n     context->insert_autoderef_mappings (expr.get_mappings ().get_hirid (),\n \t\t\t\t\tstd::move (candidate.adjustments));\n@@ -1177,9 +1172,6 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n \t\t\t\t       TyTy::TyVar (resolved_base->get_ref ()),\n \t\t\t\t       expr.get_mut ());\n-\n-    // mark the borrowed as address_taken\n-    AddressTakenResolver::SetAddressTaken (*expr.get_expr ().get ());\n   }\n \n   void visit (HIR::DereferenceExpr &expr) override\n@@ -1350,10 +1342,6 @@ class TypeCheckExpr : public TypeCheckBase\n \t  }\n       }\n \n-    // mark the required tree addressable\n-    if (Adjuster::needs_address (candidate.adjustments))\n-      AddressTakenResolver::SetAddressTaken (*expr.get_expr ().get ());\n-\n     // store the adjustments for code-generation to know what to do\n     context->insert_autoderef_mappings (expr.get_mappings ().get_hirid (),\n \t\t\t\t\tstd::move (candidate.adjustments));"}]}