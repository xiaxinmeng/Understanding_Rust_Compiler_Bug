{"sha": "64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRkNzY4NWM2ZmEwZGZkYTNkNWJlMDk2NGY4ZGU4MzJmZTA2NzFjNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-03-27T21:40:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-03-27T21:40:08Z"}, "message": "builtins.c (fold_builtin_memory_op): Optimize memmove into memcpy if we can prove source and destination don't overlap.\n\n\t* builtins.c (fold_builtin_memory_op): Optimize memmove\n\tinto memcpy if we can prove source and destination don't overlap.\n\n\t* gcc.dg/memmove-2.c: New test.\n\t* gcc.dg/memmove-3.c: New test.\n\nFrom-SVN: r145127", "tree": {"sha": "f297688f9b2d8bcdac9ab1042ac06506c382e691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f297688f9b2d8bcdac9ab1042ac06506c382e691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f5e9983d94e27606d13733c2b4bcaddacde4779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5e9983d94e27606d13733c2b4bcaddacde4779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5e9983d94e27606d13733c2b4bcaddacde4779"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "89c62b59cc0af9baf54a7773e898a9823d25e232", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "patch": "@@ -1,5 +1,8 @@\n 2009-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* builtins.c (fold_builtin_memory_op): Optimize memmove\n+\tinto memcpy if we can prove source and destination don't overlap.\n+\n \t* tree-inline.c: Include gt-tree-inline.h.\n \t(clone_fn_id_num): New variable.\n \t(clone_function_name): New function."}, {"sha": "83ce8eb8d68fa78bceb449ea6106e346466d017b", "filename": "gcc/builtins.c", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "patch": "@@ -8879,17 +8879,76 @@ fold_builtin_memory_op (tree dest, tree src, tree len, tree type, bool ignore, i\n \t     really mandatory?\n \n \t     If either SRC is readonly or length is 1, we can use memcpy.  */\n-\t  if (dest_align && src_align\n-\t      && (readonly_data_expr (src)\n-\t          || (host_integerp (len, 1)\n-\t\t      && (MIN (src_align, dest_align) / BITS_PER_UNIT >=\n-\t\t\t  tree_low_cst (len, 1)))))\n+\t  if (!dest_align || !src_align)\n+\t    return NULL_TREE;\n+\t  if (readonly_data_expr (src)\n+\t      || (host_integerp (len, 1)\n+\t\t  && (MIN (src_align, dest_align) / BITS_PER_UNIT\n+\t\t      >= tree_low_cst (len, 1))))\n \t    {\n \t      tree fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n \t      if (!fn)\n \t\treturn NULL_TREE;\n               return build_call_expr (fn, 3, dest, src, len);\n \t    }\n+\n+\t  /* If *src and *dest can't overlap, optimize into memcpy as well.  */\n+\t  srcvar = build_fold_indirect_ref (src);\n+\t  destvar = build_fold_indirect_ref (dest);\n+\t  if (srcvar\n+\t      && !TREE_THIS_VOLATILE (srcvar)\n+\t      && destvar\n+\t      && !TREE_THIS_VOLATILE (destvar))\n+\t    {\n+\t      tree src_base, dest_base, fn;\n+\t      HOST_WIDE_INT src_offset = 0, dest_offset = 0;\n+\t      HOST_WIDE_INT size = -1;\n+\t      HOST_WIDE_INT maxsize = -1;\n+\n+\t      src_base = srcvar;\n+\t      if (handled_component_p (src_base))\n+\t\tsrc_base = get_ref_base_and_extent (src_base, &src_offset,\n+\t\t\t\t\t\t    &size, &maxsize);\n+\t      dest_base = destvar;\n+\t      if (handled_component_p (dest_base))\n+\t\tdest_base = get_ref_base_and_extent (dest_base, &dest_offset,\n+\t\t\t\t\t\t     &size, &maxsize);\n+\t      if (host_integerp (len, 1))\n+\t\t{\n+\t\t  maxsize = tree_low_cst (len, 1);\n+\t\t  if (maxsize\n+\t\t      > INTTYPE_MAXIMUM (HOST_WIDE_INT) / BITS_PER_UNIT)\n+\t\t    maxsize = -1;\n+\t\t  else\n+\t\t    maxsize *= BITS_PER_UNIT;\n+\t\t}\n+\t      else\n+\t\tmaxsize = -1;\n+\t      if (SSA_VAR_P (src_base)\n+\t\t  && SSA_VAR_P (dest_base))\n+\t\t{\n+\t\t  if (operand_equal_p (src_base, dest_base, 0)\n+\t\t      && ranges_overlap_p (src_offset, maxsize,\n+\t\t\t\t\t   dest_offset, maxsize))\n+\t\t    return NULL_TREE;\n+\t\t}\n+\t      else if (TREE_CODE (src_base) == INDIRECT_REF\n+\t\t       && TREE_CODE (dest_base) == INDIRECT_REF)\n+\t\t{\n+\t\t  if (! operand_equal_p (TREE_OPERAND (src_base, 0),\n+\t\t\t\t\t TREE_OPERAND (dest_base, 0), 0)\n+\t\t      || ranges_overlap_p (src_offset, maxsize,\n+\t\t\t\t\t   dest_offset, maxsize))\n+\t\t    return NULL_TREE;\n+\t\t}\n+\t      else\n+\t\treturn NULL_TREE;\n+\n+\t      fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n+\t      if (!fn)\n+\t\treturn NULL_TREE;\n+\t      return build_call_expr (fn, 3, dest, src, len);\n+\t    }\n \t  return NULL_TREE;\n \t}\n "}, {"sha": "9aecc57d27eb639a7c4206f0eb60c23f3df26bd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "patch": "@@ -1,5 +1,8 @@\n 2009-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/memmove-2.c: New test.\n+\t* gcc.dg/memmove-3.c: New test.\n+\n \t* gcc.dg/ipa/ipacost-1.c: Adjust match pattern for change\n \tin clone naming.\n "}, {"sha": "9c691ef01c31c89439deef53ba5a5b4c67a7369c", "filename": "gcc/testsuite/gcc.dg/memmove-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2Ftestsuite%2Fgcc.dg%2Fmemmove-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2Ftestsuite%2Fgcc.dg%2Fmemmove-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmemmove-2.c?ref=64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"memmove\" 0 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n+char a[40];\n+extern void bar (char *);\n+\n+void\n+foo (void)\n+{\n+  char b[10];\n+  __builtin_memmove (&a[0], &a[20], 20);\n+  __builtin_memmove (&b[1], &a[25], 9);\n+  bar (b);\n+}"}, {"sha": "98493b3d42cd941a9dcfafacc39f3bbff8b66d23", "filename": "gcc/testsuite/gcc.dg/memmove-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2Ftestsuite%2Fgcc.dg%2Fmemmove-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64d7685c6fa0dfda3d5be0964f8de832fe0671c4/gcc%2Ftestsuite%2Fgcc.dg%2Fmemmove-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmemmove-3.c?ref=64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"memmove\" 3 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n+char a[40];\n+struct A { char a[30]; };\n+\n+void\n+foo (struct A *p, char *q, char *r)\n+{\n+  char b[10];\n+  __builtin_memmove (&a[1], &a[19], 20);\n+  __builtin_memmove (&p->a[1], &p->a[9], 10);\n+  __builtin_memmove (q, r, 9);\n+}"}]}