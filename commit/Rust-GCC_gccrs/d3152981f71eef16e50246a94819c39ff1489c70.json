{"sha": "d3152981f71eef16e50246a94819c39ff1489c70", "node_id": "C_kwDOANBUbNoAKGQzMTUyOTgxZjcxZWVmMTZlNTAyNDZhOTQ4MTljMzlmZjE0ODljNzA", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-09T01:42:10Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-19T01:22:48Z"}, "message": "Reduce cost of aligned sse register store.\n\nMake them be equal to cost of unaligned ones to avoid odd alignment\npeeling.\n\nImpact for SPEC2017 on CLX:\nfprate:\n  503.bwaves_r    BuildSame\n  507.cactuBSSN_r     -0.22\n  508.namd_r          -0.02\n  510.parest_r        -0.28\n  511.povray_r        -0.20\n  519.lbm_r       BuildSame\n  521.wrf_r           -0.58\n  526.blender_r       -0.30\n  527.cam4_r           1.07\n  538.imagick_r        0.01\n  544.nab_r           -0.09\n  549.fotonik3d_r BuildSame\n  554.roms_r      BuildSame\nintrate:\n  500.perlbench_r     -0.25\n  502.gcc_r           -0.15\n  505.mcf_r       BuildSame\n  520.omnetpp_r        1.03\n  523.xalancbmk_r     -0.13\n  525.x264_r          -0.05\n  531.deepsjeng_r     -0.27\n  541.leela_r         -0.24\n  548.exchange2_r     -0.06\n  557.xz_r            -0.10\n  999.specrand_ir      2.69\n\ngcc/ChangeLog:\n\n\tPR target/102543\n\t* config/i386/x86-tune-costs.h (skylake_cost): Reduce cost of\n\tstoring 256/512-bit SSE register to be equal to cost of\n\tunaligned store to avoid odd alignment peeling.\n\t(icelake_cost): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr102543.c: New test.", "tree": {"sha": "3d734bec02b4e5230bb92e01fb8b173a30bc848c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d734bec02b4e5230bb92e01fb8b173a30bc848c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3152981f71eef16e50246a94819c39ff1489c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3152981f71eef16e50246a94819c39ff1489c70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3152981f71eef16e50246a94819c39ff1489c70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3152981f71eef16e50246a94819c39ff1489c70/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c24fe42ff2cef3f3291f5a7540a5835c08430c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c24fe42ff2cef3f3291f5a7540a5835c08430c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09c24fe42ff2cef3f3291f5a7540a5835c08430c"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "60d50c97fca70070827bd12c1f67db8b47e3221a", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3152981f71eef16e50246a94819c39ff1489c70/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3152981f71eef16e50246a94819c39ff1489c70/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=d3152981f71eef16e50246a94819c39ff1489c70", "patch": "@@ -1903,7 +1903,7 @@ struct processor_costs skylake_cost = {\n   {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n   {6, 6, 6, 10, 20},\t\t\t/* cost of loading SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n-  {8, 8, 8, 12, 24},\t\t\t/* cost of storing SSE register\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of storing SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n   {6, 6, 6, 10, 20},\t\t\t/* cost of unaligned loads.  */\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n@@ -2029,7 +2029,7 @@ struct processor_costs icelake_cost = {\n   {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n   {6, 6, 6, 10, 20},\t\t\t/* cost of loading SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n-  {8, 8, 8, 12, 24},\t\t\t/* cost of storing SSE register\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of storing SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n   {6, 6, 6, 10, 20},\t\t\t/* cost of unaligned loads.  */\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */"}, {"sha": "893eb9a59025253c9f18625443eda7c692693657", "filename": "gcc/testsuite/gcc.target/i386/pr102543.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3152981f71eef16e50246a94819c39ff1489c70/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102543.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3152981f71eef16e50246a94819c39ff1489c70/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102543.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102543.c?ref=d3152981f71eef16e50246a94819c39ff1489c70", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/102543 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -march=skylake-avx512 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"MEM\\\\\\[\" \"optimized\" } } */\n+\n+struct a\n+{\n+  int a[100];\n+};\n+typedef struct a misaligned_t __attribute__ ((aligned (8)));\n+typedef struct a aligned_t __attribute__ ((aligned (32)));\n+\n+__attribute__ ((used))\n+__attribute__ ((noinline))\n+void\n+t(void *a, int misaligned, aligned_t *d)\n+{\n+  int i,v;\n+  for (i=0;i<100;i++)\n+    {\n+      if (misaligned)\n+\tv=((misaligned_t *)a)->a[i];\n+      else\n+\tv=((aligned_t *)a)->a[i];\n+      d->a[i]+=v;\n+    }\n+}\n+struct b {int v; misaligned_t m;aligned_t aa;} b;\n+aligned_t d;\n+int\n+main()\n+{\n+  t(&b.m, 1, &d);\n+  return 0;\n+}"}]}