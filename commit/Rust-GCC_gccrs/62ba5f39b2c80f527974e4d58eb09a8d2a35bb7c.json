{"sha": "62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiYTVmMzliMmM4MGY1Mjc5NzRlNGQ1OGViMDlhOGQyYTM1YmI3Yw==", "commit": {"author": {"name": "Stan Cox", "email": "scox@redhat.com", "date": "2001-07-26T21:38:14Z"}, "committer": {"name": "Stan Cox", "email": "scox@gcc.gnu.org", "date": "2001-07-26T21:38:14Z"}, "message": "g++.exp (g++_exit, [...]): Removed.\n\n\t* lib/g++.exp (g++_exit, g++_check_unsupported_p): Removed.\n\t* lib/gcc.exp (gcc_check_compile, gcc_pass, gcc_fail, gcc_finish,\n\tgcc_exit, gcc_check_unsupported_p):\n\tMoved to gcc-deps.exp\n\t* gcc-deps.exp: New file.\n\nFrom-SVN: r44410", "tree": {"sha": "dedabc4f8bcf1d775cca4e588662cb14209fb770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dedabc4f8bcf1d775cca4e588662cb14209fb770"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/comments", "author": {"login": "stanfordcox", "id": 18171344, "node_id": "MDQ6VXNlcjE4MTcxMzQ0", "avatar_url": "https://avatars.githubusercontent.com/u/18171344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stanfordcox", "html_url": "https://github.com/stanfordcox", "followers_url": "https://api.github.com/users/stanfordcox/followers", "following_url": "https://api.github.com/users/stanfordcox/following{/other_user}", "gists_url": "https://api.github.com/users/stanfordcox/gists{/gist_id}", "starred_url": "https://api.github.com/users/stanfordcox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stanfordcox/subscriptions", "organizations_url": "https://api.github.com/users/stanfordcox/orgs", "repos_url": "https://api.github.com/users/stanfordcox/repos", "events_url": "https://api.github.com/users/stanfordcox/events{/privacy}", "received_events_url": "https://api.github.com/users/stanfordcox/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01f62f016bb811b0010a36d058c660882a92ca1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f62f016bb811b0010a36d058c660882a92ca1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f62f016bb811b0010a36d058c660882a92ca1c"}], "stats": {"total": 397, "additions": 207, "deletions": 190}, "files": [{"sha": "43c029a820617d8dae55b4a66d451dea530632b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c", "patch": "@@ -1,3 +1,11 @@\n+2001-07-26  Stan Cox <scox@redhat.com>\n+\n+\t* lib/g++.exp (g++_exit, g++_check_unsupported_p): Removed.\n+\t* lib/gcc.exp (gcc_check_compile, gcc_pass, gcc_fail, gcc_finish,\n+\tgcc_exit, gcc_check_unsupported_p):\n+\tMoved to gcc-deps.exp\n+\t* gcc-deps.exp: New file.\n+\n 2001-07-26  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* g++.old-deja/g++.pt/defarg14.C: New test."}, {"sha": "c597b03c5406bdd1d4b5952aa5968c101bebda24", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 25, "deletions": 44, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c", "patch": "@@ -22,6 +22,7 @@\n # g++ support library routines\n #\n load_lib prune.exp\n+load_lib gcc-defs.exp\n \n #\n # GXX_UNDER_TEST is the compiler under test.\n@@ -30,12 +31,16 @@ load_lib prune.exp\n \n set gpp_compile_options \"\"\n \n+\n #\n # g++_version -- extract and print the version number of the compiler\n #\n+\n proc g++_version { } {\n     global GXX_UNDER_TEST\n     \n+    g++_init\n+\n     # ignore any arguments after the command\n     set compiler [lindex $GXX_UNDER_TEST 0]\n     \n@@ -61,8 +66,8 @@ proc g++_version { } {\n }\n \n #\n-# provide new versions of g++_include_flags and g++_link_flags (both\n-# originally from libgloss.exp) which know about the new gcc tree structure\n+# g++_include_flags -- provide new version of g++_include_flags\n+# (originally from libgloss.exp) which knows about the gcc tree structure\n #\n proc g++_include_flags { paths } {\n     global srcdir\n@@ -94,6 +99,11 @@ proc g++_include_flags { paths } {\n     return \"$flags\"\n }\n \n+#\n+# g++_link_flags -- provide new version of g++_link_flags\n+# (originally from libgloss.exp) which knows about the gcc tree structure\n+#\n+\n proc g++_link_flags { paths } {\n     global rootme\n     global srcdir\n@@ -236,6 +246,9 @@ proc g++_init { args } {\n     verbose \"g++ is initialized\" 3\n }\n \n+#\n+# g++_target_compile -- compile a source file\n+#\n \n proc g++_target_compile { source dest type options } {\n     global tmpdir;\n@@ -265,38 +278,15 @@ proc g++_target_compile { source dest type options } {\n     return [target_compile $source $dest $type $options]\n }\n \n-proc g++_exit { args } {\n-    global gluefile;\n-\n-    if [info exists gluefile] {\n-\tfile_on_build delete $gluefile;\n-\tunset gluefile;\n-    }\n-}\n-\n-# If this is an older version of dejagnu (without runtest_file_p),\n-# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.\n-# This can be deleted after the next dejagnu release.\n-\n-if { [info procs runtest_file_p] == \"\" } then {\n-    proc runtest_file_p { runtests testcase } {\n-\tif { $runtests != \"\" && [regexp \"\\[.\\]\\[cC\\]\" $runtests] } then {\n-\t    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {\n-\t\treturn 1\n-\t    } else {\n-\t\treturn 0\n-\t    }\n-\t}\n-\treturn 1\n-    }\n-}\n-\n+#\n+# g++_set_ld_library_path --\n # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n # (for the 64-bit ABI).  The right way to do this would be to modify\n # unix.exp -- but that's not an option since it's part of DejaGNU\n # proper, so we do it here, by trickery.  We really only need to do \n # this on IRIX, but it shouldn't hurt to do it anywhere else.\n+#\n \n proc g++_set_ld_library_path { name element op } {\n   setenv LD_LIBRARYN32_PATH [getenv LD_LIBRARY_PATH]\n@@ -305,27 +295,18 @@ proc g++_set_ld_library_path { name element op } {\n \n trace variable env(LD_LIBRARY_PATH) w g++_set_ld_library_path\n \n-# Utility used by mike-g++.exp and old-dejagnu.exp.\n-# Check the compiler(/assembler/linker) output for text indicating that\n-# the testcase should be marked as \"unsupported\".\n #\n-# When dealing with a large number of tests, it's difficult to weed out the\n-# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n-# of memory).  There are various ways to deal with this.  Here's one.\n-# Fortunately, all of the cases where this is likely to happen will be using\n-# gld so we can tell what the error text will look like.\n-\n-proc ${tool}_check_unsupported_p { output } {\n-    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n-\treturn \"memory full\"\n-    }\n-    return \"\"\n-}\n+# ${tool}_option_help\n+#\n \n proc ${tool}_option_help { } {\n-    send_user \"--additional_options,OPTIONS\\t\\tUse OPTIONS to compile the testcase files. OPTIONS should be comma-separated.\"\n+    send_user \" --additional_options,OPTIONS\\t\\tUse OPTIONS to compile the testcase files. OPTIONS should be comma-separated.\\n\"\n }\n \n+#\n+# ${tool}_option_proc\n+#\n+\n proc ${tool}_option_proc { option } {\n     if [regexp \"^--additional_options,\" $option] {\n \tglobal gpp_compile_options"}, {"sha": "30e4b13ff29b664404e505dd664f8eb552e646b3", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c", "patch": "@@ -0,0 +1,166 @@\n+# Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+#\n+# ${tool}_check_compile -- Reports and returns pass/fail for a compilation\n+#\n+\n+proc ${tool}_check_compile {testcase option objname gcc_output} {\n+    global tool\n+    set fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n+ \n+    if [string match \"$fatal_signal 6\" $gcc_output] then {\n+\t${tool}_fail $testcase \"Got Signal 6, $option\"\n+\treturn 0\n+    }\n+\n+    if [string match \"$fatal_signal 11\" $gcc_output] then {\n+\t${tool}_fail $testcase \"Got Signal 11, $option\"\n+\treturn 0\n+    }\n+\n+    # We shouldn't get these because of -w, but just in case.\n+    if [string match \"*cc:*warning:*\" $gcc_output] then {\n+\twarning \"$testcase: (with warnings) $option\"\n+\tsend_log \"$gcc_output\\n\"\n+\tunresolved \"$testcase, $option\"\n+\treturn 0\n+    }\n+\n+    set gcc_output [prune_warnings $gcc_output]\n+\n+    set unsupported_message [${tool}_check_unsupported_p $gcc_output]\n+    if { $unsupported_message != \"\" } {\n+\tunsupported \"$testcase: $unsupported_message\"\n+\treturn 0\n+    }\n+\n+    # remove any leftover LF/CR to make sure any output is legit\n+    regsub -all -- \"\\[\\r\\n\\]*\" $gcc_output \"\" gcc_output\n+\n+    # If any message remains, we fail.\n+    if ![string match \"\" $gcc_output] then {\n+\t${tool}_fail $testcase $option\n+\treturn 0\n+    }\n+\n+    # fail if the desired object file doesn't exist.\n+    # FIXME: there's no way of checking for existence on a remote host.\n+    if {$objname != \"\" && ![is3way] && ![file exists $objname]} {\n+\t${tool}_fail $testcase $option\n+\treturn 0\n+    }\n+\n+    ${tool}_pass $testcase $option\n+    return 1\n+}\n+\n+#\n+# ${tool}_pass -- utility to record a testcase passed\n+#\n+\n+proc ${tool}_pass { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tpass \"$testcase\"\n+    } else {\n+\tpass \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# ${tool}_fail -- utility to record a testcase failed\n+#\n+\n+proc ${tool}_fail { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tfail \"$testcase\"\n+    } else {\n+\tfail \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# ${tool}_finish -- called at the end of every script that calls ${tool}_init\n+#\n+# Hide all quirks of the testing environment from the testsuites.  Also\n+# undo anything that ${tool}_init did that needs undoing.\n+#\n+\n+proc ${tool}_finish { } {\n+    # The testing harness apparently requires this.\n+    global errorInfo;\n+\n+    if [info exists errorInfo] then {\n+\tunset errorInfo\n+    }\n+\n+    # Might as well reset these (keeps our caller from wondering whether\n+    # s/he has to or not).\n+    global prms_id bug_id\n+    set prms_id 0\n+    set bug_id 0\n+}\n+\n+#\n+# ${tool}_exit -- Does final cleanup when testing is complete\n+#\n+\n+proc ${tool}_exit { } {\n+    global gluefile;\n+\n+    if [info exists gluefile] {\n+\tfile_on_build delete $gluefile;\n+\tunset gluefile;\n+    }\n+}\n+    \n+#\n+# ${tool}_check_unsupported_p -- Check the compiler(/assembler/linker) output \n+#\tfor text indicating that the testcase should be marked as \"unsupported\"\n+#\n+# Utility used by mike-gcc.exp and c-torture.exp.\n+# When dealing with a large number of tests, it's difficult to weed out the\n+# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n+# of memory).  There are various ways to deal with this.  Here's one.\n+# Fortunately, all of the cases where this is likely to happen will be using\n+# gld so we can tell what the error text will look like.\n+#\n+\n+proc ${tool}_check_unsupported_p { output } {\n+    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n+\treturn \"memory full\"\n+    }\n+    return \"\"\n+}\n+\n+#\n+# runtest_file_p -- Provide a definition for older dejagnu releases\n+# \t\t    and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.\n+# \t\t    (delete after next dejagnu release).\n+#\n+\n+if { [info procs runtest_file_p] == \"\" } then {\n+    proc runtest_file_p { runtests testcase } {\n+\tif { $runtests != \"\" && [regexp \"\\[.\\]\\[cC\\]\" $runtests] } then {\n+\t    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {\n+\t\treturn 1\n+\t    } else {\n+\t\treturn 0\n+\t    }\n+\t}\n+\treturn 1\n+    }\n+}"}, {"sha": "e03f55916da11c1ada7c522313461a70c8f6eee2", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 8, "deletions": 146, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=62ba5f39b2c80f527974e4d58eb09a8d2a35bb7c", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1992, 1993, 1994, 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n+# Copyright (C) 1992, 1993, 1994, 1996, 1997, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -27,6 +27,7 @@\n # we want to use libgloss so we can get find_gcc.\n load_lib libgloss.exp\n load_lib prune.exp\n+load_lib gcc-defs.exp\n \n #\n # GCC_UNDER_TEST is the compiler under test.\n@@ -68,8 +69,9 @@ proc default_gcc_version { } {\n }\n \n #\n-# Call gcc_version. We do it this way so we can override it if needed.\n+# gcc_version -- Call default_gcc_version, so we can override it if needed.\n #\n+\n proc gcc_version { } {\n     default_gcc_version;\n }\n@@ -116,6 +118,10 @@ proc gcc_init { args } {\n     }\n }\n \n+#\n+# gcc_target_compile -- compile a source file\n+#\n+\n proc gcc_target_compile { source dest type options } {\n     global tmpdir;\n     global gluefile wrap_flags;\n@@ -148,147 +154,3 @@ proc gcc_target_compile { source dest type options } {\n     lappend options \"compiler=$GCC_UNDER_TEST\"\n     return [target_compile $source $dest $type $options]\n }\n-\n-\n-# Reports pass/fail for a gcc compilation and returns true/false.\n-proc gcc_check_compile {testcase option objname gcc_output} {\n-\n-    set fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n- \n-    if [string match \"$fatal_signal 6\" $gcc_output] then {\n-\tgcc_fail $testcase \"Got Signal 6, $option\"\n-\treturn 0\n-    }\n-\n-    if [string match \"$fatal_signal 11\" $gcc_output] then {\n-\tgcc_fail $testcase \"Got Signal 11, $option\"\n-\treturn 0\n-    }\n-\n-    # We shouldn't get these because of -w, but just in case.\n-    if [string match \"*cc:*warning:*\" $gcc_output] then {\n-\twarning \"$testcase: (with warnings) $option\"\n-\tsend_log \"$gcc_output\\n\"\n-\tunresolved \"$testcase, $option\"\n-\treturn 0\n-    }\n-\n-    set gcc_output [prune_warnings $gcc_output]\n-\n-    set unsupported_message [gcc_check_unsupported_p $gcc_output]\n-    if { $unsupported_message != \"\" } {\n-\tunsupported \"$testcase: $unsupported_message\"\n-\treturn 0\n-    }\n-\n-    # remove any leftover LF/CR to make sure any output is legit\n-    regsub -all -- \"\\[\\r\\n\\]*\" $gcc_output \"\" gcc_output\n-\n-    # If any message remains, we fail.\n-    if ![string match \"\" $gcc_output] then {\n-\tgcc_fail $testcase $option\n-\treturn 0\n-    }\n-\n-    # fail if the desired object file doesn't exist.\n-    # FIXME: there's no way of checking for existence on a remote host.\n-    if {$objname != \"\" && ![is3way] && ![file exists $objname]} {\n-\tgcc_fail $testcase $option\n-\treturn 0\n-    }\n-\n-    gcc_pass $testcase $option\n-    return 1\n-}\n-\n-\n-\n-#\n-# gcc_pass -- utility to record a testcase passed\n-#\n-\n-proc gcc_pass { testcase cflags } {\n-    if { \"$cflags\" == \"\" } {\n-\tpass \"$testcase\"\n-    } else {\n-\tpass \"$testcase, $cflags\"\n-    }\n-}\n-\n-#\n-# gcc_fail -- utility to record a testcase failed\n-#\n-\n-proc gcc_fail { testcase cflags } {\n-    if { \"$cflags\" == \"\" } {\n-\tfail \"$testcase\"\n-    } else {\n-\tfail \"$testcase, $cflags\"\n-    }\n-}\n-\n-#\n-# gcc_finish -- called at the end of every .exp script that calls gcc_init\n-#\n-# The purpose of this proc is to hide all quirks of the testing environment\n-# from the testsuites.  It also exists to undo anything that gcc_init did\n-# (that needs undoing).\n-#\n-\n-proc gcc_finish { } {\n-    # The testing harness apparently requires this.\n-    global errorInfo;\n-\n-    if [info exists errorInfo] then {\n-\tunset errorInfo\n-    }\n-\n-    # Might as well reset these (keeps our caller from wondering whether\n-    # s/he has to or not).\n-    global prms_id bug_id\n-    set prms_id 0\n-    set bug_id 0\n-}\n-\n-proc gcc_exit { } {\n-    global gluefile;\n-\n-    if [info exists gluefile] {\n-\tfile_on_build delete $gluefile;\n-\tunset gluefile;\n-    }\n-}\n-    \n-# If this is an older version of dejagnu (without runtest_file_p),\n-# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.\n-# This can be deleted after next dejagnu release.\n-\n-if { [info procs runtest_file_p] == \"\" } then {\n-    proc runtest_file_p { runtests testcase } {\n-\tif { $runtests != \"\" && [regexp \"\\[.\\]\\[cC\\]\" $runtests] } then {\n-\t    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {\n-\t\treturn 1\n-\t    } else {\n-\t\treturn 0\n-\t    }\n-\t}\n-\treturn 1\n-    }\n-}\n-\n-# Utility used by mike-gcc.exp and c-torture.exp.\n-# Check the compiler(/assembler/linker) output for text indicating that\n-# the testcase should be marked as \"unsupported\".\n-#\n-# When dealing with a large number of tests, it's difficult to weed out the\n-# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n-# of memory).  There are various ways to deal with this.  Here's one.\n-# Fortunately, all of the cases where this is likely to happen will be using\n-# gld so we can tell what the error text will look like.\n-\n-proc ${tool}_check_unsupported_p { output } {\n-    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n-\treturn \"memory full\"\n-    }\n-    return \"\"\n-}"}]}