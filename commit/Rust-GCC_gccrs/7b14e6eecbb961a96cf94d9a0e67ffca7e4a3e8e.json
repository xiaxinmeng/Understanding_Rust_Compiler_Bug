{"sha": "7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "node_id": "C_kwDOANBUbNoAKDdiMTRlNmVlY2JiOTYxYTk2Y2Y5NGQ5YTBlNjdmZmNhN2U0YTNlOGU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-15T16:15:39Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-25T08:47:34Z"}, "message": "Revert \"hir: Add ExportedMacro node and handling.\"\n\nThis reverts commit a1f940d193c6cdb13483690a4f4a7d501ad7040e. It is easier\nand cleaner to store exported macros' NodeIds into our mappings rather than\ncreate a new HIR kind of node.\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-item.h: Revert 1c946687239b86a92839d57dfbc928ad7ce35eae.\n\t* backend/rust-compile-stmt.h: Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.cc\n\t(PrivacyReporter::visit): Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.h: Likewise.\n\t* checks/errors/privacy/rust-pub-restricted-visitor.cc\n\t(PubRestrictedVisitor::visit): Likewise.\n\t* checks/errors/privacy/rust-pub-restricted-visitor.h: Likewise.\n\t* checks/errors/privacy/rust-reachability.cc\n\t(ReachabilityVisitor::visit): Likewise.\n\t* checks/errors/privacy/rust-reachability.h: Likewise.\n\t* checks/errors/privacy/rust-visibility-resolver.cc\n\t(VisibilityResolver::visit): Likewise.\n\t* checks/errors/privacy/rust-visibility-resolver.h: Likewise.\n\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Likewise.\n\t* checks/errors/rust-const-checker.h: Likewise.\n\t* checks/errors/rust-unsafe-checker.cc (UnsafeChecker::visit): Likewise.\n\t* checks/errors/rust-unsafe-checker.h: Likewise.\n\t* hir/rust-ast-lower-item.cc (ASTLoweringItem::visit): Likewise.\n\t* hir/rust-ast-lower-item.h: Likewise.\n\t* hir/rust-hir-dump.cc (Dump::visit): Likewise.\n\t* hir/rust-hir-dump.h: Likewise.\n\t* hir/tree/rust-hir-full-decls.h (class ExportedMacro): Likewise.\n\t* hir/tree/rust-hir-item.h (class ExportedMacro): Likewise.\n\t* hir/tree/rust-hir-visitor.h: Likewise.\n\t* hir/tree/rust-hir.cc (ExportedMacro::accept_vis): Likewise.\n\t(ExportedMacro::get_locus): Likewise.\n\t(ExportedMacro::get_item_kind): Likewise.\n\t(ExportedMacro::clone_item_impl): Likewise.\n\t* hir/tree/rust-hir.h: Likewise.\n\t* metadata/rust-export-metadata.cc: Likewise.\n\t* typecheck/rust-hir-type-check-item.h: Likewise.\n\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): Likewise.\n\t* typecheck/rust-hir-type-check-stmt.h: Likewise.\n\t* typecheck/rust-tycheck-dump.h: Likewise.\n\t* util/rust-attributes.cc: Likewise.", "tree": {"sha": "46dda49194255b21107b556848b7b8283f807161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46dda49194255b21107b556848b7b8283f807161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03bce1d0847bff5870e8ed18799a8b2c6ab4728d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bce1d0847bff5870e8ed18799a8b2c6ab4728d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03bce1d0847bff5870e8ed18799a8b2c6ab4728d"}], "stats": {"total": 139, "additions": 0, "deletions": 139}, "files": [{"sha": "ae3fdf6647e24c0882e72728a5d8e41db1df58f9", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -70,7 +70,6 @@ class CompileItem : private HIRCompileBase, protected HIR::HIRStmtVisitor\n   void visit (HIR::LetStmt &) override {}\n   void visit (HIR::ExprStmtWithoutBlock &) override {}\n   void visit (HIR::ExprStmtWithBlock &) override {}\n-  void visit (HIR::ExportedMacro &) override {}\n \n protected:\n   CompileItem (Context *ctx, TyTy::BaseType *concrete, Location ref_locus)"}, {"sha": "1f06d54f4980b0ab7216678a24e0cfa365ffe16d", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -56,7 +56,6 @@ class CompileStmt : private HIRCompileBase, protected HIR::HIRStmtVisitor\n   void visit (HIR::ImplBlock &) override {}\n   void visit (HIR::ExternBlock &) override {}\n   void visit (HIR::EmptyStmt &) override {}\n-  void visit (HIR::ExportedMacro &) override {}\n \n private:\n   CompileStmt (Context *ctx);"}, {"sha": "ea2ad9fb00e6a57744eceace0a4056f9014caf94", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -728,9 +728,5 @@ PrivacyReporter::visit (HIR::ExprStmtWithBlock &stmt)\n   stmt.get_expr ()->accept_vis (*this);\n }\n \n-void\n-PrivacyReporter::visit (HIR::ExportedMacro &)\n-{}\n-\n } // namespace Privacy\n } // namespace Rust"}, {"sha": "c19d3fa059ba83573dccac7cfa452586f8d7846a", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -153,7 +153,6 @@ types\n   virtual void visit (HIR::LetStmt &stmt);\n   virtual void visit (HIR::ExprStmtWithoutBlock &stmt);\n   virtual void visit (HIR::ExprStmtWithBlock &stmt);\n-  virtual void visit (HIR::ExportedMacro &macro);\n \n   Analysis::Mappings &mappings;\n   Rust::Resolver::Resolver &resolver;"}, {"sha": "851fc7cd6ac1b168bad0be26364c663d60bbaf60", "filename": "gcc/rust/checks/errors/privacy/rust-pub-restricted-visitor.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -178,12 +178,5 @@ PubRestrictedVisitor::visit (HIR::ExternBlock &block)\n \t\t\tblock.get_locus ());\n }\n \n-void\n-PubRestrictedVisitor::visit (HIR::ExportedMacro &macro)\n-{\n-  is_restriction_valid (macro.get_mappings ().get_nodeid (),\n-\t\t\tmacro.get_locus ());\n-}\n-\n } // namespace Privacy\n } // namespace Rust"}, {"sha": "c77c6d86903a4fe5e786ce6927a985b1a6cfb112", "filename": "gcc/rust/checks/errors/privacy/rust-pub-restricted-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-pub-restricted-visitor.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -103,7 +103,6 @@ class PubRestrictedVisitor : public HIR::HIRVisItemVisitor\n   virtual void visit (HIR::Trait &trait);\n   virtual void visit (HIR::ImplBlock &impl);\n   virtual void visit (HIR::ExternBlock &block);\n-  virtual void visit (HIR::ExportedMacro &macro);\n \n private:\n   /* Stack of ancestor modules visited by this visitor */"}, {"sha": "b9a2b363708d3b2922f427b8cc9d2739eaf8765e", "filename": "gcc/rust/checks/errors/privacy/rust-reachability.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -230,10 +230,6 @@ void\n ReachabilityVisitor::visit (HIR::ExternBlock &)\n {}\n \n-void\n-ReachabilityVisitor::visit (HIR::ExportedMacro &macro)\n-{}\n-\n // FIXME: How can we visit Blocks in the current configuration? Have a full\n // visitor?\n } // namespace Privacy"}, {"sha": "bfc44eb8af9b6290c50abe69f72a30892bf29d54", "filename": "gcc/rust/checks/errors/privacy/rust-reachability.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -75,7 +75,6 @@ class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n   virtual void visit (HIR::Trait &trait);\n   virtual void visit (HIR::ImplBlock &impl);\n   virtual void visit (HIR::ExternBlock &block);\n-  virtual void visit (HIR::ExportedMacro &macro);\n \n private:\n   ReachLevel current_level;"}, {"sha": "30afaf9174e7289adcdc2dfa2f43825a3fe406ae", "filename": "gcc/rust/checks/errors/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -241,11 +241,5 @@ void\n VisibilityResolver::visit (HIR::ExternBlock &)\n {}\n \n-void\n-VisibilityResolver::visit (HIR::ExportedMacro &macro)\n-{\n-  resolve_and_update (&macro);\n-}\n-\n } // namespace Privacy\n } // namespace Rust"}, {"sha": "1c453d1b11cfdefcf80b138693ef2ccc2c68d04c", "filename": "gcc/rust/checks/errors/privacy/rust-visibility-resolver.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -90,7 +90,6 @@ class VisibilityResolver : public HIR::HIRVisItemVisitor\n   virtual void visit (HIR::Trait &trait);\n   virtual void visit (HIR::ImplBlock &impl);\n   virtual void visit (HIR::ExternBlock &block);\n-  virtual void visit (HIR::ExportedMacro &macro);\n \n private:\n   Analysis::Mappings &mappings;"}, {"sha": "131dc662ef4e7101cd0971d39459fcbf523f8b13", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -894,9 +894,5 @@ void\n ConstChecker::visit (BareFunctionType &)\n {}\n \n-void\n-ConstChecker::visit (ExportedMacro &)\n-{}\n-\n } // namespace HIR\n } // namespace Rust"}, {"sha": "15c6158f3970986a5e05ff330a06e0046ce0ca85", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -201,7 +201,6 @@ class ConstChecker : public HIRFullVisitor\n   virtual void visit (SliceType &type) override;\n   virtual void visit (InferredType &type) override;\n   virtual void visit (BareFunctionType &type) override;\n-  virtual void visit (ExportedMacro &macro) override;\n };\n \n } // namespace HIR"}, {"sha": "cdf62338a4df0aeaa10233449dbac638aaa8da87", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -951,9 +951,5 @@ void\n UnsafeChecker::visit (BareFunctionType &)\n {}\n \n-void\n-UnsafeChecker::visit (ExportedMacro &)\n-{}\n-\n } // namespace HIR\n } // namespace Rust"}, {"sha": "a55c6db68d106d1be480e3bc551c5bd98b3227e6", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -183,7 +183,6 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (SliceType &type) override;\n   virtual void visit (InferredType &type) override;\n   virtual void visit (BareFunctionType &type) override;\n-  virtual void visit (ExportedMacro &macro) override;\n };\n \n } // namespace HIR"}, {"sha": "a166b91483e20a4d27b275c661d0a556dc853e1d", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -705,28 +705,6 @@ ASTLoweringItem::visit (AST::ExternBlock &extern_block)\n   translated = lower_extern_block (extern_block);\n }\n \n-void\n-ASTLoweringItem::visit (AST::MacroRulesDefinition &def)\n-{\n-  bool is_export = false;\n-  for (const auto &attr : def.get_outer_attrs ())\n-    if (attr.get_path ().as_string () == \"macro_export\")\n-      is_export = true;\n-\n-  if (is_export)\n-    {\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, def.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-      auto locus = def.get_locus ();\n-\n-      translated\n-\t= new HIR::ExportedMacro (mapping, def.get_outer_attrs (), locus);\n-    }\n-}\n-\n HIR::SimplePath\n ASTLoweringSimplePath::translate (const AST::SimplePath &path)\n {"}, {"sha": "3680ed433d35bdab4b48aac1a801e6fd58405e9b", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -44,7 +44,6 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::Trait &trait) override;\n   void visit (AST::TraitImpl &impl_block) override;\n   void visit (AST::ExternBlock &extern_block) override;\n-  void visit (AST::MacroRulesDefinition &macro) override;\n \n private:\n   ASTLoweringItem () : translated (nullptr) {}"}, {"sha": "bc4ff53c01d6f6cf59f2c4c9a47410dceaeadc3c", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -697,8 +697,5 @@ Dump::visit (InferredType &)\n void\n Dump::visit (BareFunctionType &)\n {}\n-void\n-Dump::visit (ExportedMacro &)\n-{}\n } // namespace HIR\n } // namespace Rust"}, {"sha": "7b8b54d501dc71c87c8df3259033721270e60399", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -181,7 +181,6 @@ class Dump : public HIRFullVisitor\n   virtual void visit (SliceType &) override;\n   virtual void visit (InferredType &) override;\n   virtual void visit (BareFunctionType &) override;\n-  virtual void visit (ExportedMacro &) override;\n };\n \n } // namespace HIR"}, {"sha": "46abe430f380c0178a97882d821489fb54e05a69", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -35,9 +35,6 @@ class Lifetime;\n class GenericParam;\n class LifetimeParam;\n \n-// FIXME: ARTHUR: Move this somewhere else\n-class ExportedMacro;\n-\n class TraitItem;\n class ImplItem;\n struct Crate;"}, {"sha": "774f024571348c47d95d2a47c69d54f29d753a7c", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -3226,27 +3226,6 @@ class ExternBlock : public VisItem\n   }*/\n };\n \n-class ExportedMacro : public VisItem\n-{\n-  Location locus;\n-\n-public:\n-  ExportedMacro (Analysis::NodeMapping mapping, AST::AttrVec outer_attrs,\n-\t\t Location locus)\n-    : VisItem (mapping, Visibility (Visibility::PUBLIC),\n-\t       std::move (outer_attrs)),\n-      locus (locus)\n-  {}\n-\n-  virtual Location get_locus () const override;\n-  virtual ItemKind get_item_kind () const override;\n-  virtual ExportedMacro *clone_item_impl () const override;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRStmtVisitor &vis) override;\n-  void accept_vis (HIRVisItemVisitor &vis) override;\n-};\n-\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "17c9c6d895bfe86531b816cfd226b9033e451a65", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -153,7 +153,6 @@ class HIRFullVisitor\n   virtual void visit (SliceType &type) = 0;\n   virtual void visit (InferredType &type) = 0;\n   virtual void visit (BareFunctionType &type) = 0;\n-  virtual void visit (ExportedMacro &macro) = 0;\n };\n \n class HIRFullVisitorBase : public HIRFullVisitor\n@@ -304,7 +303,6 @@ class HIRFullVisitorBase : public HIRFullVisitor\n   virtual void visit (SliceType &) override {}\n   virtual void visit (InferredType &) override {}\n   virtual void visit (BareFunctionType &) override {}\n-  virtual void visit (ExportedMacro &) override {}\n };\n \n class HIRExternalItemVisitor\n@@ -339,7 +337,6 @@ class HIRVisItemVisitor\n   virtual void visit (Trait &trait) = 0;\n   virtual void visit (ImplBlock &impl) = 0;\n   virtual void visit (ExternBlock &block) = 0;\n-  virtual void visit (ExportedMacro &macro) = 0;\n };\n \n class HIRImplVisitor\n@@ -399,7 +396,6 @@ class HIRStmtVisitor\n   virtual void visit (LetStmt &stmt) = 0;\n   virtual void visit (ExprStmtWithoutBlock &stmt) = 0;\n   virtual void visit (ExprStmtWithBlock &stmt) = 0;\n-  virtual void visit (ExportedMacro &macro) = 0;\n };\n \n class HIRExpressionVisitor"}, {"sha": "a6a1736132fdf506592d003e95ac0eae44c11265", "filename": "gcc/rust/hir/tree/rust-hir.cc", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -5180,41 +5180,5 @@ void\n ConstGenericParam::accept_vis (HIRFullVisitor &)\n {}\n \n-void\n-ExportedMacro::accept_vis (HIRVisItemVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-ExportedMacro::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-ExportedMacro::accept_vis (HIRStmtVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-Location\n-ExportedMacro::get_locus () const\n-{\n-  return locus;\n-}\n-\n-Item::ItemKind\n-ExportedMacro::get_item_kind () const\n-{\n-  return ItemKind::MacroExport;\n-}\n-\n-ExportedMacro *\n-ExportedMacro::clone_item_impl () const\n-{\n-  return new ExportedMacro (*this);\n-}\n-\n } // namespace HIR\n } // namespace Rust"}, {"sha": "6ed74428356465cb24511c2c42a3ad685b0b27b7", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -191,7 +191,6 @@ class Item : public Stmt\n     Trait,\n     Impl,\n     Module,\n-    MacroExport,\n   };\n \n   virtual ItemKind get_item_kind () const = 0;"}, {"sha": "49a7226476d752ce22fea74fde05af4987131570", "filename": "gcc/rust/metadata/rust-export-metadata.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -169,7 +169,6 @@ class ExportVisItems : public HIR::HIRVisItemVisitor\n   void visit (HIR::StaticItem &) override {}\n   void visit (HIR::ImplBlock &) override {}\n   void visit (HIR::ExternBlock &) override {}\n-  void visit (HIR::ExportedMacro &) override {}\n \n   void visit (HIR::Trait &trait) override { ctx.emit_trait (trait); }\n "}, {"sha": "2268fdb6e6ccdc73b659ba98f2826811083398bd", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -50,7 +50,6 @@ class TypeCheckItem : private TypeCheckBase, private HIR::HIRVisItemVisitor\n   // nothing to do\n   void visit (HIR::ExternCrate &) override {}\n   void visit (HIR::UseDeclaration &) override {}\n-  void visit (HIR::ExportedMacro &) override {}\n \n protected:\n   std::vector<TyTy::SubstitutionParamMapping>"}, {"sha": "96ab3b1fd2f347d06afc8e313f08cd419fc266c0", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -147,10 +147,6 @@ TypeCheckStmt::visit (HIR::QualifiedPathInType &path)\n   infered = TypeCheckType::Resolve (&path);\n }\n \n-void\n-TypeCheckStmt::visit (HIR::ExportedMacro &path)\n-{}\n-\n void\n TypeCheckStmt::visit (HIR::TupleStruct &struct_decl)\n {"}, {"sha": "04878b8c5314c0fff7b748a603603991d06b3505", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -47,7 +47,6 @@ class TypeCheckStmt : private TypeCheckBase, private HIR::HIRStmtVisitor\n   void visit (HIR::ImplBlock &impl) override;\n   void visit (HIR::TypePath &path) override;\n   void visit (HIR::QualifiedPathInType &path) override;\n-  void visit (HIR::ExportedMacro &path) override;\n \n   // FIXME\n   // this seems like it should not be part of this visitor"}, {"sha": "0076fe9e3b7644099cdccb51aa71810acb9b074c", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -196,8 +196,6 @@ class TypeResolverDump : private TypeCheckBase, private HIR::HIRFullVisitorBase\n     dump += \"ctor: \" + type_string (expr.get_mappings ());\n   }\n \n-  void visit (HIR::ExportedMacro &) override {}\n-\n protected:\n   std::string type_string (const Analysis::NodeMapping &mappings)\n   {"}, {"sha": "6df00ad95beea06734a25d06e2f6e04164a482b2", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=7b14e6eecbb961a96cf94d9a0e67ffca7e4a3e8e", "patch": "@@ -41,7 +41,6 @@ static const BuiltinAttrDefinition __definitions[]\n      {\"repr\", CODE_GENERATION},\n      {\"path\", EXPANSION},\n      {\"macro_use\", NAME_RESOLUTION},\n-     {\"macro_export\", CODE_GENERATION}, // FIXME: And NAME_RESOLUTION as well\n      // FIXME: This is not implemented yet, see\n      // https://github.com/Rust-GCC/gccrs/issues/1475\n      {\"target_feature\", CODE_GENERATION},"}]}