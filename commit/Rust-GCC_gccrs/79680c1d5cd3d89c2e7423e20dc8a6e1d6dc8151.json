{"sha": "79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2ODBjMWQ1Y2QzZDg5YzJlNzQyM2UyMGRjOGE2ZTFkNmRjODE1MQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-10-28T09:56:20Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-02T13:20:01Z"}, "message": "Simplify and enhance 'libgomp.oacc-c-c++-common/pr85486*.c' [PR85486]\n\nAvoid code duplication, and better test what we expect to happen.\n\n\tlibgomp/\n\tPR target/85486\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486-2.c: Simplify and enhance.\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486-3.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486.c: Likewise.", "tree": {"sha": "7f5221370f1fa86824724ac5ff5b964dc2396b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f5221370f1fa86824724ac5ff5b964dc2396b2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5677444f7e7ca15557030902c3d09dab4852fa90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5677444f7e7ca15557030902c3d09dab4852fa90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5677444f7e7ca15557030902c3d09dab4852fa90"}], "stats": {"total": 117, "additions": 20, "deletions": 97}, "files": [{"sha": "d45326488cd8eae5daa1b9372b54096923684c2e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486-2.c", "status": "modified", "additions": 6, "deletions": 47, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-2.c?ref=79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151", "patch": "@@ -1,52 +1,11 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-DVECTOR_LENGTH=\" } */\n /* { dg-additional-options \"-fopenacc-dim=::128\" } */\n \n-/* Minimized from ref-1.C.  */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n-#include <stdio.h>\n+#include \"pr85486.c\"\n \n-#pragma acc routine vector\n-void __attribute__((noinline, noclone))\n-Vector (int *ptr, int n, const int inc)\n-{\n-  #pragma acc loop vector\n-  for (unsigned ix = 0; ix < n; ix++)\n-    ptr[ix] += inc;\n-}\n-\n-int\n-main (void)\n-{\n-  const int n = 32, m=32;\n-\n-  int ary[m][n];\n-  unsigned ix,  iy;\n-\n-  for (ix = m; ix--;)\n-    for (iy = n; iy--;)\n-      ary[ix][iy] = (1 << 16) + (ix << 8) + iy;\n-\n-  int err = 0;\n-\n-#pragma acc parallel copy (ary)\n-  {\n-    Vector (&ary[0][0], m * n, (1 << 24) - (1 << 16));\n-  }\n-\n-  for (ix = m; ix--;)\n-    for (iy = n; iy--;)\n-      if (ary[ix][iy] != ((1 << 24) + (ix << 8) + iy))\n-\t{\n-\t  printf (\"ary[%u][%u] = %x expected %x\\n\",\n-\t\t  ix, iy, ary[ix][iy], ((1 << 24) + (ix << 8) + iy));\n-\t  err++;\n-\t}\n-\n-  if (err)\n-    {\n-      printf (\"%d failed\\n\", err);\n-      return 1;\n-    }\n-\n-  return 0;\n-}\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=32\" } */"}, {"sha": "33480a4ae6825faf0fe485febc8f867b4f3a71eb", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486-3.c", "status": "modified", "additions": 6, "deletions": 49, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486-3.c?ref=79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151", "patch": "@@ -1,54 +1,11 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-DVECTOR_LENGTH=\" } */\n /* { dg-set-target-env-var \"GOMP_OPENACC_DIM\" \"::128\" } */\n \n-/* Minimized from ref-1.C.  */\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n-#include <stdio.h>\n+#include \"pr85486.c\"\n \n-#pragma acc routine vector\n-void __attribute__((noinline, noclone))\n-Vector (int *ptr, int n, const int inc)\n-{\n-  #pragma acc loop vector\n-  for (unsigned ix = 0; ix < n; ix++)\n-    ptr[ix] += inc;\n-}\n-\n-int\n-main (void)\n-{\n-  const int n = 32, m=32;\n-\n-  int ary[m][n];\n-  unsigned ix,  iy;\n-\n-  for (ix = m; ix--;)\n-    for (iy = n; iy--;)\n-      ary[ix][iy] = (1 << 16) + (ix << 8) + iy;\n-\n-  int err = 0;\n-\n-#pragma acc parallel copy (ary)\n-  {\n-    Vector (&ary[0][0], m * n, (1 << 24) - (1 << 16));\n-  }\n-\n-  for (ix = m; ix--;)\n-    for (iy = n; iy--;)\n-      if (ary[ix][iy] != ((1 << 24) + (ix << 8) + iy))\n-\t{\n-\t  printf (\"ary[%u][%u] = %x expected %x\\n\",\n-\t\t  ix, iy, ary[ix][iy], ((1 << 24) + (ix << 8) + iy));\n-\t  err++;\n-\t}\n-\n-  if (err)\n-    {\n-      printf (\"%d failed\\n\", err);\n-      return 1;\n-    }\n-\n-  return 0;\n-}\n-\n-/* { dg-prune-output \"using vector_length \\\\(32\\\\), ignoring runtime setting\" } */\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=32\" } */"}, {"sha": "0d98b82f9932342197280e058f2c5ed8475526c3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c?ref=79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151", "patch": "@@ -1,4 +1,8 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-DVECTOR_LENGTH=vector_length(128)\" } */\n+\n+/* { dg-additional-options \"-foffload=-fdump-tree-oaccdevlow\" } */\n+/* { dg-set-target-env-var \"GOMP_DEBUG\" \"1\" } */\n \n /* Minimized from ref-1.C.  */\n \n@@ -27,7 +31,7 @@ main (void)\n \n   int err = 0;\n \n-#pragma acc parallel copy (ary) vector_length (128) /* { dg-warning \"using vector_length \\\\(32\\\\) due to call to vector-partitionable routine, ignoring 128\" } */\n+#pragma acc parallel copy (ary) VECTOR_LENGTH /* { dg-warning \"using vector_length \\\\(32\\\\) due to call to vector-partitionable routine, ignoring 128\" } */\n   {\n     Vector (&ary[0][0], m * n, (1 << 24) - (1 << 16));\n   }\n@@ -49,3 +53,6 @@ main (void)\n \n   return 0;\n }\n+\n+/* { dg-final { scan-offload-tree-dump \"__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 32\\\\)\" \"oaccdevlow\" } } */\n+/* { dg-output \"nvptx_exec: kernel main\\\\\\$_omp_fn\\\\\\$0: launch gangs=1, workers=1, vectors=32\" } */"}]}