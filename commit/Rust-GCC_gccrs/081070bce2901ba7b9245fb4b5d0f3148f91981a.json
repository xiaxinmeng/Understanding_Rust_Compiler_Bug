{"sha": "081070bce2901ba7b9245fb4b5d0f3148f91981a", "node_id": "C_kwDOANBUbNoAKDA4MTA3MGJjZTI5MDFiYTdiOTI0NWZiNGI1ZDBmMzE0OGY5MTk4MWE", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:49:32Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T04:56:30Z"}, "message": "AVX512FP16: Add vfcmaddcph/vfmaddcph/vfcmulcph/vfmulcph\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm512_fcmadd_pch):\n\tNew intrinsic.\n\t(_mm512_mask_fcmadd_pch): Likewise.\n\t(_mm512_mask3_fcmadd_pch): Likewise.\n\t(_mm512_maskz_fcmadd_pch): Likewise.\n\t(_mm512_fmadd_pch): Likewise.\n\t(_mm512_mask_fmadd_pch): Likewise.\n\t(_mm512_mask3_fmadd_pch): Likewise.\n\t(_mm512_maskz_fmadd_pch): Likewise.\n\t(_mm512_fcmadd_round_pch): Likewise.\n\t(_mm512_mask_fcmadd_round_pch): Likewise.\n\t(_mm512_mask3_fcmadd_round_pch): Likewise.\n\t(_mm512_maskz_fcmadd_round_pch): Likewise.\n\t(_mm512_fmadd_round_pch): Likewise.\n\t(_mm512_mask_fmadd_round_pch): Likewise.\n\t(_mm512_mask3_fmadd_round_pch): Likewise.\n\t(_mm512_maskz_fmadd_round_pch): Likewise.\n\t(_mm512_fcmul_pch): Likewise.\n\t(_mm512_mask_fcmul_pch): Likewise.\n\t(_mm512_maskz_fcmul_pch): Likewise.\n\t(_mm512_fmul_pch): Likewise.\n\t(_mm512_mask_fmul_pch): Likewise.\n\t(_mm512_maskz_fmul_pch): Likewise.\n\t(_mm512_fcmul_round_pch): Likewise.\n\t(_mm512_mask_fcmul_round_pch): Likewise.\n\t(_mm512_maskz_fcmul_round_pch): Likewise.\n\t(_mm512_fmul_round_pch): Likewise.\n\t(_mm512_mask_fmul_round_pch): Likewise.\n\t(_mm512_maskz_fmul_round_pch): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_fmadd_pch):\n\tNew intrinsic.\n\t(_mm_mask_fmadd_pch): Likewise.\n\t(_mm_mask3_fmadd_pch): Likewise.\n\t(_mm_maskz_fmadd_pch): Likewise.\n\t(_mm256_fmadd_pch): Likewise.\n\t(_mm256_mask_fmadd_pch): Likewise.\n\t(_mm256_mask3_fmadd_pch): Likewise.\n\t(_mm256_maskz_fmadd_pch): Likewise.\n\t(_mm_fcmadd_pch): Likewise.\n\t(_mm_mask_fcmadd_pch): Likewise.\n\t(_mm_mask3_fcmadd_pch): Likewise.\n\t(_mm_maskz_fcmadd_pch): Likewise.\n\t(_mm256_fcmadd_pch): Likewise.\n\t(_mm256_mask_fcmadd_pch): Likewise.\n\t(_mm256_mask3_fcmadd_pch): Likewise.\n\t(_mm256_maskz_fcmadd_pch): Likewise.\n\t(_mm_fmul_pch): Likewise.\n\t(_mm_mask_fmul_pch): Likewise.\n\t(_mm_maskz_fmul_pch): Likewise.\n\t(_mm256_fmul_pch): Likewise.\n\t(_mm256_mask_fmul_pch): Likewise.\n\t(_mm256_maskz_fmul_pch): Likewise.\n\t(_mm_fcmul_pch): Likewise.\n\t(_mm_mask_fcmul_pch): Likewise.\n\t(_mm_maskz_fcmul_pch): Likewise.\n\t(_mm256_fcmul_pch): Likewise.\n\t(_mm256_mask_fcmul_pch): Likewise.\n\t(_mm256_maskz_fcmul_pch): Likewise.\n\t* config/i386/i386-builtin-types.def (V8HF_FTYPE_V8HF_V8HF_V8HF,\n\tV8HF_FTYPE_V16HF_V16HF_V16HF, V16HF_FTYPE_V16HF_V16HF_V16HF_UQI,\n\tV32HF_FTYPE_V32HF_V32HF_V32HF_INT,\n\tV32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT): Add new builtin types.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/i386-expand.c: Handle new builtin types.\n\t* config/i386/subst.md (SUBST_CV): New.\n\t(maskc_name): Ditto.\n\t(maskc_operand3): Ditto.\n\t(maskc): Ditto.\n\t(sdc_maskz_name): Ditto.\n\t(sdc_mask_op4): Ditto.\n\t(sdc_mask_op5): Ditto.\n\t(sdc_mask_mode512bit_condition): Ditto.\n\t(sdc): Ditto.\n\t(round_maskc_operand3): Ditto.\n\t(round_sdc_mask_operand4): Ditto.\n\t(round_maskc_op3): Ditto.\n\t(round_sdc_mask_op4): Ditto.\n\t(round_saeonly_sdc_mask_operand5): Ditto.\n\t* config/i386/sse.md (unspec): Add complex fma unspecs.\n\t(avx512fmaskcmode): New.\n\t(UNSPEC_COMPLEX_F_C_MA): Ditto.\n\t(UNSPEC_COMPLEX_F_C_MUL): Ditto.\n\t(complexopname): Ditto.\n\t(<avx512>_fmaddc_<mode>_maskz<round_expand_name>): New expander.\n\t(<avx512>_fcmaddc_<mode>_maskz<round_expand_name>): Ditto.\n\t(fma_<complexopname>_<mode><sdc_maskz_name><round_name>): New\n\tdefine insn.\n\t(<avx512>_<complexopname>_<mode>_mask<round_name>): Ditto.\n\t(<avx512>_<complexopname>_<mode><maskc_name><round_name>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "7b7b9eafce68334fe5340f87ee9035fe6bee523c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7b9eafce68334fe5340f87ee9035fe6bee523c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/081070bce2901ba7b9245fb4b5d0f3148f91981a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081070bce2901ba7b9245fb4b5d0f3148f91981a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/081070bce2901ba7b9245fb4b5d0f3148f91981a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081070bce2901ba7b9245fb4b5d0f3148f91981a/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144c4984655e9c687dfdda6b1ac39afea8b2a037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144c4984655e9c687dfdda6b1ac39afea8b2a037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144c4984655e9c687dfdda6b1ac39afea8b2a037"}], "stats": {"total": 895, "additions": 895, "deletions": 0}, "files": [{"sha": "e402a59ef57b495d90c4238c3ef7f4489c6927f2", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 396, "deletions": 0, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -6115,6 +6115,402 @@ _mm_maskz_fnmsub_round_sh (__mmask8 __U, __m128h __W, __m128h __A,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vf[,c]maddcph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fcmadd_pch (__m512h __A, __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmaddcph512_round ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fcmadd_pch (__m512h __A, __mmask16 __B, __m512h __C, __m512h __D)\n+{\n+  return (__m512h) __builtin_ia32_movaps512_mask\n+    ((__v16sf)\n+     __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t      (__v32hf) __C,\n+\t\t\t\t\t      (__v32hf) __D, __B,\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION),\n+     (__v16sf) __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask3_fcmadd_pch (__m512h __A, __m512h __B, __m512h __C, __mmask16 __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t     (__v32hf) __B,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     __D, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fcmadd_pch (__mmask16 __A, __m512h __B, __m512h __C, __m512h __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmaddcph512_maskz_round ((__v32hf) __B,\n+\t\t\t\t\t      (__v32hf) __C,\n+\t\t\t\t\t      (__v32hf) __D,\n+\t\t\t\t\t      __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fmadd_pch (__m512h __A, __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddcph512_round ((__v32hf) __A,\n+\t\t\t\t       (__v32hf) __B,\n+\t\t\t\t       (__v32hf) __C,\n+\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fmadd_pch (__m512h __A, __mmask16 __B, __m512h __C, __m512h __D)\n+{\n+  return (__m512h) __builtin_ia32_movaps512_mask\n+    ((__v16sf)\n+     __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     (__v32hf) __D, __B,\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION),\n+     (__v16sf) __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask3_fmadd_pch (__m512h __A, __m512h __B, __m512h __C, __mmask16 __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t    (__v32hf) __B,\n+\t\t\t\t\t    (__v32hf) __C,\n+\t\t\t\t\t    __D, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fmadd_pch (__mmask16 __A, __m512h __B, __m512h __C, __m512h __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddcph512_maskz_round ((__v32hf) __B,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     (__v32hf) __D,\n+\t\t\t\t\t     __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fcmadd_round_pch (__m512h __A, __m512h __B, __m512h __C, const int __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmaddcph512_round ((__v32hf) __A,\n+\t\t\t\t\t(__v32hf) __B,\n+\t\t\t\t\t(__v32hf) __C,\n+\t\t\t\t\t__D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fcmadd_round_pch (__m512h __A, __mmask16 __B, __m512h __C,\n+\t\t\t      __m512h __D, const int __E)\n+{\n+  return (__m512h) __builtin_ia32_movaps512_mask\n+    ((__v16sf)\n+     __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t      (__v32hf) __C,\n+\t\t\t\t\t      (__v32hf) __D, __B,\n+\t\t\t\t\t      __E),\n+     (__v16sf) __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask3_fcmadd_round_pch (__m512h __A, __m512h __B, __m512h __C,\n+\t\t\t       __mmask16 __D, const int __E)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t     (__v32hf) __B,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     __D, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fcmadd_round_pch (__mmask16 __A, __m512h __B, __m512h __C,\n+\t\t\t       __m512h __D, const int __E)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmaddcph512_maskz_round ((__v32hf) __B,\n+\t\t\t\t\t      (__v32hf) __C,\n+\t\t\t\t\t      (__v32hf) __D,\n+\t\t\t\t\t      __A, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fmadd_round_pch (__m512h __A, __m512h __B, __m512h __C, const int __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddcph512_round ((__v32hf) __A,\n+\t\t\t\t       (__v32hf) __B,\n+\t\t\t\t       (__v32hf) __C,\n+\t\t\t\t       __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fmadd_round_pch (__m512h __A, __mmask16 __B, __m512h __C,\n+\t\t\t     __m512h __D, const int __E)\n+{\n+  return (__m512h) __builtin_ia32_movaps512_mask\n+    ((__v16sf)\n+     __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     (__v32hf) __D, __B,\n+\t\t\t\t\t     __E),\n+     (__v16sf) __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask3_fmadd_round_pch (__m512h __A, __m512h __B, __m512h __C,\n+\t\t\t      __mmask16 __D, const int __E)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t    (__v32hf) __B,\n+\t\t\t\t\t    (__v32hf) __C,\n+\t\t\t\t\t    __D, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fmadd_round_pch (__mmask16 __A, __m512h __B, __m512h __C,\n+\t\t\t      __m512h __D, const int __E)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmaddcph512_maskz_round ((__v32hf) __B,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     (__v32hf) __D,\n+\t\t\t\t\t     __A, __E);\n+}\n+\n+#else\n+#define _mm512_fcmadd_round_pch(A, B, C, D)\t\t\t\\\n+  (__m512h) __builtin_ia32_vfcmaddcph512_round ((A), (B), (C), (D))\n+\n+#define _mm512_mask_fcmadd_round_pch(A, B, C, D, E)\t\t\t\\\n+  ((__m512h) __builtin_ia32_movaps512_mask (\t\t\t\t\\\n+   (__v16sf)\t\t\t\t\t\t\t\t\\\n+    __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) (A),\t\t\\\n+\t\t\t\t\t     (__v32hf) (C),\t\t\\\n+\t\t\t\t\t     (__v32hf) (D),\t\t\\\n+\t\t\t\t\t     (B), (E)),\t\t\t\\\n+\t\t\t\t\t     (__v16sf) (A), (B)));\n+\n+\n+#define _mm512_mask3_fcmadd_round_pch(A, B, C, D, E)\t\t\t\\\n+  ((__m512h)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfcmaddcph512_mask_round ((A), (B), (C), (D), (E)))\n+\n+#define _mm512_maskz_fcmadd_round_pch(A, B, C, D, E)\t\t\t\\\n+  (__m512h)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfcmaddcph512_maskz_round ((B), (C), (D), (A), (E))\n+\n+#define _mm512_fmadd_round_pch(A, B, C, D)\t\t\t\\\n+  (__m512h) __builtin_ia32_vfmaddcph512_round ((A), (B), (C), (D))\n+\n+#define _mm512_mask_fmadd_round_pch(A, B, C, D, E)\t\t\t\\\n+  ((__m512h) __builtin_ia32_movaps512_mask (\t\t\t\t\\\n+   (__v16sf)\t\t\t\t\t\t\t\t\\\n+    __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) (A),\t\t\\\n+\t\t\t\t\t    (__v32hf) (C),\t\t\\\n+\t\t\t\t\t    (__v32hf) (D),\t\t\\\n+\t\t\t\t\t    (B), (E)),\t\t\t\\\n+\t\t\t\t\t    (__v16sf) (A), (B)));\n+\n+#define _mm512_mask3_fmadd_round_pch(A, B, C, D, E)\t\t\t\\\n+  (__m512h)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfmaddcph512_mask_round ((A), (B), (C), (D), (E))\n+\n+#define _mm512_maskz_fmadd_round_pch(A, B, C, D, E)\t\t\t\\\n+  (__m512h)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfmaddcph512_maskz_round ((B), (C), (D), (A), (E))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vf[,c]mulcph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fcmul_pch (__m512h __A, __m512h __B)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmulcph512_round ((__v32hf) __A,\n+\t\t\t\t       (__v32hf) __B,\n+\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fcmul_pch (__m512h __A, __mmask16 __B, __m512h __C, __m512h __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmulcph512_mask_round ((__v32hf) __C,\n+\t\t\t\t\t    (__v32hf) __D,\n+\t\t\t\t\t    (__v32hf) __A,\n+\t\t\t\t\t    __B, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fcmul_pch (__mmask16 __A, __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmulcph512_mask_round ((__v32hf) __B,\n+\t\t\t\t\t    (__v32hf) __C,\n+\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t    __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fmul_pch (__m512h __A, __m512h __B)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmulcph512_round ((__v32hf) __A,\n+\t\t\t\t      (__v32hf) __B,\n+\t\t\t\t      _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fmul_pch (__m512h __A, __mmask16 __B, __m512h __C, __m512h __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmulcph512_mask_round ((__v32hf) __C,\n+\t\t\t\t\t   (__v32hf) __D,\n+\t\t\t\t\t   (__v32hf) __A,\n+\t\t\t\t\t   __B, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fmul_pch (__mmask16 __A, __m512h __B, __m512h __C)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmulcph512_mask_round ((__v32hf) __B,\n+\t\t\t\t\t   (__v32hf) __C,\n+\t\t\t\t\t   _mm512_setzero_ph (),\n+\t\t\t\t\t   __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fcmul_round_pch (__m512h __A, __m512h __B, const int __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmulcph512_round ((__v32hf) __A,\n+\t\t\t\t       (__v32hf) __B, __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fcmul_round_pch (__m512h __A, __mmask16 __B, __m512h __C,\n+\t\t\t     __m512h __D, const int __E)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmulcph512_mask_round ((__v32hf) __C,\n+\t\t\t\t\t    (__v32hf) __D,\n+\t\t\t\t\t    (__v32hf) __A,\n+\t\t\t\t\t    __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fcmul_round_pch (__mmask16 __A, __m512h __B,\n+\t\t\t      __m512h __C, const int __E)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfcmulcph512_mask_round ((__v32hf) __B,\n+\t\t\t\t\t    (__v32hf) __C,\n+\t\t\t\t\t    _mm512_setzero_ph (),\n+\t\t\t\t\t    __A, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fmul_round_pch (__m512h __A, __m512h __B, const int __D)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmulcph512_round ((__v32hf) __A,\n+\t\t\t\t      (__v32hf) __B,\n+\t\t\t\t      __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fmul_round_pch (__m512h __A, __mmask16 __B, __m512h __C,\n+\t\t\t    __m512h __D, const int __E)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmulcph512_mask_round ((__v32hf) __C,\n+\t\t\t\t\t   (__v32hf) __D,\n+\t\t\t\t\t   (__v32hf) __A,\n+\t\t\t\t\t   __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_fmul_round_pch (__mmask16 __A, __m512h __B,\n+\t\t\t     __m512h __C, const int __E)\n+{\n+  return (__m512h)\n+    __builtin_ia32_vfmulcph512_mask_round ((__v32hf) __B,\n+\t\t\t\t\t   (__v32hf) __C,\n+\t\t\t\t\t   _mm512_setzero_ph (),\n+\t\t\t\t\t   __A, __E);\n+}\n+\n+#else\n+#define _mm512_fcmul_round_pch(A, B, D)\t\t\t\t\\\n+  (__m512h) __builtin_ia32_vfcmulcph512_round ((A), (B), (D))\n+\n+#define _mm512_mask_fcmul_round_pch(A, B, C, D, E)\t\t\t\\\n+  (__m512h) __builtin_ia32_vfcmulcph512_mask_round ((C), (D), (A), (B), (E))\n+\n+#define _mm512_maskz_fcmul_round_pch(A, B, C, E)\t\t\t\\\n+  (__m512h) __builtin_ia32_vfcmulcph512_mask_round ((B), (C),\t\t\\\n+\t\t\t\t\t\t    (__v32hf)\t\t\\\n+\t\t\t\t\t\t    _mm512_setzero_ph (), \\\n+\t\t\t\t\t\t    (A), (E))\n+\n+#define _mm512_fmul_round_pch(A, B, D)\t\t\t\\\n+  (__m512h) __builtin_ia32_vfmulcph512_round ((A), (B), (D))\n+\n+#define _mm512_mask_fmul_round_pch(A, B, C, D, E)\t\t\t  \\\n+  (__m512h) __builtin_ia32_vfmulcph512_mask_round ((C), (D), (A), (B), (E))\n+\n+#define _mm512_maskz_fmul_round_pch(A, B, C, E)\t\t\t\t  \\\n+  (__m512h) __builtin_ia32_vfmulcph512_mask_round ((B), (C),\t\t  \\\n+\t\t\t\t\t\t   (__v32hf)\t\t  \\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),  \\\n+\t\t\t\t\t\t   (A), (E))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "9f71af2378d3b13f0fcbf049fb5889580e8efca7", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -2815,6 +2815,270 @@ _mm_maskz_fnmsub_ph (__mmask8 __U, __m128h __A, __m128h __B,\n \t\t\t\t\t\t\t__U);\n }\n \n+/* Intrinsics vf[,c]maddcph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_pch (__m128h __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddcph128 ((__v8hf) __A,\n+\t\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t\t(__v8hf) __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_pch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h) __builtin_ia32_movaps128_mask\n+    ((__v4sf)\n+     __builtin_ia32_vfmaddcph128_mask ((__v8hf) __A,\n+\t\t\t\t       (__v8hf) __C,\n+\t\t\t\t       (__v8hf) __D, __B),\n+     (__v4sf) __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_pch (__m128h __A, __m128h __B, __m128h __C,  __mmask8 __D)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddcph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t     (__v8hf) __B,\n+\t\t\t\t\t\t     (__v8hf) __C, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_pch (__mmask8 __A, __m128h __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddcph128_maskz ((__v8hf) __B,\n+\t\t\t\t\t\t      (__v8hf) __C,\n+\t\t\t\t\t\t      (__v8hf) __D, __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmadd_pch (__m256h __A, __m256h __B, __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfmaddcph256 ((__v16hf) __A,\n+\t\t\t\t\t\t(__v16hf) __B,\n+\t\t\t\t\t\t(__v16hf) __C);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_fmadd_pch (__m256h __A, __mmask8 __B, __m256h __C, __m256h __D)\n+{\n+  return (__m256h) __builtin_ia32_movaps256_mask\n+    ((__v8sf)\n+     __builtin_ia32_vfmaddcph256_mask ((__v16hf) __A,\n+\t\t\t\t       (__v16hf) __C,\n+\t\t\t\t       (__v16hf) __D, __B),\n+     (__v8sf) __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask3_fmadd_pch (__m256h __A, __m256h __B, __m256h __C,  __mmask8 __D)\n+{\n+  return (__m256h) __builtin_ia32_vfmaddcph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t     (__v16hf) __B,\n+\t\t\t\t\t\t     (__v16hf) __C, __D);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_fmadd_pch (__mmask8 __A, __m256h __B, __m256h __C, __m256h __D)\n+{\n+  return (__m256h)__builtin_ia32_vfmaddcph256_maskz ((__v16hf) __B,\n+\t\t\t\t\t\t     (__v16hf) __C,\n+\t\t\t\t\t\t     (__v16hf) __D, __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fcmadd_pch (__m128h __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfcmaddcph128 ((__v8hf) __A,\n+\t\t\t\t\t\t (__v8hf) __B,\n+\t\t\t\t\t\t (__v8hf) __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fcmadd_pch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h) __builtin_ia32_movaps128_mask\n+    ((__v4sf)\n+     __builtin_ia32_vfcmaddcph128_mask ((__v8hf) __A,\n+\t\t\t\t\t(__v8hf) __C,\n+\t\t\t\t\t(__v8hf) __D, __B),\n+     (__v4sf) __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fcmadd_pch (__m128h __A, __m128h __B, __m128h __C,  __mmask8 __D)\n+{\n+  return (__m128h) __builtin_ia32_vfcmaddcph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t      (__v8hf) __B,\n+\t\t\t\t\t\t      (__v8hf) __C, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fcmadd_pch (__mmask8 __A, __m128h __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h)__builtin_ia32_vfcmaddcph128_maskz ((__v8hf) __B,\n+\t\t\t\t\t\t      (__v8hf) __C,\n+\t\t\t\t\t\t      (__v8hf) __D, __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fcmadd_pch (__m256h __A, __m256h __B, __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfcmaddcph256 ((__v16hf) __A,\n+\t\t\t\t\t\t (__v16hf) __B,\n+\t\t\t\t\t\t (__v16hf) __C);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_fcmadd_pch (__m256h __A, __mmask8 __B, __m256h __C, __m256h __D)\n+{\n+  return (__m256h) __builtin_ia32_movaps256_mask\n+    ((__v8sf)\n+     __builtin_ia32_vfcmaddcph256_mask ((__v16hf) __A,\n+\t\t\t\t\t(__v16hf) __C,\n+\t\t\t\t\t(__v16hf) __D, __B),\n+     (__v8sf) __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask3_fcmadd_pch (__m256h __A, __m256h __B, __m256h __C,  __mmask8 __D)\n+{\n+  return (__m256h) __builtin_ia32_vfcmaddcph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t      (__v16hf) __B,\n+\t\t\t\t\t\t      (__v16hf) __C, __D);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_fcmadd_pch (__mmask8 __A, __m256h __B, __m256h __C, __m256h __D)\n+{\n+  return (__m256h) __builtin_ia32_vfcmaddcph256_maskz ((__v16hf) __B,\n+\t\t\t\t\t\t       (__v16hf) __C,\n+\t\t\t\t\t\t       (__v16hf) __D, __A);\n+}\n+\n+/* Intrinsics vf[,c]mulcph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmul_pch (__m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmulcph128 ((__v8hf) __A, (__v8hf) __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmul_pch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h) __builtin_ia32_vfmulcph128_mask ((__v8hf) __C,\n+\t\t\t\t\t\t    (__v8hf) __D,\n+\t\t\t\t\t\t    (__v8hf) __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmul_pch (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfmulcph128_mask ((__v8hf) __B,\n+\t\t\t\t\t\t    (__v8hf) __C,\n+\t\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t\t    __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmul_pch (__m256h __A, __m256h __B)\n+{\n+  return (__m256h) __builtin_ia32_vfmulcph256 ((__v16hf) __A,\n+\t\t\t\t\t       (__v16hf) __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_fmul_pch (__m256h __A, __mmask8 __B, __m256h __C, __m256h __D)\n+{\n+  return (__m256h) __builtin_ia32_vfmulcph256_mask ((__v16hf) __C,\n+\t\t\t\t\t\t    (__v16hf) __D,\n+\t\t\t\t\t\t    (__v16hf) __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_fmul_pch (__mmask8 __A, __m256h __B, __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfmulcph256_mask ((__v16hf) __B,\n+\t\t\t\t\t\t    (__v16hf) __C,\n+\t\t\t\t\t\t    _mm256_setzero_ph (),\n+\t\t\t\t\t\t    __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fcmul_pch (__m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfcmulcph128 ((__v8hf) __A,\n+\t\t\t\t\t\t(__v8hf) __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fcmul_pch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h) __builtin_ia32_vfcmulcph128_mask ((__v8hf) __C,\n+\t\t\t\t\t\t     (__v8hf) __D,\n+\t\t\t\t\t\t     (__v8hf) __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fcmul_pch (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h) __builtin_ia32_vfcmulcph128_mask ((__v8hf) __B,\n+\t\t\t\t\t\t     (__v8hf) __C,\n+\t\t\t\t\t\t     _mm_setzero_ph (),\n+\t\t\t\t\t\t     __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fcmul_pch (__m256h __A, __m256h __B)\n+{\n+  return (__m256h) __builtin_ia32_vfcmulcph256 ((__v16hf) __A, (__v16hf) __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_fcmul_pch (__m256h __A, __mmask8 __B, __m256h __C, __m256h __D)\n+{\n+  return (__m256h) __builtin_ia32_vfcmulcph256_mask ((__v16hf) __C,\n+\t\t\t\t\t\t     (__v16hf) __D,\n+\t\t\t\t\t\t     (__v16hf) __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_fcmul_pch (__mmask8 __A, __m256h __B, __m256h __C)\n+{\n+  return (__m256h) __builtin_ia32_vfcmulcph256_mask ((__v16hf) __B,\n+\t\t\t\t\t\t     (__v16hf) __C,\n+\t\t\t\t\t\t     _mm256_setzero_ph (),\n+\t\t\t\t\t\t     __A);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "4c355c587b53b464d8d09c9f040740d6430c2e07", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -1348,6 +1348,7 @@ DEF_FUNCTION_TYPE (V8DI, V8HF, V8DI, UQI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8HF, V8DF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8DI, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8DF, V8HF, UQI, INT)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V2DF, V8HF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V4SF, V8HF, V8HF, UQI, INT)\n@@ -1358,20 +1359,24 @@ DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF)\n DEF_FUNCTION_TYPE (V16HI, V16HF, V16HI, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16HI, V16HF, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, UHI)\n+DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF)\n DEF_FUNCTION_TYPE (V16SI, V16HF, V16SI, UHI, INT)\n DEF_FUNCTION_TYPE (V16SF, V16HF, V16SF, UHI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, INT, V16HF, UHI)\n DEF_FUNCTION_TYPE (UHI, V16HF, V16HF, INT, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16SI, V16HF, UHI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16SF, V16HF, UHI, INT)\n+DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UQI)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, INT)\n DEF_FUNCTION_TYPE (V32HI, V32HF, V32HI, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HI, V32HF, USI, INT)\n DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI, INT)\n+DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI)\n DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI, INT)\n+DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, UHI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, INT, V32HF, USI, INT)"}, {"sha": "3d9f099df33c9bf77833561c5076da36fed7a475", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -2911,6 +2911,26 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fnmsub_v8hf_mask, \"__builtin_ia32_vfnmsubph128_mask\", IX86_BUILTIN_VFNMSUBPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fnmsub_v8hf_mask3, \"__builtin_ia32_vfnmsubph128_mask3\", IX86_BUILTIN_VFNMSUBPH128_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fnmsub_v8hf_maskz, \"__builtin_ia32_vfnmsubph128_maskz\", IX86_BUILTIN_VFNMSUBPH128_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fmaddc_v8hf, \"__builtin_ia32_vfmaddcph128\", IX86_BUILTIN_VFMADDCPH_V8HF, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddc_v8hf_mask, \"__builtin_ia32_vfmaddcph128_mask\", IX86_BUILTIN_VFMADDCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddc_v8hf_maskz, \"__builtin_ia32_vfmaddcph128_maskz\", IX86_BUILTIN_VFMADDCPH128_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fmaddc_v16hf, \"__builtin_ia32_vfmaddcph256\", IX86_BUILTIN_VFMADDCPH_V16HF, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddc_v16hf_mask, \"__builtin_ia32_vfmaddcph256_mask\", IX86_BUILTIN_VFMADDCPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddc_v16hf_maskz, \"__builtin_ia32_vfmaddcph256_maskz\", IX86_BUILTIN_VFMADDCPH256_MASKZ, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fcmaddc_v8hf, \"__builtin_ia32_vfcmaddcph128\", IX86_BUILTIN_VFCMADDCPH_V8HF, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddc_v8hf_mask, \"__builtin_ia32_vfcmaddcph128_mask\", IX86_BUILTIN_VFCMADDCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddc_v8hf_maskz, \"__builtin_ia32_vfcmaddcph128_maskz\", IX86_BUILTIN_VFCMADDCPH128_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fcmaddc_v16hf, \"__builtin_ia32_vfcmaddcph256\", IX86_BUILTIN_VFCMADDCPH_V16HF, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fcmaddc_v16hf_mask, \"__builtin_ia32_vfcmaddcph256_mask\", IX86_BUILTIN_VFCMADDCPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fcmaddc_v16hf_maskz, \"__builtin_ia32_vfcmaddcph256_maskz\", IX86_BUILTIN_VFCMADDCPH256_MASKZ, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmulc_v8hf, \"__builtin_ia32_vfcmulcph128\", IX86_BUILTIN_VFCMULCPH_V8HF, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmulc_v8hf_mask, \"__builtin_ia32_vfcmulcph128_mask\", IX86_BUILTIN_VFCMULCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fcmulc_v16hf, \"__builtin_ia32_vfcmulcph256\", IX86_BUILTIN_VFCMULCPH_V16HF, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fcmulc_v16hf_mask, \"__builtin_ia32_vfcmulcph256_mask\", IX86_BUILTIN_VFCMULCPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmulc_v8hf, \"__builtin_ia32_vfmulcph128\", IX86_BUILTIN_VFMULCPH_V8HF, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmulc_v8hf_mask, \"__builtin_ia32_vfmulcph128_mask\", IX86_BUILTIN_VFMULCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmulc_v16hf, \"__builtin_ia32_vfmulcph256\", IX86_BUILTIN_VFMULCPH_V16HF, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmulc_v16hf_mask, \"__builtin_ia32_vfmulcph256_mask\", IX86_BUILTIN_VFMULCPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3201,6 +3221,16 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfnmadd_v8hf_mask_round\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfnmadd_v8hf_mask3_round, \"__builtin_ia32_vfnmaddsh3_mask3\", IX86_BUILTIN_VFNMADDSH3_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfnmadd_v8hf_maskz_round, \"__builtin_ia32_vfnmaddsh3_maskz\", IX86_BUILTIN_VFNMADDSH3_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfmsub_v8hf_mask3_round, \"__builtin_ia32_vfmsubsh3_mask3\", IX86_BUILTIN_VFMSUBSH3_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fmaddc_v32hf_round, \"__builtin_ia32_vfmaddcph512_round\", IX86_BUILTIN_VFMADDCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddc_v32hf_mask_round, \"__builtin_ia32_vfmaddcph512_mask_round\", IX86_BUILTIN_VFMADDCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddc_v32hf_maskz_round, \"__builtin_ia32_vfmaddcph512_maskz_round\", IX86_BUILTIN_VFMADDCPH512_MASKZ_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fcmaddc_v32hf_round, \"__builtin_ia32_vfcmaddcph512_round\", IX86_BUILTIN_VFCMADDCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmaddc_v32hf_mask_round, \"__builtin_ia32_vfcmaddcph512_mask_round\", IX86_BUILTIN_VFCMADDCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmaddc_v32hf_maskz_round, \"__builtin_ia32_vfcmaddcph512_maskz_round\", IX86_BUILTIN_VFCMADDCPH512_MASKZ_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmulc_v32hf_round, \"__builtin_ia32_vfcmulcph512_round\", IX86_BUILTIN_VFCMULCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmulc_v32hf_mask_round, \"__builtin_ia32_vfcmulcph512_mask_round\", IX86_BUILTIN_VFCMULCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmulc_v32hf_round, \"__builtin_ia32_vfmulcph512_round\", IX86_BUILTIN_VFMULCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmulc_v32hf_mask_round, \"__builtin_ia32_vfmulcph512_mask_round\", IX86_BUILTIN_VFMULCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "dbbf5e3465668fc68c47ca24d07f498468bca3fe", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -9762,6 +9762,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V2DI_FTYPE_V8HF_V2DI_UQI:\n     case V2DI_FTYPE_V4SF_V2DI_UQI:\n     case V8HF_FTYPE_V8HF_V8HF_UQI:\n+    case V8HF_FTYPE_V8HF_V8HF_V8HF:\n     case V8HF_FTYPE_V8HI_V8HF_UQI:\n     case V8HF_FTYPE_V8SI_V8HF_UQI:\n     case V8HF_FTYPE_V8SF_V8HF_UQI:\n@@ -9840,6 +9841,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16SF_FTYPE_V8SF_V16SF_UHI:\n     case V16SI_FTYPE_V8SI_V16SI_UHI:\n     case V16HF_FTYPE_V16HI_V16HF_UHI:\n+    case V16HF_FTYPE_V16HF_V16HF_V16HF:\n     case V16HI_FTYPE_V16HF_V16HI_UHI:\n     case V16HI_FTYPE_V16HI_V16HI_UHI:\n     case V8HI_FTYPE_V16QI_V8HI_UQI:\n@@ -9996,6 +9998,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8HI_FTYPE_V8HI_V8HI_V8HI_UQI:\n     case V8SI_FTYPE_V8SI_V8SI_V8SI_UQI:\n     case V4SI_FTYPE_V4SI_V4SI_V4SI_UQI:\n+    case V16HF_FTYPE_V16HF_V16HF_V16HF_UQI:\n     case V16HF_FTYPE_V16HF_V16HF_V16HF_UHI:\n     case V8SF_FTYPE_V8SF_V8SF_V8SF_UQI:\n     case V16QI_FTYPE_V16QI_V16QI_V16QI_UHI:\n@@ -10725,6 +10728,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V16SF_FTYPE_V16HF_V16SF_UHI_INT:\n     case V32HF_FTYPE_V32HI_V32HF_USI_INT:\n     case V32HF_FTYPE_V32HF_V32HF_USI_INT:\n+    case V32HF_FTYPE_V32HF_V32HF_V32HF_INT:\n     case V16SF_FTYPE_V16SF_V16SF_HI_INT:\n     case V8DI_FTYPE_V8SF_V8DI_QI_INT:\n     case V16SF_FTYPE_V16SI_V16SF_HI_INT:\n@@ -10754,6 +10758,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT:\n     case V4SF_FTYPE_V8HF_V4SF_V4SF_UQI_INT:\n     case V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT:\n+    case V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT:\n     case V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT:\n     case V2DF_FTYPE_V8HF_V2DF_V2DF_UQI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_QI_INT:"}, {"sha": "f3d5b408580274ba6d6cdca83a2f3ff627ff001e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -191,6 +191,14 @@\n   UNSPEC_VCVTNE2PS2BF16\n   UNSPEC_VCVTNEPS2BF16\n   UNSPEC_VDPBF16PS\n+\n+  ;; For AVX512FP16 suppport\n+  UNSPEC_COMPLEX_FMA\n+  UNSPEC_COMPLEX_FCMA\n+  UNSPEC_COMPLEX_FMUL\n+  UNSPEC_COMPLEX_FCMUL\n+  UNSPEC_COMPLEX_MASK\n+\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -939,6 +947,10 @@\n    (V16SF \"HI\") (V8SF  \"QI\") (V4SF  \"QI\")\n    (V8DF  \"QI\") (V4DF  \"QI\") (V2DF  \"QI\")])\n \n+;; Mapping of vector modes to corresponding complex mask size\n+(define_mode_attr avx512fmaskcmode\n+  [(V32HF \"HI\") (V16HF \"QI\") (V8HF  \"QI\")])\n+\n ;; Mapping of vector modes to corresponding mask size\n (define_mode_attr avx512fmaskmodelower\n   [(V64QI \"di\") (V32QI \"si\") (V16QI \"hi\")\n@@ -5793,6 +5805,92 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Complex type operations\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_int_iterator UNSPEC_COMPLEX_F_C_MA\n+\t[UNSPEC_COMPLEX_FMA UNSPEC_COMPLEX_FCMA])\n+\n+(define_int_iterator UNSPEC_COMPLEX_F_C_MUL\n+\t[UNSPEC_COMPLEX_FMUL UNSPEC_COMPLEX_FCMUL])\n+\n+(define_int_attr complexopname\n+\t[(UNSPEC_COMPLEX_FMA \"fmaddc\")\n+\t (UNSPEC_COMPLEX_FCMA \"fcmaddc\")\n+\t (UNSPEC_COMPLEX_FMUL \"fmulc\")\n+\t (UNSPEC_COMPLEX_FCMUL \"fcmulc\")])\n+\n+(define_expand \"<avx512>_fmaddc_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512FP16VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512FP16VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512FP16VL 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:<avx512fmaskcmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  emit_insn (gen_fma_fmaddc_<mode>_maskz_1<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n+(define_expand \"<avx512>_fcmaddc_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512FP16VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512FP16VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512FP16VL 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:<avx512fmaskcmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  emit_insn (gen_fma_fcmaddc_<mode>_maskz_1<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n+(define_insn \"fma_<complexopname>_<mode><sdc_maskz_name><round_name>\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\" \"=&v\")\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_operand:VF_AVX512FP16VL 1 \"<round_nimm_predicate>\" \"%v\")\n+\t   (match_operand:VF_AVX512FP16VL 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n+\t   (match_operand:VF_AVX512FP16VL 3 \"<round_nimm_predicate>\" \"0\")]\n+\t   UNSPEC_COMPLEX_F_C_MA))]\n+  \"TARGET_AVX512FP16 && <sdc_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"v<complexopname><ssemodesuffix>\\t{<round_sdc_mask_op4>%2, %1, %0<sdc_mask_op4>|%0<sdc_mask_op4>, %1, %2<round_sdc_mask_op4>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"<avx512>_<complexopname>_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\" \"=&v\")\n+\t(vec_merge:VF_AVX512FP16VL\n+\t  (unspec:VF_AVX512FP16VL\n+\t    [(match_operand:VF_AVX512FP16VL 1 \"nonimmediate_operand\" \"%v\")\n+\t     (match_operand:VF_AVX512FP16VL 2 \"nonimmediate_operand\" \"<round_constraint>\")\n+\t     (match_operand:VF_AVX512FP16VL 3 \"register_operand\" \"0\")]\n+\t     UNSPEC_COMPLEX_F_C_MA)\n+\t  (match_dup 1)\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:<avx512fmaskcmode> 4 \"register_operand\" \"Yk\")]\n+\t    UNSPEC_COMPLEX_MASK)))]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+  \"v<complexopname><ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"<avx512>_<complexopname>_<mode><maskc_name><round_name>\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\" \"=&v\")\n+\t  (unspec:VF_AVX512FP16VL\n+\t    [(match_operand:VF_AVX512FP16VL 1 \"nonimmediate_operand\" \"%v\")\n+\t     (match_operand:VF_AVX512FP16VL 2 \"nonimmediate_operand\" \"<round_constraint>\")]\n+\t     UNSPEC_COMPLEX_F_C_MUL))]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+  \"v<complexopname><ssemodesuffix>\\t{<round_maskc_op3>%2, %1, %0<maskc_operand3>|%0<maskc_operand3>, %1, %2<round_maskc_op3>}\"\n+  [(set_attr \"type\" \"ssemul\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel half-precision floating point conversion operations"}, {"sha": "3e085a8e58eef69b230aa88166f1b5009ba76337", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -28,6 +28,9 @@\n    V16SF V8SF  V4SF\n    V8DF  V4DF  V2DF])\n \n+(define_mode_iterator SUBST_CV\n+  [V32HF V16HF V8HF])\n+\n (define_mode_iterator SUBST_S\n   [QI HI SI DI])\n \n@@ -42,9 +45,11 @@\n    QI HI SI DI SF DF])\n \n (define_subst_attr \"mask_name\" \"mask\" \"\" \"_mask\")\n+(define_subst_attr \"maskc_name\" \"maskc\" \"\" \"_mask\")\n (define_subst_attr \"mask_applied\" \"mask\" \"false\" \"true\")\n (define_subst_attr \"mask_operand2\" \"mask\" \"\" \"%{%3%}%N2\")\n (define_subst_attr \"mask_operand3\" \"mask\" \"\" \"%{%4%}%N3\")\n+(define_subst_attr \"maskc_operand3\" \"maskc\" \"\" \"%{%4%}%N3\")\n (define_subst_attr \"mask_operand3_1\" \"mask\" \"\" \"%%{%%4%%}%%N3\") ;; for sprintf\n (define_subst_attr \"mask_operand4\" \"mask\" \"\" \"%{%5%}%N4\")\n (define_subst_attr \"mask_operand6\" \"mask\" \"\" \"%{%7%}%N6\")\n@@ -89,6 +94,18 @@\n \t  (match_dup 0)\n \t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))])\n \n+(define_subst \"maskc\"\n+  [(set (match_operand:SUBST_CV 0)\n+        (match_operand:SUBST_CV 1))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+        (vec_merge:SUBST_CV\n+\t  (match_dup 1)\n+\t  (match_operand:SUBST_CV 2 \"nonimm_or_0_operand\" \"0C\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:<avx512fmaskcmode> 3 \"register_operand\" \"Yk\")]\n+\t    UNSPEC_COMPLEX_MASK)))])\n+\n (define_subst_attr \"mask_scalar_merge_name\" \"mask_scalar_merge\" \"\" \"_mask\")\n (define_subst_attr \"mask_scalar_merge_operand3\" \"mask_scalar_merge\" \"\" \"%{%3%}\")\n (define_subst_attr \"mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"\" \"%{%4%}\")\n@@ -137,21 +154,42 @@\n \t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n \t  (match_dup 2)\n \t  (const_int 1)))])\n+(define_subst_attr \"sdc_maskz_name\" \"sdc\" \"\" \"_maskz_1\")\n+(define_subst_attr \"sdc_mask_op4\" \"sdc\" \"\" \"%{%5%}%N4\")\n+(define_subst_attr \"sdc_mask_op5\" \"sdc\" \"\" \"%{%6%}%N5\")\n+(define_subst_attr \"sdc_mask_mode512bit_condition\" \"sdc\" \"1\" \"(<MODE_SIZE> == 64 || TARGET_AVX512VL)\")\n+\n+(define_subst \"sdc\"\n+ [(set (match_operand:SUBST_CV 0)\n+       (match_operand:SUBST_CV 1))]\n+ \"\"\n+ [(set (match_dup 0)\n+       (vec_merge:SUBST_CV\n+\t (match_dup 1)\n+\t (match_operand:SUBST_CV 2 \"const0_operand\" \"C\")\n+\t (unspec:<avx512fmaskmode>\n+\t   [(match_operand:<avx512fmaskcmode> 3 \"register_operand\" \"Yk\")]\n+\t   UNSPEC_COMPLEX_MASK)))\n+])\n \n (define_subst_attr \"round_name\" \"round\" \"\" \"_round\")\n (define_subst_attr \"round_mask_operand2\" \"mask\" \"%R2\" \"%R4\")\n (define_subst_attr \"round_mask_operand3\" \"mask\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_maskc_operand3\" \"maskc\" \"%R3\" \"%R5\")\n (define_subst_attr \"round_mask_operand4\" \"mask\" \"%R4\" \"%R6\")\n (define_subst_attr \"round_sd_mask_operand4\" \"sd\" \"%R4\" \"%R6\")\n+(define_subst_attr \"round_sdc_mask_operand4\" \"sdc\" \"%R4\" \"%R6\")\n (define_subst_attr \"round_op2\" \"round\" \"\" \"%R2\")\n (define_subst_attr \"round_op3\" \"round\" \"\" \"%R3\")\n (define_subst_attr \"round_op4\" \"round\" \"\" \"%R4\")\n (define_subst_attr \"round_op5\" \"round\" \"\" \"%R5\")\n (define_subst_attr \"round_op6\" \"round\" \"\" \"%R6\")\n (define_subst_attr \"round_mask_op2\" \"round\" \"\" \"<round_mask_operand2>\")\n (define_subst_attr \"round_mask_op3\" \"round\" \"\" \"<round_mask_operand3>\")\n+(define_subst_attr \"round_maskc_op3\" \"round\" \"\" \"<round_maskc_operand3>\")\n (define_subst_attr \"round_mask_op4\" \"round\" \"\" \"<round_mask_operand4>\")\n (define_subst_attr \"round_sd_mask_op4\" \"round\" \"\" \"<round_sd_mask_operand4>\")\n+(define_subst_attr \"round_sdc_mask_op4\" \"round\" \"\" \"<round_sdc_mask_operand4>\")\n (define_subst_attr \"round_constraint\" \"round\" \"vm\" \"v\")\n (define_subst_attr \"round_qq2phsuff\" \"round\" \"<qq2phsuff>\" \"\")\n (define_subst_attr \"bcst_round_constraint\" \"round\" \"vmBr\" \"v\")\n@@ -189,6 +227,7 @@\n (define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%r4\" \"%r5\")\n (define_subst_attr \"round_saeonly_maskz_scalar_operand5\" \"maskz_scalar\" \"%r5\" \"%r7\")\n (define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%r5\" \"%r7\")\n+(define_subst_attr \"round_saeonly_sdc_mask_operand5\" \"sdc\" \"%r5\" \"%r7\")\n (define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%r2\")\n (define_subst_attr \"round_saeonly_op3\" \"round_saeonly\" \"\" \"%r3\")\n (define_subst_attr \"round_saeonly_op4\" \"round_saeonly\" \"\" \"%r4\")"}, {"sha": "fcd71a2cbcb22c3e7c4f54b3e0dda849af2f3f63", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -787,6 +787,16 @@\n #define __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfcmaddcph512_round(A, B, C, D) __builtin_ia32_vfcmaddcph512_round(A, B, C, 8)\n+#define __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmaddcph512_round(A, B, C, D) __builtin_ia32_vfmaddcph512_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmulcph512_round(A, B, C) __builtin_ia32_vfmulcph512_round(A, B, 8)\n+#define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n+#define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "5d11813a855e6fb3c5ba072b3e5c62169b14236b", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -804,6 +804,16 @@\n #define __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfcmaddcph512_round(A, B, C, D) __builtin_ia32_vfcmaddcph512_round(A, B, C, 8)\n+#define __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmaddcph512_round(A, B, C, D) __builtin_ia32_vfmaddcph512_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmulcph512_round(A, B, C) __builtin_ia32_vfmulcph512_round(A, B, 8)\n+#define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n+#define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "f27c73fd4ccf3c8c44b7ade471498c6dd5a4d8f9", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -772,6 +772,8 @@ test_2 (_mm_cvt_roundss_sh, __m128h, __m128h, __m128, 8)\n test_2 (_mm_cvt_roundsd_sh, __m128h, __m128h, __m128d, 8)\n test_2 (_mm_cvt_roundi32_sh, __m128h, __m128h, int, 8)\n test_2 (_mm_cvt_roundu32_sh, __m128h, __m128h, unsigned, 8)\n+test_2 (_mm512_fmul_round_pch, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_fcmul_round_pch, __m512h, __m512h, __m512h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -846,6 +848,10 @@ test_3 (_mm_fmadd_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm_fnmadd_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm_fmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n+test_3 (_mm512_fmadd_round_pch, __m512h, __m512h, __m512h, __m512h, 8)\n+test_3 (_mm512_fcmadd_round_pch, __m512h, __m512h, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_fmul_round_pch, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_fcmul_round_pch, __m512h, __mmask16, __m512h, __m512h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -908,6 +914,14 @@ test_4 (_mm_maskz_fmsub_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h,\n test_4 (_mm_mask_fnmsub_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n test_4 (_mm_mask3_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n test_4 (_mm_maskz_fnmsub_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n+test_4 (_mm512_mask_fmadd_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_fcmadd_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_4 (_mm512_mask3_fmadd_round_pch, __m512h, __m512h, __m512h, __m512h, __mmask16, 8)\n+test_4 (_mm512_mask3_fcmadd_round_pch, __m512h, __m512h, __m512h, __m512h, __mmask16, 8)\n+test_4 (_mm512_maskz_fmadd_round_pch, __m512h, __mmask16, __m512h, __m512h, __m512h, 8)\n+test_4 (_mm512_maskz_fcmadd_round_pch, __m512h, __mmask16, __m512h, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_fmul_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_fcmul_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "ccf8c3a6c03a205a66a5efd787d1fd60cdd3e1d4", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -876,6 +876,8 @@ test_2 (_mm_cvt_roundsh_ss, __m128, __m128, __m128h, 8)\n test_2 (_mm_cvt_roundsh_sd, __m128d, __m128d, __m128h, 8)\n test_2 (_mm_cvt_roundss_sh, __m128h, __m128h, __m128, 8)\n test_2 (_mm_cvt_roundsd_sh, __m128h, __m128h, __m128d, 8)\n+test_2 (_mm512_fmul_round_pch, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_fcmul_round_pch, __m512h, __m512h, __m512h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -949,6 +951,10 @@ test_3 (_mm_fmadd_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm_fnmadd_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm_fmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n+test_3 (_mm512_fmadd_round_pch, __m512h, __m512h, __m512h, __m512h, 8)\n+test_3 (_mm512_fcmadd_round_pch, __m512h, __m512h, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_fmul_round_pch, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_fcmul_round_pch, __m512h, __mmask16, __m512h, __m512h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -1010,6 +1016,14 @@ test_4 (_mm_maskz_fmsub_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h,\n test_4 (_mm_mask_fnmsub_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n test_4 (_mm_mask3_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n test_4 (_mm_maskz_fnmsub_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n+test_4 (_mm512_mask_fmadd_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_fcmadd_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_4 (_mm512_mask3_fmadd_round_pch, __m512h, __m512h, __m512h, __m512h, __mmask16, 8)\n+test_4 (_mm512_mask3_fcmadd_round_pch, __m512h, __m512h, __m512h, __m512h, __mmask16, 8)\n+test_4 (_mm512_maskz_fmadd_round_pch, __m512h, __mmask16, __m512h, __m512h, __m512h, 8)\n+test_4 (_mm512_maskz_fcmadd_round_pch, __m512h, __mmask16, __m512h, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_fmul_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_fcmul_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "a6090703c2eacf220055560b3fd872bb6dc3e868", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081070bce2901ba7b9245fb4b5d0f3148f91981a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=081070bce2901ba7b9245fb4b5d0f3148f91981a", "patch": "@@ -805,6 +805,16 @@\n #define __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfcmaddcph512_round(A, B, C, D) __builtin_ia32_vfcmaddcph512_round(A, B, C, 8)\n+#define __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmaddcph512_round(A, B, C, D) __builtin_ia32_vfmaddcph512_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmulcph512_round(A, B, C) __builtin_ia32_vfmulcph512_round(A, B, 8)\n+#define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n+#define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}]}