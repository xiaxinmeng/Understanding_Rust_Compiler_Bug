{"sha": "55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUwNDdjOWQxYTBjMzI3ODcyMGY5MWQ1NGY4YjcwZTllMDRlMGEyNQ==", "commit": {"author": {"name": "Phil Edwards", "email": "phil@codesourcery.com", "date": "2003-10-23T05:16:56Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-10-23T05:16:56Z"}, "message": "config.gcc: Update *-*-vxworks* generic hook and comments.\n\n2003-10-22  Phil Edwards  <phil@codesourcery.com>\n\n\t* config.gcc:  Update *-*-vxworks* generic hook and comments.\n\t(arm-wrs-vxworks, i[4567]86-wrs-vxworks, mips-wrs-vxworks,\n\tmips-wrs-windiss, sh-wrs-vxworks):  New stanzas.\n\t* genmultilib:  Allow the MULTILIB_OSDIRNAMES to be mapped directly.\n\t* config/svr4.h (SWITCH_TAKES_ARG):  Undefine it before redefining it.\n\t* config/windiss.h:  New file.\n\t* config/arm/t-vxworks:  New file.\n\t* config/arm/vxworks.h:  New file.\n\t* config/i386/t-vxworks:  New file.\n\t* config/i386/vxworks.h:  New file.\n\t* config/mips/t-vxworks:  New file.\n\t* config/mips/vxworks.h:  New file.\n\t* config/mips/windiss.h:  New file.\n\t* config/sh/t-vxworks:  New file.\n\t* config/sh/vxworks.h:  New file.\n\nFrom-SVN: r72834", "tree": {"sha": "1303905d2700833bdec53aa9ae9e3e0b29f9438d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1303905d2700833bdec53aa9ae9e3e0b29f9438d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/comments", "author": null, "committer": null, "parents": [{"sha": "8f9ba40588fc9023a09889da8a7b69a85aea486d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9ba40588fc9023a09889da8a7b69a85aea486d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9ba40588fc9023a09889da8a7b69a85aea486d"}], "stats": {"total": 606, "additions": 586, "deletions": 20}, "files": [{"sha": "e4459ae1cd81d7cac7960f5ba67c2097f7e768d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -1,3 +1,21 @@\n+2003-10-22  Phil Edwards  <phil@codesourcery.com>\n+\n+\t* config.gcc:  Update *-*-vxworks* generic hook and comments.\n+\t(arm-wrs-vxworks, i[4567]86-wrs-vxworks, mips-wrs-vxworks,\n+\tmips-wrs-windiss, sh-wrs-vxworks):  New stanzas.\n+\t* genmultilib:  Allow the MULTILIB_OSDIRNAMES to be mapped directly.\n+\t* config/svr4.h (SWITCH_TAKES_ARG):  Undefine it before redefining it.\n+\t* config/windiss.h:  New file.\n+\t* config/arm/t-vxworks:  New file.\n+\t* config/arm/vxworks.h:  New file.\n+\t* config/i386/t-vxworks:  New file.\n+\t* config/i386/vxworks.h:  New file.\n+\t* config/mips/t-vxworks:  New file.\n+\t* config/mips/vxworks.h:  New file.\n+\t* config/mips/windiss.h:  New file.\n+\t* config/sh/t-vxworks:  New file.\n+\t* config/sh/vxworks.h:  New file.\n+\n 2003-10-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (h8300_output_function_epilogue): Remove."}, {"sha": "5249689ab17e1eb458ebab8dc5f4486021e16d5c", "filename": "gcc/config.gcc", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -506,8 +506,13 @@ case ${target} in\n *-*-vxworks*)\n   tmake_file=t-vxworks\n   tm_file=\"${tm_file} elfos.h svr4.h vxworks.h\"\n-  thread_file='vxworks'\n+  case ${enable_threads} in\n+    no) ;;\n+    \"\" | yes | vxworks) thread_file='vxworks' ;;\n+    *) echo 'Unknown thread configuration for VxWorks'; exit 1 ;;\n+  esac\n   use_collect2=yes\n+  xm_defines=POSIX\n   ;;\n esac\n \n@@ -619,6 +624,10 @@ arm-semi-aof | armel-semi-aof)\n \ttm_file=\"arm/semiaof.h arm/aof.h arm/arm.h\"\n \ttmake_file=arm/t-semi\n \t;;\n+arm-wrs-vxworks)\n+\ttm_file=\"dbxelf.h elfos.h svr4.h vxworks.h arm/elf.h arm/aout.h arm/arm.h arm/vxworks.h\"\n+\ttmake_file=\"${tmake_file} arm/t-vxworks\"\n+\t;;\n arm*-*-freebsd*|strongarm*-*-freebsd*)\n \ttm_file=\"dbxelf.h elfos.h ${fbsd_tm_file} arm/elf.h arm/aout.h arm/freebsd.h arm/arm.h\"\n \ttmake_file=\"${tmake_file} arm/t-strongarm-elf\"\n@@ -1102,6 +1111,10 @@ i386-*-vsta)\t\t\t# Intel 80386's running VSTa kernel\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/vsta.h\"\n \tuse_fixproto=yes\n \t;;\n+i[4567]86-wrs-vxworks)\n+\ttm_file=\"${tm_file} i386/sysv4.h i386/unix.h i386/vxworks.h\"\n+\ttmake_file=\"${tmake_file} i386/t-vxworks\"\n+\t;;\n i[34567]86-*-pe | i[34567]86-*-cygwin*)\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h i386/cygwin.h\"\n \txm_file=i386/xm-cygwin.h\n@@ -1564,6 +1577,20 @@ mips*-*-rtems*)\n \ttm_file=\"${tm_file} mips/elf.h mips/rtems.h rtems.h\"\n \ttmake_file=\"mips/t-elf t-rtems mips/t-rtems\"\n \t;;\n+mips-wrs-vxworks)\n+\t# We want vxworks.h after mips/elf.h, which unfortunately means we\n+\t# have to redo the tm_file list from scratch.\n+\ttm_file=\"elfos.h mips/mips.h svr4.h mips/elf.h vxworks.h mips/vxworks.h\"\n+\ttmake_file=\"${tmake_file} mips/t-vxworks\"\n+\ttarget_cpu_default=\"MASK_GAS\"\n+\t;;\n+mips-wrs-windiss)\t# Instruction-level simulator for VxWorks.\n+\txm_defines=POSIX\n+\ttm_file=\"elfos.h mips/mips.h svr4.h mips/elf.h windiss.h mips/windiss.h\"\n+\ttmake_file=\"${tmake_file} mips/t-elf\"\n+\ttarget_cpu_default=\"MASK_GAS\"\n+\tthread_file=\n+\t;;\n mipstx39-*-elf* | mipstx39el-*-elf*)\n \ttm_file=\"${tm_file} mips/r3900.h mips/elf.h\"\n \ttmake_file=mips/t-r3900\n@@ -1713,7 +1740,7 @@ powerpc-wrs-vxworks*)\n \ttmake_file=\"${tmake_file} rs6000/t-fprules rs6000/t-ppccomm rs6000/t-vxworks\"\n \textra_headers=ppc-asm.h\n \t;;\n-powerpc-wrs-windiss*)\n+powerpc-wrs-windiss*)\t# Instruction-level simulator for VxWorks.\n \ttm_file=\"${tm_file} elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/windiss.h\"\n         tmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm\"\n         thread_file=\"\"\n@@ -1900,6 +1927,10 @@ sh-*-netbsdelf* | shl*-*-netbsdelf* | sh5-*-netbsd* | sh5l*-*-netbsd* | \\\n \t\t;;\n \tesac\n \t;;\n+sh-wrs-vxworks)\n+\ttmake_file=\"$tmake_file sh/t-sh sh/t-elf sh/t-vxworks\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sh/embed-elf.h sh/vxworks.h\"\n+\t;;\n sh-*-*)\n \ttm_file=\"${tm_file} dbxcoff.h sh/coff.h\"\n \tuse_fixproto=yes"}, {"sha": "e620cfdf8ee9d32127b975ba8f9697d951750e08", "filename": "gcc/config/arm/t-vxworks", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Farm%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Farm%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-vxworks?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,10 @@\n+# Multilibs for VxWorks.\n+\n+MULTILIB_OPTIONS = \\\n+  t4/t4be/t4t/t4tbe/t5/t5be/t5t/t5tbe/txscale/txscalebe\n+\n+MULTILIB_DIRNAMES = \\\n+  ARMARCH4gnu ARMARCH4gnube ARMARCH4_Tgnu ARMARCH4_Tgnube \\\n+  ARMARCH5gnu ARMARCH5gnube ARMARCH5_Tgnu ARMARCH5_Tgnube \\\n+  XSCALEgnu XSCALEgnube\n+"}, {"sha": "a5a6a09f6e884351628b681cc547135c7a26fb59", "filename": "gcc/config/arm/vxworks.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,95 @@\n+/* Definitions of target machine for GCC,\n+   for ARM with targetting the VXWorks run time environment. \n+   Copyright (C) 1999, 2000, 2003 Free Software Foundation, Inc.\n+\n+   Contributed by: Mike Stump <mrs@wrs.com>\n+   Brought up to date by CodeSourcery, LLC.\n+   \n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    builtin_define (\"__vxworks\");\t\t\\\n+    if (TARGET_BIG_END)\t\t\t\t\\\n+      builtin_define (\"ARMEB\");\t\t\t\\\n+    else\t\t\t\t\t\\\n+      builtin_define (\"ARMEL\");\t\t\t\\\n+\t\t\t\t\t\t\\\n+    if (arm_is_xscale)\t\t\t\t\\\n+      builtin_define (\"CPU=XSCALE\");\t\t\\\n+    else if (arm_arch5)\t\t\t\t\\\n+      builtin_define (\"CPU=ARMARCH5\");\t\t\\\n+    else if (arm_arch4)\t\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tif (thumb_code)\t\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH4_T\");\t\\\n+\telse\t\t\t\t\t\\\n+\t  builtin_define (\"CPU=ARMARCH4\");\t\\\n+      }\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#undef  CC1_SPEC\n+#define CC1_SPEC\t\t\t\t\t\t\t\\\n+\"%{t4:        -mapcs-32 -mlittle-endian -march=armv4 ;\t\t\t\\\n+   t4be:      -mapcs-32 -mbig-endian -march=armv4 ;\t\t\t\\\n+   t4t:       -mthumb -mthumb-interwork -mlittle-endian -march=armv4t ;\t\\\n+   t4tbe:     -mthumb -mthumb-interwork -mbig-endian -march=armv4t ;\t\\\n+   t5:        -mapcs-32 -mlittle-endian -march=armv5 ;\t\t\t\\\n+   t5be:      -mapcs-32 -mbig-endian -march=armv5 ;\t\t\t\\\n+   t5t:       -mthumb -mthumb-interwork -mlittle-endian -march=armv5 ;\t\\\n+   t5tbe:     -mthumb -mthumb-interwork -mbig-endian -march=armv5 ;\t\\\n+   txscale:   -mapcs-32 -mlittle-endian -mcpu=xscale ;\t\t\t\\\n+   txscalebe: -mapcs-32 -mbig-endian -mcpu=xscale ;\t\t\t\\\n+            : -march=armv4}\"\n+\n+/* The -Q options from svr4.h aren't understood and must be removed.  */\n+#undef  ASM_SPEC\n+#define ASM_SPEC \\\n+  \"%{v:-V} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*}\"\n+\n+/* VxWorks does all the library stuff itself.  */\n+#undef  LIB_SPEC\n+#define LIB_SPEC \t\"\"\n+\n+/* VxWorks uses object files, not loadable images.  make linker just\n+   combine objects. */\n+#undef  LINK_SPEC\n+#define LINK_SPEC \t\"-r\"\n+\n+/* VxWorks provides the functionality of crt0.o and friends itself.  */\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \t\"\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \t\"\"\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION\tfputs (\" (ARM/VxWorks)\", stderr);\n+\n+/* There is no default multilib.  */\n+#undef MULTILIB_DEFAULTS\n+\n+#undef  ASM_FILE_START\n+#define ASM_FILE_START(STREAM) \t\t\t\t\t\t\\\n+  do \t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (STREAM, \"%s Generated by GCC %s for ARM/VxWorks\\n\",\t\\\n+\t       ASM_COMMENT_START, version_string);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)"}, {"sha": "609399502e7936223a6688369f57f3edb3c375ce", "filename": "gcc/config/i386/t-vxworks", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fi386%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fi386%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-vxworks?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,8 @@\n+# Multilibs for VxWorks.\n+\n+#GCC does not have an arch=pentium3 setting, so we cannot build PENTIUM3gnu\n+MULTILIB_OPTIONS  = \\\n+  march=i486/march=pentium/march=pentiumpro/march=pentium4\n+MULTILIB_DIRNAMES = \\\n+  I80486 PENTIUMgnu PENTIUM2gnu PENTIUM4gnu\n+"}, {"sha": "5ded098b9d310f375c7777942c276ed3d5813fa6", "filename": "gcc/config/i386/vxworks.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,74 @@\n+/* Definitions of target machine for GCC.  VxWorks i586 version.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#define HANDLE_SYSV_PRAGMA 1\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (80586, VxWorks syntax)\");\n+\n+/* Prefix for internally generated assembler labels.  If we aren't using\n+   underscores, we are using prefix `.'s to identify labels that should\n+   be ignored, as in `i386/gas.h' --karl@cs.umb.edu  */\n+\n+#define LPREFIX \"L\"\n+\n+/* Assembler pseudos to introduce constants of various size.  */\n+\n+#define ASM_SHORT \"\\t.word\\t\"\n+#define ASM_LONG \"\\t.long\\t\"\n+#define ASM_QUAD \"\\t.quad\\t\"  /* Should not be used for 32bit compilation.  */\n+\n+\n+#define ASM_OUTPUT_ALIGN(FILE,LOG) \\\n+  if ((LOG)!=0) fprintf ((FILE), \"\\t.balign %d\\n\", 1<<(LOG))\n+\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"%{v:-V} %{Qy:} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*}\"\n+\n+#define TARGET_OS_CPP_BUILTINS()                        \\\n+  do                                                    \\\n+    {                                                   \\\n+      builtin_define (\"__vxworks\");                     \\\n+      builtin_assert (\"system=unix\");                   \\\n+                                                        \\\n+      if (TARGET_386)                                   \\\n+        builtin_define (\"CPU=I80386\");                  \\\n+      else if (TARGET_486)                              \\\n+        builtin_define (\"CPU=I80486\");                  \\\n+      else if (TARGET_PENTIUM)                          \\\n+        {                                               \\\n+          builtin_define (\"CPU=PENTIUM\");               \\\n+          builtin_define (\"CPU_VARIANT=PENTIUM\");       \\\n+        }                                               \\\n+      else if (TARGET_PENTIUMPRO)                       \\\n+        {                                               \\\n+          builtin_define (\"CPU=PENTIUM2\");               \\\n+          builtin_define (\"CPU_VARIANT=PENTIUMPRO\");    \\\n+        }                                               \\\n+      else if (TARGET_PENTIUM4)                       \\\n+        {                                               \\\n+          builtin_define (\"CPU=PENTIUM4\");               \\\n+          builtin_define (\"CPU_VARIANT=PENTIUM4\");    \\\n+        }                                               \\\n+    }                                                   \\\n+  while (0)\n+\n+"}, {"sha": "51e006aa90285d27eea6cb10f5a735c9a938d00c", "filename": "gcc/config/mips/t-vxworks", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fmips%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fmips%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-vxworks?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,16 @@\n+# Multilibs for VxWorks.\n+\n+# default is mips1 EB hard-float\n+MULTILIB_OPTIONS = mips2/mips3 EL msoft-float\n+MULTILIB_MATCHES = EL=mel mips2=mips32 mips3=mips4 mips3=mips64\n+\n+MULTILIB_EXCEPTIONS = EL EL/msoft-float mips3/msoft-float mips3/EL/msoft-float\n+\n+MUTLILIB_EXTRA_OPTS = -G 0 -mno-branch-likely\n+\n+MULTILIB_OSDIRNAMES = msoft-float=!MIPS32sfr3kgnu \\\n+\t\t    mips2=!MIPS32gnu mips2/msoft-float=!MIPS32sfgnu \\\n+\t\t    mips2/EL=!MIPS32gnule \\\n+\t\t    mips2/EL/msoft-float=!MIPS32sfgnule \\\n+\t\t    mips3=!MIPS64gnu mips3/EL=!MIPS64gnule \n+"}, {"sha": "fc4db447e3447212000f9278eb9fd2cb1b483954", "filename": "gcc/config/mips/vxworks.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,79 @@\n+/* Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#undef  EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_sdata, in_sbss\n+\n+#undef  EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS                                            \\\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\n+\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (MIPS, VxWorks syntax)\");\n+\n+/* Combination of mips.h and svr4.h.  */\n+#undef  SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR)          \\\n+  (DEFAULT_SWITCH_TAKES_ARG (CHAR)      \\\n+   || (CHAR) == 'G'                     \\\n+   || (CHAR) == 'h'                     \\\n+   || (CHAR) == 'x'                     \\\n+   || (CHAR) == 'z')\n+\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{!G:-G 0} %{G*} %(endian_spec) %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{mips32} %{mips32r2} %{mips64} \\\n+%{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n+%(subtarget_asm_optimizing_spec) \\\n+%(subtarget_asm_debugging_spec) \\\n+%{membedded-pic} \\\n+%{mabi=32:-32}%{mabi=n32:-n32}%{mabi=64:-64}%{mabi=n64:-64} \\\n+%{mabi=eabi} %{mabi=o64} %{!mabi*: %(asm_abi_default_spec)} \\\n+%{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \\\n+%(target_asm_spec) \\\n+%(subtarget_asm_spec)\"\n+\n+#undef LINK_SPEC\n+/* LINK_SPEC is clobbered in svr4.h. ugh!  */\n+#define LINK_SPEC \"\\\n+%(endian_spec) \\\n+%{!G:-G 0} %{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips64} \\\n+%{bestGnum}\"\n+\n+#define TARGET_OS_CPP_BUILTINS()                        \\\n+  do                                                    \\\n+    {                                                   \\\n+      builtin_define (\"__vxworks\");                     \\\n+      builtin_assert (\"system=unix\");                   \\\n+    }                                                   \\\n+  while (0)\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \\\n+\"%{!DCPU=*: %{mips3|mips4|mips64:-DCPU=MIPS64;:-DCPU=MIPS32}} \\\n+  %{EL|mel:-DMIPSEL;:-DMIPSEB} \\\n+  %{msoft-float:-DSOFT_FLOAT} \\\n+  %{mips1:-D_WRS_R3K_EXC_SUPPORT}\"\n+\n+/* No sdata.  */\n+#undef MIPS_DEFAULT_GVALUE\n+#define MIPS_DEFAULT_GVALUE 0"}, {"sha": "9f7c4471902c72ebfc1f4921ac7785c1e0fb97f1", "filename": "gcc/config/mips/windiss.h", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fmips%2Fwindiss.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fmips%2Fwindiss.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fwindiss.h?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,103 @@\n+/* Support for GCC on MIPS using WindISS simulator.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, LLC. \n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (MIPS WindISS)\");\n+\n+/* Combination of mips.h and svr4.h.  */\n+#undef  SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR)          \\\n+  (DEFAULT_SWITCH_TAKES_ARG (CHAR)      \\\n+   || (CHAR) == 'G'                     \\\n+   || (CHAR) == 'h'                     \\\n+   || (CHAR) == 'x'                     \\\n+   || (CHAR) == 'z')\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \\\n+\"%{!DCPU=*: %{mips3|mips4|mips64:-DCPU=MIPS64;:-DCPU=MIPS32}} \\\n+  %{EL|mel:-DMIPSEL;:-DMIPSEB} \\\n+  %{msoft-float:-DSOFT_FLOAT} \\\n+  %{mips1:-D_WRS_R3K_EXC_SUPPORT}\"\n+\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{!G:-G 0} %{G*} %(endian_spec) %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{mips32} %{mips32r2} %{mips64} \\\n+%{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n+%(subtarget_asm_optimizing_spec) \\\n+%(subtarget_asm_debugging_spec) \\\n+%{membedded-pic} \\\n+%{mabi=32:-32}%{mabi=n32:-n32}%{mabi=64:-64}%{mabi=n64:-64} \\\n+%{mabi=eabi} %{mabi=o64} %{!mabi*: %(asm_abi_default_spec)} \\\n+%{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \\\n+%(target_asm_spec) \\\n+%(subtarget_asm_spec)\"\n+\n+#undef LINK_SPEC\n+/* LINK_SPEC is clobbered in svr4.h. ugh!  */\n+#define LINK_SPEC \"\\\n+-m elf32mipswindiss \\\n+%{!G:-G 0} %{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips64} \\\n+%{bestGnum}\"\n+\n+/* Diab libs MIPS{,E,F,L,M,W,X,Y,Z}{,H,N,S}\n+   \n+   .\n+   E - Elf (small-data/const=8\n+   F - Elf Far (small-data/const=0)\n+   L - Little Elf\n+   M - Little Elf Far\n+   W - elf32 bigmips\n+   X - elf32 bigmips (far?)\n+   Y - elf32 littlemips\n+   Z - elf32 littlemips (far?)\n+\n+   . - Integer routines\n+   H - Hard float\n+   N - No float\n+   S - Soft float\n+\n+   Want {F,M}{,H,S}\n+\n+*/\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"--start-group -li -lcfp -lwindiss -lram -limpl -limpfp --end-group\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"crt0.o%s crtbegin.o%s\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s\"\n+\n+/* We have no shared libraries.  These two shouldn't be necessary. */\n+#undef LINK_SHLIB_SPEC\n+#define LINK_SHLIB_SPEC \"\"\n+#undef LINK_EH_SPEC\n+#define LINK_EH_SPEC \"\"\n+\n+#undef CRTSAVRES_DEFAULT_SPEC\n+#define CRTSAVRES_DEFAULT_SPEC \"\"\n+\n+/* No sdata.  */\n+#undef MIPS_DEFAULT_GVALUE\n+#define MIPS_DEFAULT_GVALUE 0"}, {"sha": "85a2114589b729769316fe1c3e4e73827519ace3", "filename": "gcc/config/sh/t-vxworks", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fsh%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fsh%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-vxworks?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,11 @@\n+# Multilibs for VxWorks.\n+\n+MULTILIB_OPTIONS = m2/m3/m4 ml\n+\n+MULTILIB_EXCEPTIONS = ml m2/ml\n+\n+MULTILIB_OSDIRNAMES = \\\n+  m2=!SH7600gnu \\\n+  m3=!SH7700gnu m3/ml=!SH7700gnule \\\n+  m4=!SH7750gnu m4/ml=!SH7750gnule\n+"}, {"sha": "61c3236967f415774bb4d35a6376633d5fde78dd", "filename": "gcc/config/sh/vxworks.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fsh%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fsh%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fvxworks.h?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,50 @@\n+/* Definitions of target machine for GCC,\n+   for SuperH with targeting the VXWorks run time environment. \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, LLC.\n+   \n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\\\n+  do {\t\t\t\t\t\\\n+    builtin_define (\"__vxworks\");\t\\\n+    builtin_define (\"CPU=SH7000\");\t\t\\\n+  } while (0)\n+\n+/* VxWorks does all the library stuff itself.  */\n+#undef  LIB_SPEC\n+#define LIB_SPEC \t\"\"\n+\n+/* VxWorks uses object files, not loadable images.  Make the linker just\n+   combine objects. */\n+#undef  LINK_SPEC\n+#define LINK_SPEC \t\"-r\"\n+\n+/* VxWorks provides the functionality of crt0.o and friends itself.  */\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \t\"\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \t\"\"\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION\tfputs (\" (SH/VxWorks)\", stderr);\n+\n+/* There is no default multilib.  */\n+#undef MULTILIB_DEFAULTS"}, {"sha": "ca65cd84aae725f5c653674fdddb4b4034b96532", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.\n    -z* options (for the linker).  Note however that there is no such\n    thing as a -T option for svr4.  */\n \n+#undef  SWITCH_TAKES_ARG\n #define SWITCH_TAKES_ARG(CHAR)\t\t\\\n   (DEFAULT_SWITCH_TAKES_ARG (CHAR)\t\\\n    || (CHAR) == 'h'\t\t\t\\"}, {"sha": "7aef9b6788137a255b43b6ba6b4313dae8532f3a", "filename": "gcc/config/windiss.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fwindiss.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fconfig%2Fwindiss.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwindiss.h?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -0,0 +1,38 @@\n+/* Support for GCC using WindISS simulator.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, LLC. \n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+/* windiss uses wchar_t == unsigned short (UCS2) on all architectures.  */\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"short unsigned int\"\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 16\n+\n+/* windiss has wint_t == int */\n+#undef WINT_TYPE\n+#define WINT_TYPE \"int\"\n+\n+/* No profiling.  */\n+#undef  FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)     \\\n+{                                            \\\n+  sorry (\"profiler support for WindISS\");    \\\n+}"}, {"sha": "b5ffa9d4d52807dc514576b36e7c4a553bef869e", "filename": "gcc/genmultilib", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fgenmultilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55047c9d1a0c3278720f91d54f8b70e9e04e0a25/gcc%2Fgenmultilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmultilib?ref=55047c9d1a0c3278720f91d54f8b70e9e04e0a25", "patch": "@@ -63,10 +63,15 @@\n # for the rule to exclude a set. Options can be preceded with a '!' to\n # match a logical NOT.\n \n-# The optional sevenths argument is a list of OS subdirectory names.\n-# The format is the same as of the second argument.\n-# The difference is that second argument describes multilib directories\n-# in GCC conventions, while this one the OS multilib convention.\n+# The optional seventh argument is a list of OS subdirectory names.\n+# The format is either the same as of the second argument, or a set of\n+# mappings. When it is the same as the second argument, it describes\n+# the multilib directories using OS conventions, rather than GCC\n+# conventions.  When it is a set of mappings of the form gccdir=osdir,\n+# the left side gives the GCC convention and the right gives the\n+# equivalent OS defined location.  If the osdir part begins with a !,\n+# the os directory names are used exclusively.  Use the mapping when\n+# there is no one-to-one equivalence between GCC levels and the OS.\n \n # The last option should be \"yes\" if multilibs are enabled.  If it is not\n # \"yes\", all GCC multilib dir names will be \".\".\n@@ -216,24 +221,44 @@ fi\n # Construct a sed pattern which will convert option names to OS directory\n # names.\n toosdirnames=\n+defaultosdirname=\n if [ -n \"${osdirnames}\" ]; then\n   set x ${osdirnames}\n   shift\n-  for set in ${options}; do\n-    for opts in `echo ${set} | sed -e 's|/| |'g`; do\n-      patt=\"/\"\n-      for opt in `echo ${opts} | sed -e 's_|_ _'g`; do\n-        if [ \"$1\" != \"${opt}\" ]; then\n-          toosdirnames=\"${toosdirnames} -e s|/${opt}/|/${1}/|g\"\n-\t  patt=\"${patt}${1}/\"\n-\t  if [ \"${patt}\" != \"/${1}/\" ]; then\n-\t    toosdirnames=\"${toosdirnames} -e s|${patt}|/${1}/|g\"\n+  while [ $# != 0 ] ; do\n+    case \"$1\" in\n+      .=*)\n+        defaultosdirname=`echo $1 | sed 's|^.=|:|'`\n+\tshift\n+\t;;\n+      *=*)\n+\tpatt=`echo $1 | sed -e 's|=|/$=/|'`\n+        toosdirnames=\"${toosdirnames} -e s=^/${patt}/=\"\n+\tshift\n+        ;;\n+      *)\n+        break\n+\t;;\n+    esac\n+  done\n+  \n+  if [ $# != 0 ]; then\n+    for set in ${options}; do\n+      for opts in `echo ${set} | sed -e 's|/| |'g`; do\n+        patt=\"/\"\n+        for opt in `echo ${opts} | sed -e 's_|_ _'g`; do\n+          if [ \"$1\" != \"${opt}\" ]; then\n+            toosdirnames=\"${toosdirnames} -e s|/${opt}/|/${1}/|g\"\n+\t    patt=\"${patt}${1}/\"\n+\t    if [ \"${patt}\" != \"/${1}/\" ]; then\n+\t      toosdirnames=\"${toosdirnames} -e s|${patt}|/${1}/|g\"\n+            fi\n           fi\n-        fi\n+        done\n+        shift\n       done\n-      shift\n     done\n-  done\n+  fi\n fi\n \n # We need another recursive shell script to correctly handle positive\n@@ -275,7 +300,7 @@ for set in ${options}; do\n   done\n done\n optout=`echo ${optout} | sed -e 's/^ //'`\n-echo \"\\\". ${optout};\\\",\"\n+echo \"\\\".${defaultosdirname} ${optout};\\\",\"\n \n # Work over the list of combinations.  We have to translate each one\n # to use the directory names rather than the option names, we have to\n@@ -299,7 +324,14 @@ for combo in ${combinations}; do\n     if [ \"x${enable_multilib}\" != xyes ]; then\n       dirout=\".:${osdirout}\"\n     else\n-      dirout=\"${dirout}:${osdirout}\"\n+      case \"${osdirout}\" in\n+        !*)\n+\t  dirout=`echo ${osdirout} | sed 's/^!//'`\n+\t  ;;\n+\t*)\n+\t  dirout=\"${dirout}:${osdirout}\"\n+\t  ;;\n+      esac\n     fi\n   else\n     if [ \"x${enable_multilib}\" != xyes ]; then"}]}