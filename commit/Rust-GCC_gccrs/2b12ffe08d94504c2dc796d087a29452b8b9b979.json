{"sha": "2b12ffe08d94504c2dc796d087a29452b8b9b979", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIxMmZmZTA4ZDk0NTA0YzJkYzc5NmQwODdhMjk0NTJiOGI5Yjk3OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-01T23:52:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-01T23:52:55Z"}, "message": "except.c: Include intl.h.\n\n\ufffd\n        * except.c: Include intl.h.\n        (expand_eh_return): Set current_function_cannot_inline.\n        (save_eh_status, restore_eh_status): Twiddle eh_return_stub_label.\n        * function.h (struct function): Add eh_return_stub_label.\n        * flow.c (delete_unreachable_blocks): Don't merge across EH edges.\n        * Makefile.in (except.o): Depend on intl.h.\n\nFrom-SVN: r27908", "tree": {"sha": "332e8b69ff166c0727c474894761a3bab32afd23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332e8b69ff166c0727c474894761a3bab32afd23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b12ffe08d94504c2dc796d087a29452b8b9b979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b12ffe08d94504c2dc796d087a29452b8b9b979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b12ffe08d94504c2dc796d087a29452b8b9b979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b12ffe08d94504c2dc796d087a29452b8b9b979/comments", "author": null, "committer": null, "parents": [{"sha": "88250fae5a8447b2bd4a715c85543e089f0ed45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88250fae5a8447b2bd4a715c85543e089f0ed45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88250fae5a8447b2bd4a715c85543e089f0ed45c"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "f7d78d687eff84a31d6fa0ec22364ac400633644", "filename": "gcc/except.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b12ffe08d94504c2dc796d087a29452b8b9b979/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b12ffe08d94504c2dc796d087a29452b8b9b979/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=2b12ffe08d94504c2dc796d087a29452b8b9b979", "patch": "@@ -406,6 +406,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n+#include \"intl.h\"\n #include \"obstack.h\"\n \n /* One to use setjmp/longjmp method of generating code for exception\n@@ -2446,6 +2447,7 @@ save_eh_status (p)\n   p->caught_return_label_stack = caught_return_label_stack;\n   p->protect_list = protect_list;\n   p->ehc = current_function_ehc;\n+  p->eh_return_stub_label = eh_return_stub_label;\n \n   init_eh_for_function ();\n }\n@@ -2469,6 +2471,7 @@ restore_eh_status (p)\n   ehstack = p->ehstack;\n   catchstack = p->catchstack;\n   current_function_ehc = p->ehc;\n+  eh_return_stub_label = p->eh_return_stub_label;\n }\n \f\n /* This section is for the exception handling specific optimization\n@@ -2792,6 +2795,8 @@ expand_eh_return ()\n   if (!eh_return_context)\n     return;\n \n+  current_function_cannot_inline = N_(\"function uses __builtin_eh_return\");\n+\n   eh_regs (&reg1, &reg2, &reg3, 1);\n #ifdef POINTERS_EXTEND_UNSIGNED\n   eh_return_context = convert_memory_address (Pmode, eh_return_context);"}]}