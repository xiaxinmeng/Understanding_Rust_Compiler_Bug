{"sha": "ece21ff6ea9d969d3b6aae82136622a7126eefc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlMjFmZjZlYTlkOTY5ZDNiNmFhZTgyMTM2NjIyYTcxMjZlZWZjMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-02T08:11:07Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-07-02T08:16:02Z"}, "message": "Do not stream all zeros for gcda files.\n\ngcc/ChangeLog:\n\n\tPR gcov-profile/95348\n\t* coverage.c (read_counts_file): Read only COUNTERS that are\n\tnot all-zero.\n\t* gcov-dump.c (tag_function): Change signature from unsigned to\n\tsigned integer.\n\t(tag_blocks): Likewise.\n\t(tag_arcs): Likewise.\n\t(tag_lines): Likewise.\n\t(tag_counters): Likewise.\n\t(tag_summary): Likewise.\n\t* gcov.c (read_count_file): Read all non-zero counters\n\tsensitively.\n\nlibgcc/ChangeLog:\n\n\tPR gcov-profile/95348\n\t* libgcov-driver.c (merge_one_data): Merge only profiles\n\tthat are not of non-zero type.\n\t(write_one_data): Write counters only if there's one non-zero\n\tvalue.\n\t* libgcov-util.c (tag_function): Change signature from unsigned\n\tto int.\n\t(tag_blocks): Likewise.\n\t(tag_arcs): Likewise.\n\t(tag_counters): Likewise.\n\t(tag_summary): Likewise.\n\t(tag_lines): Read only if COUNTERS is non-zero.\n\t(read_gcda_file): Handle negative length for COUNTERS type.", "tree": {"sha": "ad2d4be24aa0e4415a1caccbca083eed063194f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad2d4be24aa0e4415a1caccbca083eed063194f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ece21ff6ea9d969d3b6aae82136622a7126eefc1", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl79l8IACgkQTcGC3A+n\nN4Wcawf+JJJ2s9yUH+8dBREjX1jYsj62pSYjzWBHpFD4OVGW6NEI8vhZ6uCO8Wkx\nGFNjmUlH03mvuJ1EASU6rv+J1DWYJMjAPBgmWSFmjyqSsBw5yj/mjdmMXSu6Sq47\nL13smgyMY5iebMTvXI0txaGVnEOyiGIJJvaRiRIgXNoc4QjRxRQm0qBLca6Y8jtZ\nrJ4tx5zTnrNbwKd79dOB14qEweXAC94r76+hQhInkiG3QtRvd5D2a4OOM5rgUe9d\nAYHwTZC/wSk9O86FMk+Oq5TzvuTBJgTfFvRKs36ezaPerpe+Dndyt3C6zGwlZesN\nYN4c84x1sWa2vfKHyQ4H04CcKw8Q7A==\n=dFNa\n-----END PGP SIGNATURE-----", "payload": "tree ad2d4be24aa0e4415a1caccbca083eed063194f0\nparent 8f8ea4a47f3ab0b44b2bbf1c77db6111325d4841\nauthor Martin Liska <mliska@suse.cz> 1591085467 +0200\ncommitter Martin Liska <mliska@suse.cz> 1593677762 +0200\n\nDo not stream all zeros for gcda files.\n\ngcc/ChangeLog:\n\n\tPR gcov-profile/95348\n\t* coverage.c (read_counts_file): Read only COUNTERS that are\n\tnot all-zero.\n\t* gcov-dump.c (tag_function): Change signature from unsigned to\n\tsigned integer.\n\t(tag_blocks): Likewise.\n\t(tag_arcs): Likewise.\n\t(tag_lines): Likewise.\n\t(tag_counters): Likewise.\n\t(tag_summary): Likewise.\n\t* gcov.c (read_count_file): Read all non-zero counters\n\tsensitively.\n\nlibgcc/ChangeLog:\n\n\tPR gcov-profile/95348\n\t* libgcov-driver.c (merge_one_data): Merge only profiles\n\tthat are not of non-zero type.\n\t(write_one_data): Write counters only if there's one non-zero\n\tvalue.\n\t* libgcov-util.c (tag_function): Change signature from unsigned\n\tto int.\n\t(tag_blocks): Likewise.\n\t(tag_arcs): Likewise.\n\t(tag_counters): Likewise.\n\t(tag_summary): Likewise.\n\t(tag_lines): Read only if COUNTERS is non-zero.\n\t(read_gcda_file): Handle negative length for COUNTERS type.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece21ff6ea9d969d3b6aae82136622a7126eefc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece21ff6ea9d969d3b6aae82136622a7126eefc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece21ff6ea9d969d3b6aae82136622a7126eefc1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f8ea4a47f3ab0b44b2bbf1c77db6111325d4841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8ea4a47f3ab0b44b2bbf1c77db6111325d4841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8ea4a47f3ab0b44b2bbf1c77db6111325d4841"}], "stats": {"total": 154, "additions": 92, "deletions": 62}, "files": [{"sha": "f353c9c5022eb7aaf9b8008e68e3f4b1d52c4789", "filename": "gcc/coverage.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece21ff6ea9d969d3b6aae82136622a7126eefc1/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece21ff6ea9d969d3b6aae82136622a7126eefc1/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=ece21ff6ea9d969d3b6aae82136622a7126eefc1", "patch": "@@ -245,7 +245,9 @@ read_counts_file (void)\n       else if (GCOV_TAG_IS_COUNTER (tag) && fn_ident)\n \t{\n \t  counts_entry **slot, *entry, elt;\n-\t  unsigned n_counts = GCOV_TAG_COUNTER_NUM (length);\n+\t  int read_length = (int)length;\n+\t  length = read_length > 0 ? read_length : 0;\n+\t  unsigned n_counts = GCOV_TAG_COUNTER_NUM (abs (read_length));\n \t  unsigned ix;\n \n \t  elt.ident = fn_ident;\n@@ -274,8 +276,9 @@ read_counts_file (void)\n \t      counts_hash = NULL;\n \t      break;\n \t    }\n-\t  for (ix = 0; ix != n_counts; ix++)\n-\t    entry->counts[ix] += gcov_read_counter ();\n+\t  if (read_length > 0)\n+\t    for (ix = 0; ix != n_counts; ix++)\n+\t      entry->counts[ix] = gcov_read_counter ();\n \t}\n       gcov_sync (offset, length);\n       if ((is_error = gcov_is_error ()))"}, {"sha": "97ff27861c6291a02aab38e3b43333114a0ed100", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece21ff6ea9d969d3b6aae82136622a7126eefc1/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece21ff6ea9d969d3b6aae82136622a7126eefc1/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=ece21ff6ea9d969d3b6aae82136622a7126eefc1", "patch": "@@ -32,19 +32,19 @@ static void dump_gcov_file (const char *);\n static void print_prefix (const char *, unsigned, gcov_position_t);\n static void print_usage (void);\n static void print_version (void);\n-static void tag_function (const char *, unsigned, unsigned, unsigned);\n-static void tag_blocks (const char *, unsigned, unsigned, unsigned);\n-static void tag_arcs (const char *, unsigned, unsigned, unsigned);\n-static void tag_lines (const char *, unsigned, unsigned, unsigned);\n-static void tag_counters (const char *, unsigned, unsigned, unsigned);\n-static void tag_summary (const char *, unsigned, unsigned, unsigned);\n+static void tag_function (const char *, unsigned, int, unsigned);\n+static void tag_blocks (const char *, unsigned, int, unsigned);\n+static void tag_arcs (const char *, unsigned, int, unsigned);\n+static void tag_lines (const char *, unsigned, int, unsigned);\n+static void tag_counters (const char *, unsigned, int, unsigned);\n+static void tag_summary (const char *, unsigned, int, unsigned);\n extern int main (int, char **);\n \n typedef struct tag_format\n {\n   unsigned tag;\n   char const *name;\n-  void (*proc) (const char *, unsigned, unsigned, unsigned);\n+  void (*proc) (const char *, unsigned, int, unsigned);\n } tag_format_t;\n \n static int flag_dump_contents = 0;\n@@ -225,6 +225,7 @@ dump_gcov_file (const char *filename)\n   while (1)\n     {\n       gcov_position_t base, position = gcov_position ();\n+      int read_length;\n       unsigned tag, length;\n       tag_format_t const *format;\n       unsigned tag_depth;\n@@ -234,7 +235,8 @@ dump_gcov_file (const char *filename)\n       tag = gcov_read_unsigned ();\n       if (!tag)\n \tbreak;\n-      length = gcov_read_unsigned ();\n+      read_length = (int)gcov_read_unsigned ();\n+      length = read_length > 0 ? read_length : 0;\n       base = gcov_position ();\n       mask = GCOV_TAG_MASK (tag) >> 1;\n       for (tag_depth = 4; mask; mask >>= 8)\n@@ -264,9 +266,9 @@ dump_gcov_file (const char *filename)\n \t}\n \n       print_prefix (filename, tag_depth, position);\n-      printf (\"%08x:%4u:%s\", tag, length, format->name);\n+      printf (\"%08x:%4u:%s\", tag, abs (read_length), format->name);\n       if (format->proc)\n-\t(*format->proc) (filename, tag, length, depth);\n+\t(*format->proc) (filename, tag, read_length, depth);\n \n       printf (\"\\n\");\n       if (flag_dump_contents && format->proc)\n@@ -294,10 +296,10 @@ dump_gcov_file (const char *filename)\n \n static void\n tag_function (const char *filename ATTRIBUTE_UNUSED,\n-\t      unsigned tag ATTRIBUTE_UNUSED, unsigned length,\n+\t      unsigned tag ATTRIBUTE_UNUSED, int length,\n \t      unsigned depth ATTRIBUTE_UNUSED)\n {\n-  unsigned long pos = gcov_position ();\n+  long pos = gcov_position ();\n \n   if (!length)\n     printf (\" placeholder\");\n@@ -330,15 +332,15 @@ tag_function (const char *filename ATTRIBUTE_UNUSED,\n \n static void\n tag_blocks (const char *filename ATTRIBUTE_UNUSED,\n-\t    unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t    unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED,\n \t    unsigned depth ATTRIBUTE_UNUSED)\n {\n   printf (\" %u blocks\", gcov_read_unsigned ());\n }\n \n static void\n tag_arcs (const char *filename ATTRIBUTE_UNUSED,\n-\t  unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t  unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED,\n \t  unsigned depth)\n {\n   unsigned n_arcs = GCOV_TAG_ARCS_NUM (length);\n@@ -380,7 +382,7 @@ tag_arcs (const char *filename ATTRIBUTE_UNUSED,\n \n static void\n tag_lines (const char *filename ATTRIBUTE_UNUSED,\n-\t   unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t   unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED,\n \t   unsigned depth)\n {\n   if (flag_dump_contents)\n@@ -425,23 +427,24 @@ tag_lines (const char *filename ATTRIBUTE_UNUSED,\n \n static void\n tag_counters (const char *filename ATTRIBUTE_UNUSED,\n-\t      unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t      unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED,\n \t      unsigned depth)\n {\n #define DEF_GCOV_COUNTER(COUNTER, NAME, MERGE_FN) NAME,\n   static const char *const counter_names[] = {\n #include \"gcov-counter.def\"\n };\n #undef DEF_GCOV_COUNTER\n-  unsigned n_counts = GCOV_TAG_COUNTER_NUM (length);\n+  int n_counts = GCOV_TAG_COUNTER_NUM (length);\n+  bool has_zeros = n_counts < 0;\n+  n_counts = abs (n_counts);\n \n-  printf (\" %s %u counts\",\n-\t  counter_names[GCOV_COUNTER_FOR_TAG (tag)], n_counts);\n+  printf (\" %s %u counts%s\",\n+\t  counter_names[GCOV_COUNTER_FOR_TAG (tag)], n_counts,\n+\t  has_zeros ? \" (all zero)\" : \"\");\n   if (flag_dump_contents)\n     {\n-      unsigned ix;\n-\n-      for (ix = 0; ix != n_counts; ix++)\n+      for (int ix = 0; ix != n_counts; ix++)\n \t{\n \t  gcov_type count;\n \n@@ -457,15 +460,15 @@ tag_counters (const char *filename ATTRIBUTE_UNUSED,\n \t      printf (VALUE_PADDING_PREFIX VALUE_PREFIX, ix);\n \t    }\n \n-\t  count = gcov_read_counter ();\n+\t  count = has_zeros ? 0 : gcov_read_counter ();\n \t  printf (\"%\" PRId64 \" \", count);\n \t}\n     }\n }\n \n static void\n tag_summary (const char *filename ATTRIBUTE_UNUSED,\n-\t     unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t     unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED,\n \t     unsigned depth ATTRIBUTE_UNUSED)\n {\n   gcov_summary summary;"}, {"sha": "b302e2197dd31b45eb9a4a01bdbcf84c395c0970", "filename": "gcc/gcov.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece21ff6ea9d969d3b6aae82136622a7126eefc1/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece21ff6ea9d969d3b6aae82136622a7126eefc1/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=ece21ff6ea9d969d3b6aae82136622a7126eefc1", "patch": "@@ -1972,11 +1972,16 @@ read_count_file (void)\n \t}\n       else if (tag == GCOV_TAG_FOR_COUNTER (GCOV_COUNTER_ARCS) && fn)\n \t{\n+\t  int read_length = (int)length;\n+\t  length = abs (read_length);\n \t  if (length != GCOV_TAG_COUNTER_LENGTH (fn->counts.size ()))\n \t    goto mismatch;\n \n-\t  for (ix = 0; ix != fn->counts.size (); ix++)\n-\t    fn->counts[ix] += gcov_read_counter ();\n+\t  if (read_length > 0)\n+\t    for (ix = 0; ix != fn->counts.size (); ix++)\n+\t      fn->counts[ix] += gcov_read_counter ();\n+\t  else\n+\t    length = 0;\n \t}\n       gcov_sync (base, length);\n       if ((error = gcov_is_error ()))"}, {"sha": "2590593a58abd40addbe54bc877c2fb21c1f489f", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece21ff6ea9d969d3b6aae82136622a7126eefc1/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece21ff6ea9d969d3b6aae82136622a7126eefc1/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=ece21ff6ea9d969d3b6aae82136622a7126eefc1", "patch": "@@ -302,13 +302,16 @@ merge_one_data (const char *filename,\n             continue;\n \n \t  tag = gcov_read_unsigned ();\n-\t  length = gcov_read_unsigned ();\n+\t  int read_length = (int)gcov_read_unsigned ();\n+\t  length = abs (read_length);\n \t  if (tag != GCOV_TAG_FOR_COUNTER (t_ix)\n \t      || (length != GCOV_TAG_COUNTER_LENGTH (ci_ptr->num)\n \t\t  && t_ix != GCOV_COUNTER_V_TOPN\n \t\t  && t_ix != GCOV_COUNTER_V_INDIR))\n \t    goto read_mismatch;\n-\t  (*merge) (ci_ptr->values, ci_ptr->num);\n+\t  /* Merging with all zero counters does not make sense.  */\n+\t  if (read_length > 0)\n+\t    (*merge) (ci_ptr->values, ci_ptr->num);\n \t  ci_ptr++;\n \t}\n       if ((error = gcov_is_error ()))\n@@ -414,27 +417,40 @@ write_one_data (const struct gcov_info *gi_ptr,\n       ci_ptr = gfi_ptr->ctrs;\n       for (t_ix = 0; t_ix < GCOV_COUNTERS; t_ix++)\n         {\n-          gcov_unsigned_t n_counts;\n-          gcov_type *c_ptr;\n+\t  gcov_position_t n_counts;\n \n-          if (!gi_ptr->merge[t_ix])\n-            continue;\n+\t  if (!gi_ptr->merge[t_ix])\n+\t    continue;\n \n-          n_counts = ci_ptr->num;\n+\t  n_counts = ci_ptr->num;\n \n \t  if (gi_ptr->merge[t_ix] == __gcov_merge_topn)\n \t    write_top_counters (ci_ptr, t_ix, n_counts);\n \t  else\n \t    {\n-\t      gcov_write_tag_length (GCOV_TAG_FOR_COUNTER (t_ix),\n-\t\t\t\t     GCOV_TAG_COUNTER_LENGTH (n_counts));\n-\t      c_ptr = ci_ptr->values;\n-\t      while (n_counts--)\n-\t\tgcov_write_counter (*c_ptr++);\n+\t      /* Do not stream when all counters are zero.  */\n+\t      int all_zeros = 1;\n+\t      for (unsigned i = 0; i < n_counts; i++)\n+\t\tif (ci_ptr->values[i] != 0)\n+\t\t  {\n+\t\t    all_zeros = 0;\n+\t\t    break;\n+\t\t  }\n+\n+\t      if (all_zeros)\n+\t\tgcov_write_tag_length (GCOV_TAG_FOR_COUNTER (t_ix),\n+\t\t\t\t       GCOV_TAG_COUNTER_LENGTH (-n_counts));\n+\t      else\n+\t\t{\n+\t\t  gcov_write_tag_length (GCOV_TAG_FOR_COUNTER (t_ix),\n+\t\t\t\t\t GCOV_TAG_COUNTER_LENGTH (n_counts));\n+\t\t  for (unsigned i = 0; i < n_counts; i++)\n+\t\t    gcov_write_counter (ci_ptr->values[i]);\n+\t\t}\n \t    }\n \n-          ci_ptr++;\n-        }\n+\t  ci_ptr++;\n+\t}\n       if (buffered)\n         fn_buffer = free_fn_data (gi_ptr, fn_buffer, GCOV_COUNTERS);\n     }"}, {"sha": "1ada1fecb5870ce954afc500ad58c9c48aa72ea1", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece21ff6ea9d969d3b6aae82136622a7126eefc1/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece21ff6ea9d969d3b6aae82136622a7126eefc1/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=ece21ff6ea9d969d3b6aae82136622a7126eefc1", "patch": "@@ -57,12 +57,12 @@ void gcov_set_verbose (void)\n #include <ftw.h>\n #endif\n \n-static void tag_function (unsigned, unsigned);\n-static void tag_blocks (unsigned, unsigned);\n-static void tag_arcs (unsigned, unsigned);\n-static void tag_lines (unsigned, unsigned);\n-static void tag_counters (unsigned, unsigned);\n-static void tag_summary (unsigned, unsigned);\n+static void tag_function (unsigned, int);\n+static void tag_blocks (unsigned, int);\n+static void tag_arcs (unsigned, int);\n+static void tag_lines (unsigned, int);\n+static void tag_counters (unsigned, int);\n+static void tag_summary (unsigned, int);\n \n /* The gcov_info for the first module.  */\n static struct gcov_info *curr_gcov_info;\n@@ -117,7 +117,7 @@ typedef struct tag_format\n {\n     unsigned tag;\n     char const *name;\n-    void (*proc) (unsigned, unsigned);\n+    void (*proc) (unsigned, int);\n } tag_format_t;\n \n /* Handler table for various Tags.  */\n@@ -138,7 +138,7 @@ static const tag_format_t tag_table[] =\n /* Handler for reading function tag.  */\n \n static void\n-tag_function (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+tag_function (unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED)\n {\n   int i;\n \n@@ -171,7 +171,7 @@ tag_function (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n /* Handler for reading block tag.  */\n \n static void\n-tag_blocks (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+tag_blocks (unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED)\n {\n   /* TBD: gcov-tool currently does not handle gcno files. Assert here.  */\n   gcc_unreachable ();\n@@ -180,7 +180,7 @@ tag_blocks (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n /* Handler for reading flow arc tag.  */\n \n static void\n-tag_arcs (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+tag_arcs (unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED)\n {\n   /* TBD: gcov-tool currently does not handle gcno files. Assert here.  */\n   gcc_unreachable ();\n@@ -189,7 +189,7 @@ tag_arcs (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n /* Handler for reading line tag.  */\n \n static void\n-tag_lines (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+tag_lines (unsigned tag ATTRIBUTE_UNUSED, int length ATTRIBUTE_UNUSED)\n {\n   /* TBD: gcov-tool currently does not handle gcno files. Assert here.  */\n   gcc_unreachable ();\n@@ -198,9 +198,9 @@ tag_lines (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n /* Handler for reading counters array tag with value as TAG and length of LENGTH.  */\n \n static void\n-tag_counters (unsigned tag, unsigned length)\n+tag_counters (unsigned tag, int length)\n {\n-  unsigned n_counts = GCOV_TAG_COUNTER_NUM (length);\n+  unsigned n_counts = GCOV_TAG_COUNTER_NUM (abs (length));\n   gcov_type *values;\n   unsigned ix;\n   unsigned tag_ix;\n@@ -211,17 +211,19 @@ tag_counters (unsigned tag, unsigned length)\n   gcc_assert (k_ctrs[tag_ix].num == 0);\n   k_ctrs[tag_ix].num = n_counts;\n \n-  k_ctrs[tag_ix].values = values = (gcov_type *) xmalloc (n_counts * sizeof (gcov_type));\n+  k_ctrs[tag_ix].values = values = (gcov_type *) xcalloc (sizeof (gcov_type),\n+\t\t\t\t\t\t\t  n_counts);\n   gcc_assert (values);\n \n-  for (ix = 0; ix != n_counts; ix++)\n-    values[ix] = gcov_read_counter ();\n+  if (length > 0)\n+    for (ix = 0; ix != n_counts; ix++)\n+      values[ix] = gcov_read_counter ();\n }\n \n /* Handler for reading summary tag.  */\n \n static void\n-tag_summary (unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+tag_summary (unsigned tag ATTRIBUTE_UNUSED, int ATTRIBUTE_UNUSED)\n {\n   gcov_read_summary (&curr_gcov_info->summary);\n }\n@@ -320,7 +322,8 @@ read_gcda_file (const char *filename)\n       tag = gcov_read_unsigned ();\n       if (!tag)\n         break;\n-      length = gcov_read_unsigned ();\n+      int read_length = (int)gcov_read_unsigned ();\n+      length = read_length > 0 ? read_length : 0;\n       base = gcov_position ();\n       mask = GCOV_TAG_MASK (tag) >> 1;\n       for (tag_depth = 4; mask; mask >>= 8)\n@@ -353,7 +356,7 @@ read_gcda_file (const char *filename)\n         {\n           unsigned long actual_length;\n \n-          (*format->proc) (tag, length);\n+\t  (*format->proc) (tag, read_length);\n \n           actual_length = gcov_position () - base;\n           if (actual_length > length)"}]}