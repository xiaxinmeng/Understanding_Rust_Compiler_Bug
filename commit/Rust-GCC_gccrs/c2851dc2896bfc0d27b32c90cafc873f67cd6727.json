{"sha": "c2851dc2896bfc0d27b32c90cafc873f67cd6727", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4NTFkYzI4OTZiZmMwZDI3YjMyYzkwY2FmYzg3M2Y2N2NkNjcyNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-09T08:04:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-09T08:04:37Z"}, "message": "tree-ssa-sccvn.c (struct vn_walk_cb_data): Add orig_ref member.\n\n2019-07-09  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (struct vn_walk_cb_data): Add orig_ref member.\n\t(vn_reference_lookup_3): If the main ref has no access path recorded\n\tbut orig_ref has use it to do access-path based disambiguation.\n\t(vn_reference_lookup_pieces): Adjust.\n\t(vn_reference_lookup): Pass down original ref if we valueized.\n\n\t* gcc.dg/tree-ssa/alias-access-path-1.c: Scan fre1 dump.\n\t* gcc.dg/tree-ssa/alias-access-path-2.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-access-path-8.c: Likewise.\n\nFrom-SVN: r273294", "tree": {"sha": "767743ad55194f16a6e85de61bbaf38bafd031de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767743ad55194f16a6e85de61bbaf38bafd031de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2851dc2896bfc0d27b32c90cafc873f67cd6727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2851dc2896bfc0d27b32c90cafc873f67cd6727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2851dc2896bfc0d27b32c90cafc873f67cd6727", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2851dc2896bfc0d27b32c90cafc873f67cd6727/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0f7ab2fb33372f298ad9333dd2dd2e44cf01cc"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "8fccc6bdab5abaadad1e2426ef28759675725b3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2851dc2896bfc0d27b32c90cafc873f67cd6727", "patch": "@@ -1,3 +1,11 @@\n+2019-07-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (struct vn_walk_cb_data): Add orig_ref member.\n+\t(vn_reference_lookup_3): If the main ref has no access path recorded\n+\tbut orig_ref has use it to do access-path based disambiguation.\n+\t(vn_reference_lookup_pieces): Adjust.\n+\t(vn_reference_lookup): Pass down original ref if we valueized.\n+\n 2019-07-09  Martin Liska  <mliska@suse.cz>\n \n \t* lto-compress.c (lto_normalized_zstd_level): Do not use"}, {"sha": "e9d01950ea389066f23b0f095e380f4b38442ab4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2851dc2896bfc0d27b32c90cafc873f67cd6727", "patch": "@@ -1,3 +1,9 @@\n+2019-07-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/alias-access-path-1.c: Scan fre1 dump.\n+\t* gcc.dg/tree-ssa/alias-access-path-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-access-path-8.c: Likewise.\n+\n 2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/predicate10.adb, gnat.dg/predicate10_pkg.adb,"}, {"sha": "7676aa6b2856bd75eaf19b909aa0332bcad234b8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-access-path-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-1.c?ref=c2851dc2896bfc0d27b32c90cafc873f67cd6727", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-fre3\" } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n struct foo\n {\n   int val;\n@@ -18,4 +18,4 @@ test ()\n   return barptr->val2;\n }\n \n-/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre3\"} } */\n+/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre1\"} } */"}, {"sha": "fdc30551617139eb491049cbeb7d6aca84db319c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-access-path-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-2.c?ref=c2851dc2896bfc0d27b32c90cafc873f67cd6727", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-fre3\" } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n struct a {\n   int val;\n };\n@@ -19,4 +19,4 @@ test (int i, int j, int k, int l)\n   dptr->c.b[k].a2[l].val=2;\n   return cptr->b[i].a[j].val;\n }\n-/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre3\"} } */\n+/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre1\"} } */"}, {"sha": "85f2c6a37e46d77a8e33b8734a469e5c6a92e5fc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-access-path-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-8.c?ref=c2851dc2896bfc0d27b32c90cafc873f67cd6727", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-fre3\" } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n struct a {\n   int val;\n };\n@@ -18,4 +18,4 @@ test (int i, int j, int k, int l)\n   cptr2->b[k].a2[l].val=2;\n   return cptr->b[i].a[j].val;\n }\n-/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre3\"} } */\n+/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre1\"} } */"}, {"sha": "627ee8fecb2cf4d21ba0afd9c04d582f6151910b", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2851dc2896bfc0d27b32c90cafc873f67cd6727/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=c2851dc2896bfc0d27b32c90cafc873f67cd6727", "patch": "@@ -1670,15 +1670,18 @@ struct pd_data\n \n struct vn_walk_cb_data\n {\n-  vn_walk_cb_data (vn_reference_t vr_, tree *last_vuse_ptr_,\n+  vn_walk_cb_data (vn_reference_t vr_, tree orig_ref_, tree *last_vuse_ptr_,\n \t\t   vn_lookup_kind vn_walk_kind_, bool tbaa_p_)\n-    : vr (vr_), last_vuse_ptr (last_vuse_ptr_), vn_walk_kind (vn_walk_kind_),\n-      tbaa_p (tbaa_p_), known_ranges (NULL)\n-   {}\n+    : vr (vr_), last_vuse_ptr (last_vuse_ptr_),\n+      vn_walk_kind (vn_walk_kind_), tbaa_p (tbaa_p_), known_ranges (NULL)\n+   {\n+     ao_ref_init (&orig_ref, orig_ref_);\n+   }\n   ~vn_walk_cb_data ();\n   void *push_partial_def (const pd_data& pd, tree, HOST_WIDE_INT);\n \n   vn_reference_t vr;\n+  ao_ref orig_ref;\n   tree *last_vuse_ptr;\n   vn_lookup_kind vn_walk_kind;\n   bool tbaa_p;\n@@ -2246,6 +2249,28 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t  lhs_ref_ok = true;\n \t}\n \n+      /* Besides valueizing the LHS we can also use access-path based\n+         disambiguation on the original non-valueized ref.  */\n+      if (!ref->ref\n+\t  && lhs_ref_ok\n+\t  && data->orig_ref.ref)\n+\t{\n+\t  /* We want to use the non-valueized LHS for this, but avoid redundant\n+\t     work.  */\n+\t  ao_ref *lref = &lhs_ref;\n+\t  ao_ref lref_alt;\n+\t  if (valueized_anything)\n+\t    {\n+\t      ao_ref_init (&lref_alt, lhs);\n+\t      lref = &lref_alt;\n+\t    }\n+\t  if (!refs_may_alias_p_1 (&data->orig_ref, lref, data->tbaa_p))\n+\t    {\n+\t      *disambiguate_only = true;\n+\t      return NULL;\n+\t    }\n+\t}\n+\n       /* If we reach a clobbering statement try to skip it and see if\n          we find a VN result with exactly the same value as the\n \t possible clobber.  In this case we can ignore the clobber\n@@ -2763,6 +2788,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \n       /* Do not update last seen VUSE after translating.  */\n       data->last_vuse_ptr = NULL;\n+      /* Invalidate the original access path since it now contains\n+         the wrong base.  */\n+      data->orig_ref.ref = NULL_TREE;\n \n       /* Keep looking for the adjusted *REF / VR pair.  */\n       return NULL;\n@@ -2923,6 +2951,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \n       /* Do not update last seen VUSE after translating.  */\n       data->last_vuse_ptr = NULL;\n+      /* Invalidate the original access path since it now contains\n+         the wrong base.  */\n+      data->orig_ref.ref = NULL_TREE;\n \n       /* Keep looking for the adjusted *REF / VR pair.  */\n       return NULL;\n@@ -2983,7 +3014,7 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n     {\n       ao_ref r;\n       unsigned limit = PARAM_VALUE (PARAM_SCCVN_MAX_ALIAS_QUERIES_PER_ACCESS);\n-      vn_walk_cb_data data (&vr1, NULL, kind, true);\n+      vn_walk_cb_data data (&vr1, NULL_TREE, NULL, kind, true);\n       if (ao_ref_init_from_vn_reference (&r, set, type, vr1.operands))\n \t*vnresult =\n \t  (vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse, true,\n@@ -3040,7 +3071,8 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n \t  || !ao_ref_init_from_vn_reference (&r, vr1.set, vr1.type,\n \t\t\t\t\t     vr1.operands))\n \tao_ref_init (&r, op);\n-      vn_walk_cb_data data (&vr1, last_vuse_ptr, kind, tbaa_p);\n+      vn_walk_cb_data data (&vr1, r.ref ? NULL_TREE : op,\n+\t\t\t    last_vuse_ptr, kind, tbaa_p);\n       wvnresult =\n \t(vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse, tbaa_p,\n \t\t\t\t\t\tvn_reference_lookup_2,"}]}