{"sha": "8b60264b0d7878d24c17067464cafc1d5c9ab33e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2MDI2NGIwZDc4NzhkMjRjMTcwNjc0NjRjYWZjMWQ1YzlhYjMzZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-10-07T16:51:11Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-10-07T16:51:11Z"}, "message": "builtins.c (expand_builtin_setjmp_receiver): Const-ify.\n\n\t* builtins.c (expand_builtin_setjmp_receiver): Const-ify.\n\t* c-common.c (fname_var_t, c_tree_code_type, c_tree_code_length):\n\tLikewise.\n\t* c-dump.c (dump_option_value_info): Likewise.\n\t* c-format.c (format_length_info, format_char_info,\n\tformat_flag_spec, format_flag_pair, format_kind_info): Likewise.\n\t* collect2.c (names): Likewise.\n\t* cppdefault.h (default_include): Likewise.\n\t* cppexp.c (suffix, vsuf_1, vsuf_2, vsuf_3): Likewise.\n\t* flow.c (life_analysis): Likewise.\n\t* gcc.c (dir_separator_str, modify_target, option_map,\n\ttarget_option_translations, spec_list_1, extra_specs_1,\n\tinit_spec): Likewise.\n\t* gcov.c (gcov_version_string): Likewise.\n\t* genattr.c (write_units): Likewise.\n\t* genattrtab.c (make_length_attrs, write_function_unit_info): Likewise.\n\t* gengenrtl.c (rtx_definition, defs): Likewise.\n\t* genrecog.c (pred_table): Likewise.\n\t* global.c (global_alloc): Likewise.\n\t* lcm.c (optimize_mode_switching): Likewise.\n\t* local-alloc.c (find_free_reg): Likewise.\n\t* params.h (param_info): Likewise.\n\t* predict.c (predictor_info): Likewise.\n\t* protoize.c (unexpansion_struct): Likewise.\n\t* real.c (bmask): Likewise.\n\t* recog.h (insn_operand_data, insn_data): Likewise.\n\t* regclass.c (initial_fixed_regs, initial_call_used_regs): Likewise.\n\t* stmt.c (expand_nl_goto_receiver): Likewise.\n\t* toplev.c (da, debug_args, lang_opt, documented_lang_options,\n\ttarget_switches, target_options): Likewise.\n\t* tradcif.y (token, tokentab2, yylex): Likewise.\n\t* tree.h (attribute_spec): Likewise.\n\n\t* alpha.c (override_options, alpha_lookup_xfloating_lib_func):\n\tLikewise.\n\t* arc.c (arc_output_function_epilogue): Likewise.\n\t* arm.c (processors, all_cores, all_architectures,\n\tarm_override_options, isr_attribute_arg, isr_attribute_args,\n\tarm_isr_value): Likewise.\n\t* avr.c (mcu_type_s, reg_class_tab, order_regs_for_local_alloc):\n\tLikewise.\n\t* c4x.c (c4x_int_reglist): Likewise.\n\t* d30v.c (override_options): Likewise.\n\t* h8300.c (shift_insn): Likewise.\n\t* i386.c (size_cost, i386_cost, i486_cost, pentium_cost,\n\tpentiumpro_cost, k6_cost, athlon_cost, pentium4_cost, ix86_cost,\n\tix86_expand_sse_comi, ix86_expand_sse_compare, override_options,\n\tbuiltin_description, bdesc_comi, bdesc_2arg, bdesc_1arg,\n\tix86_init_mmx_sse_builtins, ix86_expand_builtin): Likewise.\n\t* i386.h (processor_costs, ix86_cost): Likewise.\n\t* m68hc11.c (m68hc11_cost, m6811_cost, m6812_cost): Likewise.\n\t* m68hc11.h (processor_costs, m68hc11_cost): Likewise.\n\t* m68k.c (codes_68881, codes_FPA): Likewise.\n\t* m88k.c (mode_from_align, max_from_align, all_from_align,\n\tbest_from_align, m_options): Likewise.\n\t* m88k.h (ORDER_REGS_FOR_LOCAL_ALLOC): Likewise.\n\t* mcore.c (mode_from_align): Likewise.\n\t* mips/elf64.h (UNIQUE_SECTION): Likewise.\n\t* mips/iris6gld.h (UNIQUE_SECTION): Likewise.\n\t* mips.c (mips_sw_reg_names, mips_regno_to_class): Likewise.\n\t* mips.h (mips_regno_to_class): Likewise.\n\t* ns32k.c (scales): Likewise.\n\t* pa.c (import_string, magic_milli): Likewise.\n\t* rs6000.c (alt_reg_names, rs6000_override_options): Likewise.\n\t* sparc.c (leaf_reg_remap, sparc_override_options,\n\treg_leaf_alloc_order, reg_nonleaf_alloc_order, reg_alloc_orders):\n\tLikewise.\n\t* sparc.h (sparc_cpu_select, leaf_reg_remap): Likewise.\n\ncp:\n\t* class.c (build_vtable_entry_ref): Const-ify.\n\t* decl.c (predefined_identifier,\n\tinitialize_predefined_identifiers): Likewise.\n\t* init.c (build_new_1): Likewise.\n\t* lex.c (cplus_tree_code_type, cplus_tree_code_length, resword):\n\tLikewise.\n\nf:\n\t* bad.c (_ffebad_message_, ffebad_messages_): Const-ify.\n\t* bld.c (ffebld_arity_op_): Likewise.\n\t* bld.h (ffebld_arity_op_): Likewise.\n\t* com.c (ffecom_init_0): Likewise.\n\t* intdoc.c (_ffeintrin_name_, _ffeintrin_gen_, _ffeintrin_spec_,\n\t_ffeintrin_imp_, names, gens, imps, specs, cc_pair,\n\tcc_descriptions, cc_summaries): Likewise.\n\t* intrin.c (_ffeintrin_name_, _ffeintrin_gen_, _ffeintrin_spec_,\n\t_ffeintrin_imp_, ffeintrin_names_, ffeintrin_gens_,\n\tffeintrin_imps_, ffeintrin_specs_): Likewise.\n\njava:\n\t* jcf-io.c (format_uint): Const-ify.\n\t* lang.c (java_tree_code_type, java_tree_code_length): Likewise.\n\t* lex.c (java_get_line_col): Likewise.\n\t* parse.y (build_incdec): Likewise.\n\nFrom-SVN: r46062", "tree": {"sha": "d04fec1eb92b81beff3e31812e987a40cf880773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d04fec1eb92b81beff3e31812e987a40cf880773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b60264b0d7878d24c17067464cafc1d5c9ab33e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b60264b0d7878d24c17067464cafc1d5c9ab33e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b60264b0d7878d24c17067464cafc1d5c9ab33e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b60264b0d7878d24c17067464cafc1d5c9ab33e/comments", "author": null, "committer": null, "parents": [{"sha": "d1d18b46634506051426d379c00530955732ad1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d18b46634506051426d379c00530955732ad1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d18b46634506051426d379c00530955732ad1c"}], "stats": {"total": 865, "additions": 488, "deletions": 377}, "files": [{"sha": "69b837b0cd39c56e8d0a15c7e9ea4b82ed0e2662", "filename": "gcc/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1,3 +1,74 @@\n+2001-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_setjmp_receiver): Const-ify.\n+\t* c-common.c (fname_var_t, c_tree_code_type, c_tree_code_length):\n+\tLikewise.\n+\t* c-dump.c (dump_option_value_info): Likewise.\n+\t* c-format.c (format_length_info, format_char_info,\n+\tformat_flag_spec, format_flag_pair, format_kind_info): Likewise.\n+\t* collect2.c (names): Likewise.\n+\t* cppdefault.h (default_include): Likewise.\n+\t* cppexp.c (suffix, vsuf_1, vsuf_2, vsuf_3): Likewise.\n+\t* flow.c (life_analysis): Likewise.\n+\t* gcc.c (dir_separator_str, modify_target, option_map,\n+\ttarget_option_translations, spec_list_1, extra_specs_1,\n+\tinit_spec): Likewise.\n+\t* gcov.c (gcov_version_string): Likewise.\n+\t* genattr.c (write_units): Likewise.\n+\t* genattrtab.c (make_length_attrs, write_function_unit_info): Likewise.\n+\t* gengenrtl.c (rtx_definition, defs): Likewise.\n+\t* genrecog.c (pred_table): Likewise.\n+\t* global.c (global_alloc): Likewise.\n+\t* lcm.c (optimize_mode_switching): Likewise.\n+\t* local-alloc.c (find_free_reg): Likewise.\n+\t* params.h (param_info): Likewise.\n+\t* predict.c (predictor_info): Likewise.\n+\t* protoize.c (unexpansion_struct): Likewise.\n+\t* real.c (bmask): Likewise.\n+\t* recog.h (insn_operand_data, insn_data): Likewise.\n+\t* regclass.c (initial_fixed_regs, initial_call_used_regs): Likewise.\n+\t* stmt.c (expand_nl_goto_receiver): Likewise.\n+\t* toplev.c (da, debug_args, lang_opt, documented_lang_options,\n+\ttarget_switches, target_options): Likewise.\n+\t* tradcif.y (token, tokentab2, yylex): Likewise.\n+\t* tree.h (attribute_spec): Likewise.\n+\t\n+\t* alpha.c (override_options, alpha_lookup_xfloating_lib_func):\n+\tLikewise.\n+\t* arc.c (arc_output_function_epilogue): Likewise.\n+\t* arm.c (processors, all_cores, all_architectures,\n+\tarm_override_options, isr_attribute_arg, isr_attribute_args,\n+\tarm_isr_value): Likewise.\n+\t* avr.c (mcu_type_s, reg_class_tab, order_regs_for_local_alloc):\n+\tLikewise.\n+\t* c4x.c (c4x_int_reglist): Likewise.\n+\t* d30v.c (override_options): Likewise.\n+\t* h8300.c (shift_insn): Likewise.\n+\t* i386.c (size_cost, i386_cost, i486_cost, pentium_cost,\n+\tpentiumpro_cost, k6_cost, athlon_cost, pentium4_cost, ix86_cost,\n+\tix86_expand_sse_comi, ix86_expand_sse_compare, override_options,\n+\tbuiltin_description, bdesc_comi, bdesc_2arg, bdesc_1arg,\n+\tix86_init_mmx_sse_builtins, ix86_expand_builtin): Likewise.\n+\t* i386.h (processor_costs, ix86_cost): Likewise.\n+\t* m68hc11.c (m68hc11_cost, m6811_cost, m6812_cost): Likewise.\n+\t* m68hc11.h (processor_costs, m68hc11_cost): Likewise.\n+\t* m68k.c (codes_68881, codes_FPA): Likewise.\n+\t* m88k.c (mode_from_align, max_from_align, all_from_align,\n+\tbest_from_align, m_options): Likewise.\n+\t* m88k.h (ORDER_REGS_FOR_LOCAL_ALLOC): Likewise.\n+\t* mcore.c (mode_from_align): Likewise.\n+\t* mips/elf64.h (UNIQUE_SECTION): Likewise.\n+\t* mips/iris6gld.h (UNIQUE_SECTION): Likewise.\n+\t* mips.c (mips_sw_reg_names, mips_regno_to_class): Likewise.\n+\t* mips.h (mips_regno_to_class): Likewise.\n+\t* ns32k.c (scales): Likewise.\n+\t* pa.c (import_string, magic_milli): Likewise.\n+\t* rs6000.c (alt_reg_names, rs6000_override_options): Likewise.\n+\t* sparc.c (leaf_reg_remap, sparc_override_options,\n+\treg_leaf_alloc_order, reg_nonleaf_alloc_order, reg_alloc_orders):\n+\tLikewise.\n+\t* sparc.h (sparc_cpu_select, leaf_reg_remap): Likewise.\n+\n 2001-10-07  Dale Johannesen  <dalej@apple.com>\n \n \t* reload1.c (reload_reg_free_p): Teach register interference"}, {"sha": "0576886490d6f53ef6ad5fad3c7a57cb220ee5cb", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -530,7 +530,7 @@ expand_builtin_setjmp_receiver (receiver_label)\n     {\n #ifdef ELIMINABLE_REGS\n       size_t i;\n-      static struct elims {int from, to;} elim_regs[] = ELIMINABLE_REGS;\n+      static const struct elims {const int from, to;} elim_regs[] = ELIMINABLE_REGS;\n \n       for (i = 0; i < ARRAY_SIZE (elim_regs); i++)\n \tif (elim_regs[i].from == ARG_POINTER_REGNUM"}, {"sha": "da90224d89f9f012a8bce12a970775bc7fd7134e", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -220,9 +220,9 @@ int skip_evaluation;\n /* Information about how a function name is generated.  */\n struct fname_var_t\n {\n-  tree *decl;\t/* pointer to the VAR_DECL.  */\n-  unsigned rid;\t/* RID number for the identifier.  */\n-  int pretty;\t/* How pretty is it? */\n+  tree *const decl;\t/* pointer to the VAR_DECL.  */\n+  const unsigned rid;\t/* RID number for the identifier.  */\n+  const int pretty;\t/* How pretty is it? */\n };\n \n /* The three ways of getting then name of the current function.  */\n@@ -3446,7 +3446,7 @@ c_unsafe_for_reeval (exp)\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n \n-static char c_tree_code_type[] = {\n+static const char c_tree_code_type[] = {\n   'x',\n #include \"c-common.def\"\n };\n@@ -3458,7 +3458,7 @@ static char c_tree_code_type[] = {\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n \n-static int c_tree_code_length[] = {\n+static const int c_tree_code_length[] = {\n   0,\n #include \"c-common.def\"\n };"}, {"sha": "c26f288cacd073aaf51fc5ef06af152388f7cb87", "filename": "gcc/c-dump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -809,8 +809,8 @@ static struct dump_file_info dump_files[TDI_end] =\n /* Define a name->number mapping for a dump flag value. */\n struct dump_option_value_info\n {\n-  const char *name;\t\t/* the name of the value */\n-  int value;\t\t\t/* the value of the name */\n+  const char *const name;\t/* the name of the value */\n+  const int value;\t\t/* the value of the name */\n };\n \n /* Table of dump options. This must be consistent with the TDF_* flags"}, {"sha": "19bbccec79fb7acb225b47a129d1261111f10e0f", "filename": "gcc/c-format.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -387,15 +387,15 @@ enum\n typedef struct\n {\n   /* Name of the single-character length modifier.  */\n-  const char *name;\n+  const char *const name;\n   /* Index into a format_char_info.types array.  */\n-  enum format_lengths index;\n+  const enum format_lengths index;\n   /* Standard version this length appears in.  */\n-  enum format_std_version std;\n+  const enum format_std_version std;\n   /* Same, if the modifier can be repeated, or NULL if it can't.  */\n-  const char *double_name;\n-  enum format_lengths double_index;\n-  enum format_std_version double_std;\n+  const char *const double_name;\n+  const enum format_lengths double_index;\n+  const enum format_std_version double_std;\n } format_length_info;\n \n \n@@ -424,18 +424,18 @@ typedef struct\n    which act identically), and the length modifiers used with it.  */\n typedef struct\n {\n-  const char *format_chars;\n-  int pointer_count;\n-  enum format_std_version std;\n+  const char *const format_chars;\n+  const int pointer_count;\n+  const enum format_std_version std;\n   /* Types accepted for each length modifier.  */\n-  format_type_detail types[FMT_LEN_MAX];\n+  const format_type_detail types[FMT_LEN_MAX];\n   /* List of other modifier characters allowed with these specifiers.\n      This lists flags, and additionally \"w\" for width, \"p\" for precision\n      (right precision, for strfmon), \"#\" for left precision (strfmon),\n      \"a\" for scanf \"a\" allocation extension (not applicable in C99 mode),\n      \"*\" for scanf suppression, and \"E\" and \"O\" for those strftime\n      modifiers.  */\n-  const char *flag_chars;\n+  const char *const flag_chars;\n   /* List of additional flags describing these conversion specifiers.\n      \"c\" for generic character pointers being allowed, \"2\" for strftime\n      two digit year formats, \"3\" for strftime formats giving two digit\n@@ -445,15 +445,15 @@ typedef struct\n      \"R\" if the argument is a pointer which is dereferenced and read from,\n      \"i\" for printf integer formats where the '0' flag is ignored with\n      precision, and \"[\" for the starting character of a scanf scanset.  */\n-  const char *flags2;\n+  const char *const flags2;\n } format_char_info;\n \n \n /* Structure describing a flag accepted by some kind of format.  */\n typedef struct\n {\n   /* The flag character in question (0 for end of array).  */\n-  int flag_char;\n+  const int flag_char;\n   /* Zero if this entry describes the flag character in general, or a\n      non-zero character that may be found in flags2 if it describes the\n      flag when used with certain formats only.  If the latter, only\n@@ -462,18 +462,18 @@ typedef struct\n      will be used, if non-NULL and the standard version is higher than\n      the unpredicated one, for any pedantic warning.  For example, 'o'\n      for strftime formats (meaning 'O' is an extension over C99).  */\n-  int predicate;\n+  const int predicate;\n   /* Nonzero if the next character after this flag in the format should\n      be skipped ('=' in strfmon), zero otherwise.  */\n-  int skip_next_char;\n+  const int skip_next_char;\n   /* The name to use for this flag in diagnostic messages.  For example,\n      N_(\"`0' flag\"), N_(\"field width\").  */\n-  const char *name;\n+  const char *const name;\n   /* Long name for this flag in diagnostic messages; currently only used for\n      \"ISO C does not support ...\".  For example, N_(\"the `I' printf flag\").  */\n-  const char *long_name;\n+  const char *const long_name;\n   /* The standard version in which it appeared.  */\n-  enum format_std_version std;\n+  const enum format_std_version std;\n } format_flag_spec;\n \n \n@@ -482,16 +482,16 @@ typedef struct\n typedef struct\n {\n   /* The first flag character in question (0 for end of array).  */\n-  int flag_char1;\n+  const int flag_char1;\n   /* The second flag character.  */\n-  int flag_char2;\n+  const int flag_char2;\n   /* Non-zero if the message should say that the first flag is ignored with\n      the second, zero if the combination should simply be objected to.  */\n-  int ignored;\n+  const int ignored;\n   /* Zero if this entry applies whenever this flag combination occurs,\n      a non-zero character from flags2 if it only applies in some\n      circumstances (e.g. 'i' for printf formats ignoring 0 with precision).  */\n-  int predicate;\n+  const int predicate;\n } format_flag_pair;\n \n \n@@ -500,43 +500,43 @@ typedef struct\n {\n   /* The name of this kind of format, for use in diagnostics.  Also\n      the name of the attribute (without preceding and following __).  */\n-  const char *name;\n+  const char *const name;\n   /* Specifications of the length modifiers accepted; possibly NULL.  */\n-  const format_length_info *length_char_specs;\n+  const format_length_info *const length_char_specs;\n   /* Details of the conversion specification characters accepted.  */\n-  const format_char_info *conversion_specs;\n+  const format_char_info *const conversion_specs;\n   /* String listing the flag characters that are accepted.  */\n-  const char *flag_chars;\n+  const char *const flag_chars;\n   /* String listing modifier characters (strftime) accepted.  May be NULL.  */\n-  const char *modifier_chars;\n+  const char *const modifier_chars;\n   /* Details of the flag characters, including pseudo-flags.  */\n-  const format_flag_spec *flag_specs;\n+  const format_flag_spec *const flag_specs;\n   /* Details of bad combinations of flags.  */\n-  const format_flag_pair *bad_flag_pairs;\n+  const format_flag_pair *const bad_flag_pairs;\n   /* Flags applicable to this kind of format.  */\n-  int flags;\n+  const int flags;\n   /* Flag character to treat a width as, or 0 if width not used.  */\n-  int width_char;\n+  const int width_char;\n   /* Flag character to treat a left precision (strfmon) as,\n      or 0 if left precision not used.  */\n-  int left_precision_char;\n+  const int left_precision_char;\n   /* Flag character to treat a precision (for strfmon, right precision) as,\n      or 0 if precision not used.  */\n-  int precision_char;\n+  const int precision_char;\n   /* If a flag character has the effect of suppressing the conversion of\n      an argument ('*' in scanf), that flag character, otherwise 0.  */\n-  int suppression_char;\n+  const int suppression_char;\n   /* Flag character to treat a length modifier as (ignored if length\n      modifiers not used).  Need not be placed in flag_chars for conversion\n      specifiers, but is used to check for bad combinations such as length\n      modifier with assignment suppression in scanf.  */\n-  int length_code_char;\n+  const int length_code_char;\n   /* Pointer to type of argument expected if '*' is used for a width,\n      or NULL if '*' not used for widths.  */\n-  tree *width_type;\n+  tree *const width_type;\n   /* Pointer to type of argument expected if '*' is used for a precision,\n      or NULL if '*' not used for precisions.  */\n-  tree *precision_type;\n+  tree *const precision_type;\n } format_kind_info;\n \n "}, {"sha": "bbe8dc7c117e8c5de3a8bd73dc443ab4ed62d421", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -685,10 +685,10 @@ utf8_extend_token (c)\n #if 0\n struct try_type\n {\n-  tree *node_var;\n-  char unsigned_flag;\n-  char long_flag;\n-  char long_long_flag;\n+  tree *const node_var;\n+  const char unsigned_flag;\n+  const char long_flag;\n+  const char long_long_flag;\n };\n \n struct try_type type_sequence[] ="}, {"sha": "7b5078cf1f30c0dab9b5b0803b4e3d0697d6eb4a", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -557,7 +557,8 @@ static int\n is_ctor_dtor (s)\n      const char *s;\n {\n-  struct names { const char *const name; int len; int ret; int two_underscores; };\n+  struct names { const char *const name; const int len; const int ret;\n+    const int two_underscores; };\n \n   register struct names *p;\n   register int ch;"}, {"sha": "1b599540cbafb53b6a882b3cf909df63c78543f0", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -221,10 +221,10 @@ void\n override_options ()\n {\n   int i;\n-  static struct cpu_table {\n-    const char *name;\n-    enum processor_type processor;\n-    int flags;\n+  static const struct cpu_table {\n+    const char *const name;\n+    const enum processor_type processor;\n+    const int flags;\n   } cpu_table[] = {\n #define EV5_MASK (MASK_CPU_EV5)\n #define EV6_MASK (MASK_CPU_EV6|MASK_BWX|MASK_MAX|MASK_FIX)\n@@ -2985,8 +2985,8 @@ alpha_lookup_xfloating_lib_func (code)\n {\n   struct xfloating_op\n     {\n-      enum rtx_code code;\n-      const char *func;\n+      const enum rtx_code code;\n+      const char *const func;\n     };\n \n   static const struct xfloating_op vms_xfloating_ops[] = "}, {"sha": "49b0f162b8e9692fd34501820076c7ef8734df3a", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1299,7 +1299,7 @@ arc_output_function_epilogue (file, size)\n \n       /* Emit the return instruction.  */\n       {\n-\tstatic int regs[4] = {\n+\tstatic const int regs[4] = {\n \t  0, RETURN_ADDR_REGNUM, ILINK1_REGNUM, ILINK2_REGNUM\n \t};\n \tfprintf (file, \"\\tj.d %s\\n\", reg_names[regs[fn_type]]);"}, {"sha": "3e2192b3b4a735b5ecf956b608ad4db8324c0ca2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -286,13 +286,13 @@ static const char *const arm_condition_codes[] =\n \n struct processors\n {\n-  const char * name;\n-  unsigned int flags;\n+  const char *const name;\n+  const unsigned int flags;\n };\n \n /* Not all of these give usefully different compilation alternatives,\n    but there is no simple way of generalizing them.  */\n-static struct processors all_cores[] =\n+static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n   \n@@ -345,7 +345,7 @@ static struct processors all_cores[] =\n   {NULL, 0}\n };\n \n-static struct processors all_architectures[] =\n+static const struct processors all_architectures[] =\n {\n   /* ARM Architectures */\n   \n@@ -436,12 +436,12 @@ arm_override_options ()\n   /* If the user did not specify a processor, choose one for them.  */\n   if (insn_flags == 0)\n     {\n-      struct processors * sel;\n+      const struct processors * sel;\n       unsigned int        sought;\n-      static struct cpu_default\n+      static const struct cpu_default\n       {\n-\tint          cpu;\n-\tconst char * name;\n+\tconst int cpu;\n+\tconst char *const name;\n       }\n       cpu_defaults[] =\n       {\n@@ -460,7 +460,7 @@ arm_override_options ()\n \t{ TARGET_CPU_generic,   \"arm\" },\n \t{ 0, 0 }\n       };\n-      struct cpu_default * def;\n+      const struct cpu_default * def;\n \t  \n       /* Find the default.  */\n       for (def = cpu_defaults; def->name; def++)\n@@ -513,7 +513,7 @@ arm_override_options ()\n \t  if (sel->name == NULL)\n \t    {\n \t      unsigned int        current_bit_count = 0;\n-\t      struct processors * best_fit = NULL;\n+\t      const struct processors * best_fit = NULL;\n \t      \n \t      /* Ideally we would like to issue an error message here\n \t\t saying that it was not possible to find a CPU compatible\n@@ -760,12 +760,12 @@ arm_add_gc_roots ()\n \n typedef struct\n {\n-  const char * \targ;\n-  unsigned long\treturn_value;\n+  const char *const arg;\n+  const unsigned long return_value;\n }\n isr_attribute_arg;\n \n-static isr_attribute_arg isr_attribute_args [] =\n+static const isr_attribute_arg isr_attribute_args [] =\n {\n   { \"IRQ\",   ARM_FT_ISR },\n   { \"irq\",   ARM_FT_ISR },\n@@ -789,7 +789,7 @@ static unsigned long\n arm_isr_value (argument)\n      tree argument;\n {\n-  isr_attribute_arg * ptr;\n+  const isr_attribute_arg * ptr;\n   const char *        arg;\n \n   /* No argument - default to IRQ.  */"}, {"sha": "b576773fa6cb0a66d1669489830131d204642507", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -120,8 +120,8 @@ enum avr_arch {\n };\n \n struct mcu_type_s {\n-  const char *name;\n-  enum avr_arch arch;\n+  const char *const name;\n+  const enum avr_arch arch;\n };\n \n /* List of all known AVR MCU types - if updated, it has to be kept\n@@ -242,7 +242,7 @@ avr_init_once ()\n \n /*  return register class from register number */\n \n-static int reg_class_tab[]={\n+static const int reg_class_tab[]={\n   GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,\n   GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,\n   GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,\n@@ -4831,7 +4831,7 @@ void\n order_regs_for_local_alloc ()\n {\n   unsigned int i;\n-  int order_0[] = {\n+  static const int order_0[] = {\n     24,25,\n     18,19,\n     20,21,\n@@ -4843,7 +4843,7 @@ order_regs_for_local_alloc ()\n     0,1,\n     32,33,34,35\n   };\n-  int order_1[] = {\n+  static const int order_1[] = {\n     18,19,\n     20,21,\n     22,23,\n@@ -4855,7 +4855,7 @@ order_regs_for_local_alloc ()\n     0,1,\n     32,33,34,35\n   };\n-  int order_2[] = {\n+  static const int order_2[] = {\n     25,24,\n     23,22,\n     21,20,\n@@ -4869,9 +4869,9 @@ order_regs_for_local_alloc ()\n     32,33,34,35\n   };\n   \n-  int *order = (TARGET_ORDER_1 ? order_1 :\n-\t\tTARGET_ORDER_2 ? order_2 :\n-\t\torder_0);\n+  const int *order = (TARGET_ORDER_1 ? order_1 :\n+\t\t      TARGET_ORDER_2 ? order_2 :\n+\t\t      order_0);\n   for (i=0; i < ARRAY_SIZE (order_0); ++i)\n       reg_alloc_order[i] = order[i];\n }"}, {"sha": "b59d34475d7e682ceda61586b1a6006b8be3ab9e", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -503,7 +503,7 @@ c4x_hard_regno_rename_ok (regno1, regno2)\n    Don't use R0 to pass arguments in, we use 0 to indicate a stack\n    argument.  */\n \n-static int c4x_int_reglist[3][6] =\n+static const int c4x_int_reglist[3][6] =\n {\n   {AR2_REGNO, R2_REGNO, R3_REGNO, RC_REGNO, RS_REGNO, RE_REGNO},\n   {AR2_REGNO, R3_REGNO, RC_REGNO, RS_REGNO, RE_REGNO, 0},"}, {"sha": "a5d874546808679272a3fca80163b60bbfd842be", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -247,7 +247,7 @@ override_options ()\n \n #if 0\n       {\n-\tstatic char *names[] = REG_CLASS_NAMES;\n+\tstatic const char *const names[] = REG_CLASS_NAMES;\n \tfprintf (stderr, \"Register %s class is %s, can hold modes\", reg_names[regno], names[class]);\n \tfor (mode1 = VOIDmode;\n \t     (int)mode1 < NUM_MACHINE_MODES;"}, {"sha": "a0ed2b2b9ce5fed30915fa10ae0d60d85a5f47a4", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -2006,8 +2006,8 @@ enum shift_mode\n \n struct shift_insn\n {\n-  const char *assembler;\n-  int cc_valid;\n+  const char *const assembler;\n+  const int cc_valid;\n };\n \n /* Assembler instruction shift table."}, {"sha": "933459a2c8f6697004786f389d00c91ccb098909", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Processor costs (relative to an add) */\n+static const \n struct processor_costs size_cost = {\t/* costs for tunning for size */\n   2,\t\t\t\t\t/* cost of an add instruction */\n   3,\t\t\t\t\t/* cost of a lea instruction */\n@@ -80,6 +81,7 @@ struct processor_costs size_cost = {\t/* costs for tunning for size */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n };\n /* Processor costs (relative to an add) */\n+static const \n struct processor_costs i386_cost = {\t/* 386 specific costs */\n   1,\t\t\t\t\t/* cost of an add instruction */\n   1,\t\t\t\t\t/* cost of a lea instruction */\n@@ -112,6 +114,7 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n };\n \n+static const \n struct processor_costs i486_cost = {\t/* 486 specific costs */\n   1,\t\t\t\t\t/* cost of an add instruction */\n   1,\t\t\t\t\t/* cost of a lea instruction */\n@@ -144,6 +147,7 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n   3\t\t\t\t\t/* MMX or SSE register to integer */\n };\n \n+static const \n struct processor_costs pentium_cost = {\n   1,\t\t\t\t\t/* cost of an add instruction */\n   1,\t\t\t\t\t/* cost of a lea instruction */\n@@ -176,6 +180,7 @@ struct processor_costs pentium_cost = {\n   3\t\t\t\t\t/* MMX or SSE register to integer */\n };\n \n+static const \n struct processor_costs pentiumpro_cost = {\n   1,\t\t\t\t\t/* cost of an add instruction */\n   1,\t\t\t\t\t/* cost of a lea instruction */\n@@ -208,6 +213,7 @@ struct processor_costs pentiumpro_cost = {\n   3\t\t\t\t\t/* MMX or SSE register to integer */\n };\n \n+static const \n struct processor_costs k6_cost = {\n   1,\t\t\t\t\t/* cost of an add instruction */\n   2,\t\t\t\t\t/* cost of a lea instruction */\n@@ -240,6 +246,7 @@ struct processor_costs k6_cost = {\n   6\t\t\t\t\t/* MMX or SSE register to integer */\n };\n \n+static const \n struct processor_costs athlon_cost = {\n   1,\t\t\t\t\t/* cost of an add instruction */\n   2,\t\t\t\t\t/* cost of a lea instruction */\n@@ -272,6 +279,7 @@ struct processor_costs athlon_cost = {\n   6\t\t\t\t\t/* MMX or SSE register to integer */\n };\n \n+static const \n struct processor_costs pentium4_cost = {\n   1,\t\t\t\t\t/* cost of an add instruction */\n   1,\t\t\t\t\t/* cost of a lea instruction */\n@@ -304,7 +312,7 @@ struct processor_costs pentium4_cost = {\n   10,\t\t\t\t\t/* MMX or SSE register to integer */\n };\n \n-struct processor_costs *ix86_cost = &pentium_cost;\n+const struct processor_costs *ix86_cost = &pentium_cost;\n \n /* Processor feature/optimization bitmasks.  */\n #define m_386 (1<<PROCESSOR_I386)\n@@ -641,10 +649,10 @@ struct ix86_address\n static int ix86_decompose_address PARAMS ((rtx, struct ix86_address *));\n \n struct builtin_description;\n-static rtx ix86_expand_sse_comi PARAMS ((struct builtin_description *, tree,\n-\t\t\t\t\t rtx));\n-static rtx ix86_expand_sse_compare PARAMS ((struct builtin_description *, tree,\n-\t\t\t\t\t    rtx));\n+static rtx ix86_expand_sse_comi PARAMS ((const struct builtin_description *,\n+\t\t\t\t\t tree, rtx));\n+static rtx ix86_expand_sse_compare PARAMS ((const struct builtin_description *,\n+\t\t\t\t\t    tree, rtx));\n static rtx ix86_expand_unop1_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx ix86_expand_unop_builtin PARAMS ((enum insn_code, tree, rtx, int));\n static rtx ix86_expand_binop_builtin PARAMS ((enum insn_code, tree, rtx));\n@@ -770,13 +778,13 @@ override_options ()\n \n   static struct ptt\n     {\n-      struct processor_costs *cost;\t/* Processor costs */\n-      int target_enable;\t\t/* Target flags to enable.  */\n-      int target_disable;\t\t/* Target flags to disable.  */\n-      int align_loop;\t\t\t/* Default alignments.  */\n-      int align_jump;\n-      int align_func;\n-      int branch_cost;\n+      const struct processor_costs *cost;\t/* Processor costs */\n+      const int target_enable;\t\t\t/* Target flags to enable.  */\n+      const int target_disable;\t\t\t/* Target flags to disable.  */\n+      const int align_loop;\t\t\t/* Default alignments.  */\n+      const int align_jump;\n+      const int align_func;\n+      const int branch_cost;\n     }\n   const processor_target_table[PROCESSOR_max] =\n     {\n@@ -791,8 +799,8 @@ override_options ()\n \n   static struct pta\n     {\n-      const char *name;\t\t/* processor name or nickname.  */\n-      enum processor_type processor;\n+      const char *const name;\t\t/* processor name or nickname.  */\n+      const enum processor_type processor;\n     }\n   const processor_alias_table[] =\n     {\n@@ -10708,15 +10716,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n struct builtin_description\n {\n-  unsigned int mask;\n-  enum insn_code icode;\n-  const char * name;\n-  enum ix86_builtins code;\n-  enum rtx_code comparison;\n-  unsigned int flag;\n+  const unsigned int mask;\n+  const enum insn_code icode;\n+  const char *const name;\n+  const enum ix86_builtins code;\n+  const enum rtx_code comparison;\n+  const unsigned int flag;\n };\n \n-static struct builtin_description bdesc_comi[] =\n+static const struct builtin_description bdesc_comi[] =\n {\n   { MASK_SSE, CODE_FOR_sse_comi, \"__builtin_ia32_comieq\", IX86_BUILTIN_COMIEQSS, EQ, 0 },\n   { MASK_SSE, CODE_FOR_sse_comi, \"__builtin_ia32_comilt\", IX86_BUILTIN_COMILTSS, LT, 0 },\n@@ -10732,7 +10740,7 @@ static struct builtin_description bdesc_comi[] =\n   { MASK_SSE, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomineq\", IX86_BUILTIN_UCOMINEQSS, NE, 0 }\n };\n \n-static struct builtin_description bdesc_2arg[] =\n+static const struct builtin_description bdesc_2arg[] =\n {\n   /* SSE */\n   { MASK_SSE, CODE_FOR_addv4sf3, \"__builtin_ia32_addps\", IX86_BUILTIN_ADDPS, 0, 0 },\n@@ -10865,7 +10873,7 @@ static struct builtin_description bdesc_2arg[] =\n \n };\n \n-static struct builtin_description bdesc_1arg[] =\n+static const struct builtin_description bdesc_1arg[] =\n {\n   { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB, 0, 0 },\n   { MASK_SSE, CODE_FOR_sse_movmskps, 0, IX86_BUILTIN_MOVMSKPS, 0, 0 },\n@@ -10894,7 +10902,7 @@ ix86_init_builtins ()\n void\n ix86_init_mmx_sse_builtins ()\n {\n-  struct builtin_description * d;\n+  const struct builtin_description * d;\n   size_t i;\n   tree endlink = void_list_node;\n \n@@ -11472,7 +11480,7 @@ ix86_expand_unop1_builtin (icode, arglist, target)\n \n static rtx\n ix86_expand_sse_compare (d, arglist, target)\n-     struct builtin_description *d;\n+     const struct builtin_description *d;\n      tree arglist;\n      rtx target;\n {\n@@ -11524,7 +11532,7 @@ ix86_expand_sse_compare (d, arglist, target)\n \n static rtx\n ix86_expand_sse_comi (d, arglist, target)\n-     struct builtin_description *d;\n+     const struct builtin_description *d;\n      tree arglist;\n      rtx target;\n {\n@@ -11585,7 +11593,7 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n      int ignore ATTRIBUTE_UNUSED;\n {\n-  struct builtin_description *d;\n+  const struct builtin_description *d;\n   size_t i;\n   enum insn_code icode;\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);"}, {"sha": "0bf603a44372e997e218871ab15cdf95b5a411e2", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -51,42 +51,42 @@ Boston, MA 02111-1307, USA. */\n /* Define the specific costs for a given cpu */\n \n struct processor_costs {\n-  int add;\t\t\t/* cost of an add instruction */\n-  int lea;\t\t\t/* cost of a lea instruction */\n-  int shift_var;\t\t/* variable shift costs */\n-  int shift_const;\t\t/* constant shift costs */\n-  int mult_init;\t\t/* cost of starting a multiply */\n-  int mult_bit;\t\t\t/* cost of multiply per each bit set */\n-  int divide;\t\t\t/* cost of a divide/mod */\n-  int large_insn;\t\t/* insns larger than this cost more */\n-  int move_ratio;\t\t/* The threshold of number of scalar\n+  const int add;\t\t/* cost of an add instruction */\n+  const int lea;\t\t/* cost of a lea instruction */\n+  const int shift_var;\t\t/* variable shift costs */\n+  const int shift_const;\t/* constant shift costs */\n+  const int mult_init;\t\t/* cost of starting a multiply */\n+  const int mult_bit;\t\t/* cost of multiply per each bit set */\n+  const int divide;\t\t/* cost of a divide/mod */\n+  const int large_insn;\t\t/* insns larger than this cost more */\n+  const int move_ratio;\t\t/* The threshold of number of scalar\n \t\t\t\t   memory-to-memory move insns.  */\n-  int movzbl_load;\t\t/* cost of loading using movzbl */\n-  int int_load[3];\t\t/* cost of loading integer registers\n+  const int movzbl_load;\t/* cost of loading using movzbl */\n+  const int int_load[3];\t/* cost of loading integer registers\n \t\t\t\t   in QImode, HImode and SImode relative\n \t\t\t\t   to reg-reg move (2).  */\n-  int int_store[3];\t\t/* cost of storing integer register\n+  const int int_store[3];\t/* cost of storing integer register\n \t\t\t\t   in QImode, HImode and SImode */\n-  int fp_move;\t\t\t/* cost of reg,reg fld/fst */\n-  int fp_load[3];\t\t/* cost of loading FP register\n+  const int fp_move;\t\t/* cost of reg,reg fld/fst */\n+  const int fp_load[3];\t\t/* cost of loading FP register\n \t\t\t\t   in SFmode, DFmode and XFmode */\n-  int fp_store[3];\t\t/* cost of storing FP register\n+  const int fp_store[3];\t/* cost of storing FP register\n \t\t\t\t   in SFmode, DFmode and XFmode */\n-  int mmx_move;\t\t\t/* cost of moving MMX register.  */\n-  int mmx_load[2];\t\t/* cost of loading MMX register\n+  const int mmx_move;\t\t/* cost of moving MMX register.  */\n+  const int mmx_load[2];\t/* cost of loading MMX register\n \t\t\t\t   in SImode and DImode */\n-  int mmx_store[2];\t\t/* cost of storing MMX register\n+  const int mmx_store[2];\t/* cost of storing MMX register\n \t\t\t\t   in SImode and DImode */\n-  int sse_move;\t\t\t/* cost of moving SSE register.  */\n-  int sse_load[3];\t\t/* cost of loading SSE register\n+  const int sse_move;\t\t/* cost of moving SSE register.  */\n+  const int sse_load[3];\t/* cost of loading SSE register\n \t\t\t\t   in SImode, DImode and TImode*/\n-  int sse_store[3];\t\t/* cost of storing SSE register\n+  const int sse_store[3];\t/* cost of storing SSE register\n \t\t\t\t   in SImode, DImode and TImode*/\n-  int mmxsse_to_integer;\t/* cost of moving mmxsse register to\n+  const int mmxsse_to_integer;\t/* cost of moving mmxsse register to\n \t\t\t\t   integer and vice versa.  */\n };\n \n-extern struct processor_costs *ix86_cost;\n+extern const struct processor_costs *ix86_cost;\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n "}, {"sha": "fa0179a58c88ad43f82e4cd7c93f02211726efe0", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -128,10 +128,10 @@ rtx m68hc11_compare_op0;\n rtx m68hc11_compare_op1;\n \f\n \n-struct processor_costs *m68hc11_cost;\n+const struct processor_costs *m68hc11_cost;\n \n /* Costs for a 68HC11.  */\n-struct processor_costs m6811_cost = {\n+static const struct processor_costs m6811_cost = {\n   /* add */\n   COSTS_N_INSNS (2),\n   /* logical */\n@@ -166,7 +166,7 @@ struct processor_costs m6811_cost = {\n };\n \n /* Costs for a 68HC12.  */\n-struct processor_costs m6812_cost = {\n+static const struct processor_costs m6812_cost = {\n   /* add */\n   COSTS_N_INSNS (1),\n   /* logical */"}, {"sha": "07e640b63f7c4e31c7ae3d3f8361ab3409c30765", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -212,21 +212,21 @@ extern const char *m68hc11_soft_reg_count;\n \f\n /* Define cost parameters for a given processor variant.  */\n struct processor_costs {\n-  int add;\t\t/* cost of an add instruction */\n-  int logical;          /* cost of a logical instruction */\n-  int shift_var;\n-  int shiftQI_const[8];\n-  int shiftHI_const[16];\n-  int multQI;\n-  int multHI;\n-  int multSI;\n-  int divQI;\n-  int divHI;\n-  int divSI;\n+  const int add;\t\t/* cost of an add instruction */\n+  const int logical;          /* cost of a logical instruction */\n+  const int shift_var;\n+  const int shiftQI_const[8];\n+  const int shiftHI_const[16];\n+  const int multQI;\n+  const int multHI;\n+  const int multSI;\n+  const int divQI;\n+  const int divHI;\n+  const int divSI;\n };\n \n /* Costs for the current processor.  */\n-extern struct processor_costs *m68hc11_cost;\n+extern const struct processor_costs *m68hc11_cost;\n \f\n \n /* target machine storage layout */"}, {"sha": "a83168afe146aff181ed4c625a56c3133788479d", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -3049,7 +3049,7 @@ static const char *const strings_68881[7] = {\n   \"1e16\"\n   };\n \n-int codes_68881[7] = {\n+static const int codes_68881[7] = {\n   0x0f,\n   0x32,\n   0x33,\n@@ -3216,7 +3216,7 @@ static const char *const strings_FPA[38] = {\n };\n \n \n-int codes_FPA[38] = {\n+static const int codes_FPA[38] = {\n /* small rationals */\n   0x200,\n   0xe,"}, {"sha": "db5e069d594816735e6b5b9847220ac7f6feb674", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -485,15 +485,15 @@ legitimize_address (pic, orig, reg, scratch)\n #define MOVSTR_SI_LIMIT_88110   72\n #define MOVSTR_DI_LIMIT_88110   72\n \n-static enum machine_mode mode_from_align[] =\n+static const enum machine_mode mode_from_align[] =\n \t\t\t      {VOIDmode, QImode, HImode, VOIDmode, SImode,\n \t\t\t       VOIDmode, VOIDmode, VOIDmode, DImode};\n-static int max_from_align[] = {0, MOVSTR_QI, MOVSTR_HI, 0, MOVSTR_SI,\n-\t\t\t       0, 0, 0, MOVSTR_DI};\n-static int all_from_align[] = {0, MOVSTR_QI, MOVSTR_ODD_HI, 0, MOVSTR_ODD_SI,\n-\t\t\t       0, 0, 0, MOVSTR_ODD_DI};\n+static const int max_from_align[] = {0, MOVSTR_QI, MOVSTR_HI, 0, MOVSTR_SI,\n+\t\t\t\t     0, 0, 0, MOVSTR_DI};\n+static const int all_from_align[] = {0, MOVSTR_QI, MOVSTR_ODD_HI, 0,\n+\t\t\t\t     MOVSTR_ODD_SI, 0, 0, 0, MOVSTR_ODD_DI};\n \n-static int best_from_align[3][9] = {\n+static const int best_from_align[3][9] = {\n   {0, MOVSTR_QI_LIMIT_88100, MOVSTR_HI_LIMIT_88100, 0, MOVSTR_SI_LIMIT_88100,\n    0, 0, 0, MOVSTR_DI_LIMIT_88100},\n   {0, MOVSTR_QI_LIMIT_88110, MOVSTR_HI_LIMIT_88110, 0, MOVSTR_SI_LIMIT_88110,\n@@ -1534,7 +1534,8 @@ output_option (file, sep, type, name, indent, pos, max)\n   return pos + fprintf (file, \"%s%s%s\", sep, type, name);\n }\n \n-static struct { const char *const name; int value; } m_options[] = TARGET_SWITCHES;\n+static const struct { const char *const name; const int value; } m_options[] =\n+TARGET_SWITCHES;\n \n static void\n output_options (file, f_options, f_len, W_options, W_len,"}, {"sha": "abcc050288df0f622534239fed58f839ca798079", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -690,8 +690,8 @@ extern int flag_pic;\t\t\t\t/* -fpic */\n    write-over scoreboard delays between caller and callee.  */\n #define ORDER_REGS_FOR_LOCAL_ALLOC\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  static int leaf[] = REG_LEAF_ALLOC_ORDER;\t\t\t\\\n-  static int nonleaf[] = REG_ALLOC_ORDER;\t\t\t\\\n+  static const int leaf[] = REG_LEAF_ALLOC_ORDER;\t\t\\\n+  static const int nonleaf[] = REG_ALLOC_ORDER;\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n   memcpy (reg_alloc_order, regs_ever_live[1] ? nonleaf : leaf,\t\\\n \t  FIRST_PSEUDO_REGISTER * sizeof (int));\t\t\\"}, {"sha": "7b83cd92e25c999ecca38c8c16f2ea82eee3b2c8", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1877,7 +1877,7 @@ mcore_store_multiple_operation (op, mode)\n    known constants.  DEST and SRC are registers.  OFFSET is the known\n    starting point for the output pattern.  */\n \n-static enum machine_mode mode_from_align[] =\n+static const enum machine_mode mode_from_align[] =\n {\n   VOIDmode, QImode, HImode, VOIDmode, SImode,\n   VOIDmode, VOIDmode, VOIDmode, DImode"}, {"sha": "cc94020e8043ddf6d89c6e5d9dd12fbb235117cf", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -197,8 +197,9 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\t   \\\n do {\t\t\t\t\t\t\t\t\t   \\\n   int len, size, sec;\t\t\t\t\t\t\t   \\\n-  char *name, *string, *prefix;\t\t\t\t\t\t   \\\n-  static char *prefixes[4][2] = {\t\t\t\t\t   \\\n+  const char *name, *prefix;\t\t\t\t\t\t   \\\n+  char *string;\t\t\t\t\t\t\t\t   \\\n+  static const char *const prefixes[4][2] = {\t\t\t\t   \\\n     { \".text.\", \".gnu.linkonce.t.\" },\t\t\t\t\t   \\\n     { \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\t\t   \\\n     { \".data.\", \".gnu.linkonce.d.\" },\t\t\t\t\t   \\"}, {"sha": "addc0f7d82eceb6950152e8491b2a89737bb19cf", "filename": "gcc/config/mips/iris6gld.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmips%2Firis6gld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmips%2Firis6gld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6gld.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -54,10 +54,10 @@ Boston, MA 02111-1307, USA.  */\n     {\t\t\t\t\t\t\t\t\\\n       int len;\t\t\t\t\t\t\t\\\n       int sec;\t\t\t\t\t\t\t\\\n-      char *name;\t\t\t\t\t\t\\\n+      const char *name;\t\t\t\t\t\t\\\n       char *string;\t\t\t\t\t\t\\\n-      char *prefix;\t\t\t\t\t\t\\\n-      static char *prefixes[/*4*/3][2] =\t\t\t\\\n+      const char *prefix;\t\t\t\t\t\\\n+      static const char *const prefixes[/*4*/3][2] =\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \t{ \".text.\",   \".gnu.linkonce.t.\" },\t\t\t\\\n \t{ \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\\"}, {"sha": "9ff5be61106939ed0fbcefdae45729c918a502d4", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -345,7 +345,7 @@ char mips_reg_names[][8] =\n /* Mips software names for the registers, used to overwrite the\n    mips_reg_names array.  */\n \n-char mips_sw_reg_names[][8] =\n+static const char mips_sw_reg_names[][8] =\n {\n   \"$zero\",\"$at\",  \"$v0\",  \"$v1\",  \"$a0\",  \"$a1\",  \"$a2\",  \"$a3\",\n   \"$t0\",  \"$t1\",  \"$t2\",  \"$t3\",  \"$t4\",  \"$t5\",  \"$t6\",  \"$t7\",\n@@ -360,7 +360,7 @@ char mips_sw_reg_names[][8] =\n };\n \n /* Map hard register number to register class */\n-enum reg_class mips_regno_to_class[] =\n+const enum reg_class mips_regno_to_class[] =\n {\n   GR_REGS,\tGR_REGS,\tM16_NA_REGS,\tM16_NA_REGS,\n   M16_REGS,\tM16_REGS,\tM16_REGS,\tM16_REGS,"}, {"sha": "121628a07857ae3a5a884679c33cb06d6953f74f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1982,7 +1982,7 @@ enum reg_class\n    choose a class which is \"minimal\", meaning that no smaller class\n    also contains the register.  */\n \n-extern enum reg_class mips_regno_to_class[];\n+extern const enum reg_class mips_regno_to_class[];\n \n #define REGNO_REG_CLASS(REGNO) mips_regno_to_class[ (REGNO) ]\n "}, {"sha": "7d923c83c60ef961cfbec0842f66eb062ad96148", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1195,7 +1195,7 @@ print_operand_address (file, addr)\n      register FILE *file;\n      register rtx addr;\n {\n-  static char scales[] = { 'b', 'w', 'd', 0, 'q', };\n+  static const char scales[] = { 'b', 'w', 'd', 0, 'q', };\n   rtx offset, base, indexexp, tmp;\n   int scale;\n   extern int flag_pic;"}, {"sha": "fa23eaa901896f5ef323e9e261edf04247abaed4", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -4457,7 +4457,7 @@ enum millicodes { remI, remU, divI, divU, mulI, mulU, end1000 };\n static void import_milli\t\t\tPARAMS ((enum millicodes));\n static char imported[(int) end1000];\n static const char * const milli_names[] = {\"remI\", \"remU\", \"divI\", \"divU\", \"mulI\", \"mulU\"};\n-static char import_string[] = \".IMPORT $$....,MILLICODE\";\n+static const char import_string[] = \".IMPORT $$....,MILLICODE\";\n #define MILLI_START 10\n \n static void\n@@ -4490,8 +4490,8 @@ output_mul_insn (unsignedp, insn)\n /* Emit the rtl for doing a division by a constant. */\n \n /* Do magic division millicodes exist for this value? */\n-static int magic_milli[]= {0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,\n-\t\t\t     1, 1};\n+static const int magic_milli[]= {0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,\n+\t\t\t\t 1, 1};\n \n /* We'll use an array to keep track of the magic millicodes and\n    whether or not we've used them already. [n][0] is signed, [n][1] is"}, {"sha": "90256195045c07f0f69348d308fec66b6a3eb94c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -164,7 +164,7 @@ char rs6000_reg_names[][8] =\n };\n \n #ifdef TARGET_REGNAMES\n-static char alt_reg_names[][8] =\n+static const char alt_reg_names[][8] =\n {\n    \"%r0\",   \"%r1\",  \"%r2\",  \"%r3\",  \"%r4\",  \"%r5\",  \"%r6\",  \"%r7\",\n    \"%r8\",   \"%r9\", \"%r10\", \"%r11\", \"%r12\", \"%r13\", \"%r14\", \"%r15\",\n@@ -227,11 +227,11 @@ rs6000_override_options (default_cpu)\n \n   static struct ptt\n     {\n-      const char *name;\t\t/* Canonical processor name.  */\n-      enum processor_type processor; /* Processor type enum value.  */\n-      int target_enable;\t/* Target flags to enable.  */\n-      int target_disable;\t/* Target flags to disable.  */\n-    } processor_target_table[]\n+      const char *const name;\t\t/* Canonical processor name.  */\n+      const enum processor_type processor; /* Processor type enum value.  */\n+      const int target_enable;\t/* Target flags to enable.  */\n+      const int target_disable;\t/* Target flags to disable.  */\n+    } const processor_target_table[]\n       = {{\"common\", PROCESSOR_COMMON, MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_MASKS},\n \t {\"power\", PROCESSOR_POWER,"}, {"sha": "1af8c5f4ff19d915a5b60b8f5bce04c30438870b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -87,7 +87,7 @@ static rtx leaf_label;\n    registers.  FRAME_POINTER_REGNUM cannot be remapped by\n    this function to eliminate it.  You must use -fomit-frame-pointer\n    to get that.  */\n-char leaf_reg_remap[] =\n+const char leaf_reg_remap[] =\n { 0, 1, 2, 3, 4, 5, 6, 7,\n   -1, -1, -1, -1, -1, -1, 14, -1,\n   -1, -1, -1, -1, -1, -1, -1, -1,\n@@ -226,22 +226,22 @@ void\n sparc_override_options ()\n {\n   static struct code_model {\n-    const char *name;\n-    int value;\n-  } cmodels[] = {\n+    const char *const name;\n+    const int value;\n+  } const cmodels[] = {\n     { \"32\", CM_32 },\n     { \"medlow\", CM_MEDLOW },\n     { \"medmid\", CM_MEDMID },\n     { \"medany\", CM_MEDANY },\n     { \"embmedany\", CM_EMBMEDANY },\n     { 0, 0 }\n   };\n-  struct code_model *cmodel;\n+  const struct code_model *cmodel;\n   /* Map TARGET_CPU_DEFAULT to value for -m{arch,tune}=.  */\n   static struct cpu_default {\n-    int cpu;\n-    const char *name;\n-  } cpu_default[] = {\n+    const int cpu;\n+    const char *const name;\n+  } const cpu_default[] = {\n     /* There must be one entry here for each TARGET_CPU value.  */\n     { TARGET_CPU_sparc, \"cypress\" },\n     { TARGET_CPU_sparclet, \"tsc701\" },\n@@ -254,14 +254,14 @@ sparc_override_options ()\n     { TARGET_CPU_ultrasparc, \"ultrasparc\" },\n     { 0, 0 }\n   };\n-  struct cpu_default *def;\n+  const struct cpu_default *def;\n   /* Table of values for -m{cpu,tune}=.  */\n   static struct cpu_table {\n-    const char *name;\n-    enum processor_type processor;\n-    int disable;\n-    int enable;\n-  } cpu_table[] = {\n+    const char *const name;\n+    const enum processor_type processor;\n+    const int disable;\n+    const int enable;\n+  } const cpu_table[] = {\n     { \"v7\",         PROCESSOR_V7, MASK_ISA, 0 },\n     { \"cypress\",    PROCESSOR_CYPRESS, MASK_ISA, 0 },\n     { \"v8\",         PROCESSOR_V8, MASK_ISA, MASK_V8 },\n@@ -286,8 +286,8 @@ sparc_override_options ()\n     \t\t\t\t\t\t    |MASK_DEPRECATED_V8_INSNS},\n     { 0, 0, 0, 0 }\n   };\n-  struct cpu_table *cpu;\n-  struct sparc_cpu_select *sel;\n+  const struct cpu_table *cpu;\n+  const struct sparc_cpu_select *sel;\n   int fpu;\n   \n #ifndef SPARC_BI_ARCH\n@@ -5564,13 +5564,13 @@ output_return (operands)\n \f\n /* Leaf functions and non-leaf functions have different needs.  */\n \n-static int\n+static const int\n reg_leaf_alloc_order[] = REG_LEAF_ALLOC_ORDER;\n \n-static int\n+static const int\n reg_nonleaf_alloc_order[] = REG_ALLOC_ORDER;\n \n-static int *reg_alloc_orders[] = {\n+static const int *const reg_alloc_orders[] = {\n   reg_leaf_alloc_order,\n   reg_nonleaf_alloc_order};\n \n@@ -5583,7 +5583,7 @@ order_regs_for_local_alloc ()\n     {\n       last_order_nonleaf = !last_order_nonleaf;\n       memcpy ((char *) reg_alloc_order,\n-\t      (char *) reg_alloc_orders[last_order_nonleaf],\n+\t      (const char *) reg_alloc_orders[last_order_nonleaf],\n \t      FIRST_PSEUDO_REGISTER * sizeof (int));\n     }\n }"}, {"sha": "bf43ba9684923ce80b46ee4c99785ed50195ca11", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -721,9 +721,9 @@ extern enum processor_type sparc_cpu;\n struct sparc_cpu_select\n {\n   const char *string;\n-  const char *name;\n-  int set_tune_p;\n-  int set_arch_p;\n+  const char *const name;\n+  const int set_tune_p;\n+  const int set_arch_p;\n };\n \n extern struct sparc_cpu_select sparc_select[];\n@@ -1433,7 +1433,7 @@ extern enum reg_class sparc_regno_reg_class[];\n extern char sparc_leaf_regs[];\n #define LEAF_REGISTERS sparc_leaf_regs\n \n-extern char leaf_reg_remap[];\n+extern const char leaf_reg_remap[];\n #define LEAF_REG_REMAP(REGNO) (leaf_reg_remap[REGNO])\n \n /* The class value for index registers, and the one for base regs.  */"}, {"sha": "a7a008f8def857529012e7485c28a00f189cbf2a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1,3 +1,12 @@\n+2001-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (build_vtable_entry_ref): Const-ify.\n+\t* decl.c (predefined_identifier,\n+\tinitialize_predefined_identifiers): Likewise. \n+\t* init.c (build_new_1): Likewise.\n+\t* lex.c (cplus_tree_code_type, cplus_tree_code_length, resword):\n+\tLikewise.\n+\n 2001-10-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* optimize.c (struct inline_data): Moved to ../tree-inline.c."}, {"sha": "97a359741023dac45c750d600bc373625cc3f486", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -435,7 +435,7 @@ static void\n build_vtable_entry_ref (basetype, idx)\n      tree basetype, idx;\n {\n-  static char asm_stmt[] = \".vtable_entry %c0, %c1\";\n+  static const char asm_stmt[] = \".vtable_entry %c0, %c1\";\n   tree s, i, i2;\n   tree vtable = get_vtbl_decl_for_binfo (TYPE_BINFO (basetype));\n   tree first_fn = TYPE_BINFO_VTABLE (basetype);"}, {"sha": "60cceada0f7795ed03949cdac7c8c100d28f5f26", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -6227,22 +6227,22 @@ record_unknown_type (type, name)\n typedef struct predefined_identifier\n {\n   /* The name of the identifier.  */\n-  const char *name;\n+  const char *const name;\n   /* The place where the IDENTIFIER_NODE should be stored.  */\n-  tree *node;\n+  tree *const node;\n   /* Non-zero if this is the name of a constructor or destructor.  */\n-  int ctor_or_dtor_p;\n+  const int ctor_or_dtor_p;\n } predefined_identifier;\n \n /* Create all the predefined identifiers.  */\n \n static void\n initialize_predefined_identifiers ()\n {\n-  struct predefined_identifier *pid;\n+  const predefined_identifier *pid;\n \n   /* A table of identifiers to create at startup.  */\n-  static predefined_identifier predefined_identifiers[] = {\n+  static const predefined_identifier predefined_identifiers[] = {\n     { \"C++\", &lang_name_cplusplus, 0 },\n     { \"C\", &lang_name_c, 0 },\n     { \"Java\", &lang_name_java, 0 },"}, {"sha": "8dad82d071178f2b7a45c04a5657b987b9901f0e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -2355,7 +2355,7 @@ build_new_1 (exp)\n       tree class_addr, alloc_decl;\n       tree class_decl = build_java_class_ref (true_type);\n       tree class_size = size_in_bytes (true_type);\n-      static char alloc_name[] = \"_Jv_AllocObject\";\n+      static const char alloc_name[] = \"_Jv_AllocObject\";\n       use_java_new = 1;\n       alloc_decl = IDENTIFIER_GLOBAL_VALUE (get_identifier (alloc_name));\n       if (alloc_decl == NULL_TREE)"}, {"sha": "cb691420243e4181c350d3e392a6bdd3a58e38a8", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -213,7 +213,7 @@ int interface_unknown;\t\t/* whether or not we know this class\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n \n-static char cplus_tree_code_type[] = {\n+static const char cplus_tree_code_type[] = {\n   'x',\n #include \"cp-tree.def\"\n };\n@@ -225,7 +225,7 @@ static char cplus_tree_code_type[] = {\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n \n-static int cplus_tree_code_length[] = {\n+static const int cplus_tree_code_length[] = {\n   0,\n #include \"cp-tree.def\"\n };\n@@ -390,9 +390,9 @@ init_operators ()\n /* The reserved keyword table.  */\n struct resword\n {\n-  const char *word;\n-  ENUM_BITFIELD(rid) rid : 16;\n-  unsigned int disable   : 16;\n+  const char *const word;\n+  const ENUM_BITFIELD(rid) rid : 16;\n+  const unsigned int disable   : 16;\n };\n \n /* Disable mask.  Keywords are disabled if (reswords[i].disable & mask) is"}, {"sha": "cda691d59567c90cff80df08a24ffbdea1d3f634", "filename": "gcc/cppdefault.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcppdefault.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcppdefault.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -96,11 +96,11 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n struct default_include\n {\n-  const char *fname;\t\t/* The name of the directory.  */\n-  const char *component;\t/* The component containing the directory\n+  const char *const fname;\t/* The name of the directory.  */\n+  const char *const component;\t/* The component containing the directory\n \t\t\t\t   (see update_path in prefix.c) */\n-  int cplusplus;\t\t/* Only look here if we're compiling C++.  */\n-  int cxx_aware;\t\t/* Includes in this directory don't need to\n+  const int cplusplus;\t\t/* Only look here if we're compiling C++.  */\n+  const int cxx_aware;\t\t/* Includes in this directory don't need to\n \t\t\t\t   be wrapped in extern \"C\" when compiling\n \t\t\t\t   C++.  */\n };"}, {"sha": "5a92351a03c3f1627c7887024b93f1360dc39492", "filename": "gcc/cppexp.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -63,23 +63,23 @@ struct op\n \n struct suffix\n {\n-  unsigned char s[4];\n-  unsigned char u;\n-  unsigned char l;\n+  const unsigned char s[4];\n+  const unsigned char u;\n+  const unsigned char l;\n };\n \n-const struct suffix vsuf_1[] = {\n+static const struct suffix vsuf_1[] = {\n   { \"u\", 1, 0 }, { \"U\", 1, 0 },\n   { \"l\", 0, 1 }, { \"L\", 0, 1 }\n };\n \n-const struct suffix vsuf_2[] = {\n+static const struct suffix vsuf_2[] = {\n   { \"ul\", 1, 1 }, { \"UL\", 1, 1 }, { \"uL\", 1, 1 }, { \"Ul\", 1, 1 },\n   { \"lu\", 1, 1 }, { \"LU\", 1, 1 }, { \"Lu\", 1, 1 }, { \"lU\", 1, 1 },\n   { \"ll\", 0, 2 }, { \"LL\", 0, 2 }\n };\n \n-const struct suffix vsuf_3[] = {\n+static const struct suffix vsuf_3[] = {\n   { \"ull\", 1, 2 }, { \"ULL\", 1, 2 }, { \"uLL\", 1, 2 }, { \"Ull\", 1, 2 },\n   { \"llu\", 1, 2 }, { \"LLU\", 1, 2 }, { \"LLu\", 1, 2 }, { \"llU\", 1, 2 }\n };"}, {"sha": "74288f3612d7015bebfc621cd84507f320403ef9", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1,3 +1,16 @@\n+Sun Oct  7 12:27:54 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bad.c (_ffebad_message_, ffebad_messages_): Const-ify.\n+\t* bld.c (ffebld_arity_op_): Likewise.\n+\t* bld.h (ffebld_arity_op_): Likewise.\n+\t* com.c (ffecom_init_0): Likewise.\n+\t* intdoc.c (_ffeintrin_name_, _ffeintrin_gen_, _ffeintrin_spec_,\n+\t_ffeintrin_imp_, names, gens, imps, specs, cc_pair,\n+\tcc_descriptions, cc_summaries): Likewise.\n+\t* intrin.c (_ffeintrin_name_, _ffeintrin_gen_, _ffeintrin_spec_,\n+\t_ffeintrin_imp_, ffeintrin_names_, ffeintrin_gens_,\n+\tffeintrin_imps_, ffeintrin_specs_): Likewise.\n+\n 2001-10-05  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* news.texi: Document libf2c being built as a shared library."}, {"sha": "aa0ae6a0b849ec0e91487cadfb7612780c2ec1dc", "filename": "gcc/f/bad.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -61,13 +61,13 @@ bool ffebad_is_inhibited_ = FALSE;\n \n struct _ffebad_message_\n   {\n-    ffebadSeverity severity;\n-    const char *message;\n+    const ffebadSeverity severity;\n+    const char *const message;\n   };\n \n /* Static objects accessed by functions in this module.\t */\n \n-static struct _ffebad_message_ ffebad_messages_[]\n+static const struct _ffebad_message_ ffebad_messages_[]\n =\n {\n #define FFEBAD_MSGS1(KWD,SEV,MSG) { SEV, MSG },"}, {"sha": "6d2247f30e710a518dc1e0fb7ac6053ddcc7e0f1", "filename": "gcc/f/bld.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fbld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fbld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -46,7 +46,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Externals defined here.  */\n \n-ffebldArity ffebld_arity_op_[]\n+const ffebldArity ffebld_arity_op_[]\n =\n {\n #define FFEBLD_OP(KWD,NAME,ARITY) ARITY,"}, {"sha": "bee0480849ebe22b201e281d69cbfb91dba2ed84", "filename": "gcc/f/bld.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fbld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fbld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -480,7 +480,7 @@ struct _ffebld_pool_stack_\n \n /* Global objects accessed by users of this module. */\n \n-extern ffebldArity ffebld_arity_op_[];\n+extern const ffebldArity ffebld_arity_op_[];\n extern struct _ffebld_pool_stack_ ffebld_pool_stack_;\n \n /* Declare functions with prototypes. */"}, {"sha": "c086c489e1ab3a2d8cb2db1764b19ec9235cd72e", "filename": "gcc/f/com.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -11386,16 +11386,16 @@ ffecom_init_0 ()\n \n   if (ffe_is_do_internal_checks ())\n     {\n-      static char names[][12]\n+      static const char names[][12]\n \t=\n       {\"bar\", \"bletch\", \"foo\", \"foobar\"};\n-      char *name;\n+      const char *name;\n       unsigned long ul;\n       double fl;\n \n       name = bsearch (\"foo\", &names[0], ARRAY_SIZE (names), sizeof (names[0]),\n \t\t      (int (*)(const void *, const void *)) strcmp);\n-      if (name != (char *) &names[2])\n+      if (name != &names[0][2])\n \t{\n \t  assert (\"bsearch doesn't work, #define FFEPROJ_BSEARCH 0 in proj.h\"\n \t\t  == NULL);"}, {"sha": "4ce776b004ad74d72ad95abe01a128679e529352", "filename": "gcc/f/intdoc.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fintdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fintdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -70,39 +70,39 @@ Usage: intdoc > intdoc.texi\\n\\\n \n struct _ffeintrin_name_\n   {\n-    const char *name_uc;\n-    const char *name_lc;\n-    const char *name_ic;\n-    ffeintrinGen generic;\n-    ffeintrinSpec specific;\n+    const char *const name_uc;\n+    const char *const name_lc;\n+    const char *const name_ic;\n+    const ffeintrinGen generic;\n+    const ffeintrinSpec specific;\n   };\n \n struct _ffeintrin_gen_\n   {\n-    const char *name;\t\t/* Name as seen in program. */\n-    ffeintrinSpec specs[2];\n+    const char *const name;\t\t/* Name as seen in program. */\n+    const ffeintrinSpec specs[2];\n   };\n \n struct _ffeintrin_spec_\n   {\n-    const char *name;\t\t/* Uppercase name as seen in source code,\n+    const char *const name;\t/* Uppercase name as seen in source code,\n \t\t\t\t   lowercase if no source name, \"none\" if no\n \t\t\t\t   name at all (NONE case). */\n-    bool is_actualarg;\t\t/* Ok to pass as actual arg if -pedantic. */\n-    ffeintrinFamily family;\n-    ffeintrinImp implementation;\n+    const bool is_actualarg;\t/* Ok to pass as actual arg if -pedantic. */\n+    const ffeintrinFamily family;\n+    const ffeintrinImp implementation;\n   };\n \n struct _ffeintrin_imp_\n   {\n-    const char *name;\t\t\t/* Name of implementation. */\n+    const char *const name;\t\t/* Name of implementation. */\n #if 0\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n-    ffecomGfrt gfrt;\t\t/* gfrt index in library. */\n+    const ffecomGfrt gfrt;\t\t/* gfrt index in library. */\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n-    const char *control;\n+    const char *const control;\n   };\n \n-static struct _ffeintrin_name_ names[] = {\n+static const struct _ffeintrin_name_ names[] = {\n #define DEFNAME(UPPER,LOWER,MIXED,GEN,SPEC) \\\n   { UPPER, LOWER, MIXED, FFEINTRIN_ ## GEN, FFEINTRIN_ ## SPEC },\n #define DEFGEN(CODE,NAME,SPEC1,SPEC2)\n@@ -117,7 +117,7 @@ static struct _ffeintrin_name_ names[] = {\n #undef DEFIMPY\n };\n \n-static struct _ffeintrin_gen_ gens[] = {\n+static const struct _ffeintrin_gen_ gens[] = {\n #define DEFNAME(UPPER,LOWER,MIXED,GEN,SPEC)\n #define DEFGEN(CODE,NAME,SPEC1,SPEC2) \\\n   { NAME, { SPEC1, SPEC2, }, },\n@@ -132,7 +132,7 @@ static struct _ffeintrin_gen_ gens[] = {\n #undef DEFIMPY\n };\n \n-static struct _ffeintrin_imp_ imps[] = {\n+static const struct _ffeintrin_imp_ imps[] = {\n #define DEFNAME(UPPER,LOWER,MIXED,GEN,SPEC)\n #define DEFGEN(CODE,NAME,SPEC1,SPEC2)\n #define DEFSPEC(CODE,NAME,CALLABLE,FAMILY,IMP)\n@@ -157,7 +157,7 @@ static struct _ffeintrin_imp_ imps[] = {\n #undef DEFIMPY\n };\n \n-static struct _ffeintrin_spec_ specs[] = {\n+static const struct _ffeintrin_spec_ specs[] = {\n #define DEFNAME(UPPER,LOWER,MIXED,GEN,SPEC)\n #define DEFGEN(CODE,NAME,SPEC1,SPEC2)\n #define DEFSPEC(CODE,NAME,CALLABLE,FAMILY,IMP) \\\n@@ -171,17 +171,17 @@ static struct _ffeintrin_spec_ specs[] = {\n #undef DEFIMPY\n };\n \n-struct cc_pair { ffeintrinImp imp; const char *text; };\n+struct cc_pair { const ffeintrinImp imp; const char *const text; };\n \n static const char *descriptions[FFEINTRIN_imp] = { 0 };\n-static struct cc_pair cc_descriptions[] = {\n+static const struct cc_pair cc_descriptions[] = {\n #define DEFDOC(IMP,SUMMARY,DESCRIPTION) { FFEINTRIN_imp ## IMP, DESCRIPTION },\n #include \"intdoc.h0\"\n #undef DEFDOC\n };\n \n static const char *summaries[FFEINTRIN_imp] = { 0 };\n-static struct cc_pair cc_summaries[] = {\n+static const struct cc_pair cc_summaries[] = {\n #define DEFDOC(IMP,SUMMARY,DESCRIPTION) { FFEINTRIN_imp ## IMP, SUMMARY },\n #include \"intdoc.h0\"\n #undef DEFDOC"}, {"sha": "add9902fc73d2077baf76afee4fe34e8ab3260a8", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -32,39 +32,39 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n struct _ffeintrin_name_\n   {\n-    const char *name_uc;\n-    const char *name_lc;\n-    const char *name_ic;\n-    ffeintrinGen generic;\n-    ffeintrinSpec specific;\n+    const char *const name_uc;\n+    const char *const name_lc;\n+    const char *const name_ic;\n+    const ffeintrinGen generic;\n+    const ffeintrinSpec specific;\n   };\n \n struct _ffeintrin_gen_\n   {\n-    const char *name;\t\t\t/* Name as seen in program. */\n-    ffeintrinSpec specs[2];\n+    const char *const name;\t\t\t/* Name as seen in program. */\n+    const ffeintrinSpec specs[2];\n   };\n \n struct _ffeintrin_spec_\n   {\n-    const char *name;\t\t/* Uppercase name as seen in source code,\n+    const char *const name;\t/* Uppercase name as seen in source code,\n \t\t\t\t   lowercase if no source name, \"none\" if no\n \t\t\t\t   name at all (NONE case). */\n-    bool is_actualarg;\t\t/* Ok to pass as actual arg if -pedantic. */\n-    ffeintrinFamily family;\n-    ffeintrinImp implementation;\n+    const bool is_actualarg;\t/* Ok to pass as actual arg if -pedantic. */\n+    const ffeintrinFamily family;\n+    const ffeintrinImp implementation;\n   };\n \n struct _ffeintrin_imp_\n   {\n-    const char *name;\t\t/* Name of implementation. */\n+    const char *const name;\t/* Name of implementation. */\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n-    ffecomGfrt gfrt_direct;\t/* library routine, direct-callable form. */\n-    ffecomGfrt gfrt_f2c;\t/* library routine, f2c-callable form. */\n-    ffecomGfrt gfrt_gnu;\t/* library routine, gnu-callable form. */\n+    const ffecomGfrt gfrt_direct;/* library routine, direct-callable form. */\n+    const ffecomGfrt gfrt_f2c;\t/* library routine, f2c-callable form. */\n+    const ffecomGfrt gfrt_gnu;\t/* library routine, gnu-callable form. */\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n-    const char *control;\n-    char y2kbad;\n+    const char *const control;\n+    const char y2kbad;\n   };\n \n static ffebad ffeintrin_check_ (ffeintrinImp imp, ffebldOp op,\n@@ -77,7 +77,7 @@ static ffebad ffeintrin_check_ (ffeintrinImp imp, ffebldOp op,\n static bool ffeintrin_check_any_ (ffebld arglist);\n static int ffeintrin_cmp_name_ (const void *name, const void *intrinsic);\n \n-static struct _ffeintrin_name_ ffeintrin_names_[]\n+static const struct _ffeintrin_name_ ffeintrin_names_[]\n =\n {\t\t\t\t/* Alpha order. */\n #define DEFNAME(UPPER,LOWER,MIXED,GEN,SPEC) \\\n@@ -94,7 +94,7 @@ static struct _ffeintrin_name_ ffeintrin_names_[]\n #undef DEFIMPY\n };\n \n-static struct _ffeintrin_gen_ ffeintrin_gens_[]\n+static const struct _ffeintrin_gen_ ffeintrin_gens_[]\n =\n {\n #define DEFNAME(UPPER,LOWER,MIXED,GEN,SPEC)\n@@ -111,7 +111,7 @@ static struct _ffeintrin_gen_ ffeintrin_gens_[]\n #undef DEFIMPY\n };\n \n-static struct _ffeintrin_imp_ ffeintrin_imps_[]\n+static const struct _ffeintrin_imp_ ffeintrin_imps_[]\n =\n {\n #define DEFNAME(UPPER,LOWER,MIXED,GEN,SPEC)\n@@ -140,7 +140,7 @@ static struct _ffeintrin_imp_ ffeintrin_imps_[]\n #undef DEFIMPY\n };\n \n-static struct _ffeintrin_spec_ ffeintrin_specs_[]\n+static const struct _ffeintrin_spec_ ffeintrin_specs_[]\n =\n {\n #define DEFNAME(UPPER,LOWER,MIXED,GEN,SPEC)"}, {"sha": "98b3e4919ee91cbd2f0125a977baed0472f8df6a", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -417,7 +417,7 @@ life_analysis (f, file, flags)\n {\n #ifdef ELIMINABLE_REGS\n   register int i;\n-  static struct {int from, to; } eliminables[] = ELIMINABLE_REGS;\n+  static const struct {const int from, to; } eliminables[] = ELIMINABLE_REGS;\n #endif\n \n   /* Record which registers will be eliminated.  We use this in"}, {"sha": "b740218ca2a2cb7f5e21e69c04b7df1787f7b08a", "filename": "gcc/gcc.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -122,7 +122,7 @@ extern int getrusage PARAMS ((int, struct rusage *));\n #endif /* DIR_UP */\n #endif /* VMS */\n \n-static char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n+static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -226,11 +226,11 @@ static const char *cross_compile = \"0\";\n    switch.  The only case we support now is simply appending or deleting a\n    string to or from the end of the first part of the configuration name.  */\n \n-struct modify_target\n+const struct modify_target\n {\n-  const char *sw;\n-  enum add_del {ADD, DELETE} add_del;\n-  const char *str;\n+  const char *const sw;\n+  const enum add_del {ADD, DELETE} add_del;\n+  const char *const str;\n }\n modify_target[] = MODIFY_TARGET_NAME;\n #endif\n@@ -857,21 +857,21 @@ static char **preprocessor_options;\n struct option_map\n {\n   /* The long option's name.  */\n-  const char *name;\n+  const char *const name;\n   /* The equivalent short option.  */\n-  const char *equivalent;\n+  const char *const equivalent;\n   /* Argument info.  A string of flag chars; NULL equals no options.\n      a => argument required.\n      o => argument optional.\n      j => join argument to equivalent, making one word.\n      * => require other text after NAME as an argument.  */\n-  const char *arg_info;\n+  const char *const arg_info;\n };\n \n /* This is the table of mappings.  Mappings are tried sequentially\n    for each option encountered; the first one that matches, wins.  */\n \n-struct option_map option_map[] =\n+static const struct option_map option_map[] =\n  {\n    {\"--all-warnings\", \"-Wall\", 0},\n    {\"--ansi\", \"-ansi\", 0},\n@@ -954,9 +954,9 @@ struct option_map option_map[] =\n \f\n \n #ifdef TARGET_OPTION_TRANSLATE_TABLE\n-static struct {\n-  const char *option_found;\n-  const char *replacements;\n+static const struct {\n+  const char *const option_found;\n+  const char *const replacements;\n } target_option_translations[] =\n {\n   TARGET_OPTION_TRANSLATE_TABLE,\n@@ -1361,11 +1361,11 @@ static struct spec_list static_specs[] =\n    That is all that the EXTRA_SPECS macro gives us.  */\n struct spec_list_1\n {\n-  const char *name;\n-  const char *ptr;\n+  const char *const name;\n+  const char *const ptr;\n };\n \n-static struct spec_list_1 extra_specs_1[] = { EXTRA_SPECS };\n+static const struct spec_list_1 extra_specs_1[] = { EXTRA_SPECS };\n static struct spec_list *extra_specs = (struct spec_list *) 0;\n #endif\n \n@@ -1519,7 +1519,7 @@ init_spec ()\n #ifdef USE_AS_TRADITIONAL_FORMAT\n   /* Prepend \"--traditional-format\" to whatever asm_spec we had before.  */\n   {\n-    static char tf[] = \"--traditional-format \";\n+    static const char tf[] = \"--traditional-format \";\n     obstack_grow (&obstack, tf, sizeof(tf) - 1);\n     obstack_grow0 (&obstack, asm_spec, strlen (asm_spec));\n     asm_spec = obstack_finish (&obstack);"}, {"sha": "db51a8b6022463d7250e00ab60cf3516467e6259", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -79,7 +79,7 @@ typedef HOST_WIDEST_INT gcov_type;\n /* The functions in this file for creating and solution program flow graphs\n    are very similar to functions in the gcc source file profile.c.  */\n \n-char gcov_version_string[] = \"GNU gcov version 1.5\\n\";\n+static const char gcov_version_string[] = \"GNU gcov version 1.5\\n\";\n \n /* This is the size of the buffer used to read in source file lines.  */\n "}, {"sha": "be86ca68b144e38c1fad967704a2b7fc4837063b", "filename": "gcc/genattr.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -145,19 +145,19 @@ write_units (num_units, multiplicity, simultaneity,\n   printf (\"#define INSN_SCHEDULING\\n\\n\");\n   printf (\"extern int result_ready_cost PARAMS ((rtx));\\n\");\n   printf (\"extern int function_units_used PARAMS ((rtx));\\n\\n\");\n-  printf (\"extern struct function_unit_desc\\n\");\n+  printf (\"extern const struct function_unit_desc\\n\");\n   printf (\"{\\n\");\n-  printf (\"  const char *name;\\n\");\n-  printf (\"  int bitmask;\\n\");\n-  printf (\"  int multiplicity;\\n\");\n-  printf (\"  int simultaneity;\\n\");\n-  printf (\"  int default_cost;\\n\");\n-  printf (\"  int max_issue_delay;\\n\");\n-  printf (\"  int (*ready_cost_function) PARAMS ((rtx));\\n\");\n-  printf (\"  int (*conflict_cost_function) PARAMS ((rtx, rtx));\\n\");\n-  printf (\"  int max_blockage;\\n\");\n-  printf (\"  unsigned int (*blockage_range_function) PARAMS ((rtx));\\n\");\n-  printf (\"  int (*blockage_function) PARAMS ((rtx, rtx));\\n\");\n+  printf (\"  const char *const name;\\n\");\n+  printf (\"  const int bitmask;\\n\");\n+  printf (\"  const int multiplicity;\\n\");\n+  printf (\"  const int simultaneity;\\n\");\n+  printf (\"  const int default_cost;\\n\");\n+  printf (\"  const int max_issue_delay;\\n\");\n+  printf (\"  int (*const ready_cost_function) PARAMS ((rtx));\\n\");\n+  printf (\"  int (*const conflict_cost_function) PARAMS ((rtx, rtx));\\n\");\n+  printf (\"  const int max_blockage;\\n\");\n+  printf (\"  unsigned int (*const blockage_range_function) PARAMS ((rtx));\\n\");\n+  printf (\"  int (*const blockage_function) PARAMS ((rtx, rtx));\\n\");\n   printf (\"} function_units[];\\n\\n\");\n   printf (\"#define FUNCTION_UNITS_SIZE %d\\n\", num_units);\n   printf (\"#define MIN_MULTIPLICITY %d\\n\", multiplicity->min);"}, {"sha": "276d515a2c6836b9d748dbc92f9d61478a1caf02", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -2448,8 +2448,8 @@ make_length_attrs ()\n   static const char *const new_names[] = {\"*insn_default_length\",\n \t\t\t\t      \"*insn_variable_length_p\",\n \t\t\t\t      \"*insn_current_length\"};\n-  static rtx (*no_address_fn[]) PARAMS ((rtx)) = {identity_fn, zero_fn, zero_fn};\n-  static rtx (*address_fn[]) PARAMS ((rtx)) = {max_fn, one_fn, identity_fn};\n+  static rtx (*const no_address_fn[]) PARAMS ((rtx)) = {identity_fn, zero_fn, zero_fn};\n+  static rtx (*const address_fn[]) PARAMS ((rtx)) = {max_fn, one_fn, identity_fn};\n   size_t i;\n   struct attr_desc *length_attr, *new_attr;\n   struct attr_value *av, *new_av;\n@@ -5657,7 +5657,7 @@ write_function_unit_info ()\n      the function units.   The name is included for documentation purposes\n      only.  */\n \n-  printf (\"struct function_unit_desc function_units[] = {\\n\");\n+  printf (\"const struct function_unit_desc function_units[] = {\\n\");\n \n   /* Write out the descriptions in numeric order, but don't force that order\n      on the list.  Doing so increases the runtime of genattrtab.c.  */"}, {"sha": "eb3e32728cf2c7db3166e2635745835e9662efd1", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -95,12 +95,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n struct rtx_definition \n {\n-  const char *enumname, *name, *format;\n+  const char *const enumname, *const name, *const format;\n };\n \n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS) { STRINGX(ENUM), NAME, FORMAT },\n \n-struct rtx_definition defs[] = \n+const struct rtx_definition defs[] = \n {  \n #include \"rtl.def\"\t\t/* rtl expressions are documented here */\n };"}, {"sha": "f4ba1f90a443b15f62ab22b2c450d1ec33238a37", "filename": "gcc/genpreds.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -34,9 +34,9 @@ static void\n output_predicate_decls ()\n {\n #ifdef PREDICATE_CODES\n-  static struct {\n-    const char *name;\n-    RTX_CODE codes[NUM_RTX_CODE];\n+  static const struct {\n+    const char *const name;\n+    const RTX_CODE codes[NUM_RTX_CODE];\n   } predicate[] = {\n     PREDICATE_CODES\n   };"}, {"sha": "08ef3b4ac8d77b835ece6b2ec48b2bd71e48a0d1", "filename": "gcc/genrecog.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -181,10 +181,10 @@ static int error_count;\n    of tree nodes.  Also, if a predicate can match only one code, we can\n    hardwire that code into the node testing the predicate.  */\n \n-static struct pred_table\n+static const struct pred_table\n {\n-  const char *name;\n-  RTX_CODE codes[NUM_RTX_CODE];\n+  const char *const name;\n+  const RTX_CODE codes[NUM_RTX_CODE];\n } preds[] = {\n   {\"general_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n \t\t       LABEL_REF, SUBREG, REG, MEM}},"}, {"sha": "f811f22b9c6998d8fb9c6dba2e7abce1237b66f6", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -326,7 +326,7 @@ global_alloc (file)\n {\n   int retval;\n #ifdef ELIMINABLE_REGS\n-  static struct {int from, to; } eliminables[] = ELIMINABLE_REGS;\n+  static const struct {const int from, to; } eliminables[] = ELIMINABLE_REGS;\n #endif\n   int need_fp\n     = (! flag_omit_frame_pointer"}, {"sha": "5fbc60eda549ce4fcc0e9297d090c9860dd18a66", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1,3 +1,10 @@\n+2001-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* jcf-io.c (format_uint): Const-ify.\n+\t* lang.c (java_tree_code_type, java_tree_code_length): Likewise.\n+\t* lex.c (java_get_line_col): Likewise.\n+\t* parse.y (build_incdec): Likewise.\n+\n 2001-10-03  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* parse.y (patch_assignment): Use lvalue's original TYPE when"}, {"sha": "ba56b1806cd1492803c077a14bcb8a06ab7c1f34", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -625,7 +625,7 @@ DEFUN(format_uint, (buffer, value, base),\n   /* Note this code does not pretend to be optimized. */\n   do {\n     int digit = value % base;\n-    static char digit_chars[] = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n+    static const char digit_chars[] = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n     *--buf_ptr = digit_chars[digit];\n     value /= base;\n   } while (value != 0);"}, {"sha": "7fa23a910f37133bd3c0f740f12555eca8204a62", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -67,7 +67,7 @@ static int process_option_with_no PARAMS ((char *,\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n \n-char java_tree_code_type[] = {\n+static const char java_tree_code_type[] = {\n   'x',\n #include \"java-tree.def\"\n };\n@@ -79,7 +79,7 @@ char java_tree_code_type[] = {\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n \n-int java_tree_code_length[] = {\n+static const int java_tree_code_length[] = {\n   0,\n #include \"java-tree.def\"\n };"}, {"sha": "c2c4634a8a228046549e0db5600c0b49bfa55793", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1751,7 +1751,7 @@ java_get_line_col (filename, line, col)\n       c = getc (fp);\n       if (c == EOF)\n \t{\n-\t  static char msg[] = \"<<file too short - unexpected EOF>>\";\n+\t  static const char msg[] = \"<<file too short - unexpected EOF>>\";\n \t  obstack_grow (&temporary_obstack, msg, sizeof(msg)-1);\n \t  goto have_line;\n \t}"}, {"sha": "2737579d53656df8e59d6af047532831d9faf9d0", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -14147,7 +14147,7 @@ build_incdec (op_token, op_location, op1, is_post_p)\n      tree op1;\n      int is_post_p;\n {\n-  static enum tree_code lookup [2][2] = \n+  static const enum tree_code lookup [2][2] = \n     {\n       { PREDECREMENT_EXPR, PREINCREMENT_EXPR, },\n       { POSTDECREMENT_EXPR, POSTINCREMENT_EXPR, },"}, {"sha": "62572b8c9d6e10f5e4f3d5ce48144136c7c47f8e", "filename": "gcc/lcm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -1016,7 +1016,7 @@ optimize_mode_switching (file)\n   int need_commit = 0;\n   sbitmap *kill;\n   struct edge_list *edge_list;\n-  static int num_modes[] = NUM_MODES_FOR_MODE_SWITCHING;\n+  static const int num_modes[] = NUM_MODES_FOR_MODE_SWITCHING;\n #define N_ENTITIES (sizeof num_modes / sizeof (int))\n   int entity_map[N_ENTITIES];\n   struct bb_info *bb_info[N_ENTITIES];"}, {"sha": "6bc017586c415558a3e041982bbbbf54dc910d21", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -2152,7 +2152,7 @@ find_free_reg (class, mode, qtyno, accept_call_clobbered, just_try_suggested,\n #endif\n     HARD_REG_SET used, first_used;\n #ifdef ELIMINABLE_REGS\n-  static struct {int from, to; } eliminables[] = ELIMINABLE_REGS;\n+  static const struct {const int from, to; } eliminables[] = ELIMINABLE_REGS;\n #endif\n \n   /* Validate our parameters.  */"}, {"sha": "2d2619f5f400512db1d0d0af49dbe75b0655bd54", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -45,11 +45,11 @@ typedef struct param_info\n {\n   /* The name used with the `--param <name>=<value>' switch to set this\n      value.  */\n-  const char *option;\n+  const char *const option;\n   /* The associated value.  */\n   int value;\n   /* A short description of the option.  */\n-   const char *help;\n+  const char *const help;\n } param_info;\n \n /* An array containing the compiler parameters and their current"}, {"sha": "4c32ac0a7c71ca7b8936df75cc2035477a540a18", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -69,10 +69,10 @@ static void counts_to_freqs\t\t PARAMS ((void));\n    Filled using information from predict.def.  */\n struct predictor_info\n {\n-  const char *name;\t/* Name used in the debugging dumps.  */\n-  int hitrate;\t\t/* Expected hitrate used by\n-\t\t\t   predict_insn_def call.  */\n-  int flags;\n+  const char *const name;\t/* Name used in the debugging dumps.  */\n+  const int hitrate;\t\t/* Expected hitrate used by\n+\t\t\t\t   predict_insn_def call.  */\n+  const int flags;\n };\n \n /* Use given predictor without Dempster-Shaffer theory if it matches\n@@ -84,7 +84,7 @@ struct predictor_info\n #define HITRATE(VAL) ((int)((VAL) * REG_BR_PROB_BASE + 50) / 100)\n \n #define DEF_PREDICTOR(ENUM, NAME, HITRATE, FLAGS) {NAME, HITRATE, FLAGS},\n-struct predictor_info predictor_info[] = {\n+static const struct predictor_info predictor_info[] = {\n #include \"predict.def\"\n \n   /* Upper bound on predictors.  */"}, {"sha": "33388cf477b80307fe39d5947abc182094e93ec5", "filename": "gcc/protoize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -167,8 +167,8 @@ static char * syscalls_absolute_filename;\n /* Type of the structure that holds information about macro unexpansions.  */\n \n struct unexpansion_struct {\n-  const char *expanded;\n-  const char *contracted;\n+  const char *const expanded;\n+  const char *const contracted;\n };\n typedef struct unexpansion_struct unexpansion;\n "}, {"sha": "66ba3f08f172b111ab9dd0adf137f5400a4ac244", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -5536,7 +5536,7 @@ asctoeg (ss, y, oprec)\n /* Return Y = largest integer not greater than X (truncated toward minus\n    infinity).  */\n \n-static UEMUSHORT bmask[] =\n+static const UEMUSHORT bmask[] =\n {\n   0xffff,\n   0xfffe,"}, {"sha": "ff96e47a94481c3b3a309fcd92d47ec37533af18", "filename": "gcc/recog.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -215,15 +215,15 @@ typedef rtx (*insn_gen_fn) PARAMS ((rtx, ...));\n \n struct insn_operand_data\n {\n-  insn_operand_predicate_fn predicate;\n+  const insn_operand_predicate_fn predicate;\n \n-  const char *constraint;\n+  const char *const constraint;\n \n-  ENUM_BITFIELD(machine_mode) mode : 16;\n+  const ENUM_BITFIELD(machine_mode) mode : 16;\n \n-  char strict_low;\n+  const char strict_low;\n \n-  char eliminable;\n+  const char eliminable;\n };\n \n /* Legal values for insn_data.output_format.  Indicate what type of data\n@@ -235,15 +235,15 @@ struct insn_operand_data\n \n struct insn_data\n {\n-  const char *name;\n+  const char *const name;\n   const PTR output;\n-  insn_gen_fn genfun;\n-  const struct insn_operand_data *operand;\n+  const insn_gen_fn genfun;\n+  const struct insn_operand_data *const operand;\n \n-  char n_operands;\n-  char n_dups;\n-  char n_alternatives;\n-  char output_format;\n+  const char n_operands;\n+  const char n_dups;\n+  const char n_alternatives;\n+  const char output_format;\n };\n \n extern const struct insn_data insn_data[];"}, {"sha": "61119f3bf7beba2ac1999b6f222221de21f9a90f", "filename": "gcc/regclass.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -74,7 +74,7 @@ HARD_REG_SET fixed_reg_set;\n \n /* Data for initializing the above.  */\n \n-static char initial_fixed_regs[] = FIXED_REGISTERS;\n+static const char initial_fixed_regs[] = FIXED_REGISTERS;\n \n /* Indexed by hard register number, contains 1 for registers\n    that are fixed use or are clobbered by function calls.\n@@ -93,7 +93,7 @@ HARD_REG_SET losing_caller_save_reg_set;\n \n /* Data for initializing the above.  */\n \n-static char initial_call_used_regs[] = CALL_USED_REGISTERS;\n+static const char initial_call_used_regs[] = CALL_USED_REGISTERS;\n \n /* This is much like call_used_regs, except it doesn't have to\n    be a superset of FIXED_REGISTERS. This vector indicates"}, {"sha": "ddfbf24e0d7da441d7bbcafc35a9e3ace0bb1182", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -3478,7 +3478,7 @@ expand_nl_goto_receiver ()\n \t that if such an elimination is present, it can always be used.\n \t This is the case on all known machines; if we don't make this\n \t assumption, we do unnecessary saving on many machines.  */\n-      static struct elims {int from, to;} elim_regs[] = ELIMINABLE_REGS;\n+      static const struct elims {const int from, to;} elim_regs[] = ELIMINABLE_REGS;\n       size_t i;\n \n       for (i = 0; i < ARRAY_SIZE (elim_regs); i++)"}, {"sha": "373c6f9995c4621e76086c1bc11a81dba61f05bd", "filename": "gcc/toplev.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -923,14 +923,14 @@ int align_functions;\n int align_functions_log;\n \n /* Table of supported debugging formats.  */\n-static struct\n+static const struct\n {\n-  const char *arg;\n+  const char *const arg;\n   /* Since PREFERRED_DEBUGGING_TYPE isn't necessarily a\n      constant expression, we use NO_DEBUG in its place.  */\n-  enum debug_info_type debug_type;\n-  int use_extensions_p;\n-  const char *description;\n+  const enum debug_info_type debug_type;\n+  const int use_extensions_p;\n+  const char *const description;\n } *da,\n debug_args[] =\n {\n@@ -1192,10 +1192,10 @@ lang_independent_options f_options[] =\n \n /* Table of language-specific options.  */\n \n-static struct lang_opt\n+static const struct lang_opt\n {\n-  const char *option;\n-  const char *description;\n+  const char *const option;\n+  const char *const description;\n }\n documented_lang_options[] =\n {\n@@ -1378,22 +1378,22 @@ documented_lang_options[] =\n    If VALUE is negative, -VALUE is bits to clear.\n    (The sign bit is not used so there is no confusion.)  */\n \n-struct\n+static const struct\n {\n-  const char *name;\n-  int value;\n-  const char *description;\n+  const char *const name;\n+  const int value;\n+  const char *const description;\n }\n target_switches [] = TARGET_SWITCHES;\n \n /* This table is similar, but allows the switch to have a value.  */\n \n #ifdef TARGET_OPTIONS\n-struct\n+static const struct\n {\n-  const char *prefix;\n-  const char **variable;\n-  const char *description;\n+  const char *const prefix;\n+  const char **const variable;\n+  const char *const description;\n }\n target_options [] = TARGET_OPTIONS;\n #endif"}, {"sha": "e59fd1e5b7c530d01f865264ed4babad39e2ff2e", "filename": "gcc/tradcif.y", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ftradcif.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ftradcif.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcif.y?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -285,15 +285,15 @@ parse_number (olen)\n }\n \n struct token {\n-  const char *operator;\n-  int token;\n+  const char *const operator;\n+  const int token;\n };\n \n #ifndef NULL\n #define NULL 0\n #endif\n \n-static struct token tokentab2[] = {\n+static const struct token tokentab2[] = {\n   {\"&&\", AND},\n   {\"||\", OR},\n   {\"<<\", LSH},\n@@ -313,7 +313,7 @@ yylex ()\n   register int c;\n   register int namelen;\n   register const char *tokstart;\n-  register struct token *toktab;\n+  register const struct token *toktab;\n \n  retry:\n "}, {"sha": "56ed9aba6179272138a9e5920273508c804addb0", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b60264b0d7878d24c17067464cafc1d5c9ab33e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8b60264b0d7878d24c17067464cafc1d5c9ab33e", "patch": "@@ -2099,28 +2099,28 @@ struct attribute_spec\n {\n   /* The name of the attribute (without any leading or trailing __),\n      or NULL to mark the end of a table of attributes.  */\n-  const char *name;\n+  const char *const name;\n   /* The minimum length of the list of arguments of the attribute.  */\n-  int min_length;\n+  const int min_length;\n   /* The maximum length of the list of arguments of the attribute\n      (-1 for no maximum).  */\n-  int max_length;\n+  const int max_length;\n   /* Whether this attribute requires a DECL.  If it does, it will be passed\n      from types of DECLs, function return types and array element types to\n      the DECLs, function types and array types respectively; but when\n      applied to a type in any other circumstances, it will be ignored with\n      a warning.  (If greater control is desired for a given attribute,\n      this should be false, and the flags argument to the handler may be\n      used to gain greater control in that case.)  */\n-  bool decl_required;\n+  const bool decl_required;\n   /* Whether this attribute requires a type.  If it does, it will be passed\n      from a DECL to the type of that DECL.  */\n-  bool type_required;\n+  const bool type_required;\n   /* Whether this attribute requires a function (or method) type.  If it does,\n      it will be passed from a function pointer type to the target type,\n      and from a function return type (which is not itself a function\n      pointer type) to the function type.  */\n-  bool function_type_required;\n+  const bool function_type_required;\n   /* Function to handle this attribute.  NODE points to the node to which\n      the attribute is to be applied.  If a DECL, it should be modified in\n      place; if a TYPE, a copy should be created.  NAME is the name of the\n@@ -2135,8 +2135,8 @@ struct attribute_spec\n      otherwise the return value should be NULL_TREE.  This pointer may be\n      NULL if no special handling is required beyond the checks implied\n      by the rest of this structure.  */\n-  tree (*handler) PARAMS ((tree *node, tree name, tree args,\n-\t\t\t   int flags, bool *no_add_attrs));\n+  tree (*const handler) PARAMS ((tree *node, tree name, tree args,\n+\t\t\t\t int flags, bool *no_add_attrs));\n };\n \n extern const struct attribute_spec default_target_attribute_table[];"}]}