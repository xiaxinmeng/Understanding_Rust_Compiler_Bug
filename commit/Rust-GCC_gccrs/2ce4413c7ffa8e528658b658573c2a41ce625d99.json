{"sha": "2ce4413c7ffa8e528658b658573c2a41ce625d99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNlNDQxM2M3ZmZhOGU1Mjg2NThiNjU4NTczYzJhNDFjZTYyNWQ5OQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-10-31T08:08:28Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-10-31T08:08:28Z"}, "message": "Improve readability and structure of create_function_info_for\n\n2015-10-31  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-ssa-structalias.c (create_function_info_for): Make sure prev_vi\n\tupdating is alap, and seperated from preceding code.  Make sure\n\tinsert_vi_for_tree is seperated from surrounding code.\n\nFrom-SVN: r229618", "tree": {"sha": "1a57ffb7b4260af4aa9fb6fed0f37ca80de3486d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a57ffb7b4260af4aa9fb6fed0f37ca80de3486d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ce4413c7ffa8e528658b658573c2a41ce625d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce4413c7ffa8e528658b658573c2a41ce625d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce4413c7ffa8e528658b658573c2a41ce625d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce4413c7ffa8e528658b658573c2a41ce625d99/comments", "author": null, "committer": null, "parents": [{"sha": "a543155b20f2a6efe7645c6c968d3ddf07d38faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a543155b20f2a6efe7645c6c968d3ddf07d38faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a543155b20f2a6efe7645c6c968d3ddf07d38faf"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "bf96f97c9decce1fbad21947258ec68aeca78813", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce4413c7ffa8e528658b658573c2a41ce625d99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce4413c7ffa8e528658b658573c2a41ce625d99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ce4413c7ffa8e528658b658573c2a41ce625d99", "patch": "@@ -1,3 +1,9 @@\n+2015-10-31  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-ssa-structalias.c (create_function_info_for): Make sure prev_vi\n+\tupdating is alap, and seperated from preceding code.  Make sure\n+\tinsert_vi_for_tree is seperated from surrounding code.\n+\n 2015-10-31  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-structalias.c (ipa_pta_execute): Use make_copy_constraint."}, {"sha": "a67e7f3e5e9a25334fae292ae6eef8dc561ff97a", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce4413c7ffa8e528658b658573c2a41ce625d99/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce4413c7ffa8e528658b658573c2a41ce625d99/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=2ce4413c7ffa8e528658b658573c2a41ce625d99", "patch": "@@ -5452,6 +5452,7 @@ create_function_info_for (tree decl, const char *name, bool add_id)\n       clobbervi->fullsize = vi->fullsize;\n       clobbervi->is_full_var = true;\n       clobbervi->is_global_var = false;\n+\n       gcc_assert (prev_vi->offset < clobbervi->offset);\n       prev_vi->next = clobbervi->id;\n       prev_vi = clobbervi;\n@@ -5466,6 +5467,7 @@ create_function_info_for (tree decl, const char *name, bool add_id)\n       usevi->fullsize = vi->fullsize;\n       usevi->is_full_var = true;\n       usevi->is_global_var = false;\n+\n       gcc_assert (prev_vi->offset < usevi->offset);\n       prev_vi->next = usevi->id;\n       prev_vi = usevi;\n@@ -5488,10 +5490,12 @@ create_function_info_for (tree decl, const char *name, bool add_id)\n       chainvi->fullsize = vi->fullsize;\n       chainvi->is_full_var = true;\n       chainvi->is_global_var = false;\n+\n+      insert_vi_for_tree (fn->static_chain_decl, chainvi);\n+\n       gcc_assert (prev_vi->offset < chainvi->offset);\n       prev_vi->next = chainvi->id;\n       prev_vi = chainvi;\n-      insert_vi_for_tree (fn->static_chain_decl, chainvi);\n     }\n \n   /* Create a variable for the return var.  */\n@@ -5517,11 +5521,13 @@ create_function_info_for (tree decl, const char *name, bool add_id)\n       resultvi->is_full_var = true;\n       if (DECL_RESULT (decl))\n \tresultvi->may_have_pointers = true;\n+\n+      if (DECL_RESULT (decl))\n+\tinsert_vi_for_tree (DECL_RESULT (decl), resultvi);\n+\n       gcc_assert (prev_vi->offset < resultvi->offset);\n       prev_vi->next = resultvi->id;\n       prev_vi = resultvi;\n-      if (DECL_RESULT (decl))\n-\tinsert_vi_for_tree (DECL_RESULT (decl), resultvi);\n     }\n \n   /* Set up variables for each argument.  */\n@@ -5547,14 +5553,15 @@ create_function_info_for (tree decl, const char *name, bool add_id)\n       argvi->fullsize = vi->fullsize;\n       if (arg)\n \targvi->may_have_pointers = true;\n+\n+      if (arg)\n+\tinsert_vi_for_tree (arg, argvi);\n+\n       gcc_assert (prev_vi->offset < argvi->offset);\n       prev_vi->next = argvi->id;\n       prev_vi = argvi;\n       if (arg)\n-\t{\n-\t  insert_vi_for_tree (arg, argvi);\n-\t  arg = DECL_CHAIN (arg);\n-\t}\n+\targ = DECL_CHAIN (arg);\n     }\n \n   /* Add one representative for all further args.  */\n@@ -5578,6 +5585,7 @@ create_function_info_for (tree decl, const char *name, bool add_id)\n       argvi->is_full_var = true;\n       argvi->is_heap_var = true;\n       argvi->fullsize = vi->fullsize;\n+\n       gcc_assert (prev_vi->offset < argvi->offset);\n       prev_vi->next = argvi->id;\n       prev_vi = argvi;"}]}