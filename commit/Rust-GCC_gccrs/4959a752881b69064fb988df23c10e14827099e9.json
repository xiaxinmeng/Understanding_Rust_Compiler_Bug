{"sha": "4959a752881b69064fb988df23c10e14827099e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1OWE3NTI4ODFiNjkwNjRmYjk4OGRmMjNjMTBlMTQ4MjcwOTllOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:40:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:40:31Z"}, "message": "Add internal bitcount functions\n\nThis patch adds internal function equivalents of all the INT_FN functions.\nUnlike the math functions, these functions never set errno and the internal\nfunctions should be exactly equivalent to the built-in ones.  The reason\nfor defining the internal functions is so that we can extend the\nfunctionality to other modes, in particular vector modes.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* internal-fn.def (DEF_INTERNAL_INT_FN): New macro.\n\t(CLRSB, CLZ, CTZ, FFS, PARITY, POPCOUNT): New functions.\n\t* builtins.c (associated_internal_fn): Handle them.\n\nFrom-SVN: r230475", "tree": {"sha": "c711187e3ba837e0ef8dec2a8d2aafe764284d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c711187e3ba837e0ef8dec2a8d2aafe764284d24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4959a752881b69064fb988df23c10e14827099e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4959a752881b69064fb988df23c10e14827099e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4959a752881b69064fb988df23c10e14827099e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4959a752881b69064fb988df23c10e14827099e9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "686ee9719a4dc70619da0a69a4357007406c9fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686ee9719a4dc70619da0a69a4357007406c9fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686ee9719a4dc70619da0a69a4357007406c9fbd"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "4bdf15a985fb18ada4c566b9a8cf9c237097f438", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4959a752881b69064fb988df23c10e14827099e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4959a752881b69064fb988df23c10e14827099e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4959a752881b69064fb988df23c10e14827099e9", "patch": "@@ -1,3 +1,9 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* internal-fn.def (DEF_INTERNAL_INT_FN): New macro.\n+\t(CLRSB, CLZ, CTZ, FFS, PARITY, POPCOUNT): New functions.\n+\t* builtins.c (associated_internal_fn): Handle them.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.h (associated_internal_fn): Declare."}, {"sha": "303a5b023183fe18b5e7901140795da6aa108e89", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4959a752881b69064fb988df23c10e14827099e9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4959a752881b69064fb988df23c10e14827099e9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4959a752881b69064fb988df23c10e14827099e9", "patch": "@@ -1916,6 +1916,8 @@ associated_internal_fn (tree fndecl)\n     {\n #define DEF_INTERNAL_FLT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n     CASE_FLT_FN (BUILT_IN_##NAME): return IFN_##NAME;\n+#define DEF_INTERNAL_INT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n+    CASE_INT_FN (BUILT_IN_##NAME): return IFN_##NAME;\n #include \"internal-fn.def\"\n \n     CASE_FLT_FN (BUILT_IN_POW10):"}, {"sha": "bf8047ae78410a848b8c85f40c75cc59854c7370", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4959a752881b69064fb988df23c10e14827099e9/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4959a752881b69064fb988df23c10e14827099e9/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=4959a752881b69064fb988df23c10e14827099e9", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n      DEF_INTERNAL_FN (NAME, FLAGS, FNSPEC)\n      DEF_INTERNAL_OPTAB_FN (NAME, FLAGS, OPTAB, TYPE)\n      DEF_INTERNAL_FLT_FN (NAME, FLAGS, OPTAB, TYPE)\n+     DEF_INTERNAL_INT_FN (NAME, FLAGS, OPTAB, TYPE)\n \n    where NAME is the name of the function, FLAGS is a set of\n    ECF_* flags and FNSPEC is a string describing functions fnspec.\n@@ -53,6 +54,10 @@ along with GCC; see the file COPYING3.  If not see\n    function BUILT_IN_<NAME>{F,,L}.  Unlike some built-in functions,\n    these internal functions never set errno.\n \n+   DEF_INTERNAL_INT_FN is like DEF_INTERNAL_OPTAB_FN, but in addition\n+   says that the function extends the C-level BUILT_IN_<NAME>{,L,LL,IMAX}\n+   group of functions to any integral mode (including vector modes).\n+\n    Each entry must have a corresponding expander of the form:\n \n      void expand_NAME (gimple_call stmt)\n@@ -75,6 +80,11 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_INTERNAL_OPTAB_FN (NAME, FLAGS, OPTAB, TYPE)\n #endif\n \n+#ifndef DEF_INTERNAL_INT_FN\n+#define DEF_INTERNAL_INT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n+  DEF_INTERNAL_OPTAB_FN (NAME, FLAGS, OPTAB, TYPE)\n+#endif\n+\n DEF_INTERNAL_OPTAB_FN (MASK_LOAD, ECF_PURE, maskload, mask_load)\n DEF_INTERNAL_OPTAB_FN (LOAD_LANES, ECF_CONST, vec_load_lanes, load_lanes)\n \n@@ -119,6 +129,14 @@ DEF_INTERNAL_FLT_FN (SCALB, ECF_CONST, scalb, binary)\n /* FP scales.  */\n DEF_INTERNAL_FLT_FN (LDEXP, ECF_CONST, ldexp, binary)\n \n+/* Unary integer ops.  */\n+DEF_INTERNAL_INT_FN (CLRSB, ECF_CONST, clrsb, unary)\n+DEF_INTERNAL_INT_FN (CLZ, ECF_CONST, clz, unary)\n+DEF_INTERNAL_INT_FN (CTZ, ECF_CONST, ctz, unary)\n+DEF_INTERNAL_INT_FN (FFS, ECF_CONST, ffs, unary)\n+DEF_INTERNAL_INT_FN (PARITY, ECF_CONST, parity, unary)\n+DEF_INTERNAL_INT_FN (POPCOUNT, ECF_CONST, popcount, unary)\n+\n DEF_INTERNAL_FN (GOMP_SIMD_LANE, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (GOMP_SIMD_VF, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (GOMP_SIMD_LAST_LANE, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n@@ -163,6 +181,7 @@ DEF_INTERNAL_FN (GOACC_LOOP, ECF_PURE | ECF_NOTHROW, NULL)\n /* OpenACC reduction abstraction.  See internal-fn.h  for usage.  */\n DEF_INTERNAL_FN (GOACC_REDUCTION, ECF_NOTHROW | ECF_LEAF, NULL)\n \n+#undef DEF_INTERNAL_INT_FN\n #undef DEF_INTERNAL_FLT_FN\n #undef DEF_INTERNAL_OPTAB_FN\n #undef DEF_INTERNAL_FN"}]}