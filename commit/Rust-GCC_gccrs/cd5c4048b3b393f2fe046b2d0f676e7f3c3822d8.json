{"sha": "cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q1YzQwNDhiM2IzOTNmMmZlMDQ2YjJkMGY2NzZlN2YzYzM4MjJkOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-08T01:59:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-08T01:59:35Z"}, "message": "fde-glibc.c (find_fde_for_dso): Do a binary search on the unwind region section.\n\n        * config/ia64/fde-glibc.c (find_fde_for_dso): Do a binary\n        search on the unwind region section.\n\n        * config/ia64/ia64.md (movbi): Add r/r alternative.\n        (cmovdi_internal_astep): Describe all combinations of register\n        classes for sources & destinations; remove matching constraints.\n        (cmovdi_internal): Likewise.\n\nFrom-SVN: r37309", "tree": {"sha": "1260928189111d54fdf5f55950d99b1538f4a33d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1260928189111d54fdf5f55950d99b1538f4a33d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8/comments", "author": null, "committer": null, "parents": [{"sha": "81b75d962939947e82ca1298c3258bc7c9726816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b75d962939947e82ca1298c3258bc7c9726816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b75d962939947e82ca1298c3258bc7c9726816"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "c9403c3e7cac7536eea913b5e791a36bebd2cef2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "patch": "@@ -1,5 +1,13 @@\n 2000-11-07  Richard Henderson  <rth@redhat.com>\n \n+\t* config/ia64/fde-glibc.c (find_fde_for_dso): Do a binary\n+\tsearch on the unwind region section.\n+\n+\t* config/ia64/ia64.md (movbi): Add r/r alternative.\n+\t(cmovdi_internal_astep): Describe all combinations of register\n+\tclasses for sources & destinations; remove matching constraints.\n+\t(cmovdi_internal): Likewise.\n+\n \t* gcc.c (default_compilers) [@cpp-output]: Add -fpreprocessed.\n \n 2000-11-07  Richard Henderson  <rth@redhat.com>"}, {"sha": "8000be2f0a58bba62e3cbd0f5ca8f90ad2e9d5cb", "filename": "gcc/config/ia64/fde-glibc.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8/gcc%2Fconfig%2Fia64%2Ffde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8/gcc%2Fconfig%2Fia64%2Ffde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ffde-glibc.c?ref=cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "patch": "@@ -54,7 +54,8 @@ find_fde_for_dso (Elf64_Addr pc, Elf64_Ehdr *ehdr)\n   Elf64_Phdr *phdr, *p_unwind;\n   long n, match;\n   Elf64_Addr load_base, seg_base;\n-  fde *f;\n+  fde *f_base;\n+  size_t lo, hi;\n \n   /* Verify that we are looking at an ELF header.  */\n   if (ehdr->e_ident[0] != 0x7f\n@@ -88,14 +89,24 @@ find_fde_for_dso (Elf64_Addr pc, Elf64_Ehdr *ehdr)\n     return NULL;\n \n   /* Search for the FDE within the unwind segment.  */\n-  /* ??? Ideally ld would have sorted this for us by address.  Until\n-     that's fixed, we must do a linear search.  */\n \n-  f = (fde *) (p_unwind->p_vaddr + load_base);\n+  f_base = (fde *) (p_unwind->p_vaddr + load_base);\n   seg_base = (Elf64_Addr) ehdr;\n-  for (n = p_unwind->p_memsz / sizeof (fde); --n >= 0; ++f)\n-    if (pc >= f->start_offset + seg_base && pc < f->end_offset + seg_base)\n-      return f;\n+  lo = 0;\n+  hi = p_unwind->p_memsz / sizeof (fde);\n+\n+  while (lo < hi)\n+    {\n+      size_t mid = (lo + hi) / 2;\n+      fde *f = f_base + mid;\n+\n+      if (pc < f->start_offset + seg_base)\n+\thi = mid;\n+      else if (pc >= f->end_offset + seg_base)\n+\tlo = mid + 1;\n+      else\n+        return f;\n+    }\n \n   return NULL;\n }"}, {"sha": "5adc6462ab078d01bf34aee5d0f4778d3523ea0d", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "patch": "@@ -175,8 +175,8 @@\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"movbi\"\n-  [(set (match_operand:BI 0 \"nonimmediate_operand\" \"=c,c,?c,?*r, c,*r,*r,*m\")\n-\t(match_operand:BI 1 \"move_operand\"         \" O,n, c,  c,*r, n,*m,*r\"))]\n+  [(set (match_operand:BI 0 \"nonimmediate_operand\" \"=c,c,?c,?*r, c,*r,*r,*m,*r\")\n+\t(match_operand:BI 1 \"move_operand\"         \" O,n, c,  c,*r, n,*m,*r,*r\"))]\n   \"\"\n   \"@\n    cmp.ne %0, %I0 = r0, r0\n@@ -186,8 +186,9 @@\n    tbit.nz %0, %I0 = %1, 0\n    adds %0 = %1, r0\n    ld1%O1 %0 = %1%P1\n-   st1%Q0 %0 = %1%P0\"\n-  [(set_attr \"type\" \"A,A,unknown,unknown,I,A,M,M\")])\n+   st1%Q0 %0 = %1%P0\n+   mov %0 = %1\"\n+  [(set_attr \"type\" \"A,A,unknown,unknown,I,A,M,M,A\")])\n \n (define_split\n   [(set (match_operand:BI 0 \"register_operand\" \"\")\n@@ -4556,16 +4557,16 @@\n ;; Errata 72 workaround.\n (define_insn \"*cmovdi_internal_astep\"\n   [(set (match_operand:DI 0 \"register_operand\"\n-\t\t\"=r,*f,*b,r,*f,*b,r,*f,*b\")\n+\t\t\"=r, r, r,   r, r, r,   r, r, r,   r,*f,*b,*d*e\")\n \t(if_then_else:DI\n \t  (match_operator 4 \"predicate_operator\"\n \t    [(match_operand:BI 1 \"register_operand\"\n-\t\t\t       \"c,c,c,c,c,c,c,c,c\")\n+\t\t\" c, c, c,   c, c, c,   c, c, c,   c, c, c,   c\")\n \t     (const_int 0)])\n \t  (match_operand:DI 2 \"move_operand\"\n-\t\t\"0,0,0,ri*f*b,rO,r,ri*f*b,rO,r\")\n+\t\t\"ri,*f,*b,*d*e,ri,ri,  ri,*f,*b,*d*e,rO,rO,  rK\")\n \t  (match_operand:DI 3 \"move_operand\"\n-\t\t\"ri*f*b,rO,r,0,0,0,ri*f*b,rO,r\")))]\n+\t\t\"ri,ri,ri,  ri,*f,*b,*d*e,*f,*b,*d*e,rO,rO,  rK\")))]\n   \"TARGET_A_STEP\n    && ia64_move_ok (operands[0], operands[2])\n    && ia64_move_ok (operands[0], operands[3])\"\n@@ -4574,16 +4575,16 @@\n \n (define_insn \"*cmovdi_internal\"\n   [(set (match_operand:DI 0 \"destination_operand\"\n-\t\t\"=r,m,*f,Q,*b,*d*e,r,m,*f,Q,*b,*d*e,r,m,*f,Q,*b,*d*e\")\n+\t   \"= r,  r,  r,   r,  r,  r,   r, r, r,   r, m, Q, *f,*b,*d*e\")\n \t(if_then_else:DI\n \t  (match_operator 4 \"predicate_operator\"\n \t    [(match_operand:BI 1 \"register_operand\"\n-\t\t\t       \"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c\")\n+\t\t\"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c\")\n \t     (const_int 0)])\n \t  (match_operand:DI 2 \"move_operand\"\n-\t\t\"0,0,0,0,0,0,rim*f*b*d*e,rO,rOQ,*f,rO,rK,rim*f*b*d*e,rO,rOQ,*f,rO,rK\")\n+\t   \"rim, *f, *b,*d*e,rim,rim, rim,*f,*b,*d*e,rO,*f,rOQ,rO,  rK\")\n \t  (match_operand:DI 3 \"move_operand\"\n-\t\t\"rim*f*b*d*e,rO,rOQ,*f,rO,rK,0,0,0,0,0,0,rim*f*b*d*e,rO,rOQ,*f,rO,rK\")))]\n+\t   \"rim,rim,rim, rim, *f, *b,*d*e,*f,*b,*d*e,rO,*f,rOQ,rO,  rK\")))]\n   \"! TARGET_A_STEP\n    && ia64_move_ok (operands[0], operands[2])\n    && ia64_move_ok (operands[0], operands[3])\""}]}