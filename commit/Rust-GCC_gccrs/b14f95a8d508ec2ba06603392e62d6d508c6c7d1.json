{"sha": "b14f95a8d508ec2ba06603392e62d6d508c6c7d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE0Zjk1YThkNTA4ZWMyYmEwNjYwMzM5MmU2MmQ2ZDUwOGM2YzdkMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2008-03-29T22:38:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-03-29T22:38:19Z"}, "message": "re PR libstdc++/35725 (ambiguous std::fill with character array)\n\n2008-03-29  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/35725\n\t* include/bits/stl_algobase.h (__fill_a(_ForwardIterator,\n\t_ForwardIterator, _Tp), __fill_a(_Tp*, _Tp*, _Tp),\n\t__fill_n_a(_OutputIterator, _Size, _Tp), __fill_n_a(_Tp*, _Size,\n\t_Tp)): Fix signatures.\n\t* testsuite/25_algorithms/fill/35725.cc: New.\n\t* testsuite/25_algorithms/fill_n/35725.cc: Likewise.\n\nFrom-SVN: r133721", "tree": {"sha": "437c96e20c1f18a30c72894d13d937e1036ef4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/437c96e20c1f18a30c72894d13d937e1036ef4b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b14f95a8d508ec2ba06603392e62d6d508c6c7d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14f95a8d508ec2ba06603392e62d6d508c6c7d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14f95a8d508ec2ba06603392e62d6d508c6c7d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/comments", "author": null, "committer": null, "parents": [{"sha": "3ac0963aeba998c0fce17b9740f7095d6f66c193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac0963aeba998c0fce17b9740f7095d6f66c193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac0963aeba998c0fce17b9740f7095d6f66c193"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "f59007405603ba1e4756be98d2f26b6f9050b7c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b14f95a8d508ec2ba06603392e62d6d508c6c7d1", "patch": "@@ -1,3 +1,13 @@\n+2008-03-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/35725\n+\t* include/bits/stl_algobase.h (__fill_a(_ForwardIterator,\n+\t_ForwardIterator, _Tp), __fill_a(_Tp*, _Tp*, _Tp),\n+\t__fill_n_a(_OutputIterator, _Size, _Tp), __fill_n_a(_Tp*, _Size,\n+\t_Tp)): Fix signatures.\n+\t* testsuite/25_algorithms/fill/35725.cc: New.\n+\t* testsuite/25_algorithms/fill_n/35725.cc: Likewise.\n+\n 2008-03-29  Matthias Klose  <doko@ubuntu.com>\n \n \t* config/abi/post/s390-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "9c64ef1be48c110b919d4af1c1b947dfc92d3515", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=b14f95a8d508ec2ba06603392e62d6d508c6c7d1", "patch": "@@ -1,6 +1,6 @@\n // Core algorithmic facilities -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -689,19 +689,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _ForwardIterator, typename _Tp>\n     inline typename\n     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type\n-    __fill_a(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)\n+    __fill_a(_ForwardIterator __first, _ForwardIterator __last,\n+\t     const _Tp& __value)\n     {\n+      const _Tp __tmp = __value;\n       for (; __first != __last; ++__first)\n-\t*__first = __value;\n+\t*__first = __tmp;\n     }\n \n   // Specialization: for char types we can use memset.\n   template<typename _Tp>\n     inline typename\n     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type\n-    __fill_a(_Tp* __first, _Tp* __last, _Tp __c)\n-    { __builtin_memset(__first, static_cast<unsigned char>(__c),\n-\t\t       __last - __first); }\n+    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)\n+    {\n+      const _Tp __tmp = __c;\n+      __builtin_memset(__first, static_cast<unsigned char>(__tmp),\n+\t\t       __last - __first);\n+    }\n \n   /**\n    *  @brief Fills the range [first,last) with copies of value.\n@@ -740,17 +745,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _OutputIterator, typename _Size, typename _Tp>\n     inline typename\n     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type\n-    __fill_n_a(_OutputIterator __first, _Size __n, _Tp __value)\n+    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)\n     {\n+      const _Tp __tmp = __value;\n       for (; __n > 0; --__n, ++__first)\n-\t*__first = __value;\n+\t*__first = __tmp;\n       return __first;\n     }\n \n   template<typename _Size, typename _Tp>\n     inline typename\n     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type\n-    __fill_n_a(_Tp* __first, _Size __n, _Tp __c)\n+    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)\n     {\n       std::__fill_a(__first, __first + __n, __c);\n       return __first + __n;"}, {"sha": "0c5b0e46cb4a2752229c2db5d97e1f39e46376dc", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/35725.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F35725.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F35725.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F35725.cc?ref=b14f95a8d508ec2ba06603392e62d6d508c6c7d1", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+#include <vector>\n+#include <algorithm>\n+\n+// libstdc++/35725\n+void test01()\n+{\n+  std::vector<std::string> foo(20);  \n+  std::fill(foo.begin(), foo.end(), \"bar\");\n+}"}, {"sha": "a914d1cd4eba64c612e58eb7fb1085ff7a95fcb8", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/35725.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F35725.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14f95a8d508ec2ba06603392e62d6d508c6c7d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F35725.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F35725.cc?ref=b14f95a8d508ec2ba06603392e62d6d508c6c7d1", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+#include <vector>\n+#include <algorithm>\n+\n+// libstdc++/35725\n+void test01()\n+{\n+  std::vector<std::string> foo(20);  \n+  std::fill_n(foo.begin(), 20, \"bar\");\n+}"}]}