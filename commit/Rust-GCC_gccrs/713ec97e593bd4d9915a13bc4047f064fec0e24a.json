{"sha": "713ec97e593bd4d9915a13bc4047f064fec0e24a", "node_id": "C_kwDOANBUbNoAKDcxM2VjOTdlNTkzYmQ0ZDk5MTVhMTNiYzQwNDdmMDY0ZmVjMGUyNGE", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-08-19T14:09:28Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-08-19T14:09:28Z"}, "message": "mkoffload: Cleanup temporary omp_requires_file\n\nThe file (suffix \".mkoffload.omp_requires\") used to save the 'omp requires'\ndata has to be passed to maybe_unlink for cleanup or -v -save-temps stderr\ndiagnostic. That was missed before. - For GCN, the same has to be done for\nthe files with suffix \".mkoffload.dbg.o\".\n\ngcc/ChangeLog:\n\n\t* config/gcn/mkoffload.cc (main): Add omp_requires_file and dbgobj to\n\tfiles_to_cleanup.\n\t* config/i386/intelmic-mkoffload.cc (prepare_target_image): Add\n\tomp_requires_file to temp_files.\n\t* config/nvptx/mkoffload.cc (omp_requires_file): New global static var.\n\t(main): Remove local omp_requires_file var.\n\t(tool_cleanup): Handle omp_requires_file.", "tree": {"sha": "d353f0f80504617372572a6d9fe929479f4db869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d353f0f80504617372572a6d9fe929479f4db869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/713ec97e593bd4d9915a13bc4047f064fec0e24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713ec97e593bd4d9915a13bc4047f064fec0e24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713ec97e593bd4d9915a13bc4047f064fec0e24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713ec97e593bd4d9915a13bc4047f064fec0e24a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338a296dd76bf3d253a990ddb65e1bbef0c680a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338a296dd76bf3d253a990ddb65e1bbef0c680a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338a296dd76bf3d253a990ddb65e1bbef0c680a7"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "4206448703adb4329cc4059501a1bb3185ef50c1", "filename": "gcc/config/gcn/mkoffload.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713ec97e593bd4d9915a13bc4047f064fec0e24a/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713ec97e593bd4d9915a13bc4047f064fec0e24a/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc?ref=713ec97e593bd4d9915a13bc4047f064fec0e24a", "patch": "@@ -1030,6 +1030,7 @@ main (int argc, char **argv)\n \t\t    }\n \t\t  else\n \t\t    dbgobj = make_temp_file (\".mkoffload.dbg.o\");\n+\t\t  obstack_ptr_grow (&files_to_cleanup, dbgobj);\n \n \t\t  /* If the copy fails then just ignore it.  */\n \t\t  if (copy_early_debug_info (argv[ix], dbgobj))\n@@ -1085,6 +1086,7 @@ main (int argc, char **argv)\n \tomp_requires_file = concat (dumppfx, \".mkoffload.omp_requires\", NULL);\n       else\n \tomp_requires_file = make_temp_file (\".mkoffload.omp_requires\");\n+      obstack_ptr_grow (&files_to_cleanup, omp_requires_file);\n \n       /* Run the compiler pass.  */\n       xputenv (concat (\"GCC_OFFLOAD_OMP_REQUIRES_FILE=\", omp_requires_file, NULL));"}, {"sha": "5deddff6ca213d47adb8aaad5cde141b4653e488", "filename": "gcc/config/i386/intelmic-mkoffload.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713ec97e593bd4d9915a13bc4047f064fec0e24a/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713ec97e593bd4d9915a13bc4047f064fec0e24a/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.cc?ref=713ec97e593bd4d9915a13bc4047f064fec0e24a", "patch": "@@ -526,6 +526,7 @@ prepare_target_image (const char *target_compiler, int argc, char **argv, uint32\n     omp_requires_file = concat (dumppfx, \".mkoffload.omp_requires\", NULL);\n   else\n     omp_requires_file = make_temp_file (\".mkoffload.omp_requires\");\n+  temp_files[num_temps++] = omp_requires_file;\n   xputenv (concat (\"GCC_OFFLOAD_OMP_REQUIRES_FILE=\", omp_requires_file, NULL));\n \n   compile_for_target (&argv_obstack);"}, {"sha": "3eea0a8f138e111f3bb75055187c3c0887ca901d", "filename": "gcc/config/nvptx/mkoffload.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713ec97e593bd4d9915a13bc4047f064fec0e24a/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713ec97e593bd4d9915a13bc4047f064fec0e24a/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc?ref=713ec97e593bd4d9915a13bc4047f064fec0e24a", "patch": "@@ -55,6 +55,7 @@ static id_map *var_ids, **vars_tail = &var_ids;\n /* Files to unlink.  */\n static const char *ptx_name;\n static const char *ptx_cfile_name;\n+static const char *omp_requires_file;\n static const char *ptx_dumpbase;\n \n enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n@@ -68,6 +69,8 @@ tool_cleanup (bool from_signal ATTRIBUTE_UNUSED)\n     maybe_unlink (ptx_cfile_name);\n   if (ptx_name)\n     maybe_unlink (ptx_name);\n+  if (omp_requires_file)\n+    maybe_unlink (omp_requires_file);\n }\n \n static void\n@@ -586,7 +589,6 @@ main (int argc, char **argv)\n       unsetenv (\"COMPILER_PATH\");\n       unsetenv (\"LIBRARY_PATH\");\n \n-      char *omp_requires_file;\n       if (save_temps)\n \tomp_requires_file = concat (dumppfx, \".mkoffload.omp_requires\", NULL);\n       else"}]}