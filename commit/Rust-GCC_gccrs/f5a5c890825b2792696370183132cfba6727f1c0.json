{"sha": "f5a5c890825b2792696370183132cfba6727f1c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhNWM4OTA4MjViMjc5MjY5NjM3MDE4MzEzMmNmYmE2NzI3ZjFjMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-01-25T17:34:39Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-25T17:34:39Z"}, "message": "re PR fortran/51995 ([OOP] Polymorphic class fails at runtime)\n\n2012-01-25  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51995\n        * class.c (gfc_build_class_symbol): Ensure that\n        fclass->f2k_derived is set.\n\n2012-01-25  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51995\n        * gfortran.dg/typebound_proc_25.f90: New.\n\nFrom-SVN: r183528", "tree": {"sha": "57df87f21f14e09a462a4846106036f7f01dadea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57df87f21f14e09a462a4846106036f7f01dadea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a5c890825b2792696370183132cfba6727f1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a5c890825b2792696370183132cfba6727f1c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a5c890825b2792696370183132cfba6727f1c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a5c890825b2792696370183132cfba6727f1c0/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3310d490144dd291d0e26279e5bf70772ea2da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3310d490144dd291d0e26279e5bf70772ea2da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3310d490144dd291d0e26279e5bf70772ea2da9"}], "stats": {"total": 127, "additions": 125, "deletions": 2}, "files": [{"sha": "b6adf2382326982f434dbaf046fb6c545923c945", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a5c890825b2792696370183132cfba6727f1c0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a5c890825b2792696370183132cfba6727f1c0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f5a5c890825b2792696370183132cfba6727f1c0", "patch": "@@ -1,4 +1,10 @@\n-2012-01-24  Tobias Burnus  <burnus@net-b.de>\n+2012-01-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51995\n+\t* class.c (gfc_build_class_symbol): Ensure that\n+\tfclass->f2k_derived is set.\n+\n+2012-01-25  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51966\n \t* resolve.c (resolve_structure_cons): Only create an"}, {"sha": "92cfef76d6cd4f0e0179cb6ddddca34510d18c4d", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a5c890825b2792696370183132cfba6727f1c0/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a5c890825b2792696370183132cfba6727f1c0/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=f5a5c890825b2792696370183132cfba6727f1c0", "patch": "@@ -421,6 +421,8 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n       c->attr.access = ACCESS_PRIVATE;\n       c->attr.pointer = 1;\n     }\n+  else if (!fclass->f2k_derived)\n+    fclass->f2k_derived = fclass->components->ts.u.derived->f2k_derived;\n \n   /* Since the extension field is 8 bit wide, we can only have\n      up to 255 extension levels.  */"}, {"sha": "6e38d08b7634d62cebca75b0bb10c305109b6bc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a5c890825b2792696370183132cfba6727f1c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a5c890825b2792696370183132cfba6727f1c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5a5c890825b2792696370183132cfba6727f1c0", "patch": "@@ -1,3 +1,8 @@\n+2012-01-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51995\n+\t* gfortran.dg/typebound_proc_25.f90: New.\n+\n 2012-01-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51992\n@@ -21,7 +26,7 @@\n \n \t* gcc.dg/pr50908-2.c (dg-options): Add -fno-short-enums.\n \n-2012-01-24  Tobias Burnus  <burnus@net-b.de>\n+2012-01-25  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51966\n \t* gfortran.dg/derived_constructor_char_3.f90: New."}, {"sha": "4a68fb9db518141facc83cc1eef0a3fba57cbad6", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_25.f90", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a5c890825b2792696370183132cfba6727f1c0/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a5c890825b2792696370183132cfba6727f1c0/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_25.f90?ref=f5a5c890825b2792696370183132cfba6727f1c0", "patch": "@@ -0,0 +1,110 @@\n+! { dg-do compile }\n+!\n+! PR fortran/51995\n+!\n+! Contributed by jilfa12@yahoo.com\n+!\n+\n+MODULE factory_pattern\n+\n+  TYPE CFactory\n+     PRIVATE\n+     CHARACTER(len=20) :: factory_type      !! Descriptive name for database\n+     CLASS(Connection), POINTER :: connection_type !! Which type of database ?\n+   CONTAINS                                        !! Note 'class' not 'type' !\n+     PROCEDURE :: init                             !! Constructor\n+     PROCEDURE :: create_connection                !! Connect to database\n+     PROCEDURE :: finalize                         !! Destructor\n+  END TYPE CFactory\n+\n+  TYPE, ABSTRACT :: Connection\n+   CONTAINS\n+     PROCEDURE(generic_desc), DEFERRED, PASS(self) :: description\n+  END TYPE Connection\n+\n+  ABSTRACT INTERFACE\n+     SUBROUTINE generic_desc(self)\n+       IMPORT :: Connection\n+       CLASS(Connection), INTENT(in) :: self\n+     END SUBROUTINE generic_desc\n+  END INTERFACE\n+\n+  !! An Oracle connection\n+  TYPE, EXTENDS(Connection) :: OracleConnection\n+   CONTAINS\n+     PROCEDURE, PASS(self) :: description => oracle_desc\n+  END TYPE OracleConnection\n+\n+  !! A MySQL connection\n+  TYPE, EXTENDS(Connection) :: MySQLConnection\n+   CONTAINS\n+     PROCEDURE, PASS(self) :: description => mysql_desc\n+  END TYPE MySQLConnection\n+\n+CONTAINS\n+\n+  SUBROUTINE init(self, string)\n+    CLASS(CFactory), INTENT(inout) :: self\n+    CHARACTER(len=*), INTENT(in) :: string\n+    self%factory_type = TRIM(string)\n+    self%connection_type => NULL()            !! pointer is nullified\n+  END SUBROUTINE init\n+\n+  SUBROUTINE finalize(self)\n+    CLASS(CFactory), INTENT(inout) :: self\n+    DEALLOCATE(self%connection_type)          !! Free the memory\n+    NULLIFY(self%connection_type)\n+  END SUBROUTINE finalize\n+\n+  FUNCTION create_connection(self)  RESULT(ptr)\n+    CLASS(CFactory) :: self\n+    CLASS(Connection), POINTER :: ptr\n+\n+    IF(self%factory_type == \"Oracle\") THEN\n+       IF(ASSOCIATED(self%connection_type))   DEALLOCATE(self%connection_type)\n+       ALLOCATE(OracleConnection :: self%connection_type)\n+       ptr => self%connection_type\n+    ELSEIF(self%factory_type == \"MySQL\") THEN\n+       IF(ASSOCIATED(self%connection_type))   DEALLOCATE(self%connection_type)\n+       ALLOCATE(MySQLConnection :: self%connection_type)\n+       ptr => self%connection_type\n+    END IF\n+\n+  END FUNCTION create_connection\n+\n+  SUBROUTINE oracle_desc(self)\n+    CLASS(OracleConnection), INTENT(in) :: self\n+    WRITE(*,'(A)') \"You are now connected with Oracle\"\n+  END SUBROUTINE oracle_desc\n+\n+  SUBROUTINE mysql_desc(self)\n+    CLASS(MySQLConnection), INTENT(in) :: self\n+    WRITE(*,'(A)')  \"You are now connected with MySQL\"\n+  END SUBROUTINE mysql_desc\n+end module\n+\n+\n+  PROGRAM main\n+   USE factory_pattern\n+\n+   IMPLICIT NONE\n+\n+   TYPE(CFactory) :: factory\n+   CLASS(Connection), POINTER :: db_connect => NULL()\n+\n+   CALL factory%init(\"Oracle\")\n+   db_connect => factory%create_connection()   !! Create Oracle DB\n+   CALL db_connect%description()\n+\n+   !! The same factory can be used to create different connections\n+   CALL factory%init(\"MySQL\")                  !! Create MySQL DB\n+\n+   !! 'connect' is a 'class' pointer. So can be used for either Oracle or MySQL\n+   db_connect => factory%create_connection()\n+   CALL db_connect%description()\n+\n+   CALL factory%finalize()        ! Destroy the object\n+\n+  END PROGRAM main\n+\n+! { dg-final { cleanup-modules \"factory_pattern\" } }"}]}