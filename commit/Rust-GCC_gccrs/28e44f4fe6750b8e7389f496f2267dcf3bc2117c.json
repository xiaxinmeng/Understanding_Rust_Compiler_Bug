{"sha": "28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlNDRmNGZlNjc1MGI4ZTczODlmNDk2ZjIyNjdkY2YzYmMyMTE3Yw==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-04-18T17:43:27Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-04-18T17:43:27Z"}, "message": "tree-vectorizer.c (destroy_loop_vec_info): Set loop->aux to NULL.\n\n        * tree-vectorizer.c (destroy_loop_vec_info): Set loop->aux to NULL.\n        * tree-vect-analyze.c (vect_analyze_loop_form): Set loop->aux.\n\n        * tree-vectorizer.h (NITERS_KNOWN_P): New.\n        * tree-vect-analyze.c (vect_analyze_loop_form): Call NITERS_KNOWN_P\n        instead of LOOP_VINFO_INT_NITERS to avoid having to geneate loop_info.\n\n        * tree-vect-analyze.c (vect_determine_vectorization_factor): Add\n        dump print.\n        (vect_analyze_operations): Fix indenetation.  Fix a comment.  Fix a\n        print message.\n        (vect_analyze_scalar_cycles): Fix indentation.\n        (vect_enhance_data_refs_alignment): Fix check in case of peeling.\n        (vect_mark_relevant): Include phis in relevance analysis.\n\n        * tree-vect-transform.c (vect_transform_loop): Add an assert.\n\nFrom-SVN: r123955", "tree": {"sha": "6e88f8b28f57302e8c1060fd3ef416ac38dc45f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e88f8b28f57302e8c1060fd3ef416ac38dc45f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/comments", "author": null, "committer": null, "parents": [{"sha": "f9d6deca5b0a59b859dc88f8c40f9711c6413ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d6deca5b0a59b859dc88f8c40f9711c6413ad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d6deca5b0a59b859dc88f8c40f9711c6413ad2"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "b1671cf1359aecbb2e0c4f50717369c513bc02db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "patch": "@@ -1,3 +1,22 @@\n+2007-04-18  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* tree-vectorizer.c (destroy_loop_vec_info): Set loop->aux to NULL.\n+\t* tree-vect-analyze.c (vect_analyze_loop_form): Set loop->aux.\n+\n+\t* tree-vectorizer.h (NITERS_KNOWN_P): New.\n+\t* tree-vect-analyze.c (vect_analyze_loop_form): Call NITERS_KNOWN_P \n+\tinstead of LOOP_VINFO_INT_NITERS to avoid having to geneate loop_info.\n+\n+\t* tree-vect-analyze.c (vect_determine_vectorization_factor): Add \n+\tdump print.\n+\t(vect_analyze_operations): Fix indenetation.  Fix a comment.  Fix a\n+\tprint message.\n+\t(vect_analyze_scalar_cycles): Fix indentation.\n+\t(vect_enhance_data_refs_alignment): Fix check in case of peeling.\n+\t(vect_mark_relevant): Include phis in relevance analysis.\n+\n+\t* tree-vect-transform.c (vect_transform_loop): Add an assert.\n+\n 2007-04-18  Anatoly Sokolov <aesok@post.ru>\n \n \t* config/avr/avr.c (ptrreg_to_str): Replace error() with"}, {"sha": "c195c7ab323021c96a5982815fbdd5f01d3bd0c8", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "patch": "@@ -262,7 +262,8 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n     }\n \n   /* TODO: Analyze cost. Decide if worth while to vectorize.  */\n-\n+  if (vect_print_dump_info (REPORT_DETAILS))\n+    fprintf (vect_dump, \"vectorization factor = %d\", vectorization_factor);\n   if (vectorization_factor <= 1)\n     {\n       if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\n@@ -1434,6 +1435,7 @@ static bool\n vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n {\n   VEC (data_reference_p, heap) *datarefs = LOOP_VINFO_DATAREFS (loop_vinfo);\n+  struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   enum dr_alignment_support supportable_dr_alignment;\n   struct data_reference *dr0 = NULL;\n   struct data_reference *dr;\n@@ -1531,7 +1533,8 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n \n   /* Often peeling for alignment will require peeling for loop-bound, which in \n      turn requires that we know how to adjust the loop ivs after the loop.  */\n-  if (!vect_can_advance_ivs_p (loop_vinfo))\n+  if (!vect_can_advance_ivs_p (loop_vinfo)\n+      || !slpeel_can_duplicate_loop_p (loop, single_exit (loop)))\n     do_peeling = false;\n \n   if (do_peeling)\n@@ -2641,27 +2644,27 @@ vect_analyze_loop_form (struct loop *loop)\n       return false;\n     }\n \n-  loop_vinfo = new_loop_vec_info (loop);\n-  LOOP_VINFO_NITERS (loop_vinfo) = number_of_iterations;\n-\n-  if (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo))\n+  if (!NITERS_KNOWN_P (number_of_iterations))\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n         {\n           fprintf (vect_dump, \"Symbolic number of iterations is \");\n           print_generic_expr (vect_dump, number_of_iterations, TDF_DETAILS);\n         }\n     }\n-  else\n-  if (LOOP_VINFO_INT_NITERS (loop_vinfo) == 0)\n+  else if (TREE_INT_CST_LOW (number_of_iterations) == 0)\n     {\n       if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\n         fprintf (vect_dump, \"not vectorized: number of iterations = 0.\");\n       return NULL;\n     }\n \n+  loop_vinfo = new_loop_vec_info (loop);\n+  LOOP_VINFO_NITERS (loop_vinfo) = number_of_iterations;\n   LOOP_VINFO_EXIT_COND (loop_vinfo) = loop_cond;\n \n+  gcc_assert (!loop->aux);\n+  loop->aux = loop_vinfo;\n   return loop_vinfo;\n }\n "}, {"sha": "895e709289cb88426d72769098653dc01ce8f75b", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "patch": "@@ -5258,6 +5258,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t      continue;\n \t    }\n \n+\t  gcc_assert (STMT_VINFO_VECTYPE (stmt_info));\n \t  if ((TYPE_VECTOR_SUBPARTS (STMT_VINFO_VECTYPE (stmt_info))\n \t\t != (unsigned HOST_WIDE_INT) vectorization_factor)\n \t      && vect_print_dump_info (REPORT_DETAILS))"}, {"sha": "6b44c0b06108dae390da9b8636c1dc0e61626815", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "patch": "@@ -1511,6 +1511,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo)\n   VEC_free (tree, heap, LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo));\n \n   free (loop_vinfo);\n+  loop->aux = NULL;\n }\n \n "}, {"sha": "8d80aeb2ba705457f7abfec70fcb9b595a8b6287", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e44f4fe6750b8e7389f496f2267dcf3bc2117c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=28e44f4fe6750b8e7389f496f2267dcf3bc2117c", "patch": "@@ -151,9 +151,12 @@ typedef struct _loop_vec_info {\n #define LOOP_VINFO_MAY_MISALIGN_STMTS(L) (L)->may_misalign_stmts\n #define LOOP_VINFO_LOC(L)             (L)->loop_line_number\n \n+#define NITERS_KNOWN_P(n)                     \\\n+(host_integerp ((n),0)                        \\\n+&& TREE_INT_CST_LOW ((n)) > 0)\n+\n #define LOOP_VINFO_NITERS_KNOWN_P(L)                     \\\n-(host_integerp ((L)->num_iters,0)                        \\\n-&& TREE_INT_CST_LOW ((L)->num_iters) > 0)\n+NITERS_KNOWN_P((L)->num_iters)\n \n /*-----------------------------------------------------------------*/\n /* Info on vectorized defs.                                        */"}]}