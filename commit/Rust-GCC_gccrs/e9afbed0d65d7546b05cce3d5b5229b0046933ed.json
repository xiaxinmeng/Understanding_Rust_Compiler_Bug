{"sha": "e9afbed0d65d7546b05cce3d5b5229b0046933ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlhZmJlZDBkNjVkNzU0NmIwNWNjZTNkNWI1MjI5YjAwNDY5MzNlZA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-08-22T18:51:25Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-08-22T18:51:25Z"}, "message": "re PR libstdc++/68222 (_Safe_iterator provides operators the wrapped iterator can't actually support)\n\n2018-08-22  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/68222\n\t* include/debug/safe_iterator.h\n\t(_Safe_iterator<_It, _Sq, _Cat>): Add category template parameter.\n\t(_Safe_iterator<>::_Const_iterator): Remove.\n\t(_Safe_iterator<>::_IsConstant): New.\n\t(_Safe_iterator<>::_OtherIterator): New.\n\t(_Safe_iterator<_It, _Sq, _Cat>::_Safe_iterator<_MutIte>(\n\tconst _Safe_iterator<_MutIte, _Sq, _Cat>&)): Add _IsConstant::__value in\n\t__gnu_cxx::__enable_if condition.\n\t(_Safe_iterator<_It, _Sq, _Cat>::_M_get_distance_to): New.\n\t(_Safe_iterator<_It, _Sq, _Cat>::_M_get_distance_from_begin): New.\n\t(_Safe_iterator<_It, _Sq, _Cat>::_M_get_distance_to_end): New.\n\t(_Safe_iterator<_It, _Sq, std::bidirectional_iterator_tag>): New.\n\t(_Safe_iterator<_It, _Sq, _Cat>::operator--()): Move...\n\t(_Safe_iterator<_It, _Sq, std::bidirectional_iterator_tag>\n\t::operator--()): ...here.\n\t(_Safe_iterator<_It, _Sq, _Cat>::operator--(int)): Move...\n\t(_Safe_iterator<_It, _Sq, std::bidirectional_iterator_tag>\n\t::operator--(int)): ...here.\n\t(_Safe_iterator<_It, _Sq, _Cat>::_M_decrementable()): Move...\n\t(_Safe_iterator<_It, _Sq, std::bidirectional_iterator_tag>\n\t::_M_decrementable()): ...here.\n\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>): New.\n\t(_Safe_iterator<_It, _Sq, _Cat>::operator[](const difference_type&)):\n\tMove...\n\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n\t::operator[](const difference_type&)): ...here.\n\t(_Safe_iterator<_It, _Sq, _Cat>::operator+=(const difference_type&)):\n\tMove...\n\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n\t::operator+=(const difference_type&)): ...here.\n\t(_Safe_iterator<_It, _Sq, _Cat>::operator+(const difference_type&)):\n\tMove...\n\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n\t::operator+(const difference_type&)): ...here.\n\t(_Safe_iterator<_It, _Sq, _Cat>::operator-=(const difference_type&)):\n\tMove...\n\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n\t::operator-=(const difference_type&)): ...here.\n\t(_Safe_iterator<_It, _Sq, _Cat>::operator-(const difference_type&)):\n\tMove...\n\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n\t::operator-(const difference_type&)): ...here.\n\t(operator<(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n\tConstraint to random access iterators.\n\t(operator<=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n\tLikewise.\n\t(operator>(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n\t(operator>=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n\tLikewise.\n\t(operator-(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n\t(operator+(const difference_type&, const _Safe_iterator<>&)): Likewise.\n\t(__check_dereferenceable(const _Safe_iterator<>&)): Remove.\n\t(__get_distance): Remove.\n\t(__get_distance_from_begin): Remove.\n\t(__get_distance_to_end): Remove.\n\t(struct __is_safe_random_iterator<_Safe_iterator<>>): Remove partial\n\tspecialization.\n\t(__base(const _Safe_iterator<>&, std::input_iterator_tag)): Remove.\n\t(__base(const _Safe_iterator<>&, std::random_access_iterator_tag)): Remove.\n\t(__base(const _Safe_iterator<>&)): Constraint to random access iterator.\n\t* include/debug/safe_iterator.tcc\n\t(_Safe_iterator<>::_M_get_distance_from_begin()): New.\n\t(_Safe_iterator<>::_M_get_distance_to_end()): New.\n\t(_Safe_iterator<>::_M_get_distance_to(const _Safe_iterator<>&)): New.\n\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>\n\t::_M_valid_range): New.\n\t* include/debug/safe_local_iterator.h\n\t(_Safe_local_iterator<>::_Const_local_iterator): Remove.\n\t(_Safe_local_iterator<>::_IsConstant): New.\n\t(_Safe_local_iterator<>::_OtherIterator): New.\n\t(_Safe_local_iterator<_It, _Cont>::_Safe_local_iterator<_MutIte, _Cont>(\n\tconst _Safe_local_iterator<_MutIte, _Seq>&)): Add _IsConstant::__value\n\tin __gnu_cxx::__enable_if condition. If singular compare base iterator\n\twith _MutIte rather than _It.\n\t(_Safe_local_iterator<>::_S_constant): Make constexpr.\n\t(_Safe_local_iterator<>::_M_get_distance_to): New.\n\t(__check_dereferenceable(const _Safe_local_iterator<>&)): Remove.\n\t(__get_distance(const _Safe_local_iterator<>&,\n\tconst _Safe_local_iterator<>&, std::input_iterator_tag)): Remove.\n\t(__valid_range(const _Safe_local_iterator<>&,\n\tconst _Safe_local_iterator<>&)): New.\n\t* include/debug/safe_local_iterator.tcc\n\t(_Safe_local_iterator<>::_M_get_distance_to): New.\n\t* include/debug/deque (std::__debug::deque<>): Add\n\t::__gnu_debug::_Safe_iterator<> friend declaration.\n\t* include/debug/forward_list (std::__debug::forward_list<>): Likewise.\n\t* include/debug/list (std::__debug::list<>): Likewise.\n\t* include/debug/map.h (std::__debug::map<>): Likewise.\n\t* include/debug/multimap.h (std::__debug::multimap<>): Likewise.\n\t* include/debug/set.h (std::__debug::set<>): Likewise.\n\t* include/debug/multiset.h (std::__debug::multiset<>): Likewise.\n\t* include/debug/string (std::__debug::basic_string<>): Likewise.\n\t* include/debug/unordered_map (std::__debug::unordered_map<>): Likewise\n\tand add ::__gnu_debug::_Safe_local_iterator<> friend declaration.\n\t(std::__debug::unordered_multimap<>): Likewise.\n\t* include/debug/unordered_set (std::__debug::unordered_set<>): Likewise.\n\t(std::__debug::unordered_multiset<>): Likewise.\n\t* include/debug/formatter.h: Adapt.\n\t* include/debug/helper_functions.h\n\t(__gnu_debug::_Safe_local_iterator<>): Add declaration.\n\t(__get_distance<_Ite>(_Ite, _Ite, std::random_access_iterator_tag):\n\tPass parameter by copy.\n\t(__get_distance<_Ite>(_Ite, _Ite, std::input_iterator_tag): Likewise.\n\t(__get_distance<_Ite>(_Ite, _Ite): Likewise.\n\t(__valid_range_aux<_Integral>): Pass _Integral by copy.\n\t(__valid_range<_InputIterator>): Pass _InputIterator by copy.\n\t(__valid_range<>(const _Safe_iterator<>&,\n\tconst _Safe_iterator<>&, typename _Distance_traits<>::__type&)):\n\tDeclare.\n\t(__valid_range(const _Safe_local_iterator<>&,\n\tconst _Safe_local_iterator<>&, typename _Distance_traits<>::__type&)):\n\tDeclare.\n\t(__valid_range<>(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n\tDeclare.\n\t(__valid_range(const _Safe_local_iterator<>&, const _Safe_local_iterator<>&)):\n\tDeclare.\n\t(__can_advance): Adapt.\n\t(struct __is_safe_random_iterator<>): Remove.\n\t(struct _SIter_base<>): Remove.\n\t* include/debug/functions.h: Include <bits/stl_iterator.h>.\n\t(__check_dereferenceable): Remove.\n\t(__foreign_iterator_aux4, __foreign_iterator_aux3): Adapt.\n\t(__foreign_iterator_aux2, __foreign_iterator_aux): Adapt.\n\t(__foreign_iterator): Adapt.\n\t* include/debug/stl_iterator.h\n\t(__is_safe_random_iterator<std::reverse_iterator<>>): Remove.\n\t(__base(const std::reverse_iterator<_Safe_iterator<_It, _Sq>)):\n\tConstraint for random access iterators.\n\t(__niter_base): Adapt.\n\t* testsuite/util/testsuite_containers.h:\n\tInclude <bits/boost_concept_check.h>.\n\t(iterator_concept_checks<_It, _Mutable, _Category>): New.\n\t(citerator<_Cont>::forward_members::forward_members()): Instantiate\n\tlatter for container iterator and const_iterator.\n\t* testsuite/23_containers/list/68222_neg.cc: New.\n\t* testsuite/23_containers/vector/cons/destructible_debug_neg.cc: Adapt\n\tline number.\n\t* testsuite/23_containers/unordered_set/debug/debug_functions.cc:\n\t(test01): Remove.\n\t* testsuite/23_containers/vector/debug/debug_functions.cc (test01):\n\tRemove.\n\nFrom-SVN: r263786", "tree": {"sha": "6b4d73486045218b262c141d9b99c66ab21c34f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b4d73486045218b262c141d9b99c66ab21c34f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9afbed0d65d7546b05cce3d5b5229b0046933ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9afbed0d65d7546b05cce3d5b5229b0046933ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9afbed0d65d7546b05cce3d5b5229b0046933ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9afbed0d65d7546b05cce3d5b5229b0046933ed/comments", "author": null, "committer": null, "parents": [{"sha": "66f32b0e2131ce85102a5fb1acee118c416afd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f32b0e2131ce85102a5fb1acee118c416afd9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f32b0e2131ce85102a5fb1acee118c416afd9b"}], "stats": {"total": 1630, "additions": 1093, "deletions": 537}, "files": [{"sha": "4639c5ef0b31a4f1e79d78bda28e734a0dac917f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -1,3 +1,148 @@\n+2018-08-22  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/68222\n+\t* include/debug/safe_iterator.h\n+\t(_Safe_iterator<_It, _Sq, _Cat>): Add category template parameter.\n+\t(_Safe_iterator<>::_Const_iterator): Remove.\n+\t(_Safe_iterator<>::_IsConstant): New.\n+\t(_Safe_iterator<>::_OtherIterator): New.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::_Safe_iterator<_MutIte>(\n+\tconst _Safe_iterator<_MutIte, _Sq, _Cat>&)): Add _IsConstant::__value in\n+\t__gnu_cxx::__enable_if condition.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::_M_get_distance_to): New.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::_M_get_distance_from_begin): New.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::_M_get_distance_to_end): New.\n+\t(_Safe_iterator<_It, _Sq, std::bidirectional_iterator_tag>): New.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::operator--()): Move...\n+\t(_Safe_iterator<_It, _Sq, std::bidirectional_iterator_tag>\n+\t::operator--()): ...here.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::operator--(int)): Move...\n+\t(_Safe_iterator<_It, _Sq, std::bidirectional_iterator_tag>\n+\t::operator--(int)): ...here.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::_M_decrementable()): Move...\n+\t(_Safe_iterator<_It, _Sq, std::bidirectional_iterator_tag>\n+\t::_M_decrementable()): ...here.\n+\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>): New.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::operator[](const difference_type&)):\n+\tMove...\n+\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n+\t::operator[](const difference_type&)): ...here.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::operator+=(const difference_type&)):\n+\tMove...\n+\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n+\t::operator+=(const difference_type&)): ...here.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::operator+(const difference_type&)):\n+\tMove...\n+\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n+\t::operator+(const difference_type&)): ...here.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::operator-=(const difference_type&)):\n+\tMove...\n+\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n+\t::operator-=(const difference_type&)): ...here.\n+\t(_Safe_iterator<_It, _Sq, _Cat>::operator-(const difference_type&)):\n+\tMove...\n+\t(_Safe_iterator<_It, _Sq, std::random_access_iterator_tag>\n+\t::operator-(const difference_type&)): ...here.\n+\t(operator<(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n+\tConstraint to random access iterators.\n+\t(operator<=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n+\tLikewise.\n+\t(operator>(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n+\t(operator>=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n+\tLikewise.\n+\t(operator-(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n+\t(operator+(const difference_type&, const _Safe_iterator<>&)): Likewise.\n+\t(__check_dereferenceable(const _Safe_iterator<>&)): Remove.\n+\t(__get_distance): Remove.\n+\t(__get_distance_from_begin): Remove.\n+\t(__get_distance_to_end): Remove.\n+\t(struct __is_safe_random_iterator<_Safe_iterator<>>): Remove partial\n+\tspecialization.\n+\t(__base(const _Safe_iterator<>&, std::input_iterator_tag)): Remove.\n+\t(__base(const _Safe_iterator<>&, std::random_access_iterator_tag)): Remove.\n+\t(__base(const _Safe_iterator<>&)): Constraint to random access iterator.\n+\t* include/debug/safe_iterator.tcc\n+\t(_Safe_iterator<>::_M_get_distance_from_begin()): New.\n+\t(_Safe_iterator<>::_M_get_distance_to_end()): New.\n+\t(_Safe_iterator<>::_M_get_distance_to(const _Safe_iterator<>&)): New.\n+\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>\n+\t::_M_valid_range): New.\n+\t* include/debug/safe_local_iterator.h\n+\t(_Safe_local_iterator<>::_Const_local_iterator): Remove.\n+\t(_Safe_local_iterator<>::_IsConstant): New.\n+\t(_Safe_local_iterator<>::_OtherIterator): New.\n+\t(_Safe_local_iterator<_It, _Cont>::_Safe_local_iterator<_MutIte, _Cont>(\n+\tconst _Safe_local_iterator<_MutIte, _Seq>&)): Add _IsConstant::__value\n+\tin __gnu_cxx::__enable_if condition. If singular compare base iterator\n+\twith _MutIte rather than _It.\n+\t(_Safe_local_iterator<>::_S_constant): Make constexpr.\n+\t(_Safe_local_iterator<>::_M_get_distance_to): New.\n+\t(__check_dereferenceable(const _Safe_local_iterator<>&)): Remove.\n+\t(__get_distance(const _Safe_local_iterator<>&,\n+\tconst _Safe_local_iterator<>&, std::input_iterator_tag)): Remove.\n+\t(__valid_range(const _Safe_local_iterator<>&,\n+\tconst _Safe_local_iterator<>&)): New.\n+\t* include/debug/safe_local_iterator.tcc\n+\t(_Safe_local_iterator<>::_M_get_distance_to): New.\n+\t* include/debug/deque (std::__debug::deque<>): Add\n+\t::__gnu_debug::_Safe_iterator<> friend declaration.\n+\t* include/debug/forward_list (std::__debug::forward_list<>): Likewise.\n+\t* include/debug/list (std::__debug::list<>): Likewise.\n+\t* include/debug/map.h (std::__debug::map<>): Likewise.\n+\t* include/debug/multimap.h (std::__debug::multimap<>): Likewise.\n+\t* include/debug/set.h (std::__debug::set<>): Likewise.\n+\t* include/debug/multiset.h (std::__debug::multiset<>): Likewise.\n+\t* include/debug/string (std::__debug::basic_string<>): Likewise.\n+\t* include/debug/unordered_map (std::__debug::unordered_map<>): Likewise\n+\tand add ::__gnu_debug::_Safe_local_iterator<> friend declaration.\n+\t(std::__debug::unordered_multimap<>): Likewise.\n+\t* include/debug/unordered_set (std::__debug::unordered_set<>): Likewise.\n+\t(std::__debug::unordered_multiset<>): Likewise.\n+\t* include/debug/formatter.h: Adapt.\n+\t* include/debug/helper_functions.h\n+\t(__gnu_debug::_Safe_local_iterator<>): Add declaration.\n+\t(__get_distance<_Ite>(_Ite, _Ite, std::random_access_iterator_tag):\n+\tPass parameter by copy.\n+\t(__get_distance<_Ite>(_Ite, _Ite, std::input_iterator_tag): Likewise.\n+\t(__get_distance<_Ite>(_Ite, _Ite): Likewise.\n+\t(__valid_range_aux<_Integral>): Pass _Integral by copy.\n+\t(__valid_range<_InputIterator>): Pass _InputIterator by copy.\n+\t(__valid_range<>(const _Safe_iterator<>&,\n+\tconst _Safe_iterator<>&, typename _Distance_traits<>::__type&)):\n+\tDeclare.\n+\t(__valid_range(const _Safe_local_iterator<>&,\n+\tconst _Safe_local_iterator<>&, typename _Distance_traits<>::__type&)):\n+\tDeclare.\n+\t(__valid_range<>(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n+\tDeclare.\n+\t(__valid_range(const _Safe_local_iterator<>&, const _Safe_local_iterator<>&)):\n+\tDeclare.\n+\t(__can_advance): Adapt.\n+\t(struct __is_safe_random_iterator<>): Remove.\n+\t(struct _SIter_base<>): Remove.\n+\t* include/debug/functions.h: Include <bits/stl_iterator.h>.\n+\t(__check_dereferenceable): Remove.\n+\t(__foreign_iterator_aux4, __foreign_iterator_aux3): Adapt.\n+\t(__foreign_iterator_aux2, __foreign_iterator_aux): Adapt.\n+\t(__foreign_iterator): Adapt.\n+\t* include/debug/stl_iterator.h\n+\t(__is_safe_random_iterator<std::reverse_iterator<>>): Remove.\n+\t(__base(const std::reverse_iterator<_Safe_iterator<_It, _Sq>)):\n+\tConstraint for random access iterators.\n+\t(__niter_base): Adapt.\n+\t* testsuite/util/testsuite_containers.h:\n+\tInclude <bits/boost_concept_check.h>.\n+\t(iterator_concept_checks<_It, _Mutable, _Category>): New.\n+\t(citerator<_Cont>::forward_members::forward_members()): Instantiate\n+\tlatter for container iterator and const_iterator.\n+\t* testsuite/23_containers/list/68222_neg.cc: New.\n+\t* testsuite/23_containers/vector/cons/destructible_debug_neg.cc: Adapt\n+\tline number.\n+\t* testsuite/23_containers/unordered_set/debug/debug_functions.cc:\n+\t(test01): Remove.\n+\t* testsuite/23_containers/vector/debug/debug_functions.cc (test01):\n+\tRemove.\n+\n 2018-08-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/77854"}, {"sha": "a6047dbed1b69329fa1afedd6ccb106566eef362", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -56,6 +56,9 @@ namespace __debug\n       typedef typename _Base::iterator\t\t_Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;"}, {"sha": "1f03f251488383b79fff6c07eb9bf144e40fd2c6", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -76,7 +76,7 @@ namespace __gnu_debug\n \n   class _Safe_sequence_base;\n \n-  template<typename _Iterator, typename _Sequence>\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n     class _Safe_iterator;\n \n   template<typename _Iterator, typename _Sequence>\n@@ -263,8 +263,8 @@ namespace __gnu_debug\n \t_M_variant._M_string._M_value = __value;\n       }\n \n-      template<typename _Iterator, typename _Sequence>\n-\t_Parameter(_Safe_iterator<_Iterator, _Sequence> const& __it,\n+      template<typename _Iterator, typename _Sequence, typename _Category>\n+\t_Parameter(_Safe_iterator<_Iterator, _Sequence, _Category> const& __it,\n \t\t   const char* __name, _Is_iterator)\n \t: _M_kind(__iterator),  _M_variant()\n \t{\n@@ -378,10 +378,10 @@ namespace __gnu_debug\n \t    = _S_reverse_state(_M_variant._M_iterator._M_state);\n \t}\n \n-      template<typename _Iterator, typename _Sequence>\n-\t_Parameter(std::reverse_iterator<_Safe_iterator<_Iterator,\n-\t\t\t\t\t\t\t_Sequence>> const& __it,\n-\t\t   const char* __name, _Is_iterator)\n+      template<typename _Iterator, typename _Sequence, typename _Category>\n+\t_Parameter(std::reverse_iterator<_Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t\t\t\t_Category>> const& __it,\n+\t  const char* __name, _Is_iterator)\n \t: _Parameter(__it.base(), __name, _Is_iterator{})\n \t{\n \t  _M_variant._M_iterator._M_type\n@@ -396,10 +396,10 @@ namespace __gnu_debug\n \t: _Parameter(__it.base(), __name, _Is_iterator{})\n \t{ _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it); }\n \n-      template<typename _Iterator, typename _Sequence>\n-\t_Parameter(std::move_iterator<_Safe_iterator<_Iterator,\n-\t\t\t\t\t\t     _Sequence>> const& __it,\n-\t\t   const char* __name, _Is_iterator)\n+      template<typename _Iterator, typename _Sequence, typename _Category>\n+\t_Parameter(std::move_iterator<_Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t\t\t     _Category>> const& __it,\n+\t  const char* __name, _Is_iterator)\n \t: _Parameter(__it.base(), __name, _Is_iterator{})\n       {\n \t_M_variant._M_iterator._M_type"}, {"sha": "840ed093302a817d9705877e6b34ac05f896ab20", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -193,6 +193,9 @@ namespace __debug\n       typedef typename _Base::iterator\t\t_Base_iterator;\n       typedef typename _Base::const_iterator\t_Base_const_iterator;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       typedef typename _Base::reference\t\treference;\n       typedef typename _Base::const_reference\tconst_reference;"}, {"sha": "21b60df16ed5dab9632b10efac6cbf4ded29e056", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 57, "deletions": 52, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -31,7 +31,9 @@\n \n #include <bits/move.h>\t\t// for __addressof\n #include <bits/stl_function.h>\t// for less\n+\n #if __cplusplus >= 201103L\n+# include <bits/stl_iterator.h>\t// for __miter_base\n # include <type_traits>\t\t// for is_lvalue_reference and conditional.\n #endif\n \n@@ -64,19 +66,6 @@ namespace __gnu_debug\n     __check_singular(const _Tp* __ptr)\n     { return __ptr == 0; }\n \n-  /** Assume that some arbitrary iterator is dereferenceable, because we\n-      can't prove that it isn't. */\n-  template<typename _Iterator>\n-    inline bool\n-    __check_dereferenceable(const _Iterator&)\n-    { return true; }\n-\n-  /** Non-NULL pointers are dereferenceable. */\n-  template<typename _Tp>\n-    inline bool\n-    __check_dereferenceable(const _Tp* __ptr)\n-    { return __ptr; }\n-\n   /* Checks that [first, last) is a valid range, and then returns\n    * __first. This routine is useful when we can't use a separate\n    * assertion statement because, e.g., we are in a constructor.\n@@ -95,10 +84,11 @@ namespace __gnu_debug\n     }\n \n   /* Handle the case where __other is a pointer to _Sequence::value_type. */\n-  template<typename _Iterator, typename _Sequence>\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n     inline bool\n-    __foreign_iterator_aux4(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t    const typename _Sequence::value_type* __other)\n+    __foreign_iterator_aux4(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>& __it,\n+\tconst typename _Sequence::value_type* __other)\n     {\n       typedef const typename _Sequence::value_type* _PointerType;\n       typedef std::less<_PointerType> _Less;\n@@ -116,18 +106,20 @@ namespace __gnu_debug\n     }\n \n   /* Fallback overload for when we can't tell, assume it is valid. */\n-  template<typename _Iterator, typename _Sequence>\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n     inline bool\n-    __foreign_iterator_aux4(const _Safe_iterator<_Iterator, _Sequence>&, ...)\n+    __foreign_iterator_aux4(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>&, ...)\n     { return true; }\n \n   /* Handle sequences with contiguous storage */\n-  template<typename _Iterator, typename _Sequence, typename _InputIterator>\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _InputIterator>\n     inline bool\n-    __foreign_iterator_aux3(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t    const _InputIterator& __other,\n-\t\t\t    const _InputIterator& __other_end,\n-\t\t\t    std::__true_type)\n+    __foreign_iterator_aux3(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>& __it,\n+\tconst _InputIterator& __other, const _InputIterator& __other_end,\n+\tstd::__true_type)\n     {\n       if (__other == __other_end)\n \treturn true;  // inserting nothing is safe even if not foreign iters\n@@ -137,36 +129,46 @@ namespace __gnu_debug\n     }\n \n   /* Handle non-contiguous containers, assume it is valid. */\n-  template<typename _Iterator, typename _Sequence, typename _InputIterator>\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _InputIterator>\n     inline bool\n-    __foreign_iterator_aux3(const _Safe_iterator<_Iterator, _Sequence>&,\n-\t\t\t    const _InputIterator&, const _InputIterator&,\n-\t\t\t    std::__false_type)\n+    __foreign_iterator_aux3(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>&,\n+\tconst _InputIterator&, const _InputIterator&,\n+\tstd::__false_type)\n     { return true; }\n \n   /** Handle debug iterators from the same type of container. */\n-  template<typename _Iterator, typename _Sequence, typename _OtherIterator>\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _OtherIterator>\n     inline bool\n-    __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\tconst _Safe_iterator<_OtherIterator, _Sequence>& __other,\n-\t\tconst _Safe_iterator<_OtherIterator, _Sequence>&)\n+    __foreign_iterator_aux2(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>& __it,\n+\tconst _Safe_iterator<_OtherIterator, _Sequence, _Category>& __other,\n+\tconst _Safe_iterator<_OtherIterator, _Sequence, _Category>&)\n     { return __it._M_get_sequence() != __other._M_get_sequence(); }\n \n   /** Handle debug iterators from different types of container. */\n-  template<typename _Iterator, typename _Sequence, typename _OtherIterator,\n-\t   typename _OtherSequence>\n-    inline bool\n-    __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\tconst _Safe_iterator<_OtherIterator, _OtherSequence>&,\n-\t\tconst _Safe_iterator<_OtherIterator, _OtherSequence>&)\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _OtherIterator, typename _OtherSequence,\n+\t   typename _OtherCategory>\n+    inline bool\n+    __foreign_iterator_aux2(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>&,\n+\tconst _Safe_iterator<_OtherIterator, _OtherSequence,\n+\t\t\t     _OtherCategory>&,\n+\tconst _Safe_iterator<_OtherIterator, _OtherSequence,\n+\t\t\t     _OtherCategory>&)\n     { return true; }\n \n   /* Handle non-debug iterators. */\n-  template<typename _Iterator, typename _Sequence, typename _InputIterator>\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _InputIterator>\n     inline bool\n-    __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t    const _InputIterator& __other,\n-\t\t\t    const _InputIterator& __other_end)\n+    __foreign_iterator_aux2(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>& __it,\n+\tconst _InputIterator& __other,\n+\tconst _InputIterator& __other_end)\n     {\n #if __cplusplus < 201103L\n       typedef _Is_contiguous_sequence<_Sequence> __tag;\n@@ -181,31 +183,34 @@ namespace __gnu_debug\n     }\n \n   /* Handle the case where we aren't really inserting a range after all */\n-  template<typename _Iterator, typename _Sequence, typename _Integral>\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _Integral>\n     inline bool\n-    __foreign_iterator_aux(const _Safe_iterator<_Iterator, _Sequence>&,\n-\t\t\t   _Integral, _Integral,\n-\t\t\t   std::__true_type)\n+    __foreign_iterator_aux(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>&,\n+\t_Integral, _Integral, std::__true_type)\n     { return true; }\n \n   /* Handle all iterators. */\n-  template<typename _Iterator, typename _Sequence,\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n \t   typename _InputIterator>\n     inline bool\n-    __foreign_iterator_aux(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t\t   _InputIterator __other, _InputIterator __other_end,\n-\t\t\t   std::__false_type)\n+    __foreign_iterator_aux(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>& __it,\n+\t_InputIterator __other, _InputIterator __other_end,\n+\tstd::__false_type)\n     {\n       return _Insert_range_from_self_is_safe<_Sequence>::__value\n \t|| __foreign_iterator_aux2(__it, std::__miter_base(__other),\n \t\t\t\t   std::__miter_base(__other_end));\n     }\n \n-  template<typename _Iterator, typename _Sequence,\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n \t   typename _InputIterator>\n     inline bool\n-    __foreign_iterator(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t\t       _InputIterator __other, _InputIterator __other_end)\n+    __foreign_iterator(\n+\tconst _Safe_iterator<_Iterator, _Sequence, _Category>& __it,\n+\t_InputIterator __other, _InputIterator __other_end)\n     {\n       typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n       return __foreign_iterator_aux(__it, __other, __other_end, _Integral());"}, {"sha": "21d969310dd4710e16102df91d0086e65f6e4690", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 49, "deletions": 37, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -37,9 +37,14 @@\n \n namespace __gnu_debug\n {\n-  template<typename _Iterator, typename _Sequence>\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n     class _Safe_iterator;\n \n+#if __cplusplus >= 201103L\n+  template<typename _Iterator, typename _Sequence>\n+    class _Safe_local_iterator;\n+#endif\n+\n   /** The precision to which we can calculate the distance between\n    *  two iterators.\n    */\n@@ -83,13 +88,13 @@ namespace __gnu_debug\n   */\n   template<typename _Iterator>\n     inline typename _Distance_traits<_Iterator>::__type\n-    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs,\n+    __get_distance(_Iterator __lhs, _Iterator __rhs,\n \t\t   std::random_access_iterator_tag)\n     { return std::make_pair(__rhs - __lhs, __dp_exact); }\n \n   template<typename _Iterator>\n     inline typename _Distance_traits<_Iterator>::__type\n-    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs,\n+    __get_distance(_Iterator __lhs, _Iterator __rhs,\n \t\t   std::input_iterator_tag)\n     {\n       if (__lhs == __rhs)\n@@ -100,7 +105,7 @@ namespace __gnu_debug\n \n   template<typename _Iterator>\n     inline typename _Distance_traits<_Iterator>::__type\n-    __get_distance(const _Iterator& __lhs, const _Iterator& __rhs)\n+    __get_distance(_Iterator __lhs, _Iterator __rhs)\n     { return __get_distance(__lhs, __rhs, std::__iterator_category(__lhs)); }\n \n   /** We say that integral types for a valid range, and defer to other\n@@ -109,21 +114,20 @@ namespace __gnu_debug\n   */\n   template<typename _Integral>\n     inline bool\n-    __valid_range_aux(const _Integral&, const _Integral&,\n+    __valid_range_aux(_Integral, _Integral,\n \t\t      typename _Distance_traits<_Integral>::__type& __dist,\n \t\t      std::__true_type)\n     {\n       __dist = std::make_pair(0, __dp_none);\n       return true;\n     }\n \n-  /** We have iterators, so figure out what kind of iterators that are\n+  /** We have iterators, so figure out what kind of iterators they are\n    *  to see if we can check the range ahead of time.\n   */\n   template<typename _InputIterator>\n     inline bool\n-    __valid_range_aux(const _InputIterator& __first,\n-\t\t      const _InputIterator& __last,\n+    __valid_range_aux(_InputIterator __first, _InputIterator __last,\n \t\t      typename _Distance_traits<_InputIterator>::__type& __dist,\n \t\t      std::__false_type)\n     {\n@@ -152,61 +156,69 @@ namespace __gnu_debug\n   */\n   template<typename _InputIterator>\n     inline bool\n-    __valid_range(const _InputIterator& __first, const _InputIterator& __last,\n+    __valid_range(_InputIterator __first, _InputIterator __last,\n \t\t  typename _Distance_traits<_InputIterator>::__type& __dist)\n     {\n       typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n       return __valid_range_aux(__first, __last, __dist, _Integral());\n     }\n \n+  template<typename _Iterator, typename _Sequence, typename _Category>\n+    bool\n+    __valid_range(const _Safe_iterator<_Iterator, _Sequence, _Category>&,\n+\t\t  const _Safe_iterator<_Iterator, _Sequence, _Category>&,\n+\t\t  typename _Distance_traits<_Iterator>::__type&);\n+\n+#if __cplusplus >= 201103L\n+  template<typename _Iterator,typename _Sequence>\n+    bool\n+    __valid_range(const _Safe_local_iterator<_Iterator, _Sequence>&,\n+\t\t  const _Safe_local_iterator<_Iterator, _Sequence>&,\n+\t\t  typename _Distance_traits<_Iterator>::__type&);\n+#endif\n+\n   template<typename _InputIterator>\n     inline bool\n-    __valid_range(const _InputIterator& __first, const _InputIterator& __last)\n+    __valid_range(_InputIterator __first, _InputIterator __last)\n     {\n       typename _Distance_traits<_InputIterator>::__type __dist;\n       return __valid_range(__first, __last, __dist);\n     }\n \n+  template<typename _Iterator, typename _Sequence, typename _Category>\n+    bool\n+    __valid_range(const _Safe_iterator<_Iterator, _Sequence, _Category>&,\n+\t\t  const _Safe_iterator<_Iterator, _Sequence, _Category>&);\n+\n+#if __cplusplus >= 201103L\n+  template<typename _Iterator, typename _Sequence>\n+    bool\n+    __valid_range(const _Safe_local_iterator<_Iterator, _Sequence>&,\n+\t\t  const _Safe_local_iterator<_Iterator, _Sequence>&);\n+#endif\n+\n   // Fallback method, always ok.\n   template<typename _InputIterator, typename _Size>\n     inline bool\n     __can_advance(_InputIterator, _Size)\n     { return true; }\n \n-  template<typename _Iterator, typename _Sequence, typename _Size>\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _Size>\n     bool\n-    __can_advance(const _Safe_iterator<_Iterator, _Sequence>&, _Size);\n-\n-#if __cplusplus < 201103L\n-  // Helper struct to detect random access safe iterators.\n-  template<typename _Iterator>\n-    struct __is_safe_random_iterator\n-    {\n-      enum { __value = 0 };\n-      typedef std::__false_type __type;\n-    };\n-\n-  template<typename _Iterator>\n-    struct _Siter_base\n-    : std::_Iter_base<_Iterator, __is_safe_random_iterator<_Iterator>::__value>\n-    { };\n+    __can_advance(const _Safe_iterator<_Iterator, _Sequence, _Category>&,\n+\t\t  _Size);\n \n   /** Helper function to extract base iterator of random access safe iterator\n-      in order to reduce performance impact of debug mode.  Limited to random\n-      access iterator because it is the only category for which it is possible\n-      to check for correct iterators order in the __valid_range function\n-      thanks to the < operator.\n-  */\n-  template<typename _Iterator>\n-    inline typename _Siter_base<_Iterator>::iterator_type\n-    __base(_Iterator __it)\n-    { return _Siter_base<_Iterator>::_S_base(__it); }\n-#else\n+   *  in order to reduce performance impact of debug mode.  Limited to random\n+   *  access iterator because it is the only category for which it is possible\n+   *  to check for correct iterators order in the __valid_range function\n+   *  thanks to the < operator.\n+   */\n   template<typename _Iterator>\n     inline _Iterator\n     __base(_Iterator __it)\n     { return __it; }\n-#endif\n \n #if __cplusplus < 201103L\n   template<typename _Iterator>"}, {"sha": "e6df4dc3396ea5e8c8b82fa4372df2de866fc60e", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -57,6 +57,9 @@ namespace __debug\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator>\t_Equal;\n       typedef __gnu_debug::_Not_equal_to<_Base_const_iterator>  _Not_equal;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;"}, {"sha": "f4b4e8d2ad9fe2369e4bb11074fb2e71a05fd9bf", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -56,6 +56,9 @@ namespace __debug\n       typedef typename _Base::iterator\t\t_Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;"}, {"sha": "992ccf07536577d169f332deb8a06a925feee335", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -56,6 +56,9 @@ namespace __debug\n       typedef typename _Base::iterator\t\t_Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;"}, {"sha": "fa747ff9c36a2b7cfb8cda250db8942949f65e65", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -55,6 +55,9 @@ namespace __debug\n       typedef typename _Base::iterator\t\t_Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;"}, {"sha": "86211b9ca3d654cbc5c7ab034f668c92cf8cfc20", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 465, "deletions": 296, "changes": 761, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -44,14 +44,14 @@ namespace __gnu_debug\n   template<typename _Sequence>\n     struct _BeforeBeginHelper\n     {\n-      template<typename _Iterator>\n+      template<typename _Iterator, typename _Category>\n \tstatic bool\n-\t_S_Is(const _Safe_iterator<_Iterator, _Sequence>&)\n+\t_S_Is(const _Safe_iterator<_Iterator, _Sequence, _Category>&)\n \t{ return false; }\n \n-      template<typename _Iterator>\n+      template<typename _Iterator, typename _Category>\n \tstatic bool\n-\t_S_Is_Beginnest(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+\t_S_Is_Beginnest(const _Safe_iterator<_Iterator, _Sequence, _Category>& __it)\n \t{ return __it.base() == __it._M_get_sequence()->_M_base().begin(); }\n     };\n \n@@ -82,22 +82,30 @@ namespace __gnu_debug\n    *  of iterators and it is being detached before _Iterator get\n    *  destroyed. Otherwise it would result in a data race.\n    */\n-  template<typename _Iterator, typename _Sequence>\n+  template<typename _Iterator, typename _Sequence, typename _Category\n+\t   = typename std::iterator_traits<_Iterator>::iterator_category>\n     class _Safe_iterator\n     : private _Iterator,\n       public _Safe_iterator_base\n     {\n       typedef _Iterator _Iter_base;\n       typedef _Safe_iterator_base _Safe_base;\n-      typedef typename _Sequence::const_iterator _Const_iterator;\n \n       typedef std::iterator_traits<_Iterator> _Traits;\n \n+    protected:\n+      typedef std::__are_same<typename _Sequence::_Base::const_iterator,\n+\t\t\t      _Iterator> _IsConstant;\n+\n+      typedef typename __gnu_cxx::__conditional_type<\n+\t_IsConstant::__value,\n+\ttypename _Sequence::_Base::iterator,\n+\ttypename _Sequence::_Base::const_iterator>::__type _OtherIterator;\n+\n       struct _Attach_single\n       { };\n \n-      _Safe_iterator(const _Iterator& __i, _Safe_sequence_base* __seq,\n-\t\t     _Attach_single)\n+      _Safe_iterator(_Iterator __i, _Safe_sequence_base* __seq, _Attach_single)\n       _GLIBCXX_NOEXCEPT\n       : _Iter_base(__i)\n       { _M_attach_single(__seq); }\n@@ -120,7 +128,7 @@ namespace __gnu_debug\n        * @pre @p seq is not NULL\n        * @post this is not singular\n        */\n-      _Safe_iterator(const _Iterator& __i, const _Safe_sequence_base* __seq)\n+      _Safe_iterator(_Iterator __i, const _Safe_sequence_base* __seq)\n       _GLIBCXX_NOEXCEPT\n       : _Iter_base(__i), _Safe_base(__seq, _S_constant())\n       {\n@@ -171,10 +179,11 @@ namespace __gnu_debug\n       */\n       template<typename _MutableIterator>\n \t_Safe_iterator(\n-\t  const _Safe_iterator<_MutableIterator,\n-\t  typename __gnu_cxx::__enable_if<(std::__are_same<_MutableIterator,\n-\t\t      typename _Sequence::iterator::iterator_type>::__value),\n-\t\t   _Sequence>::__type>& __x) _GLIBCXX_NOEXCEPT\n+\t  const _Safe_iterator<_MutableIterator, _Sequence,\n+\t  typename __gnu_cxx::__enable_if<_IsConstant::__value &&\n+\t    std::__are_same<_MutableIterator, _OtherIterator>::__value,\n+\t\t\t\t\t  _Category>::__type>& __x)\n+\t_GLIBCXX_NOEXCEPT\n \t: _Iter_base(__x.base())\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -309,93 +318,12 @@ namespace __gnu_debug\n \treturn _Safe_iterator(base()++, this->_M_sequence, _Attach_single());\n       }\n \n-      // ------ Bidirectional iterator requirements ------\n-      /**\n-       *  @brief Iterator predecrement\n-       *  @pre iterator is decrementable\n-       */\n-      _Safe_iterator&\n-      operator--() _GLIBCXX_NOEXCEPT\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n-\t\t\t      _M_message(__msg_bad_dec)\n-\t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\t--base();\n-\treturn *this;\n-      }\n-\n-      /**\n-       *  @brief Iterator postdecrement\n-       *  @pre iterator is decrementable\n-       */\n-      _Safe_iterator\n-      operator--(int) _GLIBCXX_NOEXCEPT\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n-\t\t\t      _M_message(__msg_bad_dec)\n-\t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\treturn _Safe_iterator(base()--, this->_M_sequence, _Attach_single());\n-      }\n-\n-      // ------ Random access iterator requirements ------\n-      reference\n-      operator[](const difference_type& __n) const _GLIBCXX_NOEXCEPT\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n)\n-\t\t\t      && this->_M_can_advance(__n+1),\n-\t\t\t      _M_message(__msg_iter_subscript_oob)\n-\t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\treturn base()[__n];\n-      }\n-\n-      _Safe_iterator&\n-      operator+=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n-\t\t\t      _M_message(__msg_advance_oob)\n-\t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\tbase() += __n;\n-\treturn *this;\n-      }\n-\n-      _Safe_iterator\n-      operator+(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n-\t\t\t      _M_message(__msg_advance_oob)\n-\t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\treturn _Safe_iterator(base() + __n, this->_M_sequence);\n-      }\n-\n-      _Safe_iterator&\n-      operator-=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n-\t\t\t      _M_message(__msg_retreat_oob)\n-\t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\tbase() -= __n;\n-\treturn *this;\n-      }\n-\n-      _Safe_iterator\n-      operator-(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n-\t\t\t      _M_message(__msg_retreat_oob)\n-\t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\treturn _Safe_iterator(base() - __n, this->_M_sequence);\n-      }\n-\n       // ------ Utilities ------\n \n       /// Determine if this is a constant iterator.\n-      static bool\n+      static _GLIBCXX_CONSTEXPR bool\n       _S_constant()\n-      { return std::__are_same<_Const_iterator, _Safe_iterator>::__value; }\n+      { return _IsConstant::__value; }\n \n       /**\n        * @brief Return the underlying iterator\n@@ -444,10 +372,6 @@ namespace __gnu_debug\n       _M_incrementable() const\n       { return !this->_M_singular() && !_M_is_end(); }\n \n-      // Is the iterator decrementable?\n-      bool\n-      _M_decrementable() const { return !_M_singular() && !_M_is_begin(); }\n-\n       // Can we advance the iterator @p __n steps (@p __n may be negative)\n       bool\n       _M_can_advance(const difference_type& __n) const;\n@@ -459,14 +383,23 @@ namespace __gnu_debug\n \t\t     bool __check_dereferenceable = true) const;\n \n       // The sequence this iterator references.\n-      typename\n-      __gnu_cxx::__conditional_type<std::__are_same<_Const_iterator,\n-\t\t\t\t\t\t    _Safe_iterator>::__value,\n-\t\t\t\t    const _Sequence*,\n-\t\t\t\t    _Sequence*>::__type\n+      typename __gnu_cxx::__conditional_type<\n+\t_IsConstant::__value, const _Sequence*, _Sequence*>::__type\n       _M_get_sequence() const\n       { return static_cast<_Sequence*>(_M_sequence); }\n \n+      // Get distance to __rhs.\n+      typename _Distance_traits<_Iterator>::__type\n+      _M_get_distance_to(const _Safe_iterator& __rhs) const;\n+\n+      // Get distance from sequence begin up to *this.\n+      typename _Distance_traits<_Iterator>::__type\n+      _M_get_distance_from_begin() const;\n+\n+      // Get distance from *this to sequence end.\n+      typename _Distance_traits<_Iterator>::__type\n+      _M_get_distance_to_end() const;\n+\n       /// Is this iterator equal to the sequence's begin() iterator?\n       bool\n       _M_is_begin() const\n@@ -490,13 +423,346 @@ namespace __gnu_debug\n       { return _BeforeBeginHelper<_Sequence>::_S_Is_Beginnest(*this); }\n     };\n \n+  template<typename _Iterator, typename _Sequence>\n+    class _Safe_iterator<_Iterator, _Sequence, std::bidirectional_iterator_tag>\n+    : public _Safe_iterator<_Iterator, _Sequence, std::forward_iterator_tag>\n+    {\n+      typedef _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t     std::forward_iterator_tag> _Safe_base;\n+\n+    protected:\n+      typedef typename _Safe_base::_OtherIterator _OtherIterator;\n+      typedef typename _Safe_base::_Attach_single _Attach_single;\n+\n+      _Safe_iterator(_Iterator __i, _Safe_sequence_base* __seq, _Attach_single)\n+      _GLIBCXX_NOEXCEPT\n+      : _Safe_base(__i, __seq, _Attach_single())\n+      { }\n+\n+    public:\n+      /// @post the iterator is singular and unattached\n+      _Safe_iterator() _GLIBCXX_NOEXCEPT { }\n+\n+      /**\n+       * @brief Safe iterator construction from an unsafe iterator and\n+       * its sequence.\n+       *\n+       * @pre @p seq is not NULL\n+       * @post this is not singular\n+       */\n+      _Safe_iterator(_Iterator __i, const _Safe_sequence_base* __seq)\n+      _GLIBCXX_NOEXCEPT\n+      : _Safe_base(__i, __seq)\n+      { }\n+\n+      /**\n+       * @brief Copy construction.\n+       */\n+      _Safe_iterator(const _Safe_iterator& __x) _GLIBCXX_NOEXCEPT\n+      : _Safe_base(__x)\n+      { }\n+\n+#if __cplusplus >= 201103L\n+      /** @brief Move construction. */\n+      _Safe_iterator(_Safe_iterator&&) = default;\n+#endif\n+\n+      /**\n+       *  @brief Converting constructor from a mutable iterator to a\n+       *  constant iterator.\n+      */\n+      template<typename _MutableIterator>\n+\t_Safe_iterator(\n+\t  const _Safe_iterator<_MutableIterator, _Sequence,\n+\t  typename __gnu_cxx::__enable_if<_Safe_base::_IsConstant::__value &&\n+\t    std::__are_same<_MutableIterator, _OtherIterator>::__value,\n+\t\t\t       std::bidirectional_iterator_tag>::__type>& __x)\n+\t_GLIBCXX_NOEXCEPT\n+\t: _Safe_base(__x)\n+        { }\n+\n+#if __cplusplus >= 201103L\n+      /** @brief Copy assignment. */\n+      _Safe_iterator&\n+      operator=(const _Safe_iterator&) = default;\n+\n+      /** @brief Move assignment. */\n+      _Safe_iterator&\n+      operator=(_Safe_iterator&&) = default;\n+#else\n+      /** @brief Copy assignment. */\n+      _Safe_iterator&\n+      operator=(const _Safe_iterator& __x)\n+      {\n+\t_Safe_base::operator=(__x);\n+\treturn *this;\n+      }\n+#endif\n+\n+      // ------ Input iterator requirements ------\n+      /**\n+       *  @brief Iterator preincrement\n+       *  @pre iterator is incrementable\n+       */\n+      _Safe_iterator&\n+      operator++() _GLIBCXX_NOEXCEPT\n+      {\n+\t_Safe_base::operator++();\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief Iterator postincrement\n+       *  @pre iterator is incrementable\n+       */\n+      _Safe_iterator\n+      operator++(int) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n+\t\t\t      _M_message(__msg_bad_inc)\n+\t\t\t      ._M_iterator(*this, \"this\"));\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\treturn _Safe_iterator(this->base()++, this->_M_sequence,\n+\t\t\t      _Attach_single());\n+      }\n+\n+      // ------ Bidirectional iterator requirements ------\n+      /**\n+       *  @brief Iterator predecrement\n+       *  @pre iterator is decrementable\n+       */\n+      _Safe_iterator&\n+      operator--() _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n+\t\t\t      _M_message(__msg_bad_dec)\n+\t\t\t      ._M_iterator(*this, \"this\"));\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\t--this->base();\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief Iterator postdecrement\n+       *  @pre iterator is decrementable\n+       */\n+      _Safe_iterator\n+      operator--(int) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n+\t\t\t      _M_message(__msg_bad_dec)\n+\t\t\t      ._M_iterator(*this, \"this\"));\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\treturn _Safe_iterator(this->base()--, this->_M_sequence,\n+\t\t\t      _Attach_single());\n+      }\n+\n+      // ------ Utilities ------\n+\n+      // Is the iterator decrementable?\n+      bool\n+      _M_decrementable() const\n+      { return !this->_M_singular() && !this->_M_is_begin(); }\n+    };\n+\n+  template<typename _Iterator, typename _Sequence>\n+    class _Safe_iterator<_Iterator, _Sequence, std::random_access_iterator_tag>\n+    : public _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t    std::bidirectional_iterator_tag>\n+    {\n+      typedef _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t     std::bidirectional_iterator_tag> _Safe_base;\n+      typedef typename _Safe_base::_OtherIterator _OtherIterator;\n+\n+      typedef typename _Safe_base::_Attach_single _Attach_single;\n+\n+      _Safe_iterator(_Iterator __i, _Safe_sequence_base* __seq, _Attach_single)\n+      _GLIBCXX_NOEXCEPT\n+      : _Safe_base(__i, __seq, _Attach_single())\n+      { }\n+\n+    public:\n+      typedef typename _Safe_base::difference_type\tdifference_type;\n+      typedef typename _Safe_base::reference\t\treference;\n+\n+      /// @post the iterator is singular and unattached\n+      _Safe_iterator() _GLIBCXX_NOEXCEPT { }\n+\n+      /**\n+       * @brief Safe iterator construction from an unsafe iterator and\n+       * its sequence.\n+       *\n+       * @pre @p seq is not NULL\n+       * @post this is not singular\n+       */\n+      _Safe_iterator(_Iterator __i, const _Safe_sequence_base* __seq)\n+      _GLIBCXX_NOEXCEPT\n+      : _Safe_base(__i, __seq)\n+      { }\n+\n+      /**\n+       * @brief Copy construction.\n+       */\n+      _Safe_iterator(const _Safe_iterator& __x) _GLIBCXX_NOEXCEPT\n+      : _Safe_base(__x)\n+      { }\n+\n+#if __cplusplus >= 201103L\n+      /** @brief Move construction. */\n+      _Safe_iterator(_Safe_iterator&&) = default;\n+#endif\n+\n+      /**\n+       *  @brief Converting constructor from a mutable iterator to a\n+       *  constant iterator.\n+      */\n+      template<typename _MutableIterator>\n+\t_Safe_iterator(\n+\t  const _Safe_iterator<_MutableIterator, _Sequence,\n+\t    typename __gnu_cxx::__enable_if<_Safe_base::_IsConstant::__value &&\n+\t      std::__are_same<_MutableIterator, _OtherIterator>::__value,\n+\t\t\t       std::random_access_iterator_tag>::__type>& __x)\n+\t_GLIBCXX_NOEXCEPT\n+\t: _Safe_base(__x)\n+        { }\n+\n+#if __cplusplus >= 201103L\n+      /** @brief Copy assignment. */\n+      _Safe_iterator&\n+      operator=(const _Safe_iterator&) = default;\n+\n+      /** @brief Move assignment. */\n+      _Safe_iterator&\n+      operator=(_Safe_iterator&&) = default;\n+#else\n+      /** @brief Copy assignment. */\n+      _Safe_iterator&\n+      operator=(const _Safe_iterator& __x)\n+      {\n+\t_Safe_base::operator=(__x);\n+\treturn *this;\n+      }\n+#endif\n+\n+      // Is the iterator range [*this, __rhs) valid?\n+      bool\n+      _M_valid_range(const _Safe_iterator& __rhs,\n+\t\t     std::pair<difference_type,\n+\t\t\t       _Distance_precision>& __dist) const;\n+\n+      // ------ Input iterator requirements ------\n+      /**\n+       *  @brief Iterator preincrement\n+       *  @pre iterator is incrementable\n+       */\n+      _Safe_iterator&\n+      operator++() _GLIBCXX_NOEXCEPT\n+      {\n+\t_Safe_base::operator++();\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief Iterator postincrement\n+       *  @pre iterator is incrementable\n+       */\n+      _Safe_iterator\n+      operator++(int) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n+\t\t\t      _M_message(__msg_bad_inc)\n+\t\t\t      ._M_iterator(*this, \"this\"));\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\treturn _Safe_iterator(this->base()++, this->_M_sequence,\n+\t\t\t      _Attach_single());\n+      }\n+\n+      // ------ Bidirectional iterator requirements ------\n+      /**\n+       *  @brief Iterator predecrement\n+       *  @pre iterator is decrementable\n+       */\n+      _Safe_iterator&\n+      operator--() _GLIBCXX_NOEXCEPT\n+      {\n+\t_Safe_base::operator--();\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief Iterator postdecrement\n+       *  @pre iterator is decrementable\n+       */\n+      _Safe_iterator\n+      operator--(int) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n+\t\t\t      _M_message(__msg_bad_dec)\n+\t\t\t      ._M_iterator(*this, \"this\"));\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\treturn _Safe_iterator(this->base()--, this->_M_sequence,\n+\t\t\t      _Attach_single());\n+      }\n+\n+      // ------ Random access iterator requirements ------\n+      reference\n+      operator[](const difference_type& __n) const _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n)\n+\t\t\t      && this->_M_can_advance(__n + 1),\n+\t\t\t      _M_message(__msg_iter_subscript_oob)\n+\t\t\t      ._M_iterator(*this)._M_integer(__n));\n+\treturn this->base()[__n];\n+      }\n+\n+      _Safe_iterator&\n+      operator+=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n+\t\t\t      _M_message(__msg_advance_oob)\n+\t\t\t      ._M_iterator(*this)._M_integer(__n));\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\tthis->base() += __n;\n+\treturn *this;\n+      }\n+\n+      _Safe_iterator\n+      operator+(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n+\t\t\t      _M_message(__msg_advance_oob)\n+\t\t\t      ._M_iterator(*this)._M_integer(__n));\n+\treturn _Safe_iterator(this->base() + __n, this->_M_sequence);\n+      }\n+\n+      _Safe_iterator&\n+      operator-=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n+\t\t\t      _M_message(__msg_retreat_oob)\n+\t\t\t      ._M_iterator(*this)._M_integer(__n));\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n+\tthis->base() -= __n;\n+\treturn *this;\n+      }\n+\n+      _Safe_iterator\n+      operator-(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n+\t\t\t      _M_message(__msg_retreat_oob)\n+\t\t\t      ._M_iterator(*this)._M_integer(__n));\n+\treturn _Safe_iterator(this->base() - __n, this->_M_sequence);\n+      }\n+    };\n+\n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator==(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -513,7 +779,7 @@ namespace __gnu_debug\n \t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -530,7 +796,7 @@ namespace __gnu_debug\n \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -547,7 +813,7 @@ namespace __gnu_debug\n \t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -560,11 +826,13 @@ namespace __gnu_debug\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n-    operator<(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-\t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    operator<(const _Safe_iterator<_IteratorL, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n+\t      const _Safe_iterator<_IteratorR, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -577,11 +845,13 @@ namespace __gnu_debug\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n-    operator<(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n-\t      const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    operator<(const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n+\t      const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -594,11 +864,13 @@ namespace __gnu_debug\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n-    operator<=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    operator<=(const _Safe_iterator<_IteratorL, _Sequence,\n+\t\t\t\t    std::random_access_iterator_tag>& __lhs,\n+\t       const _Safe_iterator<_IteratorR, _Sequence,\n+\t\t\t\t    std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -611,11 +883,13 @@ namespace __gnu_debug\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n-    operator<=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    operator<=(const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t    std::random_access_iterator_tag>& __lhs,\n+\t       const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t    std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -628,11 +902,13 @@ namespace __gnu_debug\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n-    operator>(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-\t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    operator>(const _Safe_iterator<_IteratorL, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n+\t      const _Safe_iterator<_IteratorR, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -645,11 +921,13 @@ namespace __gnu_debug\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n-    operator>(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n-\t      const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    operator>(const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n+\t      const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -662,11 +940,13 @@ namespace __gnu_debug\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n-    operator>=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    operator>=(const _Safe_iterator<_IteratorL, _Sequence,\n+\t\t\t\t    std::random_access_iterator_tag>& __lhs,\n+\t       const _Safe_iterator<_IteratorR, _Sequence,\n+\t\t\t\t    std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -679,11 +959,13 @@ namespace __gnu_debug\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n-    operator>=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    operator>=(const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t    std::random_access_iterator_tag>& __lhs,\n+\t       const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t    std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -699,12 +981,15 @@ namespace __gnu_debug\n   // operators but also operator- must accept mixed iterator/const_iterator\n   // parameters.\n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline typename _Safe_iterator<_IteratorL, _Sequence>::difference_type\n-    operator-(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-\t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    inline typename _Safe_iterator<_IteratorL, _Sequence,\n+\t\t\tstd::random_access_iterator_tag>::difference_type\n+    operator-(const _Safe_iterator<_IteratorL, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n+\t      const _Safe_iterator<_IteratorR, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_distance_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -715,185 +1000,69 @@ namespace __gnu_debug\n       return __lhs.base() - __rhs.base();\n     }\n \n-   template<typename _Iterator, typename _Sequence>\n-     inline typename _Safe_iterator<_Iterator, _Sequence>::difference_type\n-     operator-(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+  template<typename _Iterator, typename _Sequence>\n+    inline typename _Safe_iterator<_Iterator, _Sequence,\n+\t\t\tstd::random_access_iterator_tag>::difference_type\n+    operator-(const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n+\t      const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n     _GLIBCXX_NOEXCEPT\n-     {\n-       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n-\t\t\t     _M_message(__msg_distance_bad)\n-\t\t\t     ._M_iterator(__lhs, \"lhs\")\n-\t\t\t     ._M_iterator(__rhs, \"rhs\"));\n-       _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t     _M_message(__msg_distance_different)\n-\t\t\t     ._M_iterator(__lhs, \"lhs\")\n-\t\t\t     ._M_iterator(__rhs, \"rhs\"));\n-       return __lhs.base() - __rhs.base();\n-     }\n+    {\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n+\t\t\t    _M_message(__msg_distance_bad)\n+\t\t\t    ._M_iterator(__lhs, \"lhs\")\n+\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n+      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n+\t\t\t    _M_message(__msg_distance_different)\n+\t\t\t    ._M_iterator(__lhs, \"lhs\")\n+\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n+      return __lhs.base() - __rhs.base();\n+    }\n \n   template<typename _Iterator, typename _Sequence>\n-    inline _Safe_iterator<_Iterator, _Sequence>\n-    operator+(typename _Safe_iterator<_Iterator,_Sequence>::difference_type __n,\n-\t      const _Safe_iterator<_Iterator, _Sequence>& __i) _GLIBCXX_NOEXCEPT\n+    inline _Safe_iterator<_Iterator, _Sequence, std::random_access_iterator_tag>\n+    operator+(typename _Safe_iterator<_Iterator,_Sequence,\n+\t\tstd::random_access_iterator_tag>::difference_type __n,\n+\t      const _Safe_iterator<_Iterator, _Sequence,\n+\t\tstd::random_access_iterator_tag>& __i)\n+    _GLIBCXX_NOEXCEPT\n     { return __i + __n; }\n \n-  /** Safe iterators know if they are dereferenceable. */\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    __check_dereferenceable(const _Safe_iterator<_Iterator, _Sequence>& __x)\n-    { return __x._M_dereferenceable(); }\n-\n   /** Safe iterators know how to check if they form a valid range. */\n-  template<typename _Iterator, typename _Sequence>\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n     inline bool\n-    __valid_range(const _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t  const _Safe_iterator<_Iterator, _Sequence>& __last,\n+    __valid_range(const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t       _Category>& __first,\n+\t\t  const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t       _Category>& __last,\n \t\t  typename _Distance_traits<_Iterator>::__type& __dist)\n     { return __first._M_valid_range(__last, __dist); }\n \n-  /** Safe iterators can help to get better distance knowledge. */\n-  template<typename _Iterator, typename _Sequence>\n-    inline typename _Distance_traits<_Iterator>::__type\n-    __get_distance(const _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t   const _Safe_iterator<_Iterator, _Sequence>& __last,\n-\t\t   std::random_access_iterator_tag)\n-    { return std::make_pair(__last.base() - __first.base(), __dp_exact); }\n-\n-  template<typename _Iterator, typename _Sequence>\n-    inline typename _Distance_traits<_Iterator>::__type\n-    __get_distance(const _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t   const _Safe_iterator<_Iterator, _Sequence>& __last,\n-\t\t   std::input_iterator_tag)\n-    {\n-      typedef typename _Distance_traits<_Iterator>::__type _Diff;\n-      typedef _Sequence_traits<_Sequence> _SeqTraits;\n-\n-      if (__first.base() == __last.base())\n-\treturn std::make_pair(0, __dp_exact);\n-\n-      if (__first._M_is_before_begin())\n-\t{\n-\t  if (__last._M_is_begin())\n-\t    return std::make_pair(1, __dp_exact);\n-\n-\t  return std::make_pair(1, __dp_sign);\n-\t}\n-\n-      if (__first._M_is_begin())\n-\t{\n-\t  if (__last._M_is_before_begin())\n-\t    return std::make_pair(-1, __dp_exact);\n-\n-\t  if (__last._M_is_end())\n-\t    return _SeqTraits::_S_size(*__first._M_get_sequence());\n-\n-\t  return std::make_pair(1, __dp_sign);\n-\t}\n-\n-      if (__first._M_is_end())\n-\t{\n-\t  if (__last._M_is_before_begin())\n-\t    return std::make_pair(-1, __dp_exact);\n-\n-\t  if (__last._M_is_begin())\n-\t    {\n-\t      _Diff __diff = _SeqTraits::_S_size(*__first._M_get_sequence());\n-\t      return std::make_pair(-__diff.first, __diff.second);\n-\t    }\n-\n-\t  return std::make_pair(-1, __dp_sign);\n-\t}\n-\n-      if (__last._M_is_before_begin() || __last._M_is_begin())\n-\treturn std::make_pair(-1, __dp_sign);\n-\n-      if (__last._M_is_end())\n-\treturn std::make_pair(1, __dp_sign);\n-\n-      return std::make_pair(1, __dp_equality);\n-    }\n-\n-  // Get distance from sequence begin to specified iterator.\n-  template<typename _Iterator, typename _Sequence>\n-    inline typename _Distance_traits<_Iterator>::__type\n-    __get_distance_from_begin(const _Safe_iterator<_Iterator, _Sequence>& __it)\n-    {\n-      typedef _Sequence_traits<_Sequence> _SeqTraits;\n-\n-      // No need to consider before_begin as this function is only used in\n-      // _M_can_advance which won't be used for forward_list iterators.\n-      if (__it._M_is_begin())\n-\treturn std::make_pair(0, __dp_exact);\n-\n-      if (__it._M_is_end())\n-\treturn _SeqTraits::_S_size(*__it._M_get_sequence());\n-\n-      typename _Distance_traits<_Iterator>::__type __res\n-\t= __get_distance(__it._M_get_sequence()->_M_base().begin(), __it.base());\n-\n-      if (__res.second == __dp_equality)\n-\treturn std::make_pair(1, __dp_sign);\n-\n-      return __res;\n-    }\n-\n-  // Get distance from specified iterator to sequence end.\n-  template<typename _Iterator, typename _Sequence>\n-    inline typename _Distance_traits<_Iterator>::__type\n-    __get_distance_to_end(const _Safe_iterator<_Iterator, _Sequence>& __it)\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n+    inline bool\n+    __valid_range(const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t       _Category>& __first,\n+\t\t  const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\t       _Category>& __last)\n     {\n-      typedef _Sequence_traits<_Sequence> _SeqTraits;\n-\n-      // No need to consider before_begin as this function is only used in\n-      // _M_can_advance which won't be used for forward_list iterators.\n-      if (__it._M_is_begin())\n-\treturn _SeqTraits::_S_size(*__it._M_get_sequence());\n-\n-      if (__it._M_is_end())\n-\treturn std::make_pair(0, __dp_exact);\n-\n-      typename _Distance_traits<_Iterator>::__type __res\n-\t= __get_distance(__it.base(), __it._M_get_sequence()->_M_base().end());\n-\n-      if (__res.second == __dp_equality)\n-\treturn std::make_pair(1, __dp_sign);\n-\n-      return __res;\n+      typename _Distance_traits<_Iterator>::__type __dist;\n+      return __first._M_valid_range(__last, __dist);\n     }\n \n-  template<typename _Iterator, typename _Sequence, typename _Size>\n+  template<typename _Iterator, typename _Sequence, typename _Category,\n+\t   typename _Size>\n     inline bool\n-    __can_advance(const _Safe_iterator<_Iterator, _Sequence>& __it, _Size __n)\n+    __can_advance(const _Safe_iterator<_Iterator, _Sequence, _Category>& __it,\n+\t\t  _Size __n)\n     { return __it._M_can_advance(__n); }\n \n-#if __cplusplus < 201103L\n-  template<typename _Iterator, typename _Sequence>\n-    struct __is_safe_random_iterator<_Safe_iterator<_Iterator, _Sequence> >\n-    : std::__are_same<std::random_access_iterator_tag,\n-                      typename std::iterator_traits<_Iterator>::\n-\t\t      iterator_category>\n-    { };\n-#else\n   template<typename _Iterator, typename _Sequence>\n     _Iterator\n-    __base(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t   std::random_access_iterator_tag)\n+    __base(const _Safe_iterator<_Iterator, _Sequence,\n+\t\t\t\tstd::random_access_iterator_tag>& __it)\n     { return __it.base(); }\n \n-  template<typename _Iterator, typename _Sequence>\n-    const _Safe_iterator<_Iterator, _Sequence>&\n-    __base(const _Safe_iterator<_Iterator, _Sequence>& __it,\n-\t   std::input_iterator_tag)\n-    { return __it; }\n-\n-  template<typename _Iterator, typename _Sequence>\n-    auto\n-    __base(const _Safe_iterator<_Iterator, _Sequence>& __it)\n-    -> decltype(__base(__it, std::__iterator_category(__it)))\n-    { return __base(__it, std::__iterator_category(__it)); }\n-#endif\n-\n #if __cplusplus < 201103L\n   template<typename _Iterator, typename _Sequence>\n     struct _Unsafe_type<_Safe_iterator<_Iterator, _Sequence> >"}, {"sha": "2841583667fdc6e5a15adaaac45240f86bd0ff35", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 127, "deletions": 7, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -31,9 +31,57 @@\n \n namespace __gnu_debug\n {\n-  template<typename _Iterator, typename _Sequence>\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n+    typename _Distance_traits<_Iterator>::__type\n+    _Safe_iterator<_Iterator, _Sequence, _Category>::\n+    _M_get_distance_from_begin() const\n+    {\n+      typedef _Sequence_traits<_Sequence> _SeqTraits;\n+\n+      // No need to consider before_begin as this function is only used in\n+      // _M_can_advance which won't be used for forward_list iterators.\n+      if (_M_is_begin())\n+\treturn std::make_pair(0, __dp_exact);\n+\n+      if (_M_is_end())\n+\treturn _SeqTraits::_S_size(*_M_get_sequence());\n+\n+      typename _Distance_traits<_Iterator>::__type __res\n+\t= __get_distance(_M_get_sequence()->_M_base().begin(), base());\n+\n+      if (__res.second == __dp_equality)\n+\treturn std::make_pair(1, __dp_sign);\n+\n+      return __res;\n+    }\n+\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n+    typename _Distance_traits<_Iterator>::__type\n+    _Safe_iterator<_Iterator, _Sequence, _Category>::\n+    _M_get_distance_to_end() const\n+    {\n+      typedef _Sequence_traits<_Sequence> _SeqTraits;\n+\n+      // No need to consider before_begin as this function is only used in\n+      // _M_can_advance which won't be used for forward_list iterators.\n+      if (_M_is_begin())\n+\treturn _SeqTraits::_S_size(*_M_get_sequence());\n+\n+      if (_M_is_end())\n+\treturn std::make_pair(0, __dp_exact);\n+\n+      typename _Distance_traits<_Iterator>::__type __res\n+\t= __get_distance(base(), _M_get_sequence()->_M_base().end());\n+\n+      if (__res.second == __dp_equality)\n+\treturn std::make_pair(1, __dp_sign);\n+\n+      return __res;\n+    }\n+\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n     bool\n-    _Safe_iterator<_Iterator, _Sequence>::\n+    _Safe_iterator<_Iterator, _Sequence, _Category>::\n     _M_can_advance(const difference_type& __n) const\n     {\n       if (this->_M_singular())\n@@ -45,24 +93,77 @@ namespace __gnu_debug\n       if (__n < 0)\n \t{\n \t  std::pair<difference_type, _Distance_precision> __dist =\n-\t    __get_distance_from_begin(*this);\n+\t    _M_get_distance_from_begin();\n \t  bool __ok =  ((__dist.second == __dp_exact && __dist.first >= -__n)\n \t\t\t|| (__dist.second != __dp_exact && __dist.first > 0));\n \t  return __ok;\n \t}\n       else\n \t{\n \t  std::pair<difference_type, _Distance_precision> __dist =\n-\t    __get_distance_to_end(*this);\n+\t    _M_get_distance_to_end();\n \t  bool __ok = ((__dist.second == __dp_exact && __dist.first >= __n)\n \t\t       || (__dist.second != __dp_exact && __dist.first > 0));\n \t  return __ok;\n \t}\n     }\n \n-  template<typename _Iterator, typename _Sequence>\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n+    typename _Distance_traits<_Iterator>::__type\n+    _Safe_iterator<_Iterator, _Sequence, _Category>::\n+    _M_get_distance_to(const _Safe_iterator& __rhs) const\n+    {\n+      typedef typename _Distance_traits<_Iterator>::__type _Diff;\n+      typedef _Sequence_traits<_Sequence> _SeqTraits;\n+\n+      if (this->base() == __rhs.base())\n+\treturn std::make_pair(0, __dp_exact);\n+\n+      if (this->_M_is_before_begin())\n+\t{\n+\t  if (__rhs._M_is_begin())\n+\t    return std::make_pair(1, __dp_exact);\n+\n+\t  return std::make_pair(1, __dp_sign);\n+\t}\n+\n+      if (this->_M_is_begin())\n+\t{\n+\t  if (__rhs._M_is_before_begin())\n+\t    return std::make_pair(-1, __dp_exact);\n+\n+\t  if (__rhs._M_is_end())\n+\t    return _SeqTraits::_S_size(*this->_M_get_sequence());\n+\n+\t  return std::make_pair(1, __dp_sign);\n+\t}\n+\n+      if (this->_M_is_end())\n+\t{\n+\t  if (__rhs._M_is_before_begin())\n+\t    return std::make_pair(-1, __dp_exact);\n+\n+\t  if (__rhs._M_is_begin())\n+\t    {\n+\t      _Diff __diff = _SeqTraits::_S_size(*this->_M_get_sequence());\n+\t      return std::make_pair(-__diff.first, __diff.second);\n+\t    }\n+\n+\t  return std::make_pair(-1, __dp_sign);\n+\t}\n+\n+      if (__rhs._M_is_before_begin() || __rhs._M_is_begin())\n+\treturn std::make_pair(-1, __dp_sign);\n+\n+      if (__rhs._M_is_end())\n+\treturn std::make_pair(1, __dp_sign);\n+\n+      return std::make_pair(1, __dp_equality);\n+    }\n+\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n     bool\n-    _Safe_iterator<_Iterator, _Sequence>::\n+    _Safe_iterator<_Iterator, _Sequence, _Category>::\n     _M_valid_range(const _Safe_iterator& __rhs,\n \t\t   std::pair<difference_type, _Distance_precision>& __dist,\n \t\t   bool __check_dereferenceable) const\n@@ -71,7 +172,7 @@ namespace __gnu_debug\n \treturn false;\n \n       /* Determine iterators order */\n-      __dist = __get_distance(*this, __rhs);\n+      __dist = _M_get_distance_to(__rhs);\n       switch (__dist.second)\n \t{\n \tcase __dp_equality:\n@@ -90,6 +191,25 @@ namespace __gnu_debug\n       // Assume that this is a valid range; we can't check anything else.\n       return true;\n     }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    bool\n+    _Safe_iterator<_Iterator, _Sequence, std::random_access_iterator_tag>::\n+    _M_valid_range(const _Safe_iterator& __rhs,\n+\t\t   std::pair<difference_type,\n+\t\t\t     _Distance_precision>& __dist) const\n+    {\n+      if (!this->_M_can_compare(__rhs))\n+\treturn false;\n+\n+      /* Determine iterators order */\n+      __dist = std::make_pair(__rhs.base() - this->base(), __dp_exact);\n+\n+      // If range is not empty first iterator must be dereferenceable.\n+      if (__dist.first > 0)\n+\treturn this->_M_dereferenceable();\n+      return __dist.first == 0;\n+    }\n } // namespace __gnu_debug\n \n #endif"}, {"sha": "854518848f9207dced99b3d2e38ee5b0f92d40aa", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 30, "deletions": 68, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -51,15 +51,24 @@ namespace __gnu_debug\n     {\n       typedef _Iterator _Iter_base;\n       typedef _Safe_local_iterator_base _Safe_base;\n-      typedef typename _Sequence::const_local_iterator _Const_local_iterator;\n+\n       typedef typename _Sequence::size_type size_type;\n \n       typedef std::iterator_traits<_Iterator> _Traits;\n \n+      typedef std::__are_same<\n+\ttypename _Sequence::_Base::const_local_iterator,\n+\t_Iterator> _IsConstant;\n+\n+      typedef typename __gnu_cxx::__conditional_type<_IsConstant::__value,\n+\ttypename _Sequence::_Base::local_iterator,\n+\ttypename _Sequence::_Base::const_local_iterator>::__type\n+      _OtherIterator;\n+\n       struct _Attach_single\n       { };\n \n-      _Safe_local_iterator(const _Iterator& __i, _Safe_sequence_base* __cont,\n+      _Safe_local_iterator(_Iterator __i, _Safe_sequence_base* __cont,\n \t\t\t   _Attach_single) noexcept\n       : _Iter_base(__i)\n       { _M_attach_single(__cont); }\n@@ -82,8 +91,7 @@ namespace __gnu_debug\n        * @pre @p seq is not NULL\n        * @post this is not singular\n        */\n-      _Safe_local_iterator(const _Iterator& __i,\n-\t\t\t   const _Safe_sequence_base* __cont)\n+      _Safe_local_iterator(_Iterator __i, const _Safe_sequence_base* __cont)\n       : _Iter_base(__i), _Safe_base(__cont, _S_constant())\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n@@ -132,16 +140,15 @@ namespace __gnu_debug\n       template<typename _MutableIterator>\n \t_Safe_local_iterator(\n \t  const _Safe_local_iterator<_MutableIterator,\n-\t  typename __gnu_cxx::__enable_if<std::__are_same<\n-\t      _MutableIterator,\n-\t      typename _Sequence::local_iterator::iterator_type>::__value,\n-\t\t\t\t\t  _Sequence>::__type>& __x)\n+\t  typename __gnu_cxx::__enable_if<_IsConstant::__value &&\n+\t    std::__are_same<_MutableIterator, _OtherIterator>::__value,\n+\t\t\t\t\t  _Sequence>::__type>& __x) noexcept\n \t: _Iter_base(__x.base())\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t  _GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t\t|| __x.base() == _Iterator(),\n+\t\t\t\t|| __x.base() == _MutableIterator(),\n \t\t\t\t_M_message(__msg_init_const_singular)\n \t\t\t\t._M_iterator(*this, \"this\")\n \t\t\t\t._M_iterator(__x, \"other\"));\n@@ -272,12 +279,9 @@ namespace __gnu_debug\n       // ------ Utilities ------\n \n       /// Determine if this is a constant iterator.\n-      static bool\n+      static constexpr bool\n       _S_constant()\n-      {\n-\treturn std::__are_same<_Const_local_iterator,\n-\t\t\t       _Safe_local_iterator>::__value;\n-      }\n+      { return _IsConstant::__value; }\n \n       /**\n        * @brief Return the underlying iterator\n@@ -326,12 +330,13 @@ namespace __gnu_debug\n \t\t     std::pair<difference_type,\n \t\t\t       _Distance_precision>& __dist_info) const;\n \n+      // Get distance to __rhs.\n+      typename _Distance_traits<_Iterator>::__type\n+      _M_get_distance_to(const _Safe_local_iterator& __rhs) const;\n+\n       // The sequence this iterator references.\n-      typename\n-      __gnu_cxx::__conditional_type<std::__are_same<_Const_local_iterator,\n-\t\t\t\t\t\t    _Safe_local_iterator>::__value,\n-\t\t\t\t    const _Sequence*,\n-\t\t\t\t    _Sequence*>::__type\n+      typename __gnu_cxx::__conditional_type<\n+\t_IsConstant::__value, const _Sequence*, _Sequence*>::__type\n       _M_get_sequence() const\n       { return static_cast<_Sequence*>(_M_sequence); }\n \n@@ -396,7 +401,7 @@ namespace __gnu_debug\n     operator!=(const _Safe_local_iterator<_IteratorL, _Sequence>& __lhs,\n \t       const _Safe_local_iterator<_IteratorR, _Sequence>& __rhs)\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -431,13 +436,6 @@ namespace __gnu_debug\n       return __lhs.base() != __rhs.base();\n     }\n \n-  /** Safe local iterators know if they are dereferenceable. */\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    __check_dereferenceable(const _Safe_local_iterator<_Iterator,\n-\t\t\t\t\t\t       _Sequence>& __x)\n-    { return __x._M_dereferenceable(); }\n-\n   /** Safe local iterators know how to check if they form a valid range. */\n   template<typename _Iterator, typename _Sequence>\n     inline bool\n@@ -446,49 +444,13 @@ namespace __gnu_debug\n \t\t  typename _Distance_traits<_Iterator>::__type& __dist_info)\n     { return __first._M_valid_range(__last, __dist_info); }\n \n-  /** Safe local iterators need a special method to get distance between each\n-      other. */\n   template<typename _Iterator, typename _Sequence>\n-    inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n-\t\t     _Distance_precision>\n-    __get_distance(const _Safe_local_iterator<_Iterator, _Sequence>& __first,\n-\t\t   const _Safe_local_iterator<_Iterator, _Sequence>& __last,\n-\t\t   std::input_iterator_tag)\n+    inline bool\n+    __valid_range(const _Safe_local_iterator<_Iterator, _Sequence>& __first,\n+\t\t  const _Safe_local_iterator<_Iterator, _Sequence>& __last)\n     {\n-      if (__first.base() == __last.base())\n-\treturn { 0, __dp_exact };\n-\n-      if (__first._M_is_begin())\n-\t{\n-\t  if (__last._M_is_end())\n-\t    return\n-\t      {\n-\t\t__first._M_get_sequence()->bucket_size(__first.bucket()),\n-\t\t__dp_exact\n-\t      };\n-\n-\t  return { 1, __dp_sign };\n-\t}\n-\n-      if (__first._M_is_end())\n-\t{\n-\t  if (__last._M_is_begin())\n-\t    return\n-\t      {\n-\t\t-__first._M_get_sequence()->bucket_size(__first.bucket()),\n-\t\t__dp_exact\n-\t      };\n-\n-\t  return { -1, __dp_sign };\n-\t}\n-\n-      if (__last._M_is_begin())\n-\treturn { -1, __dp_sign };\n-\n-      if (__last._M_is_end())\n-\treturn { 1, __dp_sign };\n-\n-      return { 1, __dp_equality };\n+      typename _Distance_traits<_Iterator>::__type __dist_info;\n+      return __first._M_valid_range(__last, __dist_info);\n     }\n \n #if __cplusplus < 201103L"}, {"sha": "9637e9fa444d955618f7d2699db393b8505f1bde", "filename": "libstdc++-v3/include/debug/safe_local_iterator.tcc", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -31,6 +31,47 @@\n \n namespace __gnu_debug\n {\n+  template<typename _Iterator, typename _Sequence>\n+    typename _Distance_traits<_Iterator>::__type\n+    _Safe_local_iterator<_Iterator, _Sequence>::\n+    _M_get_distance_to(const _Safe_local_iterator& __rhs) const\n+    {\n+      if (base() == __rhs.base())\n+\treturn { 0, __dp_exact };\n+\n+      if (_M_is_begin())\n+\t{\n+\t  if (__rhs._M_is_end())\n+\t    return\n+\t      {\n+\t\t_M_get_sequence()->bucket_size(bucket()),\n+\t\t__dp_exact\n+\t      };\n+\n+\t  return { 1, __dp_sign };\n+\t}\n+\n+      if (_M_is_end())\n+\t{\n+\t  if (__rhs._M_is_begin())\n+\t    return\n+\t      {\n+\t\t-_M_get_sequence()->bucket_size(bucket()),\n+\t\t__dp_exact\n+\t      };\n+\n+\t  return { -1, __dp_sign };\n+\t}\n+\n+      if (__rhs._M_is_begin())\n+\treturn { -1, __dp_sign };\n+\n+      if (__rhs._M_is_end())\n+\treturn { 1, __dp_sign };\n+\n+      return { 1, __dp_equality };\n+    }\n+\n   template<typename _Iterator, typename _Sequence>\n     bool\n     _Safe_local_iterator<_Iterator, _Sequence>::\n@@ -45,7 +86,7 @@ namespace __gnu_debug\n \n       /* Determine if we can order the iterators without the help of\n \t the container */\n-      __dist = __get_distance(*this, __rhs);\n+      __dist = _M_get_distance_to(__rhs);\n       switch (__dist.second)\n \t{\n \tcase __dp_equality:"}, {"sha": "6f1a5070b2b9c6445756d5bea496563063158266", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -55,6 +55,9 @@ namespace __debug\n       typedef typename _Base::iterator\t\t_Base_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;"}, {"sha": "3dbe402616c0a6676881e026589a09affd309772", "filename": "libstdc++-v3/include/debug/stl_iterator.h", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -52,12 +52,13 @@ namespace __gnu_debug\n     __can_advance(const std::reverse_iterator<_Iterator>& __it, _Size __n)\n     { return __can_advance(__it.base(), -__n); }\n \n-#if __cplusplus < 201103L\n-  template<typename _Iterator>\n-    struct __is_safe_random_iterator<std::reverse_iterator<_Iterator> >\n-      : __is_safe_random_iterator<_Iterator>\n-    { };\n+  template<typename _Iterator, typename _Sequence>\n+    inline std::reverse_iterator<_Iterator>\n+    __base(const std::reverse_iterator<_Safe_iterator<\n+\t     _Iterator, _Sequence, std::random_access_iterator_tag> >& __it)\n+    { return std::reverse_iterator<_Iterator>(__it.base().base()); }\n \n+#if __cplusplus < 201103L\n   template<typename _Iterator>\n     struct _Unsafe_type<std::reverse_iterator<_Iterator> >\n     {\n@@ -73,12 +74,6 @@ namespace __gnu_debug\n       return std::reverse_iterator<_UnsafeType>(__unsafe(__it.base()));\n     }\n #else\n-  template<typename _Iterator>\n-    inline auto\n-    __base(const std::reverse_iterator<_Iterator>& __it)\n-    -> decltype(std::__make_reverse_iterator(__base(__it.base())))\n-    { return std::__make_reverse_iterator(__base(__it.base())); }\n-\n   template<typename _Iterator>\n     inline auto\n     __unsafe(const std::reverse_iterator<_Iterator>& __it)\n@@ -128,7 +123,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Iterator\n     __niter_base(const __gnu_debug::_Safe_iterator<\n \t\t __gnu_cxx::__normal_iterator<_Iterator, _Container>,\n-\t\t _Sequence>&);\n+\t\t _Sequence, std::random_access_iterator_tag>&);\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }"}, {"sha": "1883cac2fbb0017a1d5bb5ad7234663b970a510d", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -94,6 +94,9 @@ namespace __gnu_debug\n \tbasic_string, _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>\n       _Safe;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       // types:\n       typedef _Traits\t\t\t\t\ttraits_type;"}, {"sha": "095a7521f045a951282bd448f3e95cdedc4c90db", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -66,6 +66,11 @@ namespace __debug\n \t\t\t\t\t\t_Base_const_local_iterator;\n       typedef typename _Base::local_iterator\t_Base_local_iterator;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+      template<typename _ItT, typename _SeqT>\n+\tfriend class ::__gnu_debug::_Safe_local_iterator;\n+\n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::hasher\t\t\thasher;\n@@ -752,6 +757,11 @@ namespace __debug\n       typedef typename _Base::const_local_iterator _Base_const_local_iterator;\n       typedef typename _Base::local_iterator\t   _Base_local_iterator;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+      template<typename _ItT, typename _SeqT>\n+\tfriend class ::__gnu_debug::_Safe_local_iterator;\n+\n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::hasher\t\t\thasher;\n@@ -768,7 +778,7 @@ namespace __debug\n       typedef __gnu_debug::_Safe_local_iterator<\n \t_Base_local_iterator, unordered_multimap>\tlocal_iterator;\n       typedef __gnu_debug::_Safe_local_iterator<\n-\t_Base_const_local_iterator, unordered_multimap> const_local_iterator;\n+\t_Base_const_local_iterator, unordered_multimap>\tconst_local_iterator;\n \n       unordered_multimap() = default;\n "}, {"sha": "ced9b1854d717545ef83ac1dbca84dedbb8a81dc", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -66,6 +66,11 @@ namespace __debug\n       typedef typename _Base::const_local_iterator _Base_const_local_iterator;\n       typedef typename _Base::local_iterator\t   _Base_local_iterator;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+      template<typename _ItT, typename _SeqT>\n+\tfriend class ::__gnu_debug::_Safe_local_iterator;\n+\n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::hasher\t\t\thasher;\n@@ -629,6 +634,11 @@ namespace __debug\n \t\t\t\t\t\t_Base_const_local_iterator;\n       typedef typename _Base::local_iterator\t_Base_local_iterator;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+      template<typename _ItT, typename _SeqT>\n+\tfriend class ::__gnu_debug::_Safe_local_iterator;\n+\n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::hasher\t\t\thasher;\n@@ -645,7 +655,7 @@ namespace __debug\n       typedef __gnu_debug::_Safe_local_iterator<\n \t_Base_local_iterator, unordered_multiset>\tlocal_iterator;\n       typedef __gnu_debug::_Safe_local_iterator<\n-\t_Base_const_local_iterator, unordered_multiset> const_local_iterator;\n+\t_Base_const_local_iterator, unordered_multiset>\tconst_local_iterator;\n \n       unordered_multiset() = default;\n "}, {"sha": "bd09b2414fc813a60f327e7598a7e518289f244c", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -127,6 +127,9 @@ namespace __debug\n       typedef typename _Base::const_iterator\t_Base_const_iterator;\n       typedef __gnu_debug::_Equal_to<_Base_const_iterator> _Equal;\n \n+      template<typename _ItT, typename _SeqT, typename _CatT>\n+\tfriend class ::__gnu_debug::_Safe_iterator;\n+\n     public:\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;\n@@ -789,7 +792,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Iterator\n     __niter_base(const __gnu_debug::_Safe_iterator<\n \t\t __gnu_cxx::__normal_iterator<_Iterator, _Container>,\n-\t\t _Sequence>& __it)\n+\t\t _Sequence, std::random_access_iterator_tag>& __it)\n     { return std::__niter_base(__it.base()); }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "d969b6a9c525d64a97ae4114df8ed76c2704fe63", "filename": "libstdc++-v3/testsuite/23_containers/list/68222_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F68222_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F68222_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F68222_neg.cc?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <list>\n+\n+void\n+test01()\n+{\n+  // A list of int.\n+  const std::list<int> nums = { 1, 2, 3, 4 };\n+\n+  // Grab the iterator type.\n+  using list_itr_type = decltype( std::cbegin( nums ) );\n+\n+  // Confirm cend returns the same type.\n+  static_assert( std::is_same< decltype( std::cend( nums ) ), list_itr_type >::value, \"\" );\n+\n+  // The list's iterator type provides a well-formed non-member operator-() with valid return type (long int)\n+  using substraction_type\n+    = decltype( std::declval<list_itr_type>() - std::declval<list_itr_type>() ); // { dg-error \"no match for 'operator-'\" }\n+}"}, {"sha": "1d45e74782de1c17791235c1884d80076cceeb09", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/debug/debug_functions.cc", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fdebug_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fdebug_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fdebug_functions.cc?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -21,31 +21,6 @@\n #include <unordered_set>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  using namespace __gnu_debug;\n-\n-  std::unordered_set<int> u = { 0, 1, 2 };\n-  VERIFY( __check_dereferenceable(u.begin()) );\n-  auto it = u.begin();\n-  VERIFY( __check_dereferenceable(it) );\n-\n-  VERIFY( __check_dereferenceable(u.cbegin()) );\n-  auto cit = u.begin();\n-  VERIFY( __check_dereferenceable(cit) );\n-\n-  VERIFY( !__check_dereferenceable(u.end()) );\n-  it = u.end();\n-  VERIFY( !__check_dereferenceable(it) );\n-\n-  auto bucket = u.bucket(0);\n-  VERIFY( __check_dereferenceable(u.begin(bucket)) );\n-  auto lit = u.begin(bucket);\n-  VERIFY( __check_dereferenceable(lit) );\n-\n-  VERIFY( !__check_dereferenceable(u.end(bucket)) );\n-}\n-\n void test02()\n {\n   using namespace __gnu_debug;\n@@ -84,7 +59,6 @@ void test02()\n \n int main()\n {\n-  test01();\n   test02();\n   return 0;\n }"}, {"sha": "a3acaf420a4b23d5aee11fac60ca7bb52bc37d10", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/destructible_debug_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_debug_neg.cc?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -45,4 +45,4 @@ test02()\n // { dg-error \"value type is destructible\" \"\" { target *-*-* } 0 }\n \n // In Debug Mode the \"required from here\" errors come from <debug/vector>\n-// { dg-error \"required from here\" \"\" { target *-*-* } 155 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 158 }"}, {"sha": "acbd0d110c0158f9a2a1e12afd23a9527f91e088", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/debug_functions.cc", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fdebug_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fdebug_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fdebug_functions.cc?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -20,28 +20,6 @@\n #include <vector>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  using namespace __gnu_debug;\n-\n-  std::vector<int> v1(3, 1);\n-  VERIFY( __check_dereferenceable(v1.begin()) );\n-  std::vector<int>::iterator it = v1.begin();\n-  VERIFY( __check_dereferenceable(it) );\n-\n-  VERIFY( !__check_dereferenceable(v1.end()) );\n-  it = v1.end();\n-  VERIFY( !__check_dereferenceable(it) );\n-\n-  const volatile int* pi = 0;\n-  VERIFY( !__check_dereferenceable(pi) );\n-\n-  int i;\n-  pi = &i;\n-\n-  VERIFY( __check_dereferenceable(pi) );\n-}\n-\n void test02()\n {\n   using namespace __gnu_debug;\n@@ -67,7 +45,6 @@ void test02()\n \n int main()\n {\n-  test01();\n   test02();\n   return 0;\n }"}, {"sha": "759f4d6b79fdb339e8115fa87179b32119634f9c", "filename": "libstdc++-v3/testsuite/util/testsuite_containers.h", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9afbed0d65d7546b05cce3d5b5229b0046933ed/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h?ref=e9afbed0d65d7546b05cce3d5b5229b0046933ed", "patch": "@@ -20,6 +20,7 @@\n #ifndef _GLIBCXX_TESTSUITE_CONTAINERS_H\n #define _GLIBCXX_TESTSUITE_CONTAINERS_H\n \n+#include <bits/boost_concept_check.h>\n #include <cassert>\n #include <testsuite_container_traits.h>\n \n@@ -191,6 +192,77 @@ namespace __gnu_test\n       forward_members_unordered(_Tp& container) { }\n     };\n \n+  template<typename _Iterator,\n+\t   bool _Mutable,\n+\t   typename = typename std::iterator_traits<_Iterator>::iterator_category>\n+    struct iterator_concept_checks;\n+\n+  template<typename _Iterator>\n+    struct iterator_concept_checks<_Iterator, false,\n+\t\t\t\t   std::forward_iterator_tag>\n+    {\n+      iterator_concept_checks()\n+      {\n+\tusing namespace __gnu_cxx;\n+\t__function_requires<_ForwardIteratorConcept<_Iterator>>();\n+      }\n+    };\n+\n+  template<typename _Iterator>\n+    struct iterator_concept_checks<_Iterator, true,\n+\t\t\t\t   std::forward_iterator_tag>\n+    {\n+      iterator_concept_checks()\n+      {\n+\tusing namespace __gnu_cxx;\n+\t__function_requires<_Mutable_ForwardIteratorConcept<_Iterator>>();\n+      }\n+    };\n+\n+  template<typename _Iterator>\n+    struct iterator_concept_checks<_Iterator, false,\n+\t\t\t\t   std::bidirectional_iterator_tag>\n+    {\n+      iterator_concept_checks()\n+      {\n+\tusing namespace __gnu_cxx;\n+\t__function_requires<_BidirectionalIteratorConcept<_Iterator>>();\n+      }\n+    };\n+\n+  template<typename _Iterator>\n+    struct iterator_concept_checks<_Iterator, true,\n+\t\t\t\t   std::bidirectional_iterator_tag>\n+    {\n+      iterator_concept_checks()\n+      {\n+\tusing namespace __gnu_cxx;\n+\t__function_requires<_Mutable_BidirectionalIteratorConcept<_Iterator>>();\n+      }\n+    };\n+\n+  template<typename _Iterator>\n+    struct iterator_concept_checks<_Iterator, false,\n+\t\t\t\t   std::random_access_iterator_tag>\n+    {\n+      iterator_concept_checks()\n+      {\n+\tusing namespace __gnu_cxx;\n+\t__function_requires<_RandomAccessIteratorConcept<_Iterator>>();\n+      }\n+    };\n+\n+  template<typename _Iterator>\n+    struct iterator_concept_checks<_Iterator, true,\n+\t\t\t\t   std::random_access_iterator_tag>\n+    {\n+      iterator_concept_checks()\n+      {\n+\tusing namespace __gnu_cxx;\n+\t__function_requires<_Mutable_RandomAccessIteratorConcept<_Iterator>>();\n+      }\n+    };\n+\n   template<typename _Tp>\n     struct citerator\n     {"}]}