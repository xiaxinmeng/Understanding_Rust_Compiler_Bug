{"sha": "f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBmYzA4MDNlYWNkZTk4NTBhN2ZmNGExMmQyZjRhZDI5ZjFiY2IyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-30T14:36:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-30T14:36:56Z"}, "message": "re PR debug/45055 (another -fcompare-debug failure with uninitialised read in walk_gimple_stmt)\n\n\tPR debug/45055\n\tPR rtl-optimization/45137\n\t* rtl.h (prev_nonnote_nondebug_insn, next_nonnote_nondebug_insn): New\n\tprototypes.\n\t* emit-rtl.c (prev_nonnote_nondebug_insn, next_nonnote_nondebug_insn):\n\tNew functions.\n\t* combine.c (next_nonnote_nondebug_insn): Removed.\n\t* ifcvt.c (noce_process_if_block): Use prev_nonnote_nondebug_insn.\n\t* haifa-sched.c (queue_to_ready): Use next_nonnote_nondebug_insn.\n\t* sched-deps.c (sched_analyze_insn): Likewise.\n\t(fixup_sched_groups, deps_start_bb): Use prev_nonnote_nondebug_insn.\n\t* rtlanal.c (canonicalize_condition): Likewise.\n\t* postreload.c (reload_combine_recognize_pattern): Likewise.\n\t(reload_cse_move2add): Use next_nonnote_nondebug_insn.\n\n\t* gcc.dg/pr45055.c: New test.\n\nFrom-SVN: r162714", "tree": {"sha": "0a83c3adb8609c51590489ead2d7d994656b6183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a83c3adb8609c51590489ead2d7d994656b6183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f53ea4f08975910c2e92eda9ebe0785845e42247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f53ea4f08975910c2e92eda9ebe0785845e42247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f53ea4f08975910c2e92eda9ebe0785845e42247"}], "stats": {"total": 155, "additions": 108, "deletions": 47}, "files": [{"sha": "c94bf560a4a8e3315d2673f43879ed1ccaccbfad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -1,3 +1,20 @@\n+2010-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/45055\n+\tPR rtl-optimization/45137\n+\t* rtl.h (prev_nonnote_nondebug_insn, next_nonnote_nondebug_insn): New\n+\tprototypes.\n+\t* emit-rtl.c (prev_nonnote_nondebug_insn, next_nonnote_nondebug_insn):\n+\tNew functions.\n+\t* combine.c (next_nonnote_nondebug_insn): Removed.\n+\t* ifcvt.c (noce_process_if_block): Use prev_nonnote_nondebug_insn.\n+\t* haifa-sched.c (queue_to_ready): Use next_nonnote_nondebug_insn.\n+\t* sched-deps.c (sched_analyze_insn): Likewise.\n+\t(fixup_sched_groups, deps_start_bb): Use prev_nonnote_nondebug_insn.\n+\t* rtlanal.c (canonicalize_condition): Likewise.\n+\t* postreload.c (reload_combine_recognize_pattern): Likewise.\n+\t(reload_cse_move2add): Use next_nonnote_nondebug_insn.\n+\n 2010-07-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (int_cond): Remove code iterator."}, {"sha": "1991f347f7d83b33f3cce66651d419f2f9190d1f", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -12654,29 +12654,6 @@ reg_bitfield_target_p (rtx x, rtx body)\n \n   return 0;\n }\n-\n-/* Return the next insn after INSN that is neither a NOTE nor a\n-   DEBUG_INSN.  This routine does not look inside SEQUENCEs.  */\n-\n-static rtx\n-next_nonnote_nondebug_insn (rtx insn)\n-{\n-  while (insn)\n-    {\n-      insn = NEXT_INSN (insn);\n-      if (insn == 0)\n-\tbreak;\n-      if (NOTE_P (insn))\n-\tcontinue;\n-      if (DEBUG_INSN_P (insn))\n-\tcontinue;\n-      break;\n-    }\n-\n-  return insn;\n-}\n-\n-\n \f\n /* Given a chain of REG_NOTES originally from FROM_INSN, try to place them\n    as appropriate.  I3 and I2 are the insns resulting from the combination"}, {"sha": "fe8de9bcdabb4b4793bdbe16e114b3650177657d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -3135,6 +3135,38 @@ prev_nondebug_insn (rtx insn)\n   return insn;\n }\n \n+/* Return the next insn after INSN that is not a NOTE nor DEBUG_INSN.\n+   This routine does not look inside SEQUENCEs.  */\n+\n+rtx\n+next_nonnote_nondebug_insn (rtx insn)\n+{\n+  while (insn)\n+    {\n+      insn = NEXT_INSN (insn);\n+      if (insn == 0 || (!NOTE_P (insn) && !DEBUG_INSN_P (insn)))\n+\tbreak;\n+    }\n+\n+  return insn;\n+}\n+\n+/* Return the previous insn before INSN that is not a NOTE nor DEBUG_INSN.\n+   This routine does not look inside SEQUENCEs.  */\n+\n+rtx\n+prev_nonnote_nondebug_insn (rtx insn)\n+{\n+  while (insn)\n+    {\n+      insn = PREV_INSN (insn);\n+      if (insn == 0 || (!NOTE_P (insn) && !DEBUG_INSN_P (insn)))\n+\tbreak;\n+    }\n+\n+  return insn;\n+}\n+\n /* Return the next INSN, CALL_INSN or JUMP_INSN after INSN;\n    or 0, if there is none.  This routine does not look inside\n    SEQUENCEs.  */"}, {"sha": "136d26a18fc46297bbf15f0708d0ef244f0b92bd", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -2003,13 +2003,9 @@ queue_to_ready (struct ready_list *ready)\n   q_ptr = NEXT_Q (q_ptr);\n \n   if (dbg_cnt (sched_insn) == false)\n-    {\n-      /* If debug counter is activated do not requeue insn next after\n-\t last_scheduled_insn.  */\n-      skip_insn = next_nonnote_insn (last_scheduled_insn);\n-      while (skip_insn && DEBUG_INSN_P (skip_insn))\n-\tskip_insn = next_nonnote_insn (skip_insn);\n-    }\n+    /* If debug counter is activated do not requeue insn next after\n+       last_scheduled_insn.  */\n+    skip_insn = next_nonnote_nondebug_insn (last_scheduled_insn);\n   else\n     skip_insn = NULL_RTX;\n "}, {"sha": "c0123aae52726f122a2bd25c481dee6f05df5ee5", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -2368,9 +2368,7 @@ noce_process_if_block (struct noce_if_info *if_info)\n     }\n   else\n     {\n-      insn_b = prev_nonnote_insn (if_info->cond_earliest);\n-      while (insn_b && DEBUG_INSN_P (insn_b))\n-\tinsn_b = prev_nonnote_insn (insn_b);\n+      insn_b = prev_nonnote_nondebug_insn (if_info->cond_earliest);\n       /* We're going to be moving the evaluation of B down from above\n \t COND_EARLIEST to JUMP.  Make sure the relevant data is still\n \t intact.  */"}, {"sha": "a0c7cc19a4bfc0670b596e6f358a55b3e2caf0b9", "filename": "gcc/postreload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -1113,7 +1113,7 @@ reload_combine_recognize_pattern (rtx insn)\n       && last_label_ruid < reg_state[regno].use_ruid)\n     {\n       rtx base = XEXP (src, 1);\n-      rtx prev = prev_nonnote_insn (insn);\n+      rtx prev = prev_nonnote_nondebug_insn (insn);\n       rtx prev_set = prev ? single_set (prev) : NULL_RTX;\n       rtx index_reg = NULL_RTX;\n       rtx reg_sum = NULL_RTX;\n@@ -1852,7 +1852,7 @@ reload_cse_move2add (rtx first)\n \t\t       && MODES_OK_FOR_MOVE2ADD (GET_MODE (reg),\n \t\t\t\t\t\t reg_mode[REGNO (src)]))\n \t\t{\n-\t\t  rtx next = next_nonnote_insn (insn);\n+\t\t  rtx next = next_nonnote_nondebug_insn (insn);\n \t\t  rtx set = NULL_RTX;\n \t\t  if (next)\n \t\t    set = single_set (next);"}, {"sha": "f59ca540eeee18b151b70ab3f15527751cd19bf3", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -1693,6 +1693,8 @@ extern rtx next_nonnote_insn (rtx);\n extern rtx next_nonnote_insn_bb (rtx);\n extern rtx prev_nondebug_insn (rtx);\n extern rtx next_nondebug_insn (rtx);\n+extern rtx prev_nonnote_nondebug_insn (rtx);\n+extern rtx next_nonnote_nondebug_insn (rtx);\n extern rtx prev_real_insn (rtx);\n extern rtx next_real_insn (rtx);\n extern rtx prev_active_insn (rtx);"}, {"sha": "d242a9a3690c8828ce9684b962370f3888fd9683", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -4756,9 +4756,7 @@ canonicalize_condition (rtx insn, rtx cond, int reverse, rtx *earliest,\n \t stop if it isn't a single set or if it has a REG_INC note because\n \t we don't want to bother dealing with it.  */\n \n-      do\n-\tprev = prev_nonnote_insn (prev);\n-      while (prev && DEBUG_INSN_P (prev));\n+      prev = prev_nonnote_nondebug_insn (prev);\n \n       if (prev == 0\n \t  || !NONJUMP_INSN_P (prev)"}, {"sha": "dddf836063be1c0bb3504bcffe8731bfaa31f96f", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -1521,9 +1521,7 @@ fixup_sched_groups (rtx insn)\n \n   delete_all_dependences (insn);\n \n-  prev_nonnote = prev_nonnote_insn (insn);\n-  while (DEBUG_INSN_P (prev_nonnote))\n-    prev_nonnote = prev_nonnote_insn (prev_nonnote);\n+  prev_nonnote = prev_nonnote_nondebug_insn (insn);\n   if (BLOCK_FOR_INSN (insn) == BLOCK_FOR_INSN (prev_nonnote)\n       && ! sched_insns_conditions_mutex_p (insn, prev_nonnote))\n     add_dependence (insn, prev_nonnote, REG_DEP_ANTI);\n@@ -2699,9 +2697,7 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx insn)\n   if (JUMP_P (insn))\n     {\n       rtx next;\n-      next = next_nonnote_insn (insn);\n-      while (next && DEBUG_INSN_P (next))\n-\tnext = next_nonnote_insn (next);\n+      next = next_nonnote_nondebug_insn (insn);\n       if (next && BARRIER_P (next))\n \treg_pending_barrier = MOVE_BARRIER;\n       else\n@@ -3370,10 +3366,8 @@ deps_start_bb (struct deps_desc *deps, rtx head)\n      hard registers correct.  */\n   if (! reload_completed && !LABEL_P (head))\n     {\n-      rtx insn = prev_nonnote_insn (head);\n+      rtx insn = prev_nonnote_nondebug_insn (head);\n \n-      while (insn && DEBUG_INSN_P (insn))\n-\tinsn = prev_nonnote_insn (insn);\n       if (insn && CALL_P (insn))\n \tdeps->in_post_call_group_p = post_call_initial;\n     }"}, {"sha": "2fded2a5233b5d712e545924c2e3622b09910e72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -1,3 +1,9 @@\n+2010-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/45055\n+\tPR rtl-optimization/45137\n+\t* gcc.dg/pr45055.c: New test.\n+\n 2010-07-30  Alan Modra  <amodra@gmail.com>\n \n \t* gfortran.dg/ltime_gmtime_1.f90: Tolerate half-hour timezones."}, {"sha": "ebd8cbf21a503d46491d0f90526b6829fc2b4b1f", "filename": "gcc/testsuite/gcc.dg/pr45055.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45055.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45055.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45055.c?ref=f0fc0803eacde9850a7ff4a12d2f4ad29f1bcb2c", "patch": "@@ -0,0 +1,41 @@\n+/* PR debug/45055 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftracer -fsched-pressure -funroll-loops -fschedule-insns -fcompare-debug\" } */\n+\n+int colormap[10];\n+\n+extern int bar ();\n+\n+void\n+foo (int *img, int fp, int y, int *ptr, int depth, int c, int t, int xm)\n+{\n+  int x, color, count;\n+  for (; y; y--)\n+    {\n+      if (depth)\n+\t{\n+\t  count = bar ();\n+\t  for (x = xm; x; x--)\n+\t    {\n+\t      if (c != 1)\n+\t\tcount = color = -1;\n+\t      if (count == 0)\n+\t\tcolor = count = bar ();\n+\t      if (color)\n+\t\tt = bar (fp);\n+\t      *ptr++ = colormap[t];\n+\t    }\n+\t}\n+      switch (*img)\n+\t{\n+\tcase 1:\n+\t  bar ();\n+\tcase 3:\n+\tcase -1:\n+\tcase -3:\n+\t  bar ();\n+\tcase -4:\n+\t  bar ();\n+\t}\n+    }\n+}"}]}