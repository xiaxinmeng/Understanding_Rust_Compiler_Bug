{"sha": "a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzYjNlNGY1ZGU3ZmM2ZmNlMWJkZDk4ZmQzOGMwY2Q0NjE1OThmYg==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-07-20T13:29:29Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-07-20T13:29:29Z"}, "message": "use platform specific types in gnu_type_fix\n\nFrom-SVN: r35143", "tree": {"sha": "985d3661fffda384d0c795f2e94d26bcc1bc9413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/985d3661fffda384d0c795f2e94d26bcc1bc9413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "038cc6b42081d9b6135e5975faf9ee6c01f03546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038cc6b42081d9b6135e5975faf9ee6c01f03546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038cc6b42081d9b6135e5975faf9ee6c01f03546"}], "stats": {"total": 112, "additions": 69, "deletions": 43}, "files": [{"sha": "4c4138a6a8188e70a7c18469128954b3ce7c0b08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "patch": "@@ -1,3 +1,12 @@\n+2000-07-20  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixincl/check.tpl: strip the platform specific types before testing\n+\t* fixincl/fixfixes.c(gnu_type_fix): use platform specific types\n+\t* fixincl/fixincl.tpl: use platform specific types\n+\t* fixincl/fixlib.h: include the platform specific types\n+\t* fixincl/inclhack.def(gnu_types): don't supply the types\n+\t* fixincl/fixincl.x: regen\n+\n 2000-07-19  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/ia64/ia64.h (HARD_REGNO_MODE_OK): Don't allow XFmode in"}, {"sha": "196d928df0874adda708d95d1bda85516c32c81b", "filename": "gcc/fixinc/check.tpl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Fcheck.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Fcheck.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fcheck.tpl?ref=a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "patch": "@@ -110,6 +110,18 @@ exitok=true\n \n find * -type f -print > ${TESTDIR}/LIST\n \n+#  Special hack for sys/types.h:  the #define-d types for size_t,\n+#  ptrdiff_t and wchar_t are different for each port.  Therefore,\n+#  strip off the defined-to type so that the test results are the\n+#  same for all platforms.\n+#\n+sed 's/\\(#define __[A-Z_]*_TYPE__\\).*/\\1/' sys/types.h > XX\n+mv -f XX sys/types.h\n+\n+#  The following subshell weirdness is for saving an exit\n+#  status from within a while loop that reads input.  If you can\n+#  think of a cleaner way, suggest away, please...\n+#\n exitok=`\n exec < ${TESTDIR}/LIST\n while read f"}, {"sha": "7a9ff61710231123ea7ccab516ed51bc927ee99c", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "patch": "@@ -164,19 +164,28 @@ emit_gnu_type ( text, rm )\n   /*\n    *  Now print out the reformed typedef\n    */\n-  printf (\"\\\n-#ifndef __%s_TYPE__\\n\\\n-#define __%s_TYPE__ %s\\n\\\n-#endif\\n\",\n-          p_tm->pz_TYPE, p_tm->pz_TYPE, p_tm->pz_gtype );\n-\n-  printf (\"\\\n+  {\n+    tSCC z_fmt[] = \"\\\n+#ifndef __%s_TYPE__\\n#define __%s_TYPE__ %s\\n#endif\\n\\\n+\\\n #if !defined(_GCC_%s_T)%s\\n\\\n-#define _GCC_%s_T\\n\\\n-typedef __%s_TYPE__ %s_t;\\n\\\n-#endif\\n\",\n-          p_tm->pz_TYPE, p_tm->pz_cxx_guard,\n-          p_tm->pz_TYPE, p_tm->pz_TYPE, p_tm->pz_type);\n+\\\n+#define _GCC_%s_T\\ntypedef __%s_TYPE__ %s_t;\\n#endif\\n\";\n+\n+    const char* pz_guard;\n+\n+    /*\n+     *  We magically know that the first entry and only the first\n+     *  entry needs guarding against __cplusplus (it is \"wchar_t\").\n+     *  If others wind up needing similar special treatment, then\n+     *  go look into inclhack.def.  This code, obviously, works closely\n+     *  with that file  :-)\n+     */\n+    pz_guard = (p_tm == gnu_type_map) ? \" && ! defined(__cplusplus)\" : \"\";\n+    printf (z_fmt, p_tm->pz_TYPE, p_tm->pz_TYPE, p_tm->pz_gtype,\n+            p_tm->pz_TYPE, pz_guard,\n+            p_tm->pz_TYPE, p_tm->pz_TYPE, p_tm->pz_type);\n+  }\n \n   return text;\n }"}, {"sha": "6a898594867b979a9ee5423d913435d9073269dc", "filename": "gcc/fixinc/fixincl.tpl", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Ffixincl.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Ffixincl.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.tpl?ref=a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "patch": "@@ -207,19 +207,18 @@ _FOR fix \",\\n\" =]\n #define GNU_TYPE_CT [=_eval type_map _count =]\n int gnu_type_map_ct = GNU_TYPE_CT;\n \n-tSCC z_cxx_guard[] = \" && !defined(__cplusplus)\";\n-tSCC z_nil[]       = \"\";\n-\n+/*\n+ *  The following table depends upon XXX_TYPE being #define-d to the\n+ *  correct string via defines in a header file pointed to by the\n+ *  generated file \"tm.h\".\n+ */\n t_gnu_type_map gnu_type_map[ GNU_TYPE_CT ] = {[=\n \n _FOR type_map ,\n \n =]\n-  { [=_EVAL type_name _len=], \"[=type_name=]\", \"[=type_name _up=]\", \"[=\n-  gnu_type=]\", [=\n-  _IF cxx_type _exist =]z_cxx_guard[=\n-  _ELSE               =]z_nil[=\n-  _ENDIF=] }[=\n+  { [=_EVAL type_map _len=], \"[=type_map=]\", \"[=type_map _up=]\", [=\n+  type_map _up=]_TYPE }[=\n \n /type_map=]\n };"}, {"sha": "62307bd2fa9436d482ee937b4d6cf6402e5a0a92", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "patch": "@@ -5799,11 +5799,13 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n #define GNU_TYPE_CT 3\n int gnu_type_map_ct = GNU_TYPE_CT;\n \n-tSCC z_cxx_guard[] = \" && !defined(__cplusplus)\";\n-tSCC z_nil[]       = \"\";\n-\n+/*\n+ *  The following table depends upon XXX_TYPE being #define-d to the\n+ *  correct string via defines in a header file pointed to by the\n+ *  generated file \"tm.h\".\n+ */\n t_gnu_type_map gnu_type_map[ GNU_TYPE_CT ] = {\n-  { 7, \"ptrdiff\", \"PTRDIFF\", \"long int\", z_nil },\n-  { 4, \"size\", \"SIZE\", \"long unsigned int\", z_nil },\n-  { 5, \"wchar\", \"WCHAR\", \"int\", z_cxx_guard }\n+  { 5, \"wchar\", \"WCHAR\", WCHAR_TYPE },\n+  { 7, \"ptrdiff\", \"PTRDIFF\", PTRDIFF_TYPE },\n+  { 4, \"size\", \"SIZE\", SIZE_TYPE }\n };"}, {"sha": "5cb0089193a938503e99491f24103bd6f44acc37", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "patch": "@@ -33,6 +33,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"machname.h\"\n #include \"libiberty.h\"\n \n+#include \"tm.h\"\n+\n #ifndef STDIN_FILENO\n # define STDIN_FILENO   0\n #endif\n@@ -175,7 +177,6 @@ typedef struct {\n   tCC*        pz_type;\n   tCC*        pz_TYPE;\n   tCC*        pz_gtype;\n-  tCC*        pz_cxx_guard;\n } t_gnu_type_map;\n \n extern int gnu_type_map_ct;"}, {"sha": "5364bd42b01900608e72e5e89770afb902beee7d", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=a83b3e4f5de7fc6fce1bdd98fd38c0cd461598fb", "patch": "@@ -2520,7 +2520,13 @@ fix = {\n /*\n  * Fix these files to use the same types that we think they should.\n  * Each type must be present in two places:  the select clause\n- * and a \"type_map\" entry below.\n+ * and a \"type_map\" entry below.  The types mapped to are found from\n+ * the \"tm.h\" header, which is a generated file that refers to\n+ * a header in the gcc/config/ tree.  Keep these in sync!!\n+ *\n+ * Also, \"wchar\" is first and known to need guarding against __cplusplus.\n+ * Keep *that* in mind, too, when hacking the gnu_type_fix routine\n+ * in fixfixes.c.\n  */\n fix = {\n     hackname  = gnu_types;\n@@ -2539,21 +2545,9 @@ fix = {\n                 \"typedef ushort_t wchar_t; /* ushort_t */\";\n };\n \n-type_map = {\n-  type_name = ptrdiff;\n-  gnu_type  = \"long int\";\n-};\n-\n-type_map = {\n-  type_name = size;\n-  gnu_type  = \"long unsigned int\";\n-};\n-\n-type_map = {\n-  type_name = wchar;\n-  gnu_type  = int;\n-  cxx_type;\n-};\n+type_map = wchar;\n+type_map = ptrdiff;\n+type_map = size;\n \n \n /*"}]}