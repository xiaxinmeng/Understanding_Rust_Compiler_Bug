{"sha": "905a881f36b6aea9113a3b369e36e85033bbea84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1YTg4MWYzNmI2YWVhOTExM2EzYjM2OWUzNmU4NTAzM2JiZWE4NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-28T19:21:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-28T19:21:52Z"}, "message": "[multiple changes]\n\nSat Sep 27 16:48:00 1997  Jason Merrill  <jason@yorick.cygnus.com>\n\n\t* std/complext.h: Lose injection decls.\n\t* std/fcomplex.h: Likewise.\n\t* std/dcomplex.h: Likewise.\n\t* std/ldcomplex.h: Likewise.\n\nSat Sep 27 16:47:35 1997  Mark Mitchell  <mmitchell@usa.net>\n\n\t* std/complext.h: Declare templates before making them\n\tfriends.  Use new friend <> syntax.\n\t* std/complext.cc: Don't rely on guiding declarations.\n\t* std/fcomplex.h: Use new friend <> syntax.\n\t* std/dcomplex.h: Likewise.\n\t* std/ldcomplex.h: Likewise.\n\nFrom-SVN: r15776", "tree": {"sha": "7aef137939c350e874afb60ab37aff07275f8500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aef137939c350e874afb60ab37aff07275f8500"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/905a881f36b6aea9113a3b369e36e85033bbea84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905a881f36b6aea9113a3b369e36e85033bbea84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905a881f36b6aea9113a3b369e36e85033bbea84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905a881f36b6aea9113a3b369e36e85033bbea84/comments", "author": null, "committer": null, "parents": [{"sha": "920253a3bc1649fb4a0f5f5f48e57d92d4839190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920253a3bc1649fb4a0f5f5f48e57d92d4839190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920253a3bc1649fb4a0f5f5f48e57d92d4839190"}], "stats": {"total": 185, "additions": 45, "deletions": 140}, "files": [{"sha": "94a3460f80675ff843902c8b59e0b3b37460e42c", "filename": "libstdc++/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2FChangeLog?ref=905a881f36b6aea9113a3b369e36e85033bbea84", "patch": "@@ -1,3 +1,19 @@\n+Sat Sep 27 16:48:00 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* std/complext.h: Lose injection decls.\n+\t* std/fcomplex.h: Likewise.\n+\t* std/dcomplex.h: Likewise.\n+\t* std/ldcomplex.h: Likewise.\n+\n+Sat Sep 27 16:47:35 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* std/complext.h: Declare templates before making them\n+\tfriends.  Use new friend <> syntax.\n+\t* std/complext.cc: Don't rely on guiding declarations.\n+\t* std/fcomplex.h: Use new friend <> syntax.\n+\t* std/dcomplex.h: Likewise.\n+\t* std/ldcomplex.h: Likewise.\n+\n Thu Sep 25 19:55:56 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* std/bastring.h: Enable exceptions."}, {"sha": "60227f213299e6e3759ab7283153af9852d95d99", "filename": "libstdc++/std/complext.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Fcomplext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Fcomplext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fcomplext.cc?ref=905a881f36b6aea9113a3b369e36e85033bbea84", "patch": "@@ -236,7 +236,7 @@ pow (const complex<FLOAT>& xin, int y)\n   if (y < 0)\n     {\n       y = -y;\n-      x = 1/x;\n+      x = FLOAT(1)/x;\n     }\n   for (;;)\n     {"}, {"sha": "6c55037bf94bc868f6c078fb5a4b3746872b5ee2", "filename": "libstdc++/std/complext.h", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Fcomplext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Fcomplext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fcomplext.h?ref=905a881f36b6aea9113a3b369e36e85033bbea84", "patch": "@@ -41,6 +41,16 @@ class istream;\n class ostream;\n \n extern \"C++\" {\n+template <class _FLT> class complex;\n+template <class _FLT> complex<_FLT>&\n+  __doapl (complex<_FLT>* ths, const complex<_FLT>& r);\n+template <class _FLT> complex<_FLT>&\n+  __doami (complex<_FLT>* ths, const complex<_FLT>& r);\n+template <class _FLT> complex<_FLT>&\n+  __doaml (complex<_FLT>* ths, const complex<_FLT>& r);\n+template <class _FLT> complex<_FLT>&\n+  __doadv (complex<_FLT>* ths, const complex<_FLT>& r);\n+\n template <class _FLT>\n class complex\n {\n@@ -55,40 +65,10 @@ class complex\n private:\n   _FLT re, im;\n \n-  friend complex& __doapl (complex *, const complex&);\n-  friend complex& __doami (complex *, const complex&);\n-  friend complex& __doaml (complex *, const complex&);\n-  friend complex& __doadv (complex *, const complex&);\n-\n-  // These functions are specified as friends for purposes of name injection;\n-  // they do not actually reference private members.\n-  friend _FLT real (const complex&) __attribute__ ((const));\n-  friend _FLT imag (const complex&) __attribute__ ((const));\n-  friend complex operator + (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator + (const complex&, _FLT) __attribute__ ((const));\n-  friend complex operator + (_FLT, const complex&) __attribute__ ((const));\n-  friend complex operator - (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator - (const complex&, _FLT) __attribute__ ((const));\n-  friend complex operator - (_FLT, const complex&) __attribute__ ((const));\n-  friend complex operator * (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator * (const complex&, _FLT) __attribute__ ((const));\n-  friend complex operator * (_FLT, const complex&) __attribute__ ((const));\n-  friend complex operator / (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator / (const complex&, _FLT) __attribute__ ((const));\n-  friend complex operator / (_FLT, const complex&) __attribute__ ((const));\n-  friend bool operator == (const complex&, const complex&) __attribute__ ((const));\n-  friend bool operator == (const complex&, _FLT) __attribute__ ((const));\n-  friend bool operator == (_FLT, const complex&) __attribute__ ((const));\n-  friend bool operator != (const complex&, const complex&) __attribute__ ((const));\n-  friend bool operator != (const complex&, _FLT) __attribute__ ((const));\n-  friend bool operator != (_FLT, const complex&) __attribute__ ((const));\n-  friend complex polar (_FLT, _FLT) __attribute__ ((const));\n-  friend complex pow (const complex&, const complex&) __attribute__ ((const));\n-  friend complex pow (const complex&, _FLT) __attribute__ ((const));\n-  friend complex pow (const complex&, int) __attribute__ ((const));\n-  friend complex pow (_FLT, const complex&) __attribute__ ((const));\n-  friend istream& operator>> (istream&, complex&);\n-  friend ostream& operator<< (ostream&, const complex&);\n+  friend complex& __doapl<> (complex *, const complex&);\n+  friend complex& __doami<> (complex *, const complex&);\n+  friend complex& __doaml<> (complex *, const complex&);\n+  friend complex& __doadv<> (complex *, const complex&);\n };\n \n // Declare specializations.\n@@ -142,9 +122,6 @@ complex<_FLT>::operator *= (const complex<_FLT>& r)\n   return __doaml (this, r);\n }\n \n-template <class _FLT> complex<_FLT>&\n-  __doadv (complex<_FLT>* ths, const complex<_FLT>& r);\n-\n template <class _FLT>\n inline complex<_FLT>&\n complex<_FLT>::operator /= (const complex<_FLT>& r)"}, {"sha": "5bc329c9bc945b51b655ff136809ed3e2e0b4ace", "filename": "libstdc++/std/dcomplex.h", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Fdcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Fdcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fdcomplex.h?ref=905a881f36b6aea9113a3b369e36e85033bbea84", "patch": "@@ -50,40 +50,10 @@ class complex<double>\n private:\n   double re, im;\n \n-  friend complex& __doapl (complex *, const complex&);\n-  friend complex& __doami (complex *, const complex&);\n-  friend complex& __doaml (complex *, const complex&);\n-  friend complex& __doadv (complex *, const complex&);\n-\n-  // These functions are specified as friends for purposes of name injection;\n-  // they do not actually reference private members.\n-  friend double real (const complex& x) { return x.real (); }\n-  friend double imag (const complex& x) { return x.imag (); }\n-  friend complex operator + (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator + (const complex&, double) __attribute__ ((const));\n-  friend complex operator + (double, const complex&) __attribute__ ((const));\n-  friend complex operator - (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator - (const complex&, double) __attribute__ ((const));\n-  friend complex operator - (double, const complex&) __attribute__ ((const));\n-  friend complex operator * (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator * (const complex&, double) __attribute__ ((const));\n-  friend complex operator * (double, const complex&) __attribute__ ((const));\n-  friend complex operator / (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator / (const complex&, double) __attribute__ ((const));\n-  friend complex operator / (double, const complex&) __attribute__ ((const));\n-  friend bool operator == (const complex&, const complex&) __attribute__ ((const));\n-  friend bool operator == (const complex&, double) __attribute__ ((const));\n-  friend bool operator == (double, const complex&) __attribute__ ((const));\n-  friend bool operator != (const complex&, const complex&) __attribute__ ((const));\n-  friend bool operator != (const complex&, double) __attribute__ ((const));\n-  friend bool operator != (double, const complex&) __attribute__ ((const));\n-  friend complex polar (double, double) __attribute__ ((const));\n-  friend complex pow (const complex&, const complex&) __attribute__ ((const));\n-  friend complex pow (const complex&, double) __attribute__ ((const));\n-  friend complex pow (const complex&, int) __attribute__ ((const));\n-  friend complex pow (double, const complex&) __attribute__ ((const));\n-  friend istream& operator>> (istream&, complex&);\n-  friend ostream& operator<< (ostream&, const complex&);\n+  friend complex& __doapl<> (complex *, const complex&);\n+  friend complex& __doami<> (complex *, const complex&);\n+  friend complex& __doaml<> (complex *, const complex&);\n+  friend complex& __doadv<> (complex *, const complex&);\n };\n \n inline complex<float>::complex (const complex<double>& r)"}, {"sha": "476c4b60d8037a8729e3f98ec6de793acb3c3a74", "filename": "libstdc++/std/fcomplex.h", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Ffcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Ffcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Ffcomplex.h?ref=905a881f36b6aea9113a3b369e36e85033bbea84", "patch": "@@ -50,40 +50,10 @@ class complex<float>\n private:\n   float re, im;\n \n-  friend complex& __doapl (complex *, const complex&);\n-  friend complex& __doami (complex *, const complex&);\n-  friend complex& __doaml (complex *, const complex&);\n-  friend complex& __doadv (complex *, const complex&);\n-\n-  // These functions are specified as friends for purposes of name injection;\n-  // they do not actually reference private members.\n-  friend float real (const complex& x) { return x.real (); }\n-  friend float imag (const complex& x) { return x.imag (); }\n-  friend complex operator + (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator + (const complex&, float) __attribute__ ((const));\n-  friend complex operator + (float, const complex&) __attribute__ ((const));\n-  friend complex operator - (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator - (const complex&, float) __attribute__ ((const));\n-  friend complex operator - (float, const complex&) __attribute__ ((const));\n-  friend complex operator * (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator * (const complex&, float) __attribute__ ((const));\n-  friend complex operator * (float, const complex&) __attribute__ ((const));\n-  friend complex operator / (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator / (const complex&, float) __attribute__ ((const));\n-  friend complex operator / (float, const complex&) __attribute__ ((const));\n-  friend bool operator == (const complex&, const complex&) __attribute__ ((const));\n-  friend bool operator == (const complex&, float) __attribute__ ((const));\n-  friend bool operator == (float, const complex&) __attribute__ ((const));\n-  friend bool operator != (const complex&, const complex&) __attribute__ ((const));\n-  friend bool operator != (const complex&, float) __attribute__ ((const));\n-  friend bool operator != (float, const complex&) __attribute__ ((const));\n-  friend complex polar (float, float) __attribute__ ((const));\n-  friend complex pow (const complex&, const complex&) __attribute__ ((const));\n-  friend complex pow (const complex&, float) __attribute__ ((const));\n-  friend complex pow (const complex&, int) __attribute__ ((const));\n-  friend complex pow (float, const complex&) __attribute__ ((const));\n-  friend istream& operator>> (istream&, complex&);\n-  friend ostream& operator<< (ostream&, const complex&);\n+  friend complex& __doapl<> (complex *, const complex&);\n+  friend complex& __doami<> (complex *, const complex&);\n+  friend complex& __doaml<> (complex *, const complex&);\n+  friend complex& __doadv<> (complex *, const complex&);\n };\n } // extern \"C++\"\n "}, {"sha": "dd5cfa3fc39b36aba590d3d5750cb49eeebf0218", "filename": "libstdc++/std/ldcomplex.h", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Fldcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Fstd%2Fldcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fldcomplex.h?ref=905a881f36b6aea9113a3b369e36e85033bbea84", "patch": "@@ -50,40 +50,10 @@ class complex<long double>\n private:\n   long double re, im;\n \n-  friend complex& __doapl (complex *, const complex&);\n-  friend complex& __doami (complex *, const complex&);\n-  friend complex& __doaml (complex *, const complex&);\n-  friend complex& __doadv (complex *, const complex&);\n-\n-  // These functions are specified as friends for purposes of name injection;\n-  // they do not actually reference private members.\n-  friend long double real (const complex& x) { return x.real (); }\n-  friend long double imag (const complex& x) { return x.imag (); }\n-  friend complex operator + (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator + (const complex&, long double) __attribute__ ((const));\n-  friend complex operator + (long double, const complex&) __attribute__ ((const));\n-  friend complex operator - (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator - (const complex&, long double) __attribute__ ((const));\n-  friend complex operator - (long double, const complex&) __attribute__ ((const));\n-  friend complex operator * (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator * (const complex&, long double) __attribute__ ((const));\n-  friend complex operator * (long double, const complex&) __attribute__ ((const));\n-  friend complex operator / (const complex&, const complex&) __attribute__ ((const));\n-  friend complex operator / (const complex&, long double) __attribute__ ((const));\n-  friend complex operator / (long double, const complex&) __attribute__ ((const));\n-  friend bool operator == (const complex&, const complex&) __attribute__ ((const));\n-  friend bool operator == (const complex&, long double) __attribute__ ((const));\n-  friend bool operator == (long double, const complex&) __attribute__ ((const));\n-  friend bool operator != (const complex&, const complex&) __attribute__ ((const));\n-  friend bool operator != (const complex&, long double) __attribute__ ((const));\n-  friend bool operator != (long double, const complex&) __attribute__ ((const));\n-  friend complex polar (long double, long double) __attribute__ ((const));\n-  friend complex pow (const complex&, const complex&) __attribute__ ((const));\n-  friend complex pow (const complex&, long double) __attribute__ ((const));\n-  friend complex pow (const complex&, int) __attribute__ ((const));\n-  friend complex pow (long double, const complex&) __attribute__ ((const));\n-  friend istream& operator>> (istream&, complex&);\n-  friend ostream& operator<< (ostream&, const complex&);\n+  friend complex& __doapl<> (complex *, const complex&);\n+  friend complex& __doami<> (complex *, const complex&);\n+  friend complex& __doaml<> (complex *, const complex&);\n+  friend complex& __doadv<> (complex *, const complex&);\n };\n \n inline complex<float>::complex (const complex<long double>& r)"}, {"sha": "4526279b888a1c65d2ebe84e6e05fd55aade77ae", "filename": "libstdc++/tests/tstring.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Ftests%2Ftstring.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905a881f36b6aea9113a3b369e36e85033bbea84/libstdc%2B%2B%2Ftests%2Ftstring.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Ftests%2Ftstring.exp?ref=905a881f36b6aea9113a3b369e36e85033bbea84", "patch": "@@ -5,6 +5,7 @@ A string initialized to (previous string, 1, 2):el\n A string initialized to @:@\n A string initialized to 20:20\n n = 20 atoi(n) = 20 atof(n) = 20\n+is = Hello\n z = x + y = Helloworld\n x += y; x = Helloworld\n y.insert (0, x); y = Helloworld\n@@ -15,6 +16,7 @@ ch = x[0] = H\n z = x.substr (2, 3) = llo\n x.replace (2, 2, r); x = Hero\n x.replace (0, 1, 'j'); x = jello\n+x = jeHelloo\n enter a word:word =abcdefghijklmnopqrstuvwxyz length = 26\n \n End of test"}]}