{"sha": "6285c904f784dd3d93813e2753cefa4f7cc01df6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4NWM5MDRmNzg0ZGQzZDkzODEzZTI3NTNjZWZhNGY3Y2MwMWRmNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T08:30:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T08:30:01Z"}, "message": "Delete questionable tests\n\nFrom-SVN: r28453", "tree": {"sha": "4323c901e9558213a098d4b30b8515ce0ade65fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4323c901e9558213a098d4b30b8515ce0ade65fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6285c904f784dd3d93813e2753cefa4f7cc01df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6285c904f784dd3d93813e2753cefa4f7cc01df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6285c904f784dd3d93813e2753cefa4f7cc01df6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6285c904f784dd3d93813e2753cefa4f7cc01df6/comments", "author": null, "committer": null, "parents": [{"sha": "255433ed945f4bf7d5439fb1a08e66ed817f5544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255433ed945f4bf7d5439fb1a08e66ed817f5544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255433ed945f4bf7d5439fb1a08e66ed817f5544"}], "stats": {"total": 462, "additions": 0, "deletions": 462}, "files": [{"sha": "ae9c145ef1bfd06321f2b1fa404849c5be664437", "filename": "gcc/testsuite/gcc.c-torture/compile/920501-24.c", "status": "removed", "additions": 0, "deletions": 221, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255433ed945f4bf7d5439fb1a08e66ed817f5544/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255433ed945f4bf7d5439fb1a08e66ed817f5544/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-24.c?ref=255433ed945f4bf7d5439fb1a08e66ed817f5544", "patch": "@@ -1,221 +0,0 @@\n-char *malloc ();\n-\n-main ()\n-{\n-  char *buf1;\n-  int i;\n-  int cnt;\n-\n-  buf1 = malloc (8193);\n-\n-  read (0, buf1, 8192);\n-\n-  for (i = 500;  i > 0;  i--)\n-    cnt = shift (buf1, 8192, '\\n');\n-  printf (\"%d  \", cnt);\n-\n-  for (i = 500;  i > 0;  i--)\n-    cnt = shift_xor (buf1, 8192, '\\n');\n-  printf (\"%d  \", cnt);\n-\n-  for (i = 500;  i > 0;  i--)\n-    cnt = bitfield (buf1, 8192, '\\n');\n-  printf (\"%d  \", cnt);\n-\n-  for (i = 500;  i > 0;  i--)\n-    cnt = char_autoincr (buf1, 8192, '\\n');\n-  printf (\"%d  \", cnt);\n-\n-  for (i = 500;  i > 0;  i--)\n-    cnt = xorand (buf1, 8192, '\\n');\n-  printf (\"%d  \", cnt);\n-}\n-\n-shift (b1, n, c)\n-    int *b1;\n-    int n;\n-    char c;\n-{\n-  int nn;\n-  int cnt = 0;\n-  int w1;\n-\n-  for (nn = n / (4 * 4);  nn > 0;  nn--)\n-    {\n-      w1 = *b1++;\n-      if ((char)w1 == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      w1 = *b1++;\n-      if ((char)w1 == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      w1 = *b1++;\n-      if ((char)w1 == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      w1 = *b1++;\n-      if ((char)w1 == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-      if ((char)(w1 >>= 8) == c)  cnt++;\n-    }\n-  return cnt;\n-}\n-\n-shift_xor (b1, n, c)\n-    int *b1;\n-    int n;\n-    char c;\n-{\n-  int nn;\n-  int cnt = 0;\n-  int w1;\n-  int cccc = (c << 24) | (c << 16) | (c << 8) | c;\n-\n-  for (nn = n / (4 * 4);  nn > 0;  nn--)\n-    {\n-      w1 = *b1++ ^ cccc;\n-      if ((char)w1 == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      w1 = *b1++ ^ cccc;\n-      if ((char)w1 == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      w1 = *b1++ ^ cccc;\n-      if ((char)w1 == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      w1 = *b1++ ^ cccc;\n-      if ((char)w1 == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-      if ((char)(w1 >>= 8) == 0)  cnt++;\n-    }\n-  return cnt;\n-}\n-\n-typedef\n-struct\n-{\n-  unsigned b0:8;\n-  unsigned b1:8;\n-  unsigned b2:8;\n-  unsigned b3:8;\n-} foo;\n-\n-bitfield (b1, n, c)\n-    foo *b1;\n-    int n;\n-    char c;\n-{\n-  int nn;\n-  int cnt = 0;\n-  register foo w1;\n-\n-  for (nn = n / (4 * 4);  nn > 0;  nn--)\n-    {\n-      w1 = *b1++;\n-      if (w1.b0 == c) cnt++;\n-      if (w1.b1 == c) cnt++;\n-      if (w1.b2 == c) cnt++;\n-      if (w1.b3 == c) cnt++;\n-      w1 = *b1++;\n-      if (w1.b0 == c) cnt++;\n-      if (w1.b1 == c) cnt++;\n-      if (w1.b2 == c) cnt++;\n-      if (w1.b3 == c) cnt++;\n-      w1 = *b1++;\n-      if (w1.b0 == c) cnt++;\n-      if (w1.b1 == c) cnt++;\n-      if (w1.b2 == c) cnt++;\n-      if (w1.b3 == c) cnt++;\n-      w1 = *b1++;\n-      if (w1.b0 == c) cnt++;\n-      if (w1.b1 == c) cnt++;\n-      if (w1.b2 == c) cnt++;\n-      if (w1.b3 == c) cnt++;\n-    }\n-  return cnt;\n-}\n-\n-\n-char_autoincr (b1, n, c)\n-    char *b1;\n-    int n;\n-    char c;\n-{\n-  int cnt = 0;\n-  char *bend = b1 + n;\n-  *bend = c;\n-\n-  for (;;)\n-    {\n-      while (*b1++ != c)\n-\t;\n-      cnt++;\n-      if (b1 >  bend)\n-\tbreak;\n-    }\n-  return cnt;\n-}\n-\n-typedef unsigned int uint;\n-\n-xorand (b1, n, c)\n-     int *b1;\n-     int n;\n-     unsigned char c;\n-{\n-  int xm = ((int) c << 24) | ((int) c << 16) | ((int) c << 8) | ((int) c);\n-  byte_match_count2 (b1, n, xm, 0xff000000, 0xff0000, 0xff00, 0xff);\n-}\n-\n-byte_match_count2 (buf, n, xm, m1, m2, m3, m4)\n-     int *buf;\n-     int n;\n-     uint m1, m2, m3, m4;\n-{\n-  int w, cnt = 0;\n-  int *bp;\n-\n-  n /= 4;\n-\n-  buf[n] = xm;\n-\n-  bp = buf;\n-  while (bp < buf + n)\n-    {\n-      w = *bp++ ^ xm;\n-      cnt += ((m1 & w) == 0);\n-      cnt += ((m2 & w) == 0);\n-      cnt += ((m3 & w) == 0);\n-      cnt += ((m4 & w) == 0);\n-\n-      w = *bp++ ^ xm;\n-      cnt += ((m1 & w) == 0);\n-      cnt += ((m2 & w) == 0);\n-      cnt += ((m3 & w) == 0);\n-      cnt += ((m4 & w) == 0);\n-\n-      w = *bp++ ^ xm;\n-      cnt += ((m1 & w) == 0);\n-      cnt += ((m2 & w) == 0);\n-      cnt += ((m3 & w) == 0);\n-      cnt += ((m4 & w) == 0);\n-\n-      w = *bp++ ^ xm;\n-      cnt += ((m1 & w) == 0);\n-      cnt += ((m2 & w) == 0);\n-      cnt += ((m3 & w) == 0);\n-      cnt += ((m4 & w) == 0);\n-    }\n-  return cnt;\n-}"}, {"sha": "40e63f26ed69ef75235e61a403c5d2225ac24b9c", "filename": "gcc/testsuite/gcc.c-torture/compile/921109-3.c", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255433ed945f4bf7d5439fb1a08e66ed817f5544/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F921109-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255433ed945f4bf7d5439fb1a08e66ed817f5544/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F921109-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F921109-3.c?ref=255433ed945f4bf7d5439fb1a08e66ed817f5544", "patch": "@@ -1,46 +0,0 @@\n-/* EXTRA_OPTIONS: -fcaller-saves */\n-\n-extern char *malloc();\n-\n-main()\n-{\n-  char w[1000];\n-  int i, j, nres, t[1000];\n-  float dv, (**dmat)[4][4];\n-  short at1, at2;\n-\n-  nres = 200;\n-\n-  for (i = 0; i < nres; i++)\n-    {\n-      w[i] = rand() & 15;\n-      t[i] = 0;\n-    }\n-\n-  dmat = (float (**)[4][4]) malloc(nres * sizeof(*dmat));\n-  if (!dmat)\n-    return 1;\n-  for (i = 0; i < nres; i++)\n-    {\n-      dmat[i] = (float (*)[4][4]) malloc(nres * sizeof(**dmat));\n-      if (!dmat[i])\n-\treturn 1;\n-    }\n-\n-  for (i = 0; i < nres; i++)\n-    for (j = i; j < nres; j++)\n-      for (at1 = 0; at1 <= 3; at1++)\n-\tfor (at2 = 0; at2 <= 3; at2++)\n-\t  if (i != j || at1 != at2)\n-\t    if ((w[i] & (1 << at1)) && (w[j] & (1 << at2)))\n-\t      {\n-\t\tdv = 20.0 * (rand() & 32767) / 32768.0;\n-\t\tdmat[i][j][at1][at2] = dmat[j][i][at2][at1] = dv;\n-\t      }\n-\t    else\n-\t      dmat[i][j][at1][at2] = dmat[j][i][at2][at1] = 999.0;\n-\t  else\n-\t    dmat[i][j][at1][at2] = 0.0;\n-\n-  return 0;\n-}"}, {"sha": "d50d3c97def79c71d5b3b320dfec1ec9d448fb4a", "filename": "gcc/testsuite/gcc.c-torture/compile/930609-1.c", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255433ed945f4bf7d5439fb1a08e66ed817f5544/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930609-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255433ed945f4bf7d5439fb1a08e66ed817f5544/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930609-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930609-1.c?ref=255433ed945f4bf7d5439fb1a08e66ed817f5544", "patch": "@@ -1,104 +0,0 @@\n-const int h (double value);\n-const double scalb (double x, int n);\n-const double logb (double x);\n-static const double a = 0;\n-\n-double f (y, x)\n-     double y, x;\n-{\n-  static const double zero=0, one=1, small=1.0E-9, big=1.0E18;\n-  double t,z,sy,sx,hi,lo;\n-  int k,m;\n-\n-  if (x!=x)\n-    return x;\n-  if (y!=y)\n-    return y;\n-\n-  sy = g (one);\n-  sx = g (one);\n-\n-  if (x==1)\n-    {\n-      y=g (y);\n-      t=y;\n-      if (h (t))\n-\tgoto begin;\n-    }\n-\n-  if (y==zero)\n-    return (sx==one)?y:g (a);\n-\n-  if (x==zero)\n-    return g (a);\n-\n-  if (!h (x))\n-    if (!h (y))\n-      return g ((sx==one)?a:3*a);\n-    else\n-      return g ((sx==one)?zero:a);\n-\n-  if (!h (y))\n-    return g (a);\n-\n-  x=g (x);\n-  y=g (y);\n-  if ((m=(k=logb (y))- logb (x)) > 60)\n-    t=big+big;\n-  else if (m < -80)\n-    t=y/x;\n-  else\n-    {\n-      t = y/x;\n-      y = scalb (y,-k);\n-      x=scalb (x,-k);\n-    }\n-\n- begin:\n-  if (t < 2.4375)\n-    {\n-      k = 4 * (t+0.0625);\n-      switch (k)\n-\t{\n-\tcase 0:\n-\tcase 1:\n-\t  if (t < small)\n-\t    {\n-\t      big + small;\n-\t      return g ((sx>zero)?t:a-t);\n-\t    }\n-\t  hi = zero; lo = zero; break;\n-\n-\tcase 2:\n-\t  hi = a; lo = a;\n-\t  z = x+x;\n-\t  t = ((y+y) - x) / (z + y); break;\n-\n-\tcase 3:\n-\tcase 4:\n-\t  hi = a; lo = zero;\n-\t  t = (y - x) / (x + y); break;\n-\n-\tdefault:\n-\t  hi = a; lo = a;\n-\t  z = y-x; y=y+y+y; t = x+x;\n-\t  t = ((z+z)-x) / (t + y); break;\n-\t}\n-    }\n-  else\n-    {\n-      hi = a; lo = zero;\n-\n-      if (t <= big)\n-\tt = - x / y;\n-      else\n-\t{\n-\t  big+small;\n-\t  t = zero;\n-\t}\n-    }\n-\n-  z = t*(z*(a+z*(a+z*(a+z*(a+z*(a+z*(a+z*(a+z*(a+z*(a+z*(a+z*a)))))))))));\n-\n-  return g ((sx>zero)?z:a-z);\n-}"}, {"sha": "8b61fc14149c809bb745106a693b964af7e35b7b", "filename": "gcc/testsuite/gcc.c-torture/compile/930623-2.c", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255433ed945f4bf7d5439fb1a08e66ed817f5544/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930623-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255433ed945f4bf7d5439fb1a08e66ed817f5544/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930623-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930623-2.c?ref=255433ed945f4bf7d5439fb1a08e66ed817f5544", "patch": "@@ -1,91 +0,0 @@\n-extern unsigned short statesCount;\n-extern short cn_cadrstates[38][37];\n-extern short coutstate[38][37][5];\n-extern short ccostate[38][37][5];\n-extern short cdel_E[38][37][5];\n-extern short cn[38][37][5][3];\n-extern short cd[38][37][5][3];\n-\n-extern short c[4][37];\n-\n-extern double vrandNext[64];\n-\n-f (unsigned long long maddrOutState[37][8 * 8],\n-   int maddrIndices[8 * 8],\n-   int delta_E[8 * 8],\n-   int after_x_hash[8 * 8],\n-   int after_y_hash[8 * 8],\n-   int after_z_hash[8 * 8],\n-   int nActivePlane)\n-{\n-  int class[8 * 8];\n-  int ccoeff[8 * 8];\n-  int nx[8 * 8];\n-  int ny[8 * 8];\n-  int nz[8 * 8];\n-  int phat[8 * 8];\n-  int i;\n-  int inState;\n-\n-  for (inState = 0; inState < statesCount; inState++) {\n-    long long Nf[8 * 8];\n-    long long Ns[8 * 8];\n-    long long Nb[8 * 8];\n-    int bbState[8 * 8];\n-    int not_flag_p[8 * 8];\n-    int j;\n-    int max_cadrstates = 0;\n-\n-    for (i = 0; i < nActivePlane; i++) {\n-      int in = maddrIndices[i];\n-      int k = cn_cadrstates[class[in]][inState];\n-\n-      if (k > max_cadrstates)\n-\tmax_cadrstates = k;\n-    }\n-\n-    for (j = 0; j < max_cadrstates; j++) {\n-      int coState[8 * 8];\n-      int N_co[8 * 8];\n-      for (i = 0; i < nActivePlane; i++) {\n-\tint in = maddrIndices[i];\n-\tint k = cn_cadrstates[class[in]][inState];\n-\n-\tif (j < k-1) {\n-\t  long long numer = (nx[in] * cn[class[in]][inState][j][0] +\n-\t\t\t     ny[in] * cn[class[in]][inState][j][1] +\n-\t\t\t     nz[in] * cn[class[in]][inState][j][2]);\n-\t  long long denom = (nx[in] * cd[class[in]][inState][j][0] +\n-\t\t\t     ny[in] * cd[class[in]][inState][j][1] +\n-\t\t\t     nz[in] * cd[class[in]][inState][j][2]);\n-\t  long long Nj = ((denom == 0) ? 0 : (((((long long)(const64(0,0x10000)) * numer * Ns[in]) / denom) + (long long)(((unsigned) vrandNext[in]) & 0xffff)) >> 16));\n-\t  int outState = coutstate[class[in]][inState][j];\n-\t  int this_coState = ccostate[class[in]][inState][j];\n-\t  int del_E = cdel_E[class[in]][inState][j];\n-\t  int old_Ns = Ns[in];\n-\n-\t  maddrOutState[outState][in] += Nj;\n-\t  Ns[in] -= Nj;\n-\t  delta_E[in] += Nj * del_E;\n-\t  if (not_flag_p[in]) {\n-\t    after_x_hash[in] += Nj * c[0][outState];\n-\t    after_y_hash[in] += Nj * c[1][outState];\n-\t    after_z_hash[in] += Nj * c[2][outState];\n-\t  }\n-\t  coState[in] = this_coState;\n-\t  N_co[in] = Nj;\n-\t}\n-\telse if (j == k-1) {\n-\t  long long Nj = Ns[in];\n-\t  int outState = coutstate[class[in]][inState][j];\n-\t  int this_coState = ccostate[class[in]][inState][j];\n-\t  int del_E = cdel_E[class[in]][inState][j];\n-\t  maddrOutState[outState][in] += Nj;\n-\t  delta_E[in] += Nj * del_E;\n-\t  coState[in] = this_coState;\n-\t  N_co[in] = Nj;\n-\t}\n-      }\n-    }\n-  }\n-}"}]}