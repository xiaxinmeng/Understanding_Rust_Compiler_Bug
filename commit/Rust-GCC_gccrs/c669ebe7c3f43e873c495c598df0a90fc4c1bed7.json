{"sha": "c669ebe7c3f43e873c495c598df0a90fc4c1bed7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY2OWViZTdjM2Y0M2U4NzNjNDk1YzU5OGRmMGE5MGZjNGMxYmVkNw==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-06-16T21:27:14Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-06-16T21:27:14Z"}, "message": "re PR middle-end/64242 (Longjmp expansion incorrect)\n\n\tPR middle-end/64242\n\t* config/pa/pa.md (nonlocal_goto): Restore frame pointer last.  Add\n\tframe clobbers and schedule block.\n\t(builtin_longjmp): Likewise.\n\nFrom-SVN: r272361", "tree": {"sha": "4c3f66d16c0e8ccc382d550f953da7d29c16168a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c3f66d16c0e8ccc382d550f953da7d29c16168a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c669ebe7c3f43e873c495c598df0a90fc4c1bed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c669ebe7c3f43e873c495c598df0a90fc4c1bed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c669ebe7c3f43e873c495c598df0a90fc4c1bed7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c669ebe7c3f43e873c495c598df0a90fc4c1bed7/comments", "author": null, "committer": null, "parents": [{"sha": "0fcc78f79e85b816480e0425cc8d7c496e739e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcc78f79e85b816480e0425cc8d7c496e739e88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcc78f79e85b816480e0425cc8d7c496e739e88"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "369ca4b995b002b2fb55a60e49e817fa8dc5aec1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c669ebe7c3f43e873c495c598df0a90fc4c1bed7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c669ebe7c3f43e873c495c598df0a90fc4c1bed7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c669ebe7c3f43e873c495c598df0a90fc4c1bed7", "patch": "@@ -1,3 +1,10 @@\n+2019-06-16  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR middle-end/64242\n+\t* config/pa/pa.md (nonlocal_goto): Restore frame pointer last.  Add\n+\tframe clobbers and schedule block.\n+\t(builtin_longjmp): Likewise.\n+\n 2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.c (msp430_expand_helper): Setup arguments which"}, {"sha": "84630ad536d54fc926bb514aaf64b5178a0e8247", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c669ebe7c3f43e873c495c598df0a90fc4c1bed7/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c669ebe7c3f43e873c495c598df0a90fc4c1bed7/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=c669ebe7c3f43e873c495c598df0a90fc4c1bed7", "patch": "@@ -6904,21 +6904,24 @@\n   rtx stack = operands[2];\n   rtx fp = operands[3];\n \n-  lab = copy_to_reg (lab);\n-\n   emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n   emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n-  /* Restore the frame pointer.  The virtual_stack_vars_rtx is saved\n-     instead of the hard_frame_pointer_rtx in the save area.  As a\n-     result, an extra instruction is needed to adjust for the offset\n-     of the virtual stack variables and the hard frame pointer.  */\n-  if (GET_CODE (fp) != REG)\n-    fp = force_reg (Pmode, fp);\n-  emit_move_insn (hard_frame_pointer_rtx, plus_constant (Pmode, fp, -8));\n+  lab = copy_to_reg (lab);\n \n+  /* Restore the stack and frame pointers.  The virtual_stack_vars_rtx\n+     is saved instead of the hard_frame_pointer_rtx in the save area.\n+     As a result, an extra instruction is needed to adjust for the offset\n+     of the virtual stack variables and the hard frame pointer.  */\n+  fp = copy_to_reg (fp);\n   emit_stack_restore (SAVE_NONLOCAL, stack);\n \n+  /* Ensure the frame pointer move is not optimized.  */\n+  emit_insn (gen_blockage ());\n+  emit_clobber (hard_frame_pointer_rtx);\n+  emit_clobber (frame_pointer_rtx);\n+  emit_move_insn (hard_frame_pointer_rtx, plus_constant (Pmode, fp, -8));\n+\n   emit_use (hard_frame_pointer_rtx);\n   emit_use (stack_pointer_rtx);\n \n@@ -8695,23 +8698,26 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n   emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n-  /* Restore the frame pointer.  The virtual_stack_vars_rtx is saved\n-     instead of the hard_frame_pointer_rtx in the save area.  We need\n-     to adjust for the offset between these two values.  */\n-  if (GET_CODE (fp) != REG)\n-    fp = force_reg (Pmode, fp);\n-  emit_move_insn (hard_frame_pointer_rtx, plus_constant (Pmode, fp, -8));\n-\n-  /* This bit is the same as expand_builtin_longjmp.  */\n-  emit_stack_restore (SAVE_NONLOCAL, stack);\n-  emit_use (hard_frame_pointer_rtx);\n-  emit_use (stack_pointer_rtx);\n-\n   /* Load the label we are jumping through into r1 so that we know\n      where to look for it when we get back to setjmp's function for\n      restoring the gp.  */\n   emit_move_insn (pv, lab);\n \n+  /* Restore the stack and frame pointers.  The virtual_stack_vars_rtx\n+     is saved instead of the hard_frame_pointer_rtx in the save area.\n+     We need to adjust for the offset between these two values.  */\n+  fp = copy_to_reg (fp);\n+  emit_stack_restore (SAVE_NONLOCAL, stack);\n+\n+  /* Ensure the frame pointer move is not optimized.  */\n+  emit_insn (gen_blockage ());\n+  emit_clobber (hard_frame_pointer_rtx);\n+  emit_clobber (frame_pointer_rtx);\n+  emit_move_insn (hard_frame_pointer_rtx, plus_constant (Pmode, fp, -8));\n+\n+  emit_use (hard_frame_pointer_rtx);\n+  emit_use (stack_pointer_rtx);\n+\n   /* Prevent the insns above from being scheduled into the delay slot\n      of the interspace jump because the space register could change.  */\n   emit_insn (gen_blockage ());"}]}