{"sha": "d29260ce806a3aa415f3642fe5720901dad78531", "node_id": "C_kwDOANBUbNoAKGQyOTI2MGNlODA2YTNhYTQxNWYzNjQyZmU1NzIwOTAxZGFkNzg1MzE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-04T00:17:58Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-04T00:17:58Z"}, "message": "Daily bump.", "tree": {"sha": "0703ea36d7c563df7ef09d49cb4f42be15314398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0703ea36d7c563df7ef09d49cb4f42be15314398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d29260ce806a3aa415f3642fe5720901dad78531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29260ce806a3aa415f3642fe5720901dad78531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29260ce806a3aa415f3642fe5720901dad78531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29260ce806a3aa415f3642fe5720901dad78531/comments", "author": null, "committer": null, "parents": [{"sha": "32a06ce38a38bf37db468f0e6c83520fcc221534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a06ce38a38bf37db468f0e6c83520fcc221534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a06ce38a38bf37db468f0e6c83520fcc221534"}], "stats": {"total": 517, "additions": 516, "deletions": 1}, "files": [{"sha": "50e2543df387e06bb1cf202cb3a0adf37eefd248", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,41 @@\n+2022-11-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* doc/invoke.texi: -fconcepts no longer implies\n+\t-fconcepts-ts before C++20.\n+\n+2022-11-03  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (math_unop_insn): New attribute.\n+\t(<math_unop><mode>2, <math_unop><mode>2<exec>, <math_unop><mode>2,\n+\t<math_unop><mode>2<exec>, *<math_unop><mode>2_insn,\n+\t*<math_unop><mode>2<exec>_insn): Use math_unop_insn to generate\n+\tassembler output.\n+\n+2022-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::update_stmt): New.\n+\t* gimple-range.h (gimple_ranger::update_stmt): New prototype.\n+\t* tree-ssa-operands.cc (update_stmt_operands): Notify range\n+\tquery that stmt has changed.\n+\t* value-query.h (range_query::update_stmt): New.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* make-unique.h: New file.\n+\n+2022-11-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/107404\n+\t* config/i386/i386.md (eliminate reg-reg move by inverting the\n+\tcondition of a cmove #2 peephole2): Check if eliminated move\n+\tinitialized a register, used in the moved instruction.\n+\n+2022-11-03  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR target/107510\n+\t* config/gcn/gcn.cc (gcn_expand_reduc_scalar): Remove duplicate\n+\tUNSPEC_SMIN_DPP_SHR conditionals.\n+\n 2022-11-02  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n \n \t* common/config/riscv/riscv-common.cc: Add zawrs extension."}, {"sha": "c96f2246e01eee1870dbd11d89d716a9ffd4437c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1 +1 @@\n-20221103\n+20221104"}, {"sha": "f308f64d691f93862d507dd2574e4e24862f766e", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,244 @@\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h: Use std::unique_ptr for state machines from plugins.\n+\t* engine.cc: Likewise.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h: Use std::unique_ptr for known functions.\n+\t* engine.cc: Likewise.\n+\t* known-function-manager.cc: Likewise.\n+\t* known-function-manager.h: Likewise.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analysis-plan.cc: Define INCLUDE_MEMORY before including\n+\tsystem.h.\n+\t* analyzer-pass.cc: Likewise.\n+\t* analyzer-selftests.cc: Likewise.\n+\t* analyzer.cc: Likewise.\n+\t* analyzer.h: Use std::unique_ptr in bifurcation code.\n+\t* call-string.cc: Define INCLUDE_MEMORY before including system.h.\n+\t* complexity.cc: Likewise.\n+\t* engine.cc: Use std::unique_ptr in bifurcation code.\n+\t* exploded-graph.h: Likewise.\n+\t* known-function-manager.cc: Define INCLUDE_MEMORY before\n+\tincluding system.h.\n+\t* region-model-impl-calls.cc: Use std::unique_ptr in bifurcation\n+\tcode.\n+\t* region-model.cc: Likewise.\n+\t* region-model.h: Likewise.\n+\t* supergraph.cc: Define INCLUDE_MEMORY before including system.h.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call-info.cc: Use std::unique_ptr for checker_event.\n+\t* checker-path.cc: Likewise.\n+\t* checker-path.h: Likewise.\n+\t* diagnostic-manager.cc: Likewise.\n+\t* engine.cc: Likewise.\n+\t* pending-diagnostic.cc: Likewise.\n+\t* sm-signal.cc: Likewise.\n+\t* varargs.cc: Likewise.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc: Include \"make-unique.h\".\n+\tUse std::unique_ptr for feasibility_problems and exploded_path.\n+\tDelete explicit saved_diagnostic dtor.\n+\t* diagnostic-manager.h: Likewise.\n+\t* engine.cc: Likewise.\n+\t* exploded-graph.h: Likewise.\n+\t* feasible-graph.cc: Likewise.\n+\t* feasible-graph.h: Likewise.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.cc (rewind_event::rewind_event): Update for usage of\n+\tstd::unique_ptr on custom_edge_info.\n+\t* engine.cc (exploded_node::on_longjmp): Likewise.\n+\t(exploded_edge::exploded_edge): Likewise.\n+\t(exploded_edge::~exploded_edge): Delete.\n+\t(exploded_graph::add_function_entry): Update for usage of\n+\tstd::unique_ptr on custom_edge_info.\n+\t(exploded_graph::add_edge): Likewise.\n+\t(add_tainted_args_callback): Likewise.\n+\t(exploded_graph::maybe_create_dynamic_call): Likewise.\n+\t(exploded_graph::process_node): Likewise.\n+\t* exploded-graph.h (exploded_edge::~exploded_edge): Delete.\n+\t(exploded_edge::m_custom_info): Use std::unique_ptr.\n+\t(exploded_edge::add_edge): Likewise.\n+\t* sm-signal.cc (register_signal_handler::impl_transition): Use\n+\tmake_unique.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc (saved_diagnostic::saved_diagnostic): Make\n+\tstmt_finder const.\n+\t(saved_diagnostic::~saved_diagnostic): Remove explicit delete of\n+\tm_stmt_finder.\n+\t(diagnostic_manager::add_diagnostic): Make stmt_finder const.\n+\t* diagnostic-manager.h (saved_diagnostic::saved_diagnostic):\n+\tLikewise.\n+\t(saved_diagnostic::m_stmt_finder): Convert to std::unique_ptr.\n+\t(diagnostic_manager::add_diagnostic): Make stmt_finder const.\n+\t* engine.cc (impl_sm_context::impl_sm_context): Likewise.\n+\t(impl_sm_context::m_stmt_finder): Likewise.\n+\t(leak_stmt_finder::clone): Convert return type to std::unique_ptr.\n+\t* exploded-graph.h (stmt_finder::clone): Likewise.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call-info.cc: Add define of INCLUDE_MEMORY.\n+\t* call-summary.cc: Likewise.\n+\t* checker-path.cc: Likewise.\n+\t* constraint-manager.cc: Likewise.\n+\t* diagnostic-manager.cc: Likewise.\n+\t(saved_diagnostic::saved_diagnostic): Use std::unique_ptr for\n+\tparam d and field m_d.\n+\t(saved_diagnostic::~saved_diagnostic): Remove explicit delete of m_d.\n+\t(saved_diagnostic::add_note): Use std::unique_ptr for\n+\tparam pn.\n+\t(saved_diagnostic::get_pending_diagnostic): Update for conversion\n+\tof m_sd.m_d to unique_ptr.\n+\t(diagnostic_manager::add_diagnostic): Use std::unique_ptr for\n+\tparam d.  Remove explicit deletion.\n+\t(diagnostic_manager::add_note): Use std::unique_ptr for param pn.\n+\t(diagnostic_manager::emit_saved_diagnostic): Update for conversion\n+\tof m_sd.m_d to unique_ptr.\n+\t(null_assignment_sm_context::warn): Use std::unique_ptr for\n+\tparam d.  Remove explicit deletion.\n+\t* diagnostic-manager.h (saved_diagnostic::saved_diagnostic): Use\n+\tstd::unique_ptr for param d.\n+\t(saved_diagnostic::add_note): Likewise for param pn.\n+\t(saved_diagnostic::m_d): Likewise.\n+\t(diagnostic_manager::add_diagnostic): Use std::unique_ptr for\n+\tparam d.\n+\t(diagnostic_manager::add_note): Use std::unique_ptr for param pn.\n+\t* engine.cc: Include \"make-unique.h\".\n+\t(impl_region_model_context::warn): Update to use std::unique_ptr\n+\tfor param, removing explicit deletion.\n+\t(impl_region_model_context::add_note): Likewise.\n+\t(impl_sm_context::warn): Update to use std::unique_ptr\n+\tfor param.\n+\t(impl_region_model_context::on_state_leak): Likewise for result of\n+\ton_leak.\n+\t(exploded_node::on_longjmp): Use make_unique when creating\n+\tpending_diagnostic.\n+\t(exploded_graph::process_node): Likewise.\n+\t* exploded-graph.h (impl_region_model_context::warn): Update to\n+\tuse std::unique_ptr for param.\n+\t(impl_region_model_context::add_note): Likewise.\n+\t* feasible-graph.cc: Add define of INCLUDE_MEMORY.\n+\t* pending-diagnostic.cc: Likewise.\n+\t* pending-diagnostic.h: Include analyzer.sm.h\"\n+\t* program-point.cc: Add define of INCLUDE_MEMORY.\n+\t* program-state.cc: Likewise.\n+\t* region-model-asm.cc: Likewise.\n+\t* region-model-impl-calls.cc: Likewise.  Include \"make-unique.h\".\n+\t(region_model::impl_call_putenv): Use make_unique when creating\n+\tpending_diagnostic.\n+\t* region-model-manager.cc: Add define of INCLUDE_MEMORY.\n+\t* region-model-reachability.cc: Likewise.\n+\t* region-model.cc: Likewise.  Include \"make-unique.h\".\n+\t(region_model::get_gassign_result): Use make_unique when creating\n+\tpending_diagnostic.\n+\t(region_model::check_for_poison): Likewise.\n+\t(region_model::on_stmt_pre): Likewise.\n+\t(region_model::check_symbolic_bounds): Likewise.\n+\t(region_model::check_region_bounds): Likewise.\n+\t(annotating_ctxt: make_note): Use std::unique_ptr for result.\n+\t(region_model::deref_rvalue): Use make_unique when creating\n+\tpending_diagnostic.\n+\t(region_model::check_for_writable_region): Likewise.\n+\t(region_model::check_region_size): Likewise.\n+\t(region_model::check_dynamic_size_for_floats): Likewise.\n+\t(region_model::maybe_complain_about_infoleak): Likewise.\n+\t(noop_region_model_context::add_note): Use std::unique_ptr for\n+\tparam.  Remove explicit deletion.\n+\t* region-model.h: Include \"analyzer/pending-diagnostic.h\".\n+\t(region_model_context::warn): Convert param to std::unique_ptr.\n+\t(region_model_context::add_note): Likewise.\n+\t(noop_region_model_context::warn): Likewise.\n+\t(noop_region_model_context::add_note): Likewise.\n+\t(region_model_context_decorator::warn): Likewise.\n+\t(region_model_context_decorator::add_note): Likewise.\n+\t(note_adding_context::warn): Likewise.\n+\t(note_adding_context::make_note): Likewise for return type.\n+\t(test_region_model_context::warn): Convert param to\n+\tstd::unique_ptr.\n+\t* region.cc: Add define of INCLUDE_MEMORY.\n+\t* sm-fd.cc: Likewise.  Include \"make-unique.h\".\n+\t(fd_state_machine::check_for_fd_attrs): Use make_unique when\n+\tcreating pending_diagnostics.\n+\t(fd_state_machine::on_open): Likewise.\n+\t(fd_state_machine::on_creat): Likewise.\n+\t(fd_state_machine::check_for_dup): Likewise.\n+\t(fd_state_machine::on_close): Likewise.\n+\t(fd_state_machine::check_for_open_fd): Likewise.\n+\t(fd_state_machine::on_leak): Likewise, converting return type to\n+\tstd::unique_ptr.\n+\t* sm-file.cc: Add define of INCLUDE_MEMORY.  Include\n+\t\"make-unique.h\".\n+\t(fileptr_state_machine::on_stmt): Use make_unique when creating\n+\tpending_diagnostic.\n+\t(fileptr_state_machine::on_leak): Likewise, converting return type\n+\tto std::unique_ptr.\n+\t* sm-malloc.cc: Add define of INCLUDE_MEMORY.  Include\n+\t\"make-unique.h\".\n+\t(malloc_state_machine::on_stmt): Use make_unique when creating\n+\tpending_diagnostic.\n+\t(malloc_state_machine::handle_free_of_non_heap): Likewise.\n+\t(malloc_state_machine::on_deallocator_call): Likewise.\n+\t(malloc_state_machine::on_realloc_call): Likewise.\n+\t(malloc_state_machine::on_leak): Likewise, converting return type\n+\tto std::unique_ptr.\n+\t* sm-pattern-test.cc: Add define of INCLUDE_MEMORY.  Include\n+\t\"make-unique.h\".\n+\t(pattern_test_state_machine::on_condition): Use make_unique when\n+\tcreating pending_diagnostic.\n+\t* sm-sensitive.cc: Add define of INCLUDE_MEMORY.  Include\n+\t\"make-unique.h\".\n+\t(sensitive_state_machine::warn_for_any_exposure): Use make_unique\n+\twhen creating pending_diagnostic.\n+\t* sm-signal.cc: Add define of INCLUDE_MEMORY.  Include\n+\t\"make-unique.h\".\n+\t(signal_state_machine::on_stmt): Use make_unique when creating\n+\tpending_diagnostic.\n+\t* sm-taint.cc: Add define of INCLUDE_MEMORY.  Include\n+\t\"make-unique.h\".\n+\t(taint_state_machine::check_for_tainted_size_arg): Use make_unique\n+\twhen creating pending_diagnostic.\n+\t(taint_state_machine::check_for_tainted_divisor): Likewise.\n+\t(region_model::check_region_for_taint): Likewise.\n+\t(region_model::check_dynamic_size_for_taint): Likewise.\n+\t* sm.cc: Add define of INCLUDE_MEMORY.  Include\n+\t\"analyzer/pending-diagnostic.h\".\n+\t(state_machine::on_leak): Move here from sm.h, changing return\n+\ttype to std::unique_ptr.\n+\t* sm.h (state_machine::on_leak): Change return type to\n+\tstd::unique_ptr.  Move defn of base impl to sm.cc\n+\t(sm_context::warn): Convert param d to std_unique_ptr.\n+\t* state-purge.cc: Add define of INCLUDE_MEMORY.\n+\t* store.cc: Likewise.\n+\t* svalue.cc: Likewise.\n+\t* trimmed-graph.cc: Likewise.\n+\t* varargs.cc: Likewise.  Include \"make-unique.h\".\n+\t(va_list_state_machine::check_for_ended_va_list): Use make_unique\n+\twhen creating pending_diagnostic.\n+\t(va_list_state_machine::on_leak): Likewise, converting return type\n+\tto std::unique_ptr.\n+\t(region_model::impl_call_va_arg): Use make_unique when creating\n+\tpending_diagnostic.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107486\n+\t* analyzer.cc (is_pipe_call_p): New.\n+\t* analyzer.h (is_pipe_call_p): New decl.\n+\t* region-model.cc (region_model::on_call_pre): Use it.\n+\t(region_model::on_call_post): Likewise.\n+\n 2022-10-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sm-fd.cc (fd_state_machine::on_open): Transition to \"unchecked\""}, {"sha": "98fcdec2c251bc3e9abac9065b55d371357c769a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,8 @@\n+2022-11-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-opts.cc (c_common_post_options): -fconcepts no longer implies\n+\t-fconcepts-ts before C++20.\n+\n 2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.cc (def_fn_type): Call build_function_type for"}, {"sha": "95053e8cc6f27ea9771e13596a84d88a69ed04ef", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,23 @@\n+2022-11-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.cc (in_underspecified_init, start_underspecified_init)\n+\t(finish_underspecified_init): New.\n+\t(shadow_tag_warned, parser_xref_tag, start_struct, start_enum):\n+\tGive errors inside initializers of underspecified declarations.\n+\t(grokdeclarator): Handle (erroneous) case of C2X auto on a\n+\tparameter.\n+\t(declspecs_add_type): Handle c2x_auto_p case.\n+\t(declspecs_add_scspec): Handle auto possibly setting c2x_auto_p in\n+\tC2X mode.\n+\t(finish_declspecs): Handle c2x_auto_p.\n+\t* c-parser.cc (c_parser_declaration_or_fndef): Handle C2X auto.\n+\t* c-tree.h (C_DECL_UNDERSPECIFIED): New macro.\n+\t(struct c_declspecs): Add c2x_auto_p.\n+\t(start_underspecified_init, finish_underspecified_init): New\n+\tprototypes.\n+\t* c-typeck.cc (build_external_ref): Give error for underspecified\n+\tdeclaration referenced in its initializer.\n+\n 2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.cc (grokdeclarator): Pass"}, {"sha": "07d5cb1a68a6841d8e1cdcf0c7a22c6662b817eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,26 @@\n+2022-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107488\n+\t* call.cc (do_warn_dangling_reference): Quash -Wdangling-reference\n+\tfor member operator*.\n+\n+2022-11-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107179\n+\t* constraint.cc (tsubst_requires_expr): Make sure we're not\n+\tdeferring access checks.\n+\n+2022-11-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.cc (cp_parser_template_declaration_after_parameters): Fix\n+\tconcept parsing below C++20.\n+\n+2022-11-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/93413\n+\t* decl2.cc (mark_used): Don't defer synthesis of virtual\n+\tfunctions.\n+\n 2022-11-01  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (LAMBDA_EXPR_SCOPE_SIG_DISCRIMINATOR): New."}, {"sha": "12002d9798fd140ee48a00c7dab8ab889e8f5840", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,10 @@\n+2022-11-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.cc (gfc_match_omp_clauses): Permit derived types for\n+\tthe 'to' and 'from' clauses of 'target update'.\n+\t* trans-openmp.cc (gfc_trans_omp_clauses): Fixes for\n+\tderived-type changes; fix size for scalars.\n+\n 2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* trans-types.cc (gfc_get_function_type): Do not use"}, {"sha": "6d7e17c1baed237fa8f3dbaf3a257968d26f3e78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,172 @@\n+2022-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107488\n+\t* g++.dg/warn/Wdangling-reference5.C: New test.\n+\n+2022-11-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107179\n+\t* g++.dg/cpp2a/concepts-requires31.C: New test.\n+\n+2022-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* g++.dg/pr99966.C: New.\n+\t* gcc.dg/pr93917.c: New.\n+\t* gcc.dg/pr102650.c: New.\n+\n+2022-11-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/concepts/auto1.C:\n+\t* g++.dg/concepts/auto3.C:\n+\t* g++.dg/concepts/auto4.C:\n+\t* g++.dg/concepts/class-deduction1.C:\n+\t* g++.dg/concepts/class5.C:\n+\t* g++.dg/concepts/class6.C:\n+\t* g++.dg/concepts/debug1.C:\n+\t* g++.dg/concepts/decl-diagnose.C:\n+\t* g++.dg/concepts/deduction-constraint1.C:\n+\t* g++.dg/concepts/diagnostic1.C:\n+\t* g++.dg/concepts/dr1430.C:\n+\t* g++.dg/concepts/equiv.C:\n+\t* g++.dg/concepts/equiv2.C:\n+\t* g++.dg/concepts/expression.C:\n+\t* g++.dg/concepts/expression2.C:\n+\t* g++.dg/concepts/expression3.C:\n+\t* g++.dg/concepts/fn-concept1.C:\n+\t* g++.dg/concepts/fn-concept2.C:\n+\t* g++.dg/concepts/fn-concept3.C:\n+\t* g++.dg/concepts/fn1.C:\n+\t* g++.dg/concepts/fn10.C:\n+\t* g++.dg/concepts/fn2.C:\n+\t* g++.dg/concepts/fn3.C:\n+\t* g++.dg/concepts/fn4.C:\n+\t* g++.dg/concepts/fn5.C:\n+\t* g++.dg/concepts/fn6.C:\n+\t* g++.dg/concepts/fn8.C:\n+\t* g++.dg/concepts/fn9.C:\n+\t* g++.dg/concepts/generic-fn-err.C:\n+\t* g++.dg/concepts/generic-fn.C:\n+\t* g++.dg/concepts/inherit-ctor1.C:\n+\t* g++.dg/concepts/inherit-ctor3.C:\n+\t* g++.dg/concepts/intro1.C:\n+\t* g++.dg/concepts/intro2.C:\n+\t* g++.dg/concepts/intro3.C:\n+\t* g++.dg/concepts/intro4.C:\n+\t* g++.dg/concepts/intro5.C:\n+\t* g++.dg/concepts/intro6.C:\n+\t* g++.dg/concepts/intro7.C:\n+\t* g++.dg/concepts/locations1.C:\n+\t* g++.dg/concepts/partial-concept-id1.C:\n+\t* g++.dg/concepts/partial-concept-id2.C:\n+\t* g++.dg/concepts/partial-spec5.C:\n+\t* g++.dg/concepts/placeholder2.C:\n+\t* g++.dg/concepts/placeholder3.C:\n+\t* g++.dg/concepts/placeholder4.C:\n+\t* g++.dg/concepts/placeholder5.C:\n+\t* g++.dg/concepts/placeholder6.C:\n+\t* g++.dg/concepts/pr65634.C:\n+\t* g++.dg/concepts/pr65636.C:\n+\t* g++.dg/concepts/pr65681.C:\n+\t* g++.dg/concepts/pr65848.C:\n+\t* g++.dg/concepts/pr67249.C:\n+\t* g++.dg/concepts/pr67595.C:\n+\t* g++.dg/concepts/pr68434.C:\n+\t* g++.dg/concepts/pr71127.C:\n+\t* g++.dg/concepts/pr71128.C:\n+\t* g++.dg/concepts/pr71131.C:\n+\t* g++.dg/concepts/pr71385.C:\n+\t* g++.dg/concepts/pr85065.C:\n+\t* g++.dg/concepts/template-parm11.C:\n+\t* g++.dg/concepts/template-parm12.C:\n+\t* g++.dg/concepts/template-parm2.C:\n+\t* g++.dg/concepts/template-parm3.C:\n+\t* g++.dg/concepts/template-parm4.C:\n+\t* g++.dg/concepts/template-template-parm1.C:\n+\t* g++.dg/concepts/var-concept1.C:\n+\t* g++.dg/concepts/var-concept2.C:\n+\t* g++.dg/concepts/var-concept3.C:\n+\t* g++.dg/concepts/var-concept4.C:\n+\t* g++.dg/concepts/var-concept5.C:\n+\t* g++.dg/concepts/var-concept6.C:\n+\t* g++.dg/concepts/var-concept7.C:\n+\t* g++.dg/concepts/var-templ2.C:\n+\t* g++.dg/concepts/var-templ3.C:\n+\t* g++.dg/concepts/variadic1.C:\n+\t* g++.dg/concepts/variadic2.C:\n+\t* g++.dg/concepts/variadic3.C:\n+\t* g++.dg/concepts/variadic4.C:\n+\t* g++.dg/cpp2a/concepts-pr65575.C:\n+\t* g++.dg/cpp2a/concepts-pr66091.C:\n+\t* g++.dg/cpp2a/concepts-pr84980.C:\n+\t* g++.dg/cpp2a/concepts-pr85265.C: Pass -fconcepts-ts.\n+\t* g++.dg/cpp2a/concepts-pr84979-2.C:\n+\t* g++.dg/cpp2a/concepts-pr84979-3.C: Same diagnostics\n+\tin C++20 and below.\n+\n+2022-11-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/93413\n+\t* g++.dg/cpp2a/constexpr-virtual21.C: New test.\n+\n+2022-11-03  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* gcc.target/gcn/unsafe-math-1.c: New.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_gil_plugin.c: Use std::unique_ptr for\n+\tstate machines from plugins.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_kernel_plugin.c: Use std::unique_ptr for\n+\tknown functions.\n+\t* gcc.dg/plugin/analyzer_known_fns_plugin.c: Likewise.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_kernel_plugin.c: Include \"make-unique.h\".\n+\tUse std::unique_ptr in bifurcation code.\n+\t* gcc.dg/plugin/analyzer_known_fns_plugin.c: Likewise.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_gil_plugin.c: Add define of\n+\tINCLUDE_MEMORY.  Include \"make-unique.h\".\n+\t(gil_state_machine::check_for_pyobject_in_call): Use make_unique\n+\twhen creating pending_diagnostic.\n+\t(gil_state_machine::on_stmt): Likewise.\n+\t(gil_state_machine::check_for_pyobject_usage_without_gil): Likewise.\n+\t* gcc.dg/plugin/analyzer_kernel_plugin.c: : Add define of\n+\tINCLUDE_MEMORY.\n+\t* gcc.dg/plugin/analyzer_known_fns_plugin.c: Likewise.\n+\n+2022-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp-update.c: New.\n+\n+2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107486\n+\t* gcc.dg/analyzer/pipe-pr107486.c: New test.\n+\t* gcc.dg/analyzer/pipe-void-return.c: New test.\n+\n+2022-11-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/107404\n+\t* g++.target/i386/pr107404.C: New test.\n+\n+2022-11-03  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/106806\n+\t* gcc.dg/tree-ssa/gen-vect-34.c: Adjust with vect_masked_load\n+\teffective target.\n+\n+2022-11-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-auto-1.c, gcc.dg/c2x-auto-2.c, gcc.dg/c2x-auto-3.c,\n+\tgcc.dg/c2x-auto-4.c, gcc.dg/gnu2x-auto-1.c: New tests.\n+\n 2022-11-02  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n \n \t* gcc.target/riscv/zawrs.c: New test."}, {"sha": "35e21000451a0e35c97d4b00193d146a02b9e67a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,8 @@\n+2022-11-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/target-11.f90: New test.\n+\t* testsuite/libgomp.fortran/target-13.f90: New test.\n+\n 2022-11-02  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR libgomp/106643"}, {"sha": "61fe714b4a1f2a0c9c99ee7a312908bf55253c8e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29260ce806a3aa415f3642fe5720901dad78531/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29260ce806a3aa415f3642fe5720901dad78531/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d29260ce806a3aa415f3642fe5720901dad78531", "patch": "@@ -1,3 +1,10 @@\n+2022-11-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_algobase.h (__detail::__copy_or_move):\n+\tMove output iterator.\n+\t* testsuite/25_algorithms/copy/constrained.cc: Check copying to\n+\tmove-only output iterator.\n+\n 2022-11-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* libsupc++/eh_globals.cc (constant_init::unused): Remove."}]}