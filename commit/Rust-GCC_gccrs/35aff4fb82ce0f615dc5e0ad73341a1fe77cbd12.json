{"sha": "35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhZmY0ZmI4MmNlMGY2MTVkYzVlMGFkNzMzNDFhMWZlNzdjYmQxMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-08-19T06:04:38Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-08-19T06:04:38Z"}, "message": "invoke.texi: Document -Wc99-c11-compat.\n\n\t* doc/invoke.texi: Document -Wc99-c11-compat.\nc-family/\n\t* c.opt (Wc99-c11-compat): New option.\nc/\n\t* c-decl.c (diagnose_mismatched_decls): Unconditionally call\n\tpedwarn_c99 instead of pedwarn.\n\t(grokfield): Likewise.\n\t(warn_defaults_to): New function.\n\t(grokdeclarator): Call warn_defaults_to instead of pedwarn_c99.\n\tUnconditionally call pedwarn_c99 instead of pedwarn.\n\t(start_function): Call warn_defaults_to instead of pedwarn_c99.\n\t(declspecs_add_scspec): Call pedwarn_c99 instead of pedwarn, don't\n\tcheck flag_isoc11 before.\n\t* c-errors.c (pedwarn_c99): Change the return type to bool.\n\tHandle -Wc99-c11-compat.\n\t* c-parser.c (disable_extension_diagnostics): Handle\n\twarn_c99_c11_compat.\n\t(restore_extension_diagnostics): Likewise.\n\t(c_parser_static_assert_declaration_no_semi): Call pedwarn_c99\n\tinstead of pedwarn, don't check flag_isoc11 before.\n\t(c_parser_declspecs): Likewise.\n\t(c_parser_alignas_specifier): Likewise.\n\t(c_parser_alignof_expression): Likewise.\n\t(c_parser_generic_selection): Likewise.\n\t* c-tree.h (pedwarn_c99): Update declaration.\n\t* c-typeck.c (c_finish_return): Call pedwarn or warning_at instead\n\tof pedwarn_c99.\ntestsuite/\n\t* gcc.dg/Wc99-c11-compat-1.c: New test.\n\t* gcc.dg/Wc99-c11-compat-2.c: New test.\n\t* gcc.dg/Wc99-c11-compat-3.c: New test.\n\t* gcc.dg/Wc99-c11-compat-4.c: New test.\n\t* gcc.dg/Wc99-c11-compat-5.c: New test.\n\t* gcc.dg/Wc99-c11-compat-6.c: New test.\n\t* gcc.dg/Wc99-c11-compat-7.c: New test.\n\nFrom-SVN: r214133", "tree": {"sha": "252dbb8b85e09aa8d379abb28ffc5e483fa4edb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/252dbb8b85e09aa8d379abb28ffc5e483fa4edb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdec323d35ab9bf489e374c0545621bc90dd08c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdec323d35ab9bf489e374c0545621bc90dd08c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdec323d35ab9bf489e374c0545621bc90dd08c0"}], "stats": {"total": 369, "additions": 291, "deletions": 78}, "files": [{"sha": "002da55a3fbc2ac518729c83f423d6370c362100", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -1,3 +1,7 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* doc/invoke.texi: Document -Wc99-c11-compat.\n+\n 2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (PREV_INSN): Split macro in two: the existing one,"}, {"sha": "e25f1d8516443996873ad1f563fdbbd4a5c42cba", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -1,3 +1,7 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c.opt (Wc99-c11-compat): New option.\n+\n 2014-08-19  Marek Polacek  <polacek@redhat.com>\n \n \t* c-opts.c (sanitize_cpp_opts): Make warn_long_long be set according"}, {"sha": "484839904ce80295a79d48b8f2ca48d5d53f0bcb", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -295,6 +295,10 @@ Wc90-c99-compat\n C ObjC Var(warn_c90_c99_compat) Init(-1) Warning\n Warn about features not present in ISO C90, but present in ISO C99\n \n+Wc99-c11-compat\n+C ObjC Var(warn_c99_c11_compat) Init(-1) Warning\n+Warn about features not present in ISO C99, but present in ISO C11\n+\n Wc++-compat\n C ObjC Var(warn_cxx_compat) Warning\n Warn about C constructs that are not in the common subset of C and C++"}, {"sha": "27f865eb29fe88537d5d78ee351454e6f5db39d1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -1,3 +1,29 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (diagnose_mismatched_decls): Unconditionally call\n+\tpedwarn_c99 instead of pedwarn.\n+\t(grokfield): Likewise.\n+\t(warn_defaults_to): New function.\n+\t(grokdeclarator): Call warn_defaults_to instead of pedwarn_c99.\n+\tUnconditionally call pedwarn_c99 instead of pedwarn.\n+\t(start_function): Call warn_defaults_to instead of pedwarn_c99.\n+\t(declspecs_add_scspec): Call pedwarn_c99 instead of pedwarn, don't\n+\tcheck flag_isoc11 before.\n+\t* c-errors.c (pedwarn_c99): Change the return type to bool.\n+\tHandle -Wc99-c11-compat.\n+\t* c-parser.c (disable_extension_diagnostics): Handle\n+\twarn_c99_c11_compat.\n+\t(restore_extension_diagnostics): Likewise.\n+\t(c_parser_static_assert_declaration_no_semi): Call pedwarn_c99\n+\tinstead of pedwarn, don't check flag_isoc11 before.\n+\t(c_parser_declspecs): Likewise.\n+\t(c_parser_alignas_specifier): Likewise.\n+\t(c_parser_alignof_expression): Likewise.\n+\t(c_parser_generic_selection): Likewise.\n+\t* c-tree.h (pedwarn_c99): Update declaration.\n+\t* c-typeck.c (c_finish_return): Call pedwarn or warning_at instead\n+\tof pedwarn_c99.\n+\n 2014-08-19  Marek Polacek  <polacek@redhat.com>\n \n \t* c-decl.c (warn_variable_length_array): Pass OPT_Wvla unconditionally"}, {"sha": "ec0d0ef09a7f400e24b52519f06cdb50d8983a2a", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -538,6 +538,8 @@ static tree grokdeclarator (const struct c_declarator *,\n \t\t\t    bool *, enum deprecated_states);\n static tree grokparms (struct c_arg_info *, bool);\n static void layout_array_type (tree);\n+static void warn_defaults_to (location_t, int, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,4);\n \f\n /* T is a statement.  Add it to the statement-tree.  This is the\n    C/ObjC version--C++ has a slightly different version of this\n@@ -1844,12 +1846,9 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t newdecl);\n \t  locate_old_decl (olddecl);\n \t}\n-      else if (pedantic && !flag_isoc11)\n-\t{\n-\t  pedwarn (input_location, OPT_Wpedantic,\n-\t\t   \"redefinition of typedef %q+D\", newdecl);\n-\t  locate_old_decl (olddecl);\n-\t}\n+      else if (pedwarn_c99 (input_location, OPT_Wpedantic,\n+\t\t\t    \"redefinition of typedef %q+D\", newdecl))\n+\tlocate_old_decl (olddecl);\n \n       return true;\n     }\n@@ -4941,6 +4940,22 @@ warn_variable_length_array (tree name, tree size)\n     }\n }\n \n+/* Print warning about defaulting to int if necessary.  */\n+\n+static void\n+warn_defaults_to (location_t location, int opt, const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n+                       flag_isoc99 ? DK_PEDWARN : DK_WARNING);\n+  diagnostic.option_index = opt;\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+}\n+\n /* Given declspecs and a declarator,\n    determine the name and type of the object declared\n    and construct a ..._DECL node for it.\n@@ -5117,12 +5132,12 @@ grokdeclarator (const struct c_declarator *declarator,\n       else\n \t{\n \t  if (name)\n-\t    pedwarn_c99 (loc, flag_isoc99 ? 0 : OPT_Wimplicit_int,\n-\t\t\t \"type defaults to %<int%> in declaration of %qE\",\n-\t\t\t name);\n+\t    warn_defaults_to (loc, flag_isoc99 ? 0 : OPT_Wimplicit_int,\n+\t\t\t      \"type defaults to %<int%> in declaration \"\n+\t\t\t      \"of %qE\", name);\n \t  else\n-\t    pedwarn_c99 (input_location, flag_isoc99 ? 0 : OPT_Wimplicit_int,\n-\t\t\t \"type defaults to %<int%> in type name\");\n+\t    warn_defaults_to (loc, flag_isoc99 ? 0 : OPT_Wimplicit_int,\n+\t\t\t      \"type defaults to %<int%> in type name\");\n \t}\n     }\n \n@@ -6249,15 +6264,12 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      DECL_DECLARED_INLINE_P (decl) = 1;\n \t    if (declspecs->noreturn_p)\n \t      {\n-\t\tif (!flag_isoc11)\n-\t\t  {\n-\t\t    if (flag_isoc99)\n-\t\t      pedwarn (loc, OPT_Wpedantic,\n+\t\tif (flag_isoc99)\n+\t\t  pedwarn_c99 (loc, OPT_Wpedantic,\n \t\t\t       \"ISO C99 does not support %<_Noreturn%>\");\n-\t\t    else\n-\t\t      pedwarn (loc, OPT_Wpedantic,\n+\t\telse\n+\t\t  pedwarn_c99 (loc, OPT_Wpedantic,\n \t\t\t       \"ISO C90 does not support %<_Noreturn%>\");\n-\t\t  }\n \t\tTREE_THIS_VOLATILE (decl) = 1;\n \t      }\n \t  }\n@@ -6964,15 +6976,12 @@ grokfield (location_t loc,\n \t  pedwarn (loc, 0, \"declaration does not declare anything\");\n \t  return NULL_TREE;\n \t}\n-      if (!flag_isoc11)\n-\t{\n-\t  if (flag_isoc99)\n-\t    pedwarn (loc, OPT_Wpedantic,\n+      if (flag_isoc99)\n+\tpedwarn_c99 (loc, OPT_Wpedantic,\n \t\t     \"ISO C99 doesn%'t support unnamed structs/unions\");\n-\t  else\n-\t    pedwarn (loc, OPT_Wpedantic,\n+      else\n+\tpedwarn_c99 (loc, OPT_Wpedantic,\n \t\t     \"ISO C90 doesn%'t support unnamed structs/unions\");\n-\t}\n     }\n \n   value = grokdeclarator (declarator, declspecs, FIELD, false,\n@@ -7913,9 +7922,10 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n     }\n \n   if (warn_about_return_type)\n-    pedwarn_c99 (loc, flag_isoc99 ? 0\n-\t\t : (warn_return_type ? OPT_Wreturn_type : OPT_Wimplicit_int),\n-\t\t \"return type defaults to %<int%>\");\n+    warn_defaults_to (loc, flag_isoc99 ? 0\n+\t\t\t   : (warn_return_type ? OPT_Wreturn_type\n+\t\t\t      : OPT_Wimplicit_int),\n+\t\t      \"return type defaults to %<int%>\");\n \n   /* Make the init_value nonzero so pushdecl knows this is not tentative.\n      error_mark_node is replaced below (in pop_scope) with the BLOCK.  */\n@@ -9893,14 +9903,14 @@ declspecs_add_scspec (source_location loc,\n \t     identifier in the implementation namespace; only diagnose\n \t     it for the C11 spelling because of existing code using\n \t     the other spelling.  */\n-\t  if (!flag_isoc11 && !specs->thread_gnu_p)\n+\t  if (!specs->thread_gnu_p)\n \t    {\n \t      if (flag_isoc99)\n-\t\tpedwarn (loc, OPT_Wpedantic,\n-\t\t\t \"ISO C99 does not support %qE\", scspec);\n+\t\tpedwarn_c99 (loc, OPT_Wpedantic,\n+\t\t\t     \"ISO C99 does not support %qE\", scspec);\n \t      else\n-\t\tpedwarn (loc, OPT_Wpedantic,\n-\t\t\t \"ISO C90 does not support %qE\", scspec);\n+\t\tpedwarn_c99 (loc, OPT_Wpedantic,\n+\t\t\t     \"ISO C90 does not support %qE\", scspec);\n \t    }\n \t  specs->locations[cdw_thread] = loc;\n \t}"}, {"sha": "c1f9c3570d2d8f444b98b5f1b6d9d50bedc816ba", "filename": "gcc/c/c-errors.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-errors.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -29,20 +29,42 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"opts.h\"\n \n-/* Issue an ISO C99 pedantic warning MSGID.  */\n+/* Issue an ISO C99 pedantic warning MSGID if -pedantic outside C11 mode,\n+   otherwise issue warning MSGID if -Wc99-c11-compat is specified.\n+   This function is supposed to be used for matters that are allowed in\n+   ISO C11 but not supported in ISO C99, thus we explicitly don't pedwarn\n+   when C11 is specified.  */\n \n-void\n+bool\n pedwarn_c99 (location_t location, int opt, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n+  bool warned = false;\n \n   va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n-\t\t       flag_isoc99 ? DK_PEDWARN : DK_WARNING);\n-  diagnostic.option_index = opt;\n-  report_diagnostic (&diagnostic);\n+  /* If desired, issue the C99/C11 compat warning, which is more specific\n+     than -pedantic.  */\n+  if (warn_c99_c11_compat > 0)\n+    {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n+\t\t\t   (pedantic && !flag_isoc11)\n+\t\t\t   ? DK_PEDWARN : DK_WARNING);\n+      diagnostic.option_index = OPT_Wc99_c11_compat;\n+      warned = report_diagnostic (&diagnostic);\n+    }\n+  /* -Wno-c99-c11-compat suppresses even the pedwarns.  */\n+  else if (warn_c99_c11_compat == 0)\n+    ;\n+  /* For -pedantic outside C11, issue a pedwarn.  */\n+  else if (pedantic && !flag_isoc11)\n+    {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_PEDWARN);\n+      diagnostic.option_index = opt;\n+      warned = report_diagnostic (&diagnostic);\n+    }\n   va_end (ap);\n+  return warned;\n }\n \n /* Issue an ISO C90 pedantic warning MSGID if -pedantic outside C99 mode,"}, {"sha": "d5887972088eeb74532957cce01486858c36d2bb", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -1076,7 +1076,11 @@ disable_extension_diagnostics (void)\n \t     /* warn_c90_c99_compat has three states: -1/0/1, so we must\n \t\tplay tricks to properly restore it.  */\n \t     | ((warn_c90_c99_compat == 1) << 7)\n-\t     | ((warn_c90_c99_compat == -1) << 8));\n+\t     | ((warn_c90_c99_compat == -1) << 8)\n+\t     /* Similarly for warn_c99_c11_compat.  */\n+\t     | ((warn_c99_c11_compat == 1) << 9)\n+\t     | ((warn_c99_c11_compat == -1) << 10)\n+\t     );\n   cpp_opts->cpp_pedantic = pedantic = 0;\n   warn_pointer_arith = 0;\n   cpp_opts->cpp_warn_traditional = warn_traditional = 0;\n@@ -1085,6 +1089,7 @@ disable_extension_diagnostics (void)\n   warn_cxx_compat = 0;\n   warn_overlength_strings = 0;\n   warn_c90_c99_compat = 0;\n+  warn_c99_c11_compat = 0;\n   return ret;\n }\n \n@@ -1103,6 +1108,7 @@ restore_extension_diagnostics (int flags)\n   warn_overlength_strings = (flags >> 6) & 1;\n   /* See above for why is this needed.  */\n   warn_c90_c99_compat = (flags >> 7) & 1 ? 1 : ((flags >> 8) & 1 ? -1 : 0);\n+  warn_c99_c11_compat = (flags >> 9) & 1 ? 1 : ((flags >> 10) & 1 ? -1 : 0);\n }\n \n /* Possibly kinds of declarator to parse.  */\n@@ -2009,15 +2015,12 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n \n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_STATIC_ASSERT));\n   assert_loc = c_parser_peek_token (parser)->location;\n-  if (!flag_isoc11)\n-    {\n-      if (flag_isoc99)\n-\tpedwarn (assert_loc, OPT_Wpedantic,\n+  if (flag_isoc99)\n+    pedwarn_c99 (assert_loc, OPT_Wpedantic,\n \t\t \"ISO C99 does not support %<_Static_assert%>\");\n-      else\n-\tpedwarn (assert_loc, OPT_Wpedantic,\n+  else\n+    pedwarn_c99 (assert_loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<_Static_assert%>\");\n-    }\n   c_parser_consume_token (parser);\n   if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     return;\n@@ -2382,15 +2385,12 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t     correct lvalue-to-rvalue conversions.  */\n \t  if (flag_openmp)\n \t    sorry (\"%<_Atomic%> with OpenMP\");\n-\t  if (!flag_isoc11)\n-\t    {\n-\t      if (flag_isoc99)\n-\t\tpedwarn (loc, OPT_Wpedantic,\n+\t  if (flag_isoc99)\n+\t    pedwarn_c99 (loc, OPT_Wpedantic,\n \t\t\t \"ISO C99 does not support the %<_Atomic%> qualifier\");\n-\t      else\n-\t\tpedwarn (loc, OPT_Wpedantic,\n+\t  else\n+\t    pedwarn_c99 (loc, OPT_Wpedantic,\n \t\t\t \"ISO C90 does not support the %<_Atomic%> qualifier\");\n-\t    }\n \t  attrs_ok = true;\n \t  tree value;\n \t  value = c_parser_peek_token (parser)->value;\n@@ -3055,15 +3055,12 @@ c_parser_alignas_specifier (c_parser * parser)\n   location_t loc = c_parser_peek_token (parser)->location;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNAS));\n   c_parser_consume_token (parser);\n-  if (!flag_isoc11)\n-    {\n-      if (flag_isoc99)\n-\tpedwarn (loc, OPT_Wpedantic,\n+  if (flag_isoc99)\n+    pedwarn_c99 (loc, OPT_Wpedantic,\n \t\t \"ISO C99 does not support %<_Alignas%>\");\n-      else\n-\tpedwarn (loc, OPT_Wpedantic,\n+  else\n+    pedwarn_c99 (loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<_Alignas%>\");\n-    }\n   if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     return ret;\n   if (c_parser_next_tokens_start_typename (parser, cla_prefer_id))\n@@ -6579,14 +6576,14 @@ c_parser_alignof_expression (c_parser *parser)\n   /* A diagnostic is not required for the use of this identifier in\n      the implementation namespace; only diagnose it for the C11\n      spelling because of existing code using the other spellings.  */\n-  if (!flag_isoc11 && is_c11_alignof)\n+  if (is_c11_alignof)\n     {\n       if (flag_isoc99)\n-\tpedwarn (loc, OPT_Wpedantic, \"ISO C99 does not support %qE\",\n-\t\t alignof_spelling);\n+\tpedwarn_c99 (loc, OPT_Wpedantic, \"ISO C99 does not support %qE\",\n+\t\t     alignof_spelling);\n       else\n-\tpedwarn (loc, OPT_Wpedantic, \"ISO C90 does not support %qE\",\n-\t\t alignof_spelling);\n+\tpedwarn_c99 (loc, OPT_Wpedantic, \"ISO C90 does not support %qE\",\n+\t\t     alignof_spelling);\n     }\n   c_parser_consume_token (parser);\n   c_inhibit_evaluation_warnings++;\n@@ -6745,15 +6742,12 @@ c_parser_generic_selection (c_parser *parser)\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_GENERIC));\n   generic_loc = c_parser_peek_token (parser)->location;\n   c_parser_consume_token (parser);\n-  if (!flag_isoc11)\n-    {\n-      if (flag_isoc99)\n-\tpedwarn (generic_loc, OPT_Wpedantic,\n+  if (flag_isoc99)\n+    pedwarn_c99 (generic_loc, OPT_Wpedantic,\n \t\t \"ISO C99 does not support %<_Generic%>\");\n-      else\n-\tpedwarn (generic_loc, OPT_Wpedantic,\n+  else\n+    pedwarn_c99 (generic_loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<_Generic%>\");\n-    }\n \n   if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     return error_expr;"}, {"sha": "6004d506d9be2dea0a4ea70fd0d460ddd03e6d8e", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -678,7 +678,7 @@ extern tree c_check_omp_declare_reduction_r (tree *, int *, void *);\n /* In c-errors.c */\n extern void pedwarn_c90 (location_t, int opt, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n-extern void pedwarn_c99 (location_t, int opt, const char *, ...)\n+extern bool pedwarn_c99 (location_t, int opt, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n \n #endif /* ! GCC_C_TREE_H */"}, {"sha": "b1eac3462a520946d295f6c074ee92f92e554019", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -9220,9 +9220,12 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n       if ((warn_return_type || flag_isoc99)\n \t  && valtype != 0 && TREE_CODE (valtype) != VOID_TYPE)\n \t{\n-\t  pedwarn_c99 (loc, flag_isoc99 ? 0 : OPT_Wreturn_type,\n-\t\t       \"%<return%> with no value, in \"\n-\t\t       \"function returning non-void\");\n+\t  if (flag_isoc99)\n+\t    pedwarn (loc, 0, \"%<return%> with no value, in \"\n+\t\t     \"function returning non-void\");\n+\t  else\n+\t    warning_at (loc, OPT_Wreturn_type, \"%<return%> with no value, \"\n+\t\t\t\"in function returning non-void\");\n \t  no_warning = true;\n \t}\n     }"}, {"sha": "8ea368984ef37744ef1d262aa7e3f26b3eb23045", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -241,7 +241,7 @@ Objective-C and Objective-C++ Dialects}.\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  @gol\n -Waggressive-loop-optimizations -Warray-bounds @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n--Wc90-c99-compat @gol\n+-Wc90-c99-compat -Wc99-c11-compat @gol\n -Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  @gol\n -Wconversion -Wcoverage-mismatch -Wdate-time -Wdelete-incomplete -Wno-cpp  @gol\n@@ -4527,6 +4527,16 @@ type, @code{bool} type, compound literals, designated initializers, and so\n on.  This option is independent of the standards mode.  Warnings are disabled\n in the expression that follows @code{__extension__}.\n \n+@item -Wc99-c11-compat @r{(C and Objective-C only)}\n+@opindex Wc99-c11-compat\n+@opindex Wno-c99-c11-compat\n+Warn about features not present in ISO C99, but present in ISO C11.\n+For instance, warn about use of anonymous structures and unions,\n+@code{_Atomic} type qualifier, @code{_Thread_local} storage-class specifier,\n+@code{_Alignas} specifier, @code{Alignof} operator, @code{_Generic} keyword,\n+and so on.  This option is independent of the standards mode.  Warnings are\n+disabled in the expression that follows @code{__extension__}.\n+\n @item -Wc++-compat @r{(C and Objective-C only)}\n Warn about ISO C constructs that are outside of the common subset of\n ISO C and ISO C++, e.g.@: request for implicit conversion from"}, {"sha": "f5d5d7f078ff79e7bac22db78676e1c10af52b04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -1,3 +1,13 @@\n+2014-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* gcc.dg/Wc99-c11-compat-1.c: New test.\n+\t* gcc.dg/Wc99-c11-compat-2.c: New test.\n+\t* gcc.dg/Wc99-c11-compat-3.c: New test.\n+\t* gcc.dg/Wc99-c11-compat-4.c: New test.\n+\t* gcc.dg/Wc99-c11-compat-5.c: New test.\n+\t* gcc.dg/Wc99-c11-compat-6.c: New test.\n+\t* gcc.dg/Wc99-c11-compat-7.c: New test.\n+\n 2014-08-19  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/Wc90-c99-compat-4.c: Remove all dg-warnings."}, {"sha": "58fc5b8f45329399a3b1780ac34517441ea51409", "filename": "gcc/testsuite/gcc.dg/Wc99-c11-compat-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-1.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -pedantic -Wc99-c11-compat\" } */\n+\n+struct S { int i; struct { int a; }; }; /* { dg-warning \"ISO C90 doesn.t support unnamed structs/unions\" } */\n+_Noreturn void foo (void); /* { dg-warning \"ISO C90 does not support ._Noreturn.\" } */\n+typedef int A;\n+typedef int A; /* { dg-warning \"redefinition of typedef .A.\" } */\n+_Thread_local int i; /* { dg-warning \"ISO C90 does not support ._Thread_local.\" } */\n+_Static_assert (1, \"foo\"); /* { dg-warning \"ISO C90 does not support ._Static_assert.\" } */\n+_Atomic int a; /* { dg-warning \"ISO C90 does not support the ._Atomic. qualifier\" } */\n+_Alignas (int) int aa; /* { dg-warning \"ISO C90 does not support ._Alignas.\" } */\n+enum e { E = _Alignof (double) }; /* { dg-warning \"ISO C90 does not support ._Alignof.\" } */\n+\n+void\n+fn (int n)\n+{\n+  _Generic (n, int: 0); /* { dg-warning \"ISO C90 does not support ._Generic.\" } */\n+}"}, {"sha": "9d1aa8180be5b199211ce0e68da2d12fd4afcf39", "filename": "gcc/testsuite/gcc.dg/Wc99-c11-compat-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-2.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic -Wc99-c11-compat\" } */\n+\n+struct S { int i; struct { int a; }; }; /* { dg-warning \"ISO C99 doesn.t support unnamed structs/unions\" } */\n+_Noreturn void foo (void); /* { dg-warning \"ISO C99 does not support ._Noreturn.\" } */\n+typedef int A;\n+typedef int A; /* { dg-warning \"redefinition of typedef .A.\" } */\n+_Thread_local int i; /* { dg-warning \"ISO C99 does not support ._Thread_local.\" } */\n+_Static_assert (1, \"foo\"); /* { dg-warning \"ISO C99 does not support ._Static_assert.\" } */\n+_Atomic int a; /* { dg-warning \"ISO C99 does not support the ._Atomic. qualifier\" } */\n+_Alignas (int) int aa; /* { dg-warning \"ISO C99 does not support ._Alignas.\" } */\n+enum e { E = _Alignof (double) }; /* { dg-warning \"ISO C99 does not support ._Alignof.\" } */\n+\n+void\n+fn (int n)\n+{\n+  _Generic (n, int: 0); /* { dg-warning \"ISO C99 does not support ._Generic.\" } */\n+}"}, {"sha": "64e24f80830ee621b5f3a13a019e8d0e8c7f50de", "filename": "gcc/testsuite/gcc.dg/Wc99-c11-compat-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-3.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu11 -pedantic-errors -Wc99-c11-compat\" } */\n+\n+struct S { int i; struct { int a; }; }; /* { dg-warning \"ISO C99 doesn.t support unnamed structs/unions\" } */\n+_Noreturn void foo (void); /* { dg-warning \"ISO C99 does not support ._Noreturn.\" } */\n+typedef int A;\n+typedef int A; /* { dg-warning \"redefinition of typedef .A.\" } */\n+_Thread_local int i; /* { dg-warning \"ISO C99 does not support ._Thread_local.\" } */\n+_Static_assert (1, \"foo\"); /* { dg-warning \"ISO C99 does not support ._Static_assert.\" } */\n+_Atomic int a; /* { dg-warning \"ISO C99 does not support the ._Atomic. qualifier\" } */\n+_Alignas (int) int aa; /* { dg-warning \"ISO C99 does not support ._Alignas.\" } */\n+enum e { E = _Alignof (double) }; /* { dg-warning \"ISO C99 does not support ._Alignof.\" } */\n+\n+void\n+fn (int n)\n+{\n+  _Generic (n, int: 0); /* { dg-warning \"ISO C99 does not support ._Generic.\" } */\n+}"}, {"sha": "511ccee42d05301135167000301b8901040f8cf4", "filename": "gcc/testsuite/gcc.dg/Wc99-c11-compat-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-4.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors -Wno-c99-c11-compat\" } */\n+\n+struct S { int i; struct { int a; }; };\n+_Noreturn void foo (void);\n+typedef int A;\n+typedef int A;\n+_Thread_local int i;\n+_Static_assert (1, \"foo\");\n+_Atomic int a;\n+_Alignas (int) int aa;\n+enum e { E = _Alignof (double) };\n+\n+void\n+fn (int n)\n+{\n+  _Generic (n, int: 0);\n+}"}, {"sha": "ce9698c007db07753297362dd669a4e502d5c6a3", "filename": "gcc/testsuite/gcc.dg/Wc99-c11-compat-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-5.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu11 -Wc99-c11-compat\" } */\n+\n+__extension__ struct S { int i; struct { int a; }; };\n+__extension__ _Noreturn void foo (void);\n+typedef int A;\n+__extension__ typedef int A;\n+__extension__ _Thread_local int i;\n+__extension__ _Static_assert (1, \"foo\");\n+__extension__ _Atomic int a;\n+__extension__ _Alignas (int) int aa;\n+enum e { E = __extension__ _Alignof (double) };\n+\n+void\n+fn (int n)\n+{\n+  __extension__ _Generic (n, int: 0);\n+}"}, {"sha": "07d7582f240dca92a59053540e31c0046b4caafb", "filename": "gcc/testsuite/gcc.dg/Wc99-c11-compat-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-6.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -pedantic-errors -Wc99-c11-compat\" } */\n+\n+struct S { int i; struct { int a; }; }; /* { dg-error \"ISO C90 doesn.t support unnamed structs/unions\" } */\n+_Noreturn void foo (void); /* { dg-error \"ISO C90 does not support ._Noreturn.\" } */\n+typedef int A;\n+typedef int A; /* { dg-error \"redefinition of typedef .A.\" } */\n+_Thread_local int i; /* { dg-error \"ISO C90 does not support ._Thread_local.\" } */\n+_Static_assert (1, \"foo\"); /* { dg-error \"ISO C90 does not support ._Static_assert.\" } */\n+_Atomic int a; /* { dg-error \"ISO C90 does not support the ._Atomic. qualifier\" } */\n+_Alignas (int) int aa; /* { dg-error \"ISO C90 does not support ._Alignas.\" } */\n+enum e { E = _Alignof (double) }; /* { dg-error \"ISO C90 does not support ._Alignof.\" } */\n+\n+void\n+fn (int n)\n+{\n+  _Generic (n, int: 0); /* { dg-error \"ISO C90 does not support ._Generic.\" } */\n+}"}, {"sha": "a7033c9284ced0df6e72acb17916182d0f9425f0", "filename": "gcc/testsuite/gcc.dg/Wc99-c11-compat-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc99-c11-compat-7.c?ref=35aff4fb82ce0f615dc5e0ad73341a1fe77cbd12", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors -Wc99-c11-compat\" } */\n+\n+struct S { int i; struct { int a; }; }; /* { dg-error \"ISO C99 doesn.t support unnamed structs/unions\" } */\n+_Noreturn void foo (void); /* { dg-error \"ISO C99 does not support ._Noreturn.\" } */\n+typedef int A;\n+typedef int A; /* { dg-error \"redefinition of typedef .A.\" } */\n+_Thread_local int i; /* { dg-error \"ISO C99 does not support ._Thread_local.\" } */\n+_Static_assert (1, \"foo\"); /* { dg-error \"ISO C99 does not support ._Static_assert.\" } */\n+_Atomic int a; /* { dg-error \"ISO C99 does not support the ._Atomic. qualifier\" } */\n+_Alignas (int) int aa; /* { dg-error \"ISO C99 does not support ._Alignas.\" } */\n+enum e { E = _Alignof (double) }; /* { dg-error \"ISO C99 does not support ._Alignof.\" } */\n+\n+void\n+fn (int n)\n+{\n+  _Generic (n, int: 0); /* { dg-error \"ISO C99 does not support ._Generic.\" } */\n+}"}]}