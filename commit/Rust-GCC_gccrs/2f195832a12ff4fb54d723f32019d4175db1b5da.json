{"sha": "2f195832a12ff4fb54d723f32019d4175db1b5da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYxOTU4MzJhMTJmZjRmYjU0ZDcyM2YzMjAxOWQ0MTc1ZGIxYjVkYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-01-24T20:39:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-01-27T20:29:01Z"}, "message": "compiler: cleanups permitted by GCC requirement of MPFR 3.1.0\n\nFor MPFR functions, change from GMP_RND* to MPFR_RND*.\nAlso change mp_exp_t to mpfr_expt_t.\n\nFixes PR go/92463\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/216417", "tree": {"sha": "c5266466cdf13fcad7287cf945797c2a9599bf20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5266466cdf13fcad7287cf945797c2a9599bf20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f195832a12ff4fb54d723f32019d4175db1b5da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f195832a12ff4fb54d723f32019d4175db1b5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f195832a12ff4fb54d723f32019d4175db1b5da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f195832a12ff4fb54d723f32019d4175db1b5da/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f25c39c454d7d3d323edf014a653649946352bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f25c39c454d7d3d323edf014a653649946352bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f25c39c454d7d3d323edf014a653649946352bd"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "49312fa10f76440aa1bf96652a4944d7807251a7", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f195832a12ff4fb54d723f32019d4175db1b5da/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f195832a12ff4fb54d723f32019d4175db1b5da/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=2f195832a12ff4fb54d723f32019d4175db1b5da", "patch": "@@ -1,4 +1,4 @@\n-197381c6364431a7a05e32df683874b7cadcc4b4\n+132e0e61d59aaa52f8fdb03a925300c1ced2a0f2\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "42ad93b98305717d3ba11870ce34ba967420a26a", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f195832a12ff4fb54d723f32019d4175db1b5da/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f195832a12ff4fb54d723f32019d4175db1b5da/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=2f195832a12ff4fb54d723f32019d4175db1b5da", "patch": "@@ -2580,11 +2580,11 @@ Integer_expression::do_import(Import_expression* imp, Location loc)\n \t  return Expression::make_error(loc);\n \t}\n       if (pos == std::string::npos)\n-\tmpfr_set_ui(real, 0, GMP_RNDN);\n+\tmpfr_set_ui(real, 0, MPFR_RNDN);\n       else\n \t{\n \t  std::string real_str = num.substr(0, pos);\n-\t  if (mpfr_init_set_str(real, real_str.c_str(), 10, GMP_RNDN) != 0)\n+\t  if (mpfr_init_set_str(real, real_str.c_str(), 10, MPFR_RNDN) != 0)\n \t    {\n \t      go_error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t\t  real_str.c_str());\n@@ -2599,7 +2599,7 @@ Integer_expression::do_import(Import_expression* imp, Location loc)\n \timag_str = num.substr(pos);\n       imag_str = imag_str.substr(0, imag_str.size() - 1);\n       mpfr_t imag;\n-      if (mpfr_init_set_str(imag, imag_str.c_str(), 10, GMP_RNDN) != 0)\n+      if (mpfr_init_set_str(imag, imag_str.c_str(), 10, MPFR_RNDN) != 0)\n \t{\n \t  go_error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t      imag_str.c_str());\n@@ -2639,7 +2639,7 @@ Integer_expression::do_import(Import_expression* imp, Location loc)\n   else\n     {\n       mpfr_t val;\n-      if (mpfr_init_set_str(val, num.c_str(), 10, GMP_RNDN) != 0)\n+      if (mpfr_init_set_str(val, num.c_str(), 10, MPFR_RNDN) != 0)\n \t{\n \t  go_error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t      num.c_str());\n@@ -2753,7 +2753,7 @@ class Float_expression : public Expression\n     : Expression(EXPRESSION_FLOAT, location),\n       type_(type)\n   {\n-    mpfr_init_set(this->val_, *val, GMP_RNDN);\n+    mpfr_init_set(this->val_, *val, MPFR_RNDN);\n   }\n \n   // Write VAL to export data.\n@@ -2923,8 +2923,8 @@ Float_expression::do_get_backend(Translate_context* context)\n void\n Float_expression::export_float(String_dump *exp, const mpfr_t val)\n {\n-  mp_exp_t exponent;\n-  char* s = mpfr_get_str(NULL, &exponent, 10, 0, val, GMP_RNDN);\n+  mpfr_exp_t exponent;\n+  char* s = mpfr_get_str(NULL, &exponent, 10, 0, val, MPFR_RNDN);\n   if (*s == '-')\n     exp->write_c_string(\"-\");\n   exp->write_c_string(\"0.\");\n@@ -4781,7 +4781,7 @@ Unary_expression::eval_constant(Operator op, const Numeric_constant* unc,\n \t  unc->get_float(&uval);\n \t  mpfr_t val;\n \t  mpfr_init(val);\n-\t  mpfr_neg(val, uval, GMP_RNDN);\n+\t  mpfr_neg(val, uval, MPFR_RNDN);\n \t  nc->set_float(unc->type(), val);\n \t  mpfr_clear(uval);\n \t  mpfr_clear(val);\n@@ -5613,8 +5613,8 @@ Binary_expression::compare_float(const Numeric_constant* left_nc,\n   if (!type->is_abstract() && type->float_type() != NULL)\n     {\n       int bits = type->float_type()->bits();\n-      mpfr_prec_round(left_val, bits, GMP_RNDN);\n-      mpfr_prec_round(right_val, bits, GMP_RNDN);\n+      mpfr_prec_round(left_val, bits, MPFR_RNDN);\n+      mpfr_prec_round(right_val, bits, MPFR_RNDN);\n     }\n \n   *cmp = mpfr_cmp(left_val, right_val);\n@@ -5649,10 +5649,10 @@ Binary_expression::compare_complex(const Numeric_constant* left_nc,\n   if (!type->is_abstract() && type->complex_type() != NULL)\n     {\n       int bits = type->complex_type()->bits();\n-      mpfr_prec_round(mpc_realref(left_val), bits / 2, GMP_RNDN);\n-      mpfr_prec_round(mpc_imagref(left_val), bits / 2, GMP_RNDN);\n-      mpfr_prec_round(mpc_realref(right_val), bits / 2, GMP_RNDN);\n-      mpfr_prec_round(mpc_imagref(right_val), bits / 2, GMP_RNDN);\n+      mpfr_prec_round(mpc_realref(left_val), bits / 2, MPFR_RNDN);\n+      mpfr_prec_round(mpc_imagref(left_val), bits / 2, MPFR_RNDN);\n+      mpfr_prec_round(mpc_realref(right_val), bits / 2, MPFR_RNDN);\n+      mpfr_prec_round(mpc_imagref(right_val), bits / 2, MPFR_RNDN);\n     }\n \n   *cmp = mpc_cmp(left_val, right_val) != 0;\n@@ -5899,10 +5899,10 @@ Binary_expression::eval_float(Operator op, const Numeric_constant* left_nc,\n   switch (op)\n     {\n     case OPERATOR_PLUS:\n-      mpfr_add(val, left_val, right_val, GMP_RNDN);\n+      mpfr_add(val, left_val, right_val, MPFR_RNDN);\n       break;\n     case OPERATOR_MINUS:\n-      mpfr_sub(val, left_val, right_val, GMP_RNDN);\n+      mpfr_sub(val, left_val, right_val, MPFR_RNDN);\n       break;\n     case OPERATOR_OR:\n     case OPERATOR_XOR:\n@@ -5911,20 +5911,20 @@ Binary_expression::eval_float(Operator op, const Numeric_constant* left_nc,\n     case OPERATOR_MOD:\n     case OPERATOR_LSHIFT:\n     case OPERATOR_RSHIFT:\n-      mpfr_set_ui(val, 0, GMP_RNDN);\n+      mpfr_set_ui(val, 0, MPFR_RNDN);\n       ret = false;\n       break;\n     case OPERATOR_MULT:\n-      mpfr_mul(val, left_val, right_val, GMP_RNDN);\n+      mpfr_mul(val, left_val, right_val, MPFR_RNDN);\n       break;\n     case OPERATOR_DIV:\n       if (!mpfr_zero_p(right_val))\n-\tmpfr_div(val, left_val, right_val, GMP_RNDN);\n+\tmpfr_div(val, left_val, right_val, MPFR_RNDN);\n       else\n \t{\n \t  go_error_at(location, \"division by zero\");\n           nc->set_invalid();\n-\t  mpfr_set_ui(val, 0, GMP_RNDN);\n+\t  mpfr_set_ui(val, 0, MPFR_RNDN);\n \t}\n       break;\n     default:\n@@ -18868,7 +18868,7 @@ Numeric_constant::Numeric_constant(const Numeric_constant& a)\n       mpz_init_set(this->u_.int_val, a.u_.int_val);\n       break;\n     case NC_FLOAT:\n-      mpfr_init_set(this->u_.float_val, a.u_.float_val, GMP_RNDN);\n+      mpfr_init_set(this->u_.float_val, a.u_.float_val, MPFR_RNDN);\n       break;\n     case NC_COMPLEX:\n       mpc_init2(this->u_.complex_val, mpc_precision);\n@@ -18896,7 +18896,7 @@ Numeric_constant::operator=(const Numeric_constant& a)\n       mpz_init_set(this->u_.int_val, a.u_.int_val);\n       break;\n     case NC_FLOAT:\n-      mpfr_init_set(this->u_.float_val, a.u_.float_val, GMP_RNDN);\n+      mpfr_init_set(this->u_.float_val, a.u_.float_val, MPFR_RNDN);\n       break;\n     case NC_COMPLEX:\n       mpc_init2(this->u_.complex_val, mpc_precision);\n@@ -19014,9 +19014,9 @@ Numeric_constant::set_float(Type* type, const mpfr_t val)\n       && !type->float_type()->is_abstract())\n     bits = type->float_type()->bits();\n   if (Numeric_constant::is_float_neg_zero(val, bits))\n-    mpfr_init_set_ui(this->u_.float_val, 0, GMP_RNDN);\n+    mpfr_init_set_ui(this->u_.float_val, 0, MPFR_RNDN);\n   else\n-    mpfr_init_set(this->u_.float_val, val, GMP_RNDN);\n+    mpfr_init_set(this->u_.float_val, val, MPFR_RNDN);\n }\n \n // Set to a complex value.\n@@ -19036,14 +19036,14 @@ Numeric_constant::set_complex(Type* type, const mpc_t val)\n     bits = type->complex_type()->bits() / 2;\n \n   mpfr_t real;\n-  mpfr_init_set(real, mpc_realref(val), GMP_RNDN);\n+  mpfr_init_set(real, mpc_realref(val), MPFR_RNDN);\n   if (Numeric_constant::is_float_neg_zero(real, bits))\n-    mpfr_set_ui(real, 0, GMP_RNDN);\n+    mpfr_set_ui(real, 0, MPFR_RNDN);\n \n   mpfr_t imag;\n-  mpfr_init_set(imag, mpc_imagref(val), GMP_RNDN);\n+  mpfr_init_set(imag, mpc_imagref(val), MPFR_RNDN);\n   if (Numeric_constant::is_float_neg_zero(imag, bits))\n-    mpfr_set_ui(imag, 0, GMP_RNDN);\n+    mpfr_set_ui(imag, 0, MPFR_RNDN);\n \n   mpc_init2(this->u_.complex_val, mpc_precision);\n   mpc_set_fr_fr(this->u_.complex_val, real, imag, MPC_RNDNN);\n@@ -19062,7 +19062,7 @@ Numeric_constant::is_float_neg_zero(const mpfr_t val, int bits)\n     return false;\n   if (mpfr_zero_p(val))\n     return true;\n-  mp_exp_t min_exp;\n+  mpfr_exp_t min_exp;\n   switch (bits)\n     {\n     case 0:\n@@ -19107,7 +19107,7 @@ void\n Numeric_constant::get_float(mpfr_t* val) const\n {\n   go_assert(this->is_float());\n-  mpfr_init_set(*val, this->u_.float_val, GMP_RNDN);\n+  mpfr_init_set(*val, this->u_.float_val, MPFR_RNDN);\n }\n \n // Get a complex value.\n@@ -19167,7 +19167,7 @@ Numeric_constant::mpfr_to_unsigned_long(const mpfr_t fval,\n     return NC_UL_NOTINT;\n   mpz_t ival;\n   mpz_init(ival);\n-  mpfr_get_z(ival, fval, GMP_RNDN);\n+  mpfr_get_z(ival, fval, MPFR_RNDN);\n   To_unsigned_long ret = this->mpz_to_unsigned_long(ival, val);\n   mpz_clear(ival);\n   return ret;\n@@ -19234,7 +19234,7 @@ Numeric_constant::mpfr_to_memory_size(const mpfr_t fval, int64_t* val) const\n     return false;\n   mpz_t ival;\n   mpz_init(ival);\n-  mpfr_get_z(ival, fval, GMP_RNDN);\n+  mpfr_get_z(ival, fval, MPFR_RNDN);\n   bool ret = this->mpz_to_memory_size(ival, val);\n   mpz_clear(ival);\n   return ret;\n@@ -19255,14 +19255,14 @@ Numeric_constant::to_int(mpz_t* val) const\n       if (!mpfr_integer_p(this->u_.float_val))\n \treturn false;\n       mpz_init(*val);\n-      mpfr_get_z(*val, this->u_.float_val, GMP_RNDN);\n+      mpfr_get_z(*val, this->u_.float_val, MPFR_RNDN);\n       return true;\n     case NC_COMPLEX:\n       if (!mpfr_zero_p(mpc_imagref(this->u_.complex_val))\n \t  || !mpfr_integer_p(mpc_realref(this->u_.complex_val)))\n \treturn false;\n       mpz_init(*val);\n-      mpfr_get_z(*val, mpc_realref(this->u_.complex_val), GMP_RNDN);\n+      mpfr_get_z(*val, mpc_realref(this->u_.complex_val), MPFR_RNDN);\n       return true;\n     default:\n       go_unreachable();\n@@ -19278,15 +19278,15 @@ Numeric_constant::to_float(mpfr_t* val) const\n     {\n     case NC_INT:\n     case NC_RUNE:\n-      mpfr_init_set_z(*val, this->u_.int_val, GMP_RNDN);\n+      mpfr_init_set_z(*val, this->u_.int_val, MPFR_RNDN);\n       return true;\n     case NC_FLOAT:\n-      mpfr_init_set(*val, this->u_.float_val, GMP_RNDN);\n+      mpfr_init_set(*val, this->u_.float_val, MPFR_RNDN);\n       return true;\n     case NC_COMPLEX:\n       if (!mpfr_zero_p(mpc_imagref(this->u_.complex_val)))\n \treturn false;\n-      mpfr_init_set(*val, mpc_realref(this->u_.complex_val), GMP_RNDN);\n+      mpfr_init_set(*val, mpc_realref(this->u_.complex_val), MPFR_RNDN);\n       return true;\n     default:\n       go_unreachable();\n@@ -19391,7 +19391,7 @@ Numeric_constant::check_int_type(Integer_type* type, bool issue_error,\n \t  return false;\n \t}\n       mpz_init(val);\n-      mpfr_get_z(val, this->u_.float_val, GMP_RNDN);\n+      mpfr_get_z(val, this->u_.float_val, MPFR_RNDN);\n       break;\n \n     case NC_COMPLEX:\n@@ -19406,7 +19406,7 @@ Numeric_constant::check_int_type(Integer_type* type, bool issue_error,\n \t  return false;\n \t}\n       mpz_init(val);\n-      mpfr_get_z(val, mpc_realref(this->u_.complex_val), GMP_RNDN);\n+      mpfr_get_z(val, mpc_realref(this->u_.complex_val), MPFR_RNDN);\n       break;\n \n     default:\n@@ -19460,11 +19460,11 @@ Numeric_constant::check_float_type(Float_type* type, bool issue_error,\n     {\n     case NC_INT:\n     case NC_RUNE:\n-      mpfr_init_set_z(val, this->u_.int_val, GMP_RNDN);\n+      mpfr_init_set_z(val, this->u_.int_val, MPFR_RNDN);\n       break;\n \n     case NC_FLOAT:\n-      mpfr_init_set(val, this->u_.float_val, GMP_RNDN);\n+      mpfr_init_set(val, this->u_.float_val, MPFR_RNDN);\n       break;\n \n     case NC_COMPLEX:\n@@ -19478,7 +19478,7 @@ Numeric_constant::check_float_type(Float_type* type, bool issue_error,\n             }\n \t  return false;\n \t}\n-      mpfr_init_set(val, mpc_realref(this->u_.complex_val), GMP_RNDN);\n+      mpfr_init_set(val, mpc_realref(this->u_.complex_val), MPFR_RNDN);\n       break;\n \n     default:\n@@ -19495,8 +19495,8 @@ Numeric_constant::check_float_type(Float_type* type, bool issue_error,\n     }\n   else\n     {\n-      mp_exp_t exp = mpfr_get_exp(val);\n-      mp_exp_t max_exp;\n+      mpfr_exp_t exp = mpfr_get_exp(val);\n+      mpfr_exp_t max_exp;\n       switch (type->bits())\n \t{\n \tcase 32:\n@@ -19527,8 +19527,8 @@ Numeric_constant::check_float_type(Float_type* type, bool issue_error,\n \t    default:\n \t      go_unreachable();\n \t    }\n-\t  mpfr_set(t, val, GMP_RNDN);\n-\t  mpfr_set(val, t, GMP_RNDN);\n+\t  mpfr_set(t, val, MPFR_RNDN);\n+\t  mpfr_set(val, t, MPFR_RNDN);\n \t  mpfr_clear(t);\n \n \t  this->set_float(type, val);\n@@ -19555,7 +19555,7 @@ Numeric_constant::check_complex_type(Complex_type* type, bool issue_error,\n   if (type->is_abstract())\n     return true;\n \n-  mp_exp_t max_exp;\n+  mpfr_exp_t max_exp;\n   switch (type->bits())\n     {\n     case 64:\n@@ -19687,12 +19687,12 @@ Numeric_constant::hash(unsigned int seed) const\n       break;\n     case NC_COMPLEX:\n       mpfr_init(m);\n-      mpc_abs(m, this->u_.complex_val, GMP_RNDN);\n-      val = mpfr_get_ui(m, GMP_RNDN);\n+      mpc_abs(m, this->u_.complex_val, MPFR_RNDN);\n+      val = mpfr_get_ui(m, MPFR_RNDN);\n       mpfr_clear(m);\n       break;\n     case NC_FLOAT:\n-      f = mpfr_get_d_2exp(&e, this->u_.float_val, GMP_RNDN) * 4294967295.0;\n+      f = mpfr_get_d_2exp(&e, this->u_.float_val, MPFR_RNDN) * 4294967295.0;\n       val = static_cast<unsigned long>(e + static_cast<long>(f));\n       break;\n     default:"}, {"sha": "156a90c7baf26d5042b902bca94bf95c7c152324", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f195832a12ff4fb54d723f32019d4175db1b5da/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f195832a12ff4fb54d723f32019d4175db1b5da/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=2f195832a12ff4fb54d723f32019d4175db1b5da", "patch": "@@ -198,7 +198,7 @@ Token::Token(const Token& tok)\n       break;\n     case TOKEN_FLOAT:\n     case TOKEN_IMAGINARY:\n-      mpfr_init_set(this->u_.float_value, tok.u_.float_value, GMP_RNDN);\n+      mpfr_init_set(this->u_.float_value, tok.u_.float_value, MPFR_RNDN);\n       break;\n     default:\n       go_unreachable();\n@@ -238,7 +238,7 @@ Token::operator=(const Token& tok)\n       break;\n     case TOKEN_FLOAT:\n     case TOKEN_IMAGINARY:\n-      mpfr_init_set(this->u_.float_value, tok.u_.float_value, GMP_RNDN);\n+      mpfr_init_set(this->u_.float_value, tok.u_.float_value, MPFR_RNDN);\n       break;\n     default:\n       go_unreachable();\n@@ -278,11 +278,11 @@ Token::print(FILE* file) const\n       break;\n     case TOKEN_FLOAT:\n       fprintf(file, \"float \");\n-      mpfr_out_str(file, 10, 0, this->u_.float_value, GMP_RNDN);\n+      mpfr_out_str(file, 10, 0, this->u_.float_value, MPFR_RNDN);\n       break;\n     case TOKEN_IMAGINARY:\n       fprintf(file, \"imaginary \");\n-      mpfr_out_str(file, 10, 0, this->u_.float_value, GMP_RNDN);\n+      mpfr_out_str(file, 10, 0, this->u_.float_value, MPFR_RNDN);\n       break;\n     case TOKEN_OPERATOR:\n       fprintf(file, \"operator \");\n@@ -1213,7 +1213,7 @@ Lex::gather_number()\n \t  else\n \t    {\n \t      mpfr_t ival;\n-\t      mpfr_init_set_z(ival, val, GMP_RNDN);\n+\t      mpfr_init_set_z(ival, val, MPFR_RNDN);\n \t      mpz_clear(val);\n \t      Token ret = Token::make_imaginary_token(ival, location);\n \t      mpfr_clear(ival);\n@@ -1310,7 +1310,7 @@ Lex::gather_number()\n     }\n \n   mpfr_t val;\n-  int r = mpfr_init_set_str(val, num.c_str(), base, GMP_RNDN);\n+  int r = mpfr_init_set_str(val, num.c_str(), base, MPFR_RNDN);\n   go_assert(r == 0);\n \n   bool is_imaginary = *p == 'i';"}, {"sha": "ef5941522cf936e065f8c8da8de96c3ba9119079", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f195832a12ff4fb54d723f32019d4175db1b5da/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f195832a12ff4fb54d723f32019d4175db1b5da/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=2f195832a12ff4fb54d723f32019d4175db1b5da", "patch": "@@ -2651,7 +2651,7 @@ Parse::operand(bool may_be_sink, bool* is_parenthesized)\n     case Token::TOKEN_IMAGINARY:\n       {\n \tmpfr_t zero;\n-\tmpfr_init_set_ui(zero, 0, GMP_RNDN);\n+\tmpfr_init_set_ui(zero, 0, MPFR_RNDN);\n \tmpc_t val;\n \tmpc_init2(val, mpc_precision);\n \tmpc_set_fr_fr(val, zero, *token->imaginary_value(), MPC_RNDNN);"}]}