{"sha": "aeedf0770557f01e46b95c220496e1b6d8b96149", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVlZGYwNzcwNTU3ZjAxZTQ2Yjk1YzIyMDQ5NmUxYjZkOGI5NjE0OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-31T10:34:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-31T10:34:53Z"}, "message": "Fix random_device to work with COW strings again\n\nInstead of duplicating the initialization functions that take string,\nadd a new member taking a raw pointer that can be used to convert the\nconstructor token from the old string to the new.\n\nAlso fix \"mt19337\" typos in a testcase.\n\n\t* include/bits/random.h (random_device::_M_init(const char*, size_t)):\n\tAdd new private member function.\n\t* src/c++11/cow-string-inst.cc (random_device::_M_init(const string&))\n\t(random_device::_M_init_pretr1(const string&)): Call new private\n\tmember with string data.\n\t* src/c++11/random.cc (random_device::_M_init(const char*, size_t)):\n\tDefine.\n\t* testsuite/26_numerics/random/random_device/cons/default-cow.cc: New\n\ttest using COW strings.\n\t* testsuite/26_numerics/random/random_device/cons/default.cc: Generate\n\ta value from the device.\n\t* testsuite/26_numerics/random/random_device/cons/token.cc: Likewise.\n\tFix typo in token string.\n\nFrom-SVN: r271805", "tree": {"sha": "371dab6b8c5b2d0ce445476143bb14ac12e4d594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/371dab6b8c5b2d0ce445476143bb14ac12e4d594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeedf0770557f01e46b95c220496e1b6d8b96149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeedf0770557f01e46b95c220496e1b6d8b96149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeedf0770557f01e46b95c220496e1b6d8b96149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeedf0770557f01e46b95c220496e1b6d8b96149/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "decc53df4e4e50f1f202e1cb01acbceb8320f841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decc53df4e4e50f1f202e1cb01acbceb8320f841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decc53df4e4e50f1f202e1cb01acbceb8320f841"}], "stats": {"total": 144, "additions": 86, "deletions": 58}, "files": [{"sha": "71ef811e052acc5bf8a8458c6fb0e1ee0a3012be", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aeedf0770557f01e46b95c220496e1b6d8b96149", "patch": "@@ -1,3 +1,19 @@\n+2019-05-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (random_device::_M_init(const char*, size_t)):\n+\tAdd new private member function.\n+\t* src/c++11/cow-string-inst.cc (random_device::_M_init(const string&))\n+\t(random_device::_M_init_pretr1(const string&)): Call new private\n+\tmember with string data.\n+\t* src/c++11/random.cc (random_device::_M_init(const char*, size_t)):\n+\tDefine.\n+\t* testsuite/26_numerics/random/random_device/cons/default-cow.cc: New\n+\ttest using COW strings.\n+\t* testsuite/26_numerics/random/random_device/cons/default.cc: Generate\n+\ta value from the device.\n+\t* testsuite/26_numerics/random/random_device/cons/token.cc: Likewise.\n+\tFix typo in token string.\n+\n 2019-05-30  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n \n \tLWG2788 basic_string spurious use of a default constructible allocator"}, {"sha": "e63dbcf5a257a1d684f9fa3aab2ef7686c21af62", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=aeedf0770557f01e46b95c220496e1b6d8b96149", "patch": "@@ -1648,6 +1648,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     result_type _M_getval_pretr1();\n     double _M_getentropy() const noexcept;\n \n+    void _M_init(const char*, size_t); // not exported from the shared library\n+\n     union\n     {\n       struct"}, {"sha": "107a45750f28ff8c8393f8e69d50b9602fde7015", "filename": "libstdc++-v3/src/c++11/cow-string-inst.cc", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc?ref=aeedf0770557f01e46b95c220496e1b6d8b96149", "patch": "@@ -35,61 +35,15 @@\n \n #ifdef  _GLIBCXX_USE_C99_STDINT_TR1\n #include <random>\n-#if defined __i386__ || defined __x86_64__\n-# include <cpuid.h>\n-#endif\n-#include <cstdio>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n   void\n   random_device::_M_init(const std::string& token)\n-  {\n-    const char *fname = token.c_str();\n-\n-    if (token == \"default\")\n-      {\n-#if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n-\tunsigned int eax, ebx, ecx, edx;\n-\t// Check availability of cpuid and, for now at least, also the\n-\t// CPU signature for Intel's\n-\tif (__get_cpuid_max(0, &ebx) > 0 && ebx == signature_INTEL_ebx)\n-\t  {\n-\t    __cpuid(1, eax, ebx, ecx, edx);\n-\t    if (ecx & bit_RDRND)\n-\t      {\n-\t\t_M_file = nullptr;\n-\t\treturn;\n-\t      }\n-\t  }\n-#endif\n-\n-\tfname = \"/dev/urandom\";\n-      }\n-    else if (token != \"/dev/urandom\" && token != \"/dev/random\")\n-    fail:\n-      std::__throw_runtime_error(__N(\"random_device::\"\n-\t\t\t\t     \"random_device(const std::string&)\"));\n-\n-    _M_file = static_cast<void*>(std::fopen(fname, \"rb\"));\n-    if (!_M_file)\n-      goto fail;\n-  }\n+  { _M_init(token.c_str(), token.length()); }\n \n   void\n   random_device::_M_init_pretr1(const std::string& token)\n-  {\n-    unsigned long __seed = 5489UL;\n-    if (token != \"mt19937\")\n-      {\n-\tconst char* __nptr = token.c_str();\n-\tchar* __endptr;\n-\t__seed = std::strtoul(__nptr, &__endptr, 0);\n-\tif (*__nptr == '\\0' || *__endptr != '\\0')\n-\t  std::__throw_runtime_error(__N(\"random_device::random_device\"\n-\t\t\t\t\t \"(const std::string&)\"));\n-      }\n-    _M_mt.seed(__seed);\n-  }\n+  { _M_init(token.c_str(), token.length()); }\n } // namespace\n #endif"}, {"sha": "10fbe1dc4c43f61bd5ed3f42ee4c3cd6e1253435", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=aeedf0770557f01e46b95c220496e1b6d8b96149", "patch": "@@ -293,6 +293,18 @@ namespace std _GLIBCXX_VISIBILITY(default)\n #endif\n   }\n \n+  // Called by old ABI version of random_device::_M_init(const std::string&).\n+  void\n+  random_device::_M_init(const char* s, size_t len)\n+  {\n+    const std::string token(s, len);\n+#ifdef USE_MT19937\n+    _M_init_pretr1(token);\n+#else\n+    _M_init(token);\n+#endif\n+  }\n+\n   void\n   random_device::_M_fini()\n   {"}, {"sha": "622801d8382fa24e59e87d87aa578ed57cfb1959", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/cons/default-cow.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault-cow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault-cow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault-cow.cc?ref=aeedf0770557f01e46b95c220496e1b6d8b96149", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-effective-target random_device }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 26.5.6 class random_device [rand.device]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::random_device x;\n+  auto n [[gnu::unused]] = x();\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "ed03c54a5d73404fb04f826bc66ed7edcaf4f0a5", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/cons/default.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc?ref=aeedf0770557f01e46b95c220496e1b6d8b96149", "patch": "@@ -21,8 +21,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.6 class random_device [rand.device]\n-// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+// C++11 26.5.6 class random_device [rand.device]\n \n #include <random>\n #include <testsuite_hooks.h>\n@@ -32,8 +31,11 @@ test01()\n {\n   std::random_device x;\n \n-  VERIFY( x.min() == std::numeric_limits<std::random_device::result_type>::min() );\n-  VERIFY( x.max() == std::numeric_limits<std::random_device::result_type>::max() );\n+  using result_type = std::random_device::result_type;\n+  VERIFY( x.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( x.max() == std::numeric_limits<result_type>::max() );\n+\n+  result_type n [[gnu::unused]] = x();\n }\n \n int main()"}, {"sha": "31a86b0b4ab409e75a4854d278382d49f92c6866", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/cons/token.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedf0770557f01e46b95c220496e1b6d8b96149/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc?ref=aeedf0770557f01e46b95c220496e1b6d8b96149", "patch": "@@ -30,10 +30,9 @@ void\n test01()\n {\n   std::random_device x(\"default\");\n-\n-  VERIFY( x.min() == std::numeric_limits<std::random_device::result_type>::min() );\n-  VERIFY( x.max() == std::numeric_limits<std::random_device::result_type>::max() );\n-\n+  using result_type = std::random_device::result_type;\n+  VERIFY( x.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( x.max() == std::numeric_limits<result_type>::max() );\n }\n \n void\n@@ -42,6 +41,7 @@ test02()\n #ifdef _GLIBCXX_USE_DEV_RANDOM\n   std::random_device x1(\"/dev/urandom\");\n   std::random_device x2(\"/dev/random\");\n+  VERIFY( x1() != x2() );\n #endif\n }\n \n@@ -50,7 +50,7 @@ test03()\n {\n   // At least one of these tokens should be valid.\n   const std::string tokens[] = {\n-    \"rdseed\", \"rdrand\", \"rand_s\", \"/dev/urandom\", \"/dev/random\", \"mt19337\"\n+    \"rdseed\", \"rdrand\", \"rand_s\", \"/dev/urandom\", \"/dev/random\", \"mt19937\"\n   };\n   int count = 0;\n   for (const std::string& token : tokens)\n@@ -71,21 +71,25 @@ void\n test04()\n {\n   bool can_use_mt19937 = true;\n+  std::random_device::result_type xval;\n   try\n   {\n     std::random_device x(\"mt19937\");\n+    xval = x();\n   }\n   catch (const std::runtime_error&)\n   {\n     can_use_mt19937 = false;\n   }\n \n-  // If \"mt19337\" is a valid token then numeric seeds should be too.\n+  // If \"mt19937\" is a valid token then numeric seeds should be too.\n   if (can_use_mt19937)\n   {\n     std::random_device x1(\"0\");\n     std::random_device x2(\"1234\");\n     std::random_device x3(\"0xc0fefe\");\n+    VERIFY( xval != x1() );\n+    VERIFY( x2() != x3() );\n   }\n }\n "}]}