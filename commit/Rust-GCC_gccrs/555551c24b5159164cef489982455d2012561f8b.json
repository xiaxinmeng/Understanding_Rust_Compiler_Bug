{"sha": "555551c24b5159164cef489982455d2012561f8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1NTUxYzI0YjUxNTkxNjRjZWY0ODk5ODI0NTVkMjAxMjU2MWY4Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-06-15T16:58:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-06-15T16:58:29Z"}, "message": "cp-tree.h (DECL_VAR_MARKED_P): Remove.\n\n\t* cp-tree.h (DECL_VAR_MARKED_P): Remove.\n\t(DECL_ANON_UNION_VAR_P): New macro.\n\t* class.c (fixed_type_or_null): Tidy.  Use a hash table, rather\n\tthan DECL_VAR_MARKED_P, to keep track of which variables we have\n\tseen.\n\t* decl.c (redeclaration_error_message): Complain about redeclaring\n\tanonymous union members at namespace scope.\n\t* decl2.c (build_anon_union_vars): Set DECL_ANON_UNION_VAR_P.\n\t* g++.dg/lookup/anon6.C: New test.\n\nFrom-SVN: r125745", "tree": {"sha": "b580e5336b6a72d59b683347c5293fe4228f6485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b580e5336b6a72d59b683347c5293fe4228f6485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/555551c24b5159164cef489982455d2012561f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555551c24b5159164cef489982455d2012561f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555551c24b5159164cef489982455d2012561f8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555551c24b5159164cef489982455d2012561f8b/comments", "author": null, "committer": null, "parents": [{"sha": "2f119dcccd49dcb0c8b72b4048712bdbc0e3988e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f119dcccd49dcb0c8b72b4048712bdbc0e3988e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f119dcccd49dcb0c8b72b4048712bdbc0e3988e"}], "stats": {"total": 104, "additions": 80, "deletions": 24}, "files": [{"sha": "2eeff3ce2728b4589d3f7930d97d98ee15579ff5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=555551c24b5159164cef489982455d2012561f8b", "patch": "@@ -1,3 +1,14 @@\n+2007-06-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (DECL_VAR_MARKED_P): Remove.\n+\t(DECL_ANON_UNION_VAR_P): New macro.\n+\t* class.c (fixed_type_or_null): Tidy.  Use a hash table, rather\n+\tthan DECL_VAR_MARKED_P, to keep track of which variables we have\n+\tseen.\n+\t* decl.c (redeclaration_error_message): Complain about redeclaring\n+\tanonymous union members at namespace scope.\n+\t* decl2.c (build_anon_union_vars): Set DECL_ANON_UNION_VAR_P.\n+\n 2007-06-14  Geoff Keating  <geoffk@apple.com>\n \n \t* decl2.c (determine_visibility): Ensure that functions with"}, {"sha": "0314df3adc3af651b6d485be91077846ffb96647", "filename": "gcc/cp/class.c", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=555551c24b5159164cef489982455d2012561f8b", "patch": "@@ -5244,16 +5244,17 @@ finish_struct (tree t, tree attributes)\n    before this function is called.  */\n \n static tree\n-fixed_type_or_null (tree instance, int* nonnull, int* cdtorp)\n+fixed_type_or_null (tree instance, int *nonnull, int *cdtorp)\n {\n+#define RECUR(T) fixed_type_or_null((T), nonnull, cdtorp)\n+\n   switch (TREE_CODE (instance))\n     {\n     case INDIRECT_REF:\n       if (POINTER_TYPE_P (TREE_TYPE (instance)))\n \treturn NULL_TREE;\n       else\n-\treturn fixed_type_or_null (TREE_OPERAND (instance, 0),\n-\t\t\t\t   nonnull, cdtorp);\n+\treturn RECUR (TREE_OPERAND (instance, 0));\n \n     case CALL_EXPR:\n       /* This is a call to a constructor, hence it's never zero.  */\n@@ -5273,20 +5274,21 @@ fixed_type_or_null (tree instance, int* nonnull, int* cdtorp)\n \t    *nonnull = 1;\n \t  return TREE_TYPE (instance);\n \t}\n-      return fixed_type_or_null (TREE_OPERAND (instance, 0), nonnull, cdtorp);\n+      return RECUR (TREE_OPERAND (instance, 0));\n \n     case PLUS_EXPR:\n     case MINUS_EXPR:\n       if (TREE_CODE (TREE_OPERAND (instance, 0)) == ADDR_EXPR)\n-\treturn fixed_type_or_null (TREE_OPERAND (instance, 0), nonnull, cdtorp);\n+\treturn RECUR (TREE_OPERAND (instance, 0));\n       if (TREE_CODE (TREE_OPERAND (instance, 1)) == INTEGER_CST)\n \t/* Propagate nonnull.  */\n-\treturn fixed_type_or_null (TREE_OPERAND (instance, 0), nonnull, cdtorp);\n+\treturn RECUR (TREE_OPERAND (instance, 0));\n+\n       return NULL_TREE;\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n-      return fixed_type_or_null (TREE_OPERAND (instance, 0), nonnull, cdtorp);\n+      return RECUR (TREE_OPERAND (instance, 0));\n \n     case ADDR_EXPR:\n       instance = TREE_OPERAND (instance, 0);\n@@ -5299,14 +5301,14 @@ fixed_type_or_null (tree instance, int* nonnull, int* cdtorp)\n \t  if (t && DECL_P (t))\n \t    *nonnull = 1;\n \t}\n-      return fixed_type_or_null (instance, nonnull, cdtorp);\n+      return RECUR (instance);\n \n     case COMPONENT_REF:\n       /* If this component is really a base class reference, then the field\n \t itself isn't definitive.  */\n       if (DECL_FIELD_IS_BASE (TREE_OPERAND (instance, 1)))\n-\treturn fixed_type_or_null (TREE_OPERAND (instance, 0), nonnull, cdtorp);\n-      return fixed_type_or_null (TREE_OPERAND (instance, 1), nonnull, cdtorp);\n+\treturn RECUR (TREE_OPERAND (instance, 0));\n+      return RECUR (TREE_OPERAND (instance, 1));\n \n     case VAR_DECL:\n     case FIELD_DECL:\n@@ -5344,22 +5346,33 @@ fixed_type_or_null (tree instance, int* nonnull, int* cdtorp)\n \t}\n       else if (TREE_CODE (TREE_TYPE (instance)) == REFERENCE_TYPE)\n \t{\n+\t  /* We only need one hash table because it is always left empty.  */\n+\t  static htab_t ht;\n+\t  if (!ht)\n+\t    ht = htab_create (37, \n+\t\t\t      htab_hash_pointer,\n+\t\t\t      htab_eq_pointer,\n+\t\t\t      /*htab_del=*/NULL);\n+\n \t  /* Reference variables should be references to objects.  */\n \t  if (nonnull)\n \t    *nonnull = 1;\n \n-\t  /* DECL_VAR_MARKED_P is used to prevent recursion; a\n+\t  /* Enter the INSTANCE in a table to prevent recursion; a\n \t     variable's initializer may refer to the variable\n \t     itself.  */\n \t  if (TREE_CODE (instance) == VAR_DECL\n \t      && DECL_INITIAL (instance)\n-\t      && !DECL_VAR_MARKED_P (instance))\n+\t      && !htab_find (ht, instance))\n \t    {\n \t      tree type;\n-\t      DECL_VAR_MARKED_P (instance) = 1;\n-\t      type = fixed_type_or_null (DECL_INITIAL (instance),\n-\t\t\t\t\t nonnull, cdtorp);\n-\t      DECL_VAR_MARKED_P (instance) = 0;\n+\t      void **slot;\n+\n+\t      slot = htab_find_slot (ht, instance, INSERT);\n+\t      *slot = instance;\n+\t      type = RECUR (DECL_INITIAL (instance));\n+\t      htab_clear_slot (ht, slot);\n+\n \t      return type;\n \t    }\n \t}\n@@ -5368,6 +5381,7 @@ fixed_type_or_null (tree instance, int* nonnull, int* cdtorp)\n     default:\n       return NULL_TREE;\n     }\n+#undef RECUR\n }\n \n /* Return nonzero if the dynamic type of INSTANCE is known, and\n@@ -5389,7 +5403,6 @@ resolves_to_fixed_type_p (tree instance, int* nonnull)\n {\n   tree t = TREE_TYPE (instance);\n   int cdtorp = 0;\n-\n   tree fixed = fixed_type_or_null (instance, nonnull, &cdtorp);\n   if (fixed == NULL_TREE)\n     return 0;"}, {"sha": "654e25809b13d983be52472ae9d4ccef5b77fe9d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=555551c24b5159164cef489982455d2012561f8b", "patch": "@@ -110,7 +110,7 @@ struct diagnostic_context;\n       DECL_IMPLICIT_TYPEDEF_P (in a TYPE_DECL)\n    3: DECL_IN_AGGR_P.\n    4: DECL_C_BIT_FIELD (in a FIELD_DECL)\n-      DECL_VAR_MARKED_P (in a VAR_DECL)\n+      DECL_ANON_UNION_VAR_P (in a VAR_DECL)\n       DECL_SELF_REFERENCE_P (in a TYPE_DECL)\n       DECL_INVALID_OVERRIDER_P (in a FUNCTION_DECL)\n    5: DECL_INTERFACE_KNOWN.\n@@ -2207,10 +2207,10 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n   (DECL_LANG_SPECIFIC (VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK (NODE)) \\\n    ->decl_flags.u.template_info)\n \n-/* For a VAR_DECL, indicates that the variable has been processed.\n-   This flag is set and unset throughout the code; it is always\n-   used for a temporary purpose.  */\n-#define DECL_VAR_MARKED_P(NODE) \\\n+/* For a VAR_DECL, indicates that the variable is actually a\n+   non-static data member of anonymous union that has been promoted to\n+   variable status.  */\n+#define DECL_ANON_UNION_VAR_P(NODE) \\\n   (DECL_LANG_FLAG_4 (VAR_DECL_CHECK (NODE)))\n \n /* Template information for a RECORD_TYPE or UNION_TYPE.  */"}, {"sha": "33f1c2a311a3f1fab8d77db9d2b9a839e21b4120", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=555551c24b5159164cef489982455d2012561f8b", "patch": "@@ -2187,8 +2187,24 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n     }\n   else if (toplevel_bindings_p () || DECL_NAMESPACE_SCOPE_P (newdecl))\n     {\n-      /* Objects declared at top level:  */\n-      /* If at least one is a reference, it's ok.  */\n+      /* The objects have been declared at namespace scope.  If either\n+\t is a member of an anonymous union, then this is an invalid\n+\t redeclaration.  For example:\n+\n+\t   int i;\n+\t   union { int i; };\n+\n+\t   is invalid.  */\n+      if (DECL_ANON_UNION_VAR_P (newdecl)\n+\t  || DECL_ANON_UNION_VAR_P (olddecl))\n+\treturn \"redeclaration of %q#D\";\n+      /* If at least one declaration is a reference, there is no\n+\t conflict.  For example:\n+\n+\t   int i = 3;\n+\t   extern int i;\n+\n+\t is valid.  */\n       if (DECL_EXTERNAL (newdecl) || DECL_EXTERNAL (olddecl))\n \treturn NULL;\n       /* Reject two definitions.  */"}, {"sha": "52953b2fa0cf39e04c41e13e6ab79a1769c7c40f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555551c24b5159164cef489982455d2012561f8b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=555551c24b5159164cef489982455d2012561f8b", "patch": "@@ -1057,6 +1057,7 @@ build_anon_union_vars (tree type, tree object)\n \t  tree base;\n \n \t  decl = build_decl (VAR_DECL, DECL_NAME (field), TREE_TYPE (field));\n+\t  DECL_ANON_UNION_VAR_P (decl) = 1;\n \n \t  base = get_base_address (object);\n \t  TREE_PUBLIC (decl) = TREE_PUBLIC (base);"}, {"sha": "7c6d20d380d84dda6682c68ce37afc17567090e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555551c24b5159164cef489982455d2012561f8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555551c24b5159164cef489982455d2012561f8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=555551c24b5159164cef489982455d2012561f8b", "patch": "@@ -1,3 +1,7 @@\n+2007-06-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/lookup/anon6.C: New test.\n+\n 2007-06-14  Dirk Mueller  <dmueller@suse.de>\n \n \tPR c++/31806"}, {"sha": "09fa7f8f3b6aff2a7f1442e9021fabf34ef36b2d", "filename": "gcc/testsuite/g++.dg/lookup/anon6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555551c24b5159164cef489982455d2012561f8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555551c24b5159164cef489982455d2012561f8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon6.C?ref=555551c24b5159164cef489982455d2012561f8b", "patch": "@@ -0,0 +1,11 @@\n+extern int v1; // { dg-error \"declared\" }\n+static union { int v1; }; // { dg-error \"redeclaration\" } \n+\n+static union { int v2; }; // { dg-error \"declared\" }\n+extern int v2; // { dg-error \"redeclaration\" } \n+\n+int v3; // { dg-error \"declared\" }\n+static union { int v3; }; // { dg-error \"redeclaration\" } \n+\n+static union { int v4; }; // { dg-error \"declared\" }\n+static union { int v4; }; // { dg-error \"redeclaration\" } "}]}