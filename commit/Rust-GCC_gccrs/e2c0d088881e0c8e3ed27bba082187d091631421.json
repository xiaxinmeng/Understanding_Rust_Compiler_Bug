{"sha": "e2c0d088881e0c8e3ed27bba082187d091631421", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJjMGQwODg4ODFlMGM4ZTNlZDI3YmJhMDgyMTg3ZDA5MTYzMTQyMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-11T19:34:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-11T19:34:56Z"}, "message": "re PR target/82682 (FAIL: gcc.target/i386/pr50038.c scan-assembler-times movzbl 2 (found 3 times) since r253958)\n\n\tPR target/82682\n\t* ree.c (combine_reaching_defs): Optimize also\n\treg2=exp; reg1=reg2; reg2=any_extend(reg1); into\n\treg2=any_extend(exp); reg1=reg2;, formatting fix.\n\nFrom-SVN: r256551", "tree": {"sha": "0d539ec18e2da914e8bf2ba569ed2baad4587991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d539ec18e2da914e8bf2ba569ed2baad4587991"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2c0d088881e0c8e3ed27bba082187d091631421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c0d088881e0c8e3ed27bba082187d091631421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c0d088881e0c8e3ed27bba082187d091631421", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c0d088881e0c8e3ed27bba082187d091631421/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03943bbd4a468fb51b8a0102daa815c887a45711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03943bbd4a468fb51b8a0102daa815c887a45711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03943bbd4a468fb51b8a0102daa815c887a45711"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "e676fec8025e611c1a4ccfa5cc5c90e6133b4326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c0d088881e0c8e3ed27bba082187d091631421/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c0d088881e0c8e3ed27bba082187d091631421/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2c0d088881e0c8e3ed27bba082187d091631421", "patch": "@@ -1,3 +1,10 @@\n+2018-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82682\n+\t* ree.c (combine_reaching_defs): Optimize also\n+\treg2=exp; reg1=reg2; reg2=any_extend(reg1); into\n+\treg2=any_extend(exp); reg1=reg2;, formatting fix.\n+\n 2018-01-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/83189"}, {"sha": "8f0ce976af2a2cdea4ffb671a5dd65386e11db36", "filename": "gcc/ree.c", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c0d088881e0c8e3ed27bba082187d091631421/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c0d088881e0c8e3ed27bba082187d091631421/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=e2c0d088881e0c8e3ed27bba082187d091631421", "patch": "@@ -901,7 +901,7 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n                                  REGNO (SET_DEST (pat)));\n       emit_move_insn (new_dst, new_src);\n \n-      rtx_insn *insn = get_insns();\n+      rtx_insn *insn = get_insns ();\n       end_sequence ();\n       if (NEXT_INSN (insn))\n \treturn false;\n@@ -910,8 +910,81 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n       extract_insn (insn);\n       if (!constrain_operands (1, get_preferred_alternatives (insn, bb)))\n \treturn false;\n-    }\n \n+      while (REG_P (SET_SRC (*dest_sub_rtx))\n+\t     && (REGNO (SET_SRC (*dest_sub_rtx)) == REGNO (SET_DEST (pat))))\n+\t{\n+\t  /* Considering transformation of\n+\t     (set (reg2) (expression))\n+\t     ...\n+\t     (set (reg1) (reg2))\n+\t     ...\n+\t     (set (reg2) (any_extend (reg1)))\n+\n+\t     into\n+\n+\t     (set (reg2) (any_extend (expression)))\n+\t     (set (reg1) (reg2))\n+\t     ...  */\n+\t  struct df_link *defs\n+\t    = get_defs (def_insn, SET_SRC (*dest_sub_rtx), NULL);\n+\t  if (defs == NULL || defs->next)\n+\t    break;\n+\n+\t  /* There is only one reaching def.  */\n+\t  rtx_insn *def_insn2 = DF_REF_INSN (defs->ref);\n+\n+\t  /* The defining statement must not have been modified either.  */\n+\t  if (state->modified[INSN_UID (def_insn2)].kind != EXT_MODIFIED_NONE)\n+\t    break;\n+\n+\t  /* The def_insn2 and candidate insn must be in the same\n+\t     block and def_insn follows def_insn2.  */\n+\t  if (bb != BLOCK_FOR_INSN (def_insn2)\n+\t      || DF_INSN_LUID (def_insn2) > DF_INSN_LUID (def_insn))\n+\t    break;\n+\n+\t  rtx *dest_sub_rtx2 = get_sub_rtx (def_insn2);\n+\t  if (dest_sub_rtx2 == NULL\n+\t      || !REG_P (SET_DEST (*dest_sub_rtx2)))\n+\t    break;\n+\n+\t  /* On RISC machines we must make sure that changing the mode of\n+\t     SRC_REG as destination register will not affect its reaching\n+\t     uses, which may read its value in a larger mode because DEF_INSN\n+\t     implicitly sets it in word mode.  */\n+\t  if (WORD_REGISTER_OPERATIONS && known_lt (prec, BITS_PER_WORD))\n+\t    {\n+\t      struct df_link *uses = get_uses (def_insn2, SET_DEST (pat));\n+\t      if (!uses)\n+\t\tbreak;\n+\n+\t      df_link *use;\n+\t      rtx dest2 = SET_DEST (*dest_sub_rtx2);\n+\t      for (use = uses; use; use = use->next)\n+\t\tif (paradoxical_subreg_p (GET_MODE (*DF_REF_LOC (use->ref)),\n+\t\t\t\t\t  GET_MODE (dest2)))\n+\t\t  break;\n+\t      if (use)\n+\t\tbreak;\n+\t    }\n+\n+\t  /* The destination register of the extension insn must not be\n+\t     used or set between the def_insn2 and def_insn exclusive.\n+\t     Likewise for the other reg, i.e. check both reg1 and reg2\n+\t     in the above comment.  */\n+\t  if (reg_used_between_p (SET_DEST (PATTERN (cand->insn)),\n+\t\t\t\t  def_insn2, def_insn)\n+\t      || reg_set_between_p (SET_DEST (PATTERN (cand->insn)),\n+\t\t\t\t    def_insn2, def_insn)\n+\t      || reg_used_between_p (src_reg, def_insn2, def_insn)\n+\t      || reg_set_between_p (src_reg, def_insn2, def_insn))\n+\t    break;\n+\n+\t  state->defs_list[0] = def_insn2;\n+\t  break;\n+\t}\n+    }\n \n   /* If cand->insn has been already modified, update cand->mode to a wider\n      mode if possible, or punt.  */"}]}