{"sha": "b15e733f3c23987afbac235247d68fd1fd84b668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1ZTczM2YzYzIzOTg3YWZiYWMyMzUyNDdkNjhmZDFmZDg0YjY2OA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-12-17T06:17:06Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-12-17T06:17:06Z"}, "message": "attr-weakref-1.c: Do not run on darwin.\n\n        * gcc.dg/attr-weakref-1.c: Do not run on darwin. \n        * gcc.dg/attr-weakref-1-darwin.c: New test to run on darwin.\n\nFrom-SVN: r108710", "tree": {"sha": "322f8dc3d6fd0163f40bfc39b5b8c6423b6165db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/322f8dc3d6fd0163f40bfc39b5b8c6423b6165db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15e733f3c23987afbac235247d68fd1fd84b668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15e733f3c23987afbac235247d68fd1fd84b668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15e733f3c23987afbac235247d68fd1fd84b668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15e733f3c23987afbac235247d68fd1fd84b668/comments", "author": null, "committer": null, "parents": [{"sha": "44984de00d3a251a01e751527cfdaee4087b0015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44984de00d3a251a01e751527cfdaee4087b0015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44984de00d3a251a01e751527cfdaee4087b0015"}], "stats": {"total": 365, "additions": 296, "deletions": 69}, "files": [{"sha": "8af67126661fd7a0fede6a25cc31d3c21772dd9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 71, "deletions": 67, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15e733f3c23987afbac235247d68fd1fd84b668/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15e733f3c23987afbac235247d68fd1fd84b668/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b15e733f3c23987afbac235247d68fd1fd84b668", "patch": "@@ -1,3 +1,8 @@\n+2005-12-17  Andreas Jaeger  <aj@suse.de>\n+\n+\t* gcc.dg/attr-weakref-1.c: Do not run on darwin.\n+\t* gcc.dg/attr-weakref-1-darwin.c: New test to run on darwin.\n+\n 2005-12-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/24268\n@@ -123,7 +128,7 @@\n \tRemove xfail.\n \n 2005-12-14  Kean Johnston  <jkj@sco.com>\n-            Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\t    Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/sibcall-6.c: Skip in -fPIC mode on X86 ilp32.\n \t* gcc.target/i386/20020523-1.c: Ditto.\n@@ -144,8 +149,8 @@\n \n 2005-12-14  David Billinghurst  (David.Billinghurst@riotinto.com)\n \n-\t* lib/fortran-torture.exp:  Catch remaining uses of \n-\tremote_file build delete. \n+\t* lib/fortran-torture.exp:  Catch remaining uses of\n+\tremote_file build delete.\n \n 2005-12-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -399,7 +404,7 @@\n \n \tPR libgfortran/25039\n \t* gfortran.dg/read_comma.f: New test.\n-\t\n+\n 2005-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/19317\n@@ -435,9 +440,9 @@\n \tILP32 vect_no_align platforms.\n \n 2005-12-08  Andreas Krebbel  <krebbel1@de.ibm.com>\n-            Jakub Jelinek  <jakub@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n \n-        PR target/25268\n+\tPR target/25268\n \t* gcc.c-torture/compile/20051207-1.c: New test.\n \n 2005-12-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n@@ -550,7 +555,7 @@\n \n \tPR c++/24173\n \t* g++.dg/template/friend40.C: New test.\n-\t\n+\n 2005-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/25199\n@@ -579,11 +584,11 @@\n 2005-12-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* gfortran.dg/pr24489.f90: Delete, replaced by read_eor.f90.\n-\t* gfortran.dg/pr24584.f90: Delete, replaced by namelist_empty.f90. \n+\t* gfortran.dg/pr24584.f90: Delete, replaced by namelist_empty.f90.\n \n 2005-12-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n-        PR c/13384\n+\tPR c/13384\n \t* gcc.dg/pr17730-1.c: Adjust.\n \t* gcc.dg/lvalue1.c (main): Likewise.\n \t* gcc.dg/lvalue-2.c: Likewise.\n@@ -618,7 +623,7 @@\n \tg++.dg/tls/diag-3.C, g++.dg/tls/diag-4.C, g++.dg/tls/init-1.C,\n \tg++.dg/tls/init-2.C, g++.dg/tls/trivial.C: Require\n \teffective-target TLS.\n-\t* gcc.dg/tls/pr24428-2.c, gcc.dg/tls/pr24428.c, gcc.dg/tls/opt-11.c, \n+\t* gcc.dg/tls/pr24428-2.c, gcc.dg/tls/pr24428.c, gcc.dg/tls/opt-11.c,\n \tg++.dg/tls/static-1a.cc, g++.dg/tls/static-1.C: Require\n \teffective-target TLS runtime.\n \n@@ -1014,7 +1019,7 @@\n \t* gcc.dg/tree-ssa/loop-14.c: New test.\n \n 2005-11-17  James A. Morrison  <phython@gcc.gnu.org>\n-            Michael Chamberlain <michael@chamberlain.net.au>\n+\t    Michael Chamberlain <michael@chamberlain.net.au>\n \n \t* ada/acats/run_all.sh (target_run): Kill long running tests.\n \n@@ -1185,7 +1190,7 @@\n \n \tPR middle-end/24750\n \t* gcc.dg/torture/pr24750-1.c, gcc.target/cris/torture/pr24750-2.c:\n-        New tests.\n+\tNew tests.\n \n 2005-11-11  Andreas Tobler  <a.tobler@schweiz.ch>\n \n@@ -1277,7 +1282,7 @@\n \n 2005-11-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n-        PR 24624\n+\tPR 24624\n \t* gcc.dg/pr24624.c: Testcase added.\n \n 2005-11-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n@@ -1361,14 +1366,14 @@\n \n \tPR target/24230\n \n-        * gcc.target/powerpc/altivec-consts.c,\n-        gcc.target/powerpc/altivec-splat.c: New testcase.\n+\t* gcc.target/powerpc/altivec-consts.c,\n+\tgcc.target/powerpc/altivec-splat.c: New testcase.\n \n 2005-11-07  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR c/24599\n \n-        * gcc.dg/overflow-2.c: New testcase.\n+\t* gcc.dg/overflow-2.c: New testcase.\n \n 2005-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -1722,8 +1727,8 @@\n \n 2005-10-31  Jerry DeLisle  <jvdelisle@verizon.net>\n \n-        PR libgfortran/24584\n-        * gfortran.dg/pr24584.f90: New test.\n+\tPR libgfortran/24584\n+\t* gfortran.dg/pr24584.f90: New test.\n \n 2005-10-28  Erik Edelmann  <eedelman@gcc.gnu.org>\n \n@@ -1833,14 +1838,14 @@\n \n 2005-10-24  Jerry DeLisle  <jvdelisle@verizon.net>\n \n-        PR libgfortran/24224\n-        * gfortran.dg/arrayio_1.f90: Update attribution.\n-        * gfortran.dg/arrayio_2.f90: Update attribution.\n-        * gfortran.dg/arrayio_3.f90: Update attribution.\n-        * gfortran.dg/arrayio_4.f90: Update test conditions.\n-        * gfortran.dg/arrayio_5.f90: Update attribution.\n-        * gfortran.dg/arrayio_6.f90: New test.\n-        * gfortran.dg/arrayio_7.f90: New test.\n+\tPR libgfortran/24224\n+\t* gfortran.dg/arrayio_1.f90: Update attribution.\n+\t* gfortran.dg/arrayio_2.f90: Update attribution.\n+\t* gfortran.dg/arrayio_3.f90: Update attribution.\n+\t* gfortran.dg/arrayio_4.f90: Update test conditions.\n+\t* gfortran.dg/arrayio_5.f90: Update attribution.\n+\t* gfortran.dg/arrayio_6.f90: New test.\n+\t* gfortran.dg/arrayio_7.f90: New test.\n \n 2005-10-24  Zdenek Dvorak  <dvorakz@suse.cz>\n \n@@ -2240,12 +2245,12 @@\n \n 2005-10-12  Razya Ladelsky <razya@il.ibm.com>\n \n-        * g++.dg/ipa/ipa-1.c: New test.\n-        * g++.dg/ipa/ipa-2.c: New test.\n-        * g++.dg/ipa/ipa-3.c: New test.\n-        * g++.dg/ipa/ipa-4.c: New test.\n-        * g++.dg/ipa/ipa-5.c: New test.\n-        * g++.dg/ipa/ipa.exp: New file.\n+\t* g++.dg/ipa/ipa-1.c: New test.\n+\t* g++.dg/ipa/ipa-2.c: New test.\n+\t* g++.dg/ipa/ipa-3.c: New test.\n+\t* g++.dg/ipa/ipa-4.c: New test.\n+\t* g++.dg/ipa/ipa-5.c: New test.\n+\t* g++.dg/ipa/ipa.exp: New file.\n \n 2005-10-12  Paul Thomas  <pault@gcc.gnu.org>\n \n@@ -3252,7 +3257,7 @@\n \t* gfortran.dg/direct_io_4.f90:  New test case.\n \n 2005-09-04  Andrew Pinski  <pinskia@physics.uc.edu>\n-            Rasmus Hahn  <rassahah@neofonie.de>\n+\t    Rasmus Hahn  <rassahah@neofonie.de>\n \n \tPR libobjc/23108\n \t* objc.dg/type-stream-1.m: New test.\n@@ -3693,10 +3698,10 @@\n \t* gcc.dg/vect/vect-78: Likewise.\n \t* gcc.dg/vect/vect-80: Likewise.\n \t* gcc.dg/vect/vect-35: Likewise, and also check that the test wasn't\n-        vectorized for the expected reason, rather than checking how alignment\n-        was handled.\n+\tvectorized for the expected reason, rather than checking how alignment\n+\twas handled.\n \t* gcc.dg/vect/vect-92.c: Use aligned arrays instead of arrays to aligned\n-        type and also instead of aligned pointers. Added documentation.\n+\ttype and also instead of aligned pointers. Added documentation.\n \n 2005-08-16  Feng Wang  <fengwang@nudt.edu.cn>\n \n@@ -3734,7 +3739,7 @@\n \t* gcc.dg/vect/vect-105.c: Add xfail for no_align targets.\n \n 2005-08-13  Marcin Koziej  <creep@desk.pl>\n-            Andrew Pinski  <pinskia@physics.uc.edu>\n+\t    Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR libobjc/22492\n \t* execute/exceptions/finally-1.m: New test.\n@@ -3893,7 +3898,7 @@\n \t* gcc.dg/pr22458-1.c: New test.\n \n 2005-08-07  Janne Blomqvist <jblomqvi@cc.hut.fi>\n-            Steven G. Kargl <kargls@comcast.net>\n+\t    Steven G. Kargl <kargls@comcast.net>\n \n \tPR fortran/22390\n \t* gfortran.dg/flush_1.f90: New test.\n@@ -4196,7 +4201,7 @@\n \n 2005-07-27  Jeff Law  <law@redhat.com>\n \n-        * gcc.c-torture/execute/pr22630.c: New test.\n+\t* gcc.c-torture/execute/pr22630.c: New test.\n \n 2005-07-27  Dorit Nuzman  <dorit@il.ibm.com>\n \n@@ -4252,8 +4257,8 @@\n \n 2005-07-25  Adam Nemet  <anemet@lnxw.com>\n \n-        * lib/profopt.exp (profopt-execute): Check for profiling data\n-        files on the target.\n+\t* lib/profopt.exp (profopt-execute): Check for profiling data\n+\tfiles on the target.\n \n 2005-07-25  Richard Guenther  <rguenther@gcc.gnu.org>\n \n@@ -4308,14 +4313,14 @@\n \n 2005-07-23  Jerry DeLisle  <jvdelisle@verizon.net>\n \n-        * gfortran.fortran-torture/execute/nan_inf_fmt.f90: Revise test to\n-        include case of field width of zero.\n+\t* gfortran.fortran-torture/execute/nan_inf_fmt.f90: Revise test to\n+\tinclude case of field width of zero.\n \n 2005-07-23  Jerry DeLisle  <jvdelisle@verizon.net>\n \n-        PR libgfortran/21875\n-        * gfortran.dg/fmt_read_bz_bn.f90: Revised test to include case\n-        with trailing blanks on normal formatted read.\n+\tPR libgfortran/21875\n+\t* gfortran.dg/fmt_read_bz_bn.f90: Revised test to include case\n+\twith trailing blanks on normal formatted read.\n \n 2005-07-23  Chao-ying Fu  <fu@mips.com>\n \n@@ -4404,8 +4409,8 @@\n 2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR tree-optimization/19210\n-        * gcc.dg/tree-ssa/pr19210-1.c: New.\n-        * gcc.dg/tree-ssa/pr19210-2.c: New.\n+\t* gcc.dg/tree-ssa/pr19210-1.c: New.\n+\t* gcc.dg/tree-ssa/pr19210-2.c: New.\n \n 2005-07-21  Richard Sandiford  <richard@codesourcery.com>\n \n@@ -4889,7 +4894,7 @@\n \n 2005-06-28  Thomas Koenig  <Thomas.Koenig@online.de>\n \n-        PR libfortran/22142\n+\tPR libfortran/22142\n \t* gfortran.fortran-torture/execute/intrinsic_eoshift.f90:\n \tAdd testcase also testing eoshift1 for PR 22142.\n \n@@ -4903,7 +4908,7 @@\n \n 2005-06-28  Thomas Koenig  <Thomas.Koenig@online.de>\n \n-        PR libfortran/22142\n+\tPR libfortran/22142\n \t* gfortran.fortran-torture/execute/intrinsic_eoshift.f90:\n \tAdd testcase for PR 22142.\n \n@@ -5934,7 +5939,7 @@\n \n 2005-05-26  Andreas Jaeger  <aj@suse.de>\n \n-        PR testsuite/20772\n+\tPR testsuite/20772\n \t* gfortran.dg/promotion.f90, gcc.misc-tests/i386-pf-3dnow-1.c,\n \tgcc.misc-tests/i386-pf-athlon-1.c,\n \tgcc.misc-tests/i386-pf-none-1.c, gcc.misc-tests/i386-pf-sse-1.c,\n@@ -7187,20 +7192,20 @@\n \n 2004-04-11  Devang Patel  <dpatel@apple.com>\n \n-        * lib/target-supports.exp (check_effective_target_vect_condition): New.\n-        * gcc.dg/vect/vect-ifcvt-1.c: New test.\n-        * gcc.dg/vect/vect-ifcvt-2.c: New test.\n-        * gcc.dg/vect/vect-ifcvt-3.c: New test.\n-        * gcc.dg/vect/vect-ifcvt-4.c: New test.\n-        * gcc.dg/vect/vect-ifcvt-5.c: New test.\n-        * gcc.dg/vect/vect-ifcvt-6.c: New test.\n-        * gcc.dg/vect/vect-ifcvt-7.c: New test.\n-        * gcc.dg/vect/vect-none.c: Now one loop is vectorized.\n+\t* lib/target-supports.exp (check_effective_target_vect_condition): New.\n+\t* gcc.dg/vect/vect-ifcvt-1.c: New test.\n+\t* gcc.dg/vect/vect-ifcvt-2.c: New test.\n+\t* gcc.dg/vect/vect-ifcvt-3.c: New test.\n+\t* gcc.dg/vect/vect-ifcvt-4.c: New test.\n+\t* gcc.dg/vect/vect-ifcvt-5.c: New test.\n+\t* gcc.dg/vect/vect-ifcvt-6.c: New test.\n+\t* gcc.dg/vect/vect-ifcvt-7.c: New test.\n+\t* gcc.dg/vect/vect-none.c: Now one loop is vectorized.\n \n 2004-04-11  Devang Patel  <dpatel@apple.com>\n \n-        * gcc.dg/vect/vect-dv-1.c: New test.\n-        * gcc.dg/vect/vect-dv-2.c: New test.\n+\t* gcc.dg/vect/vect-dv-1.c: New test.\n+\t* gcc.dg/vect/vect-dv-2.c: New test.\n \n 2005-04-11  Diego Novillo  <dnovillo@redhat.com>\n \n@@ -7254,7 +7259,7 @@\n \t* gcc.dg/pr20126.c: New.\n \n 2005-04-09  Bud Davis  <bdavis@gfortran.org>\n-            Steven G. Kargl <kargls@comcast.net>\n+\t    Steven G. Kargl <kargls@comcast.net>\n \n \t* gfortran.dg/PR19872.f: New test.\n \n@@ -7507,7 +7512,7 @@\n \t* g++.dg/template/spec23.C: New.\n \n 2005-04-03  Dale Ranta  <dir@lanl.gov>\n-            Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\t    Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/20068\n \tPR libfortran/20125\n@@ -8499,7 +8504,7 @@\n 2005-03-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* lib/file-format.exp (gcc_target_object_format): Add check for som\n-        format and hardcode object formats on hppa*-*-hpux*.\n+\tformat and hardcode object formats on hppa*-*-hpux*.\n \t* lib/target-supports.exp (check_weak_available): Add check for som\n \tobject format.  Always return 0 on hppa*-*-hpux10*.\n \n@@ -8515,7 +8520,7 @@\n \t* gfortran.dg/pr19936_3.f90: New test.\n \n 2005-03-05  Steven G. Kargl  <kargls@comcast.net>\n-            Paul Thomas <prthomas@drfccad.cea.fr>\n+\t    Paul Thomas <prthomas@drfccad.cea.fr>\n \n \t* gfortran.dg/PR19754_1.f90: New test.\n \t* gfortran.dg/PR19754_2.f90: Ditto.\n@@ -39037,4 +39042,3 @@ rlsruhe.de>\n \tcorrespond to c-torture\t1.11.\n \n \t* New file.\n-"}, {"sha": "ef0ec52eacf4ea54a193a66765a4d417b1a038e6", "filename": "gcc/testsuite/gcc.dg/attr-weakref-1-darwin.c", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15e733f3c23987afbac235247d68fd1fd84b668/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15e733f3c23987afbac235247d68fd1fd84b668/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1-darwin.c?ref=b15e733f3c23987afbac235247d68fd1fd84b668", "patch": "@@ -0,0 +1,223 @@\n+// { dg-do run { target { powerpc-*-darwin* } } }\n+// { dg-require-weak \"\" }\n+// { dg-options \"-O2\" }\n+// { dg-options \"-O2 -mmacosx-version-min=10.2\" { target { powerpc-*-darwin* } } }\n+// { dg-additional-sources \"attr-weakref-1a.c attr-weakref-1b.c\" }\n+\n+// Copyright 2005 Free Software Foundation, Inc.\n+// Contributed by Alexandre Oliva <aoliva@redhat.com>\n+\n+// Torture test for weakrefs.  The first letter of an identifier\n+// indicates whether/how it is defined; the second letter indicates\n+// whether it is part of a variable or function test; the number that\n+// follows is a test counter, and a letter that may follow enables\n+// multiple identifiers within the same test (e.g., multiple weakrefs\n+// or pointers to the same identifier).\n+\n+// Identifiers starting with W are weakrefs; those with p are\n+// pointers; those with g are global definitions; those with l are\n+// local definitions; those with w are expected to be weak undefined\n+// in the symbol table; those with u are expected to be marked as\n+// non-weak undefined in the symbol table.\n+\n+#include <stdlib.h>\n+\n+#define USED __attribute__((used))\n+\n+typedef int vtype;\n+\n+extern vtype wv1;\n+static vtype Wv1a __attribute__((weakref (\"wv1\")));\n+static vtype *pv1a USED = &Wv1a;\n+\n+vtype gv2;\n+static vtype Wv2a __attribute__((weakref (\"gv2\")));\n+static vtype *pv2a USED = &Wv2a;\n+\n+static vtype lv3;\n+static vtype Wv3a __attribute__((weakref (\"lv3\")));\n+static vtype *pv3a USED = &Wv3a;\n+\n+extern vtype uv4;\n+static vtype Wv4a __attribute__((weakref (\"uv4\")));\n+static vtype *pv4a USED = &Wv4a;\n+static vtype *pv4 USED = &uv4;\n+\n+static vtype Wv5a __attribute__((weakref (\"uv5\")));\n+static vtype *pv5a USED = &Wv5a;\n+extern vtype uv5;\n+static vtype *pv5 USED = &uv5;\n+\n+static vtype Wv6a __attribute__((weakref (\"wv6\")));\n+static vtype *pv6a USED = &Wv6a;\n+extern vtype wv6;\n+\n+static vtype Wv7a __attribute__((weakref (\"uv7\")));\n+static vtype* USED fv7 (void) {\n+  return &Wv7a;\n+}\n+extern vtype uv7;\n+static vtype* USED fv7a (void) {\n+  return &uv7;\n+}\n+\n+extern vtype uv8;\n+static vtype* USED fv8a (void) {\n+  return &uv8;\n+}\n+static vtype Wv8a __attribute__((weakref (\"uv8\")));\n+static vtype* USED fv8 (void) {\n+  return &Wv8a;\n+}\n+\n+extern vtype wv9 __attribute__((weak));\n+static vtype Wv9a __attribute__((weakref (\"wv9\")));\n+static vtype *pv9a USED = &Wv9a;\n+\n+static vtype Wv10a __attribute__((weakref (\"Wv10b\")));\n+static vtype Wv10b __attribute__((weakref (\"Wv10c\")));\n+static vtype Wv10c __attribute__((weakref (\"Wv10d\")));\n+static vtype Wv10d __attribute__((weakref (\"wv10\")));\n+extern vtype wv10;\n+\n+extern vtype wv11;\n+static vtype Wv11d __attribute__((weakref (\"wv11\")));\n+static vtype Wv11c __attribute__((weakref (\"Wv11d\")));\n+static vtype Wv11b __attribute__((weakref (\"Wv11c\")));\n+static vtype Wv11a __attribute__((weakref (\"Wv11b\")));\n+\n+static vtype Wv12 __attribute__((weakref (\"wv12\")));\n+extern vtype wv12 __attribute__((weak));\n+\n+static vtype Wv13 __attribute__((weakref (\"wv13\")));\n+extern vtype wv13 __attribute__((weak));\n+\n+static vtype Wv14a __attribute__((weakref (\"wv14\")));\n+static vtype Wv14b __attribute__((weakref (\"wv14\")));\n+extern vtype wv14 __attribute__((weak));\n+\n+typedef void ftype(void);\n+\n+extern ftype wf1;\n+static ftype Wf1a __attribute__((weakref (\"wf1\")));\n+static ftype *pf1a USED = &Wf1a;\n+static ftype Wf1c __attribute__((weakref));\n+extern ftype Wf1c __attribute__((alias (\"wf1\")));\n+static ftype *pf1c USED = &Wf1c;\n+\n+void gf2(void) {}\n+static ftype Wf2a __attribute__((weakref (\"gf2\")));\n+static ftype *pf2a USED = &Wf2a;\n+\n+static void lf3(void) {}\n+static ftype Wf3a __attribute__((weakref (\"lf3\")));\n+static ftype *pf3a USED = &Wf3a;\n+\n+extern ftype uf4;\n+static ftype Wf4a __attribute__((weakref (\"uf4\")));\n+static ftype *pf4a USED = &Wf4a;\n+static ftype *pf4 USED = &uf4;\n+\n+static ftype Wf5a __attribute__((weakref (\"uf5\")));\n+static ftype *pf5a USED = &Wf5a;\n+extern ftype uf5;\n+static ftype *pf5 USED = &uf5;\n+\n+static ftype Wf6a __attribute__((weakref (\"wf6\")));\n+static ftype *pf6a USED = &Wf6a;\n+extern ftype wf6;\n+\n+static ftype Wf7a __attribute__((weakref (\"uf7\")));\n+static ftype* USED ff7 (void) {\n+  return &Wf7a;\n+}\n+extern ftype uf7;\n+static ftype* USED ff7a (void) {\n+  return &uf7;\n+}\n+\n+extern ftype uf8;\n+static ftype* USED ff8a (void) {\n+  return &uf8;\n+}\n+static ftype Wf8a __attribute__((weakref (\"uf8\")));\n+static ftype* USED ff8 (void) {\n+  return &Wf8a;\n+}\n+\n+extern ftype wf9 __attribute__((weak));\n+static ftype Wf9a __attribute__((weakref (\"wf9\")));\n+static ftype *pf9a USED = &Wf9a;\n+\n+static ftype Wf10a __attribute__((weakref (\"Wf10b\")));\n+static ftype Wf10b __attribute__((weakref (\"Wf10c\")));\n+static ftype Wf10c __attribute__((weakref (\"Wf10d\")));\n+static ftype Wf10d __attribute__((weakref (\"wf10\")));\n+extern ftype wf10;\n+\n+extern ftype wf11;\n+static ftype Wf11d __attribute__((weakref (\"wf11\")));\n+static ftype Wf11c __attribute__((weakref (\"Wf11d\")));\n+static ftype Wf11b __attribute__((weakref (\"Wf11c\")));\n+static ftype Wf11a __attribute__((weakref (\"Wf11b\")));\n+\n+static ftype Wf12 __attribute__((weakref (\"wf12\")));\n+extern ftype wf12 __attribute__((weak));\n+\n+static ftype Wf13 __attribute__((weakref (\"wf13\")));\n+extern ftype wf13 __attribute__((weak));\n+\n+static ftype Wf14a __attribute__((weakref (\"wf14\")));\n+static ftype Wf14b __attribute__((weakref (\"wf14\")));\n+extern ftype wf14 __attribute__((weak));\n+\n+#ifndef __APPLE__\n+#define chk(p) do { if (!p) abort (); } while (0)\n+#else\n+#define chk(p) /* */\n+#endif\n+\n+int main () {\n+  chk (!pv1a);\n+  chk (pv2a);\n+  chk (pv3a);\n+  chk (pv4a);\n+  chk (pv4);\n+  chk (pv5a);\n+  chk (pv5);\n+  chk (!pv6a);\n+  chk (fv7 ());\n+  chk (fv7a ());\n+  chk (fv8 ());\n+  chk (fv8a ());\n+  chk (!pv9a);\n+  chk (!&Wv10a);\n+  chk (!&Wv11a);\n+  chk (!&Wv12);\n+  chk (!&wv12);\n+  chk (!&wv13);\n+  chk (!&Wv14a);\n+\n+  chk (!pf1a);\n+  chk (!pf1c);\n+  chk (pf2a);\n+  chk (pf3a);\n+  chk (pf4a);\n+  chk (pf4);\n+  chk (pf5a);\n+  chk (pf5);\n+  chk (!pf6a);\n+  chk (ff7 ());\n+  chk (ff7a ());\n+  chk (ff8 ());\n+  chk (ff8a ());\n+  chk (!pf9a);\n+  chk (!&Wf10a);\n+  chk (!&Wf11a);\n+  chk (!&Wf12);\n+  chk (!&wf12);\n+  chk (!&wf13);\n+  chk (!&Wf14a);\n+\n+  exit (0);\n+}"}, {"sha": "03071105370d7e0bc28bc6c769ac2b99b9c12ff0", "filename": "gcc/testsuite/gcc.dg/attr-weakref-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15e733f3c23987afbac235247d68fd1fd84b668/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15e733f3c23987afbac235247d68fd1fd84b668/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-1.c?ref=b15e733f3c23987afbac235247d68fd1fd84b668", "patch": "@@ -1,9 +1,9 @@\n // { dg-do run }\n // { dg-require-weak \"\" }\n+// On darwin, we use attr-weakref-1-darwin.c\n+// { dg-skip-if \"\" { \"*-*-darwin*\" } \"*\" { \"*\" } }\n // { dg-options \"-O2\" }\n-// { dg-options \"-O2 -mmacosx-version-min=10.2\" { target { powerpc-*-darwin* } } }\n // { dg-additional-sources \"attr-weakref-1a.c\" }\n-// { dg-additional-sources \"attr-weakref-1a.c attr-weakref-1b.c\" { target { *-*-darwin* } } }\n \n // Copyright 2005 Free Software Foundation, Inc.\n // Contributed by Alexandre Oliva <aoliva@redhat.com>"}]}