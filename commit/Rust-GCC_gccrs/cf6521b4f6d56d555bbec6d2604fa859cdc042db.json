{"sha": "cf6521b4f6d56d555bbec6d2604fa859cdc042db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y2NTIxYjRmNmQ1NmQ1NTViYmVjNmQyNjA0ZmE4NTljZGMwNDJkYg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2010-07-31T02:32:08Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2010-07-31T02:32:08Z"}, "message": "predicates.md (rx_constshift_operand): New.\n\n* config/rx/predicates.md (rx_constshift_operand): New.\n* config/rx/rx.md (zs_cond): New.\n(cbranchsi4): Remove mode.\n(*cbranchsi4_<code>): Likewise.\n(*tstbranchsi4_<code>): New.\n(*tstbranchsi4r_<code>): New.\n(*tstbranchsi4m_eq): New.\n(*tstbranchsi4m_ne): New.\n(cbranchsf4): Remove mode.\n(*cbranchsf4_<code>): Likewise.\n\nFrom-SVN: r162731", "tree": {"sha": "5086d1d41cbf5a74bb5649d040be9a8309736065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5086d1d41cbf5a74bb5649d040be9a8309736065"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf6521b4f6d56d555bbec6d2604fa859cdc042db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6521b4f6d56d555bbec6d2604fa859cdc042db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf6521b4f6d56d555bbec6d2604fa859cdc042db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6521b4f6d56d555bbec6d2604fa859cdc042db/comments", "author": null, "committer": null, "parents": [{"sha": "44080b4180d63643705a9c18a20e50c9cfd5bb94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44080b4180d63643705a9c18a20e50c9cfd5bb94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44080b4180d63643705a9c18a20e50c9cfd5bb94"}], "stats": {"total": 136, "additions": 127, "deletions": 9}, "files": [{"sha": "b417d4b0aefcae30d0d79de57b6db67c17fcbaeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6521b4f6d56d555bbec6d2604fa859cdc042db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6521b4f6d56d555bbec6d2604fa859cdc042db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf6521b4f6d56d555bbec6d2604fa859cdc042db", "patch": "@@ -1,3 +1,16 @@\n+2010-07-30  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/rx/predicates.md (rx_constshift_operand): New.\n+\t* config/rx/rx.md (zs_cond): New.\n+\t(cbranchsi4): Remove mode.\n+\t(*cbranchsi4_<code>): Likewise.\n+\t(*tstbranchsi4_<code>): New.\n+\t(*tstbranchsi4r_<code>): New.\n+\t(*tstbranchsi4m_eq): New.\n+\t(*tstbranchsi4m_ne): New.\n+\t(cbranchsf4): Remove mode.\n+\t(*cbranchsf4_<code>): Likewise.\n+\n 2010-07-30  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* rtlanal.c (simplify_subreg_regno): Don't treat"}, {"sha": "d8def87d6e8b47758420afb457becbe8cacdfa96", "filename": "gcc/config/rx/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6521b4f6d56d555bbec6d2604fa859cdc042db/gcc%2Fconfig%2Frx%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6521b4f6d56d555bbec6d2604fa859cdc042db/gcc%2Fconfig%2Frx%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Fpredicates.md?ref=cf6521b4f6d56d555bbec6d2604fa859cdc042db", "patch": "@@ -45,6 +45,13 @@\n   }\n )\n \n+(define_predicate \"rx_constshift_operand\"\n+  (match_code \"const_int\")\n+  {\n+    return IN_RANGE (INTVAL (op), 0, 31);\n+  }\n+)\n+\n ;; Check that the operand is suitable as the source operand\n ;; for a logic or arithmeitc instruction.  Registers, integers\n ;; and a restricted subset of memory addresses are allowed."}, {"sha": "0ad53637596b21e9087780f6b973a993b5bb399a", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 107, "deletions": 9, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6521b4f6d56d555bbec6d2604fa859cdc042db/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6521b4f6d56d555bbec6d2604fa859cdc042db/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=cf6521b4f6d56d555bbec6d2604fa859cdc042db", "patch": "@@ -24,6 +24,9 @@\n (define_code_iterator most_cond [eq ne gt ge lt le gtu geu ltu leu\n \t\t\t\t unordered ordered ])\n \n+;; Likewise, but only the ones that use Z or S.\n+(define_code_iterator zs_cond [eq ne gtu geu ltu leu ])\n+\n ;; This code iterator is used for sign- and zero- extensions.\n (define_mode_iterator small_int_modes [(HI \"\") (QI \"\")])\n \n@@ -157,9 +160,9 @@\n \n (define_expand \"cbranchsi4\"\n   [(set (pc)\n-\t(if_then_else (match_operator:SI 0 \"comparison_operator\"\n-\t\t\t\t\t [(match_operand:SI 1 \"register_operand\")\n-\t\t\t\t\t  (match_operand:SI 2 \"rx_source_operand\")])\n+\t(if_then_else (match_operator 0 \"comparison_operator\"\n+\t\t\t\t      [(match_operand:SI 1 \"register_operand\")\n+\t\t\t\t       (match_operand:SI 2 \"rx_source_operand\")])\n \t\t      (label_ref (match_operand 3 \"\"))\n \t\t      (pc)))\n    ]\n@@ -169,7 +172,7 @@\n \n (define_insn_and_split \"*cbranchsi4_<code>\"\n   [(set (pc)\n-\t(if_then_else (most_cond:SI (match_operand:SI  0 \"register_operand\"  \"r\")\n+\t(if_then_else (most_cond (match_operand:SI  0 \"register_operand\"  \"r\")\n \t\t\t\t    (match_operand:SI  1 \"rx_source_operand\" \"riQ\"))\n \t\t      (label_ref (match_operand        2 \"\" \"\"))\n \t\t      (pc)))\n@@ -189,11 +192,106 @@\n   \"\n )\n \n+;; -----------------------------------------------------------------------------\n+;; These two are the canonical TST/branch insns.  However, GCC\n+;; generates a wide variety of tst-like patterns, we catch those\n+;; below.\n+(define_insn_and_split \"*tstbranchsi4_<code>\"\n+  [(set (pc)\n+\t(if_then_else (zs_cond (and:SI (match_operand:SI  0 \"register_operand\"  \"r\")\n+\t\t\t\t       (match_operand:SI  1 \"rx_source_operand\" \"riQ\"))\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))\n+   ]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+  emit_insn (gen_tstsi (operands[0], operands[1]));\n+  \n+  emit_jump_insn (gen_conditional_branch (operands[2],\n+  \t\t gen_rtx_fmt_ee (<zs_cond:CODE>, CCmode,\n+\t\t\t\t gen_rtx_REG (CCmode, CC_REG), const0_rtx)));\n+  \"\n+)\n+\n+;; Inverse of above\n+(define_insn_and_split \"*tstbranchsi4r_<code>\"\n+  [(set (pc)\n+\t(if_then_else (zs_cond (and:SI (match_operand:SI  0 \"register_operand\"  \"r\")\n+\t\t\t\t       (match_operand:SI  1 \"rx_source_operand\" \"riQ\"))\n+\t\t\t       (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))))\n+   ]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+  emit_insn (gen_tstsi (operands[0], operands[1]));\n+  \n+  emit_jump_insn (gen_conditional_branch (operands[2],\n+  \t\t gen_rtx_fmt_ee (reverse_condition (<zs_cond:CODE>), CCmode,\n+\t\t\t\t gen_rtx_REG (CCmode, CC_REG), const0_rtx)));\n+  \"\n+)\n+\n+;; Various other ways that GCC codes \"var & const\"\n+\n+(define_insn_and_split \"*tstbranchsi4m_eq\"\n+  [(set (pc)\n+\t(if_then_else (eq (zero_extract:SI (match_operand:SI  0 \"register_operand\"  \"r\")\n+\t\t\t\t\t   (match_operand  1 \"rx_constshift_operand\" \"i\")\n+\t\t\t\t\t   (match_operand  2 \"rx_constshift_operand\" \"i\"))\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand        3 \"\" \"\"))\n+\t\t      (pc)))\n+   ]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (pc)\n+\t(if_then_else (eq (and:SI (match_dup  0)\n+\t\t\t\t  (match_dup 4))\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))\n+   ]\n+  \"operands[4] = GEN_INT (((1 << INTVAL (operands[1]))-1) << INTVAL (operands[2]));\"\n+)\n+\n+(define_insn_and_split \"*tstbranchsi4m_ne\"\n+  [(set (pc)\n+\t(if_then_else (ne (zero_extract:SI (match_operand:SI  0 \"register_operand\"  \"r\")\n+\t\t\t\t\t   (match_operand  1 \"rx_constshift_operand\" \"i\")\n+\t\t\t\t\t   (match_operand  2 \"rx_constshift_operand\" \"i\"))\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand        3 \"\" \"\"))\n+\t\t      (pc)))\n+   ]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (pc)\n+\t(if_then_else (ne (and:SI (match_dup  0)\n+\t\t\t\t  (match_dup 4))\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))\n+   ]\n+  \"operands[4] = GEN_INT (((1 << INTVAL (operands[1]))-1) << INTVAL (operands[2]));\"\n+)\n+\n+;; -----------------------------------------------------------------------------\n+\n (define_expand \"cbranchsf4\"\n   [(set (pc)\n-\t(if_then_else (match_operator:SF 0 \"comparison_operator\"\n-\t\t\t\t\t [(match_operand:SF 1 \"register_operand\")\n-\t\t\t\t\t  (match_operand:SF 2 \"rx_source_operand\")])\n+\t(if_then_else (match_operator 0 \"comparison_operator\"\n+\t\t\t\t      [(match_operand:SF 1 \"register_operand\")\n+\t\t\t\t       (match_operand:SF 2 \"rx_source_operand\")])\n \t\t      (label_ref (match_operand 3 \"\"))\n \t\t      (pc)))\n    ]\n@@ -203,8 +301,8 @@\n \n (define_insn_and_split \"*cbranchsf4_<code>\"\n   [(set (pc)\n-\t(if_then_else (most_cond:SF (match_operand:SF  0 \"register_operand\"  \"r\")\n-\t\t\t\t    (match_operand:SF  1 \"rx_source_operand\" \"rFiQ\"))\n+\t(if_then_else (most_cond (match_operand:SF  0 \"register_operand\"  \"r\")\n+\t\t\t\t (match_operand:SF  1 \"rx_source_operand\" \"rFiQ\"))\n \t\t      (label_ref (match_operand        2 \"\" \"\"))\n \t\t      (pc)))\n    ]"}]}