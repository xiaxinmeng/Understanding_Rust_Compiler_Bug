{"sha": "a342326069ab45d77f0e508983321e613c4acac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0MjMyNjA2OWFiNDVkNzdmMGU1MDg5ODMzMjFlNjEzYzRhY2FjMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-17T11:32:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-17T11:32:12Z"}, "message": "fold-const.c (fold_comparison): Remove redundant constant folding and operand swapping.\n\n2014-10-17  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_comparison): Remove redundant constant\n\tfolding and operand swapping.\n\t(fold_binary_loc): Do comparison operand swapping here.\n\t(fold_ternary_loc): Canonicalize operand order for\n\tcommutative ternary operations.\n\t* tree.c (commutative_ternary_tree_code): Add DOT_PROD_EXPR\n\tand FMA_EXPR.\n\nFrom-SVN: r216394", "tree": {"sha": "3ee115ae4945ecb152e39f0551068a6a35454a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ee115ae4945ecb152e39f0551068a6a35454a92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a342326069ab45d77f0e508983321e613c4acac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a342326069ab45d77f0e508983321e613c4acac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a342326069ab45d77f0e508983321e613c4acac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a342326069ab45d77f0e508983321e613c4acac2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73049af5fa62c7eeca27585f8f318e9bea7c47ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73049af5fa62c7eeca27585f8f318e9bea7c47ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73049af5fa62c7eeca27585f8f318e9bea7c47ae"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "b17de87018c0f5ab346570c839e8a78c310b19f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a342326069ab45d77f0e508983321e613c4acac2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a342326069ab45d77f0e508983321e613c4acac2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a342326069ab45d77f0e508983321e613c4acac2", "patch": "@@ -1,3 +1,13 @@\n+2014-10-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_comparison): Remove redundant constant\n+\tfolding and operand swapping.\n+\t(fold_binary_loc): Do comparison operand swapping here.\n+\t(fold_ternary_loc): Canonicalize operand order for\n+\tcommutative ternary operations.\n+\t* tree.c (commutative_ternary_tree_code): Add DOT_PROD_EXPR\n+\tand FMA_EXPR.\n+\n 2014-10-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/63464"}, {"sha": "1e7e9322d1718fed3fc89b18e48367dda59f3e6e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a342326069ab45d77f0e508983321e613c4acac2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a342326069ab45d77f0e508983321e613c4acac2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a342326069ab45d77f0e508983321e613c4acac2", "patch": "@@ -8721,14 +8721,6 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n   STRIP_SIGN_NOPS (arg0);\n   STRIP_SIGN_NOPS (arg1);\n \n-  tem = fold_relational_const (code, type, arg0, arg1);\n-  if (tem != NULL_TREE)\n-    return tem;\n-\n-  /* If one arg is a real or integer constant, put it last.  */\n-  if (tree_swap_operands_p (arg0, arg1, true))\n-    return fold_build2_loc (loc, swap_tree_comparison (code), type, op1, op0);\n-\n   /* Transform comparisons of the form X +- C1 CMP C2 to X CMP C2 -+ C1.  */\n   if ((TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n       && (equality_code || TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (arg0)))\n@@ -9915,6 +9907,12 @@ fold_binary_loc (location_t loc,\n       && tree_swap_operands_p (arg0, arg1, true))\n     return fold_build2_loc (loc, code, type, op1, op0);\n \n+  /* Likewise if this is a comparison, and ARG0 is a constant, move it\n+     to ARG1 to reduce the number of tests below.  */\n+  if (kind == tcc_comparison\n+      && tree_swap_operands_p (arg0, arg1, true))\n+    return fold_build2_loc (loc, swap_tree_comparison (code), type, op1, op0);\n+\n   /* ARG0 is the first operand of EXPR, and ARG1 is the second operand.\n \n      First check for cases where an arithmetic operation is applied to a\n@@ -13799,6 +13797,12 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n   gcc_assert (IS_EXPR_CODE_CLASS (kind)\n \t      && TREE_CODE_LENGTH (code) == 3);\n \n+  /* If this is a commutative operation, and OP0 is a constant, move it\n+     to OP1 to reduce the number of tests below.  */\n+  if (commutative_ternary_tree_code (code)\n+      && tree_swap_operands_p (op0, op1, true))\n+    return fold_build3_loc (loc, code, type, op1, op0, op2);\n+\n   /* Strip any conversions that don't change the mode.  This is safe\n      for every expression, except for a comparison expression because\n      its signedness is derived from its operands.  So, in the latter"}, {"sha": "365e89c4d6cce287be73de3d620878fc66e354e2", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a342326069ab45d77f0e508983321e613c4acac2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a342326069ab45d77f0e508983321e613c4acac2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a342326069ab45d77f0e508983321e613c4acac2", "patch": "@@ -7385,6 +7385,8 @@ commutative_ternary_tree_code (enum tree_code code)\n     {\n     case WIDEN_MULT_PLUS_EXPR:\n     case WIDEN_MULT_MINUS_EXPR:\n+    case DOT_PROD_EXPR:\n+    case FMA_EXPR:\n       return true;\n \n     default:"}]}