{"sha": "58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2MDViYTBiNWY5N2QyZmY2OWEyMzVmMGI2NGNkODA2ZTFmZGJmZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-12T21:08:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-12T21:08:56Z"}, "message": "* doc/invoke.texi: Update Alpha options.\n\nFrom-SVN: r48807", "tree": {"sha": "13a502b0ad829c7e2c9b641ac564c0a2164223f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13a502b0ad829c7e2c9b641ac564c0a2164223f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe/comments", "author": null, "committer": null, "parents": [{"sha": "7cbe9bb710456ead34f4f7e32db678bcdd618c59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbe9bb710456ead34f4f7e32db678bcdd618c59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbe9bb710456ead34f4f7e32db678bcdd618c59"}], "stats": {"total": 89, "additions": 72, "deletions": 17}, "files": [{"sha": "5ab36f10619d6600a2a49629b80d5ca1037246fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe", "patch": "@@ -1,5 +1,7 @@\n 2002-01-12  Richard Henderson  <rth@redhat.com>\n \n+\t* doc/invoke.texi: Update Alpha options.\n+\n \t* doc/invoke.texi: Update i386 built-in function lists.\n \n Sat Jan 12 17:38:11 CET 2002  Jan Hubicka  <jh@suse.cz>"}, {"sha": "7568080fcbce35292adbdaae1e876a461ec0889b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 70, "deletions": 17, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=58605ba0b5f97d2ff69a235f0b64cd806e1fdbfe", "patch": "@@ -514,13 +514,14 @@ in the following sections.\n \n @emph{DEC Alpha Options}\n @gccoptlist{\n--mfp-regs  -mno-fp-regs  -mno-soft-float  -msoft-float @gol\n--malpha-as  -mgas @gol\n+-mno-fp-regs  -msoft-float  -malpha-as  -mgas @gol\n -mieee  -mieee-with-inexact  -mieee-conformant @gol\n -mfp-trap-mode=@var{mode}  -mfp-rounding-mode=@var{mode} @gol\n -mtrap-precision=@var{mode}  -mbuild-constants @gol\n--mcpu=@var{cpu-type} @gol\n--mbwx  -mno-bwx  -mcix  -mno-cix  -mmax  -mno-max @gol\n+-mcpu=@var{cpu-type}  -mtune=@var{cpu-type} @gol\n+-mbwx  -mmax  -mfix  -mcix @gol\n+-mfloat-vax  -mfloat-ieee @gol\n+-mexplicit-relocs  -msmall-data  -mlarge-data @gol\n -mmemory-latency=@var{time}}\n \n @emph{DEC Alpha/VMS Options}\n@@ -8275,8 +8276,8 @@ Generate code that uses (does not use) the floating-point register set.\n @option{-mno-fp-regs} implies @option{-msoft-float}.  If the floating-point\n register set is not used, floating point operands are passed in integer\n registers as if they were integers and floating-point results are passed\n-in $0 instead of $f0.  This is a non-standard calling sequence, so any\n-function with a floating-point argument or return value called by code\n+in @code{$0} instead of @code{$f0}.  This is a non-standard calling sequence,\n+so any function with a floating-point argument or return value called by code\n compiled with @option{-mno-fp-regs} must also be compiled with that\n option.\n \n@@ -8419,33 +8420,77 @@ assembler (@option{-malpha-as}) or by the GNU assembler @option{-mgas}.\n @itemx -mno-bwx\n @itemx -mcix\n @itemx -mno-cix\n+@itemx -mfix\n+@itemx -mno-fix\n @itemx -mmax\n @itemx -mno-max\n @opindex mbwx\n @opindex mno-bwx\n @opindex mcix\n @opindex mno-cix\n+@opindex mfix\n+@opindex mno-fix\n @opindex mmax\n @opindex mno-max\n Indicate whether GCC should generate code to use the optional BWX,\n-CIX, and MAX instruction sets.  The default is to use the instruction sets\n-supported by the CPU type specified via @option{-mcpu=} option or that\n+CIX, FIX and MAX instruction sets.  The default is to use the instruction\n+sets supported by the CPU type specified via @option{-mcpu=} option or that\n of the CPU on which GCC was built if none was specified.\n \n+@item -mfloat-vax\n+@itemx -mfloat-ieee\n+@opindex mfloat-vax\n+@opindex mfloat-ieee\n+Generate code that uses (does not use) VAX F and G floating point\n+arithmetic instead of IEEE single and double precision.\n+\n+@item -mexplicit-relocs\n+@itemx -mno-explicit-relocs\n+@opindex mexplicit-relocs\n+@opindex mno-explicit-relocs\n+Older Alpha assemblers provided no way to generate symbol relocations\n+except via assembler macros.  Use of these macros does not allow \n+optimial instruction scheduling.  GNU binutils as of version 2.12\n+supports a new syntax that allows the compiler to explicitly mark\n+which relocations should apply to which instructions.  This option\n+is mostly useful for debugging, as GCC detects the capabilities of\n+the assembler when it is built and sets the default accordingly.\n+\n+@item -msmall-data\n+@itemx -mlarge-data\n+@opindex msmall-data\n+@opindex mlarge-data\n+When @option{-mexplicit-relocs} is in effect, static data is \n+accessed via @dfn{gp-relative} relocations.  When @option{-msmall-data}\n+is used, objects 8 bytes long or smaller are placed in a @dfn{small data area}\n+(the @code{.sdata} and @code{.sbss} sections) and are accessed via\n+16-bit relocations off of the @code{$gp} register.  This limits the\n+size of the small data area to 64KB, but allows the variables to be\n+directly accessed via a single instruction.\n+\n+The default is @option{-mlarge-data}.  With this option the data area\n+is limited to just below 2GB.  Programs that require more than 2GB of\n+data must use @code{malloc} or @code{mmap} to allocate the data in the\n+heap instead of in the program's data segment.\n+\n+When generating code for shared libraries, @option{-fpic} implies\n+@option{-msmall-data} and @option{-fPIC} implies @option{-mlarge-data}.\n+\n @item -mcpu=@var{cpu_type}\n @opindex mcpu\n-Set the instruction set, register set, and instruction scheduling\n-parameters for machine type @var{cpu_type}.  You can specify either the\n-@samp{EV} style name or the corresponding chip number.  GCC\n-supports scheduling parameters for the EV4 and EV5 family of processors\n-and will choose the default values for the instruction set from\n-the processor you specify.  If you do not specify a processor type,\n-GCC will default to the processor on which the compiler was built.\n+Set the instruction set and instruction scheduling parameters for\n+machine type @var{cpu_type}.  You can specify either the @samp{EV}\n+style name or the corresponding chip number.  GCC supports scheduling\n+parameters for the EV4, EV5 and EV6 family of processors and will\n+choose the default values for the instruction set from the processor\n+you specify.  If you do not specify a processor type, GCC will default\n+to the processor on which the compiler was built.\n \n Supported values for @var{cpu_type} are\n \n @table @samp\n @item ev4\n+@item ev45\n @itemx 21064\n Schedules as an EV4 and has no instruction set extensions.\n \n@@ -8464,10 +8509,18 @@ Schedules as an EV5 and supports the BWX and MAX extensions.\n \n @item ev6\n @itemx 21264\n-Schedules as an EV5 (until Digital releases the scheduling parameters\n-for the EV6) and supports the BWX, CIX, and MAX extensions.\n+Schedules as an EV6 and supports the BWX, FIX, and MAX extensions.\n+\n+@item ev67\n+@item 21264a\n+Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX extensions.\n @end table\n \n+@item -mtune=@var{cpu_type}\n+@opindex mtune\n+Set only the instruction scheduling parameters for machine type\n+@var{cpu_type}.  The instruction set is not changed.\n+\n @item -mmemory-latency=@var{time}\n @opindex mmemory-latency\n Sets the latency the scheduler should assume for typical memory"}]}