{"sha": "fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4YmE4Yjg0Y2Y0ZjFjYWY1ODFiMDlkODA4ZDZlNTdiMWZmMjg0Mw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-06-13T09:46:00Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-06-13T09:46:00Z"}, "message": "Revamp value_range::may_contain_p.\n\nFrom-SVN: r272238", "tree": {"sha": "974fdf46b52abb2f7b4de4981329e8f625215904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/974fdf46b52abb2f7b4de4981329e8f625215904"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7b183bf22c7c57fc0d8851f84db6fff694ba5f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b183bf22c7c57fc0d8851f84db6fff694ba5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b183bf22c7c57fc0d8851f84db6fff694ba5f8"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "f97ee51b5232071b8a26e45bcd8af624ede2afa5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "patch": "@@ -1,3 +1,17 @@\n+2019-06-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-loop-versioning.cc (prune_loop_conditions): Use\n+\tmay_contain_p.\n+\t* tree-vrp (value_range_base::may_contain_p): Call into\n+\tvalue_inside_range.\n+\t(value_inside_range): Make private inside value_range_base class.\n+\tTake min/max from *this.\n+\t(range_includes_p): Remove.\n+\t* tree-vrp.h (value_range_base): Add value_inside_range.\n+\t(range_includes_p): Remove.\n+\t(range_includes_zero_p): Call may_contain_p.\n+\t* vr-values.c (compare_range_with_value): Same.\n+\n 2019-06-13  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* doc/extend.texi (ARC Function Attributes): Update info."}, {"sha": "fe2730014234ce15e8ee0bb011b69269d04c62cf", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "patch": "@@ -1488,7 +1488,7 @@ loop_versioning::prune_loop_conditions (struct loop *loop, vr_values *vrs)\n     {\n       tree name = ssa_name (i);\n       value_range *vr = vrs->get_value_range (name);\n-      if (vr && !range_includes_p (vr, 1))\n+      if (vr && !vr->may_contain_p (build_one_cst (TREE_TYPE (name))))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, find_loop_location (loop),"}, {"sha": "dc7f825efc89da72b085d97d7e201854ddcda0f8", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "patch": "@@ -287,18 +287,7 @@ value_range::set_varying ()\n bool\n value_range_base::may_contain_p (tree val) const\n {\n-  if (varying_p ())\n-    return true;\n-\n-  if (undefined_p ())\n-    return true;\n-\n-  if (m_kind == VR_ANTI_RANGE)\n-    {\n-      int res = value_inside_range (val, min (), max ());\n-      return res == 0 || res == -2;\n-    }\n-  return value_inside_range (val, min (), max ()) != 0;\n+  return value_inside_range (val) != 0;\n }\n \n void\n@@ -1118,40 +1107,38 @@ compare_values (tree val1, tree val2)\n }\n \n \n-/* Return 1 if VAL is inside value range MIN <= VAL <= MAX,\n-          0 if VAL is not inside [MIN, MAX],\n+/* Return 1 if VAL is inside value range.\n+          0 if VAL is not inside value range.\n \t -2 if we cannot tell either way.\n \n    Benchmark compile/20001226-1.c compilation time after changing this\n    function.  */\n \n int\n-value_inside_range (tree val, tree min, tree max)\n+value_range_base::value_inside_range (tree val) const\n {\n   int cmp1, cmp2;\n \n-  cmp1 = operand_less_p (val, min);\n+  if (varying_p ())\n+    return 1;\n+\n+  if (undefined_p ())\n+    return 0;\n+\n+  cmp1 = operand_less_p (val, m_min);\n   if (cmp1 == -2)\n     return -2;\n   if (cmp1 == 1)\n-    return 0;\n+    return m_kind != VR_RANGE;\n \n-  cmp2 = operand_less_p (max, val);\n+  cmp2 = operand_less_p (m_max, val);\n   if (cmp2 == -2)\n     return -2;\n \n-  return !cmp2;\n-}\n-\n-\n-/* Return TRUE if *VR includes the value X.  */\n-\n-bool\n-range_includes_p (const value_range_base *vr, HOST_WIDE_INT x)\n-{\n-  if (vr->varying_p () || vr->undefined_p ())\n-    return true;\n-  return vr->may_contain_p (build_int_cst (vr->type (), x));\n+  if (m_kind == VR_RANGE)\n+    return !cmp2;\n+  else\n+    return !!cmp2;\n }\n \n /* Value range wrapper for wide_int_range_set_zero_nonzero_bits."}, {"sha": "4ec974f5fdb1b6dbd57e8e3a7aae687e31f0a338", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "patch": "@@ -97,6 +97,9 @@ class GTY((for_user)) value_range_base\n   friend void gt_ggc_mx (value_range_base *&);\n   friend void gt_pch_nx (value_range_base &);\n   friend void gt_pch_nx (value_range_base *, gt_pointer_operator, void *);\n+\n+private:\n+  int value_inside_range (tree) const;\n };\n \n /* Note value_range cannot currently be used with GC memory, only\n@@ -254,7 +257,6 @@ struct assert_info\n extern void register_edge_assert_for (tree, edge, enum tree_code,\n \t\t\t\t      tree, tree, vec<assert_info> &);\n extern bool stmt_interesting_for_vrp (gimple *);\n-extern bool range_includes_p (const value_range_base *, HOST_WIDE_INT);\n extern bool infer_value_range (gimple *, tree, tree_code *, tree *);\n \n extern bool vrp_bitmap_equal_p (const_bitmap, const_bitmap);\n@@ -267,7 +269,6 @@ extern int compare_values_warnv (tree, tree, bool *);\n extern int operand_less_p (tree, tree);\n extern bool vrp_val_is_min (const_tree);\n extern bool vrp_val_is_max (const_tree);\n-extern int value_inside_range (tree, tree, tree);\n \n extern tree vrp_val_min (const_tree);\n extern tree vrp_val_max (const_tree);\n@@ -300,7 +301,13 @@ extern value_range_kind determine_value_range (tree, wide_int *, wide_int *);\n inline bool\n range_includes_zero_p (const value_range_base *vr)\n {\n-  return range_includes_p (vr, 0);\n+  if (vr->undefined_p ())\n+    return false;\n+\n+  if (vr->varying_p ())\n+    return true;\n+\n+  return vr->may_contain_p (build_zero_cst (vr->type ()));\n }\n \n #endif /* GCC_TREE_VRP_H */"}, {"sha": "3f20c1a6fe870a871e39f9b30460d38a1cab0efe", "filename": "gcc/vr-values.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=fa8ba8b84cf4f1caf581b09d808d6e57b1ff2843", "patch": "@@ -1625,7 +1625,7 @@ compare_range_with_value (enum tree_code comp, value_range *vr, tree val,\n \treturn NULL_TREE;\n \n       /* ~[VAL_1, VAL_2] OP VAL is known if VAL_1 <= VAL <= VAL_2.  */\n-      if (value_inside_range (val, vr->min (), vr->max ()) == 1)\n+      if (!vr->may_contain_p (val))\n \treturn (comp == NE_EXPR) ? boolean_true_node : boolean_false_node;\n \n       return NULL_TREE;"}]}