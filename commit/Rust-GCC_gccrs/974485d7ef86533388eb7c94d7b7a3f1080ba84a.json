{"sha": "974485d7ef86533388eb7c94d7b7a3f1080ba84a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0NDg1ZDdlZjg2NTMzMzg4ZWI3Yzk0ZDdiN2EzZjEwODBiYTg0YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-30T14:52:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-30T14:52:38Z"}, "message": "i386.c (legitimize_tls_address): Generate tls_initial_exec_64_sun only when !TARGET_X32.\n\n\t* config/i386/i386.c (legitimize_tls_address) <TLS_MODEL_INITIAL_EXEC>:\n\tGenerate tls_initial_exec_64_sun only when !TARGET_X32.\n\nFrom-SVN: r188022", "tree": {"sha": "9331d34b493450d1d54d82fe90afd871279e5401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9331d34b493450d1d54d82fe90afd871279e5401"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974485d7ef86533388eb7c94d7b7a3f1080ba84a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974485d7ef86533388eb7c94d7b7a3f1080ba84a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974485d7ef86533388eb7c94d7b7a3f1080ba84a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974485d7ef86533388eb7c94d7b7a3f1080ba84a/comments", "author": null, "committer": null, "parents": [{"sha": "4bbbcbf6f5bd5a9ec85f8f574b283a8c7f97ea63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbbcbf6f5bd5a9ec85f8f574b283a8c7f97ea63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbbcbf6f5bd5a9ec85f8f574b283a8c7f97ea63"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "fe9860ffb6d17a09c7db45e4a9cc4fd161d315fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974485d7ef86533388eb7c94d7b7a3f1080ba84a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974485d7ef86533388eb7c94d7b7a3f1080ba84a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=974485d7ef86533388eb7c94d7b7a3f1080ba84a", "patch": "@@ -1,3 +1,8 @@\n+2012-05-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (legitimize_tls_address) <TLS_MODEL_INITIAL_EXEC>:\n+\tGenerate tls_initial_exec_64_sun only when !TARGET_X32.\n+\n 2012-05-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/53501\n@@ -169,23 +174,21 @@\n \n 2012-05-29  Georg-Johann Lay  <avr@gjlay.de>\n \n-\t* config/avr/t-avr (s-avr-mmcu-texi): Call \n+\t* config/avr/t-avr (s-avr-mmcu-texi): Call\n \tgen-avr-mmcu-texi$(build_exeext) via ./ and don't assume . is in PATH.\n-\t\n+\n 2012-05-29  Michael Matz  <matz@suse.de>\n \n \t* rtl.h (assign_stack_temp, assign_stack_temp_for_type,\n \tassign_temp): Remove 'keep' argument.\n \t(mark_temp_addr_taken): Remove prototype.\n \t* tree.h (expand_decl): Remove prototype.\n-\t* function.c (struct temp_slot): Remove addr_taken and keep\n-\tmember.\n+\t* function.c (struct temp_slot): Remove addr_taken and keep member.\n \t(assign_stack_temp_for_type) Don't initialize above, remove\n \tkeep argument.\n \t(assign_stack_temp, assign_temp): Remove keep argument.\n \t(mark_temp_addr_taken): Remove.\n-\t(preserve_temp_slots): Remove handling of addr_taken and keep\n-\tmembers.\n+\t(preserve_temp_slots): Remove handling of addr_taken and keep members.\n \t(free_temp_slots): Ditto.\n \t* expr.c (expand_expr_real_1 <COMPOUND_LITERAL_EXPR>): Remove\n \tdead code.\n@@ -231,7 +234,7 @@\n \t* expr.c (expand_expr_real_1 <normal_inner_ref>): Don't allocate\n \ta kept temp.\n \t(expand_expr_real_1 <COMPOUND_LITERAL_EXPR>): Make unreachable.\n-\t* gimple-fold.c (canonicalize_constructor_val): Canonicalize \n+\t* gimple-fold.c (canonicalize_constructor_val): Canonicalize\n \tCOMPOUND_LITERAL_EXPR.\n \t* function.c (expand_function_start): Don't call expand_decl,\n \tinstead assert that we have RTL assigned.\n@@ -415,8 +418,7 @@\n \tPR middle-end/53510\n \t* input.c (read_line): Use XRESIZEVEC instead of XNEWVEC\n \tto avoid leaking memory.  No need to handle memory allocation\n-\tfailure.  Double string_len on each reallocation instead of\n-\tadding 2.\n+\tfailure.  Double string_len on each reallocation instead of adding 2.\n \t* gcov.c (read_line): Likewise.\n \n 2012-05-29  Hans-Peter Nilsson  <hp@axis.com>\n@@ -435,8 +437,7 @@\n \n 2012-05-28  Hans-Peter Nilsson  <hp@axis.com>\n \n-\t* doc/md.texi (stack_protect_test): Remove negation of branch to\n-\tlabel.\n+\t* doc/md.texi (stack_protect_test): Remove negation of branch to label.\n \t(Standard Names): Fix typos in documentation of atomic patterns.\n \n 2012-05-27  Nathan Sidwell  <nathan@acm.org>"}, {"sha": "4c680953a7fa6329a872ef91332a52b0b6a04663", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974485d7ef86533388eb7c94d7b7a3f1080ba84a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974485d7ef86533388eb7c94d7b7a3f1080ba84a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=974485d7ef86533388eb7c94d7b7a3f1080ba84a", "patch": "@@ -12810,13 +12810,13 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n     case TLS_MODEL_INITIAL_EXEC:\n       if (TARGET_64BIT)\n \t{\n-\t  if (TARGET_SUN_TLS)\n+\t  if (TARGET_SUN_TLS && !TARGET_X32)\n \t    {\n \t      /* The Sun linker took the AMD64 TLS spec literally\n \t\t and can only handle %rax as destination of the\n \t\t initial executable code sequence.  */\n \n-\t      dest = gen_reg_rtx (Pmode);\n+\t      dest = gen_reg_rtx (DImode);\n \t      emit_insn (gen_tls_initial_exec_64_sun (dest, x));\n \t      return dest;\n \t    }"}]}