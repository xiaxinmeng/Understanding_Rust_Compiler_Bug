{"sha": "df0785d62cdc5d01d863b1c2d7814d9c7f2c3457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwNzg1ZDYyY2RjNWQwMWQ4NjNiMWMyZDc4MTRkOWM3ZjJjMzQ1Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-04-08T14:46:05Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-04-08T14:46:05Z"}, "message": "builtins.c (fold_builtin_isascii, [...]): New.\n\n\t* builtins.c (fold_builtin_isascii, fold_builtin_toascii): New.\n\t(fold_builtin): Handle BUILT_IN_ISASCII and BUILT_IN_TOASCII.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-ctype-2.c: New test.\n\nFrom-SVN: r80508", "tree": {"sha": "58cb8f84e8640837503a48120b7778dc2f40a944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58cb8f84e8640837503a48120b7778dc2f40a944"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/comments", "author": null, "committer": null, "parents": [{"sha": "a7485e9375687b897612280a3a33d45542783f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7485e9375687b897612280a3a33d45542783f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7485e9375687b897612280a3a33d45542783f6c"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "e2c2f7b71e4367f2924a31b8e12ed108aaf7c6eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df0785d62cdc5d01d863b1c2d7814d9c7f2c3457", "patch": "@@ -1,3 +1,8 @@\n+2004-04-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_isascii, fold_builtin_toascii): New.\n+\t(fold_builtin): Handle BUILT_IN_ISASCII and BUILT_IN_TOASCII.\n+\n 2004-04-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/ia64/ia64.c (ia64_encode_section_info): Don't prod"}, {"sha": "655dd2503952fdf9ff93e051c9cdbf3f243b6fb4", "filename": "gcc/builtins.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=df0785d62cdc5d01d863b1c2d7814d9c7f2c3457", "patch": "@@ -6742,6 +6742,43 @@ fold_builtin_signbit (tree exp)\n   return NULL_TREE;\n }\n \n+/* Fold a call to builtin isascii.  */\n+\n+static tree\n+fold_builtin_isascii (tree arglist)\n+{\n+  if (! validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+  else\n+    {\n+      /* Transform isascii(c) -> ((c & ~0x7f) == 0).  */\n+      tree arg = TREE_VALUE (arglist);\n+      \n+      return fold (build (EQ_EXPR, integer_type_node,\n+\t\t\t  build (BIT_AND_EXPR, integer_type_node, arg,\n+\t\t\t\t build_int_2 (~ (unsigned HOST_WIDE_INT) 0x7f,\n+\t\t\t\t\t      ~ (HOST_WIDE_INT) 0)),\n+\t\t\t  integer_zero_node));\n+    }\n+}\n+\n+/* Fold a call to builtin toascii.  */\n+\n+static tree\n+fold_builtin_toascii (tree arglist)\n+{\n+  if (! validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+  else\n+    {\n+      /* Transform toascii(c) -> (c & 0x7f).  */\n+      tree arg = TREE_VALUE (arglist);\n+      \n+      return fold (build (BIT_AND_EXPR, integer_type_node, arg,\n+\t\t\t  build_int_2 (0x7f, 0)));\n+    }\n+}\n+\n \n /* Used by constant folding to eliminate some builtin calls early.  EXP is\n    the CALL_EXPR of a call to a builtin function.  */\n@@ -7236,6 +7273,12 @@ fold_builtin (tree exp)\n     case BUILT_IN_SIGNBITL:\n       return fold_builtin_signbit (exp);\n \n+    case BUILT_IN_ISASCII:\n+      return fold_builtin_isascii (arglist);\n+\n+    case BUILT_IN_TOASCII:\n+      return fold_builtin_toascii (arglist);\n+\n     default:\n       break;\n     }"}, {"sha": "d0aa28f22b9202776558fcd01ccb16f035b5d4a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df0785d62cdc5d01d863b1c2d7814d9c7f2c3457", "patch": "@@ -1,3 +1,7 @@\n+2004-04-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-ctype-2.c: New test.\n+\n 2004-04-07  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* gcc.dg/pch/pch.exp: Add largefile test."}, {"sha": "a306bcc9daebb054ba0508f4fe5fe47224523884", "filename": "gcc/testsuite/gcc.dg/torture/builtin-ctype-2.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0785d62cdc5d01d863b1c2d7814d9c7f2c3457/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-2.c?ref=df0785d62cdc5d01d863b1c2d7814d9c7f2c3457", "patch": "@@ -0,0 +1,84 @@\n+/* Copyright (C) 2004  Free Software Foundation.\n+\n+   Verify that built-in ctype transformations are done correctly by\n+   the compiler.\n+\n+   Written by Kaveh Ghazi, 2004-04-05.  */\n+\n+/* { dg-do link } */\n+\n+extern void link_failure_var(void);\n+\n+void test(int i)\n+{\n+  /* All of these ctype calls should compile-time evaluate to true.  */\n+#define TEST_CTYPE_CST_TRUE(FN, VALUE) \\\n+  extern void link_failure_##FN##_cst_true(void); \\\n+  extern int FN(int); \\\n+  if (! FN(VALUE)) \\\n+    link_failure_##FN##_cst_true()\n+\n+  /* All of these ctype calls should compile-time evaluate to false.  */\n+#define TEST_CTYPE_CST_FALSE(FN, VALUE) \\\n+  extern void link_failure_##FN##_cst_false(void); \\\n+  extern int FN(int); \\\n+  if (FN(VALUE)) \\\n+    link_failure_##FN##_cst_false()\n+  \n+  /* All of these ctype calls should compile-time evaluate to true.  */\n+#define TEST_TOCTYPE_CST_TRUE(FN, VALUE) \\\n+  extern void link_failure_##FN##_cst_true(void); \\\n+  extern int FN(int); \\\n+  if (FN(VALUE) != (VALUE)) \\\n+    link_failure_##FN##_cst_true()\n+\n+  /* All of these ctype calls should compile-time evaluate to false.  */\n+#define TEST_TOCTYPE_CST_FALSE(FN, VALUE) \\\n+  extern void link_failure_##FN##_cst_false(void); \\\n+  extern int FN(int); \\\n+  if (FN(VALUE) == (VALUE)) \\\n+    link_failure_##FN##_cst_false()\n+  \n+#ifdef __OPTIMIZE__\n+  TEST_CTYPE_CST_TRUE (isascii, 0);\n+  TEST_CTYPE_CST_TRUE (isascii, 1);\n+  TEST_CTYPE_CST_TRUE (isascii, 126);\n+  TEST_CTYPE_CST_TRUE (isascii, 127);\n+\n+  TEST_CTYPE_CST_FALSE (isascii, -1);\n+  TEST_CTYPE_CST_FALSE (isascii, 128);\n+  TEST_CTYPE_CST_FALSE (isascii, 129);\n+  TEST_CTYPE_CST_FALSE (isascii, 255);\n+  TEST_CTYPE_CST_FALSE (isascii, 256);\n+  TEST_CTYPE_CST_FALSE (isascii, 257);\n+  TEST_CTYPE_CST_FALSE (isascii, 10000);\n+  TEST_CTYPE_CST_FALSE (isascii, __INT_MAX__);\n+  \n+  /* This ctype call should transform into another expression.  */\n+  if (isascii(i) != ((i & ~0x7f) == 0))\n+    link_failure_var();\n+\n+  TEST_TOCTYPE_CST_TRUE (toascii, 0);\n+  TEST_TOCTYPE_CST_TRUE (toascii, 1);\n+  TEST_TOCTYPE_CST_TRUE (toascii, 126);\n+  TEST_TOCTYPE_CST_TRUE (toascii, 127);\n+\n+  TEST_TOCTYPE_CST_FALSE (toascii, -1);\n+  TEST_TOCTYPE_CST_FALSE (toascii, 128);\n+  TEST_TOCTYPE_CST_FALSE (toascii, 129);\n+  TEST_TOCTYPE_CST_FALSE (toascii, 255);\n+  TEST_TOCTYPE_CST_FALSE (toascii, 256);\n+  TEST_TOCTYPE_CST_FALSE (toascii, 10000);\n+  TEST_TOCTYPE_CST_FALSE (toascii, __INT_MAX__);\n+\n+  /* This ctype call should transform into another expression.  */\n+  if (toascii(i) != (i & 0x7f))\n+    link_failure_var();\n+\n+#endif /* __OPTIMIZE__ */\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}"}]}