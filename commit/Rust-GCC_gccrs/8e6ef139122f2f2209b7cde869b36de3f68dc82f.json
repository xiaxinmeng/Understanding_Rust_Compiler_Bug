{"sha": "8e6ef139122f2f2209b7cde869b36de3f68dc82f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2ZWYxMzkxMjJmMmYyMjA5YjdjZGU4NjliMzZkZTNmNjhkYzgyZg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T05:24:14Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T05:24:14Z"}, "message": "cfgloop.c (alloc_loop): Initialize loop->single_iv.\n\n2009-10-22  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* cfgloop.c (alloc_loop): Initialize loop->single_iv.\n\t* cfgloop.h (struct loop): New field single_iv.\n\n\t* graphite-clast-to-gimple.c (pbb_to_depth_to_oldiv): Do not use\n\tloop->aux anymore: use loop->single_iv.\n\t(graphite_loop_normal_form): Moved...\n\t(build_graphite_loop_normal_form): Removed.\n\t(gloog): Do not call build_graphite_loop_normal_form.\n\t(free_aux_in_new_loops): Moved...\n\t(mark_loops_parallel): Restructure.\n\t* graphite-clast-to-gimple.h (free_aux_in_new_loops): Do not declare.\n\t* graphite-sese-to-poly.c (graphite_loop_normal_form): ...here.\n\t(scop_canonicalize_loops): New.\n\t(build_poly_scop): Call scop_canonicalize_loops.\n\t* graphite.c (free_aux_in_new_loops): ...here.\n\nFrom-SVN: r154624", "tree": {"sha": "43aa80487a924b18f9032cc266bc872122717ff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43aa80487a924b18f9032cc266bc872122717ff4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e6ef139122f2f2209b7cde869b36de3f68dc82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6ef139122f2f2209b7cde869b36de3f68dc82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6ef139122f2f2209b7cde869b36de3f68dc82f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6ef139122f2f2209b7cde869b36de3f68dc82f/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6dd91b2baa1f73acdd1d6063abe18d3a6942b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6dd91b2baa1f73acdd1d6063abe18d3a6942b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6dd91b2baa1f73acdd1d6063abe18d3a6942b0d"}], "stats": {"total": 159, "additions": 88, "deletions": 71}, "files": [{"sha": "a4f2ed066237ba8da8f3408d7138d09916c38370", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=8e6ef139122f2f2209b7cde869b36de3f68dc82f", "patch": "@@ -1,3 +1,21 @@\n+2009-10-22  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* cfgloop.c (alloc_loop): Initialize loop->single_iv.\n+\t* cfgloop.h (struct loop): New field single_iv.\n+\n+\t* graphite-clast-to-gimple.c (pbb_to_depth_to_oldiv): Do not use\n+\tloop->aux anymore: use loop->single_iv.\n+\t(graphite_loop_normal_form): Moved...\n+\t(build_graphite_loop_normal_form): Removed.\n+\t(gloog): Do not call build_graphite_loop_normal_form.\n+\t(free_aux_in_new_loops): Moved...\n+\t(mark_loops_parallel): Restructure.\n+\t* graphite-clast-to-gimple.h (free_aux_in_new_loops): Do not declare.\n+\t* graphite-sese-to-poly.c (graphite_loop_normal_form): ...here.\n+\t(scop_canonicalize_loops): New.\n+\t(build_poly_scop): Call scop_canonicalize_loops.\n+\t* graphite.c (free_aux_in_new_loops): ...here.\n+\n 2009-10-22  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* g++.dg/graphite/graphite.exp: Add the same rules as in"}, {"sha": "0f6e797329cab4feac0cc04071bc78dc45ea739d", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=8e6ef139122f2f2209b7cde869b36de3f68dc82f", "patch": "@@ -339,6 +339,7 @@ alloc_loop (void)\n   loop->exits = GGC_CNEW (struct loop_exit);\n   loop->exits->next = loop->exits->prev = loop->exits;\n   loop->can_be_parallel = false;\n+  loop->single_iv = NULL_TREE;\n \n   return loop;\n }"}, {"sha": "764520711fdefb1fc599328deb465fa68399804a", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=8e6ef139122f2f2209b7cde869b36de3f68dc82f", "patch": "@@ -160,6 +160,10 @@ struct GTY ((chain_next (\"%h.next\"))) loop {\n \n   /* True if the loop can be parallel.  */\n   bool can_be_parallel;\n+\n+  /* The single induction variable of the loop when the loop is in\n+     normal form.  */\n+  tree single_iv;\n };\n \n /* Flags for state of loop structure.  */"}, {"sha": "693e61c2a43caa6a619d9fb0ddec0b2caa20d17d", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 9, "deletions": 70, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=8e6ef139122f2f2209b7cde869b36de3f68dc82f", "patch": "@@ -76,7 +76,7 @@ pbb_to_depth_to_oldiv (poly_bb_p pbb, int depth)\n   sese region = SCOP_REGION (PBB_SCOP (pbb));\n   loop_p loop = gbb_loop_at_index (gbb, region, depth);\n \n-  return (tree) loop->aux;\n+  return loop->single_iv;\n }\n \n /* For a given scattering dimension, return the new induction variable\n@@ -1109,43 +1109,6 @@ debug_generated_program (scop_p scop)\n   print_generated_program (stderr, scop);\n }\n \n-/* A LOOP is in normal form for Graphite when it contains only one\n-   scalar phi node that defines the main induction variable of the\n-   loop, only one increment of the IV, and only one exit condition.  */\n-\n-static void\n-graphite_loop_normal_form (loop_p loop)\n-{\n-  struct tree_niter_desc niter;\n-  tree nit;\n-  gimple_seq stmts;\n-  edge exit = single_dom_exit (loop);\n-\n-  bool known_niter = number_of_iterations_exit (loop, exit, &niter, false);\n-\n-  /* At this point we should know the number of iterations,  */\n-  gcc_assert (known_niter);\n-\n-  nit = force_gimple_operand (unshare_expr (niter.niter), &stmts, true,\n-\t\t\t      NULL_TREE);\n-  if (stmts)\n-    gsi_insert_seq_on_edge_immediate (loop_preheader_edge (loop), stmts);\n-\n-  loop->aux = canonicalize_loop_ivs (loop, &nit);\n-}\n-\n-/* Converts REGION to loop normal form: one induction variable per loop.  */\n-\n-static void\n-build_graphite_loop_normal_form (sese region)\n-{\n-  int i;\n-  loop_p loop;\n-\n-  for (i = 0; VEC_iterate (loop_p, SESE_LOOP_NEST (region), i, loop); i++)\n-    graphite_loop_normal_form (loop);\n-}\n-\n /* GIMPLE Loop Generator: generates loops from STMT in GIMPLE form for\n    the given SCOP.  Return true if code generation succeeded.\n    BB_PBB_MAPPING is a basic_block and it's related poly_bb_p mapping.\n@@ -1173,7 +1136,6 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n       fprintf (dump_file, \"\\n\");\n     }\n \n-  build_graphite_loop_normal_form (region);\n   recompute_all_dominators ();\n   graphite_verify ();\n \n@@ -1234,23 +1196,6 @@ find_pbb_via_hash (htab_t bb_pbb_mapping, basic_block bb)\n   return NULL;\n }\n \n-/* Free loop->aux in newly created loops by translate_clast.  */\n-\n-void\n-free_aux_in_new_loops (void)\n-{\n-  loop_p loop;\n-  loop_iterator li;\n-\n-  FOR_EACH_LOOP (li, loop, 0)\n-    {\n-      if (!loop->aux)\n-\tcontinue;\n-      free(loop->aux);\n-      loop->aux = NULL;\n-    }\n-}\n-\n /* Check data dependency in LOOP. BB_PBB_MAPPING is a basic_block and\n    it's related poly_bb_p mapping.\n */\n@@ -1302,22 +1247,16 @@ void mark_loops_parallel (htab_t bb_pbb_mapping)\n   int num_no_dependency = 0;\n \n   FOR_EACH_LOOP (li, loop, 0)\n-    {\n-      if (!loop->aux)\n-\tcontinue;\n-\n-      if (!dependency_in_loop_p (loop, bb_pbb_mapping))\n-\t{\n-\t  loop->can_be_parallel = true;\n-\t  num_no_dependency++;\n-\t}\n-    }\n+    if (loop->aux\n+\t&& !dependency_in_loop_p (loop, bb_pbb_mapping))\n+      {\n+\tloop->can_be_parallel = true;\n+\tnum_no_dependency++;\n+      }\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    {\n-      fprintf (dump_file, \"\\n%d loops carried no dependency.\\n\",\n-\t       num_no_dependency);\n-    }\n+    fprintf (dump_file, \"\\n%d loops carried no dependency.\\n\",\n+\t     num_no_dependency);\n }\n \n #endif"}, {"sha": "3f25872b61b9b046e9ef1e28eb2ae722ba141256", "filename": "gcc/graphite-clast-to-gimple.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fgraphite-clast-to-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fgraphite-clast-to-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.h?ref=8e6ef139122f2f2209b7cde869b36de3f68dc82f", "patch": "@@ -42,7 +42,6 @@ extern void debug_clast_stmt (struct clast_stmt *);\n extern void print_clast_stmt (FILE *, struct clast_stmt *);\n extern void debug_clast_name_indexes (htab_t);\n extern void mark_loops_parallel (htab_t);\n-extern void free_aux_in_new_loops (void);\n \n /* Hash function for data base element BB_PBB.  */\n "}, {"sha": "8adffce20c302446e5a8a2e51f6ac7d59014288e", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=8e6ef139122f2f2209b7cde869b36de3f68dc82f", "patch": "@@ -2822,6 +2822,45 @@ rewrite_commutative_reductions_out_of_ssa (sese region, sbitmap reductions)\n #endif\n }\n \n+/* A LOOP is in normal form for Graphite when it contains only one\n+   scalar phi node that defines the main induction variable of the\n+   loop, only one increment of the IV, and only one exit condition.  */\n+\n+static void\n+graphite_loop_normal_form (loop_p loop)\n+{\n+  struct tree_niter_desc niter;\n+  tree nit;\n+  gimple_seq stmts;\n+  edge exit = single_dom_exit (loop);\n+\n+  bool known_niter = number_of_iterations_exit (loop, exit, &niter, false);\n+\n+  /* At this point we should know the number of iterations,  */\n+  gcc_assert (known_niter);\n+\n+  nit = force_gimple_operand (unshare_expr (niter.niter), &stmts, true,\n+\t\t\t      NULL_TREE);\n+  if (stmts)\n+    gsi_insert_seq_on_edge_immediate (loop_preheader_edge (loop), stmts);\n+\n+  loop->single_iv = canonicalize_loop_ivs (loop, &nit);\n+}\n+\n+/* Rewrite all the loops of SCOP in normal form: one induction\n+   variable per loop.  */\n+\n+static void\n+scop_canonicalize_loops (scop_p scop)\n+{\n+  loop_iterator li;\n+  loop_p loop;\n+\n+  FOR_EACH_LOOP (li, loop, 0)\n+    if (loop_in_sese_p (loop, SCOP_REGION (scop)))\n+      graphite_loop_normal_form (loop);\n+}\n+\n /* Builds the polyhedral representation for a SESE region.  */\n \n bool\n@@ -2843,6 +2882,7 @@ build_poly_scop (scop_p scop)\n   if (nb_pbbs_in_loops (scop) == 0)\n     return false;\n \n+  scop_canonicalize_loops (scop);\n   build_sese_loop_nests (region);\n   build_sese_conditions (region);\n   find_scop_parameters (scop);"}, {"sha": "291a1fea4b53202186d836441a48cd1bc179bf27", "filename": "gcc/graphite.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6ef139122f2f2209b7cde869b36de3f68dc82f/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=8e6ef139122f2f2209b7cde869b36de3f68dc82f", "patch": "@@ -220,6 +220,22 @@ graphite_initialize (void)\n   return true;\n }\n \n+/* Free loop->aux in newly created loops by translate_clast.  */\n+\n+static void\n+free_aux_in_new_loops (void)\n+{\n+  loop_p loop;\n+  loop_iterator li;\n+\n+  FOR_EACH_LOOP (li, loop, 0)\n+    if (loop->aux)\n+      {\n+\tfree (loop->aux);\n+\tloop->aux = NULL;\n+      }\n+}\n+\n /* Finalize graphite: perform CFG cleanup when NEED_CFG_CLEANUP_P is\n    true.  */\n "}]}