{"sha": "9aa433c2945d1f8d62961452bcd4e07f509815a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhNDMzYzI5NDVkMWY4ZDYyOTYxNDUyYmNkNGUwN2Y1MDk4MTVhOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-07-19T16:19:27Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-07-19T16:19:27Z"}, "message": "gfortran.h (protected): Remove macro.\n\n\t* gfortran.h (protected): Remove macro.\n\t* dump-parse-tree.c (show_attr): Avoid C++ keywords.\n\t* expr.c (gfc_check_pointer_assign): Likewise.\n\t* interface.c (compare_parameter_protected): Likewise.\n\t* intrinsic.c (enum class, add_sym, add_sym_0, add_sym_1,\n\tadd_sym_1s, add_sym_1m, add_sym_2, add_sym_2s, add_sym_3,\n\tadd_sym_3ml, add_sym_3red, add_sym_3s, add_sym_4, add_sym_4s,\n\tadd_sym_5s): Likewise.\n\t* match.c (gfc_match_assignment, gfc_match_pointer_assignment):\n\tLikewise.\n\t* module.c (mio_symbol_attribute): Likewise.\n\t* primary.c (match_variable): Likewise.\n\t* resolve.c (resolve_equivalence): Likewise.\n\t* symbol.c (check_conflict, gfc_add_protected, gfc_copy_attr):\n\tLikewise.\n\t* trans-types.c (gfc_get_array_type_bounds): Likewise.\n\nFrom-SVN: r137980", "tree": {"sha": "7d7fb856907100af0b4f166b9a15fe89516d27b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d7fb856907100af0b4f166b9a15fe89516d27b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa433c2945d1f8d62961452bcd4e07f509815a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa433c2945d1f8d62961452bcd4e07f509815a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa433c2945d1f8d62961452bcd4e07f509815a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa433c2945d1f8d62961452bcd4e07f509815a8/comments", "author": null, "committer": null, "parents": [{"sha": "ea471af0b8ecd3979665da8c74f120963254c5cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea471af0b8ecd3979665da8c74f120963254c5cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea471af0b8ecd3979665da8c74f120963254c5cd"}], "stats": {"total": 107, "additions": 62, "deletions": 45}, "files": [{"sha": "3f57c876e611937844a3172067de05aa0101053d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -1,3 +1,22 @@\n+2008-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gfortran.h (protected): Remove macro.\n+\t* dump-parse-tree.c (show_attr): Avoid C++ keywords.\n+\t* expr.c (gfc_check_pointer_assign): Likewise.\n+\t* interface.c (compare_parameter_protected): Likewise.\n+\t* intrinsic.c (enum class, add_sym, add_sym_0, add_sym_1,\n+\tadd_sym_1s, add_sym_1m, add_sym_2, add_sym_2s, add_sym_3,\n+\tadd_sym_3ml, add_sym_3red, add_sym_3s, add_sym_4, add_sym_4s,\n+\tadd_sym_5s): Likewise.\n+\t* match.c (gfc_match_assignment, gfc_match_pointer_assignment):\n+\tLikewise.\n+\t* module.c (mio_symbol_attribute): Likewise.\n+\t* primary.c (match_variable): Likewise.\n+\t* resolve.c (resolve_equivalence): Likewise.\n+\t* symbol.c (check_conflict, gfc_add_protected, gfc_copy_attr):\n+\tLikewise.\n+\t* trans-types.c (gfc_get_array_type_bounds): Likewise.\n+\n 2008-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* arith.c (eval_type_intrinsic0): Avoid C++ keywords."}, {"sha": "4ae61c6b0fa640984842ff04360687a3b4005a0f", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -570,7 +570,7 @@ show_attr (symbol_attribute *attr)\n     fputs (\" OPTIONAL\", dumpfile);\n   if (attr->pointer)\n     fputs (\" POINTER\", dumpfile);\n-  if (attr->protected)\n+  if (attr->is_protected)\n     fputs (\" PROTECTED\", dumpfile);\n   if (attr->value)\n     fputs (\" VALUE\", dumpfile);"}, {"sha": "d37950033e9d17f364630c187e4fb3c74d629dfb", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -3000,7 +3000,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       return FAILURE;\n     }\n \n-  if (attr.protected && attr.use_assoc)\n+  if (attr.is_protected && attr.use_assoc)\n     {\n       gfc_error (\"Pointer assigment target has PROTECTED \"\n \t\t \"attribute at %L\", &rvalue->where);"}, {"sha": "4cc8be2a73ac59347e912cfb5050b126a3d27bcd", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -627,8 +627,6 @@ typedef struct\n   ENUM_BITFIELD (save_state) save:2;\n \n   unsigned data:1,\t\t/* Symbol is named in a DATA statement.  */\n-    /* FIXME: This macro is temporary until we convert everything.  */\n-#define protected is_protected\n     is_protected:1,\t\t/* Symbol has been marked as protected.  */\n     use_assoc:1,\t\t/* Symbol has been use-associated.  */\n     use_only:1,\t\t\t/* Symbol has been use-associated, with ONLY.  */"}, {"sha": "147ded0471ced1b45bc07236b527f2293f02b115", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -1565,7 +1565,7 @@ compare_parameter_protected (gfc_symbol *formal, gfc_expr *actual)\n   if (actual->expr_type != EXPR_VARIABLE)\n     return 1;\n \n-  if (!actual->symtree->n.sym->attr.protected)\n+  if (!actual->symtree->n.sym->attr.is_protected)\n     return 1;\n \n   if (!actual->symtree->n.sym->attr.use_assoc)"}, {"sha": "db3237ebe367e1942a1461588be77205a0ab0daa", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -48,7 +48,7 @@ static enum\n { SZ_NOTHING = 0, SZ_SUBS, SZ_FUNCS, SZ_CONVS }\n sizing;\n \n-enum class\n+enum klass\n { NO_CLASS = 0, CLASS_ELEMENTAL, CLASS_INQUIRY, CLASS_TRANSFORMATIONAL };\n \n #define ACTUAL_NO\t0\n@@ -243,7 +243,7 @@ do_check (gfc_intrinsic_sym *specific, gfc_actual_arglist *arg)\n      ZABS ZCOS ZEXP ZLOG ZSIN ZSQRT.  */\n \n static void\n-add_sym (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type, int kind,\n+add_sym (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type, int kind,\n \t int standard, gfc_check_f check, gfc_simplify_f simplify,\n \t gfc_resolve_f resolve, ...)\n {\n@@ -332,7 +332,7 @@ add_sym (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type\n    0 arguments.  */\n \n static void\n-add_sym_0 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type,\n+add_sym_0 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t   int kind, int standard,\n \t   try (*check) (void),\n \t   gfc_expr *(*simplify) (void),\n@@ -374,7 +374,7 @@ add_sym_0s (const char *name, gfc_isym_id id, int standard, void (*resolve) (gfc\n    1 arguments.  */\n \n static void\n-add_sym_1 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type,\n+add_sym_1 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t   int kind, int standard,\n \t   try (*check) (gfc_expr *),\n \t   gfc_expr *(*simplify) (gfc_expr *),\n@@ -399,7 +399,7 @@ add_sym_1 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt ty\n    1 arguments.  */\n \n static void\n-add_sym_1s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind, int standard,\n+add_sym_1s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n \t    try (*check) (gfc_expr *),\n \t    gfc_expr *(*simplify) (gfc_expr *),\n \t    void (*resolve) (gfc_code *),\n@@ -423,7 +423,7 @@ add_sym_1s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind,\n    function.  MAX et al take 2 or more arguments.  */\n \n static void\n-add_sym_1m (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type,\n+add_sym_1m (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t    int kind, int standard,\n \t    try (*check) (gfc_actual_arglist *),\n \t    gfc_expr *(*simplify) (gfc_expr *),\n@@ -450,7 +450,7 @@ add_sym_1m (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt t\n    2 arguments.  */\n \n static void\n-add_sym_2 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type,\n+add_sym_2 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t   int kind, int standard,\n \t   try (*check) (gfc_expr *, gfc_expr *),\n \t   gfc_expr *(*simplify) (gfc_expr *, gfc_expr *),\n@@ -477,7 +477,7 @@ add_sym_2 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt ty\n    2 arguments.  */\n \n static void\n-add_sym_2s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind, int standard,\n+add_sym_2s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n \t    try (*check) (gfc_expr *, gfc_expr *),\n \t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *),\n \t    void (*resolve) (gfc_code *),\n@@ -503,7 +503,7 @@ add_sym_2s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind,\n    3 arguments.  */\n \n static void\n-add_sym_3 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type,\n+add_sym_3 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t   int kind, int standard,\n \t   try (*check) (gfc_expr *, gfc_expr *, gfc_expr *),\n \t   gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *),\n@@ -532,7 +532,7 @@ add_sym_3 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt ty\n    might have to be reordered.  */\n \n static void\n-add_sym_3ml (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type,\n+add_sym_3ml (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t     int kind, int standard,\n \t     try (*check) (gfc_actual_arglist *),\n \t     gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *),\n@@ -561,7 +561,7 @@ add_sym_3ml (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt\n    their argument also might have to be reordered.  */\n \n static void\n-add_sym_3red (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type,\n+add_sym_3red (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t      int kind, int standard,\n \t      try (*check) (gfc_actual_arglist *),\n \t      gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *),\n@@ -590,7 +590,7 @@ add_sym_3red (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt\n    3 arguments.  */\n \n static void\n-add_sym_3s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind, int standard,\n+add_sym_3s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n \t    try (*check) (gfc_expr *, gfc_expr *, gfc_expr *),\n \t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *),\n \t    void (*resolve) (gfc_code *),\n@@ -618,7 +618,7 @@ add_sym_3s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind,\n    4 arguments.  */\n \n static void\n-add_sym_4 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type,\n+add_sym_4 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t   int kind, int standard,\n \t   try (*check) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *),\n \t   gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *,\n@@ -651,7 +651,7 @@ add_sym_4 (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt ty\n    4 arguments.  */\n \n static void\n-add_sym_4s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind, int standard,\n+add_sym_4s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n \t    try (*check) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *),\n \t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t\t   gfc_expr *),\n@@ -682,7 +682,7 @@ add_sym_4s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind,\n    5 arguments.  */\n \n static void\n-add_sym_5s (const char *name, gfc_isym_id id, enum class cl, bt type, int kind, int standard,\n+add_sym_5s (const char *name, gfc_isym_id id, enum klass cl, bt type, int kind, int standard,\n \t    try (*check) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t  gfc_expr *),\n \t    gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *,"}, {"sha": "feaa2683f27d55229e11bb11050245bad7c8cd2b", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -1287,7 +1287,7 @@ gfc_match_assignment (void)\n       return MATCH_NO;\n     }\n \n-  if (lvalue->symtree->n.sym->attr.protected\n+  if (lvalue->symtree->n.sym->attr.is_protected\n       && lvalue->symtree->n.sym->attr.use_assoc)\n     {\n       gfc_current_locus = old_loc;\n@@ -1347,7 +1347,7 @@ gfc_match_pointer_assignment (void)\n   if (m != MATCH_YES)\n     goto cleanup;\n \n-  if (lvalue->symtree->n.sym->attr.protected\n+  if (lvalue->symtree->n.sym->attr.is_protected\n       && lvalue->symtree->n.sym->attr.use_assoc)\n     {\n       gfc_error (\"Assigning to a PROTECTED pointer at %C\");"}, {"sha": "9e9e7680f81b2520de43f742d5376a5d13245d57", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -1741,7 +1741,7 @@ mio_symbol_attribute (symbol_attribute *attr)\n \tMIO_NAME (ab_attribute) (AB_OPTIONAL, attr_bits);\n       if (attr->pointer)\n \tMIO_NAME (ab_attribute) (AB_POINTER, attr_bits);\n-      if (attr->protected)\n+      if (attr->is_protected)\n \tMIO_NAME (ab_attribute) (AB_PROTECTED, attr_bits);\n       if (attr->value)\n \tMIO_NAME (ab_attribute) (AB_VALUE, attr_bits);\n@@ -1836,7 +1836,7 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t      attr->pointer = 1;\n \t      break;\n \t    case AB_PROTECTED:\n-\t      attr->protected = 1;\n+\t      attr->is_protected = 1;\n \t      break;\n \t    case AB_VALUE:\n \t      attr->value = 1;"}, {"sha": "1d69d886797f56c49529fa4437cde0a08dfe5b58", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -2739,7 +2739,7 @@ match_variable (gfc_expr **result, int equiv_flag, int host_flag)\n   switch (sym->attr.flavor)\n     {\n     case FL_VARIABLE:\n-      if (sym->attr.protected && sym->attr.use_assoc)\n+      if (sym->attr.is_protected && sym->attr.use_assoc)\n \t{\n \t  gfc_error (\"Assigning to PROTECTED variable at %C\");\n \t  return MATCH_ERROR;"}, {"sha": "0eb78bdc8a5b93e234db9f081756b16c1f0fee39", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -8962,7 +8962,7 @@ resolve_equivalence (gfc_equiv *eq)\n \n       sym = e->symtree->n.sym;\n \n-      if (sym->attr.protected)\n+      if (sym->attr.is_protected)\n \tcnt_protected++;\n       if (cnt_protected > 0 && cnt_protected != object)\n        \t{"}, {"sha": "c5d56c7dbcd4e82a73420a6a8bd321021d9f50bc", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -344,14 +344,14 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n     *intent_in = \"INTENT(IN)\", *intrinsic = \"INTRINSIC\",\n     *intent_out = \"INTENT(OUT)\", *intent_inout = \"INTENT(INOUT)\",\n     *allocatable = \"ALLOCATABLE\", *elemental = \"ELEMENTAL\",\n-    *private = \"PRIVATE\", *recursive = \"RECURSIVE\",\n+    *privat = \"PRIVATE\", *recursive = \"RECURSIVE\",\n     *in_common = \"COMMON\", *result = \"RESULT\", *in_namelist = \"NAMELIST\",\n-    *public = \"PUBLIC\", *optional = \"OPTIONAL\", *entry = \"ENTRY\",\n+    *publik = \"PUBLIC\", *optional = \"OPTIONAL\", *entry = \"ENTRY\",\n     *function = \"FUNCTION\", *subroutine = \"SUBROUTINE\",\n     *dimension = \"DIMENSION\", *in_equivalence = \"EQUIVALENCE\",\n     *use_assoc = \"USE ASSOCIATED\", *cray_pointer = \"CRAY POINTER\",\n     *cray_pointee = \"CRAY POINTEE\", *data = \"DATA\", *value = \"VALUE\",\n-    *volatile_ = \"VOLATILE\", *protected = \"PROTECTED\",\n+    *volatile_ = \"VOLATILE\", *is_protected = \"PROTECTED\",\n     *is_bind_c = \"BIND(C)\", *procedure = \"PROCEDURE\";\n   static const char *threadprivate = \"THREADPRIVATE\";\n \n@@ -383,9 +383,9 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       if (attr->optional)\n \ta1 = optional;\n       if (attr->access == ACCESS_PRIVATE)\n-\ta1 = private;\n+\ta1 = privat;\n       if (attr->access == ACCESS_PUBLIC)\n-\ta1 = public;\n+\ta1 = publik;\n       if (attr->intent != INTENT_UNKNOWN)\n \ta1 = intent;\n \n@@ -541,9 +541,9 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       goto conflict;\n     }\n \n-  conf (protected, intrinsic)\n-  conf (protected, external)\n-  conf (protected, in_common)\n+  conf (is_protected, intrinsic)\n+  conf (is_protected, external)\n+  conf (is_protected, in_common)\n \n   conf (volatile_, intrinsic)\n   conf (volatile_, external)\n@@ -558,7 +558,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n   conf (procedure, allocatable)\n   conf (procedure, dimension)\n   conf (procedure, intrinsic)\n-  conf (procedure, protected)\n+  conf (procedure, is_protected)\n   conf (procedure, target)\n   conf (procedure, value)\n   conf (procedure, volatile_)\n@@ -585,7 +585,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       conf2 (dummy);\n       conf2 (volatile_);\n       conf2 (pointer);\n-      conf2 (protected);\n+      conf2 (is_protected);\n       conf2 (target);\n       conf2 (external);\n       conf2 (intrinsic);\n@@ -599,7 +599,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n \n       if (attr->access == ACCESS_PUBLIC || attr->access == ACCESS_PRIVATE)\n \t{\n-\t  a2 = attr->access == ACCESS_PUBLIC ? public : private;\n+\t  a2 = attr->access == ACCESS_PUBLIC ? publik : privat;\n \t  gfc_error (\"%s attribute applied to %s %s at %L\", a2, a1,\n \t    name, where);\n \t  return FAILURE;\n@@ -684,7 +684,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       conf2 (subroutine);\n       conf2 (entry);\n       conf2 (pointer);\n-      conf2 (protected);\n+      conf2 (is_protected);\n       conf2 (target);\n       conf2 (dummy);\n       conf2 (in_common);\n@@ -976,7 +976,7 @@ gfc_add_protected (symbol_attribute *attr, const char *name, locus *where)\n   if (check_used (attr, name, where))\n     return FAILURE;\n \n-  if (attr->protected)\n+  if (attr->is_protected)\n     {\n \tif (gfc_notify_std (GFC_STD_LEGACY, \n \t\t\t    \"Duplicate PROTECTED attribute specified at %L\",\n@@ -985,7 +985,7 @@ gfc_add_protected (symbol_attribute *attr, const char *name, locus *where)\n \t  return FAILURE;\n     }\n \n-  attr->protected = 1;\n+  attr->is_protected = 1;\n   return check_conflict (attr, name, where);\n }\n \n@@ -1582,7 +1582,7 @@ gfc_copy_attr (symbol_attribute *dest, symbol_attribute *src, locus *where)\n     goto fail;\n   if (src->pointer && gfc_add_pointer (dest, where) == FAILURE)\n     goto fail;\n-  if (src->protected && gfc_add_protected (dest, NULL, where) == FAILURE)\n+  if (src->is_protected && gfc_add_protected (dest, NULL, where) == FAILURE)\n     goto fail;\n   if (src->save && gfc_add_save (dest, NULL, where) == FAILURE)\n     goto fail;"}, {"sha": "9fc0dc9a06cb0869cccf66d113b1f669ede5e83c", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa433c2945d1f8d62961452bcd4e07f509815a8/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=9aa433c2945d1f8d62961452bcd4e07f509815a8", "patch": "@@ -1513,7 +1513,7 @@ gfc_get_array_type_bounds (tree etype, int dimen, tree * lbound,\n {\n   char name[8 + GFC_RANK_DIGITS + GFC_MAX_SYMBOL_LEN];\n   tree fat_type, base_type, arraytype, lower, upper, stride, tmp, rtype;\n-  const char *typename;\n+  const char *type_name;\n   int n;\n \n   base_type = gfc_get_array_descriptor_base (dimen);\n@@ -1523,11 +1523,11 @@ gfc_get_array_type_bounds (tree etype, int dimen, tree * lbound,\n   if (tmp && TREE_CODE (tmp) == TYPE_DECL)\n     tmp = DECL_NAME (tmp);\n   if (tmp)\n-    typename = IDENTIFIER_POINTER (tmp);\n+    type_name = IDENTIFIER_POINTER (tmp);\n   else\n-    typename = \"unknown\";\n+    type_name = \"unknown\";\n   sprintf (name, \"array\" GFC_RANK_PRINTF_FORMAT \"_%.*s\", dimen,\n-\t   GFC_MAX_SYMBOL_LEN, typename);\n+\t   GFC_MAX_SYMBOL_LEN, type_name);\n   TYPE_NAME (fat_type) = get_identifier (name);\n \n   GFC_DESCRIPTOR_TYPE_P (fat_type) = 1;"}]}