{"sha": "8813f50d2c8653bbc65450fd1244a85c1ba7902f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxM2Y1MGQyYzg2NTNiYmM2NTQ1MGZkMTI0NGE4NWMxYmE3OTAyZg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-06-07T10:47:26Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-06-07T10:47:26Z"}, "message": "* tree-affine.c (tree_to_aff_combination): Handle (T1)(X + X).\n\nFrom-SVN: r248956", "tree": {"sha": "e02b31da29b767a9a696edbd23a5c98011e7ba2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e02b31da29b767a9a696edbd23a5c98011e7ba2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8813f50d2c8653bbc65450fd1244a85c1ba7902f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8813f50d2c8653bbc65450fd1244a85c1ba7902f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8813f50d2c8653bbc65450fd1244a85c1ba7902f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8813f50d2c8653bbc65450fd1244a85c1ba7902f/comments", "author": null, "committer": null, "parents": [{"sha": "1b92ccde2c059959ec7026e279dcd582438e6f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b92ccde2c059959ec7026e279dcd582438e6f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b92ccde2c059959ec7026e279dcd582438e6f4d"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "b2d723250d40b07cecd8e263496487d75b4c2531", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8813f50d2c8653bbc65450fd1244a85c1ba7902f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8813f50d2c8653bbc65450fd1244a85c1ba7902f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8813f50d2c8653bbc65450fd1244a85c1ba7902f", "patch": "@@ -1,3 +1,7 @@\n+2017-06-07  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-affine.c (tree_to_aff_combination): Handle (T1)(X + X).\n+\n 2017-06-07  Bin Cheng  <bin.cheng@arm.com>\n \n \t(aff_combination_expand): Move (T1)(X *+- CST) simplification to ..."}, {"sha": "d2983ab5e8a892e778e64baa81803691a757b2ec", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8813f50d2c8653bbc65450fd1244a85c1ba7902f/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8813f50d2c8653bbc65450fd1244a85c1ba7902f/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=8813f50d2c8653bbc65450fd1244a85c1ba7902f", "patch": "@@ -375,17 +375,24 @@ tree_to_aff_combination (tree expr, tree type, aff_tree *comb)\n \tif ((icode == PLUS_EXPR || icode == MINUS_EXPR || icode == MULT_EXPR)\n \t    && TREE_CODE (itype) == INTEGER_TYPE\n \t    && TREE_CODE (otype) == INTEGER_TYPE\n-\t    && TYPE_PRECISION (otype) > TYPE_PRECISION (itype)\n-\t    && TYPE_OVERFLOW_UNDEFINED (itype)\n-\t    && TREE_CODE (TREE_OPERAND (inner, 1)) == INTEGER_CST)\n+\t    && TYPE_PRECISION (otype) > TYPE_PRECISION (itype))\n \t  {\n-\t    /* Convert (T1)(X *+- CST) into (T1)X *+- (T1)CST if X's type has\n-\t       undefined overflow behavior.  */\n-\t    tree op0 = fold_convert (otype, TREE_OPERAND (inner, 0));\n-\t    tree op1 = fold_convert (otype, TREE_OPERAND (inner, 1));\n-\t    expr = fold_build2 (icode, otype, op0, op1);\n-\t    tree_to_aff_combination (expr, type, comb);\n-\t    return;\n+\t    tree op0 = TREE_OPERAND (inner, 0), op1 = TREE_OPERAND (inner, 1);\n+\n+\t    /* If inner type has undefined overflow behavior, fold conversion\n+\t       for below two cases:\n+\t\t (T1)(X *+- CST) -> (T1)X *+- (T1)CST\n+\t\t (T1)(X + X)     -> (T1)X + (T1)X.  */\n+\t    if (TYPE_OVERFLOW_UNDEFINED (itype)\n+\t\t&& (TREE_CODE (op1) == INTEGER_CST\n+\t\t    || (icode == PLUS_EXPR && operand_equal_p (op0, op1, 0))))\n+\t      {\n+\t\top0 = fold_convert (otype, op0);\n+\t\top1 = fold_convert (otype, op1);\n+\t\texpr = fold_build2 (icode, otype, op0, op1);\n+\t\ttree_to_aff_combination (expr, type, comb);\n+\t\treturn;\n+\t      }\n \t  }\n       }\n       break;"}]}