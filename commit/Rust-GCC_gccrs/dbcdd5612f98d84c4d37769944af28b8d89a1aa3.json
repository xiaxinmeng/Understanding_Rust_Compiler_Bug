{"sha": "dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjZGQ1NjEyZjk4ZDg0YzRkMzc3Njk5NDRhZjI4YjhkODlhMWFhMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-02-13T13:49:34Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-02-13T13:49:34Z"}, "message": "Clean up MPX-related stuff.\n\n2019-02-13  Martin Liska  <mliska@suse.cz>\n\n\t* builtins.h (expand_builtin_with_bounds): Remove declaration.\n\t* calls.c (struct arg_data): Remove special_slot, pointer_arg\n\tand pointer_offset fields.\n\t(initialize_argument_information): Remove usage of dead\n\tfields.\n\t* cgraph.h (struct cgraph_thunk_info): Remove\n\tadd_pointer_bounds_args.\n\t* cgraphunit.c (cgraph_node::expand_thunk): Remove usage of dead\n\tfields.\n\t(cgraph_node::assemble_thunks_and_aliases): Remove usage of dead\n\tfields.\n\t* config/i386/i386.c (ix86_function_arg_advance): Remove\n\tunrelated comment.\n\t(struct builtin_isa): Remove leaf_p and nothrow_p fields.\n\t(def_builtin):  Remove usage of dead\n\tfields.\n\t(ix86_add_new_builtins): Likewise.\n\t* ipa-fnsummary.c (compute_fn_summary): Likewise.\n\t* ipa-icf.c (sem_function::equals_wpa): Likewise.\n\t(sem_function::init): Likewise.\n\t(sem_variable::merge): Likewise.\n\t* ipa-visibility.c (function_and_variable_visibility): Likewise.\n\t* ipa.c (symbol_table::remove_unreachable_nodes): Likewise.\n\t* lto-cgraph.c (lto_output_node): Likewise.\n\t(lto_output_varpool_node): Likewise.\n\t(input_node): Likewise.\n\t(input_varpool_node): Likewise.\n\t* lto-streamer-out.c (lto_output): Likewise.\n\t* tree-inline.c (expand_call_inline): Remove usage of\n\tassign_stmts.\n\t* tree-inline.h (struct copy_body_data): Likewise.\n\t* varpool.c (varpool_node::dump): Likewise.\n\nFrom-SVN: r268844", "tree": {"sha": "130c147f9d03f07adfcd2b450c17bbc2f2197b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130c147f9d03f07adfcd2b450c17bbc2f2197b25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f17130a609e04ed5980d27bbc7df4922f1e087db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17130a609e04ed5980d27bbc7df4922f1e087db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17130a609e04ed5980d27bbc7df4922f1e087db"}], "stats": {"total": 124, "additions": 40, "deletions": 84}, "files": [{"sha": "a6ef20cb71690556e95e898d5e451fbc855ab0ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -1,3 +1,38 @@\n+2019-02-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* builtins.h (expand_builtin_with_bounds): Remove declaration.\n+\t* calls.c (struct arg_data): Remove special_slot, pointer_arg\n+\tand pointer_offset fields.\n+\t(initialize_argument_information): Remove usage of dead\n+\tfields.\n+\t* cgraph.h (struct cgraph_thunk_info): Remove\n+\tadd_pointer_bounds_args.\n+\t* cgraphunit.c (cgraph_node::expand_thunk): Remove usage of dead\n+\tfields.\n+\t(cgraph_node::assemble_thunks_and_aliases): Remove usage of dead\n+\tfields.\n+\t* config/i386/i386.c (ix86_function_arg_advance): Remove\n+\tunrelated comment.\n+\t(struct builtin_isa): Remove leaf_p and nothrow_p fields.\n+\t(def_builtin):  Remove usage of dead\n+\tfields.\n+\t(ix86_add_new_builtins): Likewise.\n+\t* ipa-fnsummary.c (compute_fn_summary): Likewise.\n+\t* ipa-icf.c (sem_function::equals_wpa): Likewise.\n+\t(sem_function::init): Likewise.\n+\t(sem_variable::merge): Likewise.\n+\t* ipa-visibility.c (function_and_variable_visibility): Likewise.\n+\t* ipa.c (symbol_table::remove_unreachable_nodes): Likewise.\n+\t* lto-cgraph.c (lto_output_node): Likewise.\n+\t(lto_output_varpool_node): Likewise.\n+\t(input_node): Likewise.\n+\t(input_varpool_node): Likewise.\n+\t* lto-streamer-out.c (lto_output): Likewise.\n+\t* tree-inline.c (expand_call_inline): Remove usage of\n+\tassign_stmts.\n+\t* tree-inline.h (struct copy_body_data): Likewise.\n+\t* varpool.c (varpool_node::dump): Likewise.\n+\n 2019-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/89303"}, {"sha": "599c96e72e166abee803dce2464dd0e60452258c", "filename": "gcc/builtins.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -119,7 +119,6 @@ extern void expand_builtin_trap (void);\n extern void expand_ifn_atomic_bit_test_and (gcall *);\n extern void expand_ifn_atomic_compare_exchange (gcall *);\n extern rtx expand_builtin (tree, rtx, rtx, machine_mode, int);\n-extern rtx expand_builtin_with_bounds (tree, rtx, rtx, machine_mode, int);\n extern enum built_in_function builtin_mathfn_code (const_tree);\n extern tree fold_builtin_expect (location_t, tree, tree, tree, tree);\n extern bool avoid_folding_inline_builtin (tree);"}, {"sha": "63c1bc52077c8829b7ff4caafa4a5c6fa2de473d", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -82,15 +82,6 @@ struct arg_data\n   /* If REG is a PARALLEL, this is a copy of VALUE pulled into the correct\n      form for emit_group_move.  */\n   rtx parallel_value;\n-  /* If value is passed in neither reg nor stack, this field holds a number\n-     of a special slot to be used.  */\n-  rtx special_slot;\n-  /* For pointer bounds hold an index of parm bounds are bound to.  -1 if\n-     there is no such pointer.  */\n-  int pointer_arg;\n-  /* If pointer_arg refers a structure, then pointer_offset holds an offset\n-     of a pointer in this structure.  */\n-  int pointer_offset;\n   /* If REG was promoted from the actual mode of the argument expression,\n      indicates whether the promotion is sign- or zero-extended.  */\n   int unsignedp;\n@@ -2129,10 +2120,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t\t\t\t\t\targpos < n_named_args);\n \n       if (args[i].reg && CONST_INT_P (args[i].reg))\n-\t{\n-\t  args[i].special_slot = args[i].reg;\n-\t  args[i].reg = NULL;\n-\t}\n+\targs[i].reg = NULL;\n \n       /* If this is a sibling call and the machine has register windows, the\n \t register window has to be unwinded before calling the routine, so"}, {"sha": "2f6daa75a2416bf53ce6e628ca1dae3d960de50e", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -690,9 +690,6 @@ struct GTY(()) cgraph_thunk_info {\n        the virtual one.  */\n   bool virtual_offset_p;\n \n-  /* ??? True for special kind of thunks, seems related to instrumentation.  */\n-  bool add_pointer_bounds_args;\n-\n   /* Set to true when alias node (the cgraph_node to which this struct belong)\n      is a thunk.  Access to any other fields is invalid if this is false.  */\n   bool thunk_p;\n@@ -1939,10 +1936,6 @@ class GTY((tag (\"SYMTAB_VARIABLE\"))) varpool_node : public symtab_node {\n   /* Set when variable is scheduled to be assembled.  */\n   unsigned output : 1;\n \n-  /* Set when variable has statically initialized pointer\n-     or is a static bounds variable and needs initalization.  */\n-  unsigned need_bounds_init : 1;\n-\n   /* Set if the variable is dynamically initialized, except for\n      function local statics.   */\n   unsigned dynamically_initialized : 1;"}, {"sha": "8bfbd0bb12f3bb13e3fbcfdcfc2a9b64f791b0fb", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -1782,11 +1782,6 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n   tree thunk_fndecl = decl;\n   tree a;\n \n-  /* Instrumentation thunk is the same function with\n-     a different signature.  Never need to expand it.  */\n-  if (thunk.add_pointer_bounds_args)\n-    return false;\n-\n   if (!force_gimple_thunk\n       && this_adjusting\n       && indirect_offset == 0\n@@ -2123,8 +2118,7 @@ cgraph_node::assemble_thunks_and_aliases (void)\n \n   for (e = callers; e;)\n     if (e->caller->thunk.thunk_p\n-\t&& !e->caller->global.inlined_to\n-\t&& !e->caller->thunk.add_pointer_bounds_args)\n+\t&& !e->caller->global.inlined_to)\n       {\n \tcgraph_node *thunk = e->caller;\n "}, {"sha": "fd05873ba39fa94ace525a0d24da5170d26fc1e4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -8324,8 +8324,6 @@ ix86_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n   else\n     nregs = function_arg_advance_32 (cum, mode, type, bytes, words);\n \n-  /* For pointers passed in memory we expect bounds passed in Bounds\n-     Table.  */\n   if (!nregs)\n     {\n       /* Track if there are outgoing arguments on stack.  */\n@@ -30421,8 +30419,6 @@ struct builtin_isa {\n   enum ix86_builtin_func_type tcode; /* type to use in the declaration */\n   unsigned char const_p:1;\t/* true if the declaration is constant */\n   unsigned char pure_p:1;\t/* true if the declaration has pure attribute */\n-  bool leaf_p;\t\t\t/* true if the declaration has leaf attribute */\n-  bool nothrow_p;\t\t/* true if the declaration has nothrow attribute */\n   bool set_and_not_built_p;\n };\n \n@@ -30493,8 +30489,6 @@ def_builtin (HOST_WIDE_INT mask, HOST_WIDE_INT mask2,\n \t  ix86_builtins[(int) code] = NULL_TREE;\n \t  ix86_builtins_isa[(int) code].tcode = tcode;\n \t  ix86_builtins_isa[(int) code].name = name;\n-\t  ix86_builtins_isa[(int) code].leaf_p = false;\n-\t  ix86_builtins_isa[(int) code].nothrow_p = false;\n \t  ix86_builtins_isa[(int) code].const_p = false;\n \t  ix86_builtins_isa[(int) code].pure_p = false;\n \t  ix86_builtins_isa[(int) code].set_and_not_built_p = true;\n@@ -30574,13 +30568,6 @@ ix86_add_new_builtins (HOST_WIDE_INT isa, HOST_WIDE_INT isa2)\n \t  ix86_builtins[i] = decl;\n \t  if (ix86_builtins_isa[i].const_p)\n \t    TREE_READONLY (decl) = 1;\n-\t  if (ix86_builtins_isa[i].pure_p)\n-\t    DECL_PURE_P (decl) = 1;\n-\t  if (ix86_builtins_isa[i].leaf_p)\n-\t    DECL_ATTRIBUTES (decl) = build_tree_list (get_identifier (\"leaf\"),\n-\t\t\t\t\t\t      NULL_TREE);\n-\t  if (ix86_builtins_isa[i].nothrow_p)\n-\t    TREE_NOTHROW (decl) = 1;\n \t}\n     }\n "}, {"sha": "260315da228c2328c96583d2a2b901e5a829dbda", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -2449,13 +2449,7 @@ compute_fn_summary (struct cgraph_node *node, bool early)\n       info->account_size_time (2 * ipa_fn_summary::size_scale, 0, t, t);\n       ipa_update_overall_fn_summary (node);\n       info->self_size = info->size;\n-      /* We cannot inline instrumentation clones.  */\n-      if (node->thunk.add_pointer_bounds_args)\n-\t{\n-          info->inlinable = false;\n-          node->callees->inline_failed = CIF_CHKP;\n-\t}\n-      else if (stdarg_p (TREE_TYPE (node->decl)))\n+      if (stdarg_p (TREE_TYPE (node->decl)))\n \t{\n \t  info->inlinable = false;\n \t  node->callees->inline_failed = CIF_VARIADIC_THUNK;\n@@ -2501,16 +2495,6 @@ compute_fn_summary (struct cgraph_node *node, bool early)\n \t       node->local.can_change_signature = !e;\n \t     }\n \t }\n-       /* Functions called by instrumentation thunk can't change signature\n-\t  because instrumentation thunk modification is not supported.  */\n-       if (node->local.can_change_signature)\n-\t for (e = node->callers; e; e = e->next_caller)\n-\t   if (e->caller->thunk.thunk_p\n-\t       && e->caller->thunk.add_pointer_bounds_args)\n-\t     {\n-\t       node->local.can_change_signature = false;\n-\t       break;\n-\t     }\n        analyze_function_body (node, early);\n        pop_cfun ();\n      }"}, {"sha": "e4c9dda0df1e6221f2c0406316f195789bd1493f", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -548,9 +548,6 @@ sem_function::equals_wpa (sem_item *item,\n         return return_false_with_msg (\"thunk this_adjusting mismatch\");\n       if (cnode->thunk.virtual_offset_p != cnode2->thunk.virtual_offset_p)\n         return return_false_with_msg (\"thunk virtual_offset_p mismatch\");\n-      if (cnode->thunk.add_pointer_bounds_args\n-\t  != cnode2->thunk.add_pointer_bounds_args)\n-        return return_false_with_msg (\"thunk add_pointer_bounds_args mismatch\");\n     }\n \n   /* Compare special function DECL attributes.  */\n@@ -1407,7 +1404,6 @@ sem_function::init (void)\n       hstate.add_hwi (cnode->thunk.virtual_value);\n       hstate.add_flag (cnode->thunk.this_adjusting);\n       hstate.add_flag (cnode->thunk.virtual_offset_p);\n-      hstate.add_flag (cnode->thunk.add_pointer_bounds_args);\n       gcode_hash = hstate.end ();\n     }\n }\n@@ -2205,7 +2201,6 @@ sem_variable::merge (sem_item *alias_item)\n       DECL_INITIAL (alias->decl) = NULL;\n       ((symtab_node *)alias)->call_for_symbol_and_aliases (clear_decl_rtl,\n \t\t\t\t\t\t\t   NULL, true);\n-      alias->need_bounds_init = false;\n       alias->remove_all_references ();\n       if (TREE_ADDRESSABLE (alias->decl))\n         original->call_for_symbol_and_aliases (set_addressable, NULL, true);"}, {"sha": "84585b52e46cd227917be730d0d613bae67c39af", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -721,7 +721,6 @@ function_and_variable_visibility (bool whole_program)\n \tlocalize_node (whole_program, node);\n \n       if (node->thunk.thunk_p\n-\t  && !node->thunk.add_pointer_bounds_args\n \t  && TREE_PUBLIC (node->decl))\n \t{\n \t  struct cgraph_node *decl_node = node;"}, {"sha": "2496694124cc606a5bceb26c4705ddd5d31cc508", "filename": "gcc/ipa.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -548,12 +548,6 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t      node->remove_callees ();\n \t      node->remove_all_references ();\n \t      changed = true;\n-\t      if (node->thunk.thunk_p\n-\t\t  && node->thunk.add_pointer_bounds_args)\n-\t\t{\n-\t\t  node->thunk.thunk_p = false;\n-\t\t  node->thunk.add_pointer_bounds_args = false;\n-\t\t}\n \t    }\n \t}\n       else"}, {"sha": "4dfa2862be3733dee61547d418c97fc0a9ab671f", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -556,8 +556,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n       streamer_write_uhwi_stream\n \t (ob->main_stream,\n \t  1 + (node->thunk.this_adjusting != 0) * 2\n-\t  + (node->thunk.virtual_offset_p != 0) * 4\n-\t  + (node->thunk.add_pointer_bounds_args != 0) * 8);\n+\t  + (node->thunk.virtual_offset_p != 0) * 4);\n       streamer_write_uhwi_stream (ob->main_stream, node->thunk.fixed_offset);\n       streamer_write_uhwi_stream (ob->main_stream, node->thunk.virtual_value);\n       streamer_write_uhwi_stream (ob->main_stream, node->thunk.indirect_offset);\n@@ -631,7 +630,6 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n   bp_pack_value (&bp, node->tls_model, 3);\n   bp_pack_value (&bp, node->used_by_single_function, 1);\n   bp_pack_value (&bp, node->dynamically_initialized, 1);\n-  bp_pack_value (&bp, node->need_bounds_init, 1);\n   streamer_write_bitpack (&bp);\n \n   group = node->get_comdat_group ();\n@@ -1311,7 +1309,6 @@ input_node (struct lto_file_decl_data *file_data,\n       node->thunk.indirect_offset = indirect_offset;\n       node->thunk.this_adjusting = (type & 2);\n       node->thunk.virtual_offset_p = (type & 4);\n-      node->thunk.add_pointer_bounds_args = (type & 8);\n     }\n   if (node->alias && !node->analyzed && node->weakref)\n     node->alias_target = get_alias_symbol (node->decl);\n@@ -1382,7 +1379,6 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   node->tls_model = (enum tls_model)bp_unpack_value (&bp, 3);\n   node->used_by_single_function = (enum tls_model)bp_unpack_value (&bp, 1);\n   node->dynamically_initialized = bp_unpack_value (&bp, 1);\n-  node->need_bounds_init = bp_unpack_value (&bp, 1);\n   group = read_identifier (ib);\n   if (group)\n     {"}, {"sha": "a72016a48432f251d229f4d1de4a80e76e29e5df", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -2412,8 +2412,7 @@ lto_output (void)\n       if (cgraph_node *node = dyn_cast <cgraph_node *> (snode))\n \t{\n \t  if (lto_symtab_encoder_encode_body_p (encoder, node)\n-\t      && !node->alias\n-\t      && (!node->thunk.thunk_p || !node->thunk.add_pointer_bounds_args))\n+\t      && !node->alias)\n \t    {\n \t      if (flag_checking)\n \t\t{"}, {"sha": "98cfbe31b8299390566f82514183ea9868f32f0e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -4554,7 +4554,6 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \n   /* We will be inlining this callee.  */\n   id->eh_lp_nr = lookup_stmt_eh_lp (stmt);\n-  id->assign_stmts.create (0);\n \n   /* Update the callers EH personality.  */\n   if (DECL_FUNCTION_PERSONALITY (fn))\n@@ -4916,7 +4915,6 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n       TREE_USED (gimple_assign_rhs1 (stmt)) = 1;\n     }\n \n-  id->assign_stmts.release ();\n   id->add_clobbers_to_eh_landing_pads = 0;\n \n   /* Output the inlining info for this abstract function, since it has been"}, {"sha": "9c2915edc6c6d6a75ef3cf5a79f29fda75e3b164", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -63,9 +63,6 @@ struct copy_body_data\n   /* The VAR_DECL for the return value.  */\n   tree retvar;\n \n-  /* Assign statements that need bounds copy.  */\n-  vec<gimple *> assign_stmts;\n-\n   /* The map from local declarations in the inlined function to\n      equivalents in the function into which it is being inlined.  */\n   hash_map<tree, tree> *decl_map;"}, {"sha": "8e5a93726565550b7a2c064861898e01d51ee685", "filename": "gcc/varpool.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcdd5612f98d84c4d37769944af28b8d89a1aa3/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=dbcdd5612f98d84c4d37769944af28b8d89a1aa3", "patch": "@@ -226,8 +226,6 @@ varpool_node::dump (FILE *f)\n     fprintf (f, \" output\");\n   if (used_by_single_function)\n     fprintf (f, \" used-by-single-function\");\n-  if (need_bounds_init)\n-    fprintf (f, \" need-bounds-init\");\n   if (TREE_READONLY (decl))\n     fprintf (f, \" read-only\");\n   if (ctor_useable_for_folding_p ())"}]}