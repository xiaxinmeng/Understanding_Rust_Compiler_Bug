{"sha": "a5dc2641add6b4f54086d40ae706fda3cdaac7f5", "node_id": "C_kwDOANBUbNoAKGE1ZGMyNjQxYWRkNmI0ZjU0MDg2ZDQwYWU3MDZmZGEzY2RhYWM3ZjU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-25T23:34:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-25T23:34:33Z"}, "message": "gimple-fold: fix further missing stmt locations [PR104308]\n\nPR analyzer/104308 initially reported about a\n-Wanalyzer-use-of-uninitialized-value diagnostic using UNKNOWN_LOCATION\nwhen complaining about certain memmove operations where the source\nis uninitialized.\n\nIn r12-7856-g875342766d4298 I fixed the missing location for\na stmt generated by gimple_fold_builtin_memory_op, but the reporter\nthen found another way to generate such a stmt with UNKNOWN_LOCATION.\n\nI've now gone through gimple_fold_builtin_memory_op looking at all\nstatement creation, and found three places in which a new statement\ndoesn't have a location set on it (either directly via\ngimple_set_location, or indirectly via gsi_replace), one of which is\nthe new reproducer.\n\nThis patch adds a gimple_set_location to these three cases, and adds\ntest coverage for one of them (the third hunk within the patch), fixing\nthe new reproducer for PR analyzer/104308.\n\ngcc/ChangeLog:\n\tPR analyzer/104308\n\t* gimple-fold.cc (gimple_fold_builtin_memory_op): Explicitly set\n\tthe location of new_stmt in all places that don't already set it,\n\twhether explicitly, or via a call to gsi_replace.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104308\n\t* gcc.dg/analyzer/pr104308.c: Add test coverage.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "36e801da6a4b83821289452f426860c857ef29ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e801da6a4b83821289452f426860c857ef29ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5dc2641add6b4f54086d40ae706fda3cdaac7f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dc2641add6b4f54086d40ae706fda3cdaac7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5dc2641add6b4f54086d40ae706fda3cdaac7f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dc2641add6b4f54086d40ae706fda3cdaac7f5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2202431910e30d8505c94d1cb9341cac7080d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2202431910e30d8505c94d1cb9341cac7080d10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2202431910e30d8505c94d1cb9341cac7080d10"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "863ee3d391222a73e4d655ea89be89990b3a26db", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dc2641add6b4f54086d40ae706fda3cdaac7f5/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dc2641add6b4f54086d40ae706fda3cdaac7f5/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=a5dc2641add6b4f54086d40ae706fda3cdaac7f5", "patch": "@@ -1048,6 +1048,7 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t\t\t  gsi_replace (gsi, new_stmt, false);\n \t\t\t  return true;\n \t\t\t}\n+\t\t      gimple_set_location (new_stmt, loc);\n \t\t      gsi_insert_before (gsi, new_stmt, GSI_SAME_STMT);\n \t\t      goto done;\n \t\t    }\n@@ -1302,6 +1303,7 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t\t\t\t\t\t   new_stmt);\n \t      gimple_assign_set_lhs (new_stmt, srcvar);\n \t      gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n+\t      gimple_set_location (new_stmt, loc);\n \t      gsi_insert_before (gsi, new_stmt, GSI_SAME_STMT);\n \t    }\n \t  new_stmt = gimple_build_assign (destvar, srcvar);\n@@ -1338,6 +1340,7 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t  gsi_replace (gsi, new_stmt, false);\n \t  return true;\n \t}\n+      gimple_set_location (new_stmt, loc);\n       gsi_insert_before (gsi, new_stmt, GSI_SAME_STMT);\n     }\n "}, {"sha": "a3a0cbb731776b26e2ba9447baa7c39f80821a57", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104308.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5dc2641add6b4f54086d40ae706fda3cdaac7f5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5dc2641add6b4f54086d40ae706fda3cdaac7f5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c?ref=a5dc2641add6b4f54086d40ae706fda3cdaac7f5", "patch": "@@ -1,8 +1,19 @@\n+/* Verify that we have source locations for\n+   -Wanalyzer-use-of-uninitialized-value warnings involving folded\n+   memory ops.  */\n+\n #include <string.h>\n \n-int main()\n+int test_memmove_within_uninit (void)\n {\n   char s[5]; /* { dg-message \"region created on stack here\" } */\n   memmove(s, s + 1, 2); /* { dg-warning \"use of uninitialized value\" } */\n   return 0;\n }\n+\n+int test_memcpy_from_uninit (void)\n+{\n+  char a1[5];\n+  char a2[5]; /* { dg-message \"region created on stack here\" } */\n+  return (memcpy(a1, a2, 5) == a1); /* { dg-warning \"use of uninitialized value\" } */\n+}"}]}