{"sha": "0a18c19f75973520e87a08191554ec3cb8f850a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGExOGMxOWY3NTk3MzUyMGU4N2EwODE5MTU1NGVjM2NiOGY4NTBhNg==", "commit": {"author": {"name": "David Sherwood", "email": "david.sherwood@arm.com", "date": "2015-12-23T10:28:18Z"}, "committer": {"name": "David Sherwood", "email": "davids@gcc.gnu.org", "date": "2015-12-23T10:28:18Z"}, "message": "iterators.md (VMAXMINFNM): New int iterator.\n\n2015-12-23  David Sherwood  <david.sherwood@arm.com>\n\n    gcc/\n        * config/arm/iterators.md (VMAXMINFNM): New int iterator.\n        (fmaxmin): New int attribute.\n        (fmaxmin_op): Likewise.\n        * config/arm/unspecs.md (UNSPEC_VMAXNM): New unspec.\n        (UNSPEC_VMINNM): Likewise.\n        * config/arm/neon.md (fmaxmin): New pattern.\n        * config/arm/vfp.md (fmaxmin): Likewise.\n    gcc/testsuite\n        * gcc.target/arm/fmaxmin.x: New file used by tests below.\n        * gcc.target/arm/fmaxmin.c: New test.\n        * gcc.target/arm/vect-fmaxmin.c: Likewise.\n\nFrom-SVN: r231924", "tree": {"sha": "e386227e0654e558873ba944bb5f30612c47435d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e386227e0654e558873ba944bb5f30612c47435d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a18c19f75973520e87a08191554ec3cb8f850a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a18c19f75973520e87a08191554ec3cb8f850a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a18c19f75973520e87a08191554ec3cb8f850a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a18c19f75973520e87a08191554ec3cb8f850a6/comments", "author": {"login": "david-arm", "id": 57997763, "node_id": "MDQ6VXNlcjU3OTk3NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/57997763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-arm", "html_url": "https://github.com/david-arm", "followers_url": "https://api.github.com/users/david-arm/followers", "following_url": "https://api.github.com/users/david-arm/following{/other_user}", "gists_url": "https://api.github.com/users/david-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-arm/subscriptions", "organizations_url": "https://api.github.com/users/david-arm/orgs", "repos_url": "https://api.github.com/users/david-arm/repos", "events_url": "https://api.github.com/users/david-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/david-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa87d16dcf766d1754837e71d5a1abc97a9e0c8b"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "aa28d106374fd58ce648b55f3a72eeaefcc5359f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -1,3 +1,13 @@\n+2015-12-23  David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/arm/iterators.md (VMAXMINFNM): New int iterator.\n+\t(fmaxmin): New int attribute.\n+\t(fmaxmin_op): Likewise.\n+\t* config/arm/unspecs.md (UNSPEC_VMAXNM): New unspec.\n+\t(UNSPEC_VMINNM): Likewise.\n+\t* config/arm/neon.md (fmaxmin): New pattern.\n+\t* config/arm/vfp.md (fmaxmin): Likewise.\n+\n 2015-12-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/66232"}, {"sha": "6ff346cd18705cd7e578c94a19069a8b74934543", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -308,6 +308,8 @@\n \n (define_int_iterator VMAXMINF [UNSPEC_VMAX UNSPEC_VMIN])\n \n+(define_int_iterator VMAXMINFNM [UNSPEC_VMAXNM UNSPEC_VMINNM])\n+\n (define_int_iterator VPADDL [UNSPEC_VPADDL_S UNSPEC_VPADDL_U])\n \n (define_int_iterator VPADAL [UNSPEC_VPADAL_S UNSPEC_VPADAL_U])\n@@ -745,6 +747,13 @@\n   (UNSPEC_VPMIN \"min\") (UNSPEC_VPMIN_U \"min\")\n ])\n \n+(define_int_attr fmaxmin [\n+  (UNSPEC_VMAXNM \"fmax\") (UNSPEC_VMINNM \"fmin\")])\n+\n+(define_int_attr fmaxmin_op [\n+  (UNSPEC_VMAXNM \"vmaxnm\") (UNSPEC_VMINNM \"vminnm\")\n+])\n+\n (define_int_attr shift_op [\n   (UNSPEC_VSHL_S \"shl\") (UNSPEC_VSHL_U \"shl\")\n   (UNSPEC_VRSHL_S \"rshl\") (UNSPEC_VRSHL_U \"rshl\")"}, {"sha": "d8cc686b3c4b34ac0399167380f1d5c3f1a8b2e4", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -2366,6 +2366,17 @@\n   [(set_attr \"type\" \"neon_fp_minmax_s<q>\")]\n )\n \n+;; Vector forms for the IEEE-754 fmax()/fmin() functions\n+(define_insn \"<fmaxmin><mode>3\"\n+  [(set (match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:VCVTF [(match_operand:VCVTF 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:VCVTF 2 \"s_register_operand\" \"w\")]\n+\t\t       VMAXMINFNM))]\n+  \"TARGET_NEON && TARGET_FPU_ARMV8\"\n+  \"<fmaxmin_op>.<V_s_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"type\" \"neon_fp_minmax_s<q>\")]\n+)\n+\n (define_expand \"neon_vpadd<mode>\"\n   [(match_operand:VD 0 \"s_register_operand\" \"=w\")\n    (match_operand:VD 1 \"s_register_operand\" \"w\")"}, {"sha": "9c633c0e88707b4ba8fd471ac786337cc192af18", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -226,8 +226,10 @@\n   UNSPEC_VLD4_LANE\n   UNSPEC_VMAX\n   UNSPEC_VMAX_U\n+  UNSPEC_VMAXNM\n   UNSPEC_VMIN\n   UNSPEC_VMIN_U\n+  UNSPEC_VMINNM\n   UNSPEC_VMLA\n   UNSPEC_VMLA_LANE\n   UNSPEC_VMLAL_S"}, {"sha": "3c89fe9ba7ec645d62c802a851ec24d660e1177d", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -1366,6 +1366,18 @@\n    (set_attr \"conds\" \"unconditional\")]\n )\n \n+;; Scalar forms for the IEEE-754 fmax()/fmin() functions\n+(define_insn \"<fmaxmin><mode>3\"\n+  [(set (match_operand:SDF 0 \"s_register_operand\" \"=<F_constraint>\")\n+\t(unspec:SDF [(match_operand:SDF 1 \"s_register_operand\" \"<F_constraint>\")\n+\t\t     (match_operand:SDF 2 \"s_register_operand\" \"<F_constraint>\")]\n+\t\t     VMAXMINFNM))]\n+  \"TARGET_HARD_FLOAT && TARGET_VFP5 <vfp_double_cond>\"\n+  \"<fmaxmin_op>.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"type\" \"f_minmax<vfp_type>\")\n+   (set_attr \"conds\" \"unconditional\")]\n+)\n+\n ;; Write Floating-point Status and Control Register.\n (define_insn \"set_fpscr\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")] VUNSPEC_SET_FPSCR)]"}, {"sha": "0620068bee1ca2e22822860932e5c38d340f8080", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -1,3 +1,9 @@\n+2015-12-23  David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.target/arm/fmaxmin.x: New file used by tests below.\n+\t* gcc.target/arm/fmaxmin.c: New test.\n+\t* gcc.target/arm/vect-fmaxmin.c: Likewise.\n+\n 2015-12-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/66232"}, {"sha": "945c473ced22aab2fa1536c516e20d6feb9267c7", "filename": "gcc/testsuite/gcc.target/arm/fmaxmin.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffmaxmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffmaxmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffmaxmin.c?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -fno-inline -march=armv8-a -save-temps\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"fmaxmin.x\"\n+\n+/* { dg-final { scan-assembler-times \"vmaxnm.f32\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminnm.f32\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vmaxnm.f64\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminnm.f64\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+"}, {"sha": "ccf832d95675ca3f15608991eb4cfb3a7fecc9f8", "filename": "gcc/testsuite/gcc.target/arm/fmaxmin.x", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffmaxmin.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffmaxmin.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffmaxmin.x?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -0,0 +1,54 @@\n+extern void abort (void);\n+double fmax (double, double);\n+float fmaxf (float, float);\n+double fmin (double, double);\n+float fminf (float, float);\n+\n+#define isnan __builtin_isnan\n+#define isinf __builtin_isinf\n+\n+#define NAN __builtin_nan (\"\")\n+#define INFINITY __builtin_inf ()\n+\n+#define DEF_MAXMIN(TYPE,FUN)\\\n+void test_##FUN (TYPE *__restrict__ r, TYPE *__restrict__ a,\\\n+\t\t TYPE *__restrict__ b)\\\n+{\\\n+  int i;\\\n+  for (i = 0; i < 4; i++)\\\n+    r[i] = FUN (a[i], b[i]);\\\n+}\\\n+\n+DEF_MAXMIN (float, fmaxf)\n+DEF_MAXMIN (double, fmax)\n+\n+DEF_MAXMIN (float, fminf)\n+DEF_MAXMIN (double, fmin)\n+\n+int main ()\n+{\n+  float a_f[4] = { 4, NAN, -3, INFINITY };\n+  float b_f[4] = { 1,   7,NAN, 0 };\n+  float r_f[4];\n+  double a_d[4] = { 4, NAN,  -3,  INFINITY };\n+  double b_d[4] = { 1,   7, NAN,  0 };\n+  double r_d[4];\n+\n+  test_fmaxf (r_f, a_f, b_f);\n+  if (r_f[0] != 4 || isnan (r_f[1]) || isnan (r_f[2]) || !isinf (r_f[3]))\n+    abort ();\n+\n+  test_fminf (r_f, a_f, b_f);\n+  if (r_f[0] != 1 || isnan (r_f[1]) || isnan (r_f[2]) || isinf (r_f[3]))\n+    abort ();\n+\n+  test_fmax (r_d, a_d, b_d);\n+  if (r_d[0] != 4 || isnan (r_d[1]) || isnan (r_d[2]) || !isinf (r_d[3]))\n+    abort ();\n+\n+  test_fmin (r_d, a_d, b_d);\n+  if (r_d[0] != 1 || isnan (r_d[1]) || isnan (r_d[2]) || isinf (r_d[3]))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "fd01cd95f530bd1915ee97676efabdbf052fa461", "filename": "gcc/testsuite/gcc.target/arm/vect-fmaxmin.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-fmaxmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a18c19f75973520e87a08191554ec3cb8f850a6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-fmaxmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-fmaxmin.c?ref=0a18c19f75973520e87a08191554ec3cb8f850a6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline -march=armv8-a -save-temps\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"fmaxmin.x\"\n+\n+/* { dg-final { scan-assembler-times \"vmaxnm.f32\\tq\\[0-9\\]+, q\\[0-9\\]+, q\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminnm.f32\\tq\\[0-9\\]+, q\\[0-9\\]+, q\\[0-9\\]+\" 1 } } */\n+\n+/* NOTE: There are no double precision vector versions of vmaxnm/vminnm.  */\n+/* { dg-final { scan-assembler-times \"vmaxnm.f64\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminnm.f64\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+"}]}