{"sha": "69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlhYzc3Y2U1ZWJmNjU0ZDA3OGViZTMyM2IwNGZjYTdiMTdlYThjOA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-17T08:05:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-17T08:05:26Z"}, "message": "tree.c (avoid_overlap): Add prototype.\n\n        * tree.c (avoid_overlap): Add prototype.\n        * spew.c (num_tokens): Add prototype.\n        (nth_noken, add_token, consume_token, debug_yychar): Likewise.\n        * search.c (dfs_check_overlap): Add prototype.\n        (dfs_no_overlap_yet): Likewise.\n        * pt.c (original_template): Add prototype.\n        (inline_needs_template_parms): Likewise.\n        (push_inline_template_parms_recursive): Likewise.\n        (retrieve_specialization, register_specialization): Likewise.\n        (print_candidates, reduce_template_parm_level): Likewise.\n        (build_template_decl, mark_template_parm): Likewise.\n        (tsubst_friend_function, get_bindings_real): Likewise.\n        * method.c (start_squangling): Add prototype.\n        (end_squangling, check_ktype, issue_ktype): Likewise.\n        (build_overloaded_scope_ref, check_btype): Likewise.\n        (build_mangled_template_parm_index): Likewise.\n        * lex.c (init_cpp_parse): Add prototype.\n        (handle_cp_pragma, handle_sysv_pragma): Likewise.\n        (reduce_cmp, token_cmp): Likewise.\n        * except.c (call_eh_info): Add prototype.\n        (push_eh_info, get_eh_info, get_eh_value, get_eh_type): Likewise.\n        (get_eh_caught, get_eh_handlers, do_pop_exception): Likewise.\n        * decl2.c (is_namespace_ancestor): Add prototype.\n        (namespace_ancestor, add_using_namespace): Likewise.\n        (ambiguous_decl): Likewise.\n        * decl.c (indent): Add prototype.\n        * call.c (add_template_candidate_real): Add prototype.\n\nFrom-SVN: r19259", "tree": {"sha": "242c086714efaf4cb88e8025086ae7529f675fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/242c086714efaf4cb88e8025086ae7529f675fa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/comments", "author": null, "committer": null, "parents": [{"sha": "45bb86fdcf913a6b3a1964f84a98b78d0f14cae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45bb86fdcf913a6b3a1964f84a98b78d0f14cae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45bb86fdcf913a6b3a1964f84a98b78d0f14cae1"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "ee4daf58b1bc6ce1ec976d46a7646634fdbb11ef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -1,3 +1,42 @@\n+Fri Apr 17 08:57:35 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* tree.c (avoid_overlap): Add prototype.\n+\n+\t* spew.c (num_tokens): Add prototype.\n+\t(nth_noken, add_token, consume_token, debug_yychar): Likewise.\n+\n+\t* search.c (dfs_check_overlap): Add prototype.\n+\t(dfs_no_overlap_yet): Likewise.\n+\n+\t* pt.c (original_template): Add prototype.\n+\t(inline_needs_template_parms): Likewise.\n+\t(push_inline_template_parms_recursive): Likewise.\n+\t(retrieve_specialization, register_specialization): Likewise.\n+\t(print_candidates, reduce_template_parm_level): Likewise.\n+\t(build_template_decl, mark_template_parm): Likewise.\n+\t(tsubst_friend_function, get_bindings_real): Likewise.\n+\n+\t* method.c (start_squangling): Add prototype.\n+\t(end_squangling, check_ktype, issue_ktype): Likewise.\n+\t(build_overloaded_scope_ref, check_btype): Likewise.\n+\t(build_mangled_template_parm_index): Likewise.\n+\n+\t* lex.c (init_cpp_parse): Add prototype.\n+\t(handle_cp_pragma, handle_sysv_pragma): Likewise.\n+\t(reduce_cmp, token_cmp): Likewise.\n+\n+\t* except.c (call_eh_info): Add prototype.\n+\t(push_eh_info, get_eh_info, get_eh_value, get_eh_type): Likewise.\n+\t(get_eh_caught, get_eh_handlers, do_pop_exception): Likewise.\n+\n+\t* decl2.c (is_namespace_ancestor): Add prototype.\n+\t(namespace_ancestor, add_using_namespace): Likewise.\n+\t(ambiguous_decl): Likewise.\n+\n+\t* decl.c (indent): Add prototype.\n+\n+\t* call.c (add_template_candidate_real): Add prototype.\n+\n Fri Apr 17 01:57:12 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (build_expr_from_tree): Just return a PMF."}, {"sha": "46a5be00ef3a694eae8af067fa9d9a2f87bcfdef", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -61,6 +61,8 @@ static struct z_candidate * splice_viable PROTO((struct z_candidate *));\n static int any_viable PROTO((struct z_candidate *));\n static struct z_candidate * add_template_candidate\n \tPROTO((struct z_candidate *, tree, tree, tree, tree, int));\n+static struct z_candidate * add_template_candidate_real\n+\tPROTO((struct z_candidate *, tree, tree, tree, tree, int, tree));\n static struct z_candidate * add_template_conv_candidate \n         PROTO((struct z_candidate *, tree, tree, tree, tree));\n static struct z_candidate * add_builtin_candidates"}, {"sha": "2a966a2f830007bd5fa9402caad7b131fd590713", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -171,6 +171,10 @@ static int member_function_or_else PROTO((tree, tree, char *));\n static void bad_specifiers PROTO((tree, char *, int, int, int, int,\n \t\t\t\t  int));\n \n+#if defined (DEBUG_CP_BINDING_LEVELS)\n+static void indent PROTO((void));\n+#endif\n+\n /* a node which has tree code ERROR_MARK, and whose type is itself.\n    All erroneous expressions are replaced with this node.  All functions\n    that accept nodes as arguments should avoid generating error messages"}, {"sha": "42e0e21eaced25d59e642d4dce4c7d7634b1e4c9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -47,6 +47,10 @@ static void grok_function_init PROTO((tree, tree));\n static int finish_vtable_vardecl PROTO((tree, tree));\n static int prune_vtable_vardecl PROTO((tree, tree));\n static void finish_sigtable_vardecl PROTO((tree, tree));\n+static int is_namespace_ancestor PROTO((tree, tree));\n+static tree namespace_ancestor PROTO((tree, tree));\n+static void add_using_namespace PROTO((tree, tree, int));\n+static tree ambiguous_decl PROTO((int, tree, tree));\n \n extern int current_class_depth;\n "}, {"sha": "0a6bb3386f90ea192c06421791a2d960a65e5d1c", "filename": "gcc/cp/except.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -47,6 +47,14 @@ static rtx do_function_call PROTO((tree, tree, tree));\n static tree build_eh_type_type PROTO((tree));\n static tree build_eh_type PROTO((tree));\n static void expand_end_eh_spec PROTO((tree));\n+static tree call_eh_info PROTO((void));\n+static void push_eh_info PROTO((void));\n+static tree get_eh_info PROTO((void));\n+static tree get_eh_value PROTO((void));\n+static tree get_eh_type PROTO((void));\n+static tree get_eh_caught PROTO((void));\n+static tree get_eh_handlers PROTO((void));\n+static tree do_pop_exception PROTO((void));\n \n #if 0\n /* This is the startup, and finish stuff per exception table.  */"}, {"sha": "93a2891f2605f3c91990fd9ab8295bb109b61e60", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -87,6 +87,17 @@ static void feed_defarg PROTO((tree, tree));\n static int set_vardecl_interface_info PROTO((tree, tree));\n static void store_pending_inline PROTO((tree, struct pending_inline *));\n static void reinit_parse_for_expr PROTO((struct obstack *));\n+static int *init_cpp_parse PROTO((void));\n+static int handle_cp_pragma PROTO((char *));\n+#ifdef HANDLE_SYSV_PRAGMA\n+static int handle_sysv_pragma PROTO((FILE *, int));\n+#endif\n+#ifdef GATHER_STATISTICS\n+#ifdef REDUCE_LENGTH\n+static int reduce_cmp PROTO((int *, int *));\n+static int token_cmp PROTO((int *, int *));\n+#endif\n+#endif\n \n /* Given a file name X, return the nondirectory portion.\n    Keep in mind that X can be computed more than once.  */"}, {"sha": "139086b088ec2f1c0ab6745ebca7c4a149668b13", "filename": "gcc/cp/method.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -75,6 +75,13 @@ static tree build_decl_overload_real PROTO((tree, tree, tree, tree,\n static void build_template_template_parm_names PROTO((tree));\n static void build_template_parm_names PROTO((tree, tree));\n static void build_underscore_int PROTO((int));\n+static void start_sqangling PROTO((void));\n+static void end_sqangling PROTO((void));\n+static int check_ktype PROTO((tree, int));\n+static int issue_ktype PROTO((tree));\n+static void build_overloaded_scope_ref PROTO((tree));\n+static void build_mangled_template_parm_index PROTO((char *, tree));\n+static int check_btype PROTO((tree));\n \n # define OB_INIT() (scratch_firstobj ? (obstack_free (&scratch_obstack, scratch_firstobj), 0) : 0)\n # define OB_PUTC(C) (obstack_1grow (&scratch_obstack, (C)))"}, {"sha": "7a8365c3856fdcfc6971e750f065304cfe8a2aba", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -90,6 +90,17 @@ static tree convert_nontype_argument PROTO((tree, tree));\n static tree get_bindings_overload PROTO((tree, tree, tree));\n static int for_each_template_parm PROTO((tree, tree_fn_t, void*));\n static tree build_template_parm_index PROTO((int, int, int, tree, tree));\n+static tree original_template PROTO((tree));\n+static int inline_needs_template_parms PROTO((tree));\n+static void push_inline_template_parms_recursive PROTO((tree, int));\n+static tree retrieve_specialization PROTO((tree, tree));\n+static void register_specialization PROTO((tree, tree, tree));\n+static void print_candidates PROTO((tree));\n+static tree reduce_template_parm_level PROTO((tree, tree, int));\n+static tree build_template_decl PROTO((tree, tree));\n+static int mark_template_parm PROTO((tree, void *));\n+static tree tsubst_friend_function PROTO((tree, tree));\n+static tree get_bindings_real PROTO((tree, tree, tree, int));\n \n /* Do any processing required when DECL (a member template declaration\n    using TEMPLATE_PARAMETERS as its innermost parameter list) is"}, {"sha": "820dbf1257fd5fd0a4be85ee93c70350db987220", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -90,6 +90,8 @@ static tree virtual_context PROTO((tree, tree, tree));\n static tree get_template_base_recursive\n \tPROTO((tree, tree, tree, int));\n static void dfs_walk PROTO((tree, void (*) (tree), int (*) (tree)));\n+static void dfs_check_overlap PROTO((tree));\n+static int dfs_no_overlap_yet PROTO((tree));\n static void envelope_add_decl PROTO((tree, tree, tree *));\n static int get_base_distance_recursive\n \tPROTO((tree, int, int, int, int *, tree *, tree, tree *,"}, {"sha": "a13f659e1f4c5dc0ac6a27dd0b1c1354d358b8ed", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -49,6 +49,14 @@ static int do_aggr PROTO((void));\n static int probe_obstack PROTO((struct obstack *, tree, unsigned int));\n static void scan_tokens PROTO((int));\n \n+#ifdef SPEW_DEBUG\n+static int num_tokens PROTO((void));\n+static struct token *nth_token PROTO((int));\n+static void add_token PROTO((struct token *));\n+static void consume_token PROTO((void));\n+static int debug_yychar PROTO((int));\n+#endif\n+\n /* From lex.c: */\n /* the declaration found for the last IDENTIFIER token read in.\n    yylex must look this up to detect typedefs, which get token type TYPENAME,"}, {"sha": "de3906c580230c028206307c31d46b42bf1962ac", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ac77ce5ebf654d078ebe323b04fca7b17ea8c8/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=69ac77ce5ebf654d078ebe323b04fca7b17ea8c8", "patch": "@@ -44,6 +44,7 @@ static tree list_hash_lookup PROTO((int, int, int, int, tree, tree,\n \t\t\t\t    tree));\n static void propagate_binfo_offsets PROTO((tree, tree));\n static void unshare_base_binfos PROTO((tree));\n+static int avoid_overlap PROTO((tree, tree));\n \n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n "}]}