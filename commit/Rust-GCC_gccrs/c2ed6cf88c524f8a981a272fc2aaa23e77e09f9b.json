{"sha": "c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlZDZjZjg4YzUyNGY4YTk4MWEyNzJmYzJhYWEyM2U3N2UwOWY5Yg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-16T14:25:07Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-16T14:25:07Z"}, "message": "builtins.c (std_gimplify_va_arg_expr): Use targetm.calls.function_arg_boundary.\n\n\t* builtins.c (std_gimplify_va_arg_expr): Use\n\ttargetm.calls.function_arg_boundary.\n\t* function.c (assign_parms, locate_and_pad_parm): Likewise.\n\t* calls.c (struct arg_data): Update comment.\n\t* defaults.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* target.def (function_arg_boundary): Define.\n\t* targhooks.h (default_function_arg_boundary): Declare.\n\t* targhooks.c (default_function_arg_boundary): Define.\n\t* doc/tm.texi.in (FUNCTION_ARG_PADDING): Use\n\tTARGET_FUNCTION_ARG_BOUNDARY.\n\t(FUNCTION_ARG_BOUNDARY): Delete.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): New.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (FUNCTION_ARG_BOUNDARY): Poison.\n\t* config/arc/arc.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/arc/arc.c (arc_function_arg_boundary): Define.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/arm/arm.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/arm/arm-protos.h (arm_needs_doubleword_align): Delete.\n\t* config/arm/arm.c (arm_needs_doubleword_align): Make static.\n\t(arm_function_arg_boundary): Define.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/frv/frv.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/frv/frv-protos.h (frv_function_arg_boundary): Delete.\n\t* config/frv/frv.c (frv_function_arg_boundary): Make static.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/i386/i386.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/i386/i386-protos.h (ix86_function_arg_boundary): Delete.\n\t* config/i386/i386.c (ix86_function_arg_boundary): Make static.\n\t(ix86_compat_function_arg_boundary): Take and return unsigned int.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/ia64/ia64.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/ia64/ia64-protos.h (ia64_function_arg_boundary): Delete.\n\t* config/ia64/ia64.c (ia64_function_arg_boundary): Make static.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/m32c/m32c.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/m32c/m32c.c (m32c_function_arg_boundary): Define.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/m32r/m32r.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/mcore/mcore.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/mcore/mcore.c (mcore_function_arg_boundary): Define.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/mips/mips.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/mips/mips-protos.h (mips_function_arg_boundary): Delete.\n\t* config/mips/mips.c (mips_function_arg_boundary): Make static.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/pa/pa.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/pa/pa.c (pa_function_arg_boundary): Define.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/picochip/picochip.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/picochip/picochip-protos.h\n\t(picochip_get_function_arg_boundary): Delete.\n\t* config/picochip/picochip.c (picochip_get_function_arg_boundary):\n\tRename to...\n\t(picochip_function_arg_boundary): ...this.  Make static.\n\t(picochip_function_arg, picochip_arg_partial_bytes): Adjust.\n\t(picochip_arg_advance): Adjust.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/rs6000/rs6000.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/rs6000/rs6000-protos.h (function_arg_boundary): Delete.\n\t* config/rs6000/rs6000.c (function_arg_boundary): Rename to...\n\t(rs6000_function_arg_boundary): ...this.  Make static.\n\t(rs6000_parm_start, rs6000_gimplify_va_arg): Adjust.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/rx/rx.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/rx/rx.c (rx_function_arg_boundary): Define.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/sparc/sparc.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/sparc/sparc.c (sparc_function_arg_boundary): Define.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\t* config/xtensa/xtensa.h (FUNCTION_ARG_BOUNDARY): Delete.\n\t* config/xtensa/xtensa-protos.h (function_arg_boundary): Delete.\n\t* config/xtensa/xtensa.c (function_arg_boundary): Rename to...\n\t(xtensa_function_arg_boundary): ...this.  Make static.\n\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n\nFrom-SVN: r166803", "tree": {"sha": "e272ca26ebebda9e3693e93448028f82a90b0575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e272ca26ebebda9e3693e93448028f82a90b0575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/comments", "author": null, "committer": null, "parents": [{"sha": "d824aea207d38cb67dcafd992c9ce3fd46afb7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d824aea207d38cb67dcafd992c9ce3fd46afb7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d824aea207d38cb67dcafd992c9ce3fd46afb7d9"}], "stats": {"total": 466, "additions": 289, "deletions": 177}, "files": [{"sha": "7b31dc64aca525aa544ddcb088cfaa5531d6f02f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1,3 +1,81 @@\n+2010-11-16  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* builtins.c (std_gimplify_va_arg_expr): Use\n+\ttargetm.calls.function_arg_boundary.\n+\t* function.c (assign_parms, locate_and_pad_parm): Likewise.\n+\t* calls.c (struct arg_data): Update comment.\n+\t* defaults.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* target.def (function_arg_boundary): Define.\n+\t* targhooks.h (default_function_arg_boundary): Declare.\n+\t* targhooks.c (default_function_arg_boundary): Define.\n+\t* doc/tm.texi.in (FUNCTION_ARG_PADDING): Use\n+\tTARGET_FUNCTION_ARG_BOUNDARY.\n+\t(FUNCTION_ARG_BOUNDARY): Delete.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): New.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (FUNCTION_ARG_BOUNDARY): Poison.\n+\t* config/arc/arc.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/arc/arc.c (arc_function_arg_boundary): Define.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/arm/arm.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/arm/arm-protos.h (arm_needs_doubleword_align): Delete.\n+\t* config/arm/arm.c (arm_needs_doubleword_align): Make static.\n+\t(arm_function_arg_boundary): Define.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/frv/frv.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/frv/frv-protos.h (frv_function_arg_boundary): Delete.\n+\t* config/frv/frv.c (frv_function_arg_boundary): Make static.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/i386/i386.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/i386/i386-protos.h (ix86_function_arg_boundary): Delete.\n+\t* config/i386/i386.c (ix86_function_arg_boundary): Make static.\n+\t(ix86_compat_function_arg_boundary): Take and return unsigned int.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/ia64/ia64.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/ia64/ia64-protos.h (ia64_function_arg_boundary): Delete.\n+\t* config/ia64/ia64.c (ia64_function_arg_boundary): Make static.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/m32c/m32c.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/m32c/m32c.c (m32c_function_arg_boundary): Define.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/m32r/m32r.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/mcore/mcore.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/mcore/mcore.c (mcore_function_arg_boundary): Define.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/mips/mips.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/mips/mips-protos.h (mips_function_arg_boundary): Delete.\n+\t* config/mips/mips.c (mips_function_arg_boundary): Make static.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/pa/pa.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/pa/pa.c (pa_function_arg_boundary): Define.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/picochip/picochip.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/picochip/picochip-protos.h\n+\t(picochip_get_function_arg_boundary): Delete.\n+\t* config/picochip/picochip.c (picochip_get_function_arg_boundary):\n+\tRename to...\n+\t(picochip_function_arg_boundary): ...this.  Make static.\n+\t(picochip_function_arg, picochip_arg_partial_bytes): Adjust.\n+\t(picochip_arg_advance): Adjust.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/rs6000/rs6000.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/rs6000/rs6000-protos.h (function_arg_boundary): Delete.\n+\t* config/rs6000/rs6000.c (function_arg_boundary): Rename to...\n+\t(rs6000_function_arg_boundary): ...this.  Make static.\n+\t(rs6000_parm_start, rs6000_gimplify_va_arg): Adjust.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/rx/rx.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/rx/rx.c (rx_function_arg_boundary): Define.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/sparc/sparc.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/sparc/sparc.c (sparc_function_arg_boundary): Define.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\t* config/xtensa/xtensa.h (FUNCTION_ARG_BOUNDARY): Delete.\n+\t* config/xtensa/xtensa-protos.h (function_arg_boundary): Delete.\n+\t* config/xtensa/xtensa.c (function_arg_boundary): Rename to...\n+\t(xtensa_function_arg_boundary): ...this.  Make static.\n+\t(TARGET_FUNCTION_ARG_BOUNDARY): Define.\n+\n 2010-11-16  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* expr.c (alignment_for_piecewise_move): New function."}, {"sha": "4eb704743820be9ececcb3f1590a50532188192b", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -4698,7 +4698,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n     type = build_pointer_type (type);\n \n   align = PARM_BOUNDARY / BITS_PER_UNIT;\n-  boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n+  boundary = targetm.calls.function_arg_boundary (TYPE_MODE (type), type);\n \n   /* When we align parameter on stack for caller, if the parameter\n      alignment is beyond MAX_SUPPORTED_STACK_ALIGNMENT, it will be"}, {"sha": "5297763da5f95aab7a625f7d4484ddb35ed3a505", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -89,7 +89,7 @@ struct arg_data\n   rtx stack;\n   /* Location on the stack of the start of this argument slot.  This can\n      differ from STACK if this arg pads downward.  This location is known\n-     to be aligned to FUNCTION_ARG_BOUNDARY.  */\n+     to be aligned to TARGET_FUNCTION_ARG_BOUNDARY.  */\n   rtx stack_slot;\n   /* Place that this stack area has been saved, if needed.  */\n   rtx save_area;"}, {"sha": "2b1c704b3184b9eddbfa0cf8645c982b0c0b84fa", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -98,6 +98,7 @@ static rtx arc_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t     const_tree, bool);\n static void arc_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n+static unsigned int arc_function_arg_boundary (enum machine_mode, const_tree);\n static void arc_trampoline_init (rtx, tree, rtx);\n static void arc_option_override (void);\n \n@@ -156,6 +157,8 @@ static const struct attribute_spec arc_attribute_table[] =\n #define TARGET_FUNCTION_ARG arc_function_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE arc_function_arg_advance\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY arc_function_arg_boundary\n #undef TARGET_CALLEE_COPIES\n #define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n \n@@ -2423,6 +2426,22 @@ arc_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t  + ROUND_ADVANCE_ARG (mode, type));\n }\n \n+/* If defined, a C expression that gives the alignment boundary, in bits,\n+   of an argument with the specified mode and type.  If it is not defined, \n+   PARM_BOUNDARY is used for all arguments.  */\n+#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n+/* Worker function for TARGET_FUNCTION_ARG_BOUNDARY.  */\n+\n+static unsigned int\n+arc_function_arg_boundary (enum machine_mode mode, const_tree type)\n+{\n+  return (type != NULL_TREE\n+\t  ? TYPE_ALIGN (type)\n+\t  : (GET_MODE_BITSIZE (mode) <= PARM_BOUNDARY\n+\t     ? PARM_BOUNDARY\n+\t     : 2 * PARM_BOUNDARY));\n+}\n+\n /* Trampolines.  */\n /* ??? This doesn't work yet because GCC will use as the address of a nested\n    function the address of the trampoline.  We need to use that address"}, {"sha": "259a33a503d19cb3a9344fc3c5524ccae0037598", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -520,13 +520,6 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define FUNCTION_ARG_REGNO_P(N) \\\n ((unsigned) (N) < MAX_ARC_PARM_REGS)\n \n-/* If defined, a C expression that gives the alignment boundary, in bits,\n-   of an argument with the specified mode and type.  If it is not defined, \n-   PARM_BOUNDARY is used for all arguments.  */\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-(((TYPE) ? TYPE_ALIGN (TYPE) : GET_MODE_BITSIZE (MODE)) <= PARM_BOUNDARY \\\n- ? PARM_BOUNDARY \\\n- : 2 * PARM_BOUNDARY)\n \f\n /* Function results.  */\n "}, {"sha": "1b1fe12ab6e2cb46553f9c0ef5a45971ea40c551", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -155,7 +155,6 @@ extern unsigned int arm_sync_loop_insns (rtx , rtx *);\n extern void arm_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n extern bool arm_pad_arg_upward (enum machine_mode, const_tree);\n extern bool arm_pad_reg_upward (enum machine_mode, tree, int);\n-extern bool arm_needs_doubleword_align (enum machine_mode, const_tree);\n #endif\n extern int arm_apply_result_size (void);\n extern rtx aapcs_libcall_value (enum machine_mode);"}, {"sha": "83fbdfa858a71a19884c242b5cbcc88f62a88d36", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -65,6 +65,7 @@ typedef struct minipool_fixup   Mfix;\n void (*arm_lang_output_object_attributes_hook)(void);\n \n /* Forward function declarations.  */\n+static bool arm_needs_doubleword_align (enum machine_mode, const_tree);\n static int arm_compute_static_chain_stack_bytes (void);\n static arm_stack_offsets *arm_get_frame_offsets (void);\n static void arm_add_gc_roots (void);\n@@ -168,6 +169,7 @@ static rtx arm_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t     const_tree, bool);\n static void arm_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n+static unsigned int arm_function_arg_boundary (enum machine_mode, const_tree);\n static rtx aapcs_allocate_return_reg (enum machine_mode, const_tree,\n \t\t\t\t      const_tree);\n static int aapcs_select_return_coproc (const_tree, const_tree);\n@@ -415,6 +417,8 @@ static const struct default_options arm_option_optimization_table[] =\n #define TARGET_FUNCTION_ARG arm_function_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE arm_function_arg_advance\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY arm_function_arg_boundary\n \n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS arm_setup_incoming_varargs\n@@ -4527,7 +4531,7 @@ arm_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n \n \n /* Return true if mode/type need doubleword alignment.  */\n-bool\n+static bool\n arm_needs_doubleword_align (enum machine_mode mode, const_tree type)\n {\n   return (GET_MODE_ALIGNMENT (mode) > PARM_BOUNDARY\n@@ -4606,6 +4610,14 @@ arm_function_arg (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n   return gen_rtx_REG (mode, pcum->nregs);\n }\n \n+static unsigned int\n+arm_function_arg_boundary (enum machine_mode mode, const_tree type)\n+{\n+  return (ARM_DOUBLEWORD_ALIGN && arm_needs_doubleword_align (mode, type)\n+\t  ? DOUBLEWORD_ALIGNMENT\n+\t  : PARM_BOUNDARY);\n+}\n+\n static int\n arm_arg_partial_bytes (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n \t\t       tree type, bool named)"}, {"sha": "483b2228e543020693b7ffaf814a1375b56113c6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1731,14 +1731,6 @@ typedef struct\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   arm_init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME), (FNDECL))\n \n-/* If defined, a C expression that gives the alignment boundary, in bits, of an\n-   argument with the specified mode and type.  If it is not defined,\n-   `PARM_BOUNDARY' is used for all arguments.  */\n-#define FUNCTION_ARG_BOUNDARY(MODE,TYPE) \\\n-   ((ARM_DOUBLEWORD_ALIGN && arm_needs_doubleword_align (MODE, TYPE)) \\\n-   ? DOUBLEWORD_ALIGNMENT \\\n-   : PARM_BOUNDARY )\n-\n /* 1 if N is a possible register number for function argument passing.\n    On the ARM, r0-r3 are used to pass args.  */\n #define FUNCTION_ARG_REGNO_P(REGNO)\t\t\t\t\t\\"}, {"sha": "bba170549e70379be489b4ff0d44a78c486db637", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -52,7 +52,6 @@ extern rtx frv_find_base_term\t\t\t(rtx);\n extern void frv_init_cumulative_args\t\t(CUMULATIVE_ARGS *, tree,\n \t\t\t\t\t\t rtx, tree, int);\n \n-extern int frv_function_arg_boundary\t\t(enum machine_mode, tree);\n extern bool frv_function_value_regno_p\t\t(const unsigned int);\n #endif /* TREE_CODE */\n "}, {"sha": "b6b7c006889ebc4f98a0f34b6746b102fdf65f10", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -396,6 +396,8 @@ static rtx frv_function_incoming_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n static void frv_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n+static unsigned int frv_function_arg_boundary\t(enum machine_mode,\n+\t\t\t\t\t\t const_tree);\n static void frv_output_dwarf_dtprel\t\t(FILE *, int, rtx)\n   ATTRIBUTE_UNUSED;\n static reg_class_t frv_secondary_reload\t\t(bool, rtx, reg_class_t,\n@@ -500,6 +502,8 @@ static const struct default_options frv_option_optimization_table[] =\n #define TARGET_FUNCTION_INCOMING_ARG frv_function_incoming_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE frv_function_arg_advance\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY frv_function_arg_boundary\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS frv_expand_builtin_saveregs\n@@ -3195,9 +3199,9 @@ frv_must_pass_in_stack (enum machine_mode mode, const_tree type)\n    argument with the specified mode and type.  If it is not defined,\n    `PARM_BOUNDARY' is used for all arguments.  */\n \n-int\n+static unsigned int\n frv_function_arg_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n-                           tree type ATTRIBUTE_UNUSED)\n+                           const_tree type ATTRIBUTE_UNUSED)\n {\n   return BITS_PER_WORD;\n }"}, {"sha": "b498c614ce51105233cae84fe30412c296b8fc82", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1561,13 +1561,6 @@ typedef struct frv_stack {\n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME) \\\n   frv_init_cumulative_args (&CUM, FNTYPE, LIBNAME, NULL, TRUE)\n \n-/* If defined, a C expression that gives the alignment boundary, in bits, of an\n-   argument with the specified mode and type.  If it is not defined,\n-   `PARM_BOUNDARY' is used for all arguments.  */\n-\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-  frv_function_arg_boundary (MODE, TYPE)\n-\n /* A C expression that is nonzero if REGNO is the number of a hard register in\n    which function arguments are sometimes passed.  This does *not* include\n    implicit arguments such as the static chain and the structure-value address."}, {"sha": "c2415381b010f826e4aeb68487f4157ebc4b591d", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -140,7 +140,6 @@ extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);\n extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_arg_regno_p (int);\n extern void ix86_asm_output_function_label (FILE *, const char *, tree);\n-extern int ix86_function_arg_boundary (enum machine_mode, const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);\n extern void ix86_free_from_memory (enum machine_mode);\n extern void ix86_call_abi_override (const_tree);"}, {"sha": "11820cfe6ced7551180c9145e387637d5c5c790f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -2225,6 +2225,8 @@ static bool ext_80387_constants_init = 0;\n static struct machine_function * ix86_init_machine_status (void);\n static rtx ix86_function_value (const_tree, const_tree, bool);\n static bool ix86_function_value_regno_p (const unsigned int);\n+static unsigned int ix86_function_arg_boundary (enum machine_mode,\n+\t\t\t\t\t\tconst_tree);\n static rtx ix86_static_chain (const_tree, bool);\n static int ix86_function_regparm (const_tree, const_tree);\n static void ix86_compute_frame_layout (struct ix86_frame *);\n@@ -7062,9 +7064,9 @@ ix86_compat_aligned_value_p (const_tree type)\n    XXX: This function is obsolete and is only used for checking psABI\n    compatibility with previous versions of GCC.  */\n \n-static int\n+static unsigned int\n ix86_compat_function_arg_boundary (enum machine_mode mode,\n-\t\t\t\t   const_tree type, int align)\n+\t\t\t\t   const_tree type, unsigned int align)\n {\n   /* In 32bit, only _Decimal128 and __float128 are aligned to their\n      natural boundaries.  */\n@@ -7149,10 +7151,10 @@ ix86_contains_aligned_value_p (const_tree type)\n /* Gives the alignment boundary, in bits, of an argument with the\n    specified mode and type.  */\n \n-int\n+static unsigned int\n ix86_function_arg_boundary (enum machine_mode mode, const_tree type)\n {\n-  int align;\n+  unsigned int align;\n   if (type)\n     {\n       /* Since the main variant type is used for call, we convert it to\n@@ -7167,7 +7169,7 @@ ix86_function_arg_boundary (enum machine_mode mode, const_tree type)\n   else\n     {\n       static bool warned;\n-      int saved_align = align;\n+      unsigned int saved_align = align;\n \n       if (!TARGET_64BIT)\n \t{\n@@ -8157,7 +8159,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n      alignment is beyond MAX_SUPPORTED_STACK_ALIGNMENT, it will be\n      aligned at MAX_SUPPORTED_STACK_ALIGNMENT.  We will match callee\n      here with caller.  */\n-  arg_boundary = FUNCTION_ARG_BOUNDARY (VOIDmode, type);\n+  arg_boundary = ix86_function_arg_boundary (VOIDmode, type);\n   if ((unsigned int) arg_boundary > MAX_SUPPORTED_STACK_ALIGNMENT)\n     arg_boundary = MAX_SUPPORTED_STACK_ALIGNMENT;\n \n@@ -34579,6 +34581,8 @@ ix86_autovectorize_vector_sizes (void)\n #define TARGET_FUNCTION_ARG_ADVANCE ix86_function_arg_advance\n #undef TARGET_FUNCTION_ARG\n #define TARGET_FUNCTION_ARG ix86_function_arg\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY ix86_function_arg_boundary\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE ix86_pass_by_reference\n #undef TARGET_INTERNAL_ARG_POINTER"}, {"sha": "170ad5002e7b6a94e8b5839280d8cad50cedda89", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -844,13 +844,6 @@ enum target_cpu_default\n   ix86_minimum_alignment (EXP, MODE, ALIGN)\n \n \n-/* If defined, a C expression that gives the alignment boundary, in\n-   bits, of an argument with the specified mode and type.  If it is\n-   not defined, `PARM_BOUNDARY' is used for all arguments.  */\n-\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-  ix86_function_arg_boundary ((MODE), (TYPE))\n-\n /* Set this nonzero if move instructions will actually fail to work\n    when given unaligned data.  */\n #define STRICT_ALIGNMENT 0"}, {"sha": "b841152586ad2d9652a742d04750b809e3cee8f9", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -67,7 +67,6 @@ extern rtx ia64_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern rtx ia64_va_arg (tree, tree);\n #endif /* RTX_CODE */\n \n-extern int ia64_function_arg_boundary (enum machine_mode, tree);\n extern void ia64_asm_output_external (FILE *, tree, const char *);\n extern void ia64_vms_output_aligned_decl_common (FILE *, tree, const char *,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT,"}, {"sha": "a657d4eafde69fd5738b7ed201144839851361c4", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -217,6 +217,8 @@ static rtx ia64_function_incoming_arg (CUMULATIVE_ARGS *,\n \t\t\t\t       enum machine_mode, const_tree, bool);\n static void ia64_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n+static unsigned int ia64_function_arg_boundary (enum machine_mode,\n+\t\t\t\t\t\tconst_tree);\n static bool ia64_function_ok_for_sibcall (tree, tree);\n static bool ia64_return_in_memory (const_tree, const_tree);\n static rtx ia64_function_value (const_tree, const_tree, bool);\n@@ -496,6 +498,8 @@ static const struct default_options ia64_option_optimization_table[] =\n #define TARGET_FUNCTION_INCOMING_ARG ia64_function_incoming_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE ia64_function_arg_advance\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY ia64_function_arg_boundary\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK ia64_output_mi_thunk\n@@ -4666,10 +4670,9 @@ ia64_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    boundary.  On ILP32 HPUX, TFmode arguments start on next even boundary\n    even though their normal alignment is 8 bytes.  See ia64_function_arg.  */\n \n-int\n-ia64_function_arg_boundary (enum machine_mode mode, tree type)\n+static unsigned int\n+ia64_function_arg_boundary (enum machine_mode mode, const_tree type)\n {\n-\n   if (mode == TFmode && TARGET_HPUX && TARGET_ILP32)\n     return PARM_BOUNDARY * 2;\n "}, {"sha": "e2705589b811daa84b9d9837e85a16f54465d6c2", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1070,15 +1070,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   (CUM).atypes[6] = (CUM).atypes[7] = I64;                              \\\n } while (0)\n \n-/* If defined, a C expression that gives the alignment boundary, in bits, of an\n-   argument with the specified mode and type.  */\n-\n-/* Return the alignment boundary in bits for an argument with a specified\n-   mode and type.  */\n-\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-  ia64_function_arg_boundary (MODE, TYPE)\n-\n /* A C expression that is nonzero if REGNO is the number of a hard register in\n    which function arguments are sometimes passed.  This does *not* include\n    implicit arguments such as the static chain and the structure-value address."}, {"sha": "433af644def7772b3fcb4c05b8227a071b9e4dc8", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -169,6 +169,8 @@ static rtx iq2000_function_arg\t      (CUMULATIVE_ARGS *,\n \t\t\t\t       enum machine_mode, const_tree, bool);\n static void iq2000_function_arg_advance (CUMULATIVE_ARGS *,\n \t\t\t\t\t enum machine_mode, const_tree, bool);\n+static unsigned int iq2000_function_arg_boundary (enum machine_mode,\n+\t\t\t\t\t\t  const_tree);\n static void iq2000_va_start\t      (tree, rtx);\n static bool iq2000_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool iq2000_can_eliminate      (const int, const int);\n@@ -242,6 +244,8 @@ static const struct default_options iq2000_option_optimization_table[] =\n #define TARGET_FUNCTION_ARG\t\tiq2000_function_arg\n #undef  TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE\tiq2000_function_arg_advance\n+#undef  TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY\tiq2000_function_arg_boundary\n \n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS\tiq2000_setup_incoming_varargs\n@@ -1374,6 +1378,18 @@ iq2000_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return ret;\n }\n \n+static unsigned int\n+iq2000_function_arg_boundary (enum machine_mode mode, const_tree type)\n+{\n+  return (type != NULL_TREE\n+\t  ? (TYPE_ALIGN (type) <= PARM_BOUNDARY\n+\t     ? PARM_BOUNDARY\n+\t     : TYPE_ALIGN (type))\n+\t  : (GET_MODE_ALIGNMENT (mode) <= PARM_BOUNDARY\n+\t     ? PARM_BOUNDARY\n+\t     : GET_MODE_ALIGNMENT (mode)));\n+}\n+\n static int\n iq2000_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t  tree type ATTRIBUTE_UNUSED,"}, {"sha": "68b700d2d5aa4e3ad7ff7ed51bfd2d82cc6e9e64", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -390,15 +390,6 @@ typedef struct iq2000_args\n \t  && (GET_MODE_CLASS (MODE) == MODE_INT)))\t\t\t\\\n       ? downward : upward))\n \n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE)\t\t\t\t\\\n-  (((TYPE) != 0)\t\t\t\t\t\t\t\\\n-\t? ((TYPE_ALIGN(TYPE) <= PARM_BOUNDARY)\t\t\t\t\\\n-\t\t? PARM_BOUNDARY\t\t\t\t\t\t\\\n-\t\t: TYPE_ALIGN(TYPE))\t\t\t\t\t\\\n-\t: ((GET_MODE_ALIGNMENT(MODE) <= PARM_BOUNDARY)\t\t\t\\\n-\t\t? PARM_BOUNDARY\t\t\t\t\t\t\\\n-\t\t: GET_MODE_ALIGNMENT(MODE)))\n-\n #define FUNCTION_ARG_REGNO_P(N)\t\t\t\t\t\t\\\n   (((N) >= GP_ARG_FIRST && (N) <= GP_ARG_LAST))\t\t\t\n "}, {"sha": "a555415c34f202507ed279ac569e0ea3b651706e", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -80,6 +80,7 @@ static bool m32c_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n static void m32c_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n+static unsigned int m32c_function_arg_boundary (enum machine_mode, const_tree);\n static int m32c_pushm_popm (Push_Pop_Type);\n static bool m32c_strict_argument_naming (CUMULATIVE_ARGS *);\n static rtx m32c_struct_value_rtx (tree, int);\n@@ -1637,6 +1638,16 @@ m32c_function_arg_advance (CUMULATIVE_ARGS * ca,\n     ca->parm_num++;\n }\n \n+/* Implements TARGET_FUNCTION_ARG_BOUNDARY.  */\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY m32c_function_arg_boundary\n+static unsigned int\n+m32c_function_arg_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t    const_tree type ATTRIBUTE_UNUSED)\n+{\n+  return (TARGET_A16 ? 8 : 16);\n+}\n+\n /* Implements FUNCTION_ARG_REGNO_P.  */\n int\n m32c_function_arg_regno_p (int r)"}, {"sha": "503044cd9c93ce70e2f9fd10f3a6d5efb2c2239c", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -520,7 +520,6 @@ typedef struct m32c_cumulative_args\n #define CUMULATIVE_ARGS m32c_cumulative_args\n #define INIT_CUMULATIVE_ARGS(CA,FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS) \\\n \tm32c_init_cumulative_args (&(CA),FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS)\n-#define FUNCTION_ARG_BOUNDARY(MODE,TYPE) (TARGET_A16 ? 8 : 16)\n #define FUNCTION_ARG_REGNO_P(r) m32c_function_arg_regno_p (r)\n \n /* How Large Values Are Returned */"}, {"sha": "d24cda6e82c99f24ac6fa7a7d3658100788a034f", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -780,15 +780,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define FUNCTION_ARG_REGNO_P(N) \\\n   ((unsigned) (N) < M32R_MAX_PARM_REGS)\n \n-/* If defined, a C expression that gives the alignment boundary, in bits,\n-   of an argument with the specified mode and type.  If it is not defined, \n-   PARM_BOUNDARY is used for all arguments.  */\n-#if 0\n-/* We assume PARM_BOUNDARY == UNITS_PER_WORD here.  */\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-  (((TYPE) ? TYPE_ALIGN (TYPE) : GET_MODE_BITSIZE (MODE)) <= PARM_BOUNDARY \\\n-   ? PARM_BOUNDARY : 2 * PARM_BOUNDARY)\n-#endif\n \f\n /* Function results.  */\n "}, {"sha": "3c3e1bba811b06b31c2b5a40dc3f9ebf531e5e98", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -148,6 +148,8 @@ static rtx        mcore_function_arg            (CUMULATIVE_ARGS *,\n static void       mcore_function_arg_advance    (CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t const_tree, bool);\n+static unsigned int mcore_function_arg_boundary (enum machine_mode,\n+\t\t\t\t\t\t const_tree);\n static void       mcore_asm_trampoline_template (FILE *);\n static void       mcore_trampoline_init\t\t(rtx, tree, rtx);\n static void       mcore_option_override\t\t(void);\n@@ -239,6 +241,8 @@ static const struct default_options mcore_option_optimization_table[] =\n #define TARGET_FUNCTION_ARG\t\tmcore_function_arg\n #undef  TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE\tmcore_function_arg_advance\n+#undef  TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY\tmcore_function_arg_boundary\n \n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS\tmcore_setup_incoming_varargs\n@@ -2840,6 +2844,16 @@ mcore_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t  + (int)named * mcore_num_arg_regs (mode, type));\n }\n \n+static unsigned int\n+mcore_function_arg_boundary (enum machine_mode mode,\n+\t\t\t     const_tree type ATTRIBUTE_UNUSED)\n+{\n+  /* Doubles must be aligned to an 8 byte boundary.  */\n+  return (mode != BLKmode && GET_MODE_SIZE (mode) == 8\n+\t  ? BIGGEST_ALIGNMENT\n+\t  : PARM_BOUNDARY);\n+}\n+\n /* Returns the number of bytes of argument registers required to hold *part*\n    of a parameter of machine mode MODE and type TYPE (which may be NULL if\n    the type is not known).  If the argument fits entirely in the argument"}, {"sha": "f1be99492025338397e23897a328842462c38321", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -119,11 +119,6 @@ extern char * mcore_current_function_name;\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY  \t32\n \n-/* Doubles must be aligned to an 8 byte boundary.  */\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-  ((MODE != BLKmode && (GET_MODE_SIZE (MODE) == 8)) \\\n-   ? BIGGEST_ALIGNMENT : PARM_BOUNDARY)\n-     \n /* Boundary (in *bits*) on which stack pointer should be aligned.  */\n #define STACK_BOUNDARY  (TARGET_8ALIGN ? 64 : 32)\n "}, {"sha": "6f5801c098e1e076eddf625e15e7c4c8e305db6e", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -240,7 +240,6 @@ extern bool mips_expand_block_move (rtx, rtx, rtx);\n extern void mips_expand_synci_loop (rtx, rtx);\n \n extern void mips_init_cumulative_args (CUMULATIVE_ARGS *, tree);\n-extern int mips_function_arg_boundary (enum machine_mode, const_tree);\n extern bool mips_pad_arg_upward (enum machine_mode, const_tree);\n extern bool mips_pad_reg_upward (enum machine_mode, tree);\n "}, {"sha": "f381890e3b5f13b68add49944d94ffcce429be68", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1190,6 +1190,7 @@ static const struct mips_rtx_cost_data\n static rtx mips_find_pic_call_symbol (rtx, rtx);\n static int mips_register_move_cost (enum machine_mode, reg_class_t,\n \t\t\t\t    reg_class_t);\n+static unsigned int mips_function_arg_boundary (enum machine_mode, const_tree);\n \f\n /* This hash table keeps track of implicit \"mips16\" and \"nomips16\" attributes\n    for -mflip_mips16.  It maps decl names onto a boolean mode setting.  */\n@@ -4783,7 +4784,8 @@ mips_get_arg_info (struct mips_arg_info *info, const CUMULATIVE_ARGS *cum,\n     }\n \n   /* See whether the argument has doubleword alignment.  */\n-  doubleword_aligned_p = FUNCTION_ARG_BOUNDARY (mode, type) > BITS_PER_WORD;\n+  doubleword_aligned_p = (mips_function_arg_boundary (mode, type)\n+\t\t\t  > BITS_PER_WORD);\n \n   /* Set REG_OFFSET to the register count we're interested in.\n      The EABI allocates the floating-point registers separately,\n@@ -5008,11 +5010,11 @@ mips_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n   return info.stack_words > 0 ? info.reg_words * UNITS_PER_WORD : 0;\n }\n \n-/* Implement FUNCTION_ARG_BOUNDARY.  Every parameter gets at least\n-   PARM_BOUNDARY bits of alignment, but will be given anything up\n+/* Implement TARGET_FUNCTION_ARG_BOUNDARY.  Every parameter gets at\n+   least PARM_BOUNDARY bits of alignment, but will be given anything up\n    to STACK_BOUNDARY bits if the type requires it.  */\n \n-int\n+static unsigned int\n mips_function_arg_boundary (enum machine_mode mode, const_tree type)\n {\n   unsigned int alignment;\n@@ -16542,6 +16544,8 @@ mips_shift_truncation_mask (enum machine_mode mode)\n #define TARGET_FUNCTION_ARG mips_function_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE mips_function_arg_advance\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY mips_function_arg_boundary\n \n #undef TARGET_MODE_REP_EXTENDED\n #define TARGET_MODE_REP_EXTENDED mips_mode_rep_extended"}, {"sha": "49440ff875faebe51fbb797de36b9bbbe0397329", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -2250,8 +2250,6 @@ typedef struct mips_args {\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   mips_init_cumulative_args (&CUM, FNTYPE)\n \n-#define FUNCTION_ARG_BOUNDARY mips_function_arg_boundary\n-\n #define FUNCTION_ARG_PADDING(MODE, TYPE) \\\n   (mips_pad_arg_upward (MODE, TYPE) ? upward : downward)\n "}, {"sha": "988d80fcd1f8cbe8dd321eafcecc96ecfc0e33c7", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -164,6 +164,7 @@ static void pa_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     const_tree, bool);\n static rtx pa_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t    const_tree, bool);\n+static unsigned int pa_function_arg_boundary (enum machine_mode, const_tree);\n static struct machine_function * pa_init_machine_status (void);\n static reg_class_t pa_secondary_reload (bool, rtx, reg_class_t,\n \t\t\t\t\tenum machine_mode,\n@@ -351,6 +352,8 @@ static const struct default_options pa_option_optimization_table[] =\n #define TARGET_FUNCTION_ARG pa_function_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE pa_function_arg_advance\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY pa_function_arg_boundary\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS hppa_builtin_saveregs\n@@ -9600,6 +9603,20 @@ pa_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return retval;\n }\n \n+/* Arguments larger than one word are double word aligned.  */\n+\n+static unsigned int\n+pa_function_arg_boundary (enum machine_mode mode, const_tree type)\n+{\n+  tree size = TYPE_SIZE (type);\n+  bool singleword = (type\n+\t\t     ? (integer_zerop (size)\n+\t\t\t|| !TREE_CONSTANT (size)\n+\t\t\t|| int_size_in_bytes (type) <= UNITS_PER_WORD)\n+\t\t     : GET_MODE_SIZE (mode));\n+\n+  return singleword ? PARM_BOUNDARY : MAX_PARM_BOUNDARY;\n+}\n \n /* If this arg would be passed totally in registers or totally on the stack,\n    then this routine should return zero.  */"}, {"sha": "64c8926cf6b23eda0ab3b362f8f15526f0a6db0f", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -687,20 +687,6 @@ struct hppa_args {int words, nargs_prototype, incoming, indirect; };\n #define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n   function_arg_padding ((MODE), (TYPE))\n \n-/* If defined, a C expression that gives the alignment boundary, in\n-   bits, of an argument with the specified mode and type.  If it is\n-   not defined,  `PARM_BOUNDARY' is used for all arguments.  */\n-\n-/* Arguments larger than one word are double word aligned.  */\n-\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE)\t\t\t\t\\\n-  (((TYPE)\t\t\t\t\t\t\t\t\\\n-    ? (integer_zerop (TYPE_SIZE (TYPE))\t\t\t\t\t\\\n-       || !TREE_CONSTANT (TYPE_SIZE (TYPE))\t\t\t\t\\\n-       || int_size_in_bytes (TYPE) <= UNITS_PER_WORD)\t\t\t\\\n-    : GET_MODE_SIZE(MODE) <= UNITS_PER_WORD)\t\t\t\t\\\n-   ? PARM_BOUNDARY : MAX_PARM_BOUNDARY)\n-\n \f\n /* On HPPA, we emit profiling code as rtl via PROFILE_HOOK rather than\n    as assembly via FUNCTION_PROFILER.  Just output a local label."}, {"sha": "991c028afba9eb709c85d69b584404048ce349c7", "filename": "gcc/config/picochip/picochip-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip-protos.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -66,8 +66,6 @@ extern int picochip_absolute_memory_operand (rtx op, enum machine_mode mode);\n extern rtx picochip_function_value (const_tree valtype, const_tree func, bool outgoing);\n extern int picochip_symbol_offset (rtx operand);\n \n-extern int picochip_get_function_arg_boundary (enum machine_mode mode);\n-\n extern reg_class_t picochip_secondary_reload(bool in_p,\n                                  rtx x,\n                                  reg_class_t cla,"}, {"sha": "f7c5baf9b94f3ad209985a5ae6d24cae2e4211bc", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -89,6 +89,8 @@ rtx picochip_incoming_function_arg (CUMULATIVE_ARGS * p_cum,\n \t\t\t\t    const_tree type, bool named);\n void picochip_arg_advance (CUMULATIVE_ARGS * p_cum, enum machine_mode mode,\n \t\t\t   const_tree type, bool named);\n+unsigned int picochip_function_boundary (enum machine_mode mode,\n+\t\t\t\t\t const_tree type);\n \n int picochip_sched_lookahead (void);\n int picochip_sched_issue_rate (void);\n@@ -286,6 +288,9 @@ static const struct default_options picochip_option_optimization_table[] =\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE picochip_arg_advance\n \n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY picochip_function_arg_boundary\n+\n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_PROMOTE_PROTOTYPES\n@@ -851,7 +856,7 @@ picochip_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n   /* Compute the alignment and size of the parameter. */\n   type_align_in_units =\n-    picochip_get_function_arg_boundary (mode) / BITS_PER_UNIT;\n+    picochip_function_arg_boundary (mode) / BITS_PER_UNIT;\n   type_size_in_units = picochip_compute_arg_size (type, mode);\n \n   /* Compute the correct offset (i.e., ensure that the offset meets\n@@ -947,8 +952,9 @@ picochip_incoming_function_arg (CUMULATIVE_ARGS *cum,\n \n /* Gives the alignment boundary, in bits, of an argument with the\n    specified mode.  */\n-int\n-picochip_get_function_arg_boundary (enum machine_mode mode)\n+unsigned int\n+picochip_function_arg_boundary (enum machine_mode mode,\n+\t\t\t\tconst_tree type ATTRIBUTE_UNUSED)\n {\n   int align;\n \n@@ -983,7 +989,7 @@ picochip_arg_partial_bytes (CUMULATIVE_ARGS * p_cum, enum machine_mode mode,\n \n   /* Compute the alignment and size of the parameter. */\n   type_align_in_units =\n-    picochip_get_function_arg_boundary (mode) / BITS_PER_UNIT;\n+    picochip_function_arg_boundary (mode) / BITS_PER_UNIT;\n   type_size_in_units = picochip_compute_arg_size (type, mode);\n \n   /* Compute the correct offset (i.e., ensure that the offset meets\n@@ -1037,7 +1043,7 @@ picochip_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n   /* Compute the alignment and size of the parameter. */\n   type_align_in_units =\n-    picochip_get_function_arg_boundary (mode) / BITS_PER_UNIT;\n+    picochip_function_arg_boundary (mode) / BITS_PER_UNIT;\n   type_size_in_units = picochip_compute_arg_size (type, mode);\n \n   /* Compute the correct offset (i.e., ensure that the offset meets"}, {"sha": "5f6bc7b2c07432bbf34861469df3c107d71ae7fd", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -404,13 +404,6 @@ extern const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT,N_NAMED_ARGS) \\\n   ((CUM) = 0)\n \n-/* Originally this used TYPE_ALIGN to determine the\n-   alignment.  Unfortunately, this fails in some cases, because the\n-   type is unknown (e.g., libcall's). Instead, use GET_MODE_ALIGNMENT\n-   since the mode is always present. */\n-#define FUNCTION_ARG_BOUNDARY(MODE,TYPE) \\\n-  picochip_get_function_arg_boundary(MODE)\n-\n /* The first 6 registers can hold parameters.  */\n #define FUNCTION_ARG_REGNO_P(REGNO) ((REGNO) < 6)\n "}, {"sha": "40e8acbd7c11870256828d944ae76ac34ab39a47", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -138,7 +138,6 @@ extern unsigned int rs6000_special_round_type_align (tree, unsigned int,\n \t\t\t\t\t\t     unsigned int);\n extern unsigned int darwin_rs6000_special_round_type_align (tree, unsigned int,\n \t\t\t\t\t\t\t    unsigned int);\n-extern int function_arg_boundary (enum machine_mode, const_tree);\n extern tree altivec_resolve_overloaded_builtin (location_t, tree, void *);\n extern rtx rs6000_libcall_value (enum machine_mode);\n extern rtx rs6000_va_arg (tree, tree);"}, {"sha": "d71340b61eb03ae0b720b8b0e1423e815866941e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1185,6 +1185,8 @@ static void rs6000_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t const_tree, bool);\n static rtx rs6000_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\tconst_tree, bool);\n+static unsigned int rs6000_function_arg_boundary (enum machine_mode,\n+\t\t\t\t\t\t  const_tree);\n static void rs6000_move_block_from_reg (int regno, rtx x, int nregs);\n static void setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree,\n@@ -1587,6 +1589,8 @@ static const struct default_options rs6000_option_optimization_table[] =\n #define TARGET_FUNCTION_ARG_ADVANCE rs6000_function_arg_advance\n #undef TARGET_FUNCTION_ARG\n #define TARGET_FUNCTION_ARG rs6000_function_arg\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY rs6000_function_arg_boundary\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST rs6000_build_builtin_va_list\n@@ -7850,8 +7854,8 @@ function_arg_padding (enum machine_mode mode, const_tree type)\n    Quadword align Altivec vectors.\n    Quadword align large synthetic vector types.   */\n \n-int\n-function_arg_boundary (enum machine_mode mode, const_tree type)\n+static unsigned int\n+rs6000_function_arg_boundary (enum machine_mode mode, const_tree type)\n {\n   if (DEFAULT_ABI == ABI_V4\n       && (GET_MODE_SIZE (mode) == 8\n@@ -7887,7 +7891,7 @@ rs6000_parm_start (enum machine_mode mode, const_tree type,\n   unsigned int align;\n   unsigned int parm_offset;\n \n-  align = function_arg_boundary (mode, type) / PARM_BOUNDARY - 1;\n+  align = rs6000_function_arg_boundary (mode, type) / PARM_BOUNDARY - 1;\n   parm_offset = DEFAULT_ABI == ABI_V4 ? 2 : 6;\n   return nwords + (-(parm_offset + nwords) & align);\n }\n@@ -9399,7 +9403,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n       unsigned HOST_WIDE_INT align, boundary;\n       tree valist_tmp = get_initialized_tmp_var (valist, pre_p, NULL);\n       align = PARM_BOUNDARY / BITS_PER_UNIT;\n-      boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n+      boundary = rs6000_function_arg_boundary (TYPE_MODE (type), type);\n       if (boundary > MAX_SUPPORTED_STACK_ALIGNMENT)\n \tboundary = MAX_SUPPORTED_STACK_ALIGNMENT;\n       boundary /= BITS_PER_UNIT;"}, {"sha": "9162e4fb057b7f8e667d41c01d965ce108871812", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1706,13 +1706,6 @@ typedef struct rs6000_args\n \n #define FUNCTION_ARG_PADDING(MODE, TYPE) function_arg_padding (MODE, TYPE)\n \n-/* If defined, a C expression that gives the alignment boundary, in bits,\n-   of an argument with the specified mode and type.  If it is not defined,\n-   PARM_BOUNDARY is used for all arguments.  */\n-\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-  function_arg_boundary (MODE, TYPE)\n-\n #define PAD_VARARGS_DOWN \\\n    (FUNCTION_ARG_PADDING (TYPE_MODE (type), type) == downward)\n "}, {"sha": "74389c5124ec10aaf0b04cc5e8ce0b34d367aa7a", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -822,6 +822,13 @@ rx_function_arg_advance (Fargs * cum, Mmode mode, const_tree type,\n   *cum += rx_function_arg_size (mode, type);\n }\n \n+static unsigned int\n+rx_function_arg_boundary (Mmode mode ATTRIBUTE_UNUSED,\n+\t\t\t  const_tree type ATTRIBUTE_UNUSED)\n+{\n+  return 32;\n+}\n+\n /* Return an RTL describing where a function return value of type RET_TYPE\n    is held.  */\n \n@@ -2816,6 +2823,9 @@ rx_memory_move_cost (enum machine_mode mode, reg_class_t regclass, bool in)\n #undef  TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE     \trx_function_arg_advance\n \n+#undef\tTARGET_FUNCTION_ARG_BOUNDARY\n+#define\tTARGET_FUNCTION_ARG_BOUNDARY\t\trx_function_arg_boundary\n+\n #undef  TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION\t\trx_set_current_function\n "}, {"sha": "9eb25e8aa224aaac8b579c533d19c8887de48bdd", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -125,8 +125,6 @@ extern enum rx_cpu_types  rx_cpu_type;\n #define STACK_BOUNDARY \t\t\t32\n #define PARM_BOUNDARY \t\t\t8\n \n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) 32\n-\n #define STACK_GROWS_DOWNWARD\t\t1\n #define FRAME_GROWS_DOWNWARD\t\t0\n #define FIRST_PARM_OFFSET(FNDECL) \t0"}, {"sha": "f9f3932fd48fdf02d21d55169b11a3ec4951c660", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -432,6 +432,8 @@ static rtx sparc_function_arg (CUMULATIVE_ARGS *,\n \t\t\t       enum machine_mode, const_tree, bool);\n static rtx sparc_function_incoming_arg (CUMULATIVE_ARGS *,\n \t\t\t\t\tenum machine_mode, const_tree, bool);\n+static unsigned int sparc_function_arg_boundary (enum machine_mode,\n+\t\t\t\t\t\t const_tree);\n static int sparc_arg_partial_bytes (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree, bool);\n static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n@@ -579,6 +581,8 @@ static const struct default_options sparc_option_optimization_table[] =\n #define TARGET_FUNCTION_ARG sparc_function_arg\n #undef TARGET_FUNCTION_INCOMING_ARG\n #define TARGET_FUNCTION_INCOMING_ARG sparc_function_incoming_arg\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY sparc_function_arg_boundary\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS sparc_builtin_saveregs\n@@ -5749,6 +5753,18 @@ sparc_function_incoming_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return sparc_function_arg_1 (cum, mode, type, named, true);\n }\n \n+/* For sparc64, objects requiring 16 byte alignment are passed that way.  */\n+\n+static unsigned int\n+sparc_function_arg_boundary (enum machine_mode mode, const_tree type)\n+{\n+  return ((TARGET_ARCH64\n+\t   && (GET_MODE_ALIGNMENT (mode) == 128\n+\t       || (type && TYPE_ALIGN (type) == 128)))\n+\t  ? 128\n+\t  : PARM_BOUNDARY);\n+}\n+\n /* For an arg passed partly in registers and partly in memory,\n    this is the number of bytes of registers used.\n    For args passed entirely in registers or entirely in memory, zero."}, {"sha": "e064899900c1e64846773a096ecf01f57cb45034", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1441,17 +1441,6 @@ init_cumulative_args (& (CUM), (FNTYPE), (LIBNAME), (FNDECL));\n #define FUNCTION_ARG_PADDING(MODE, TYPE) \\\n function_arg_padding ((MODE), (TYPE))\n \n-/* If defined, a C expression that gives the alignment boundary, in bits,\n-   of an argument with the specified mode and type.  If it is not defined,\n-   PARM_BOUNDARY is used for all arguments.\n-   For sparc64, objects requiring 16 byte alignment are passed that way.  */\n-\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n-((TARGET_ARCH64\t\t\t\t\t\\\n-  && (GET_MODE_ALIGNMENT (MODE) == 128\t\t\\\n-      || ((TYPE) && TYPE_ALIGN (TYPE) == 128)))\t\\\n- ? 128 : PARM_BOUNDARY)\n-\n \f\n /* Generate the special assembly code needed to tell the assembler whatever\n    it might need to know about the return value of a function."}, {"sha": "898c8085ceab9aa79d3419b71c200f072271c618", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -72,10 +72,6 @@ extern reg_class_t xtensa_secondary_reload (bool, rtx, reg_class_t,\n \t\t\t\t\t    struct secondary_reload_info *);\n #endif /* RTX_CODE */\n \n-#ifdef TREE_CODE\n-extern int function_arg_boundary (enum machine_mode, tree);\n-#endif /* TREE_CODE */\n-\n extern void xtensa_setup_frame_addresses (void);\n extern int xtensa_dbx_register_number (int);\n extern long compute_frame_size (int);"}, {"sha": "9e7c612c01f0f2d33bf096d315d400dc53caf846", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -148,6 +148,8 @@ static rtx xtensa_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n static rtx xtensa_function_incoming_arg (CUMULATIVE_ARGS *,\n \t\t\t\t\t enum machine_mode, const_tree, bool);\n static rtx xtensa_function_value (const_tree, const_tree, bool);\n+static unsigned int xtensa_function_arg_boundary (enum machine_mode,\n+\t\t\t\t\t\t  const_tree);\n static void xtensa_init_builtins (void);\n static tree xtensa_fold_builtin (tree, int, tree *, bool);\n static rtx xtensa_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n@@ -228,6 +230,8 @@ static const struct default_options xtensa_option_optimization_table[] =\n #define TARGET_FUNCTION_ARG xtensa_function_arg\n #undef TARGET_FUNCTION_INCOMING_ARG\n #define TARGET_FUNCTION_INCOMING_ARG xtensa_function_incoming_arg\n+#undef TARGET_FUNCTION_ARG_BOUNDARY\n+#define TARGET_FUNCTION_ARG_BOUNDARY xtensa_function_arg_boundary\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS xtensa_builtin_saveregs\n@@ -2093,8 +2097,8 @@ xtensa_function_incoming_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return xtensa_function_arg_1 (cum, mode, type, true);\n }\n \n-int\n-function_arg_boundary (enum machine_mode mode, tree type)\n+static unsigned int\n+function_arg_boundary (enum machine_mode mode, const_tree type)\n {\n   unsigned int alignment;\n "}, {"sha": "bd04893d1b6337ee39220e5f958bfe846c47cbbf", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -591,8 +591,6 @@ typedef struct xtensa_args\n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME)\t\t\\\n   init_cumulative_args (&CUM, 1)\n \n-#define FUNCTION_ARG_BOUNDARY function_arg_boundary\n-\n /* Profiling Xtensa code is typically done with the built-in profiling\n    feature of Tensilica's instruction set simulator, which does not\n    require any compiler support.  Profiling code on a real (i.e.,"}, {"sha": "cfbc04d6c928943df4aebfe8ad357742654d26ae", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1256,14 +1256,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   DEFAULT_FUNCTION_ARG_PADDING ((MODE), (TYPE))\n #endif\n \n-/* Supply a default definition for FUNCTION_ARG_BOUNDARY.  Normally, we let\n-   FUNCTION_ARG_PADDING, which also pads the length, handle any needed\n-   alignment.  */\n-\n-#ifndef FUNCTION_ARG_BOUNDARY\n-#define FUNCTION_ARG_BOUNDARY(MODE, TYPE)\tPARM_BOUNDARY\n-#endif\n-\n /* Supply a default definition of STACK_SAVEAREA_MODE for emit_stack_save.\n    Normally move_insn, so Pmode stack pointer.  */\n "}, {"sha": "60c4b847b853c12512bf7f63a1d1d4ecfddb9a23", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -4190,8 +4190,8 @@ to pad out an argument with extra space.  The value should be of type\n @code{downward} to pad below, or @code{none} to inhibit padding.\n \n The @emph{amount} of padding is always just enough to reach the next\n-multiple of @code{FUNCTION_ARG_BOUNDARY}; this macro does not control\n-it.\n+multiple of @code{TARGET_FUNCTION_ARG_BOUNDARY}; this macro does not\n+control it.\n \n This macro has a default definition which is right for most systems.\n For little-endian machines, the default is to pad upward.  For\n@@ -4218,11 +4218,11 @@ a three byte aggregate may be passed in the high part of a register if so\n required.\n @end defmac\n \n-@defmac FUNCTION_ARG_BOUNDARY (@var{mode}, @var{type})\n-If defined, a C expression that gives the alignment boundary, in bits,\n-of an argument with the specified mode and type.  If it is not defined,\n-@code{PARM_BOUNDARY} is used for all arguments.\n-@end defmac\n+@deftypefn {Target Hook} {unsigned int} TARGET_FUNCTION_ARG_BOUNDARY (enum machine_mode @var{mode}, const_tree @var{type})\n+This hook returns the the alignment boundary, in bits, of an argument\n+with the specified mode and type.  The default hook returns\n+@code{PARM_BOUNDARY} for all arguments.\n+@end deftypefn\n \n @defmac FUNCTION_ARG_REGNO_P (@var{regno})\n A C expression that is nonzero if @var{regno} is the number of a hard"}, {"sha": "cef2a72b8c80c28f95be86643188fe24781b8a32", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -4180,8 +4180,8 @@ to pad out an argument with extra space.  The value should be of type\n @code{downward} to pad below, or @code{none} to inhibit padding.\n \n The @emph{amount} of padding is always just enough to reach the next\n-multiple of @code{FUNCTION_ARG_BOUNDARY}; this macro does not control\n-it.\n+multiple of @code{TARGET_FUNCTION_ARG_BOUNDARY}; this macro does not\n+control it.\n \n This macro has a default definition which is right for most systems.\n For little-endian machines, the default is to pad upward.  For\n@@ -4208,11 +4208,11 @@ a three byte aggregate may be passed in the high part of a register if so\n required.\n @end defmac\n \n-@defmac FUNCTION_ARG_BOUNDARY (@var{mode}, @var{type})\n-If defined, a C expression that gives the alignment boundary, in bits,\n-of an argument with the specified mode and type.  If it is not defined,\n-@code{PARM_BOUNDARY} is used for all arguments.\n-@end defmac\n+@hook TARGET_FUNCTION_ARG_BOUNDARY\n+This hook returns the the alignment boundary, in bits, of an argument\n+with the specified mode and type.  The default hook returns\n+@code{PARM_BOUNDARY} for all arguments.\n+@end deftypefn\n \n @defmac FUNCTION_ARG_REGNO_P (@var{regno})\n A C expression that is nonzero if @var{regno} is the number of a hard"}, {"sha": "b9805dcd0910ec54627b7fa364e9337ac6449876", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -2565,7 +2565,7 @@ assign_parm_find_stack_rtl (tree parm, struct assign_parm_data_one *data)\n   align = BITS_PER_UNIT;\n \n   /* If we're padding upward, we know that the alignment of the slot\n-     is FUNCTION_ARG_BOUNDARY.  If we're using slot_offset, we're\n+     is TARGET_FUNCTION_ARG_BOUNDARY.  If we're using slot_offset, we're\n      intentionally forcing upward padding.  Otherwise we have to come\n      up with a guess at the alignment based on OFFSET_RTX.  */\n   if (data->locate.where_pad != downward || data->entry_parm)\n@@ -3330,8 +3330,9 @@ assign_parms (tree fndecl)\n       /* Estimate stack alignment from parameter alignment.  */\n       if (SUPPORTS_STACK_ALIGNMENT)\n         {\n-          unsigned int align = FUNCTION_ARG_BOUNDARY (data.promoted_mode,\n-\t\t\t\t\t\t      data.passed_type);\n+          unsigned int align\n+\t    = targetm.calls.function_arg_boundary (data.promoted_mode,\n+\t\t\t\t\t\t   data.passed_type);\n \t  align = MINIMUM_ALIGNMENT (data.passed_type, data.promoted_mode,\n \t\t\t\t     align);\n \t  if (TYPE_ALIGN (data.nominal_type) > align)\n@@ -3641,9 +3642,10 @@ gimplify_parameters (void)\n    FNDECL is the function in which the argument was defined.\n \n    There are two types of rounding that are done.  The first, controlled by\n-   FUNCTION_ARG_BOUNDARY, forces the offset from the start of the argument\n-   list to be aligned to the specific boundary (in bits).  This rounding\n-   affects the initial and starting offsets, but not the argument size.\n+   TARGET_FUNCTION_ARG_BOUNDARY, forces the offset from the start of the\n+   argument list to be aligned to the specific boundary (in bits).  This\n+   rounding affects the initial and starting offsets, but not the argument\n+   size.\n \n    The second, controlled by FUNCTION_ARG_PADDING and PARM_BOUNDARY,\n    optionally rounds the size of the parm to PARM_BOUNDARY.  The\n@@ -3694,7 +3696,7 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n   sizetree\n     = type ? size_in_bytes (type) : size_int (GET_MODE_SIZE (passed_mode));\n   where_pad = FUNCTION_ARG_PADDING (passed_mode, type);\n-  boundary = FUNCTION_ARG_BOUNDARY (passed_mode, type);\n+  boundary = targetm.calls.function_arg_boundary (passed_mode, type);\n   locate->where_pad = where_pad;\n \n   /* Alignment can't exceed MAX_SUPPORTED_STACK_ALIGNMENT.  */"}, {"sha": "21341458a80b2c3b584158ffcfeac67897871565", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -1991,6 +1991,12 @@ DEFHOOK_UNDOC\n        bool named),\n  default_function_incoming_arg)\n \n+DEFHOOK\n+(function_arg_boundary,\n+ \"\",\n+ unsigned int, (enum machine_mode mode, const_tree type),\n+ default_function_arg_boundary)\n+\n /* Return the diagnostic message string if function without a prototype\n    is not allowed for this 'val' argument; NULL otherwise. */\n DEFHOOK"}, {"sha": "35cd5927b750ebb91fc309cfd1d71316df2c6c8b", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -607,6 +607,13 @@ default_function_incoming_arg (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n #endif\n }\n \n+unsigned int\n+default_function_arg_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t       const_tree type ATTRIBUTE_UNUSED)\n+{\n+  return PARM_BOUNDARY;\n+}\n+\n void\n hook_void_bitmap (bitmap regs ATTRIBUTE_UNUSED)\n {"}, {"sha": "71b612fa0a8b038a42f3a09147fde246cfecb933", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=c2ed6cf88c524f8a981a272fc2aaa23e77e09f9b", "patch": "@@ -111,6 +111,8 @@ extern rtx default_function_arg\n   (CUMULATIVE_ARGS *, enum machine_mode, const_tree, bool);\n extern rtx default_function_incoming_arg\n   (CUMULATIVE_ARGS *, enum machine_mode, const_tree, bool);\n+extern unsigned int default_function_arg_boundary (enum machine_mode,\n+\t\t\t\t\t\t   const_tree);\n extern bool hook_bool_const_rtx_commutative_p (const_rtx, int);\n extern rtx default_function_value (const_tree, const_tree, bool);\n extern rtx default_libcall_value (enum machine_mode, const_rtx);"}]}