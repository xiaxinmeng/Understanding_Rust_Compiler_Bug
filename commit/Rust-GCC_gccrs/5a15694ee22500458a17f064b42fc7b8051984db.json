{"sha": "5a15694ee22500458a17f064b42fc7b8051984db", "node_id": "C_kwDOANBUbNoAKDVhMTU2OTRlZTIyNTAwNDU4YTE3ZjA2NGI0MmZjN2I4MDUxOTg0ZGI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-25T11:46:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-25T11:46:24Z"}, "message": "Merge #1063\n\n1063: Handle :meta fragments properly r=CohenArthur a=CohenArthur\n\nThis expands :meta fragments properly and allows us to strip assignment expressions\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "66c80ed740780967291dd45cc94709c33f643ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66c80ed740780967291dd45cc94709c33f643ddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a15694ee22500458a17f064b42fc7b8051984db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiPauQCRBK7hj4Ov3rIwAA8ikIAI/Ab/KUOh1ccmz676yMJ6gj\n3H6Vz+h2RuE3Z+mVM04FzslGwrtAzrC/FGg/ovxc53Dm/zCUKC6afZXwFnGnvzJl\niwjpf9SrE3swAEYAflsZVITQi2fJyKJQeUJHVJShlreGpN7yDRYlFGNNSLwx9fut\ncBuVJFpObhpyeCq/mGk7qpKwxI5HEI3EqazECDU05Qh9Id0eeUgDniAyPMHd6hrp\nQbnm5FJBnmVEKL1Bjyo27bFQD4ubOG2+oKfkwI8/UDKKddz5+4hEcqOCmk7ZZun1\nhqJ6X6UShtBThaYMnrmO/6CbK9nJKxp6e6NbrL43UOkbZSDLkZNvOUvVrjyBaNc=\n=d30N\n-----END PGP SIGNATURE-----\n", "payload": "tree 66c80ed740780967291dd45cc94709c33f643ddf\nparent a7e723469220b6765463d27b3e19ffd27f1baadd\nparent 7fa6e72b1a1a18a8b511a796514bc32591b26e2f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648208784 +0000\ncommitter GitHub <noreply@github.com> 1648208784 +0000\n\nMerge #1063\n\n1063: Handle :meta fragments properly r=CohenArthur a=CohenArthur\n\nThis expands :meta fragments properly and allows us to strip assignment expressions\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a15694ee22500458a17f064b42fc7b8051984db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a15694ee22500458a17f064b42fc7b8051984db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a15694ee22500458a17f064b42fc7b8051984db/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7e723469220b6765463d27b3e19ffd27f1baadd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e723469220b6765463d27b3e19ffd27f1baadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e723469220b6765463d27b3e19ffd27f1baadd"}, {"sha": "7fa6e72b1a1a18a8b511a796514bc32591b26e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa6e72b1a1a18a8b511a796514bc32591b26e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa6e72b1a1a18a8b511a796514bc32591b26e2f"}], "stats": {"total": 83, "additions": 63, "deletions": 20}, "files": [{"sha": "1966a590c94a6a8790b3e0bb4446ce5fd0c8e398", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=5a15694ee22500458a17f064b42fc7b8051984db", "patch": "@@ -704,8 +704,9 @@ class AssignmentExpr : public OperatorExpr\n \n   // Call OperatorExpr constructor to initialise left_expr\n   AssignmentExpr (std::unique_ptr<Expr> value_to_assign_to,\n-\t\t  std::unique_ptr<Expr> value_to_assign, Location locus)\n-    : OperatorExpr (std::move (value_to_assign_to), std::vector<Attribute> (),\n+\t\t  std::unique_ptr<Expr> value_to_assign,\n+\t\t  std::vector<Attribute> outer_attribs, Location locus)\n+    : OperatorExpr (std::move (value_to_assign_to), std::move (outer_attribs),\n \t\t    locus),\n       right_expr (std::move (value_to_assign))\n   {}"}, {"sha": "8f2a6c7fc5f2d0c202499cbc50ccf7e669ffca9b", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=5a15694ee22500458a17f064b42fc7b8051984db", "patch": "@@ -628,8 +628,12 @@ AttrVisitor::visit (AST::TypeCastExpr &expr)\n void\n AttrVisitor::visit (AST::AssignmentExpr &expr)\n {\n-  /* outer attributes never allowed before these. while cannot strip\n-   * two direct descendant expressions, can strip ones below that */\n+  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+    {\n+      expr.mark_for_strip ();\n+      return;\n+    }\n \n   /* should have no possibility for outer attrs as would be parsed\n    * with outer expr */"}, {"sha": "1c6410d23046560288001c2e8cf7583490788c59", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=5a15694ee22500458a17f064b42fc7b8051984db", "patch": "@@ -71,8 +71,12 @@ class AttrVisitor : public AST::ASTVisitor\n \t    it = values.erase (it);\n \t    for (auto &node : fragment.get_nodes ())\n \t      {\n-\t\tit = values.insert (it, extractor (node));\n-\t\tit++;\n+\t\tauto new_node = extractor (node);\n+\t\tif (new_node != nullptr && !new_node->is_marked_for_strip ())\n+\t\t  {\n+\t\t    it = values.insert (it, std::move (new_node));\n+\t\t    it++;\n+\t\t  }\n \t      }\n \t  }\n \telse if (value->is_marked_for_strip ())"}, {"sha": "2620fea1bb57aadb4734e3827b48e0f772b97c72", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=5a15694ee22500458a17f064b42fc7b8051984db", "patch": "@@ -490,11 +490,7 @@ MacroExpander::match_fragment (Parser<MacroInvocLexer> &parser,\n \n       // is meta attributes?\n     case AST::MacroFragSpec::META:\n-      // parser.parse_inner_attribute ?\n-      // parser.parse_outer_attribute ?\n-      // parser.parse_attribute_body ?\n-      // parser.parse_doc_comment ?\n-      gcc_unreachable ();\n+      parser.parse_attribute_body ();\n       break;\n \n     case AST::MacroFragSpec::TT:"}, {"sha": "48c39de35621f0f8fd03f2a3a9ba76fbf269d089", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=5a15694ee22500458a17f064b42fc7b8051984db", "patch": "@@ -11719,7 +11719,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t  {\n \t    // should be expr without block\n \t    std::unique_ptr<AST::ExprWithoutBlock> expr\n-\t      = parse_expr_without_block ();\n+\t      = parse_expr_without_block (std::move (outer_attrs));\n \n \t    if (lexer.peek_token ()->get_id () == SEMICOLON)\n \t      {\n@@ -11764,7 +11764,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t  // FIXME: old code was good until composability was required\n \t  // return parse_path_based_stmt_or_expr(std::move(outer_attrs));\n \t  std::unique_ptr<AST::ExprWithoutBlock> expr\n-\t    = parse_expr_without_block ();\n+\t    = parse_expr_without_block (std::move (outer_attrs));\n \n \t  if (lexer.peek_token ()->get_id () == SEMICOLON)\n \t    {\n@@ -11787,7 +11787,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_without_block ()\n \t * expression then make it statement if semi afterwards */\n \n \tstd::unique_ptr<AST::ExprWithoutBlock> expr\n-\t  = parse_expr_without_block ();\n+\t  = parse_expr_without_block (std::move (outer_attrs));\n \n \tif (lexer.peek_token ()->get_id () == SEMICOLON)\n \t  {\n@@ -12462,7 +12462,7 @@ Parser<ManagedTokenSource>::parse_expr (int right_binding_power,\n \n   // parse null denotation (unary part of expression)\n   std::unique_ptr<AST::Expr> expr\n-    = null_denotation (current_token, std::move (outer_attrs), restrictions);\n+    = null_denotation (current_token, {}, restrictions);\n \n   if (expr == nullptr)\n     {\n@@ -12477,8 +12477,8 @@ Parser<ManagedTokenSource>::parse_expr (int right_binding_power,\n       current_token = lexer.peek_token ();\n       lexer.skip_token ();\n \n-      expr = left_denotation (current_token, std::move (expr), AST::AttrVec (),\n-\t\t\t      restrictions);\n+      expr = left_denotation (current_token, std::move (expr),\n+\t\t\t      std::move (outer_attrs), restrictions);\n \n       if (expr == nullptr)\n \t{\n@@ -13811,7 +13811,7 @@ template <typename ManagedTokenSource>\n std::unique_ptr<AST::AssignmentExpr>\n Parser<ManagedTokenSource>::parse_assig_expr (\n   const_TokenPtr tok ATTRIBUTE_UNUSED, std::unique_ptr<AST::Expr> left,\n-  AST::AttrVec outer_attrs ATTRIBUTE_UNUSED, ParseRestrictions restrictions)\n+  AST::AttrVec outer_attrs, ParseRestrictions restrictions)\n {\n   // parse RHS (as tok has already been consumed in parse_expression)\n   std::unique_ptr<AST::Expr> right\n@@ -13824,7 +13824,8 @@ Parser<ManagedTokenSource>::parse_assig_expr (\n   Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::AssignmentExpr> (\n-    new AST::AssignmentExpr (std::move (left), std::move (right), locus));\n+    new AST::AssignmentExpr (std::move (left), std::move (right),\n+\t\t\t     std::move (outer_attrs), locus));\n }\n \n /* Returns the left binding power for the given CompoundAssignmentExpr type."}, {"sha": "945bce7490b73ef1dff3929659b05edf4b2ca050", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=5a15694ee22500458a17f064b42fc7b8051984db", "patch": "@@ -143,6 +143,7 @@ template <typename ManagedTokenSource> class Parser\n   AST::Visibility parse_visibility ();\n   std::unique_ptr<AST::IdentifierPattern> parse_identifier_pattern ();\n   std::unique_ptr<AST::TokenTree> parse_token_tree ();\n+  AST::Attribute parse_attribute_body ();\n \n private:\n   void skip_after_semicolon ();\n@@ -162,7 +163,6 @@ template <typename ManagedTokenSource> class Parser\n   AST::Attribute parse_inner_attribute ();\n   AST::AttrVec parse_outer_attributes ();\n   AST::Attribute parse_outer_attribute ();\n-  AST::Attribute parse_attribute_body ();\n   std::unique_ptr<AST::AttrInput> parse_attr_input ();\n   AST::Attribute parse_doc_comment ();\n "}, {"sha": "581a29bb89d092227874737d7bc255f39ee47950", "filename": "gcc/testsuite/rust/execute/torture/cfg5.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg5.rs?ref=5a15694ee22500458a17f064b42fc7b8051984db", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+\n+fn main() -> i32 {\n+    let mut a = 0;\n+\n+    #[cfg(A)]\n+    a = 3;\n+\n+    #[cfg(B)]\n+    a = 40;\n+\n+    a - 3\n+}"}, {"sha": "d515bb278a0bc6505ef7dd05764da83cf7d0c509", "filename": "gcc/testsuite/rust/execute/torture/macros27.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros27.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a15694ee22500458a17f064b42fc7b8051984db/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros27.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros27.rs?ref=5a15694ee22500458a17f064b42fc7b8051984db", "patch": "@@ -0,0 +1,24 @@\n+// { dg-additional-options \"-frust-cfg=A\" }\n+\n+macro_rules! attr {\n+    (#[$attr:meta] $s:stmt) => {\n+        #[$attr]\n+        $s;\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let mut a = 0;\n+\n+    attr! {\n+    #[cfg(A)]\n+        a = 3\n+    };\n+\n+    attr! {\n+    #[cfg(B)]\n+        a = 40\n+    };\n+\n+    a - 3\n+}"}]}