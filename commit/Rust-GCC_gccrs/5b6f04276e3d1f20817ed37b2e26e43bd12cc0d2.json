{"sha": "5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2", "node_id": "C_kwDOANBUbNoAKDViNmYwNDI3NmUzZDFmMjA4MTdlZDM3YjJlMjZlNDNiZDEyY2MwZDI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-28T09:55:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-28T12:29:37Z"}, "message": "tree-optimization/104263 - avoid retaining abnormal edges for non-call/goto stmts\n\nThis removes a premature optimization from\ngimple_purge_dead_abnormal_call_edges which, after eliding the\nlast setjmp (or computed goto) statement from a function and\nthus clearing cfun->calls_setjmp, leaves us with the abnormal\nedges from other calls that are elided for example via inlining\nor DCE.  That's a CFG / IL combination that should be impossible\n(not addressing the fact that with cfun->calls_setjmp and\ncfun->has_nonlocal_label cleared we should not have any abnormal\nedge at all).\n\nFor the testcase in the PR this means that IPA inlining will\nremove the abormal edges from the block after inlining the call\nthe edge was coming from.\n\n2022-01-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104263\n\t* tree-cfg.cc (gimple_purge_dead_abnormal_call_edges):\n\tPurge edges also when !cfun->has_nonlocal_label\n\tand !cfun->calls_setjmp.\n\n\t* gcc.dg/tree-ssa/inline-13.c: New testcase.", "tree": {"sha": "2de591d76ed73f57f2e514ac26c1aa2cb631ab91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2de591d76ed73f57f2e514ac26c1aa2cb631ab91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "833e651a76cbab26d18307fe761b609c0fa61439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833e651a76cbab26d18307fe761b609c0fa61439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833e651a76cbab26d18307fe761b609c0fa61439"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "94d8a9c709e6755a96e396662f955cfe71b0d24a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-13.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-13.c?ref=5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-early-inlining -fdump-tree-fixup_cfg3\" } */\n+\n+int n;\n+\n+static int\n+bar (void)\n+{\n+  int a;\n+\n+  n = 0;\n+  a = 0;\n+\n+  return n;\n+}\n+\n+__attribute__ ((pure, returns_twice)) int\n+foo (void)\n+{\n+  n = bar () + 1;\n+  foo ();\n+\n+  return 0;\n+}\n+\n+/* Abnormal edges should be properly elided after IPA inlining of bar.  */\n+/* { dg-final { scan-tree-dump-times \"bb\" 1 \"fixup_cfg3\" } } */"}, {"sha": "efd10332c5379bae238474b513b4574f68a4c858", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=5b6f04276e3d1f20817ed37b2e26e43bd12cc0d2", "patch": "@@ -8915,10 +8915,6 @@ gimple_purge_dead_abnormal_call_edges (basic_block bb)\n   edge_iterator ei;\n   gimple *stmt = last_stmt (bb);\n \n-  if (!cfun->has_nonlocal_label\n-      && !cfun->calls_setjmp)\n-    return false;\n-\n   if (stmt && stmt_can_make_abnormal_goto (stmt))\n     return false;\n "}]}