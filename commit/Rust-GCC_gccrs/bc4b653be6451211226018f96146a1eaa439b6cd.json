{"sha": "bc4b653be6451211226018f96146a1eaa439b6cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM0YjY1M2JlNjQ1MTIxMTIyNjAxOGY5NjE0NmExZWFhNDM5YjZjZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-09T01:16:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-09T01:16:16Z"}, "message": "c-tree.h (C_DECL_USED, [...]): New.\n\n\t* c-tree.h (C_DECL_USED, parser_obstack, in_alignof, in_sizeof,\n\tin_typeof, record_maybe_used_decl, pop_maybe_used,\n\tc_expr_sizeof_expr, c_expr_sizeof_type): New.\n\t* c-decl.c (parser_obstack): New.\n\t(c_init_decl_processing): Initialize parser_obstack.\n\t(c_write_global_declarations_1): Check for used but undefined\n\tstatic functions.\n\t* c-parse.in (%union): Add otype.\n\t(save_obstack_position): New.\n\t(extdefs): Use it.\n\t(unary_expr): Update in_sizeof and in_alignof.  Use\n\tc_expr_sizeof_expr and c_expr_sizeof_type.\n\t(sizeof): Update in_sizeof.\n\t(alignof): Update in_alignof.\n\t(typeof): Update in_typeof.\n\t(typespec_nonreserved_nonattr): Call pop_maybe_used.\n\t* c-typeck.c (in_alignof, in_sizeof, in_typeof, struct\n\tmaybe_used_decl, maybe_used_decls, record_maybe_used_decl,\n\tpop_maybe_used, c_expr_sizeof_expr, c_expr_sizeof_type): New.\n\t(build_external_ref): Set C_DECL_USED or call\n\trecord_maybe_used_decl if appropriate.\n\t* toplev.c (check_global_declarations): Check TREE_NO_WARNING.\n\ntestsuite:\n\t* gcc.dg/c90-static-1.c, gcc.dg/c99-static-1.c,\n\tgcc.dg/gnu99-static-1.c: New tests.\n\nFrom-SVN: r87216", "tree": {"sha": "cafc9cbafbe798461e115c710492d5167b17d34a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cafc9cbafbe798461e115c710492d5167b17d34a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc4b653be6451211226018f96146a1eaa439b6cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc4b653be6451211226018f96146a1eaa439b6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc4b653be6451211226018f96146a1eaa439b6cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc4b653be6451211226018f96146a1eaa439b6cd/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1835f9efd2e8bac8a4a44497915f37f45144e932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1835f9efd2e8bac8a4a44497915f37f45144e932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1835f9efd2e8bac8a4a44497915f37f45144e932"}], "stats": {"total": 296, "additions": 282, "deletions": 14}, "files": [{"sha": "1ac41ec5b8e8a264137202e216f11e526321d66a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -1,3 +1,28 @@\n+2004-09-09  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-tree.h (C_DECL_USED, parser_obstack, in_alignof, in_sizeof,\n+\tin_typeof, record_maybe_used_decl, pop_maybe_used,\n+\tc_expr_sizeof_expr, c_expr_sizeof_type): New.\n+\t* c-decl.c (parser_obstack): New.\n+\t(c_init_decl_processing): Initialize parser_obstack.\n+\t(c_write_global_declarations_1): Check for used but undefined\n+\tstatic functions.\n+\t* c-parse.in (%union): Add otype.\n+\t(save_obstack_position): New.\n+\t(extdefs): Use it.\n+\t(unary_expr): Update in_sizeof and in_alignof.  Use\n+\tc_expr_sizeof_expr and c_expr_sizeof_type.\n+\t(sizeof): Update in_sizeof.\n+\t(alignof): Update in_alignof.\n+\t(typeof): Update in_typeof.\n+\t(typespec_nonreserved_nonattr): Call pop_maybe_used.\n+\t* c-typeck.c (in_alignof, in_sizeof, in_typeof, struct\n+\tmaybe_used_decl, maybe_used_decls, record_maybe_used_decl,\n+\tpop_maybe_used, c_expr_sizeof_expr, c_expr_sizeof_type): New.\n+\t(build_external_ref): Set C_DECL_USED or call\n+\trecord_maybe_used_decl if appropriate.\n+\t* toplev.c (check_global_declarations): Check TREE_NO_WARNING.\n+\n 2004-09-08  Eric Christopher  <echristo@redhat.com>\n \n \t* builtins.c: Fix prototype for fold_builtin_atan."}, {"sha": "5399c175d829d547c055cc057819f51d7bc9ace8", "filename": "gcc/c-decl.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -109,6 +109,11 @@ static location_t current_function_prototype_locus;\n \n static GTY(()) tree current_function_arg_info;\n \n+/* The obstack on which parser and related data structures, which are\n+   not live beyond their top-level declaration or definition, are\n+   allocated.  */\n+struct obstack parser_obstack;\n+\n /* The current statement tree.  */\n \n static GTY(()) struct stmt_tree_s c_stmt_tree;\n@@ -2526,6 +2531,8 @@ c_init_decl_processing (void)\n \n   current_function_decl = 0;\n \n+  gcc_obstack_init (&parser_obstack);\n+\n   /* Make the externals scope.  */\n   push_scope ();\n   external_scope = current_scope;\n@@ -6936,7 +6943,21 @@ c_write_global_declarations_1 (tree globals)\n \n   /* Process the decls in the order they were written.  */\n   for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n-    vec[i] = decl;\n+    {\n+      vec[i] = decl;\n+      /* Check for used but undefined static functions using the C\n+\t standard's definition of \"used\", and set TREE_NO_WARNING so\n+\t that check_global_declarations doesn't repeat the check.  */\n+      if (TREE_CODE (decl) == FUNCTION_DECL\n+\t  && DECL_INITIAL (decl) == 0\n+\t  && DECL_EXTERNAL (decl)\n+\t  && !TREE_PUBLIC (decl)\n+\t  && C_DECL_USED (decl))\n+\t{\n+\t  pedwarn (\"%J%<%F%> used but never defined\", decl, decl);\n+\t  TREE_NO_WARNING (decl) = 1;\n+\t}\n+    }\n \n   wrapup_global_declarations (vec, len);\n   check_global_declarations (vec, len);"}, {"sha": "fff001faa1735137679579d8d6ee50342ad92e9f", "filename": "gcc/c-parse.in", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -99,8 +99,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n %start program\n \n-%union {long itype; tree ttype; struct c_expr exprtype; enum tree_code code;\n-\tlocation_t location; }\n+%union {long itype; tree ttype; void *otype; struct c_expr exprtype;\n+\tenum tree_code code; location_t location; }\n \n /* All identifiers that are not reserved words\n    and are not declared typedefs in the current block */\n@@ -241,6 +241,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n %type <itype> setspecs setspecs_fp extension\n \n %type <location> save_location\n+\n+%type <otype> save_obstack_position\n \f\n @@ifobjc\n /* the Objective-C nonterminals */\n@@ -360,8 +362,11 @@ program: /* empty */\n  can find a valid list of type and sc specs in $0. */\n \n extdefs:\n-\t{$<ttype>$ = NULL_TREE; } extdef\n-\t| extdefs {$<ttype>$ = NULL_TREE; ggc_collect(); } extdef\n+\tsave_obstack_position { $<ttype>$ = NULL_TREE; } extdef\n+\t\t{ obstack_free (&parser_obstack, $1); }\n+\t| extdefs save_obstack_position\n+\t\t{ $<ttype>$ = NULL_TREE; ggc_collect(); } extdef\n+\t\t{ obstack_free (&parser_obstack, $2); }\n \t;\n \n extdef:\n@@ -375,6 +380,12 @@ extdef:\n @@end_ifobjc\n \t;\n \n+/* Record the current position of parser_obstack before a\n+   declaration to restore it afterwards.  */\n+save_obstack_position:\n+\t\t{ $$ = obstack_alloc (&parser_obstack, 0); }\n+\t;\n+\n datadef:\n \t  setspecs notype_initdecls ';'\n \t\t{ if (pedantic)\n@@ -506,21 +517,23 @@ unary_expr:\n \t\t  $$.original_code = ERROR_MARK; }\n \t| sizeof unary_expr  %prec UNARY\n \t\t{ skip_evaluation--;\n+\t\t  in_sizeof--;\n \t\t  if (TREE_CODE ($2.value) == COMPONENT_REF\n \t\t      && DECL_C_BIT_FIELD (TREE_OPERAND ($2.value, 1)))\n \t\t    error (\"`sizeof' applied to a bit-field\");\n-\t\t  $$.value = c_sizeof (TREE_TYPE ($2.value));\n-\t\t  $$.original_code = ERROR_MARK; }\n+\t\t  $$ = c_expr_sizeof_expr ($2); }\n \t| sizeof '(' typename ')'  %prec HYPERUNARY\n \t\t{ skip_evaluation--;\n-\t\t  $$.value = c_sizeof (groktypename ($3));\n-\t\t  $$.original_code = ERROR_MARK; }\n+\t\t  in_sizeof--;\n+\t\t  $$ = c_expr_sizeof_type ($3); }\n \t| alignof unary_expr  %prec UNARY\n \t\t{ skip_evaluation--;\n+\t\t  in_alignof--;\n \t\t  $$.value = c_alignof_expr ($2.value);\n \t\t  $$.original_code = ERROR_MARK; }\n \t| alignof '(' typename ')'  %prec HYPERUNARY\n \t\t{ skip_evaluation--;\n+\t\t  in_alignof--;\n \t\t  $$.value = c_alignof (groktypename ($3));\n \t\t  $$.original_code = ERROR_MARK; }\n \t| REALPART cast_expr %prec UNARY\n@@ -532,15 +545,15 @@ unary_expr:\n \t;\n \n sizeof:\n-\tSIZEOF { skip_evaluation++; }\n+\tSIZEOF { skip_evaluation++; in_sizeof++; }\n \t;\n \n alignof:\n-\tALIGNOF { skip_evaluation++; }\n+\tALIGNOF { skip_evaluation++; in_alignof++; }\n \t;\n \n typeof:\n-\tTYPEOF { skip_evaluation++; }\n+\tTYPEOF { skip_evaluation++; in_typeof++; }\n \t;\n \n cast_expr:\n@@ -1376,12 +1389,15 @@ typespec_nonreserved_nonattr:\n @@end_ifobjc\n \t| typeof '(' expr ')'\n \t\t{ skip_evaluation--;\n+\t\t  in_typeof--;\n \t\t  if (TREE_CODE ($3.value) == COMPONENT_REF\n \t\t      && DECL_C_BIT_FIELD (TREE_OPERAND ($3.value, 1)))\n \t\t    error (\"`typeof' applied to a bit-field\");\n-\t\t  $$ = TREE_TYPE ($3.value); }\n+\t\t  $$ = TREE_TYPE ($3.value);\n+\t\t  pop_maybe_used (variably_modified_type_p ($$, NULL_TREE)); }\n \t| typeof '(' typename ')'\n-\t\t{ skip_evaluation--; $$ = groktypename ($3); }\n+\t\t{ skip_evaluation--; in_typeof--; $$ = groktypename ($3);\n+\t\t  pop_maybe_used (variably_modified_type_p ($$, NULL_TREE)); }\n \t;\n \n /* typespec_nonreserved_attr does not exist.  */"}, {"sha": "e241d4bddeaa6514d9067b73965548117ada8210", "filename": "gcc/c-tree.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -99,6 +99,12 @@ struct lang_type GTY(())\n    they may differ for structures with volatile fields.  */\n #define C_DECL_REGISTER(EXP) DECL_LANG_FLAG_4 (EXP)\n \n+/* Record whether a decl was used in an expression anywhere except an\n+   unevaluated operand of sizeof / typeof / alignof.  This is only\n+   used for functions declared static but not defined, though outside\n+   sizeof and typeof it is set for other function decls as well.  */\n+#define C_DECL_USED(EXP) DECL_LANG_FLAG_5 (EXP)\n+\n /* Nonzero for a decl which either doesn't exist or isn't a prototype.\n    N.B. Could be simplified if all built-in decls had complete prototypes\n    (but this is presently difficult because some of them need FILE*).  */\n@@ -151,6 +157,7 @@ extern void c_parse_init (void);\n extern void gen_aux_info_record (tree, int, int, int);\n \n /* in c-decl.c */\n+extern struct obstack parser_obstack;\n extern tree c_break_label;\n extern tree c_cont_label;\n \n@@ -224,6 +231,10 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n \t\t\t  ((VOLATILE_P) ? TYPE_QUAL_VOLATILE : 0))\n \n /* in c-typeck.c */\n+extern int in_alignof;\n+extern int in_sizeof;\n+extern int in_typeof;\n+\n extern struct c_switch *c_switch_stack;\n \n extern tree require_complete_type (tree);\n@@ -238,6 +249,10 @@ extern tree build_component_ref (tree, tree);\n extern tree build_indirect_ref (tree, const char *);\n extern tree build_array_ref (tree, tree);\n extern tree build_external_ref (tree, int);\n+extern void record_maybe_used_decl (tree);\n+extern void pop_maybe_used (bool);\n+extern struct c_expr c_expr_sizeof_expr (struct c_expr);\n+extern struct c_expr c_expr_sizeof_type (tree);\n extern struct c_expr parser_build_binary_op (enum tree_code, struct c_expr,\n \t\t\t\t\t     struct c_expr);\n extern void readonly_error (tree, const char *);"}, {"sha": "9b20152cb5bf8788f4a1ba94516eca7bc8771763", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -44,6 +44,14 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-iterator.h\"\n #include \"tree-gimple.h\"\n \n+/* The level of nesting inside \"__alignof__\".  */\n+int in_alignof;\n+\n+/* The level of nesting inside \"sizeof\".  */\n+int in_sizeof;\n+\n+/* The level of nesting inside \"typeof\".  */\n+int in_typeof;\n \n /* Nonzero if we've already printed a \"missing braces around initializer\"\n    message within this initializer.  */\n@@ -1751,6 +1759,16 @@ build_external_ref (tree id, int fun)\n     assemble_external (ref);\n   TREE_USED (ref) = 1;\n \n+  if (TREE_CODE (ref) == FUNCTION_DECL && !in_alignof)\n+    {\n+      if (!in_sizeof && !in_typeof)\n+\tC_DECL_USED (ref) = 1;\n+      else if (DECL_INITIAL (ref) == 0\n+\t       && DECL_EXTERNAL (ref)\n+\t       && !TREE_PUBLIC (ref))\n+\trecord_maybe_used_decl (ref);\n+    }\n+\n   if (TREE_CODE (ref) == CONST_DECL)\n     {\n       ref = DECL_INITIAL (ref);\n@@ -1772,6 +1790,86 @@ build_external_ref (tree id, int fun)\n   return ref;\n }\n \n+/* Record details of decls possibly used inside sizeof or typeof.  */\n+struct maybe_used_decl\n+{\n+  /* The decl.  */\n+  tree decl;\n+  /* The level seen at (in_sizeof + in_typeof).  */\n+  int level;\n+  /* The next one at this level or above, or NULL.  */\n+  struct maybe_used_decl *next;\n+};\n+\n+static struct maybe_used_decl *maybe_used_decls;\n+\n+/* Record that DECL, an undefined static function reference seen\n+   inside sizeof or typeof, might be used if the operand of sizeof is\n+   a VLA type or the operand of typeof is a variably modified\n+   type.  */\n+\n+void\n+record_maybe_used_decl (tree decl)\n+{\n+  struct maybe_used_decl *t = XOBNEW (&parser_obstack, struct maybe_used_decl);\n+  t->decl = decl;\n+  t->level = in_sizeof + in_typeof;\n+  t->next = maybe_used_decls;\n+  maybe_used_decls = t;\n+}\n+\n+/* Pop the stack of decls possibly used inside sizeof or typeof.  If\n+   USED is false, just discard them.  If it is true, mark them used\n+   (if no longer inside sizeof or typeof) or move them to the next\n+   level up (if still inside sizeof or typeof).  */\n+\n+void\n+pop_maybe_used (bool used)\n+{\n+  struct maybe_used_decl *p = maybe_used_decls;\n+  int cur_level = in_sizeof + in_typeof;\n+  while (p && p->level > cur_level)\n+    {\n+      if (used)\n+\t{\n+\t  if (cur_level == 0)\n+\t    C_DECL_USED (p->decl) = 1;\n+\t  else\n+\t    p->level = cur_level;\n+\t}\n+      p = p->next;\n+    }\n+  if (!used || cur_level == 0)\n+    maybe_used_decls = p;\n+}\n+\n+/* Return the result of sizeof applied to EXPR.  */\n+\n+struct c_expr\n+c_expr_sizeof_expr (struct c_expr expr)\n+{\n+  struct c_expr ret;\n+  ret.value = c_sizeof (TREE_TYPE (expr.value));\n+  ret.original_code = ERROR_MARK;\n+  pop_maybe_used (C_TYPE_VARIABLE_SIZE (TREE_TYPE (expr.value)));\n+  return ret;\n+}\n+\n+/* Return the result of sizeof applied to T, a structure for the type\n+   name passed to sizeof (rather than the type itself).  */\n+\n+struct c_expr\n+c_expr_sizeof_type (tree t)\n+{\n+  tree type;\n+  struct c_expr ret;\n+  type = groktypename (t);\n+  ret.value = c_sizeof (type);\n+  ret.original_code = ERROR_MARK;\n+  pop_maybe_used (C_TYPE_VARIABLE_SIZE (type));\n+  return ret;\n+}\n+\n /* Build a function call to function FUNCTION with parameters PARAMS.\n    PARAMS is a list--a chain of TREE_LIST nodes--in which the\n    TREE_VALUE of each node is a parameter-expression."}, {"sha": "2a2a32565c0816f84109314de3f31166dca4bc0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -1,3 +1,8 @@\n+2004-09-09  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/c90-static-1.c, gcc.dg/c99-static-1.c,\n+\tgcc.dg/gnu99-static-1.c: New tests.\n+\n 2004-09-08  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.dg/darwin-ld-20040828-1.c: New test."}, {"sha": "cc6f320c5a26e3b1b03dea30f51c9979e9c347be", "filename": "gcc/testsuite/gcc.dg/c90-static-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-static-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-static-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-static-1.c?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -0,0 +1,22 @@\n+/* It is a constraint violation for a static function to be declared\n+   but not defined if it is used except in a sizeof expression.  The\n+   use of the function simply being unevaluated is not enough.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=iso9899:1990 -pedantic-errors\" } */\n+\n+/* Constraint violation (trivial case, where function is used).  */\n+static void f0(void); /* { dg-error \"used but never defined\" } */\n+void g0(void) { f0(); }\n+\n+/* Constraint violation.  */\n+static void f1(void); /* { dg-error \"used but never defined\" } */\n+void g1(void) { if (0) { f1(); } }\n+\n+/* Constraint violation.  */\n+static int f2(void); /* { dg-error \"used but never defined\" } */\n+void g2(void) { 0 ? f2() : 0; }\n+\n+/* OK.  */\n+static int f3(void);\n+void g3(void) { sizeof(f3()); }"}, {"sha": "3c817c624d4a11bc01aa38d6ed143d3e6f5155a5", "filename": "gcc/testsuite/gcc.dg/c99-static-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-1.c?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -0,0 +1,35 @@\n+/* It is a constraint violation for a static function to be declared\n+   but not defined if it is used except in a sizeof expression whose\n+   result is an integer constant.  The use of the function simply\n+   being unevaluated is not enough.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=iso9899:1999 -pedantic-errors\" } */\n+\n+/* Constraint violation (trivial case, where function is used).  */\n+static void f0(void); /* { dg-error \"used but never defined\" } */\n+void g0(void) { f0(); }\n+\n+/* Constraint violation.  */\n+static void f1(void); /* { dg-error \"used but never defined\" } */\n+void g1(void) { if (0) { f1(); } }\n+\n+/* Constraint violation.  */\n+static int f2(void); /* { dg-error \"used but never defined\" } */\n+void g2(void) { 0 ? f2() : 0; }\n+\n+/* OK.  */\n+static int f3(void);\n+void g3(void) { sizeof(f3()); }\n+\n+/* OK (VM type, not VLA).  */\n+static int f4(void);\n+void g4(void) { sizeof(int (*)[f4()]); }\n+\n+/* Constraint violation (VLA).  */\n+static int f5(void); /* { dg-error \"used but never defined\" \"VLA\" { xfail *-*-* } } */\n+void g5(void) { sizeof(int [0 ? f5() : 1]); }\n+\n+/* OK (non-constant sizeof inside constant sizeof).  */\n+static int f6(void);\n+void g6(void) { sizeof(sizeof(int [f6()])); }"}, {"sha": "b600a4b1201d167fb0a48aaea6f16d649b713316", "filename": "gcc/testsuite/gcc.dg/gnu99-static-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-static-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-static-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-static-1.c?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -0,0 +1,30 @@\n+/* It is a constraint violation for a static function to be declared\n+   but not defined if it is used except in a sizeof expression whose\n+   result is an integer constant.  In GNU C, we need to consider\n+   __typeof__ and __alignof__ as well.  __alignof__ always returns a\n+   constant, so static functions can always be used therein.\n+   __typeof__ evaluates its argument iff it has variably modified\n+   type.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=gnu99 -pedantic-errors\" } */\n+\n+/* __alignof__, OK.  */\n+static int f0(void);\n+void g0(void) { __alignof__(f0()); }\n+\n+/* __typeof__ not variably modified, OK.  */\n+static int f1(void);\n+void g1(void) { __typeof__(f1()) x; }\n+\n+/* __typeof__ variably modified, not OK.  */\n+static int f2(void); /* { dg-error \"used but never defined\" } */\n+void g2(void) { __typeof__(int [f2()]) x; }\n+\n+/* __typeof__ variably modified, not OK.  */\n+static int f3(void); /* { dg-error \"used but never defined\" } */\n+void g3(void) { __typeof__(int (*)[f3()]) x; }\n+\n+/* Integer sizeof of VM typeof, OK.  */\n+static int f4(void);\n+void g4(void) { sizeof(__typeof__(int (*)[f3()])); }"}, {"sha": "d83d6c5fe90da7280492ed33cc504856d2919fae", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc4b653be6451211226018f96146a1eaa439b6cd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=bc4b653be6451211226018f96146a1eaa439b6cd", "patch": "@@ -840,6 +840,7 @@ check_global_declarations (tree *vec, int len)\n \t  && DECL_INITIAL (decl) == 0\n \t  && DECL_EXTERNAL (decl)\n \t  && ! DECL_ARTIFICIAL (decl)\n+\t  && ! TREE_NO_WARNING (decl)\n \t  && ! TREE_PUBLIC (decl)\n \t  && (warn_unused_function\n \t      || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))))"}]}