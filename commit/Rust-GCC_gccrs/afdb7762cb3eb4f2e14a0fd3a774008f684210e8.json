{"sha": "afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkYjc3NjJjYjNlYjRmMmUxNGEwZmQzYTc3NDAwOGY2ODQyMTBlOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-04-25T20:14:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-04-25T20:14:27Z"}, "message": "mutex (__get_once_functor_lock, [...]): Replace global lock object with local locks on global mutex.\n\n2009-04-25  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/mutex (__get_once_functor_lock, __get_once_mutex):\n\tReplace global lock object with local locks on global mutex.\n\t* src/mutex.cc: Likewise.\n\t* config/abi/pre/gnu.ver: Adjust.\n\t* testsuite/30_threads/call_once/call_once2.cc: New.\n\nFrom-SVN: r146785", "tree": {"sha": "64216b4268ae49070675dbac1fb3358d53d219df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64216b4268ae49070675dbac1fb3358d53d219df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d89aa1c4acdba9525a84d4f04f17269eb37436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d89aa1c4acdba9525a84d4f04f17269eb37436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d89aa1c4acdba9525a84d4f04f17269eb37436"}], "stats": {"total": 105, "additions": 78, "deletions": 27}, "files": [{"sha": "60f7ef2ea2e6fabf1dc99cc896d0f646fab150fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "patch": "@@ -1,3 +1,11 @@\n+2009-04-25  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/mutex (__get_once_functor_lock, __get_once_mutex):\n+\tReplace global lock object with local locks on global mutex.\n+\t* src/mutex.cc: Likewise.\n+\t* config/abi/pre/gnu.ver: Adjust.\n+\t* testsuite/30_threads/call_once/call_once2.cc: New.\n+\n 2009-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/39880"}, {"sha": "bd2c63e22193524be0830dc2569f0134815f3dd3", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "patch": "@@ -879,7 +879,8 @@ GLIBCXX_3.4.11 {\n     _ZSt11__once_call;\n     _ZSt15__once_callable;\n     _ZSt14__once_functor;\n-    _ZSt23__get_once_functor_lockv;\n+    _ZSt19__once_functor_lock;\n+    _ZSt16__get_once_mutexv;\n     __once_proxy;\n \n     # condition_variable"}, {"sha": "3a22aabcad114341ce795ff1acd3d3f6b1fcc96f", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "patch": "@@ -728,9 +728,10 @@ namespace std\n     }\n #else\n   extern function<void()> __once_functor;\n+  extern unique_lock<mutex>* __once_functor_lock;\n \n-  extern unique_lock<mutex>&\n-  __get_once_functor_lock();\n+  extern mutex&\n+  __get_once_mutex();\n #endif\n \n   extern \"C\" void __once_proxy();\n@@ -745,18 +746,13 @@ namespace std\n       __once_callable = &__bound_functor;\n       __once_call = &__once_call_impl<decltype(__bound_functor)>;\n #else\n-      unique_lock<mutex>& __functor_lock = __get_once_functor_lock();\n-      __functor_lock.lock();\n+      unique_lock<mutex> __functor_lock(__get_once_mutex());\n       __once_functor = bind(__f, __args...);\n+      __once_functor_lock = &__functor_lock;\n #endif\n \n       int __e = __gthread_once(&(__once._M_once), &__once_proxy);\n \n-#ifndef _GLIBCXX_HAVE_TLS\n-      if (__functor_lock)\n-\t__functor_lock.unlock();\n-#endif\n-\n       if (__e)\n \t__throw_system_error(__e);\n     }"}, {"sha": "a9467c2acd0767f2464fb8fb277544883c055391", "filename": "libstdc++-v3/src/mutex.cc", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc?ref=afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "patch": "@@ -25,18 +25,6 @@\n #include <mutex>\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n-#ifndef _GLIBCXX_HAVE_TLS\n-namespace\n-{\n-  std::mutex&\n-  get_once_mutex()\n-  {\n-    static std::mutex once_mutex;\n-    return once_mutex;\n-  }\n-}\n-#endif\n-\n namespace std\n {\n   const defer_lock_t defer_lock = defer_lock_t();\n@@ -55,11 +43,13 @@ namespace std\n   template class function<void()>;\n   function<void()> __once_functor;\n \n-  unique_lock<mutex>&\n-  __get_once_functor_lock()\n+  unique_lock<mutex>* __once_functor_lock;\n+\n+  mutex&\n+  __get_once_mutex()\n   {\n-    static unique_lock<mutex> once_functor_lock(get_once_mutex(), defer_lock);\n-    return once_functor_lock;\n+    static mutex once_mutex;\n+    return once_mutex;\n   }\n #endif\n \n@@ -69,7 +59,7 @@ namespace std\n     {\n #ifndef _GLIBCXX_HAVE_TLS\n       function<void()> __once_call = std::move(__once_functor);\n-      __get_once_functor_lock().unlock();\n+      __once_functor_lock->unlock();\n #endif\n       __once_call();\n     }"}, {"sha": "aa125919bf801cbc96e3205baf836dbb4b24647b", "filename": "libstdc++-v3/testsuite/30_threads/call_once/call_once2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdb7762cb3eb4f2e14a0fd3a774008f684210e8/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once2.cc?ref=afdb7762cb3eb4f2e14a0fd3a774008f684210e8", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <mutex>\n+#include <thread>\n+#include <testsuite_hooks.h>\n+\n+std::once_flag flag;\n+int value = 0;\n+\n+struct Inc { void operator()() const { ++value; } };\n+\n+struct Func\n+{\n+   void operator()() const\n+   {\n+       Inc inc;\n+       for (int i = 0; i < 10000;  ++i)\n+           std::call_once(flag, inc);\n+   }\n+};\n+\n+int main()\n+{\n+   Func f;\n+   std::thread t1(f);\n+   std::thread t2(f);\n+   std::thread t3(f);\n+   t1.join();\n+   t2.join();\n+   t3.join();\n+   VERIFY( value == 1 );\n+   return 0;\n+}"}]}