{"sha": "3a7cd43867b46d493106b680b5505e90dc47fbed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E3Y2Q0Mzg2N2I0NmQ0OTMxMDZiNjgwYjU1MDVlOTBkYzQ3ZmJlZA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-09-30T21:19:16Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-09-30T21:19:16Z"}, "message": "Speed-up loop blocking: strip-mining is always legal.\n\n2010-08-23  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-blocking.c (scop_do_strip_mine): Do not call\n\tgraphite_legal_transform.\n\t(scop_do_block): Same.\n\nFrom-SVN: r164793", "tree": {"sha": "53c9eb76638a81b7929c5fec8f33daabcf6e475d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53c9eb76638a81b7929c5fec8f33daabcf6e475d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a7cd43867b46d493106b680b5505e90dc47fbed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7cd43867b46d493106b680b5505e90dc47fbed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7cd43867b46d493106b680b5505e90dc47fbed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7cd43867b46d493106b680b5505e90dc47fbed/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45fc26fcadbb2412341d204f4b1f93f527a49d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45fc26fcadbb2412341d204f4b1f93f527a49d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45fc26fcadbb2412341d204f4b1f93f527a49d38"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "353e988945ebf21d7492b7e47d471baab538ad1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7cd43867b46d493106b680b5505e90dc47fbed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7cd43867b46d493106b680b5505e90dc47fbed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a7cd43867b46d493106b680b5505e90dc47fbed", "patch": "@@ -1,3 +1,9 @@\n+2010-09-30  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-blocking.c (scop_do_strip_mine): Do not call\n+\tgraphite_legal_transform.\n+\t(scop_do_block): Same.\n+\n 2010-09-30  Vladimir Kargov  <kargov@gmail.com>\n \n \t* graphite-scop-detection.c (graphite_can_represent_loop): Correct the"}, {"sha": "f94fc6efae3e85186a9456ab414e7ab8012c355e", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7cd43867b46d493106b680b5505e90dc47fbed/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7cd43867b46d493106b680b5505e90dc47fbed/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=3a7cd43867b46d493106b680b5505e90dc47fbed", "patch": "@@ -1,3 +1,9 @@\n+2010-08-23  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-blocking.c (scop_do_strip_mine): Do not call\n+\tgraphite_legal_transform.\n+\t(scop_do_block): Same.\n+\n 2010-08-20  Vladimir Kargov  <kargov@gmail.com>\n \n \t* graphite-scop-detection.c (graphite_can_represent_loop): Correct the"}, {"sha": "6e4334ad18794457779a111716ec68f2c70daf7e", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7cd43867b46d493106b680b5505e90dc47fbed/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7cd43867b46d493106b680b5505e90dc47fbed/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=3a7cd43867b46d493106b680b5505e90dc47fbed", "patch": "@@ -254,28 +254,13 @@ lst_do_strip_mine (lst_p lst)\n   return res;\n }\n \n-/* Strip mines all the loops in SCOP.  Nothing profitable in all this:\n-   this is just a driver function.  */\n+/* Strip mines all the loops in SCOP.  Returns true when some loops\n+   have been strip-mined.  */\n \n bool\n scop_do_strip_mine (scop_p scop)\n {\n-  bool transform_done = false;\n-\n-  store_scattering (scop);\n-\n-  transform_done = lst_do_strip_mine (SCOP_TRANSFORMED_SCHEDULE (scop));\n-\n-  if (!transform_done)\n-    return false;\n-\n-  if (!graphite_legal_transform (scop))\n-    {\n-      restore_scattering (scop);\n-      return false;\n-    }\n-\n-  return transform_done;\n+  return lst_do_strip_mine (SCOP_TRANSFORMED_SCHEDULE (scop));\n }\n \n /* Loop blocks all the loops in SCOP.  Returns true when we manage to\n@@ -292,10 +277,10 @@ scop_do_block (scop_p scop)\n   strip_mined = lst_do_strip_mine (SCOP_TRANSFORMED_SCHEDULE (scop));\n   interchanged = scop_do_interchange (scop);\n \n-  /* If we don't interchange loops, then the strip mine is not\n-     profitable, and the transform is not a loop blocking.  */\n-  if (!interchanged\n-      || !graphite_legal_transform (scop))\n+  /* If we don't interchange loops, the strip mine alone will not be\n+     profitable, and the transform is not a loop blocking: so revert\n+     the transform.  */\n+  if (!interchanged)\n     {\n       restore_scattering (scop);\n       return false;"}]}