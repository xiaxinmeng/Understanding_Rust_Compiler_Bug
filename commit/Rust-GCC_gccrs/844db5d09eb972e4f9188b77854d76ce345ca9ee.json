{"sha": "844db5d09eb972e4f9188b77854d76ce345ca9ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ0ZGI1ZDA5ZWI5NzJlNGY5MTg4Yjc3ODU0ZDc2Y2UzNDVjYTllZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-10-16T16:59:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-10-16T16:59:07Z"}, "message": "cgraph.c (dump_cgraph_node): Dump same_comdat_group, only_called_at_startup and only_called_at_exit.\n\n\t* cgraph.c (dump_cgraph_node): Dump same_comdat_group,\n\tonly_called_at_startup and only_called_at_exit.\n\t(cgraph_propagate_frequency): Compute only_called_at_startup and \n\tonly_called_at_exit.\n\t* cgraph.h (struct cgraph_node): New fileds only_called_at_startup and\n\tonly_called_at_exit.\n\t* lto-cgraph.c (lto_output_node, input_overwrite_node): Stream the new\n\tflags.\n\t* predict.c (compute_function_frequency): Initialize the new flags.\n\nFrom-SVN: r165560", "tree": {"sha": "729e8daec41bc5163de53301f1aa679b1c2fadf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/729e8daec41bc5163de53301f1aa679b1c2fadf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/844db5d09eb972e4f9188b77854d76ce345ca9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844db5d09eb972e4f9188b77854d76ce345ca9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844db5d09eb972e4f9188b77854d76ce345ca9ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844db5d09eb972e4f9188b77854d76ce345ca9ee/comments", "author": null, "committer": null, "parents": [{"sha": "6eb6875d7ec398935d3ae76f805e33db0c3773dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb6875d7ec398935d3ae76f805e33db0c3773dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb6875d7ec398935d3ae76f805e33db0c3773dd"}], "stats": {"total": 111, "additions": 91, "deletions": 20}, "files": [{"sha": "7c3dc3ba2fb6b044d153a355df59703457f59604", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=844db5d09eb972e4f9188b77854d76ce345ca9ee", "patch": "@@ -1,3 +1,15 @@\n+2010-10-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (dump_cgraph_node): Dump same_comdat_group,\n+\tonly_called_at_startup and only_called_at_exit.\n+\t(cgraph_propagate_frequency): Compute only_called_at_startup and \n+\tonly_called_at_exit.\n+\t* cgraph.h (struct cgraph_node): New fileds only_called_at_startup and\n+\tonly_called_at_exit.\n+\t* lto-cgraph.c (lto_output_node, input_overwrite_node): Stream the new\n+\tflags.\n+\t* predict.c (compute_function_frequency): Initialize the new flags.\n+\n 2010-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (gimplify_type_sizes) <ARRAY_TYPE>: If the type is to be"}, {"sha": "342ad63562f90c03e7b6f60408aa8da0f5ce80c1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 66, "deletions": 20, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=844db5d09eb972e4f9188b77854d76ce345ca9ee", "patch": "@@ -1816,6 +1816,10 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n     fprintf (f, \" (inline copy in %s/%i)\",\n \t     cgraph_node_name (node->global.inlined_to),\n \t     node->global.inlined_to->uid);\n+  if (node->same_comdat_group)\n+    fprintf (f, \" (same comdat group as %s/%i)\",\n+\t     cgraph_node_name (node->same_comdat_group),\n+\t     node->same_comdat_group->uid);\n   if (node->clone_of)\n     fprintf (f, \" (clone of %s/%i)\",\n \t     cgraph_node_name (node->clone_of),\n@@ -1876,6 +1880,10 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n     fprintf (f, \" redefined_extern_inline\");\n   if (TREE_ASM_WRITTEN (node->decl))\n     fprintf (f, \" asm_written\");\n+  if (node->only_called_at_startup)\n+    fprintf (f, \" only_called_at_startup\");\n+  if (node->only_called_at_exit)\n+    fprintf (f, \" only_called_at_exit\");\n \n   fprintf (f, \"\\n  called by: \");\n   for (edge = node->callers; edge; edge = edge->next_caller)\n@@ -2627,20 +2635,32 @@ bool\n cgraph_propagate_frequency (struct cgraph_node *node)\n {\n   bool maybe_unlikely_executed = true, maybe_executed_once = true;\n+  bool only_called_at_startup = true;\n+  bool only_called_at_exit = true;\n+  bool changed = false;\n   struct cgraph_edge *edge;\n+\n   if (!node->local.local)\n     return false;\n   gcc_assert (node->analyzed);\n-  if (node->frequency == NODE_FREQUENCY_HOT)\n-    return false;\n-  if (node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)\n-    return false;\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Processing frequency %s\\n\", cgraph_node_name (node));\n+\n   for (edge = node->callers;\n-       edge && (maybe_unlikely_executed || maybe_executed_once);\n+       edge && (maybe_unlikely_executed || maybe_executed_once\n+\t        || only_called_at_startup || only_called_at_exit);\n        edge = edge->next_caller)\n     {\n+      if (edge->caller != node)\n+\t{\n+          only_called_at_startup &= edge->caller->only_called_at_startup;\n+\t  /* It makes snese to put main() together with the static constructors.\n+\t     It will be executed for sure, but rest of functions called from\n+\t     main are definitly not at startup only.  */\n+\t  if (MAIN_NAME_P (DECL_NAME (edge->caller->decl)))\n+\t    only_called_at_startup = 0;\n+          only_called_at_exit &= edge->caller->only_called_at_exit;\n+\t}\n       if (!edge->frequency)\n \tcontinue;\n       switch (edge->caller->frequency)\n@@ -2649,7 +2669,8 @@ cgraph_propagate_frequency (struct cgraph_node *node)\n \t  break;\n \tcase NODE_FREQUENCY_EXECUTED_ONCE:\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"  Called by %s that is executed once\\n\", cgraph_node_name (node));\n+\t    fprintf (dump_file, \"  Called by %s that is executed once\\n\",\n+\t\t     cgraph_node_name (node));\n \t  maybe_unlikely_executed = false;\n \t  if (edge->loop_nest)\n \t    {\n@@ -2661,27 +2682,52 @@ cgraph_propagate_frequency (struct cgraph_node *node)\n \tcase NODE_FREQUENCY_HOT:\n \tcase NODE_FREQUENCY_NORMAL:\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"  Called by %s that is normal or hot\\n\", cgraph_node_name (node));\n+\t    fprintf (dump_file, \"  Called by %s that is normal or hot\\n\",\n+\t\t     cgraph_node_name (node));\n \t  maybe_unlikely_executed = false;\n \t  maybe_executed_once = false;\n \t  break;\n \t}\n     }\n-   if (maybe_unlikely_executed)\n-     {\n-       node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n+  if ((only_called_at_startup && !only_called_at_exit)\n+      && !node->only_called_at_startup)\n+    {\n+       node->only_called_at_startup = true;\n        if (dump_file)\n-         fprintf (dump_file, \"Node %s promoted to unlikely executed.\\n\", cgraph_node_name (node));\n-       return true;\n-     }\n-   if (maybe_executed_once && node->frequency != NODE_FREQUENCY_EXECUTED_ONCE)\n-     {\n-       node->frequency = NODE_FREQUENCY_EXECUTED_ONCE;\n+         fprintf (dump_file, \"Node %s promoted to only called at startup.\\n\",\n+\t\t  cgraph_node_name (node));\n+       changed = true;\n+    }\n+  if ((only_called_at_exit && !only_called_at_startup)\n+      && !node->only_called_at_exit)\n+    {\n+       node->only_called_at_exit = true;\n        if (dump_file)\n-         fprintf (dump_file, \"Node %s promoted to executed once.\\n\", cgraph_node_name (node));\n-       return true;\n-     }\n-   return false;\n+         fprintf (dump_file, \"Node %s promoted to only called at exit.\\n\",\n+\t\t  cgraph_node_name (node));\n+       changed = true;\n+    }\n+  /* These come either from profile or user hints; never update them.  */\n+  if (node->frequency == NODE_FREQUENCY_HOT\n+      || node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)\n+    return changed;\n+  if (maybe_unlikely_executed)\n+    {\n+      node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n+      if (dump_file)\n+\tfprintf (dump_file, \"Node %s promoted to unlikely executed.\\n\",\n+\t\t cgraph_node_name (node));\n+      changed = true;\n+    }\n+  if (maybe_executed_once && node->frequency != NODE_FREQUENCY_EXECUTED_ONCE)\n+    {\n+      node->frequency = NODE_FREQUENCY_EXECUTED_ONCE;\n+      if (dump_file)\n+\tfprintf (dump_file, \"Node %s promoted to executed once.\\n\",\n+\t\t cgraph_node_name (node));\n+      changed = true;\n+    }\n+  return changed;\n }\n \n /* Return true when NODE can not return or throw and thus"}, {"sha": "ea95f70bba7599f499c9ad9a27ccac8e2a73b613", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=844db5d09eb972e4f9188b77854d76ce345ca9ee", "patch": "@@ -298,6 +298,10 @@ struct GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\"))) cgraph_node {\n   /* How commonly executed the node is.  Initialized during branch\n      probabilities pass.  */\n   ENUM_BITFIELD (node_frequency) frequency : 2;\n+  /* True when function can only be called at startup (from static ctor).  */\n+  unsigned only_called_at_startup : 1;\n+  /* True when function can only be called at startup (from static dtor).  */\n+  unsigned only_called_at_exit : 1;\n };\n \n typedef struct cgraph_node *cgraph_node_ptr;"}, {"sha": "85a7c4035c5b4a23eab6902051774a6475a9cbbf", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=844db5d09eb972e4f9188b77854d76ce345ca9ee", "patch": "@@ -518,6 +518,8 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   bp_pack_value (&bp, node->alias, 1);\n   bp_pack_value (&bp, node->finalized_by_frontend, 1);\n   bp_pack_value (&bp, node->frequency, 2);\n+  bp_pack_value (&bp, node->only_called_at_startup, 1);\n+  bp_pack_value (&bp, node->only_called_at_exit, 1);\n   lto_output_bitpack (&bp);\n   lto_output_uleb128_stream (ob->main_stream, node->resolution);\n \n@@ -978,6 +980,8 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->alias = bp_unpack_value (bp, 1);\n   node->finalized_by_frontend = bp_unpack_value (bp, 1);\n   node->frequency = (enum node_frequency)bp_unpack_value (bp, 2);\n+  node->only_called_at_startup = bp_unpack_value (bp, 1);\n+  node->only_called_at_exit = bp_unpack_value (bp, 1);\n   node->resolution = resolution;\n }\n "}, {"sha": "eb91b87819d6e1d5e279bd4740366498700e121b", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844db5d09eb972e4f9188b77854d76ce345ca9ee/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=844db5d09eb972e4f9188b77854d76ce345ca9ee", "patch": "@@ -2187,6 +2187,11 @@ compute_function_frequency (void)\n {\n   basic_block bb;\n   struct cgraph_node *node = cgraph_node (current_function_decl);\n+  if (DECL_STATIC_CONSTRUCTOR (current_function_decl)\n+      || MAIN_NAME_P (DECL_NAME (current_function_decl)))\n+    node->only_called_at_startup = true;\n+  if (DECL_STATIC_DESTRUCTOR (current_function_decl))\n+    node->only_called_at_exit = true;\n \n   if (!profile_info || !flag_branch_probabilities)\n     {"}]}