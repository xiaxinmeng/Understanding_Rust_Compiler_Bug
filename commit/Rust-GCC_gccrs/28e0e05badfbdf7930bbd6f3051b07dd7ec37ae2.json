{"sha": "28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlMGUwNWJhZGZiZGY3OTMwYmJkNmYzMDUxYjA3ZGQ3ZWMzN2FlMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-26T07:19:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-26T07:19:00Z"}, "message": "re PR tree-optimization/80842 (ICE at -O3 on x86_64-linux-gnu in \"set_lattice_value\")\n\n2017-05-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80842\n\t* tree-ssa-ccp.c (set_lattice_value): Always meet with the old\n\tvalue.\n\n\t* gcc.dg/torture/pr80842.c: New testcase.\n\nFrom-SVN: r248482", "tree": {"sha": "e08d74d56d5b4c52e9ca57d243a837d4a7894b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e08d74d56d5b4c52e9ca57d243a837d4a7894b2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f408a6350f28490124ae042207027fa6599af29b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f408a6350f28490124ae042207027fa6599af29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f408a6350f28490124ae042207027fa6599af29b"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "f281611171a6dd8682cb31ebf0b120c545eb39d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2", "patch": "@@ -1,3 +1,9 @@\n+2017-05-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80842\n+\t* tree-ssa-ccp.c (set_lattice_value): Always meet with the old\n+\tvalue.\n+\n 2017-05-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80844"}, {"sha": "6042b1902eff7fa43db1caca89785ada093b1d26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2", "patch": "@@ -1,3 +1,8 @@\n+2017-05-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80842\n+\t* gcc.dg/torture/pr80842.c: New testcase.\n+\n 2017-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/79652"}, {"sha": "600e8ce13aed192a1f52f84ce51797c40ec2d363", "filename": "gcc/testsuite/gcc.dg/torture/pr80842.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80842.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80842.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80842.c?ref=28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+\n+unsigned a;\n+short b;\n+char c, d, e;\n+void fn1();\n+void fn2() {\n+    a++;\n+    for (; a;)\n+      fn1(0, 0);\n+}\n+void fn3() {\n+    fn2();\n+l1:;\n+   unsigned char f;\n+   short g;\n+   unsigned char *h = &f;\n+   g += &h ? e ? g = 1 : 0 : 0;\n+   d = g;\n+   c *f;\n+   if (d & (b %= *h) < f * d / (d -= 0))\n+     goto l1;\n+}"}, {"sha": "f18f2e0c2a4ca4b73ba9cdf3343eb374043eb4a3", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=28e0e05badfbdf7930bbd6f3051b07dd7ec37ae2", "patch": "@@ -497,9 +497,7 @@ set_lattice_value (tree var, ccp_prop_value_t *new_val)\n      use the meet operator to retain a conservative value.\n      Missed optimizations like PR65851 makes this necessary.\n      It also ensures we converge to a stable lattice solution.  */\n-  if (new_val->lattice_val == CONSTANT\n-      && old_val->lattice_val == CONSTANT\n-      && TREE_CODE (new_val->value) != SSA_NAME)\n+  if (old_val->lattice_val != UNINITIALIZED)\n     ccp_lattice_meet (new_val, old_val);\n \n   gcc_checking_assert (valid_lattice_transition (*old_val, *new_val));"}]}