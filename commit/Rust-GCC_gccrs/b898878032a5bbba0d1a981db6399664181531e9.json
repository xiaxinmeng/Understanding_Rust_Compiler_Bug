{"sha": "b898878032a5bbba0d1a981db6399664181531e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5ODg3ODAzMmE1YmJiYTBkMWE5ODFkYjYzOTk2NjQxODE1MzFlOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-04T09:55:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-04T09:55:13Z"}, "message": "lto: Remove stream_input_location_now\n\nAs discussed yesterday, stream_input_location_now has been used in 3\nremaining places.  For ERT_MUST_NOT_THROW, I believe the failure_loc\nlocation is stable at least until the apply_cache after the bbs are all\nread, and the locations do not include BLOCK, so we can use normal\nstream_input_location, and the two input_struct_function_base also\nshouldn't include BLOCK and are stable at least until that same apply_cache\nafter reading all bbs, so again we can use the location cache.\n\n2020-09-04  Jakub Jelinek  <jakub@redhat.com>\n\n\t* lto-streamer.h (stream_input_location_now): Remove declaration.\n\t* lto-streamer-in.c (stream_input_location_now): Remove.\n\t(input_eh_region, input_struct_function_base): Use\n\tstream_input_location instead of stream_input_location_now.", "tree": {"sha": "6634a835111137ac96190ee67bb9851237e429a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6634a835111137ac96190ee67bb9851237e429a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b898878032a5bbba0d1a981db6399664181531e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b898878032a5bbba0d1a981db6399664181531e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b898878032a5bbba0d1a981db6399664181531e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b898878032a5bbba0d1a981db6399664181531e9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d8d9bd93f7912e56a27e64abc9e1e895fe143a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d8d9bd93f7912e56a27e64abc9e1e895fe143a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d8d9bd93f7912e56a27e64abc9e1e895fe143a"}], "stats": {"total": 23, "additions": 4, "deletions": 19}, "files": [{"sha": "783ecc064a98dde4544cb9e3bc900116d06f35a5", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b898878032a5bbba0d1a981db6399664181531e9/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b898878032a5bbba0d1a981db6399664181531e9/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=b898878032a5bbba0d1a981db6399664181531e9", "patch": "@@ -351,19 +351,6 @@ lto_input_location (location_t *loc, struct bitpack_d *bp,\n   data_in->location_cache.input_location (loc, bp, data_in);\n }\n \n-/* Read location and return it instead of going through location caching.\n-   This should be used only when the resulting location is not going to be\n-   discarded.  */\n-\n-location_t\n-stream_input_location_now (struct bitpack_d *bp, class data_in *data_in)\n-{\n-  location_t loc;\n-  stream_input_location (&loc, bp, data_in);\n-  data_in->location_cache.apply_location_cache ();\n-  return loc;\n-}\n-\n /* Read a reference to a tree node from DATA_IN using input block IB.\n    TAG is the expected node that should be found in IB, if TAG belongs\n    to one of the indexable trees, expect to read a reference index to\n@@ -527,8 +514,8 @@ input_eh_region (class lto_input_block *ib, class data_in *data_in, int ix)\n \t  r->type = ERT_MUST_NOT_THROW;\n \t  r->u.must_not_throw.failure_decl = stream_read_tree (ib, data_in);\n \t  bitpack_d bp = streamer_read_bitpack (ib);\n-\t  r->u.must_not_throw.failure_loc\n-\t   = stream_input_location_now (&bp, data_in);\n+\t  stream_input_location (&r->u.must_not_throw.failure_loc,\n+\t  \t\t\t &bp, data_in);\n \t}\n \tbreak;\n \n@@ -1059,8 +1046,8 @@ input_struct_function_base (struct function *fn, class data_in *data_in,\n   fn->last_clique = bp_unpack_value (&bp, sizeof (short) * 8);\n \n   /* Input the function start and end loci.  */\n-  fn->function_start_locus = stream_input_location_now (&bp, data_in);\n-  fn->function_end_locus = stream_input_location_now (&bp, data_in);\n+  stream_input_location (&fn->function_start_locus, &bp, data_in);\n+  stream_input_location (&fn->function_end_locus, &bp, data_in);\n \n   /* Restore the instance discriminators if present.  */\n   int instance_number = bp_unpack_value (&bp, 1);"}, {"sha": "1ca13ed7f688f3965d2b221b4df2f7cf3baa6740", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b898878032a5bbba0d1a981db6399664181531e9/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b898878032a5bbba0d1a981db6399664181531e9/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=b898878032a5bbba0d1a981db6399664181531e9", "patch": "@@ -854,8 +854,6 @@ extern class data_in *lto_data_in_create (struct lto_file_decl_data *,\n extern void lto_data_in_delete (class data_in *);\n extern void lto_input_data_block (class lto_input_block *, void *, size_t);\n void lto_input_location (location_t *, struct bitpack_d *, class data_in *);\n-location_t stream_input_location_now (struct bitpack_d *bp,\n-\t\t\t\t      class data_in *data);\n tree lto_input_tree_ref (class lto_input_block *, class data_in *,\n \t\t\t struct function *, enum LTO_tags);\n void lto_tag_check_set (enum LTO_tags, int, ...);"}]}