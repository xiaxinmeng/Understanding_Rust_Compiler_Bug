{"sha": "373c726ec641e33ca640a51d6f4200318101f49d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczYzcyNmVjNjQxZTMzY2E2NDBhNTFkNmY0MjAwMzE4MTAxZjQ5ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-06T17:25:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-06T17:25:26Z"}, "message": "PR libstdc++/89102 fix common_type<> and common_type<T> specializations\n\nThis is a partial implementation of the revised std::common_type rules\nfrom P0435R1.\n\n\tPR libstdc++/89102 (partial)\n\t* include/std/type_traits (common_type<>): Define.\n\t(common_type<T>): Derive from common_type<T, T>.\n\t* testsuite/20_util/common_type/requirements/explicit_instantiation.cc:\n\tTest zero-length template argument list.\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n\tTest additional single argument cases.\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc:\n\tAdjust expected error.\n\nFrom-SVN: r268586", "tree": {"sha": "cdb60d48320834f95dda954fada89379850803ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdb60d48320834f95dda954fada89379850803ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373c726ec641e33ca640a51d6f4200318101f49d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373c726ec641e33ca640a51d6f4200318101f49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373c726ec641e33ca640a51d6f4200318101f49d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373c726ec641e33ca640a51d6f4200318101f49d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12f82acc9e55a16334d303ae2b88609bdcbf13e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f82acc9e55a16334d303ae2b88609bdcbf13e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f82acc9e55a16334d303ae2b88609bdcbf13e5"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "32061270c7af941abbe8886251be15d93c6c9a55", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=373c726ec641e33ca640a51d6f4200318101f49d", "patch": "@@ -1,3 +1,15 @@\n+2019-02-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/89102 (partial)\n+\t* include/std/type_traits (common_type<>): Define.\n+\t(common_type<T>): Derive from common_type<T, T>.\n+\t* testsuite/20_util/common_type/requirements/explicit_instantiation.cc:\n+\tTest zero-length template argument list.\n+\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n+\tTest additional single argument cases.\n+\t* testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc:\n+\tAdjust expected error.\n+\n 2019-02-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/89128"}, {"sha": "bc2250d9dce98ef12ab1d9e011e05796c2647d60", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=373c726ec641e33ca640a51d6f4200318101f49d", "patch": "@@ -2132,9 +2132,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __expanded_common_type_wrapper<__failure_type, _Args...>\n     { typedef __failure_type type; };\n \n+  template<>\n+    struct common_type<>\n+    { };\n+\n   template<typename _Tp>\n     struct common_type<_Tp>\n-    { typedef typename decay<_Tp>::type type; };\n+    : common_type<_Tp, _Tp>\n+    { };\n \n   template<typename _Tp, typename _Up>\n     struct common_type<_Tp, _Up>"}, {"sha": "dc57ab5ad8e5d7b1ecae3daafcff88092942033f", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/explicit_instantiation.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc?ref=373c726ec641e33ca640a51d6f4200318101f49d", "patch": "@@ -30,6 +30,7 @@ namespace std\n   typedef void test_type5;\n   typedef const void test_type6;  \n \n+  template struct common_type<>;\n   template struct common_type<test_type1>;\n   template struct common_type<test_type1, test_type2>;\n   template struct common_type<test_type1, test_type2, test_type3>;"}, {"sha": "9b94eb13434499ae02723e36d9db77bbdf12a1c7", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc?ref=373c726ec641e33ca640a51d6f4200318101f49d", "patch": "@@ -159,7 +159,10 @@ namespace std {\n   };\n }\n \n+static_assert(is_type<std::common_type<int>, int>(), \"\");\n+static_assert(is_type<std::common_type<const int>, int>(), \"\");\n static_assert(is_type<std::common_type<int, int>, int>(), \"\");\n+static_assert(is_type<std::common_type<const int, int>, int>(), \"\");\n static_assert(is_type<std::common_type<ScEn, ScEn>, ScEn>(), \"\");\n static_assert(is_type<std::common_type<UnscEn, UnscEn>, UnscEn>(), \"\");\n static_assert(is_type<std::common_type<UnscEn, int>, int>(), \"\");\n@@ -180,6 +183,8 @@ static_assert(is_type<std::common_type<int*, const volatile int*>,\n \t      const volatile int*>(), \"\");\n static_assert(is_type<std::common_type<void*, const volatile int*>,\n \t      const volatile void*>(), \"\");\n+static_assert(is_type<std::common_type<void>, void>(), \"\");\n+static_assert(is_type<std::common_type<const void>, void>(), \"\");\n static_assert(is_type<std::common_type<void, void>, void>(), \"\");\n static_assert(is_type<std::common_type<const void, const void>, void>(), \"\");\n static_assert(is_type<std::common_type<int&, int&&>, int>(), \"\");\n@@ -316,6 +321,14 @@ static_assert(!has_type<std::common_type<UConv1, Abstract&&>>(), \"\");\n static_assert(!has_type<std::common_type<std::initializer_list<int>,\n \t\t\t\t\t std::initializer_list<long>>>(), \"\");\n \n+// PR libstdc++/89102\n+static_assert(!has_type<std::common_type<int() &>>(), \"\");\n+static_assert(!has_type<std::common_type<int() & noexcept>>(), \"\");\n+static_assert(!has_type<std::common_type<int() const>>(), \"\");\n+static_assert(!has_type<std::common_type<int(...) &>>(), \"\");\n+static_assert(!has_type<std::common_type<int(...) & noexcept>>(), \"\");\n+static_assert(!has_type<std::common_type<int(...) const>>(), \"\");\n+\n void test(int i)\n {\n   auto local_lmd1 = [=](int, double) { return i + i; };"}, {"sha": "8f6f4ecd4d8b2f29bd45057104b821ec6cc52f24", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373c726ec641e33ca640a51d6f4200318101f49d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc?ref=373c726ec641e33ca640a51d6f4200318101f49d", "patch": "@@ -25,7 +25,7 @@ template<typename... Args>\n constexpr\n std::array<typename std::common_type<Args...>::type, \n   sizeof...(Args)>\n-make_array(Args&&... args)  // { dg-error \"invalid use\" }\n+make_array(Args&&... args)  // { dg-error \"no type.*common_type<>\" }\n {\n   typedef typename std::common_type<Args...>::type CT;\n   return std::array<CT, sizeof...(Args)>{static_cast<CT>"}]}