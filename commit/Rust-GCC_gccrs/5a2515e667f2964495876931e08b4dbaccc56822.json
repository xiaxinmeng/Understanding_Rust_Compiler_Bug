{"sha": "5a2515e667f2964495876931e08b4dbaccc56822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyNTE1ZTY2N2YyOTY0NDk1ODc2OTMxZTA4YjRkYmFjY2M1NjgyMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-07-15T08:16:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-07-15T08:16:44Z"}, "message": "mips.md (define_attr type): Add condmove.\n\n\t* config/mips/mips.md (define_attr type): Add condmove.  Use it for\n\tthe conditional move patterns.\n\t* config/mips/5400.md (ir_vr54_move): Rename to ir_vr54_condmove.\n\tCheck for condmove type.\n\t(ir_vr54_arith): Add move type.\n\t* config/mips/5500.md (ir_vr55_move, ir_vr55_arith): Likewise.\n\t* config/mips/sr71k.md (ir_sr70_move, ir_sr70_arith): Likewise.\n\nFrom-SVN: r69389", "tree": {"sha": "55d912c68e4e40705181e7b174ca593e14bc53d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d912c68e4e40705181e7b174ca593e14bc53d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a2515e667f2964495876931e08b4dbaccc56822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2515e667f2964495876931e08b4dbaccc56822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2515e667f2964495876931e08b4dbaccc56822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2515e667f2964495876931e08b4dbaccc56822/comments", "author": null, "committer": null, "parents": [{"sha": "119dbb1fceae4b4233d7a5fe1c38afc748c7af94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119dbb1fceae4b4233d7a5fe1c38afc748c7af94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119dbb1fceae4b4233d7a5fe1c38afc748c7af94"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "d0fbb13128daf66d3d2f6701577c703ab1103089", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a2515e667f2964495876931e08b4dbaccc56822", "patch": "@@ -1,3 +1,13 @@\n+2003-07-15  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (define_attr type): Add condmove.  Use it for\n+\tthe conditional move patterns.\n+\t* config/mips/5400.md (ir_vr54_move): Rename to ir_vr54_condmove.\n+\tCheck for condmove type.\n+\t(ir_vr54_arith): Add move type.\n+\t* config/mips/5500.md (ir_vr55_move, ir_vr55_arith): Likewise.\n+\t* config/mips/sr71k.md (ir_sr70_move, ir_sr70_arith): Likewise.\n+\n 2003-07-15  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-opts.c (print_help): Remove."}, {"sha": "70386fc518b1d91144384e11b263a761f3863fc1", "filename": "gcc/config/mips/5400.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2Fconfig%2Fmips%2F5400.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2Fconfig%2Fmips%2F5400.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5400.md?ref=5a2515e667f2964495876931e08b4dbaccc56822", "patch": "@@ -44,11 +44,10 @@\n \n \n ;; This reservation is for conditional move based on integer\n-;; or floating point CC.  This could probably use some refinement\n-;; as \"move\" type attr seems to be overloaded in rtl.\n-(define_insn_reservation \"ir_vr54_move\" 4\n+;; or floating point CC.\n+(define_insn_reservation \"ir_vr54_condmove\" 4\n   (and (eq_attr \"cpu\" \"r5400\")\n-       (eq_attr \"type\" \"move\"))\n+       (eq_attr \"type\" \"condmove\"))\n   \"vr54_dp0|vr54_dp1\")\n \n ;; Move to/from FPU registers\n@@ -64,7 +63,7 @@\n \n (define_insn_reservation \"ir_vr54_arith\" 1\n   (and (eq_attr \"cpu\" \"r5400\")\n-       (eq_attr \"type\" \"arith,darith,const,icmp,nop\"))\n+       (eq_attr \"type\" \"move,arith,darith,const,icmp,nop\"))\n   \"vr54_dp0|vr54_dp1\")\n \n (define_insn_reservation \"ir_vr54_imul_si\" 3"}, {"sha": "0abee1741c295c9347f9d2618e9024c7729eb298", "filename": "gcc/config/mips/5500.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2Fconfig%2Fmips%2F5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2Fconfig%2Fmips%2F5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5500.md?ref=5a2515e667f2964495876931e08b4dbaccc56822", "patch": "@@ -37,11 +37,10 @@\n   \"vr55_mem\")\n \n ;; This reservation is for conditional move based on integer\n-;; or floating point CC.  This could probably use some refinement\n-;; as \"move\" type attr seems to be overloaded in rtl.\n-(define_insn_reservation \"ir_vr55_move\" 2\n+;; or floating point CC.\n+(define_insn_reservation \"ir_vr55_condmove\" 2\n   (and (eq_attr \"cpu\" \"r5500\")\n-       (eq_attr \"type\" \"move\"))\n+       (eq_attr \"type\" \"condmove\"))\n   \"vr55_dp0|vr55_dp1\")\n \n ;; Move to/from FPU registers\n@@ -57,7 +56,7 @@\n \n (define_insn_reservation \"ir_vr55_arith\" 1\n   (and (eq_attr \"cpu\" \"r5500\")\n-       (eq_attr \"type\" \"arith,darith,const,icmp,nop\"))\n+       (eq_attr \"type\" \"move,arith,darith,const,icmp,nop\"))\n   \"vr55_dp0|vr55_dp1\")\n \n (define_insn_reservation \"ir_vr55_imul_si\" 3"}, {"sha": "efb0231ae806f4327481bca20a93f71d076bd08a", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=5a2515e667f2964495876931e08b4dbaccc56822", "patch": "@@ -100,6 +100,7 @@\n ;; store\tstore instruction(s)\n ;; prefetch\tmemory prefetch\n ;; move\t\tdata movement within same register set\n+;; condmove\tconditional moves\n ;; xfer\t\ttransfer to/from coprocessor\n ;; hilo\t\ttransfer of hi/lo registers\n ;; arith\tinteger arithmetic instruction\n@@ -122,7 +123,7 @@\n ;; multi\tmultiword sequence (or user asm statements)\n ;; nop\t\tno operation\n (define_attr \"type\"\n-  \"unknown,branch,jump,call,load,store,prefetch,move,xfer,hilo,const,arith,darith,imul,imadd,idiv,icmp,fadd,fmul,fmadd,fdiv,fabs,fneg,fcmp,fcvt,fsqrt,frsqrt,multi,nop\"\n+  \"unknown,branch,jump,call,load,store,prefetch,move,condmove,xfer,hilo,const,arith,darith,imul,imadd,idiv,icmp,fadd,fmul,fmadd,fdiv,fabs,fneg,fcmp,fcvt,fsqrt,frsqrt,multi,nop\"\n   (cond [(eq_attr \"jal\" \"!unset\")\n \t (const_string \"call\")]\n \t(const_string \"unknown\")))\n@@ -8764,7 +8765,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%B4\\\\t%0,%z2,%1\n     mov%b4\\\\t%0,%z3,%1\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"\"\n@@ -8779,7 +8780,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%B4\\\\t%0,%z2,%1\n     mov%b4\\\\t%0,%z3,%1\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"\"\n@@ -8795,7 +8796,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%T3\\\\t%0,%z1,%4\n     mov%t3\\\\t%0,%z2,%4\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"\"\n@@ -8810,7 +8811,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%B4\\\\t%0,%z2,%1\n     mov%b4\\\\t%0,%z3,%1\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"\"\n@@ -8825,7 +8826,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%B4\\\\t%0,%z2,%1\n     mov%b4\\\\t%0,%z3,%1\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"\"\n@@ -8841,7 +8842,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%T3\\\\t%0,%z1,%4\n     mov%t3\\\\t%0,%z2,%4\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"\"\n@@ -8856,7 +8857,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%B4.s\\\\t%0,%2,%1\n     mov%b4.s\\\\t%0,%3,%1\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"\"\n@@ -8871,7 +8872,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%B4.s\\\\t%0,%2,%1\n     mov%b4.s\\\\t%0,%3,%1\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"\"\n@@ -8887,7 +8888,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%T3.s\\\\t%0,%1,%4\n     mov%t3.s\\\\t%0,%2,%4\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"\"\n@@ -8902,7 +8903,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%B4.d\\\\t%0,%2,%1\n     mov%b4.d\\\\t%0,%3,%1\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"\"\n@@ -8917,7 +8918,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%B4.d\\\\t%0,%2,%1\n     mov%b4.d\\\\t%0,%3,%1\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"\"\n@@ -8933,7 +8934,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n   \"@\n     mov%T3.d\\\\t%0,%1,%4\n     mov%t3.d\\\\t%0,%2,%4\"\n-  [(set_attr \"type\" \"move\")\n+  [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"DF\")])\n \n ;; These are the main define_expand's used to make conditional moves."}, {"sha": "51731893dbf71390044b69c778ee45f97bcb0340", "filename": "gcc/config/mips/sr71k.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2Fconfig%2Fmips%2Fsr71k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2515e667f2964495876931e08b4dbaccc56822/gcc%2Fconfig%2Fmips%2Fsr71k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsr71k.md?ref=5a2515e667f2964495876931e08b4dbaccc56822", "patch": "@@ -172,12 +172,11 @@\n \n \n ;; This reservation is for conditional move based on integer\n-;; or floating point CC.  This could probably use some refinement\n-;; as \"move\" type attr seems to be overloaded in rtl.\n-(define_insn_reservation \"ir_sr70_move\"\n+;; or floating point CC.\n+(define_insn_reservation \"ir_sr70_condmove\"\n                                4\n                           (and (eq_attr \"cpu\" \"sr71000\")\n-                               (eq_attr \"type\" \"move\"))\n+                               (eq_attr \"type\" \"condmove\"))\n                          \"ri_insns\")\n \n ;; Try to discriminate move-from-cp1 versus move-to-cp1 as latencies\n@@ -206,7 +205,7 @@\n (define_insn_reservation \"ir_sr70_arith\"\n                                1\n                           (and (eq_attr \"cpu\" \"sr71000\")\n-                               (eq_attr \"type\" \"arith,darith,const\"))\n+                               (eq_attr \"type\" \"move,arith,darith,const\"))\n                          \"ri_insns\")\n \n ;; emulate repeat (dispatch stall) by spending extra cycle(s) in"}]}