{"sha": "2e1ec94ff0b0a954d540332b400d5376498ee7f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxZWM5NGZmMGIwYTk1NGQ1NDAzMzJiNDAwZDUzNzY0OThlZTdmNw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2010-07-08T09:29:43Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2010-07-08T09:29:43Z"}, "message": "Fix PR44768\n\nFrom-SVN: r161947", "tree": {"sha": "01b97f48f60b6b26a33e36c02e9c0c36908cc106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01b97f48f60b6b26a33e36c02e9c0c36908cc106"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e1ec94ff0b0a954d540332b400d5376498ee7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1ec94ff0b0a954d540332b400d5376498ee7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e1ec94ff0b0a954d540332b400d5376498ee7f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1ec94ff0b0a954d540332b400d5376498ee7f7/comments", "author": null, "committer": null, "parents": [{"sha": "a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "21ac382246bfaa99eabf9b8d0b682e4249495dd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1ec94ff0b0a954d540332b400d5376498ee7f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1ec94ff0b0a954d540332b400d5376498ee7f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e1ec94ff0b0a954d540332b400d5376498ee7f7", "patch": "@@ -1,3 +1,12 @@\n+2010-07-08  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+        PR bootstrap/44768\n+\t* cfgexpand.c (estimated_stack_frame_size): Make self-contained\n+\twith respect to current_function_decl. Pass decl of the function.\n+\t* tree-inline.h (estimated_stack_frame_size): Adjust prototype.\n+\t* ipa-inline.c (compute_inline_parameters): Pass decl to\n+\testimated_stack_frame_size.\n+\n 2010-07-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (vn_reference_maybe_forwprop_address):"}, {"sha": "b39d4db2cc5f453f63a8908ddc4cb1e3ffd582ef", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1ec94ff0b0a954d540332b400d5376498ee7f7/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1ec94ff0b0a954d540332b400d5376498ee7f7/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2e1ec94ff0b0a954d540332b400d5376498ee7f7", "patch": "@@ -1252,21 +1252,24 @@ fini_vars_expansion (void)\n   stack_vars_alloc = stack_vars_num = 0;\n }\n \n-/* Make a fair guess for the size of the stack frame of the current\n-   function.  This doesn't have to be exact, the result is only used\n+/* Make a fair guess for the size of the stack frame of the decl\n+   passed.  This doesn't have to be exact, the result is only used\n    in the inline heuristics.  So we don't want to run the full stack\n    var packing algorithm (which is quadratic in the number of stack\n    vars).  Instead, we calculate the total size of all stack vars.\n    This turns out to be a pretty fair estimate -- packing of stack\n    vars doesn't happen very often.  */\n \n HOST_WIDE_INT\n-estimated_stack_frame_size (void)\n+estimated_stack_frame_size (tree decl)\n {\n   HOST_WIDE_INT size = 0;\n   size_t i;\n   tree var, outer_block = DECL_INITIAL (current_function_decl);\n   unsigned ix;\n+  tree old_cur_fun_decl = current_function_decl;\n+  current_function_decl = decl;\n+  push_cfun (DECL_STRUCT_FUNCTION (decl));\n \n   init_vars_expansion ();\n \n@@ -1287,7 +1290,8 @@ estimated_stack_frame_size (void)\n       size += account_stack_vars ();\n       fini_vars_expansion ();\n     }\n-\n+  pop_cfun ();\n+  current_function_decl = old_cur_fun_decl;\n   return size;\n }\n "}, {"sha": "201e04af277579a7c7d00a1ab971f24726c37717", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1ec94ff0b0a954d540332b400d5376498ee7f7/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1ec94ff0b0a954d540332b400d5376498ee7f7/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=2e1ec94ff0b0a954d540332b400d5376498ee7f7", "patch": "@@ -2019,7 +2019,7 @@ compute_inline_parameters (struct cgraph_node *node)\n \n   /* Estimate the stack size for the function.  But not at -O0\n      because estimated_stack_frame_size is a quadratic problem.  */\n-  self_stack_size = optimize ? estimated_stack_frame_size () : 0;\n+  self_stack_size = optimize ? estimated_stack_frame_size (node->decl) : 0;\n   inline_summary (node)->estimated_self_stack_size = self_stack_size;\n   node->global.estimated_stack_size = self_stack_size;\n   node->global.stack_frame_offset = 0;"}, {"sha": "a8a33aa84d9e4ebae4d92713ff9a3e000ad8812f", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1ec94ff0b0a954d540332b400d5376498ee7f7/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1ec94ff0b0a954d540332b400d5376498ee7f7/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=2e1ec94ff0b0a954d540332b400d5376498ee7f7", "patch": "@@ -185,6 +185,6 @@ extern tree remap_decl (tree decl, copy_body_data *id);\n extern tree remap_type (tree type, copy_body_data *id);\n extern gimple_seq copy_gimple_seq_and_replace_locals (gimple_seq seq);\n \n-extern HOST_WIDE_INT estimated_stack_frame_size (void);\n+extern HOST_WIDE_INT estimated_stack_frame_size (tree);\n \n #endif /* GCC_TREE_INLINE_H */"}]}