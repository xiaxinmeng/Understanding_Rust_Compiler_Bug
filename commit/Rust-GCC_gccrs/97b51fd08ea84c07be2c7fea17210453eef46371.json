{"sha": "97b51fd08ea84c07be2c7fea17210453eef46371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdiNTFmZDA4ZWE4NGMwN2JlMmM3ZmVhMTcyMTA0NTNlZWY0NjM3MQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-08-17T20:44:10Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-08-17T20:44:10Z"}, "message": "class.c (make_class_data): Always emit JV_STATE_PRELOADING for class' initial state.\n\ngcc/java:\n\t* class.c (make_class_data): Always emit JV_STATE_PRELOADING for\n\tclass' initial state.\nlibjava:\n\t* java/lang/Class.h (_Jv_IsBinaryCompatibilityABI): Declare as\n\tfriend.\n\t* include/jvm.h (_Jv_IsBinaryCompatibilityABI): New function.\n\t* testsuite/libjava.lang/bclink.java: New file.\n\t* testsuite/libjava.lang/bclink.out: New file.\n\t* link.cc (print_class_loaded): Changed ABI test to look at\n\tvarious _syms fields.\n\nFrom-SVN: r103225", "tree": {"sha": "3d74be0649ef589d515a0e04062b5e30115e5b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d74be0649ef589d515a0e04062b5e30115e5b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97b51fd08ea84c07be2c7fea17210453eef46371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b51fd08ea84c07be2c7fea17210453eef46371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b51fd08ea84c07be2c7fea17210453eef46371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b51fd08ea84c07be2c7fea17210453eef46371/comments", "author": null, "committer": null, "parents": [{"sha": "87bb8864f6fa4ca966e8a57aa4828d51b3f9cc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87bb8864f6fa4ca966e8a57aa4828d51b3f9cc72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87bb8864f6fa4ca966e8a57aa4828d51b3f9cc72"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "0ecfd8f8098e0c25d53477f68d1ed023803462fa", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b51fd08ea84c07be2c7fea17210453eef46371/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b51fd08ea84c07be2c7fea17210453eef46371/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=97b51fd08ea84c07be2c7fea17210453eef46371", "patch": "@@ -1,3 +1,8 @@\n+2005-08-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* class.c (make_class_data): Always emit JV_STATE_PRELOADING for\n+\tclass' initial state.\n+\n 2005-08-16  Ranjit Mathew  <rmathew@hotmail.com>\n \n \tPR java/22113"}, {"sha": "a089112276e339a0cd24e31e1bdfbd0cfcaa0216", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b51fd08ea84c07be2c7fea17210453eef46371/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b51fd08ea84c07be2c7fea17210453eef46371/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=97b51fd08ea84c07be2c7fea17210453eef46371", "patch": "@@ -1860,13 +1860,9 @@ make_class_data (tree type)\n   PUSH_FIELD_VALUE (cons, \"loader\", null_pointer_node);\n   PUSH_FIELD_VALUE (cons, \"interface_count\",\n \t\t    build_int_cst (NULL_TREE, interface_len));\n-  PUSH_FIELD_VALUE \n-    (cons, \"state\",\n-     convert (byte_type_node,\n-\t      build_int_cst (NULL_TREE,\n-\t\t\t     flag_indirect_dispatch\n-\t\t\t     ? JV_STATE_PRELOADING\n-\t\t\t     : JV_STATE_COMPILED)));\n+  PUSH_FIELD_VALUE (cons, \"state\",\n+\t\t    convert (byte_type_node,\n+\t\t\t     build_int_cst (NULL_TREE, JV_STATE_PRELOADING)));\n \n   PUSH_FIELD_VALUE (cons, \"thread\", null_pointer_node);\n   PUSH_FIELD_VALUE (cons, \"depth\", integer_zero_node);"}, {"sha": "915c2ff895858535312f3807c5d174e4dc2666d9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=97b51fd08ea84c07be2c7fea17210453eef46371", "patch": "@@ -1,3 +1,13 @@\n+2005-08-17  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/Class.h (_Jv_IsBinaryCompatibilityABI): Declare as\n+\tfriend.\n+\t* include/jvm.h (_Jv_IsBinaryCompatibilityABI): New function.\n+\t* testsuite/libjava.lang/bclink.java: New file.\n+\t* testsuite/libjava.lang/bclink.out: New file.\n+\t* link.cc (print_class_loaded): Changed ABI test to look at\n+\tvarious _syms fields.\n+\n 2005-08-17  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/libjava.jacks/jacks.xfail: Remove 15.21-assoc-7,"}, {"sha": "459d4594278c9db37f61246da8aa7eae71522da2", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=97b51fd08ea84c07be2c7fea17210453eef46371", "patch": "@@ -621,4 +621,13 @@ _Jv_IsInterpretedClass (jclass c)\n   return (c->accflags & java::lang::reflect::Modifier::INTERPRETED) != 0;\n }\n \n+// Return true if the class was compiled with the BC ABI.\n+extern inline jboolean\n+_Jv_IsBinaryCompatibilityABI (jclass c)\n+{\n+  // There isn't really a better test for the ABI type at this point,\n+  // that will work once the class has been registered.\n+  return c->otable_syms || c->atable_syms || c->itable_syms;\n+}\n+\n #endif /* __JAVA_JVM_H__ */"}, {"sha": "a2ec357f770bb0c9693739cf134407529d0bdfcb", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=97b51fd08ea84c07be2c7fea17210453eef46371", "patch": "@@ -235,6 +235,7 @@ jboolean _Jv_CheckAccess (jclass self_klass, jclass other_klass,\n jclass _Jv_GetArrayClass (jclass klass, java::lang::ClassLoader *loader);\n \n jboolean _Jv_IsInterpretedClass (jclass);\n+jboolean _Jv_IsBinaryCompatibilityABI (jclass);\n \n void _Jv_CopyClassesToSystemLoader (java::lang::ClassLoader *);\n \n@@ -470,6 +471,7 @@ class java::lang::Class : public java::lang::Object\n \t\t\t\t       java::lang::ClassLoader *loader);\n \n   friend jboolean (::_Jv_IsInterpretedClass) (jclass);\n+  friend jboolean (::_Jv_IsBinaryCompatibilityABI) (jclass);\n \n #ifdef INTERPRETER\n   friend void ::_Jv_InitField (jobject, jclass, int);"}, {"sha": "5411f4aacca1b21328647a807d229cd4df4f3135", "filename": "libjava/link.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=97b51fd08ea84c07be2c7fea17210453eef46371", "patch": "@@ -1659,11 +1659,10 @@ _Jv_Linker::print_class_loaded (jclass klass)\n   if (codesource == NULL)\n     codesource = \"<no code source>\";\n \n-  // We use a somewhat bogus test for the ABI here.\n   char *abi;\n   if (_Jv_IsInterpretedClass (klass))\n     abi = \"bytecode\";\n-  else if (klass->state == JV_STATE_PRELOADING)\n+  else if (_Jv_IsBinaryCompatibilityABI (klass))\n     abi = \"BC-compiled\";\n   else\n     abi = \"pre-compiled\";"}, {"sha": "b10c678e123ff969ae107be16b6412877a91cba6", "filename": "libjava/testsuite/libjava.lang/bclink.java", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Ftestsuite%2Flibjava.lang%2Fbclink.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Ftestsuite%2Flibjava.lang%2Fbclink.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fbclink.java?ref=97b51fd08ea84c07be2c7fea17210453eef46371", "patch": "@@ -0,0 +1,12 @@\n+// This tests that a C++ ABI class can derive from a BC ABI class.\n+// This can't always work, but if the base class does not change then\n+// it will work fine.\n+\n+import org.xml.sax.*;\n+\n+public class bclink extends SAXParseException {\n+  public bclink() { super (\"hi\", null); }\n+\n+  public static void main(String[] args) throws Throwable {\n+  }\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libjava/testsuite/libjava.lang/bclink.out", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Ftestsuite%2Flibjava.lang%2Fbclink.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b51fd08ea84c07be2c7fea17210453eef46371/libjava%2Ftestsuite%2Flibjava.lang%2Fbclink.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fbclink.out?ref=97b51fd08ea84c07be2c7fea17210453eef46371"}]}