{"sha": "9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFmZmIyYzdlNDdmZDVhYmZhNGVlNjJlZTQxMjFkNTMyOTA3NmEyMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-09T21:30:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-09T21:30:35Z"}, "message": "c-opts.c (c_common_post_options): Force unit-at-a-time mode on when we have more than one input file.\n\n2004-07-09  Zack Weinberg  <zack@codesourcery.com>\n\t    Andrew Pinski  <apinski@apple.com>\n\n\t* c-opts.c (c_common_post_options): Force unit-at-a-time mode\n\ton when we have more than one input file.\n\t(c_common_parse_file): Restore loop over all input files.\n\tClarify diagnostic for -dy when YYDEBUG wasn't defined.\n\n\t* c-decl.c (set_type_context): New function.\n\t(pop_scope): Use it to set context of types.  When we\n\tencounter a TYPE_DECL, set the context of the attached type too.\n\t(pop_file_scope): Don't call cpp_undef_all here.\n\t(diagnose_mismatched_decls): Do not complain about a second\n\tdefinition of an 'extern inline' function if it's not in the\n\tsame translation unit.  Do not complain about inline\n\tdeclaration after use if the use was in a different\n\ttranslation unit.\n\t(merge_decls): Don't clobber olddecl's DECL_CONTEXT.\n\t(pushdecl): Do not put DECL_EXTERNAL, !TREE_PUBLIC decls in\n\tthe external scope.\n\t(pushdecl_top_level): Likewise.\n\t(grokdeclarator): Clarify what is going on with setting\n\tDECL_EXTERNAL on function types, a little.\n\t(c_write_global_declarations): Don't do anything if\n\t-fsyntax-only or errors have been encountered.\n\ntestsuite:\n\t* gcc.dg/noncompile/init-4.c: Remove bogus dg-error marker.\n\nFrom-SVN: r84402", "tree": {"sha": "58b85f972de94f99b74cfcf79c3da6dcde633962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58b85f972de94f99b74cfcf79c3da6dcde633962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/comments", "author": null, "committer": null, "parents": [{"sha": "4077d207437b94a2d07d76c93b6583d5920bf7a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4077d207437b94a2d07d76c93b6583d5920bf7a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4077d207437b94a2d07d76c93b6583d5920bf7a8"}], "stats": {"total": 147, "additions": 110, "deletions": 37}, "files": [{"sha": "78895ad6f24cae5706e45f635f025d0c892c3f99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "patch": "@@ -1,3 +1,29 @@\n+2004-07-09  Zack Weinberg  <zack@codesourcery.com>\n+\t    Andrew Pinski  <apinski@apple.com>\n+\n+\t* c-opts.c (c_common_post_options): Force unit-at-a-time mode\n+\ton when we have more than one input file.\n+\t(c_common_parse_file): Restore loop over all input files.\n+\tClarify diagnostic for -dy when YYDEBUG wasn't defined.\n+\n+\t* c-decl.c (set_type_context): New function.\n+\t(pop_scope): Use it to set context of types.  When we\n+\tencounter a TYPE_DECL, set the context of the attached type too.\n+\t(pop_file_scope): Don't call cpp_undef_all here.\n+\t(diagnose_mismatched_decls): Do not complain about a second\n+\tdefinition of an 'extern inline' function if it's not in the\n+\tsame translation unit.  Do not complain about inline\n+\tdeclaration after use if the use was in a different\n+\ttranslation unit.\n+\t(merge_decls): Don't clobber olddecl's DECL_CONTEXT.\n+\t(pushdecl): Do not put DECL_EXTERNAL, !TREE_PUBLIC decls in\n+\tthe external scope.\n+\t(pushdecl_top_level): Likewise.\n+\t(grokdeclarator): Clarify what is going on with setting\n+\tDECL_EXTERNAL on function types, a little.\n+\t(c_write_global_declarations): Don't do anything if\n+\t-fsyntax-only or errors have been encountered.\n+\n 2004-07-09  Zack Weinberg  <zack@codesourcery.com>\n \n \t* vec.c, vec.h (vec_assert_fail): Use unsigned int for LINE argument."}, {"sha": "6ff2dff081f29b4eecb7bb56f995d104ea70c4e9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "patch": "@@ -622,6 +622,16 @@ push_scope (void)\n     }\n }\n \n+/* Set the TYPE_CONTEXT of all of TYPE's variants to CONTEXT.  */\n+\n+static void\n+set_type_context (tree type, tree context)\n+{\n+  for (type = TYPE_MAIN_VARIANT (type); type;\n+       type = TYPE_NEXT_VARIANT (type))\n+    TYPE_CONTEXT (type) = context;\n+}\n+\n /* Exit a scope.  Restore the state of the identifier-decl mappings\n    that were in effect when this scope was entered.  Return a BLOCK\n    node containing all the DECLs in this scope that are of interest\n@@ -711,7 +721,7 @@ pop_scope (void)\n \tcase ENUMERAL_TYPE:\n \tcase UNION_TYPE:\n \tcase RECORD_TYPE:\n-\t  TYPE_CONTEXT (p) = context;\n+\t  set_type_context (p, context);\n \n \t  /* Types may not have tag-names, in which case the type\n \t     appears in the bindings list with b->id NULL.  */\n@@ -767,7 +777,11 @@ pop_scope (void)\n \t     This makes same_translation_unit_p work, and causes\n \t     static declarations to be given disambiguating suffixes.  */\n \t  if (scope == file_scope && num_in_fnames > 1)\n-\t    DECL_CONTEXT (p) = context;\n+\t    {\n+\t      DECL_CONTEXT (p) = context;\n+\t      if (TREE_CODE (p) == TYPE_DECL)\n+\t\tset_type_context (TREE_TYPE (p), context);\n+\t    }\n \n \t  /* Fall through.  */\n \t  /* Parameters go in DECL_ARGUMENTS, not BLOCK_VARS, and have\n@@ -865,7 +879,6 @@ pop_file_scope (void)\n   /* Pop off the file scope and close this translation unit.  */\n   pop_scope ();\n   file_scope = 0;\n-  cpp_undef_all (parse_in);\n   cgraph_finalize_compilation_unit ();\n }\n \n@@ -1215,7 +1228,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t      && !(DECL_DECLARED_INLINE_P (olddecl)\n \t\t   && DECL_EXTERNAL (olddecl)\n \t\t   && !(DECL_DECLARED_INLINE_P (newdecl)\n-\t\t\t&& DECL_EXTERNAL (newdecl))))\n+\t\t\t&& DECL_EXTERNAL (newdecl)\n+\t    \t\t&& same_translation_unit_p (olddecl, newdecl))))\n \t    {\n \t      error (\"%Jredefinition of '%D'\", newdecl, newdecl);\n \t      locate_old_decl (olddecl, error);\n@@ -1385,8 +1399,11 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \n       /* Inline declaration after use or definition.\n \t ??? Should we still warn about this now we have unit-at-a-time\n-\t mode and can get it right?  */\n-      if (DECL_DECLARED_INLINE_P (newdecl) && !DECL_DECLARED_INLINE_P (olddecl))\n+\t mode and can get it right?\n+\t Definitely don't complain if the decls are in different translation\n+\t units.  */\n+      if (DECL_DECLARED_INLINE_P (newdecl) && !DECL_DECLARED_INLINE_P (olddecl)\n+\t  && same_translation_unit_p (olddecl, newdecl))\n \t{\n \t  if (TREE_USED (olddecl))\n \t    {\n@@ -1669,14 +1686,16 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n     }\n \n   /* Copy most of the decl-specific fields of NEWDECL into OLDDECL.\n-     But preserve OLDDECL's DECL_UID.  */\n+     But preserve OLDDECL's DECL_UID and DECL_CONTEXT.  */\n   {\n     unsigned olddecl_uid = DECL_UID (olddecl);\n+    tree olddecl_context = DECL_CONTEXT (olddecl);\n \n     memcpy ((char *) olddecl + sizeof (struct tree_common),\n \t    (char *) newdecl + sizeof (struct tree_common),\n \t    sizeof (struct tree_decl) - sizeof (struct tree_common));\n     DECL_UID (olddecl) = olddecl_uid;\n+    DECL_CONTEXT (olddecl) = olddecl_context;\n   }\n \n   /* If OLDDECL had its DECL_RTL instantiated, re-invoke make_decl_rtl\n@@ -1897,14 +1916,13 @@ pushdecl (tree x)\n \t they are in different translation units.  In any case,\n \t the static does not go in the externals scope.  */\n       if (b\n-\t  && (DECL_EXTERNAL (x) || TREE_PUBLIC (x)\n-\t      || same_translation_unit_p (x, b->decl))\n+\t  && (TREE_PUBLIC (x) || same_translation_unit_p (x, b->decl))\n \t  && duplicate_decls (x, b->decl))\n \t{\n \t  bind (name, b->decl, scope, /*invisible=*/false, /*nested=*/true);\n \t  return b->decl;\n \t}\n-      else if (DECL_EXTERNAL (x) || TREE_PUBLIC (x))\n+      else if (TREE_PUBLIC (x))\n \t{\n \t  bind (name, x, external_scope, /*invisible=*/true, /*nested=*/false);\n \t  nested = true;\n@@ -1991,7 +2009,7 @@ pushdecl_top_level (tree x)\n   if (I_SYMBOL_BINDING (name))\n     abort ();\n \n-  if (DECL_EXTERNAL (x) || TREE_PUBLIC (x))\n+  if (TREE_PUBLIC (x))\n     {\n       bind (name, x, external_scope, /*invisible=*/true, /*nested=*/false);\n       nested = true;\n@@ -4459,14 +4477,6 @@ grokdeclarator (tree declarator, tree declspecs,\n       }\n     else if (TREE_CODE (type) == FUNCTION_TYPE)\n       {\n-\t/* Every function declaration is \"external\"\n-\t   except for those which are inside a function body\n-\t   in which `auto' is used.\n-\t   That is a case not specified by ANSI C,\n-\t   and we use it for forward declarations for nested functions.  */\n-\tint extern_ref = (!(specbits & (1 << (int) RID_AUTO))\n-\t\t\t  || current_scope == file_scope);\n-\n \tif (specbits & (1 << (int) RID_AUTO)\n \t    && (pedantic || current_scope == file_scope))\n \t  pedwarn (\"invalid storage class for function `%s'\", name);\n@@ -4497,8 +4507,16 @@ grokdeclarator (tree declarator, tree declspecs,\n \t    && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl))))\n \t  warning (\"`noreturn' function returns non-void value\");\n \n-\tif (extern_ref)\n+\t/* Every function declaration is an external reference\n+\t   (DECL_EXTERNAL) except for those which are not at file\n+\t   scope and are explicitly declared \"auto\".  This is\n+\t   forbidden by standard C (C99 6.7.1p5) and is interpreted by\n+\t   GCC to signify a forward declaration of a nested function.  */\n+\tif ((specbits & (1 << RID_AUTO)) && current_scope != file_scope)\n+\t  DECL_EXTERNAL (decl) = 0;\n+\telse\n \t  DECL_EXTERNAL (decl) = 1;\n+\t   \n \t/* Record absence of global scope for `static' or `auto'.  */\n \tTREE_PUBLIC (decl)\n \t  = !(specbits & ((1 << (int) RID_STATIC) | (1 << (int) RID_AUTO)));\n@@ -6630,6 +6648,11 @@ c_write_global_declarations (void)\n   if (pch_file)\n     return;\n \n+  /* Don't waste time on further processing if -fsyntax-only or we've\n+     encountered errors.  */\n+  if (flag_syntax_only || errorcount || sorrycount || cpp_errors (parse_in))\n+    return;\n+\n   /* Close the external scope.  */\n   ext_block = pop_scope ();\n   external_scope = 0;"}, {"sha": "da35c5327fa4f56c2d6014b6e4e7f5ea4fbc3b4e", "filename": "gcc/c-opts.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "patch": "@@ -943,6 +943,11 @@ c_common_post_options (const char **pfilename)\n       flag_inline_functions = 0;\n     }\n \n+  /* If we are given more than one input file, we must use\n+     unit-at-a-time mode.  */\n+  if (num_in_fnames > 1)\n+    flag_unit_at_a_time = 1;\n+\n   /* Default to ObjC sjlj exception handling if NeXT runtime.  */\n   if (flag_objc_sjlj_exceptions < 0)\n     flag_objc_sjlj_exceptions = flag_next_runtime;\n@@ -1061,22 +1066,37 @@ c_common_init (void)\n void\n c_common_parse_file (int set_yydebug)\n {\n+  unsigned int i;\n+\n+  /* Enable parser debugging, if requested and we can.  If requested\n+     and we can't, notify the user.  */\n #if YYDEBUG != 0\n   yydebug = set_yydebug;\n #else\n   if (set_yydebug)\n-    warning (\"YYDEBUG not defined\");\n+    warning (\"YYDEBUG was not defined at build time, -dy ignored\");\n #endif\n \n-  if (num_in_fnames > 1)\n-    fatal_error (\"sorry, inter-module analysis temporarily out of commission\");\n-\n-  finish_options ();\n-  pch_init ();\n-  push_file_scope ();\n-  c_parse_file ();\n-  finish_file ();\n-  pop_file_scope ();\n+  i = 0;\n+  for (;;)\n+    {\n+      finish_options ();\n+      pch_init ();\n+      push_file_scope ();\n+      c_parse_file ();\n+      finish_file ();\n+      pop_file_scope ();\n+\n+      if (++i >= num_in_fnames)\n+\tbreak;\n+      cpp_undef_all (parse_in);\n+      this_input_filename\n+\t= cpp_read_main_file (parse_in, in_fnames[i]);\n+      /* If an input file is missing, abandon further compilation.\n+         cpplib has issued a diagnostic.  */\n+      if (!this_input_filename)\n+\tbreak;\n+    }\n }\n \n /* Common finish hook for the C, ObjC and C++ front ends.  */"}, {"sha": "7548279c09a4fe9229c67bc93482d82d2b973301", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "patch": "@@ -1,3 +1,8 @@\n+2004-07-09  Zack Weinberg  <zack@codesourcery.com>\n+\t    Andrew Pinski  <apinski@apple.com>\n+\n+\t* gcc.dg/noncompile/init-4.c: Remove bogus dg-error marker.\n+\n 2004-07-09  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.fortran-torture/compile/name_clash2.f90: Remove outdated\n@@ -6,7 +11,7 @@\n 2004-07-09  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \tPaul Brook  <paul@codesourcery.com>\n \n-\t* gfortran.dg/dg.exp: Use revised wilcard for suffixes, also allow \n+\t* gfortran.dg/dg.exp: Use revised wilcard for suffixes, also allow\n \t'.f95' and '.F95'.\n \n 2004-07-09  Diego Novillo  <dnovillo@redhat.com>\n@@ -27,7 +32,7 @@\n \t* gfortran.fortran-torture/compile/implicit_2.f90: New test.\n \n \t* gfortran.dg/implicit_1.f90: New test.\n-\t\n+\n 2004-07-09  David Billinghurst (David.Billinghurst@riotinto.com)\n \n \t* lib/gfortran-dg.exp (gfortran-dg-test):  Adapt regular\n@@ -37,7 +42,7 @@\n \n 2004-07-09  David Billinghurst (David.Billinghurst@riotinto.com)\n \n-\t* lib/fortran-torture.exp: Rename proc search_for to \n+\t* lib/fortran-torture.exp: Rename proc search_for to\n \tsearch_for_re.\n \n 2004-07-09  Eric Botcazou  <ebotcazou@libertysurf.fr>\n@@ -60,15 +65,15 @@\n \n 2004-07-09  David Billinghurst (David.Billinghurst@riotinto.com)\n \n-\t* gfortran.dg/g77/f77-edit-s-out.f: Copy from g77.dg. XFAIL \n+\t* gfortran.dg/g77/f77-edit-s-out.f: Copy from g77.dg. XFAIL\n \t* gfortran.dg/g77/f77-edit-t-in.f: Likewise\n \t* gfortran.dg/g77/f77-edit-x-out.f: Likewise\n \n 2004-07-09  David Billinghurst (David.Billinghurst@riotinto.com)\n \n \t* gfortran.dg/g77/7388.f: Copy from g77.dg\n \t* gfortran.dg/g77/f77-edit-i-out.f: Likewise\n-\t* gfortran.dg/g77/f77-edit-apostrophe-out.f: Likewise  \n+\t* gfortran.dg/g77/f77-edit-apostrophe-out.f: Likewise\n \t* gfortran.dg/g77/f77-edit-slash-out.f: Likewise\n \t* gfortran.dg/g77/f77-edit-colon-out.f: Likewise\n \t* gfortran.dg/g77/f77-edit-t-out.f: Likewise"}, {"sha": "2d8bef3cb016b702adaba93b4425506f349b313f", "filename": "gcc/testsuite/gcc.dg/noncompile/init-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9affb2c7e47fd5abfa4ee62ee4121d5329076a23/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Finit-4.c?ref=9affb2c7e47fd5abfa4ee62ee4121d5329076a23", "patch": "@@ -1,3 +1,2 @@\n struct a { char *b; } c[D] /* { dg-error \"undeclared\" } */\n-  =                        /* { dg-error \"storage size\" } */\n-    { { \"\" } } ;  /* { dg-warning \"braces around scalar initializer|near\" } */\n+  = { { \"\" } } ;  /* { dg-warning \"braces around scalar initializer|near\" } */"}]}