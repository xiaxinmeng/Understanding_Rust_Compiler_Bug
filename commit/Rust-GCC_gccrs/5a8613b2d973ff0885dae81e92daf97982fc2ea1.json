{"sha": "5a8613b2d973ff0885dae81e92daf97982fc2ea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4NjEzYjJkOTczZmYwODg1ZGFlODFlOTJkYWY5Nzk4MmZjMmVhMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-04-30T23:21:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-04-30T23:21:38Z"}, "message": "re PR c++/27094 (tree check: expected tree_list, have omp_return in build_call)\n\n\tPR c++/27094\n\t* pt.c (tsubst_default_argument): Increment function_depth around\n\tcall to tsubst_expr.\n\t* parser.c (cp_parser_parameter_declaration): Likewise.\n\t* decl2.c (mark_used): Tidy.\n\tPR c++/27094\n\t* g++.dg/template/defarg8.C: New test.\n\nFrom-SVN: r113399", "tree": {"sha": "7e2fac46ae217590a820213c76c4b19d541dacd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e2fac46ae217590a820213c76c4b19d541dacd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a8613b2d973ff0885dae81e92daf97982fc2ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8613b2d973ff0885dae81e92daf97982fc2ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a8613b2d973ff0885dae81e92daf97982fc2ea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8613b2d973ff0885dae81e92daf97982fc2ea1/comments", "author": null, "committer": null, "parents": [{"sha": "194c524aa2f34e1389c4ddd31b20eea15eae00bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/194c524aa2f34e1389c4ddd31b20eea15eae00bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/194c524aa2f34e1389c4ddd31b20eea15eae00bb"}], "stats": {"total": 87, "additions": 66, "deletions": 21}, "files": [{"sha": "bdc1f41268c8d3fff4f8794f2054330dea562e5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a8613b2d973ff0885dae81e92daf97982fc2ea1", "patch": "@@ -1,3 +1,11 @@\n+2006-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27094\n+\t* pt.c (tsubst_default_argument): Increment function_depth around\n+\tcall to tsubst_expr.\n+\t* parser.c (cp_parser_parameter_declaration): Likewise.\n+\t* decl2.c (mark_used): Tidy.\n+\n 2006-04-30  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/27278"}, {"sha": "df85e4cba7b4d4319c2ea96ff3a67797a50c85af", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5a8613b2d973ff0885dae81e92daf97982fc2ea1", "patch": "@@ -3319,29 +3319,28 @@ mark_used (tree decl)\n     {\n       synthesize_method (decl);\n       /* If we've already synthesized the method we don't need to\n-\t instantiate it, so we can return right away.  */\n-      return;\n-    }\n-\n-  /* If this is a function or variable that is an instance of some\n-     template, we now know that we will need to actually do the\n-     instantiation. We check that DECL is not an explicit\n-     instantiation because that is not checked in instantiate_decl.  */\n-  if ((DECL_NON_THUNK_FUNCTION_P (decl) || TREE_CODE (decl) == VAR_DECL)\n-      && DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl)\n-      && (!DECL_EXPLICIT_INSTANTIATION (decl)\n-\t  || (TREE_CODE (decl) == FUNCTION_DECL\n-\t      && DECL_INLINE (DECL_TEMPLATE_RESULT\n-\t\t\t      (template_for_substitution (decl))))\n-\t  /* We need to instantiate static data members so that there\n-\t     initializers are available in integral constant\n-\t     expressions.  */\n-\t  || (TREE_CODE (decl) == VAR_DECL\n-\t      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))))\n-    /* We put off instantiating functions in order to improve compile\n+\t do the instantiation test below.  */\n+    }\n+  else if ((DECL_NON_THUNK_FUNCTION_P (decl) || TREE_CODE (decl) == VAR_DECL)\n+\t   && DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl)\n+\t   && (!DECL_EXPLICIT_INSTANTIATION (decl)\n+\t       || (TREE_CODE (decl) == FUNCTION_DECL\n+\t\t   && DECL_INLINE (DECL_TEMPLATE_RESULT\n+\t\t\t\t   (template_for_substitution (decl))))\n+\t       /* We need to instantiate static data members so that there\n+\t\t  initializers are available in integral constant\n+\t\t  expressions.  */\n+\t       || (TREE_CODE (decl) == VAR_DECL\n+\t\t   && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))))\n+    /* If this is a function or variable that is an instance of some\n+       template, we now know that we will need to actually do the\n+       instantiation. We check that DECL is not an explicit\n+       instantiation because that is not checked in instantiate_decl.\n+       \n+       We put off instantiating functions in order to improve compile\n        times.  Maintaining a stack of active functions is expensive,\n        and the inliner knows to instantiate any functions it might\n-       need.  */\n+       need.  Therefore, we always try to defer instantiation.  */\n     instantiate_decl (decl, /*defer_ok=*/true, \n \t\t      /*expl_inst_class_mem_p=*/false);\n "}, {"sha": "ff8086fd559c088b5e1c7002f8a90c2d7a896554", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5a8613b2d973ff0885dae81e92daf97982fc2ea1", "patch": "@@ -12431,10 +12431,17 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t  saved_local_variables_forbidden_p\n \t    = parser->local_variables_forbidden_p;\n \t  parser->local_variables_forbidden_p = true;\n+\t  /* The default argument expression may cause implicitly\n+\t     defined member functions to be synthesized, which will\n+\t     result in garbage collection.  We must treat this\n+\t     situation as if we were within the body of function so as\n+\t     to avoid collecting live data on the stack.  */\n+\t  ++function_depth;\n \t  /* Parse the assignment-expression.  */\n \t  default_argument\n \t    = cp_parser_assignment_expression (parser, /*cast_p=*/false);\n \t  /* Restore saved state.  */\n+\t  --function_depth;\n \t  parser->greater_than_is_operator_p\n \t    = saved_greater_than_is_operator_p;\n \t  parser->local_variables_forbidden_p"}, {"sha": "43efc63a3af6d31a1cabf159b84c7a228677bcd1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5a8613b2d973ff0885dae81e92daf97982fc2ea1", "patch": "@@ -6150,8 +6150,15 @@ tsubst_default_argument (tree fn, tree type, tree arg)\n     }\n \n   push_deferring_access_checks(dk_no_deferred);\n+  /* The default argument expression may cause implicitly defined\n+     member functions to be synthesized, which will result in garbage\n+     collection.  We must treat this situation as if we were within\n+     the body of function so as to avoid collecting live data on the\n+     stack.  */\n+  ++function_depth;\n   arg = tsubst_expr (arg, DECL_TI_ARGS (fn),\n \t\t     tf_warning_or_error, NULL_TREE);\n+  --function_depth;\n   pop_deferring_access_checks();\n \n   /* Restore the \"this\" pointer.  */"}, {"sha": "b9ca4cff981a922b197a7d49905823078ddc5ac9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a8613b2d973ff0885dae81e92daf97982fc2ea1", "patch": "@@ -1,3 +1,8 @@\n+2006-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27094\n+\t* g++.dg/template/defarg8.C: New test.\n+\n 2006-04-30  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/27278"}, {"sha": "61d819c7cdc25bc24a814f87e61c1a296290522d", "filename": "gcc/testsuite/g++.dg/template/defarg8.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8613b2d973ff0885dae81e92daf97982fc2ea1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg8.C?ref=5a8613b2d973ff0885dae81e92daf97982fc2ea1", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/27094\n+// { dg-options \"--param ggc-min-expand=0 --param ggc-min-heapsize=0\" }\n+\n+struct A\n+{\n+  ~A();\n+};\n+\n+struct B : A\n+{\n+  B();\n+};\n+\n+template<int> struct C\n+{\n+  C(const B& = B());\n+};\n+\n+C<0> c;"}]}