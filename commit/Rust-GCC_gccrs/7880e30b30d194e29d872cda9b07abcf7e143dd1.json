{"sha": "7880e30b30d194e29d872cda9b07abcf7e143dd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4MGUzMGIzMGQxOTRlMjlkODcyY2RhOWIwN2FiY2Y3ZTE0M2RkMQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-03-25T19:56:35Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-03-25T19:56:35Z"}, "message": "darwin-fallback.c: Don't include <ucontext.h>.\n\n\t* config/rs6000/darwin-fallback.c: Don't include <ucontext.h>.\n\tUse our own structure definitions.\n\nFrom-SVN: r97060", "tree": {"sha": "e42abbefe93c93d474dc6727f56a7be35e83dae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42abbefe93c93d474dc6727f56a7be35e83dae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7880e30b30d194e29d872cda9b07abcf7e143dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7880e30b30d194e29d872cda9b07abcf7e143dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7880e30b30d194e29d872cda9b07abcf7e143dd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7880e30b30d194e29d872cda9b07abcf7e143dd1/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c3cc7d9865c1a237eb84979ae86da6740c634da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3cc7d9865c1a237eb84979ae86da6740c634da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3cc7d9865c1a237eb84979ae86da6740c634da"}], "stats": {"total": 117, "additions": 79, "deletions": 38}, "files": [{"sha": "779bcf19d6832792b4c31e2d8488c6c7197b463b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7880e30b30d194e29d872cda9b07abcf7e143dd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7880e30b30d194e29d872cda9b07abcf7e143dd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7880e30b30d194e29d872cda9b07abcf7e143dd1", "patch": "@@ -5,6 +5,9 @@\n \n 2005-03-25  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* config/rs6000/darwin-fallback.c: Don't include <ucontext.h>.\n+\tUse our own structure definitions.\n+\n \t* config/rs6000/rs6000.md (UNSPEC constants): Add UNSPEC_STFIWX.\n \t(fix_truncdfsi2): Allow registers or memory as destination.\n \tWhen TARGET_PPC_GFXOPT, generate simplified pattern."}, {"sha": "3083b1fc50aacc2275dbadcea283688350f04130", "filename": "gcc/config/rs6000/darwin-fallback.c", "status": "modified", "additions": 76, "deletions": 38, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7880e30b30d194e29d872cda9b07abcf7e143dd1/gcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7880e30b30d194e29d872cda9b07abcf7e143dd1/gcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c?ref=7880e30b30d194e29d872cda9b07abcf7e143dd1", "patch": "@@ -36,9 +36,8 @@\n #include \"unwind-dw2.h\"\n #include <stdint.h>\n #include <stdbool.h>\n+#include <sys/types.h>\n #include <signal.h>\n-#include <ucontext.h>\n-#include <mach/thread_status.h>\n \n typedef unsigned long reg_unit;\n \n@@ -225,6 +224,11 @@ interpret_libc (reg_unit gprs[32], struct _Unwind_Context *context)\n     }\n }\n \n+/* We used to include <ucontext.h> and <mach/thread_status.h>,\n+   but they change so much between different Darwin system versions\n+   that it's much easier to just write the structures involved here\n+   directly.  */\n+\n /* These defines are from the kernel's bsd/dev/ppc/unix_signal.c.  */\n #define UC_TRAD                 1\n #define UC_TRAD_VEC             6\n@@ -237,6 +241,44 @@ interpret_libc (reg_unit gprs[32], struct _Unwind_Context *context)\n #define UC_DUAL                 50\n #define UC_DUAL_VEC             55\n \n+struct gcc_ucontext \n+{\n+  int onstack;\n+  sigset_t sigmask;\n+  void * stack_sp;\n+  size_t stack_sz;\n+  int stack_flags;\n+  struct gcc_ucontext *link;\n+  size_t mcsize;\n+  struct gcc_mcontext32 *mcontext;\n+};\n+\n+struct gcc_float_vector_state \n+{\n+  double fpregs[32];\n+  uint32_t fpscr_pad;\n+  uint32_t fpscr;\n+  uint32_t save_vr[32][4];\n+  uint32_t save_vscr[4];\n+};\n+\n+struct gcc_mcontext32 {\n+  uint32_t dar;\n+  uint32_t dsisr;\n+  uint32_t exception;\n+  uint32_t padding1[5];\n+  uint32_t srr0;\n+  uint32_t srr1;\n+  uint32_t gpr[32];\n+  uint32_t cr;\n+  uint32_t xer;\n+  uint32_t lr;\n+  uint32_t ctr;\n+  uint32_t mq;\n+  uint32_t vrsave;\n+  struct gcc_float_vector_state fvs;\n+};\n+\n /* These are based on /usr/include/ppc/ucontext.h and\n    /usr/include/mach/ppc/thread_status.h, but rewritten to be more\n    convenient, to compile on Jaguar, and to work around Radar 3712064\n@@ -256,17 +298,16 @@ struct gcc_mcontext64 {\n   uint32_t lr[2];\n   uint32_t ctr[2];\n   uint32_t vrsave;\n-  ppc_float_state_t fs;\n-  ppc_vector_state_t vs;\n+  struct gcc_float_vector_state fvs;\n };\n \n #define UC_FLAVOR_SIZE \\\n-  (sizeof (struct mcontext) - sizeof (ppc_vector_state_t))\n+  (sizeof (struct gcc_mcontext32) - 33*16)\n \n-#define UC_FLAVOR_VEC_SIZE (sizeof (struct mcontext))\n+#define UC_FLAVOR_VEC_SIZE (sizeof (struct gcc_mcontext32))\n \n #define UC_FLAVOR64_SIZE \\\n-  (sizeof (struct gcc_mcontext64) - sizeof (ppc_vector_state_t))\n+  (sizeof (struct gcc_mcontext64) - 33*16)\n \n #define UC_FLAVOR64_VEC_SIZE (sizeof (struct gcc_mcontext64))\n \n@@ -278,10 +319,9 @@ static bool\n handle_syscall (_Unwind_FrameState *fs, const reg_unit gprs[32],\n \t\t_Unwind_Ptr old_cfa)\n {\n-  ucontext_t *uctx;\n+  struct gcc_ucontext *uctx;\n   bool is_64, is_vector;\n-  ppc_float_state_t *float_state;\n-  ppc_vector_state_t *vector_state;\n+  struct gcc_float_vector_state * float_vector_state;\n   _Unwind_Ptr new_cfa;\n   int i;\n   static _Unwind_Ptr return_addr;\n@@ -293,16 +333,16 @@ handle_syscall (_Unwind_FrameState *fs, const reg_unit gprs[32],\n   \n   if (gprs[0] == 0x67 /* SYS_SIGRETURN */)\n     {\n-      uctx = (ucontext_t *) gprs[3];\n-      is_vector = (uctx->uc_mcsize == UC_FLAVOR64_VEC_SIZE\n-\t\t   || uctx->uc_mcsize == UC_FLAVOR_VEC_SIZE);\n-      is_64 = (uctx->uc_mcsize == UC_FLAVOR64_VEC_SIZE\n-\t       || uctx->uc_mcsize == UC_FLAVOR64_SIZE);\n+      uctx = (struct gcc_ucontext *) gprs[3];\n+      is_vector = (uctx->mcsize == UC_FLAVOR64_VEC_SIZE\n+\t\t   || uctx->mcsize == UC_FLAVOR_VEC_SIZE);\n+      is_64 = (uctx->mcsize == UC_FLAVOR64_VEC_SIZE\n+\t       || uctx->mcsize == UC_FLAVOR64_SIZE);\n     }\n   else if (gprs[0] == 0 && gprs[3] == 184)\n     {\n       int ctxstyle = gprs[5];\n-      uctx = (ucontext_t *) gprs[4];\n+      uctx = (struct gcc_ucontext *) gprs[4];\n       is_vector = (ctxstyle == UC_FLAVOR_VEC || ctxstyle == UC_FLAVOR64_VEC\n \t\t   || ctxstyle == UC_TRAD_VEC || ctxstyle == UC_TRAD64_VEC);\n       is_64 = (ctxstyle == UC_FLAVOR64_VEC || ctxstyle == UC_TRAD64_VEC\n@@ -325,11 +365,10 @@ handle_syscall (_Unwind_FrameState *fs, const reg_unit gprs[32],\n       /* The context is 64-bit, but it doesn't carry any extra information\n \t for us because only the low 32 bits of the registers are\n \t call-saved.  */\n-      struct gcc_mcontext64 *m64 = (struct gcc_mcontext64 *)uctx->uc_mcontext;\n+      struct gcc_mcontext64 *m64 = (struct gcc_mcontext64 *)uctx->mcontext;\n       int i;\n \n-      float_state = &m64->fs;\n-      vector_state = &m64->vs;\n+      float_vector_state = &m64->fvs;\n \n       new_cfa = m64->gpr[1][1];\n       \n@@ -354,33 +393,32 @@ handle_syscall (_Unwind_FrameState *fs, const reg_unit gprs[32],\n     }\n   else\n     {\n-      struct mcontext *m = uctx->uc_mcontext;\n+      struct gcc_mcontext32 *m = uctx->mcontext;\n       int i;\n \n-      float_state = &m->fs;\n-      vector_state = &m->vs;\n+      float_vector_state = &m->fvs;\n       \n-      new_cfa = m->ss.r1;\n+      new_cfa = m->gpr[1];\n \n-      set_offset (CR2_REGNO, &m->ss.cr);\n+      set_offset (CR2_REGNO, &m->cr);\n       for (i = 0; i < 32; i++)\n-\tset_offset (i, &m->ss.r0 + i);\n-      set_offset (XER_REGNO, &m->ss.xer);\n-      set_offset (LINK_REGISTER_REGNUM, &m->ss.lr);\n-      set_offset (COUNT_REGISTER_REGNUM, &m->ss.ctr);\n+\tset_offset (i, m->gpr + i);\n+      set_offset (XER_REGNO, &m->xer);\n+      set_offset (LINK_REGISTER_REGNUM, &m->lr);\n+      set_offset (COUNT_REGISTER_REGNUM, &m->ctr);\n \n       if (is_vector)\n-\tset_offset (VRSAVE_REGNO, &m->ss.vrsave);\n+\tset_offset (VRSAVE_REGNO, &m->vrsave);\n \n       /* Sometimes, srr0 points to the instruction that caused the exception,\n \t and sometimes to the next instruction to be executed; we want\n \t the latter.  */\n-      if (m->es.exception == 3 || m->es.exception == 4\n-\t  || m->es.exception == 6\n-\t  || (m->es.exception == 7 && !(m->ss.srr1 & 0x10000)))\n-\treturn_addr = m->ss.srr0 + 4;\n+      if (m->exception == 3 || m->exception == 4\n+\t  || m->exception == 6\n+\t  || (m->exception == 7 && !(m->srr1 & 0x10000)))\n+\treturn_addr = m->srr0 + 4;\n       else\n-\treturn_addr = m->ss.srr0;\n+\treturn_addr = m->srr0;\n     }\n \n   fs->cfa_how = CFA_REG_OFFSET;\n@@ -399,14 +437,14 @@ handle_syscall (_Unwind_FrameState *fs, const reg_unit gprs[32],\n   set_offset (ARG_POINTER_REGNUM, &return_addr);\n \n   for (i = 0; i < 32; i++)\n-    set_offset (32 + i, float_state->fpregs + i);\n-  set_offset (SPEFSCR_REGNO, &float_state->fpscr);\n+    set_offset (32 + i, float_vector_state->fpregs + i);\n+  set_offset (SPEFSCR_REGNO, &float_vector_state->fpscr);\n   \n   if (is_vector)\n     {\n       for (i = 0; i < 32; i++)\n-\tset_offset (FIRST_ALTIVEC_REGNO + i, vector_state->save_vr + i);\n-      set_offset (VSCR_REGNO, vector_state->save_vscr);\n+\tset_offset (FIRST_ALTIVEC_REGNO + i, float_vector_state->save_vr + i);\n+      set_offset (VSCR_REGNO, float_vector_state->save_vscr);\n     }\n \n   return true;"}]}