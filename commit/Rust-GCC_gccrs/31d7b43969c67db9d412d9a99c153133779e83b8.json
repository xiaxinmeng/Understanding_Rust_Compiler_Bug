{"sha": "31d7b43969c67db9d412d9a99c153133779e83b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkN2I0Mzk2OWM2N2RiOWQ0MTJkOWE5OWMxNTMxMzM3NzllODNiOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-02-12T20:42:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-02-12T20:42:45Z"}, "message": "sparc.h (CANNOT_CHANGE_MODE_CLASS): In 64-bit mode, disallow changes from SFmode to mode with different size in FP regs.\n\n\t* config/sparc/sparc.h (CANNOT_CHANGE_MODE_CLASS): In 64-bit mode,\n\tdisallow changes from SFmode to mode with different size in FP regs.\n\nFrom-SVN: r184144", "tree": {"sha": "b6e98596702f84d6a818be2ba0f27dad4e1dc318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6e98596702f84d6a818be2ba0f27dad4e1dc318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31d7b43969c67db9d412d9a99c153133779e83b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d7b43969c67db9d412d9a99c153133779e83b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d7b43969c67db9d412d9a99c153133779e83b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d7b43969c67db9d412d9a99c153133779e83b8/comments", "author": null, "committer": null, "parents": [{"sha": "5b4a7d0d8a03c4d3313565e71f77b97ea208e517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4a7d0d8a03c4d3313565e71f77b97ea208e517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b4a7d0d8a03c4d3313565e71f77b97ea208e517"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "1a971088a8a24d4eef00217ccbc65ff01079c11d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d7b43969c67db9d412d9a99c153133779e83b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d7b43969c67db9d412d9a99c153133779e83b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31d7b43969c67db9d412d9a99c153133779e83b8", "patch": "@@ -1,4 +1,9 @@\n-2012-01-29  Robert Millan  <rmh@gnu.org>\n+2012-02-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.h (CANNOT_CHANGE_MODE_CLASS): In 64-bit mode,\n+\tdisallow changes from SFmode to mode with different size in FP regs.\n+\n+2012-02-12  Robert Millan  <rmh@gnu.org>\n             Gerald Pfeifer <gerald@pfeifer.com>\n \n \t* ginclude/stddef.h [__FreeBSD_kernel__] (__size_t): Do not define."}, {"sha": "acc6be1fe1e4728b1f68e0e102f3c606e01eb674", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d7b43969c67db9d412d9a99c153133779e83b8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d7b43969c67db9d412d9a99c153133779e83b8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=31d7b43969c67db9d412d9a99c153133779e83b8", "patch": "@@ -894,18 +894,21 @@ extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n #define REGNO_REG_CLASS(REGNO) sparc_regno_reg_class[(REGNO)]\n \n-/* Defines invalid mode changes.  Borrowed from pa64-regs.h.\n+/* Defines invalid mode changes.  Borrowed from the PA port.\n \n    SImode loads to floating-point registers are not zero-extended.\n    The definition for LOAD_EXTEND_OP specifies that integer loads\n    narrower than BITS_PER_WORD will be zero-extended.  As a result,\n    we inhibit changes from SImode unless they are to a mode that is\n-   identical in size.  */\n+   identical in size.\n+\n+   Likewise for SFmode, since word-mode paradoxical subregs are\n+   problematic on big-endian architectures.  */\n \n #define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\t\\\n   (TARGET_ARCH64\t\t\t\t\t\t\\\n-   && (FROM) == SImode\t\t\t\t\t\t\\\n-   && GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\\\n+   && GET_MODE_SIZE (FROM) == 4\t\t\t\t\t\\\n+   && GET_MODE_SIZE (TO) != 4\t\t\t\t\t\\\n    ? reg_classes_intersect_p (CLASS, FP_REGS) : 0)\n \n /* This is the order in which to allocate registers normally."}]}