{"sha": "1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxMGQ0MTA5N2JhM2IwZjRiMGRmOTlkZGNhZGNjNDZhMGI1YTU0OQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-07-22T15:13:20Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-07-22T15:13:20Z"}, "message": "rs6000.c (rs6000_option_override_internal): Add comments to explain why certain error messages make mention of undocumented...\n\ngcc/ChangeLog:\n\n2016-07-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add\n\tcomments to explain why certain error messages make mention of\n\tundocumented options.\n\t(rs6000_invalid_builtin): Change error messages to replace mention\n\tof undocumented options with mention of the -mcpu=power9 option\n\tthat enables those undocumented options.\n\t* config/rs6000/rs6000.h (MASK_FLOAT128): New macro.\n\t(RS6000_BTM_FLOAT128): Use the new MASK_FLOAT128 macro in the\n\tdefinition of this macro to correct an existing error.\n\t* config/rs6000/rs6000.opt: Add the Undocumented qualifier to the\n\tmpower9-fusion, mpower9-vector, mpower9-dform, and mmodulo entries.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Modify\n\tdescriptions of built-in functions so that they depend on\n\t-mcpu=power9 instead of on the corresponding undocumented flags.\n\t* doc/invoke.texi (Option Summary):  Remove all mention of newly\n\tundocumented flags.\n\t(IBM RS/6000 and PowerPC Options): Likewise.\n\t* doc/md.texi (Constraints for Particuliar Machines): Remove all\n\tmention of newly undocumented flags.\n\nFrom-SVN: r238648", "tree": {"sha": "a72ad1ebfe81d937559cb4d060d320c8c6f3a96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a72ad1ebfe81d937559cb4d060d320c8c6f3a96f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/comments", "author": null, "committer": null, "parents": [{"sha": "8cab3d18f0fc520829687383e8f050c7442e7fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cab3d18f0fc520829687383e8f050c7442e7fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cab3d18f0fc520829687383e8f050c7442e7fe0"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "c7b5ed876ee8336f64ac65ebdb67e9a70bb7a49e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "patch": "@@ -1,3 +1,25 @@\n+2016-07-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add\n+\tcomments to explain why certain error messages make mention of\n+\tundocumented options.\n+\t(rs6000_invalid_builtin): Change error messages to replace mention\n+\tof undocumented options with mention of the -mcpu=power9 option\n+\tthat enables those undocumented options.\n+\t* config/rs6000/rs6000.h (MASK_FLOAT128): New macro.\n+\t(RS6000_BTM_FLOAT128): Use the new MASK_FLOAT128 macro in the\n+\tdefinition of this macro to correct an existing error.\n+\t* config/rs6000/rs6000.opt: Add the Undocumented qualifier to the\n+\tmpower9-fusion, mpower9-vector, mpower9-dform, and mmodulo entries.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Modify\n+\tdescriptions of built-in functions so that they depend on\n+\t-mcpu=power9 instead of on the corresponding undocumented flags.\n+\t* doc/invoke.texi (Option Summary):  Remove all mention of newly\n+\tundocumented flags.\n+\t(IBM RS/6000 and PowerPC Options): Likewise.\n+\t* doc/md.texi (Constraints for Particuliar Machines): Remove all\n+\tmention of newly undocumented flags.\n+\n 2016-07-22  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \t* ipa-cp.c (determine_versionability): Do not create constprop clones,"}, {"sha": "238e8450f8c6053ec6e04e5a2d364a5cdf7d5bde", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "patch": "@@ -4212,6 +4212,10 @@ rs6000_option_override_internal (bool global_init_p)\n     {\n       if (rs6000_isa_flags_explicit & OPTION_MASK_P8_FUSION)\n \t{\n+\t  /* We prefer to not mention undocumented options in\n+\t     error messages.  However, if users have managed to select\n+\t     power9-fusion without selecting power8-fusion, they\n+\t     already know about undocumented flags.  */\n \t  error (\"-mpower9-fusion requires -mpower8-fusion\");\n \t  rs6000_isa_flags &= ~OPTION_MASK_P9_FUSION;\n \t}\n@@ -4259,6 +4263,10 @@ rs6000_option_override_internal (bool global_init_p)\n   /* ISA 3.0 vector instructions include ISA 2.07.  */\n   if (TARGET_P9_VECTOR && !TARGET_P8_VECTOR)\n     {\n+      /* We prefer to not mention undocumented options in\n+\t error messages.  However, if users have managed to select\n+\t power9-vector without selecting power8-vector, they\n+\t already know about undocumented flags.  */\n       if (rs6000_isa_flags_explicit & OPTION_MASK_P8_VECTOR)\n \terror (\"-mpower9-vector requires -mpower8-vector\");\n       rs6000_isa_flags &= ~OPTION_MASK_P9_VECTOR;\n@@ -4286,6 +4294,10 @@ rs6000_option_override_internal (bool global_init_p)\n   /* ISA 3.0 D-form instructions require p9-vector and upper-regs.  */\n   if ((TARGET_P9_DFORM_SCALAR || TARGET_P9_DFORM_VECTOR) && !TARGET_P9_VECTOR)\n     {\n+      /* We prefer to not mention undocumented options in\n+\t error messages.  However, if users have managed to select\n+\t power9-dform without selecting power9-vector, they\n+\t already know about undocumented flags.  */\n       if (rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR)\n \terror (\"-mpower9-dform requires -mpower9-vector\");\n       rs6000_isa_flags &= ~(OPTION_MASK_P9_DFORM_SCALAR\n@@ -4294,6 +4306,10 @@ rs6000_option_override_internal (bool global_init_p)\n \n   if (TARGET_P9_DFORM_SCALAR && !TARGET_UPPER_REGS_DF)\n     {\n+      /* We prefer to not mention undocumented options in\n+\t error messages.  However, if users have managed to select\n+\t power9-dform without selecting upper-regs-df, they\n+\t already know about undocumented flags.  */\n       if (rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DF)\n \terror (\"-mpower9-dform requires -mupper-regs-df\");\n       rs6000_isa_flags &= ~OPTION_MASK_P9_DFORM_SCALAR;\n@@ -15507,13 +15523,13 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n   else if ((fnmask & RS6000_BTM_P8_VECTOR) != 0)\n     error (\"Builtin function %s requires the -mpower8-vector option\", name);\n   else if ((fnmask & RS6000_BTM_P9_VECTOR) != 0)\n-    error (\"Builtin function %s requires the -mpower9-vector option\", name);\n+    error (\"Builtin function %s requires the -mcpu=power9 option\", name);\n   else if ((fnmask & (RS6000_BTM_P9_MISC | RS6000_BTM_64BIT))\n \t   == (RS6000_BTM_P9_MISC | RS6000_BTM_64BIT))\n-    error (\"Builtin function %s requires the -mpower9-misc and\"\n+    error (\"Builtin function %s requires the -mcpu=power9 and\"\n \t   \" -m64 options\", name);\n   else if ((fnmask & RS6000_BTM_P9_MISC) == RS6000_BTM_P9_MISC)\n-    error (\"Builtin function %s requires the -mpower9-misc option\", name);\n+    error (\"Builtin function %s requires the -mcpu=power9 option\", name);\n   else if ((fnmask & (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n \t   == (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n     error (\"Builtin function %s requires the -mhard-float and\""}, {"sha": "a2b16d9c73b30a1531fecfb8af85f66fe03de89f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "patch": "@@ -638,6 +638,7 @@ extern int rs6000_vector_align[];\n #define MASK_DIRECT_MOVE\t\tOPTION_MASK_DIRECT_MOVE\n #define MASK_DLMZB\t\t\tOPTION_MASK_DLMZB\n #define MASK_EABI\t\t\tOPTION_MASK_EABI\n+#define MASK_FLOAT128\t\t\tOPTION_MASK_FLOAT128\n #define MASK_FPRND\t\t\tOPTION_MASK_FPRND\n #define MASK_P8_FUSION\t\t\tOPTION_MASK_P8_FUSION\n #define MASK_HARD_FLOAT\t\t\tOPTION_MASK_HARD_FLOAT\n@@ -2716,7 +2717,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_HARD_FLOAT\tMASK_SOFT_FLOAT\t/* Hardware floating point.  */\n #define RS6000_BTM_LDBL128\tMASK_MULTIPLE\t/* 128-bit long double.  */\n #define RS6000_BTM_64BIT\tMASK_64BIT\t/* 64-bit addressing.  */\n-#define RS6000_BTM_FLOAT128\tMASK_P9_VECTOR\t/* IEEE 128-bit float.  */\n+#define RS6000_BTM_FLOAT128\tMASK_FLOAT128\t/* IEEE 128-bit float.  */\n \n #define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n \t\t\t\t | RS6000_BTM_VSX\t\t\t\\"}, {"sha": "a6db8bbfeccabbe27f7af2dd659ca699505a6354", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "patch": "@@ -606,15 +606,15 @@ Target Undocumented Var(rs6000_optimize_swaps) Init(1) Save\n Analyze and remove doubleword swaps from VSX computations.\n \n mpower9-fusion\n-Target Report Mask(P9_FUSION) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(P9_FUSION) Var(rs6000_isa_flags)\n Fuse certain operations together for better performance on power9.\n \n mpower9-misc\n Target Undocumented Report Mask(P9_MISC) Var(rs6000_isa_flags)\n Use/do not use certain scalar instructions added in ISA 3.0.\n \n mpower9-vector\n-Target Report Mask(P9_VECTOR) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(P9_VECTOR) Var(rs6000_isa_flags)\n Use/do not use vector instructions added in ISA 3.0.\n \n mpower9-dform-scalar\n@@ -626,7 +626,7 @@ Target Undocumented Mask(P9_DFORM_VECTOR) Var(rs6000_isa_flags)\n Use/do not use vector register+offset memory instructions added in ISA 3.0.\n \n mpower9-dform\n-Target Report Var(TARGET_P9_DFORM_BOTH) Init(-1) Save\n+Target Undocumented Report Var(TARGET_P9_DFORM_BOTH) Init(-1) Save\n Use/do not use register+offset memory instructions added in ISA 3.0.\n \n mpower9-minmax\n@@ -638,7 +638,7 @@ Target Undocumented Mask(TOC_FUSION) Var(rs6000_isa_flags)\n Fuse medium/large code model toc references with the memory instruction.\n \n mmodulo\n-Target Report Mask(MODULO) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(MODULO) Var(rs6000_isa_flags)\n Generate the integer modulo instructions.\n \n mfloat128"}, {"sha": "c5e7a0d532835a1dd269e4da95f9a27fad963eee", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "patch": "@@ -17523,8 +17523,8 @@ int __builtin_bcdsub_gt (vector __int128_t, vector__int128_t);\n int __builtin_bcdsub_ov (vector __int128_t, vector__int128_t);\n @end smallexample\n \n-If the ISA 3.0 additions to the vector/scalar (power9-vector)\n-instruction set are available:\n+If the ISA 3.0 instruction set additions (@option{-mcpu=power9})\n+are available:\n \n @smallexample\n vector long long vec_vctz (vector long long);\n@@ -17560,9 +17560,8 @@ vector long long vec_vprtybd (vector long long);\n vector unsigned long long vec_vprtybd (vector unsigned long long);\n @end smallexample\n \n-\n-If the ISA 3.0 additions to the vector/scalar (power9-vector)\n-instruction set are available for 64-bit targets:\n+On 64-bit targets, if the ISA 3.0 additions (@option{-mcpu=power9})\n+are available:\n \n @smallexample\n vector long vec_vprtyb (vector long);\n@@ -17578,8 +17577,7 @@ vector __uint128_t vec_vprtybd (vector __uint128_t);\n @end smallexample\n \n The following built-in vector functions are available for the PowerPC family\n-of processors, starting with ISA 3.0 or later (@option{-mcpu=power9})\n-or with @option{-mpower9-vector}:\n+of processors, starting with ISA 3.0 or later (@option{-mcpu=power9}):\n @smallexample\n __vector unsigned char\n vec_slv (__vector unsigned char src, __vector unsigned char shift_distance);\n@@ -17612,8 +17610,7 @@ result returned from the @code{vec_srv} function is a\n with this resulting value coerced to the @code{unsigned char} type.\n \n The following built-in functions are available for the PowerPC family\n-of processors, starting with ISA 3.0 or later (@option{-mcpu=power9})\n-or with @option{-mpower9-vector}:\n+of processors, starting with ISA 3.0 or later (@option{-mcpu=power9}):\n @smallexample\n __vector unsigned char\n vec_absd (__vector unsigned char arg1, __vector unsigned char arg2);\n@@ -17696,9 +17693,9 @@ The second argument to the @var{__builtin_crypto_vshasigmad} and\n integer that is 0 or 1.  The third argument to these builtin functions\n must be a constant integer in the range of 0 to 15.\n \n-If the ISA 3.0 additions to the vector/scalar (power9-vector)\n-instruction set are available, the following additional functions are\n-available for both 32-bit and 64-bit targets.\n+If the ISA 3.0 instruction set additions \n+are enabled (@option{-mcpu=power9}), the following additional\n+functions are available for both 32-bit and 64-bit targets.\n \n vector short vec_xl (int, vector short *);\n vector short vec_xl (int, short *);"}, {"sha": "9e0f07eb54272b2f1d6f6fb474103a3059fc94ae", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "patch": "@@ -1011,10 +1011,9 @@ See RS/6000 and PowerPC Options.\n -mcompat-align-parm -mno-compat-align-parm @gol\n -mupper-regs-df -mno-upper-regs-df -mupper-regs-sf -mno-upper-regs-sf @gol\n -mupper-regs-di -mno-upper-regs-di @gol\n--mupper-regs -mno-upper-regs -mmodulo -mno-modulo @gol\n+-mupper-regs -mno-upper-regs @gol\n -mfloat128 -mno-float128 -mfloat128-hardware -mno-float128-hardware @gol\n--mpower9-fusion -mno-mpower9-fusion -mpower9-vector -mno-power9-vector @gol\n--mpower9-dform -mno-power9-dform -mlra -mno-lra}\n+-mlra -mno-lra}\n \n @emph{RX Options}\n @gccoptlist{-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu@gol\n@@ -20116,8 +20115,7 @@ following options:\n -mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float @gol\n -msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr -mvsx @gol\n -mcrypto -mdirect-move -mhtm -mpower8-fusion -mpower8-vector @gol\n--mquad-memory -mquad-memory-atomic -mmodulo -mfloat128 -mfloat128-hardware @gol\n--mpower9-fusion -mpower9-vector -mpower9-dform}\n+-mquad-memory -mquad-memory-atomic -mfloat128 -mfloat128-hardware}\n \n The particular options set for any particular CPU varies between\n compiler versions, depending on what setting seems to produce optimal\n@@ -20361,7 +20359,7 @@ instructions that target all 64 registers in the vector/scalar\n floating point register set that were added in version 2.07 of the\n PowerPC ISA.  @option{-mupper-regs-sf} is turned on by default if you\n use either of the @option{-mcpu=power8}, @option{-mpower8-vector}, or\n-@option{-mpower9} options.\n+@option{-mcpu=power9} options.\n \n @item -mupper-regs\n @itemx -mno-upper-regs\n@@ -20406,40 +20404,6 @@ If you select ISA 3.0 instructions with @option{-mcpu=power9}, but do\n not use either @option{-mfloat128} or @option{-mfloat128-hardware},\n the IEEE 128-bit floating point support will not be enabled.\n \n-@item -mmodulo\n-@itemx -mno-modulo\n-@opindex mmodulo\n-@opindex mno-module\n-Generate code that uses (does not use) the ISA 3.0 integer modulo\n-instructions.  The @option{-mmodulo} option is enabled by default\n-with the @option{-mcpu=power9} option.\n-\n-@item -mpower9-fusion\n-@itemx -mno-power9-fusion\n-@opindex mpower9-fusion\n-@opindex mno-power9-fusion\n-Generate code that keeps (does not keeps) some operations adjacent so\n-that the instructions can be fused together on power9 and later\n-processors.\n-\n-@item -mpower9-vector\n-@itemx -mno-power9-vector\n-@opindex mpower9-vector\n-@opindex mno-power9-vector\n-Generate code that uses (does not use) the vector and scalar\n-instructions that were added in version 3.0 of the PowerPC ISA.  Also\n-enable the use of built-in functions that allow more direct access to\n-the vector instructions.\n-\n-@item -mpower9-dform\n-@itemx -mno-power9-dform\n-@opindex mpower9-dform\n-@opindex mno-power9-dform\n-Enable (disable) scalar d-form (register + offset) memory instructions\n-to load/store traditional Altivec registers. If the @var{LRA} register\n-allocator is enabled, also enable (disable) vector d-form memory\n-instructions.\n-\n @item -mfloat-gprs=@var{yes/single/double/no}\n @itemx -mfloat-gprs\n @opindex mfloat-gprs"}, {"sha": "996b164925173f0674fbf558697fdd481760b9af", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1610d41097ba3b0f4b0df99ddcadcc46a0b5a549/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=1610d41097ba3b0f4b0df99ddcadcc46a0b5a549", "patch": "@@ -3038,13 +3038,13 @@ asm (\"xsaddqp %x0,%x1,%x2\" : \"=v\" (v1) : \"v\" (v2), \"v\" (v3));\n is incorrect.\n \n @item wb\n-Altivec register if @option{-mpower9-dform} is used or NO_REGS.\n+Altivec register if @option{-mcpu=power9} is used or NO_REGS.\n \n @item wd\n VSX vector register to hold vector double data or NO_REGS.\n \n @item we\n-VSX register if the @option{-mpower9-vector} and @option{-m64} options\n+VSX register if the @option{-mcpu=power9} and @option{-m64} options\n were used or NO_REGS.\n \n @item wf"}]}