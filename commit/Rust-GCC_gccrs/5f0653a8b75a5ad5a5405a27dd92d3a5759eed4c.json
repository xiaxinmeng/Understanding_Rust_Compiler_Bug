{"sha": "5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwNjUzYThiNzVhNWFkNWE1NDA1YTI3ZGQ5MmQzYTU3NTllZWQ0Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-31T12:28:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-04T09:08:05Z"}, "message": "tree-optimization/91123 - restore redundant store removal\n\nRedundant store removal in FRE was restricted for correctness reasons.\nThe following extends correctness fixes required to memcpy/aggregate\ncopy translation.  The main change is that we no longer insert\nreferences rewritten to cover such aggregate copies into the hashtable\nbut the original one.\n\n2020-02-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91123\n\t* tree-ssa-sccvn.c (vn_walk_cb_data::finish): New method.\n\t(vn_walk_cb_data::last_vuse): New member.\n\t(vn_walk_cb_data::saved_operands): Likewsie.\n\t(vn_walk_cb_data::~vn_walk_cb_data): Release saved_operands.\n\t(vn_walk_cb_data::push_partial_def): Use finish.\n\t(vn_reference_lookup_2): Update last_vuse and use finish if\n\twe've saved operands.\n\t(vn_reference_lookup_3): Use finish and update calls to\n\tpush_partial_defs everywhere.  When translating through\n\tmemcpy or aggregate copies save off operands and alias-set.\n\t(eliminate_dom_walker::eliminate_stmt): Restore VN_WALKREWRITE\n\toperation for redundant store removal.\n\n\t* gcc.dg/tree-ssa/ssa-fre-85.c: New testcase.", "tree": {"sha": "8ec13218e79d1e894acad91898dce6bcc74e585e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec13218e79d1e894acad91898dce6bcc74e585e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc98d038618b792c413212759057b2125507d3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc98d038618b792c413212759057b2125507d3ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc98d038618b792c413212759057b2125507d3ef"}], "stats": {"total": 130, "additions": 95, "deletions": 35}, "files": [{"sha": "04af96808f5083f57d489b5fa67e325e950a98da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "patch": "@@ -1,3 +1,19 @@\n+2020-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91123\n+\t* tree-ssa-sccvn.c (vn_walk_cb_data::finish): New method.\n+\t(vn_walk_cb_data::last_vuse): New member.\n+\t(vn_walk_cb_data::saved_operands): Likewsie.\n+\t(vn_walk_cb_data::~vn_walk_cb_data): Release saved_operands.\n+\t(vn_walk_cb_data::push_partial_def): Use finish.\n+\t(vn_reference_lookup_2): Update last_vuse and use finish if\n+\twe've saved operands.\n+\t(vn_reference_lookup_3): Use finish and update calls to\n+\tpush_partial_defs everywhere.  When translating through\n+\tmemcpy or aggregate copies save off operands and alias-set.\n+\t(eliminate_dom_walker::eliminate_stmt): Restore VN_WALKREWRITE\n+\toperation for redundant store removal.\n+\n 2020-02-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92819"}, {"sha": "06dba78e16f3e0dceaadf6236e22826dc00432e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "patch": "@@ -1,3 +1,8 @@\n+2020-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91123\n+\t* gcc.dg/tree-ssa/ssa-fre-85.c: New testcase.\n+\n 2020-02-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92819"}, {"sha": "c50770caa2f7b2dad0804cde91ad741715ee2ed7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-85.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-85.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-85.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-85.c?ref=5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fstrict-aliasing -fdump-tree-fre1-details\" } */\n+\n+struct X { int i; int j; };\n+\n+struct X x, y;\n+void foo ()\n+{\n+  x.i = 1;\n+  y = x;\n+  y.i = 1; // redundant\n+}\n+\n+/* { dg-final { scan-tree-dump \"Deleted redundant store y.i\" \"fre1\" } } */"}, {"sha": "2ffbc643669490f48dc6209994cc104b32baf921", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 60, "deletions": 35, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "patch": "@@ -1687,26 +1687,30 @@ struct vn_walk_cb_data\n {\n   vn_walk_cb_data (vn_reference_t vr_, tree orig_ref_, tree *last_vuse_ptr_,\n \t\t   vn_lookup_kind vn_walk_kind_, bool tbaa_p_)\n-    : vr (vr_), last_vuse_ptr (last_vuse_ptr_),\n-      vn_walk_kind (vn_walk_kind_), tbaa_p (tbaa_p_), known_ranges (NULL)\n+    : vr (vr_), last_vuse_ptr (last_vuse_ptr_), last_vuse (NULL_TREE),\n+      vn_walk_kind (vn_walk_kind_), tbaa_p (tbaa_p_),\n+      saved_operands (vNULL), first_set (-2), known_ranges (NULL)\n    {\n+     if (!last_vuse_ptr)\n+       last_vuse_ptr = &last_vuse;\n      ao_ref_init (&orig_ref, orig_ref_);\n    }\n   ~vn_walk_cb_data ();\n-  void *push_partial_def (const pd_data& pd, tree,\n-\t\t\t  alias_set_type, HOST_WIDE_INT);\n+  void *finish (alias_set_type, tree);\n+  void *push_partial_def (const pd_data& pd, alias_set_type, HOST_WIDE_INT);\n \n   vn_reference_t vr;\n   ao_ref orig_ref;\n   tree *last_vuse_ptr;\n+  tree last_vuse;\n   vn_lookup_kind vn_walk_kind;\n   bool tbaa_p;\n+  vec<vn_reference_op_s> saved_operands;\n \n   /* The VDEFs of partial defs we come along.  */\n   auto_vec<pd_data, 2> partial_defs;\n   /* The first defs range to avoid splay tree setup in most cases.  */\n   pd_range first_range;\n-  tree first_vuse;\n   alias_set_type first_set;\n   splay_tree known_ranges;\n   obstack ranges_obstack;\n@@ -1719,6 +1723,17 @@ vn_walk_cb_data::~vn_walk_cb_data ()\n       splay_tree_delete (known_ranges);\n       obstack_free (&ranges_obstack, NULL);\n     }\n+  saved_operands.release ();\n+}\n+\n+void *\n+vn_walk_cb_data::finish (alias_set_type set, tree val)\n+{\n+  if (first_set != -2)\n+    set = first_set;\n+  return vn_reference_lookup_or_insert_for_pieces\n+      (last_vuse, set, vr->type,\n+       saved_operands.exists () ? saved_operands : vr->operands, val);\n }\n \n /* pd_range splay-tree helpers.  */\n@@ -1753,7 +1768,7 @@ pd_tree_dealloc (void *, void *)\n    on failure.  */\n \n void *\n-vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n+vn_walk_cb_data::push_partial_def (const pd_data &pd,\n \t\t\t\t   alias_set_type set, HOST_WIDE_INT maxsizei)\n {\n   const HOST_WIDE_INT bufsize = 64;\n@@ -1774,7 +1789,6 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n       partial_defs.safe_push (pd);\n       first_range.offset = pd.offset;\n       first_range.size = pd.size;\n-      first_vuse = vuse;\n       first_set = set;\n       last_vuse_ptr = NULL;\n       /* Continue looking for partial defs.  */\n@@ -1908,8 +1922,7 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n \t\t \"Successfully combined %u partial definitions\\n\", ndefs);\n       /* We are using the alias-set of the first store we encounter which\n \t should be appropriate here.  */\n-      return vn_reference_lookup_or_insert_for_pieces\n-\t\t(first_vuse, first_set, vr->type, vr->operands, val);\n+      return finish (first_set, val);\n     }\n   else\n     {\n@@ -1937,7 +1950,10 @@ vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse, void *data_)\n     return NULL;\n \n   if (data->last_vuse_ptr)\n-    *data->last_vuse_ptr = vuse;\n+    {\n+      *data->last_vuse_ptr = vuse;\n+      data->last_vuse = vuse;\n+    }\n \n   /* Fixup vuse and hash.  */\n   if (vr->vuse)\n@@ -1949,7 +1965,11 @@ vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse, void *data_)\n   hash = vr->hashcode;\n   slot = valid_info->references->find_slot_with_hash (vr, hash, NO_INSERT);\n   if (slot)\n-    return *slot;\n+    {\n+      if ((*slot)->result && data->saved_operands.exists ())\n+\treturn data->finish (vr->set, (*slot)->result);\n+      return *slot;\n+    }\n \n   return NULL;\n }\n@@ -2479,8 +2499,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      if (!val)\n \t\treturn (void *)-1;\n \t    }\n-\t  return vn_reference_lookup_or_insert_for_pieces\n-\t           (vuse, 0, vr->type, vr->operands, val);\n+\t  return data->finish (0, val);\n \t}\n       /* For now handle clearing memory with partial defs.  */\n       else if (known_eq (ref->size, maxsize)\n@@ -2495,7 +2514,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t  pd.rhs = build_constructor (NULL_TREE, NULL);\n \t  pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n \t  pd.size = leni;\n-\t  return data->push_partial_def (pd, vuse, 0, maxsizei);\n+\t  return data->push_partial_def (pd, 0, maxsizei);\n \t}\n     }\n \n@@ -2534,8 +2553,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      if (gimple_clobber_p (def_stmt))\n \t\treturn (void *)-1;\n \t      tree val = build_zero_cst (vr->type);\n-\t      return vn_reference_lookup_or_insert_for_pieces\n-\t\t  (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n+\t      return data->finish (get_alias_set (lhs), val);\n \t    }\n \t  else if (known_eq (ref->size, maxsize)\n \t\t   && maxsize.is_constant (&maxsizei)\n@@ -2556,8 +2574,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.rhs = gimple_assign_rhs1 (def_stmt);\n \t      pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n \t      pd.size = size2i / BITS_PER_UNIT;\n-\t      return data->push_partial_def (pd, vuse, get_alias_set (lhs),\n-\t\t\t\t\t     maxsizei);\n+\t      return data->push_partial_def (pd, get_alias_set (lhs), maxsizei);\n \t    }\n \t}\n     }\n@@ -2656,8 +2673,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t    }\n \n \t\t  if (val)\n-\t\t    return vn_reference_lookup_or_insert_for_pieces\n-\t\t      (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n+\t\t    return data->finish (get_alias_set (lhs), val);\n \t\t}\n \t    }\n \t  else if (ranges_known_overlap_p (offseti, maxsizei, offset2i, size2i))\n@@ -2669,8 +2685,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.rhs = rhs;\n \t      pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n \t      pd.size = size2i / BITS_PER_UNIT;\n-\t      return data->push_partial_def (pd, vuse, get_alias_set (lhs),\n-\t\t\t\t\t     maxsizei);\n+\t      return data->push_partial_def (pd, get_alias_set (lhs), maxsizei);\n \t    }\n \t}\n     }\n@@ -2738,9 +2753,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      if (val\n \t\t  && (TREE_CODE (val) != SSA_NAME\n \t\t      || ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val)))\n-\t\treturn vn_reference_lookup_or_insert_for_pieces\n-\t\t\t    (vuse, get_alias_set (lhs), vr->type,\n-\t\t\t     vr->operands, val);\n+\t\treturn data->finish (get_alias_set (lhs), val);\n \t    }\n \t  else if (maxsize.is_constant (&maxsizei)\n \t\t   && maxsizei % BITS_PER_UNIT == 0\n@@ -2756,8 +2769,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.rhs = SSA_VAL (def_rhs);\n \t      pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n \t      pd.size = size2i / BITS_PER_UNIT;\n-\t      return data->push_partial_def (pd, vuse, get_alias_set (lhs),\n-\t\t\t\t\t     maxsizei);\n+\t      return data->push_partial_def (pd, get_alias_set (lhs), maxsizei);\n \t    }\n \t}\n     }\n@@ -2858,6 +2870,11 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t\t\t\t\t\textra_off));\n \t}\n \n+      /* Save the operands since we need to use the original ones for\n+\t the hash entry we use.  */\n+      if (!data->saved_operands.exists ())\n+\tdata->saved_operands = vr->operands.copy ();\n+\n       /* We need to pre-pend vr->operands[0..i] to rhs.  */\n       vec<vn_reference_op_s> old = vr->operands;\n       if (i + 1 + rhs.length () > vr->operands.length ())\n@@ -2876,8 +2893,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       if (val)\n \t{\n \t  if (data->partial_defs.is_empty ())\n-\t    return vn_reference_lookup_or_insert_for_pieces\n-\t      (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n+\t    return data->finish (get_alias_set (lhs), val);\n \t  /* This is the only interesting case for partial-def handling\n \t     coming from targets that like to gimplify init-ctors as\n \t     aggregate copies from constant data like aarch64 for\n@@ -2889,8 +2905,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.rhs = val;\n \t      pd.offset = 0;\n \t      pd.size = maxsizei / BITS_PER_UNIT;\n-\t      return data->push_partial_def (pd, vuse, get_alias_set (lhs),\n-\t\t\t\t\t     maxsizei);\n+\t      return data->push_partial_def (pd, get_alias_set (lhs), maxsizei);\n \t    }\n \t}\n \n@@ -2914,6 +2929,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       /* Invalidate the original access path since it now contains\n          the wrong base.  */\n       data->orig_ref.ref = NULL_TREE;\n+      /* Use the alias-set of this LHS for recording an eventual result.  */\n+      if (data->first_set == -2)\n+\tdata->first_set = get_alias_set (lhs);\n \n       /* Keep looking for the adjusted *REF / VR pair.  */\n       return NULL;\n@@ -3034,6 +3052,11 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       if (!known_subrange_p (at, byte_maxsize, lhs_offset, copy_size))\n \treturn (void *)-1;\n \n+      /* Save the operands since we need to use the original ones for\n+\t the hash entry we use.  */\n+      if (!data->saved_operands.exists ())\n+\tdata->saved_operands = vr->operands.copy ();\n+\n       /* Make room for 2 operands in the new reference.  */\n       if (vr->operands.length () < 2)\n \t{\n@@ -3062,8 +3085,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       /* Try folding the new reference to a constant.  */\n       tree val = fully_constant_vn_reference_p (vr);\n       if (val)\n-\treturn vn_reference_lookup_or_insert_for_pieces\n-\t\t (vuse, 0, vr->type, vr->operands, val);\n+\treturn data->finish (0, val);\n \n       /* Adjust *ref from the new operands.  */\n       if (!ao_ref_init_from_vn_reference (&r, 0, vr->type, vr->operands))\n@@ -3078,6 +3100,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       /* Invalidate the original access path since it now contains\n          the wrong base.  */\n       data->orig_ref.ref = NULL_TREE;\n+      /* Use the alias-set of this stmt for recording an eventual result.  */\n+      if (data->first_set == -2)\n+\tdata->first_set = 0;\n \n       /* Keep looking for the adjusted *REF / VR pair.  */\n       return NULL;\n@@ -5655,8 +5680,8 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n \t}\n       tree val = NULL_TREE;\n       if (lookup_lhs)\n-\tval = vn_reference_lookup (lookup_lhs, gimple_vuse (stmt), VN_WALK,\n-\t\t\t\t   &vnresult, false);\n+\tval = vn_reference_lookup (lookup_lhs, gimple_vuse (stmt),\n+\t\t\t\t   VN_WALKREWRITE, &vnresult, false);\n       if (TREE_CODE (rhs) == SSA_NAME)\n \trhs = VN_INFO (rhs)->valnum;\n       if (val"}]}