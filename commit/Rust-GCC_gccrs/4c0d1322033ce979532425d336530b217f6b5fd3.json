{"sha": "4c0d1322033ce979532425d336530b217f6b5fd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwZDEzMjIwMzNjZTk3OTUzMjQyNWQzMzY1MzBiMjE3ZjZiNWZkMw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-07-03T05:49:51Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-07-09T06:29:29Z"}, "message": "RISC-V: Disable remove unneeded save-restore call optimization if there are any arguments on stack.\n\n - This optimization will adjust stack, but it not check/update other\n   stack pointer use-site, the example is when the arguments put on\n   stack, the offset become wrong after optimization.\n\n - However adjust stack frame usage after register allocation could be\n   error prone, so we decide to turn off this optimization for such case.\n\n - Ye-Ting Kuo report this issue on github:\n   https://github.com/riscv/riscv-gcc/pull/192\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-sr.c (riscv_remove_unneeded_save_restore_calls):\n\tAbort if any arguments on stack.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/riscv/save-restore-9.c: New.", "tree": {"sha": "2231cca0d2c4bb3fd18d79df4ae435364f8edcf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2231cca0d2c4bb3fd18d79df4ae435364f8edcf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c0d1322033ce979532425d336530b217f6b5fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0d1322033ce979532425d336530b217f6b5fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0d1322033ce979532425d336530b217f6b5fd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0d1322033ce979532425d336530b217f6b5fd3/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50873cc588fcc20384212b6dddca74393023a0e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50873cc588fcc20384212b6dddca74393023a0e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50873cc588fcc20384212b6dddca74393023a0e3"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "694f90c1583a93dabbcd0e1a0da0b48c75d0f540", "filename": "gcc/config/riscv/riscv-sr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0d1322033ce979532425d336530b217f6b5fd3/gcc%2Fconfig%2Friscv%2Friscv-sr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0d1322033ce979532425d336530b217f6b5fd3/gcc%2Fconfig%2Friscv%2Friscv-sr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-sr.c?ref=4c0d1322033ce979532425d336530b217f6b5fd3", "patch": "@@ -244,6 +244,12 @@ check_for_no_return_call (rtx_insn *prologue)\n void\n riscv_remove_unneeded_save_restore_calls (void)\n {\n+  /* We'll adjust stack size after this optimization, that require update every\n+     sp use site, which could be unsafe, so we decide to turn off this\n+     optimization if there are any arguments put on stack.  */\n+  if (crtl->args.size != 0)\n+    return;\n+\n   /* Will point to the first instruction of the function body, after the\n      prologue end note.  */\n   rtx_insn *body = NULL;"}, {"sha": "2567daeb376beed967c36d39933da13546b44155", "filename": "gcc/testsuite/gcc.target/riscv/save-restore-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0d1322033ce979532425d336530b217f6b5fd3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsave-restore-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0d1322033ce979532425d336530b217f6b5fd3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsave-restore-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsave-restore-9.c?ref=4c0d1322033ce979532425d336530b217f6b5fd3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msave-restore\" } */\n+\n+int\n+__attribute__((noinline,noclone))\n+foo (int u)\n+{\n+  return u + 1;\n+}\n+\n+int\n+__attribute__((noinline,noclone))\n+bar (int a, int b, int c, int d, int e, int f, int g, int h, int u)\n+{\n+  return foo (u);\n+}\n+\n+int main()\n+{\n+  if (bar (1, 2, 3, 4, 5, 6, 7, 8, 9) != 10)\n+    __builtin_abort();\n+  return 0;\n+}"}]}