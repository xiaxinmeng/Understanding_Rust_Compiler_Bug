{"sha": "833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzYjNhZmU0OTdjZDI0MzA4MzhkZGQ4YTliMWFiOWM5YjBiYTRmMg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-06-04T17:22:21Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-06-04T17:22:21Z"}, "message": "cfgexpand.c (expand_one_var): Use DECL_HAS_VALUE_EXPR_P.\n\n2005-06-01  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* cfgexpand.c (expand_one_var): Use DECL_HAS_VALUE_EXPR_P.\n\t* dwarf2out.c (loc_descriptor_from_tree_1): Ditto.\n\t* expr.c (expand_var): Ditto.\n\t* function.c (gimplify_parameters): Use SET_DECL_VALUE_EXPR too.\n\t* gimplify.c (gimplify_decl_expr): Ditto.\n\t(gimplify_expr): Ditto.\n\t* tree-mudflap.c (mf_decl_eligible_p): Use DECL_HAS_VALUE_EXPR_P.\n\t* tree.c (value_expr_for_decl): New.\n\t(print_value_expr_statistics): New.\n\t(init_ttree): Init value_expr_for_decl.\n\t(decl_value_expr_lookup): New.\n\t(decl_value_expr_insert): Ditto.\n\t(copy_node_stat): Copy DECL_VALUE_EXPR status.\n\t* tree.h (DECL_VALUE_EXPR): Use hashtable.\n\t(SET_DECL_VALUE_EXPR): New.\n\t(DECL_HAS_VALUE_EXPR_P): New.\n\nFrom-SVN: r100592", "tree": {"sha": "7157b77ca7d19813485d549c8f67ec67a23aee72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7157b77ca7d19813485d549c8f67ec67a23aee72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "610d24786dd3e1f9d828b94def29961e7da987cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610d24786dd3e1f9d828b94def29961e7da987cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610d24786dd3e1f9d828b94def29961e7da987cc"}], "stats": {"total": 111, "additions": 99, "deletions": 12}, "files": [{"sha": "dbffb903cd8bea4bbfdc3f96d8636a815fab3e08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -1,3 +1,22 @@\n+2005-06-04  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* cfgexpand.c (expand_one_var): Use DECL_HAS_VALUE_EXPR_P.\n+\t* dwarf2out.c (loc_descriptor_from_tree_1): Ditto.\n+\t* expr.c (expand_var): Ditto.\t\n+\t* function.c (gimplify_parameters): Use SET_DECL_VALUE_EXPR too.\n+\t* gimplify.c (gimplify_decl_expr): Ditto.\n+\t(gimplify_expr): Ditto.\n+\t* tree-mudflap.c (mf_decl_eligible_p): Use DECL_HAS_VALUE_EXPR_P.\n+\t* tree.c (value_expr_for_decl): New.\n+\t(print_value_expr_statistics): New.\n+\t(init_ttree): Init value_expr_for_decl.\n+\t(decl_value_expr_lookup): New.\n+\t(decl_value_expr_insert): Ditto.\n+\t(copy_node_stat): Copy DECL_VALUE_EXPR status.\n+\t* tree.h (DECL_VALUE_EXPR): Use hashtable.\n+\t(SET_DECL_VALUE_EXPR): New.\n+\t(DECL_HAS_VALUE_EXPR_P): New.\n+\n 2005-06-04  Steven Bosscher  <stevenb@suse.de>\n \n \t* lcm.c: Move all mode-switching related functions from here..."}, {"sha": "63a4136f2380d6bc43a9d7b54d10571732400bf9", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -657,7 +657,7 @@ expand_one_var (tree var, bool toplevel)\n     lang_hooks.expand_decl (var);\n   else if (DECL_EXTERNAL (var))\n     ;\n-  else if (DECL_VALUE_EXPR (var))\n+  else if (DECL_HAS_VALUE_EXPR_P (var))\n     ;\n   else if (TREE_STATIC (var))\n     expand_one_static_var (var);"}, {"sha": "af62a770e72b07ff415b90be5841fe38c61f651d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -8972,8 +8972,9 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n       /* FALLTHRU */\n \n     case PARM_DECL:\n-      if (DECL_VALUE_EXPR (loc))\n-\treturn loc_descriptor_from_tree_1 (DECL_VALUE_EXPR (loc), want_address);\n+      if (DECL_HAS_VALUE_EXPR_P (loc))\n+\treturn loc_descriptor_from_tree_1 (DECL_VALUE_EXPR (loc),\n+\t\t\t\t\t   want_address);\n       /* FALLTHRU */\n \n     case RESULT_DECL:"}, {"sha": "e67d65df6a59d7ad436826566c37714b42ec01d3", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -6116,7 +6116,7 @@ expand_var (tree var)\n       ? !TREE_ASM_WRITTEN (var)\n       : !DECL_RTL_SET_P (var))\n     {\n-      if (TREE_CODE (var) == VAR_DECL && DECL_VALUE_EXPR (var))\n+      if (TREE_CODE (var) == VAR_DECL && DECL_HAS_VALUE_EXPR_P (var))\n \t/* Should be ignored.  */;\n       else if (lang_hooks.expand_decl (var))\n \t/* OK.  */;"}, {"sha": "6337b5dab1d08a5e9a51ace536fc67996cb27a63", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -3147,7 +3147,8 @@ gimplify_parameters (void)\n \t      t = build2 (MODIFY_EXPR, void_type_node, local, parm);\n \t      gimplify_and_add (t, &stmts);\n \n-\t      DECL_VALUE_EXPR (parm) = local;\n+\t      SET_DECL_VALUE_EXPR (parm, local);\n+\t      DECL_HAS_VALUE_EXPR_P (parm) = 1;\n \t    }\n \t}\n     }"}, {"sha": "6834e1a3c5f6856c71d06d60810077bc46758463", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -1011,7 +1011,8 @@ gimplify_decl_expr (tree *stmt_p)\n \t  addr = create_tmp_var (ptr_type, get_name (decl));\n \t  DECL_IGNORED_P (addr) = 0;\n \t  t = build_fold_indirect_ref (addr);\n-\t  DECL_VALUE_EXPR (decl) = t;\n+\t  SET_DECL_VALUE_EXPR (decl, t);\n+\t  DECL_HAS_VALUE_EXPR_P (decl) = 1;\n \n \t  args = tree_cons (NULL, DECL_SIZE_UNIT (decl), NULL);\n \t  t = built_in_decls[BUILT_IN_ALLOCA];\n@@ -4183,7 +4184,7 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \n \t  /* If this is a local variable sized decl, it must be accessed\n \t     indirectly.  Perform that substitution.  */\n-\t  if (DECL_VALUE_EXPR (tmp))\n+\t  if (DECL_HAS_VALUE_EXPR_P (tmp))\n \t    {\n \t      *expr_p = unshare_expr (DECL_VALUE_EXPR (tmp));\n \t      ret = GS_OK;"}, {"sha": "f7ab16e3233fe761fdbcd360c23860f1138fcc15", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -710,7 +710,7 @@ mf_decl_eligible_p (tree decl)\n           /* The type of the variable must be complete.  */\n           && COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (decl))\n \t  /* The decl hasn't been decomposed somehow.  */\n-\t  && DECL_VALUE_EXPR (decl) == NULL);\n+\t  && !DECL_HAS_VALUE_EXPR_P (decl));\n }\n \n "}, {"sha": "fc0bf99552f34e73652705f623637f158d821ce9", "filename": "gcc/tree.c", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -143,6 +143,9 @@ struct tree_map GTY(())\n static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map))) \n      htab_t debug_expr_for_decl;\n \n+static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map))) \n+     htab_t value_expr_for_decl;\n+\n static void set_type_quals (tree, int);\n static int type_hash_eq (const void *, const void *);\n static hashval_t type_hash_hash (const void *);\n@@ -152,6 +155,7 @@ static hashval_t int_cst_hash_hash (const void *);\n static int int_cst_hash_eq (const void *, const void *);\n static void print_type_hash_statistics (void);\n static void print_debug_expr_statistics (void);\n+static void print_value_expr_statistics (void);\n static tree make_vector_type (tree, int, enum machine_mode);\n static int type_hash_marked_p (const void *);\n static int tree_map_marked_p (const void *);\n@@ -174,6 +178,9 @@ init_ttree (void)\n   debug_expr_for_decl = htab_create_ggc (512, tree_map_hash,\n \t\t\t\t\t tree_map_eq, 0);\n \n+  value_expr_for_decl = htab_create_ggc (512, tree_map_hash,\n+\t\t\t\t\t tree_map_eq, 0);\n+\n   int_cst_hash_table = htab_create_ggc (1024, int_cst_hash_hash,\n \t\t\t\t\tint_cst_hash_eq, NULL);\n   \n@@ -465,7 +472,16 @@ copy_node_stat (tree node MEM_STAT_DECL)\n   t->common.ann = 0;\n \n   if (TREE_CODE_CLASS (code) == tcc_declaration)\n-    DECL_UID (t) = next_decl_uid++;\n+    {\n+      DECL_UID (t) = next_decl_uid++;\n+      if ((TREE_CODE (node) == PARM_DECL || TREE_CODE (node) == VAR_DECL)\n+\t  && DECL_HAS_VALUE_EXPR_P (node))\n+\t{\n+\t  SET_DECL_VALUE_EXPR (t, DECL_VALUE_EXPR (node));\n+\t  DECL_HAS_VALUE_EXPR_P (t) = 1;\n+\t}\n+      \n+    }\n   else if (TREE_CODE_CLASS (code) == tcc_type)\n     {\n       TYPE_UID (t) = next_type_uid++;\n@@ -3493,6 +3509,16 @@ print_debug_expr_statistics (void)\n \t   htab_collisions (debug_expr_for_decl));\n }\n \n+/* Print out the statistics for the DECL_VALUE_EXPR hash table.  */\n+\n+static void\n+print_value_expr_statistics (void)\n+{\n+  fprintf (stderr, \"DECL_VALUE_EXPR  hash: size %ld, %ld elements, %f collisions\\n\",\n+\t   (long) htab_size (value_expr_for_decl),\n+\t   (long) htab_elements (value_expr_for_decl),\n+\t   htab_collisions (value_expr_for_decl));\n+}\n /* Lookup a debug expression for FROM, and return it if we find one.  */\n \n tree \n@@ -3522,7 +3548,37 @@ decl_debug_expr_insert (tree from, tree to)\n   loc = htab_find_slot_with_hash (debug_expr_for_decl, h, h->hash, INSERT);\n   *(struct tree_map **) loc = h;\n }  \n-  \n+\n+/* Lookup a value expression for FROM, and return it if we find one.  */\n+\n+tree \n+decl_value_expr_lookup (tree from)\n+{\n+  struct tree_map *h, in;\n+  in.from = from;\n+\n+  h = htab_find_with_hash (value_expr_for_decl, &in, htab_hash_pointer (from));\n+  if (h)\n+    return h->to;\n+  return NULL_TREE;\n+}\n+\n+/* Insert a mapping FROM->TO in the value expression hashtable.  */\n+\n+void\n+decl_value_expr_insert (tree from, tree to)\n+{\n+  struct tree_map *h;\n+  void **loc;\n+\n+  h = ggc_alloc (sizeof (struct tree_map));\n+  h->hash = htab_hash_pointer (from);\n+  h->from = from;\n+  h->to = to;\n+  loc = htab_find_slot_with_hash (value_expr_for_decl, h, h->hash, INSERT);\n+  *(struct tree_map **) loc = h;\n+}\n+\n /* Hashing of types so that we don't make duplicates.\n    The entry point is `type_hash_canon'.  */\n \n@@ -5355,6 +5411,7 @@ dump_tree_statistics (void)\n #endif\n   print_type_hash_statistics ();\n   print_debug_expr_statistics ();\n+  print_value_expr_statistics ();\n   lang_hooks.print_statistics ();\n }\n \f"}, {"sha": "fd3e45d6781400dba21e647a5108f7033468d714", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=833b3afe497cd2430838ddd8a9b1ab9c9b0ba4f2", "patch": "@@ -2187,12 +2187,19 @@ extern void decl_debug_expr_insert (tree, tree);\n    entire function.  */\n #define DECL_SAVED_TREE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.saved_tree)\n \n+extern tree decl_value_expr_lookup (tree);\n+extern void decl_value_expr_insert (tree, tree);\n+\n /* In a VAR_DECL or PARM_DECL, the location at which the value may be found,\n    if transformations have made this more complicated than evaluating the\n    decl itself.  This should only be used for debugging; once this field has\n    been set, the decl itself may not legitimately appear in the function.  */\n+#define DECL_HAS_VALUE_EXPR_P(NODE) \\\n+  (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl.has_value_expr)\n #define DECL_VALUE_EXPR(NODE) \\\n-  (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl.saved_tree)\n+  (decl_value_expr_lookup (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)))\n+#define SET_DECL_VALUE_EXPR(NODE, VAL)\t\t\t\\\n+  (decl_value_expr_insert (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL), VAL))\n \n /* Nonzero in a FUNCTION_DECL means this function should be treated\n    as if it were a malloc, meaning it returns a pointer that is\n@@ -2412,7 +2419,8 @@ struct tree_decl GTY(())\n   unsigned returns_twice_flag : 1;\n   unsigned seen_in_bind_expr : 1;\n   unsigned novops_flag : 1;\n-  /* 9 unused bits.  */\n+  unsigned has_value_expr:1;\n+  /* 8 unused bits.  */\n \n   union tree_decl_u1 {\n     /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is"}]}