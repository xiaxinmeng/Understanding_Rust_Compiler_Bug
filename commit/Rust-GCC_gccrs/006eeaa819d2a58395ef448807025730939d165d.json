{"sha": "006eeaa819d2a58395ef448807025730939d165d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA2ZWVhYTgxOWQyYTU4Mzk1ZWY0NDg4MDcwMjU3MzA5MzlkMTY1ZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-02-06T06:59:45Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-02-06T06:59:45Z"}, "message": "Initialize barrier_cache for ARM EH ABI compliance\n\nThe ARM Exception Handling ABI requires personality functions in\nphase1 to initialize barrier_cache before returning\n_URC_HANDLER_FOUND, and we don't.\n\nAlthough our own ARM personality function does not use barrier_cache\nat all, other languages' ARM personality functions, during phase2, are\nallowed and expected to test barrier_cache.sp to check whether the\nhandler frame was reached, which implies that personality functions is\nin charge of the frame, and the remaining fields of barrier_cache hold\nwhatever values it put there in phase1.\n\nSince we did not set barrier_cache.sp, an earlier exception, already\nhandled by a non-Ada handler and then released, may have its storage\nreused for a new exception, that phase1 matches to an Ada frame, but\nif that leaves barrier_cache.sp alone, the phase2 personality function\nthat handled the earlier exception, upon reaching the frame that\nhandled the earlier exception, may believe the information in\nbarrier_cache applies to the current exception.  The C++ personality\nfunction, for example, would take the information in the barrier_cache\nand end up activating the handler that handled the earlier exception:\n\n  try {\n    throw 1;\n  } catch (int i) {\n    std::cout << \"caught \" << i << \" by c++\" << std::endl;\n  }\n  raise_ada_exception (); // might loop back to the handler above\n\nfor  gcc/ada/ChangeLog\n\n\t* raise-gcc.c (personality_body) [__ARM_EABI_UNWINDER__]:\n\tInitialize barrier_cache.sp when ending phase1.", "tree": {"sha": "d005df5fd0545457831114726f9330f059cb9496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d005df5fd0545457831114726f9330f059cb9496"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/006eeaa819d2a58395ef448807025730939d165d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006eeaa819d2a58395ef448807025730939d165d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006eeaa819d2a58395ef448807025730939d165d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006eeaa819d2a58395ef448807025730939d165d/comments", "author": null, "committer": null, "parents": [{"sha": "3774c0b934c4fe13c2d527b757002bdea09f7039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3774c0b934c4fe13c2d527b757002bdea09f7039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3774c0b934c4fe13c2d527b757002bdea09f7039"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "64b2572d0b33ae4ac1f8444d1ec399a6ae6e225a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006eeaa819d2a58395ef448807025730939d165d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006eeaa819d2a58395ef448807025730939d165d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=006eeaa819d2a58395ef448807025730939d165d", "patch": "@@ -1,3 +1,8 @@\n+2020-02-06  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* raise-gcc.c (personality_body) [__ARM_EABI_UNWINDER__]:\n+\tInitialize barrier_cache.sp when ending phase1.\n+\n 2020-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnatvsn.ads: Bump copyright year."}, {"sha": "3b6c21fcd139d8c97cda38afca644ae01115c5cd", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006eeaa819d2a58395ef448807025730939d165d/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006eeaa819d2a58395ef448807025730939d165d/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=006eeaa819d2a58395ef448807025730939d165d", "patch": "@@ -1211,6 +1211,16 @@ personality_body (_Unwind_Action uw_phases,\n \t}\n       else\n \t{\n+#ifdef __ARM_EABI_UNWINDER__\n+\t  /* Though we do not use this field ourselves, initializing\n+\t     it is required by the ARM EH ABI before a personality\n+\t     function in phase1 returns _URC_HANDLER_FOUND, so that\n+\t     any personality function can use it in phase2 to test\n+\t     whether the handler frame was reached.  */\n+\t  uw_exception->barrier_cache.sp\n+\t    = _Unwind_GetGR (uw_context, UNWIND_STACK_REG);\n+#endif\n+\n #ifndef CERT\n \t  /* Trigger the appropriate notification routines before the second\n \t     phase starts, when the stack is still intact.  First install what"}]}