{"sha": "ceb7983c7c9d08b444761ebbb375e12ca78a5852", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ViNzk4M2M3YzlkMDhiNDQ0NzYxZWJiYjM3NWUxMmNhNzhhNTg1Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-07T12:14:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-07T12:14:16Z"}, "message": "(force_to_mode): Sign-extend constant being truncated.\n\nFrom-SVN: r5654", "tree": {"sha": "b1b45fc0fabfddb319f16ec433176ea615e075fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1b45fc0fabfddb319f16ec433176ea615e075fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceb7983c7c9d08b444761ebbb375e12ca78a5852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb7983c7c9d08b444761ebbb375e12ca78a5852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb7983c7c9d08b444761ebbb375e12ca78a5852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb7983c7c9d08b444761ebbb375e12ca78a5852/comments", "author": null, "committer": null, "parents": [{"sha": "7be2640ddbc65bfc504351af589d0ba84e50d4f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be2640ddbc65bfc504351af589d0ba84e50d4f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be2640ddbc65bfc504351af589d0ba84e50d4f4"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "abc224cb97dc905b41d7069c38684c5fdbb77e1d", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb7983c7c9d08b444761ebbb375e12ca78a5852/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb7983c7c9d08b444761ebbb375e12ca78a5852/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ceb7983c7c9d08b444761ebbb375e12ca78a5852", "patch": "@@ -5614,7 +5614,18 @@ force_to_mode (x, mode, mask, reg)\n   /* If X is a CONST_INT, return a new one.  Do this here since the\n      test below will fail.  */\n   if (GET_CODE (x) == CONST_INT)\n-    return GEN_INT (INTVAL (x) & mask);\n+    {\n+      HOST_WIDE_INT cval = INTVAL (x) & mask;\n+      int width = GET_MODE_BITSIZE (mode);\n+\n+      /* If MODE is narrower that HOST_WIDE_INT and CVAL is a negative\n+\t number, sign extend it.  */\n+      if (width > 0 && width < HOST_BITS_PER_WIDE_INT\n+\t  && (cval & ((HOST_WIDE_INT) 1 << (width - 1))) != 0)\n+\tcval |= (HOST_WIDE_INT) -1 << width;\n+\t\n+      return GEN_INT (cval);\n+    }\n \n   /* If X is narrower than MODE, just get X in the proper mode.  */\n   if (GET_MODE_SIZE (GET_MODE (x)) < GET_MODE_SIZE (mode))"}]}