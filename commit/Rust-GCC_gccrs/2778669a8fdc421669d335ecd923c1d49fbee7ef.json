{"sha": "2778669a8fdc421669d335ecd923c1d49fbee7ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3ODY2OWE4ZmRjNDIxNjY5ZDMzNWVjZDkyM2MxZDQ5ZmJlZTdlZg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-07-05T06:00:05Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-07-05T06:00:05Z"}, "message": "std_limits.h: More CPP->CXX changes.\n\n2003-07-05  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/std/std_limits.h:  More CPP->CXX changes.\n\t* scripts/check_survey.in:  Likewise.\n\nFrom-SVN: r68960", "tree": {"sha": "64843026c79f332281bea16b0d54b1960f9d26f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64843026c79f332281bea16b0d54b1960f9d26f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2778669a8fdc421669d335ecd923c1d49fbee7ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2778669a8fdc421669d335ecd923c1d49fbee7ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2778669a8fdc421669d335ecd923c1d49fbee7ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2778669a8fdc421669d335ecd923c1d49fbee7ef/comments", "author": null, "committer": null, "parents": [{"sha": "6906ba4054094c46f39aca07d82a05db00bcc22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6906ba4054094c46f39aca07d82a05db00bcc22f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6906ba4054094c46f39aca07d82a05db00bcc22f"}], "stats": {"total": 201, "additions": 103, "deletions": 98}, "files": [{"sha": "dfce0332a952d636bc11d022bb1f601a83f32a68", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778669a8fdc421669d335ecd923c1d49fbee7ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778669a8fdc421669d335ecd923c1d49fbee7ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2778669a8fdc421669d335ecd923c1d49fbee7ef", "patch": "@@ -1,3 +1,8 @@\n+2003-07-05  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/std/std_limits.h:  More CPP->CXX changes.\n+\t* scripts/check_survey.in:  Likewise.\n+\n 2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tMove from CPP to CXX."}, {"sha": "efd55e417bece7e26d0ec8949ff9e831255beb9a", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 95, "deletions": 95, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778669a8fdc421669d335ecd923c1d49fbee7ef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778669a8fdc421669d335ecd923c1d49fbee7ef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=2778669a8fdc421669d335ecd923c1d49fbee7ef", "patch": "@@ -82,69 +82,69 @@\n // GCC only intrinsicly supports modulo integral types.  The only remaining\n // integral exceptional values is division by zero.  Only targets that do not\n // signal division by zero in some \"hard to ignore\" way should use false.\n-#ifndef __glibcpp_integral_traps\n-# define __glibcpp_integral_traps true\n+#ifndef __glibcxx_integral_traps\n+# define __glibcxx_integral_traps true\n #endif\n \n // float\n //\n \n // Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_float_has_denorm_loss\n-#  define __glibcpp_float_has_denorm_loss false\n+#ifndef __glibcxx_float_has_denorm_loss\n+#  define __glibcxx_float_has_denorm_loss false\n #endif\n-#ifndef __glibcpp_float_traps\n-#  define __glibcpp_float_traps false\n+#ifndef __glibcxx_float_traps\n+#  define __glibcxx_float_traps false\n #endif\n-#ifndef __glibcpp_float_tinyness_before\n-#  define __glibcpp_float_tinyness_before false\n+#ifndef __glibcxx_float_tinyness_before\n+#  define __glibcxx_float_tinyness_before false\n #endif\n \n // double\n \n // Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_double_has_denorm_loss\n-#  define __glibcpp_double_has_denorm_loss false\n+#ifndef __glibcxx_double_has_denorm_loss\n+#  define __glibcxx_double_has_denorm_loss false\n #endif\n-#ifndef __glibcpp_double_traps\n-#  define __glibcpp_double_traps false\n+#ifndef __glibcxx_double_traps\n+#  define __glibcxx_double_traps false\n #endif\n-#ifndef __glibcpp_double_tinyness_before\n-#  define __glibcpp_double_tinyness_before false\n+#ifndef __glibcxx_double_tinyness_before\n+#  define __glibcxx_double_tinyness_before false\n #endif\n \n // long double\n \n // Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_long_double_has_denorm_loss\n-#  define __glibcpp_long_double_has_denorm_loss false\n+#ifndef __glibcxx_long_double_has_denorm_loss\n+#  define __glibcxx_long_double_has_denorm_loss false\n #endif\n-#ifndef __glibcpp_long_double_traps\n-#  define __glibcpp_long_double_traps false\n+#ifndef __glibcxx_long_double_traps\n+#  define __glibcxx_long_double_traps false\n #endif\n-#ifndef __glibcpp_long_double_tinyness_before\n-#  define __glibcpp_long_double_tinyness_before false\n+#ifndef __glibcxx_long_double_tinyness_before\n+#  define __glibcxx_long_double_tinyness_before false\n #endif\n \n // You should not need to define any macros below this point.\n \n-#define __glibcpp_signed(T)\t((T)(-1) < 0)\n+#define __glibcxx_signed(T)\t((T)(-1) < 0)\n \n-#define __glibcpp_min(T) \\\n-  (__glibcpp_signed (T) ? (T)1 << __glibcpp_digits (T) : (T)0)\n+#define __glibcxx_min(T) \\\n+  (__glibcxx_signed (T) ? (T)1 << __glibcxx_digits (T) : (T)0)\n \n-#define __glibcpp_max(T) \\\n-  (__glibcpp_signed (T) ? ((T)1 << __glibcpp_digits (T)) - 1 : ~(T)0)\n+#define __glibcxx_max(T) \\\n+  (__glibcxx_signed (T) ? ((T)1 << __glibcxx_digits (T)) - 1 : ~(T)0)\n \n-#define __glibcpp_digits(T) \\\n-  (sizeof(T) * __CHAR_BIT__ - __glibcpp_signed (T))\n+#define __glibcxx_digits(T) \\\n+  (sizeof(T) * __CHAR_BIT__ - __glibcxx_signed (T))\n \n // The fraction 643/2136 approximates log10(2) to 7 significant digits.\n-#define __glibcpp_digits10(T) \\\n-  (__glibcpp_digits (T) * 643 / 2136)\n+#define __glibcxx_digits10(T) \\\n+  (__glibcxx_digits (T) * 643 / 2136)\n \n \n namespace std\n@@ -358,7 +358,7 @@ namespace std\n       // It is not clear what it means for a boolean type to trap.\n       // This is a DR on the LWG issue list.  Here, I use integer\n       // promotion semantics.\n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -369,13 +369,13 @@ namespace std\n       static const bool is_specialized = true;\n \n       static char min() throw()\n-      { return __glibcpp_min(char); }\n+      { return __glibcxx_min(char); }\n       static char max() throw()\n-      { return __glibcpp_max(char); }\n+      { return __glibcxx_max(char); }\n \n-      static const int digits = __glibcpp_digits (char);\n-      static const int digits10 = __glibcpp_digits10 (char);\n-      static const bool is_signed = __glibcpp_signed (char);\n+      static const int digits = __glibcxx_digits (char);\n+      static const int digits10 = __glibcxx_digits10 (char);\n+      static const bool is_signed = __glibcxx_signed (char);\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n       static const int radix = 2;\n@@ -408,7 +408,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -423,8 +423,8 @@ namespace std\n       static signed char max() throw()\n       { return __SCHAR_MAX__; }\n \n-      static const int digits = __glibcpp_digits (signed char);\n-      static const int digits10 = __glibcpp_digits10 (signed char);\n+      static const int digits = __glibcxx_digits (signed char);\n+      static const int digits10 = __glibcxx_digits10 (signed char);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -458,7 +458,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -473,8 +473,8 @@ namespace std\n       static unsigned char max() throw()\n       { return __SCHAR_MAX__ * 2U + 1; }\n \n-      static const int digits = __glibcpp_digits (unsigned char);\n-      static const int digits10 = __glibcpp_digits10 (unsigned char);\n+      static const int digits = __glibcxx_digits (unsigned char);\n+      static const int digits10 = __glibcxx_digits10 (unsigned char);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -508,7 +508,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -519,13 +519,13 @@ namespace std\n       static const bool is_specialized = true;\n \n       static wchar_t min() throw()\n-      { return __glibcpp_min (wchar_t); }\n+      { return __glibcxx_min (wchar_t); }\n       static wchar_t max() throw()\n-      { return __glibcpp_max (wchar_t); }\n+      { return __glibcxx_max (wchar_t); }\n \n-      static const int digits = __glibcpp_digits (wchar_t);\n-      static const int digits10 = __glibcpp_digits10 (wchar_t);\n-      static const bool is_signed = __glibcpp_signed (wchar_t);\n+      static const int digits = __glibcxx_digits (wchar_t);\n+      static const int digits10 = __glibcxx_digits10 (wchar_t);\n+      static const bool is_signed = __glibcxx_signed (wchar_t);\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n       static const int radix = 2;\n@@ -558,7 +558,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -573,8 +573,8 @@ namespace std\n       static short max() throw()\n       { return __SHRT_MAX__; }\n \n-      static const int digits = __glibcpp_digits (short);\n-      static const int digits10 = __glibcpp_digits10 (short);\n+      static const int digits = __glibcxx_digits (short);\n+      static const int digits10 = __glibcxx_digits10 (short);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -608,7 +608,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -623,8 +623,8 @@ namespace std\n       static unsigned short max() throw()\n       { return __SHRT_MAX__ * 2U + 1; }\n \n-      static const int digits = __glibcpp_digits (unsigned short);\n-      static const int digits10 = __glibcpp_digits10 (unsigned short);\n+      static const int digits = __glibcxx_digits (unsigned short);\n+      static const int digits10 = __glibcxx_digits10 (unsigned short);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -658,7 +658,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -673,8 +673,8 @@ namespace std\n       static int max() throw()\n       { return __INT_MAX__; }\n \n-      static const int digits = __glibcpp_digits (int);\n-      static const int digits10 = __glibcpp_digits10 (int);\n+      static const int digits = __glibcxx_digits (int);\n+      static const int digits10 = __glibcxx_digits10 (int);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -708,7 +708,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -723,8 +723,8 @@ namespace std\n       static unsigned int max() throw()\n       { return __INT_MAX__ * 2U + 1; }\n \n-      static const int digits = __glibcpp_digits (unsigned int);\n-      static const int digits10 = __glibcpp_digits10 (unsigned int);\n+      static const int digits = __glibcxx_digits (unsigned int);\n+      static const int digits10 = __glibcxx_digits10 (unsigned int);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -758,7 +758,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -773,8 +773,8 @@ namespace std\n       static long max() throw()\n       { return __LONG_MAX__; }\n \n-      static const int digits = __glibcpp_digits (long);\n-      static const int digits10 = __glibcpp_digits10 (long);\n+      static const int digits = __glibcxx_digits (long);\n+      static const int digits10 = __glibcxx_digits10 (long);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -808,7 +808,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -823,8 +823,8 @@ namespace std\n       static unsigned long max() throw()\n       { return __LONG_MAX__ * 2UL + 1; }\n \n-      static const int digits = __glibcpp_digits (unsigned long);\n-      static const int digits10 = __glibcpp_digits10 (unsigned long);\n+      static const int digits = __glibcxx_digits (unsigned long);\n+      static const int digits10 = __glibcxx_digits10 (unsigned long);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -858,7 +858,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -873,8 +873,8 @@ namespace std\n       static long long max() throw()\n       { return __LONG_LONG_MAX__; }\n \n-      static const int digits = __glibcpp_digits (long long);\n-      static const int digits10 = __glibcpp_digits10 (long long);\n+      static const int digits = __glibcxx_digits (long long);\n+      static const int digits10 = __glibcxx_digits10 (long long);\n       static const bool is_signed = true;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -908,7 +908,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -923,8 +923,8 @@ namespace std\n       static unsigned long long max() throw()\n       { return __LONG_LONG_MAX__ * 2ULL + 1; }\n \n-      static const int digits = __glibcpp_digits (unsigned long long);\n-      static const int digits10 = __glibcpp_digits10 (unsigned long long);\n+      static const int digits = __glibcxx_digits (unsigned long long);\n+      static const int digits10 = __glibcxx_digits10 (unsigned long long);\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;\n@@ -958,7 +958,7 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_integral_traps;\n+      static const bool traps = __glibcxx_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -994,7 +994,7 @@ namespace std\n       static const bool has_signaling_NaN = has_quiet_NaN;\n       static const float_denorm_style has_denorm\n \t= __FLT_DENORM_MIN__ ? denorm_present : denorm_absent;\n-      static const bool has_denorm_loss = __glibcpp_float_has_denorm_loss;\n+      static const bool has_denorm_loss = __glibcxx_float_has_denorm_loss;\n \n       static float infinity() throw()\n       { return __builtin_huge_valf (); }\n@@ -1010,14 +1010,14 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = false;\n \n-      static const bool traps = __glibcpp_float_traps;\n-      static const bool tinyness_before = __glibcpp_float_tinyness_before;\n+      static const bool traps = __glibcxx_float_traps;\n+      static const bool tinyness_before = __glibcxx_float_tinyness_before;\n       static const float_round_style round_style = round_to_nearest;\n     };\n \n-#undef __glibcpp_float_has_denorm_loss\n-#undef __glibcpp_float_traps\n-#undef __glibcpp_float_tinyness_before\n+#undef __glibcxx_float_has_denorm_loss\n+#undef __glibcxx_float_traps\n+#undef __glibcxx_float_tinyness_before\n \n   template<>\n     struct numeric_limits<double>\n@@ -1050,7 +1050,7 @@ namespace std\n       static const bool has_signaling_NaN = has_quiet_NaN;\n       static const float_denorm_style has_denorm\n \t= __DBL_DENORM_MIN__ ? denorm_present : denorm_absent;\n-      static const bool has_denorm_loss = __glibcpp_double_has_denorm_loss;\n+      static const bool has_denorm_loss = __glibcxx_double_has_denorm_loss;\n \n       static double infinity() throw()\n       { return __builtin_huge_val(); }\n@@ -1066,14 +1066,14 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = false;\n \n-      static const bool traps = __glibcpp_double_traps;\n-      static const bool tinyness_before = __glibcpp_double_tinyness_before;\n+      static const bool traps = __glibcxx_double_traps;\n+      static const bool tinyness_before = __glibcxx_double_tinyness_before;\n       static const float_round_style round_style = round_to_nearest;\n     };\n \n-#undef __glibcpp_double_has_denorm_loss\n-#undef __glibcpp_double_traps\n-#undef __glibcpp_double_tinyness_before\n+#undef __glibcxx_double_has_denorm_loss\n+#undef __glibcxx_double_traps\n+#undef __glibcxx_double_tinyness_before\n \n   template<>\n     struct numeric_limits<long double>\n@@ -1107,7 +1107,7 @@ namespace std\n       static const float_denorm_style has_denorm\n \t= __LDBL_DENORM_MIN__ ? denorm_present : denorm_absent;\n       static const bool has_denorm_loss\n-\t= __glibcpp_long_double_has_denorm_loss;\n+\t= __glibcxx_long_double_has_denorm_loss;\n \n       static long double infinity() throw()\n       { return __builtin_huge_vall (); }\n@@ -1123,21 +1123,21 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = false;\n \n-      static const bool traps = __glibcpp_long_double_traps;\n-      static const bool tinyness_before = __glibcpp_long_double_tinyness_before;\n+      static const bool traps = __glibcxx_long_double_traps;\n+      static const bool tinyness_before = __glibcxx_long_double_tinyness_before;\n       static const float_round_style round_style = round_to_nearest;\n     };\n \n-#undef __glibcpp_long_double_has_denorm_loss\n-#undef __glibcpp_long_double_traps\n-#undef __glibcpp_long_double_tinyness_before\n+#undef __glibcxx_long_double_has_denorm_loss\n+#undef __glibcxx_long_double_traps\n+#undef __glibcxx_long_double_tinyness_before\n \n } // namespace std\n \n-#undef __glibcpp_signed\n-#undef __glibcpp_min\n-#undef __glibcpp_max\n-#undef __glibcpp_digits\n-#undef __glibcpp_digits10\n+#undef __glibcxx_signed\n+#undef __glibcxx_min\n+#undef __glibcxx_max\n+#undef __glibcxx_digits\n+#undef __glibcxx_digits10\n \n #endif // _NUMERIC_LIMITS"}, {"sha": "217356639fc080df6c068c323614378d3139c5a8", "filename": "libstdc++-v3/scripts/check_survey.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2778669a8fdc421669d335ecd923c1d49fbee7ef/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2778669a8fdc421669d335ecd923c1d49fbee7ef/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in?ref=2778669a8fdc421669d335ecd923c1d49fbee7ef", "patch": "@@ -38,9 +38,9 @@ case $BASH_VERSION in\n     *)   ;;   # ??\n esac\n \n-BUILD_DIR=@glibcpp_builddir@\n-SRC_DIR=@glibcpp_srcdir@\n-PREFIX_DIR=@glibcpp_prefixdir@\n+BUILD_DIR=@glibcxx_builddir@\n+SRC_DIR=@glibcxx_srcdir@\n+PREFIX_DIR=@glibcxx_prefixdir@\n if [ \"$WHICH\"x = 0x ]; then\n   CXX=`$BUILD_DIR/scripts/testsuite_flags --build-cxx`\n   INCLUDES=`$BUILD_DIR/scripts/testsuite_flags --build-includes`"}]}