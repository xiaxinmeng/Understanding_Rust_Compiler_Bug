{"sha": "a87ceadf17b4a899f3e74e2da8b6b209461d2742", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3Y2VhZGYxN2I0YTg5OWYzZTc0ZTJkYThiNmIyMDk0NjFkMjc0Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-06T18:14:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-07T22:45:52Z"}, "message": "libstdc++: Fix constraints for rvalue stream insertion/extraction\n\nThe __rval_streamable() function was an attempt to test for\nconvertibility cheaply and without confusing diagnostics. It doesn't\nwork with Clang though, and is probably ill-formed.\n\nReplace that helper function with a check for derivation from ios_base,\nand use that in the alias templates __rvalue_stream_insertion_t and\n__rvalue_stream_extraction_t. Use concepts for the constraints when\navailable.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/istream (__rvalue_stream_extraction_t): Replace\n\tuse of __rval_streamable.\n\t* include/std/ostream (__rvalue_stream_insertion_t): Likewise.\n\t(__rval_streamable): Remove.\n\t(_Require_derived_from_ios_base, __derived_from_ios_base): New\n\thelper for checking constraints.\n\t* testsuite/27_io/basic_istream/extractors_other/char/4.cc: Fix\n\treference to the wrong subclause of the standard.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/4.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/6.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/6.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/99692.cc:\n\tNew test.\n\t* testsuite/27_io/filesystem/path/io/dr2989.cc: Adjust pruned\n\terrors.", "tree": {"sha": "f8f0207607a553c7387377730fff224eeda5561c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8f0207607a553c7387377730fff224eeda5561c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a87ceadf17b4a899f3e74e2da8b6b209461d2742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87ceadf17b4a899f3e74e2da8b6b209461d2742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87ceadf17b4a899f3e74e2da8b6b209461d2742", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87ceadf17b4a899f3e74e2da8b6b209461d2742/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4c9fcc0de865876fb25fe75f4ed6e143bd48c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4c9fcc0de865876fb25fe75f4ed6e143bd48c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c4c9fcc0de865876fb25fe75f4ed6e143bd48c0"}], "stats": {"total": 92, "additions": 64, "deletions": 28}, "files": [{"sha": "5ad60dbd709f575c9e9fc9ecf8eafec1b91ec9fc", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=a87ceadf17b4a899f3e74e2da8b6b209461d2742", "patch": "@@ -958,12 +958,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 2328. Rvalue stream extraction should use perfect forwarding\n   // 1203. More useful rvalue stream insertion\n \n-  // SFINAE helper to check constraints for operator>>(Istream&&, T&&).\n-  // If the constraints are satisfied, it is an alias for Istream&&.\n+#if __cpp_lib_concepts\n+  template<typename _Is, typename _Tp>\n+    requires __derived_from_ios_base<_Is>\n+      && requires (_Is& __is, _Tp&& __t) { __is >> std::forward<_Tp>(__t); }\n+    using __rvalue_stream_extraction_t = _Is&&;\n+#else\n   template<typename _Is, typename _Tp,\n-\t   typename = decltype(std::__rval_streamable<_Is>()\n-\t\t\t\t >> std::declval<_Tp>())>\n+\t   typename = _Require_derived_from_ios_base<_Is>,\n+\t   typename = decltype(std::declval<_Is&>() >> std::declval<_Tp>())>\n     using __rvalue_stream_extraction_t = _Is&&;\n+#endif\n \n   /**\n    *  @brief  Generic extractor for rvalue stream"}, {"sha": "981697324c9d80a4b6d69f64b72a217ec7cb619f", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=a87ceadf17b4a899f3e74e2da8b6b209461d2742", "patch": "@@ -708,31 +708,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 1203. More useful rvalue stream insertion\n \n-  // SFINAE helper to check constraints for operator<<(Ostream&&, const T&).\n-  // If Ostream is publicly and unambiguously derived from ios_base, then\n-  // __rval_streamable<Ostream>() is equivalent to declval<Ostream&>().\n-  // Otherwise, it results in a substitution failure. Specifically, it will\n-  // fail if Ostream is an lvalue reference or the same type as ios_base.\n-  // Use concepts if possible because they're cheaper to evaluate.\n #if __cpp_lib_concepts\n+  // Use concepts if possible because they're cheaper to evaluate.\n   template<typename _Tp>\n-    requires (!is_same_v<_Tp, ios_base>)\n-      && requires (_Tp* __t, ios_base* __b) { __b = __t; }\n-    _Tp&\n-    __rval_streamable();\n+    concept __derived_from_ios_base = is_class_v<_Tp>\n+      && (!is_same_v<_Tp, ios_base>)\n+      && requires (_Tp* __t, ios_base* __b) { __b = __t; };\n+\n+  template<typename _Os, typename _Tp>\n+    requires __derived_from_ios_base<_Os>\n+      && requires (_Os& __os, const _Tp& __t) { __os << __t; }\n+    using __rvalue_stream_insertion_t = _Os&&;\n #else\n-  template<typename _Tp,\n-\t   typename = _Require<__not_<__is_one_of<_Tp, _Tp&, ios_base>>>>\n-    _Tp&\n-    __rval_streamable(ios_base* = (_Tp*)nullptr);\n-#endif\n+  template<typename _Tp>\n+    using _Require_derived_from_ios_base\n+      = _Require<is_class<_Tp>, __not_<is_same<_Tp, ios_base>>,\n+\t\t is_convertible<typename add_pointer<_Tp>::type, ios_base*>>;\n \n-  // SFINAE helper to check constraints for operator<<(Ostream&&, const T&).\n-  // If the constraints are satisfied, it is an alias for Ostream&&.\n   template<typename _Os, typename _Tp,\n-\t   typename = decltype(std::__rval_streamable<_Os>()\n-\t\t\t\t << std::declval<const _Tp&>())>\n+\t   typename = _Require_derived_from_ios_base<_Os>,\n+\t   typename\n+\t     = decltype(std::declval<_Os&>() << std::declval<const _Tp&>())>\n     using __rvalue_stream_insertion_t = _Os&&;\n+#endif\n \n   /**\n    *  @brief  Generic inserter for rvalue stream"}, {"sha": "94e41a17e82c159fcf4c3a2c2584cf304e4508fb", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F4.cc?ref=a87ceadf17b4a899f3e74e2da8b6b209461d2742", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 27.6.2.5.3 basic_ostream manipulator inserters\n+// C++11 27.7.2.6 Rvalue stream extraction [istream.rvalue]\n \n #include <sstream>\n "}, {"sha": "b182be7ee3d3642da6ac0de5e42a0f8e6ab24cd4", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2F4.cc?ref=a87ceadf17b4a899f3e74e2da8b6b209461d2742", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 27.6.2.5.3 basic_ostream manipulator inserters\n+// C++11 27.7.2.6 Rvalue stream extraction [istream.rvalue]\n \n #include <sstream>\n "}, {"sha": "3a748cd630b8b9ca193bf17ac09d90fd9db7b200", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F6.cc?ref=a87ceadf17b4a899f3e74e2da8b6b209461d2742", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 27.6.2.5.3 basic_ostream manipulator inserters\n+// C++11 27.7.3.9 Rvalue stream insertion [ostream.rvalue]\n \n #include <sstream>\n "}, {"sha": "e41399a1bf154c54c06d9110bdac318149bdd6a5", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/99692.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F99692.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F99692.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F99692.cc?ref=a87ceadf17b4a899f3e74e2da8b6b209461d2742", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <ostream>\n+\n+struct CustomStream : std::ostream {};\n+\n+namespace N {\n+    class A{};\n+}\n+\n+std::ostream& operator<<(std::ostream& s, const N::A&)\n+{\n+    return s;\n+}\n+\n+CustomStream&& operator<<(CustomStream&& s, const N::A& v)\n+{\n+    static_cast<std::ostream&>(s) << v;\n+    return std::move(s);\n+}\n+\n+void test_pr99692()\n+{\n+  // PR libstdc++/99692\n+    CustomStream() << N::A{};\n+}\n+\n+int test_shift_ios_enum()\n+{\n+  // https://gcc.gnu.org/pipermail/libstdc++/2021-May/052507.html\n+  int i = 1 << std::ios::erase_event;\n+\n+  return i;\n+}"}, {"sha": "8fc0694dddcc768c6000961047a46a47334c650e", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F6.cc?ref=a87ceadf17b4a899f3e74e2da8b6b209461d2742", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 27.6.2.5.3 basic_ostream manipulator inserters\n+// C++11 27.7.3.9 Rvalue stream insertion [ostream.rvalue]\n \n #include <sstream>\n "}, {"sha": "c5cda77647776f5f6be9c820ee22ef47e14f722d", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/io/dr2989.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fio%2Fdr2989.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87ceadf17b4a899f3e74e2da8b6b209461d2742/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fio%2Fdr2989.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fio%2Fdr2989.cc?ref=a87ceadf17b4a899f3e74e2da8b6b209461d2742", "patch": "@@ -33,4 +33,3 @@ void foo(std::iostream& s) {\n   s >> p; // { dg-error \"no match\" }\n }\n // { dg-prune-output \"no type .*enable_if\" }\n-// { dg-prune-output \"no matching function for call to '__rval_streamable\" }"}]}