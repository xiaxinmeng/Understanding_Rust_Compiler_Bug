{"sha": "f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "node_id": "C_kwDOANBUbNoAKGY2YWZjOTI2ZGM4MTg4ZWU3ZmI2NWQwMmE5MzdkYmM5ZjUwMWY4NGM", "commit": {"author": {"name": "dianhong xu", "email": "dianhong.xu@intel.com", "date": "2021-06-21T08:11:23Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T10:27:28Z"}, "message": "AVX512FP16: Add reduce operators(add/mul/min/max).\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_MM512_REDUCE_OP): New macro\n\t(_mm512_reduce_add_ph): New intrinsic.\n\t(_mm512_reduce_mul_ph): Ditto.\n\t(_mm512_reduce_min_ph): Ditto.\n\t(_mm512_reduce_max_ph): Ditto.\n\t* config/i386/avx512fp16vlintrin.h\n\t(_MM256_REDUCE_OP/_MM_REDUCE_OP): New macro.\n\t(_mm256_reduce_add_ph): New intrinsic.\n\t(_mm256_reduce_mul_ph): Ditto.\n\t(_mm256_reduce_min_ph): Ditto.\n\t(_mm256_reduce_max_ph): Ditto.\n\t(_mm_reduce_add_ph): Ditto.\n\t(_mm_reduce_mul_ph): Ditto.\n\t(_mm_reduce_min_ph): Ditto.\n\t(_mm_reduce_max_ph): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-reduce-op-1.c: New test.\n\t* gcc.target/i386/avx512fp16vl-reduce-op-1.c: Ditto.", "tree": {"sha": "5a600226264141d8b2f233a0c4b8f9c8d7e6a650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a600226264141d8b2f233a0c4b8f9c8d7e6a650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/comments", "author": null, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6185b9a93cb78828db2b1a583aa2a2155c86e305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6185b9a93cb78828db2b1a583aa2a2155c86e305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6185b9a93cb78828db2b1a583aa2a2155c86e305"}], "stats": {"total": 579, "additions": 579, "deletions": 0}, "files": [{"sha": "b1913b98931f665e19c51a0bd6ea17eaf9e5d8d4", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "patch": "@@ -7086,6 +7086,104 @@ _mm_maskz_fmul_round_sch (__mmask8 __A, __m128h __B, __m128h __C, const int __E)\n \n #endif /* __OPTIMIZE__ */\n \n+#define _MM512_REDUCE_OP(op)\t\t\t\t\t\t\\\n+  __m256h __T1 = (__m256h) _mm512_extractf64x4_pd ((__m512d) __A, 0);\t\\\n+  __m256h __T2 = (__m256h) _mm512_extractf64x4_pd ((__m512d) __A, 1);\t\\\n+  __m256h __T3 = (__T1 op __T2);\t\t\t\t\t\\\n+  __m128h __T4 = (__m128h) _mm256_extractf128_pd ((__m256d) __T3, 0);\t\\\n+  __m128h __T5 = (__m128h) _mm256_extractf128_pd ((__m256d) __T3, 1);\t\\\n+  __m128h __T6 = (__T4 op __T5);\t\t\t\t\t\\\n+  __m128h __T7 = (__m128h) __builtin_shuffle ((__m128h)__T6,\t\t\\\n+\t\t (__v8hi) { 4, 5, 6, 7, 0, 1, 2, 3 });\t\t\t\\\n+  __m128h __T8 = (__T6 op __T7);\t\t\t\t\t\\\n+  __m128h __T9 = (__m128h) __builtin_shuffle ((__m128h)__T8,\t\t\\\n+\t\t (__v8hi) { 2, 3, 0, 1, 4, 5, 6, 7 });\t\t\t\\\n+  __m128h __T10 = __T8 op __T9;\t\t\t\t\t\\\n+  return __T10[0] op __T10[1]\n+\n+// TODO reduce\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_add_ph (__m512h __A)\n+{\n+   _MM512_REDUCE_OP (+);\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_mul_ph (__m512h __A)\n+{\n+   _MM512_REDUCE_OP (*);\n+}\n+\n+#undef _MM512_REDUCE_OP\n+\n+#ifdef __AVX512VL__\n+\n+#define _MM512_REDUCE_OP(op)\t\t\t\t\t\t\\\n+  __m256h __T1 = (__m256h) _mm512_extractf64x4_pd ((__m512d) __A, 0);\t\\\n+  __m256h __T2 = (__m256h) _mm512_extractf64x4_pd ((__m512d) __A, 1);\t\\\n+  __m256h __T3 = __builtin_ia32_##op##ph256_mask (__T1, __T2,\t\t\\\n+\t\t _mm256_setzero_ph (), (__mmask16) -1);\t\t\\\n+  __m128h __T4 = (__m128h) _mm256_extractf128_pd ((__m256d) __T3, 0);\t\\\n+  __m128h __T5 = (__m128h) _mm256_extractf128_pd ((__m256d) __T3, 1);\t\\\n+  __m128h __T6 = __builtin_ia32_##op##ph128_mask\t\t\t\\\n+\t\t (__T4, __T5, _mm_setzero_ph (),(__mmask8) -1);\t\\\n+  __m128h __T7 = (__m128h) __builtin_shuffle ((__m128h)__T6,\t\t\\\n+\t\t (__v8hi) { 2, 3, 0, 1, 6, 7, 4, 5 });\t\t\t\\\n+  __m128h __T8 = (__m128h)  __builtin_ia32_##op##ph128_mask\t\t\\\n+\t\t (__T6, __T7, _mm_setzero_ph (),(__mmask8) -1);\t\\\n+  __m128h __T9 = (__m128h) __builtin_shuffle ((__m128h)__T8,\t\t\\\n+\t\t (__v8hi) { 4, 5 });\t\t\t\t\t\\\n+  __m128h __T10 = __builtin_ia32_##op##ph128_mask\t\t\t\\\n+\t\t  (__T8, __T9, _mm_setzero_ph (),(__mmask8) -1);\t\\\n+  __m128h __T11 = (__m128h) __builtin_shuffle (__T10,\t\t\t\\\n+\t\t  (__v8hi) { 1, 0 });\t\t\t\t\t\\\n+  __m128h __T12 = __builtin_ia32_##op##ph128_mask\t\t\t\\\n+\t\t  (__T10, __T11, _mm_setzero_ph (),(__mmask8) -1);\t\\\n+  return __T12[0]\n+\n+#else\n+\n+#define _MM512_REDUCE_OP(op)\t\t\t\t\t\t\\\n+  __m512h __T1 = (__m512h) __builtin_shuffle ((__m512d) __A,\t\t\\\n+\t\t (__v8di) { 4, 5, 6, 7, 0, 0, 0, 0 });\t\t\t\\\n+  __m512h __T2 = _mm512_##op##_ph (__A, __T1);\t\t\t\t\\\n+  __m512h __T3 = (__m512h) __builtin_shuffle ((__m512d) __T2,\t\t\\\n+\t\t (__v8di) { 2, 3, 0, 0, 0, 0, 0, 0 });\t\t\t\\\n+  __m512h __T4 = _mm512_##op##_ph (__T2, __T3);\t\t\t\\\n+  __m512h __T5 = (__m512h) __builtin_shuffle ((__m512d) __T4,\t\t\\\n+\t\t (__v8di) { 1, 0, 0, 0, 0, 0, 0, 0 });\t\t\t\\\n+  __m512h __T6 = _mm512_##op##_ph (__T4, __T5);\t\t\t\\\n+  __m512h __T7 = (__m512h) __builtin_shuffle ((__m512) __T6,\t\t\\\n+\t\t (__v16si) { 1, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n+\t\t\t     0, 0, 0, 0, 0, 0, 0, 0 });\t\t\\\n+  __m512h __T8 = _mm512_##op##_ph (__T6, __T7);\t\t\t\\\n+  __m512h __T9 = (__m512h) __builtin_shuffle (__T8,\t\t\t\\\n+\t\t (__v32hi) { 1, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n+\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n+\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n+\t\t\t     0, 0, 0, 0, 0, 0, 0, 0 });\t\t\\\n+  __m512h __T10 = _mm512_##op##_ph (__T8, __T9);\t\t\t\\\n+  return __T10[0]\n+#endif\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_min_ph (__m512h __A)\n+{\n+  _MM512_REDUCE_OP (min);\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_max_ph (__m512h __A)\n+{\n+  _MM512_REDUCE_OP (max);\n+}\n+\n+#undef _MM512_REDUCE_OP\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "6ce83dfb9e13c1bbbd69106aa7b0b8d5ff254c3c", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "patch": "@@ -3095,6 +3095,111 @@ _mm256_maskz_fcmul_pch (__mmask8 __A, __m256h __B, __m256h __C)\n \t\t\t\t\t\t     __A);\n }\n \n+#define _MM256_REDUCE_OP(op)\t\t\t\t\t\t\\\n+  __m128h __T1 = (__m128h) _mm256_extractf128_pd ((__m256d) __A, 0);\t\\\n+  __m128h __T2 = (__m128h) _mm256_extractf128_pd ((__m256d) __A, 1);\t\\\n+  __m128h __T3 = (__T1 op __T2);\t\t\t\t\t\\\n+  __m128h __T4 = (__m128h) __builtin_shuffle (__T3,\t\t\t\\\n+\t\t (__v8hi) { 4, 5, 6, 7, 0, 1, 2, 3 });\t\t\t\\\n+  __m128h __T5 = (__T3) op (__T4);\t\t\t\t\t\\\n+  __m128h __T6 = (__m128h) __builtin_shuffle (__T5,\t\t\t\\\n+\t\t (__v8hi) { 2, 3, 0, 1, 4, 5, 6, 7 });\t\t\t\\\n+  __m128h __T7 = __T5 op __T6;\t\t\t\t\t\t\\\n+  return __T7[0] op __T7[1]\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_reduce_add_ph (__m256h __A)\n+{\n+  _MM256_REDUCE_OP (+);\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_reduce_mul_ph (__m256h __A)\n+{\n+  _MM256_REDUCE_OP (*);\n+}\n+\n+#undef _MM256_REDUCE_OP\n+#define _MM256_REDUCE_OP(op)\t\t\t\t\t\t\\\n+  __m128h __T1 = (__m128h) _mm256_extractf128_pd ((__m256d) __A, 0);\t\\\n+  __m128h __T2 = (__m128h) _mm256_extractf128_pd ((__m256d) __A, 1);\t\\\n+  __m128h __T3 = _mm_##op (__T1, __T2);\t\t\t\t\\\n+  __m128h __T4 = (__m128h) __builtin_shuffle (__T3,\t\t\t\\\n+\t\t (__v8hi) { 2, 3, 0, 1, 6, 7, 4, 5 });\t\t\t\\\n+  __m128h __T5 = _mm_##op (__T3, __T4);\t\t\t\t\\\n+  __m128h __T6 = (__m128h) __builtin_shuffle (__T5, (__v8hi) { 4, 5 }); \\\n+  __m128h __T7 = _mm_##op (__T5, __T6);\t\t\t\t\\\n+  __m128h __T8 = (__m128h) __builtin_shuffle (__T7, (__v8hi) { 1, 0 }); \\\n+  __m128h __T9 = _mm_##op (__T7, __T8);\t\t\t\t\\\n+  return __T9[0]\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_reduce_min_ph (__m256h __A)\n+{\n+  _MM256_REDUCE_OP (min_ph);\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_reduce_max_ph (__m256h __A)\n+{\n+  _MM256_REDUCE_OP (max_ph);\n+}\n+\n+#define _MM_REDUCE_OP(op) \t\t\t\t\t\t\\\n+  __m128h __T1 = (__m128h) __builtin_shuffle (__A,\t\t\t\\\n+\t\t (__v8hi) { 4, 5, 6, 7, 0, 1, 2, 3 });\t\t\t\\\n+  __m128h __T2 = (__A) op (__T1);\t\t\t\t\t\\\n+  __m128h __T3 = (__m128h) __builtin_shuffle (__T2,\t\t\t\\\n+\t\t (__v8hi){ 2, 3, 0, 1, 4, 5, 6, 7 });\t\t\t\\\n+  __m128h __T4 = __T2 op __T3;\t\t\t\t\t\t\\\n+  return __T4[0] op __T4[1]\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_add_ph (__m128h __A)\n+{\n+  _MM_REDUCE_OP (+);\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_mul_ph (__m128h __A)\n+{\n+  _MM_REDUCE_OP (*);\n+}\n+\n+#undef _MM_REDUCE_OP\n+#define _MM_REDUCE_OP(op) \t\t\t\t\t\t\\\n+  __m128h __T1 = (__m128h) __builtin_shuffle (__A,\t\t\t\\\n+\t\t (__v8hi) { 2, 3, 0, 1, 6, 7, 4, 5 });\t\t\t\\\n+  __m128h __T2 = _mm_##op (__A, __T1);\t\t\t\t\t\\\n+  __m128h __T3 = (__m128h) __builtin_shuffle (__T2, (__v8hi){ 4, 5 });\t\\\n+  __m128h __T4 = _mm_##op (__T2, __T3);\t\t\t\t\\\n+  __m128h __T5 = (__m128h) __builtin_shuffle (__T4, (__v8hi){ 1, 0 });\t\\\n+  __m128h __T6 = _mm_##op (__T4, __T5);\t\t\t\t\\\n+  return __T6[0]\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_min_ph (__m128h __A)\n+{\n+  _MM_REDUCE_OP (min_ph);\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_max_ph (__m128h __A)\n+{\n+  _MM_REDUCE_OP (max_ph);\n+}\n+\n+#undef _MM256_REDUCE_OP\n+#undef _MM_REDUCE_OP\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "355631665361ae517467fcf20c2ab98a2540c012", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-reduce-op-1.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-1.c?ref=f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+\n+#include <immintrin.h>\n+#include \"avx512-check.h\"\n+\n+__m512h a1 = { -39.3f16, -180.9f16, 13.4f16, 35.4f16, -41.1f16, -14.4f16, 24.5f16, 53.54f16,\n+\t\t238.4f16, -134.8f16, 24.5f16, 35.6f16, -346.7f16, -43.4f16, -535.3f16, 324.7f16,\n+\t\t82.5f16, 21.4f16, 24.4f16, 53.4f16, 23.5f16, -24.4f16, -34.5f16, -32.5f16,\n+\t\t23.6f16, -13.4f16, 24.5f16, 35.5f16, -34.4f16, -24.5f16, -34.5f16, 13.5f16 };\n+\n+__m512h a2 = { 1.25f16, 2.25f16, -0.25f16, 4.0f16, -2.0f16, 4.0f16, -3.0f16, 2.0f16,\n+\t       -0.5f16, -1.0f16, 1.0f16, -1.0f16, 1.0f16, 1.0f16, 2.0f16, 4.0f16,\n+\t       1.25f16, 2.25f16, -4.25f16, 4.0f16, -2.4f16, 4.0f16, -3.0f, 2.0f16,\n+\t       -4.5f16, 7.6f16, 0.7f16, -8.2f16, 2.1f16, 2.4f16, -2.0f16, 19.4f16 };\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_add_ph (__m512h a)\n+{\n+  return _mm512_reduce_add_ph (a);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_mul_ph (__m512h a)\n+{\n+  return _mm512_reduce_mul_ph (a);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_max_ph (__m512h a)\n+{\n+  return _mm512_reduce_max_ph (a);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_min_ph (__m512h a)\n+{\n+  return _mm512_reduce_min_ph (a);\n+}\n+\n+#define SIZE 32\n+#define REF_ADDMUL(op, a)\t\t\t\t\t\\\n+  __m256h __a1 = _mm256_setzero_ph ();\t\t\t\t\\\n+  for (int i =0; i < 16; i++) {\t\t\t\t\t\\\n+    __a1[i] = (_Float16) a[i] op (_Float16) a[i + 16];\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  __m128h __a2 = _mm_setzero_ph ();\t\t\t\t\\\n+  for (int i =0; i < 8; i++) {\t\t\t\t\t\\\n+    __a2[i] = (_Float16) __a1[i] op (_Float16) __a1[i + 8];\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  _Float16 __c0 = __a2[0] op __a2[4];\t\t\t\t\\\n+  _Float16 __c1 = __a2[1] op __a2[5];\t\t\t\t\\\n+  _Float16 __c2 = __a2[2] op __a2[6];\t\t\t\t\\\n+  _Float16 __c3 = __a2[3] op __a2[7];\t\t\t\t\\\n+  _Float16 __d0 = __c0 op __c2;\t\t\t\t\t\\\n+  _Float16 __d1 = __c1 op __c3;\t\t\t\t\t\\\n+  _Float16 __e0 = __d0 op __d1;\t\t\t\t\t\\\n+  r3 = __e0\n+\n+#define TESTOP(opname, op, a)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    _Float16 r1 = _mm512_reduce_##opname##_ph (a);\t\\\n+    _Float16 r2 = test_reduce_##opname##_ph (a);\t\\\n+    _Float16 r3 = a[0];\t\t\t\t\t\\\n+    if (r1 != r2) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    REF_ADDMUL (op, a);\t\t\t\t\t\\\n+    if (r1 != r3) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define TEST_ADDMUL_PH(a)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    TESTOP (add, +, a);\t\t\t\t\\\n+    TESTOP (mul, *, a);\t\t\t\t\\\n+  } while (0)\n+\n+  static void\n+  test_512_addmul_ph (void)\n+  {\n+    TEST_ADDMUL_PH (a1);\n+    TEST_ADDMUL_PH (a2);\n+  }\n+\n+#undef TESTOP\n+#define TESTOP(opname, op, a)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    _Float16 r1 = _mm512_reduce_##opname##_ph (a);\t\\\n+    _Float16 r2 = test_reduce_##opname##_ph (a);\t\\\n+    _Float16 r3 = a[0];\t\t\t\t\t\\\n+    if (r1 != r2) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    for (int i = 1; i < SIZE; i++)\t\t\t\\\n+      r3 = r3 op a[i];\t\t\t\t\t\\\n+    if (r1 != r3) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define TEST_MINMAX_PH(a)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    TESTOP (min, < a[i] ? r3 :, a);\t\t\\\n+    TESTOP (max, > a[i] ? r3 :, a);\t\t\\\n+  } while (0)\n+\n+static void\n+test_512_minmax_ph (void)\n+{\n+  TEST_MINMAX_PH (a1);\n+  TEST_MINMAX_PH (a2);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test_512_addmul_ph();\n+  test_512_minmax_ph();\n+}\n+\n+#undef SIZE\n+#undef REF_ADDMUL\n+#undef TESTOP \n+#undef TEST_ADDMUL_PH\n+#undef TEST_MINMAX_PH"}, {"sha": "70485d8972077fe35d0d46e4a6b4ca67d382794b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-reduce-op-1.c", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-reduce-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6afc926dc8188ee7fb65d02a937dbc9f501f84c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-reduce-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-reduce-op-1.c?ref=f6afc926dc8188ee7fb65d02a937dbc9f501f84c", "patch": "@@ -0,0 +1,244 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+\n+#include <immintrin.h>\n+#include \"avx512-check.h\"\n+\n+__m256h a1 = { -39.3f16, -180.9f16, 13.4f16, 35.4f16, -41.1f16, -14.4f16, 24.5f16, 53.54f16,\n+\t       238.4f16, -134.8f16, 24.5f16, 35.6f16, -346.7f16, -43.4f16, -535.3f16, 324.7f16 };\n+__m256h a2 = { 82.5f16, 21.4f16, 24.4f16, 53.4f16, 23.5f16, -24.4f16, -34.5f16, -32.5f16,\n+\t       23.6f16, -13.4f16, 24.5f16, 35.5f16, -34.4f16, -24.5f16, -34.5f16, 13.5f16 };\n+\n+__m128h b1 = { 1.25f16, 2.25f16, -0.25f16, 4.0f16, -2.0f16, 4.0f16, -3.0f16, 2.0f16 };\n+__m128h b2 = { -0.5f16, -1.0f16, 1.0f16, -1.0f16, 1.0f16, 1.0f16, 2.0f16, 4.0f16 };\n+__m128h b3 = { 1.25f16, 2.25f16, -4.25f16, 4.0f16, -2.4f16, 4.0f16, -3.0f, 2.0f16 };\n+__m128h b4 = { -4.5f16, 7.6f16, 0.7f16, -8.2f16, 2.1f16, 2.4f16, -2.0f16, 1.4f16 };\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_256_add_ph (__m256h a)\n+{\n+  return _mm256_reduce_add_ph (a);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_256_mul_ph (__m256h a)\n+{\n+  return _mm256_reduce_mul_ph (a);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_256_max_ph (__m256h a)\n+{\n+  return _mm256_reduce_max_ph (a);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_256_min_ph (__m256h a)\n+{\n+  return _mm256_reduce_min_ph (a);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_add_ph (__m128h b)\n+{\n+  return _mm_reduce_add_ph (b);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_mul_ph (__m128h b)\n+{\n+  return _mm_reduce_mul_ph (b);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_max_ph (__m128h b)\n+{\n+  return _mm_reduce_max_ph (b);\n+}\n+\n+__attribute__((noinline, noclone)) _Float16\n+test_reduce_min_ph (__m128h b)\n+{\n+  return _mm_reduce_min_ph (b);\n+}\n+\n+#define SIZE 16\n+#define REF_ADDMUL(op, a)\t\t\t\t\\\n+  __m128h __a1 = _mm_setzero_ph ();\t\t\t\\\n+  for (int i = 0; i < 8; i++) {\t\t\t\t\\\n+    __a1[i] = (_Float16) a[i] op (_Float16) a[i + 8];\t\\\n+  }\t\t\t\t\t\t\t\\\n+  _Float16 __c0 = __a1[0] op __a1[4];\t\t\t\\\n+  _Float16 __c1 = __a1[1] op __a1[5];\t\t\t\\\n+  _Float16 __c2 = __a1[2] op __a1[6];\t\t\t\\\n+  _Float16 __c3 = __a1[3] op __a1[7];\t\t\t\\\n+  _Float16 __d0 = __c0 op __c2;\t\t\t\t\\\n+  _Float16 __d1 = __c1 op __c3;\t\t\t\t\\\n+  _Float16 __e0 = __d0 op __d1;\t\t\t\t\\\n+  r3 = __e0\n+\n+#define TESTOP(opname, op, a)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    _Float16 r1 = _mm256_reduce_##opname##_ph (a);\t\\\n+    _Float16 r2 = test_reduce_256_##opname##_ph (a);\t\\\n+    _Float16 r3 = a[0];\t\t\t\t\t\\\n+    if (r1 != r2) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    REF_ADDMUL (op, a);\t\t\t\t\t\\\n+    if (r1 != r3) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define TEST_ADDMUL_PH(a)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    TESTOP (add, +, a);\t\t\t\t\\\n+    TESTOP (mul, *, a);\t\t\t\t\\\n+  } while (0)\n+\n+static void\n+test_256_addmul_ph (void)\n+{\n+  TEST_ADDMUL_PH (a1);\n+  TEST_ADDMUL_PH (a2);\n+}\n+\n+#undef TESTOP\n+#define TESTOP(opname, op, a)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    _Float16 r1 = _mm256_reduce_##opname##_ph (a);\t\\\n+    _Float16 r2 = test_reduce_256_##opname##_ph (a);\t\\\n+    _Float16 r3 = a[0];\t\t\t\t\t\\\n+    if (r1 != r2) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    for (int i = 1; i < SIZE; i++)\t\t\t\\\n+      r3 = r3 op a[i];\t\t\t\t\t\\\n+    if (r1 != r3) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define TEST_MINMAX_PH(a)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    TESTOP (min, < a[i] ? r3 :, a);\t\t\\\n+    TESTOP (max, > a[i] ? r3 :, a);\t\t\\\n+  } while (0)\n+\n+static void\n+test_256_minmax_ph (void)\n+{\n+  TEST_MINMAX_PH (a1);\n+  TEST_MINMAX_PH (a2);\n+}\n+\n+static void\n+test_256_ph (void)\n+{\n+   test_256_addmul_ph ();\n+   test_256_minmax_ph ();\n+}\n+\n+#undef SIZE\n+#define SIZE 8\n+\n+#undef REF_ADDMUL\n+#define REF_ADDMUL(op, a)\t\t\t\\\n+  _Float16 __c0 = a[0] op a[4];\t\t\t\\\n+  _Float16 __c1 = a[1] op a[5];\t\t\t\\\n+  _Float16 __c2 = a[2] op a[6];\t\t\t\\\n+  _Float16 __c3 = a[3] op a[7];\t\t\t\\\n+  _Float16 __d0 = __c0 op __c2;\t\t\t\\\n+  _Float16 __d1 = __c1 op __c3;\t\t\t\\\n+  _Float16 __e0 = __d0 op __d1;\t\t\t\\\n+  r3 = __e0\n+\n+#undef TESTOP\n+#define TESTOP(opname, op, a)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    _Float16 r1 = _mm_reduce_##opname##_ph (a);\t\t\\\n+    _Float16 r2 = test_reduce_##opname##_ph (a);\t\\\n+    _Float16 r3 = a[0];\t\t\t\t\t\\\n+    if (r1 != r2) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    REF_ADDMUL (op, a);\t\t\t\t\t\\\n+    if (r1 != r3) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#undef TEST_ADDMUL_PH\n+#define TEST_ADDMUL_PH(a)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    TESTOP (add, +, a);\t\t\t\t\\\n+    TESTOP (mul, *, a);\t\t\t\t\\\n+  } while (0)\n+\n+static void\n+test_128_addmul_ph (void)\n+{\n+  TEST_ADDMUL_PH (b1);\n+  TEST_ADDMUL_PH (b2);\n+  TEST_ADDMUL_PH (b3);\n+  TEST_ADDMUL_PH (b4);\n+}\n+\n+#undef TESTOP\n+#define TESTOP(opname, op, b)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    _Float16 r1 = _mm_reduce_##opname##_ph (b);\t\t\\\n+    _Float16 r2 = test_reduce_##opname##_ph (b);\t\\\n+    _Float16 r3 = b[0];\t\t\t\t\t\\\n+    if (r1 != r2) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    for (int i = 1; i < SIZE; i++)\t\t\t\\\n+      r3 = r3 op b[i];\t\t\t\t\t\\\n+    if (r1 != r3) {\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#undef TEST_MINMAX_PH\n+#define TEST_MINMAX_PH(b)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    TESTOP (min, < b[i] ? r3 :, b);\t\t\\\n+    TESTOP (max, > b[i] ? r3 :, b);\t\t\\\n+  } while (0)\n+\n+static void\n+test_128_minmax_ph (void)\n+{\n+  TEST_MINMAX_PH (b1);\n+  TEST_MINMAX_PH (b2);\n+  TEST_MINMAX_PH (b3);\n+  TEST_MINMAX_PH (b4);\n+}\n+\n+static void\n+test_128_ph (void)\n+{\n+  test_128_addmul_ph ();\n+  test_128_minmax_ph ();\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test_256_ph ();\n+  test_128_ph ();\n+}\n+\n+\n+#undef SIZE\n+#undef REF_ADDMUL\n+#undef TESTOP\n+#undef TEST_ADDMUL_PH\n+#undef TEST_MINMAX_PH"}]}