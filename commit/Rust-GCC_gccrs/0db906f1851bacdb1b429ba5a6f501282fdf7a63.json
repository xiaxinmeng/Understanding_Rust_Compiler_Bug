{"sha": "0db906f1851bacdb1b429ba5a6f501282fdf7a63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiOTA2ZjE4NTFiYWNkYjFiNDI5YmE1YTZmNTAxMjgyZmRmN2E2Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-06-30T19:36:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-06-30T19:36:36Z"}, "message": "re PR c++/40595 ([C++0x] ICE trying to use sfinae with variadic template pack expansion)\n\n\tPR c++/40595\n\t* pt.c (tsubst_pack_expansion): Handle unexpanded packs in an\n\tEXPR_PACK_EXPANSION.\n\nFrom-SVN: r149117", "tree": {"sha": "b5f4bc18d51739a52763e76b30d0bf6ddbd1305c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5f4bc18d51739a52763e76b30d0bf6ddbd1305c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0db906f1851bacdb1b429ba5a6f501282fdf7a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db906f1851bacdb1b429ba5a6f501282fdf7a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db906f1851bacdb1b429ba5a6f501282fdf7a63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db906f1851bacdb1b429ba5a6f501282fdf7a63/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "342f368cd9927a2929ab3d8d5bddfef625f520bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342f368cd9927a2929ab3d8d5bddfef625f520bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342f368cd9927a2929ab3d8d5bddfef625f520bc"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "4e85a957d1ba9a6c45742872438c3aacb103ef9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db906f1851bacdb1b429ba5a6f501282fdf7a63/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db906f1851bacdb1b429ba5a6f501282fdf7a63/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0db906f1851bacdb1b429ba5a6f501282fdf7a63", "patch": "@@ -1,3 +1,9 @@\n+2009-06-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/40595\n+\t* pt.c (tsubst_pack_expansion): Handle unexpanded packs in an\n+\tEXPR_PACK_EXPANSION.\n+\n 2009-06-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/40274"}, {"sha": "b7c309d16235a6a7d920b0c2f4b442e246e0f64c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db906f1851bacdb1b429ba5a6f501282fdf7a63/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db906f1851bacdb1b429ba5a6f501282fdf7a63/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0db906f1851bacdb1b429ba5a6f501282fdf7a63", "patch": "@@ -7630,8 +7630,15 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n      and return a PACK_EXPANSION_*. The caller will need to deal with\n      that.  */\n   if (unsubstituted_packs)\n-    return make_pack_expansion (tsubst (pattern, args, complain, \n-\t\t\t\t\tin_decl));\n+    {\n+      tree new_pat;\n+      if (TREE_CODE (t) == EXPR_PACK_EXPANSION)\n+\tnew_pat = tsubst_expr (pattern, args, complain, in_decl,\n+\t\t\t       /*integral_constant_expression_p=*/false);\n+      else\n+\tnew_pat = tsubst (pattern, args, complain, in_decl);\n+      return make_pack_expansion (new_pat);\n+    }\n \n   /* We could not find any argument packs that work.  */\n   if (len < 0)"}, {"sha": "a8d514185b20e5708b99af89513c68bfb8b47798", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db906f1851bacdb1b429ba5a6f501282fdf7a63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db906f1851bacdb1b429ba5a6f501282fdf7a63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0db906f1851bacdb1b429ba5a6f501282fdf7a63", "patch": "@@ -1,3 +1,8 @@\n+2009-06-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/40595\n+\t* g++.dg/cpp0x/variadic94.C: New.\n+\n 2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* lib/gcc-defs.exp (gcc-set-multilib-library-path): Delete."}, {"sha": "8420f73a6a6edb01e1d70f94e6dadc03f8e534b7", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic94.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db906f1851bacdb1b429ba5a6f501282fdf7a63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic94.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db906f1851bacdb1b429ba5a6f501282fdf7a63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic94.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic94.C?ref=0db906f1851bacdb1b429ba5a6f501282fdf7a63", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/40595\n+// { dg-options \"-std=c++0x\" }\n+\n+template<int N>\n+struct S\n+{\n+    typedef int type;\n+};\n+\n+template<typename T>\n+struct Get\n+{\n+    static T get();\n+};\n+\n+template<typename F>\n+struct B\n+{\n+    template<typename ... Args>\n+        typename S<sizeof( Get<F>::get() (Get<Args>::get() ...) )>::type\n+        f(Args&& ... a);\n+};\n+\n+struct X\n+{\n+    bool operator()(int) const;\n+};\n+\n+int main()\n+{\n+    B<X> b;\n+    b.f(1);\n+}"}]}