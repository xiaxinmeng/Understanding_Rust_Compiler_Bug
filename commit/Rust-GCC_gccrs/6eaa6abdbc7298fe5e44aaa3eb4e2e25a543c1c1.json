{"sha": "6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhYTZhYmRiYzcyOThmZTVlNDRhYWEzZWI0ZTJlMjVhNTQzYzFjMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@soma.redhat.com", "date": "2000-07-08T01:08:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-08T01:08:44Z"}, "message": "Clean up configure/build longstanding issues.\n\n\n2000-07-07  Benjamin Kosnik  <bkoz@soma.redhat.com>\n\n\tClean up configure/build longstanding issues.\n\t* src/Makefile.am (AC_CXXFLAGS): Don't set @SECTION_LDFLAGS@ here.\n\t(CXXLINK): Add here, instead.\n\n\t* Makefile.am (check-install): Make sure mkcheck has execute privs.\n\t(check): Same here.\n\t* configure.in (AC_OUTPUT_COMMANDS): Remove hacks here.\n\n\t* configure.in (AC_OUTPUT_COMMANDS): Link c_io_libio.h and\n\tc_io_libio.cc instead of copying.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Do link here.\n\n\t* configure.in (AC_OUTPUT_COMMANDS): Link $THREADS.h and\n\tc++threads.h instead of copying.\n\t* acinclude.m4 (GLIBCPP_ENABLE_THREADS): Do link here.\n\n\t* config/c_io_libio.cc (__basic_file::_M_open_mode): Consolidate.\n\t* bits/basic_file.h: Declare.\n\n\t* mkcheck.in (TESTS_FILE): Use -v instead of --version.\n\nFrom-SVN: r34917", "tree": {"sha": "1dfbb82dc4422bcaaa00cc27836cdf8925995d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfbb82dc4422bcaaa00cc27836cdf8925995d97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/comments", "author": null, "committer": null, "parents": [{"sha": "b848ded1daa9b7d1a99bc4bfb418fc9f86ae87ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b848ded1daa9b7d1a99bc4bfb418fc9f86ae87ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b848ded1daa9b7d1a99bc4bfb418fc9f86ae87ad"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "fc990c932ea2954b00cba360024eba1f2f5535a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1", "patch": "@@ -16,6 +16,11 @@\n \tc++threads.h instead of copying.\n \t* acinclude.m4 (GLIBCPP_ENABLE_THREADS): Do link here.\n \n+\t* config/c_io_libio.cc (__basic_file::_M_open_mode): Consolidate.\n+\t* bits/basic_file.h: Declare.\n+\n+\t* mkcheck.in (TESTS_FILE): Use -v instead of --version.\n+\n 2000-07-07   brent verner  <brent@rcfile.org> \n \n \t* testsuite/27_io/istream_unformatted.cc (test05): New test."}, {"sha": "bffd4efdf8bb2be86dbb02d1278e0071638f3beb", "filename": "libstdc++-v3/bits/basic_file.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/libstdc%2B%2B-v3%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/libstdc%2B%2B-v3%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fbasic_file.h?ref=6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1", "patch": "@@ -56,6 +56,10 @@ namespace std {\n   public:\n     __basic_file(__c_lock* __lock = 0);\n \n+    void \n+    __basic_file::_M_open_mode(ios_base::openmode __mode, int& __p_mode, \n+\t\t\t       int& __rw_mode);\n+\n     // Eqivalent to the normal fopen function.\n     __basic_file* \n     open(const char* __name, ios_base::openmode __mode, int __prot = 0664);"}, {"sha": "f9a33bb8dfd31f4c8965263e546760159c866e67", "filename": "libstdc++-v3/config/c_io_libio.cc", "status": "modified", "additions": 33, "deletions": 44, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc?ref=6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1", "patch": "@@ -60,58 +60,17 @@ namespace std {\n     _IO_default_finish(this, 0);\n   }\n       \n-  __basic_file*\n-  __basic_file::sys_open(int __fd, ios_base::openmode __mode) \n-  {\n-    __basic_file* __retval = NULL;\n-    bool __testi = __mode & ios_base::in;\n-    bool __testo = __mode & ios_base::out;\n-#ifdef O_BINARY\n-    bool __testb = __mode & ios_base::binary;\n-#endif\n-    int __p_mode = 0;\n-    int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n-\n-    if (__testi)\n-      {\n-\t__p_mode = O_RDONLY;\n-\t__rw_mode = _IO_NO_WRITES;\n-      }\n-    if (__testo)\n-      {\n-\t__p_mode = O_WRONLY | O_TRUNC;\n-\t__rw_mode = _IO_NO_READS;\n-      }\n-#ifdef O_BINARY\n-    if (__testb)\n-      __p_mode |= O_BINARY;\n-#endif\t   \n-\n-    if (__fd >= 0)\n-      {\n-\t_fileno = __fd;\n-\tint __mask = _IO_NO_READS + _IO_NO_WRITES + _IO_IS_APPENDING;\n-\t_flags = (_flags & ~__mask) | (__rw_mode & __mask);\n-\t_IO_link_in((_IO_FILE_plus*) this); \n-\t__retval = this;\n-      }\n-    return __retval;\n-  }\n-\n-  __basic_file* \n-  __basic_file::open(const char* __name, ios_base::openmode __mode, \n-\t\t     int __prot = 0664)\n+  void \n+  __basic_file::_M_open_mode(ios_base::openmode __mode, int& __p_mode, \n+\t\t\t     int& __rw_mode)\n   {\n-    __basic_file* __retval = NULL;\n #ifdef O_BINARY\n     bool __testb = __mode & ios_base::binary;\n #endif\n     bool __testi = __mode & ios_base::in;\n     bool __testo = __mode & ios_base::out;\n     bool __testt = __mode & ios_base::trunc;\n     bool __testa = __mode & ios_base::app;\n-    int __p_mode = 0;\n-    int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n     \n     if (!__testi && __testo && !__testt && !__testa)\n       {\n@@ -147,6 +106,36 @@ namespace std {\n     if (__testb)\n       __p_mode |= O_BINARY;\n #endif\t   \n+    }\n+\n+  __basic_file*\n+  __basic_file::sys_open(int __fd, ios_base::openmode __mode) \n+  {\n+    __basic_file* __retval = NULL;\n+    int __p_mode = 0;\n+    int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n+\n+    _M_open_mode(__mode, __p_mode, __rw_mode);\n+    if (__fd >= 0)\n+      {\n+\t_fileno = __fd;\n+\tint __mask = _IO_NO_READS + _IO_NO_WRITES + _IO_IS_APPENDING;\n+\t_flags = (_flags & ~__mask) | (__rw_mode & __mask);\n+\t_IO_link_in((_IO_FILE_plus*) this); \n+\t__retval = this;\n+      }\n+    return __retval;\n+  }\n+\n+  __basic_file* \n+  __basic_file::open(const char* __name, ios_base::openmode __mode, \n+\t\t     int __prot = 0664)\n+  {\n+    __basic_file* __retval = NULL;\n+    int __p_mode = 0;\n+    int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n+\n+    _M_open_mode(__mode, __p_mode, __rw_mode);\n     if (!_IO_file_is_open(this))\n       {\n #if _G_HAVE_IO_FILE_OPEN"}, {"sha": "b716a14b5b79a5c38fb7fa1be70ac096686d631d", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=6eaa6abdbc7298fe5e44aaa3eb4e2e25a543c1c1", "patch": "@@ -68,16 +68,18 @@ fi\n #LIB_PATH == where to find the build library binaries.\n if [ $WHICH != \"1\" ]; then\n   LIB_PATH=\"$BUILD_DIR/src/.libs\"\n-  CXX=\"../../gcc/g++ -B../../gcc/\"\n+  CXX=\"../../gcc/g++\"\n+  CXX_BASE=\"-B../../gcc/\"\n elif [ $WHICH -eq 1 ]; then\n   LIB_PATH=\"$PREFIX_DIR/lib\"\n   CXX=\"$PREFIX_DIR/bin/g++\"\n+  CXX_BASE=\"\"\n fi\n \n # gcc compiler flags\n #CXX_FLAG=\"-fsquangle -fhonor-std -fnew-exceptions -g -O2 -DDEBUG_ASSERT \"\n #CXX_FLAG=\"-g -O2 -DDEBUG_ASSERT \"\n-CXX_FLAG=\"-g -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n+CXX_FLAG=\"-g $CXX_BASE -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n \n # a specific flag(s) to force the use of shared libraries, if any\n SH_FLAG=\"\"\n@@ -146,7 +148,7 @@ chmod u+w $TEST_DIR/*.tst\n \n # Emit useful info about compiler and platform\n echo \"host: $(uname -mrsv)\" >> $RESULTS_FILE\n-echo \"compiler: $($CXX --version)\" >> $RESULTS_FILE\n+echo \"compiler: $($CXX -v 2>&1 | tail -1)\" >> $RESULTS_FILE\n echo \"compiler flags: $CXX_FLAG\" >> $RESULTS_FILE\n echo \"date: $(date +%Y%m%d)\" >> $RESULTS_FILE\n echo \"\" >> $RESULTS_FILE"}]}