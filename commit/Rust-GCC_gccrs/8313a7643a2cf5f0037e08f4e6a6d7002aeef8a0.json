{"sha": "8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxM2E3NjQzYTJjZjVmMDAzN2UwOGY0ZTZhNmQ3MDAyYWVlZjhhMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2018-09-26T21:14:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2018-09-26T21:14:16Z"}, "message": "Support excess precision for integer / floating-point comparisons (PR c/87390).\n\nIn C11, implicit conversions from integer to floating-point types\nproduce results with the range and precision of the corresponding\nevaluation format rather than only those of the type implicitly\nconverted to.  This patch implements that case of C11 excess precision\nsemantics in the case of a comparison between integer and\nfloating-point types, previously missed when implementing other cases\nof excess precision for such implicit conversions.  As with other such\nfixes, this patch conservatively follows the reading of C99 where\nconversions from integer to floating-point do not produce results with\nexcess precision and so the change is made for C11 mode only.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/c:\n\tPR c/87390\n\t* c-typeck.c (build_binary_op): Use excess precision for\n\tcomparisons of integers and floating-point for C11 and later.\n\ngcc/testsuite:\n\tPR c/87390\n\t* gcc.target/i386/excess-precision-9.c,\n\tgcc.target/i386/excess-precision-10.c: New tests.\n\nFrom-SVN: r264656", "tree": {"sha": "ca2a8e8b70bfaf75c364c906aa77cfcc45fef4b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca2a8e8b70bfaf75c364c906aa77cfcc45fef4b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01414d53cf3c062ca821de9ae48ba4c3db7d8ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01414d53cf3c062ca821de9ae48ba4c3db7d8ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01414d53cf3c062ca821de9ae48ba4c3db7d8ad7"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "a8e235c9f9b553d8a7553534295e75e952a6bef2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "patch": "@@ -1,3 +1,9 @@\n+2018-09-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/87390\n+\t* c-typeck.c (build_binary_op): Use excess precision for\n+\tcomparisons of integers and floating-point for C11 and later.\n+\n 2018-09-26  Martin Jambor  <mjambor@suse.cz>\n \n \tPR c/87347"}, {"sha": "9d09b8d65fd1d07d5bbeb8fa3fa5ec33b29b251f", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "patch": "@@ -11249,6 +11249,20 @@ build_binary_op (location_t location, enum tree_code code,\n     case EXACT_DIV_EXPR:\n       may_need_excess_precision = true;\n       break;\n+\n+    case EQ_EXPR:\n+    case NE_EXPR:\n+    case LE_EXPR:\n+    case GE_EXPR:\n+    case LT_EXPR:\n+    case GT_EXPR:\n+      /* Excess precision for implicit conversions of integers to\n+\t floating point in C11 and later.  */\n+      may_need_excess_precision = (flag_isoc11\n+\t\t\t\t   && (ANY_INTEGRAL_TYPE_P (type0)\n+\t\t\t\t       || ANY_INTEGRAL_TYPE_P (type1)));\n+      break;\n+\n     default:\n       may_need_excess_precision = false;\n       break;"}, {"sha": "16407e5244c7984f725f52b3dfc11a4925d382e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "patch": "@@ -1,3 +1,9 @@\n+2018-09-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/87390\n+\t* gcc.target/i386/excess-precision-9.c,\n+\tgcc.target/i386/excess-precision-10.c: New tests.\n+\n 2018-09-26  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/87443"}, {"sha": "f1b9b7e198054e662ff13d3724e3376e99551f70", "filename": "gcc/testsuite/gcc.target/i386/excess-precision-10.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-10.c?ref=8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "patch": "@@ -0,0 +1,52 @@\n+/* Excess precision tests.  Test implicit conversions in comparisons:\n+   excess precision in C11 mode.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c11 -mfpmath=387 -fexcess-precision=standard\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  float f = 0x1p63f;\n+  unsigned long long int u = (1ULL << 63) + 1;\n+\n+  if ((f == u) != 0)\n+    abort ();\n+\n+  if ((u == f) != 0)\n+    abort ();\n+\n+  if ((f != u) != 1)\n+    abort ();\n+\n+  if ((u != f) != 1)\n+    abort ();\n+\n+  if ((f < u) != 1)\n+    abort ();\n+\n+  if ((u < f) != 0)\n+    abort ();\n+\n+  if ((f <= u) != 1)\n+    abort ();\n+\n+  if ((u <= f) != 0)\n+    abort ();\n+\n+  if ((f > u) != 0)\n+    abort ();\n+\n+  if ((u > f) != 1)\n+    abort ();\n+\n+  if ((f >= u) != 0)\n+    abort ();\n+\n+  if ((u >= f) != 1)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "61e5fc104ad1e544c9ae35a93308eb565f1e11c5", "filename": "gcc/testsuite/gcc.target/i386/excess-precision-9.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fexcess-precision-9.c?ref=8313a7643a2cf5f0037e08f4e6a6d7002aeef8a0", "patch": "@@ -0,0 +1,52 @@\n+/* Excess precision tests.  Test implicit conversions in comparisons:\n+   no excess precision in C99 mode.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -mfpmath=387 -fexcess-precision=standard\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  float f = 0x1p63f;\n+  unsigned long long int u = (1ULL << 63) + 1;\n+\n+  if ((f == u) != 1)\n+    abort ();\n+\n+  if ((u == f) != 1)\n+    abort ();\n+\n+  if ((f != u) != 0)\n+    abort ();\n+\n+  if ((u != f) != 0)\n+    abort ();\n+\n+  if ((f < u) != 0)\n+    abort ();\n+\n+  if ((u < f) != 0)\n+    abort ();\n+\n+  if ((f <= u) != 1)\n+    abort ();\n+\n+  if ((u <= f) != 1)\n+    abort ();\n+\n+  if ((f > u) != 0)\n+    abort ();\n+\n+  if ((u > f) != 0)\n+    abort ();\n+\n+  if ((f >= u) != 1)\n+    abort ();\n+\n+  if ((u >= f) != 1)\n+    abort ();\n+\n+  exit (0);\n+}"}]}