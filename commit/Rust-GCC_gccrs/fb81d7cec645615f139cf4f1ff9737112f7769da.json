{"sha": "fb81d7cec645615f139cf4f1ff9737112f7769da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4MWQ3Y2VjNjQ1NjE1ZjEzOWNmNGYxZmY5NzM3MTEyZjc3NjlkYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-12T02:07:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-12T02:07:46Z"}, "message": "(movsi matcher): Add nop for moving special register to itself for !TARGET_POWER.\n\n(movsi matcher): Add nop for moving special register to itself\nfor !TARGET_POWER.\n(movhi and movqi matcher): Likewise and add mtjmpr attribute.\nSeparate MQ from CTR and LR target registers for TARGET_POWER.\n\nFrom-SVN: r7736", "tree": {"sha": "5fd92288424156985addecabb8e8e4c30cf817de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd92288424156985addecabb8e8e4c30cf817de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb81d7cec645615f139cf4f1ff9737112f7769da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb81d7cec645615f139cf4f1ff9737112f7769da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb81d7cec645615f139cf4f1ff9737112f7769da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb81d7cec645615f139cf4f1ff9737112f7769da/comments", "author": null, "committer": null, "parents": [{"sha": "a2613d100b8938881bebf8488a3fff395df06fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2613d100b8938881bebf8488a3fff395df06fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2613d100b8938881bebf8488a3fff395df06fc3"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "da15d902d48007350435854b051a5235d4494c1d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb81d7cec645615f139cf4f1ff9737112f7769da/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb81d7cec645615f139cf4f1ff9737112f7769da/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fb81d7cec645615f139cf4f1ff9737112f7769da", "patch": "@@ -3574,8 +3574,8 @@\n   [(set_attr \"type\" \"*,load,*,*,*,*,*,mtjmpr,*\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,*h\")\n-\t(match_operand:SI 1 \"input_operand\" \"r,m,r,I,J,*h,r\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,*h,*h\")\n+\t(match_operand:SI 1 \"input_operand\" \"r,m,r,I,J,*h,r,0\"))]\n   \"! TARGET_POWER && (gpc_reg_operand (operands[0], SImode)\n    || gpc_reg_operand (operands[1], SImode))\"\n   \"@\n@@ -3585,8 +3585,9 @@\n    li %0,%1\n    lis %0,%u1\n    mf%1 %0\n-   mt%0 %1\"\n-  [(set_attr \"type\" \"*,load,*,*,*,*,mtjmpr\")])\n+   mt%0 %1\n+   cror 0,0,0\"\n+  [(set_attr \"type\" \"*,load,*,*,*,*,mtjmpr,*\")])\n \n ;; Split a load of a large constant into the appropriate two-insn\n ;; sequence.\n@@ -3637,8 +3638,8 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*h,*h\")\n-\t(match_operand:HI 1 \"input_operand\" \"r,m,r,i,*h,r,0\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*q,*c*l,*h\")\n+\t(match_operand:HI 1 \"input_operand\" \"r,m,r,i,*h,r,r,0\"))]\n   \"TARGET_POWER && (gpc_reg_operand (operands[0], HImode)\n    || gpc_reg_operand (operands[1], HImode))\"\n   \"@\n@@ -3648,12 +3649,13 @@\n    {cal %0,%w1(0)|li %0,%w1}\n    mf%1 %0\n    mt%0 %1\n+   mt%0 %1\n    cror 0,0,0\"\n-  [(set_attr \"type\" \"*,load,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"*,load,*,*,*,*,mtjmpr,*\")])\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*h\")\n-\t(match_operand:HI 1 \"input_operand\" \"r,m,r,i,*h,r\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*h,*h\")\n+\t(match_operand:HI 1 \"input_operand\" \"r,m,r,i,*h,r,0\"))]\n   \"! TARGET_POWER && (gpc_reg_operand (operands[0], HImode)\n    || gpc_reg_operand (operands[1], HImode))\"\n   \"@\n@@ -3662,8 +3664,9 @@\n    sth%U0%X0 %1,%0\n    li %0,%w1\n    mf%1 %0\n-   mt%0 %1\"\n-  [(set_attr \"type\" \"*,load,*,*,*,*\")])\n+   mt%0 %1\n+   cror 0,0,0\"\n+  [(set_attr \"type\" \"*,load,*,*,*,mtjmpr,*\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n@@ -3685,8 +3688,8 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*h,*h\")\n-\t(match_operand:QI 1 \"input_operand\" \"r,m,r,i,*h,r,0\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*q,*c*l,*h\")\n+\t(match_operand:QI 1 \"input_operand\" \"r,m,r,i,*h,r,r,0\"))]\n   \"TARGET_POWER && (gpc_reg_operand (operands[0], QImode)\n    || gpc_reg_operand (operands[1], QImode))\"\n   \"@\n@@ -3696,12 +3699,13 @@\n    {cal %0,%1(0)|li %0,%1}\n    mf%1 %0\n    mt%0 %1\n+   mt%0 %1\n    cror 0,0,0\"\n-  [(set_attr \"type\" \"*,load,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"*,load,*,*,*,*,mtjmpr,*\")])\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*h\")\n-\t(match_operand:QI 1 \"input_operand\" \"r,m,r,i,*h,r\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*h,*h\")\n+\t(match_operand:QI 1 \"input_operand\" \"r,m,r,i,*h,r,0\"))]\n   \"! TARGET_POWER && (gpc_reg_operand (operands[0], QImode)\n    || gpc_reg_operand (operands[1], QImode))\"\n   \"@\n@@ -3710,8 +3714,9 @@\n    stb%U0%X0 %1,%0\n    li %0,%1\n    mf%1 %0\n-   mt%0 %1\"\n-  [(set_attr \"type\" \"*,load,*,*,*,*\")])\n+   mt%0 %1\n+   cror 0,0,0\"\n+  [(set_attr \"type\" \"*,load,*,*,*,mtjmpr,*\")])\n \f\n ;; Here is how to move condition codes around.  When we store CC data in\n ;; an integer register or memory, we store just the high-order 4 bits."}]}