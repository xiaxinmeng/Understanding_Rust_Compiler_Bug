{"sha": "8c08ae7ac2a38ca224a2b841e8f4afba5f638953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwOGFlN2FjMmEzOGNhMjI0YTJiODQxZThmNGFmYmE1ZjYzODk1Mw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-08-29T11:40:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-29T11:40:49Z"}, "message": "* NEWS: Various updates.\n\nFrom-SVN: r22079", "tree": {"sha": "a7b4c84e163d4a7fd9a8bb457973af2bea28c659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7b4c84e163d4a7fd9a8bb457973af2bea28c659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c08ae7ac2a38ca224a2b841e8f4afba5f638953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c08ae7ac2a38ca224a2b841e8f4afba5f638953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c08ae7ac2a38ca224a2b841e8f4afba5f638953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c08ae7ac2a38ca224a2b841e8f4afba5f638953/comments", "author": null, "committer": null, "parents": [{"sha": "9ea976658e38672cfe4bfd81d3e2d45d273301ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea976658e38672cfe4bfd81d3e2d45d273301ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea976658e38672cfe4bfd81d3e2d45d273301ea"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "f8ed48ab4c0b9560299945c3fd609ca503c8c807", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c08ae7ac2a38ca224a2b841e8f4afba5f638953/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c08ae7ac2a38ca224a2b841e8f4afba5f638953/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c08ae7ac2a38ca224a2b841e8f4afba5f638953", "patch": "@@ -1,3 +1,7 @@\n+Sat Aug 29 12:39:56 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+        * NEWS: Various updates.\n+\n Fri Aug 28 19:00:44 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \n \t* config/sparc/sparc.c (arith_operand, const64_operand,"}, {"sha": "23357c69696a98be7120361a696e784b46553f01", "filename": "gcc/NEWS", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c08ae7ac2a38ca224a2b841e8f4afba5f638953/gcc%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c08ae7ac2a38ca224a2b841e8f4afba5f638953/gcc%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FNEWS?ref=8c08ae7ac2a38ca224a2b841e8f4afba5f638953", "patch": "@@ -1,4 +1,102 @@\n-Noteworthy changes in GCC for EGCS.\n+Noteworthy changes in GCC for EGCS 1.1.\n+---------------------------------------\n+\n+The compiler now implements global common subexpression elimination (gcse) as\n+well as global constant/copy propagation.  (link to gcse page).\n+\n+More major improvements have been made to the alias analysis code.  A new\n+option to allow front-ends to provide alias information to the optimizers\n+has also been added (-fstrict-aliasing).  -fstrict-aliasing is off by default\n+now, but will be enabled by default in the future. (link to alias page)\n+\n+Major changes continue in the exception handling support.  This release\n+includes some changes to reduce static overhead for exception handling.  It\n+also includes some major changes to the setjmp/longjmp based EH mechanism to\n+make it less pessimistic.  And finally, major infrastructure improvements\n+to the dwarf2 EH mechanism have been made to make our EH support extensible.\n+\n+We have fixed the infamous security problems with temporary files. \n+\n+The \"regmove\" optimization pass has been nearly completely rewritten.  It now\n+uses much more information about the target to determine profitability of\n+transformations.\n+\n+The compiler now recomputes register usage information immediately before\n+register allocation.  Previously such information was only not kept up to\n+date after instruction combination which led to poor register allocation\n+choices by our priority based register allocator.\n+\n+The register reloading phase of the compiler has been improved to better\n+optimize spill code.  This primarily helps targets which generate lots of\n+spills (like the x86 ports and many register poor embedded ports).\n+\n+A few changes in the heuristics used by the register allocator and scheduler\n+have been made which can significantly improve performance for certain\n+applications.\n+\n+The compiler's branch shortening algorithms have been significantly improved\n+to work better on targets which align jump targets.\n+\n+The compiler now supports the \"ADDRESSOF\" optimization which can significantly\n+reduce the overhead for certain inline calls (and inline calls in general).\n+\n+The compiler now supports a code size optimization switch (-Os).  When enabled\n+the compiler will prefer optimizations which improve code size over those\n+which improve code speed.\n+\n+The compiler has been improved to completely eliminate library calls which\n+compute constant values.  This is particularly useful on machines which\n+do not have integer mul/div or floating point support on-chip.\n+\n+GCC now supports a \"--help\" option to print detailed help information.\n+\n+cpplib has been greatly improved.  It is probably useable for some sites now\n+(major missing feature is trigraphs).\n+\n+Memory footprint for the compiler has been significantly reduced for certain\n+pathalogical cases.\n+\n+Build time improvements for targets which support lots of sched parameters\n+(alpha and mips primarily).\n+\n+Compile time for certain programs using large constant initializers has been\n+improved (effects glibc significantly).\n+\n+Plus an incredible number of infrastructure changes, warning fixes, bugfixes\n+and local optimizations.\n+\n+Various improvements have been made to better support cross compilations.  They\n+are still not easy, but they are improving.\n+\n+Target specific NEWS\n+\n+    Sparc: Now includes V8 plus and V9 support, lots of tuning for Ultrasparcs\n+           and uses the Haifa scheduler by default.\n+\n+    Alpha: EV6 tuned, optimized expansion of memcpy/bzero.\n+\n+    x86: Data in the static store is aligned per Intel recommendations.  Jump\n+         targets are aligned per Intel recommendations.  Improved epilogue\n+         sequences for Pentium chips.  Backend improvements which should help\n+         register allocation on all x86 variants.  Support for PPro conditional\n+         move instructions has been fixed and enabled.  Random changes\n+\t throughout the port to make generated code more Pentium friendly.\n+         Improved support for 64bit integer operations.\n+\n+    RS6000/PowerPC: Includes AIX4.3 support as well as PowerPC64 support.  \n+                    Haifa instruction scheduling is enabled by default now.\n+\n+    MIPS: Multiply/Multiply-Add support has been largely rewritten to generate\n+          more efficient code.  Includes mips16 support.\n+\n+    M68K: Various micro-optimizations and Coldfire fixes.\n+\n+    M32r: Major improvements to this port.\n+\n+    Arm: Includes Thumb and super interworking support.\n+\n+EGCS includes all gcc2 changes up to and including the June 9, 1998 snapshot.\n+\n \n Noteworthy changes in GCC version 2.8.1\n ---------------------------------------"}]}