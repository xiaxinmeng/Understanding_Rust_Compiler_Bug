{"sha": "62d9f2e92b441bc65b080a1288a241d112289920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkOWYyZTkyYjQ0MWJjNjViMDgwYTEyODhhMjQxZDExMjI4OTkyMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-05-07T09:48:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-05-07T09:48:29Z"}, "message": "invoke.texi: Remove documentation for MIPS' -mint64 option.\n\n\t* doc/invoke.texi: Remove documentation for MIPS' -mint64 option.\n\t* config/mips/mips.c (TARGET_SCALAR_MODE_SUPPORTED_P): Delete.\n\t(mips_scalar_mode_supported_p): Delete.\n\ncp/\n\t* mangle.c: Remove a reference to the MIPS -mint64 option.\n\nFrom-SVN: r99348", "tree": {"sha": "8bacd2f915c89d271d9c7d320f2a8863f3ef40e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bacd2f915c89d271d9c7d320f2a8863f3ef40e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d9f2e92b441bc65b080a1288a241d112289920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d9f2e92b441bc65b080a1288a241d112289920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d9f2e92b441bc65b080a1288a241d112289920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d9f2e92b441bc65b080a1288a241d112289920/comments", "author": null, "committer": null, "parents": [{"sha": "6e1141d738f16417f55f88fdd087a50c71fdf1ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1141d738f16417f55f88fdd087a50c71fdf1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1141d738f16417f55f88fdd087a50c71fdf1ae"}], "stats": {"total": 69, "additions": 15, "deletions": 54}, "files": [{"sha": "168c48e4cbc2c4b23ac58f6dc4ed42abc1a02466", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62d9f2e92b441bc65b080a1288a241d112289920", "patch": "@@ -1,3 +1,9 @@\n+2005-05-07  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* doc/invoke.texi: Remove documentation for MIPS' -mint64 option.\n+\t* config/mips/mips.c (TARGET_SCALAR_MODE_SUPPORTED_P): Delete.\n+\t(mips_scalar_mode_supported_p): Delete.\n+\n 2005-05-06  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.opt: Remove -mint64 option."}, {"sha": "d8b39c3bb9de601f7aa43b0aba7ffd65aa924846", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=62d9f2e92b441bc65b080a1288a241d112289920", "patch": "@@ -357,7 +357,6 @@ static bool mips_callee_copies (CUMULATIVE_ARGS *, enum machine_mode mode,\n static int mips_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode mode,\n \t\t\t\t   tree, bool);\n static bool mips_valid_pointer_mode (enum machine_mode);\n-static bool mips_scalar_mode_supported_p (enum machine_mode);\n static bool mips_vector_mode_supported_p (enum machine_mode);\n static rtx mips_prepare_builtin_arg (enum insn_code, unsigned int, tree *);\n static rtx mips_prepare_builtin_target (enum insn_code, unsigned int, rtx);\n@@ -820,9 +819,6 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P mips_vector_mode_supported_p\n \n-#undef TARGET_SCALAR_MODE_SUPPORTED_P\n-#define TARGET_SCALAR_MODE_SUPPORTED_P mips_scalar_mode_supported_p\n-\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS mips_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n@@ -7285,44 +7281,8 @@ mips_valid_pointer_mode (enum machine_mode mode)\n   return (mode == SImode || (TARGET_64BIT && mode == DImode));\n }\n \n-/* Define this so that we can deal with a testcase like:\n-\n-   char foo __attribute__ ((mode (SI)));\n-\n-   then compiled with -mabi=64 and -mint64. We have no\n-   32-bit type at that point and so the default case\n-   always fails.  */\n-\n-static bool\n-mips_scalar_mode_supported_p (enum machine_mode mode)\n-{\n-  switch (mode)\n-    {\n-    case QImode:\n-    case HImode:\n-    case SImode:\n-    case DImode:\n-      return true;\n-\n-      /* Handled via optabs.c.  */\n-    case TImode:\n-      return TARGET_64BIT;\n-\n-    case SFmode:\n-    case DFmode:\n-      return true;\n-\n-      /* LONG_DOUBLE_TYPE_SIZE is 128 for TARGET_NEWABI only.  */\n-    case TFmode:\n-      return TARGET_NEWABI;\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n-\n /* Target hook for vector_mode_supported_p.  */\n+\n static bool\n mips_vector_mode_supported_p (enum machine_mode mode)\n {"}, {"sha": "c16efa39e9614b8cb494dfee3565579188b63ee8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62d9f2e92b441bc65b080a1288a241d112289920", "patch": "@@ -1,3 +1,7 @@\n+2005-05-07  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* mangle.c: Remove a reference to the MIPS -mint64 option.\n+\n 2005-05-07  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* decl.c (wrapup_globals_for_namespace): Use VEC instead of"}, {"sha": "a2fefd0c2385be31788443977e9d57bd8274ae2e", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=62d9f2e92b441bc65b080a1288a241d112289920", "patch": "@@ -1773,11 +1773,10 @@ write_builtin_type (tree type)\n \t\t     type\" with a name the form intN or uintN, respectively.\n \t\t     Situations like this can happen if you have an\n \t\t     __attribute__((__mode__(__SI__))) type and use exotic\n-\t\t     switches like '-mint64' on MIPS or '-mint8' on AVR.\n-\t\t     Of course, this is undefined by the C++ ABI (and\n-\t\t     '-mint8' is not even Standard C conforming), but when\n-\t\t     using such special options you're pretty much in nowhere\n-\t\t     land anyway.  */\n+\t\t     switches like '-mint8' on AVR.  Of course, this is\n+\t\t     undefined by the C++ ABI (and '-mint8' is not even\n+\t\t     Standard C conforming), but when using such special\n+\t\t     options you're pretty much in nowhere land anyway.  */\n \t\t  const char *prefix;\n \t\t  char prec[11];\t/* up to ten digits for an unsigned */\n "}, {"sha": "ab95b4d45e0097d2879d667f52f29ae67afdf557", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d9f2e92b441bc65b080a1288a241d112289920/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=62d9f2e92b441bc65b080a1288a241d112289920", "patch": "@@ -9857,14 +9857,6 @@ support to be enabled.\n Use (do not use) the MIPS-3D ASE@.  @xref{MIPS-3D Built-in Functions}.\n The option @option{-mips3d} implies @option{-mpaired-single}.\n \n-@item -mint64\n-@opindex mint64\n-Force @code{int} and @code{long} types to be 64 bits wide.  See\n-@option{-mlong32} for an explanation of the default and the way\n-that the pointer size is determined.\n-\n-This option has been deprecated and will be removed in a future release.\n-\n @item -mlong64\n @opindex mlong64\n Force @code{long} types to be 64 bits wide.  See @option{-mlong32} for"}]}