{"sha": "a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzNjEzYzRhZTlhZDE1M2NlNWQxMmZkZmVmNDEzYzllOWFlODJkNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T16:00:30Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T16:00:30Z"}, "message": "[arm] Use cl_target_options for configuring the active target\n\nIt now becomes apparent that it would be better to use the the\ncl_target_options as the basis for calling arm_configure_build_target;\nit already contains exactly the same fields that we need.  I chose not\nto rewrite the earlier patches as that would make the progression of\nchanges seem less logical than it currently is, with several early\nchanges having no immediate justification.\n\n\t* arm-protos.h (arm_configure_build_target): Change second argument\n\tto cl_target_options.\n\t* arm.c (arm_configure_build_target): Likewise.\n\t(arm_option_restore): Update accordingly.\n\t(arm_option_override): Create the target_option_default_node before\n\tcalling arm_configure_build_target.  Use it in call of latter.\n\tResynchronize after all other overrides have been calculated.\n\t(arm_valid_target_attribute_tree): Use the target options for\n\treconfiguration.  Resynchronize after performing override checks.\n\t* arm-c.c (arm_pragma_target_parse): Use target optiosn from cur_tree\n\tto reconfigure the build target.\n\nFrom-SVN: r243713", "tree": {"sha": "4274dcec62646164c5e20c051b281533eac91571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4274dcec62646164c5e20c051b281533eac91571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/comments", "author": null, "committer": null, "parents": [{"sha": "091df64952e4922ad4160cd7ea0e76684b3ad0ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091df64952e4922ad4160cd7ea0e76684b3ad0ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091df64952e4922ad4160cd7ea0e76684b3ad0ee"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "da2edc71a18220bff2dd01fe6e608807a1b2278e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "patch": "@@ -1,3 +1,17 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-protos.h (arm_configure_build_target): Change second argument\n+\tto cl_target_options.\n+\t* arm.c (arm_configure_build_target): Likewise.\n+\t(arm_option_restore): Update accordingly.\n+\t(arm_option_override): Create the target_option_default_node before\n+\tcalling arm_configure_build_target.  Use it in call of latter.\n+\tResynchronize after all other overrides have been calculated.\n+\t(arm_valid_target_attribute_tree): Use the target options for\n+\treconfiguration.  Resynchronize after performing override checks.\n+\t* arm-c.c (arm_pragma_target_parse): Use target optiosn from cur_tree\n+\tto reconfigure the build target.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.h (TARGET_VFPD32): Use arm_active_target."}, {"sha": "b57af6954004c309a62d8f29c8036a01b1ab17b1", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "patch": "@@ -243,7 +243,8 @@ arm_pragma_target_parse (tree args, tree pop_target)\n       /* handle_pragma_pop_options and handle_pragma_reset_options will set\n        target_option_current_node, but not handle_pragma_target.  */\n       target_option_current_node = cur_tree;\n-      arm_configure_build_target (&arm_active_target, &global_options,\n+      arm_configure_build_target (&arm_active_target,\n+\t\t\t\t  TREE_TARGET_OPTION (cur_tree),\n \t\t\t\t  &global_options_set, false);\n     }\n "}, {"sha": "d418ca9cc79fe25c5763288e922d56803454f114", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "patch": "@@ -225,7 +225,7 @@ extern bool arm_change_mode_p (tree);\n extern tree arm_valid_target_attribute_tree (tree, struct gcc_options *,\n \t\t\t\t\t     struct gcc_options *);\n extern void arm_configure_build_target (struct arm_build_target *,\n-\t\t\t\t\tstruct gcc_options *,\n+\t\t\t\t\tstruct cl_target_option *,\n \t\t\t\t\tstruct gcc_options *, bool);\n extern void arm_pr_long_calls (struct cpp_reader *);\n extern void arm_pr_no_long_calls (struct cpp_reader *);"}, {"sha": "df520e5792ee76743a847d95739926b16273b289", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "patch": "@@ -2936,16 +2936,17 @@ arm_override_options_after_change_1 (struct gcc_options *opts)\n static void\n arm_override_options_after_change (void)\n {\n-  arm_configure_build_target (&arm_active_target, &global_options,\n+  arm_configure_build_target (&arm_active_target,\n+\t\t\t      TREE_TARGET_OPTION (target_option_default_node),\n \t\t\t      &global_options_set, false);\n \n   arm_override_options_after_change_1 (&global_options);\n }\n \n static void\n-arm_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\n+arm_option_restore (struct gcc_options *, struct cl_target_option *ptr)\n {\n-  arm_configure_build_target (&arm_active_target, opts, &global_options_set,\n+  arm_configure_build_target (&arm_active_target, ptr, &global_options_set,\n \t\t\t      false);\n }\n \n@@ -3070,7 +3071,7 @@ static sbitmap isa_quirkbits;\n    architecture have been specified, but the two are not identical.  */\n void\n arm_configure_build_target (struct arm_build_target *target,\n-\t\t\t    struct gcc_options *opts,\n+\t\t\t    struct cl_target_option *opts,\n \t\t\t    struct gcc_options *opts_set,\n \t\t\t    bool warn_compatible)\n {\n@@ -3306,7 +3307,13 @@ arm_option_override (void)\n       gcc_assert (ok);\n     }\n \n-  arm_configure_build_target (&arm_active_target, &global_options,\n+  /* Create the default target_options structure.  We need this early\n+     to configure the overall build target.  */\n+  target_option_default_node = target_option_current_node\n+    = build_target_option_node (&global_options);\n+\n+  arm_configure_build_target (&arm_active_target,\n+\t\t\t      TREE_TARGET_OPTION (target_option_default_node),\n \t\t\t      &global_options_set, true);\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n@@ -3657,14 +3664,12 @@ arm_option_override (void)\n   arm_option_check_internal (&global_options);\n   arm_option_params_internal ();\n \n+  /* Resynchronize the saved target options.  */\n+  cl_target_option_save (TREE_TARGET_OPTION (target_option_default_node),\n+\t\t\t &global_options);\n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();\n \n-  /* Save the initial options in case the user does function specific\n-     options or #pragma target.  */\n-  target_option_default_node = target_option_current_node\n-    = build_target_option_node (&global_options);\n-\n   /* Init initial mode for testing.  */\n   thumb_flipper = TARGET_THUMB;\n }\n@@ -30326,15 +30331,22 @@ tree\n arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n \t\t\t\t struct gcc_options *opts_set)\n {\n+  tree t;\n+\n   if (!arm_valid_target_attribute_rec (args, opts))\n     return NULL_TREE;\n \n-  arm_configure_build_target (&arm_active_target, opts, opts_set, false);\n+  t = build_target_option_node (opts);\n+  arm_configure_build_target (&arm_active_target, TREE_TARGET_OPTION (t),\n+\t\t\t      opts_set, false);\n   arm_option_check_internal (opts);\n   /* Do any overrides, such as global options arch=xxx.  */\n   arm_option_override_internal (opts, opts_set);\n \n-  return build_target_option_node (opts);\n+  /* Resynchronize the saved target options.  */\n+  cl_target_option_save (TREE_TARGET_OPTION (t), opts);\n+\n+  return t;\n }\n \n static void "}]}