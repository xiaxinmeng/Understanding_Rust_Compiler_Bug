{"sha": "3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlMmE0MGVjZGZhMzdlZmE0MDNkNGI0NmVmMTE2MjI1YWNiMGRjMA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-11-24T09:45:20Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-11-24T09:45:20Z"}, "message": "re PR c/68337 ([MPX] memcpy() for arrays with function pointers results in huge resource usage and binaries)\n\ngcc/\n\n\tPR c/68337\n\t* gimple-fold.c: Include ipa-chkp.h.\n\t(gimple_fold_builtin_memory_op): Don't fold call if we\n\tare going to instrument it and it may copy pointers.\n\ngcc/testsuite/\n\n\tPR c/68337\n\t* gcc.target/i386/mpx/pr68337-1.c: New test.\n\t* gcc.target/i386/mpx/pr68337-2.c: New test.\n\nFrom-SVN: r230796", "tree": {"sha": "3418f5bf30bacb63903659e0d25d3b02c74fb671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3418f5bf30bacb63903659e0d25d3b02c74fb671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/comments", "author": null, "committer": null, "parents": [{"sha": "8632824e9c117077ef95d907ff51553b584609ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8632824e9c117077ef95d907ff51553b584609ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8632824e9c117077ef95d907ff51553b584609ba"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "d8a58721eb5a63dc18cfe9bd3ae47a0d72a86493", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "patch": "@@ -1,3 +1,10 @@\n+2015-11-24  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR c/68337\n+\t* gimple-fold.c: Include ipa-chkp.h.\n+\t(gimple_fold_builtin_memory_op): Don't fold call if we\n+\tare going to instrument it and it may copy pointers.\n+\n 2015-11-24  Bernd Schmidt <bschmidt@redhat.com>\n             Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n "}, {"sha": "6ff5e266d420a94b80cf1db12d45784b3fc26214", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"optabs-query.h\"\n #include \"omp-low.h\"\n+#include \"ipa-chkp.h\"\n \n \n /* Return true when DECL can be referenced from current unit.\n@@ -664,6 +665,18 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n       unsigned int src_align, dest_align;\n       tree off0;\n \n+      /* Inlining of memcpy/memmove may cause bounds lost (if we copy\n+\t pointers as wide integer) and also may result in huge function\n+\t size because of inlined bounds copy.  Thus don't inline for\n+\t functions we want to instrument.  */\n+      if (flag_check_pointer_bounds\n+\t  && chkp_instrumentable_p (cfun->decl)\n+\t  /* Even if data may contain pointers we can inline if copy\n+\t     less than a pointer size.  */\n+\t  && (!tree_fits_uhwi_p (len)\n+\t      || compare_tree_int (len, POINTER_SIZE_UNITS) >= 0))\n+\treturn false;\n+\n       /* Build accesses at offset zero with a ref-all character type.  */\n       off0 = build_int_cst (build_pointer_type_for_mode (char_type_node,\n \t\t\t\t\t\t\t ptr_mode, true), 0);"}, {"sha": "6c98a6fe51fc1a527bf9ca445faed39072396a5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "patch": "@@ -1,3 +1,9 @@\n+2015-11-24  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR c/68337\n+\t* gcc.target/i386/mpx/pr68337-1.c: New test.\n+\t* gcc.target/i386/mpx/pr68337-2.c: New test.\n+\n 2015-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/68194"}, {"sha": "3f8d79d42829673b0dd477839c5cc8d6a1e58c44", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr68337-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-1.c?ref=3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+#include \"mpx-check.h\"\n+\n+#define N 2\n+\n+extern void abort ();\n+\n+static int\n+mpx_test (int argc, const char **argv)\n+{\n+  char ** src = (char **)malloc (sizeof (char *) * N);\n+  char ** dst = (char **)malloc (sizeof (char *) * N);\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    src[i] = __bnd_set_ptr_bounds (argv[0] + i, i + 1);\n+\n+  __builtin_memcpy(dst, src, sizeof (char *) * N);\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      char *p = dst[i];\n+      if (p != argv[0] + i\n+\t  || __bnd_get_ptr_lbound (p) != p\n+\t  || __bnd_get_ptr_ubound (p) != p + i)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "8845cca79be0ff85f67779e42ef2992b2268b981", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr68337-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de2a40ecdfa37efa403d4b46ef116225acb0dc0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-2.c?ref=3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+/* { dg-final { scan-assembler-not \"memcpy\" } } */\n+\n+void\n+test (void *dst, void *src)\n+{\n+  __builtin_memcpy (dst, src, sizeof (char *) / 2);\n+}"}]}