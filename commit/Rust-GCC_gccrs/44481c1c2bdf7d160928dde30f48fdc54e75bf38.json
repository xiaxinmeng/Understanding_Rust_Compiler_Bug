{"sha": "44481c1c2bdf7d160928dde30f48fdc54e75bf38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0ODFjMWMyYmRmN2QxNjA5MjhkZGUzMGY0OGZkYzU0ZTc1YmYzOA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-16T10:41:48Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-16T11:09:07Z"}, "message": "Cleanup HIR to canonicalize TraitImpl to be treated as an impl block\n\nHIR should desugar the AST as best it can. Trait impl blocks are just impl\nblocks. The HIR impl block can just have an optional<TraitRef> in order to\nrepresent a trait impl block.", "tree": {"sha": "c23d9bc49979377b15a57dbdc7524595a9a5be0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c23d9bc49979377b15a57dbdc7524595a9a5be0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44481c1c2bdf7d160928dde30f48fdc54e75bf38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44481c1c2bdf7d160928dde30f48fdc54e75bf38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44481c1c2bdf7d160928dde30f48fdc54e75bf38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44481c1c2bdf7d160928dde30f48fdc54e75bf38/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f09fd5a48046ceba064bde2f230386fbc3700f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f09fd5a48046ceba064bde2f230386fbc3700f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f09fd5a48046ceba064bde2f230386fbc3700f"}], "stats": {"total": 463, "additions": 32, "deletions": 431}, "files": [{"sha": "29e7562ed001ada71dc4fea93bb0d23ae3903218", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -148,8 +148,7 @@ class HIRCompileBase : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitItemType &item) {}\n   virtual void visit (HIR::Trait &trait) {}\n   virtual void visit (HIR::InherentImpl &impl) {}\n-  virtual void visit (HIR::TraitImpl &impl) {}\n-  // virtual void visit(ExternalItem& item) {}\n+\n   virtual void visit (HIR::ExternalStaticItem &item) {}\n   virtual void visit (HIR::ExternalFunctionItem &item) {}\n   virtual void visit (HIR::ExternBlock &block) {}"}, {"sha": "a5ca13b93226c5b1793fb92b91286b8260ae9a8f", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -42,14 +42,6 @@ class CompileInherentImplItem : public HIRCompileBase\n     item->accept_vis (compiler);\n   }\n \n-  static void Compile (TyTy::BaseType *self, HIR::TraitImplItem *item,\n-\t\t       Context *ctx, bool compile_fns,\n-\t\t       TyTy::BaseType *concrete = nullptr)\n-  {\n-    CompileInherentImplItem compiler (self, ctx, compile_fns, concrete);\n-    item->accept_vis (compiler);\n-  }\n-\n   void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *resolved_type = nullptr;"}, {"sha": "e3b6d0fe37003bd3647c34ce982ac5978c7ad6b3", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -290,22 +290,6 @@ class CompileItem : public HIRCompileBase\n \t\t\t\t\tcompile_fns);\n   }\n \n-  void visit (HIR::TraitImpl &impl_block) override\n-  {\n-    TyTy::BaseType *self_lookup = nullptr;\n-    if (!ctx->get_tyctx ()->lookup_type (\n-\t  impl_block.get_type ()->get_mappings ().get_hirid (), &self_lookup))\n-      {\n-\trust_error_at (impl_block.get_locus (),\n-\t\t       \"failed to resolve type of impl\");\n-\treturn;\n-      }\n-\n-    for (auto &impl_item : impl_block.get_impl_items ())\n-      CompileInherentImplItem::Compile (self_lookup, impl_item.get (), ctx,\n-\t\t\t\t\tcompile_fns);\n-  }\n-\n private:\n   CompileItem (Context *ctx, bool compile_fns, TyTy::BaseType *concrete)\n     : HIRCompileBase (ctx), compile_fns (compile_fns), concrete (concrete)"}, {"sha": "31ebb83fd4d2243d52bde5e151c76d98c4ec6b64", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -43,14 +43,13 @@ class ASTLowerImplItem : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  static HIR::TraitImplItem *translate (AST::TraitImplItem *item,\n-\t\t\t\t\tHirId parent_impl_id)\n+  static HIR::InherentImplItem *translate (AST::TraitImplItem *item,\n+\t\t\t\t\t   HirId parent_impl_id)\n   {\n     ASTLowerImplItem resolver (parent_impl_id);\n     item->accept_vis (resolver);\n-    rust_assert (resolver.trait_impl_item != nullptr);\n-    // can get a way with this for now since they have the same hierarchy\n-    return resolver.trait_impl_item;\n+    rust_assert (resolver.translated != nullptr);\n+    return resolver.translated;\n   }\n \n   void visit (AST::ConstantItem &constant) override\n@@ -72,7 +71,6 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t       constant.get_outer_attrs (),\n \t\t\t       constant.get_locus ());\n     translated = translated_constant;\n-    trait_impl_item = translated_constant;\n \n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id,\n@@ -161,7 +159,6 @@ class ASTLowerImplItem : public ASTLoweringBase\n       }\n \n     translated = fn;\n-    trait_impl_item = fn;\n   }\n \n   void visit (AST::Method &method) override\n@@ -250,17 +247,15 @@ class ASTLowerImplItem : public ASTLoweringBase\n       }\n \n     translated = mth;\n-    trait_impl_item = mth;\n   }\n \n private:\n   ASTLowerImplItem (HirId parent_impl_id)\n-    : translated (nullptr), trait_impl_item (nullptr),\n-      parent_impl_id (parent_impl_id)\n+    : translated (nullptr), parent_impl_id (parent_impl_id)\n   {}\n \n   HIR::InherentImplItem *translated;\n-  HIR::TraitImplItem *trait_impl_item;\n+\n   HirId parent_impl_id;\n };\n "}, {"sha": "74ec3616b528a2c6bf8a6efb9289f15e4ba7decc", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -365,7 +365,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t  }\n       }\n \n-    HIR::Type *trait_type\n+    HIR::Type *impl_type\n       = ASTLoweringType::translate (impl_block.get_type ().get ());\n \n     auto crate_num = mappings->get_current_crate ();\n@@ -387,7 +387,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     translated\n       = new HIR::InherentImpl (mapping, std::move (impl_items),\n \t\t\t       std::move (generic_params),\n-\t\t\t       std::unique_ptr<HIR::Type> (trait_type),\n+\t\t\t       std::unique_ptr<HIR::Type> (impl_type),\n \t\t\t       where_clause, vis, impl_block.get_inner_attrs (),\n \t\t\t       impl_block.get_outer_attrs (),\n \t\t\t       impl_block.get_locus ());\n@@ -472,6 +472,7 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::TraitImpl &impl_block) override\n   {\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n@@ -505,35 +506,32 @@ class ASTLoweringItem : public ASTLoweringBase\n \t  }\n       }\n \n-    HIR::Type *trait_type\n+    HIR::Type *impl_type\n       = ASTLoweringType::translate (impl_block.get_type ().get ());\n-    HIR::Type *trait = nullptr;\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, impl_block.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    std::vector<std::unique_ptr<HIR::TraitImplItem> > impl_items;\n+    std::vector<std::unique_ptr<HIR::InherentImplItem> > impl_items;\n     std::vector<HirId> impl_item_ids;\n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n-\tHIR::TraitImplItem *lowered\n+\tHIR::InherentImplItem *lowered\n \t  = ASTLowerImplItem::translate (impl_item.get (),\n \t\t\t\t\t mapping.get_hirid ());\n-\timpl_items.push_back (std::unique_ptr<HIR::TraitImplItem> (lowered));\n-\timpl_item_ids.push_back (\n-\t  lowered->get_trait_impl_mappings ().get_hirid ());\n+\timpl_items.push_back (std::unique_ptr<HIR::InherentImplItem> (lowered));\n+\timpl_item_ids.push_back (lowered->get_impl_mappings ().get_hirid ());\n       }\n \n     translated\n-      = new HIR::TraitImpl (mapping, std::unique_ptr<HIR::Type> (trait),\n-\t\t\t    impl_block.is_unsafe (), impl_block.is_exclam (),\n-\t\t\t    std::move (impl_items), std::move (generic_params),\n-\t\t\t    std::unique_ptr<HIR::Type> (trait_type),\n-\t\t\t    where_clause, vis, impl_block.get_inner_attrs (),\n-\t\t\t    impl_block.get_outer_attrs (),\n-\t\t\t    impl_block.get_locus ());\n+      = new HIR::InherentImpl (mapping, std::move (impl_items),\n+\t\t\t       std::move (generic_params),\n+\t\t\t       std::unique_ptr<HIR::Type> (impl_type),\n+\t\t\t       where_clause, vis, impl_block.get_inner_attrs (),\n+\t\t\t       impl_block.get_outer_attrs (),\n+\t\t\t       impl_block.get_locus ());\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),"}, {"sha": "0920fe1799f92497f5ef9d5d8abdbb951679f1e8", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -38,7 +38,6 @@ class LifetimeParam;\n \n class TraitItem;\n class InherentImplItem;\n-class TraitImplItem;\n struct Crate;\n class PathExpr;\n \n@@ -196,7 +195,6 @@ class TraitItemType;\n class Trait;\n class Impl;\n class InherentImpl;\n-class TraitImpl;\n class ExternalItem;\n class ExternalStaticItem;\n struct NamedFunctionParam;"}, {"sha": "e465b2da959d877e31e9d90641d059773ef8d36c", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -1083,88 +1083,6 @@ BlockExpr::as_string () const\n   return str;\n }\n \n-std::string\n-TraitImpl::as_string () const\n-{\n-  std::string str = VisItem::as_string ();\n-\n-  if (has_unsafe)\n-    {\n-      str += \"unsafe \";\n-    }\n-\n-  str += \"impl \";\n-\n-  // generic params\n-  str += \"\\n Generic params: \";\n-  if (!has_generics ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      for (const auto &param : generic_params)\n-\t{\n-\t  str += \"\\n  \" + param->as_string ();\n-\t}\n-    }\n-\n-  str += \"\\n Has exclam: \";\n-  if (has_exclam)\n-    {\n-      str += \"true\";\n-    }\n-  else\n-    {\n-      str += \"false\";\n-    }\n-\n-  str += \"\\n TypePath (to trait): \" + trait_path->as_string ();\n-\n-  str += \"\\n Type (struct to impl on): \" + trait_type->as_string ();\n-\n-  str += \"\\n Where clause: \";\n-  if (!has_where_clause ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      str += where_clause.as_string ();\n-    }\n-\n-  // inner attributes\n-  str += \"\\n inner attributes: \";\n-  if (inner_attrs.empty ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      /* note that this does not print them with \"inner attribute\" syntax -\n-       * just the body */\n-      for (const auto &attr : inner_attrs)\n-\t{\n-\t  str += \"\\n  \" + attr.as_string ();\n-\t}\n-    }\n-\n-  str += \"\\n trait impl items: \";\n-  if (!has_impl_items ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      for (const auto &item : impl_items)\n-\t{\n-\t  str += \"\\n  \" + item->as_string ();\n-\t}\n-    }\n-\n-  return str;\n-}\n-\n std::string\n TypeAlias::as_string () const\n {\n@@ -4692,12 +4610,6 @@ InherentImpl::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-TraitImpl::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n ExternalStaticItem::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "abb82fdf26a796c91c42dd718dbff8c0a65838e5", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 9, "deletions": 180, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -578,7 +578,7 @@ struct Visibility\n };\n \n // A method (function belonging to a type)\n-class Method : public InherentImplItem, public TraitImplItem\n+class Method : public InherentImplItem\n {\n   Analysis::NodeMapping mappings;\n \n@@ -700,11 +700,6 @@ class Method : public InherentImplItem, public TraitImplItem\n     return get_mappings ();\n   };\n \n-  Analysis::NodeMapping get_trait_impl_mappings () const override\n-  {\n-    return get_mappings ();\n-  };\n-\n   // Returns whether function has return type - if not, it is void.\n   bool has_function_return_type () const { return return_type != nullptr; }\n \n@@ -753,8 +748,6 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n-  Location get_trait_impl_locus () const final { return get_locus (); }\n-\n   std::unique_ptr<BlockExpr> &get_function_body () { return function_body; }\n   const std::unique_ptr<BlockExpr> &get_function_body () const\n   {\n@@ -768,13 +761,6 @@ class Method : public InherentImplItem, public TraitImplItem\n   {\n     return new Method (*this);\n   }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  Method *clone_trait_impl_item_impl () const override\n-  {\n-    return new Method (*this);\n-  }\n };\n \n // Item that supports visibility - abstract base class\n@@ -1274,7 +1260,7 @@ class UseDeclaration : public VisItem\n class LetStmt;\n \n // Rust function declaration HIR node\n-class Function : public VisItem, public InherentImplItem, public TraitImplItem\n+class Function : public VisItem, public InherentImplItem\n {\n   FunctionQualifiers qualifiers;\n   Identifier function_name;\n@@ -1377,20 +1363,13 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n-  Location get_trait_impl_locus () const final { return get_locus (); }\n-\n   void accept_vis (HIRVisitor &vis) override;\n \n   Analysis::NodeMapping get_impl_mappings () const override\n   {\n     return get_mappings ();\n   };\n \n-  Analysis::NodeMapping get_trait_impl_mappings () const override\n-  {\n-    return get_mappings ();\n-  };\n-\n   std::vector<FunctionParam> &get_function_params () { return function_params; }\n   const std::vector<FunctionParam> &get_function_params () const\n   {\n@@ -1444,23 +1423,10 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n   {\n     return new Function (*this);\n   }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  Function *clone_trait_impl_item_impl () const override\n-  {\n-    return new Function (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  /*virtual Function* clone_statement_impl() const override {\n-      return new Function(*this);\n-  }*/\n };\n \n // Rust type alias (i.e. typedef) HIR node\n-class TypeAlias : public VisItem, public TraitImplItem\n+class TypeAlias : public VisItem, public InherentImplItem\n {\n   Identifier new_type_name;\n \n@@ -1512,11 +1478,8 @@ class TypeAlias : public VisItem, public TraitImplItem\n   {\n     VisItem::operator= (other);\n     new_type_name = other.new_type_name;\n-    // generic_params = other.generic_params;\n     where_clause = other.where_clause;\n     existing_type = other.existing_type->clone_type ();\n-    // visibility = other.visibility->clone_visibility();\n-    // outer_attrs = other.outer_attrs;\n     locus = other.locus;\n \n     generic_params.reserve (other.generic_params.size ());\n@@ -1532,7 +1495,7 @@ class TypeAlias : public VisItem, public TraitImplItem\n \n   Location get_locus () const { return locus; }\n \n-  Location get_trait_impl_locus () const final { return get_locus (); }\n+  Location get_impl_locus () const final { return get_locus (); }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1545,14 +1508,12 @@ class TypeAlias : public VisItem, public TraitImplItem\n     return generic_params;\n   }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   WhereClause &get_where_clause ()\n   {\n     rust_assert (has_where_clause ());\n     return where_clause;\n   }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_type_aliased ()\n   {\n     rust_assert (existing_type != nullptr);\n@@ -1561,7 +1522,7 @@ class TypeAlias : public VisItem, public TraitImplItem\n \n   Identifier get_new_type_name () const { return new_type_name; }\n \n-  Analysis::NodeMapping get_trait_impl_mappings () const override\n+  Analysis::NodeMapping get_impl_mappings () const override\n   {\n     return get_mappings ();\n   };\n@@ -1573,16 +1534,10 @@ class TypeAlias : public VisItem, public TraitImplItem\n \n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n-  TypeAlias *clone_trait_impl_item_impl () const override\n+  TypeAlias *clone_inherent_impl_item_impl () const override\n   {\n     return new TypeAlias (*this);\n   }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  /*virtual TypeAlias* clone_statement_impl() const override {\n-      return new TypeAlias(*this);\n-  }*/\n };\n \n // Rust base struct declaration HIR node - abstract base class\n@@ -2226,28 +2181,13 @@ class Union : public VisItem\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n   Union *clone_item_impl () const override { return new Union (*this); }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  /*virtual Union* clone_statement_impl() const override {\n-      return new Union(*this);\n-  }*/\n };\n \n-/* \"Constant item\" HIR node - used for constant, compile-time expressions\n- * within module scope (like constexpr) */\n-class ConstantItem : public VisItem,\n-\t\t     public InherentImplItem,\n-\t\t     public TraitImplItem\n+class ConstantItem : public VisItem, public InherentImplItem\n {\n-  // either has an identifier or \"_\" - maybe handle in identifier?\n-  // bool identifier_is_underscore;\n-  // if no identifier declared, identifier will be \"_\"\n   Identifier identifier;\n-\n   std::unique_ptr<Type> type;\n   std::unique_ptr<Expr> const_expr;\n-\n   Location locus;\n \n public:\n@@ -2284,16 +2224,14 @@ class ConstantItem : public VisItem,\n   ConstantItem (ConstantItem &&other) = default;\n   ConstantItem &operator= (ConstantItem &&other) = default;\n \n-  /* Returns whether constant item is an \"unnamed\" (wildcard underscore used\n-   * as identifier) constant. */\n+  // Returns whether constant item is an \"unnamed\" (wildcard underscore used\n+  // as identifier) constant.\n   bool is_unnamed () const { return identifier == std::string (\"_\"); }\n \n   Location get_locus () const { return locus; }\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n-  Location get_trait_impl_locus () const final { return get_locus (); }\n-\n   void accept_vis (HIRVisitor &vis) override;\n \n   Type *get_type () { return type.get (); }\n@@ -2307,11 +2245,6 @@ class ConstantItem : public VisItem,\n     return get_mappings ();\n   };\n \n-  Analysis::NodeMapping get_trait_impl_mappings () const override\n-  {\n-    return get_mappings ();\n-  };\n-\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2326,19 +2259,6 @@ class ConstantItem : public VisItem,\n   {\n     return new ConstantItem (*this);\n   }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  ConstantItem *clone_trait_impl_item_impl () const override\n-  {\n-    return new ConstantItem (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  /*virtual ConstantItem* clone_statement_impl() const override {\n-      return new ConstantItem(*this);\n-  }*/\n };\n \n /* Static item HIR node - items within module scope with fixed storage\n@@ -3120,104 +3040,13 @@ class InherentImpl : public Impl\n   {\n     return new InherentImpl (*this);\n   }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  /*virtual InherentImpl* clone_statement_impl() const override {\n-      return new InherentImpl(*this);\n-  }*/\n-};\n-\n-// The \"impl footrait for foo\" impl block declaration HIR node\n-class TraitImpl : public Impl\n-{\n-  bool has_unsafe;\n-  bool has_exclam;\n-  std::unique_ptr<Type> trait_path;\n-\n-  // bool has_impl_items;\n-  std::vector<std::unique_ptr<TraitImplItem> > impl_items;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  // Returns whether trait impl has impl items.\n-  bool has_impl_items () const { return !impl_items.empty (); }\n-\n-  // Mega-constructor\n-  TraitImpl (Analysis::NodeMapping mappings, std::unique_ptr<Type> trait_path,\n-\t     bool is_unsafe, bool has_exclam,\n-\t     std::vector<std::unique_ptr<TraitImplItem> > impl_items,\n-\t     std::vector<std::unique_ptr<GenericParam> > generic_params,\n-\t     std::unique_ptr<Type> trait_type, WhereClause where_clause,\n-\t     Visibility vis, AST::AttrVec inner_attrs, AST::AttrVec outer_attrs,\n-\t     Location locus)\n-    : Impl (std::move (mappings), std::move (generic_params),\n-\t    std::move (trait_type), std::move (where_clause), std::move (vis),\n-\t    std::move (inner_attrs), std::move (outer_attrs), locus),\n-      has_unsafe (is_unsafe), has_exclam (has_exclam),\n-      trait_path (std::move (trait_path)), impl_items (std::move (impl_items))\n-  {}\n-\n-  // TODO: constructors with less params\n-\n-  // Copy constructor with vector clone\n-  TraitImpl (TraitImpl const &other)\n-    : Impl (other), has_unsafe (other.has_unsafe),\n-      has_exclam (other.has_exclam),\n-      trait_path (other.trait_path->clone_type ())\n-  {\n-    impl_items.reserve (other.impl_items.size ());\n-    for (const auto &e : other.impl_items)\n-      impl_items.push_back (e->clone_trait_impl_item ());\n-  }\n-\n-  // Overloaded assignment operator with vector clone\n-  TraitImpl &operator= (TraitImpl const &other)\n-  {\n-    Impl::operator= (other);\n-    trait_path = other.trait_path->clone_type ();\n-    has_unsafe = other.has_unsafe;\n-    has_exclam = other.has_exclam;\n-\n-    impl_items.reserve (other.impl_items.size ());\n-    for (const auto &e : other.impl_items)\n-      impl_items.push_back (e->clone_trait_impl_item ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  TraitImpl (TraitImpl &&other) = default;\n-  TraitImpl &operator= (TraitImpl &&other) = default;\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-  std::vector<std::unique_ptr<TraitImplItem> > &get_impl_items ()\n-  {\n-    return impl_items;\n-  };\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  TraitImpl *clone_item_impl () const override { return new TraitImpl (*this); }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  /*virtual TraitImpl* clone_statement_impl() const override {\n-      return new TraitImpl(*this);\n-  }*/\n };\n \n // Abstract base class for an item used inside an extern block\n class ExternalItem\n {\n-  // bool has_outer_attrs;\n   AST::AttrVec outer_attrs;\n-\n-  // bool has_visibility;\n   Visibility visibility;\n-\n   Identifier item_name;\n   Location locus;\n "}, {"sha": "0be28f39c44b650048021b8ce30e1a0baf58fb12", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -128,7 +128,6 @@ class HIRVisitor\n   virtual void visit (TraitItemType &item) = 0;\n   virtual void visit (Trait &trait) = 0;\n   virtual void visit (InherentImpl &impl) = 0;\n-  virtual void visit (TraitImpl &impl) = 0;\n   virtual void visit (ExternalStaticItem &item) = 0;\n   virtual void visit (ExternalFunctionItem &item) = 0;\n   virtual void visit (ExternBlock &block) = 0;"}, {"sha": "693fdd0a1ac488d4be8a8a1ebb23035bcd2eadcf", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -645,8 +645,6 @@ class TraitItem\n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n };\n \n-/* Abstract base class for items used within an inherent impl block (the impl\n- * name {} one) */\n class InherentImplItem\n {\n protected:\n@@ -671,30 +669,6 @@ class InherentImplItem\n   virtual Location get_impl_locus () const = 0;\n };\n \n-// Abstract base class for items used in a trait impl\n-class TraitImplItem\n-{\n-protected:\n-  virtual TraitImplItem *clone_trait_impl_item_impl () const = 0;\n-\n-public:\n-  virtual ~TraitImplItem (){};\n-\n-  // Unique pointer custom clone function\n-  std::unique_ptr<TraitImplItem> clone_trait_impl_item () const\n-  {\n-    return std::unique_ptr<TraitImplItem> (clone_trait_impl_item_impl ());\n-  }\n-\n-  virtual std::string as_string () const = 0;\n-\n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n-\n-  virtual Analysis::NodeMapping get_trait_impl_mappings () const = 0;\n-\n-  virtual Location get_trait_impl_locus () const = 0;\n-};\n-\n // A crate HIR object - holds all the data for a single compilation unit\n struct Crate\n {"}, {"sha": "670554ec85de9af27ce78ea68404927902dc967d", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -144,7 +144,6 @@ class MarkLiveBase : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitItemType &) override {}\n   virtual void visit (HIR::Trait &) override {}\n   virtual void visit (HIR::InherentImpl &) override {}\n-  virtual void visit (HIR::TraitImpl &) override {}\n \n   virtual void visit (HIR::ExternalStaticItem &) override {}\n   virtual void visit (HIR::ExternalFunctionItem &) override {}"}, {"sha": "cb22926e2f5f3052a0e581fe76931592d697bb51", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -104,13 +104,7 @@ class MarkLive : public MarkLiveBase\n \titem.get ()->accept_vis (*this);\n       }\n   }\n-  void visit (HIR::TraitImpl &impl) override\n-  {\n-    for (auto &&item : impl.get_impl_items ())\n-      {\n-\titem.get ()->accept_vis (*this);\n-      }\n-  }\n+\n   void visit (HIR::LetStmt &stmt) override\n   {\n     if (stmt.has_init_expr ())\n@@ -150,4 +144,4 @@ class MarkLive : public MarkLiveBase\n } // namespace Analysis\n } // namespace Rust\n \n-#endif\n\\ No newline at end of file\n+#endif"}, {"sha": "e16273e7e4fa39322813d4cba0a4d883599091f9", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -147,7 +147,6 @@ class ConstFoldBase : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitItemType &) override {}\n   virtual void visit (HIR::Trait &) override {}\n   virtual void visit (HIR::InherentImpl &) override {}\n-  virtual void visit (HIR::TraitImpl &) override {}\n \n   virtual void visit (HIR::ExternalStaticItem &) override {}\n   virtual void visit (HIR::ExternalFunctionItem &) override {}"}, {"sha": "eaa484e751dd95f678f9bb4ec47c8d745f742b81", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -146,7 +146,6 @@ class TypeCheckBase : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitItemType &) override {}\n   virtual void visit (HIR::Trait &) override {}\n   virtual void visit (HIR::InherentImpl &) override {}\n-  virtual void visit (HIR::TraitImpl &) override {}\n \n   virtual void visit (HIR::ExternalStaticItem &) override {}\n   virtual void visit (HIR::ExternalFunctionItem &) override {}"}, {"sha": "2f54d0cbe60301ea60165ab778652f39e636c6b5", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -41,14 +41,6 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n     item->accept_vis (resolver);\n   }\n \n-  static void\n-  Resolve (HIR::TraitImplItem *item, TyTy::BaseType *self,\n-\t   std::vector<TyTy::SubstitutionParamMapping> substitutions)\n-  {\n-    TypeCheckTopLevelImplItem resolver (self, substitutions);\n-    item->accept_vis (resolver);\n-  }\n-\n   void visit (HIR::ConstantItem &constant) override\n   {\n     TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n@@ -227,12 +219,6 @@ class TypeCheckImplItem : public TypeCheckBase\n     item->accept_vis (resolver);\n   }\n \n-  static void Resolve (HIR::TraitImplItem *item, TyTy::BaseType *self)\n-  {\n-    TypeCheckImplItem resolver (self);\n-    item->accept_vis (resolver);\n-  }\n-\n   void visit (HIR::Function &function) override\n   {\n     TyTy::BaseType *lookup;"}, {"sha": "1205dceceee42660e91f7b7c84988df294eaa127", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -55,21 +55,6 @@ class TypeCheckItem : public TypeCheckBase\n       TypeCheckImplItem::Resolve (impl_item.get (), self);\n   }\n \n-  void visit (HIR::TraitImpl &impl_block) override\n-  {\n-    TyTy::BaseType *self = nullptr;\n-    if (!context->lookup_type (\n-\t  impl_block.get_type ()->get_mappings ().get_hirid (), &self))\n-      {\n-\trust_error_at (impl_block.get_locus (),\n-\t\t       \"failed to resolve Self for TraitImpl\");\n-\treturn;\n-      }\n-\n-    for (auto &impl_item : impl_block.get_impl_items ())\n-      TypeCheckImplItem::Resolve (impl_item.get (), self);\n-  }\n-\n   void visit (HIR::Function &function) override\n   {\n     TyTy::BaseType *lookup;"}, {"sha": "e01b46fc5ec1892dc47ab7556ab1890d3bce3875", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44481c1c2bdf7d160928dde30f48fdc54e75bf38/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=44481c1c2bdf7d160928dde30f48fdc54e75bf38", "patch": "@@ -273,47 +273,6 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t\t\t  substitutions);\n   }\n \n-  void visit (HIR::TraitImpl &impl_block) override\n-  {\n-    std::vector<TyTy::SubstitutionParamMapping> substitutions;\n-    if (impl_block.has_generics ())\n-      {\n-\tfor (auto &generic_param : impl_block.get_generic_params ())\n-\t  {\n-\t    switch (generic_param.get ()->get_kind ())\n-\t      {\n-\t      case HIR::GenericParam::GenericKind::LIFETIME:\n-\t\t// Skipping Lifetime completely until better handling.\n-\t\tbreak;\n-\n-\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n-\t\t  auto param_type\n-\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t\t  context->insert_type (generic_param->get_mappings (),\n-\t\t\t\t\tparam_type);\n-\n-\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n-\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n-\t\t    param_type));\n-\t\t}\n-\t\tbreak;\n-\t      }\n-\t  }\n-      }\n-\n-    // TODO\n-    // resolve the trait and check all items implemented\n-\n-    auto self\n-      = TypeCheckType::Resolve (impl_block.get_type ().get (), &substitutions);\n-    if (self == nullptr || self->get_kind () == TyTy::TypeKind::ERROR)\n-      return;\n-\n-    for (auto &impl_item : impl_block.get_impl_items ())\n-      TypeCheckTopLevelImplItem::Resolve (impl_item.get (), self,\n-\t\t\t\t\t  substitutions);\n-  }\n-\n private:\n   TypeCheckTopLevel () : TypeCheckBase () {}\n };"}]}