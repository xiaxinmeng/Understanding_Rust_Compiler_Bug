{"sha": "29a1da1c303b0bca58faf0963ae250eb460c66ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhMWRhMWMzMDNiMGJjYTU4ZmFmMDk2M2FlMjUwZWI0NjBjNjZiYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-05-23T20:45:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-05-23T20:45:44Z"}, "message": "re PR c++/20173 (gcc accepts invalid partial specialization attempt of member function)\n\n\tPR c++/20173\n\t* pt.c (determine_specialization): Disallow partial\n\tspecializations of templates.\n\tPR c++/20173\n\t* g++.dg/template/error21.C: New test.\n\nFrom-SVN: r114023", "tree": {"sha": "a996ed17904d7204527c53eed8e2687ac420baa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a996ed17904d7204527c53eed8e2687ac420baa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29a1da1c303b0bca58faf0963ae250eb460c66ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a1da1c303b0bca58faf0963ae250eb460c66ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a1da1c303b0bca58faf0963ae250eb460c66ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a1da1c303b0bca58faf0963ae250eb460c66ba/comments", "author": null, "committer": null, "parents": [{"sha": "b2a203c8e07fd3f8bb81f15780d6be9e6333f708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a203c8e07fd3f8bb81f15780d6be9e6333f708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a203c8e07fd3f8bb81f15780d6be9e6333f708"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "f6bcf57be248945e8f54dc8910b37ef364e34f41", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1da1c303b0bca58faf0963ae250eb460c66ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1da1c303b0bca58faf0963ae250eb460c66ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=29a1da1c303b0bca58faf0963ae250eb460c66ba", "patch": "@@ -1,3 +1,9 @@\n+2006-05-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/20173\n+\t* pt.c (determine_specialization): Disallow partial\n+\tspecializations of templates.\n+\n 2006-05-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/27716"}, {"sha": "ca576764638e3c26e4959f8bd11ed75eca7389b0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1da1c303b0bca58faf0963ae250eb460c66ba/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1da1c303b0bca58faf0963ae250eb460c66ba/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=29a1da1c303b0bca58faf0963ae250eb460c66ba", "patch": "@@ -150,7 +150,6 @@ static tree get_template_base (tree, tree, tree, tree);\n static tree try_class_unification (tree, tree, tree, tree);\n static int coerce_template_template_parms (tree, tree, tsubst_flags_t,\n \t\t\t\t\t   tree, tree);\n-static tree determine_specialization (tree, tree, tree *, int, int);\n static int template_args_equal (tree, tree);\n static void tsubst_default_arguments (tree);\n static tree for_each_template_parm_r (tree *, int *, void *);\n@@ -1321,6 +1320,11 @@ print_candidates (tree fns)\n    template classes that appeared in the name of the function. See\n    check_explicit_specialization for a more accurate description.\n \n+   TSK indicates what kind of template declaration (if any) is being\n+   declared.  TSK_TEMPLATE indicates that the declaration given by\n+   DECL, though a FUNCTION_DECL, has template parameters, and is\n+   therefore a template function.\n+\n    The template args (those explicitly specified and those deduced)\n    are output in a newly created vector *TARGS_OUT.\n \n@@ -1332,7 +1336,8 @@ determine_specialization (tree template_id,\n \t\t\t  tree decl,\n \t\t\t  tree* targs_out,\n \t\t\t  int need_member_template,\n-\t\t\t  int template_count)\n+\t\t\t  int template_count,\n+\t\t\t  tmpl_spec_kind tsk)\n {\n   tree fns;\n   tree targs;\n@@ -1450,6 +1455,18 @@ determine_specialization (tree template_id,\n \t\t\t\t      (current_template_parms))))\n \t    continue;\n \n+\t  /* Function templates cannot be specializations; there are\n+\t     no partial specializations of functions.  Therefore, if\n+\t     the type of DECL does not match FN, there is no\n+\t     match.  */\n+\t  if (tsk == tsk_template)\n+\t    {\n+\t      if (compparms (TYPE_ARG_TYPES (TREE_TYPE (fn)),\n+\t\t\t     decl_arg_types))\n+\t\tcandidates = tree_cons (NULL_TREE, fn, candidates);\n+\t      continue;\n+\t    }\n+\n \t  /* See whether this function might be a specialization of this\n \t     template.  */\n \t  targs = get_bindings (fn, decl, explicit_targs, /*check_ret=*/true);\n@@ -1576,10 +1593,14 @@ determine_specialization (tree template_id,\n   /* We have one, and exactly one, match.  */\n   if (candidates)\n     {\n+      tree fn = TREE_VALUE (candidates);\n+      /* DECL is a re-declaration of a template function.  */\n+      if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\treturn fn;\n       /* It was a specialization of an ordinary member function in a\n \t template class.  */\n-      *targs_out = copy_node (DECL_TI_ARGS (TREE_VALUE (candidates)));\n-      return DECL_TI_TEMPLATE (TREE_VALUE (candidates));\n+      *targs_out = copy_node (DECL_TI_ARGS (fn));\n+      return DECL_TI_TEMPLATE (fn);\n     }\n \n   /* It was a specialization of a template.  */\n@@ -2042,7 +2063,8 @@ check_explicit_specialization (tree declarator,\n       tmpl = determine_specialization (declarator, decl,\n \t\t\t\t       &targs,\n \t\t\t\t       member_specialization,\n-\t\t\t\t       template_count);\n+\t\t\t\t       template_count,\n+\t\t\t\t       tsk);\n \n       if (!tmpl || tmpl == error_mark_node)\n \t/* We couldn't figure out what this declaration was\n@@ -2088,8 +2110,8 @@ check_explicit_specialization (tree declarator,\n \t    revert_static_member_fn (decl);\n \n \t  /* If this is a specialization of a member template of a\n-\t     template class.  In we want to return the TEMPLATE_DECL,\n-\t     not the specialization of it.  */\n+\t     template class, we want to return the TEMPLATE_DECL, not\n+\t     the specialization of it.  */\n \t  if (tsk == tsk_template)\n \t    {\n \t      SET_DECL_TEMPLATE_SPECIALIZATION (tmpl);\n@@ -5163,7 +5185,8 @@ tsubst_friend_function (tree decl, tree args)\n       tmpl = determine_specialization (template_id, new_friend,\n \t\t\t\t       &new_args,\n \t\t\t\t       /*need_member_template=*/0,\n-\t\t\t\t       TREE_VEC_LENGTH (args));\n+\t\t\t\t       TREE_VEC_LENGTH (args),\n+\t\t\t\t       tsk_none);\n       return instantiate_template (tmpl, new_args, tf_error);\n     }\n "}, {"sha": "eea1b80f7deab8faf874afcaaf9f7b88c73c4be2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1da1c303b0bca58faf0963ae250eb460c66ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1da1c303b0bca58faf0963ae250eb460c66ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29a1da1c303b0bca58faf0963ae250eb460c66ba", "patch": "@@ -1,3 +1,8 @@\n+2006-05-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/20173\n+\t* g++.dg/template/error21.C: New test.\n+\n 2006-05-23  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR target/27696"}, {"sha": "c5f04f03e856b06d053b5cec5e0ad76fd477bdb5", "filename": "gcc/testsuite/g++.dg/template/error21.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a1da1c303b0bca58faf0963ae250eb460c66ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a1da1c303b0bca58faf0963ae250eb460c66ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror21.C?ref=29a1da1c303b0bca58faf0963ae250eb460c66ba", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/20173\n+\n+template<typename AT>\n+struct A{\n+  template<typename T>\n+  void function(T){}\n+};\n+\n+template<>\n+template<typename T>\n+void A<int>::function(T){}\n+\n+template<>\n+template<typename T>\n+void A<double>::function(T*){} // { dg-error \"match\" }"}]}