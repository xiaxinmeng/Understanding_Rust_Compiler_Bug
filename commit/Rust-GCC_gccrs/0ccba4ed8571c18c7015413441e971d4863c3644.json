{"sha": "0ccba4ed8571c18c7015413441e971d4863c3644", "node_id": "C_kwDOANBUbNoAKDBjY2JhNGVkODU3MWMxOGM3MDE1NDEzNDQxZTk3MWQ0ODYzYzM2NDQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-27T10:48:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-27T10:48:48Z"}, "message": "openmp: Add support for enter clause on declare target\n\nOpenMP 5.1 and earlier had 2 different uses of to clause, one for target\nupdate construct with one semantics, and one for declare target directive\nwith a different semantics.\nUnder the hood we were using OMP_CLAUSE_TO_DECLARE to represent the latter.\nOpenMP 5.2 renamed the declare target clause to to enter, the old one is\nkept as a deprecated alias.\n\nAs we are far from having full OpenMP 5.2 support, this patch adds support\nfor the enter clause (and renames OMP_CLAUSE_TO_DECLARE to OMP_CLAUSE_ENTER\nwith a flag to tell the spelling of the clause for better diagnostics),\nbut doesn't deprecate the to clause on declare target just yet (that\nshould be done as one of the last steps in 5.2 support).\n\n2022-05-27  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* tree-core.h (enum omp_clause_code): Rename OMP_CLAUSE_TO_DECLARE\n\tto OMP_CLAUSE_ENTER.\n\t* tree.h (OMP_CLAUSE_ENTER_TO): Define.\n\t* tree.cc (omp_clause_num_ops, omp_clause_code_name): Rename\n\tOMP_CLAUSE_TO_DECLARE to OMP_CLAUSE_ENTER.\n\t* tree-pretty-print.cc (dump_omp_clause): Handle OMP_CLAUSE_ENTER\n\tinstead of OMP_CLAUSE_TO_DECLARE, if OMP_CLAUSE_ENTER_TO, print\n\t\"to\" instead of \"enter\".\n\t* tree-nested.cc (convert_nonlocal_omp_clauses,\n\tconvert_local_omp_clauses): Handle OMP_CLAUSE_ENTER instead of\n\tOMP_CLAUSE_TO_DECLARE.\ngcc/c-family/\n\t* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_ENTER.\ngcc/c/\n\t* c-parser.cc (c_parser_omp_clause_name): Parse enter clause.\n\t(c_parser_omp_all_clauses): For to clause on declare target, use\n\tOMP_CLAUSE_ENTER clause with OMP_CLAUSE_ENTER_TO instead of\n\tOMP_CLAUSE_TO_DECLARE clause.  Handle PRAGMA_OMP_CLAUSE_ENTER.\n\t(OMP_DECLARE_TARGET_CLAUSE_MASK): Add enter clause.\n\t(c_parser_omp_declare_target): Use OMP_CLAUSE_ENTER instead of\n\tOMP_CLAUSE_TO_DECLARE.\n\t* c-typeck.cc (c_finish_omp_clauses): Handle OMP_CLAUSE_ENTER instead\n\tof OMP_CLAUSE_TO_DECLARE, to OMP_CLAUSE_ENTER_TO use \"to\" as clause\n\tname in diagnostics instead of\n\tomp_clause_code_name[OMP_CLAUSE_CODE (c)].\ngcc/cp/\n\t* parser.cc (cp_parser_omp_clause_name): Parse enter clause.\n\t(cp_parser_omp_all_clauses): For to clause on declare target, use\n\tOMP_CLAUSE_ENTER clause with OMP_CLAUSE_ENTER_TO instead of\n\tOMP_CLAUSE_TO_DECLARE clause.  Handle PRAGMA_OMP_CLAUSE_ENTER.\n\t(OMP_DECLARE_TARGET_CLAUSE_MASK): Add enter clause.\n\t(cp_parser_omp_declare_target): Use OMP_CLAUSE_ENTER instead of\n\tOMP_CLAUSE_TO_DECLARE.\n\t* semantics.cc (finish_omp_clauses): Handle OMP_CLAUSE_ENTER instead\n\tof OMP_CLAUSE_TO_DECLARE, to OMP_CLAUSE_ENTER_TO use \"to\" as clause\n\tname in diagnostics instead of\n\tomp_clause_code_name[OMP_CLAUSE_CODE (c)].\ngcc/testsuite/\n\t* c-c++-common/gomp/clauses-3.c: Add tests with enter clause instead\n\tof to or modify some existing to clauses to enter.\n\t* c-c++-common/gomp/declare-target-1.c: Likewise.\n\t* c-c++-common/gomp/declare-target-2.c: Likewise.\n\t* c-c++-common/gomp/declare-target-3.c: Likewise.\n\t* g++.dg/gomp/attrs-9.C: Likewise.\n\t* g++.dg/gomp/declare-target-1.C: Likewise.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/target-40.c: Modify some existing to\n\tclauses to enter.\n\t* testsuite/libgomp.c/target-41.c: Likewise.", "tree": {"sha": "843f46ea0c2b3fb1552486dc157b140ce137525c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843f46ea0c2b3fb1552486dc157b140ce137525c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ccba4ed8571c18c7015413441e971d4863c3644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ccba4ed8571c18c7015413441e971d4863c3644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ccba4ed8571c18c7015413441e971d4863c3644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ccba4ed8571c18c7015413441e971d4863c3644/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c482b08076bb299742883c4ffd65b31e33200c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c482b08076bb299742883c4ffd65b31e33200c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c482b08076bb299742883c4ffd65b31e33200c"}], "stats": {"total": 146, "additions": 102, "deletions": 44}, "files": [{"sha": "d5d4fe3490c2874f9ec02db74ddc8a8c8a77a5ce", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -90,7 +90,7 @@ enum pragma_kind {\n \n \n /* All clauses defined by OpenACC 2.0, and OpenMP 2.5, 3.0, 3.1, 4.0, 4.5, 5.0,\n-   and 5.1.  Used internally by both C and C++ parsers.  */\n+   5.1 and 5.2.  Used internally by both C and C++ parsers.  */\n enum pragma_omp_clause {\n   PRAGMA_OMP_CLAUSE_NONE = 0,\n \n@@ -108,6 +108,7 @@ enum pragma_omp_clause {\n   PRAGMA_OMP_CLAUSE_DEVICE,\n   PRAGMA_OMP_CLAUSE_DEVICE_TYPE,\n   PRAGMA_OMP_CLAUSE_DIST_SCHEDULE,\n+  PRAGMA_OMP_CLAUSE_ENTER,\n   PRAGMA_OMP_CLAUSE_FILTER,\n   PRAGMA_OMP_CLAUSE_FINAL,\n   PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,"}, {"sha": "678d91415a9379e5f0e325b49162daf87564002d", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -12771,6 +12771,10 @@ c_parser_omp_clause_name (c_parser *parser)\n \t  else if (!strcmp (\"dist_schedule\", p))\n \t    result = PRAGMA_OMP_CLAUSE_DIST_SCHEDULE;\n \t  break;\n+\tcase 'e':\n+\t  if (!strcmp (\"enter\", p))\n+\t    result = PRAGMA_OMP_CLAUSE_ENTER;\n+\t  break;\n \tcase 'f':\n \t  if (!strcmp (\"filter\", p))\n \t    result = PRAGMA_OMP_CLAUSE_FILTER;\n@@ -17055,9 +17059,13 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_TO:\n \t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_LINK)) != 0)\n-\t    clauses\n-\t      = c_parser_omp_var_list_parens (parser, OMP_CLAUSE_TO_DECLARE,\n-\t\t\t\t\t      clauses);\n+\t    {\n+\t      tree nl = c_parser_omp_var_list_parens (parser, OMP_CLAUSE_ENTER,\n+\t\t\t\t\t\t      clauses);\n+\t      for (tree c = nl; c != clauses; c = OMP_CLAUSE_CHAIN (c))\n+\t\tOMP_CLAUSE_ENTER_TO (c) = 1;\n+\t      clauses = nl;\n+\t    }\n \t  else\n \t    clauses = c_parser_omp_clause_to (parser, clauses);\n \t  c_name = \"to\";\n@@ -17158,6 +17166,12 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t       clauses);\n \t  c_name = \"simd\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_ENTER:\n+\t  clauses\n+\t    = c_parser_omp_var_list_parens (parser, OMP_CLAUSE_ENTER,\n+\t\t\t\t\t    clauses);\n+\t  c_name = \"enter\";\n+\t  break;\n \tdefault:\n \t  c_parser_error (parser, \"expected %<#pragma omp%> clause\");\n \t  goto saw_error;\n@@ -22006,6 +22020,7 @@ c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n \n #define OMP_DECLARE_TARGET_CLAUSE_MASK\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_TO)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ENTER)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_LINK)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEVICE_TYPE))\n \n@@ -22020,7 +22035,7 @@ c_parser_omp_declare_target (c_parser *parser)\n \t\t\t\t\t\"#pragma omp declare target\");\n   else if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n     {\n-      clauses = c_parser_omp_var_list_parens (parser, OMP_CLAUSE_TO_DECLARE,\n+      clauses = c_parser_omp_var_list_parens (parser, OMP_CLAUSE_ENTER,\n \t\t\t\t\t      clauses);\n       clauses = c_finish_omp_clauses (clauses, C_ORT_OMP);\n       c_parser_skip_to_pragma_eol (parser);"}, {"sha": "21a93c3665c070707b1fa41ae90b1626c2b6872c", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -15248,37 +15248,40 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  break;\n \n-\tcase OMP_CLAUSE_TO_DECLARE:\n+\tcase OMP_CLAUSE_ENTER:\n \tcase OMP_CLAUSE_LINK:\n \t  t = OMP_CLAUSE_DECL (c);\n+\t  const char *cname;\n+\t  cname = omp_clause_code_name[OMP_CLAUSE_CODE (c)];\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ENTER\n+\t      && OMP_CLAUSE_ENTER_TO (c))\n+\t    cname = \"to\";\n \t  if (TREE_CODE (t) == FUNCTION_DECL\n-\t      && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TO_DECLARE)\n+\t      && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ENTER)\n \t    ;\n \t  else if (!VAR_P (t))\n \t    {\n-\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TO_DECLARE)\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ENTER)\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t  \"%qE is neither a variable nor a function name in \"\n-\t\t\t  \"clause %qs\", t,\n-\t\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\t  \"clause %qs\", t, cname);\n \t      else\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t  \"%qE is not a variable in clause %qs\", t,\n-\t\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\t  \"%qE is not a variable in clause %qs\", t, cname);\n \t      remove = true;\n \t    }\n \t  else if (DECL_THREAD_LOCAL_P (t))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD is threadprivate variable in %qs clause\", t,\n-\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\tcname);\n \t      remove = true;\n \t    }\n \t  else if (!lang_hooks.types.omp_mappable_type (TREE_TYPE (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD does not have a mappable type in %qs clause\", t,\n-\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\tcname);\n \t      remove = true;\n \t    }\n \t  if (remove)"}, {"sha": "4b9859543eddc8e3a852fbce626a1e9d50ed5225", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -36498,6 +36498,10 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t  else if (!strcmp (\"dist_schedule\", p))\n \t    result = PRAGMA_OMP_CLAUSE_DIST_SCHEDULE;\n \t  break;\n+\tcase 'e':\n+\t  if (!strcmp (\"enter\", p))\n+\t    result = PRAGMA_OMP_CLAUSE_ENTER;\n+\t  break;\n \tcase 'f':\n \t  if (!strcmp (\"filter\", p))\n \t    result = PRAGMA_OMP_CLAUSE_FILTER;\n@@ -40418,8 +40422,13 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_TO:\n \t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_LINK)) != 0)\n-\t    clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_TO_DECLARE,\n-\t\t\t\t\t      clauses);\n+\t    {\n+\t      tree nl = cp_parser_omp_var_list (parser, OMP_CLAUSE_ENTER,\n+\t\t\t\t\t\tclauses);\n+\t      for (tree c = nl; c != clauses; c = OMP_CLAUSE_CHAIN (c))\n+\t\tOMP_CLAUSE_ENTER_TO (c) = 1;\n+\t      clauses = nl;\n+\t    }\n \t  else\n \t    clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_TO, clauses,\n \t\t\t\t\t      true);\n@@ -40526,6 +40535,11 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\tclauses, token->location);\n \t  c_name = \"simd\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_ENTER:\n+\t  clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_ENTER,\n+\t\t\t\t\t    clauses);\n+\t  c_name = \"enter\";\n+\t  break;\n \tdefault:\n \t  cp_parser_error (parser, \"expected %<#pragma omp%> clause\");\n \t  goto saw_error;\n@@ -46037,6 +46051,7 @@ handle_omp_declare_target_clause (tree c, tree t, int device_type)\n \n #define OMP_DECLARE_TARGET_CLAUSE_MASK\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_TO)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ENTER)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_LINK)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEVICE_TYPE))\n \n@@ -46056,7 +46071,7 @@ cp_parser_omp_declare_target (cp_parser *parser, cp_token *pragma_tok)\n \t\t\t\t   \"#pragma omp declare target\", pragma_tok);\n   else if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n     {\n-      clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_TO_DECLARE,\n+      clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_ENTER,\n \t\t\t\t\tclauses);\n       clauses = finish_omp_clauses (clauses, C_ORT_OMP);\n       cp_parser_require_pragma_eol (parser, pragma_tok);"}, {"sha": "cdc91a38e2579c1b3c0e63fb1d2bede7495889ce", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -8341,48 +8341,50 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  break;\n \n-\tcase OMP_CLAUSE_TO_DECLARE:\n+\tcase OMP_CLAUSE_ENTER:\n \tcase OMP_CLAUSE_LINK:\n \t  t = OMP_CLAUSE_DECL (c);\n+\t  const char *cname;\n+\t  cname = omp_clause_code_name[OMP_CLAUSE_CODE (c)];\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ENTER\n+\t      && OMP_CLAUSE_ENTER_TO (c))\n+\t    cname = \"to\";\n \t  if (TREE_CODE (t) == FUNCTION_DECL\n-\t      && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TO_DECLARE)\n+\t      && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ENTER)\n \t    ;\n \t  else if (!VAR_P (t))\n \t    {\n-\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TO_DECLARE)\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ENTER)\n \t\t{\n \t\t  if (TREE_CODE (t) == TEMPLATE_ID_EXPR)\n \t\t    error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t      \"template %qE in clause %qs\", t,\n-\t\t\t      omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\t      \"template %qE in clause %qs\", t, cname);\n \t\t  else if (really_overloaded_fn (t))\n \t\t    error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t      \"overloaded function name %qE in clause %qs\", t,\n-\t\t\t      omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\t      cname);\n \t\t  else\n \t\t    error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t      \"%qE is neither a variable nor a function name \"\n-\t\t\t      \"in clause %qs\", t,\n-\t\t\t      omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\t      \"in clause %qs\", t, cname);\n \t\t}\n \t      else\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t  \"%qE is not a variable in clause %qs\", t,\n-\t\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\t  \"%qE is not a variable in clause %qs\", t, cname);\n \t      remove = true;\n \t    }\n \t  else if (DECL_THREAD_LOCAL_P (t))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD is threadprivate variable in %qs clause\", t,\n-\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\tcname);\n \t      remove = true;\n \t    }\n \t  else if (!cp_omp_mappable_type (TREE_TYPE (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD does not have a mappable type in %qs clause\", t,\n-\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\tcname);\n \t      cp_omp_emit_unmappable_type_notes (TREE_TYPE (t));\n \t      remove = true;\n \t    }"}, {"sha": "5618a9138ce7dbbb16b231d7d053bce43d565c7e", "filename": "gcc/testsuite/c-c++-common/gomp/clauses-3.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-3.c?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -3,6 +3,8 @@ struct S { int *s; char u; struct T v; long x; };\n \n void bar (int *);\n #pragma omp declare target to (bar)\n+void baz (int *);\n+#pragma omp declare target enter (baz)\n \n int\n main ()\n@@ -18,6 +20,6 @@ main ()\n   #pragma omp target map (s.s[0]) map (s.v.b[:3])\n   ;\n   #pragma omp target map (s.s[0]) map (s.v.b[:3])\n-  bar (s.s);\n+  baz (s.s);\n   return 0;\n }"}, {"sha": "79ad556a9c7320fb104300a5d1e9132ca85bfb04", "filename": "gcc/testsuite/c-c++-common/gomp/declare-target-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-1.c?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -10,4 +10,4 @@ long c;\n #pragma omp end declare target\n \n #pragma omp declare target (bar, a)\n-#pragma omp declare target to (b) link (d) to (foo)\n+#pragma omp declare target to (b) link (d) enter (foo)"}, {"sha": "44fb14daf87ec4233d379f2199318c80c104c3d8", "filename": "gcc/testsuite/c-c++-common/gomp/declare-target-2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-2.c?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -7,6 +7,7 @@ extern int a;\n #pragma omp end declare target\n int b;\n #pragma omp declare target to (b) link (b)\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */\n+#pragma omp declare target enter (b) link (b)\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */\n int c;\n #pragma omp declare target (c)\n #pragma omp declare target link (c)\t\t/* { dg-error \"specified both in declare target\" } */\n@@ -32,9 +33,13 @@ int m;\n #pragma omp declare target to (k)\n #pragma omp declare target (k)\n #pragma omp declare target to (k, m) link (l)\n+#pragma omp declare target enter (k, m) link (l)\n #pragma omp declare target link (l)\n int n, o, s, t;\n #pragma omp declare target to (n) to (n)\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */\n+#pragma omp declare target enter (n) enter (n)\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */\n+#pragma omp declare target enter (n) to (n)\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */\n+#pragma omp declare target to (n) enter (n)\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */\n #pragma omp declare target link (o, o)\t\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */\n #pragma omp declare target (s, t, s)\t\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */\n int p, q, r;"}, {"sha": "e76e7a3c5c8519019df2d3d7a1d511a3dca2adb5", "filename": "gcc/testsuite/c-c++-common/gomp/declare-target-3.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-3.c?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -15,10 +15,13 @@ extern int f[];\n #pragma omp declare target to (f) /* { dg-error \"'f' does not have a mappable type in 'to' clause\" } */\n extern int g[];\n #pragma omp declare target to (g) /* { dg-error \"'g' does not have a mappable type in 'to' clause\" } */\n+extern int g2[];\n+#pragma omp declare target enter (g2) /* { dg-error \"'g2' does not have a mappable type in 'enter' clause\" } */\n int g[3];\n extern int h[];\n int h[3];\n #pragma omp declare target to (h)\n+#pragma omp declare target enter (h)\n \n int i[] = { 1, 2, 3 };\n int j[] = { 1, 2, 3 };"}, {"sha": "19a3b0a83c854545020aa67ead982d063dbc3302", "filename": "gcc/testsuite/g++.dg/gomp/attrs-9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-9.C?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -6,8 +6,8 @@ int a;\n [[omp::directive (declare target (a))]];\n int t;\n [[omp::sequence (omp::directive (threadprivate (t)))]];\n-int b, c;\n-[[omp::directive (declare target, to (b), link (c))]];\n+int b, c, e;\n+[[omp::directive (declare target, to (b), link (c), enter (e))]];\n [[omp::directive (declare target)]];\n [[omp::directive (declare target)]];\n int d;"}, {"sha": "7b270cdddb70654045a9a523e88428fdef3cfab5", "filename": "gcc/testsuite/g++.dg/gomp/declare-target-1.C", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-target-1.C?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -16,6 +16,7 @@ void f5 (T);\n #pragma omp declare target (f3)\n #pragma omp declare target to (f4)\t// { dg-error \"overloaded function name .f4. in clause .to.\" }\n #pragma omp declare target to (f5<int>)\t// { dg-error \"template .f5<int>. in clause .to.\" }\n+#pragma omp declare target enter (f5<short>) // { dg-error \"template .f5<short int>. in clause .enter.\" }\n template <int N>\n void f6 (int)\n {\n@@ -35,3 +36,7 @@ int v;\n #pragma omp declare target (N::M::f7)\n #pragma omp declare target to (::N::f8)\n #pragma omp declare target to (::f9) to (::v)\n+#pragma omp declare target to (::f9, ::v)\n+#pragma omp declare target enter (::N::f8)\n+#pragma omp declare target enter (::f9) enter (::v)\n+#pragma omp declare target enter (::f9, ::v)"}, {"sha": "ab5fa01e5cb5fb56c1964b93b014ed55a4aa704a", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -302,9 +302,9 @@ enum omp_clause_code {\n   /* OpenMP clause: uniform (argument-list).  */\n   OMP_CLAUSE_UNIFORM,\n \n-  /* OpenMP clause: to (extended-list).\n-     Only when it appears in declare target.  */\n-  OMP_CLAUSE_TO_DECLARE,\n+  /* OpenMP clause: enter (extended-list).\n+     to is a deprecated alias when it appears in declare target.  */\n+  OMP_CLAUSE_ENTER,\n \n   /* OpenMP clause: link (variable-list).  */\n   OMP_CLAUSE_LINK,"}, {"sha": "995280904b068a501dc3222f3707fd1b893edf48", "filename": "gcc/tree-nested.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree-nested.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree-nested.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.cc?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -1335,7 +1335,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n \tcase OMP_CLAUSE_COPYPRIVATE:\n \tcase OMP_CLAUSE_SHARED:\n-\tcase OMP_CLAUSE_TO_DECLARE:\n+\tcase OMP_CLAUSE_ENTER:\n \tcase OMP_CLAUSE_LINK:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n@@ -2120,7 +2120,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n \tcase OMP_CLAUSE_COPYPRIVATE:\n \tcase OMP_CLAUSE_SHARED:\n-\tcase OMP_CLAUSE_TO_DECLARE:\n+\tcase OMP_CLAUSE_ENTER:\n \tcase OMP_CLAUSE_LINK:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_ADDR:"}, {"sha": "6acd394a0790ad2ad989f195a3288f0f0a8cc489", "filename": "gcc/tree-pretty-print.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.cc?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -517,8 +517,11 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n     case OMP_CLAUSE__SCANTEMP_:\n       name = \"_scantemp_\";\n       goto print_remap;\n-    case OMP_CLAUSE_TO_DECLARE:\n-      name = \"to\";\n+    case OMP_CLAUSE_ENTER:\n+      if (OMP_CLAUSE_ENTER_TO (clause))\n+\tname = \"to\";\n+      else\n+\tname = \"enter\";\n       goto print_remap;\n     case OMP_CLAUSE_LINK:\n       name = \"link\";"}, {"sha": "2bfb67489c611efcb23ca29eaa348a7aaf6b585c", "filename": "gcc/tree.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -280,7 +280,7 @@ unsigned const char omp_clause_num_ops[] =\n   1, /* OMP_CLAUSE_DEPEND  */\n   1, /* OMP_CLAUSE_NONTEMPORAL  */\n   1, /* OMP_CLAUSE_UNIFORM  */\n-  1, /* OMP_CLAUSE_TO_DECLARE  */\n+  1, /* OMP_CLAUSE_ENTER  */\n   1, /* OMP_CLAUSE_LINK  */\n   1, /* OMP_CLAUSE_DETACH  */\n   1, /* OMP_CLAUSE_USE_DEVICE_PTR  */\n@@ -370,7 +370,7 @@ const char * const omp_clause_code_name[] =\n   \"depend\",\n   \"nontemporal\",\n   \"uniform\",\n-  \"to\",\n+  \"enter\",\n   \"link\",\n   \"detach\",\n   \"use_device_ptr\","}, {"sha": "f84958933d51144bb6ce7cc41eca5f7f06814550", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -1925,6 +1925,10 @@ class auto_suppress_location_wrappers\n #define OMP_CLAUSE_BIND_KIND(NODE) \\\n   (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_BIND)->omp_clause.subcode.bind_kind)\n \n+/* True if ENTER clause is spelled as TO.  */\n+#define OMP_CLAUSE_ENTER_TO(NODE) \\\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_ENTER)->base.public_flag)\n+\n #define OMP_CLAUSE_TILE_LIST(NODE) \\\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_TILE), 0)\n #define OMP_CLAUSE_TILE_ITERVAR(NODE) \\"}, {"sha": "b46606930556fff174b5e89b48cfa795e0fb4ded", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-40.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-40.c?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -18,7 +18,7 @@ int a = 1;\n int *b = &a;\n int **c = &b;\n fnp2 f5 (void) { f3 (); return f4; }\n-#pragma omp declare target to (c)\n+#pragma omp declare target enter (c)\n \n int\n main ()"}, {"sha": "9b49d9a75a65e8ed73ed9613a4661da821a098a8", "filename": "libgomp/testsuite/libgomp.c/target-41.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccba4ed8571c18c7015413441e971d4863c3644/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccba4ed8571c18c7015413441e971d4863c3644/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-41.c?ref=0ccba4ed8571c18c7015413441e971d4863c3644", "patch": "@@ -11,7 +11,7 @@ foo (void)\n   v++;\n }\n \n-#pragma omp declare target to (v, foo)\n+#pragma omp declare target enter (v, foo)\n \n int\n main ()"}]}