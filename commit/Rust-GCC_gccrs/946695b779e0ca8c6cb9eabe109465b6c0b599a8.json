{"sha": "946695b779e0ca8c6cb9eabe109465b6c0b599a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ2Njk1Yjc3OWUwY2E4YzZjYjllYWJlMTA5NDY1YjZjMGI1OTlhOA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-01-08T03:46:41Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-01-08T03:46:41Z"}, "message": "re PR target/36557 (-m32 -mpowerpc64 produces better code than -m64 for a!=0)\n\n\tPR target/36557\n\t* config/rs6000/rs6000.md (*eqsi3_ext<mode>, *nesi3_ext<mode>): New.\n\nFrom-SVN: r219336", "tree": {"sha": "1f11f2cef67aad8acb4678fa6c6eb4f5aef2cd50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f11f2cef67aad8acb4678fa6c6eb4f5aef2cd50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/946695b779e0ca8c6cb9eabe109465b6c0b599a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946695b779e0ca8c6cb9eabe109465b6c0b599a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946695b779e0ca8c6cb9eabe109465b6c0b599a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946695b779e0ca8c6cb9eabe109465b6c0b599a8/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "317991c964f76a730226577a85f576a3b7935c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317991c964f76a730226577a85f576a3b7935c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317991c964f76a730226577a85f576a3b7935c20"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "5eb1bc65bb5fcd1242e56db4fb68c351220f11d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946695b779e0ca8c6cb9eabe109465b6c0b599a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946695b779e0ca8c6cb9eabe109465b6c0b599a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=946695b779e0ca8c6cb9eabe109465b6c0b599a8", "patch": "@@ -1,3 +1,8 @@\n+2015-01-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/36557\n+\t* config/rs6000/rs6000.md (*eqsi3_ext<mode>, *nesi3_ext<mode>): New.\n+\n 2015-01-07  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi ([-fvtable-verify]): Fix markup on option"}, {"sha": "a451af5029543a1b2781f7256dbfd149cf513fb9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946695b779e0ca8c6cb9eabe109465b6c0b599a8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946695b779e0ca8c6cb9eabe109465b6c0b599a8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=946695b779e0ca8c6cb9eabe109465b6c0b599a8", "patch": "@@ -12576,6 +12576,66 @@\n \t(if_then_else (match_test \"operands[2] == const0_rtx\")\n \t\t      (const_string \"8\")\n \t\t      (const_string \"12\")))])\n+\n+(define_insn_and_split \"*eqsi3_ext<mode>\"\n+  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r\")\n+\t(eq:EXTSI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:SI 2 \"scc_eq_operand\" \"rKLI\")))\n+   (clobber (match_scratch:SI 3 \"=r\"))\n+   (clobber (match_scratch:SI 4 \"=r\"))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 4)\n+\t(clz:SI (match_dup 3)))\n+   (set (match_dup 0)\n+\t(zero_extend:EXTSI\n+\t  (lshiftrt:SI (match_dup 4)\n+\t\t       (const_int 5))))]\n+{\n+  operands[3] = rs6000_emit_eqne (SImode,\n+\t\t\t\t  operands[1], operands[2], operands[3]);\n+\n+  if (GET_CODE (operands[4]) == SCRATCH)\n+    operands[4] = gen_reg_rtx (SImode);\n+}\n+  [(set (attr \"length\")\n+\t(if_then_else (match_test \"operands[2] == const0_rtx\")\n+\t\t      (const_string \"8\")\n+\t\t      (const_string \"12\")))])\n+\n+(define_insn_and_split \"*nesi3_ext<mode>\"\n+  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r\")\n+\t(ne:EXTSI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:SI 2 \"scc_eq_operand\" \"rKLI\")))\n+   (clobber (match_scratch:SI 3 \"=r\"))\n+   (clobber (match_scratch:SI 4 \"=r\"))\n+   (clobber (match_scratch:EXTSI 5 \"=r\"))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 4)\n+\t(clz:SI (match_dup 3)))\n+   (set (match_dup 5)\n+\t(zero_extend:EXTSI\n+\t  (lshiftrt:SI (match_dup 4)\n+\t\t       (const_int 5))))\n+   (set (match_dup 0)\n+\t(xor:EXTSI (match_dup 5)\n+\t\t   (const_int 1)))]\n+{\n+  operands[3] = rs6000_emit_eqne (SImode,\n+\t\t\t\t  operands[1], operands[2], operands[3]);\n+\n+  if (GET_CODE (operands[4]) == SCRATCH)\n+    operands[4] = gen_reg_rtx (SImode);\n+  if (GET_CODE (operands[5]) == SCRATCH)\n+    operands[5] = gen_reg_rtx (<MODE>mode);\n+}\n+  [(set (attr \"length\")\n+\t(if_then_else (match_test \"operands[2] == const0_rtx\")\n+\t\t      (const_string \"12\")\n+\t\t      (const_string \"16\")))])\n \f\n ;; Define both directions of branch and return.  If we need a reload\n ;; register, we'd rather use CR0 since it is much easier to copy a"}]}