{"sha": "8be374e02761c9d63d2753d71e4bd4874a1577b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlMzc0ZTAyNzYxYzlkNjNkMjc1M2Q3MWU0YmQ0ODc0YTE1NzdiMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-08T09:05:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-08T09:05:10Z"}, "message": "forwprop: Ignore scalar mode vectors in simplify_vector_constructor [PR95528]\n\nAs mentioned in the PR, the problem is that at least the x86 backend asumes\nthat the vec_unpack* and vec_pack* optabs with integral modes are for the\nAVX512-ish vector masks rather than for very small vectors done in GPRs.\nThe only other target that seems to have a scalar mode vec_{,un}pack* optab\nis aarch64 as discussed in the PR, so there is also a condition for that.\nAll other targets have just vector mode optabs.\n\n2020-06-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/95528\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Don't use\n\tVEC_UNPACK*_EXPR or VEC_PACK_TRUNC_EXPR with scalar modes unless the\n\ttype is vector boolean.\n\n\t* g++.dg/opt/pr95528.C: New test.", "tree": {"sha": "e5c255a79cc9cac5ee35611d8ab5aa9beae861cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5c255a79cc9cac5ee35611d8ab5aa9beae861cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be374e02761c9d63d2753d71e4bd4874a1577b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be374e02761c9d63d2753d71e4bd4874a1577b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be374e02761c9d63d2753d71e4bd4874a1577b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be374e02761c9d63d2753d71e4bd4874a1577b1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "296d644b9f526e44fbe574426f24799c1d545fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296d644b9f526e44fbe574426f24799c1d545fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296d644b9f526e44fbe574426f24799c1d545fd3"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "6407329855107f88db2aa3b596d3b2bcf3209e75", "filename": "gcc/testsuite/g++.dg/opt/pr95528.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be374e02761c9d63d2753d71e4bd4874a1577b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr95528.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be374e02761c9d63d2753d71e4bd4874a1577b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr95528.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr95528.C?ref=8be374e02761c9d63d2753d71e4bd4874a1577b1", "patch": "@@ -0,0 +1,27 @@\n+// PR target/95528\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O3\" }\n+// { dg-additional-options \"-march=skylake-avx512\" { target i?86-*-*- x86_64-*-* } }\n+\n+template <typename a> struct b {\n+  typedef a c __attribute__((vector_size(sizeof(a) * 4)));\n+  union {\n+    c d;\n+    struct {\n+      a e, f, g, h;\n+    };\n+  };\n+  b();\n+  b(const b &i) : d(i.d) {}\n+  static b j(c);\n+  template <typename k> operator b<k>() {\n+    b<k>::j(typename b<k>::c{k(e), k(f), k(g), k(h)});\n+    return b<k>();\n+  }\n+};\n+template <typename a> using l = b<a>;\n+using m = l<char>;\n+using n = l<short>;\n+m o(n i) { return i; }\n+b<short> q;\n+void p() { o(q); }"}, {"sha": "494c9e9c20b96d372bdda234ccdf23ac8864bb07", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be374e02761c9d63d2753d71e4bd4874a1577b1/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be374e02761c9d63d2753d71e4bd4874a1577b1/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=8be374e02761c9d63d2753d71e4bd4874a1577b1", "patch": "@@ -2401,6 +2401,10 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t      && (dblvectype\n \t\t  = build_vector_type (TREE_TYPE (TREE_TYPE (orig[0])),\n \t\t\t\t       nelts * 2))\n+\t      /* Only use it for vector modes or for vector booleans represented\n+\t\t as scalar bitmasks.  See PR95528.  */\n+\t      && (VECTOR_MODE_P (TYPE_MODE (dblvectype))\n+\t\t  || VECTOR_BOOLEAN_TYPE_P (dblvectype))\n \t      && (optab = optab_for_tree_code (FLOAT_TYPE_P (TREE_TYPE (type))\n \t\t\t\t\t       ? VEC_UNPACK_FLOAT_LO_EXPR\n \t\t\t\t\t       : VEC_UNPACK_LO_EXPR,\n@@ -2442,6 +2446,13 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t\t   && (halfvectype\n \t\t         = build_vector_type (TREE_TYPE (TREE_TYPE (orig[0])),\n \t\t\t\t\t      nelts / 2))\n+\t\t   /* Only use it for vector modes or for vector booleans\n+\t\t      represented as scalar bitmasks, or allow halfvectype\n+\t\t      be the element mode.  See PR95528.  */\n+\t\t   && (VECTOR_MODE_P (TYPE_MODE (halfvectype))\n+\t\t       || VECTOR_BOOLEAN_TYPE_P (halfvectype)\n+\t\t       || (TYPE_MODE (halfvectype)\n+\t\t\t   == TYPE_MODE (TREE_TYPE (halfvectype))))\n \t\t   && (optab = optab_for_tree_code (VEC_PACK_TRUNC_EXPR,\n \t\t\t\t\t\t    halfvectype,\n \t\t\t\t\t\t    optab_default))"}]}