{"sha": "46b58b8c6922c383537f0afd51c4dcc9dccf70fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiNThiOGM2OTIyYzM4MzUzN2YwYWZkNTFjNGRjYzlkY2NmNzBmYw==", "commit": {"author": {"name": "Florian Weimer", "email": "fw@deneb.enyo.de", "date": "2001-10-27T14:23:21Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-27T14:23:21Z"}, "message": "* gnat_rm.texi: Use @./@: where appropriate.\n\nFrom-SVN: r46566", "tree": {"sha": "77addb31052c1bf346cea01e98799d0f87f7b73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77addb31052c1bf346cea01e98799d0f87f7b73a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46b58b8c6922c383537f0afd51c4dcc9dccf70fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b58b8c6922c383537f0afd51c4dcc9dccf70fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46b58b8c6922c383537f0afd51c4dcc9dccf70fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b58b8c6922c383537f0afd51c4dcc9dccf70fc/comments", "author": {"login": "fweimer", "id": 2729073, "node_id": "MDQ6VXNlcjI3MjkwNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2729073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer", "html_url": "https://github.com/fweimer", "followers_url": "https://api.github.com/users/fweimer/followers", "following_url": "https://api.github.com/users/fweimer/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer/subscriptions", "organizations_url": "https://api.github.com/users/fweimer/orgs", "repos_url": "https://api.github.com/users/fweimer/repos", "events_url": "https://api.github.com/users/fweimer/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "765430000ddb057aa1269539ffed21bdb988ad87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765430000ddb057aa1269539ffed21bdb988ad87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765430000ddb057aa1269539ffed21bdb988ad87"}], "stats": {"total": 250, "additions": 127, "deletions": 123}, "files": [{"sha": "19f98db20db8250bde1de1362df40bcbe9a74a13", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b58b8c6922c383537f0afd51c4dcc9dccf70fc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b58b8c6922c383537f0afd51c4dcc9dccf70fc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=46b58b8c6922c383537f0afd51c4dcc9dccf70fc", "patch": "@@ -1,3 +1,7 @@\n+2001-10-26  Florian Weimer  <fw@deneb.enyo.de>\n+\n+\t* gnat_rm.texi: Use @./@: where appropriate.\n+\n 2001-10-26  Robert Dewar <dewar@gnat.com>\n \n \t* sinfo.adb: Define Associated_Node to overlap Entity field. Cleanup."}, {"sha": "5aedc4d5537919755bc60c70db404880f2acd4ee", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 123, "deletions": 123, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b58b8c6922c383537f0afd51c4dcc9dccf70fc/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b58b8c6922c383537f0afd51c4dcc9dccf70fc/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=46b58b8c6922c383537f0afd51c4dcc9dccf70fc", "patch": "@@ -9,7 +9,7 @@\n @c                                                                            o\n @c                              G N A T _ RM                                  o\n @c                                                                            o\n-@c                            $Revision$\n+@c                            $Revision: 1.1 $\n @c                                                                            o\n @c          Copyright (C) 1992-2001 Ada Core Technologies, Inc.               o\n @c                                                                            o\n@@ -39,8 +39,8 @@\n @title GNAT Reference Manual\n @subtitle GNAT, The GNU Ada 95 Compiler\n @subtitle Version 3.15w\n-@subtitle Document revision level $Revision$\n-@subtitle Date: $Date$\n+@subtitle Document revision level $Revision: 1.1 $\n+@subtitle Date: $Date: 2001/10/26 13:55:51 $\n @author Ada Core Technologies, Inc.\n \n @page\n@@ -70,7 +70,7 @@ DIGITAL\n VADS is a registered trademark of Rational Software Inc.\n \n The following are trademarks of Digital Equipment Corporation:\n-DEC, DEC Ada, DECthreads, Digital, OpenVMS, and VAX.\n+DEC, DEC Ada, DECthreads, Digital, OpenVMS, and VAX@.\n \n @end titlepage\n @ifinfo\n@@ -84,7 +84,7 @@ GNAT, The GNU Ada 95 Compiler\n \n Version 3.14a\n \n-Date: $Date$\n+Date: $Date: 2001/10/26 13:55:51 $\n \n Ada Core Technologies, Inc.\n \n@@ -113,7 +113,7 @@ DIGITAL\n VADS is a registered trademark of Rational Software Inc.\n \n The following are trademarks of Digital Equipment Corporation:\n-DEC, DEC Ada, DECthreads, Digital, OpenVMS, and VAX.\n+DEC, DEC Ada, DECthreads, Digital, OpenVMS, and VAX@.\n \n @menu\n * About This Guide::            \n@@ -331,7 +331,7 @@ of representation clauses and pragmas that is accepted.\n @item\n @ref{Standard Library Routines} provides a listing of packages and a\n brief description of the functionality that is provided by Ada's\n-extensive set of standard library routines as implemented by GNAT.\n+extensive set of standard library routines as implemented by GNAT@.\n \n @item\n @ref{The Implementation of Standard I/O} details how the GNAT\n@@ -539,7 +539,7 @@ unambiguous.\n \n The analyzed pragma is retained in the tree, but not otherwise processed\n by any part of the GNAT compiler. This pragma is intended for use by\n-external tools, including ASIS.\n+external tools, including ASIS@.\n \n @findex Assert\n @item pragma Assert\n@@ -617,7 +617,7 @@ pragma AST_Entry (entry_IDENTIFIER);\n @end smallexample\n \n @noindent\n-This pragma is implemented only in the OpenVMS implementation of GNAT. The\n+This pragma is implemented only in the OpenVMS implementation of GNAT@. The\n argument is the simple name of a single entry; at most one @code{AST_Entry}\n pragma is allowed for any given entry. This pragma must be used in \n conjunction with the @code{AST_Entry} attribute, and is only allowed after\n@@ -657,7 +657,7 @@ foreign (non-Ada) convention.\n @end itemize\n \n @noindent\n-If these conditions are met the argument is passed by copy, i.e. in a\n+If these conditions are met the argument is passed by copy, i.e.@: in a\n manner consistent with what C expects if the corresponding formal in the\n C prototype is a struct (rather than a pointer to a struct).\n \n@@ -766,7 +766,7 @@ aligned). For example, 1-byte components are aligned on byte boundaries,\n 2-byte integer components are aligned on 2-byte boundaries, 4-byte\n integer components are aligned on 4-byte boundaries and so on. These\n alignment rules correspond to the normal rules for C compilers on all\n-machines except the VAX.\n+machines except the VAX@.\n \n @findex Component_Size_4\n @item Component_Size_4\n@@ -776,7 +776,7 @@ bytes. Components that are larger than 4 bytes are placed on the next\n \n @findex Storage_Unit\n @item Storage_Unit\n-Specifies that array or record components are byte aligned, i.e.\n+Specifies that array or record components are byte aligned, i.e.@:\n aligned on boundaries determined by the value of the constant\n @code{System.Storage_Unit}.\n \n@@ -1102,7 +1102,7 @@ EXTERNAL_SYMBOL ::=\n @end smallexample\n \n @noindent\n-This pragma is implemented only in the OpenVMS implementation of GNAT. It\n+This pragma is implemented only in the OpenVMS implementation of GNAT@. It\n causes the specified exception to be propagated outside of the Ada program,\n so that it can be handled by programs written in other OpenVMS languages.\n This pragma establishes an external name for an Ada exception and makes the\n@@ -1172,7 +1172,7 @@ exactly match the subtypes in the corresponding function specification,\n using positional notation to match parameters with subtype marks.\n @cindex OpenVMS\n @cindex Passing by descriptor\n-Passing by descriptor is supported only on the OpenVMS ports of GNAT.\n+Passing by descriptor is supported only on the OpenVMS ports of GNAT@.\n \n @findex Export_Object\n @item pragma Export_Object @dots{}\n@@ -1195,7 +1195,7 @@ extended rules for external symbols, is identical in effect to the use of\n the normal @code{Export} pragma applied to an object. You may use a\n separate Export pragma (and you probably should from the point of view\n of portability), but it is not required.  @var{Size} is syntax checked,\n-but otherwise ignored by GNAT.\n+but otherwise ignored by GNAT@.\n \n @findex Export_Procedure\n @item pragma Export_Procedure @dots{}\n@@ -1306,11 +1306,11 @@ pragma Extend_System ([Name =>] IDENTIFIER);\n This pragma is used to provide backwards compatibility with other\n implementations that extend the facilities of package @code{System}. In\n GNAT, @code{System} contains only the definitions that are present in\n-the Ada 95 RM. However, other implementations, notably the DEC Ada 83\n+the Ada 95 RM@. However, other implementations, notably the DEC Ada 83\n implementation, provide many extensions to package @code{System}.\n \n For each such implementation accommodated by this pragma, GNAT provides a\n-package @code{Aux_@var{xxx}}, e.g. @code{Aux_DEC} for the DEC Ada 83\n+package @code{Aux_@var{xxx}}, e.g.@: @code{Aux_DEC} for the DEC Ada 83\n implementation, which provides the required additional definitions. You\n can use this package in two ways.  You can @code{with} it in the normal\n way and access entities either by selection or using a @code{use}\n@@ -1323,7 +1323,7 @@ to extend visibility in @code{System} in a non-standard way that\n provides greater compatibility with the existing code. Pragma\n @code{Extend_System} is a configuration pragma whose single argument is\n the name of the package containing the extended definition\n-(e.g. @code{Aux_DEC} for the DEC Ada case). A unit compiled under\n+(e.g.@: @code{Aux_DEC} for the DEC Ada case). A unit compiled under\n control of this pragma will be processed using special visibility\n processing that looks in package @code{System.Aux_@var{xxx}} where\n @code{Aux_@var{xxx}} is the pragma argument for any entity referenced in\n@@ -1429,7 +1429,7 @@ be used more locally to control individual Import/Export pragmas.\n \n It is primarily intended for use with @code{OpenVMS} systems, where many\n compilers convert all symbols to upper case by default. For interfacing to\n-such compilers (e.g. the DEC C compiler), it may be convenient to use\n+such compilers (e.g.@: the DEC C compiler), it may be convenient to use\n the pragma:\n \n @smallexample\n@@ -1468,7 +1468,7 @@ FLOAT_REP ::= VAX_Float | IEEE_Float\n @end smallexample\n \n @noindent\n-This pragma is implemented only in the OpenVMS implementation of GNAT.\n+This pragma is implemented only in the OpenVMS implementation of GNAT@.\n It allows control over the internal representation chosen for the predefined\n floating point types declared in the packages @code{Standard} and\n @code{System}. For further details on this pragma, see the\n@@ -1515,7 +1515,7 @@ EXTERNAL_SYMBOL ::=\n @end smallexample\n \n @noindent\n-This pragma is implemented only in the OpenVMS implementation of GNAT.\n+This pragma is implemented only in the OpenVMS implementation of GNAT@.\n It allows OpenVMS conditions (for example, from OpenVMS system services or\n other OpenVMS languages) to be propagated to Ada programs as Ada exceptions.\n The pragma specifies that the exception associated with an exception\n@@ -1586,9 +1586,9 @@ is used.\n \n @cindex OpenVMS\n @cindex Passing by descriptor\n-Passing by descriptor is supported only on the to OpenVMS ports of GNAT.\n+Passing by descriptor is supported only on the to OpenVMS ports of GNAT@.\n \n-@code{First_Optional_Parameter} applies only to OpenVMS ports of GNAT.\n+@code{First_Optional_Parameter} applies only to OpenVMS ports of GNAT@.\n It specifies that the designated parameter and all following parameters\n are optional, meaning that they are not passed at the generated code\n level (this is distinct from the notion of optional parameters in Ada\n@@ -1620,7 +1620,7 @@ the normal @code{Import} pragma applied to an object.  Unlike the\n subprogram case, you need not use a separate @code{Import} pragma,\n although you may do so (and probably should do so from a portability\n point of view). @var{size} is syntax checked, but otherwise ignored by\n-GNAT.\n+GNAT@.\n \n @findex Import_Procedure\n @item pragma Import_Procedure\n@@ -1786,8 +1786,8 @@ pragma Inline_Generic (generic_package_NAME)\n \n @noindent\n This is implemented for compatibility with DEC Ada 83 and is recognized,\n-but otherwise ignored, by GNAT. All generic instantiations are inlined\n-by default when using GNAT.\n+but otherwise ignored, by GNAT@. All generic instantiations are inlined\n+by default when using GNAT@.\n \n @findex Interface\n @item pragma Interface\n@@ -1840,7 +1840,7 @@ pragma License (Unrestricted | GPL | Modified_GPL | Restricted);\n \n @noindent\n This pragma is provided to allow automated checking for appropriate license\n-conditions with respect to the standard and modified GPL. A pragma License,\n+conditions with respect to the standard and modified GPL@. A pragma License,\n which is a configuration pragma that typically appears at the start of a\n source file or in a separate @file{gnat.adc} file, specifies the licensing\n conditions of a unit as follows:\n@@ -1859,12 +1859,12 @@ therefore cannot be @code{with}'ed by a restricted unit.\n This is used for a unit licensed under the GNAT modified GPL that includes\n a special exception paragraph that specifically permits the inclusion of\n the unit in programs without requiring the entire program to be released\n-under the GPL. This is the license used for the GNAT run-time which ensures\n+under the GPL@. This is the license used for the GNAT run-time which ensures\n that the run-time can be used freely in any program without GPL concerns.\n \n @item Restricted\n This is used for a unit that is restricted in that it is not permitted to\n-depend on units that are licensed under the GPL. Typical examples are\n+depend on units that are licensed under the GPL@. Typical examples are\n proprietary code that is to be released under more restrictive license\n conditions. Note that restricted units are permitted to @code{with} units\n which are licensed under the modified GPL (this is the whole point of the\n@@ -1884,7 +1884,7 @@ comment text is searched for the appearence of any of the following strings.\n \n If the string \"GNU General Public License\" is found, then the unit is assumed\n to have GPL license, unless the string \"As a special exception\" follows, in\n-which case the license is assumed to be modified GPL.\n+which case the license is assumed to be modified GPL@.\n \n If one of the strings\n \"This specification is adapated from the Ada Semantic Interface\" or\n@@ -1921,7 +1921,7 @@ if compiled with pragma @code{License} (@code{Restricted}) in a\n Here we get a warning on @code{Sem_Ch3} since it is part of the GNAT\n compiler and is licensed under the\n GPL, but no warning for @code{GNAT.Sockets} which is part of the GNAT \n-run time, and is therefore licensed under the modified GPL.\n+run time, and is therefore licensed under the modified GPL@.\n \n @findex Link_With\n @item pragma Link_With\n@@ -2001,7 +2001,7 @@ pragma Normalize_Scalars;\n @end smallexample\n \n @noindent\n-This is a language defined pragma which is fully implemented in GNAT. The\n+This is a language defined pragma which is fully implemented in GNAT@. The\n effect is to cause all scalar objects that are not otherwise initialized\n to be initialized. The initial values are implementation dependent and\n are as follows:\n@@ -2045,7 +2045,7 @@ Objects of a modular type are initialized to typ'Last. This will be out\n of range of the subtype only if the subtype excludes this value.\n \n @item Enumeration types\n-Objects of an enumeration type are initialized to all one-bits, i.e. to\n+Objects of an enumeration type are initialized to all one-bits, i.e.@: to\n the value 2 ** typ'Size - 1. This will be out of range of the enumeration\n subtype in all cases except where the subtype contains exactly\n 2**8, 2**16, or 2**32.\n@@ -2065,7 +2065,7 @@ FLOAT_FORMAT ::= D_Float | G_Float\n @end smallexample\n \n @noindent\n-This pragma is implemented only in the OpenVMS implementation of GNAT.\n+This pragma is implemented only in the OpenVMS implementation of GNAT@.\n It allows control over the internal representation chosen for the predefined\n type @code{Long_Float} and for floating point type representations with\n @code{digits} specified in the range 7 .. 15.\n@@ -2147,7 +2147,7 @@ pragma Passive ([Semaphore | No]);\n @end smallexample\n \n @noindent\n-Syntax checked, but otherwise ignored by GNAT. This is recognized for\n+Syntax checked, but otherwise ignored by GNAT@. This is recognized for\n compatibility with DEC Ada 83 implementations, where it is used within a\n task definition to request that a task be made passive.  If the argument\n @code{Semaphore} is present, or no argument is omitted, then DEC Ada 83\n@@ -2221,7 +2221,7 @@ However, this manual is silent about the propagation of exceptions\n through foreign code. For example, consider the\n situation where @code{P1} calls\n @code{P2}, and @code{P2} calls @code{P3}, where\n-@code{P1} and @code{P3} are in Ada, but @code{P2} is in C.\n+@code{P1} and @code{P3} are in Ada, but @code{P2} is in C@.\n @code{P3} raises an Ada exception. The question is whether or not\n it will be propagated through @code{P2} and can be handled in \n @code{P1}.\n@@ -2462,7 +2462,7 @@ pragma Share_Generic (NAME @{, NAME@});\n \n @noindent\n This pragma is recognized for compatibility with other Ada compilers\n-but is ignored by GNAT. GNAT does not provide the capability for\n+but is ignored by GNAT@. GNAT does not provide the capability for\n sharing of generic code. All generic instantiations result in making\n an inlined copy of the template with appropriate substitutions.\n \n@@ -2484,7 +2484,7 @@ pragma Source_File_Name (\n @noindent\n Use this to override the normal naming convention. It is a configuration\n pragma, and so has the usual applicability of configuration pragmas\n-(i.e. it applies to either an entire partition, or to all units in a\n+(i.e.@: it applies to either an entire partition, or to all units in a\n compilation, or to a single unit, depending on how it is used.\n @var{unit_name} is mapped to @var{file_name_literal}. The identifier for\n the second argument is required, and indicates whether this is the file\n@@ -2634,7 +2634,7 @@ pragma Style_Checks (string_LITERAL | ALL_CHECKS |\n \n @noindent\n This pragma is used in conjunction with compiler switches to control the\n-built in style checking provided by GNAT. The compiler switches, if set\n+built in style checking provided by GNAT@. The compiler switches, if set\n provide an initial setting for the switches, and this pragma may be used\n to modify these settings, or the settings may be provided entirely by\n the use of the pragma. This pragma can be used anywhere that a pragma\n@@ -2700,7 +2700,7 @@ pragma Subtitle ([Subtitle =>] STRING_LITERAL);\n \n @noindent\n This pragma is recognized for compatibility with other Ada compilers\n-but is ignored by GNAT.\n+but is ignored by GNAT@.\n \n @findex Suppress_All\n @item pragma Suppress_All\n@@ -2716,7 +2716,7 @@ This pragma can only appear immediately following a compilation\n unit. The effect is to apply @code{Suppress (All_Checks)} to the unit\n which it follows. This pragma is implemented for compatibility with DEC\n Ada 83 usage. The use of pragma @code{Suppress (All_Checks)} as a normal\n-configuration pragma is the preferred usage in GNAT.\n+configuration pragma is the preferred usage in GNAT@.\n \n @findex Suppress_Initialization\n @cindex Suppressing initialization\n@@ -2857,13 +2857,13 @@ TITLING_OPTION ::=\n @end smallexample\n \n @noindent\n-Syntax checked but otherwise ignored by GNAT. This is a listing control\n+Syntax checked but otherwise ignored by GNAT@. This is a listing control\n pragma used in DEC Ada 83 implementations to provide a title and/or\n subtitle for the program listing. The program listing generated by GNAT\n does not have titles or subtitles.\n \n Unlike other pragmas, the full flexibility of named notation is allowed\n-for this pragma, i.e. the parameters may be given in any order if named\n+for this pragma, i.e.@: the parameters may be given in any order if named\n notation is used, and named and positional notation can be mixed\n following the normal rules for procedure calls in Ada.\n \n@@ -2929,7 +2929,7 @@ erroneous.\n The layout of the resulting type corresponds exactly to a C union, where\n each branch of the union corresponds to a single variant in the Ada\n record. The semantics of the Ada program is not changed in any way by\n-the pragma, i.e. provided the above restrictions are followed, and no\n+the pragma, i.e.@: provided the above restrictions are followed, and no\n erroneous incorrect references to fields or erroneous comparisons occur,\n the semantics is exactly as described by the Ada reference manual.\n Pragma @code{Suppress (Discriminant_Check)} applies implicitly to the\n@@ -3036,7 +3036,7 @@ pragma Validity_Checks (string_LITERAL | ALL_CHECKS | On | Off);\n \n @noindent\n This pragma is used in conjunction with compiler switches to control the\n-built in validity checking provided by GNAT. The compiler switches, if set\n+built in validity checking provided by GNAT@. The compiler switches, if set\n provide an initial setting for the switches, and this pragma may be used\n to modify these settings, or the settings may be provided entirely by\n the use of the pragma. This pragma can be used anywhere that a pragma\n@@ -3181,7 +3181,7 @@ The @code{Asm_Input} attribute denotes a function that takes two\n parameters.  The first is a string, the second is an expression of the\n type designated by the prefix. The first (string) argument is required\n to be a static expression, and is the constraint for the parameter,\n-(e.g. what kind of register is required). The second argument is the\n+(e.g.@: what kind of register is required). The second argument is the\n value to be used as the input argument. The possible values for the\n constant are the same as those used in the RTL, and are dependent on\n the configuration file used to built the GCC back end.\n@@ -3194,7 +3194,7 @@ The @code{Asm_Output} attribute denotes a function that takes two\n parameters.  The first is a string, the second is the name of a variable\n of the type designated by the attribute prefix. The first (string)\n argument is required to be a static expression and designates the\n-constraint for the parameter (e.g. what kind of register is\n+constraint for the parameter (e.g.@: what kind of register is\n required). The second argument is the variable to be updated with the\n result. The possible values for constraint are the same as those used in\n the RTL, and are dependent on the configuration file used to build the\n@@ -3206,7 +3206,7 @@ either be omitted, or explicitly given as @code{No_Output_Operands}.\n @findex AST_Entry\n @item AST_Entry\n @noindent\n-This attribute is implemented only in OpenVMS versions of GNAT. Applied to\n+This attribute is implemented only in OpenVMS versions of GNAT@. Applied to\n the name of an entry, it yields a value of the predefined type AST_Handler\n (declared in the predefined package System, as extended by the use of\n pragma Extend_System (Aux_DEC)). This value enables the given entry to\n@@ -3270,7 +3270,7 @@ pragma Import (Ada, L);\n @end smallexample\n \n @noindent\n-A call to L is then expected to result in a call to K. In Ada 83, where\n+A call to L is then expected to result in a call to K@. In Ada 83, where\n there were no access-to-subprogram values, this was a common work around\n for getting the effect of an indirect call.\n GNAT implements the above use of Address and the technique illustrated\n@@ -3318,7 +3318,7 @@ the body of the referenced unit. This is used in the main generated\n elaboration procedure by the binder and is not normally used in any\n other context.  However, there may be specialized situations in which it\n is useful to be able to call this elaboration procedure from Ada code,\n-e.g. if it is necessary to do selective re-elaboration to fix some\n+e.g.@: if it is necessary to do selective re-elaboration to fix some\n error.\n \n @findex Elab_Spec\n@@ -3330,7 +3330,7 @@ the specification of the referenced unit. This is used in the main\n generated elaboration procedure by the binder and is not normally used\n in any other context.  However, there may be specialized situations in\n which it is useful to be able to call this elaboration procedure from\n-Ada code, e.g. if it is necessary to do selective re-elaboration to fix\n+Ada code, e.g.@: if it is necessary to do selective re-elaboration to fix\n some error.\n \n @cindex Ada 83 attributes\n@@ -3363,7 +3363,7 @@ enumeration literal or object.\n The function returns the representation value for the given enumeration\n value. This will be equal to value of the @code{Pos} attribute in the\n absence of an enumeration representation clause. This is a static\n-attribute (i.e. the result is static if the argument is static).\n+attribute (i.e.@: the result is static if the argument is static).\n \n @var{S}'Enum_Rep can also be used with integer types and objects, in which\n case it simply returns the integer value. The reason for this is to allow\n@@ -3436,7 +3436,7 @@ has the same meaning as the more verbose:\n Put_Line (\"X = \" & @var{type}'Image (X));\n @end smallexample\n \n-where @var{type} is the subtype of the object X.\n+where @var{type} is the subtype of the object X@.\n \n @findex Integer_Value\n @item Integer_Value\n@@ -3696,7 +3696,7 @@ denotes a function identical to\n it is a static attribute. This means that if its argument is\n a static expression, then the result of the attribute is a\n static expression. The result is that such an expression can be\n-used in contexts (e.g. preelaborable packages) which require a\n+used in contexts (e.g.@: preelaborable packages) which require a\n static expression and where the function call could not be used\n (since the function call is always non-static, even if its \n argument is static).\n@@ -3810,7 +3810,7 @@ these requirements.\n In addition, there are sections throughout the Ada 95\n reference manual headed\n by the phrase ``implementation advice''. These sections are not normative,\n-i.e. they do not specify requirements that all compilers must\n+i.e.@: they do not specify requirements that all compilers must\n follow. Rather they provide advice on generally desirable behavior. You\n may wonder why they are not requirements. The most typical answer is\n that they describe behavior that seems generally desirable, but cannot\n@@ -4410,7 +4410,7 @@ allocated discontinuously from the rest of the object, then a warning\n should be generated upon reference to one of its storage place\n attributes.\n @end cartouche\n-Followed. There are no such components in GNAT.\n+Followed. There are no such components in GNAT@.\n \n @cindex Bit ordering\n @item 13.5.3(7-8): Bit Ordering\n@@ -4682,7 +4682,7 @@ Followed. GNAT provides all the packages described in this section.\n @sp 1\n @cartouche\n An implementation should support the following interface correspondences\n-between Ada and C.\n+between Ada and C@.\n @end cartouche\n Followed.\n \n@@ -4755,7 +4755,7 @@ Followed.\n @sp 1\n @cartouche\n An Ada implementation should support the following interface\n-correspondences between Ada and COBOL.\n+correspondences between Ada and COBOL@.\n @end cartouche\n Followed.\n \n@@ -4870,26 +4870,26 @@ Followed. A full set of machine operation intrinsic subprograms is provided.\n \n @sp 1\n @cartouche\n-Atomic read-modify-write operations -- e.g., test and set, compare and\n+Atomic read-modify-write operations -- e.g.@:, test and set, compare and\n swap, decrement and test, enqueue/dequeue.\n @end cartouche\n Followed on any target supporting such operations.\n \n @sp 1\n @cartouche\n-Standard numeric functions -- e.g., sin, log.\n+Standard numeric functions -- e.g.@:, sin, log.\n @end cartouche\n Followed on any target supporting such operations.\n \n @sp 1\n @cartouche\n-String manipulation operations -- e.g., translate and test.\n+String manipulation operations -- e.g.@:, translate and test.\n @end cartouche\n Followed on any target supporting such operations.\n \n @sp 1\n @cartouche\n-Vector operations -- e.g., compare vector against thresholds.\n+Vector operations -- e.g.@:, compare vector against thresholds.\n @end cartouche\n Followed on any target supporting such operations.\n \n@@ -4955,7 +4955,7 @@ way that there should be little or no code executed at run time for the\n elaboration of entities not already covered by the Implementation\n Requirements.\n @end cartouche\n-Followed. Executable code is generated in some cases, e.g. loops\n+Followed. Executable code is generated in some cases, e.g.@: loops\n to initialize large arrays.\n \n @item C.5(8): Pragma @code{Discard_Names}\n@@ -5080,7 +5080,7 @@ should raise @code{Storage_Error} if it runs out of space trying to\n write the @code{Item} into the stream.\n @end cartouche\n Followed by GLADE, a separately supplied PCS that can be used with\n-GNAT. For information on GLADE, contact Ada Core Technologies.\n+GNAT@. For information on GLADE, contact Ada Core Technologies.\n \n @cindex COBOL support\n @item F(7): COBOL Support\n@@ -5225,7 +5225,7 @@ Followed.\n In addition to the implementation dependent pragmas and attributes, and\n the implementation advice, there are a number of other features of Ada\n 95 that are potentially implementation dependent. These are mentioned\n-throughout the Ada 95 Reference Manual, and are summarized in annex M.\n+throughout the Ada 95 Reference Manual, and are summarized in annex M@.\n \n A requirement for conforming Ada compilers is that they provide\n documentation describing how the implementation deals with each of these\n@@ -5556,7 +5556,7 @@ are needed by the main program, and then this definition of need is applied\n recursively to those units, and the partition contains the transitive\n closure determined by this relationship. In short, all the necessary units\n are included, with no need to explicitly specify the list. If additional\n-units are required, e.g. by foreign language units, then all units must be\n+units are required, e.g.@: by foreign language units, then all units must be\n mentioned in the context clause of one of the needed Ada units.\n \n If the partition contains no main program, or if the main program is in\n@@ -5600,7 +5600,7 @@ corresponding ali file as the input parameter to the binder.\n The first constraint on ordering is that it meets the requirements of\n chapter 10 of the Ada 95 Reference Manual. This still leaves some\n implementation dependent choices, which are resolved by first\n-elaborating bodies as early as possible (i.e. in preference to specs\n+elaborating bodies as early as possible (i.e.@: in preference to specs\n where there is a choice), and second by evaluating the immediate with\n clauses of a unit to determine the probably best choice, and\n third by elaborating in alphabetical order of unit names\n@@ -5994,7 +5994,7 @@ other compilation units in the partition.\n This restriction ensures at compile time that no elaboration code is\n generated. Note that this is not the same condition as is enforced\n by pragma Preelaborate. There are cases in which pragma Preelaborate\n-still permits code to be generated (e.g. code to initialize a large\n+still permits code to be generated (e.g.@: code to initialize a large\n array to all zeroes), and there are cases of units which do not meet\n the requirements for pragma Preelaborate, but for which no elaboration\n code is generated. Generally, it is the case that preelaborable units\n@@ -6226,11 +6226,11 @@ Treated the same as C\n @item DLL\n DLL (used for Windows implementations only) is handled like the Stdcall\n convention. This convention is used to access variables and functions\n-(with Stdcall convention) in a DLL.\n+(with Stdcall convention) in a DLL@.\n @item Win32\n Win32 (used for Windows implementations only) is handled like the Stdcall\n convention. This convention is used to access variables and functions\n-(with Stdcall convention) in a DLL.\n+(with Stdcall convention) in a DLL@.\n @item External\n Treated the same as C\n @item Fortran \n@@ -6253,7 +6253,7 @@ inclusion of subprograms whose body has not yet been written.\n @end table\n @noindent\n In addition, all otherwise unrecognized convention names are also\n-treated as being synonymous with convention C. In all implementations\n+treated as being synonymous with convention C@. In all implementations\n except for VMS, use of such other names results in a warning. In VMS\n implementations, these names are accepted silently.\n \n@@ -6496,7 +6496,7 @@ on task dispatching. See D.2.1(9).\n Tasks map to IRIX threads, and the dispatching policy is as defined by\n the IRIX implementation of threads.\n @end ignore\n-Tasks map to threads in the threads package used by GNAT. Where possible\n+Tasks map to threads in the threads package used by GNAT@. Where possible\n and appropriate, these threads correspond to native threads of the\n underlying operating system.\n \n@@ -6542,7 +6542,7 @@ in a pragma @code{Locking_Policy}. See D.3(4).\n @noindent\n The only implementation defined policy permitted in GNAT is\n @code{Inheritance_Locking}. On targets that support this policy, locking\n-is implemented by inheritance, i.e. the task owning the lock operates\n+is implemented by inheritance, i.e.@: the task owning the lock operates\n at a priority equal to the highest priority of any task currently\n requesting the lock.\n \n@@ -6689,16 +6689,16 @@ a distributed application.\n @sp 1\n @cartouche\n @noindent\n-@strong{113}.  Implementation-defined aspects of the PCS. See E.5(25).\n+@strong{113}.  Implementation-defined aspects of the PCS@. See E.5(25).\n @end cartouche\n @noindent\n See the GLADE reference manual for a full description of all implementation\n-defined aspects of the PCS.\n+defined aspects of the PCS@.\n \n @sp 1\n @cartouche\n @noindent\n-@strong{114}.  Implementation-defined interfaces in the PCS. See\n+@strong{114}.  Implementation-defined interfaces in the PCS@. See\n E.5(26).\n @end cartouche\n @noindent\n@@ -7200,7 +7200,7 @@ array is packed, and the packing is effective (see separate section on\n packed arrays), then the alignment will be one for long packed arrays,\n or arrays whose length is not known at compile time. For short packed\n arrays, which are handled internally as modular types, the alignment\n-will be as described for primitive types, e.g. a packed array of length\n+will be as described for primitive types, e.g.@: a packed array of length\n 31 bits will have an object size of four bytes, and an alignment of 4.\n \n @item Records\n@@ -7441,7 +7441,7 @@ attribute applied to such an object in GNAT gives the actual allocated\n size of the variable, which is the largest size of any of the variants.\n The Ada Reference Manual is not completely clear on what choice should\n be made here, but the GNAT behavior seems most consistent with the\n-language in the RM.\n+language in the RM@.\n \n In some cases, it may be desirable to obtain the size of the current\n variant, rather than the size of the largest variant. This can be\n@@ -7576,7 +7576,7 @@ The @code{Object_Size} is used for determining the default size of\n objects and components. This size value can be referred to using the\n @code{Object_Size} attribute. The phrase \"is used\" here means that it is\n the basis of the determination of the size. The backend is free to\n-pad this up if necessary for efficiency, e.g. an 8-bit stand-alone\n+pad this up if necessary for efficiency, e.g.@: an 8-bit stand-alone\n character might be stored in 32 bits on a machine with no efficient\n byte access instructions such as the Alpha.\n \n@@ -7822,7 +7822,7 @@ but do not occupy an integral number of bytes. Given that bytes are not\n reordered, such fields would occupy a non-contiguous sequence of bits\n in memory, requiring non-trivial code to reassemble. They are for this\n reason not permitted, and any component clause specifying such a layout\n-will be flagged as illegal by GNAT.\n+will be flagged as illegal by GNAT@.\n \n @end itemize\n \n@@ -8126,7 +8126,7 @@ For example if we have:\n @end smallexample\n \n @noindent\n-Then the component size of @code{ar} will be set to 5 (i.e. to @code{r'size},\n+Then the component size of @code{ar} will be set to 5 (i.e.@: to @code{r'size},\n and the size of the array @code{ar} will be exactly 40 bits.\n \n Note that in some cases this rather fierce approach to packing can produce\n@@ -8173,7 +8173,7 @@ as modular integers, and so they are also packable.\n \n @noindent\n All packable components occupy the exact number of bits corresponding to\n-their @code{Size} value, and are packed with no padding bits, i.e. they\n+their @code{Size} value, and are packed with no padding bits, i.e.@: they\n can start on an arbitrary bit boundary.\n \n All other types are non-packable, they occupy an integral number of\n@@ -8227,7 +8227,7 @@ The next two fields are fully packable, so @code{l4} and @code{l5} are\n minimally packed with no gaps. However, type @code{Rb2} is a packed\n array that is longer than 64 bits, so it is itself non-packable. Thus\n the @code{l6} field is aligned to the next byte boundary, and takes an\n-integral number of bytes, i.e. 72 bits.\n+integral number of bytes, i.e.@: 72 bits.\n \n @node Record Representation Clauses\n @section Record Representation Clauses\n@@ -8293,7 +8293,7 @@ be in the range:\n \n @noindent\n A \"confirming\" representation clause is one in which the values range\n-from 0 in sequence, i.e. a clause that confirms the default representation\n+from 0 in sequence, i.e.@: a clause that confirms the default representation\n for an enumeration type.\n Such a confirming representation\n is permitted by these rules, and is specially recognized by the compiler so\n@@ -8314,7 +8314,7 @@ The array type t corresponds to a vector with exactly three elements and\n has a default size equal to @code{3*Character'Size}. This ensures efficient\n use of space, but means that accesses to elements of the array will incur\n the overhead of converting representation values to the corresponding\n-positional values, (i.e. the value delivered by the  @code{Pos} attribute).\n+positional values, (i.e.@: the value delivered by the  @code{Pos} attribute).\n \n @node Address Clauses\n @section Address Clauses\n@@ -8380,7 +8380,7 @@ only the case where all three of these conditions hold:\n @itemize @bullet\n \n @item\n-The type of the item is non-elementary (e.g. a record or array).\n+The type of the item is non-elementary (e.g.@: a record or array).\n \n @item\n There is explicit or implicit initialization required for the object.\n@@ -8491,7 +8491,7 @@ Normally the specification of a foreign language convention for a type or\n an object has no effect on the chosen representation. In particular, the\n representation chosen for data in GNAT generally meets the standard system\n conventions, and for example records are laid out in a manner that is\n-consistent with C. This means that specifying convention C (for example)\n+consistent with C@. This means that specifying convention C (for example)\n has no effect.\n \n There are three exceptions to this general rule:\n@@ -8669,7 +8669,7 @@ end record;\n @end smallexample\n \n @noindent\n-The Size values are actually the Object_Size, i.e. the default size that\n+The Size values are actually the Object_Size, i.e.@: the default size that\n will be allocated for objects of the type.\n The ?? size for type r indicates that we have a variant record, and the\n actual size of objects will depend on the discriminant value.\n@@ -8683,7 +8683,7 @@ cannot be controlled by the programmer).\n \n The record representation clause for the type extension r2 shows all the\n fields present, including the parent field, which is a copy of the fields\n-of the parent type of r2, i.e. r1.\n+of the parent type of r2, i.e.@: r1.\n \n The component size and size clauses for types rb1 and rb2 show\n the exact effect of pragma Pack on these arrays, and the record\n@@ -8733,12 +8733,12 @@ This is a dummy parent package that contains no useful entities\n \n @item Ada.Characters.Handling (A.3.2)\n This package provides some basic character handling capabilities,\n-including classification functions for classes of characters (e.g. test\n+including classification functions for classes of characters (e.g.@: test\n for letters, or digits).\n \n @item Ada.Characters.Latin_1 (A.3.3)\n This package includes a complete set of definitions of the characters\n-that appear in type CHARACTER. It is useful for writing programs that\n+that appear in type CHARACTER@. It is useful for writing programs that\n will run in international environments. For example, if you want an\n upper case E with an acute accent in a string, it is often better to use\n the definition of @code{UC_E_Acute} in this package. Then your program\n@@ -8782,7 +8782,7 @@ recognized as interrupts.\n \n @item Ada.Interrupts.Names (C.3.2)\n This package provides the set of interrupt names (actually signal\n-or condition names) that can be handled by GNAT.\n+or condition names) that can be handled by GNAT@.\n \n @item Ada.IO_Exceptions (A.13)\n This package defines the set of exceptions that can be raised by use of\n@@ -8993,8 +8993,8 @@ data.\n \n @item Ada.Text_IO.Editing (F.3.3)\n This package contains routines for edited output, analogous to the use\n-of pictures in COBOL. The picture formats used by this package are a\n-close copy of the facility in COBOL.\n+of pictures in COBOL@. The picture formats used by this package are a\n+close copy of the facility in COBOL@.\n \n @item Ada.Text_IO.Text_Streams (A.12.2)\n This package provides a facility that allows Text_IO files to be treated\n@@ -9311,11 +9311,11 @@ conditions are met:\n \n @itemize @bullet\n @item\n-The character @code{LF} is used only as a line mark, i.e. to mark the end\n+The character @code{LF} is used only as a line mark, i.e.@: to mark the end\n of the line.\n \n @item\n-The character @code{FF} is used only as a page mark, i.e. to mark the\n+The character @code{FF} is used only as a page mark, i.e.@: to mark the\n end of a page and consequently can appear only immediately following a\n @code{LF} (line mark) character.\n \n@@ -9331,8 +9331,8 @@ or @code{Put_Line}. There will be no @code{FF} character at the end of\n the file unless an explicit @code{New_Page} operation was performed\n before closing the file.\n \n-A canonical Text_IO file that is a regular file, i.e. not a device or a\n-pipe, can be read using any of the routines in Text_IO. The\n+A canonical Text_IO file that is a regular file, i.e.@: not a device or a\n+pipe, can be read using any of the routines in Text_IO@. The\n semantics in this case will be exactly as defined in the Ada 95 reference\n manual and all the routines in Text_IO are fully implemented.\n \n@@ -9351,7 +9351,7 @@ line marks or page marks.\n \n @item\n The file ends in a character other than @code{LF} or @code{FF},\n-i.e. there is no explicit line mark or page mark at the end of the file.\n+i.e.@: there is no explicit line mark or page mark at the end of the file.\n @end itemize\n \n Text_IO can be used to read such non-standard text files but subprograms\n@@ -9378,7 +9378,7 @@ the file.\n @code{Ada.Text_IO} has a definition of current position for a file that\n is being read. No internal buffering occurs in Text_IO, and usually the\n physical position in the stream used to implement the file corresponds\n-to this logical position defined by Text_IO. There are two exceptions:\n+to this logical position defined by Text_IO@. There are two exceptions:\n \n @itemize @bullet\n @item\n@@ -9443,10 +9443,10 @@ above they will not be treated as page marks on input if the output is\n piped to another Ada program.\n \n Another important discrepancy when reading non-regular files is that the end\n-of file indication is not \"sticky\". If an end of file is entered, e.g. by\n+of file indication is not \"sticky\". If an end of file is entered, e.g.@: by\n pressing the @code{EOT} key,\n then end of file\n-is signalled once (i.e. the test @code{End_Of_File}\n+is signalled once (i.e.@: the test @code{End_Of_File}\n will yield @code{True}, or a read will\n raise @code{End_Error}), but then reading can resume\n to read data past that end of\n@@ -9602,7 +9602,7 @@ example, ESC A345 is used to represent the wide character with code\n \n @item Upper Half Coding\n The wide character with encoding 16#abcd#, where the upper bit is on\n-(i.e. a is in the range 8-F) is represented as two bytes 16#ab# and\n+(i.e.@: a is in the range 8-F) is represented as two bytes 16#ab# and\n 16#cd#. The second byte may never be a format control character, but is\n not required to be in the upper half. This method can be also used for\n shift-JIS or EUC where the internal coding matches the external coding. \n@@ -9657,7 +9657,7 @@ example, @code{[\"A345\"]} is used to represent the wide character with code\n @code{16#A345#}.\n This scheme is compatible with use of the full Wide_Character set.\n On input, brackets coding can also be used for upper half characters,\n-e.g. @code{[\"C1\"]} for lower case a. However, on output, brackets notation\n+e.g.@: @code{[\"C1\"]} for lower case a. However, on output, brackets notation\n is only used for wide characters with a code greater than @code{16#FF#}.\n \n @end table\n@@ -9683,7 +9683,7 @@ of stream pointer positioning (@pxref{Text_IO}). There is one additional\n case:\n \n If @code{Ada.Wide_Text_IO.Look_Ahead} reads a character outside the\n-normal lower ASCII set (i.e. a character in the range:\n+normal lower ASCII set (i.e.@: a character in the range:\n \n @smallexample\n Wide_Character'Val (16#0080#) .. Wide_Character'Val (16#FFFF#)\n@@ -9811,7 +9811,7 @@ translation refers to the mapping of CR/LF sequences in an external file\n to LF characters internally. This mapping only occurs in DOS and\n DOS-like systems, and is not relevant to other systems.\n \n-A special case occurs with Stream_IO. As shown in the above table, the\n+A special case occurs with Stream_IO@. As shown in the above table, the\n file is initially opened in @samp{r} or @samp{w} mode for the\n @code{In_File} and @code{Out_File} cases. If a @code{Set_Mode} operation\n subsequently requires switching from reading to writing or vice-versa,\n@@ -10330,7 +10330,7 @@ C @code{timeval} format.\n This package implements the CRC-32 algorithm. For a full description\n of this algorithm you should have a look at:\n \"Computation of Cyclic Redundancy Checks via Table Look-Up\", Communications\n-of the ACM, Vol. 31 No. 8, pp.1008-1013 Aug. 1988. Sarwate, D.V.\n+of the ACM, Vol.@: 31 No.@: 8, pp.1008-1013 Aug.@: 1988. Sarwate, D.V@.\n \n @noindent\n Provides an extended capability for formatted output of time values with\n@@ -10465,8 +10465,8 @@ It allows you to easily spawn and communicate with an external process.\n You can send commands or inputs to the process, and compare the output\n with some expected regular expression.\n Currently GNAT.Expect is implemented on all native GNAT ports except for\n-OpenVMS. It is not implemented for cross ports, and in particular is not\n-implemented for VxWorks or LynxOS.\n+OpenVMS@. It is not implemented for cross ports, and in particular is not\n+implemented for VxWorks or LynxOS@.\n \n @node GNAT.Float_Control (g-flocon.ads)\n @section GNAT.Float_Control (g-flocon.ads)\n@@ -10607,8 +10607,8 @@ Henry Spencer (and binary compatible with this C library).\n A high level and portable interface to develop sockets based applications.\n This package is based on the sockets thin binding found in GNAT.Sockets.Thin.\n Currently GNAT.Sockets is implemented on all native GNAT ports except for\n-OpenVMS. It is not implemented for cross ports, and in particular is not\n-implemented for VxWorks or LynxOS.\n+OpenVMS@. It is not implemented for cross ports, and in particular is not\n+implemented for VxWorks or LynxOS@.\n \n @node GNAT.Source_Info (g-souinf.ads)\n @section GNAT.Source_Info (g-souinf.ads)\n@@ -10966,7 +10966,7 @@ This is the longest floating-point type supported by the hardware.\n Ada enumeration types map to C enumeration types directly if pragma\n @code{Convention C} is specified, which causes them to have int\n length. Without pragma @code{Convention C}, Ada enumeration types map to\n-8, 16, or 32 bits (i.e. C types signed char, short, int respectively)\n+8, 16, or 32 bits (i.e.@: C types signed char, short, int respectively)\n depending on the number of values passed. This is the only case in which\n pragma @code{Convention C} affects the representation of an Ada type.\n \n@@ -11092,7 +11092,7 @@ Asm (\"fsinx %1 %0\",\n @end smallexample\n \n The first argument to @code{Asm} is the assembler template, and is\n-identical to what is used in GNU CC. This string must be a static\n+identical to what is used in GNU CC@. This string must be a static\n expression.  The second argument is the output operand list. It is\n either a single @code{Asm_Output} attribute reference, or a list of such\n references enclosed in parentheses (technically an array aggregate of\n@@ -11102,7 +11102,7 @@ The @code{Asm_Output} attribute denotes a function that takes two\n parameters.  The first is a string, the second is the name of a variable\n of the type designated by the attribute prefix. The first (string)\n argument is required to be a static expression and designates the\n-constraint for the parameter (e.g. what kind of register is\n+constraint for the parameter (e.g.@: what kind of register is\n required). The second argument is the variable to be updated with the\n result. The possible values for constraint are the same as those used in\n the RTL, and are dependent on the configuration file used to build the\n@@ -11122,7 +11122,7 @@ The @code{Asm_Input} attribute denotes a function that takes two\n parameters.  The first is a string, the second is an expression of the\n type designated by the prefix. The first (string) argument is required\n to be a static expression, and is the constraint for the parameter,\n-(e.g. what kind of register is required). The second argument is the\n+(e.g.@: what kind of register is required). The second argument is the\n value to be used as the input argument. The possible values for the\n constant are the same as those used in the RTL, and are dependent on\n the configuration file used to built the GCC back end.\n@@ -11208,21 +11208,21 @@ GNAT run-time system comprises two layers:\n @end itemize\n \n In GNAT, Ada's tasking services rely on a platform and OS independent\n-layer known as GNARL. This code is responsible for implementing the\n+layer known as GNARL@. This code is responsible for implementing the\n correct semantics of Ada's task creation, rendezvous, protected\n operations etc.\n \n GNARL decomposes Ada's tasking semantics into simpler lower level\n operations such as create a thread, set the priority of a thread,\n yield, create a lock, lock/unlock, etc. The spec for these low-level\n operations constitutes GNULLI, the GNULL Interface. This interface is\n-directly inspired from the POSIX real-time API.\n+directly inspired from the POSIX real-time API@.\n \n If the underlying executive or OS implements the POSIX standard\n faithfully, the GNULL Interface maps as is to the services offered by\n the underlying kernel. Otherwise, some target dependent glue code maps\n the services offered by the underlying kernel to the semantics expected\n-by GNARL.\n+by GNARL@.\n \n Whatever the underlying OS (VxWorks, UNIX, OS/2, Windows NT, etc.) the\n key point is that each Ada task is mapped on a thread in the underlying \n@@ -11564,7 +11564,7 @@ Numeric_Error case (since even in Ada 83, a compiler was free to raise\n Constraint_Error in place of Numeric_Error in all cases).\n \n @item Indefinite subtypes in generics\n-In Ada 83, it was permissible to pass an indefinite type (e.g. String) as\n+In Ada 83, it was permissible to pass an indefinite type (e.g.@: String) as\n the actual for a generic formal private type, but then the instantiation\n would be illegal if there were any instances of declarations of variables\n of this type in the generic body. In Ada 95, to avoid this clear violation\n@@ -11595,7 +11595,7 @@ implementation defined features of Ada 95, as documented in the Ada 95\n reference manual, there should be a high degree of portability between\n GNAT and other Ada 95 systems. The following are specific items which\n have proved troublesome in moving GNAT programs to other Ada 95\n-compilers, but do not affect porting code to GNAT.\n+compilers, but do not affect porting code to GNAT@.\n \n @table @asis\n @item Ada 83 Pragmas and Attributes\n@@ -11646,7 +11646,7 @@ types, and the Ada design intends to avoid this possibility.\n Subsequent AI's were issued to make it clear that such implicit\n change of representation in response to a Size clause is inadvisable,\n and this recommendation is represented explicitly in the Ada 95 RM\n-as implementation advice that is followed by GNAT.\n+as implementation advice that is followed by GNAT@.\n The problem will show up as an error\n message rejecting the size clause. The fix is simply to provide\n the explicit pragma Pack, or for more fine tuned control, provide\n@@ -11748,7 +11748,7 @@ point of this definition is to deal with a call like:\n @noindent\n Normally, according to the Ada 83 standard, one would expect this to be\n ambiguous, since it matches both the INTEGER and UNSIGNED_LONGWORD forms\n-of TO_ADDRESS. However, in DEC Ada 83, there is no ambiguity, since the\n+of TO_ADDRESS@. However, in DEC Ada 83, there is no ambiguity, since the\n definition using universal_integer takes precedence.\n \n In GNAT, since the version with universal_integer cannot be supplied, it is\n@@ -11768,7 +11768,7 @@ pragma Pure_Function (To_Address_Long);\n \n @noindent\n This means that programs using TO_ADDRESS for UNSIGNED_LONGWORD must\n-change the name to TO_ADDRESS_LONG.\n+change the name to TO_ADDRESS_LONG@.\n \n @item Task_Id values\n The Task_Id values assigned will be different in the two systems, and GNAT"}]}