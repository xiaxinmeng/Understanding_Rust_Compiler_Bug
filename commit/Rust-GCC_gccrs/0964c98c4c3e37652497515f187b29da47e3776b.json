{"sha": "0964c98c4c3e37652497515f187b29da47e3776b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2NGM5OGM0YzNlMzc2NTI0OTc1MTVmMTg3YjI5ZGE0N2UzNzc2Yg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-07-03T20:15:48Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-07-03T20:15:48Z"}, "message": "fnptr-by-value-1_main.c: New file.\n\n\t* gcc.dg/compat/fnptr-by-value-1_main.c: New file.\n\t* gcc.dg/compat/fnptr-by-value-1_x.c: New file.\n\t* gcc.dg/compat/fnptr-by-value-1_y.c: New file.\n\t* gcc.dg/compat/struct-align-1.h: New file.\n\t* gcc.dg/compat/struct-align-1_main.c: New file.\n\t* gcc.dg/compat/struct-align-1_x.c: New file.\n\t* gcc.dg/compat/struct-align-1_y.c: New file.\n\t* gcc.dg/compat/struct-align-2.h: New file.\n\t* gcc.dg/compat/struct-align-2_main.c: New file.\n\t* gcc.dg/compat/struct-align-2_x.c: New file.\n\t* gcc.dg/compat/struct-align-2_y.c: New file.\n\nFrom-SVN: r68901", "tree": {"sha": "a1c5a32eb63210e8677c4860fe70c46dac0d598f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1c5a32eb63210e8677c4860fe70c46dac0d598f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0964c98c4c3e37652497515f187b29da47e3776b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0964c98c4c3e37652497515f187b29da47e3776b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0964c98c4c3e37652497515f187b29da47e3776b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0964c98c4c3e37652497515f187b29da47e3776b/comments", "author": null, "committer": null, "parents": [{"sha": "c3427c7d9da7c93127f1c37aa57ce32569647af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3427c7d9da7c93127f1c37aa57ce32569647af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3427c7d9da7c93127f1c37aa57ce32569647af2"}], "stats": {"total": 902, "additions": 902, "deletions": 0}, "files": [{"sha": "65fd1712912ff5b3db031a8a31694930f6ddbac8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -1,5 +1,17 @@\n 2003-07-03  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* gcc.dg/compat/fnptr-by-value-1_main.c: New file.\n+\t* gcc.dg/compat/fnptr-by-value-1_x.c: New file.\n+\t* gcc.dg/compat/fnptr-by-value-1_y.c: New file.\n+\t* gcc.dg/compat/struct-align-1.h: New file.\n+\t* gcc.dg/compat/struct-align-1_main.c: New file.\n+\t* gcc.dg/compat/struct-align-1_x.c: New file.\n+\t* gcc.dg/compat/struct-align-1_y.c: New file.\n+\t* gcc.dg/compat/struct-align-2.h: New file.\n+\t* gcc.dg/compat/struct-align-2_main.c: New file.\n+\t* gcc.dg/compat/struct-align-2_x.c: New file.\n+\t* gcc.dg/compat/struct-align-2_y.c: New file.\n+\n \t* gcc.dg/compat/compat-common.h (DEBUG_FINI): New.\n \t* gcc.dg/compat/scalar-by-value-1_x.c: Use it.\n \t* gcc.dg/compat/scalar-by-value-2_x.c: Ditto."}, {"sha": "35c94aaea6897dbe0b60b3ef159ce4e17a1e4f52", "filename": "gcc/testsuite/gcc.dg/compat/fnptr-by-value-1_main.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_main.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,12 @@\n+/* Test passing function pointers.  */\n+\n+extern void fnptr_by_value_1_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  fnptr_by_value_1_x ();\n+  exit (0);\n+}"}, {"sha": "d6984fc2005d3b383bce40368cfbfde90a76fec9", "filename": "gcc/testsuite/gcc.dg/compat/fnptr-by-value-1_x.c", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_x.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,162 @@\n+#include \"compat-common.h\"\n+\n+/* Turn off checking for variable arguments with -DSKIPVA.  */\n+#ifdef SKIPVA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+typedef void (*fpi)(int);\n+typedef void (*fpd)(double);\n+\n+extern void test1a (fpi);\n+extern void test1b (fpi, int);\n+extern void test1c (double, fpd);\n+extern void test2a (fpi, fpd);\n+extern void test2b (fpi, fpd, int);\n+extern void test2c (fpi, int, fpd);\n+extern void test2d (int, fpi, fpd);\n+extern void test2e (fpi, fpd, int, double);\n+extern void test2f (fpi, int, fpd, double);\n+extern void test2g (fpi, int, double, fpd);\n+extern void test2h (double, fpd, fpi, int);\n+extern void test2i (double, fpd, int, fpi);\n+extern void test2j (int, double, fpi, fpd);\n+\n+int f1_val;\n+double f2_val;\n+\n+void f1 (int i) { f1_val = i; }\n+void f2 (double x) { f2_val = x; }\n+\n+void\n+checki (int x, int v)\n+{\n+  if (x != v)\n+    DEBUG_CHECK\n+}\n+\n+void\n+checkd (double x, double v)\n+{\n+  if (x != v)\n+    DEBUG_CHECK\n+}\n+\n+void\n+testit (void)\n+{\n+  DEBUG_FPUTS (\"test1a: \");\n+  test1a (f1);\n+  checki (f1_val, 1);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test1b: \");\n+  test1b (f1, 2);\n+  checki (f1_val, 2);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test1c: \");\n+  test1c (3.0, f2);\n+  checkd (f2_val, 3.0);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2a: \");\n+  test2a (f1, f2);\n+  checki (f1_val, 10);\n+  checkd (f2_val, 10.0);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2b: \");\n+  test2b (f1, f2, 11);\n+  checki (f1_val, 11);\n+  checkd (f2_val, 11.0);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2c: \");\n+  test2c (f1, 12, f2);\n+  checki (f1_val, 12);\n+  checkd (f2_val, 12.0);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2d: \");\n+  test2d (13, f1, f2);\n+  checki (f1_val, 13);\n+  checkd (f2_val, 13.0);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2e: \");\n+  test2e (f1, f2, 14, 15.0);\n+  checki (f1_val, 14);\n+  checkd (f2_val, 15.0);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2f: \");\n+  test2f (f1, 16, f2, 17.0);\n+  checki (f1_val, 16);\n+  checkd (f2_val, 17.0);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2g: \");\n+  test2g (f1, 18, 19.0, f2);\n+  checki (f1_val, 18);\n+  checkd (f2_val, 19.0);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2h: \");\n+  test2h (20.0, f2, f1, 21);\n+  checkd (f2_val, 20.0);\n+  checki (f1_val, 21);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2i: \");\n+  test2i (22.0, f2, 23, f1);\n+  checkd (f2_val, 22.0);\n+  checki (f1_val, 23);\n+  DEBUG_NL;\n+  DEBUG_FPUTS (\"test2j: \");\n+  test2j (24, 25.0, f1, f2);\n+  checki (f1_val, 24);\n+  checkd (f2_val, 25.0);\n+  if (test_va)\n+    {\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"testva: \");\n+      testva (1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (2, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (3, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (4, f1, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (5, f1, f1, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (6, f1, f1, f1, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (7, f1, f1, f1, f1, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (8, f1, f1, f1, f1, f1, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (9, f1, f1, f1, f1, f1, f1, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (10, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (11, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1);\n+      DEBUG_NL;\n+      DEBUG_FPUTS (\"        \");\n+      testva (12, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1);\n+    }\n+  DEBUG_NL;\n+}\n+\n+void\n+fnptr_by_value_1_x ()\n+{\n+  DEBUG_INIT\n+  testit ();\n+  DEBUG_FINI\n+\n+  if (fails != 0)\n+    abort ();\n+}"}, {"sha": "1f6917cdcba00a2329c68b0f44acf85ca4ad6fed", "filename": "gcc/testsuite/gcc.dg/compat/fnptr-by-value-1_y.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Ffnptr-by-value-1_y.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,111 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+typedef void (*fpi)(int);\n+typedef void (*fpd)(double);\n+\n+extern int f1_val;\n+extern void checki (int, int);\n+\n+void\n+test1a (fpi f)\n+{\n+  (*f)(1);\n+}\n+\n+void\n+test1b (fpi f, int i)\n+{\n+  (*f)(i);\n+}\n+\n+void\n+test1c (double x, fpd f)\n+{\n+  (*f)(x);\n+}\n+\n+void\n+test2a (fpi f1, fpd f2)\n+{\n+  (*f1)(10);\n+  (*f2)(10.0);\n+}\n+\n+void\n+test2b (fpi f1, fpd f2, int i)\n+{\n+  (*f1)(i);\n+  (*f2)((double)i);\n+}\n+\n+void\n+test2c (fpi f1, int i, fpd f2)\n+{\n+  (*f1)(i);\n+  (*f2)((double)i);\n+}\n+\n+void\n+test2d (int i, fpi f1, fpd f2)\n+{\n+  (*f1)(i);\n+  (*f2)((double)i);\n+}\n+\n+void\n+test2e (fpi f1, fpd f2, int i, double x)\n+{\n+  (*f1)(i);\n+  (*f2)(x);\n+}\n+\n+void\n+test2f (fpi f1, int i, fpd f2, double x)\n+{\n+  (*f1)(i);\n+  (*f2)(x);\n+}\n+\n+void\n+test2g (fpi f1, int i, double x, fpd f2)\n+{\n+  (*f1)(i);\n+  (*f2)(x);\n+}\n+\n+void\n+test2h (double x, fpd f1, fpi f2, int i)\n+{\n+  (*f1)(x);\n+  (*f2)(i);\n+}\n+\n+void\n+test2i (double x, fpd f1, int i, fpi f2)\n+{\n+  (*f1)(x);\n+  (*f2)(i);\n+}\n+\n+void\n+test2j (int i, double x, fpi f1, fpd f2)\n+{\n+  (*f1)(i);\n+  (*f2)(x);\n+}\n+\n+void\n+testva (int n, ...)\n+{\n+  int i;\n+  va_list ap;\n+  va_start (ap, n);\n+  for (i = 0; i < n; i++)\n+    {\n+      fpi fp = va_arg (ap, fpi);\n+      (*fp)(i);\n+      checki (f1_val, i);\n+    }\n+}"}, {"sha": "5283e786f5b9224c908216e49d312521c6cb9cc2", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-1.h", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1.h?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,178 @@\n+/* Define several variants of a struct for which the alignment differs\n+   between powerpc64-linux and powerpc64-aix.  This might be interesting\n+   for other targets as well.  */\n+\n+#define DESC_orig \"original\"\n+struct B1_orig {\n+  char c;\n+  double d;\n+};\n+\n+struct A2_orig {\n+  double d;\n+};\n+\n+struct B2_orig {\n+  char c;\n+  struct A2_orig a2;\n+};\n+\n+struct A3_orig {\n+  double d;\n+  int i;\n+};\n+\n+struct B3_orig {\n+  char c;\n+  struct A3_orig a3;\n+};\n+\n+#define DESC_p_all \"packed attribute for all\"\n+struct B1_p_all {\n+  char c;\n+  double d;\n+} __attribute__ ((packed));\n+\n+struct A2_p_all {\n+  double d;\n+} __attribute__ ((packed));\n+\n+struct B2_p_all {\n+  char c;\n+  struct A2_p_all a2;\n+} __attribute__ ((packed));\n+\n+struct A3_p_all {\n+  double d;\n+  int i;\n+} __attribute__ ((packed));\n+\n+struct B3_p_all {\n+  char c;\n+  struct A3_p_all a3;\n+} __attribute__ ((packed));\n+\n+#define DESC_p_inner \"packed attribute for inner\"\n+struct B1_p_inner {\n+  char c;\n+  double d;\n+};\n+\n+struct A2_p_inner {\n+  double d;\n+} __attribute__ ((packed));\n+\n+struct B2_p_inner {\n+  char c;\n+  struct A2_p_inner a2;\n+};\n+\n+struct A3_p_inner {\n+  double d;\n+  int i;\n+} __attribute__ ((packed));\n+\n+struct B3_p_inner {\n+  char c;\n+  struct A3_p_inner a3;\n+};\n+\n+#define DESC_p_outer \"packed attribute for outer\"\n+struct B1_p_outer {\n+  char c;\n+  double d;\n+} __attribute__ ((packed));\n+\n+struct A2_p_outer {\n+  double d;\n+};\n+\n+struct B2_p_outer {\n+  char c;\n+  struct A2_p_outer a2;\n+} __attribute__ ((packed));\n+\n+struct A3_p_outer {\n+  double d;\n+  int i;\n+};\n+\n+struct B3_p_outer {\n+  char c;\n+  struct A3_p_outer a3;\n+} __attribute__ ((packed));\n+\n+#define DESC_a_max \"maximum useful struct alignment for all\"\n+struct B1_a_max {\n+  char c;\n+  double d;\n+} __attribute__ ((aligned));\n+\n+struct A2_a_max {\n+  double d;\n+} __attribute__ ((aligned));\n+\n+struct B2_a_max {\n+  char c;\n+  struct A2_a_max a2;\n+} __attribute__ ((aligned));\n+\n+struct A3_a_max {\n+  double d;\n+  int i;\n+} __attribute__ ((aligned));\n+\n+struct B3_a_max {\n+  char c;\n+  struct A3_a_max a3;\n+} __attribute__ ((aligned));\n+\n+#define DESC_m_outer_p_inner \"maximum alignment for outer, packed inner\"\n+struct B1_m_outer_p_inner {\n+  char c;\n+  double d;\n+} __attribute__ ((aligned)) __attribute__ ((packed));\n+\n+struct A2_m_outer_p_inner {\n+  double d;\n+} __attribute__ ((packed));\n+\n+struct B2_m_outer_p_inner {\n+  char c;\n+  struct A2_m_outer_p_inner a2;\n+} __attribute__ ((aligned));\n+\n+struct A3_m_outer_p_inner {\n+  double d;\n+  int i;\n+} __attribute__ ((packed));\n+\n+struct B3_m_outer_p_inner {\n+  char c;\n+  struct A3_m_outer_p_inner a3;\n+} __attribute__ ((aligned));\n+\n+#define DESC_m_inner_p_outer \"maximum alignment for inner, packed outer\"\n+struct B1_m_inner_p_outer {\n+  char c;\n+  double d;\n+} __attribute__ ((aligned)) __attribute__ ((packed));\n+\n+struct A2_m_inner_p_outer {\n+  double d;\n+} __attribute__ ((aligned));\n+\n+struct B2_m_inner_p_outer {\n+  char c;\n+  struct A2_m_inner_p_outer a2;\n+} __attribute__ ((packed));\n+\n+struct A3_m_inner_p_outer {\n+  double d;\n+  int i;\n+} __attribute__ ((aligned));\n+\n+struct B3_m_inner_p_outer {\n+  char c;\n+  struct A3_m_inner_p_outer a3;\n+} __attribute__ ((packed));"}, {"sha": "0b7f27bead0d958cead1b94e222549fef8d95279", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-1_main.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_main.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,13 @@\n+/* Test compatibility of structure layout and alignment for structs\n+   which contain doubles.  The original structs here are from PR 10645.  */\n+\n+extern void struct_align_1_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_align_1_x ();\n+  exit (0);\n+}"}, {"sha": "1500fa757058db316c26099be8ec5ff6a6f62a03", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-1_x.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_x.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,91 @@\n+#include \"compat-common.h\"\n+#include \"struct-align-1.h\"\n+\n+#define SETUP(NAME,V1,V2,V3)\t\t\t\t\\\n+char v1_##NAME = V1;\t\t\t\t\t\\\n+double v2_##NAME = V2;\t\t\t\t\t\\\n+int v3_##NAME = V3;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+struct B1_##NAME b1_##NAME = { V1, V2 };\t\t\\\n+struct B2_##NAME b2_##NAME = { V1, { V2 } };\t\t\\\n+struct B3_##NAME b3_##NAME = { V1, { V2, V3 } };\t\\\n+\t\t\t\t\t\t\t\\\n+struct B1_##NAME ab1_##NAME[2] =\t\t\t\\\n+  { { V1, V2 }, { V1, V2 } };\t\t\t\t\\\n+struct B2_##NAME ab2_##NAME[2] =\t\t\t\\\n+  { { V1, { V2 } }, { V1, { V2 } } };\t\t\t\\\n+struct B3_##NAME ab3_##NAME[2] =\t\t\t\\\n+  { { V1, { V2, V3 } }, { V1, { V2, V3 } } };\t\t\\\n+\t\t\t\t\t\t\t\\\n+extern void test_##NAME (void);\t\t\t\t\\\n+extern void checkp1_##NAME (struct B1_##NAME *);\t\\\n+extern void checkp2_##NAME (struct B2_##NAME *);\t\\\n+extern void checkp3_##NAME (struct B3_##NAME *);\t\\\n+extern void checkg1_##NAME (void);\t\t\t\\\n+extern void checkg2_##NAME (void);\t\t\t\\\n+extern void checkg3_##NAME (void);\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\\\n+pass1_##NAME (struct B1_##NAME s)\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  checkp1_##NAME (&s);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\\\n+pass2_##NAME (struct B2_##NAME s)\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  checkp2_##NAME (&s);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\\\n+pass3_##NAME (struct B3_##NAME s)\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  checkp3_##NAME (&s);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+struct B1_##NAME\t\t\t\t\t\\\n+return1_##NAME (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  return ab1_##NAME[0];\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+struct B2_##NAME\t\t\t\t\t\\\n+return2_##NAME (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  return ab2_##NAME[0];\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+struct B3_##NAME\t\t\t\t\t\\\n+return3_##NAME (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  return ab3_##NAME[0];\t\t\t\t\t\\\n+}\n+\n+#define CHECK(NAME) test_##NAME()\n+\n+SETUP (orig, 49, 1.0, 111111)\n+SETUP (p_all, 50, 2.0, 222222)\n+SETUP (p_inner, 51, 3.0, 333333)\n+SETUP (p_outer, 52, 4.0, 444444)\n+SETUP (a_max, 53, 5.0, 555555)\n+SETUP (m_outer_p_inner, 54, 6.0, 666666)\n+SETUP (m_inner_p_outer, 55, 7.0, 777777) \n+\n+void\n+struct_align_1_x (void)\n+{\n+  DEBUG_INIT\n+\n+  CHECK (orig);\n+  CHECK (p_all);\n+  CHECK (p_inner);\n+  CHECK (p_outer);\n+  CHECK (a_max);\n+  CHECK (m_outer_p_inner);\n+  CHECK (m_inner_p_outer);\n+\n+  DEBUG_FINI\n+\n+  if (fails != 0)\n+    abort ();\n+}"}, {"sha": "744f4de6f2840438448ed137e541ef168807da4e", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-1_y.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_y.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,88 @@\n+#include \"compat-common.h\"\n+#include \"struct-align-1.h\"\n+\n+#define TEST(NAME)\t\t\t\t\t\t\\\n+extern char v1_##NAME;\t\t\t\t\t\t\\\n+extern double v2_##NAME;\t\t\t\t\t\\\n+extern int v3_##NAME;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern struct B1_##NAME b1_##NAME, ab1_##NAME[2];\t\t\\\n+extern struct B2_##NAME b2_##NAME, ab2_##NAME[2];\t\t\\\n+extern struct B3_##NAME b3_##NAME, ab3_##NAME[2];\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void pass1_##NAME (struct B1_##NAME);\t\t\t\\\n+extern void pass2_##NAME (struct B2_##NAME);\t\t\t\\\n+extern void pass3_##NAME (struct B3_##NAME);\t\t\t\\\n+extern struct B1_##NAME return1_##NAME (void);\t\t\t\\\n+extern struct B2_##NAME return2_##NAME (void);\t\t\t\\\n+extern struct B3_##NAME return3_##NAME (void);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkp1_##NAME (struct B1_##NAME *p)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (p->c != v1_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+  if (p->d != v2_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkp2_##NAME (struct B2_##NAME *p)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (p->c != v1_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+  if (p->a2.d != v2_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkp3_##NAME (struct B3_##NAME *p)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (p->c != v1_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+  if (p->a3.d != v2_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+  if (p->a3.i != v3_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test_##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  struct B1_##NAME s1;\t\t\t\t\t\t\\\n+  struct B2_##NAME s2;\t\t\t\t\t\t\\\n+  struct B3_##NAME s3;\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (DESC_##NAME);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\"  global variable\");\t\t\t\t\\\n+  checkp1_##NAME (&b1_##NAME);\t\t\t\t\t\\\n+  checkp2_##NAME (&b2_##NAME);\t\t\t\t\t\\\n+  checkp3_##NAME (&b3_##NAME);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\"  global array\");\t\t\t\t\\\n+  checkp1_##NAME (&ab1_##NAME[1]);\t\t\t\t\\\n+  checkp2_##NAME (&ab2_##NAME[1]);\t\t\t\t\\\n+  checkp3_##NAME (&ab3_##NAME[1]);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\"  argument\");\t\t\t\t\t\\\n+  pass1_##NAME (b1_##NAME);\t\t\t\t\t\\\n+  pass2_##NAME (b2_##NAME);\t\t\t\t\t\\\n+  pass3_##NAME (b3_##NAME);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\"  function result\");\t\t\t\t\\\n+  s1 = return1_##NAME ();\t\t\t\t\t\\\n+  checkp1_##NAME (&s1);\t\t\t\t\t\t\\\n+  s2 = return2_##NAME ();\t\t\t\t\t\\\n+  checkp2_##NAME (&s2);\t\t\t\t\t\t\\\n+  s3 = return3_##NAME ();\t\t\t\t\t\\\n+  checkp3_##NAME (&s3);\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+TEST (orig)\n+TEST (p_all)\n+TEST (p_inner)\n+TEST (p_outer)\n+TEST (a_max)\n+TEST (m_outer_p_inner)\n+TEST (m_inner_p_outer)"}, {"sha": "c97a476c3c43bca3c0990109e7bdac6dc53815d5", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-2.h", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2.h?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,73 @@\n+/* Define several variants of struct epoll_event from the Linux kernel,\n+   specifying various attributes that affect alignment and size.\n+ \n+   This test was developed for systems for which int is 32 bits and\n+   long long is 64 bits; it might need to be disabled for systems where\n+   either of those is not true.  */\n+\n+#define DESC_orig \"original\"\n+struct epoll_event_orig {\n+  unsigned int events;\n+  unsigned long long data;\n+};\n+\n+#define DESC_structmax \"maximum useful struct alignment\"\n+struct epoll_event_structmax {\n+  unsigned int events;\n+  unsigned long long data;\n+} __attribute__ ((aligned));\n+\n+\n+#define DESC_struct4 \"4-byte struct alignment\"\n+struct epoll_event_struct4 {\n+  unsigned int events;\n+  unsigned long long data;\n+} __attribute__ ((aligned(4)));\n+\n+#define DESC_struct8 \"8-byte struct alignment\"\n+struct epoll_event_struct8 {\n+  unsigned int events;\n+  unsigned long long data;\n+} __attribute__ ((aligned(8)));\n+\n+#define DESC_data4 \"4-byte alignment for data\"\n+struct epoll_event_data4 {\n+  unsigned int events;\n+  unsigned long long data __attribute__ ((aligned(4)));\n+};\n+\n+#define DESC_data8 \"8-byte alignment for data\"\n+struct epoll_event_data8 {\n+  unsigned int events;\n+  unsigned long long data __attribute__ ((aligned(8)));\n+};\n+\n+#define DESC_p \"packed attribute\"\n+struct epoll_event_p {\n+  unsigned int events;\n+  unsigned long long data;\n+} __attribute__ ((packed));\n+\n+#define DESC_pstruct4 \"packed attribute, 4-byte struct alignment\"\n+struct epoll_event_pstruct4 {\n+  unsigned int events;\n+  unsigned long long data;\n+} __attribute__ ((packed)) __attribute__ ((aligned(4)));\n+\n+#define DESC_pstruct8 \"packed attribute, 8-byte struct alignment\"\n+struct epoll_event_pstruct8 {\n+  unsigned int events;\n+  unsigned long long data;\n+} __attribute__ ((packed)) __attribute__ ((aligned(8)));\n+\n+#define DESC_pdata4 \"packed attribute, 4-byte alignment for data\"\n+struct epoll_event_pdata4 {\n+  unsigned int events;\n+  unsigned long long data __attribute__ ((aligned(4)));\n+} __attribute__ ((packed));\n+\n+#define DESC_pdata8 \"packed attribute, 8-byte alignment for data\"\n+struct epoll_event_pdata8 {\n+  unsigned int events;\n+  unsigned long long data __attribute__ ((aligned(8)));\n+} __attribute__ ((packed));"}, {"sha": "b1dece1b7294b248e1f95f6caf7a87cee57d82da", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-2_main.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_main.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,14 @@\n+/* Test compatibility of structure layout and alignment for a struct\n+   containing an int and a long long, with various combinations of\n+   packed and aligned attributes.  The struct is from the Linux kernel.  */\n+\n+extern void struct_align_2_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_align_2_x ();\n+  exit (0);\n+}"}, {"sha": "e59cec3f1eba7e0927c6373cbb959a4a90fdf99c", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-2_x.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_x.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,79 @@\n+/* Disable this test for 16-bit targets.  */\n+\n+#if __INT_MAX__ > 32767\n+\n+#include \"compat-common.h\"\n+#include \"struct-align-2.h\"\n+\n+#define SETUP(NAME,V1,V2,V3)\t\t\t\t\t\\\n+struct outer_##NAME {\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  struct epoll_event_##NAME ee;\t\t\t\t\t\\\n+};\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+unsigned int v1_##NAME = V1;\t\t\t\t\t\\\n+unsigned int v2_##NAME = V2;\t\t\t\t\t\\\n+unsigned long long v3_##NAME = V3;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+struct outer_##NAME s_##NAME[2] =\t\t\t\t\\\n+ { {V1, { V2, V3 } }, { V1, { V2, V3 } } };\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void test_##NAME (void);\t\t\t\t\t\\\n+extern void checkp_##NAME (struct outer_##NAME *);\t\t\\\n+extern void checkg_##NAME (void);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+pass_##NAME (struct outer_##NAME s)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  checkp_##NAME (&s);\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+struct outer_##NAME\t\t\t\t\t\t\\\n+return_##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return s_##NAME[0];\t\t\t\t\t\t\\\n+}\n+\n+#define CHECK(NAME)\t\t\t\t\t\t\\\n+  test_##NAME()\n+\n+SETUP (orig,101, 102, 0x0101010101010101ULL)\n+SETUP (structmax, 103, 104, 0x1212121212121212ULL)\n+SETUP (struct4, 105, 106, 0x2323232323232323ULL)\n+SETUP (struct8, 107, 108, 0x3434343434343434ULL)\n+SETUP (data4, 109, 110, 0x4545454545454545ULL)\n+SETUP (data8, 111, 112, 0x5656565656565656ULL)\n+SETUP (p, 113, 114, 0x6767676767676767ULL)\n+SETUP (pstruct4, 115, 116, 0x7878787878787878ULL)\n+SETUP (pstruct8, 117, 118, 0x8989898989898989ULL)\n+SETUP (pdata4, 119, 120, 0x9A9A9A9A9A9A9A9AULL)\n+SETUP (pdata8, 121, 122, 0xABABABABABABABABULL)\n+\n+void\n+struct_align_2_x (void)\n+{\n+  DEBUG_INIT\n+\n+  CHECK (orig);\n+  CHECK (structmax);\n+  CHECK (struct4);\n+  CHECK (struct8);\n+  CHECK (data4);\n+  CHECK (data8);\n+  CHECK (p);\n+  CHECK (pstruct4);\n+  CHECK (pstruct8);\n+  CHECK (pdata4);\n+  CHECK (pdata8);\n+\n+  DEBUG_FINI\n+\n+  if (fails != 0)\n+    abort ();\n+}\n+\n+#else\n+\n+void struct_align_2_x (void) {}\n+\n+#endif  /* __INT_MAX__ */"}, {"sha": "0a5ec6ef31d11d021f21725aae7425c49e6b995e", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-2_y.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0964c98c4c3e37652497515f187b29da47e3776b/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-2_y.c?ref=0964c98c4c3e37652497515f187b29da47e3776b", "patch": "@@ -0,0 +1,69 @@\n+/* Disable this test for 16-bit targets.  */\n+\n+#if __INT_MAX__ > 32767\n+\n+#include \"compat-common.h\"\n+#include \"struct-align-2.h\"\n+\n+#define TEST(NAME)\t\t\t\t\t\t\\\n+struct outer_##NAME {\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  struct epoll_event_##NAME ee;\t\t\t\t\t\\\n+};\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern unsigned int v1_##NAME;\t\t\t\t\t\\\n+extern unsigned int v2_##NAME;\t\t\t\t\t\\\n+extern unsigned long long v3_##NAME;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern struct outer_##NAME s_##NAME[2];\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void pass_##NAME (struct outer_##NAME);\t\t\t\\\n+extern struct outer_##NAME return_##NAME (void);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkp_##NAME (struct outer_##NAME *p)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (p->i != v1_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+  if (p->ee.events != v2_##NAME)\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+  if (p->ee.data != v3_##NAME)\t\t\t\t\t\\\n+    DEBUG_CHECK;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test_##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  struct outer_##NAME s;\t\t\t\t\t\\\n+  DEBUG_FPUTS (DESC_##NAME);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\"  global array\");\t\t\t\t\\\n+  checkp_##NAME (&s_##NAME[0]);\t\t\t\t\t\\\n+  checkp_##NAME (&s_##NAME[1]);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\"  argument\");\t\t\t\t\t\\\n+  pass_##NAME (s_##NAME[0]);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\"  function result\");\t\t\t\t\\\n+  s = return_##NAME ();\t\t\t\t\t\t\\\n+  checkp_##NAME (&s);\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+TEST (orig)\n+TEST (structmax)\n+TEST (struct4)\n+TEST (struct8)\n+TEST (data4)\n+TEST (data8)\n+TEST (p)\n+TEST (pstruct4)\n+TEST (pstruct8)\n+TEST (pdata4)\n+TEST (pdata8)\n+\n+#else\n+\n+int i;  /* prevent compiling an empty file */\n+\n+#endif  /* __INT_MAX__ */"}]}