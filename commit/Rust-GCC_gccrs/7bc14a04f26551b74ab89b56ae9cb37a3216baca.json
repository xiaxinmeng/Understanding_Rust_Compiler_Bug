{"sha": "7bc14a04f26551b74ab89b56ae9cb37a3216baca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JjMTRhMDRmMjY1NTFiNzRhYjg5YjU2YWU5Y2IzN2EzMjE2YmFjYQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2012-04-11T11:51:50Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2012-04-11T11:51:50Z"}, "message": "re PR target/16458 (PowerPC - redundant compare)\n\ngcc/\n\tPR target/16458\n\t* rtlanal.c (unsigned_reg_p): New function.\n\tUpdate copyright notice dates.\n\t* rtl.h (unsigned_reg_p): Prototype it.\n\tUpdate copyright notice dates.\n\t* config/rs6000/rs6000.c (rs6000_generate_compare): Use it.\n\tUpdate comment.\n\t* expr.c (expand_expr_real_1): Set register attributes.\n\t* stmt.c (expand_case): Likewise.\n\ngcc/testsuite/\n\tPR target/16458\n\t* gcc.target/powerpc/pr16458-1.c: New test.\n\t* gcc.target/powerpc/pr16458-2.c: Likewise.\n\t* gcc.target/powerpc/pr16458-3.c: Likewise.\n\t* gcc.target/powerpc/pr16458-4.c: Likewise.\n\nCo-Authored-By: Michael Matz <matz@suse.de>\n\nFrom-SVN: r186312", "tree": {"sha": "6e7eefc3eddd1af4ac56297fa67f1bdc9071dae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e7eefc3eddd1af4ac56297fa67f1bdc9071dae9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bc14a04f26551b74ab89b56ae9cb37a3216baca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc14a04f26551b74ab89b56ae9cb37a3216baca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bc14a04f26551b74ab89b56ae9cb37a3216baca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc14a04f26551b74ab89b56ae9cb37a3216baca/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c2a3f3b6cc7bc38af483ac4923258d376f90954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2a3f3b6cc7bc38af483ac4923258d376f90954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2a3f3b6cc7bc38af483ac4923258d376f90954"}], "stats": {"total": 192, "additions": 180, "deletions": 12}, "files": [{"sha": "79193e7be444176e35fed17af01a5b3ee3dbe9b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -1,3 +1,16 @@\n+2012-04-11  Peter Bergner  <bergner@vnet.ibm.com>\n+\t    Michael Matz  <matz@suse.de>\n+\n+\tPR target/16458\n+\t* rtlanal.c (unsigned_reg_p): New function.\n+\tUpdate copyright notice dates.\n+\t* rtl.h (unsigned_reg_p): Prototype it.\n+\tUpdate copyright notice dates.\n+\t* config/rs6000/rs6000.c (rs6000_generate_compare): Use it.\n+\tUpdate comment.\n+\t* expr.c (expand_expr_real_1): Set register attributes.\n+\t* stmt.c (expand_case): Likewise.\n+\n 2012-04-11  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/50751"}, {"sha": "d053931d85b838bf0a94c8f624961a71a342f3fd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -15561,14 +15561,11 @@ rs6000_generate_compare (rtx cmp, enum machine_mode mode)\n \t   || code == GEU || code == LEU)\n     comp_mode = CCUNSmode;\n   else if ((code == EQ || code == NE)\n-\t   && GET_CODE (op0) == SUBREG\n-\t   && GET_CODE (op1) == SUBREG\n-\t   && SUBREG_PROMOTED_UNSIGNED_P (op0)\n-\t   && SUBREG_PROMOTED_UNSIGNED_P (op1))\n+\t   && unsigned_reg_p (op0)\n+\t   && (unsigned_reg_p (op1)\n+\t       || (CONST_INT_P (op1) && INTVAL (op1) != 0)))\n     /* These are unsigned values, perhaps there will be a later\n-       ordering compare that can be shared with this one.\n-       Unfortunately we cannot detect the signedness of the operands\n-       for non-subregs.  */\n+       ordering compare that can be shared with this one.  */\n     comp_mode = CCUNSmode;\n   else\n     comp_mode = CCmode;"}, {"sha": "14709bfcd082981f599296ce1d9b7769a802a496", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -9015,8 +9015,13 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  && stmt_is_replaceable_p (SSA_NAME_DEF_STMT (exp)))\n \tg = SSA_NAME_DEF_STMT (exp);\n       if (g)\n-\treturn expand_expr_real (gimple_assign_rhs_to_tree (g), target, tmode,\n-\t\t\t\t modifier, NULL);\n+\t{\n+\t  rtx r = expand_expr_real (gimple_assign_rhs_to_tree (g), target,\n+\t\t\t\t    tmode, modifier, NULL);\n+\t  if (REG_P (r) && !REG_EXPR (r))\n+\t    set_reg_attrs_for_decl_rtl (SSA_NAME_VAR (exp), r);\n+\t  return r;\n+\t}\n \n       ssa_name = exp;\n       decl_rtl = get_rtx_for_ssa_name (ssa_name);"}, {"sha": "4d5d6d88990a41c03a9575bcbed5d4189307a372", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -1,6 +1,6 @@\n /* Register Transfer Language (RTL) definitions for GCC\n    Copyright (C) 1987, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1909,6 +1909,7 @@ extern HOST_WIDE_INT get_integer_term (const_rtx);\n extern rtx get_related_value (const_rtx);\n extern bool offset_within_block_p (const_rtx, HOST_WIDE_INT);\n extern void split_const (rtx, rtx *, rtx *);\n+extern bool unsigned_reg_p (rtx);\n extern int reg_mentioned_p (const_rtx, const_rtx);\n extern int count_occurrences (const_rtx, const_rtx, int);\n extern int reg_referenced_p (const_rtx, const_rtx);"}, {"sha": "858264b7a03d70347a130babc590d50eb2227c53", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -1,7 +1,7 @@\n /* Analyze RTL for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011 Free Software Foundation, Inc.\n+   2011, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -635,6 +635,25 @@ count_occurrences (const_rtx x, const_rtx find, int count_dest)\n   return count;\n }\n \n+\f\n+/* Return TRUE if OP is a register or subreg of a register that\n+   holds an unsigned quantity.  Otherwise, return FALSE.  */\n+\n+bool\n+unsigned_reg_p (rtx op)\n+{\n+  if (REG_P (op)\n+      && REG_EXPR (op)\n+      && TYPE_UNSIGNED (TREE_TYPE (REG_EXPR (op))))\n+    return true;\n+\n+  if (GET_CODE (op) == SUBREG\n+      && SUBREG_PROMOTED_UNSIGNED_P (op))\n+    return true;\n+\n+  return false;\n+}\n+\n \f\n /* Nonzero if register REG appears somewhere within IN.\n    Also works if REG is not a register; in this case it checks"}, {"sha": "7aabdc2caa63cccd348470ff8b1c4bd7b9a2273b", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -2285,7 +2285,11 @@ expand_case (gimple stmt)\n \t  do_pending_stack_adjust ();\n \n \t  if (MEM_P (index))\n-\t    index = copy_to_reg (index);\n+\t    {\n+\t      index = copy_to_reg (index);\n+\t      if (TREE_CODE (index_expr) == SSA_NAME)\n+\t\tset_reg_attrs_for_decl_rtl (SSA_NAME_VAR (index_expr), index);\n+\t    }\n \n \t  /* We generate a binary decision tree to select the\n \t     appropriate target code.  This is done as follows:"}, {"sha": "fac0cb0c8bd4594f174cff243f641b7ab66d8dab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -1,3 +1,11 @@\n+2012-04-11  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/16458\n+\t* gcc.target/powerpc/pr16458-1.c: New test.\n+\t* gcc.target/powerpc/pr16458-2.c: Likewise.\n+\t* gcc.target/powerpc/pr16458-3.c: Likewise.\n+\t* gcc.target/powerpc/pr16458-4.c: Likewise.\n+\n 2012-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/builtin-bswap-1.c: Test __builtin_bswap16 & __builtin_bswap64."}, {"sha": "45b8c75c0690084bda301a8e161eaee9cdef1c79", "filename": "gcc/testsuite/gcc.target/powerpc/pr16458-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-1.c?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -0,0 +1,18 @@\n+/* Test cse'ing of unsigned compares.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* { dg-final { scan-assembler-not \"cmpw\" } } */\n+/* { dg-final { scan-assembler-times \"cmplw\" 1 } } */\n+\n+unsigned int a, b;\n+\n+int\n+foo (void)\n+{\n+  if (a == b) return 1;\n+  if (a > b)  return 2;\n+  if (a < b)  return 3;\n+  if (a != b) return 4;\n+  return 0;\n+}"}, {"sha": "95e97de5560a92dc3123644b4872600183980514", "filename": "gcc/testsuite/gcc.target/powerpc/pr16458-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-2.c?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -0,0 +1,18 @@\n+/* Test cse'ing of unsigned compares.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* { dg-final { scan-assembler-not \"cmpw\" } } */\n+/* { dg-final { scan-assembler-times \"cmplw\" 1 } } */\n+\n+unsigned int *a, *b;\n+\n+int\n+foo (void)\n+{\n+  if (*a == *b) return 1;\n+  if (*a > *b)  return 2;\n+  if (*a < *b)  return 3;\n+  if (*a != *b) return 4;\n+  return 0;\n+}"}, {"sha": "740d61dcc74f46afc522269314abff88477c50b0", "filename": "gcc/testsuite/gcc.target/powerpc/pr16458-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-3.c?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -0,0 +1,41 @@\n+/* Test cse'ing of unsigned compares.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-jump-tables\" } */\n+\n+/* { dg-final { scan-assembler-not \"cmpwi\" } } */\n+/* { dg-final { scan-assembler-times \"cmplwi\" 5 } } */\n+\n+extern int case0 (void);\n+extern int case1 (void);\n+extern int case2 (void);\n+extern int case3 (void);\n+extern int case4 (void);\n+\n+enum CASE_VALUES\n+{\n+  CASE0 = 1,\n+  CASE1,\n+  CASE2,\n+  CASE3,\n+  CASE4\n+};\n+\n+int\n+foo (enum CASE_VALUES index)\n+{\n+  switch (index)\n+    {\n+    case CASE0:\n+      return case0 ();\n+    case CASE1:\n+      return case1 ();\n+    case CASE2:\n+      return case2 ();\n+    case CASE3:\n+      return case3 ();\n+    case CASE4:\n+      return case4 ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "8db43e82384eb78769df03ff73936cad83b577c7", "filename": "gcc/testsuite/gcc.target/powerpc/pr16458-4.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc14a04f26551b74ab89b56ae9cb37a3216baca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr16458-4.c?ref=7bc14a04f26551b74ab89b56ae9cb37a3216baca", "patch": "@@ -0,0 +1,44 @@\n+/* Test cse'ing of unsigned compares.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-jump-tables\" } */\n+\n+/* The following tests fail due to an issue in expand not\n+   attaching an type expression information on *index's reg rtx.  */\n+\n+/* { dg-final { scan-assembler-not \"cmpwi\" } } */\n+/* { dg-final { scan-assembler-times \"cmplwi\" 5 } } */\n+\n+extern int case0 (void);\n+extern int case1 (void);\n+extern int case2 (void);\n+extern int case3 (void);\n+extern int case4 (void);\n+\n+enum CASE_VALUES\n+{\n+  CASE0 = 1,\n+  CASE1,\n+  CASE2,\n+  CASE3,\n+  CASE4\n+};\n+\n+int\n+foo (enum CASE_VALUES *index)\n+{\n+  switch (*index)\n+    {\n+    case CASE0:\n+      return case0 ();\n+    case CASE1:\n+      return case1 ();\n+    case CASE2:\n+      return case2 ();\n+    case CASE3:\n+      return case3 ();\n+    case CASE4:\n+      return case4 ();\n+    }\n+\n+  return 0;\n+}"}]}