{"sha": "29572b4dae9eb1605bf7bdbcc9517ca01c5297b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk1NzJiNGRhZTllYjE2MDViZjdiZGJjYzk1MTdjYTAxYzUyOTdiMQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2005-05-04T22:13:45Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2005-05-04T22:13:45Z"}, "message": "BufferCapabilities.java: Document.\n\n2005-05-04  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* java/awt/BufferCapabilities.java: Document.\n\nFrom-SVN: r99234", "tree": {"sha": "cf1e8b0f67494ad8fd952eebb6f81d546e350cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf1e8b0f67494ad8fd952eebb6f81d546e350cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29572b4dae9eb1605bf7bdbcc9517ca01c5297b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29572b4dae9eb1605bf7bdbcc9517ca01c5297b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29572b4dae9eb1605bf7bdbcc9517ca01c5297b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29572b4dae9eb1605bf7bdbcc9517ca01c5297b1/comments", "author": null, "committer": null, "parents": [{"sha": "e33e218badc5501c9061b30ec5314649ecaeeb62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33e218badc5501c9061b30ec5314649ecaeeb62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33e218badc5501c9061b30ec5314649ecaeeb62"}], "stats": {"total": 151, "additions": 140, "deletions": 11}, "files": [{"sha": "428d2fc1366baa25cdb561792fad51536e57ecae", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29572b4dae9eb1605bf7bdbcc9517ca01c5297b1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29572b4dae9eb1605bf7bdbcc9517ca01c5297b1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=29572b4dae9eb1605bf7bdbcc9517ca01c5297b1", "patch": "@@ -1,3 +1,7 @@\n+2005-05-04  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* java/awt/BufferCapabilities.java: Document.\n+\n 2005-05-04  Tom Tromey  <tromey@redhat.com>\n \n \t* java/nio/channels/FileLock.java (toString): Entirely avoid"}, {"sha": "4ff2ba98d9fd24582ccf8fd4986c10433644c76a", "filename": "libjava/java/awt/BufferCapabilities.java", "status": "modified", "additions": 136, "deletions": 11, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29572b4dae9eb1605bf7bdbcc9517ca01c5297b1/libjava%2Fjava%2Fawt%2FBufferCapabilities.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29572b4dae9eb1605bf7bdbcc9517ca01c5297b1/libjava%2Fjava%2Fawt%2FBufferCapabilities.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FBufferCapabilities.java?ref=29572b4dae9eb1605bf7bdbcc9517ca01c5297b1", "patch": "@@ -1,4 +1,4 @@\n-/* BufferCapabilities.java -- \n+/* BufferCapabilities.java -- double-buffering capabilities descriptor\n    Copyright (C) 2002, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -39,79 +39,204 @@\n package java.awt;\n \n /**\n- * Needs documentation...\n+ * A double-buffering capability descriptor.  This class exposes\n+ * details about the double-buffering algorithms used by image\n+ * buffers.\n+ *\n+ * BufferCapabilities represents algorithms that involve at least two\n+ * buffers but it can also specify so-called \"multi-buffer\" schemes\n+ * involving more than two buffers.  This class describes the\n+ * capabilities of the front and back buffers as well as the results\n+ * of \"flipping\" -- that is, what happens when an image is transferred\n+ * from the back buffer to the front buffer.\n+ *\n+ * Flipping may or may not be supported or may be supported only in\n+ * fullscreen mode.  If it is not supported then \"blitting\" is implied\n+ * -- that is, the contents of the back buffer are copied using a fast\n+ * block transfer operation from the back buffer to the front buffer.\n+ *\n+ * The front buffer is the one that is displayed.\n  *\n  * @author Eric Blake (ebb9@email.byu.edu)\n+ *\n  * @see BufferStrategy#getCapabilities()\n  * @see GraphicsConfiguration#getCapabilities()\n+ *\n  * @since 1.4\n- * @status updated to 1.4, lacks documentation\n  */\n public class BufferCapabilities implements Cloneable\n {\n+  /**\n+   * A type-safe enumeration of buffer flipping results.\n+   *\n+   * @see AttributeValue\n+   */\n   public static final class FlipContents extends AttributeValue\n   {\n+    /**\n+     * The names of the different flipping results.\n+     */\n     private static final String[] NAMES\n       = { \"undefined\", \"background\", \"prior\", \"copied\" };\n+\n+    /**\n+     * The contents of the back buffer are undefined after flipping.\n+     */\n     public static final FlipContents UNDEFINED = new FlipContents(0);\n+\n+    /**\n+     * The back buffer is cleared with the background color after\n+     * flipping.\n+     */\n     public static final FlipContents BACKGROUND = new FlipContents(1);\n+\n+    /**\n+     * The back buffer contains the pre-flipping contents of the front\n+     * buffer after flipping.  In other words a true \"flip\" has been\n+     * performed.\n+     */\n     public static final FlipContents PRIOR = new FlipContents(2);\n+\n+    /**\n+     * The back buffer has the same contents as the front buffer after\n+     * flipping.\n+     */\n     public static final FlipContents COPIED = new FlipContents(3);\n+\n+    /**\n+     * Create a new flipping result descriptor.\n+     *\n+     * @param value the enumeration value\n+     */\n     private FlipContents(int value)\n     {\n       super(value, NAMES);\n     }\n-  } // class FlipContents\n+  }\n \n+  /**\n+   * Front buffer capabilities descriptor.\n+   */\n   private final ImageCapabilities front;\n+\n+  /**\n+   * Back buffer capabilities descriptor.\n+   */\n   private final ImageCapabilities back;\n+\n+  /**\n+   * Describes the results of a \"flip\" operation.\n+   */\n   private final FlipContents flip;\n \n   /**\n    * Creates a buffer capabilities object.\n    *\n-   * @exception IllegalArgumentException If frontCaps or backCaps are null.\n+   * @param frontCaps front buffer capabilities descriptor\n+   * @param backCaps back buffer capabilities descriptor\n+   * @param flipContents the results of a flip operation or null if\n+   * flipping is not supported\n+   *\n+   * @exception IllegalArgumentException if frontCaps or backCaps is\n+   * null\n    */\n-  public BufferCapabilities(ImageCapabilities front, ImageCapabilities back,\n-                            FlipContents flip)\n+  public BufferCapabilities(ImageCapabilities frontCaps,\n+\t\t\t    ImageCapabilities backCaps,\n+                            FlipContents flipContents)\n   {\n+    if (front ==  null || back == null)\n+      throw new IllegalArgumentException();\n     this.front = front;\n     this.back = back;\n     this.flip = flip;\n-    if (front ==  null || back == null)\n-      throw new IllegalArgumentException();\n   }\n \n+  /**\n+   * Retrieve the front buffer's image capabilities.\n+   *\n+   * @return the front buffer's image capabilities\n+   */\n   public ImageCapabilities getFrontBufferCapabilities()\n   {\n     return front;\n   }\n \n+  /**\n+   * Retrieve the back buffer's image capabilities.\n+   *\n+   * @return the back buffer's image capabilities\n+   */\n   public ImageCapabilities getBackBufferCapabilities()\n   {\n     return back;\n   }\n \n+  /**\n+   * Return whether or not flipping is supported.\n+   *\n+   * @return true if flipping is supported, false otherwise\n+   */\n   public boolean isPageFlipping()\n   {\n     return flip != null;\n   }\n \n+  /**\n+   * Retrieve the result of a flipping operation.  If this method\n+   * returns null then flipping is not supported.  This implies that\n+   * \"blitting\", a fast block transfer, is used to copy the contents\n+   * of the back buffer to the front buffer.  Other possible return\n+   * values are:\n+   * <ul>\n+   *   <li><code>FlipContents.UNDEFINED</code> the contents of the\n+   *   back buffer are undefined after flipping.</li>\n+   *   <li><code>FlipContents.BACKGROUND</code> the contents of the\n+   *   back buffer are cleared to the background color after\n+   *   flipping.</li>\n+   *   <li><code>FlipContents.PRIOR</code> the back buffer contains\n+   *   the pre-flipping contents of the front * buffer after\n+   *   flipping.</li>\n+   *   <li><code>FlipContents.COPIED</code> the back buffer has the\n+   *   same contents as the front buffer after flipping.</li>\n+   * </ul>\n+   *\n+   * @return the result of a flipping operation or null if flipping is\n+   * not supported\n+   */\n   public FlipContents getFlipContents()\n   {\n     return flip;\n   }\n \n+  /**\n+   * Returns true if flipping is only supported in fullscreen mode.\n+   *\n+   * @return true if flipping is only supported in fullscreen mode,\n+   * false otherwise\n+   */\n   public boolean isFullScreenRequired()\n   {\n     return true;\n   }\n \n+  /**\n+   * Returns true if flipping can involve more than two buffers.  One\n+   * or more intermediate buffers may be available in addition to the\n+   * front and back buffers.\n+   *\n+   * @return true if there are more than two buffers available for\n+   * flipping, false otherwise\n+   */\n   public boolean isMultiBufferAvailable()\n   {\n     return false;\n   }\n \n+  /**\n+   * Clone this buffering capability descriptor.\n+   *\n+   * @return a clone of this buffer capability descriptor\n+   */\n   public Object clone()\n   {\n     try\n@@ -120,7 +245,7 @@ public Object clone()\n       }\n     catch (CloneNotSupportedException e)\n       {\n-        throw (Error) new InternalError().initCause(e); // Impossible\n+        throw (Error) new InternalError().initCause(e);\n       }\n   }\n-} // class BufferCapabilities\n+}"}]}