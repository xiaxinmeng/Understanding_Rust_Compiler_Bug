{"sha": "6010189923908501ca5b02bd1f4aee05d2283118", "node_id": "C_kwDOANBUbNoAKDYwMTAxODk5MjM5MDg1MDFjYTViMDJiZDFmNGFlZTA1ZDIyODMxMTg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-02T12:43:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-03T07:26:58Z"}, "message": "target/108738 - limit STV chain discovery\n\nThe following puts a hard limit on the inherently quadratic STV chain\ndiscovery.  Without a limit for the compiler.i testcase in PR26854\nwe see at -O2\n\n machine dep reorg                  : 574.45 ( 53%)\n\nwith release checking while with the proposed limit it's\n\n machine dep reorg                  :   2.86 (  1%)\n\n\tPR target/108738\n\t* config/i386/i386.opt (--param x86-stv-max-visits): New param.\n\t* doc/invoke.texi (--param x86-stv-max-visits): Document it.\n\t* config/i386/i386-features.h (scalar_chain::max_visits): New.\n\t(scalar_chain::build): Add bitmap parameter, return boolean.\n\t(scalar_chain::add_insn): Likewise.\n\t(scalar_chain::analyze_register_chain): Likewise.\n\t* config/i386/i386-features.cc (scalar_chain::scalar_chain):\n\tInitialize max_visits.\n\t(scalar_chain::analyze_register_chain): When we exhaust\n\tmax_visits, abort.  Also abort when running into any\n\tdisallowed insn.\n\t(scalar_chain::add_insn): Propagate abort.\n\t(scalar_chain::build): Likewise.  When aborting amend\n\tthe set of disallowed insn with the insns set.\n\t(convert_scalars_to_vector): Adjust.  Do not convert aborted\n\tchains.", "tree": {"sha": "d2d2108d9e45f2673a33fb2a5bb1c2c640124250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2d2108d9e45f2673a33fb2a5bb1c2c640124250"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6010189923908501ca5b02bd1f4aee05d2283118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6010189923908501ca5b02bd1f4aee05d2283118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6010189923908501ca5b02bd1f4aee05d2283118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6010189923908501ca5b02bd1f4aee05d2283118/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33ca5c92dfa7e2f591a838bb768d9d6eea56793b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ca5c92dfa7e2f591a838bb768d9d6eea56793b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ca5c92dfa7e2f591a838bb768d9d6eea56793b"}], "stats": {"total": 95, "additions": 70, "deletions": 25}, "files": [{"sha": "c09abf8fc2070396bde8ad7e0abf915fe012ec61", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6010189923908501ca5b02bd1f4aee05d2283118/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6010189923908501ca5b02bd1f4aee05d2283118/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=6010189923908501ca5b02bd1f4aee05d2283118", "patch": "@@ -296,6 +296,8 @@ scalar_chain::scalar_chain (enum machine_mode smode_, enum machine_mode vmode_)\n \n   n_sse_to_integer = 0;\n   n_integer_to_sse = 0;\n+\n+  max_visits = x86_stv_max_visits;\n }\n \n /* Free chain's data.  */\n@@ -354,10 +356,12 @@ scalar_chain::mark_dual_mode_def (df_ref def)\n }\n \n /* Check REF's chain to add new insns into a queue\n-   and find registers requiring conversion.  */\n+   and find registers requiring conversion.  Return true if OK, false\n+   if the analysis was aborted.  */\n \n-void\n-scalar_chain::analyze_register_chain (bitmap candidates, df_ref ref)\n+bool\n+scalar_chain::analyze_register_chain (bitmap candidates, df_ref ref,\n+\t\t\t\t      bitmap disallowed)\n {\n   df_link *chain;\n   bool mark_def = false;\n@@ -371,6 +375,9 @@ scalar_chain::analyze_register_chain (bitmap candidates, df_ref ref)\n       if (!NONDEBUG_INSN_P (DF_REF_INSN (chain->ref)))\n \tcontinue;\n \n+      if (--max_visits == 0)\n+\treturn false;\n+\n       if (!DF_REF_REG_MEM_P (chain->ref))\n \t{\n \t  if (bitmap_bit_p (insns, uid))\n@@ -381,6 +388,10 @@ scalar_chain::analyze_register_chain (bitmap candidates, df_ref ref)\n \t      add_to_queue (uid);\n \t      continue;\n \t    }\n+\n+\t  /* If we run into parts of an aborted chain discovery abort.  */\n+\t  if (bitmap_bit_p (disallowed, uid))\n+\t    return false;\n \t}\n \n       if (DF_REF_REG_DEF_P (chain->ref))\n@@ -401,15 +412,19 @@ scalar_chain::analyze_register_chain (bitmap candidates, df_ref ref)\n \n   if (mark_def)\n     mark_dual_mode_def (ref);\n+\n+  return true;\n }\n \n-/* Add instruction into a chain.  */\n+/* Add instruction into a chain.  Return true if OK, false if the search\n+   was aborted.  */\n \n-void\n-scalar_chain::add_insn (bitmap candidates, unsigned int insn_uid)\n+bool\n+scalar_chain::add_insn (bitmap candidates, unsigned int insn_uid,\n+\t\t\tbitmap disallowed)\n {\n   if (!bitmap_set_bit (insns, insn_uid))\n-    return;\n+    return true;\n \n   if (dump_file)\n     fprintf (dump_file, \"  Adding insn %d to chain #%d\\n\", insn_uid, chain_id);\n@@ -426,22 +441,27 @@ scalar_chain::add_insn (bitmap candidates, unsigned int insn_uid)\n   df_ref ref;\n   for (ref = DF_INSN_UID_DEFS (insn_uid); ref; ref = DF_REF_NEXT_LOC (ref))\n     if (!HARD_REGISTER_P (DF_REF_REG (ref)))\n-      analyze_register_chain (candidates, ref);\n+      if (!analyze_register_chain (candidates, ref, disallowed))\n+\treturn false;\n \n   /* The operand(s) of VEC_SELECT don't need to be converted/convertible.  */\n   if (def_set && GET_CODE (SET_SRC (def_set)) == VEC_SELECT)\n-    return;\n+    return true;\n \n   for (ref = DF_INSN_UID_USES (insn_uid); ref; ref = DF_REF_NEXT_LOC (ref))\n     if (!DF_REF_REG_MEM_P (ref))\n-      analyze_register_chain (candidates, ref);\n+      if (!analyze_register_chain (candidates, ref, disallowed))\n+\treturn false;\n+\n+  return true;\n }\n \n /* Build new chain starting from insn INSN_UID recursively\n-   adding all dependent uses and definitions.  */\n+   adding all dependent uses and definitions.  Return true if OK, false\n+   if the chain discovery was aborted.  */\n \n-void\n-scalar_chain::build (bitmap candidates, unsigned insn_uid)\n+bool\n+scalar_chain::build (bitmap candidates, unsigned insn_uid, bitmap disallowed)\n {\n   queue = BITMAP_ALLOC (NULL);\n   bitmap_set_bit (queue, insn_uid);\n@@ -454,7 +474,17 @@ scalar_chain::build (bitmap candidates, unsigned insn_uid)\n       insn_uid = bitmap_first_set_bit (queue);\n       bitmap_clear_bit (queue, insn_uid);\n       bitmap_clear_bit (candidates, insn_uid);\n-      add_insn (candidates, insn_uid);\n+      if (!add_insn (candidates, insn_uid, disallowed))\n+\t{\n+\t  /* If we aborted the search put sofar found insn on the set of\n+\t     disallowed insns so that further searches reaching them also\n+\t     abort and thus we abort the whole but yet undiscovered chain.  */\n+\t  bitmap_ior_into (disallowed, insns);\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Aborted chain #%d discovery\\n\", chain_id);\n+\t  BITMAP_FREE (queue);\n+\t  return false;\n+\t}\n     }\n \n   if (dump_file)\n@@ -478,6 +508,8 @@ scalar_chain::build (bitmap candidates, unsigned insn_uid)\n     }\n \n   BITMAP_FREE (queue);\n+\n+  return true;\n }\n \n /* Return a cost of building a vector costant\n@@ -2282,6 +2314,7 @@ convert_scalars_to_vector (bool timode_p)\n \n   for (unsigned i = 0; i <= 2; ++i)\n     {\n+      auto_bitmap disallowed;\n       bitmap_tree_view (&candidates[i]);\n       while (!bitmap_empty_p (&candidates[i]))\n \t{\n@@ -2296,14 +2329,14 @@ convert_scalars_to_vector (bool timode_p)\n \t  /* Find instructions chain we want to convert to vector mode.\n \t     Check all uses and definitions to estimate all required\n \t     conversions.  */\n-\t  chain->build (&candidates[i], uid);\n-\n-\t  if (chain->compute_convert_gain () > 0)\n-\t    converted_insns += chain->convert ();\n-\t  else\n-\t    if (dump_file)\n-\t      fprintf (dump_file, \"Chain #%d conversion is not profitable\\n\",\n-\t\t       chain->chain_id);\n+\t  if (chain->build (&candidates[i], uid, disallowed))\n+\t    {\n+\t      if (chain->compute_convert_gain () > 0)\n+\t\tconverted_insns += chain->convert ();\n+\t      else if (dump_file)\n+\t\tfprintf (dump_file, \"Chain #%d conversion is not profitable\\n\",\n+\t\t\t chain->chain_id);\n+\t    }\n \n \t  delete chain;\n \t}"}, {"sha": "72a9f54b4e297239da5df3e7c677966693c5298d", "filename": "gcc/config/i386/i386-features.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6010189923908501ca5b02bd1f4aee05d2283118/gcc%2Fconfig%2Fi386%2Fi386-features.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6010189923908501ca5b02bd1f4aee05d2283118/gcc%2Fconfig%2Fi386%2Fi386-features.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.h?ref=6010189923908501ca5b02bd1f4aee05d2283118", "patch": "@@ -148,12 +148,15 @@ class scalar_chain\n   /* Registers used in both vector and sclar modes.  */\n   bitmap defs_conv;\n \n+  /* Limit on chain discovery.  */\n+  unsigned max_visits;\n+\n   bitmap insns_conv;\n   hash_map<rtx, rtx> defs_map;\n   unsigned n_sse_to_integer;\n   unsigned n_integer_to_sse;\n \n-  void build (bitmap candidates, unsigned insn_uid);\n+  bool build (bitmap candidates, unsigned insn_uid, bitmap disallowed);\n   virtual int compute_convert_gain () = 0;\n   int convert ();\n \n@@ -168,8 +171,9 @@ class scalar_chain\n   void convert_registers ();\n \n  private:\n-  void add_insn (bitmap candidates, unsigned insn_uid);\n-  void analyze_register_chain (bitmap candidates, df_ref ref);\n+  bool add_insn (bitmap candidates, unsigned insn_uid, bitmap disallowed);\n+  bool analyze_register_chain (bitmap candidates, df_ref ref,\n+\t\t\t       bitmap disallowed);\n   virtual void convert_insn (rtx_insn *insn) = 0;\n   virtual void convert_op (rtx *op, rtx_insn *insn) = 0;\n };"}, {"sha": "94fdd639ff150d8b69ca1d1ee9b3ca0f7f8517dc", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6010189923908501ca5b02bd1f4aee05d2283118/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6010189923908501ca5b02bd1f4aee05d2283118/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=6010189923908501ca5b02bd1f4aee05d2283118", "patch": "@@ -599,6 +599,10 @@ Target Mask(STV) Save\n Disable Scalar to Vector optimization pass transforming 64-bit integer\n computations into a vector ones.\n \n+-param=x86-stv-max-visits=\n+Target Joined UInteger Var(x86_stv_max_visits) Init(10000) IntegerRange(1, 1000000) Param\n+The maximum number of use and def visits when discovering a STV chain before the discovery is aborted.\n+\n mdispatch-scheduler\n Target RejectNegative Var(flag_dispatch_scheduler)\n Do dispatch scheduling if processor is bdver1, bdver2, bdver3, bdver4"}, {"sha": "2da68802356efb5baef19f5efa0b18abcb1ddf40", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6010189923908501ca5b02bd1f4aee05d2283118/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6010189923908501ca5b02bd1f4aee05d2283118/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6010189923908501ca5b02bd1f4aee05d2283118", "patch": "@@ -16229,6 +16229,10 @@ The following choices of @var{name} are available on i386 and x86_64 targets:\n @item x86-stlf-window-ninsns\n Instructions number above which STFL stall penalty can be compensated.\n \n+@item x86-stv-max-visits\n+The maximum number of use and def visits when discovering a STV chain before\n+the discovery is aborted.\n+\n @end table\n \n @end table"}]}