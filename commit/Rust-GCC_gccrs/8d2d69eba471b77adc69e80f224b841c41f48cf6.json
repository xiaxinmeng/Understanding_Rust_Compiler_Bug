{"sha": "8d2d69eba471b77adc69e80f224b841c41f48cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyZDY5ZWJhNDcxYjc3YWRjNjllODBmMjI0Yjg0MWM0MWY0OGNmNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-08-27T10:50:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-08-27T10:50:45Z"}, "message": "tree-ssa-pre.c (compute_antic): Re-use inverted postorder for partial antic compute.\n\n2018-08-27  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (compute_antic): Re-use inverted postorder\n\tfor partial antic compute.\n\nFrom-SVN: r263874", "tree": {"sha": "f10d89c41e8a257d6428190b597c9f32cf7ae787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f10d89c41e8a257d6428190b597c9f32cf7ae787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2d69eba471b77adc69e80f224b841c41f48cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2d69eba471b77adc69e80f224b841c41f48cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2d69eba471b77adc69e80f224b841c41f48cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2d69eba471b77adc69e80f224b841c41f48cf6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7289cb45d094d9c538dc978c3fc0ae18e4752bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7289cb45d094d9c538dc978c3fc0ae18e4752bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7289cb45d094d9c538dc978c3fc0ae18e4752bd"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "d02050f790acc3577fff0b65a46c473d0c7ea109", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2d69eba471b77adc69e80f224b841c41f48cf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2d69eba471b77adc69e80f224b841c41f48cf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d2d69eba471b77adc69e80f224b841c41f48cf6", "patch": "@@ -1,3 +1,8 @@\n+2018-08-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (compute_antic): Re-use inverted postorder\n+\tfor partial antic compute.\n+\n 2018-08-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/87065"}, {"sha": "5e973eb9f94f46f73b5c71bc9520729df1f05294", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2d69eba471b77adc69e80f224b841c41f48cf6/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2d69eba471b77adc69e80f224b841c41f48cf6/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=8d2d69eba471b77adc69e80f224b841c41f48cf6", "patch": "@@ -2414,9 +2414,7 @@ compute_antic (void)\n     {\n       /* For partial antic we ignore backedges and thus we do not need\n          to perform any iteration when we process blocks in postorder.  */\n-      int postorder_num\n-\t= pre_and_rev_post_order_compute (NULL, postorder.address (), false);\n-      for (i = postorder_num - 1 ; i >= 0; i--)\n+      for (i = postorder.length () - 1; i >= 0; i--)\n \t{\n \t  basic_block block = BASIC_BLOCK_FOR_FN (cfun, postorder[i]);\n \t  compute_partial_antic_aux (block,"}]}