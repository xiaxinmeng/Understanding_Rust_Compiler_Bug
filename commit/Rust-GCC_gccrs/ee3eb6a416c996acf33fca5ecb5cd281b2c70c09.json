{"sha": "ee3eb6a416c996acf33fca5ecb5cd281b2c70c09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzZWI2YTQxNmM5OTZhY2YzM2ZjYTVlY2I1Y2QyODFiMmM3MGMwOQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-09-13T03:41:41Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-09-13T03:41:41Z"}, "message": "re PR fortran/41328 (bad iostat when reading DOS file in a character array (non-advancing))\n\n2009-09-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/41328\n\t* io/transfer.c (read_sf): Adjust fbuf position and do proper\n\tfbuf reads to traverse CR, CR-LF, and LF style line ends.\n\nFrom-SVN: r151665", "tree": {"sha": "c6c335c0e6e5abcfe1decf752fb951e29ab32235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6c335c0e6e5abcfe1decf752fb951e29ab32235"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee3eb6a416c996acf33fca5ecb5cd281b2c70c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3eb6a416c996acf33fca5ecb5cd281b2c70c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3eb6a416c996acf33fca5ecb5cd281b2c70c09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3eb6a416c996acf33fca5ecb5cd281b2c70c09/comments", "author": null, "committer": null, "parents": [{"sha": "efcc709b4fe72f8b5c4415b31e542a089599bd1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc709b4fe72f8b5c4415b31e542a089599bd1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcc709b4fe72f8b5c4415b31e542a089599bd1d"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "346981415f10bb9921fa9670e66837457d743973", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3eb6a416c996acf33fca5ecb5cd281b2c70c09/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3eb6a416c996acf33fca5ecb5cd281b2c70c09/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ee3eb6a416c996acf33fca5ecb5cd281b2c70c09", "patch": "@@ -1,3 +1,9 @@\n+2009-09-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/41328\n+\t* io/transfer.c (read_sf): Adjust fbuf position and do proper\n+\tfbuf reads to traverse CR, CR-LF, and LF style line ends.\n+\n 2009-09-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/41219"}, {"sha": "2362a1545929246306be363f23d806bb046c6dcb", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3eb6a416c996acf33fca5ecb5cd281b2c70c09/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3eb6a416c996acf33fca5ecb5cd281b2c70c09/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=ee3eb6a416c996acf33fca5ecb5cd281b2c70c09", "patch": "@@ -232,21 +232,28 @@ read_sf (st_parameter_dt *dtp, int * length, int no_error)\n \n       if (q == '\\n' || q == '\\r')\n \t{\n-\t  /* Unexpected end of line.  */\n+\t  /* Unexpected end of line. Set the position.  */\n+\t  fbuf_seek (dtp->u.p.current_unit, n + 1 ,SEEK_CUR);\n+\t  dtp->u.p.sf_seen_eor = 1;\n \n \t  /* If we see an EOR during non-advancing I/O, we need to skip\n \t     the rest of the I/O statement.  Set the corresponding flag.  */\n \t  if (dtp->u.p.advance_status == ADVANCE_NO || dtp->u.p.seen_dollar)\n \t    dtp->u.p.eor_condition = 1;\n-\n+\t    \n \t  /* If we encounter a CR, it might be a CRLF.  */\n \t  if (q == '\\r') /* Probably a CRLF */\n \t    {\n-\t      if (n < *length && *(p + 1) == '\\n')\n-\t\tdtp->u.p.sf_seen_eor = 2;\n+\t      /* See if there is an LF. Use fbuf_read rather then fbuf_getc so\n+\t\t the position is not advanced unless it really is an LF.  */\n+\t      int readlen = 1;\n+\t      p = fbuf_read (dtp->u.p.current_unit, &readlen);\n+\t      if (*p == '\\n' && readlen == 1)\n+\t        {\n+\t\t  dtp->u.p.sf_seen_eor = 2;\n+\t\t  fbuf_seek (dtp->u.p.current_unit, 1 ,SEEK_CUR);\n+\t\t}\n \t    }\n-          else\n-            dtp->u.p.sf_seen_eor = 1;\n \n \t  /* Without padding, terminate the I/O statement without assigning\n \t     the value.  With padding, the value still needs to be assigned,\n@@ -260,7 +267,7 @@ read_sf (st_parameter_dt *dtp, int * length, int no_error)\n \t    }\n \n \t  *length = n;\n-\t  break;\n+\t  goto done;\n \t}\n       /*  Short circuit the read if a comma is found during numeric input.\n \t  The flag is set to zero during character reads so that commas in\n@@ -274,13 +281,11 @@ read_sf (st_parameter_dt *dtp, int * length, int no_error)\n \t    *length = n;\n \t    break;\n \t  }\n-\n       n++;\n       p++;\n     } \n \n-  fbuf_seek (dtp->u.p.current_unit, n + dtp->u.p.sf_seen_eor + seen_comma, \n-             SEEK_CUR);\n+  fbuf_seek (dtp->u.p.current_unit, n + seen_comma, SEEK_CUR);\n \n   /* A short read implies we hit EOF, unless we hit EOR, a comma, or\n      some other stuff. Set the relevant flags.  */"}]}