{"sha": "22e1ebf1d7572cef04eea271121cb78f7e0eded5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlMWViZjFkNzU3MmNlZjA0ZWVhMjcxMTIxY2I3OGY3ZTBlZGVkNQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-26T00:40:27Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-26T00:40:27Z"}, "message": "(prepare_scc_operands): Force sh_compare_op1 to a register if it is an invalid constant.\n\n(prepare_scc_operands): Force sh_compare_op1 to a register if\nit is an invalid constant.\n(output_branch): Add cases for 4, 8, and 18.  Correct branch offsets\nin comments.\n(find_barrier): Correct test for move instructions that need to be\nfixed by verifying that the set source is a bad constant.\n(arith_reg_or_0_operand): New function.\n\nFrom-SVN: r8824", "tree": {"sha": "89824ef359f92c5da76052fc87e0f1e493a9fc00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89824ef359f92c5da76052fc87e0f1e493a9fc00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22e1ebf1d7572cef04eea271121cb78f7e0eded5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e1ebf1d7572cef04eea271121cb78f7e0eded5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e1ebf1d7572cef04eea271121cb78f7e0eded5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e1ebf1d7572cef04eea271121cb78f7e0eded5/comments", "author": null, "committer": null, "parents": [{"sha": "7374f95a9bed221260d498a52cfd3750820f363d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7374f95a9bed221260d498a52cfd3750820f363d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7374f95a9bed221260d498a52cfd3750820f363d"}], "stats": {"total": 218, "additions": 95, "deletions": 123}, "files": [{"sha": "afbbf6c6dd69c9a6f3af695aca529382cd2ada15", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1ebf1d7572cef04eea271121cb78f7e0eded5/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1ebf1d7572cef04eea271121cb78f7e0eded5/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=22e1ebf1d7572cef04eea271121cb78f7e0eded5", "patch": "@@ -832,6 +832,9 @@ prepare_scc_operands (code)\n \t}\n \n       sh_compare_op0 = force_reg (SImode, sh_compare_op0);\n+      if (code != EQ && code != NE && sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (SImode, sh_compare_op1);\n+\n       emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t  gen_rtx (REG, SImode, T_REG),\n \t\t   gen_rtx (code, SImode, sh_compare_op0, sh_compare_op1)));\n@@ -1141,11 +1144,15 @@ output_branch (logic, insn)\n   switch (get_attr_length (insn))\n     {\n     case 2:\n-      /* Simple branch in range -200..+200 bytes */\n+      /* A branch with an unfilled delay slot.  */\n+    case 4:\n+      /* Simple branch in range -252..+258 bytes */\n       return logic ? \"bt%.\t%l0\" : \"bf%.\t%l0\";\n \n     case 6:\n-      /* Branch in range -4000..+4000 bytes */\n+      /* A branch with an unfilled delay slot.  */\n+    case 8:\n+      /* Branch in range -4092..+4098 bytes */\n       {\n \trtx oldop = recog_operand[0];\n \n@@ -1172,6 +1179,8 @@ output_branch (logic, insn)\n       return \"\";\n \n     case 16:\n+      /* A branch with an unfilled delay slot.  */\n+    case 18:\n       /* Branches a long way away */\n       {\n \trtx oldop = recog_operand[0];\n@@ -1859,8 +1868,11 @@ find_barrier (from)\n       /* Count the length of this insn - we assume that all moves will\n \t be 2 bytes long, except the DIs */\n \n-      if (GET_CODE (from) == INSN &&\n-\t  GET_CODE (PATTERN (from)) == SET)\n+      if (GET_CODE (from) == INSN\n+\t  && GET_CODE (PATTERN (from)) == SET\n+\t  && CONSTANT_P (SET_SRC (PATTERN (from)))\n+\t  && (GET_CODE (SET_SRC (PATTERN (from))) != CONST_INT\n+\t      || ! CONST_OK_FOR_I (INTVAL (SET_SRC (PATTERN (from))))))\n \t{\n \t  rtx src = SET_SRC (PATTERN (from));\n \t  if (hi_const (src))\n@@ -2479,6 +2491,24 @@ arith_operand (op, mode)\n   return 0;\n }\n \n+/* Returns 1 if OP is a valid source operand for a compare insn.  */\n+\n+int\n+arith_reg_or_0_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (arith_reg_operand (op, mode))\n+    return 1;\n+\n+  if (GET_CODE (op) == CONST_INT)\n+    {\n+      if (CONST_OK_FOR_N (INTVAL (op)))\n+\treturn 1;\n+    }\n+  return 0;\n+}\n+\n \n /* Returns 1 if OP is a valid count operand for a shift operation. */\n int "}, {"sha": "1856907002891a9e353d1b616e30db96bb6bb6c4", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 61, "deletions": 119, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1ebf1d7572cef04eea271121cb78f7e0eded5/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1ebf1d7572cef04eea271121cb78f7e0eded5/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=22e1ebf1d7572cef04eea271121cb78f7e0eded5", "patch": "@@ -71,64 +71,56 @@\n ;; dmpy\t\tdouble precision integer multiply\n ;; return\trts\n ;; pload\tload of pr reg (can't be put into delay slot of rts)\n-;; pcloadsi\tpc relative load of SI value\n-;; pcloadhi \tpc relative load of HI value\n+;; pcload\tpc relative load of constant value\n ;; rte\t\treturn from exception\n ;; sfunc\tspecial function call with known used registers\n \n (define_attr \"type\" \n- \"cbranch,jump,arith,other,load,store,move,smpy,dmpy,return,pload,pcloadsi,pcloadhi,rte,sfunc\"\n+ \"cbranch,jump,arith,other,load,store,move,smpy,dmpy,return,pload,pcload,rte,sfunc\"\n   (const_string \"other\"))\n \n-; If a conditional branch destination is within -120..120 bytes away \n+; If a conditional branch destination is within -252..258 bytes away \n ; from the instruction it can be 2 bytes long.  Something in the\n-; range -4090..4090 bytes can be 6 bytes long, all other conditional\n-; branches are 8 bytes long.\n+; range -4090..4100 bytes can be 6 bytes long.  All other conditional\n+; branches are 16 bytes long.\n \n-; An unconditional jump which can reach forward or back 4k can be \n-; 6 bytes long (including the delay slot).  If it is too big, it\n-; must be 10 bytes long.\n+; An unconditional jump in the range -4092..4098 can be 2 bytes long.\n+; Otherwise, it must be 14 bytes long.\n \n-; If a pcrel instruction is within 500 bytes of the constant, then the insn is \n-; 2 bytes long, otherwise 12 bytes\n ; All other instructions are two bytes long by default.\n \n+; All positive offsets have an adjustment added, which is the number of bytes\n+; difference between this instruction length and the next larger instruction\n+; length.  This is because shorten_branches starts with the largest\n+; instruction size and then tries to reduce them.\n+\n (define_attr \"length\" \"\" \n   (cond [(eq_attr \"type\" \"cbranch\")\n-\t (if_then_else (and (ge (minus (pc) (match_dup 0))\n-\t\t\t\t(const_int -122))\n-\t\t\t    (le (minus (pc) (match_dup 0))\n-\t\t\t\t(const_int 122)))\n+\t (if_then_else (and (ge (minus (match_dup 0) (pc))\n+\t\t\t\t(const_int -252))\n+\t\t\t    (le (minus (match_dup 0) (pc))\n+\t\t\t\t(const_int 262)))\n \t\t       (const_int 2)\n-\t\t       (if_then_else (and (ge (minus (pc) (match_dup 0))\n+\t\t       (if_then_else (and (ge (minus (match_dup 0) (pc))\n \t\t\t\t\t      (const_int -4090))\n-\t\t\t\t\t  (le (minus (pc) (match_dup 0))\n-\t\t\t\t\t      (const_int 4090)))\n+\t\t\t\t\t  (le (minus (match_dup 0) (pc))\n+\t\t\t\t\t      (const_int 4110)))\n \t\t\t\t     (const_int 6)\n \t\t\t\t     (const_int 16)))\n \n \t (eq_attr \"type\" \"jump\")\n-\t (if_then_else (and (ge (minus (pc) (match_dup 0))\n-\t\t\t\t(const_int -4090))\n-\t\t\t    (le (minus (pc) (match_dup 0))\n-\t\t\t\t(const_int 4090)))\n-\t\t       (const_int 4)\n-\t\t       (const_int 10))\n-\t (eq_attr \"type\" \"pcloadsi\")\n-\t (if_then_else (gt (pc) (minus (match_dup 0) (const_int 1000)))\n-\t\t       (const_int 2)\n-\t\t       (const_int 12))\n-\t (eq_attr \"type\" \"pcloadhi\")\n-\t (if_then_else (gt (pc) (minus (match_dup 0) (const_int 500)))\n+\t (if_then_else (and (ge (minus (match_dup 0) (pc))\n+\t\t\t\t(const_int -4092))\n+\t\t\t    (le (minus (match_dup 0) (pc))\n+\t\t\t\t(const_int 4110)))\n \t\t       (const_int 2)\n-\t\t       (const_int 12))\n-\n+\t\t       (const_int 14))\n \t ] (const_int 2)))\n \n ;; (define_function_unit {name} {num-units} {n-users} {test}\n ;;                       {ready-delay} {issue-delay} [{conflict-list}])\n \t\t\t\t      \n-(define_function_unit \"memory\" 1 0 (eq_attr \"type\" \"load,pcloadsi,pcloadhi\") 2 2)\n+(define_function_unit \"memory\" 1 0 (eq_attr \"type\" \"load,pcload\") 2 2)\n (define_function_unit \"mpy\"    1 0 (eq_attr \"type\" \"smpy\") 7 7)\n (define_function_unit \"mpy\"    1 0 (eq_attr \"type\" \"dmpy\") 9 9)\n \n@@ -154,18 +146,14 @@\n        (eq_attr \"cpu\" \"sh2,sh3\"))\n   [(eq_attr \"in_delay_slot\" \"yes\") (nil) (nil)])\n \n-(define_attr \"in_delay_slot\" \"maybe,yes,no\" \n+(define_attr \"in_delay_slot\" \"yes,no\" \n   (cond [(eq_attr \"type\" \"cbranch\") (const_string \"no\")\n \t (eq_attr \"type\" \"jump\") (const_string \"no\")\n \t (eq_attr \"type\" \"pload\") (const_string \"no\")\n-\t (eq_attr \"type\" \"pcloadsi\") (const_string \"no\")\n-\t (eq_attr \"type\" \"pcloadhi\") (const_string \"no\")\n+\t (eq_attr \"type\" \"pcload\") (const_string \"no\")\n \t (eq_attr \"type\" \"return\") (const_string \"no\")\n \t (eq_attr \"length\" \"2\") (const_string \"yes\")\n-\t (eq_attr \"length\" \"4,6,8,10,12\") (const_string \"no\")\n-\t ] (const_string \"yes\")))\n-\n-\n+\t ] (const_string \"no\")))\n \f\n ;; -------------------------------------------------------------------------\n ;; SImode signed integer comparisons\n@@ -178,70 +166,46 @@\n   \"\"\n   \"movt\t%0 !movt1\")\n \n-(define_insn \"\"\n-  [(set (reg:SI 18) (gt:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n-\t\t\t   (const_int 0)))]\n-  \"\"\n-  \"cmp/pl\t%0\")\n-\n-(define_insn \"\"\n-  [(set (reg:SI 18) (ge:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n-\t\t\t   (const_int 0)))]\n-  \"\"\n-  \"cmp/pz\t%0\")\n-\n-(define_insn \"cmpeq_0\"\n-  [(set (reg:SI 18) (eq:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n-\t\t\t   (const_int 0)))]\n-  \"\"\n-  \"tst\t%0,%0 ! t0\")\n-\n (define_insn \"cmpeqsi_t\"\n-  [(set (reg:SI 18) (eq:SI (match_operand:SI 0 \"arith_operand\" \"r,N,z,r\")\n-\t\t\t   (match_operand:SI 1 \"arith_operand\" \"N,r,rI,r\")))]\n+  [(set (reg:SI 18) (eq:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,z,r\")\n+\t\t\t   (match_operand:SI 1 \"arith_operand\" \"N,rI,r\")))]\n   \"\"\n   \"@\n-\ttst\t%0,%0 !t1\n-\ttst\t%1,%1 !t2\n+\ttst\t%0,%0 ! t0\n \tcmp/eq\t%1,%0\n \tcmp/eq\t%1,%0\")\n \n (define_insn \"cmpgtsi_t\"\n   [(set (reg:SI 18) (gt:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 1 \"arith_operand\" \"N,r\")))]\n+\t\t\t   (match_operand:SI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n   \"\"\n   \"@\n-\tcmp/pl\t%0\n-\tcmp/gt\t%1,%0\")\n+\tcmp/gt\t%1,%0\n+\tcmp/pl\t%0\")\n \n (define_insn \"cmpgesi_t\"\n   [(set (reg:SI 18) (ge:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 1 \"arith_operand\" \"N,r\")))]\n+\t\t\t   (match_operand:SI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n   \"\"\n   \"@\n-\tcmp/pz\t%0\n-\tcmp/ge\t%1,%0\")\n-\n+\tcmp/ge\t%1,%0\n+\tcmp/pz\t%0\")\n \f\n ;; -------------------------------------------------------------------------\n ;; SImode unsigned integer comparisons\n ;; -------------------------------------------------------------------------\n \n (define_insn \"cmpgeusi_t\"\n-  [(set (reg:SI 18) (geu:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t    (match_operand:SI 1 \"arith_operand\" \"N,r\")))]\n+  [(set (reg:SI 18) (geu:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n+\t\t\t    (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n   \"\"\n-  \"@\n-\tcmp/pz\t%1\n-\tcmp/hs\t%1,%0\")\n+  \"cmp/hs\t%1,%0\")\n \n (define_insn \"cmpgtusi_t\"\n-  [(set (reg:SI 18) (gtu:SI (match_operand:SI 0 \"arith_operand\" \"r,r\")\n-\t\t\t    (match_operand:SI 1 \"arith_operand\" \"N,r\")))]\n+  [(set (reg:SI 18) (gtu:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n+\t\t\t    (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n   \"\"\n-  \"@\n-\tcmp/pl\t%1\n-\tcmp/hi\t%1,%0\")\n+  \"cmp/hi\t%1,%0\")\n \n ;; We save the compare operands in the cmpxx patterns and use them when\n ;; we generate the branch.\n@@ -280,8 +244,7 @@\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"add\t%2,%0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"arith\")])\n+  [(set_attr \"type\" \"arith\")])\n \n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n@@ -334,7 +297,6 @@\n   \"\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n-   (set_attr \"length\" \"4\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"udivsi3\"\n@@ -367,7 +329,6 @@\n   \"\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n-   (set_attr \"length\" \"4\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"divsi3\"\n@@ -449,7 +410,6 @@\n   \"\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n-   (set_attr \"length\" \"4\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"mulsi3_call\"\n@@ -720,7 +680,6 @@\n   \"jsr\t@%1%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"in_delay_slot\" \"no\")\n-   (set_attr \"length\" \"4\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"ashrsi3\"\n@@ -832,8 +791,7 @@\n \t(neg:SI (plus:SI (reg:SI 18) (match_operand:SI 1 \"arith_reg_operand\" \"r\"))))]\n   \"\"\n   \"negc\t%1,%0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"arith\")])\n+  [(set_attr \"type\" \"arith\")])\n \n (define_expand \"negdi2\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n@@ -1012,7 +970,7 @@\n \tlds.l\t%1,%0\n \ttst\t%1,%1\\;bt\tT%*\\;bra\tF%*\\;sett\\;T%*:clrt\\;F%*:%^\n \tfake %1,%0\"\n-  [(set_attr \"type\" \"pcloadsi,move,load,move,store,store,move,load,move,move,move\")])\n+  [(set_attr \"type\" \"pcload,move,load,move,store,store,move,load,move,move,move\")])\n \t\t\t  \n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"\")\n@@ -1034,8 +992,7 @@\n \tmovt\t%0\n \tsts\t%1,%0\n \tlds\t%1,%0\"\n- [(set_attr \"length\" \"2,2,2,2,2,2\")\n-  (set_attr \"type\" \"move,load,store,move,move,move\")])\n+ [(set_attr \"type\" \"move,load,store,move,move,move\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n@@ -1056,8 +1013,7 @@\n \tfake %1,%0\n \tsts\t%1,%0\n \tlds\t%1,%0\"\n-  [(set_attr \"length\" \"*,2,2,2,2,2,2,2\")\n-   (set_attr \"type\" \"pcloadhi,move,load,move,store,move,move,move\")])\n+  [(set_attr \"type\" \"pcload,move,load,move,store,move,move,move\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_movdst_operand\" \"\")\n@@ -1079,8 +1035,8 @@\n   \"register_operand (operands[0], DImode)\n   || register_operand (operands[1], DImode)\"\n   \"* return output_movedouble (insn, operands, DImode);\"\n-  [(set_attr \"length\" \"*,4,4,4,4\")\n-   (set_attr \"type\" \"pcloadsi,move,load,store,move\")])\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"pcload,move,load,store,move\")])\n \n ;; If the output is a register and the input is memory, we have to be careful\n ;; and see which word needs to be loaded first.\n@@ -1373,7 +1329,8 @@\n   \"\"\n   \"*\n {\n-  if (get_attr_length(insn) == 10) \n+  /* The length is 16 if the delay slot is unfilled.  */\n+  if (get_attr_length(insn) >= 14) \n     {\n       return output_far_jump(insn, operands[0]);\n     }\n@@ -1393,8 +1350,7 @@\n   \"TARGET_BSR\"\n   \"bsr\t%O0%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")\n-   (set_attr \"in_delay_slot\" \"no\")\n-   (set_attr \"length\" \"4\")])\n+   (set_attr \"in_delay_slot\" \"no\")])\n \n (define_insn \"calli\"\n   [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n@@ -1403,8 +1359,7 @@\n   \"\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")\n-   (set_attr \"in_delay_slot\" \"no\")\n-   (set_attr \"length\" \"4\")])\n+   (set_attr \"in_delay_slot\" \"no\")])\n \n (define_insn \"bsr_value\"\n   [(set (match_operand 0 \"\" \"=rf\")\n@@ -1414,8 +1369,7 @@\n   \"TARGET_BSR\"\n   \"bsr\t%O1%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")\n-   (set_attr \"in_delay_slot\" \"no\")\n-   (set_attr \"length\" \"4\")])\n+   (set_attr \"in_delay_slot\" \"no\")])\n \n (define_insn \"call_valuei\"\n   [(set (match_operand 0 \"\" \"=rf\")\n@@ -1425,8 +1379,7 @@\n   \"\"\n   \"jsr\t@%1%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")\n-   (set_attr \"in_delay_slot\" \"no\")\n-   (set_attr \"length\" \"4\")])\n+   (set_attr \"in_delay_slot\" \"no\")])\n \n (define_expand \"call\"\n   [(parallel[(call (match_operand 0 \"arith_reg_operand\" \"o\")\n@@ -1449,8 +1402,7 @@\n   \"\"\n   \"jmp\t@%0%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")\n-   (set_attr \"in_delay_slot\" \"no\")\n-   (set_attr \"length\" \"4\")])\n+   (set_attr \"in_delay_slot\" \"no\")])\n \n \f\n ;; ------------------------------------------------------------------------\n@@ -1507,7 +1459,7 @@\n \t\t\t\t(match_operand:SI 1 \"arith_operand\" \"\")))\n    (set (reg:SI 18)\n \t(gtu:SI (match_dup 5)\n-\t\t(match_operand:SI 2 \"arith_operand\" \"\")))\n+\t\t(match_operand:SI 2 \"arith_reg_operand\" \"\")))\n    (set (pc)\n \t(if_then_else (eq (reg:SI 18)\n \t\t\t  (const_int 1))\n@@ -1700,10 +1652,7 @@\n    (set (match_operand:SI 2 \"register_operand\" \"=r\")\n \t(reg:SI 0))]\n    \"\"\n-   \"mova\t%O0,r0\\;mov\tr0,%1\\;mov\tr0,%2\"\n-   [(set_attr \"length\" \"6\")\n-    (set_attr \"in_delay_slot\" \"no\")])\n-\n+   \"mova\t%O0,r0\\;mov\tr0,%1\\;mov\tr0,%2\")\n \n ;; -------------------------------------------------------------------------\n ;; Combine patterns\n@@ -1910,8 +1859,7 @@\n \t      (clobber (reg:SI 0))])]\n   \"\"\n   \"jsr\t@%0%#\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"sfunc\")\n+  [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_insn \"block_lump_real\"\n@@ -1926,8 +1874,7 @@\n \t      (clobber (reg:SI 0))])]\n   \"\"\n   \"jsr\t@%0%#\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"sfunc\")\n+  [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_insn \"mac\"\n@@ -1952,8 +1899,3 @@\n \t       (const_int 0)))]\n   \"TARGET_SH2\"\n   \"dt\t%0\")\n-  \n-\t\n-\t\n-\t\n-\t\n\\ No newline at end of file"}]}