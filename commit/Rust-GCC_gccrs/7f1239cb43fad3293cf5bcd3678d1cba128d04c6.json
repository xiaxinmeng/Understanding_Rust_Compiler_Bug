{"sha": "7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "node_id": "C_kwDOANBUbNoAKDdmMTIzOWNiNDNmYWQzMjkzY2Y1YmNkMzY3OGQxY2JhMTI4ZDA0YzY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-14T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-14T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "595dedc215ec8b8fd8d3212c5b9df87613808c80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/595dedc215ec8b8fd8d3212c5b9df87613808c80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/comments", "author": null, "committer": null, "parents": [{"sha": "a7acb6dca941db2b1c135107dac3a34a20650d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7acb6dca941db2b1c135107dac3a34a20650d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7acb6dca941db2b1c135107dac3a34a20650d5c"}], "stats": {"total": 250, "additions": 249, "deletions": 1}, "files": [{"sha": "029d491e0acb374a533f5aba6a22a6f0c1739ee5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "patch": "@@ -1,3 +1,147 @@\n+2021-12-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99531\n+\t* ira-costs.c (record_operand_costs): Do not take pseudo class\n+\tcalculated on the 1st iteration into account when processing move\n+\tinvolving the pseudo and a hard register.\n+\n+2021-12-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.md (define_split any_or:SWI248 -> orb %?h):\n+\tOptimize the case where the integer constant operand is zero.\n+\n+2021-12-13  Doug Rupp  <rupp@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h (VXWORKS_LINK_OS_SPEC): New spec.\n+\t(VXWORKS_BASE_LINK_SPEC): New spec, using the former.\n+\t(VXWORKS_EXTRA_LINK_SPEC): New spec for old and new VxWorks.\n+\t(VXWORKS_LINK_SPEC): Combo of BASE and EXTRA specs.\n+\t* config/rs6000/vxworks.h (VXWORKS_LINK_OS_SPEC): Empty.\n+\t(LINK_OS_EXTRA_SPEC32): Use VXWORKS_LINK_SPEC.\n+\t(LINK_OS_EXTRA_SPEC64): Likewise.\n+\n+2021-12-13  Fred Konrad  <konrad@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h (VXWORKS_BASE_LIBS_RTP): Guard -lc_internal\n+\ton !shared+!non-static and document.\n+\t(VXWORKS_LIB_SPEC): Remove the bits intended to drag the\n+\tinit/fini functions from libc_internal in the shared lib case.\n+\t(VX_CRTBEGIN_SPEC/VX_CRTEND_SPEC): Use vxcrtstuff objects also in\n+\tconfigurations with shared lib and INITFINI_ARRAY support.\n+\n+2021-12-13  Fred Konrad  <konrad@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vx-common.h: Define REAL_LIBGCC_SPEC since the\n+\t'-non-static' option is not standard.\n+\t* config/vxworks.h (VXWORKS_LIBGCC_SPEC): Implement the LIBGCC_SPEC\n+\tsince REAL_LIBGCC_SPEC is used now.\n+\t(STARTFILE_PREFIX_SPEC): Use the PIC VSB when building shared libraries\n+\tor non-static binaries.\n+\n+2021-12-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* common.opt: Add -fipa-strict-aliasing.\n+\t* doc/invoke.texi: Document -fipa-strict-aliasing.\n+\t* ipa-modref.c (modref_access_analysis::record_access): Honor\n+\t-fipa-strict-aliasing.\n+\t(modref_access_analysis::record_access_lto): Likewise.\n+\n+2021-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-arches.def (armv8.8-a): Define.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_V8_8): Define.\n+\t(AARCH64_FL_FOR_ARCH8_8): Define.\n+\t* doc/invoke.texi: Document -march=armv8.8-a.\n+\n+2021-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_setmem_mops): Define.\n+\t(aarch64_expand_setmem): Adjust for TARGET_MOPS.\n+\t* config/aarch64/aarch64.h (CLEAR_RATIO): Adjust for TARGET_MOPS.\n+\t(SET_RATIO): Likewise.\n+\t* config/aarch64/aarch64.md (\"unspec\"): Add UNSPEC_SETMEM.\n+\t(aarch64_setmemdi): Define.\n+\t(setmemdi): Adjust for TARGET_MOPS.\n+\t* config/aarch64/aarch64.opt (aarch64-mops-memset-size-threshold):\n+\tNew param.\n+\n+2021-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (aarch64_movmemdi): Define.\n+\t(movmemdi): Define.\n+\t(unspec): Add UNSPEC_MOVMEM.\n+\t* config/aarch64/aarch64.opt (aarch64-mops-memmove-size-threshold):\n+\tNew param.\n+\n+2021-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-option-extensions.def (mops): Define.\n+\t* config/aarch64/aarch64.c (aarch64_expand_cpymem_mops): Define.\n+\t(aarch64_expand_cpymem): Define.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_MOPS): Define.\n+\t(AARCH64_ISA_MOPS): Define.\n+\t(TARGET_MOPS): Define.\n+\t(MOVE_RATIO): Adjust for TARGET_MOPS.\n+\t* config/aarch64/aarch64.md (\"unspec\"): Add UNSPEC_CPYMEM.\n+\t(aarch64_cpymemdi): New pattern.\n+\t(cpymemdi): Adjust for TARGET_MOPS.\n+\t* config/aarch64/aarch64.opt (aarch64-mops-memcpy-size-threshol):\n+\tNew param.\n+\t* doc/invoke.texi (AArch64 Options): Document +mops.\n+\n+2021-12-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/103636\n+\t* ipa-inline.c (can_inline_edge_p): Move logic checking\n+\tno_profile_instrument_function logic to ...\n+\t(can_early_inline_edge_p): ... here.\n+\n+2021-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks/_yvals.h: #include yvals.h also if\n+\tdefined(__RTP__).\n+\n+2021-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h (VXWORKS_OS_CPP_BUILTINS): Define\n+\t_C99 for C++.\n+\n+2021-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/t-vxworks: Clear NATIVE_SYSTEM_HEADER_DIR.\n+\t* config/vxworks.h (SYSROOT_HEADERS_SUFFIX_SPEC): Define, for\n+\tVxWorks 7 and earlier.\n+\t(VXWORKS_ADDITIONAL_CPP_SPEC): Simplify accordingly.\n+\t(STARTFILE_PREFIX_SPEC): Adjust accordingly.\n+\t* config/rs6000/vxworks.h (STARTFILE_PREFIX_SPEC): Adjust.\n+\n+2021-12-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/extend.texi: Use @item for the first @itemx entry.\n+\n+2021-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* machmode.h (gt_pch_nx): Use gt_pointer_operator as type of second\n+\targument instead of equivalent void (*) (void *, void *, void *).\n+\t* poly-int.h (gt_pch_nx): Likewise.\n+\t* wide-int.h (gt_pch_nx): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins.cc (gt_pch_nx): Likewise.\n+\n+2021-12-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103513\n+\t* ipa-fnsummary.c (evaluate_conditions_for_known_args): Do not ICE\n+\ton ternary expression.\n+\n+2021-12-13  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/103515\n+\t* attribs.c (decl_attributes): Check if target options change and\n+\tcreate one node if so.\n+\n 2021-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* Makefile.in: Remove unique-ptr-tests.o."}, {"sha": "e5026007433de31c2291f075e5211c0867604644", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "patch": "@@ -1 +1 @@\n-20211213\n+20211214"}, {"sha": "fc7bea1d1b5487b6a302df15f33c8fc1d19ff55c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "patch": "@@ -1,3 +1,10 @@\n+2021-12-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/103576\n+\t* openmp.c (is_scalar_intrinsic_expr): Fix condition.\n+\t(resolve_omp_atomic): Fix/update checks, accept compare.\n+\t* trans-openmp.c (gfc_trans_omp_atomic): Handle compare.\n+\n 2021-12-11  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103606"}, {"sha": "1a61c86a0f972621fa93eca21542d8343dc00528", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "patch": "@@ -1,3 +1,40 @@\n+2021-12-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99531\n+\t* gcc.target/i386/pr99531.c: New test.\n+\n+2021-12-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/pr103611-1.c: New test case.\n+\n+2021-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/mops_3.c: New test.\n+\n+2021-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/mops_2.c: New test.\n+\n+2021-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/mops_1.c: New test.\n+\n+2021-12-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/atomic-25.f90: Remove sorry, fix + add checks.\n+\t* gfortran.dg/gomp/atomic-26.f90: Likewise.\n+\t* gfortran.dg/gomp/atomic-21.f90: New test.\n+\n+2021-12-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103513\n+\t* gcc.c-torture/compile/pr103513.c: New test.\n+\n+2021-12-13  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/103515\n+\t* gcc.target/powerpc/pr103515.c: New test.\n+\n 2021-12-12  Antoni Boucher  <bouanto@zoho.com>\n \n \tPR target/100688"}, {"sha": "a8d55a97664ae7f61dbd6107f3bc35e8390478c8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "patch": "@@ -1,3 +1,36 @@\n+2021-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.host (powerpc*-*-vxworks7*): Remove\n+\trs6000/t-linux and t-slibgcc-libgcc from tmake_file.\n+\n+2021-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.host (*vxworks*): Remove special case for\n+\tarm on the use of vxcrtstuff.\n+\n+2021-12-13  Fred Konrad  <konrad@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/t-vxcrtstuffS: New Makefile fragment.\n+\t* config/vxcrtstuff.c: Provide __dso_handle. Provide _init/_fini\n+\tfunctions for INITFINI_ARRAY support in shared libs and guard\n+\tthe definition of eh table registration functions on conditions\n+\tindicating they are needed.\n+\n+2021-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.host (powerpc*-wrs-vxworks7*): Place t-crtstuff\n+\tahead of the other files in tmake_files.\n+\t* config/t-vxworks: Add to CRTSTUFF_T_CFLAGS instead of\n+\toverriding it.\n+\n+2021-12-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/t-vxworks (LIBGCC2_INCLUDES): Simplify and handle\n+\tboth VxWorks7 and earlier.\n+\t* config/t-vxworks7: Remove.\n+\t* config.host: Remove special case for vxworks7.\n+\n 2021-12-11  Rasmus Villemoes  <rasmus.villemoes@prevas.dk>\n \n \t* config/vxcrtstuff.c: Make constructor and destructor"}, {"sha": "d52cbc07e451e94027159ae59adcfb7260cd29cb", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "patch": "@@ -1,3 +1,8 @@\n+2021-12-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.1): Set Fortran support for atomic to 'Y'.\n+\t* testsuite/libgomp.fortran/atomic-19.f90: New test.\n+\n 2021-12-10  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* plugin/plugin-gcn.c (struct gcn_image_desc): Remove global_variables."}, {"sha": "1210f88e2166a435dd973554e5aa53fdebff378f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1239cb43fad3293cf5bcd3678d1cba128d04c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7f1239cb43fad3293cf5bcd3678d1cba128d04c6", "patch": "@@ -1,3 +1,25 @@\n+2021-12-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* scripts/make_exports.pl: Replace '?' with '.' when turning\n+\ta glob into a regex.\n+\n+2021-12-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_base.h (ranges::size, ranges::empty): Add\n+\texplicit check for unbounded arrays before using ranges::begin.\n+\t* testsuite/std/ranges/access/empty.cc: Check handling of unbounded\n+\tarrays.\n+\t* testsuite/std/ranges/access/size.cc: Likewise.\n+\n+2021-12-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103664\n+\t* include/bits/regex.h (__regex_replace): Declare.\n+\t(regex_replace): Use it.\n+\t* include/bits/regex.tcc (__regex_replace): Replace regex_replace\n+\tdefinition with __regex_replace.\n+\t* testsuite/28_regex/algorithms/regex_replace/char/103664.cc: New test.\n+\n 2021-12-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/103534"}]}