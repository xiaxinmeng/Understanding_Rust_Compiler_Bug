{"sha": "02143d0b6908776548919ce96dd131e7fdcf6555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxNDNkMGI2OTA4Nzc2NTQ4OTE5Y2U5NmRkMTMxZTdmZGNmNjU1NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-01-02T14:18:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-01-02T14:18:41Z"}, "message": "re PR target/42448 (Wrong code with _Complex char in structure)\n\n\tPR target/42448\n\t* config/alpha/predicates.md (aligned_memory_operand): Return false\n\tfor CQImode.\n\t(unaligned_memory_operand): Return true for CQImode.\n\t* config/alpha/alpha.c (get_aligned_mem): Assert that location\n\tdoesn not cross aligned SImode word boundary.\n\ntestsuite/ChangeLog:\n\n\tPR target/42448\n\t* gcc.target/alpha/pr42448-1.c: New test.\n\t* gcc.target/alpha/pr42448-2.c: Ditto.\n\nFrom-SVN: r155566", "tree": {"sha": "cbed5b334013f0146fca8c239a700bb068a84127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbed5b334013f0146fca8c239a700bb068a84127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02143d0b6908776548919ce96dd131e7fdcf6555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02143d0b6908776548919ce96dd131e7fdcf6555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02143d0b6908776548919ce96dd131e7fdcf6555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02143d0b6908776548919ce96dd131e7fdcf6555/comments", "author": null, "committer": null, "parents": [{"sha": "7413962d04a4f1864db684a2d9a49d043322f299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7413962d04a4f1864db684a2d9a49d043322f299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7413962d04a4f1864db684a2d9a49d043322f299"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "3db4b5cabbd1315337706fbddb04aee1c08f6c27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02143d0b6908776548919ce96dd131e7fdcf6555", "patch": "@@ -1,7 +1,16 @@\n+2010-01-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/42448\n+\t* config/alpha/predicates.md (aligned_memory_operand): Return false\n+\tfor CQImode.\n+\t(unaligned_memory_operand): Return true for CQImode.\n+\t* config/alpha/alpha.c (get_aligned_mem): Assert that location\n+\tdoesn not cross aligned SImode word boundary.\n+\n 2010-01-02  Anatoly Sokolov  <aesok@post.ru>\n \n-\t* config/avr/avr.h (REG_OK_FOR_BASE_P, REG_OK_FOR_INDEX_P,\n-\tXEXP_) : Remove.\n+\t* config/avr/avr.h (REG_OK_FOR_BASE_P, REG_OK_FOR_INDEX_P, XEXP_):\n+\tRemove.\n \t* config/avr/avr-protos.h (avr_init_once, avr_optimization_options,\n \tavr_change_section, avr_reg_class_from_letter) : Remove declaration.\n \n@@ -15,8 +24,7 @@\n 2010-01-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR debug/42455\n-\t* tree-sra.c (analyze_all_variable_accesses): Work in DECL_UID\n-\torder.\n+\t* tree-sra.c (analyze_all_variable_accesses): Work in DECL_UID order.\n \n 2010-01-01  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "450300050ae1e12ca75a4d743ab27111341b3334", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=02143d0b6908776548919ce96dd131e7fdcf6555", "patch": "@@ -1475,6 +1475,10 @@ get_aligned_mem (rtx ref, rtx *paligned_mem, rtx *pbitnum)\n   else\n     offset = disp & 3;\n \n+  /* The location should not cross aligned word boundary.  */\n+  gcc_assert (offset + GET_MODE_SIZE (GET_MODE (ref))\n+\t      <= GET_MODE_SIZE (SImode));\n+\n   /* Access the entire aligned word.  */\n   *paligned_mem = widen_memory_access (ref, SImode, -offset);\n "}, {"sha": "b52d9dce028e430a351351f6a4fb615354b43c7d", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=02143d0b6908776548919ce96dd131e7fdcf6555", "patch": "@@ -442,6 +442,10 @@\n \n   if (MEM_ALIGN (op) >= 32)\n     return 1;\n+\n+  if (mode == CQImode)\n+    return 0;\n+\n   op = XEXP (op, 0);\n \n   /* LEGITIMIZE_RELOAD_ADDRESS creates (plus (plus reg const_hi) const_lo)\n@@ -470,6 +474,10 @@\n \n   if (MEM_ALIGN (op) >= 32)\n     return 0;\n+\n+  if (mode == CQImode)\n+    return 1;\n+\n   op = XEXP (op, 0);\n \n   /* LEGITIMIZE_RELOAD_ADDRESS creates (plus (plus reg const_hi) const_lo)"}, {"sha": "3b9c43caa4d246b0067f76abf58d85ab2a4c5596", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02143d0b6908776548919ce96dd131e7fdcf6555", "patch": "@@ -1,3 +1,9 @@\n+2010-01-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/42448\n+\t* gcc.target/alpha/pr42448-1.c: New test.\n+\t* gcc.target/alpha/pr42448-2.c: Ditto.\n+\n 2010-01-01  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/41947"}, {"sha": "4e2c376e39dc782130702346520451175a8c44d3", "filename": "gcc/testsuite/gcc.target/alpha/pr42448-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42448-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42448-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42448-1.c?ref=02143d0b6908776548919ce96dd131e7fdcf6555", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mcpu=21064 -O0\" } */\n+\n+extern void abort (void);\n+\n+struct S2180\n+{\n+  char t;\n+  _Complex char u[2];\n+};\n+\n+struct S2180 s2180;\n+\n+int\n+main (void)\n+{\n+  volatile struct S2180 x;\n+\n+  s2180.u[1] = 3 + 4i;\n+\n+  x.u[1] = s2180.u[1];\n+\n+  if (x.u[1] != s2180.u[1])\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "aeebad2809b4507e0d2696197be0e7611c65264d", "filename": "gcc/testsuite/gcc.target/alpha/pr42448-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42448-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02143d0b6908776548919ce96dd131e7fdcf6555/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42448-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr42448-2.c?ref=02143d0b6908776548919ce96dd131e7fdcf6555", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mcpu=21064 -O0\" } */\n+\n+extern void abort (void);\n+\n+struct S2180\n+{\n+  char t;\n+  _Complex char u[4];\n+};\n+\n+struct S2180 s2180;\n+\n+int\n+main (void)\n+{\n+  volatile struct S2180 x;\n+\n+  s2180.u[3] = 3 + 4i;\n+\n+  x.u[3] = s2180.u[3];\n+\n+  if (x.u[3] != s2180.u[3])\n+    abort ();\n+\n+  return 0;\n+}"}]}