{"sha": "e6cc142ad99ab8d28581f4ce61056c9cce74dba3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjYzE0MmFkOTlhYjhkMjg1ODFmNGNlNjEwNTZjOWNjZTc0ZGJhMw==", "commit": {"author": {"name": "Tom Greenslade (thomgree)", "email": "thomgree@cisco.com", "date": "2021-02-03T11:31:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-04T15:46:39Z"}, "message": "c++: fix string literal member initializer bug [PR90926]\n\nbuild_aggr_conv did not correctly handle string literal member initializers.\nExtended can_convert_array to handle this case. For the additional check of\ncompatibility of character types, factored out code from digest_init_r into\na new function.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/90926\n\t* call.c (can_convert_array): Extend to handle all valid aggregate\n\tinitializers of an array; including by string literals, not just by\n\tbrace-init-list.\n\t(build_aggr_conv): Call can_convert_array more often, not just in\n\tbrace-init-list case.\n\t* typeck2.c (array_string_literal_compatible_p): New function.\n\t(digest_init_r): call array_string_literal_compatible_p\n\t* cp-tree.h: (array_string_literal_compatible_p): Declare.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/90926\n\t* g++.dg/cpp1y/nsdmi-aggr12.C: New test.", "tree": {"sha": "36040f01624599a628e0439d9e441c8ee355ae9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36040f01624599a628e0439d9e441c8ee355ae9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6cc142ad99ab8d28581f4ce61056c9cce74dba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cc142ad99ab8d28581f4ce61056c9cce74dba3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6cc142ad99ab8d28581f4ce61056c9cce74dba3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/comments", "author": {"login": "thomgree", "id": 13904022, "node_id": "MDQ6VXNlcjEzOTA0MDIy", "avatar_url": "https://avatars.githubusercontent.com/u/13904022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomgree", "html_url": "https://github.com/thomgree", "followers_url": "https://api.github.com/users/thomgree/followers", "following_url": "https://api.github.com/users/thomgree/following{/other_user}", "gists_url": "https://api.github.com/users/thomgree/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomgree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomgree/subscriptions", "organizations_url": "https://api.github.com/users/thomgree/orgs", "repos_url": "https://api.github.com/users/thomgree/repos", "events_url": "https://api.github.com/users/thomgree/events{/privacy}", "received_events_url": "https://api.github.com/users/thomgree/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437"}], "stats": {"total": 133, "additions": 92, "deletions": 41}, "files": [{"sha": "c7e13f3a22bcf73ea58de44af18a161c97b0cb2a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e6cc142ad99ab8d28581f4ce61056c9cce74dba3", "patch": "@@ -895,28 +895,38 @@ strip_standard_conversion (conversion *conv)\n   return conv;\n }\n \n-/* Subroutine of build_aggr_conv: check whether CTOR, a braced-init-list,\n-   is a valid aggregate initializer for array type ATYPE.  */\n+/* Subroutine of build_aggr_conv: check whether FROM is a valid aggregate\n+   initializer for array type ATYPE.  */\n \n static bool\n-can_convert_array (tree atype, tree ctor, int flags, tsubst_flags_t complain)\n+can_convert_array (tree atype, tree from, int flags, tsubst_flags_t complain)\n {\n-  unsigned i;\n   tree elttype = TREE_TYPE (atype);\n-  for (i = 0; i < CONSTRUCTOR_NELTS (ctor); ++i)\n+  unsigned i;\n+\n+  if (TREE_CODE (from) == CONSTRUCTOR)\n     {\n-      tree val = CONSTRUCTOR_ELT (ctor, i)->value;\n-      bool ok;\n-      if (TREE_CODE (elttype) == ARRAY_TYPE\n-\t  && TREE_CODE (val) == CONSTRUCTOR)\n-\tok = can_convert_array (elttype, val, flags, complain);\n-      else\n-\tok = can_convert_arg (elttype, TREE_TYPE (val), val, flags,\n-\t\t\t      complain);\n-      if (!ok)\n-\treturn false;\n+      for (i = 0; i < CONSTRUCTOR_NELTS (from); ++i)\n+\t{\n+\t  tree val = CONSTRUCTOR_ELT (from, i)->value;\n+\t  bool ok;\n+\t  if (TREE_CODE (elttype) == ARRAY_TYPE)\n+\t    ok = can_convert_array (elttype, val, flags, complain);\n+\t  else\n+\t    ok = can_convert_arg (elttype, TREE_TYPE (val), val, flags,\n+\t\t\t\t  complain);\n+\t  if (!ok)\n+\t    return false;\n+\t}\n+      return true;\n     }\n-  return true;\n+\n+  if (char_type_p (TYPE_MAIN_VARIANT (elttype))\n+      && TREE_CODE (tree_strip_any_location_wrapper (from)) == STRING_CST)\n+    return array_string_literal_compatible_p (atype, from);\n+\n+  /* No other valid way to aggregate initialize an array.  */\n+  return false;\n }\n \n /* Helper for build_aggr_conv.  Return true if FIELD is in PSET, or if\n@@ -973,8 +983,7 @@ build_aggr_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n \t      tree ftype = TREE_TYPE (idx);\n \t      bool ok;\n \n-\t      if (TREE_CODE (ftype) == ARRAY_TYPE\n-\t\t  && TREE_CODE (val) == CONSTRUCTOR)\n+\t      if (TREE_CODE (ftype) == ARRAY_TYPE)\n \t\tok = can_convert_array (ftype, val, flags, complain);\n \t      else\n \t\tok = can_convert_arg (ftype, TREE_TYPE (val), val, flags,\n@@ -1021,8 +1030,7 @@ build_aggr_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n \t  val = empty_ctor;\n \t}\n \n-      if (TREE_CODE (ftype) == ARRAY_TYPE\n-\t  && TREE_CODE (val) == CONSTRUCTOR)\n+      if (TREE_CODE (ftype) == ARRAY_TYPE)\n \tok = can_convert_array (ftype, val, flags, complain);\n       else\n \tok = can_convert_arg (ftype, TREE_TYPE (val), val, flags,"}, {"sha": "970ed5e77bbb8147389aca8a22ae634f8569448e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e6cc142ad99ab8d28581f4ce61056c9cce74dba3", "patch": "@@ -7949,6 +7949,7 @@ extern tree split_nonconstant_init\t\t(tree, tree);\n extern bool check_narrowing\t\t\t(tree, tree, tsubst_flags_t,\n \t\t\t\t\t\t bool = false);\n extern bool ordinary_char_type_p\t\t(tree);\n+extern bool array_string_literal_compatible_p\t(tree, tree);\n extern tree digest_init\t\t\t\t(tree, tree, tsubst_flags_t);\n extern tree digest_init_flags\t\t\t(tree, tree, int, tsubst_flags_t);\n extern tree digest_nsdmi_init\t\t        (tree, tree, tsubst_flags_t);"}, {"sha": "bde305bd38eecb98c96717d23579521f9258a9d3", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=e6cc142ad99ab8d28581f4ce61056c9cce74dba3", "patch": "@@ -1003,6 +1003,29 @@ ordinary_char_type_p (tree type)\n \t  || type == unsigned_char_type_node);\n }\n \n+/* True iff the string literal INIT has a type suitable for initializing array\n+   TYPE.  */\n+\n+bool\n+array_string_literal_compatible_p (tree type, tree init)\n+{\n+  tree to_char_type = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n+  tree from_char_type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (init)));\n+\n+  if (to_char_type == from_char_type)\n+    return true;\n+  /* The array element type does not match the initializing string\n+     literal element type; this is only allowed when both types are\n+     ordinary character type.  There are no string literals of\n+     signed or unsigned char type in the language, but we can get\n+     them internally from converting braced-init-lists to\n+     STRING_CST.  */\n+  if (ordinary_char_type_p (to_char_type)\n+      && ordinary_char_type_p (from_char_type))\n+    return true;\n+  return false;\n+}\n+\n /* Process the initializer INIT for a variable of type TYPE, emitting\n    diagnostics for invalid initializers and converting the initializer as\n    appropriate.\n@@ -1070,30 +1093,13 @@ digest_init_r (tree type, tree init, int nested, int flags,\n       if (char_type_p (typ1)\n \t  && TREE_CODE (stripped_init) == STRING_CST)\n \t{\n-\t  tree char_type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (init)));\n-\t  bool incompat_string_cst = false;\n-\n-\t  if (typ1 != char_type)\n-\t    {\n-\t      /* The array element type does not match the initializing string\n-\t         literal element type; this is only allowed when both types are\n-\t         ordinary character type.  There are no string literals of\n-\t         signed or unsigned char type in the language, but we can get\n-\t         them internally from converting braced-init-lists to\n-\t         STRING_CST.  */\n-\t      if (ordinary_char_type_p (typ1)\n-\t\t  && ordinary_char_type_p (char_type))\n-\t\t/* OK */;\n-\t      else\n-\t\tincompat_string_cst = true;\n-\t    }\n-\n-\t  if (incompat_string_cst)\n+\t  if (!array_string_literal_compatible_p (type, init))\n \t    {\n \t      if (complain & tf_error)\n \t\terror_at (loc, \"cannot initialize array of %qT from \"\n-\t\t          \"a string literal with type array of %qT\",\n-\t\t          typ1, char_type);\n+\t\t\t  \"a string literal with type array of %qT\",\n+\t\t\t  typ1,\n+\t\t\t  TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (init))));\n \t      return error_mark_node;\n \t    }\n "}, {"sha": "fcc1f50dd810d626cc92cf80ae4e9518f248e50e", "filename": "gcc/testsuite/g++.dg/cpp1y/nsdmi-aggr12.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc142ad99ab8d28581f4ce61056c9cce74dba3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr12.C?ref=e6cc142ad99ab8d28581f4ce61056c9cce74dba3", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/90926\n+// { dg-do run { target c++14 } }\n+\n+#include <cassert>\n+\n+struct A\n+{\n+  char str[4] = \"foo\";\n+  char str_array[2][4] = {\"bar\", \"baz\"};\n+};\n+\n+struct B\n+{\n+  char16_t str[10];\n+};\n+\n+int called = 0;\n+void f(A) { called = 1;};\n+void f(B) { called = 2;};\n+\n+int\n+main ()\n+{\n+  A a;\n+  a.str[0] = 'g';\n+  a.str_array[0][0] = 'g';\n+  a = {};\n+\n+  if (__builtin_strcmp (a.str, \"foo\") != 0)\n+    __builtin_abort();\n+  if (__builtin_strcmp (a.str_array[0], \"bar\") != 0)\n+    __builtin_abort();\n+\n+  f({\"foo\"}); assert(called == 1);\n+  f({u\"foo\"}); assert(called == 2);\n+}"}]}