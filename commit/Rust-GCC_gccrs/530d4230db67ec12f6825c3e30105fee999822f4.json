{"sha": "530d4230db67ec12f6825c3e30105fee999822f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwZDQyMzBkYjY3ZWMxMmY2ODI1YzNlMzAxMDVmZWU5OTk4MjJmNA==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2003-03-07T04:40:08Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-03-07T04:40:08Z"}, "message": "jcf.h (COMPARE_FILENAMES): New macro similar to \"strcmp\" to compare file name components depending on the...\n\n2003-03-05  Ranjit Mathew  <rmathew@hotmail.com>\n\n\t* jcf.h (COMPARE_FILENAMES): New macro similar to \"strcmp\" to\n\tcompare file name components depending on the case-sensitivity\n\tor otherwise of the host file system.\n\n\t* jcf-path.c (add_entry): Use COMPARE_FILENAMES instead of\n\t\"strcmp\" to compare file name components.\n\tUse IS_DIR_SEPARATOR instead of comparing directly against\n\tDIR_SEPARATOR.\n\t(jcf_path_extdirs_arg): Use IS_DIR_SEPARATOR instead of\n\tcomparing directly against DIR_SEPARATOR.\n\nFrom-SVN: r63927", "tree": {"sha": "08478985eb6146a4ea94fb9410e98fb662f725af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08478985eb6146a4ea94fb9410e98fb662f725af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/530d4230db67ec12f6825c3e30105fee999822f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530d4230db67ec12f6825c3e30105fee999822f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530d4230db67ec12f6825c3e30105fee999822f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530d4230db67ec12f6825c3e30105fee999822f4/comments", "author": null, "committer": null, "parents": [{"sha": "203b3521b5ce07b383f0107e2f1fb79da0a2f98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203b3521b5ce07b383f0107e2f1fb79da0a2f98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203b3521b5ce07b383f0107e2f1fb79da0a2f98c"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "b65f0fc084fe79cda0a71043e10abe3c0838bf60", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d4230db67ec12f6825c3e30105fee999822f4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d4230db67ec12f6825c3e30105fee999822f4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=530d4230db67ec12f6825c3e30105fee999822f4", "patch": "@@ -1,3 +1,16 @@\n+2003-03-05  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\t* jcf.h (COMPARE_FILENAMES): New macro similar to \"strcmp\" to\n+\tcompare file name components depending on the case-sensitivity\n+\tor otherwise of the host file system.\n+\n+\t* jcf-path.c (add_entry): Use COMPARE_FILENAMES instead of\n+\t\"strcmp\" to compare file name components.\n+\tUse IS_DIR_SEPARATOR instead of comparing directly against\n+\tDIR_SEPARATOR.\n+\t(jcf_path_extdirs_arg): Use IS_DIR_SEPARATOR instead of \n+\tcomparing directly against DIR_SEPARATOR.\n+\n 2003-03-04  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (java.tags): New target."}, {"sha": "8771e6fd879ff8f79fd6295603f873559e351eee", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d4230db67ec12f6825c3e30105fee999822f4/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d4230db67ec12f6825c3e30105fee999822f4/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=530d4230db67ec12f6825c3e30105fee999822f4", "patch": "@@ -146,22 +146,23 @@ add_entry (struct entry **entp, const char *filename, int is_system)\n   n->next = NULL;\n \n   len = strlen (filename);\n-  if (len > 4 && (strcmp (filename + len - 4, \".zip\") == 0\n-\t\t  || strcmp (filename + len - 4, \".jar\") == 0))\n+\n+  if (len > 4 && (COMPARE_FILENAMES (filename + len - 4, \".zip\") == 0\n+\t\t  || COMPARE_FILENAMES (filename + len - 4, \".jar\") == 0))\n     {\n       n->flags |= FLAG_ZIP;\n       /* If the user uses -classpath then he'll have to include\n \t libgcj.jar in the value.  We check for this in a simplistic\n \t way.  Symlinks will fool this test.  This is only used for\n \t -MM and -MMD, so it probably isn't terribly important.  */\n-      if (! strcmp (filename, LIBGCJ_ZIP_FILE))\n+      if (! COMPARE_FILENAMES (filename, LIBGCJ_ZIP_FILE))\n \tn->flags |= FLAG_SYSTEM;\n     }\n \n   /* Note that we add a trailing separator to `.zip' names as well.\n      This is a little hack that lets the searching code in jcf-io.c\n      work more easily.  Eww.  */\n-  if (filename[len - 1] != '/' && filename[len - 1] != DIR_SEPARATOR)\n+  if (! IS_DIR_SEPARATOR (filename[len - 1]))\n     {\n       char *f2 = alloca (len + 2);\n       strcpy (f2, filename);\n@@ -370,7 +371,7 @@ jcf_path_extdirs_arg (const char *cp)\n \t\t\tchar *name = alloca (dirname_length\n \t\t\t\t\t     + strlen (direntp->d_name) + 2);\n \t\t\tstrcpy (name, buf);\n-\t\t\tif (name[dirname_length-1] != DIR_SEPARATOR)\n+\t\t\tif (! IS_DIR_SEPARATOR (name[dirname_length-1]))\n \t\t\t  {\n \t\t\t    name[dirname_length] = DIR_SEPARATOR;\n \t\t\t    name[dirname_length+1] = 0;"}, {"sha": "968097486921d92d51acacd2c3e98160459f170f", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530d4230db67ec12f6825c3e30105fee999822f4/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530d4230db67ec12f6825c3e30105fee999822f4/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=530d4230db67ec12f6825c3e30105fee999822f4", "patch": "@@ -54,6 +54,15 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #define JCF_USE_SCANDIR 0\n #endif \n \n+/* On case-insensitive file systems, file name components must be \n+   compared using \"strcasecmp\", if available, instead of \"strcmp\".\n+   Assumes \"config.h\" has already been included.  */\n+#if defined (HAVE_DOS_BASED_FILE_SYSTEM) && defined (HAVE_STRCASECMP)\n+#define COMPARE_FILENAMES(X, Y) strcasecmp ((X), (Y))\n+#else\n+#define COMPARE_FILENAMES(X, Y) strcmp ((X), (Y))\n+#endif\n+\n struct JCF;\n typedef int (*jcf_filbuf_t) PARAMS ((struct JCF*, int needed));\n "}]}