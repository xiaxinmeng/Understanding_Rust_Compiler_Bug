{"sha": "316a0661918aacd3cc0acca417b5390ad1e3d535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE2YTA2NjE5MThhYWNkM2NjMGFjY2E0MTdiNTM5MGFkMWUzZDUzNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:35:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:35:25Z"}, "message": "[multiple changes]\n\n2011-08-02  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb, sem_ch5.adb, sem_ch9.adb, sem_prag.adb, sem.ads,\n\tsem_util.adb, sem_util.ads, sem_res.adb, sem_ch2.adb, sem_ch4.adb,\n\tsem_ch6.adb, sem_ch11.adb: Add semantic flag In_Pre_Post_Expression to\n\tindicate that we are in a precondition or postcondition. This is used in\n\tMark_Non_ALFA_Subprogram (renaming of Mark_Non_ALFA_Subprogram_Body) to\n\tdecide whether to flag the spec or body of the current subprogram as\n\tnot in ALFA.\n\n2011-08-02  Fabien Chouteau  <chouteau@adacore.com>\n\n\t* impunit.adb: Add Ada.Execution_Time.Interrupts in the Ada2012 package\n\tlist.\n\t* a-extiin.ads: New file.\n\n2011-08-02  Bob Duff  <duff@adacore.com>\n\n\t* a-direct.adb (Rename): Implement AI05-0231-1. In particular, Rename\n\tnow raises Name_Error instead of Use_Error in certain cases. The other\n\tparts of this AI were already implemented properly.\n\nFrom-SVN: r177187", "tree": {"sha": "48433199b635c0174dbcc09d37dc391d03fde3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48433199b635c0174dbcc09d37dc391d03fde3a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/316a0661918aacd3cc0acca417b5390ad1e3d535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316a0661918aacd3cc0acca417b5390ad1e3d535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316a0661918aacd3cc0acca417b5390ad1e3d535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316a0661918aacd3cc0acca417b5390ad1e3d535/comments", "author": null, "committer": null, "parents": [{"sha": "1e88210d7fff339ded2a3562b49498d835c8ecf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e88210d7fff339ded2a3562b49498d835c8ecf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e88210d7fff339ded2a3562b49498d835c8ecf8"}], "stats": {"total": 218, "additions": 138, "deletions": 80}, "files": [{"sha": "b74d7a5faf7280e07c10abf9b762705b25a9d41c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -1,3 +1,25 @@\n+2011-08-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb, sem_ch5.adb, sem_ch9.adb, sem_prag.adb, sem.ads,\n+\tsem_util.adb, sem_util.ads, sem_res.adb, sem_ch2.adb, sem_ch4.adb,\n+\tsem_ch6.adb, sem_ch11.adb: Add semantic flag In_Pre_Post_Expression to\n+\tindicate that we are in a precondition or postcondition. This is used in\n+\tMark_Non_ALFA_Subprogram (renaming of Mark_Non_ALFA_Subprogram_Body) to\n+\tdecide whether to flag the spec or body of the current subprogram as\n+\tnot in ALFA.\n+\n+2011-08-02  Fabien Chouteau  <chouteau@adacore.com>\n+\n+\t* impunit.adb: Add Ada.Execution_Time.Interrupts in the Ada2012 package\n+\tlist.\n+\t* a-extiin.ads: New file.\n+\n+2011-08-02  Bob Duff  <duff@adacore.com>\n+\n+\t* a-direct.adb (Rename): Implement AI05-0231-1. In particular, Rename\n+\tnow raises Name_Error instead of Use_Error in certain cases. The other\n+\tparts of this AI were already implemented properly.\n+\n 2011-08-02  Vincent Celier  <celier@adacore.com>\n \n \t* link.c: Only import \"auto-host.h\" when building the gnattools."}, {"sha": "81b8dd5e86098a1f11ba311a95cf37f4d3ba540f", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,6 +40,7 @@ with Ada.Unchecked_Deallocation;\n with Ada.Characters.Handling;    use Ada.Characters.Handling;\n \n with System.CRTL;    use System.CRTL;\n+with System.OS_Constants;\n with System.OS_Lib;  use System.OS_Lib;\n with System.Regexp;  use System.Regexp;\n with System.File_IO; use System.File_IO;\n@@ -1060,8 +1061,20 @@ package body Ada.Directories is\n          Rename_File (Old_Name, New_Name, Success);\n \n          if not Success then\n-            raise Use_Error with\n-              \"file \"\"\" & Old_Name & \"\"\" could not be renamed\";\n+            --  AI05-0231-1: Name_Error should be raised in case a directory\n+            --  component of New_Name does not exist (as in New_Name =>\n+            --  \"/no-such-dir/new-filename\"). ENOENT indicates that. ENOENT\n+            --  also indicate that the Old_Name does not exist, but we already\n+            --  checked for that above. All other errors are Use_Error.\n+\n+            if Errno = System.OS_Constants.ENOENT then\n+               raise Name_Error with\n+                 \"file \"\"\" & Containing_Directory (New_Name) & \"\"\" not found\";\n+\n+            else\n+               raise Use_Error with\n+                 \"file \"\"\" & Old_Name & \"\"\" could not be renamed\";\n+            end if;\n          end if;\n       end if;\n    end Rename;"}, {"sha": "65e18428cd8860b4e36e2ffe8d1fff6b19ac2e5a", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2000-2010, Free Software Foundation, Inc.        --\n+--           Copyright (C) 2000-2011, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -513,6 +513,7 @@ package body Impunit is\n      \"a-cborma\",    -- Ada.Containers.Bounded_Ordered_Maps\n      \"a-cbhase\",    -- Ada.Containers.Bounded_Hashed_Sets\n      \"a-cbhama\",    -- Ada.Containers.Bounded_Hashed_Maps\n+     \"a-extiin\",    -- Ada.Execution_Time.Interrupts\n \n    -----------------------------------------\n    -- GNAT Defined Additions to Ada 20012 --"}, {"sha": "79c5a71d2c3294e651bf358ae1c80aac7fa72114", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -240,6 +240,14 @@ package Sem is\n    --  then Full_Analysis above must be False. You should really regard this as\n    --  a read only flag.\n \n+   In_Pre_Post_Expression : Boolean := False;\n+   --  Switch to indicate that we are in a precondition or postcondition. The\n+   --  analysis is not expected to process a precondition or a postcondition as\n+   --  a sub-analysis for another precondition or postcondition, so this switch\n+   --  needs not be saved for recursive calls. When this switch is True then\n+   --  In_Spec_Expression above must be True also. You should really regard\n+   --  this as a read only flag.\n+\n    In_Deleted_Code : Boolean := False;\n    --  If the condition in an if-statement is statically known, the branch\n    --  that is not taken is analyzed with expansion disabled, and the tree"}, {"sha": "48ffe4a5468a8c0eacf035090f69d7d20de0bc1a", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -443,7 +443,7 @@ package body Sem_Ch11 is\n       P              : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n       Check_Unreachable_Code (N);\n \n@@ -611,7 +611,7 @@ package body Sem_Ch11 is\n    --  Start of processing for Analyze_Raise_xxx_Error\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n \n       if No (Etype (N)) then"}, {"sha": "f2c915b06aaf833cc136c8bdf641a5ece0647a4a", "filename": "gcc/ada/sem_ch2.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch2.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -81,7 +81,7 @@ package body Sem_Ch2 is\n            and then Is_Object (Entity (N))\n            and then not Is_In_ALFA (Entity (N))\n          then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n          end if;\n       end if;\n    end Analyze_Identifier;"}, {"sha": "79a0828603d7afbea587c28c7dfe863a8cfe58d6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -3036,7 +3036,7 @@ package body Sem_Ch3 is\n       if Is_In_ALFA (T) and then not Aliased_Present (N) then\n          Set_Is_In_ALFA (Id);\n       else\n-         Mark_Non_ALFA_Subprogram_Body;\n+         Mark_Non_ALFA_Subprogram;\n       end if;\n \n       --  These checks should be performed before the initialization expression"}, {"sha": "ba631fbffc37e7eb438f23277d22edcce4e4419e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -350,7 +350,7 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Aggregate (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       if No (Etype (N)) then\n          Set_Etype (N, Any_Composite);\n@@ -371,7 +371,7 @@ package body Sem_Ch4 is\n       C        : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"allocator is not allowed\", N);\n \n       --  Deal with allocator restrictions\n@@ -991,7 +991,7 @@ package body Sem_Ch4 is\n          if not Is_Subprogram (Nam_Ent)\n            or else not Is_In_ALFA (Nam_Ent)\n          then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n          end if;\n \n          Analyze_One_Call (N, Nam_Ent, True, Success);\n@@ -1370,7 +1370,7 @@ package body Sem_Ch4 is\n       L  : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       Candidate_Type := Empty;\n \n@@ -1520,7 +1520,7 @@ package body Sem_Ch4 is\n          return;\n       end if;\n \n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"conditional expression is not allowed\", N);\n \n       Else_Expr := Next (Then_Expr);\n@@ -1721,7 +1721,7 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Explicit_Dereference\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"explicit dereference is not allowed\", N);\n \n       Analyze (P);\n@@ -2483,7 +2483,7 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Membership_Op\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       Analyze_Expression (L);\n \n@@ -2606,7 +2606,7 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Null (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"null is not allowed\", N);\n \n       Set_Etype (N, Any_Access);\n@@ -3235,7 +3235,7 @@ package body Sem_Ch4 is\n       T    : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       Analyze_Expression (Expr);\n \n@@ -3295,7 +3295,7 @@ package body Sem_Ch4 is\n       Iterator : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"quantified expression is not allowed\", N);\n \n       Set_Etype  (Ent,  Standard_Void_Type);\n@@ -3461,7 +3461,7 @@ package body Sem_Ch4 is\n       Acc_Type : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       Analyze (P);\n \n@@ -4326,7 +4326,7 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Slice\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"slice is not allowed\", N);\n \n       Analyze (P);\n@@ -4371,7 +4371,7 @@ package body Sem_Ch4 is\n       T    : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       --  If Conversion_OK is set, then the Etype is already set, and the\n       --  only processing required is to analyze the expression. This is\n@@ -4503,7 +4503,7 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Unchecked_Type_Conversion (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Find_Type (Subtype_Mark (N));\n       Analyze_Expression (Expression (N));\n       Set_Etype (N, Entity (Subtype_Mark (N)));"}, {"sha": "6283207cc517f081ce5413bac89e54ab4685f610", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -1113,7 +1113,7 @@ package body Sem_Ch5 is\n       if Others_Present\n         and then List_Length (Alternatives (N)) = 1\n       then\n-         Mark_Non_ALFA_Subprogram_Body;\n+         Mark_Non_ALFA_Subprogram;\n          Check_SPARK_Restriction\n            (\"OTHERS as unique case alternative is not allowed\", N);\n       end if;\n@@ -1195,7 +1195,7 @@ package body Sem_Ch5 is\n \n          else\n             if Has_Loop_In_Inner_Open_Scopes (U_Name) then\n-               Mark_Non_ALFA_Subprogram_Body;\n+               Mark_Non_ALFA_Subprogram;\n                Check_SPARK_Restriction\n                  (\"exit label must name the closest enclosing loop\", N);\n             end if;\n@@ -1242,14 +1242,14 @@ package body Sem_Ch5 is\n \n       if Present (Cond) then\n          if Nkind (Parent (N)) /= N_Loop_Statement then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n             Check_SPARK_Restriction\n               (\"exit with when clause must be directly in loop\", N);\n          end if;\n \n       else\n          if Nkind (Parent (N)) /= N_If_Statement then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n             if Nkind (Parent (N)) = N_Elsif_Part then\n                Check_SPARK_Restriction\n                  (\"exit must be in IF without ELSIF\", N);\n@@ -1258,22 +1258,22 @@ package body Sem_Ch5 is\n             end if;\n \n          elsif Nkind (Parent (Parent (N))) /= N_Loop_Statement then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n             Check_SPARK_Restriction\n               (\"exit must be in IF directly in loop\", N);\n \n             --  First test the presence of ELSE, so that an exit in an ELSE\n             --  leads to an error mentioning the ELSE.\n \n          elsif Present (Else_Statements (Parent (N))) then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n             Check_SPARK_Restriction (\"exit must be in IF without ELSE\", N);\n \n             --  An exit in an ELSIF does not reach here, as it would have been\n             --  detected in the case (Nkind (Parent (N)) /= N_If_Statement).\n \n          elsif Present (Elsif_Parts (Parent (N))) then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n             Check_SPARK_Restriction (\"exit must be in IF without ELSIF\", N);\n          end if;\n       end if;\n@@ -1302,7 +1302,7 @@ package body Sem_Ch5 is\n       Label_Ent   : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"goto statement is not allowed\", N);\n \n       --  Actual semantic checks"}, {"sha": "99ba2a23af276243935418ccd4ffc80efa6c9daa", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -638,13 +638,13 @@ package body Sem_Ch6 is\n              (Nkind (Parent (Parent (N))) /= N_Subprogram_Body\n                or else Present (Next (N)))\n          then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n             Check_SPARK_Restriction\n               (\"RETURN should be the last statement in function\", N);\n          end if;\n \n       else\n-         Mark_Non_ALFA_Subprogram_Body;\n+         Mark_Non_ALFA_Subprogram;\n          Check_SPARK_Restriction (\"extended RETURN is not allowed\", N);\n \n          --  Analyze parts specific to extended_return_statement:"}, {"sha": "f535f7e331d92ee419c9e38113e124bcd8f705b5", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -101,7 +101,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"abort statement is not allowed\", N);\n \n       T_Name := First (Names (N));\n@@ -140,7 +140,7 @@ package body Sem_Ch9 is\n    procedure Analyze_Accept_Alternative (N : Node_Id) is\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));\n@@ -174,7 +174,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"accept statement is not allowed\", N);\n \n       --  Entry name is initialized to Any_Id. It should get reset to the\n@@ -406,7 +406,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (Max_Asynchronous_Select_Nesting, N);\n       Check_Restriction (No_Select_Statements, N);\n@@ -453,7 +453,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -500,7 +500,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_Restriction (No_Delay, N);\n \n       if Present (Pragmas_Before (N)) then\n@@ -552,7 +552,7 @@ package body Sem_Ch9 is\n       E : constant Node_Id := Expression (N);\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"delay statement is not allowed\", N);\n       Check_Restriction (No_Relative_Delay, N);\n       Check_Restriction (No_Delay, N);\n@@ -571,7 +571,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"delay statement is not allowed\", N);\n       Check_Restriction (No_Delay, N);\n       Check_Potentially_Blocking_Operation (N);\n@@ -600,7 +600,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       --  Entry_Name is initialized to Any_Id. It should get reset to the\n       --  matching entry entity. An error is signalled if it is not reset\n@@ -833,7 +833,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       if Present (Index) then\n          Analyze (Index);\n@@ -861,7 +861,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"entry call is not allowed\", N);\n \n       if Present (Pragmas_Before (N)) then\n@@ -897,7 +897,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Def_Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       --  Case of no discrete subtype definition\n \n@@ -967,7 +967,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Analyze (Def);\n \n       --  There is no elaboration of the entry index specification. Therefore,\n@@ -1009,7 +1009,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Set_Ekind (Body_Id, E_Protected_Body);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n \n@@ -1128,7 +1128,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"protected definition is not allowed\", N);\n       Analyze_Declarations (Visible_Declarations (N));\n \n@@ -1182,7 +1182,7 @@ package body Sem_Ch9 is\n       end if;\n \n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_Restriction (No_Protected_Types, N);\n \n       T := Find_Type_Name (N);\n@@ -1324,7 +1324,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"requeue statement is not allowed\", N);\n       Check_Restriction (No_Requeue_Statements, N);\n       Check_Unreachable_Code (N);\n@@ -1599,7 +1599,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -1720,7 +1720,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       --  The node is rewritten as a protected type declaration, in exact\n       --  analogy with what is done with single tasks.\n@@ -1782,7 +1782,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       --  The node is rewritten as a task type declaration, followed by an\n       --  object declaration of that anonymous task type.\n@@ -1860,7 +1860,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Set_Ekind (Body_Id, E_Task_Body);\n       Set_Scope (Body_Id, Current_Scope);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n@@ -1981,7 +1981,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"task definition is not allowed\", N);\n \n       if Present (Visible_Declarations (N)) then\n@@ -2016,7 +2016,7 @@ package body Sem_Ch9 is\n    begin\n       Check_Restriction (No_Tasking, N);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       T := Find_Type_Name (N);\n       Generate_Definition (T);\n \n@@ -2122,7 +2122,7 @@ package body Sem_Ch9 is\n    procedure Analyze_Terminate_Alternative (N : Node_Id) is\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));\n@@ -2144,7 +2144,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -2181,7 +2181,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram_Body;\n+      Mark_Non_ALFA_Subprogram;\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));"}, {"sha": "20b63b8ccfa8bb64c4d1f475265c06f3e315f79b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -253,8 +253,11 @@ package body Sem_Prag is\n       --  Preanalyze the boolean expression, we treat this as a spec expression\n       --  (i.e. similar to a default expression).\n \n+      pragma Assert (In_Pre_Post_Expression = False);\n+      In_Pre_Post_Expression := True;\n       Preanalyze_Spec_Expression\n         (Get_Pragma_Arg (Arg1), Standard_Boolean);\n+      In_Pre_Post_Expression := False;\n \n       --  Remove the subprogram from the scope stack now that the pre-analysis\n       --  of the precondition/postcondition is done."}, {"sha": "840537d83775f32bdafadb6cd5f9957d1a67f24d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -5964,12 +5964,12 @@ package body Sem_Res is\n       --  types or array types except String.\n \n       if Is_Boolean_Type (T) then\n-         Mark_Non_ALFA_Subprogram_Body;\n+         Mark_Non_ALFA_Subprogram;\n          Check_SPARK_Restriction\n            (\"comparison is not defined on Boolean type\", N);\n \n       elsif Is_Array_Type (T) then\n-         Mark_Non_ALFA_Subprogram_Body;\n+         Mark_Non_ALFA_Subprogram;\n \n          if Base_Type (T) /= Standard_String then\n             Check_SPARK_Restriction\n@@ -6828,7 +6828,7 @@ package body Sem_Res is\n          --  operands have equal static bounds.\n \n          if Is_Array_Type (T) then\n-            Mark_Non_ALFA_Subprogram_Body;\n+            Mark_Non_ALFA_Subprogram;\n \n             --  Protect call to Matching_Static_Array_Bounds to avoid costly\n             --  operation if not needed.\n@@ -7378,7 +7378,7 @@ package body Sem_Res is\n       if Is_Array_Type (B_Typ)\n         and then Nkind (N) in N_Binary_Op\n       then\n-         Mark_Non_ALFA_Subprogram_Body;\n+         Mark_Non_ALFA_Subprogram;\n \n          declare\n             Left_Typ  : constant Node_Id := Etype (Left_Opnd (N));"}, {"sha": "a9a9100b5043cd76e4bbb014e98e6264c3249975", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -141,7 +141,7 @@ package body Sem_Util is\n    --  T is a derived tagged type. Check whether the type extension is null.\n    --  If the parent type is fully initialized, T can be treated as such.\n \n-   procedure Mark_Non_ALFA_Subprogram_Body_Unconditional;\n+   procedure Mark_Non_ALFA_Subprogram_Unconditional;\n    --  Perform the action for Mark_Non_ALFA_Subprogram_Body, which allows the\n    --  latter to be small and inlined.\n \n@@ -2315,34 +2315,42 @@ package body Sem_Util is\n       end if;\n    end Current_Subprogram;\n \n-   -----------------------------------\n-   -- Mark_Non_ALFA_Subprogram_Body --\n-   -----------------------------------\n+   ------------------------------\n+   -- Mark_Non_ALFA_Subprogram --\n+   ------------------------------\n \n-   procedure Mark_Non_ALFA_Subprogram_Body is\n+   procedure Mark_Non_ALFA_Subprogram is\n    begin\n       --  Isolate marking of the current subprogram body so that the body of\n-      --  Mark_Non_ALFA_Subprogram_Body is small and inlined.\n+      --  Mark_Non_ALFA_Subprogram is small and inlined.\n \n       if ALFA_Mode then\n-         Mark_Non_ALFA_Subprogram_Body_Unconditional;\n+         Mark_Non_ALFA_Subprogram_Unconditional;\n       end if;\n-   end Mark_Non_ALFA_Subprogram_Body;\n+   end Mark_Non_ALFA_Subprogram;\n \n-   -------------------------------------------------\n-   -- Mark_Non_ALFA_Subprogram_Body_Unconditional --\n-   -------------------------------------------------\n+   --------------------------------------------\n+   -- Mark_Non_ALFA_Subprogram_Unconditional --\n+   --------------------------------------------\n \n-   procedure Mark_Non_ALFA_Subprogram_Body_Unconditional is\n+   procedure Mark_Non_ALFA_Subprogram_Unconditional is\n       Cur_Subp : constant Entity_Id := Current_Subprogram;\n    begin\n       if Present (Cur_Subp)\n         and then (Is_Subprogram (Cur_Subp)\n                    or else Is_Generic_Subprogram (Cur_Subp))\n       then\n-         Set_Body_Is_In_ALFA (Cur_Subp, False);\n+         --  If the non-ALFA construct is in a precondition or postcondition,\n+         --  then mark the subprogram as not in ALFA. Otherwise, mark the\n+         --  subprogram body as not in ALFA.\n+\n+         if In_Pre_Post_Expression then\n+            Set_Is_In_ALFA (Cur_Subp, False);\n+         else\n+            Set_Body_Is_In_ALFA (Cur_Subp, False);\n+         end if;\n       end if;\n-   end Mark_Non_ALFA_Subprogram_Body_Unconditional;\n+   end Mark_Non_ALFA_Subprogram_Unconditional;\n \n    ---------------------\n    -- Defining_Entity --"}, {"sha": "938b03100cd162e11779918c64e1f09118e915a1", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a0661918aacd3cc0acca417b5390ad1e3d535/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=316a0661918aacd3cc0acca417b5390ad1e3d535", "patch": "@@ -277,9 +277,12 @@ package Sem_Util is\n    --  Current_Scope is returned. The returned value is Empty if this is called\n    --  from a library package which is not within any subprogram.\n \n-   procedure Mark_Non_ALFA_Subprogram_Body;\n-   --  If Current_Subprogram is not Empty, set its flag Body_Is_In_ALFA to\n-   --  False, otherwise do nothing.\n+   procedure Mark_Non_ALFA_Subprogram;\n+   --  If Current_Subprogram is not Empty, mark either its specification or its\n+   --  body as not being in ALFA. If called during the analysis of a\n+   --  precondition or postcondition, as indicated by the flag\n+   --  In_Pre_Post_Expression, mark the specification as not being in ALFA.\n+   --  Otherwise, mark the body as not being in ALFA.\n \n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the"}]}