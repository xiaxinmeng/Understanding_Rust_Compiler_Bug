{"sha": "d50e6b7b3768458ba6f47eee373674023230613e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwZTZiN2IzNzY4NDU4YmE2ZjQ3ZWVlMzczNjc0MDIzMjMwNjEzZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-05T14:12:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-05T14:12:47Z"}, "message": "(get_imp, __objc_responds_to): Surround sarray access with mutex lock/unlock.\n\n(__objc_init_install_dtable): Likewise.\n(__objc_update_dispatch_table_for_class): Likewise.\n(__objc_print_dtable_stats): Likewise.\n\nFrom-SVN: r11448", "tree": {"sha": "263c8b00493b4e5d7d9be83ee6604cb515325ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/263c8b00493b4e5d7d9be83ee6604cb515325ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d50e6b7b3768458ba6f47eee373674023230613e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50e6b7b3768458ba6f47eee373674023230613e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50e6b7b3768458ba6f47eee373674023230613e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50e6b7b3768458ba6f47eee373674023230613e/comments", "author": null, "committer": null, "parents": [{"sha": "2dae9809eeaf144a5165cdfe706dd29ee156eead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dae9809eeaf144a5165cdfe706dd29ee156eead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dae9809eeaf144a5165cdfe706dd29ee156eead"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "0b29946f6d28e22cb21bbe263fc65caa8f200510", "filename": "gcc/objc/sendmsg.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50e6b7b3768458ba6f47eee373674023230613e/gcc%2Fobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50e6b7b3768458ba6f47eee373674023230613e/gcc%2Fobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsendmsg.c?ref=d50e6b7b3768458ba6f47eee373674023230613e", "patch": "@@ -1,5 +1,5 @@\n /* GNU Objective C Runtime message lookup \n-   Copyright (C) 1993, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n \n This file is part of GNU CC.\n@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* The uninstalled dispatch table */\n-struct sarray* __objc_uninstalled_dtable = 0;\n+struct sarray* __objc_uninstalled_dtable = 0;   /* !T:MUTEX */\n \n /* Send +initialize to class */\n static void __objc_send_initialize(Class);\n@@ -76,7 +76,9 @@ get_imp (Class class, SEL sel)\n   void* res = sarray_get (class->dtable, (size_t) sel->sel_id);\n   if(res == __objc_init_install_dtable)\n     {\n+      objc_mutex_lock(__objc_runtime_mutex);\n       __objc_install_dispatch_table_for_class (class);\n+      objc_mutex_unlock(__objc_runtime_mutex);\n       res = sarray_get (class->dtable, (size_t) sel->sel_id);\n     }\n   if (res == 0)\n@@ -96,7 +98,9 @@ __objc_responds_to (id object, SEL sel)\n   void* res = sarray_get (object->class_pointer->dtable, (size_t) sel->sel_id);\n   if(res == __objc_init_install_dtable)\n     {\n+      objc_mutex_lock(__objc_runtime_mutex);\n       __objc_install_dispatch_table_for_class (object->class_pointer);\n+      objc_mutex_unlock(__objc_runtime_mutex);\n       res = sarray_get (object->class_pointer->dtable, (size_t) sel->sel_id);\n     }\n   return (res != 0);\n@@ -172,6 +176,8 @@ static void __objc_init_install_dtable(id receiver, SEL op)\n   if(receiver->class_pointer->dtable != __objc_uninstalled_dtable)\n     goto already_initialized;\n \n+  objc_mutex_lock(__objc_runtime_mutex);\n+\n   if(CLS_ISCLASS(receiver->class_pointer))\n     {\n       /* receiver is an ordinary object */\n@@ -198,6 +204,7 @@ static void __objc_init_install_dtable(id receiver, SEL op)\n       else\n \tCLS_SETINITIALIZED((Class)receiver);\n     }\n+  objc_mutex_unlock(__objc_runtime_mutex);\n \n already_initialized:\n   \n@@ -269,6 +276,7 @@ static void __objc_send_initialize(Class class)\n     }\n }  \n \n+/* Assumes that __objc_runtime_mutex is locked down. */\n static void\n __objc_install_dispatch_table_for_class (Class class)\n {\n@@ -289,7 +297,9 @@ __objc_install_dispatch_table_for_class (Class class)\n   /* Allocate dtable if necessary */\n   if (super == 0)\n     {\n+      objc_mutex_lock(__objc_runtime_mutex);\n       class->dtable = sarray_new (__objc_selector_max_index, 0);\n+      objc_mutex_unlock(__objc_runtime_mutex);\n     }\n   else\n     class->dtable = sarray_lazy_copy (super->dtable);\n@@ -311,25 +321,31 @@ __objc_install_dispatch_table_for_class (Class class)\n void __objc_update_dispatch_table_for_class (Class class)\n {\n   Class next;\n+  struct sarray *arr;\n \n   /* not yet installed -- skip it */\n   if (class->dtable == __objc_uninstalled_dtable) \n     return;\n \n-  sarray_free (class->dtable);\t/* release memory */\n+  objc_mutex_lock(__objc_runtime_mutex);\n+\n+  arr = class->dtable;\n   __objc_install_premature_dtable (class); /* someone might require it... */\n+  sarray_free (arr);\t\t\t   /* release memory */\n+\n   __objc_install_dispatch_table_for_class (class); /* could have been lazy... */\n \n   if (class->subclass_list)\t/* Traverse subclasses */\n     for (next = class->subclass_list; next; next = next->sibling_class)\n       __objc_update_dispatch_table_for_class (next);\n \n+  objc_mutex_unlock(__objc_runtime_mutex);\n }\n \n \n /* This function adds a method list to a class.  This function is\n    typically called by another function specific to the run-time.  As\n-   such this function does not worry about thread safe issued.\n+   such this function does not worry about thread safe issues.\n \n    This one is only called for categories. Class objects have their\n    methods installed right away, and their selectors are made into\n@@ -338,7 +354,8 @@ void\n class_add_method_list (Class class, MethodList_t list)\n {\n   int i;\n-  static SEL initialize_sel = 0;\n+  static SEL initialize_sel = 0;                /* !T:SAFE2 */\n+\n   if (!initialize_sel)\n     initialize_sel = sel_register_name (\"initialize\");\n \n@@ -482,7 +499,7 @@ static retval_t\n __objc_forward (id object, SEL sel, arglist_t args)\n {\n   IMP imp;\n-  static SEL frwd_sel = 0;\n+  static SEL frwd_sel = 0;                      /* !T:SAFE2 */\n   SEL err_sel;\n \n   /* first try if the object understands forward:: */\n@@ -534,6 +551,9 @@ __objc_forward (id object, SEL sel, arglist_t args)\n void __objc_print_dtable_stats()\n {\n   int total = 0;\n+\n+  objc_mutex_lock(__objc_runtime_mutex);\n+\n   printf(\"memory usage: (%s)\\n\",\n #ifdef OBJC_SPARSE2\n \t \"2-level sparse arrays\"\n@@ -552,6 +572,8 @@ void __objc_print_dtable_stats()\n   printf(\"-----------------------------------\\n\");\n   printf(\"total: %d bytes\\n\", total);\n   printf(\"===================================\\n\");\n+\n+  objc_mutex_unlock(__objc_runtime_mutex);\n }\n \n "}]}