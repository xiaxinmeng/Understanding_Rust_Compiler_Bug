{"sha": "bec3e66d1a37c885eb41556e322e150b6241dfb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVjM2U2NmQxYTM3Yzg4NWViNDE1NTZlMzIyZTE1MGI2MjQxZGZiMA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2003-06-13T12:20:45Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-06-13T12:20:45Z"}, "message": "prims.cc (catch_segv): Create exception in handler.\n\n2003-06-12  Andrew Haley  <aph@redhat.com>\n\n        * prims.cc (catch_segv): Create exception in handler.\n        (catch_fpe): Likewise.\n        (_Jv_divI, _Jv_remI, _Jv_divJ, _Jv_remJ): Likewise.\n        (_Jv_ThrowSignal): Remove.\n\n        * include/x86_64-signal.h (INIT_SEGV): Delete reference to nullp.\n        * include/default-signal.h (INIT_SEGV, INIT_FPE): Delete reference\n        to nullp and arithexception.\n        * include/dwarf2-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n        * include/i386-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n        * include/s390-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n        * include/sparc-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n        * include/win32-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n\nFrom-SVN: r67892", "tree": {"sha": "f6a9be472e2ed22b97800e7de0cfd99ecb2818bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a9be472e2ed22b97800e7de0cfd99ecb2818bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bec3e66d1a37c885eb41556e322e150b6241dfb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec3e66d1a37c885eb41556e322e150b6241dfb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec3e66d1a37c885eb41556e322e150b6241dfb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec3e66d1a37c885eb41556e322e150b6241dfb0/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12e816bf16cabc88455ac694e25ac2792a7aaa31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e816bf16cabc88455ac694e25ac2792a7aaa31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e816bf16cabc88455ac694e25ac2792a7aaa31"}], "stats": {"total": 101, "additions": 45, "deletions": 56}, "files": [{"sha": "24a8e9dbaf728796e88b7f883db393ea20db1a55", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -1,3 +1,19 @@\n+2003-06-12  Andrew Haley  <aph@redhat.com>\n+\n+\t* prims.cc (catch_segv): Create exception in handler.\n+\t(catch_fpe): Likewise.\t\n+\t(_Jv_divI, _Jv_remI, _Jv_divJ, _Jv_remJ): Likewise.\n+\t(_Jv_ThrowSignal): Remove.\n+\n+\t* include/x86_64-signal.h (INIT_SEGV): Delete reference to nullp.\n+\t* include/default-signal.h (INIT_SEGV, INIT_FPE): Delete reference\n+\tto nullp and arithexception.\n+\t* include/dwarf2-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n+\t* include/i386-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n+\t* include/s390-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n+\t* include/sparc-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n+\t* include/win32-signal.h (INIT_SEGV, INIT_FPE): Likewise.\n+\n 2003-06-11  Andrew Haley  <aph@redhat.com>\n \n \t* jni.cc (_Jv_JNI_check_types): New."}, {"sha": "1c50f5f7ec3a96e088f7c4265bfc841c56e46288", "filename": "libjava/include/default-signal.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fdefault-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fdefault-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdefault-signal.h?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -24,16 +24,13 @@ static void _name (int _dummy)\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();\t\t\\\n     signal (SIGSEGV, catch_segv);\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\t\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException \t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     signal (SIGFPE, catch_fpe);\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)"}, {"sha": "43f0cbe914f9548a2726257f80c676d4de0bb397", "filename": "libjava/include/dwarf2-signal.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fdwarf2-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fdwarf2-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdwarf2-signal.h?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -143,7 +143,6 @@ extern \"C\" {\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();    \t\\\n     struct kernel_sigaction act;\t\t\t\t\\\n     unsigned long stub = ((unsigned long)&__rt_sigreturn_stub); \\\n     act.k_sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n@@ -158,8 +157,6 @@ while (0)\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   { \t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException \t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct kernel_sigaction act;\t\t\t\t\\\n     unsigned long stub = ((unsigned long)&__rt_sigreturn_stub); \\\n     act.k_sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n@@ -185,7 +182,6 @@ extern \"C\" {\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n     struct kernel_sigaction act;\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();    \t\\\n     act.k_sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n     act.k_sa_mask = 0;\t\t\t\t\t\t\\\n     act.k_sa_flags = SA_SIGINFO;\t       \t\t\t\\\n@@ -197,8 +193,6 @@ while (0)\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   { \t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException \t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct kernel_sigaction act;\t\t\t\t\\\n     act.k_sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n     act.k_sa_mask = 0;\t\t\t\t\t\t\\\n@@ -212,7 +206,6 @@ while (0)\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();    \t\\\n     struct sigaction act;\t\t\t\t\t\\\n     act.sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n@@ -224,8 +217,6 @@ while (0)\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   { \t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException \t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct sigaction act;\t\t\t\t\t\\\n     act.sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n@@ -250,7 +241,6 @@ while (0)\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();    \t\\\n     struct sigaction act;\t\t\t\t\t\\\n     act.sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n@@ -262,8 +252,6 @@ while (0)\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   { \t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException \t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct sigaction act;\t\t\t\t\t\\\n     act.sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\"}, {"sha": "869a928332c17886c954d185a8fffae3d2e43486", "filename": "libjava/include/i386-signal.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fi386-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fi386-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fi386-signal.h?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -111,7 +111,6 @@ struct old_i386_kernel_sigaction {\n #define INIT_SEGV\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();\t\\\n     struct old_i386_kernel_sigaction kact;\t\t\\\n     kact.k_sa_handler = catch_segv;\t\t\t\\\n     kact.k_sa_mask = 0;\t\t\t\t\t\\\n@@ -123,8 +122,6 @@ while (0)\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException\t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct old_i386_kernel_sigaction kact;\t\t\t\\\n     kact.k_sa_handler = catch_fpe;\t\t\t\t\\\n     kact.k_sa_mask = 0;\t\t\t\t\t\t\\"}, {"sha": "8b9adae05a086716c6fa41ed34c8d90d3d8fd6dc", "filename": "libjava/include/s390-signal.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fs390-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fs390-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fs390-signal.h?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -52,7 +52,6 @@ struct old_s390_kernel_sigaction {\n #define INIT_SEGV\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();\t\\\n     struct old_s390_kernel_sigaction kact;\t\t\\\n     kact.k_sa_handler = catch_segv;\t\t\t\\\n     kact.k_sa_mask = 0;\t\t\t\t\t\\\n@@ -64,8 +63,6 @@ while (0)\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException\t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct old_s390_kernel_sigaction kact;\t\t\t\\\n     kact.k_sa_handler = catch_fpe;\t\t\t\t\\\n     kact.k_sa_mask = 0;\t\t\t\t\t\t\\"}, {"sha": "1676d26396b5134a46cbdba7b6575f0de8d6d035", "filename": "libjava/include/sparc-signal.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fsparc-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fsparc-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fsparc-signal.h?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -45,7 +45,6 @@ while (0)\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();\t\t\\\n     struct sigaction act;\t\t\t\t\t\\\n     act.sa_sigaction = catch_segv;\t\t\t\t\\\n     act.sa_flags = SA_SIGINFO | SA_NODEFER;\t\t\t\\\n@@ -57,8 +56,6 @@ while (0)\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException \t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct sigaction act;\t\t\t\t\t\\\n     act.sa_flags = SA_SIGINFO | SA_NODEFER;\t\t\t\\\n     act.sa_sigaction = catch_fpe;\t\t\t\t\\"}, {"sha": "8d8a9e2d5bfad51069f266609d07b2546a249dd0", "filename": "libjava/include/win32-signal.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fwin32-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fwin32-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32-signal.h?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -26,16 +26,13 @@ static void _name (int _dummy)\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)\n \n \n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException \t\\\n-      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)\n "}, {"sha": "eb034473f9eadfff5a8b9d65f08131c57bc6e957", "filename": "libjava/include/x86_64-signal.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fx86_64-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Finclude%2Fx86_64-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fx86_64-signal.h?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -64,7 +64,6 @@ static void restore_rt (void) asm (\"__restore_rt\");\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    nullp = new java::lang::NullPointerException ();\t\t\\\n     struct kernel_sigaction act;\t\t\t\t\\\n     act.k_sa_sigaction = _Jv_catch_segv;\t\t\t\\\n     sigemptyset (&act.k_sa_mask);\t\t\t\t\\"}, {"sha": "8d9cc6d97d7f2c7070b3b9ceaa4627608dcdafcf", "filename": "libjava/prims.cc", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec3e66d1a37c885eb41556e322e150b6241dfb0/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=bec3e66d1a37c885eb41556e322e150b6241dfb0", "patch": "@@ -122,39 +122,27 @@ void (*_Jv_JVMPI_Notify_THREAD_END) (JVMPI_Event *event);\n #endif\n \f\n \n-extern \"C\" void _Jv_ThrowSignal (jthrowable) __attribute ((noreturn));\n-\n-// Just like _Jv_Throw, but fill in the stack trace first.  Although\n-// this is declared extern in order that its name not be mangled, it\n-// is not intended to be used outside this file.\n-void \n-_Jv_ThrowSignal (jthrowable throwable)\n-{\n-  throwable->fillInStackTrace ();\n-  throw throwable;\n-}\n- \n #ifdef HANDLE_SEGV\n-static java::lang::NullPointerException *nullp;\n-\n SIGNAL_HANDLER (catch_segv)\n {\n+  java::lang::NullPointerException *nullp \n+    = new java::lang::NullPointerException;\n   MAKE_THROW_FRAME (nullp);\n-  _Jv_ThrowSignal (nullp);\n+  throw nullp;\n }\n #endif\n \n-static java::lang::ArithmeticException *arithexception;\n-\n #ifdef HANDLE_FPE\n SIGNAL_HANDLER (catch_fpe)\n {\n+  java::lang::ArithmeticException *arithexception \n+    = new java::lang::ArithmeticException (JvNewStringLatin1 (\"/ by zero\"));\n #ifdef HANDLE_DIVIDE_OVERFLOW\n   HANDLE_DIVIDE_OVERFLOW;\n #else\n   MAKE_THROW_FRAME (arithexception);\n #endif\n-  _Jv_ThrowSignal (arithexception);\n+  throw arithexception;\n }\n #endif\n \n@@ -921,9 +909,6 @@ _Jv_CreateJavaVM (void* /*vm_args*/)\n   INIT_SEGV;\n #ifdef HANDLE_FPE\n   INIT_FPE;\n-#else\n-  arithexception = new java::lang::ArithmeticException\n-    (JvNewStringLatin1 (\"/ by zero\"));\n #endif\n   \n   no_memory = new java::lang::OutOfMemoryError;\n@@ -1093,7 +1078,11 @@ jint\n _Jv_divI (jint dividend, jint divisor)\n {\n   if (__builtin_expect (divisor == 0, false))\n-    _Jv_ThrowSignal (arithexception);\n+    {\n+      java::lang::ArithmeticException *arithexception \n+\t= new java::lang::ArithmeticException (JvNewStringLatin1 (\"/ by zero\"));      \n+      throw arithexception;\n+    }\n   \n   if (dividend == (jint) 0x80000000L && divisor == -1)\n     return dividend;\n@@ -1105,20 +1094,28 @@ jint\n _Jv_remI (jint dividend, jint divisor)\n {\n   if (__builtin_expect (divisor == 0, false))\n-    _Jv_ThrowSignal (arithexception);\n+    {\n+      java::lang::ArithmeticException *arithexception \n+\t= new java::lang::ArithmeticException (JvNewStringLatin1 (\"/ by zero\"));      \n+      throw arithexception;\n+    }\n   \n   if (dividend == (jint) 0x80000000L && divisor == -1)\n     return 0;\n-\n+  \n   return dividend % divisor;\n }\n \n jlong\n _Jv_divJ (jlong dividend, jlong divisor)\n {\n   if (__builtin_expect (divisor == 0, false))\n-    _Jv_ThrowSignal (arithexception);\n-  \n+    {\n+      java::lang::ArithmeticException *arithexception \n+\t= new java::lang::ArithmeticException (JvNewStringLatin1 (\"/ by zero\"));      \n+      throw arithexception;\n+    }\n+\n   if (dividend == (jlong) 0x8000000000000000LL && divisor == -1)\n     return dividend;\n \n@@ -1129,8 +1126,12 @@ jlong\n _Jv_remJ (jlong dividend, jlong divisor)\n {\n   if (__builtin_expect (divisor == 0, false))\n-    _Jv_ThrowSignal (arithexception);\n-  \n+    {\n+      java::lang::ArithmeticException *arithexception \n+\t= new java::lang::ArithmeticException (JvNewStringLatin1 (\"/ by zero\"));      \n+      throw arithexception;\n+    }\n+\n   if (dividend == (jlong) 0x8000000000000000LL && divisor == -1)\n     return 0;\n "}]}