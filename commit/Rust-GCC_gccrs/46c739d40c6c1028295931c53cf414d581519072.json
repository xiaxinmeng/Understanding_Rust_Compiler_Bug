{"sha": "46c739d40c6c1028295931c53cf414d581519072", "node_id": "C_kwDOANBUbNoAKDQ2YzczOWQ0MGM2YzEwMjgyOTU5MzFjNTNjZjQxNGQ1ODE1MTkwNzI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-07T07:14:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-07T07:14:07Z"}, "message": "c++: Handle __builtin_clear_padding on non-trivially-copyable types [PR102586]\n\nOn Fri, Feb 11, 2022 at 07:55:50PM +0100, Jakub Jelinek via Gcc-patches wrote:\n> Something like the https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102586#c16\n> will still be needed with adjusted testcase from\n> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=102586#c15 such that\n> __builtin_clear_padding is called directly on var addresses rather than\n> in separate functions.\n\nHere is an updated version of the\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=102586#c15\npatch which uses FIELD_DECL in the langhook instead of its TREE_TYPE,\nand the testcases have been adjusted for the builtin accepting\npointers to non-trivially-copyable types only if it is address of a\ndeclaration.\n\n2022-04-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/102586\ngcc/\n\t* langhooks.h (struct lang_hooks_for_types): Add classtype_as_base\n\tlanghook.\n\t* langhooks-def.h (LANG_HOOKS_CLASSTYPE_AS_BASE): Define.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add it.\n\t* gimple-fold.cc (clear_padding_type): Use ftype instead of\n\tTREE_TYPE (field) some more.  For artificial FIELD_DECLs without\n\tname try the lang_hooks.types.classtype_as_base langhook and\n\tif it returns non-NULL, use that instead of ftype for recursive call.\ngcc/cp/\n\t* cp-objcp-common.h (cp_classtype_as_base): Declare.\n\t(LANG_HOOKS_CLASSTYPE_AS_BASE): Redefine.\n\t* cp-objcp-common.cc (cp_classtype_as_base): New function.\ngcc/testsuite/\n\t* g++.dg/torture/builtin-clear-padding-5.C: New test.\n\t* g++.dg/cpp2a/builtin-clear-padding1.C (bar): Uncomment one\n\tcall that is now accepted.", "tree": {"sha": "70ecb58f0520543a4b071225b890f17fc21c9da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ecb58f0520543a4b071225b890f17fc21c9da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46c739d40c6c1028295931c53cf414d581519072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c739d40c6c1028295931c53cf414d581519072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c739d40c6c1028295931c53cf414d581519072", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c739d40c6c1028295931c53cf414d581519072/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "973a2ce71f8dab559fbbfc34b59e39e047df74a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973a2ce71f8dab559fbbfc34b59e39e047df74a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973a2ce71f8dab559fbbfc34b59e39e047df74a6"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "0b70d5567e47e73308173d009eb0baffa84ca21e", "filename": "gcc/cp/cp-objcp-common.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c739d40c6c1028295931c53cf414d581519072/gcc%2Fcp%2Fcp-objcp-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c739d40c6c1028295931c53cf414d581519072/gcc%2Fcp%2Fcp-objcp-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.cc?ref=46c739d40c6c1028295931c53cf414d581519072", "patch": "@@ -280,6 +280,22 @@ cp_unit_size_without_reusable_padding (tree type)\n   return TYPE_SIZE_UNIT (type);\n }\n \n+/* Returns type corresponding to FIELD's type when FIELD is a C++ base class\n+   i.e., type without virtual base classes or tail padding.  Returns\n+   NULL_TREE otherwise.  */\n+\n+tree\n+cp_classtype_as_base (const_tree field)\n+{\n+  if (DECL_FIELD_IS_BASE (field))\n+    {\n+      tree type = TREE_TYPE (field);\n+      if (TYPE_LANG_SPECIFIC (type))\n+\treturn CLASSTYPE_AS_BASE (type);\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Stubs to keep c-opts.cc happy.  */\n void\n push_file_scope (void)"}, {"sha": "3c04e5c026565e655197756413dc069d46b0573e", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c739d40c6c1028295931c53cf414d581519072/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c739d40c6c1028295931c53cf414d581519072/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=46c739d40c6c1028295931c53cf414d581519072", "patch": "@@ -31,6 +31,7 @@ extern int cp_decl_dwarf_attribute (const_tree, int);\n extern int cp_type_dwarf_attribute (const_tree, int);\n extern void cp_common_init_ts (void);\n extern tree cp_unit_size_without_reusable_padding (tree);\n+extern tree cp_classtype_as_base (const_tree);\n extern tree cp_get_global_decls ();\n extern tree cp_pushdecl (tree);\n extern void cp_register_dumps (gcc::dump_manager *);\n@@ -167,6 +168,8 @@ extern tree cxx_simulate_record_decl (location_t, const char *,\n #define LANG_HOOKS_TYPE_DWARF_ATTRIBUTE cp_type_dwarf_attribute\n #undef LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING\n #define LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING cp_unit_size_without_reusable_padding\n+#undef LANG_HOOKS_CLASSTYPE_AS_BASE\n+#define LANG_HOOKS_CLASSTYPE_AS_BASE cp_classtype_as_base\n \n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING cxx_omp_predetermined_sharing"}, {"sha": "ac22adfd9b19ca8096b1b4c67ffdb806f20e3bde", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c739d40c6c1028295931c53cf414d581519072/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c739d40c6c1028295931c53cf414d581519072/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=46c739d40c6c1028295931c53cf414d581519072", "patch": "@@ -4747,7 +4747,7 @@ clear_padding_type (clear_padding_struct *buf, tree type,\n \t\t\t\t      \"have well defined padding bits for %qs\",\n \t\t\t    field, \"__builtin_clear_padding\");\n \t      }\n-\t    else if (is_empty_type (TREE_TYPE (field)))\n+\t    else if (is_empty_type (ftype))\n \t      continue;\n \t    else\n \t      {\n@@ -4758,8 +4758,9 @@ clear_padding_type (clear_padding_struct *buf, tree type,\n \t\tgcc_assert (pos >= 0 && fldsz >= 0 && pos >= cur_pos);\n \t\tclear_padding_add_padding (buf, pos - cur_pos);\n \t\tcur_pos = pos;\n-\t\tclear_padding_type (buf, TREE_TYPE (field),\n-\t\t\t\t    fldsz, for_auto_init);\n+\t\tif (tree asbase = lang_hooks.types.classtype_as_base (field))\n+\t\t  ftype = asbase;\n+\t\tclear_padding_type (buf, ftype, fldsz, for_auto_init);\n \t\tcur_pos += fldsz;\n \t      }\n \t  }"}, {"sha": "e226395170963ed525e5c078a356e42e18571a75", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c739d40c6c1028295931c53cf414d581519072/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c739d40c6c1028295931c53cf414d581519072/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=46c739d40c6c1028295931c53cf414d581519072", "patch": "@@ -216,6 +216,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n #define LANG_HOOKS_GET_FIXED_POINT_TYPE_INFO NULL\n #define LANG_HOOKS_TYPE_DWARF_ATTRIBUTE\tlhd_type_dwarf_attribute\n #define LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING lhd_unit_size_without_reusable_padding\n+#define LANG_HOOKS_CLASSTYPE_AS_BASE\thook_tree_const_tree_null\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n@@ -243,7 +244,8 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n   LANG_HOOKS_GET_DEBUG_TYPE, \\\n   LANG_HOOKS_GET_FIXED_POINT_TYPE_INFO, \\\n   LANG_HOOKS_TYPE_DWARF_ATTRIBUTE, \\\n-  LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING \\\n+  LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING, \\\n+  LANG_HOOKS_CLASSTYPE_AS_BASE \\\n }\n \n /* Declaration hooks.  */"}, {"sha": "4731f089a2e2aadd6ed28768d7d1bf8cd1c7246e", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c739d40c6c1028295931c53cf414d581519072/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c739d40c6c1028295931c53cf414d581519072/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=46c739d40c6c1028295931c53cf414d581519072", "patch": "@@ -188,6 +188,11 @@ struct lang_hooks_for_types\n   /* Returns a tree for the unit size of T excluding tail padding that\n      might be used by objects inheriting from T.  */\n   tree (*unit_size_without_reusable_padding) (tree);\n+\n+  /* Returns type corresponding to FIELD's type when FIELD is a C++ base class\n+     i.e., type without virtual base classes or tail padding.  Returns\n+     NULL_TREE otherwise.  */\n+  tree (*classtype_as_base) (const_tree);\n };\n \n /* Language hooks related to decls and the symbol table.  */"}, {"sha": "ed74ebf19c32344f7661535639d0b87a3b186fb9", "filename": "gcc/testsuite/g++.dg/cpp2a/builtin-clear-padding1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c739d40c6c1028295931c53cf414d581519072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbuiltin-clear-padding1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c739d40c6c1028295931c53cf414d581519072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbuiltin-clear-padding1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbuiltin-clear-padding1.C?ref=46c739d40c6c1028295931c53cf414d581519072", "patch": "@@ -43,7 +43,7 @@ bar ()\n   __builtin_clear_padding (&c2);\n   __builtin_clear_padding (&c3);\n   __builtin_clear_padding (&c4);\n-//  __builtin_clear_padding (&c5);\n+  __builtin_clear_padding (&c5);\n   __builtin_clear_padding (&c6);\n   __builtin_clear_padding (&c7);\n   __builtin_clear_padding (&c8);"}, {"sha": "b5f0191478160870d4e72ab7870e167fea34e545", "filename": "gcc/testsuite/g++.dg/torture/builtin-clear-padding-5.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c739d40c6c1028295931c53cf414d581519072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-clear-padding-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c739d40c6c1028295931c53cf414d581519072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-clear-padding-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-clear-padding-5.C?ref=46c739d40c6c1028295931c53cf414d581519072", "patch": "@@ -0,0 +1,44 @@\n+// PR tree-optimization/102586\n+// { dg-options \"-Wno-inaccessible-base\" }\n+\n+struct C0 {};\n+struct C1 {};\n+struct C2 : C1, virtual C0 {};\n+struct C3 : virtual C2, C1 { virtual int foo () { return 1; } };\n+struct C4 : virtual C3, C1 { virtual int foo () { return 2; } };\n+struct C5 : C4 { virtual int foo () { return 3; } };\n+struct C6 { char c; };\n+struct C7 : virtual C6, virtual C3, C1 { virtual int foo () { return 4; } };\n+struct C8 : C7 { virtual int foo () { return 5; } };\n+\n+__attribute__((noipa)) int\n+bar (C5 *p)\n+{\n+  return p->foo ();\n+}\n+\n+__attribute__((noipa)) int\n+baz (C3 *p)\n+{\n+  return p->foo ();\n+}\n+\n+__attribute__((noipa)) int\n+qux (C8 *p)\n+{\n+  return p->foo ();\n+}\n+\n+int\n+main ()\n+{\n+  C5 c5;\n+  C8 c8;\n+  c8.c = 42;\n+  __builtin_clear_padding (&c5);\n+  __builtin_clear_padding (&c8);\n+  if (bar (&c5) != 3 || baz (&c5) != 3)\n+    __builtin_abort ();\n+  if (qux (&c8) != 5 || baz (&c8) != 5 || c8.c != 42)\n+    __builtin_abort ();\n+}"}]}