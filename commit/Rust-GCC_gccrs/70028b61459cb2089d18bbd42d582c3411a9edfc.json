{"sha": "70028b61459cb2089d18bbd42d582c3411a9edfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwMjhiNjE0NTljYjIwODlkMThiYmQ0MmQ1ODJjMzQxMWE5ZWRmYw==", "commit": {"author": {"name": "Peter Barada", "email": "peter@the-baradas.com", "date": "2005-07-11T23:32:01Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2005-07-11T23:32:01Z"}, "message": "re PR target/16719 ([ColdFire] Illegal move of byte itno address register causes compiler to ICE)\n\n\tPR middle-end/16719\n\tPR middle-end/18421\n\t* config/m68k/m68k.h (HARD_REGNO_MODE_OK): Disallow bytes\n\tin address registers.\n\t* config/m68k/m68k.c (hard_regno_mode_ok): Likewise.\n\t* config/m68k/m68k.md: Replace 's' with 'i' in 4th\n\talternative of addsi3_5200.\n\nFrom-SVN: r101900", "tree": {"sha": "4cc0ae32ccf61548b04a5c0c6ca5854fd1a2cfce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cc0ae32ccf61548b04a5c0c6ca5854fd1a2cfce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70028b61459cb2089d18bbd42d582c3411a9edfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70028b61459cb2089d18bbd42d582c3411a9edfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70028b61459cb2089d18bbd42d582c3411a9edfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70028b61459cb2089d18bbd42d582c3411a9edfc/comments", "author": null, "committer": null, "parents": [{"sha": "8564e10e6e74d99aad9c6a401f1e7896a0ef8454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8564e10e6e74d99aad9c6a401f1e7896a0ef8454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8564e10e6e74d99aad9c6a401f1e7896a0ef8454"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "afe196e620250609113f96f96f390ddb955f2c3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70028b61459cb2089d18bbd42d582c3411a9edfc", "patch": "@@ -1,3 +1,13 @@\n+2005-07-12  Peter Barada  <peter@the-baradas.com>\n+\n+\tPR middle-end/16719\n+\tPR middle-end/18421\n+\t* config/m68k/m68k.h (HARD_REGNO_MODE_OK): Disallow bytes\n+\tin address registers.\n+\t* config/m68k/m68k.c (hard_regno_mode_ok): Likewise.\n+\t* config/m68k/m68k.md: Replace 's' with 'i' in 4th\n+\talternative of addsi3_5200.\n+\n 2005-07-11  Ian Lance Taylor  <ian@airs.com>\n \n \t* config/mips/mips.md (ffs<mode>2): Remove."}, {"sha": "028e2939c49dddc8efd0ca4913e9ec6266de12c1", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=70028b61459cb2089d18bbd42d582c3411a9edfc", "patch": "@@ -54,6 +54,7 @@ extern int valid_dbcc_comparison_p_2 (rtx, enum machine_mode);\n \n #endif /* RTX_CODE */\n \n+extern bool m68k_regno_mode_ok (int, enum machine_mode);\n extern int flags_in_68881 (void);\n extern bool use_return_insn (void);\n extern void override_options (void);"}, {"sha": "2af20a480c32609c229ce56825e27f4862feff2a", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=70028b61459cb2089d18bbd42d582c3411a9edfc", "patch": "@@ -3360,3 +3360,36 @@ m68k_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n \n   return 1;\n }\n+\n+/* Value is true if hard register REGNO can hold a value of machine-mode MODE.\n+   On the 68000, the cpu registers can hold any mode except bytes in address\n+   registers, but the 68881 registers can hold only SFmode or DFmode.  */\n+bool\n+m68k_regno_mode_ok (int regno, enum machine_mode mode)\n+{\n+  if (regno < 8)\n+    {\n+\t/* Data Registers, can hold aggregate if fits in.  */\n+\tif (regno + GET_MODE_SIZE (mode) / 4 <= 8)\n+\t  return true;\n+    }\n+  else if (regno < 16)\n+    {\n+\t/* Address Registers, can't hold bytes, can hold aggregate if\n+\t   fits in.  */\n+\tif (GET_MODE_SIZE (mode) == 1)\n+\t  return false;\n+\tif (regno + GET_MODE_SIZE (mode) / 4 <= 16)\n+\t  return true;\n+    }\n+  else if (regno < 24)\n+    {\n+      /* FPU registers, hold float or complex float of long double or\n+\t   smaller.  */\n+\tif ((GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t     || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT)\n+\t    && GET_MODE_UNIT_SIZE (mode) <= 12)\n+\t  return true;\n+    }\n+  return false;\n+}"}, {"sha": "5320749b464839b77f7ad3b9381c79585ec65ee2", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=70028b61459cb2089d18bbd42d582c3411a9edfc", "patch": "@@ -260,15 +260,12 @@ Boston, MA 02110-1301, USA.  */\n #define HARD_REGNO_RENAME_OK(OLD_REG, NEW_REG) \\\n   m68k_hard_regno_rename_ok (OLD_REG, NEW_REG)\n \n-/* On the m68k, the cpu registers can hold any mode but the 68881 registers\n-   can hold only SFmode or DFmode.  */\n+/* Value is true if hard register REGNO can hold a value of machine-mode MODE.\n+   On the 68000, the cpu registers can hold any mode except bytes in\n+   address registers, the 68881 registers can hold only SFmode or DFmode.  */\n+\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n-  (((REGNO) < 16\t\t\t\t\t\\\n-    && !((REGNO) < 8 && (REGNO) + GET_MODE_SIZE (MODE) / 4 > 8))\t\\\n-   || ((REGNO) >= 16 && (REGNO) < 24\t\t\t\t        \\\n-       && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n-\t   || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)\t\t\\\n-       && GET_MODE_UNIT_SIZE (MODE) <= 12))\n+  m68k_regno_mode_ok ((REGNO), (MODE))\n \n #define MODES_TIEABLE_P(MODE1, MODE2)\t\t\t\\\n   (! TARGET_68881\t\t\t\t\t\\"}, {"sha": "5c65b1c80d3259b23d507456e422ef0698e1d569", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70028b61459cb2089d18bbd42d582c3411a9edfc/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=70028b61459cb2089d18bbd42d582c3411a9edfc", "patch": "@@ -1851,7 +1851,7 @@\n (define_insn \"*addsi3_5200\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=m,?a,?a,r\")\n \t(plus:SI (match_operand:SI 1 \"general_operand\" \"%0,a,rJK,0\")\n-\t\t (match_operand:SI 2 \"general_src_operand\" \"d,rJK,a,mrIKLs\")))]\n+\t\t (match_operand:SI 2 \"general_src_operand\" \"d,rJK,a,mrIKLi\")))]\n   \"TARGET_COLDFIRE\"\n   \"* return output_addsi3 (operands);\")\n "}]}