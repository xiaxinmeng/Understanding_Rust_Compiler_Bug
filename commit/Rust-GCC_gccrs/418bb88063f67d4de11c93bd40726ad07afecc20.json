{"sha": "418bb88063f67d4de11c93bd40726ad07afecc20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE4YmI4ODA2M2Y2N2Q0ZGUxMWM5M2JkNDA3MjZhZDA3YWZlY2MyMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-04-02T12:07:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-04-02T12:07:07Z"}, "message": "basic_string.h (replace(i1, i2, _CharT* k1, _CharT* k2), [...]): New specializations to optimize for the common cases of pointers and iterators.\n\n2002-04-02  Paolo Carlini  <pcarlini@unitus.it>\n\t    Nathan Myers  <ncm@cantrip.org>\n            Philip Martin  <philip@codematters.co.uk>\n\n\t* include/bits/basic_string.h\n\t(replace(i1, i2, _CharT* k1, _CharT* k2),\n\treplace(i2, i2, const _CharT* k1, const _CharT* k2),\n\treplace(i1, i2, iterator k1, iterator k2,\n\treplace(i1, i2, const_iterator k1, const_iterator k2):\n\tNew specializations to optimize for the common cases of\n\tpointers and iterators.\n\t(replace(pos, n1, s, n2)): Tweak.\n\t* include/bits/basic_string.tcc: Tweak comments.\n\t* testsuite/21_strings/replace.cc (test04): New tests.\n\nCo-Authored-By: Nathan Myers <ncm@cantrip.org>\nCo-Authored-By: Philip Martin <philip@codematters.co.uk>\n\nFrom-SVN: r51746", "tree": {"sha": "84110f6a4d89323263592cce80721716dec05443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84110f6a4d89323263592cce80721716dec05443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/418bb88063f67d4de11c93bd40726ad07afecc20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418bb88063f67d4de11c93bd40726ad07afecc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/418bb88063f67d4de11c93bd40726ad07afecc20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418bb88063f67d4de11c93bd40726ad07afecc20/comments", "author": null, "committer": null, "parents": [{"sha": "a14713223feae48a1a8c6b5883e9fedcfce44894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14713223feae48a1a8c6b5883e9fedcfce44894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14713223feae48a1a8c6b5883e9fedcfce44894"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "a2fcd532eee321570c1c8004b5ce3b56274137b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418bb88063f67d4de11c93bd40726ad07afecc20/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418bb88063f67d4de11c93bd40726ad07afecc20/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=418bb88063f67d4de11c93bd40726ad07afecc20", "patch": "@@ -1,3 +1,18 @@\n+2002-04-02  Paolo Carlini  <pcarlini@unitus.it>\n+            Nathan Myers  <ncm@cantrip.org>\n+            Philip Martin  <philip@codematters.co.uk>\n+\n+\t* include/bits/basic_string.h\n+\t(replace(i1, i2, _CharT* k1, _CharT* k2),\n+\treplace(i2, i2, const _CharT* k1, const _CharT* k2),\n+\treplace(i1, i2, iterator k1, iterator k2,\n+\treplace(i1, i2, const_iterator k1, const_iterator k2):\n+\tNew specializations to optimize for the common cases of\n+\tpointers and iterators.\n+\t(replace(pos, n1, s, n2)): Tweak.\n+\t* include/bits/basic_string.tcc: Tweak comments.\n+\t* testsuite/21_strings/replace.cc (test04): New tests.\n+\n 2002-04-01  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tlibstdc++/5542"}, {"sha": "ba539e7ae86cf6b98f16210a6b9e7a227e568c02", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418bb88063f67d4de11c93bd40726ad07afecc20/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418bb88063f67d4de11c93bd40726ad07afecc20/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=418bb88063f67d4de11c93bd40726ad07afecc20", "patch": "@@ -648,9 +648,12 @@ namespace std\n \tif (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n \t    || less<const _CharT*>()(_M_data() + __size, __s))\n \t  return _M_replace_safe(_M_ibegin() + __pos,\n-\t\t\t\t _M_ibegin() + __pos + __foldn1, __s, __s + __n2);\t\n-\telse return this->replace(_M_check(__pos), _M_fold(__pos, __n1),\n-\t\t\t\t  __s, __s + __n2); \n+\t\t\t\t _M_ibegin() + __pos + __foldn1, __s, __s + __n2);\n+\t// Todo: optimized in-place replace.\n+\telse return\n+\t       _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __foldn1,\n+\t\t\t  __s, __s + __n2,\n+\t\t\t  typename iterator_traits<const _CharT*>::iterator_category());\n       }\n \n       basic_string& \n@@ -684,6 +687,30 @@ namespace std\n         { return _M_replace(__i1, __i2, __k1, __k2,\n \t     typename iterator_traits<_InputIterator>::iterator_category()); }\n \n+      // Specializations for the common case of pointer and iterator:\n+      // useful to avoid the overhead of temporary buffering in _M_replace.\n+      basic_string& \n+      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)\n+        { return this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t       __k1, __k2 - __k1); }\n+\n+      basic_string& \n+      replace(iterator __i1, iterator __i2, const _CharT* __k1, const _CharT* __k2)\n+        { return this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t       __k1, __k2 - __k1); }\n+\n+      basic_string& \n+      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)\n+        { return this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t       __k1.base(), __k2 - __k1);\n+\t}\n+\n+      basic_string& \n+      replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2)\n+        { return this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t       __k1.base(), __k2 - __k1);\n+\t}\n+\n     private:\n       template<class _InputIterator>\n         basic_string& "}, {"sha": "50818da602bdfd988145570e9887b324de1a437d", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418bb88063f67d4de11c93bd40726ad07afecc20/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418bb88063f67d4de11c93bd40726ad07afecc20/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=418bb88063f67d4de11c93bd40726ad07afecc20", "patch": "@@ -497,14 +497,10 @@ namespace std\n \tthis->erase(__n);\n       // else nothing (in particular, avoid calling _M_mutate() unnecessarily.)\n     }\n-  \n-  // This is the general replace helper, which gets instantiated both\n-  // for input-iterators and forward-iterators. It buffers internally and\n-  // then calls _M_replace_safe. For input-iterators this is almost the\n-  // best we can do, but for forward-iterators many optimizations could be\n-  // conceived: f.i., when source and destination ranges do not overlap\n-  // buffering is not really needed. In order to easily implement them, it\n-  // could become useful to add an _M_replace(forward_iterator_tag)\n+\n+  // This is the general replace helper, which currently gets instantiated both\n+  // for input iterators and reverse iterators. It buffers internally and then\n+  // calls _M_replace_safe.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InputIter>\n       basic_string<_CharT, _Traits, _Alloc>&\n@@ -518,10 +514,8 @@ namespace std\n       }\n \n   // This is a special replace helper, which does not buffer internally\n-  // and can be used in the \"safe\" situations involving forward-iterators,\n+  // and can be used in \"safe\" situations involving forward iterators,\n   // i.e., when source and destination ranges are known to not overlap.\n-  // Presently, is called by _M_replace, by the various append and by\n-  // the assigns.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _ForwardIter>\n       basic_string<_CharT, _Traits, _Alloc>&"}, {"sha": "1b3cc3162f2bf100578db5d02948aa9842e22fe3", "filename": "libstdc++-v3/testsuite/21_strings/replace.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418bb88063f67d4de11c93bd40726ad07afecc20/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418bb88063f67d4de11c93bd40726ad07afecc20/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc?ref=418bb88063f67d4de11c93bd40726ad07afecc20", "patch": "@@ -139,10 +139,47 @@ test03()\n   VERIFY(str01 == \"ultra\");\n }\n \n+// Some more tests for \n+// template<typename InputIter>\n+//   string& replace(iterator it1, iterator it2, InputIter j1, InputIter j2)\n+void\n+test04()\n+{\n+  std::string str01 = \"geogaddi\";\n+  std::string str02;\n+\n+  typedef std::string::iterator iterator;\n+  typedef std::string::const_iterator const_iterator;\n+  \n+  iterator it1 = str01.begin();\n+  iterator it2 = str01.end();\n+  str02.replace(str02.begin(), str02.end(), it1, it2);\n+  VERIFY(str02 == \"geogaddi\");\n+\n+  str02 = \"boards\";\n+  const_iterator c_it1 = str01.begin();\n+  const_iterator c_it2 = str01.end();\n+  str02.replace(str02.begin(), str02.end(), c_it1, c_it2);\n+  VERIFY(str02 == \"geogaddi\");\n+\n+  str02 = \"boards\";\n+  const char* c_ptr1 = str01.c_str();\n+  const char* c_ptr2 = str01.c_str() + 8;\n+  str02.replace(str02.begin(), str02.end(), c_ptr1, c_ptr2);\n+  VERIFY(str02 == \"geogaddi\");\n+\n+  str02 = \"boards\";\n+  char* ptr1 = &*str01.begin();\n+  char* ptr2 = &*str01.end();\n+  str02.replace(str02.begin(), str02.end(), ptr1, ptr2);\n+  VERIFY(str02 == \"geogaddi\");\n+}\n+\n int main()\n { \n   test01();\n   test02();\n   test03();\n+  test04();\n   return 0;\n }"}]}