{"sha": "294c6f66373d29a9300a414fab24f1eefb473ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0YzZmNjYzNzNkMjlhOTMwMGE0MTRmYWIyNGYxZWVmYjQ3M2NjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-08T12:02:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-08T12:02:38Z"}, "message": "re PR target/85480 (zero extension from xmm to zmm via _mm512_insert???x? not optimized)\n\n\tPR target/85480\n\t* config/i386/sse.md (ssequaterinsnmode): New mode attribute.\n\t(*<extract_type>_vinsert<shuffletype><extract_suf>_0): New pattern.\n\n\t* gcc.target/i386/avx512dq-pr85480-1.c: New test.\n\t* gcc.target/i386/avx512dq-pr85480-2.c: New test.\n\nFrom-SVN: r260039", "tree": {"sha": "68b1c13067763c232bd3b11113242401b5764431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68b1c13067763c232bd3b11113242401b5764431"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294c6f66373d29a9300a414fab24f1eefb473ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294c6f66373d29a9300a414fab24f1eefb473ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294c6f66373d29a9300a414fab24f1eefb473ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294c6f66373d29a9300a414fab24f1eefb473ccf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57cfbfbab8ec2a2ca4fb060bf95e0d03a8df57f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cfbfbab8ec2a2ca4fb060bf95e0d03a8df57f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cfbfbab8ec2a2ca4fb060bf95e0d03a8df57f2"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "74c90d83fbb18749f069340c3900fb2f849434f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=294c6f66373d29a9300a414fab24f1eefb473ccf", "patch": "@@ -1,3 +1,9 @@\n+2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85480\n+\t* config/i386/sse.md (ssequaterinsnmode): New mode attribute.\n+\t(*<extract_type>_vinsert<shuffletype><extract_suf>_0): New pattern.\n+\n 2018-05-08  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/85658"}, {"sha": "aab4261343e68bd16d7b351cdb10e764bc2ac429", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=294c6f66373d29a9300a414fab24f1eefb473ccf", "patch": "@@ -581,6 +581,9 @@\n (define_mode_attr ssequartermode\n   [(V16SF \"V4SF\") (V8DF \"V2DF\") (V16SI \"V4SI\") (V8DI \"V2DI\")])\n \n+(define_mode_attr ssequarterinsnmode\n+  [(V16SF \"V4SF\") (V8DF \"V2DF\") (V16SI \"TI\") (V8DI \"TI\")])\n+\n (define_mode_attr ssedoublemodelower\n   [(V16QI \"v16hi\") (V32QI \"v32hi\") (V64QI \"v64hi\")\n    (V8HI \"v8si\")   (V16HI \"v16si\") (V32HI \"v32si\")\n@@ -12721,6 +12724,40 @@\n   DONE;\n })\n \n+(define_insn \"*<extract_type>_vinsert<shuffletype><extract_suf>_0\"\n+  [(set (match_operand:AVX512_VEC 0 \"register_operand\" \"=v,x,Yv\")\n+\t(vec_merge:AVX512_VEC\n+\t  (match_operand:AVX512_VEC 1 \"reg_or_0_operand\" \"v,C,C\")\n+\t  (vec_duplicate:AVX512_VEC\n+\t\t(match_operand:<ssequartermode> 2 \"nonimmediate_operand\" \"vm,xm,vm\"))\n+\t  (match_operand:SI 3 \"const_int_operand\" \"n,n,n\")))]\n+  \"TARGET_AVX512F\n+   && (INTVAL (operands[3])\n+       == (GET_MODE_UNIT_SIZE (<MODE>mode) == 4 ? 0xFFF0 : 0xFC))\"\n+{\n+  if (which_alternative == 0)\n+    return \"vinsert<shuffletype><extract_suf>\\t{$0, %2, %1, %0|%0, %1, %2, 0}\";\n+  switch (<MODE>mode)\n+    {\n+    case E_V8DFmode:\n+      return \"vmovapd\\t{%2, %x0|%x0, %2}\";\n+    case E_V16SFmode:\n+      return \"vmovaps\\t{%2, %x0|%x0, %2}\";\n+    case E_V8DImode:\n+      return which_alternative == 2 ? \"vmovdqa64\\t{%2, %x0|%x0, %2}\"\n+\t\t\t\t    : \"vmovdqa\\t{%2, %x0|%x0, %2}\";\n+    case E_V16SImode:\n+      return which_alternative == 2 ? \"vmovdqa32\\t{%2, %x0|%x0, %2}\"\n+\t\t\t\t    : \"vmovdqa\\t{%2, %x0|%x0, %2}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sselog,ssemov,ssemov\")\n+   (set_attr \"length_immediate\" \"1,0,0\")\n+   (set_attr \"prefix\" \"evex,vex,evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>,<ssequarterinsnmode>,<ssequarterinsnmode>\")])\n+\n (define_insn \"<mask_codefor><extract_type>_vinsert<shuffletype><extract_suf>_1<mask_name>\"\n   [(set (match_operand:AVX512_VEC 0 \"register_operand\" \"=v\")\n \t(vec_merge:AVX512_VEC"}, {"sha": "6d92f7ee1c2443128689e3eae2fb64b8277a4296", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=294c6f66373d29a9300a414fab24f1eefb473ccf", "patch": "@@ -1,3 +1,9 @@\n+2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85480\n+\t* gcc.target/i386/avx512dq-pr85480-1.c: New test.\n+\t* gcc.target/i386/avx512dq-pr85480-2.c: New test.\n+\n 2018-05-08  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* g++.dg/other/sve_const_pred_1.C: Rename to..."}, {"sha": "681477f02c8c276550d05b431ff8c03b084020c2", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-pr85480-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85480-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85480-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85480-1.c?ref=294c6f66373d29a9300a414fab24f1eefb473ccf", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/85480 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512dq\" } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[^\\n\\r]*xmm0\\[^\\n\\r]*xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[^\\n\\r]*xmm0\\[^\\n\\r]*xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[^\\n\\r]*xmm0\\[^\\n\\r]*xmm0\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+__m512\n+f1 (__m128 a)\n+{\n+  return _mm512_insertf32x4 (_mm512_set1_ps (0.0f), a, 0);\n+}\n+\n+__m512d\n+f2 (__m128d a)\n+{\n+  return _mm512_insertf64x2 (_mm512_set1_pd (0.0), a, 0);\n+}\n+\n+__m512i\n+f3 (__m128i a)\n+{\n+  return _mm512_inserti32x4 (_mm512_set1_epi32 (0), a, 0);\n+}"}, {"sha": "670870f4edefc7edec6b60f1732de95cb16be251", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-pr85480-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85480-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294c6f66373d29a9300a414fab24f1eefb473ccf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85480-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr85480-2.c?ref=294c6f66373d29a9300a414fab24f1eefb473ccf", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/85480 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -mavx512dq -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[^\\n\\r]*xmm1\\[67]\\[^\\n\\r]*xmm1\\[67]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[^\\n\\r]*xmm1\\[67]\\[^\\n\\r]*xmm1\\[67]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa32\\[^\\n\\r]*xmm1\\[67]\\[^\\n\\r]*xmm1\\[67]\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+__m512\n+f1 (__m128 a)\n+{\n+  register __m128 b __asm (\"xmm16\");\n+  asm (\"\" : \"=v\" (b) : \"0\" (a));\n+  register __m512 c __asm (\"xmm17\") = _mm512_insertf32x4 (_mm512_set1_ps (0.0f), b, 0);\n+  asm (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+__m512d\n+f2 (__m128d a)\n+{\n+  register __m128d b __asm (\"xmm16\");\n+  asm (\"\" : \"=v\" (b) : \"0\" (a));\n+  register __m512d c __asm (\"xmm17\") = _mm512_insertf64x2 (_mm512_set1_pd (0.0), b, 0);\n+  asm (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+__m512i\n+f3 (__m128i a)\n+{\n+  register __m128i b __asm (\"xmm16\");\n+  asm (\"\" : \"=v\" (b) : \"0\" (a));\n+  register __m512i c __asm (\"xmm17\") = _mm512_inserti32x4 (_mm512_set1_epi32 (0), b, 0);\n+  asm (\"\" : \"+v\" (c));\n+  return c;\n+}"}]}