{"sha": "096380816540c78e63e64f0349af2a0416be8f56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2MzgwODE2NTQwYzc4ZTYzZTY0ZjAzNDlhZjJhMDQxNmJlOGY1Ng==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2003-07-27T19:04:42Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-07-27T19:04:42Z"}, "message": "2003-07-27  Thomas Fitzsimmons <fitzsim@redhat.com.h>\n\t    Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/awt/EmbeddedWindow.java\n\t(EmbeddedWindow): Extends Frame instead of Window.\n\t(window_id): New member variable to store the native window handle.\n\t(create): Removed.\n\t(EmbeddedWindow): New constructor.\n\t(addNotify): New method.\n\t(getHandler): Likewise.\n\t(setWindowPeer): New native method.\n\t* gnu/java/awt/EmbeddedWindowSupport.java\n\t(EmbeddedWindowSupport): Fixed documentation.\n\t(createEmbeddedWindow): Return EmbeddedWindowPeer instead of\n\tWindowPeer, give it an EmbeddedWindow instance instead of the raw\n\twindow data.\n\t* gnu/java/awt/natEmbeddedWindow.cc\n\t(create): Removed.\n\t(setWindowPeer): New method.\n\t* gnu/java/awt/peer/EmbeddedWindowPeer.java,\n\tgnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c:\n\tNew files\n\t* gnu/java/awt/peer/gtk/GtkToolkit.java\n\t(GtkToolkit): Implements EmbeddedWindowSupport.\n\t(createEmbeddedWindow): New method.\n\t* java/awt/Window.java\n\t(Window): Removed.\n\t* Makefile.am\n\t(java_source_files): Added EmbeddedWindowPeer.java.\n\t(gtk_awt_peer_sources): Added GtkEmbeddedWindowPeer.java.\n\t(gtk_c_source_files): Added gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c.\n\t* Makefile.in: Regenerated.\n\nCo-Authored-By: Michael Koch <konqueror@gmx.de>\n\nFrom-SVN: r69859", "tree": {"sha": "fcc5d69edb5a39dceca0ff7cc2899f14dbba82ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcc5d69edb5a39dceca0ff7cc2899f14dbba82ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096380816540c78e63e64f0349af2a0416be8f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096380816540c78e63e64f0349af2a0416be8f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096380816540c78e63e64f0349af2a0416be8f56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096380816540c78e63e64f0349af2a0416be8f56/comments", "author": null, "committer": null, "parents": [{"sha": "b7a78333b1d28106f1c1326fb69b97452c98fc49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a78333b1d28106f1c1326fb69b97452c98fc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a78333b1d28106f1c1326fb69b97452c98fc49"}], "stats": {"total": 312, "additions": 286, "deletions": 26}, "files": [{"sha": "a7689e487eb2649014b8366d52cb32cb433f954e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -1,3 +1,37 @@\n+2003-07-27  Thomas Fitzsimmons <fitzsim@redhat.com.h> \n+\t    Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/awt/EmbeddedWindow.java\n+\t(EmbeddedWindow): Extends Frame instead of Window.\n+\t(window_id): New member variable to store the native window handle.\n+\t(create): Removed.\n+\t(EmbeddedWindow): New constructor.\n+\t(addNotify): New method.\n+\t(getHandler): Likewise.\n+\t(setWindowPeer): New native method.\n+\t* gnu/java/awt/EmbeddedWindowSupport.java\n+\t(EmbeddedWindowSupport): Fixed documentation.\n+\t(createEmbeddedWindow): Return EmbeddedWindowPeer instead of\n+\tWindowPeer, give it an EmbeddedWindow instance instead of the raw\n+\twindow data.\n+\t* gnu/java/awt/natEmbeddedWindow.cc\n+\t(create): Removed.\n+\t(setWindowPeer): New method.\n+\t* gnu/java/awt/peer/EmbeddedWindowPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c:\n+\tNew files\n+\t* gnu/java/awt/peer/gtk/GtkToolkit.java\n+\t(GtkToolkit): Implements EmbeddedWindowSupport.\n+\t(createEmbeddedWindow): New method.\n+\t* java/awt/Window.java\n+\t(Window): Removed.\n+\t* Makefile.am\n+\t(java_source_files): Added EmbeddedWindowPeer.java.\n+\t(gtk_awt_peer_sources): Added GtkEmbeddedWindowPeer.java.\n+\t(gtk_c_source_files): Added gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c.\n+\t* Makefile.in: Regenerated.\n+\n 2003-07-26  Ranjit Mathew  <rmathew@hotmail.com>\n \n \t* java/lang/Win32Process.java (ConcreteProcess): Surround"}, {"sha": "5c1602c64eaf593d02c60077fe61ce6c6c51e03c", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -166,6 +166,7 @@ jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c \\\n@@ -206,6 +207,7 @@ gnu/java/awt/peer/gtk/GtkClipboard.java\t\\\n gnu/java/awt/peer/gtk/GtkComponentPeer.java \\\n gnu/java/awt/peer/gtk/GtkContainerPeer.java \\\n gnu/java/awt/peer/gtk/GtkDialogPeer.java \\\n+gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java \\\n gnu/java/awt/peer/gtk/GtkFileDialogPeer.java \\\n gnu/java/awt/peer/gtk/GtkFontPeer.java \\\n gnu/java/awt/peer/gtk/GtkFramePeer.java\t\\\n@@ -758,6 +760,7 @@ gnu/java/awt/EventModifier.java \\\n gnu/java/awt/GLightweightPeer.java \\\n gnu/java/awt/image/ImageDecoder.java \\\n gnu/java/awt/image/XBMDecoder.java \\\n+gnu/java/awt/peer/EmbeddedWindowPeer.java \\\n gnu/java/beans/editors/ColorEditor.java\t\\\n gnu/java/beans/editors/FontEditor.java \\\n gnu/java/beans/editors/NativeBooleanEditor.java\t\\"}, {"sha": "8e796e050fe6a82d0c5f3ba5f11cb0e06b0c88b7", "filename": "libjava/Makefile.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -255,6 +255,7 @@ jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c \\\n@@ -295,6 +296,7 @@ gnu/java/awt/peer/gtk/GtkClipboard.java\t\\\n gnu/java/awt/peer/gtk/GtkComponentPeer.java \\\n gnu/java/awt/peer/gtk/GtkContainerPeer.java \\\n gnu/java/awt/peer/gtk/GtkDialogPeer.java \\\n+gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java \\\n gnu/java/awt/peer/gtk/GtkFileDialogPeer.java \\\n gnu/java/awt/peer/gtk/GtkFontPeer.java \\\n gnu/java/awt/peer/gtk/GtkFramePeer.java\t\\\n@@ -529,6 +531,7 @@ gnu/java/awt/EventModifier.java \\\n gnu/java/awt/GLightweightPeer.java \\\n gnu/java/awt/image/ImageDecoder.java \\\n gnu/java/awt/image/XBMDecoder.java \\\n+gnu/java/awt/peer/EmbeddedWindowPeer.java \\\n gnu/java/beans/editors/ColorEditor.java\t\\\n gnu/java/beans/editors/FontEditor.java \\\n gnu/java/beans/editors/NativeBooleanEditor.java\t\\\n@@ -2591,6 +2594,7 @@ gnu/java/awt/peer/gtk/GtkClipboard.lo \\\n gnu/java/awt/peer/gtk/GtkComponentPeer.lo \\\n gnu/java/awt/peer/gtk/GtkContainerPeer.lo \\\n gnu/java/awt/peer/gtk/GtkDialogPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.lo \\\n gnu/java/awt/peer/gtk/GtkFileDialogPeer.lo \\\n gnu/java/awt/peer/gtk/GtkFontPeer.lo \\\n gnu/java/awt/peer/gtk/GtkFramePeer.lo \\\n@@ -2623,6 +2627,7 @@ jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.lo \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.lo \\\n@@ -2785,6 +2790,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/awt/image/ImageDecoder.P \\\n .deps/gnu/java/awt/image/XBMDecoder.P \\\n .deps/gnu/java/awt/natEmbeddedWindow.P \\\n+.deps/gnu/java/awt/peer/EmbeddedWindowPeer.P \\\n .deps/gnu/java/awt/peer/gtk/GdkFontMetrics.P \\\n .deps/gnu/java/awt/peer/gtk/GdkGraphics.P \\\n .deps/gnu/java/awt/peer/gtk/GtkArg.P \\\n@@ -2799,6 +2805,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/awt/peer/gtk/GtkComponentPeer.P \\\n .deps/gnu/java/awt/peer/gtk/GtkContainerPeer.P \\\n .deps/gnu/java/awt/peer/gtk/GtkDialogPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.P \\\n .deps/gnu/java/awt/peer/gtk/GtkFileDialogPeer.P \\\n .deps/gnu/java/awt/peer/gtk/GtkFontPeer.P \\\n .deps/gnu/java/awt/peer/gtk/GtkFramePeer.P \\\n@@ -4226,6 +4233,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.P \\\n .deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.P \\"}, {"sha": "fc64e2151620d28b2f5013ebeccef10ee2ca7e79", "filename": "libjava/gnu/java/awt/EmbeddedWindow.java", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -38,25 +38,59 @@\n \n package gnu.java.awt;\n \n-import java.awt.Window;\n+import gnu.java.awt.peer.EmbeddedWindowPeer;\n+import java.awt.Frame;\n+import java.awt.Toolkit;\n \n /**\n- * This class represents an AWT window embedded into another graphical\n- * toolkit or anther application.\n+ * Represents an AWT window that can be embedded into another\n+ * application.\n  * \n  * @author Michael Koch <konqueror@gmx.de>\n  */\n-public class EmbeddedWindow extends Window\n+public class EmbeddedWindow extends Frame\n {\n+  private int window_id;\n+  \n   /**\n-   * Creates an window embedded into another application of graphical toolkit.\n+   * Creates an window to be embedded into another application.\n    *\n    * @param window_id The native handle to the screen area where the AWT window\n    * should be embedded.\n-   * @param width The width of the screen area.\n-   * @param height The height of the screen area.\n    */\n+  public EmbeddedWindow (int window_id)\n+  {\n+    super();\n+    this.window_id = window_id;\n+  }\n+  \n+  /**\n+   * Creates the native peer for this embedded window.\n+   */\n+  public void addNotify()\n+  {\n+    Toolkit tk = getToolkit();\n+\n+    if (! (tk instanceof EmbeddedWindowSupport))\n+      throw new UnsupportedOperationException\n+        (\"Embedded windows are not supported by the current peers: \" + tk.getClass());\n+\n+    setWindowPeer (((EmbeddedWindowSupport) tk).createEmbeddedWindow (this));\n+    super.addNotify();\n+  }\n+\n   // This method is only made native to circumvent the package-privateness of\n-  // an internal java.awt.Window constructor.\n-  public static native Window create (int window_id, int width, int height);\n+  // an AWT internal java.awt.Component.peer member variable.\n+  native void setWindowPeer (EmbeddedWindowPeer peer);\n+\n+  /**\n+   * Gets the native handle of the screen area where the window will\n+   * be embedded.\n+   *\n+   * @return The native handle that was passed to the constructor.\n+   */\n+  public int getHandle()\n+  {\n+    return window_id;\n+  }\n }"}, {"sha": "986095305f746db1917c0827fa1c09ddb0ece8b9", "filename": "libjava/gnu/java/awt/EmbeddedWindowSupport.java", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindowSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindowSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindowSupport.java?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -38,14 +38,15 @@\n \n package gnu.java.awt;\n \n-import java.awt.peer.WindowPeer;\n+import gnu.java.awt.peer.EmbeddedWindowPeer;\n \n /**\n- * This interface defines a method for creating embedded windows.\n+ * Declares a method for creating native embedded window peers.\n  *\n- * All classes inherited from java.awt.Toolkit that implement this interface\n- * are assumed to support embedded windows. To embed the real embedded window\n- * you need to use gnu.java.awt.EmbeddedWindow.\n+ * All classes inherited from java.awt.Toolkit that implement this\n+ * interface are assumed to support the creation of embedded window\n+ * peers. To create an embedded window, use\n+ * gnu.java.awt.EmbeddedWindow.\n  *\n  * @see gnu.java.awt.EmbeddedWindow\n  * @see java.awt.Toolkit\n@@ -55,13 +56,10 @@\n public interface EmbeddedWindowSupport\n {\n   /**\n-   * This method creates an embedded window in an application.\n+   * Creates an embedded window peer, and associates it with an\n+   * EmbeddedWindow object.\n    *\n-   * @param window_id The native handle of a screen area to display an\n-   * AWT window in it.\n-   * @param width The width of the screen area.\n-   * @param height The height of the screen area.\n+   * @param w The embedded window with which to associate a peer.\n    */\n-  public WindowPeer createEmbeddedWindow (int window_id,\n-\t\t\t\t\t  int width, int height);\n+  public EmbeddedWindowPeer createEmbeddedWindow (EmbeddedWindow w);\n }"}, {"sha": "14aa30f9295fe5de5599aa6876afb5619ab3d405", "filename": "libjava/gnu/java/awt/natEmbeddedWindow.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2FnatEmbeddedWindow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2FnatEmbeddedWindow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FnatEmbeddedWindow.cc?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -7,10 +7,11 @@ Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n #include <gnu/java/awt/EmbeddedWindow.h>\n-#include <java/awt/Window.h>\n+#include <gnu/java/awt/peer/EmbeddedWindowPeer.h>\n \n-::java::awt::Window*\n-gnu::java::awt::EmbeddedWindow::create (jint window_id, jint width, jint height)\n+void\n+gnu::java::awt::EmbeddedWindow::setWindowPeer (gnu::java::awt::peer::EmbeddedWindowPeer* w)\n {\n-  return new ::java::awt::Window (window_id, width, height);\n+  if (!peer)\n+    (::java::lang::Object*) peer = (::java::lang::Object*) w;\n }"}, {"sha": "a178768450591d35471b034bdad0c1324a8d06df", "filename": "libjava/gnu/java/awt/peer/EmbeddedWindowPeer.java", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FEmbeddedWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FEmbeddedWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FEmbeddedWindowPeer.java?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -0,0 +1,46 @@\n+/* EmbeddedWindowPeer.java -- Interface for window peers that may be\n+   embedded into other applications\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer;\n+\n+import java.awt.peer.FramePeer;\n+\n+public interface EmbeddedWindowPeer extends FramePeer\n+{\n+}"}, {"sha": "d17ff63e11ec236a11062ce07943b9ebd842a982", "filename": "libjava/gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkEmbeddedWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkEmbeddedWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkEmbeddedWindowPeer.java?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -0,0 +1,55 @@\n+/* GtkEmbeddedWindowPeer.java -- Implements FramePeer using a GtkPlug\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+\n+import gnu.java.awt.EmbeddedWindow;\n+import gnu.java.awt.peer.EmbeddedWindowPeer;\n+\n+public class GtkEmbeddedWindowPeer extends GtkFramePeer\n+  implements EmbeddedWindowPeer\n+{\n+  native void create();\n+  native void construct (int window_id);\n+\n+  public GtkEmbeddedWindowPeer (EmbeddedWindow w)\n+  {\n+    super (w);\n+    construct (w.getHandle());\n+  }\n+}"}, {"sha": "9f669ac528174b4e69d200b305d0619c4108478d", "filename": "libjava/gnu/java/awt/peer/gtk/GtkToolkit.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -52,6 +52,9 @@\n import java.util.Map;\n import java.util.MissingResourceException;\n import java.util.Properties;\n+import gnu.java.awt.EmbeddedWindow;\n+import gnu.java.awt.EmbeddedWindowSupport;\n+import gnu.java.awt.peer.EmbeddedWindowPeer;\n import gnu.classpath.Configuration;\n \n /* This class uses a deprecated method java.awt.peer.ComponentPeer.getPeer().\n@@ -61,7 +64,8 @@\n    this class.  If getPeer() ever goes away, we can implement a hash table\n    that will keep up with every window's peer, but for now this is faster. */\n \n-public class GtkToolkit extends java.awt.Toolkit\n+public class GtkToolkit extends Toolkit\n+  implements EmbeddedWindowSupport\n {\n   GtkMainThread main;\n   Hashtable containers = new Hashtable();\n@@ -299,6 +303,11 @@ protected WindowPeer createWindow (Window w)\n     return new GtkWindowPeer (w);\n   }\n \n+  public EmbeddedWindowPeer createEmbeddedWindow (EmbeddedWindow w)\n+  {\n+    return new GtkEmbeddedWindowPeer (w);\n+  }\n+\n   protected FontPeer getFontPeer (String name, int style) \n   {\n     try {"}, {"sha": "c4613a99f9175c8db0893fbc7bbcf60c614d98ad", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096380816540c78e63e64f0349af2a0416be8f56/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c?ref=096380816540c78e63e64f0349af2a0416be8f56", "patch": "@@ -0,0 +1,72 @@\n+/* gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c -- Native\n+   implementation of GtkEmbeddedWindowPeer\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.h\"\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_create \n+  (JNIEnv *env, jobject obj)\n+{\n+  gpointer window;\n+\n+  gdk_threads_enter ();\n+\n+  /* Create an \"unplugged\" GtkPlug. */\n+  window = gtk_plug_new (0);\n+\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, window);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_construct\n+  (JNIEnv *env, jobject obj, jint window_id)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  gtk_plug_construct (GTK_PLUG (ptr), window_id);\n+  \n+  gdk_threads_leave ();\n+}"}]}