{"sha": "925fa22749429efecfea554835a596f04caf7a6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1ZmEyMjc0OTQyOWVmZWNmZWE1NTQ4MzVhNTk2ZjA0Y2FmN2E2YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-11-02T23:43:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-11-02T23:43:44Z"}, "message": "resource.c: Revert Oct 26 20:42 and Oct 27 00:56 changes.\n\n        * resource.c: Revert Oct 26 20:42 and Oct 27 00:56 changes.\n        * toplev.c: Revert Nov 1 13:22 change.\n\nFrom-SVN: r30357", "tree": {"sha": "f3193f233d4e51a4135939703e853d08afda6299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3193f233d4e51a4135939703e853d08afda6299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/925fa22749429efecfea554835a596f04caf7a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925fa22749429efecfea554835a596f04caf7a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/925fa22749429efecfea554835a596f04caf7a6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925fa22749429efecfea554835a596f04caf7a6a/comments", "author": null, "committer": null, "parents": [{"sha": "da0182574f846f41f481a9274a3381089012cd33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0182574f846f41f481a9274a3381089012cd33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0182574f846f41f481a9274a3381089012cd33"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "715c41835cdb813e9925aecde7855a27003a437a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925fa22749429efecfea554835a596f04caf7a6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925fa22749429efecfea554835a596f04caf7a6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=925fa22749429efecfea554835a596f04caf7a6a", "patch": "@@ -1,3 +1,8 @@\n+Tue Nov  2 15:38:17 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* resource.c: Revert Oct 26 20:42 and Oct 27 00:56 changes.\n+\t* toplev.c: Revert Nov 1 13:22 change.\n+\n Tue Nov  2 14:21:37 1999  Jason Eckhardt  <jle@cygnus.com>\n \n \t* config/pa/pa.md (height reduction patterns): Add checks for\n@@ -91,7 +96,6 @@ Mon Nov  1 15:41:01 1999  Mark P. Mitchell  <mark@codesourcery.com>\n \n \t* combine.c (combine_instructions): Use xmalloc instead of alloca.\n \n->>>>>>> 1.4890\n Mon Nov  1 13:22:30 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* toplev.c (rest_of_compilation): Don't optimize the CFG\n@@ -841,7 +845,6 @@ Wed Oct 27 12:33:40 1999  Mark Mitchell  <mark@codesourcery.com>\n \t* stupid.c (find_clobbered_regs): Take additional parameter.\n \t(stupid_life_analysis): Adjust calls to note_stores.\n \t\n->>>>>>> 1.4876\n Wed Oct 27 19:26:12 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/coff.h (STRUCTURE_SIZE_BOUNDARY): Delete"}, {"sha": "265c12f07680559d21e68fe5d767627dd10f8b68", "filename": "gcc/resource.c", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925fa22749429efecfea554835a596f04caf7a6a/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925fa22749429efecfea554835a596f04caf7a6a/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=925fa22749429efecfea554835a596f04caf7a6a", "patch": "@@ -74,6 +74,7 @@ static HARD_REG_SET current_live_regs;\n static HARD_REG_SET pending_dead_regs;\n \f\n static void update_live_status\t\tPROTO ((rtx, rtx, void *));\n+static int find_basic_block\t\tPROTO ((rtx));\n static rtx next_insn_no_annul\t\tPROTO ((rtx));\n static rtx find_dead_or_set_registers\tPROTO ((rtx, struct resources*,\n \t\t\t\t\t\trtx*, int, struct resources,\n@@ -112,6 +113,40 @@ update_live_status (dest, x, data)\n \tCLEAR_HARD_REG_BIT (pending_dead_regs, i);\n       }\n }\n+/* Find the number of the basic block that starts closest to INSN.  Return -1\n+   if we couldn't find such a basic block.  */\n+\n+static int\n+find_basic_block (insn)\n+     rtx insn;\n+{\n+  int i;\n+\n+  /* Scan backwards to the previous BARRIER.  Then see if we can find a\n+     label that starts a basic block.  Return the basic block number.  */\n+\n+  for (insn = prev_nonnote_insn (insn);\n+       insn && GET_CODE (insn) != BARRIER;\n+       insn = prev_nonnote_insn (insn))\n+    ;\n+\n+  /* The start of the function is basic block zero.  */\n+  if (insn == 0)\n+    return 0;\n+\n+  /* See if any of the upcoming CODE_LABELs start a basic block.  If we reach\n+     anything other than a CODE_LABEL or note, we can't find this code.  */\n+  for (insn = next_nonnote_insn (insn);\n+       insn && GET_CODE (insn) == CODE_LABEL;\n+       insn = next_nonnote_insn (insn))\n+    {\n+      for (i = 0; i < n_basic_blocks; i++)\n+\tif (insn == BLOCK_HEAD (i))\n+\t  return i;\n+    }\n+\n+  return -1;\n+}\n \f\n /* Similar to next_insn, but ignores insns in the delay slots of\n    an annulled branch.  */\n@@ -832,9 +867,8 @@ mark_target_live_regs (insns, target, res)\n \tb = tinfo->block;\n     }\n \n-  if (b == -1\n-      && INSN_UID (target) < (int) VARRAY_SIZE (basic_block_for_insn))\n-    b = BLOCK_NUM (target);\n+  if (b == -1)\n+    b = find_basic_block (target);\n \n   if (target_hash_table != NULL)\n     {\n@@ -1138,8 +1172,6 @@ init_resource_info (epilogue_insn)\n   target_hash_table = (struct target_info **)\n     xcalloc (TARGET_HASH_PRIME, sizeof (struct target_info *));\n   bb_ticks = (int *) xcalloc (n_basic_blocks, sizeof (int));\n-\n-  compute_bb_for_insn (get_max_uid ());\n }\n \f\n /* Free up the resources allcated to mark_target_live_regs ().  This\n@@ -1187,7 +1219,7 @@ void\n incr_ticks_for_insn (insn)\n      rtx insn;\n {\n-  int b = BLOCK_NUM (insn);\n+  int b = find_basic_block (insn);\n \n   if (b != -1)\n     bb_ticks[b]++;\n@@ -1264,7 +1296,7 @@ find_free_register (current_insn, last_insn, class_str, mode, reg_set)\n       /* And we don't clobber traceback for noreturn functions.  */\n       if ((regno == FRAME_POINTER_REGNUM || regno == HARD_FRAME_POINTER_REGNUM)\n \t  && (! reload_completed || frame_pointer_needed))\n-        continue;\n+\tcontinue;\n \n       success = 1;\n       for (j = HARD_REGNO_NREGS (regno, mode) - 1; j >= 0; j--)"}, {"sha": "4152f2338b5896903941726a8ec414749e6f368c", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925fa22749429efecfea554835a596f04caf7a6a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925fa22749429efecfea554835a596f04caf7a6a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=925fa22749429efecfea554835a596f04caf7a6a", "patch": "@@ -4343,11 +4343,6 @@ rest_of_compilation (decl)\n       TIMEVAR\n \t(dbr_sched_time,\n \t {\n-           /* ??? Keep the CFG up to date after cross-jumping.  */\n-\t   find_basic_blocks (insns, max_reg_num (), rtl_dump_file, 0);\n-\t   count_or_remove_death_notes (NULL, 1);\n-\t   life_analysis (insns, max_reg_num (), rtl_dump_file, 0);\n-\n            dbr_schedule (insns, rtl_dump_file);\n \t });\n "}]}