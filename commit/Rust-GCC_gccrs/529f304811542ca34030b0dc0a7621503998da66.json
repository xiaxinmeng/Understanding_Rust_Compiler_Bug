{"sha": "529f304811542ca34030b0dc0a7621503998da66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5ZjMwNDgxMTU0MmNhMzQwMzBiMGRjMGE3NjIxNTAzOTk4ZGE2Ng==", "commit": {"author": {"name": "Matthew Beliveau", "email": "mbelivea@redhat.com", "date": "2019-08-20T13:23:01Z"}, "committer": {"name": "Matthew Beliveau", "email": "mbelivea@gcc.gnu.org", "date": "2019-08-20T13:23:01Z"}, "message": "tree-ssa-dse.c (dse_optimize_redundant_stores): Improved check to catch more redundant zero initialization cases.\n\n2019-08-19  Matthew Beliveau  <mbelivea@redhat.com>\n\n\t* tree-ssa-dse.c (dse_optimize_redundant_stores): Improved check to\n\tcatch more redundant zero initialization cases.\n\t(dse_dom_walker::dse_optimize_stmt): Likewise.\n\nFrom-SVN: r274749", "tree": {"sha": "72fd99909e6b1d188a712b0a3d3b74399164ca7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72fd99909e6b1d188a712b0a3d3b74399164ca7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/529f304811542ca34030b0dc0a7621503998da66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529f304811542ca34030b0dc0a7621503998da66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529f304811542ca34030b0dc0a7621503998da66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529f304811542ca34030b0dc0a7621503998da66/comments", "author": null, "committer": null, "parents": [{"sha": "00f7060a2db60e6fe7066bf65244909dc7693d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f7060a2db60e6fe7066bf65244909dc7693d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f7060a2db60e6fe7066bf65244909dc7693d19"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "ecb7c06507cb83e3c8f53ba07667ca34b0a9660a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529f304811542ca34030b0dc0a7621503998da66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529f304811542ca34030b0dc0a7621503998da66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=529f304811542ca34030b0dc0a7621503998da66", "patch": "@@ -1,3 +1,9 @@\n+2019-08-20  Matthew Beliveau  <mbelivea@redhat.com>\n+\n+\t* tree-ssa-dse.c (dse_optimize_redundant_stores): Improved check to\n+\tcatch more redundant zero initialization cases.\n+\t(dse_dom_walker::dse_optimize_stmt): Likewise.\n+\n 2019-08-20  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/91307"}, {"sha": "0512a60019d5e389a98db5e5b12119835ccc271c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529f304811542ca34030b0dc0a7621503998da66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529f304811542ca34030b0dc0a7621503998da66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=529f304811542ca34030b0dc0a7621503998da66", "patch": "@@ -1,3 +1,8 @@\n+2019-08-20  Matthew Beliveau  <mbelivea@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/redundant-assign-zero-1.c: New test.\n+\t* gcc.dg/tree-ssa/redundant-assign-zero-2.c: New test.\n+\n 2019-08-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/37242"}, {"sha": "b8d01d1644bbe0cded616b735282a25f64f2db05", "filename": "gcc/testsuite/gcc.dg/tree-ssa/redundant-assign-zero-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529f304811542ca34030b0dc0a7621503998da66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529f304811542ca34030b0dc0a7621503998da66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-1.c?ref=529f304811542ca34030b0dc0a7621503998da66", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse-details\" } */\n+\n+void blah (char *);\n+\n+void bar ()\n+{\n+  char a[256] = \"\";\n+  a[3] = 0; \n+  blah (a);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleted redundant store\" 1 \"dse1\"} } */"}, {"sha": "8cefa6f0cb766e337543696d7ec5b317ac51139a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/redundant-assign-zero-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529f304811542ca34030b0dc0a7621503998da66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529f304811542ca34030b0dc0a7621503998da66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fredundant-assign-zero-2.c?ref=529f304811542ca34030b0dc0a7621503998da66", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse-details\" } */\n+\n+#include <string.h>\n+\n+void blahd (double *);\n+\n+void fubar ()\n+{\n+  double d;\n+  double *x = &d;\n+\n+  memset (&d, 0 , sizeof d);\n+  *x = 0.0;\n+  blahd (x);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleted redundant store\" 1 \"dse1\"} } */"}, {"sha": "ba67884a825cb8577fba5a893611443c153add77", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529f304811542ca34030b0dc0a7621503998da66/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529f304811542ca34030b0dc0a7621503998da66/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=529f304811542ca34030b0dc0a7621503998da66", "patch": "@@ -628,11 +628,8 @@ dse_optimize_redundant_stores (gimple *stmt)\n       tree fndecl;\n       if ((is_gimple_assign (use_stmt)\n \t   && gimple_vdef (use_stmt)\n-\t   && ((gimple_assign_rhs_code (use_stmt) == CONSTRUCTOR\n-\t        && CONSTRUCTOR_NELTS (gimple_assign_rhs1 (use_stmt)) == 0\n-\t        && !gimple_clobber_p (stmt))\n-\t       || (gimple_assign_rhs_code (use_stmt) == INTEGER_CST\n-\t\t   && integer_zerop (gimple_assign_rhs1 (use_stmt)))))\n+\t   && (gimple_assign_single_p (use_stmt)\n+\t       && initializer_zerop (gimple_assign_rhs1 (use_stmt))))\n \t  || (gimple_call_builtin_p (use_stmt, BUILT_IN_NORMAL)\n \t      && (fndecl = gimple_call_fndecl (use_stmt)) != NULL\n \t      && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMSET\n@@ -1027,16 +1024,11 @@ dse_dom_walker::dse_optimize_stmt (gimple_stmt_iterator *gsi)\n     {\n       bool by_clobber_p = false;\n \n-      /* First see if this store is a CONSTRUCTOR and if there\n-\t are subsequent CONSTRUCTOR stores which are totally\n-\t subsumed by this statement.  If so remove the subsequent\n-\t CONSTRUCTOR store.\n-\n-\t This will tend to make fewer calls into memset with longer\n-\t arguments.  */\n-      if (gimple_assign_rhs_code (stmt) == CONSTRUCTOR\n-\t  && CONSTRUCTOR_NELTS (gimple_assign_rhs1 (stmt)) == 0\n-\t  && !gimple_clobber_p (stmt))\n+      /* Check if this statement stores zero to a memory location,\n+\t and if there is a subsequent store of zero to the same\n+\t memory location.  If so, remove the subsequent store.  */\n+      if (gimple_assign_single_p (stmt)\n+\t  && initializer_zerop (gimple_assign_rhs1 (stmt)))\n \tdse_optimize_redundant_stores (stmt);\n \n       /* Self-assignments are zombies.  */"}]}