{"sha": "53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM0MTVmYTFhMWY3YjNjMTNkZGUzYWEwYTczZjM1YWU0ZGNjMzM1Yg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-08T13:13:59Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-08T13:13:59Z"}, "message": "re PR fortran/8485 (g77 doesn't accept INTEGER*8 constant in PARAMETER multiplication)\n\n\n\tPR fortran/8485\n\t* target.h (FFETARGET_REAL_VALUE_FROM_INT_): Cast to\n\tHOST_WIDE_INT instead of long.\n\t(FFETARGET_REAL_VALUE_FROM_LONGLONG_): New macro.\n\t(FFETARGET_LONGLONG_FROM_INTS_): New macro.\n\t(ffetarget_convert_complex1_integer4): Implement.\n\t(ffetarget_convert_complex2_integer4): Implement.\n\t(ffetarget_convert_integer4_complex1): Implement.\n\t(ffetarget_convert_integer4_complex2): Implement.\n\t(ffetarget_convert_integer4_real1): Implement.\n\t(ffetarget_convert_integer4_real2): Implement.\n\t(ffetarget_convert_real1_integer4): Implement.\n\t(ffetarget_convert_real2_integer4): Implement.\n\t* com.c (ffecom_constantunion): Handle INTEGER*8.\n\t(ffecom_constantunion_with_type): Likewise.\n\n\t* g77.f-torture/compile/8485.f: New test case.\n\nFrom-SVN: r66596", "tree": {"sha": "3fb5f2cf3b52eb73fc88051ccaecab5bf4d526f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fb5f2cf3b52eb73fc88051ccaecab5bf4d526f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/comments", "author": null, "committer": null, "parents": [{"sha": "db7948c2d8dc5ac573bfb3516fa34c2ba086dabc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7948c2d8dc5ac573bfb3516fa34c2ba086dabc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7948c2d8dc5ac573bfb3516fa34c2ba086dabc"}], "stats": {"total": 146, "additions": 130, "deletions": 16}, "files": [{"sha": "0c5c53611706f3e144cf20badab94e650bc37321", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "patch": "@@ -1,3 +1,21 @@\n+2003-05-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR fortran/8485\n+\t* target.h (FFETARGET_REAL_VALUE_FROM_INT_): Cast to\n+\tHOST_WIDE_INT instead of long.\n+\t(FFETARGET_REAL_VALUE_FROM_LONGLONG_): New macro.\n+\t(FFETARGET_LONGLONG_FROM_INTS_): New macro.\n+\t(ffetarget_convert_complex1_integer4): Implement.\n+\t(ffetarget_convert_complex2_integer4): Implement.\n+\t(ffetarget_convert_integer4_complex1): Implement.\n+\t(ffetarget_convert_integer4_complex2): Implement.\n+\t(ffetarget_convert_integer4_real1): Implement.\n+\t(ffetarget_convert_integer4_real2): Implement.\n+\t(ffetarget_convert_real1_integer4): Implement.\n+\t(ffetarget_convert_real2_integer4): Implement.\n+\t* com.c (ffecom_constantunion): Handle INTEGER*8.\n+\t(ffecom_constantunion_with_type): Likewise.\n+\n 2003-05-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* com.c (ffecom_do_entry_): Use location_t and input_location"}, {"sha": "7ec18134ec2626e367fe6027e46df0135f1be2b2", "filename": "gcc/f/com.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "patch": "@@ -10325,31 +10325,43 @@ ffecom_constantunion (ffebldConstantUnion *cu, ffeinfoBasictype bt,\n     {\n     case FFEINFO_basictypeINTEGER:\n       {\n-\tint val;\n+        HOST_WIDE_INT hi, lo;\n \n \tswitch (kt)\n \t  {\n #if FFETARGET_okINTEGER1\n \t  case FFEINFO_kindtypeINTEGER1:\n-\t    val = ffebld_cu_val_integer1 (*cu);\n+\t    lo = ffebld_cu_val_integer1 (*cu);\n+\t    hi = (lo < 0) ? -1 : 0;\n \t    break;\n #endif\n \n #if FFETARGET_okINTEGER2\n \t  case FFEINFO_kindtypeINTEGER2:\n-\t    val = ffebld_cu_val_integer2 (*cu);\n+\t    lo = ffebld_cu_val_integer2 (*cu);\n+\t    hi = (lo < 0) ? -1 : 0;\n \t    break;\n #endif\n \n #if FFETARGET_okINTEGER3\n \t  case FFEINFO_kindtypeINTEGER3:\n-\t    val = ffebld_cu_val_integer3 (*cu);\n+\t    lo = ffebld_cu_val_integer3 (*cu);\n+\t    hi = (lo < 0) ? -1 : 0;\n \t    break;\n #endif\n \n #if FFETARGET_okINTEGER4\n \t  case FFEINFO_kindtypeINTEGER4:\n-\t    val = ffebld_cu_val_integer4 (*cu);\n+#if HOST_BITS_PER_LONGLONG > HOST_BITS_PER_WIDE_INT\n+\t    {\n+\t      long long int big = ffebld_cu_val_integer4 (*cu);\n+\t      hi = (HOST_WIDE_INT) (big >> HOST_BITS_PER_WIDE_INT);\n+\t      lo = (HOST_WIDE_INT) big;\n+\t    }\n+#else\n+\t    lo = ffebld_cu_val_integer4 (*cu);\n+\t    hi = (lo < 0) ? -1 : 0;\n+#endif\n \t    break;\n #endif\n \n@@ -10359,7 +10371,7 @@ ffecom_constantunion (ffebldConstantUnion *cu, ffeinfoBasictype bt,\n \t  case FFEINFO_kindtypeANY:\n \t    return error_mark_node;\n \t  }\n-\titem = build_int_2 (val, (val < 0) ? -1 : 0);\n+\titem = build_int_2 (lo, hi);\n \tTREE_TYPE (item) = tree_type;\n       }\n       break;\n@@ -10614,8 +10626,17 @@ ffecom_constantunion_with_type (ffebldConstantUnion *cu,\n #endif\n #if FFETARGET_okINTEGER4\n \t  case  FFEBLD_constINTEGER4:\n+#if HOST_BITS_PER_LONGLONG > HOST_BITS_PER_WIDE_INT\n+\t\t  {\n+\t\t    long long int big = ffebld_cu_val_integer4 (*cu);\n+\t\t    item = build_int_2 ((HOST_WIDE_INT) big,\n+\t\t\t\t\t(HOST_WIDE_INT)\n+\t\t\t\t\t(big >> HOST_BITS_PER_WIDE_INT));\n+\t\t  }\n+#else\n \t\t  val = ffebld_cu_val_integer4 (*cu);\n \t\t  item = build_int_2 (val, (val < 0) ? -1 : 0);\n+#endif\n \t\t  break;\n #endif\n #if FFETARGET_okLOGICAL1"}, {"sha": "9140decde5b648fc7d909f74cf707ea4df6676cf", "filename": "gcc/f/target.h", "status": "modified", "additions": 73, "deletions": 10, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ff%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ff%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.h?ref=53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "patch": "@@ -790,10 +790,25 @@ void *ffetarget_memcpy_ (void *dst, void *src, size_t len);\n \n /* Define macros. */\n \n-#define FFETARGET_REAL_VALUE_FROM_INT_(resr, lf, kt)\t\t\t\\\n-  REAL_VALUE_FROM_INT (resr, (long) lf, (long) ((lf < 0) ? -1 : 0),\t\\\n+#define FFETARGET_REAL_VALUE_FROM_INT_(resr, lf, kt)\t\t\\\n+  REAL_VALUE_FROM_INT (resr, (HOST_WIDE_INT) lf,\t\t\\\n+                       (HOST_WIDE_INT) ((lf < 0) ? -1 : 0),\t\\\n \t\t       ((kt == 1) ? SFmode : DFmode))\n \n+#if HOST_BITS_PER_LONGLONG > HOST_BITS_PER_WIDE_INT\n+#define FFETARGET_REAL_VALUE_FROM_LONGLONG_(resr, lf, kt)\t\t\\\n+  REAL_VALUE_FROM_INT (resr, (HOST_WIDE_INT) lf,\t\t\t\\\n+\t\t       (HOST_WIDE_INT) (lf >> HOST_BITS_PER_WIDE_INT),\t\\\n+\t\t       ((kt == 1) ? SFmode : DFmode))\n+#define FFETARGET_LONGLONG_FROM_INTS_(hi, lo)\t\t\\\n+  (((long long int) hi << HOST_BITS_PER_WIDE_INT)\t\\\n+   | (long long int) ((unsigned HOST_WIDE_INT) lo))\n+#else\n+#define FFETARGET_REAL_VALUE_FROM_LONGLONG_(resr, lf, kt)\t\t\\\n+  FFETARGET_REAL_VALUE_FROM_INT_ (resr, lf, kt)\n+#define FFETARGET_LONGLONG_FROM_INTS_(hi, lo)  lo\n+#endif\n+\n #define ffetarget_add_complex1(res,l,r) \\\n   ({ REAL_VALUE_TYPE lr, li, rr, ri, resr, resi; \\\n      lr = ffetarget_cvt_r1_to_rv_ ((l).real); \\\n@@ -895,7 +910,14 @@ void *ffetarget_memcpy_ (void *dst, void *src, size_t len);\n #define ffetarget_convert_complex1_integer1 ffetarget_convert_complex1_integer\n #define ffetarget_convert_complex1_integer2 ffetarget_convert_complex1_integer\n #define ffetarget_convert_complex1_integer3 ffetarget_convert_complex1_integer\n-#define ffetarget_convert_complex1_integer4(res,l) FFEBAD_NOCANDO\n+#define ffetarget_convert_complex1_integer4(res,l) \\\n+  ({ REAL_VALUE_TYPE resi, resr; \\\n+     ffetargetInteger4 lf = (l); \\\n+     FFETARGET_REAL_VALUE_FROM_LONGLONG_ (resr, lf, 1); \\\n+     resi = dconst0; \\\n+     ffetarget_cvt_rv_to_r1_ (resr, (res)->real); \\\n+     ffetarget_cvt_rv_to_r1_ (resi, (res)->imaginary); \\\n+     FFEBAD; })\n #define ffetarget_convert_complex1_real1(res,l) \\\n   ((res)->real = (l), \\\n    ffetarget_cvt_rv_to_r1_ (dconst0, (res)->imaginary), \\\n@@ -930,7 +952,14 @@ void *ffetarget_memcpy_ (void *dst, void *src, size_t len);\n #define ffetarget_convert_complex2_integer1 ffetarget_convert_complex2_integer\n #define ffetarget_convert_complex2_integer2 ffetarget_convert_complex2_integer\n #define ffetarget_convert_complex2_integer3 ffetarget_convert_complex2_integer\n-#define ffetarget_convert_complex2_integer4(res,l) FFEBAD_NOCANDO\n+#define ffetarget_convert_complex2_integer4(res,l) \\\n+  ({ REAL_VALUE_TYPE resi, resr; \\\n+     ffetargetInteger4 lf = (l); \\\n+     FFETARGET_REAL_VALUE_FROM_LONGLONG_ (resr, lf, 2); \\\n+     resi = dconst0; \\\n+     ffetarget_cvt_rv_to_r2_ (resr, &((res)->real.v[0])); \\\n+     ffetarget_cvt_rv_to_r2_ (resi, &((res)->imaginary.v[0])); \\\n+     FFEBAD; })\n #define ffetarget_convert_complex2_real1(res,l) \\\n   ({ REAL_VALUE_TYPE lr; \\\n      lr = ffetarget_cvt_r1_to_rv_ (l); \\\n@@ -993,8 +1022,20 @@ void *ffetarget_memcpy_ (void *dst, void *src, size_t len);\n         ffetarget_convert_integer1_typeless(res,l)\n #define ffetarget_convert_integer4_character1(res,l) \\\n         ffetarget_convert_integer1_character1(res,l)\n-#define ffetarget_convert_integer4_complex1(res,l) FFEBAD_NOCANDO\n-#define ffetarget_convert_integer4_complex2(res,l) FFEBAD_NOCANDO\n+#define ffetarget_convert_integer4_complex1(res,l) \\\n+  ({ REAL_VALUE_TYPE lr; \\\n+     lr = ffetarget_cvt_r1_to_rv_ ((l).real); \\\n+     REAL_VALUE_TO_INT (&ffetarget_long_val_, &ffetarget_long_junk_, lr); \\\n+     *(res) = FFETARGET_LONGLONG_FROM_INTS_ (ffetarget_long_junk_,  \\\n+\t\t\t\t\t     ffetarget_long_val_); \\\n+     FFEBAD; })\n+#define ffetarget_convert_integer4_complex2(res,l) \\\n+  ({ REAL_VALUE_TYPE lr; \\\n+     lr = ffetarget_cvt_r2_to_rv_ (&((l).real.v[0])); \\\n+     REAL_VALUE_TO_INT (&ffetarget_long_val_, &ffetarget_long_junk_, lr); \\\n+     *(res) = FFETARGET_LONGLONG_FROM_INTS_ (ffetarget_long_junk_,  \\\n+\t\t\t\t\t     ffetarget_long_val_); \\\n+     FFEBAD; })\n #define ffetarget_convert_integer4_hollerith(res,l) \\\n         ffetarget_convert_integer1_hollerith(res,l)\n #define ffetarget_convert_integer4_integer1(res,l) (*(res) = (l), FFEBAD)\n@@ -1008,8 +1049,20 @@ void *ffetarget_memcpy_ (void *dst, void *src, size_t len);\n         ffetarget_convert_integer1_logical1(res,l)\n #define ffetarget_convert_integer4_logical4(res,l) \\\n         ffetarget_convert_integer1_logical1(res,l)\n-#define ffetarget_convert_integer4_real1(res,l) FFEBAD_NOCANDO\n-#define ffetarget_convert_integer4_real2(res,l) FFEBAD_NOCANDO\n+#define ffetarget_convert_integer4_real1(res,l) \\\n+  ({ REAL_VALUE_TYPE lr; \\\n+     lr = ffetarget_cvt_r1_to_rv_ (l); \\\n+     REAL_VALUE_TO_INT (&ffetarget_long_val_, &ffetarget_long_junk_, lr); \\\n+     *(res) = FFETARGET_LONGLONG_FROM_INTS_ (ffetarget_long_junk_, \\\n+\t\t\t\t\t     ffetarget_long_val_); \\\n+     FFEBAD; })\n+#define ffetarget_convert_integer4_real2(res,l) \\\n+  ({ REAL_VALUE_TYPE lr; \\\n+     lr = ffetarget_cvt_r2_to_rv_ (&((l).v[0])); \\\n+     REAL_VALUE_TO_INT (&ffetarget_long_val_, &ffetarget_long_junk_, lr); \\\n+     *(res) = FFETARGET_LONGLONG_FROM_INTS_ (ffetarget_long_junk_, \\\n+\t\t\t\t\t     ffetarget_long_val_); \\\n+     FFEBAD; })\n #define ffetarget_convert_integer4_typeless(res,l) \\\n         ffetarget_convert_integer1_typeless(res,l)\n #define ffetarget_convert_logical1_character1(res,l) \\\n@@ -1109,7 +1162,12 @@ void *ffetarget_memcpy_ (void *dst, void *src, size_t len);\n         ffetarget_convert_real1_integer1(res,l)\n #define ffetarget_convert_real1_integer3(res,l) \\\n         ffetarget_convert_real1_integer1(res,l)\n-#define ffetarget_convert_real1_integer4(res,l) FFEBAD_NOCANDO\n+#define ffetarget_convert_real1_integer4(res,l) \\\n+  ({ REAL_VALUE_TYPE resr; \\\n+     ffetargetInteger4 lf = (l); \\\n+     FFETARGET_REAL_VALUE_FROM_LONGLONG_ (resr, lf, 1); \\\n+     ffetarget_cvt_rv_to_r1_ (resr, *(res)); \\\n+     FFEBAD; })\n #define ffetarget_convert_real1_typeless(res,l) \\\n   ffetarget_convert_any_typeless_ ((char *) (res), sizeof(*(res)), l)\n #define ffetarget_convert_real1_complex1(res,l) (*(res) = (l).real, FFEBAD)\n@@ -1134,7 +1192,12 @@ void *ffetarget_memcpy_ (void *dst, void *src, size_t len);\n         ffetarget_convert_real2_integer1(res,l)\n #define ffetarget_convert_real2_integer3(res,l) \\\n         ffetarget_convert_real2_integer1(res,l)\n-#define ffetarget_convert_real2_integer4(res,l) FFEBAD_NOCANDO\n+#define ffetarget_convert_real2_integer4(res,l) \\\n+  ({ REAL_VALUE_TYPE resr; \\\n+     ffetargetInteger4 lf = (l); \\\n+     FFETARGET_REAL_VALUE_FROM_LONGLONG_ (resr, lf, 2); \\\n+     ffetarget_cvt_rv_to_r2_ (resr, &((res)->v[0])); \\\n+     FFEBAD; })\n #define ffetarget_convert_real2_typeless(res,l) \\\n   ffetarget_convert_any_typeless_ ((char *) (res), sizeof(*(res)), l)\n #define ffetarget_convert_real2_complex1(res,l) \\"}, {"sha": "baf9936d43d5af35821f757d8585d50311d4c64a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "patch": "@@ -1,3 +1,7 @@\n+2003-05-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* g77.f-torture/compile/8485.f: New test case.\n+\n 2003-05-07  Richard Henderson  <rth@redhat.com>\n \n         PR c++/10570"}, {"sha": "95e58fbfc18d9076d5abd1aee5be1ca2ac65ffa1", "filename": "gcc/testsuite/g77.f-torture/compile/8485.f", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F8485.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F8485.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F8485.f?ref=53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "patch": "@@ -0,0 +1,8 @@\n+C      Extracted from PR fortran/8485\n+       PARAMETER (PPMULT = 1.0E5)\n+       INTEGER*8 NWRONG\n+       PARAMETER (NWRONG = 8)\n+       PARAMETER (DDMULT = PPMULT * NWRONG)\n+       PRINT 10, DDMULT\n+10     FORMAT (F10.3)\n+       END"}]}