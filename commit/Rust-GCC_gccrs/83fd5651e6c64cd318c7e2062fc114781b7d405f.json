{"sha": "83fd5651e6c64cd318c7e2062fc114781b7d405f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmZDU2NTFlNmM2NGNkMzE4YzdlMjA2MmZjMTE0NzgxYjdkNDA1Zg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-23T02:59:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-23T02:59:46Z"}, "message": "reorg.c (relax_delay_slots): Do not redirect a jump if doing so invalidates insns in the jump's delay slots.\n\n        * reorg.c (relax_delay_slots): Do not redirect a jump if doing so\n        invalidates insns in the jump's delay slots.\n        (redirect_with_delay_slots_safe_p): New function.\n\nFrom-SVN: r4968", "tree": {"sha": "9db1cebdae9efc8ebb429105f5a1b0d08a992452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db1cebdae9efc8ebb429105f5a1b0d08a992452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83fd5651e6c64cd318c7e2062fc114781b7d405f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fd5651e6c64cd318c7e2062fc114781b7d405f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fd5651e6c64cd318c7e2062fc114781b7d405f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fd5651e6c64cd318c7e2062fc114781b7d405f/comments", "author": null, "committer": null, "parents": [{"sha": "a61a052b0d60fbb7d36b48444cd7cf70162faae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61a052b0d60fbb7d36b48444cd7cf70162faae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61a052b0d60fbb7d36b48444cd7cf70162faae2"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "5e96a1a84132f7d83658e6f7f97603762b4c6b96", "filename": "gcc/reorg.c", "status": "modified", "additions": 62, "deletions": 16, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fd5651e6c64cd318c7e2062fc114781b7d405f/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fd5651e6c64cd318c7e2062fc114781b7d405f/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=83fd5651e6c64cd318c7e2062fc114781b7d405f", "patch": "@@ -1413,6 +1413,42 @@ condition_dominates_p (condition, insn)\n \n   return comparison_dominates_p (code, other_code);\n }\n+\n+/* Return non-zero if redirecting JUMP to NEWLABEL does not invalidate\n+   any insns already in the delay slot of JUMP.  */\n+\n+static int\n+redirect_with_delay_slots_safe_p (jump, newlabel, seq)\n+     rtx jump, newlabel, seq;\n+{\n+  int flags, slots, i;\n+  rtx pat = PATTERN (seq);\n+\n+  /* Make sure all the delay slots of this jump would still\n+     be valid after threading the jump.  If they are still\n+     valid, then return non-zero.  */\n+\n+  flags = get_jump_flags (jump, newlabel);\n+  for (i = 1; i < XVECLEN (pat, 0); i++)\n+    if (! (\n+#ifdef ANNUL_IFFALSE_SLOTS\n+\t   (INSN_ANNULLED_BRANCH_P (jump)\n+\t    && INSN_FROM_TARGET_P (XVECEXP (pat, 0, i)))\n+\t   ? eligible_for_annul_false (jump, i - 1,\n+\t\t\t\t       XVECEXP (pat, 0, i), flags) :\n+#endif\n+#ifdef ANNUL_IFTRUE_SLOTS\n+\t   (INSN_ANNULLED_BRANCH_P (jump)\n+\t    && ! INSN_FROM_TARGET_P (XVECEXP (pat, 0, i)))\n+\t   ? eligible_for_annul_true (jump, i - 1,\n+\t\t\t\t      XVECEXP (pat, 0, i), flags) :\n+#endif\n+\t   eligible_for_delay (jump, i -1, XVECEXP (pat, 0, i), flags)))\n+      break;\n+\n+  return (i == XVECLEN (pat, 0));\n+}\n+\n \f\n /* INSN branches to an insn whose pattern SEQ is a SEQUENCE.  Given that\n    the condition tested by INSN is CONDITION and the resources shown in\n@@ -3647,7 +3683,8 @@ relax_delay_slots (first)\n \t  if (trial == 0 && target_label != 0)\n \t    trial = find_end_label ();\n \n-\t  if (trial != target_label)\n+\t  if (trial != target_label \n+\t      && redirect_with_delay_slots_safe_p (delay_insn, trial, insn))\n \t    {\n \t      reorg_redirect_jump (delay_insn, trial);\n \t      target_label = trial;\n@@ -3681,9 +3718,14 @@ relax_delay_slots (first)\n \t      target_label = JUMP_LABEL (XVECEXP (PATTERN (trial), 0, 0));\n \t      if (target_label == 0)\n \t\ttarget_label = find_end_label ();\n-\t      reorg_redirect_jump (delay_insn, target_label);\n-\t      next = insn;\n-\t      continue;\n+\n+\t      if (redirect_with_delay_slots_safe_p (delay_insn, target_label, \n+\t\t\t\t\t\t    insn))\n+\t\t{\n+\t\t  reorg_redirect_jump (delay_insn, target_label);\n+\t\t  next = insn;\n+\t\t  continue;\n+\t\t}\n \t    }\n \t}\n \n@@ -3752,20 +3794,24 @@ relax_delay_slots (first)\n \t  if (label == 0)\n \t    label = find_end_label ();\n \n-\t  /* Be careful how we do this to avoid deleting code or labels\n-\t     that are momentarily dead.  See similar optimization in jump.c  */\n-\t  if (old_label)\n-\t    ++LABEL_NUSES (old_label);\n-\n-\t  if (invert_jump (delay_insn, label))\n+\t  if (redirect_with_delay_slots_safe_p (delay_insn, label, insn))\n \t    {\n-\t      delete_insn (next);\n-\t      next = insn;\n-\t    }\n+\t      /* Be careful how we do this to avoid deleting code or labels\n+\t\t that are momentarily dead.  See similar optimization in\n+\t\t jump.c  */\n+\t      if (old_label)\n+\t\t++LABEL_NUSES (old_label);\n \n-\t  if (old_label && --LABEL_NUSES (old_label) == 0)\n-\t    delete_insn (old_label);\n-\t  continue;\n+\t      if (invert_jump (delay_insn, label))\n+\t\t{\n+\t\t  delete_insn (next);\n+\t\t  next = insn;\n+\t\t}\n+\n+\t      if (old_label && --LABEL_NUSES (old_label) == 0)\n+\t\tdelete_insn (old_label);\n+\t      continue;\n+\t    }\n \t}\n \n       /* If we own the thread opposite the way this insn branches, see if we"}]}