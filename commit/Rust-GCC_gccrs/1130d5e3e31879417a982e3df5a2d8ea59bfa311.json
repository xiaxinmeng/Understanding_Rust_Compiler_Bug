{"sha": "1130d5e3e31879417a982e3df5a2d8ea59bfa311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzMGQ1ZTNlMzE4Nzk0MTdhOTgyZTNkZjVhMmQ4ZWE1OWJmYTMxMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-26T18:56:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-26T18:56:58Z"}, "message": "Remove BB_HEAD, BB_END, BB_HEADER scaffolding\n\ngcc/\n\t* basic-block.h (struct rtl_bb_info): Strengthen fields \"end_\"\n\tand \"header_\" from rtx to rtx_insn *.\n\t(struct basic_block_d): Likewise for field \"head_\" within \"x\"\n\tfield of union basic_block_il_dependent.\n\t(BB_HEAD): Drop function...\n\t(SET_BB_HEAD): ...and this function in favor of...\n\t(BB_HEAD): ...reinstate macro.\n\t(BB_END): Drop function...\n\t(SET_BB_END): ...and this function in favor of...\n\t(BB_END): ...reinstate macro.\n\t(BB_HEADER): Drop function...\n\t(SET_BB_HEADER): ...and this function in favor of...\n\t(BB_HEADER): ...reinstate macro.\n\n\t* bb-reorder.c (add_labels_and_missing_jumps): Drop use of BB_END.\n\t(fix_crossing_unconditional_branches): Likewise.\n\t* caller-save.c (save_call_clobbered_regs): Likewise.\n\t(insert_one_insn): Drop use of SET_BB_HEAD and SET_BB_END.\n\t* cfgbuild.c (find_bb_boundaries): Drop use of SET_BB_END.\n\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Likewise.\n\t(merge_blocks_move_successor_nojumps): Likewise.\n\t(outgoing_edges_match): Update use of for_each_rtx to\n\tfor_each_rtx_in_insn.\n\t* cfgexpand.c (expand_gimple_cond): Drop use of SET_BB_END.\n\t(expand_gimple_cond): Likewise.\n\t(expand_gimple_tailcall): Likewise.\n\t(expand_gimple_basic_block): Drop use of SET_BB_HEAD and\n\tSET_BB_END.\n\t(construct_exit_block): Drop use of SET_BB_END.\n\t* cfgrtl.c (cfg_layout_function_footer): Strengthen from rtx to\n\trtx_insn *.\n\t(delete_insn): Rename param \"insn\" to \"uncast_insn\", introducing\n\ta new local \"insn\" with a checked cast to rtx_insn *.  Drop use of\n\tSET_BB_HEAD and SET_BB_END.\n\t(create_basic_block_structure): Drop use of SET_BB_HEAD and\n\tSET_BB_END.\n\t(rtl_delete_block): Drop use of SET_BB_HEAD.\n\t(rtl_split_block): Drop use of SET_BB_END.\n\t(emit_nop_for_unique_locus_between): Likewise.\n\t(rtl_merge_blocks): Drop use of SET_BB_END and SET_BB_HEAD.\n\t(block_label): Drop use of SET_BB_HEAD.\n\t(fixup_abnormal_edges): Drop use of SET_BB_END.\n\t(record_effective_endpoints): Drop use of SET_BB_HEADER.\n\t(relink_block_chain): Likewise.\n\t(fixup_reorder_chain): Drop use of SET_BB_END.\n\t(cfg_layout_duplicate_bb): Drop use of SET_BB_HEADER.\n\t(cfg_layout_delete_block): Strengthen local \"to\" from rtx * to\n\trtx_insn **.  Drop use of SET_BB_HEADER.\n\t(cfg_layout_merge_blocks): Drop use of SET_BB_HEADER, SET_BB_END,\n\tSET_BB_HEAD.\n\t(BB_HEAD): Delete this function.\n\t(SET_BB_HEAD): Likewise.\n\t(BB_END): Likewise.\n\t(SET_BB_END): Likewise.\n\t(BB_HEADER): Likewise.\n\t(SET_BB_HEADER): Likewise.\n\t* emit-rtl.c (add_insn_after):  Rename param \"insn\" to\n\t\"uncast_insn\", adding a new local \"insn\" and a checked cast to\n\trtx_insn *.  Drop use of SET_BB_END.\n\t(remove_insn): Strengthen locals \"next\" and \"prev\" from rtx to\n\trtx_insn *.  Drop use of SET_BB_HEAD and SET_BB_END.\n\t(reorder_insns): Drop use of SET_BB_END.\n\t(emit_insn_after_1): Strengthen param \"first\" and locals \"last\",\n\t\"after_after\" from rtx to rtx_insn *.  Drop use of SET_BB_END.\n\t(emit_pattern_after_noloc): Add checked cast.\n\t* haifa-sched.c (get_ebb_head_tail): Drop use of SET_BB_END.\n\t(restore_other_notes): Likewise.\n\t(move_insn): Likewise.\n\t(sched_extend_bb): Likewise.\n\t(fix_jump_move): Likewise.\n\t* ifcvt.c (noce_process_if_block): Likewise.\n\t(dead_or_predicable): Likewise.\n\t* ira.c (update_equiv_regs): Drop use of SET_BB_HEAD.\n\t* reg-stack.c (change_stack): Drop use of SET_BB_END.\n\t* sel-sched-ir.c (sel_move_insn): Likewise.\n\t* sel-sched.c (move_nop_to_previous_block): Likewise.\n\n\t* config/c6x/c6x.c (hwloop_optimize): Drop use of SET_BB_HEAD and\n\tSET_BB_END.\n\t* config/ia64/ia64.c (emit_predicate_relation_info): Likewise.\n\n/\n\t* rtx-classes-status.txt (TODO): SET_BB_HEAD, SET_BB_END,\n\tSET_BB_HEADER are done.\n\nFrom-SVN: r214534", "tree": {"sha": "c54ed14919bfd87d09336476cd238800a117c656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c54ed14919bfd87d09336476cd238800a117c656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1130d5e3e31879417a982e3df5a2d8ea59bfa311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1130d5e3e31879417a982e3df5a2d8ea59bfa311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1130d5e3e31879417a982e3df5a2d8ea59bfa311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1130d5e3e31879417a982e3df5a2d8ea59bfa311/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e00022e9711439804cf9aff66613b4e382d7d158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00022e9711439804cf9aff66613b4e382d7d158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00022e9711439804cf9aff66613b4e382d7d158"}], "stats": {"total": 314, "additions": 176, "deletions": 138}, "files": [{"sha": "f38a66cca41ec633d46aabb117dfa56e5f57eaca", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -1,3 +1,8 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtx-classes-status.txt (TODO): SET_BB_HEAD, SET_BB_END,\n+\tSET_BB_HEADER are done.\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtx-classes-status.txt (TODO): SET_DEP_PRO and SET_DEP_CON are"}, {"sha": "75a77eaf8b8828928010185fc298d1b35e5b8d88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -1,3 +1,86 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (struct rtl_bb_info): Strengthen fields \"end_\"\n+\tand \"header_\" from rtx to rtx_insn *.\n+\t(struct basic_block_d): Likewise for field \"head_\" within \"x\"\n+\tfield of union basic_block_il_dependent.\n+\t(BB_HEAD): Drop function...\n+\t(SET_BB_HEAD): ...and this function in favor of...\n+\t(BB_HEAD): ...reinstate macro.\n+\t(BB_END): Drop function...\n+\t(SET_BB_END): ...and this function in favor of...\n+\t(BB_END): ...reinstate macro.\n+\t(BB_HEADER): Drop function...\n+\t(SET_BB_HEADER): ...and this function in favor of...\n+\t(BB_HEADER): ...reinstate macro.\n+\n+\t* bb-reorder.c (add_labels_and_missing_jumps): Drop use of BB_END.\n+\t(fix_crossing_unconditional_branches): Likewise.\n+\t* caller-save.c (save_call_clobbered_regs): Likewise.\n+\t(insert_one_insn): Drop use of SET_BB_HEAD and SET_BB_END.\n+\t* cfgbuild.c (find_bb_boundaries): Drop use of SET_BB_END.\n+\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Likewise.\n+\t(merge_blocks_move_successor_nojumps): Likewise.\n+\t(outgoing_edges_match): Update use of for_each_rtx to\n+\tfor_each_rtx_in_insn.\n+\t* cfgexpand.c (expand_gimple_cond): Drop use of SET_BB_END.\n+\t(expand_gimple_cond): Likewise.\n+\t(expand_gimple_tailcall): Likewise.\n+\t(expand_gimple_basic_block): Drop use of SET_BB_HEAD and\n+\tSET_BB_END.\n+\t(construct_exit_block): Drop use of SET_BB_END.\n+\t* cfgrtl.c (cfg_layout_function_footer): Strengthen from rtx to\n+\trtx_insn *.\n+\t(delete_insn): Rename param \"insn\" to \"uncast_insn\", introducing\n+\ta new local \"insn\" with a checked cast to rtx_insn *.  Drop use of\n+\tSET_BB_HEAD and SET_BB_END.\n+\t(create_basic_block_structure): Drop use of SET_BB_HEAD and\n+\tSET_BB_END.\n+\t(rtl_delete_block): Drop use of SET_BB_HEAD.\n+\t(rtl_split_block): Drop use of SET_BB_END.\n+\t(emit_nop_for_unique_locus_between): Likewise.\n+\t(rtl_merge_blocks): Drop use of SET_BB_END and SET_BB_HEAD.\n+\t(block_label): Drop use of SET_BB_HEAD.\n+\t(fixup_abnormal_edges): Drop use of SET_BB_END.\n+\t(record_effective_endpoints): Drop use of SET_BB_HEADER.\n+\t(relink_block_chain): Likewise.\n+\t(fixup_reorder_chain): Drop use of SET_BB_END.\n+\t(cfg_layout_duplicate_bb): Drop use of SET_BB_HEADER.\n+\t(cfg_layout_delete_block): Strengthen local \"to\" from rtx * to\n+\trtx_insn **.  Drop use of SET_BB_HEADER.\n+\t(cfg_layout_merge_blocks): Drop use of SET_BB_HEADER, SET_BB_END,\n+\tSET_BB_HEAD.\n+\t(BB_HEAD): Delete this function.\n+\t(SET_BB_HEAD): Likewise.\n+\t(BB_END): Likewise.\n+\t(SET_BB_END): Likewise.\n+\t(BB_HEADER): Likewise.\n+\t(SET_BB_HEADER): Likewise.\n+\t* emit-rtl.c (add_insn_after):  Rename param \"insn\" to\n+\t\"uncast_insn\", adding a new local \"insn\" and a checked cast to\n+\trtx_insn *.  Drop use of SET_BB_END.\n+\t(remove_insn): Strengthen locals \"next\" and \"prev\" from rtx to\n+\trtx_insn *.  Drop use of SET_BB_HEAD and SET_BB_END.\n+\t(reorder_insns): Drop use of SET_BB_END.\n+\t(emit_insn_after_1): Strengthen param \"first\" and locals \"last\",\n+\t\"after_after\" from rtx to rtx_insn *.  Drop use of SET_BB_END.\n+\t(emit_pattern_after_noloc): Add checked cast.\n+\t* haifa-sched.c (get_ebb_head_tail): Drop use of SET_BB_END.\n+\t(restore_other_notes): Likewise.\n+\t(move_insn): Likewise.\n+\t(sched_extend_bb): Likewise.\n+\t(fix_jump_move): Likewise.\n+\t* ifcvt.c (noce_process_if_block): Likewise.\n+\t(dead_or_predicable): Likewise.\n+\t* ira.c (update_equiv_regs): Drop use of SET_BB_HEAD.\n+\t* reg-stack.c (change_stack): Drop use of SET_BB_END.\n+\t* sel-sched-ir.c (sel_move_insn): Likewise.\n+\t* sel-sched.c (move_nop_to_previous_block): Likewise.\n+\n+\t* config/c6x/c6x.c (hwloop_optimize): Drop use of SET_BB_HEAD and\n+\tSET_BB_END.\n+\t* config/ia64/ia64.c (emit_predicate_relation_info): Likewise.\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (create_basic_block_structure): Strengthen params"}, {"sha": "a7c88a4d8c1443b25f5c20a68fa222e0f1c6f21b", "filename": "gcc/basic-block.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -122,11 +122,11 @@ struct loop;\n struct GTY(()) rtl_bb_info {\n   /* The first insn of the block is embedded into bb->il.x.  */\n   /* The last insn of the block.  */\n-  rtx end_;\n+  rtx_insn *end_;\n \n   /* In CFGlayout mode points to insn notes/jumptables to be placed just before\n      and after the block.   */\n-  rtx header_;\n+  rtx_insn *header_;\n   rtx_insn *footer_;\n };\n \n@@ -185,7 +185,7 @@ struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_d\n   union basic_block_il_dependent {\n       struct gimple_bb_info GTY ((tag (\"0\"))) gimple;\n       struct {\n-        rtx head_;\n+        rtx_insn *head_;\n         struct rtl_bb_info * rtl;\n       } GTY ((tag (\"1\"))) x;\n     } GTY ((desc (\"((%1.flags & BB_RTL) != 0)\"))) il;\n@@ -372,15 +372,9 @@ struct GTY(()) control_flow_graph {\n    to rtx_insn.   Once the underlying fields are converted from rtx\n    to rtx_insn, these can be converted back to macros.  */\n \n-extern rtx_insn *BB_HEAD (const_basic_block bb);\n-extern rtx& SET_BB_HEAD (basic_block bb);\n-\n-extern rtx_insn *BB_END (const_basic_block bb);\n-extern rtx& SET_BB_END (basic_block bb);\n-\n-extern rtx_insn *BB_HEADER (const_basic_block bb);\n-extern rtx& SET_BB_HEADER (basic_block bb);\n-\n+#define BB_HEAD(B)      (B)->il.x.head_\n+#define BB_END(B)       (B)->il.x.rtl->end_\n+#define BB_HEADER(B)    (B)->il.x.rtl->header_\n #define BB_FOOTER(B)    (B)->il.x.rtl->footer_\n \n /* Special block numbers [markers] for entry and exit."}, {"sha": "b3f770d4797567c82724519b601b47b0426d0d39", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -1759,7 +1759,7 @@ add_labels_and_missing_jumps (vec<edge> crossing_edges)\n       gcc_assert (single_succ_p (src));\n \n       new_jump = emit_jump_insn_after (gen_jump (label), BB_END (src));\n-      SET_BB_END (src) = new_jump;\n+      BB_END (src) = new_jump;\n       JUMP_LABEL (new_jump) = label;\n       LABEL_NUSES (label) += 1;\n \n@@ -2190,7 +2190,7 @@ fix_crossing_unconditional_branches (void)\n \t      /* Make BB_END for cur_bb be the jump instruction (NOT the\n \t\t barrier instruction at the end of the sequence...).  */\n \n-\t      SET_BB_END (cur_bb) = jump_insn;\n+\t      BB_END (cur_bb) = jump_insn;\n \t    }\n \t}\n     }"}, {"sha": "8bdca517e0b2c2721c0b256647444d07943872c9", "filename": "gcc/caller-save.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -921,7 +921,7 @@ save_call_clobbered_regs (void)\n \t\t      if (NEXT_INSN (ins))\n \t\t\tSET_PREV_INSN (NEXT_INSN (ins)) = ins;\n                       if (BB_END (bb) == insn)\n-\t\t\tSET_BB_END (bb) = ins;\n+\t\t\tBB_END (bb) = ins;\n \t\t    }\n \t\t  else\n \t\t    gcc_assert (DEBUG_INSN_P (ins));\n@@ -1418,7 +1418,7 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n \n       CLEAR_REG_SET (&new_chain->dead_or_set);\n       if (chain->insn == BB_HEAD (BASIC_BLOCK_FOR_FN (cfun, chain->block)))\n-\tSET_BB_HEAD (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n+\tBB_HEAD (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n     }\n   else\n     {\n@@ -1438,7 +1438,7 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n \t\t   &new_chain->live_throughout);\n       CLEAR_REG_SET (&new_chain->dead_or_set);\n       if (chain->insn == BB_END (BASIC_BLOCK_FOR_FN (cfun, chain->block)))\n-\tSET_BB_END (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n+\tBB_END (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n     }\n   new_chain->block = chain->block;\n   new_chain->is_caller_save_insn = 1;"}, {"sha": "dd6ed7a00e126d4d34dc5e005a25116f346dfb7a", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -462,7 +462,7 @@ find_bb_boundaries (basic_block bb)\n \t  fallthru = split_block (bb, PREV_INSN (insn));\n \t  if (flow_transfer_insn)\n \t    {\n-\t      SET_BB_END (bb) = flow_transfer_insn;\n+\t      BB_END (bb) = flow_transfer_insn;\n \n \t      /* Clean up the bb field for the insns between the blocks.  */\n \t      for (x = NEXT_INSN (flow_transfer_insn);\n@@ -499,7 +499,7 @@ find_bb_boundaries (basic_block bb)\n      ordinary jump, we need to take care and move basic block boundary.  */\n   if (flow_transfer_insn)\n     {\n-      SET_BB_END (bb) = flow_transfer_insn;\n+      BB_END (bb) = flow_transfer_insn;\n \n       /* Clean up the bb field for the insns that do not belong to BB.  */\n       x = flow_transfer_insn;"}, {"sha": "96ab4aa877ab3dca6f4717130201d1749889f0fb", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -728,7 +728,7 @@ merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n   if (tablejump_p (BB_END (b), &label, &table)\n       && prev_active_insn (label) == BB_END (b))\n     {\n-      SET_BB_END (b) = table;\n+      BB_END (b) = table;\n     }\n \n   /* There had better have been a barrier there.  Delete it.  */\n@@ -741,7 +741,7 @@ merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n   reorder_insns_nobb (BB_HEAD (b), BB_END (b), BB_END (a));\n \n   /* Restore the real end of b.  */\n-  SET_BB_END (b) = real_b_end;\n+  BB_END (b) = real_b_end;\n \n   if (dump_file)\n     fprintf (dump_file, \"Moved block %d after %d and merged.\\n\",\n@@ -1725,7 +1725,7 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n \t\t  rr.r1 = label1;\n \t\t  rr.r2 = label2;\n \t\t  rr.update_label_nuses = false;\n-\t\t  for_each_rtx (&SET_BB_END (bb1), replace_label, &rr);\n+\t\t  for_each_rtx_in_insn (&BB_END (bb1), replace_label, &rr);\n \n \t\t  match = (old_insns_match_p (mode, BB_END (bb1), BB_END (bb2))\n \t\t\t   == dir_both);\n@@ -1739,7 +1739,7 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n \t\t     from the instruction is deleted too.  */\n \t\t  rr.r1 = label2;\n \t\t  rr.r2 = label1;\n-\t\t  for_each_rtx (&SET_BB_END (bb1), replace_label, &rr);\n+\t\t  for_each_rtx_in_insn (&BB_END (bb1), replace_label, &rr);\n \n \t\t  return match;\n \t\t}"}, {"sha": "b6e02ef38fd9d09f0b75bce02902c4084d1c0888", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -2175,9 +2175,9 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n     set_curr_insn_location (false_edge->goto_locus);\n   emit_jump (label_rtx_for_bb (false_edge->dest));\n \n-  SET_BB_END (bb) = last;\n+  BB_END (bb) = last;\n   if (BARRIER_P (BB_END (bb)))\n-    SET_BB_END (bb) = PREV_INSN (BB_END (bb));\n+    BB_END (bb) = PREV_INSN (BB_END (bb));\n   update_bb_for_insn (bb);\n \n   new_bb = create_basic_block (NEXT_INSN (last), get_last_insn (), bb);\n@@ -2191,7 +2191,7 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n   new_edge->probability = REG_BR_PROB_BASE;\n   new_edge->count = new_bb->count;\n   if (BARRIER_P (BB_END (new_bb)))\n-    SET_BB_END (new_bb) = PREV_INSN (BB_END (new_bb));\n+    BB_END (new_bb) = PREV_INSN (BB_END (new_bb));\n   update_bb_for_insn (new_bb);\n \n   maybe_dump_rtl_for_gimple_stmt (stmt, last2);\n@@ -3490,7 +3490,7 @@ expand_gimple_tailcall (basic_block bb, gimple stmt, bool *can_fallthru)\n \t\t | EDGE_SIBCALL);\n   e->probability += probability;\n   e->count += count;\n-  SET_BB_END (bb) = last;\n+  BB_END (bb) = last;\n   update_bb_for_insn (bb);\n \n   if (NEXT_INSN (last))\n@@ -3499,7 +3499,7 @@ expand_gimple_tailcall (basic_block bb, gimple stmt, bool *can_fallthru)\n \n       last = BB_END (bb);\n       if (BARRIER_P (last))\n-\tSET_BB_END (bb) = PREV_INSN (last);\n+\tBB_END (bb) = PREV_INSN (last);\n     }\n \n   maybe_dump_rtl_for_gimple_stmt (stmt, last2);\n@@ -4962,15 +4962,15 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n \n       /* Java emits line number notes in the top of labels.\n \t ??? Make this go away once line number notes are obsoleted.  */\n-      SET_BB_HEAD (bb) = NEXT_INSN (last);\n+      BB_HEAD (bb) = NEXT_INSN (last);\n       if (NOTE_P (BB_HEAD (bb)))\n-\tSET_BB_HEAD (bb) = NEXT_INSN (BB_HEAD (bb));\n+\tBB_HEAD (bb) = NEXT_INSN (BB_HEAD (bb));\n       note = emit_note_after (NOTE_INSN_BASIC_BLOCK, BB_HEAD (bb));\n \n       maybe_dump_rtl_for_gimple_stmt (stmt, last);\n     }\n   else\n-    SET_BB_HEAD (bb) = note = emit_note (NOTE_INSN_BASIC_BLOCK);\n+    BB_HEAD (bb) = note = emit_note (NOTE_INSN_BASIC_BLOCK);\n \n   NOTE_BASIC_BLOCK (note) = bb;\n \n@@ -5253,7 +5253,7 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n     last = PREV_INSN (last);\n   if (JUMP_TABLE_DATA_P (last))\n     last = PREV_INSN (PREV_INSN (last));\n-  SET_BB_END (bb) = last;\n+  BB_END (bb) = last;\n \n   update_bb_for_insn (bb);\n \n@@ -5355,7 +5355,7 @@ construct_exit_block (void)\n     return;\n   /* While emitting the function end we could move end of the last basic\n      block.  */\n-  SET_BB_END (prev_bb) = orig_end;\n+  BB_END (prev_bb) = orig_end;\n   while (NEXT_INSN (head) && NOTE_P (NEXT_INSN (head)))\n     head = NEXT_INSN (head);\n   /* But make sure exit_block starts with RETURN_LABEL, otherwise the\n@@ -5367,7 +5367,7 @@ construct_exit_block (void)\n       while (NEXT_INSN (head) != return_label)\n \t{\n \t  if (!NOTE_P (NEXT_INSN (head)))\n-\t    SET_BB_END (prev_bb) = NEXT_INSN (head);\n+\t    BB_END (prev_bb) = NEXT_INSN (head);\n \t  head = NEXT_INSN (head);\n \t}\n     }"}, {"sha": "db6c8f8f6f723fd3d722d6f4b468f1ab38866d6f", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 26, "deletions": 70, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -64,7 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Holds the interesting leading and trailing notes for the function.\n    Only applicable if the CFG is in cfglayout mode.  */\n-static GTY(()) rtx cfg_layout_function_footer;\n+static GTY(()) rtx_insn *cfg_layout_function_footer;\n static GTY(()) rtx cfg_layout_function_header;\n \n static rtx_insn *skip_insns_after_block (basic_block);\n@@ -123,8 +123,9 @@ can_delete_label_p (const rtx_code_label *label)\n /* Delete INSN by patching it out.  */\n \n void\n-delete_insn (rtx insn)\n+delete_insn (rtx uncast_insn)\n {\n+  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n   rtx note;\n   bool really_delete = true;\n \n@@ -152,9 +153,9 @@ delete_insn (rtx insn)\n \t      && bb == BLOCK_FOR_INSN (bb_note))\n \t    {\n \t      reorder_insns_nobb (insn, insn, bb_note);\n-\t      SET_BB_HEAD (bb) = bb_note;\n+\t      BB_HEAD (bb) = bb_note;\n \t      if (BB_END (bb) == bb_note)\n-\t\tSET_BB_END (bb) = insn;\n+\t\tBB_END (bb) = insn;\n \t    }\n \t}\n \n@@ -326,8 +327,8 @@ create_basic_block_structure (rtx_insn *head, rtx_insn *end, rtx_note *bb_note,\n   if (NEXT_INSN (end) == bb_note)\n     end = bb_note;\n \n-  SET_BB_HEAD (bb) = head;\n-  SET_BB_END (bb) = end;\n+  BB_HEAD (bb) = head;\n+  BB_END (bb) = end;\n   bb->index = last_basic_block_for_fn (cfun)++;\n   bb->flags = BB_NEW | BB_RTL;\n   link_block (bb, after);\n@@ -401,7 +402,7 @@ rtl_delete_block (basic_block b)\n   end = get_last_bb_insn (b);\n \n   /* Selectively delete the entire chain.  */\n-  SET_BB_HEAD (b) = NULL;\n+  BB_HEAD (b) = NULL;\n   delete_insn_chain (insn, end, true);\n \n \n@@ -744,7 +745,7 @@ rtl_split_block (basic_block bb, void *insnp)\n   /* Create the new basic block.  */\n   new_bb = create_basic_block (NEXT_INSN (insn), BB_END (bb), bb);\n   BB_COPY_PARTITION (new_bb, bb);\n-  SET_BB_END (bb) = insn;\n+  BB_END (bb) = insn;\n \n   /* Redirect the outgoing edges.  */\n   new_bb->succs = bb->succs;\n@@ -803,7 +804,7 @@ emit_nop_for_unique_locus_between (basic_block a, basic_block b)\n   if (!unique_locus_on_edge_between_p (a, b))\n     return;\n \n-  SET_BB_END (a) = emit_insn_after_noloc (gen_nop (), BB_END (a), a);\n+  BB_END (a) = emit_insn_after_noloc (gen_nop (), BB_END (a), a);\n   INSN_LOCATION (BB_END (a)) = EDGE_SUCC (a, 0)->goto_locus;\n }\n \n@@ -885,8 +886,8 @@ rtl_merge_blocks (basic_block a, basic_block b)\n \n   /* Delete everything marked above as well as crap that might be\n      hanging out between the two blocks.  */\n-  SET_BB_END (a) = a_end;\n-  SET_BB_HEAD (b) = b_empty ? NULL_RTX : b_head;\n+  BB_END (a) = a_end;\n+  BB_HEAD (b) = b_empty ? NULL : b_head;\n   delete_insn_chain (del_first, del_last, true);\n \n   /* When not optimizing and the edge is the only place in RTL which holds\n@@ -902,8 +903,8 @@ rtl_merge_blocks (basic_block a, basic_block b)\n     {\n       update_bb_for_insn_chain (a_end, b_debug_end, a);\n \n-      SET_BB_END (a) = b_debug_end;\n-      SET_BB_HEAD (b) = NULL_RTX;\n+      BB_END (a) = b_debug_end;\n+      BB_HEAD (b) = NULL;\n     }\n   else if (b_end != b_debug_end)\n     {\n@@ -915,7 +916,7 @@ rtl_merge_blocks (basic_block a, basic_block b)\n \treorder_insns_nobb (NEXT_INSN (a_end), PREV_INSN (b_debug_start),\n \t\t\t    b_debug_end);\n       update_bb_for_insn_chain (b_debug_start, b_debug_end, a);\n-      SET_BB_END (a) = b_debug_end;\n+      BB_END (a) = b_debug_end;\n     }\n \n   df_bb_delete (b->index);\n@@ -980,7 +981,7 @@ block_label (basic_block block)\n \n   if (!LABEL_P (BB_HEAD (block)))\n     {\n-      SET_BB_HEAD (block) = emit_label_before (gen_label_rtx (), BB_HEAD (block));\n+      BB_HEAD (block) = emit_label_before (gen_label_rtx (), BB_HEAD (block));\n     }\n \n   return BB_HEAD (block);\n@@ -3259,7 +3260,7 @@ fixup_abnormal_edges (void)\n \t      e = find_fallthru_edge (bb->succs);\n \n \t      stop = NEXT_INSN (BB_END (bb));\n-\t      SET_BB_END (bb) = insn;\n+\t      BB_END (bb) = insn;\n \n \t      for (insn = NEXT_INSN (insn); insn != stop; insn = next)\n \t\t{\n@@ -3455,7 +3456,7 @@ record_effective_endpoints (void)\n       rtx_insn *end;\n \n       if (PREV_INSN (BB_HEAD (bb)) && next_insn != BB_HEAD (bb))\n-\tSET_BB_HEADER (bb) = unlink_insn_chain (next_insn,\n+\tBB_HEADER (bb) = unlink_insn_chain (next_insn,\n \t\t\t\t\t\tPREV_INSN (BB_HEAD (bb)));\n       end = skip_insns_after_block (bb);\n       if (NEXT_INSN (BB_END (bb)) && BB_END (bb) != end)\n@@ -3617,7 +3618,7 @@ relink_block_chain (bool stay_in_cfglayout_mode)\n     {\n       bb->aux = NULL;\n       if (!stay_in_cfglayout_mode)\n-\tSET_BB_HEADER (bb) = BB_FOOTER (bb) = NULL;\n+\tBB_HEADER (bb) = BB_FOOTER (bb) = NULL;\n     }\n \n   /* Maybe reset the original copy tables, they are not valid anymore\n@@ -3910,7 +3911,7 @@ fixup_reorder_chain (void)\n \t\t}\n \t      nb = split_edge (e);\n \t      if (!INSN_P (BB_END (nb)))\n-\t\tSET_BB_END (nb) = emit_insn_after_noloc (gen_nop (), BB_END (nb),\n+\t\tBB_END (nb) = emit_insn_after_noloc (gen_nop (), BB_END (nb),\n \t\t\t\t\t\t\t nb);\n \t      INSN_LOCATION (BB_END (nb)) = e->goto_locus;\n \n@@ -4190,7 +4191,7 @@ cfg_layout_duplicate_bb (basic_block bb)\n \tinsn = NEXT_INSN (insn);\n       insn = duplicate_insn_chain (BB_HEADER (bb), insn);\n       if (insn)\n-\tSET_BB_HEADER (new_bb) = unlink_insn_chain (insn, get_last_insn ());\n+\tBB_HEADER (new_bb) = unlink_insn_chain (insn, get_last_insn ());\n     }\n \n   if (BB_FOOTER (bb))\n@@ -4413,7 +4414,7 @@ static void\n cfg_layout_delete_block (basic_block bb)\n {\n   rtx_insn *insn, *next, *prev = PREV_INSN (BB_HEAD (bb)), *remaints;\n-  rtx *to;\n+  rtx_insn **to;\n \n   if (BB_HEADER (bb))\n     {\n@@ -4463,7 +4464,7 @@ cfg_layout_delete_block (basic_block bb)\n \t}\n     }\n   if (bb->next_bb != EXIT_BLOCK_PTR_FOR_FN (cfun))\n-    to = &SET_BB_HEADER (bb->next_bb);\n+    to = &BB_HEADER (bb->next_bb);\n   else\n     to = &cfg_layout_function_footer;\n \n@@ -4605,7 +4606,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n \t  SET_PREV_INSN (BB_FOOTER (a)) = last;\n \t  BB_FOOTER (a) = BB_HEADER (b);\n \t}\n-      SET_BB_HEADER (b) = NULL;\n+      BB_HEADER (b) = NULL;\n     }\n \n   /* In the case basic blocks are not adjacent, move them around.  */\n@@ -4619,7 +4620,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n   else\n     {\n       insn = BB_HEAD (b);\n-      SET_BB_END (a) = BB_END (b);\n+      BB_END (a) = BB_END (b);\n     }\n \n   /* emit_insn_after_noloc doesn't call df_insn_change_bb.\n@@ -4630,7 +4631,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n   if (!NOTE_INSN_BASIC_BLOCK_P (insn))\n     insn = NEXT_INSN (insn);\n   gcc_assert (NOTE_INSN_BASIC_BLOCK_P (insn));\n-  SET_BB_HEAD (b) = SET_BB_END (b) = NULL;\n+  BB_HEAD (b) = BB_END (b) = NULL;\n   delete_insn (insn);\n \n   df_bb_delete (b->index);\n@@ -5102,49 +5103,4 @@ struct cfg_hooks cfg_layout_rtl_cfg_hooks = {\n   rtl_account_profile_record,\n };\n \n-/* BB_HEAD as an rvalue. */\n-\n-rtx_insn *BB_HEAD (const_basic_block bb)\n-{\n-  rtx insn = bb->il.x.head_;\n-  return safe_as_a <rtx_insn *> (insn);\n-}\n-\n-/* BB_HEAD for use as an lvalue. */\n-\n-rtx& SET_BB_HEAD (basic_block bb)\n-{\n-  return bb->il.x.head_;\n-}\n-\n-/* BB_END as an rvalue. */\n-\n-rtx_insn *BB_END (const_basic_block bb)\n-{\n-  rtx insn = bb->il.x.rtl->end_;\n-  return safe_as_a <rtx_insn *> (insn);\n-}\n-\n-/* BB_END as an lvalue. */\n-\n-rtx& SET_BB_END (basic_block bb)\n-{\n-  return bb->il.x.rtl->end_;\n-}\n-\n-/* BB_HEADER as an rvalue. */\n-\n-rtx_insn *BB_HEADER (const_basic_block bb)\n-{\n-  rtx insn = bb->il.x.rtl->header_;\n-  return safe_as_a <rtx_insn *> (insn);\n-}\n-\n-/* BB_HEADER as an lvalue. */\n-\n-rtx& SET_BB_HEADER (basic_block bb)\n-{\n-  return bb->il.x.rtl->header_;\n-}\n-\n #include \"gt-cfgrtl.h\""}, {"sha": "0977fbcde544d64f6e5a434fc61a09908bb827de", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -5834,8 +5834,8 @@ hwloop_optimize (hwloop_info loop)\n   SET_NEXT_INSN (PREV_INSN (BB_HEAD (bb))) = orig_vec[0];\n   SET_NEXT_INSN (orig_vec[n_insns - 1]) = NEXT_INSN (BB_END (bb));\n   SET_PREV_INSN (NEXT_INSN (BB_END (bb))) = orig_vec[n_insns - 1];\n-  SET_BB_HEAD (bb) = orig_vec[0];\n-  SET_BB_END (bb) = orig_vec[n_insns - 1];\n+  BB_HEAD (bb) = orig_vec[0];\n+  BB_END (bb) = orig_vec[n_insns - 1];\n  undo_splits:\n   free_delay_pairs ();\n   FOR_BB_INSNS (bb, insn)"}, {"sha": "5504da992e9c07260b988e16c17a6a641d7ef670", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -9623,7 +9623,7 @@ emit_predicate_relation_info (void)\n \t    rtx p = gen_rtx_REG (BImode, r);\n \t    rtx_insn *n = emit_insn_after (gen_pred_rel_mutex (p), head);\n \t    if (head == BB_END (bb))\n-\t      SET_BB_END (bb) = n;\n+\t      BB_END (bb) = n;\n \t    head = n;\n \t  }\n     }\n@@ -9646,9 +9646,9 @@ emit_predicate_relation_info (void)\n \t\temit_insn_before (gen_safe_across_calls_all (), insn);\n \t      rtx_insn *a = emit_insn_after (gen_safe_across_calls_normal (), insn);\n \t      if (BB_HEAD (bb) == insn)\n-\t\tSET_BB_HEAD (bb) = b;\n+\t\tBB_HEAD (bb) = b;\n \t      if (BB_END (bb) == insn)\n-\t\tSET_BB_END (bb) = a;\n+\t\tBB_END (bb) = a;\n \t    }\n \n \t  if (insn == BB_END (bb))"}, {"sha": "2e09160e71108216b8bcf3a712962b1b4a3ff791", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -3982,8 +3982,9 @@ add_insn_before_nobb (rtx insn, rtx before)\n    they know how to update a SEQUENCE. */\n \n void\n-add_insn_after (rtx insn, rtx after, basic_block bb)\n+add_insn_after (rtx uncast_insn, rtx after, basic_block bb)\n {\n+  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n   add_insn_after_nobb (insn, after);\n   if (!BARRIER_P (after)\n       && !BARRIER_P (insn)\n@@ -3998,7 +3999,7 @@ add_insn_after (rtx insn, rtx after, basic_block bb)\n \t  /* Avoid clobbering of structure when creating new BB.  */\n \t  && !BARRIER_P (insn)\n \t  && !NOTE_INSN_BASIC_BLOCK_P (insn))\n-\tSET_BB_END (bb) = insn;\n+\tBB_END (bb) = insn;\n     }\n }\n \n@@ -4063,8 +4064,8 @@ set_insn_deleted (rtx insn)\n void\n remove_insn (rtx insn)\n {\n-  rtx next = NEXT_INSN (insn);\n-  rtx prev = PREV_INSN (insn);\n+  rtx_insn *next = NEXT_INSN (insn);\n+  rtx_insn *prev = PREV_INSN (insn);\n   basic_block bb;\n \n   if (prev)\n@@ -4127,10 +4128,10 @@ remove_insn (rtx insn)\n \t  /* Never ever delete the basic block note without deleting whole\n \t     basic block.  */\n \t  gcc_assert (!NOTE_P (insn));\n-\t  SET_BB_HEAD (bb) = next;\n+\t  BB_HEAD (bb) = next;\n \t}\n       if (BB_END (bb) == insn)\n-\tSET_BB_END (bb) = prev;\n+\tBB_END (bb) = prev;\n     }\n }\n \n@@ -4230,12 +4231,12 @@ reorder_insns (rtx_insn *from, rtx_insn *to, rtx_insn *after)\n \t  && (bb2 = BLOCK_FOR_INSN (from)))\n \t{\n \t  if (BB_END (bb2) == to)\n-\t    SET_BB_END (bb2) = prev;\n+\t    BB_END (bb2) = prev;\n \t  df_set_bb_dirty (bb2);\n \t}\n \n       if (BB_END (bb) == after)\n-\tSET_BB_END (bb) = to;\n+\tBB_END (bb) = to;\n \n       for (x = from; x != NEXT_INSN (to); x = NEXT_INSN (x))\n \tif (!BARRIER_P (x))\n@@ -4381,10 +4382,10 @@ emit_label_before (rtx label, rtx before)\n    efficiently.  */\n \n static rtx\n-emit_insn_after_1 (rtx first, rtx after, basic_block bb)\n+emit_insn_after_1 (rtx_insn *first, rtx after, basic_block bb)\n {\n-  rtx last;\n-  rtx after_after;\n+  rtx_insn *last;\n+  rtx_insn *after_after;\n   if (!bb && !BARRIER_P (after))\n     bb = BLOCK_FOR_INSN (after);\n \n@@ -4403,7 +4404,7 @@ emit_insn_after_1 (rtx first, rtx after, basic_block bb)\n \t  df_insn_rescan (last);\n \t}\n       if (BB_END (bb) == after)\n-\tSET_BB_END (bb) = last;\n+\tBB_END (bb) = last;\n     }\n   else\n     for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))\n@@ -4443,7 +4444,7 @@ emit_pattern_after_noloc (rtx x, rtx after, basic_block bb,\n     case CODE_LABEL:\n     case BARRIER:\n     case NOTE:\n-      last = emit_insn_after_1 (x, after, bb);\n+      last = emit_insn_after_1 (as_a <rtx_insn *> (x), after, bb);\n       break;\n \n #ifdef ENABLE_RTL_CHECKING"}, {"sha": "54691a30db128679c64809e6111e12bdad6a48cd", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -4810,7 +4810,7 @@ get_ebb_head_tail (basic_block beg, basic_block end,\n \t\treorder_insns_nobb (note, note, end_tail);\n \n \t\tif (end_tail == BB_END (end))\n-\t\t  SET_BB_END (end) = note;\n+\t\t  BB_END (end) = note;\n \n \t\tif (BLOCK_FOR_INSN (note) != end)\n \t\t  df_insn_change_bb (note, end);\n@@ -4869,7 +4869,7 @@ restore_other_notes (rtx_insn *head, basic_block head_bb)\n       SET_NEXT_INSN (note_list) = head;\n \n       if (BLOCK_FOR_INSN (head) != head_bb)\n-\tSET_BB_END (head_bb) = note_list;\n+\tBB_END (head_bb) = note_list;\n \n       head = note_head;\n     }\n@@ -5268,7 +5268,7 @@ move_insn (rtx_insn *insn, rtx last, rtx nt)\n \n \t  gcc_assert (BLOCK_FOR_INSN (PREV_INSN (insn)) == bb);\n \n-\t  SET_BB_END (bb) = PREV_INSN (insn);\n+\t  BB_END (bb) = PREV_INSN (insn);\n \t}\n \n       gcc_assert (BB_END (bb) != last);\n@@ -5317,7 +5317,7 @@ move_insn (rtx_insn *insn, rtx last, rtx nt)\n \n       /* Update BB_END, if needed.  */\n       if (BB_END (bb) == last)\n-\tSET_BB_END (bb) = insn;\n+\tBB_END (bb) = insn;\n     }\n \n   SCHED_GROUP_P (insn) = 0;\n@@ -7614,7 +7614,7 @@ sched_extend_bb (void)\n       rtx_note *note = emit_note_after (NOTE_INSN_DELETED, end);\n       /* Make note appear outside BB.  */\n       set_block_for_insn (note, NULL);\n-      SET_BB_END (EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb) = end;\n+      BB_END (EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb) = end;\n     }\n }\n \n@@ -8301,18 +8301,18 @@ fix_jump_move (rtx jump)\n \n   if (!NOTE_INSN_BASIC_BLOCK_P (BB_END (jump_bb_next)))\n     /* if jump_bb_next is not empty.  */\n-    SET_BB_END (jump_bb) = BB_END (jump_bb_next);\n+    BB_END (jump_bb) = BB_END (jump_bb_next);\n \n   if (BB_END (bb) != PREV_INSN (jump))\n     /* Then there are instruction after jump that should be placed\n        to jump_bb_next.  */\n-    SET_BB_END (jump_bb_next) = BB_END (bb);\n+    BB_END (jump_bb_next) = BB_END (bb);\n   else\n     /* Otherwise jump_bb_next is empty.  */\n-    SET_BB_END (jump_bb_next) = NEXT_INSN (BB_HEAD (jump_bb_next));\n+    BB_END (jump_bb_next) = NEXT_INSN (BB_HEAD (jump_bb_next));\n \n   /* To make assertion in move_insn happy.  */\n-  SET_BB_END (bb) = PREV_INSN (jump);\n+  BB_END (bb) = PREV_INSN (jump);\n \n   update_bb_for_insn (jump_bb_next);\n }"}, {"sha": "d5ae98b99622ce8e853c7dc51d79e5f4389e3fef", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -2631,7 +2631,7 @@ noce_process_if_block (struct noce_if_info *if_info)\n \t  rtx note;\n \n \t  if (else_bb && insn_b == BB_END (else_bb))\n-\t    SET_BB_END (else_bb) = PREV_INSN (insn_b);\n+\t    BB_END (else_bb) = PREV_INSN (insn_b);\n \t  reorder_insns (insn_b, insn_b, PREV_INSN (jump));\n \n \t  /* If there was a REG_EQUAL note, delete it since it may have been\n@@ -4392,7 +4392,7 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n       rtx_insn *insn;\n \n       if (end == BB_END (merge_bb))\n-\tSET_BB_END (merge_bb) = PREV_INSN (head);\n+\tBB_END (merge_bb) = PREV_INSN (head);\n \n       /* PR 21767: when moving insns above a conditional branch, the REG_EQUAL\n \t notes being moved might become invalid.  */"}, {"sha": "71f64dbb8f286ed486620971c2dd4342ff7cee3e", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -3761,7 +3761,7 @@ update_equiv_regs (void)\n \t\t      REG_LIVE_LENGTH (regno) = 2;\n \n \t\t      if (insn == BB_HEAD (bb))\n-\t\t\tSET_BB_HEAD (bb) = PREV_INSN (insn);\n+\t\t\tBB_HEAD (bb) = PREV_INSN (insn);\n \n \t\t      ira_reg_equiv[regno].init_insns\n \t\t\t= gen_rtx_INSN_LIST (VOIDmode, new_insn, NULL_RTX);"}, {"sha": "3dabe30064d69505e9dcc836faa6d79aedf1e3b9", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -2597,7 +2597,7 @@ change_stack (rtx_insn *insn, stack_ptr old, stack_ptr new_stack,\n     }\n \n   if (update_end)\n-    SET_BB_END (current_block) = PREV_INSN (insn);\n+    BB_END (current_block) = PREV_INSN (insn);\n }\n \f\n /* Print stack configuration.  */"}, {"sha": "3cfa47b82fcd788ea4fd854c6f90d3c9e5ed82fb", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -1435,7 +1435,7 @@ sel_move_insn (expr_t expr, int seqno, insn_t after)\n   /* Update links from insn to bb and vice versa.  */\n   df_insn_change_bb (insn, bb);\n   if (BB_END (bb) == after)\n-    SET_BB_END (bb) = insn;\n+    BB_END (bb) = insn;\n \n   prepare_insn_expr (insn, seqno);\n   return insn;"}, {"sha": "c75f9b76f2d0fd86227abd63fb7f2729ebb25693", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -5203,7 +5203,7 @@ move_nop_to_previous_block (insn_t nop, basic_block prev_bb)\n   SET_NEXT_INSN (nop) = note;\n   SET_PREV_INSN (next_insn) = note;\n \n-  SET_BB_END (prev_bb) = nop;\n+  BB_END (prev_bb) = nop;\n   BLOCK_FOR_INSN (nop) = prev_bb;\n }\n "}, {"sha": "f7c4d1d4b6484aee4eb55951a525a1ebfb0e00e6", "filename": "rtx-classes-status.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1130d5e3e31879417a982e3df5a2d8ea59bfa311/rtx-classes-status.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1130d5e3e31879417a982e3df5a2d8ea59bfa311/rtx-classes-status.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/rtx-classes-status.txt?ref=1130d5e3e31879417a982e3df5a2d8ea59bfa311", "patch": "@@ -15,5 +15,4 @@ Phase 6: use extra rtx_def subclasses:             TODO\n TODO: \"Scaffolding\" to be removed\n =================================\n * DF_REF_INSN\n-* SET_BB_HEAD, SET_BB_END, SET_BB_HEADER\n * SET_NEXT_INSN, SET_PREV_INSN"}]}