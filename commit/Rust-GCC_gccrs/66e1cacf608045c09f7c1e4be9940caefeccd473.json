{"sha": "66e1cacf608045c09f7c1e4be9940caefeccd473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlMWNhY2Y2MDgwNDVjMDlmN2MxZTRiZTk5NDBjYWVmZWNjZDQ3Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-26T10:59:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-26T10:59:27Z"}, "message": "fold-const.c (fold_binary_loc): Remove -A CMP -B -> A CMP B and -A CMP CST -> A CMP -CST which is redundant...\n\n2015-06-26  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_binary_loc): Remove -A CMP -B -> A CMP B\n\tand -A CMP CST -> A CMP -CST which is redundant with a pattern\n\tin match.pd.\n\tMove (A | C) == D where C & ~D != 0 -> 0, (X ^ Y) ==/!= 0 -> X ==/!= Y,\n\t(X ^ Y) ==/!= {Y,X} -> {X,Y} ==/!= 0 and\n\t(X ^ C1) op C2 -> X op (C1 ^ C2) to ...\n\t* match.pd: ... patterns here.\n\n\t* gcc.dg/tree-ssa/forwprop-25.c: Adjust.\n\nFrom-SVN: r225007", "tree": {"sha": "15f8263212e8e9f94762483e2a083110185da545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15f8263212e8e9f94762483e2a083110185da545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e1cacf608045c09f7c1e4be9940caefeccd473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e1cacf608045c09f7c1e4be9940caefeccd473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e1cacf608045c09f7c1e4be9940caefeccd473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e1cacf608045c09f7c1e4be9940caefeccd473/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8afaddaace206b20d883497a8fa34712997f819f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afaddaace206b20d883497a8fa34712997f819f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afaddaace206b20d883497a8fa34712997f819f"}], "stats": {"total": 109, "additions": 45, "deletions": 64}, "files": [{"sha": "4398ee744f55a2fc22e3da34e9e8c33e5664fed5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66e1cacf608045c09f7c1e4be9940caefeccd473", "patch": "@@ -1,3 +1,13 @@\n+2015-06-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_binary_loc): Remove -A CMP -B -> A CMP B\n+\tand -A CMP CST -> A CMP -CST which is redundant with a pattern\n+\tin match.pd.\n+\tMove (A | C) == D where C & ~D != 0 -> 0, (X ^ Y) ==/!= 0 -> X ==/!= Y,\n+\t(X ^ Y) ==/!= {Y,X} -> {X,Y} ==/!= 0 and\n+\t(X ^ C1) op C2 -> X op (C1 ^ C2) to ...\n+\t* match.pd: ... patterns here.\n+\n 2015-06-26  Marek Polacek  <polacek@redhat.com>\n \n \t* match.pd ((x | y) & ~(x & y) -> x ^ y,"}, {"sha": "6f12dd04c6e676c3d5d3f415c2e47b4eda74ae61", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=66e1cacf608045c09f7c1e4be9940caefeccd473", "patch": "@@ -12163,15 +12163,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\t          type);\n \t}\n \n-      /* Similarly for a NEGATE_EXPR.  */\n-      if (TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && TREE_CODE (arg1) == INTEGER_CST\n-\t  && 0 != (tem = negate_expr (fold_convert_loc (loc, TREE_TYPE (arg0),\n-\t\t\t\t\t\t\targ1)))\n-\t  && TREE_CODE (tem) == INTEGER_CST\n-\t  && !TREE_OVERFLOW (tem))\n-\treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 0), tem);\n-\n       /* Similarly for a BIT_XOR_EXPR;  X ^ C1 == C2 is X == (C1 ^ C2).  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t  && TREE_CODE (arg1) == INTEGER_CST\n@@ -12356,22 +12347,6 @@ fold_binary_loc (location_t loc,\n \t    return omit_one_operand_loc (loc, type, rslt, arg0);\n \t}\n \n-      /* If we have (A | C) == D where C & ~D != 0, convert this into 0.\n-\t Similarly for NE_EXPR.  */\n-      if (TREE_CODE (arg0) == BIT_IOR_EXPR\n-\t  && TREE_CODE (arg1) == INTEGER_CST\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n-\t{\n-\t  tree notd = fold_build1_loc (loc, BIT_NOT_EXPR, TREE_TYPE (arg1), arg1);\n-\t  tree candnotd\n-\t    = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (arg0),\n-\t\t\t       TREE_OPERAND (arg0, 1),\n-\t\t\t       fold_convert_loc (loc, TREE_TYPE (arg0), notd));\n-\t  tree rslt = code == EQ_EXPR ? integer_zero_node : integer_one_node;\n-\t  if (integer_nonzerop (candnotd))\n-\t    return omit_one_operand_loc (loc, type, rslt, arg0);\n-\t}\n-\n       /* If this is a comparison of a field, we may be able to simplify it.  */\n       if ((TREE_CODE (arg0) == COMPONENT_REF\n \t   || TREE_CODE (arg0) == BIT_FIELD_REF)\n@@ -12429,32 +12404,6 @@ fold_binary_loc (location_t loc,\n \t    }\n \t}\n \n-      /* (X ^ Y) == 0 becomes X == Y, and (X ^ Y) != 0 becomes X != Y.  */\n-      if (integer_zerop (arg1)\n-\t  && TREE_CODE (arg0) == BIT_XOR_EXPR)\n-\treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 0),\n-\t\t\t    TREE_OPERAND (arg0, 1));\n-\n-      /* (X ^ Y) == Y becomes X == 0.  We know that Y has no side-effects.  */\n-      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n-\t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n-\treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 0),\n-\t\t\t\tbuild_zero_cst (TREE_TYPE (arg0)));\n-      /* Likewise (X ^ Y) == X becomes Y == 0.  X has no side-effects.  */\n-      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n-\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n-\t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n-\treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 1),\n-\t\t\t\tbuild_zero_cst (TREE_TYPE (arg0)));\n-\n-      /* (X ^ C1) op C2 can be rewritten as X op (C1 ^ C2).  */\n-      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n-\t  && TREE_CODE (arg1) == INTEGER_CST\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n-\treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 0),\n-\t\t\t    fold_build2_loc (loc, BIT_XOR_EXPR, TREE_TYPE (arg1),\n-\t\t\t\t\t TREE_OPERAND (arg0, 1), arg1));\n-\n       /* Fold (~X & C) == 0 into (X & C) != 0 and (~X & C) != 0 into\n \t (X & C) == 0 when C is a single bit.  */\n       if (TREE_CODE (arg0) == BIT_AND_EXPR\n@@ -12508,14 +12457,6 @@ fold_binary_loc (location_t loc,\n \t  return omit_one_operand_loc (loc, type, res, arg0);\n \t}\n \n-      /* Fold -X op -Y as X op Y, where op is eq/ne.  */\n-      if (TREE_CODE (arg0) == NEGATE_EXPR\n-          && TREE_CODE (arg1) == NEGATE_EXPR)\n-\treturn fold_build2_loc (loc, code, type,\n-\t\t\t\tTREE_OPERAND (arg0, 0),\n-\t\t\t\tfold_convert_loc (loc, TREE_TYPE (arg0),\n-\t\t\t\t\t\t  TREE_OPERAND (arg1, 0)));\n-\n       /* Fold (X & C) op (Y & C) as (X ^ Y) & C op 0\", and symmetries.  */\n       if (TREE_CODE (arg0) == BIT_AND_EXPR\n \t  && TREE_CODE (arg1) == BIT_AND_EXPR)"}, {"sha": "b2f8429c1204bf3b01ae8c4bb2ea2395c7e58c6d", "filename": "gcc/match.pd", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=66e1cacf608045c09f7c1e4be9940caefeccd473", "patch": "@@ -1209,6 +1209,35 @@ along with GCC; see the file COPYING3.  If not see\n     (if (tem && !TREE_OVERFLOW (tem))\n      (scmp @0 { tem; }))))))\n \n+\n+/* Equality compare simplifications from fold_binary  */\n+(for cmp (eq ne)\n+\n+ /* If we have (A | C) == D where C & ~D != 0, convert this into 0.\n+    Similarly for NE_EXPR.  */\n+ (simplify\n+  (cmp (convert?@3 (bit_ior @0 INTEGER_CST@1)) INTEGER_CST@2)\n+  (if (tree_nop_conversion_p (TREE_TYPE (@3), TREE_TYPE (@0))\n+       && wi::bit_and_not (@1, @2) != 0)\n+   { constant_boolean_node (cmp == NE_EXPR, type); }))\n+\n+ /* (X ^ Y) == 0 becomes X == Y, and (X ^ Y) != 0 becomes X != Y.  */\n+ (simplify\n+  (cmp (bit_xor @0 @1) integer_zerop)\n+  (cmp @0 @1))\n+\n+ /* (X ^ Y) == Y becomes X == 0.\n+    Likewise (X ^ Y) == X becomes Y == 0.  */\n+ (simplify\n+  (cmp (bit_xor:c @0 @1) @0)\n+  (cmp @1 { build_zero_cst (TREE_TYPE (@1)); }))\n+\n+ /* (X ^ C1) op C2 can be rewritten as X op (C1 ^ C2).  */\n+ (simplify\n+  (cmp (convert?@3 (bit_xor @0 INTEGER_CST@1)) INTEGER_CST@2)\n+  (if (tree_nop_conversion_p (TREE_TYPE (@3), TREE_TYPE (@0)))\n+   (cmp @0 (bit_xor @1 (convert @2))))))\n+\n /* Simplification of math builtins.  */\n \n (define_operator_list LOG BUILT_IN_LOGF BUILT_IN_LOG BUILT_IN_LOGL)"}, {"sha": "55fa18f1dc499e806ff4c07627e4b9e9147c7feb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66e1cacf608045c09f7c1e4be9940caefeccd473", "patch": "@@ -1,3 +1,7 @@\n+2015-06-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/forwprop-25.c: Adjust.\n+\n 2015-06-26  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.dg/fold-and-1.c: New test."}, {"sha": "2670a50b6a511c1a3ae9aa91e6dc0bc9de36de4f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-25.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1cacf608045c09f7c1e4be9940caefeccd473/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-25.c?ref=66e1cacf608045c09f7c1e4be9940caefeccd473", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-forwprop1\" } */\n+/* { dg-options \"-O1 -fdump-tree-cddce1\" } */\n \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -37,7 +37,4 @@ convert_move (rtx to, rtx from, int unsignedp)\n     0 : 0));\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced.*!=.*with.*!=.* \" \"forwprop1\"} } */\n-\n-\n-\n+/* { dg-final { scan-tree-dump-not \" ^ \" \"cddce1\"} } */"}]}