{"sha": "ff482cef956efbb0ef3131e61f15a11fa53cdcc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY0ODJjZWY5NTZlZmJiMGVmMzEzMWU2MWYxNWExMWZhNTNjZGNjMw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-08-28T20:19:19Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-08-28T20:19:19Z"}, "message": "(main): Rewrite -g parsing.\n\nFrom-SVN: r12675", "tree": {"sha": "6972610eb7e96c87d510d4f1a8ebdf0be191f112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6972610eb7e96c87d510d4f1a8ebdf0be191f112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff482cef956efbb0ef3131e61f15a11fa53cdcc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff482cef956efbb0ef3131e61f15a11fa53cdcc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff482cef956efbb0ef3131e61f15a11fa53cdcc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff482cef956efbb0ef3131e61f15a11fa53cdcc3/comments", "author": null, "committer": null, "parents": [{"sha": "d11ad92ebed6c4feed7ef1001b18ed707395d074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11ad92ebed6c4feed7ef1001b18ed707395d074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d11ad92ebed6c4feed7ef1001b18ed707395d074"}], "stats": {"total": 209, "additions": 107, "deletions": 102}, "files": [{"sha": "ee35c300e395cca40eef8c49b4fb09d1da7eb1c6", "filename": "gcc/toplev.c", "status": "modified", "additions": 107, "deletions": 102, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff482cef956efbb0ef3131e61f15a11fa53cdcc3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff482cef956efbb0ef3131e61f15a11fa53cdcc3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ff482cef956efbb0ef3131e61f15a11fa53cdcc3", "patch": "@@ -3781,10 +3781,75 @@ main (argc, argv, envp)\n \t    }\n \t  else if (str[0] == 'g')\n \t    {\n+\t      /* If more than one debugging type is supported,\n+\t\t you must define PREFERRED_DEBUGGING_TYPE\n+\t\t to choose a format in a system-dependent way.  */\n+\t      /* This is one long line cause VAXC can't handle a \\-newline.  */\n+#if 1 < (defined (DBX_DEBUGGING_INFO) + defined (SDB_DEBUGGING_INFO) + defined (DWARF_DEBUGGING_INFO) + defined (XCOFF_DEBUGGING_INFO))\n+#ifndef PREFERRED_DEBUGGING_TYPE\n+You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n+#endif /* no PREFERRED_DEBUGGING_TYPE */\n+#else /* Only one debugging format supported.  Define PREFERRED_DEBUGGING_TYPE\n+\t so the following code needn't care.  */\n+#ifdef DBX_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE SDB_DEBUG\n+#endif\n+#ifdef DWARF_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n+#endif\n+#ifdef XCOFF_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE XCOFF_DEBUG\n+#endif\n+#endif /* More than one debugger format enabled.  */\n+\n \t      char *p = str + 1;\n \t      char *q;\n \t      unsigned len;\n \t      unsigned level;\n+\t      /* A lot of code assumes write_symbols == NO_DEBUG if the\n+\t\t debugging level is 0 (thus -gstabs1 -gstabs0 would lose track\n+\t\t of what debugging type has been selected).  This records the\n+\t\t selected type.  It is an error to specify more than one\n+\t\t debugging type.  */\n+\t      static enum debug_info_type selected_debug_type = NO_DEBUG;\n+\t      /* Non-zero if debugging format has been explicitly set.\n+\t\t -g and -ggdb don't explicitly set the debugging format so\n+\t\t -gdwarf -g3 is equivalent to -gdwarf3.  */\n+\t      static int type_explicitly_set_p = 0;\n+\t      /* Table of supported debugging formats.  */\n+\t      static struct {\n+\t\tchar *arg;\n+\t\t/* Since PREFERRED_DEBUGGING_TYPE isn't necessarily a\n+\t\t   constant expression, we use NO_DEBUG in its place.  */\n+\t\tenum debug_info_type debug_type;\n+\t\tint use_extensions_p;\n+\t      } *da, debug_args[] = {\n+\t\t{ \"g\", NO_DEBUG, DEFAULT_GDB_EXTENSIONS },\n+\t\t{ \"ggdb\", NO_DEBUG, 1 },\n+#ifdef DBX_DEBUGGING_INFO\n+\t\t{ \"gstabs\", DBX_DEBUG, 0 },\n+\t\t{ \"gstabs+\", DBX_DEBUG, 1 },\n+#endif\n+#ifdef DWARF_DEBUGGING_INFO\n+\t\t{ \"gdwarf\", DWARF_DEBUG, 0 },\n+\t\t{ \"gdwarf+\", DWARF_DEBUG, 1 },\n+#endif\n+#ifdef XCOFF_DEBUGGING_INFO\n+\t\t{ \"gxcoff\", XCOFF_DEBUG, 0 },\n+\t\t{ \"gxcoff+\", XCOFF_DEBUG, 1 },\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+\t\t{ \"gcoff\", SDB_DEBUG, 0 },\n+#endif\n+\t\t{ 0, 0, 0 }\n+\t      };\n+\t      /* Indexed by enum debug_info_type.  */\n+\t      static char *debug_type_names[] = {\n+\t\t\"none\", \"stabs\", \"coff\", \"dwarf\", \"xcoff\"\n+\t      };\n \n \t      while (*p && (*p < '0' || *p > '9'))\n \t\tp++;\n@@ -3800,114 +3865,54 @@ main (argc, argv, envp)\n \t\t{\n \t\t  warning (\"invalid debug level specification in option: `-%s'\",\n \t\t\t   str);\n+\t\t  /* ??? This error message is incorrect in the case of\n+\t\t     -g4 -g.  */\n \t\t  warning (\"no debugging information will be generated\");\n \t\t  level = 0;\n \t\t}\n \n-\t      /* If more than one debugging type is supported,\n-\t\t you must define PREFERRED_DEBUGGING_TYPE\n-\t\t to choose a format in a system-dependent way.  */\n-\t      /* This is one long line cause VAXC can't handle a \\-newline.  */\n-#if 1 < (defined (DBX_DEBUGGING_INFO) + defined (SDB_DEBUGGING_INFO) + defined (DWARF_DEBUGGING_INFO) + defined (XCOFF_DEBUGGING_INFO))\n-#ifdef PREFERRED_DEBUGGING_TYPE\n-\t      if (!strncmp (str, \"ggdb\", len))\n-\t\twrite_symbols = PREFERRED_DEBUGGING_TYPE;\n-#else /* no PREFERRED_DEBUGGING_TYPE */\n-You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n-#endif /* no PREFERRED_DEBUGGING_TYPE */\n-#endif /* More than one debugger format enabled.  */\n-#ifdef DBX_DEBUGGING_INFO\n-\t      if (write_symbols != NO_DEBUG)\n-\t\t;\n-\t      else if (!strncmp (str, \"ggdb\", len))\n-\t\twrite_symbols = DBX_DEBUG;\n-\t      else if (!strncmp (str, \"gstabs\", len))\n-\t\twrite_symbols = DBX_DEBUG;\n-\t      else if (!strncmp (str, \"gstabs+\", len))\n-\t\twrite_symbols = DBX_DEBUG;\n-\n-\t      /* Always enable extensions for -ggdb or -gstabs+, \n-\t\t always disable for -gstabs.\n-\t\t For plain -g, use system-specific default.  */\n-\t      if (write_symbols == DBX_DEBUG && !strncmp (str, \"ggdb\", len)\n-\t\t  && len >= 2)\n-\t\tuse_gnu_debug_info_extensions = 1;\n-\t      else if (write_symbols == DBX_DEBUG && !strncmp (str, \"gstabs+\", len)\n-\t\t       && len >= 7)\n-\t\tuse_gnu_debug_info_extensions = 1;\n-\t      else if (write_symbols == DBX_DEBUG\n-\t\t       && !strncmp (str, \"gstabs\", len) && len >= 2)\n-\t\tuse_gnu_debug_info_extensions = 0;\n-\t      else\n-\t\tuse_gnu_debug_info_extensions = DEFAULT_GDB_EXTENSIONS;\n-#endif /* DBX_DEBUGGING_INFO */\n-#ifdef DWARF_DEBUGGING_INFO\n-\t      if (write_symbols != NO_DEBUG)\n-\t\t;\n-\t      else if (!strncmp (str, \"g\", len))\n-\t\twrite_symbols = DWARF_DEBUG;\n-\t      else if (!strncmp (str, \"ggdb\", len))\n-\t\twrite_symbols = DWARF_DEBUG;\n-\t      else if (!strncmp (str, \"gdwarf\", len))\n-\t\twrite_symbols = DWARF_DEBUG;\n-\n-\t      /* Always enable extensions for -ggdb or -gdwarf+, \n-\t\t always disable for -gdwarf.\n-\t\t For plain -g, use system-specific default.  */\n-\t      if (write_symbols == DWARF_DEBUG && !strncmp (str, \"ggdb\", len)\n-\t\t  && len >= 2)\n-\t\tuse_gnu_debug_info_extensions = 1;\n-\t      else if (write_symbols == DWARF_DEBUG && !strcmp (str, \"gdwarf+\"))\n-\t\tuse_gnu_debug_info_extensions = 1;\n-\t      else if (write_symbols == DWARF_DEBUG\n-\t\t       && !strncmp (str, \"gdwarf\", len) && len >= 2)\n-\t\tuse_gnu_debug_info_extensions = 0;\n-\t      else\n-\t\tuse_gnu_debug_info_extensions = DEFAULT_GDB_EXTENSIONS;\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-\t      if (write_symbols != NO_DEBUG)\n-\t\t;\n-\t      else if (!strncmp (str, \"g\", len))\n-\t\twrite_symbols = SDB_DEBUG;\n-\t      else if (!strncmp (str, \"gdb\", len))\n-\t\twrite_symbols = SDB_DEBUG;\n-\t      else if (!strncmp (str, \"gcoff\", len))\n-\t\twrite_symbols = SDB_DEBUG;\n-#endif /* SDB_DEBUGGING_INFO */\n-#ifdef XCOFF_DEBUGGING_INFO\n-\t      if (write_symbols != NO_DEBUG)\n-\t\t;\n-\t      else if (!strncmp (str, \"g\", len))\n-\t\twrite_symbols = XCOFF_DEBUG;\n-\t      else if (!strncmp (str, \"ggdb\", len))\n-\t\twrite_symbols = XCOFF_DEBUG;\n-\t      else if (!strncmp (str, \"gxcoff\", len))\n-\t\twrite_symbols = XCOFF_DEBUG;\n-\t      else if (!strncmp (str, \"gxcoff+\", len))\n-\t\twrite_symbols = XCOFF_DEBUG;\n-\n-\t      /* Always enable extensions for -ggdb or -gxcoff+,\n-\t\t always disable for -gxcoff.\n-\t\t For plain -g, use system-specific default.  */\n-\t      if (write_symbols == XCOFF_DEBUG && !strncmp (str, \"ggdb\", len)\n-\t\t  && len >= 2)\n-\t\tuse_gnu_debug_info_extensions = 1;\n-\t      else if (write_symbols == XCOFF_DEBUG && !strcmp (str, \"gxcoff+\"))\n-\t\tuse_gnu_debug_info_extensions = 1;\n-\t      else if (write_symbols == XCOFF_DEBUG\n-\t\t       && !strncmp (str, \"gxcoff\", len) && len >= 2)\n-\t\tuse_gnu_debug_info_extensions = 0;\n-\t      else\n-\t\tuse_gnu_debug_info_extensions = DEFAULT_GDB_EXTENSIONS;\n-#endif\t      \n-\t      if (write_symbols == NO_DEBUG)\n+\t      /* Look up STR in the table.  */\n+\t      for (da = debug_args; da->arg; da++)\n+\t\t{\n+\t\t  if (! strncmp (str, da->arg, len))\n+\t\t    {\n+\t\t      enum debug_info_type type = da->debug_type;\n+\t\t      /* ??? A few targets use STR and LEN in the\n+\t\t\t definition of PREFERRED_DEBUGGING_TYPE!  */\n+\t\t      if (type == NO_DEBUG)\n+\t\t\ttype = PREFERRED_DEBUGGING_TYPE;\n+\n+\t\t      /* Does it conflict with an already selected type?  */\n+\t\t      if (type_explicitly_set_p\n+\t\t\t  /* -g/-ggdb don't conflict with anything */\n+\t\t\t  && da->debug_type != NO_DEBUG\n+\t\t\t  && type != selected_debug_type)\n+\t\t\twarning (\"`-%s' ignored, conflicts with `-g%s'\",\n+\t\t\t\t str, debug_type_names[(int) selected_debug_type]);\n+\t\t      else\n+\t\t\t{\n+\t\t\t  /* If the format has already been set, -g/-ggdb\n+\t\t\t     only change the debug level.  */\n+\t\t\t  if (type_explicitly_set_p\n+\t\t\t      && da->debug_type == NO_DEBUG)\n+\t\t\t    ; /* don't change debugging type */\n+\t\t\t  else\n+\t\t\t    {\n+\t\t\t      selected_debug_type = type;\n+\t\t\t      type_explicitly_set_p = da->debug_type != NO_DEBUG;\n+\t\t\t    }\n+\t\t\t  write_symbols = (level == 0\n+\t\t\t\t\t   ? NO_DEBUG\n+\t\t\t\t\t   : selected_debug_type);\n+\t\t\t  use_gnu_debug_info_extensions = da->use_extensions_p;\n+\t\t\t  debug_info_level = (enum debug_info_level) level;\n+\t\t\t}\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      if (! da->arg)\n \t\twarning (\"`-%s' not supported by this configuration of GCC\",\n \t\t\t str);\n-\t      else if (level == 0)\n-\t\twrite_symbols = NO_DEBUG;\n-\t      else\n-\t\tdebug_info_level = (enum debug_info_level) level;\n \t    }\n \t  else if (!strcmp (str, \"o\"))\n \t    {"}]}