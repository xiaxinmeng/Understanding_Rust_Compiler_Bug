{"sha": "eda328bf1dd994826252fa0435d2e58103c2c2d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhMzI4YmYxZGQ5OTQ4MjYyNTJmYTA0MzVkMmU1ODEwM2MyYzJkOA==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2016-06-28T13:33:03Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2016-06-28T13:33:03Z"}, "message": "rs6000.md ('type' attribute): Add htmsimple/dfp types.\n\n\t* config/rs6000/rs6000.md ('type' attribute): Add htmsimple/dfp types.\n\t('size' attribute): Add '128'.\n\tInclude power9.md.\n\t(*mov<mode>_hardfloat32, *mov<mode>_hardfloat64, *movdi_internal32,\n\t*movdi_internal64, *movdf_update1): Set size attribute to '64'.\n\t(add<mode>3, sub<mode>3, mul<mode>3, div<mode>3, sqrt<mode>2,\n\tcopysign<mode>3, neg<mode>2_hw, abs<mode>2_hw, *nabs<mode>2_hw,\n\t*fma<mode>4_hw, *fms<mode>4_hw, *nfma<mode>4_hw, *nfms<mode>4_hw,\n\textend<SFDF:mode><IEEE128:mode>2_hw, trunc<mode>df2_hw,\n\t*xscvqp<su>wz_<mode>, *xscvqp<su>dz_<mode>, *xscv<su>dqp_<mode>,\n\t*trunc<mode>df2_odd): Set size attribute to '128'.\n\t(*cmp<mode>_hw): Change type to veccmp and set size attribute to '128'.\n\t* config/rs6000/power6.md (power6-fp): Include dfp type.\n\t* config/rs6000/power7.md (power7-fp): Likewise.\n\t* config/rs6000/power8.md (power8-fp): Likewise.\n\t* config/rs6000/power9.md: New file.\n\t* config/rs6000/t-rs6000 (MD_INCLUDES): Add power9.md.\n\t* config/rs6000/htm.md (*tabort, *tabort<wd>c, *tabort<wd>ci,\n\t*trechkpt, *treclaim, *tsr, *ttest): Change type attribute to\n\thtmsimple.\n\t* config/rs6000/dfp.md (extendsddd2, truncddsd2, extendddtd2,\n\ttrunctddd2, adddd3, addtd3, subdd3, subtd3, muldd3, multd3, divdd3,\n\tdivtd3, *cmpdd_internal1, *cmptd_internal1, floatdidd2, floatditd2,\n\tftruncdd2, fixdddi2, ftrunctd2, fixtddi2, dfp_ddedpd_<mode>,\n\tdfp_denbcd_<mode>, dfp_dxex_<mode>, dfp_diex_<mode>, dfp_dscli_<mode>,\n\tdfp_dscri_<mode>): Change type attribute to dfp.\n\t* config/rs6000/crypto.md (crypto_vshasigma<CR_char>): Change type\n\tattribute to vecsimple.\n\t* config/rs6000/rs6000.c (power9_cost): Update costs, cache size\n\tand prefetch streams.\n\t(rs6000_option_override_internal): Remove temporary code setting\n\ttuning to power8.  Don't set rs6000_sched_groups for power9.\n\t(last_scheduled_insn): Change to rtx_insn *.\n\t(divide_cnt, vec_load_pendulum): New variables.\n\t(rs6000_adjust_cost): Add Power9 to test for store->load separation.\n\t(rs6000_issue_rate): Set issue rate for Power9.\n\t(is_power9_pairable_vec_type): New.\n\t(power9_sched_reorder2): New.\n\t(rs6000_sched_reorder2): Call new function for Power9 specific\n\treordering.\n\t(insn_must_be_first_in_group): Remove Power9.\n\t(insn_must_be_last_in_group): Likewise.\n\t(force_new_group): Likewise.\n\t(rs6000_sched_init): Fix initialization of last_scheduled_insn.\n\tInitialize divide_cnt/vec_load_pendulum.\n\t(_rs6000_sched_context, rs6000_init_sched_context,\n\trs6000_set_sched_context): Handle context save/restore of new\n\tvariables.\n\nFrom-SVN: r237820", "tree": {"sha": "f5a8164759ac645efca00b2601b1cdcbc37f566f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5a8164759ac645efca00b2601b1cdcbc37f566f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eda328bf1dd994826252fa0435d2e58103c2c2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda328bf1dd994826252fa0435d2e58103c2c2d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda328bf1dd994826252fa0435d2e58103c2c2d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda328bf1dd994826252fa0435d2e58103c2c2d8/comments", "author": null, "committer": null, "parents": [{"sha": "7d4cdbd485607cc1d575a42d815a5dec7708aded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4cdbd485607cc1d575a42d815a5dec7708aded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4cdbd485607cc1d575a42d815a5dec7708aded"}], "stats": {"total": 1017, "additions": 912, "deletions": 105}, "files": [{"sha": "f88c40470e3107b2aa01b0d74b9309b1ed39719b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -1,3 +1,54 @@\n+2016-06-28  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* config/rs6000/rs6000.md ('type' attribute): Add htmsimple/dfp types.\n+\t('size' attribute): Add '128'.\n+\tInclude power9.md.\n+\t(*mov<mode>_hardfloat32, *mov<mode>_hardfloat64, *movdi_internal32,\n+\t*movdi_internal64, *movdf_update1): Set size attribute to '64'.\n+\t(add<mode>3, sub<mode>3, mul<mode>3, div<mode>3, sqrt<mode>2,\n+\tcopysign<mode>3, neg<mode>2_hw, abs<mode>2_hw, *nabs<mode>2_hw,\n+\t*fma<mode>4_hw, *fms<mode>4_hw, *nfma<mode>4_hw, *nfms<mode>4_hw,\n+\textend<SFDF:mode><IEEE128:mode>2_hw, trunc<mode>df2_hw,\n+\t*xscvqp<su>wz_<mode>, *xscvqp<su>dz_<mode>, *xscv<su>dqp_<mode>,\n+\t*trunc<mode>df2_odd): Set size attribute to '128'.\n+\t(*cmp<mode>_hw): Change type to veccmp and set size attribute to '128'.\n+\t* config/rs6000/power6.md (power6-fp): Include dfp type.\n+\t* config/rs6000/power7.md (power7-fp): Likewise.\n+\t* config/rs6000/power8.md (power8-fp): Likewise.\n+\t* config/rs6000/power9.md: New file.\n+\t* config/rs6000/t-rs6000 (MD_INCLUDES): Add power9.md.\n+\t* config/rs6000/htm.md (*tabort, *tabort<wd>c, *tabort<wd>ci,\n+\t*trechkpt, *treclaim, *tsr, *ttest): Change type attribute to\n+\thtmsimple.\n+\t* config/rs6000/dfp.md (extendsddd2, truncddsd2, extendddtd2,\n+\ttrunctddd2, adddd3, addtd3, subdd3, subtd3, muldd3, multd3, divdd3,\n+\tdivtd3, *cmpdd_internal1, *cmptd_internal1, floatdidd2, floatditd2,\n+\tftruncdd2, fixdddi2, ftrunctd2, fixtddi2, dfp_ddedpd_<mode>,\n+\tdfp_denbcd_<mode>, dfp_dxex_<mode>, dfp_diex_<mode>, dfp_dscli_<mode>,\n+\tdfp_dscri_<mode>): Change type attribute to dfp.\n+\t* config/rs6000/crypto.md (crypto_vshasigma<CR_char>): Change type\n+\tattribute to vecsimple.\n+\t* config/rs6000/rs6000.c (power9_cost): Update costs, cache size\n+\tand prefetch streams.\n+\t(rs6000_option_override_internal): Remove temporary code setting\n+\ttuning to power8.  Don't set rs6000_sched_groups for power9.\n+\t(last_scheduled_insn): Change to rtx_insn *.\n+\t(divide_cnt, vec_load_pendulum): New variables.\n+\t(rs6000_adjust_cost): Add Power9 to test for store->load separation.\n+\t(rs6000_issue_rate): Set issue rate for Power9.\n+\t(is_power9_pairable_vec_type): New.\n+\t(power9_sched_reorder2): New.\n+\t(rs6000_sched_reorder2): Call new function for Power9 specific\n+\treordering.\n+\t(insn_must_be_first_in_group): Remove Power9.\n+\t(insn_must_be_last_in_group): Likewise.\n+\t(force_new_group): Likewise.\n+\t(rs6000_sched_init): Fix initialization of last_scheduled_insn.\n+\tInitialize divide_cnt/vec_load_pendulum.\n+\t(_rs6000_sched_context, rs6000_init_sched_context,\n+\trs6000_set_sched_context): Handle context save/restore of new\n+\tvariables.\n+\n 2016-06-28  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p):"}, {"sha": "83a26aef365fabe3e5f548eae9387af09a2ecbec", "filename": "gcc/config/rs6000/crypto.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fcrypto.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fcrypto.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrypto.md?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -107,4 +107,4 @@\n \t\t\tUNSPEC_VSHASIGMA))]\n   \"TARGET_CRYPTO\"\n   \"vshasigma<CR_char> %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"crypto\")])\n+  [(set_attr \"type\" \"vecsimple\")])"}, {"sha": "e3a29878cea24cf44ef75931bdb36dae53169a7e", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -58,7 +58,7 @@\n \t(float_extend:DD (match_operand:SD 1 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_DFP\"\n   \"dctdp %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_expand \"extendsdtd2\"\n   [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n@@ -76,7 +76,7 @@\n \t(float_truncate:SD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"drsp %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_expand \"negdd2\"\n   [(set (match_operand:DD 0 \"gpc_reg_operand\" \"\")\n@@ -160,7 +160,7 @@\n \t(float_extend:TD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dctqpq %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n ;; The result of drdpq is an even/odd register pair with the converted\n ;; value in the even register and zero in the odd register.\n@@ -173,7 +173,7 @@\n    (clobber (match_scratch:TD 2 \"=d\"))]\n   \"TARGET_DFP\"\n   \"drdpq %2,%1\\;fmr %0,%2\"\n-  [(set_attr \"type\" \"fp\")\n+  [(set_attr \"type\" \"dfp\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"adddd3\"\n@@ -182,93 +182,93 @@\n \t\t (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dadd %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"addtd3\"\n   [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n \t(plus:TD (match_operand:TD 1 \"gpc_reg_operand\" \"%d\")\n \t\t (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"daddq %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"subdd3\"\n   [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n \t(minus:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n \t\t  (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dsub %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"subtd3\"\n   [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n \t(minus:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n \t\t  (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dsubq %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"muldd3\"\n   [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n \t(mult:DD (match_operand:DD 1 \"gpc_reg_operand\" \"%d\")\n \t\t (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dmul %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"multd3\"\n   [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n \t(mult:TD (match_operand:TD 1 \"gpc_reg_operand\" \"%d\")\n \t\t (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dmulq %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"divdd3\"\n   [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n \t(div:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n \t\t(match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"ddiv %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"divtd3\"\n   [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n \t(div:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n \t\t(match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"ddivq %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"*cmpdd_internal1\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n \t\t      (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dcmpu %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcompare\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"*cmptd_internal1\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n \t\t      (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dcmpuq %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcompare\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"floatdidd2\"\n   [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n \t(float:DD (match_operand:DI 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP && TARGET_POPCNTD\"\n   \"dcffix %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"floatditd2\"\n   [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n \t(float:TD (match_operand:DI 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dcffixq %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n ;; Convert a decimal64 to a decimal64 whose value is an integer.\n ;; This is the first stage of converting it to an integer type.\n@@ -278,7 +278,7 @@\n \t(fix:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"drintn. 0,%0,%1,1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n ;; Convert a decimal64 whose value is an integer to an actual integer.\n ;; This is the second stage of converting decimal float to integer type.\n@@ -288,7 +288,7 @@\n \t(fix:DI (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dctfix %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n ;; Convert a decimal128 to a decimal128 whose value is an integer.\n ;; This is the first stage of converting it to an integer type.\n@@ -298,7 +298,7 @@\n \t(fix:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"drintnq. 0,%0,%1,1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n ;; Convert a decimal128 whose value is an integer to an actual integer.\n ;; This is the second stage of converting decimal float to integer type.\n@@ -308,7 +308,7 @@\n \t(fix:DI (match_operand:TD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n   \"dctfixq %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n \f\n ;; Decimal builtin support\n@@ -333,7 +333,7 @@\n \t\t\t UNSPEC_DDEDPD))]\n   \"TARGET_DFP\"\n   \"ddedpd<dfp_suffix> %1,%0,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"dfp_denbcd_<mode>\"\n   [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n@@ -342,15 +342,15 @@\n \t\t\t UNSPEC_DENBCD))]\n   \"TARGET_DFP\"\n   \"denbcd<dfp_suffix> %1,%0,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"dfp_dxex_<mode>\"\n   [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n \t(unspec:D64_D128 [(match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")]\n \t\t\t UNSPEC_DXEX))]\n   \"TARGET_DFP\"\n   \"dxex<dfp_suffix> %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"dfp_diex_<mode>\"\n   [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n@@ -359,7 +359,7 @@\n \t\t\t UNSPEC_DXEX))]\n   \"TARGET_DFP\"\n   \"diex<dfp_suffix> %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"dfp_dscli_<mode>\"\n   [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n@@ -368,7 +368,7 @@\n \t\t\t UNSPEC_DSCLI))]\n   \"TARGET_DFP\"\n   \"dscli<dfp_suffix> %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"dfp_dscri_<mode>\"\n   [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n@@ -377,4 +377,4 @@\n \t\t\t UNSPEC_DSCRI))]\n   \"TARGET_DFP\"\n   \"dscri<dfp_suffix> %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"dfp\")])"}, {"sha": "c0203a9c0cad16d9f2eee5512052e32cda444360", "filename": "gcc/config/rs6000/htm.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fhtm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fhtm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhtm.md?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -72,7 +72,7 @@\n    (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tabort. %0\"\n-  [(set_attr \"type\" \"htm\")\n+  [(set_attr \"type\" \"htmsimple\")\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"tabort<wd>c\"\n@@ -98,7 +98,7 @@\n    (set (match_operand:BLK 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tabort<wd>c. %0,%1,%2\"\n-  [(set_attr \"type\" \"htm\")\n+  [(set_attr \"type\" \"htmsimple\")\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"tabort<wd>ci\"\n@@ -124,7 +124,7 @@\n    (set (match_operand:BLK 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tabort<wd>ci. %0,%1,%2\"\n-  [(set_attr \"type\" \"htm\")\n+  [(set_attr \"type\" \"htmsimple\")\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"tbegin\"\n@@ -208,7 +208,7 @@\n    (set (match_operand:BLK 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"trechkpt.\"\n-  [(set_attr \"type\" \"htm\")\n+  [(set_attr \"type\" \"htmsimple\")\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"treclaim\"\n@@ -230,7 +230,7 @@\n    (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"treclaim. %0\"\n-  [(set_attr \"type\" \"htm\")\n+  [(set_attr \"type\" \"htmsimple\")\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"tsr\"\n@@ -252,7 +252,7 @@\n    (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tsr. %0\"\n-  [(set_attr \"type\" \"htm\")\n+  [(set_attr \"type\" \"htmsimple\")\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"ttest\"\n@@ -272,7 +272,7 @@\n    (set (match_operand:BLK 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tabortwci. 0,1,0\"\n-  [(set_attr \"type\" \"htm\")\n+  [(set_attr \"type\" \"htmsimple\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"htm_mfspr_<mode>\""}, {"sha": "a94052417e909591bc84b8338c5cc5b121e4d4e5", "filename": "gcc/config/rs6000/power6.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fpower6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fpower6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower6.md?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -500,7 +500,7 @@\n (define_bypass 9 \"power6-mtcr\" \"power6-branch\")\n \n (define_insn_reservation \"power6-fp\" 6\n-  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul,dfp\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"FPU_power6\")\n "}, {"sha": "91ebbf97f9d35e5508bde897d656f976f39a5df4", "filename": "gcc/config/rs6000/power7.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fpower7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fpower7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower7.md?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -292,7 +292,7 @@\n \n ; VS Unit (includes FP/VSX/VMX/DFP)\n (define_insn_reservation \"power7-fp\" 6\n-  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul,dfp\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,VSU_power7\")\n "}, {"sha": "4bb323ff435f679e7cbb1b38548df6c991d05deb", "filename": "gcc/config/rs6000/power8.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fpower8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fpower8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower8.md?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -317,7 +317,7 @@\n \n ; VS Unit (includes FP/VSX/VMX/DFP/Crypto)\n (define_insn_reservation \"power8-fp\" 6\n-  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul,dfp\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,VSU_power8\")\n "}, {"sha": "015b5ba58b4c289377be02eefeb9c02e52ad9a10", "filename": "gcc/config/rs6000/power9.md", "status": "added", "additions": 477, "deletions": 0, "changes": 477, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fpower9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Fpower9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower9.md?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -0,0 +1,477 @@\n+;; Scheduling description for IBM POWER9 processor.\n+;; Copyright (C) 2016 Free Software Foundation, Inc.\n+;;\n+;; Contributed by Pat Haugen (pthaugen@us.ibm.com).\n+\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"power9dsp,power9lsu,power9vsu,power9misc\")\n+\n+(define_cpu_unit \"lsu0_power9,lsu1_power9,lsu2_power9,lsu3_power9\" \"power9lsu\")\n+(define_cpu_unit \"vsu0_power9,vsu1_power9,vsu2_power9,vsu3_power9\" \"power9vsu\")\n+; Two vector permute units, part of vsu\n+(define_cpu_unit \"prm0_power9,prm1_power9\" \"power9vsu\")\n+; Two fixed point divide units, not pipelined\n+(define_cpu_unit \"fx_div0_power9,fx_div1_power9\" \"power9misc\")\n+(define_cpu_unit \"bru_power9,cryptu_power9,dfu_power9\" \"power9misc\")\n+\n+(define_cpu_unit \"x0_power9,x1_power9,xa0_power9,xa1_power9,\n+\t\t  x2_power9,x3_power9,xb0_power9,xb1_power9,\n+\t\t  br0_power9,br1_power9\" \"power9dsp\")\n+\n+\n+; Dispatch port reservations\n+;\n+; Power9 can dispatch a maximum of 6 iops per cycle with the following\n+; general restrictions (other restrictions also apply):\n+;   1) At most 2 iops per execution slice\n+;   2) At most 2 iops to the branch unit\n+; Note that insn position in a dispatch group of 6 insns does not infer which\n+; execution slice the insn is routed to.  The units are used to infer the\n+; conflicts that exist (i.e. an 'even' requirement will preclude dispatch\n+; with 2 insns with 'superslice' requirement).\n+\n+; The xa0/xa1 units really represent the 3rd dispatch port for a superslice but\n+; are listed as separate units to allow those insns that preclude its use to\n+; still be scheduled two to a superslice while reserving the 3rd slot.  The\n+; same applies for xb0/xb1.\n+(define_reservation \"DU_xa_power9\" \"xa0_power9+xa1_power9\")\n+(define_reservation \"DU_xb_power9\" \"xb0_power9+xb1_power9\")\n+\n+; Any execution slice dispatch\n+(define_reservation \"DU_any_power9\"\n+\t\t    \"x0_power9|x1_power9|DU_xa_power9|x2_power9|x3_power9|\n+\t\t     DU_xb_power9\")\n+\n+; Even slice, actually takes even/odd slots\n+(define_reservation \"DU_even_power9\" \"x0_power9+x1_power9|x2_power9+x3_power9\")\n+\n+; Slice plus 3rd slot\n+(define_reservation \"DU_slice_3_power9\"\n+\t\t    \"x0_power9+xa0_power9|x1_power9+xa1_power9|\n+\t\t     x2_power9+xb0_power9|x3_power9+xb1_power9\")\n+\n+; Superslice\n+(define_reservation \"DU_super_power9\"\n+\t\t    \"x0_power9+x1_power9|x2_power9+x3_power9\")\n+\n+; 2-way cracked\n+(define_reservation \"DU_C2_power9\" \"x0_power9+x1_power9|\n+\t\t\t\t    x1_power9+DU_xa_power9|\n+\t\t\t\t    x1_power9+x2_power9|\n+\t\t\t\t    DU_xa_power9+x2_power9|\n+\t\t\t\t    x2_power9+x3_power9|\n+\t\t\t\t    x3_power9+DU_xb_power9\")\n+\n+; 2-way cracked plus 3rd slot\n+(define_reservation \"DU_C2_3_power9\" \"x0_power9+x1_power9+xa0_power9|\n+\t\t\t\t      x1_power9+x2_power9+xa0_power9|\n+\t\t\t\t      x1_power9+x2_power9+xb0_power9|\n+\t\t\t\t      x2_power9+x3_power9+xb0_power9\")\n+\n+; 3-way cracked (consumes whole decode/dispatch cycle)\n+(define_reservation \"DU_C3_power9\"\n+\t\t    \"x0_power9+x1_power9+xa0_power9+xa1_power9+x2_power9+\n+\t\t     x3_power9+xb0_power9+xb1_power9+br0_power9+br1_power9\")\n+\n+; Branch ports\n+(define_reservation \"DU_branch_power9\" \"br0_power9|br1_power9\")\n+\n+\n+; Execution unit reservations\n+(define_reservation \"LSU_power9\"\n+\t\t    \"lsu0_power9|lsu1_power9|lsu2_power9|lsu3_power9\")\n+\n+(define_reservation \"LSU_pair_power9\"\n+\t\t    \"lsu0_power9+lsu1_power9|lsu1_power9+lsu2_power9|\n+\t\t     lsu2_power9+lsu3_power9|lsu3_power9+lsu0_power9\")\n+\n+(define_reservation \"VSU_power9\"\n+\t\t    \"vsu0_power9|vsu1_power9|vsu2_power9|vsu3_power9\")\n+\n+(define_reservation \"VSU_super_power9\"\n+\t\t    \"vsu0_power9+vsu1_power9|vsu2_power9+vsu3_power9\")\n+\n+(define_reservation \"VSU_PRM_power9\" \"prm0_power9|prm1_power9\")\n+\n+\n+; LS Unit\n+(define_insn_reservation \"power9-load\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-load-update\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-load-ext\" 6\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-load-ext-update\" 6\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-fpload-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-fpload-update-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+; SFmode loads are cracked and have additional 2 cycles over DFmode\n+(define_insn_reservation \"power9-fpload-single\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-fpload-update-single\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-vecload\" 5\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,LSU_pair_power9\")\n+\n+; Store data can issue 2 cycles after AGEN issue, 3 cycles for vector store\n+(define_insn_reservation \"power9-store\" 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-store-indexed\" 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,LSU_power9\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power9-store-update\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power9-store-update-indexed\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-fpstore\" 0\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,LSU_power9\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power9-fpstore-update\" 2\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-vecstore\" 0\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,LSU_pair_power9\")\n+\n+(define_insn_reservation \"power9-larx\" 4\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-stcx\" 2\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_3_power9,LSU_power9+VSU_power9\")\n+\n+(define_insn_reservation \"power9-sync\" 4\n+  (and (eq_attr \"type\" \"sync,isync\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,LSU_power9\")\n+\n+\n+; VSU Execution Unit\n+\n+; Fixed point ops\n+\n+; Most ALU insns are simple 2 cycle, including record form\n+(define_insn_reservation \"power9-alu\" 2\n+  (and (ior (eq_attr \"type\" \"add,cmp,exts,integer,logical,isel\")\n+\t    (and (eq_attr \"type\" \"insert,shift\")\n+\t\t (eq_attr \"dot\" \"no\")))\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+; Record form rotate/shift are cracked\n+(define_insn_reservation \"power9-cracked-alu\" 2\n+  (and (eq_attr \"type\" \"insert,shift\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,VSU_power9\")\n+; 4 cycle CR latency\n+(define_bypass 4 \"power9-cracked-alu\"\n+\t\t \"power9-crlogical,power9-mfcr,power9-mfcrf,power9-branch\")\n+\n+(define_insn_reservation \"power9-alu2\" 3\n+  (and (eq_attr \"type\" \"cntlz,popcnt,trap\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+; Treat 'two' and 'three' types as 2 or 3 way cracked\n+(define_insn_reservation \"power9-two\" 4\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-three\" 6\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mul\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mul-compare\" 4\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,VSU_power9\")\n+; 6 cycle CR latency\n+(define_bypass 6 \"power9-mul-compare\"\n+\t\t \"power9-crlogical,power9-mfcr,power9-mfcrf,power9-branch\")\n+\n+; Fixed point divides reserve the divide units for a minimum of 8 cycles\n+(define_insn_reservation \"power9-idiv\" 16\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_even_power9,fx_div0_power9*8|fx_div1_power9*8\")\n+\n+(define_insn_reservation \"power9-ldiv\" 24\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_even_power9,fx_div0_power9*8|fx_div1_power9*8\")\n+\n+(define_insn_reservation \"power9-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mfcrf\" 2\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C3_power9,VSU_power9\")\n+\n+; Should differentiate between 1 cr field and > 1 since target of > 1 cr\n+; is cracked\n+(define_insn_reservation \"power9-mtcr\" 2\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+; Move to LR/CTR are executed in VSU\n+(define_insn_reservation \"power9-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+; Floating point/Vector ops\n+(define_insn_reservation \"power9-fpsimple\" 2\n+  (and (eq_attr \"type\" \"fpsimple\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-fp\" 7\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-fpcompare\" 3\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+; FP div/sqrt are executed in the VSU slices.  They are not pipelined wrt other\n+; divide insns, but for the most part do not block pipelined ops.\n+(define_insn_reservation \"power9-sdiv\" 22\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-ddiv\" 33\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-sqrt\" 26\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-dsqrt\" 36\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-vec-2cyc\" 2\n+  (and (eq_attr \"type\" \"vecmove,veclogical,vecexts,veccmpfx\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-veccmp\" 3\n+  (and (eq_attr \"type\" \"veccmp\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-vecsimple\" 3\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-vecnormal\" 7\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+; Quad-precision FP ops, execute in DFU\n+(define_insn_reservation \"power9-qp\" 12\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,dfu_power9\")\n+\n+(define_insn_reservation \"power9-vecperm\" 3\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_PRM_power9\")\n+\n+(define_insn_reservation \"power9-veccomplex\" 7\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-vecfdiv\" 28\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-vecdiv\" 32\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,VSU_super_power9\")\n+\n+(define_insn_reservation \"power9-qpdiv\" 56\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,dfu_power9\")\n+\n+(define_insn_reservation \"power9-mffgpr\" 2\n+  (and (eq_attr \"type\" \"mffgpr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+(define_insn_reservation \"power9-mftgpr\" 2\n+  (and (eq_attr \"type\" \"mftgpr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_slice_3_power9,VSU_power9\")\n+\n+\n+; Branch Unit\n+; Move from LR/CTR are executed in BRU but consume a writeback port from an\n+; execution slice.\n+(define_insn_reservation \"power9-mfjmpr\" 6\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_branch_power9,bru_power9+VSU_power9\")\n+\n+; Branch is 2 cycles\n+(define_insn_reservation \"power9-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_branch_power9,bru_power9\")\n+\n+\n+; Crypto Unit\n+(define_insn_reservation \"power9-crypto\" 6\n+  (and (eq_attr \"type\" \"crypto\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_super_power9,cryptu_power9\")\n+\n+\n+; HTM Unit\n+(define_insn_reservation \"power9-htm\" 4\n+  (and (eq_attr \"type\" \"htm\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_C2_power9,LSU_power9\")\n+\n+(define_insn_reservation \"power9-htm-simple\" 2\n+  (and (eq_attr \"type\" \"htmsimple\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_any_power9,VSU_power9\")\n+\n+\n+; DFP Unit\n+(define_insn_reservation \"power9-dfp\" 12\n+  (and (eq_attr \"type\" \"dfp\")\n+       (eq_attr \"cpu\" \"power9\"))\n+  \"DU_even_power9,dfu_power9\")\n+"}, {"sha": "62ad3e876d9b095b303ad6debc571d2be0a80aaa", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 287, "deletions": 35, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -1104,16 +1104,16 @@ struct processor_costs power9_cost = {\n   COSTS_N_INSNS (3),\t/* mulsi_const */\n   COSTS_N_INSNS (3),\t/* mulsi_const9 */\n   COSTS_N_INSNS (3),\t/* muldi */\n-  COSTS_N_INSNS (19),\t/* divsi */\n-  COSTS_N_INSNS (35),\t/* divdi */\n+  COSTS_N_INSNS (8),\t/* divsi */\n+  COSTS_N_INSNS (12),\t/* divdi */\n   COSTS_N_INSNS (3),\t/* fp */\n   COSTS_N_INSNS (3),\t/* dmul */\n-  COSTS_N_INSNS (14),\t/* sdiv */\n-  COSTS_N_INSNS (17),\t/* ddiv */\n+  COSTS_N_INSNS (13),\t/* sdiv */\n+  COSTS_N_INSNS (18),\t/* ddiv */\n   128,\t\t\t/* cache line size */\n   32,\t\t\t/* l1 cache */\n-  256,\t\t\t/* l2 cache */\n-  12,\t\t\t/* prefetch streams */\n+  512,\t\t\t/* l2 cache */\n+  8,\t\t\t/* prefetch streams */\n   COSTS_N_INSNS (3),\t/* SF->DF convert */\n };\n \n@@ -3846,22 +3846,7 @@ rs6000_option_override_internal (bool global_init_p)\n   if (rs6000_tune_index >= 0)\n     tune_index = rs6000_tune_index;\n   else if (have_cpu)\n-    {\n-      /* Until power9 tuning is available, use power8 tuning if -mcpu=power9.  */\n-      if (processor_target_table[cpu_index].processor != PROCESSOR_POWER9)\n-\trs6000_tune_index = tune_index = cpu_index;\n-      else\n-\t{\n-\t  size_t i;\n-\t  tune_index = -1;\n-\t  for (i = 0; i < ARRAY_SIZE (processor_target_table); i++)\n-\t    if (processor_target_table[i].processor == PROCESSOR_POWER8)\n-\t      {\n-\t\trs6000_tune_index = tune_index = i;\n-\t\tbreak;\n-\t      }\n-\t}\n-    }\n+    rs6000_tune_index = tune_index = cpu_index;\n   else\n     {\n       size_t i;\n@@ -4623,8 +4608,7 @@ rs6000_option_override_internal (bool global_init_p)\n   rs6000_sched_groups = (rs6000_cpu == PROCESSOR_POWER4\n \t\t\t || rs6000_cpu == PROCESSOR_POWER5\n \t\t\t || rs6000_cpu == PROCESSOR_POWER7\n-\t\t\t || rs6000_cpu == PROCESSOR_POWER8\n-\t\t\t || rs6000_cpu == PROCESSOR_POWER9);\n+\t\t\t || rs6000_cpu == PROCESSOR_POWER8);\n   rs6000_align_branch_targets = (rs6000_cpu == PROCESSOR_POWER4\n \t\t\t\t || rs6000_cpu == PROCESSOR_POWER5\n \t\t\t\t || rs6000_cpu == PROCESSOR_POWER6\n@@ -29864,13 +29848,20 @@ output_function_profiler (FILE *file, int labelno)\n \n /* The following variable value is the last issued insn.  */\n \n-static rtx last_scheduled_insn;\n+static rtx_insn *last_scheduled_insn;\n \n /* The following variable helps to balance issuing of load and\n    store instructions */\n \n static int load_store_pendulum;\n \n+/* The following variable helps pair divide insns during scheduling.  */\n+static int divide_cnt;\n+/* The following variable helps pair and alternate vector and vector load\n+   insns during scheduling.  */\n+static int vec_load_pendulum;\n+\n+\n /* Power4 load update and store update instructions are cracked into a\n    load or store and an integer insn which are executed in the same cycle.\n    Branches have their own dispatch slot which does not count against the\n@@ -29945,7 +29936,7 @@ rs6000_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n \t   some cycles later.  */\n \n \t/* Separate a load from a narrower, dependent store.  */\n-\tif (rs6000_sched_groups\n+\tif ((rs6000_sched_groups || rs6000_cpu_attr == CPU_POWER9)\n \t    && GET_CODE (PATTERN (insn)) == SET\n \t    && GET_CODE (PATTERN (dep_insn)) == SET\n \t    && GET_CODE (XEXP (PATTERN (insn), 1)) == MEM\n@@ -30185,6 +30176,8 @@ rs6000_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n               break;\n             }\n         }\n+      /* Fall through, no cost for output dependency.  */\n+\n     case REG_DEP_ANTI:\n       /* Anti dependency; DEP_INSN reads a register that INSN writes some\n \t cycles later.  */\n@@ -30557,8 +30550,9 @@ rs6000_issue_rate (void)\n   case CPU_POWER7:\n     return 5;\n   case CPU_POWER8:\n-  case CPU_POWER9:\n     return 7;\n+  case CPU_POWER9:\n+    return 6;\n   default:\n     return 1;\n   }\n@@ -30716,6 +30710,28 @@ is_store_insn (rtx insn, rtx *str_mem)\n   return is_store_insn1 (PATTERN (insn), str_mem);\n }\n \n+/* Return whether TYPE is a Power9 pairable vector instruction type.  */\n+\n+static bool\n+is_power9_pairable_vec_type (enum attr_type type)\n+{\n+  switch (type)\n+    {\n+      case TYPE_VECSIMPLE:\n+      case TYPE_VECCOMPLEX:\n+      case TYPE_VECDIV:\n+      case TYPE_VECCMP:\n+      case TYPE_VECPERM:\n+      case TYPE_VECFLOAT:\n+      case TYPE_VECFDIV:\n+      case TYPE_VECDOUBLE:\n+\treturn true;\n+      default:\n+\tbreak;\n+    }\n+  return false;\n+}\n+\n /* Returns whether the dependence between INSN and NEXT is considered\n    costly by the given target.  */\n \n@@ -30792,6 +30808,229 @@ get_next_active_insn (rtx_insn *insn, rtx_insn *tail)\n   return insn;\n }\n \n+/* Do Power9 specific sched_reorder2 reordering of ready list.  */\n+\n+static int\n+power9_sched_reorder2 (rtx_insn **ready, int lastpos)\n+{\n+  int pos;\n+  int i;\n+  rtx_insn *tmp;\n+  enum attr_type type;\n+\n+  type = get_attr_type (last_scheduled_insn);\n+\n+  /* Try to issue fixed point divides back-to-back in pairs so they will be\n+     routed to separate execution units and execute in parallel.  */\n+  if (type == TYPE_DIV && divide_cnt == 0)\n+    {\n+      /* First divide has been scheduled.  */\n+      divide_cnt = 1;\n+\n+      /* Scan the ready list looking for another divide, if found move it\n+\t to the end of the list so it is chosen next.  */\n+      pos = lastpos;\n+      while (pos >= 0)\n+\t{\n+\t  if (recog_memoized (ready[pos]) >= 0\n+\t      && get_attr_type (ready[pos]) == TYPE_DIV)\n+\t    {\n+\t      tmp = ready[pos];\n+\t      for (i = pos; i < lastpos; i++)\n+\t\tready[i] = ready[i + 1];\n+\t      ready[lastpos] = tmp;\n+\t      break;\n+\t    }\n+\t  pos--;\n+\t}\n+    }\n+  else\n+    {\n+      /* Last insn was the 2nd divide or not a divide, reset the counter.  */\n+      divide_cnt = 0;\n+\n+      /* Power9 can execute 2 vector operations and 2 vector loads in a single\n+\t cycle.  So try to pair up and alternate groups of vector and vector\n+\t load instructions.\n+\n+\t To aid this formation, a counter is maintained to keep track of\n+\t vec/vecload insns issued.  The value of vec_load_pendulum maintains\n+\t the current state with the following values:\n+\n+\t     0  : Initial state, no vec/vecload group has been started.\n+\n+\t     -1 : 1 vector load has been issued and another has been found on\n+\t\t  the ready list and moved to the end.\n+\n+\t     -2 : 2 vector loads have been issued and a vector operation has\n+\t\t  been found and moved to the end of the ready list.\n+\n+\t     -3 : 2 vector loads and a vector insn have been issued and a\n+\t\t  vector operation has been found and moved to the end of the\n+\t\t  ready list.\n+\n+\t     1  : 1 vector insn has been issued and another has been found and\n+\t\t  moved to the end of the ready list.\n+\n+\t     2  : 2 vector insns have been issued and a vector load has been\n+\t\t  found and moved to the end of the ready list.\n+\n+\t     3  : 2 vector insns and a vector load have been issued and another\n+\t\t  vector load has been found and moved to the end of the ready\n+\t\t  list.\t */\n+      if (type == TYPE_VECLOAD)\n+\t{\n+\t  /* Issued a vecload.  */\n+\t  if (vec_load_pendulum == 0)\n+\t    {\n+\t      /* We issued a single vecload, look for another and move it to\n+\t\t the end of the ready list so it will be scheduled next.\n+\t\t Set pendulum if found.  */\n+\t      pos = lastpos;\n+\t      while (pos >= 0)\n+\t\t{\n+\t\t  if (recog_memoized (ready[pos]) >= 0\n+\t\t      && get_attr_type (ready[pos]) == TYPE_VECLOAD)\n+\t\t    {\n+\t\t      tmp = ready[pos];\n+\t\t      for (i = pos; i < lastpos; i++)\n+\t\t\tready[i] = ready[i + 1];\n+\t\t      ready[lastpos] = tmp;\n+\t\t      vec_load_pendulum = -1;\n+\t\t      return cached_can_issue_more;\n+\t\t    }\n+\t\t  pos--;\n+\t\t}\n+\t    }\n+\t  else if (vec_load_pendulum == -1)\n+\t    {\n+\t      /* This is the second vecload we've issued, search the ready\n+\t         list for a vector operation so we can try to schedule a\n+\t         pair of those next.  If found move to the end of the ready\n+\t         list so it is scheduled next and set the pendulum.  */\n+\t      pos = lastpos;\n+\t      while (pos >= 0)\n+\t\t{\n+\t\t  if (recog_memoized (ready[pos]) >= 0\n+\t\t      && is_power9_pairable_vec_type (\n+\t\t\t   get_attr_type (ready[pos])))\n+\t\t    {\n+\t\t      tmp = ready[pos];\n+\t\t      for (i = pos; i < lastpos; i++)\n+\t\t\tready[i] = ready[i + 1];\n+\t\t      ready[lastpos] = tmp;\n+\t\t      vec_load_pendulum = -2;\n+\t\t      return cached_can_issue_more;\n+\t\t    }\n+\t\t  pos--;\n+\t\t}\n+\t    }\n+\t  else if (vec_load_pendulum == 2)\n+\t    {\n+\t      /* Two vector ops have been issued and we've just issued a\n+\t\t vecload, look for another vecload and move to end of ready\n+\t\t list if found.  */\n+\t      pos = lastpos;\n+\t      while (pos >= 0)\n+\t        {\n+\t\t  if (recog_memoized (ready[pos]) >= 0\n+\t\t      && get_attr_type (ready[pos]) == TYPE_VECLOAD)\n+\t\t    {\n+\t\t      tmp = ready[pos];\n+\t\t      for (i = pos; i < lastpos; i++)\n+\t\t\tready[i] = ready[i + 1];\n+\t\t      ready[lastpos] = tmp;\n+\t\t      /* Set pendulum so that next vecload will be seen as\n+\t\t\t finishing a group, not start of one.  */\n+\t\t      vec_load_pendulum = 3;\n+\t\t      return cached_can_issue_more;\n+\t\t    }\n+\t\t  pos--;\n+\t\t}\n+\t    }\n+\t}\n+      else if (is_power9_pairable_vec_type (type))\n+\t{\n+\t  /* Issued a vector operation.  */\n+\t  if (vec_load_pendulum == 0)\n+\t    /* We issued a single vec op, look for another and move it\n+\t       to the end of the ready list so it will be scheduled next.\n+\t       Set pendulum if found.  */\n+\t    {\n+\t      pos = lastpos;\n+\t      while (pos >= 0)\n+\t\t{\n+\t\t  if (recog_memoized (ready[pos]) >= 0\n+\t\t      && is_power9_pairable_vec_type (\n+\t\t\t   get_attr_type (ready[pos])))\n+\t\t    {\n+\t\t      tmp = ready[pos];\n+\t\t      for (i = pos; i < lastpos; i++)\n+\t\t\tready[i] = ready[i + 1];\n+\t\t      ready[lastpos] = tmp;\n+\t\t      vec_load_pendulum = 1;\n+\t\t      return cached_can_issue_more;\n+\t\t    }\n+\t\t  pos--;\n+\t\t}\n+\t    }\n+\t  else if (vec_load_pendulum == 1)\n+\t    {\n+\t      /* This is the second vec op we've issued, search the ready\n+\t\t list for a vecload operation so we can try to schedule a\n+\t\t pair of those next.  If found move to the end of the ready\n+\t\t list so it is scheduled next and set the pendulum.  */\n+\t      pos = lastpos;\n+\t      while (pos >= 0)\n+\t\t{\n+\t\t  if (recog_memoized (ready[pos]) >= 0\n+\t\t      && get_attr_type (ready[pos]) == TYPE_VECLOAD)\n+\t\t    {\n+\t\t      tmp = ready[pos];\n+\t\t      for (i = pos; i < lastpos; i++)\n+\t\t\tready[i] = ready[i + 1];\n+\t\t      ready[lastpos] = tmp;\n+\t\t      vec_load_pendulum = 2;\n+\t\t      return cached_can_issue_more;\n+\t\t    }\n+\t\t  pos--;\n+\t\t}\n+\t    }\n+\t  else if (vec_load_pendulum == -2)\n+\t    {\n+\t      /* Two vecload ops have been issued and we've just issued a\n+\t\t vec op, look for another vec op and move to end of ready\n+\t  \t list if found.  */\n+\t      pos = lastpos;\n+\t      while (pos >= 0)\n+\t\t{\n+\t\t  if (recog_memoized (ready[pos]) >= 0\n+\t\t      && is_power9_pairable_vec_type (\n+\t\t\t   get_attr_type (ready[pos])))\n+\t\t    {\n+\t\t      tmp = ready[pos];\n+\t\t      for (i = pos; i < lastpos; i++)\n+\t\t\tready[i] = ready[i + 1];\n+\t\t      ready[lastpos] = tmp;\n+\t\t      /* Set pendulum so that next vec op will be seen as\n+\t\t\t finishing a group, not start of one.  */\n+\t\t      vec_load_pendulum = -3;\n+\t\t      return cached_can_issue_more;\n+\t\t    }\n+\t\t  pos--;\n+\t\t}\n+\t    }\n+\t}\n+\n+      /* We've either finished a vec/vecload group, couldn't find an insn to\n+\t continue the current group, or the last insn had nothing to do with\n+\t with a group.  In any case, reset the pendulum.  */\n+      vec_load_pendulum = 0;\n+    }\n+\n+  return cached_can_issue_more;\n+}\n+\n /* We are about to begin issuing insns for this clock cycle. */\n \n static int\n@@ -31023,6 +31262,11 @@ rs6000_sched_reorder2 (FILE *dump, int sched_verbose, rtx_insn **ready,\n         }\n     }\n \n+  /* Do Power9 dependent reordering if necessary.  */\n+  if (rs6000_cpu == PROCESSOR_POWER9 && last_scheduled_insn\n+      && recog_memoized (last_scheduled_insn) >= 0)\n+    return power9_sched_reorder2 (ready, *pn_ready - 1);\n+\n   return cached_can_issue_more;\n }\n \n@@ -31191,7 +31435,6 @@ insn_must_be_first_in_group (rtx_insn *insn)\n         }\n       break;\n     case PROCESSOR_POWER8:\n-    case PROCESSOR_POWER9:\n       type = get_attr_type (insn);\n \n       switch (type)\n@@ -31322,7 +31565,6 @@ insn_must_be_last_in_group (rtx_insn *insn)\n     }\n     break;\n   case PROCESSOR_POWER8:\n-  case PROCESSOR_POWER9:\n     type = get_attr_type (insn);\n \n     switch (type)\n@@ -31441,7 +31683,7 @@ force_new_group (int sched_verbose, FILE *dump, rtx *group_insns,\n \n       /* Do we have a special group ending nop? */\n       if (rs6000_cpu_attr == CPU_POWER6 || rs6000_cpu_attr == CPU_POWER7\n-\t  || rs6000_cpu_attr == CPU_POWER8 || rs6000_cpu_attr == CPU_POWER9)\n+\t  || rs6000_cpu_attr == CPU_POWER8)\n \t{\n \t  nop = gen_group_ending_nop ();\n \t  emit_insn_before (nop, next_insn);\n@@ -31695,8 +31937,10 @@ rs6000_sched_init (FILE *dump ATTRIBUTE_UNUSED,\n \t\t     int sched_verbose ATTRIBUTE_UNUSED,\n \t\t     int max_ready ATTRIBUTE_UNUSED)\n {\n-  last_scheduled_insn = NULL_RTX;\n+  last_scheduled_insn = NULL;\n   load_store_pendulum = 0;\n+  divide_cnt = 0;\n+  vec_load_pendulum = 0;\n }\n \n /* The following function is called at the end of scheduling BB.\n@@ -31737,14 +31981,16 @@ rs6000_sched_finish (FILE *dump, int sched_verbose)\n     }\n }\n \n-struct _rs6000_sched_context\n+struct rs6000_sched_context\n {\n   short cached_can_issue_more;\n-  rtx last_scheduled_insn;\n+  rtx_insn *last_scheduled_insn;\n   int load_store_pendulum;\n+  int divide_cnt;\n+  int vec_load_pendulum;\n };\n \n-typedef struct _rs6000_sched_context rs6000_sched_context_def;\n+typedef struct rs6000_sched_context rs6000_sched_context_def;\n typedef rs6000_sched_context_def *rs6000_sched_context_t;\n \n /* Allocate store for new scheduling context.  */\n@@ -31764,14 +32010,18 @@ rs6000_init_sched_context (void *_sc, bool clean_p)\n   if (clean_p)\n     {\n       sc->cached_can_issue_more = 0;\n-      sc->last_scheduled_insn = NULL_RTX;\n+      sc->last_scheduled_insn = NULL;\n       sc->load_store_pendulum = 0;\n+      sc->divide_cnt = 0;\n+      sc->vec_load_pendulum = 0;\n     }\n   else\n     {\n       sc->cached_can_issue_more = cached_can_issue_more;\n       sc->last_scheduled_insn = last_scheduled_insn;\n       sc->load_store_pendulum = load_store_pendulum;\n+      sc->divide_cnt = divide_cnt;\n+      sc->vec_load_pendulum = vec_load_pendulum;\n     }\n }\n \n@@ -31786,6 +32036,8 @@ rs6000_set_sched_context (void *_sc)\n   cached_can_issue_more = sc->cached_can_issue_more;\n   last_scheduled_insn = sc->last_scheduled_insn;\n   load_store_pendulum = sc->load_store_pendulum;\n+  divide_cnt = sc->divide_cnt;\n+  vec_load_pendulum = sc->vec_load_pendulum;\n }\n \n /* Free _SC.  */"}, {"sha": "12f5d6fd288b363eb74956ba780393fd098f6282", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 59, "deletions": 33, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -184,12 +184,12 @@\n    vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,\n    vecfloat,vecfdiv,vecdouble,mffgpr,mftgpr,crypto,\n    veclogical,veccmpfx,vecexts,vecmove,\n-   htm\"\n+   htm,htmsimple,dfp\"\n   (const_string \"integer\"))\n \n ;; What data size does this instruction work on?\n-;; This is used for insert, mul.\n-(define_attr \"size\" \"8,16,32,64\" (const_string \"32\"))\n+;; This is used for insert, mul and others as necessary.\n+(define_attr \"size\" \"8,16,32,64,128\" (const_string \"32\"))\n \n ;; Is this instruction record form (\"dot\", signed compare to 0, writing CR0)?\n ;; This is used for add, logical, shift, exts, mul.\n@@ -299,6 +299,7 @@\n (include \"power6.md\")\n (include \"power7.md\")\n (include \"power8.md\")\n+(include \"power9.md\")\n (include \"cell.md\")\n (include \"xfpu.md\")\n (include \"a2.md\")\n@@ -6792,6 +6793,7 @@\n    #\n    #\"\n   [(set_attr \"type\" \"fpstore,fpload,fpsimple,fpload,fpstore,fpload,fpstore,veclogical,veclogical,two,store,load,two\")\n+   (set_attr \"size\" \"64\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,8,8,8,8\")])\n \n (define_insn \"*mov<mode>_softfloat32\"\n@@ -6837,6 +6839,7 @@\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n   [(set_attr \"type\" \"fpstore,fpload,fpsimple,fpload,fpstore,fpload,fpstore,veclogical,veclogical,integer,store,load,*,mtjmpr,mfjmpr,*,mftgpr,mffgpr,mftgpr,mffgpr\")\n+   (set_attr \"size\" \"64\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"*mov<mode>_softfloat64\"\n@@ -7885,10 +7888,11 @@\n    #\n    #\"\n   [(set_attr \"type\"\n-               \"store,     load,      *,         fpstore,     fpload,       fpsimple,\n-                *,         fpstore,   fpstore,   fpload,      fpload,       veclogical,\n-                vecsimple, vecsimple, vecsimple, veclogical, veclogical,  vecsimple,\n-                vecsimple\")])\n+               \"store,     load,      *,         fpstore,    fpload,     fpsimple,\n+                *,         fpstore,   fpstore,   fpload,     fpload,     veclogical,\n+                vecsimple, vecsimple, vecsimple, veclogical, veclogical, vecsimple,\n+                vecsimple\")\n+   (set_attr \"size\" \"64\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -7971,12 +7975,13 @@\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n   [(set_attr \"type\"\n-               \"store,       load,\t  *,         *,         *,         *,\n-                fpstore,     fpload,      fpsimple,  fpstore,   fpstore,   fpload,\n-                fpload,      veclogical, vecsimple, vecsimple, vecsimple, veclogical,\n-                veclogical, vecsimple,   vecsimple, mfjmpr,    mtjmpr,    *,\n-                mftgpr,      mffgpr,      mftgpr,    mffgpr\")\n+               \"store,      load,\t*,         *,         *,         *,\n+                fpstore,    fpload,     fpsimple,  fpstore,   fpstore,   fpload,\n+                fpload,     veclogical, vecsimple, vecsimple, vecsimple, veclogical,\n+                veclogical, vecsimple,  vecsimple, mfjmpr,    mtjmpr,    *,\n+                mftgpr,     mffgpr,     mftgpr,    mffgpr\")\n \n+   (set_attr \"size\" \"64\")\n    (set_attr \"length\"\n                \"4,         4,         4,         4,         4,          20,\n                 4,         4,         4,         4,         4,          4,\n@@ -9026,7 +9031,8 @@\n    lfdu %3,%2(%0)\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"update\" \"yes\")\n-   (set_attr \"indexed\" \"yes,no\")])\n+   (set_attr \"indexed\" \"yes,no\")\n+   (set_attr \"size\" \"64\")])\n \n (define_insn \"*movdf_update2\"\n   [(set (mem:DF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n@@ -13431,7 +13437,8 @@\n \t (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsaddqp %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"sub<mode>3\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13440,7 +13447,8 @@\n \t (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xssubqp %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"mul<mode>3\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13449,7 +13457,8 @@\n \t (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsmulqp %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"div<mode>3\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13458,15 +13467,17 @@\n \t (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsdivqp %0,%1,%2\"\n-  [(set_attr \"type\" \"vecdiv\")])\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"sqrt<mode>2\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n \t(sqrt:IEEE128\n \t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n    \"xssqrtqp %0,%1\"\n-  [(set_attr \"type\" \"vecdiv\")])\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"128\")])\n \n (define_expand \"copysign<mode>3\"\n   [(use (match_operand:IEEE128 0 \"altivec_register_operand\"))\n@@ -13494,7 +13505,8 @@\n \t UNSPEC_COPYSIGN))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n    \"xscpsgnqp %0,%2,%1\"\n-  [(set_attr \"type\" \"vecmove\")])\n+  [(set_attr \"type\" \"vecmove\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"copysign<mode>3_soft\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13514,7 +13526,8 @@\n \t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsnegqp %0,%1\"\n-  [(set_attr \"type\" \"vecmove\")])\n+  [(set_attr \"type\" \"vecmove\")\n+   (set_attr \"size\" \"128\")])\n \n \n (define_insn \"abs<mode>2_hw\"\n@@ -13523,7 +13536,8 @@\n \t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsabsqp %0,%1\"\n-  [(set_attr \"type\" \"vecmove\")])\n+  [(set_attr \"type\" \"vecmove\")\n+   (set_attr \"size\" \"128\")])\n \n \n (define_insn \"*nabs<mode>2_hw\"\n@@ -13533,7 +13547,8 @@\n \t  (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\"))))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsnabsqp %0,%1\"\n-  [(set_attr \"type\" \"vecmove\")])\n+  [(set_attr \"type\" \"vecmove\")\n+   (set_attr \"size\" \"128\")])\n \n ;; Initially don't worry about doing fusion\n (define_insn \"*fma<mode>4_hw\"\n@@ -13544,7 +13559,8 @@\n \t (match_operand:IEEE128 3 \"altivec_register_operand\" \"0\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsmaddqp %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"*fms<mode>4_hw\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13555,7 +13571,8 @@\n \t  (match_operand:IEEE128 3 \"altivec_register_operand\" \"0\"))))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsmsubqp %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"*nfma<mode>4_hw\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13566,7 +13583,8 @@\n \t  (match_operand:IEEE128 3 \"altivec_register_operand\" \"0\"))))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsnmaddqp %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"*nfms<mode>4_hw\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13578,15 +13596,17 @@\n \t   (match_operand:IEEE128 3 \"altivec_register_operand\" \"0\")))))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsnmsubqp %0,%1,%2\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"extend<SFDF:mode><IEEE128:mode>2_hw\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n \t(float_extend:IEEE128\n \t (match_operand:SFDF 1 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<IEEE128:MODE>mode)\"\n   \"xscvdpqp %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n ;; Conversion between KFmode and TFmode if TFmode is ieee 128-bit floating\n ;; point is a simple copy.\n@@ -13628,7 +13648,8 @@\n \t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xscvqpdp %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n ;; There is no KFmode -> SFmode instruction. Preserve the accuracy by doing\n ;; the KFmode -> DFmode conversion using round to odd rather than the normal\n@@ -13725,7 +13746,8 @@\n \t UNSPEC_IEEE128_CONVERT))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xscvqp<su>wz %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"*xscvqp<su>dz_<mode>\"\n   [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n@@ -13735,7 +13757,8 @@\n \t UNSPEC_IEEE128_CONVERT))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xscvqp<su>dz %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"*xscv<su>dqp_<mode>\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13744,7 +13767,8 @@\n \t\t    UNSPEC_IEEE128_CONVERT)))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xscv<su>dqp %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n (define_insn \"*ieee128_mfvsrd_64bit\"\n   [(set (match_operand:DI 0 \"reg_or_indexed_operand\" \"=wr,Z,wi\")\n@@ -13821,7 +13845,8 @@\n \t\t   UNSPEC_ROUND_TO_ODD))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xscvqpdpo %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n \n ;; IEEE 128-bit comparisons\n (define_insn \"*cmp<mode>_hw\"\n@@ -13830,7 +13855,8 @@\n \t\t      (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n    \"xscmpuqp %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcompare\")])\n+  [(set_attr \"type\" \"veccmp\")\n+   (set_attr \"size\" \"128\")])\n \n \f\n "}, {"sha": "f72f729d3a6868f6dd96d4e33a1305c4ed0c8b3a", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda328bf1dd994826252fa0435d2e58103c2c2d8/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=eda328bf1dd994826252fa0435d2e58103c2c2d8", "patch": "@@ -50,6 +50,7 @@ MD_INCLUDES = $(srcdir)/config/rs6000/rs64.md \\\n \t$(srcdir)/config/rs6000/power6.md \\\n \t$(srcdir)/config/rs6000/power7.md \\\n \t$(srcdir)/config/rs6000/power8.md \\\n+\t$(srcdir)/config/rs6000/power9.md \\\n \t$(srcdir)/config/rs6000/cell.md \\\n \t$(srcdir)/config/rs6000/xfpu.md \\\n \t$(srcdir)/config/rs6000/a2.md \\"}]}