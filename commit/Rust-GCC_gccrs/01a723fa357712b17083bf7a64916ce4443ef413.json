{"sha": "01a723fa357712b17083bf7a64916ce4443ef413", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFhNzIzZmEzNTc3MTJiMTcwODNiZjdhNjQ5MTZjZTQ0NDNlZjQxMw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-09-11T04:21:00Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-09-11T04:21:00Z"}, "message": "re PR middle-end/54362 (COND_EXPR not understood by either alias or ITM)\n\n2012-09-10  Andrew Pinski  <apinski@cavium.com>\n\n\tPR tree-opt/54362\n\t* trans-mem.c (thread_private_new_memory): Handle COND_EXPR also.\n\n2012-09-10  Andrew Pinski  <apinski@cavium.com>\n\n\tPR tree-opt/c54362\n\t* gcc.dg/tm/memopt-16.c: New testcase.\n\nFrom-SVN: r191172", "tree": {"sha": "cb92aa327d23c60b5cf4b64daaaf566c760b07d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb92aa327d23c60b5cf4b64daaaf566c760b07d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01a723fa357712b17083bf7a64916ce4443ef413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a723fa357712b17083bf7a64916ce4443ef413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a723fa357712b17083bf7a64916ce4443ef413", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a723fa357712b17083bf7a64916ce4443ef413/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f3b7d7c57f66d74667ba91ddc36fce50096f1e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3b7d7c57f66d74667ba91ddc36fce50096f1e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f3b7d7c57f66d74667ba91ddc36fce50096f1e1"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "2b11aa5e51b6cc4d065c2ee2ee94ebb74bc25100", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a723fa357712b17083bf7a64916ce4443ef413/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a723fa357712b17083bf7a64916ce4443ef413/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01a723fa357712b17083bf7a64916ce4443ef413", "patch": "@@ -1,3 +1,8 @@\n+2012-09-10  Andrew Pinski  <apinski@cavium.com>\n+\n+\tPR tree-opt/54362\n+\t* trans-mem.c (thread_private_new_memory): Handle COND_EXPR also.\n+\n 2012-09-10  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/m68k/m68k.c (m68k_sched_dfa_post_advance_cycle): Support"}, {"sha": "c230240de57bcf3d7a8e77ea89fed63f20e668da", "filename": "gcc/testsuite/gcc.dg/tm/memopt-16.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a723fa357712b17083bf7a64916ce4443ef413/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fmemopt-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a723fa357712b17083bf7a64916ce4443ef413/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fmemopt-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fmemopt-16.c?ref=01a723fa357712b17083bf7a64916ce4443ef413", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu-tm -O3 -fdump-tree-tmmark\" } */\n+/* Like memopt-12.c but the phi is inside a look which causes\n+   it to be converted into a COND_EXPR.  */\n+\n+extern int test(void) __attribute__((transaction_safe));\n+extern void *malloc (__SIZE_TYPE__) __attribute__((malloc,transaction_safe));\n+\n+struct large { int foo[500]; };\n+\n+int f(int j)\n+{\n+  int *p1, *p2, *p3;\n+\n+  p1 = malloc (sizeof (*p1)*5000);\n+  __transaction_atomic {\n+    _Bool t;\n+    int i = 1;\n+    *p1 = 0;\n+\n+    p2 = malloc (sizeof (*p2)*6000);\n+    *p2 = 1;\n+    t = test();\n+\n+    for (i = 0;i < j;i++)\n+    {\n+\n+    /* p3 = PHI (p1, p2) */\n+    if (t)\n+      p3 = p1;\n+    else\n+      p3 = p2;\n+\n+    /* Since both p1 and p2 are thread-private, we can inherit the\n+       logging already done.  No ITM_W* instrumentation necessary.  */\n+    *p3 = 555;\n+    }\n+  }\n+  return p3[something()];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ITM_WU\" 0 \"tmmark\" } } */\n+/* { dg-final { cleanup-tree-dump \"tmmark\" } } */"}, {"sha": "e71efff70652f9c542a86a4dae1fed8127ff65d0", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a723fa357712b17083bf7a64916ce4443ef413/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a723fa357712b17083bf7a64916ce4443ef413/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=01a723fa357712b17083bf7a64916ce4443ef413", "patch": "@@ -1379,6 +1379,19 @@ thread_private_new_memory (basic_block entry_block, tree x)\n \t  /* x = (cast*) foo ==> foo */\n \t  else if (code == VIEW_CONVERT_EXPR || code == NOP_EXPR)\n \t    x = gimple_assign_rhs1 (stmt);\n+\t  /* x = c ? op1 : op2 == > op1 or op2 just like a PHI */\n+\t  else if (code == COND_EXPR)\n+\t    {\n+\t      tree op1 = gimple_assign_rhs2 (stmt);\n+\t      tree op2 = gimple_assign_rhs3 (stmt);\n+\t      enum thread_memory_type mem;\n+\t      retval = thread_private_new_memory (entry_block, op1);\n+\t      if (retval == mem_non_local)\n+\t\tgoto new_memory_ret;\n+\t      mem = thread_private_new_memory (entry_block, op2);\n+\t      retval = MIN (retval, mem);\n+\t      goto new_memory_ret;\n+\t    }\n \t  else\n \t    {\n \t      retval = mem_non_local;"}]}