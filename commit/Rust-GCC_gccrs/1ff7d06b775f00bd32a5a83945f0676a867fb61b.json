{"sha": "1ff7d06b775f00bd32a5a83945f0676a867fb61b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZmN2QwNmI3NzVmMDBiZDMyYTVhODM5NDVmMDY3NmE4NjdmYjYxYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-04-04T18:31:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-04-04T18:31:39Z"}, "message": "tree-ssa-uncprop.c (associate_equivalences_with_edges): Use last_basic_block for size of bb->index indexed array.\n\n\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Use\n\tlast_basic_block for size of bb->index indexed array.\n\t* bt-load.c (compute_defs_uses_and_gen, compute_kill,\n\tcompute_out, link_btr_uses, build_btr_def_use_webs,\n\tbuild_btr_def_use_webs, migrate_btr_defs): Likewise.\n\nFrom-SVN: r145546", "tree": {"sha": "6adda91d66fe398c1ac9ee82618b9a70f78c30fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6adda91d66fe398c1ac9ee82618b9a70f78c30fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ff7d06b775f00bd32a5a83945f0676a867fb61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff7d06b775f00bd32a5a83945f0676a867fb61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff7d06b775f00bd32a5a83945f0676a867fb61b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff7d06b775f00bd32a5a83945f0676a867fb61b/comments", "author": null, "committer": null, "parents": [{"sha": "14925fcd4738293fae74f5f86328d6bee131dcf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14925fcd4738293fae74f5f86328d6bee131dcf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14925fcd4738293fae74f5f86328d6bee131dcf8"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "bf203d9027b52a082965302ae332bd597b470996", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff7d06b775f00bd32a5a83945f0676a867fb61b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff7d06b775f00bd32a5a83945f0676a867fb61b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ff7d06b775f00bd32a5a83945f0676a867fb61b", "patch": "@@ -1,3 +1,11 @@\n+2009-04-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Use\n+\tlast_basic_block for size of bb->index indexed array.\n+\t* bt-load.c (compute_defs_uses_and_gen, compute_kill,\n+\tcompute_out, link_btr_uses, build_btr_def_use_webs,\n+\tbuild_btr_def_use_webs, migrate_btr_defs): Likewise.\n+\n 2009-04-04  Jan Hubicka  <jh@suse.cz>\n \n \t* except.c (remove_eh_handler_and_replace): Break out from ..."}, {"sha": "accba8d0d2282c46953e9676427047d17514206c", "filename": "gcc/bt-load.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff7d06b775f00bd32a5a83945f0676a867fb61b/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff7d06b775f00bd32a5a83945f0676a867fb61b/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=1ff7d06b775f00bd32a5a83945f0676a867fb61b", "patch": "@@ -457,8 +457,8 @@ compute_defs_uses_and_gen (fibheap_t all_btr_defs, btr_def *def_array,\n   btr_def_group all_btr_def_groups = NULL;\n   defs_uses_info info;\n \n-  sbitmap_vector_zero (bb_gen, n_basic_blocks);\n-  for (i = NUM_FIXED_BLOCKS; i < n_basic_blocks; i++)\n+  sbitmap_vector_zero (bb_gen, last_basic_block);\n+  for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n     {\n       basic_block bb = BASIC_BLOCK (i);\n       int reg;\n@@ -618,8 +618,8 @@ compute_kill (sbitmap *bb_kill, sbitmap *btr_defset,\n \n   /* For each basic block, form the set BB_KILL - the set\n      of definitions that the block kills.  */\n-  sbitmap_vector_zero (bb_kill, n_basic_blocks);\n-  for (i = NUM_FIXED_BLOCKS; i < n_basic_blocks; i++)\n+  sbitmap_vector_zero (bb_kill, last_basic_block);\n+  for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n     {\n       for (regno = first_btr; regno <= last_btr; regno++)\n \tif (TEST_HARD_REG_BIT (all_btrs, regno)\n@@ -642,14 +642,14 @@ compute_out (sbitmap *bb_out, sbitmap *bb_gen, sbitmap *bb_kill, int max_uid)\n   int changed;\n   sbitmap bb_in = sbitmap_alloc (max_uid);\n \n-  for (i = NUM_FIXED_BLOCKS; i < n_basic_blocks; i++)\n+  for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n     sbitmap_copy (bb_out[i], bb_gen[i]);\n \n   changed = 1;\n   while (changed)\n     {\n       changed = 0;\n-      for (i = NUM_FIXED_BLOCKS; i < n_basic_blocks; i++)\n+      for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n \t{\n \t  sbitmap_union_of_preds (bb_in, bb_out, i);\n \t  changed |= sbitmap_union_of_diff_cg (bb_out[i], bb_gen[i],\n@@ -668,7 +668,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n \n   /* Link uses to the uses lists of all of their reaching defs.\n      Count up the number of reaching defs of each use.  */\n-  for (i = NUM_FIXED_BLOCKS; i < n_basic_blocks; i++)\n+  for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n     {\n       basic_block bb = BASIC_BLOCK (i);\n       rtx insn;\n@@ -780,8 +780,8 @@ build_btr_def_use_webs (fibheap_t all_btr_defs)\n   btr_user *use_array   = XCNEWVEC (btr_user, max_uid);\n   sbitmap *btr_defset   = sbitmap_vector_alloc (\n \t\t\t   (last_btr - first_btr) + 1, max_uid);\n-  sbitmap *bb_gen      = sbitmap_vector_alloc (n_basic_blocks, max_uid);\n-  HARD_REG_SET *btrs_written = XCNEWVEC (HARD_REG_SET, n_basic_blocks);\n+  sbitmap *bb_gen      = sbitmap_vector_alloc (last_basic_block, max_uid);\n+  HARD_REG_SET *btrs_written = XCNEWVEC (HARD_REG_SET, last_basic_block);\n   sbitmap *bb_kill;\n   sbitmap *bb_out;\n \n@@ -790,11 +790,11 @@ build_btr_def_use_webs (fibheap_t all_btr_defs)\n   compute_defs_uses_and_gen (all_btr_defs, def_array, use_array, btr_defset,\n \t\t\t     bb_gen, btrs_written);\n \n-  bb_kill = sbitmap_vector_alloc (n_basic_blocks, max_uid);\n+  bb_kill = sbitmap_vector_alloc (last_basic_block, max_uid);\n   compute_kill (bb_kill, btr_defset, btrs_written);\n   free (btrs_written);\n \n-  bb_out = sbitmap_vector_alloc (n_basic_blocks, max_uid);\n+  bb_out = sbitmap_vector_alloc (last_basic_block, max_uid);\n   compute_out (bb_out, bb_gen, bb_kill, max_uid);\n \n   sbitmap_vector_free (bb_gen);\n@@ -1403,7 +1403,7 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n     {\n       int i;\n \n-      for (i = NUM_FIXED_BLOCKS; i < n_basic_blocks; i++)\n+      for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n \t{\n \t  basic_block bb = BASIC_BLOCK (i);\n \t  fprintf(dump_file,\n@@ -1426,8 +1426,8 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n \t  first_btr = reg;\n       }\n \n-  btrs_live = XCNEWVEC (HARD_REG_SET, n_basic_blocks);\n-  btrs_live_at_end = XCNEWVEC (HARD_REG_SET, n_basic_blocks);\n+  btrs_live = XCNEWVEC (HARD_REG_SET, last_basic_block);\n+  btrs_live_at_end = XCNEWVEC (HARD_REG_SET, last_basic_block);\n \n   build_btr_def_use_webs (all_btr_defs);\n "}, {"sha": "59c9b44c6179da3c5f2fd2b511c755182408072c", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff7d06b775f00bd32a5a83945f0676a867fb61b/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff7d06b775f00bd32a5a83945f0676a867fb61b/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=1ff7d06b775f00bd32a5a83945f0676a867fb61b", "patch": "@@ -177,7 +177,7 @@ associate_equivalences_with_edges (void)\n \t      && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (cond))\n \t    {\n \t      int i, n_labels = gimple_switch_num_labels (stmt);\n-\t      tree *info = XCNEWVEC (tree, n_basic_blocks);\n+\t      tree *info = XCNEWVEC (tree, last_basic_block);\n \n \t      /* Walk over the case label vector.  Record blocks\n \t\t which are reached by a single case label which represents"}]}