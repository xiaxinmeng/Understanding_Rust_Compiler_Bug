{"sha": "a36d4c6259c2e8b426087892db7c9e644981ffc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM2ZDRjNjI1OWMyZThiNDI2MDg3ODkyZGI3YzllNjQ0OTgxZmZjNA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:50:44Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:50:44Z"}, "message": "reload.c: (immune_p): Constants never overlap hard frame pointer references.\n\n* reload.c: (immune_p): Constants never overlap hard frame pointer references.\n(find_reloads_address): Compute invalid references to the hard\nframe pointer in a register; also (reg + const)\nand (reg + reg + const).\n\nFrom-SVN: r5462", "tree": {"sha": "e3a2048a330bd8e5def4dd4ec35c986ceb300c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3a2048a330bd8e5def4dd4ec35c986ceb300c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a36d4c6259c2e8b426087892db7c9e644981ffc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36d4c6259c2e8b426087892db7c9e644981ffc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36d4c6259c2e8b426087892db7c9e644981ffc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36d4c6259c2e8b426087892db7c9e644981ffc4/comments", "author": null, "committer": null, "parents": [{"sha": "6fa4004a0cb37854350172c0cf72d9b91eb87aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa4004a0cb37854350172c0cf72d9b91eb87aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa4004a0cb37854350172c0cf72d9b91eb87aae"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "7d9d55b106770dc091c9518434c6d322efb62078", "filename": "gcc/reload.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36d4c6259c2e8b426087892db7c9e644981ffc4/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36d4c6259c2e8b426087892db7c9e644981ffc4/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a36d4c6259c2e8b426087892db7c9e644981ffc4", "patch": "@@ -2109,10 +2109,12 @@ immune_p (x, y, ydata)\n       /* Constants and stack slots never overlap.  */\n       if (CONSTANT_P (xdata.base)\n \t  && (ydata.base == frame_pointer_rtx\n+\t      || ydata.base == hard_frame_pointer_rtx\n \t      || ydata.base == stack_pointer_rtx))\n \treturn 1;\n       if (CONSTANT_P (ydata.base)\n \t  && (xdata.base == frame_pointer_rtx\n+\t      || xdata.base == hard_frame_pointer_rtx\n \t      || xdata.base == stack_pointer_rtx))\n \treturn 1;\n       /* If either base is variable, we don't know anything.  */\n@@ -4083,6 +4085,9 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n      (displacement is too large), compute the sum in a register.  */\n   else if (GET_CODE (ad) == PLUS\n \t   && (XEXP (ad, 0) == frame_pointer_rtx\n+#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+\t       || XEXP (ad, 0) == hard_frame_pointer_rtx\n+#endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n \t       || XEXP (ad, 0) == arg_pointer_rtx\n #endif\n@@ -4149,6 +4154,9 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n   else if (GET_CODE (ad) == PLUS && GET_CODE (XEXP (ad, 1)) == CONST_INT\n \t   && GET_CODE (XEXP (ad, 0)) == PLUS\n \t   && (XEXP (XEXP (ad, 0), 0) == frame_pointer_rtx\n+#if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n+\t       || XEXP (XEXP (ad, 0), 0) == hard_frame_pointer_rtx\n+#endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n \t       || XEXP (XEXP (ad, 0), 0) == arg_pointer_rtx\n #endif\n@@ -4169,6 +4177,9 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n   else if (GET_CODE (ad) == PLUS && GET_CODE (XEXP (ad, 1)) == CONST_INT\n \t   && GET_CODE (XEXP (ad, 0)) == PLUS\n \t   && (XEXP (XEXP (ad, 0), 1) == frame_pointer_rtx\n+#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+\t       || XEXP (XEXP (ad, 0), 1) == hard_frame_pointer_rtx\n+#endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n \t       || XEXP (XEXP (ad, 0), 1) == arg_pointer_rtx\n #endif"}]}