{"sha": "04398fa84e070560d18d59ffe898bd46e8ddbeb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQzOThmYTg0ZTA3MDU2MGQxOGQ1OWZmZTg5OGJkNDZlOGRkYmViNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-03-19T15:51:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-03-19T15:51:25Z"}, "message": "re PR c++/14710 (Warning about useless casts)\n\n2012-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/14710\n\t* doc/invoke.texi: Document -Wuseless-cast.\n\n/c-family\n2012-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/14710\n\t* c.opt ([Wuseless-cast]): Add.\n\n/cp\n2012-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/14710\n\t* cp-tree.h (maybe_warn_about_useless_cast): Declare.\n\t* typeck.c (maybe_warn_about_useless_cast): Define.\n\t(build_reinterpret_cast, build_const_cast,\n\tbuild_static_cast, cp_build_c_cast): Use it.\n\t* rtti.c (build_dynamic_cast): Likewise.\n\t* pt.c (tsubst_copy_and_build, case CAST_EXPR): Increment/decrement\n\tc_inhibit_evaluation_warnings before/after the build_* calls.\n\n/testsuite\n2012-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/14710\n\t* g++.dg/warn/Wuseless-cast.C: New.\n\nFrom-SVN: r185524", "tree": {"sha": "eb01dfeebfb11d2b3e7c2be23d3c53d59ce5da9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb01dfeebfb11d2b3e7c2be23d3c53d59ce5da9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04398fa84e070560d18d59ffe898bd46e8ddbeb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04398fa84e070560d18d59ffe898bd46e8ddbeb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04398fa84e070560d18d59ffe898bd46e8ddbeb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04398fa84e070560d18d59ffe898bd46e8ddbeb7/comments", "author": null, "committer": null, "parents": [{"sha": "b199074d13335fef7220ac5372bab4a898131f65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b199074d13335fef7220ac5372bab4a898131f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b199074d13335fef7220ac5372bab4a898131f65"}], "stats": {"total": 261, "additions": 241, "deletions": 20}, "files": [{"sha": "050d379891db4a8086f6a0fa462d7444e4e43cfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -1,3 +1,8 @@\n+2012-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/14710\n+\t* doc/invoke.texi: Document -Wuseless-cast.\n+\n 2012-03-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.def (REALPART_EXPR, IMAGPART_EXPR, VIEW_CONVERT_EXPR): Move."}, {"sha": "1b586e505b96db278abeeb8cd60fcff9623808e7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -1,3 +1,8 @@\n+2012-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/14710\n+\t* c.opt ([Wuseless-cast]): Add.\n+\n 2012-03-16  Richard Guenther  <rguenther@suse.de>\n \n \t* c-pretty-print.c (pp_c_initializer_list): Adjust."}, {"sha": "1ec5504d5e477d8386d47e3e0b42fcdc2d182596", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -697,6 +697,10 @@ Wzero-as-null-pointer-constant\n C++ ObjC++ Var(warn_zero_as_null_pointer_constant) Warning\n Warn when a literal '0' is used as null pointer\n \n+Wuseless-cast\n+C++ ObjC++ Var(warn_useless_cast) Warning\n+Warn about useless casts\n+\n ansi\n C ObjC C++ ObjC++\n A synonym for -std=c89 (for C) or -std=c++98 (for C++)"}, {"sha": "7908bb32775c9d181150de378f4ddf77fc469b46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -1,3 +1,15 @@\n+2012-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/14710\n+\t* cp-tree.h (xvalue_p, maybe_warn_about_useless_cast): Declare.\n+\t* tree.c (xvalue_p): Define.\n+\t* typeck.c (maybe_warn_about_useless_cast): Define.\n+\t(build_reinterpret_cast, build_const_cast,\n+\tbuild_static_cast, cp_build_c_cast): Use maybe_warn_about_useless_cast.\n+\t* rtti.c (build_dynamic_cast): Likewise.\n+\t* pt.c (tsubst_copy_and_build, case CAST_EXPR): Increment/decrement\n+\tc_inhibit_evaluation_warnings before/after the build_* calls.\n+\n 2012-03-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52582"}, {"sha": "fc60d860108ef23d6c158df65f8a3b9ec374fafc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -1,6 +1,7 @@\n /* Definitions for C++ parsing and type checking.\n    Copyright (C) 1987, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n+   2012\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -5661,6 +5662,7 @@ extern int member_p\t\t\t\t(const_tree);\n extern cp_lvalue_kind real_lvalue_p\t\t(const_tree);\n extern cp_lvalue_kind lvalue_kind\t\t(const_tree);\n extern bool lvalue_or_rvalue_with_address_p\t(const_tree);\n+extern bool xvalue_p\t                        (const_tree);\n extern bool builtin_valid_in_constant_expr_p    (const_tree);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n@@ -5860,6 +5862,7 @@ extern int lvalue_or_else\t\t\t(tree, enum lvalue_use,\n extern void check_template_keyword\t\t(tree);\n extern bool check_raw_literal_operator\t\t(const_tree decl);\n extern bool check_literal_operator_args\t\t(const_tree, bool *, bool *);\n+extern void maybe_warn_about_useless_cast       (tree, tree, tsubst_flags_t);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);"}, {"sha": "b36e49d4a070b3e1207e5128ed10f6f222a9dc06", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -13444,7 +13444,7 @@ tsubst_copy_and_build (tree t,\n     case STATIC_CAST_EXPR:\n       {\n \ttree type;\n-\ttree op;\n+\ttree op, r = NULL_TREE;\n \n \ttype = tsubst (TREE_TYPE (t), args, complain, in_decl);\n \tif (integral_constant_expression_p\n@@ -13458,21 +13458,30 @@ tsubst_copy_and_build (tree t,\n \n \top = RECUR (TREE_OPERAND (t, 0));\n \n+\t++c_inhibit_evaluation_warnings;\n \tswitch (TREE_CODE (t))\n \t  {\n \t  case CAST_EXPR:\n-\t    return build_functional_cast (type, op, complain);\n+\t    r = build_functional_cast (type, op, complain);\n+\t    break;\n \t  case REINTERPRET_CAST_EXPR:\n-\t    return build_reinterpret_cast (type, op, complain);\n+\t    r = build_reinterpret_cast (type, op, complain);\n+\t    break;\n \t  case CONST_CAST_EXPR:\n-\t    return build_const_cast (type, op, complain);\n+\t    r = build_const_cast (type, op, complain);\n+\t    break;\n \t  case DYNAMIC_CAST_EXPR:\n-\t    return build_dynamic_cast (type, op, complain);\n+\t    r = build_dynamic_cast (type, op, complain);\n+\t    break;\n \t  case STATIC_CAST_EXPR:\n-\t    return build_static_cast (type, op, complain);\n+\t    r = build_static_cast (type, op, complain);\n+\t    break;\n \t  default:\n \t    gcc_unreachable ();\n \t  }\n+\t--c_inhibit_evaluation_warnings;\n+\n+\treturn r;\n       }\n \n     case POSTDECREMENT_EXPR:"}, {"sha": "2ca8fa511fa911d519d0142cfd976bf4d4a76431", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -1,6 +1,6 @@\n /* RunTime Type Identification\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Mostly written by Jason Merrill (jason@cygnus.com).\n \n@@ -774,6 +774,8 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n tree\n build_dynamic_cast (tree type, tree expr, tsubst_flags_t complain)\n {\n+  tree r;\n+\n   if (type == error_mark_node || expr == error_mark_node)\n     return error_mark_node;\n \n@@ -784,9 +786,12 @@ build_dynamic_cast (tree type, tree expr, tsubst_flags_t complain)\n       return convert_from_reference (expr);\n     }\n \n-  return convert_from_reference (build_dynamic_cast_1 (type, expr, complain));\n+  r = convert_from_reference (build_dynamic_cast_1 (type, expr, complain));\n+  if (r != error_mark_node)\n+    maybe_warn_about_useless_cast (type, expr, complain);\n+  return r;\n }\n-\f\n+\n /* Return the runtime bit mask encoding the qualifiers of TYPE.  */\n \n static int"}, {"sha": "87e9be84ecc7de9fe283ebaf05e0474cb6cfbf44", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -1,6 +1,7 @@\n /* Language-dependent node constructors for parse phase of GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011,\n+   2012\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -274,6 +275,14 @@ lvalue_or_rvalue_with_address_p (const_tree ref)\n     return (kind != clk_none);\n }\n \n+/* Returns true if REF is an xvalue, false otherwise.  */\n+\n+bool\n+xvalue_p (const_tree ref)\n+{\n+  return (lvalue_kind (ref) == clk_rvalueref);\n+}\n+\n /* Test whether DECL is a builtin that may appear in a\n    constant-expression. */\n "}, {"sha": "d2d6c4ef04944cb2b723e43a8427c0ff241a8e8b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -5749,6 +5749,28 @@ check_for_casting_away_constness (tree src_type, tree dest_type,\n     }\n }\n \n+/*\n+  Warns if the cast from expression EXPR to type TYPE is useless.\n+ */\n+void\n+maybe_warn_about_useless_cast (tree type, tree expr, tsubst_flags_t complain)\n+{\n+  if (warn_useless_cast\n+      && complain & tf_warning\n+      && c_inhibit_evaluation_warnings == 0)\n+    {\n+      if (REFERENCE_REF_P (expr))\n+\texpr = TREE_OPERAND (expr, 0);\n+\n+      if ((TREE_CODE (type) == REFERENCE_TYPE\n+\t   && (TYPE_REF_IS_RVALUE (type)\n+\t       ? xvalue_p (expr) : real_lvalue_p (expr))\n+\t   && same_type_p (TREE_TYPE (expr), TREE_TYPE (type)))\n+\t  || same_type_p (TREE_TYPE (expr), type))\n+\twarning (OPT_Wuseless_cast, \"useless cast to type %qT\", type);\n+    }\n+}\n+\n /* Convert EXPR (an expression with pointer-to-member type) to TYPE\n    (another pointer-to-member type in the same hierarchy) and return\n    the converted expression.  If ALLOW_INVERSE_P is permitted, a\n@@ -6078,7 +6100,11 @@ build_static_cast (tree type, tree expr, tsubst_flags_t complain)\n   result = build_static_cast_1 (type, expr, /*c_cast_p=*/false, &valid_p,\n                                 complain);\n   if (valid_p)\n-    return result;\n+    {\n+      if (result != error_mark_node)\n+\tmaybe_warn_about_useless_cast (type, expr, complain);\n+      return result;\n+    }\n \n   if (complain & tf_error)\n     error (\"invalid static_cast from type %qT to type %qT\",\n@@ -6305,6 +6331,8 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n tree\n build_reinterpret_cast (tree type, tree expr, tsubst_flags_t complain)\n {\n+  tree r;\n+\n   if (type == error_mark_node || expr == error_mark_node)\n     return error_mark_node;\n \n@@ -6319,8 +6347,11 @@ build_reinterpret_cast (tree type, tree expr, tsubst_flags_t complain)\n       return convert_from_reference (t);\n     }\n \n-  return build_reinterpret_cast_1 (type, expr, /*c_cast_p=*/false,\n-\t\t\t\t   /*valid_p=*/NULL, complain);\n+  r = build_reinterpret_cast_1 (type, expr, /*c_cast_p=*/false,\n+\t\t\t\t/*valid_p=*/NULL, complain);\n+  if (r != error_mark_node)\n+    maybe_warn_about_useless_cast (type, expr, complain);\n+  return r;\n }\n \n /* Perform a const_cast from EXPR to TYPE.  If the cast is valid,\n@@ -6464,6 +6495,8 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n tree\n build_const_cast (tree type, tree expr, tsubst_flags_t complain)\n {\n+  tree r;\n+\n   if (type == error_mark_node || error_operand_p (expr))\n     return error_mark_node;\n \n@@ -6478,8 +6511,10 @@ build_const_cast (tree type, tree expr, tsubst_flags_t complain)\n       return convert_from_reference (t);\n     }\n \n-  return build_const_cast_1 (type, expr, complain,\n-\t\t\t     /*valid_p=*/NULL);\n+  r = build_const_cast_1 (type, expr, complain, /*valid_p=*/NULL);\n+  if (r != error_mark_node)\n+    maybe_warn_about_useless_cast (type, expr, complain);\n+  return r;\n }\n \n /* Like cp_build_c_cast, but for the c-common bits.  */\n@@ -6567,7 +6602,11 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n   result = build_const_cast_1 (type, value, complain & tf_warning,\n \t\t\t       &valid_p);\n   if (valid_p)\n-    return result;\n+    {\n+      if (result != error_mark_node)\n+\tmaybe_warn_about_useless_cast (type, value, complain);\n+      return result;\n+    }\n \n   /* Or a static cast.  */\n   result = build_static_cast_1 (type, value, /*c_cast_p=*/true,\n@@ -6580,11 +6619,13 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n      const_cast.  */\n   if (valid_p\n       /* A valid cast may result in errors if, for example, a\n-\t conversion to am ambiguous base class is required.  */\n+\t conversion to an ambiguous base class is required.  */\n       && !error_operand_p (result))\n     {\n       tree result_type;\n \n+      maybe_warn_about_useless_cast (type, value, complain);\n+\n       /* Non-class rvalues always have cv-unqualified type.  */\n       if (!CLASS_TYPE_P (type))\n \ttype = TYPE_MAIN_VARIANT (type);"}, {"sha": "bf821ff97e5bb8f52af296d4d0010b1374e156c8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -274,8 +274,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wunused-label  -Wunused-local-typedefs -Wunused-parameter @gol\n -Wno-unused-result -Wunused-value @gol -Wunused-variable @gol\n -Wunused-but-set-parameter -Wunused-but-set-variable @gol\n--Wvariadic-macros -Wvector-operation-performance -Wvla \n--Wvolatile-register-var  -Wwrite-strings -Wzero-as-null-pointer-constant}\n+-Wuseless-cast -Wvariadic-macros -Wvector-operation-performance @gol\n+-Wvla -Wvolatile-register-var  -Wwrite-strings -Wzero-as-null-pointer-constant}\n \n @item C and Objective-C-only Warning Options\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n@@ -4199,6 +4199,11 @@ types. @option{-Wconversion-null} is enabled by default.\n Warn when a literal '0' is used as null pointer constant.  This can\n be useful to facilitate the conversion to @code{nullptr} in C++11.\n \n+@item -Wuseless-cast @r{(C++ and Objective-C++ only)}\n+@opindex Wuseless-cast\n+@opindex Wno-useless-cast\n+Warn when an expression is casted to its own type.\n+\n @item -Wempty-body\n @opindex Wempty-body\n @opindex Wno-empty-body"}, {"sha": "8000d93db9cd4ed71a53d5af4c8e721a761f9e9f", "filename": "gcc/testsuite/g++.dg/warn/Wuseless-cast.C", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04398fa84e070560d18d59ffe898bd46e8ddbeb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C?ref=04398fa84e070560d18d59ffe898bd46e8ddbeb7", "patch": "@@ -0,0 +1,123 @@\n+// { dg-options \"-Wuseless-cast\" }\n+\n+template<typename T>\n+  void tmpl_f1(T& t)\n+  {\n+    (int)(t);\n+    static_cast<int>(t);\n+    reinterpret_cast<int>(t);\n+\n+    (int*)(&t);\n+    const_cast<int*>(&t);\n+    static_cast<int*>(&t);\n+    reinterpret_cast<int*>(&t);\n+\n+    (int&)(t);\n+    const_cast<int&>(t);\n+    static_cast<int&>(t);\n+    reinterpret_cast<int&>(t);\n+  }\n+\n+template<typename T>\n+  void tmpl_f2(T t)\n+  {\n+    (int&)(t);\n+    const_cast<int&>(t);\n+    static_cast<int&>(t);\n+    reinterpret_cast<int&>(t);\n+  }\n+\n+struct A { };\n+\n+template<typename T>\n+  void tmpl_f3(T& t)\n+  {\n+    (A)(t);\n+    static_cast<A>(t);\n+\n+    (A*)(&t);\n+    const_cast<A*>(&t);\n+    static_cast<A*>(&t);\n+    reinterpret_cast<A*>(&t);\n+    dynamic_cast<A*>(&t);\n+\n+    (A&)(t);\n+    const_cast<A&>(t);\n+    static_cast<A&>(t);\n+    reinterpret_cast<A&>(t);\n+    dynamic_cast<A&>(t);\n+  }\n+\n+template<typename T>\n+  void tmpl_f4(T t)\n+  {\n+    (A&)(t);\n+    const_cast<A&>(t);\n+    static_cast<A&>(t);\n+    reinterpret_cast<A&>(t);\n+    dynamic_cast<A&>(t);\n+  }\n+\n+void f()\n+{\n+  int n; \n+\n+  (int)(n);                    // { dg-warning \"useless cast\" }\n+  static_cast<int>(n);         // { dg-warning \"useless cast\" }\n+  reinterpret_cast<int>(n);    // { dg-warning \"useless cast\" }\n+\n+  (int*)(&n);                  // { dg-warning \"useless cast\" }\n+  const_cast<int*>(&n);        // { dg-warning \"useless cast\" }\n+  static_cast<int*>(&n);       // { dg-warning \"useless cast\" }\n+  reinterpret_cast<int*>(&n);  // { dg-warning \"useless cast\" }\n+\n+  int& m = n;\n+\n+  (int&)(m);                   // { dg-warning \"useless cast\" }\n+  const_cast<int&>(m);         // { dg-warning \"useless cast\" }\n+  static_cast<int&>(m);        // { dg-warning \"useless cast\" }\n+  reinterpret_cast<int&>(m);   // { dg-warning \"useless cast\" }\n+\n+  tmpl_f1(m);\n+\n+  (int&)(n);                   // { dg-warning \"useless cast\" }\n+  const_cast<int&>(n);         // { dg-warning \"useless cast\" }\n+  static_cast<int&>(n);        // { dg-warning \"useless cast\" }\n+  reinterpret_cast<int&>(n);   // { dg-warning \"useless cast\" }\n+\n+  tmpl_f2(n);\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  (int&&)(42);\n+  static_cast<int&&>(42);\n+#endif\n+\n+  A a;\n+\n+  (A)(a);                     // { dg-warning \"useless cast\" }\n+  static_cast<A>(a);          // { dg-warning \"useless cast\" }\n+\n+  (A*)(&a);                   // { dg-warning \"useless cast\" }\n+  const_cast<A*>(&a);         // { dg-warning \"useless cast\" }\n+  static_cast<A*>(&a);        // { dg-warning \"useless cast\" }\n+  reinterpret_cast<A*>(&a);   // { dg-warning \"useless cast\" }\n+  dynamic_cast<A*>(&a);       // { dg-warning \"useless cast\" }\n+\n+  A& b = a;\n+\n+  (A&)(b);                    // { dg-warning \"useless cast\" }\n+  const_cast<A&>(b);          // { dg-warning \"useless cast\" }\n+  static_cast<A&>(b);         // { dg-warning \"useless cast\" }     \n+  static_cast<A&>(b);         // { dg-warning \"useless cast\" }\n+  dynamic_cast<A&>(b);        // { dg-warning \"useless cast\" }\n+\n+  tmpl_f3(b);\n+\n+  (A&)(a);                    // { dg-warning \"useless cast\" } \n+  const_cast<A&>(a);          // { dg-warning \"useless cast\" }\n+  static_cast<A&>(a);         // { dg-warning \"useless cast\" }\n+  reinterpret_cast<A&>(a);    // { dg-warning \"useless cast\" }\n+  dynamic_cast<A&>(a);        // { dg-warning \"useless cast\" }\n+\n+  tmpl_f4(a);\n+}"}]}