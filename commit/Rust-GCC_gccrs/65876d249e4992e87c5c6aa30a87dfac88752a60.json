{"sha": "65876d249e4992e87c5c6aa30a87dfac88752a60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU4NzZkMjQ5ZTQ5OTJlODdjNWM2YWEzMGE4N2RmYWM4ODc1MmE2MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-17T15:12:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-17T15:12:05Z"}, "message": "tree-vect-data-refs.c (vect_get_new_vect_var): Add referenced vars here, use create_tmp_reg where appropriate.\n\n2012-07-17  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_get_new_vect_var): Add referenced\n\tvars here, use create_tmp_reg where appropriate.\n\t(vect_create_addr_base_for_vector_ref): Do not add referenced\n\tvars here, use create_tmp_reg where appropriate.\n\t(vect_create_data_ref_ptr): Likewise.\n\t(vect_create_destination_var): Likewise.\n\t(vect_permute_store_chain): Likewise.\n\t(vect_permute_load_chain): Likewise.\n\t* tree-vect-loop-manip.c (vect_create_cond_for_align_checks):\n\tLikewise.\n\t* tree-vect-loop.c (get_initial_def_for_induction): Likewise.\n\t* tree-vect-patterns.c (vect_recog_temp_ssa_var): Likewise.\n\t(vect_handle_widen_op_by_const): Likewise.\n\t* tree-vect-stmts.c (vect_init_vector): Likewise.\n\t(vectorizable_load): Likewise.\n\nFrom-SVN: r189581", "tree": {"sha": "693869f5109ae80dc471c399197f39eba86528e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/693869f5109ae80dc471c399197f39eba86528e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65876d249e4992e87c5c6aa30a87dfac88752a60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65876d249e4992e87c5c6aa30a87dfac88752a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65876d249e4992e87c5c6aa30a87dfac88752a60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65876d249e4992e87c5c6aa30a87dfac88752a60/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cb151c045c2ad9355d4dbfac0ec91a9c3c45eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb151c045c2ad9355d4dbfac0ec91a9c3c45eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb151c045c2ad9355d4dbfac0ec91a9c3c45eb7"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "aa7df8ec20f405774fa801d08282743f24e61e48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65876d249e4992e87c5c6aa30a87dfac88752a60", "patch": "@@ -1,3 +1,21 @@\n+2012-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_get_new_vect_var): Add referenced\n+\tvars here, use create_tmp_reg where appropriate.\n+\t(vect_create_addr_base_for_vector_ref): Do not add referenced\n+\tvars here, use create_tmp_reg where appropriate.\n+\t(vect_create_data_ref_ptr): Likewise.\n+\t(vect_create_destination_var): Likewise.\n+\t(vect_permute_store_chain): Likewise.\n+\t(vect_permute_load_chain): Likewise.\n+\t* tree-vect-loop-manip.c (vect_create_cond_for_align_checks):\n+\tLikewise.\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_temp_ssa_var): Likewise.\n+\t(vect_handle_widen_op_by_const): Likewise.\n+\t* tree-vect-stmts.c (vect_init_vector): Likewise.\n+\t(vectorizable_load): Likewise.\n+\n 2012-07-17  Tom de Vries  <tom@codesourcery.com>\n \n \t* hwint.c: Fix loop range."}, {"sha": "dd0752e69cf4307f59d6b603b1591c25e868dcc7", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=65876d249e4992e87c5c6aa30a87dfac88752a60", "patch": "@@ -3397,15 +3397,12 @@ vect_get_new_vect_var (tree type, enum vect_var_kind var_kind, const char *name)\n   if (name)\n     {\n       char* tmp = concat (prefix, name, NULL);\n-      new_vect_var = create_tmp_var (type, tmp);\n+      new_vect_var = create_tmp_reg (type, tmp);\n       free (tmp);\n     }\n   else\n-    new_vect_var = create_tmp_var (type, prefix);\n-\n-  /* Mark vector typed variable as a gimple register variable.  */\n-  if (TREE_CODE (type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (new_vect_var) = true;\n+    new_vect_var = create_tmp_reg (type, prefix);\n+  add_referenced_var (new_vect_var);\n \n   return new_vect_var;\n }\n@@ -3533,7 +3530,6 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n   vec_stmt = fold_convert (vect_ptr_type, addr_base);\n   addr_expr = vect_get_new_vect_var (vect_ptr_type, vect_pointer_var,\n                                      get_name (base_name));\n-  add_referenced_var (addr_expr);\n   vec_stmt = force_gimple_operand (vec_stmt, &seq, false, addr_expr);\n   gimple_seq_add_seq (new_stmt_list, seq);\n \n@@ -3732,8 +3728,6 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n       while (orig_stmt);\n     }\n \n-  add_referenced_var (aggr_ptr);\n-\n   /* Note: If the dataref is in an inner-loop nested in LOOP, and we are\n      vectorizing LOOP (i.e., outer-loop vectorization), we need to create two\n      def-use update cycles for the pointer: one relative to the outer-loop\n@@ -3983,7 +3977,6 @@ vect_create_destination_var (tree scalar_dest, tree vectype)\n   if (!new_name)\n     new_name = \"var_\";\n   vec_dest = vect_get_new_vect_var (type, kind, new_name);\n-  add_referenced_var (vec_dest);\n \n   return vec_dest;\n }\n@@ -4144,8 +4137,7 @@ vect_permute_store_chain (VEC(tree,heap) *dr_chain,\n \n \t  /* Create interleaving stmt:\n \t     high = VEC_PERM_EXPR <vect1, vect2, {0, nelt, 1, nelt+1, ...}>  */\n-\t  perm_dest = create_tmp_var (vectype, \"vect_inter_high\");\n-\t  DECL_GIMPLE_REG_P (perm_dest) = 1;\n+\t  perm_dest = create_tmp_reg (vectype, \"vect_inter_high\");\n \t  add_referenced_var (perm_dest);\n \t  high = make_ssa_name (perm_dest, NULL);\n \t  perm_stmt\n@@ -4157,8 +4149,7 @@ vect_permute_store_chain (VEC(tree,heap) *dr_chain,\n \t  /* Create interleaving stmt:\n \t     low = VEC_PERM_EXPR <vect1, vect2, {nelt/2, nelt*3/2, nelt/2+1,\n \t\t\t\t\t\t nelt*3/2+1, ...}>  */\n-\t  perm_dest = create_tmp_var (vectype, \"vect_inter_low\");\n-\t  DECL_GIMPLE_REG_P (perm_dest) = 1;\n+\t  perm_dest = create_tmp_reg (vectype, \"vect_inter_low\");\n \t  add_referenced_var (perm_dest);\n \t  low = make_ssa_name (perm_dest, NULL);\n \t  perm_stmt\n@@ -4601,8 +4592,7 @@ vect_permute_load_chain (VEC(tree,heap) *dr_chain,\n \t  second_vect = VEC_index (tree, dr_chain, j+1);\n \n \t  /* data_ref = permute_even (first_data_ref, second_data_ref);  */\n-\t  perm_dest = create_tmp_var (vectype, \"vect_perm_even\");\n-\t  DECL_GIMPLE_REG_P (perm_dest) = 1;\n+\t  perm_dest = create_tmp_reg (vectype, \"vect_perm_even\");\n \t  add_referenced_var (perm_dest);\n \n \t  perm_stmt = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, perm_dest,\n@@ -4616,8 +4606,7 @@ vect_permute_load_chain (VEC(tree,heap) *dr_chain,\n \t  VEC_replace (tree, *result_chain, j/2, data_ref);\n \n \t  /* data_ref = permute_odd (first_data_ref, second_data_ref);  */\n-\t  perm_dest = create_tmp_var (vectype, \"vect_perm_odd\");\n-\t  DECL_GIMPLE_REG_P (perm_dest) = 1;\n+\t  perm_dest = create_tmp_reg (vectype, \"vect_perm_odd\");\n \t  add_referenced_var (perm_dest);\n \n \t  perm_stmt = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, perm_dest,"}, {"sha": "d7d9f25ab34a3697e2c184bbec1c975bbfd8aea9", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=65876d249e4992e87c5c6aa30a87dfac88752a60", "patch": "@@ -2249,7 +2249,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n \tgimple_seq_add_seq (cond_expr_stmt_list, new_stmt_list);\n \n       sprintf (tmp_name, \"%s%d\", \"addr2int\", i);\n-      addr_tmp = create_tmp_var (int_ptrsize_type, tmp_name);\n+      addr_tmp = create_tmp_reg (int_ptrsize_type, tmp_name);\n       add_referenced_var (addr_tmp);\n       addr_tmp_name = make_ssa_name (addr_tmp, NULL);\n       addr_stmt = gimple_build_assign_with_ops (NOP_EXPR, addr_tmp_name,\n@@ -2263,7 +2263,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n         {\n           /* create: or_tmp = or_tmp | addr_tmp */\n           sprintf (tmp_name, \"%s%d\", \"orptrs\", i);\n-          or_tmp = create_tmp_var (int_ptrsize_type, tmp_name);\n+          or_tmp = create_tmp_reg (int_ptrsize_type, tmp_name);\n           add_referenced_var (or_tmp);\n \t  new_or_tmp_name = make_ssa_name (or_tmp, NULL);\n \t  or_stmt = gimple_build_assign_with_ops (BIT_IOR_EXPR,\n@@ -2281,7 +2281,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n   mask_cst = build_int_cst (int_ptrsize_type, mask);\n \n   /* create: and_tmp = or_tmp & mask  */\n-  and_tmp = create_tmp_var (int_ptrsize_type, \"andmask\" );\n+  and_tmp = create_tmp_reg (int_ptrsize_type, \"andmask\" );\n   add_referenced_var (and_tmp);\n   and_tmp_name = make_ssa_name (and_tmp, NULL);\n "}, {"sha": "163bc573e37a69319088d557fbf702efe0c18b26", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=65876d249e4992e87c5c6aa30a87dfac88752a60", "patch": "@@ -3034,8 +3034,6 @@ get_initial_def_for_induction (gimple iv_phi)\n       /* iv_loop is the loop to be vectorized. Create:\n \t vec_init = [X, X+S, X+2*S, X+3*S] (S = step_expr, X = init_expr)  */\n       new_var = vect_get_new_vect_var (scalar_type, vect_scalar_var, \"var_\");\n-      add_referenced_var (new_var);\n-\n       new_name = force_gimple_operand (init_expr, &stmts, false, new_var);\n       if (stmts)\n \t{\n@@ -3106,7 +3104,6 @@ get_initial_def_for_induction (gimple iv_phi)\n \n   /* Create the induction-phi that defines the induction-operand.  */\n   vec_dest = vect_get_new_vect_var (vectype, vect_simple_var, \"vec_iv_\");\n-  add_referenced_var (vec_dest);\n   induction_phi = create_phi_node (vec_dest, iv_loop->header);\n   set_vinfo_for_stmt (induction_phi,\n \t\t      new_stmt_vec_info (induction_phi, loop_vinfo, NULL));"}, {"sha": "05202a8f4c635353094d96239679292ab1de25fd", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=65876d249e4992e87c5c6aa30a87dfac88752a60", "patch": "@@ -206,7 +206,7 @@ type_conversion_p (tree name, gimple use_stmt, bool check_sign,\n static tree\n vect_recog_temp_ssa_var (tree type, gimple stmt)\n {\n-  tree var = create_tmp_var (type, \"patt\");\n+  tree var = create_tmp_reg (type, \"patt\");\n \n   add_referenced_var (var);\n   var = make_ssa_name (var, stmt);\n@@ -501,7 +501,7 @@ vect_handle_widen_op_by_const (gimple stmt, enum tree_code code,\n     {\n       /* Create a_T = (NEW_TYPE) a_t;  */\n       *oprnd = gimple_assign_rhs1 (def_stmt);\n-      tmp = create_tmp_var (new_type, NULL);\n+      tmp = create_tmp_reg (new_type, NULL);\n       add_referenced_var (tmp);\n       new_oprnd = make_ssa_name (tmp, NULL);\n       new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd, *oprnd,"}, {"sha": "fb05063579f81433eed7c81f5e5ecf93080d3e2f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65876d249e4992e87c5c6aa30a87dfac88752a60/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=65876d249e4992e87c5c6aa30a87dfac88752a60", "patch": "@@ -1283,7 +1283,6 @@ vect_init_vector (gimple stmt, tree val, tree type, gimple_stmt_iterator *gsi)\n     }\n \n   new_var = vect_get_new_vect_var (type, vect_simple_var, \"cst_\");\n-  add_referenced_var (new_var);\n   init_stmt = gimple_build_assign  (new_var, val);\n   new_temp = make_ssa_name (new_var, init_stmt);\n   gimple_assign_set_lhs (init_stmt, new_temp);\n@@ -4542,7 +4541,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (op))\n \t\t\t  == TYPE_VECTOR_SUBPARTS (idxtype));\n \t      var = vect_get_new_vect_var (idxtype, vect_simple_var, NULL);\n-\t      add_referenced_var (var);\n \t      var = make_ssa_name (var, NULL);\n \t      op = build1 (VIEW_CONVERT_EXPR, idxtype, op);\n \t      new_stmt\n@@ -4560,7 +4558,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      gcc_assert (TYPE_VECTOR_SUBPARTS (vectype)\n \t\t\t  == TYPE_VECTOR_SUBPARTS (rettype));\n \t      var = vect_get_new_vect_var (rettype, vect_simple_var, NULL);\n-\t      add_referenced_var (var);\n \t      op = make_ssa_name (var, new_stmt);\n \t      gimple_call_set_lhs (new_stmt, op);\n \t      vect_finish_stmt_generation (stmt, new_stmt, gsi);"}]}