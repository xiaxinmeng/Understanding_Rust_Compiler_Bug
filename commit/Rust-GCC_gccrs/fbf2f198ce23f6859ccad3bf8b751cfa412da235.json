{"sha": "fbf2f198ce23f6859ccad3bf8b751cfa412da235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmMmYxOThjZTIzZjY4NTljY2FkM2JmOGI3NTFjZmE0MTJkYTIzNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-05-02T22:32:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-05-02T22:32:23Z"}, "message": "libgo: add type/const references to sysinfo.c\n    \n    This patch adds explicit references to various types and constants\n    defined by the header files included by sysinfo.c (used to drive the\n    generation of gen-sysinfo.go as part of the libgo build via the GCC\n    \"-fdump-go-spec\" option).\n    \n    The intent is to enable clients to gather the same info generated by\n    \"-fdump-go-spec\" by instead reading the generated DWARF from a\n    sysinfo.o object file compiled with \"-g\". Some compilers (notably\n    clang) try to omit DWARF records for a given type unless there is an\n    explicit use of it in the translation unit; the additional references\n    are to insure that everything we want to see in the DWARF shows up.\n    \n    Reviewed-on: https://go-review.googlesource.com/99063\n\nFrom-SVN: r259868", "tree": {"sha": "97e4f701dcc189bd60d5bae5460119270ced5522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97e4f701dcc189bd60d5bae5460119270ced5522"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbf2f198ce23f6859ccad3bf8b751cfa412da235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf2f198ce23f6859ccad3bf8b751cfa412da235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf2f198ce23f6859ccad3bf8b751cfa412da235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf2f198ce23f6859ccad3bf8b751cfa412da235/comments", "author": null, "committer": null, "parents": [{"sha": "746d6ed4ad8118e79eefa8f0d95c0ae5a9c4b9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746d6ed4ad8118e79eefa8f0d95c0ae5a9c4b9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746d6ed4ad8118e79eefa8f0d95c0ae5a9c4b9c0"}], "stats": {"total": 212, "additions": 211, "deletions": 1}, "files": [{"sha": "8de30a1c5a4f2ec2a3fa33a6ee681c9932e1ef93", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf2f198ce23f6859ccad3bf8b751cfa412da235/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf2f198ce23f6859ccad3bf8b751cfa412da235/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=fbf2f198ce23f6859ccad3bf8b751cfa412da235", "patch": "@@ -1,4 +1,4 @@\n-24cd2e0542cc227200c3f91b9e0eefaa726cbc1c\n+cef3d77a3dc0207454aabdc3ef0e8f9a0ffdf32e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "92ecb47906639b774282441aa842abf24f4c25e1", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf2f198ce23f6859ccad3bf8b751cfa412da235/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf2f198ce23f6859ccad3bf8b751cfa412da235/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=fbf2f198ce23f6859ccad3bf8b751cfa412da235", "patch": "@@ -29,6 +29,7 @@ echo 'type _ unsafe.Pointer' >> ${OUT}\n # will all have a leading underscore.\n grep -v '^// ' gen-sysinfo.go | \\\n   grep -v '^func' | \\\n+  grep -v '^var' | \\\n   grep -v '^type _timeval ' | \\\n   grep -v '^type _timespec_t ' | \\\n   grep -v '^type _timespec ' | \\"}, {"sha": "fb11826420054eafef9e459777c82e4d2c9d6973", "filename": "libgo/sysinfo.c", "status": "modified", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf2f198ce23f6859ccad3bf8b751cfa412da235/libgo%2Fsysinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf2f198ce23f6859ccad3bf8b751cfa412da235/libgo%2Fsysinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsysinfo.c?ref=fbf2f198ce23f6859ccad3bf8b751cfa412da235", "patch": "@@ -289,3 +289,212 @@ enum {\n   epoll_data_offset = offsetof(struct epoll_event, data)\n };\n #endif\n+\n+// The following section introduces explicit references to types and\n+// constants of interest to support bootstrapping libgo using a\n+// compiler that doesn't support -fdump-go-spec (e.g., clang), via\n+// DWARF-based tools. This process is made more difficult due to the\n+// fact that clang tries hard to omit types/constants from DWARF if it\n+// can't find explicit references to them, so here we make sure that\n+// key items are mentioned in ways that will force them into the\n+// generated DWARF.\n+\n+#if defined(__clang__)\n+\n+// Make a reference to a type\n+#define TREF(typ) typ typ ## ref\n+\n+// Make a reference to an opaque type\n+#define OTREF(typ) typ *typ ## ref\n+\n+// Make a reference to a struct tag\n+#define SREF(stag) struct stag stag ## ref\n+\n+// Make a reference to an enum literal\n+#define EREF(elit) unsigned elit ## fn(unsigned x) { return x == elit ? 1 : 0; }\n+\n+//......................................................................\n+\n+// From dirent.h\n+SREF(dirent);\n+SREF(dirent64);\n+OTREF(DIR);\n+\n+// From fcntl.h\n+SREF(flock);\n+SREF(flock64);\n+\n+// From ffi headers\n+SREF(_ffi_type);\n+TREF(ffi_cif);\n+TREF(ffi_abi);\n+TREF(ffi_status);\n+EREF(FFI_OK);\n+\n+// From grp.h\n+SREF(group);\n+\n+#if defined(HAVE_LINUX_FILTER_H)\n+// From linux/filter.h\n+SREF(sock_filter);\n+SREF(sock_fprog);\n+#endif\n+\n+// From linux/if.h\n+EREF(IFF_UP);\n+\n+#if defined(HAVE_LINUX_IF_ADDR_H)\n+// From linux/if_addr.h\n+SREF(ifaddrmsg);\n+EREF(IFA_ADDRESS);\n+#endif\n+\n+#if defined(HAVE_LINUX_RTNETLINK_H)\n+// From linux/if_link.h\n+EREF(IFLA_ADDRESS);\n+#endif\n+\n+// From in.h, in6.h, icmp6.h\n+SREF(ip_mreq);\n+SREF(ip_mreqn);\n+SREF(ipv6_mreq);\n+SREF(ip6_mtuinfo);\n+SREF(icmp6_filter);\n+SREF(in_pktinfo);\n+EREF(IPPROTO_TCP);\n+\n+#if defined(HAVE_LINUX_RTNETLINK_H)\n+// From linux/rtnetlink.h\n+SREF(rtgenmsg);\n+SREF(rtmsg);\n+SREF(ifinfomsg);\n+SREF(rtattr);\n+SREF(rtnexthop);\n+EREF(RTM_BASE);\n+EREF(RTN_UNSPEC);\n+#endif\n+\n+// From netdb.h\n+SREF(addrinfo);\n+\n+// From netlink.h\n+SREF(nlattr);\n+SREF(nlmsgerr);\n+\n+// From pthread.h and related\n+TREF(pthread_attr_t);\n+TREF(pthread_t);\n+TREF(pthread_mutex_t);\n+TREF(pthread_mutexattr_t);\n+\n+// From pwd.h\n+SREF(passwd);\n+\n+// From signal.h and related\n+TREF(sigset_t);\n+TREF(siginfo_t);\n+TREF(stack_t);\n+SREF(sigaction);\n+SREF(sigstack);\n+EREF(SI_USER);\n+EREF(FPE_INTOVF);\n+EREF(BUS_ADRALN);\n+EREF(SS_ONSTACK);\n+EREF(SEGV_MAPERR);\n+\n+// From stat.h\n+SREF(stat64);\n+\n+// From statfs.h\n+SREF(statfs);\n+SREF(statfs64);\n+\n+// From sysinfo.h\n+SREF(sysinfo);\n+\n+// From <sys/epoll.h>\n+#if defined(HAVE_SYS_EPOLL_H)\n+SREF(epoll_event);\n+EREF(EPOLLIN);\n+EREF(epoll_data_offset);\n+#endif\n+\n+#if defined(HAVE_SYS_MOUNT_H)\n+// From sys/mount.h\n+EREF(MS_PRIVATE);\n+EREF(MNT_FORCE);\n+#endif\n+\n+#if defined(HAVE_SYS_PTRACE_H)\n+// From <sys/ptrace.h>\n+SREF(pt_regs);\n+EREF(PTRACE_PEEKTEXT);\n+#endif\n+\n+// From sys/resource.h\n+SREF(rusage);\n+SREF(rlimit64);\n+EREF(RLIMIT_NOFILE);\n+EREF(PRIO_USER);\n+\n+// From sys/select.h\n+TREF(fd_set);\n+\n+// From sys/socket.h\n+SREF(msghdr);\n+SREF(cmsghdr);\n+SREF(ucred);\n+EREF(MSG_OOB);\n+EREF(SCM_RIGHTS);\n+EREF(SOCK_RAW);\n+EREF(SHUT_RD);\n+\n+// From sys/time.h and sys/times.h\n+SREF(timespec);\n+SREF(timeval);\n+SREF(itimerval);\n+SREF(tms);\n+EREF(ITIMER_PROF);\n+\n+#if defined(HAVE_SYS_TIMEX_H)\n+// From sys/timex.h\n+SREF(timex);\n+#endif\n+\n+// From sys/types.h\n+TREF(pid_t);\n+TREF(off_t);\n+TREF(loff_t);\n+TREF(size_t);\n+TREF(ssize_t);\n+TREF(mode_t);\n+TREF(dev_t);\n+TREF(time_t);\n+\n+// From sys/ucontext.h\n+TREF(ucontext_t);\n+\n+#if defined(HAVE_SYS_USER_H)\n+// From sys/user.h\n+SREF(user_regs_struct);\n+#endif\n+\n+#if defined(HAVE_SYS_UTSNAME_H)\n+// From sys/utsname.h\n+SREF(utsname);\n+#endif\n+\n+// From termios.h\n+SREF(termios);\n+\n+// From uio.h\n+SREF(iovec);\n+\n+// From utime.h\n+SREF(utimbuf);\n+\n+// From unistd.h\n+EREF(_PC_NAME_MAX);\n+EREF(_SC_GETPW_R_SIZE_MAX);\n+\n+#endif // clang"}]}