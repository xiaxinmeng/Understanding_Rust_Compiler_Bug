{"sha": "f87fca5d7f2568dc15387645e5126115b0b2583f", "node_id": "C_kwDOANBUbNoAKGY4N2ZjYTVkN2YyNTY4ZGMxNTM4NzY0NWU1MTI2MTE1YjBiMjU4M2Y", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-13T08:27:34Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:17:23Z"}, "message": "RISC-V: Add vmsne vv C++ tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vmsne_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vv_m-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vv_m-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vv_m-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vv_mu-3.C: New test.", "tree": {"sha": "82527af7c1b5aec8da573e906066617b10a6fd85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82527af7c1b5aec8da573e906066617b10a6fd85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f87fca5d7f2568dc15387645e5126115b0b2583f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87fca5d7f2568dc15387645e5126115b0b2583f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87fca5d7f2568dc15387645e5126115b0b2583f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87fca5d7f2568dc15387645e5126115b0b2583f/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecdbebde7cb9ab63ae62bdf9296fe118a507b172"}], "stats": {"total": 2628, "additions": 2628, "deletions": 0}, "files": [{"sha": "219a0392bda8f8cc911bc167e775d3cafbdd549f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-1.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "bd707942574e998fb756e15593ddcd5c42ed650d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-2.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "dbb663ca5335d181424b24934dd5d5e118fabadc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv-3.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "29a26e26f4ea97b3912f05bdfb0fae50ac0eabdf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv_m-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-1.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "abe730c38149b7942c8cf60f9965cb266c1de490", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv_m-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-2.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "9806837dae174be005632e22f849b5f821ca6649", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv_m-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_m-3.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "eec796b499b5fc53dc701576097e4cc3b2e259ae", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv_mu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-1.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "c754f83402bd0173e5b957d5fa59e61855c72142", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv_mu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-2.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "c94a9d2011c9e5763283b97b5d03ff47928b0a7f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vv_mu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87fca5d7f2568dc15387645e5126115b0b2583f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vv_mu-3.C?ref=f87fca5d7f2568dc15387645e5126115b0b2583f", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}]}