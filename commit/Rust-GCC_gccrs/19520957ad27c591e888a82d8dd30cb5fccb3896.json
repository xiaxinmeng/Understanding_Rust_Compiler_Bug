{"sha": "19520957ad27c591e888a82d8dd30cb5fccb3896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1MjA5NTdhZDI3YzU5MWU4ODhhODJkOGRkMzBjYjVmY2NiMzg5Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-11-06T09:05:03Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-11-06T09:05:03Z"}, "message": "Fix test-suite fallout of default -Wreturn-type.\n\n2017-11-06  Martin Liska  <mliska@suse.cz>\n\n\t* c-c++-common/Wimplicit-fallthrough-8.c: Return a value for\n\tfunctions with non-void return type, or change type to void, or\n\tadd -Wno-return-type for test.\n\t* c-c++-common/asan/pr63638.c (f): Likewise.\n\t* c-c++-common/goacc/parallel-1.c (firstprivate): Likewise.\n\t* c-c++-common/gomp/sink-1.c (depend): Likewise.\n\t* c-c++-common/missing-symbol.c: Likewise.\n\t* c-c++-common/pr36513-2.c (main2): Likewise.\n\t* c-c++-common/pr36513.c (main1): Likewise.\n\t* c-c++-common/pr49706-2.c: Likewise.\n\t* c-c++-common/pr65120.c: Likewise.\n\t* c-c++-common/tm/volatile-1.c (f): Likewise.\n\t* c-c++-common/vector-1.c (f): Likewise.\n\t* c-c++-common/vector-2.c (f): Likewise.\n\t* g++.dg/abi/abi-tag14.C (f): Likewise.\n\t(g): Likewise.\n\t* g++.dg/abi/abi-tag18.C (f): Likewise.\n\t* g++.dg/abi/abi-tag18a.C (f): Likewise.\n\t* g++.dg/abi/covariant2.C (struct c3): Likewise.\n\t(struct c7): Likewise.\n\t* g++.dg/abi/covariant3.C (c1::f6): Likewise.\n\t* g++.dg/abi/mangle7.C (f1): Likewise.\n\t* g++.dg/asan/pr81340.C (class e): Likewise.\n\t(e::f): Likewise.\n\t* g++.dg/concepts/fn8.C (struct S): Likewise.\n\t* g++.dg/concepts/pr65575.C (f): Likewise.\n\t* g++.dg/concepts/template-parm11.C (f): Likewise.\n\t* g++.dg/conversion/op6.C: Likewise.\n\t* g++.dg/cpp0x/Wunused-variable-1.C (foo): Likewise.\n\t* g++.dg/cpp0x/access01.C: Likewise.\n\t* g++.dg/cpp0x/alignas3.C (class alignas): Likewise.\n\t* g++.dg/cpp0x/auto2.C (f): Likewise.\n\t(struct A): Likewise.\n\t(main): Likewise.\n\t* g++.dg/cpp0x/constexpr-array17.C (struct D): Likewise.\n\t* g++.dg/cpp0x/constexpr-defarg2.C (a): Likewise.\n\t(B::foo): Likewise.\n\t(B::bar): Likewise.\n\t* g++.dg/cpp0x/constexpr-memfn1.C (struct Y): Likewise.\n\t* g++.dg/cpp0x/dc1.C (struct D): Likewise.\n\t* g++.dg/cpp0x/dc3.C (struct D): Likewise.\n\t* g++.dg/cpp0x/decltype12.C: Likewise.\n\t* g++.dg/cpp0x/decltype17.C (main): Likewise.\n\t* g++.dg/cpp0x/decltype3.C: Likewise.\n\t* g++.dg/cpp0x/decltype41.C (struct C): Likewise.\n\t(struct D): Likewise.\n\t* g++.dg/cpp0x/defaulted28.C (f): Likewise.\n\t* g++.dg/cpp0x/enum_base3.C (struct D): Likewise.\n\t* g++.dg/cpp0x/gen-attrs-4.C (five): Likewise.\n\t* g++.dg/cpp0x/initlist96.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-58566.C (struct A): Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-conv10.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-conv12.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-defarg3.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-ice3.C (Klass::dostuff): Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-ice5.C (foo): Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-nested2.C (f1): Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-template12.C (class X): Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-template2.C (struct T): Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-this12.C (struct A): Likewise.\n\t* g++.dg/cpp0x/nolinkage1.C (main): Likewise.\n\t* g++.dg/cpp0x/nolinkage1a.cc (dummy): Likewise.\n\t* g++.dg/cpp0x/nsdmi-template5.C: Likewise.\n\t* g++.dg/cpp0x/parse1.C (B::B): Likewise.\n\t* g++.dg/cpp0x/pr34054.C (foo): Likewise.\n\t* g++.dg/cpp0x/pr47416.C: Likewise.\n\t* g++.dg/cpp0x/pr58781.C: Likewise.\n\t* g++.dg/cpp0x/pr70538.C: Likewise.\n\t* g++.dg/cpp0x/pr81325.C: Likewise.\n\t* g++.dg/cpp0x/range-for13.C (begin): Likewise.\n\t(end): Likewise.\n\t* g++.dg/cpp0x/range-for14.C (begin): Likewise.\n\t(end): Likewise.\n\t* g++.dg/cpp0x/rv2n.C (test2_18): Likewise.\n\t(test2_28): Likewise.\n\t(test2_38): Likewise.\n\t(test2_58): Likewise.\n\t(test2_68): Likewise.\n\t(test2_78): Likewise.\n\t* g++.dg/cpp0x/rv3n.C (test3_128): Likewise.\n\t* g++.dg/cpp0x/static_assert10.C (foo): Likewise.\n\t* g++.dg/cpp0x/static_assert11.C (struct A): Likewise.\n\t* g++.dg/cpp0x/static_assert12.C: Likewise.\n\t* g++.dg/cpp0x/static_assert13.C: Likewise.\n\t* g++.dg/cpp0x/trailing1.C (struct A): Likewise.\n\t* g++.dg/cpp0x/trailing5.C (foo): Likewise.\n\t(bar): Likewise.\n\t* g++.dg/cpp0x/variadic114.C: Likewise.\n\t* g++.dg/cpp0x/variadic57.C (Dims...>::foo): Likewise.\n\t(bar): Likewise.\n\t* g++.dg/cpp0x/variadic65.C: Likewise.\n\t* g++.dg/cpp0x/variadic66.C (bind): Likewise.\n\t* g++.dg/cpp0x/variadic97.C: Likewise.\n\t* g++.dg/cpp0x/variadic98.C (__attribute__): Likewise.\n\t* g++.dg/cpp1y/auto-fn11.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn29.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn38.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-return2.C: Likewise.\n\t* g++.dg/cpp1y/lambda-init7.C (foo): Likewise.\n\t* g++.dg/cpp1y/pr63996.C: Likewise.\n\t* g++.dg/cpp1y/pr65202.C: Likewise.\n\t* g++.dg/cpp1y/pr66443-cxx14.C (Ok): Likewise.\n\t* g++.dg/cpp1y/pr79253.C (struct D): Likewise.\n\t* g++.dg/cpp1y/static_assert1.C: Likewise.\n\t* g++.dg/cpp1y/static_assert2.C: Likewise.\n\t* g++.dg/cpp1y/var-templ44.C: Likewise.\n\t* g++.dg/cpp1z/fold6.C (f): Likewise.\n\t* g++.dg/cpp1z/inline-var2.C (foo): Likewise.\n\t* g++.dg/cpp1z/lambda-this1.C (struct B): Likewise.\n\t* g++.dg/cpp1z/static_assert-nomsg.C: Likewise.\n\t* g++.dg/debug/dwarf-eh-personality-1.C (foobar): Likewise.\n\t* g++.dg/debug/dwarf2/dwarf4-typedef.C (struct B): Likewise.\n\t* g++.dg/debug/dwarf2/icf.C: Likewise.\n\t* g++.dg/debug/dwarf2/pr61433.C (main): Likewise.\n\t* g++.dg/debug/nullptr01.C (g): Likewise.\n\t* g++.dg/debug/pr16792.C (foo): Likewise.\n\t* g++.dg/debug/pr46241.C (class btCollisionWorld): Likewise.\n\t* g++.dg/debug/pr46338.C (struct S): Likewise.\n\t* g++.dg/debug/pr47106.C (baz): Likewise.\n\t(bar): Likewise.\n\t(foo): Likewise.\n\t* g++.dg/debug/pr71057.C (fn1): Likewise.\n\t* g++.dg/debug/pr71432.C (class CLIParameterType): Likewise.\n\t(CLIParameterType::checkSwitched): Likewise.\n\t* g++.dg/debug/pr80461.C (struct B): Likewise.\n\t* g++.dg/dfp/44473-1.C (bar): Likewise.\n\t* g++.dg/dfp/44473-2.C (bar): Likewise.\n\t(foo): Likewise.\n\t* g++.dg/eh/builtin1.C: Likewise.\n\t* g++.dg/eh/builtin2.C: Likewise.\n\t* g++.dg/eh/builtin3.C: Likewise.\n\t* g++.dg/eh/pr45569.C (j): Likewise.\n\t* g++.dg/eh/unwind2.C: Likewise.\n\t* g++.dg/expr/bitfield11.C: Likewise.\n\t* g++.dg/expr/static_cast7.C (f): Likewise.\n\t* g++.dg/ext/altivec-14.C: Likewise.\n\t* g++.dg/ext/asm13.C (fn1): Likewise.\n\t* g++.dg/ext/builtin-object-size3.C: Likewise.\n\t* g++.dg/ext/has_nothrow_assign_odr.C (main): Likewise.\n\t(S::operator=): Likewise.\n\t* g++.dg/ext/label7.C (f): Likewise.\n\t* g++.dg/ext/label8.C (f): Likewise.\n\t* g++.dg/ext/tmplattr7.C (test): Likewise.\n\t* g++.dg/ext/vector8.C (f): Likewise.\n\t* g++.dg/ext/visibility/anon1.C: Likewise.\n\t* g++.dg/ext/visibility/anon2.C (f): Likewise.\n\t* g++.dg/ext/visibility/namespace1.C (__attribute): Likewise.\n\t* g++.dg/ext/vla16.C (fn1): Likewise.\n\t* g++.dg/goacc/reference.C: Likewise.\n\t* g++.dg/gomp/pr37189.C: Likewise.\n\t* g++.dg/gomp/pr39495-1.C: Likewise.\n\t* g++.dg/gomp/pr39495-2.C: Likewise.\n\t* g++.dg/gomp/pr82054.C: Likewise.\n\t* g++.dg/inherit/covariant10.C (struct c6): Likewise.\n\t(struct c17): Likewise.\n\t* g++.dg/inherit/covariant11.C (struct c1): Likewise.\n\t(struct c3): Likewise.\n\t(struct c11): Likewise.\n\t(struct c15): Likewise.\n\t* g++.dg/inherit/protected1.C (A::operator==): Likewise.\n\t* g++.dg/init/inline1.C (struct A): Likewise.\n\t* g++.dg/init/new18.C: Likewise.\n\t* g++.dg/init/reference2.C (f): Likewise.\n\t* g++.dg/init/reference3.C: Likewise.\n\t* g++.dg/init/switch1.C (f): Likewise.\n\t* g++.dg/ipa/devirt-10.C (struct wxDCBase): Likewise.\n\t* g++.dg/ipa/devirt-13.C (main): Likewise.\n\t* g++.dg/ipa/devirt-14.C (main): Likewise.\n\t* g++.dg/ipa/devirt-15.C (main): Likewise.\n\t* g++.dg/ipa/devirt-16.C (main): Likewise.\n\t* g++.dg/ipa/devirt-17.C (main): Likewise.\n\t* g++.dg/ipa/devirt-18.C (main): Likewise.\n\t* g++.dg/ipa/devirt-19.C: Likewise.\n\t* g++.dg/ipa/devirt-21.C (main): Likewise.\n\t* g++.dg/ipa/devirt-23.C (main): Likewise.\n\t* g++.dg/ipa/devirt-38.C: Likewise.\n\t* g++.dg/ipa/devirt-40.C (A::m_fn1): Likewise.\n\t* g++.dg/ipa/devirt-41.C (main): Likewise.\n\t* g++.dg/ipa/devirt-42.C (main): Likewise.\n\t* g++.dg/ipa/devirt-44.C (struct A): Likewise.\n\t(main): Likewise.\n\t* g++.dg/ipa/devirt-45.C (struct A): Likewise.\n\t(main): Likewise.\n\t* g++.dg/ipa/devirt-48.C (struct B): Likewise.\n\t(struct D): Likewise.\n\t* g++.dg/ipa/devirt-52.C: Likewise.\n\t* g++.dg/ipa/nothrow-1.C (main): Likewise.\n\t* g++.dg/ipa/pr43812.C (LocalSurface::bbox): Likewise.\n\t* g++.dg/ipa/pr44372.C: Likewise.\n\t* g++.dg/ipa/pr45572-1.C (fgetc_unlocked): Likewise.\n\t(putc_unlocked): Likewise.\n\t(getline): Likewise.\n\t(ferror_unlocked): Likewise.\n\t* g++.dg/ipa/pr58371.C: Likewise.\n\t* g++.dg/ipa/pr59176.C: Likewise.\n\t* g++.dg/ipa/pr60640-1.C (class G): Likewise.\n\t* g++.dg/ipa/pr61540.C (struct top): Likewise.\n\t* g++.dg/ipa/pr63470.C (class FTjackSupport): Likewise.\n\t* g++.dg/ipa/pr63587-1.C: Likewise.\n\t* g++.dg/ipa/pr63587-2.C: Likewise.\n\t* g++.dg/ipa/pr63838.C (__attribute__): Likewise.\n\t* g++.dg/ipa/pr63894.C (J::m_fn3): Likewise.\n\t* g++.dg/ipa/pr64068.C (class A): Likewise.\n\t(A::m_fn2): Likewise.\n\t(class C): Likewise.\n\t* g++.dg/ipa/pr64896.C (struct D): Likewise.\n\t* g++.dg/ipa/pr65002.C: Likewise.\n\t* g++.dg/ipa/pr65008.C (__attribute__): Likewise.\n\t* g++.dg/ipa/pr65465.C (struct D): Likewise.\n\t* g++.dg/ipa/pr66896.C (struct A): Likewise.\n\t* g++.dg/ipa/pr68851.C (class G): Likewise.\n\t(C::checkPseudoClass): Likewise.\n\t* g++.dg/ipa/pr78211.C: Likewise.\n\t* g++.dg/ipa/pr79931.C (AttrImpl::insertBefore): Likewise.\n\t* g++.dg/ipa/pure-const-1.C (main): Likewise.\n\t* g++.dg/ipa/pure-const-2.C (main): Likewise.\n\t* g++.dg/ipa/pure-const-3.C (main): Likewise.\n\t* g++.dg/ipa/remref-1.C (main): Likewise.\n\t* g++.dg/ipa/remref-2.C (main): Likewise.\n\t* g++.dg/lookup/builtin2.C (f): Likewise.\n\t* g++.dg/lookup/crash3.C (struct A): Likewise.\n\t(struct B): Likewise.\n\t(crash): Likewise.\n\t* g++.dg/lookup/friend20.C: Likewise.\n\t* g++.dg/lookup/pr80891-5.C (vf2_subgraph_iso): Likewise.\n\t* g++.dg/lookup/struct2.C (A::c): Likewise.\n\t* g++.dg/lto/20080709_0.C (f): Likewise.\n\t* g++.dg/lto/20080907_0.C: Likewise.\n\t* g++.dg/lto/20080915_0.C (struct Baz): Likewise.\n\t* g++.dg/lto/20080916_0.C (g): Likewise.\n\t* g++.dg/lto/20081022_0.C (main): Likewise.\n\t* g++.dg/lto/20081023_0.C (main): Likewise.\n\t* g++.dg/lto/20081118_0.C (foo::method): Likewise.\n\t* g++.dg/lto/20081118_1.C (bar::method): Likewise.\n\t* g++.dg/lto/20081120-1_0.C: Likewise.\n\t* g++.dg/lto/20081120-1_1.C: Likewise.\n\t* g++.dg/lto/20081127_1.C (main): Likewise.\n\t* g++.dg/lto/20081217-2_0.C (struct A): Likewise.\n\t* g++.dg/lto/20090303_0.C: Likewise.\n\t* g++.dg/lto/20090311-1_0.C: Likewise.\n\t* g++.dg/lto/20090312_0.C: Likewise.\n\t* g++.dg/lto/20090315_0.C (main): Likewise.\n\t* g++.dg/lto/20091002-1_0.C: Likewise.\n\t* g++.dg/lto/20091002-2_0.C (class DataArray): Likewise.\n\t* g++.dg/lto/20091002-3_0.C (class DataArray): Likewise.\n\t* g++.dg/lto/20091004-1_0.C: Likewise.\n\t* g++.dg/lto/20091004-2_0.C: Likewise.\n\t* g++.dg/lto/20091004-3_1.C (All_Torus_Intersections): Likewise.\n\t* g++.dg/lto/20100721-1_0.C (__gthread_active_p): Likewise.\n\t* g++.dg/lto/20101010-1_0.C: Likewise.\n\t* g++.dg/lto/20101010-2_0.C: Likewise.\n\t* g++.dg/lto/pr45679-1_0.C: Likewise.\n\t* g++.dg/lto/pr45679-1_1.C: Likewise.\n\t* g++.dg/lto/pr45679-2_0.C: Likewise.\n\t* g++.dg/lto/pr48042_0.C (B::x): Likewise.\n\t* g++.dg/lto/pr51650-1_0.C (fn): Likewise.\n\t(main): Likewise.\n\t* g++.dg/lto/pr51650-3_0.C (fn): Likewise.\n\t(main): Likewise.\n\t* g++.dg/lto/pr63270_1.C: Likewise.\n\t* g++.dg/lto/pr65193_0.C: Likewise.\n\t* g++.dg/lto/pr65302_0.C: Likewise.\n\t* g++.dg/lto/pr65316_0.C: Likewise.\n\t* g++.dg/lto/pr65475c_0.C: Likewise.\n\t* g++.dg/lto/pr65549_0.C (main): Likewise.\n\t* g++.dg/lto/pr69077_0.C (cWeightedStdDev::netPack): Likewise.\n\t* g++.dg/lto/pr69589_0.C: Likewise.\n\t* g++.dg/opt/combine.C (qvariant_cast): Likewise.\n\t(QScriptDebuggerBackendPrivate::trace): Likewise.\n\t* g++.dg/opt/complex3.C (j): Likewise.\n\t* g++.dg/opt/covariant1.C (struct T): Likewise.\n\t* g++.dg/opt/declone3.C (Item::m_fn1): Likewise.\n\t* g++.dg/opt/dump1.C (__attribute__): Likewise.\n\t* g++.dg/opt/inline15.C (struct C): Likewise.\n\t(fn2): Likewise.\n\t* g++.dg/opt/local1.C (h): Likewise.\n\t* g++.dg/opt/memcpy1.C (csBoxClipper::Clip): Likewise.\n\t* g++.dg/opt/new1.C: Likewise.\n\t* g++.dg/opt/nrv8.C (main): Likewise.\n\t* g++.dg/opt/pr23299.C (struct A): Likewise.\n\t(struct B): Likewise.\n\t(struct C): Likewise.\n\t* g++.dg/opt/pr27826.C (struct Geometry): Likewise.\n\t* g++.dg/opt/pr44919.C (back_inserter): Likewise.\n\t* g++.dg/opt/pr47615.C (main): Likewise.\n\t* g++.dg/opt/pr55329.C (struct A): Likewise.\n\t* g++.dg/opt/pr61456.C (Set): Likewise.\n\t* g++.dg/opt/pr65003.C (D::foo): Likewise.\n\t(F::foo): Likewise.\n\t* g++.dg/opt/pr65554.C: Likewise.\n\t* g++.dg/opt/pr69432.C (struct C): Likewise.\n\t* g++.dg/opt/pr78373.C (struct D): Likewise.\n\t(Traits>::m_fn4): Likewise.\n\t* g++.dg/opt/pr79267.C (struct F): Likewise.\n\t* g++.dg/opt/pr82159-2.C: Likewise.\n\t* g++.dg/other/array3.C (reserve): Likewise.\n\t* g++.dg/other/crash-5.C (f): Likewise.\n\t* g++.dg/other/crash-8.C: Likewise.\n\t* g++.dg/other/error34.C (S): Likewise.\n\t* g++.dg/other/pr22003.C (c3::func): Likewise.\n\t* g++.dg/other/pr24623.C (RefCountPointer): Likewise.\n\t* g++.dg/other/pr29610.C (struct __normal_iterator): Likewise.\n\t(Painter::for_each): Likewise.\n\t(Painter::redraw_window): Likewise.\n\t* g++.dg/other/pr42645-1.C (struct S): Likewise.\n\t* g++.dg/other/pr42645-2.C (foo): Likewise.\n\t(f3): Likewise.\n\t* g++.dg/other/pr52048.C: Likewise.\n\t* g++.dg/other/typedef3.C (XalanCProcessor::getParseOption): Likewise.\n\t* g++.dg/overload/defarg4.C (class foo): Likewise.\n\t(bar::Initialize): Likewise.\n\t* g++.dg/overload/operator5.C (equalIgnoringCase): Likewise.\n\t* g++.dg/overload/ref-conv1.C: Likewise.\n\t* g++.dg/overload/template5.C (test): Likewise.\n\t* g++.dg/parse/crash40.C (class AAA): Likewise.\n\t* g++.dg/parse/crash61.C: Likewise.\n\t* g++.dg/parse/crash67.C: Likewise.\n\t* g++.dg/parse/ctor5.C: Likewise.\n\t* g++.dg/parse/defarg4.C (Foo): Likewise.\n\t* g++.dg/parse/defarg6.C: Likewise.\n\t* g++.dg/parse/error5.C (class Foo): Likewise.\n\t* g++.dg/parse/expr2.C (foo): Likewise.\n\t* g++.dg/parse/friend7.C: Likewise.\n\t* g++.dg/parse/namespace1.C (bar): Likewise.\n\t* g++.dg/parse/namespace9.C (g): Likewise.\n\t* g++.dg/parse/ret-type2.C: Likewise.\n\t* g++.dg/parse/typedef8.C (foo): Likewise.\n\t* g++.dg/pch/static-1.C (LocalStaticTest): Likewise.\n\t(main): Likewise.\n\t* g++.dg/plugin/diagnostic-test-expressions-1.C (test_structure_references): Likewise.\n\t(test_postfix_incdec): Likewise.\n\t(test_sizeof): Likewise.\n\t(test_alignof): Likewise.\n\t(test_prefix_incdec): Likewise.\n\t* g++.dg/plugin/dumb-plugin-test-1.C (func): Likewise.\n\t* g++.dg/plugin/self-assign-test-1.C (func): Likewise.\n\t* g++.dg/plugin/self-assign-test-2.C (func): Likewise.\n\t* g++.dg/plugin/self-assign-test-3.C (func): Likewise.\n\t* g++.dg/pr55513.C (main): Likewise.\n\t* g++.dg/pr55604.C (main): Likewise.\n\t* g++.dg/pr57662.C: Likewise.\n\t* g++.dg/pr58389.C (F::m_fn1): Likewise.\n\t* g++.dg/pr59510.C: Likewise.\n\t* g++.dg/pr67989.C: Likewise.\n\t* g++.dg/pr70590-2.C: Likewise.\n\t* g++.dg/pr70590.C: Likewise.\n\t* g++.dg/pr70965.C (foo): Likewise.\n\t* g++.dg/pr77550.C: Likewise.\n\t* g++.dg/pr80287.C (struct A): Likewise.\n\t* g++.dg/pr80707.C (A::m_fn1): Likewise.\n\t* g++.dg/pr81194.C: Likewise.\n\t* g++.dg/spellcheck-identifiers.C: Likewise.\n\t* g++.dg/tc1/dr152.C: Likewise.\n\t* g++.dg/template/aggr-init1.C (CreateA): Likewise.\n\t* g++.dg/template/anon1.C (struct x): Likewise.\n\t(struct vector): Likewise.\n\t* g++.dg/template/array29.C: Likewise.\n\t* g++.dg/template/array7.C (bar): Likewise.\n\t* g++.dg/template/canon-type-8.C: Likewise.\n\t* g++.dg/template/conv1.C (First::Foo): Likewise.\n\t* g++.dg/template/crash107.C: Likewise.\n\t* g++.dg/template/crash23.C (f): Likewise.\n\t* g++.dg/template/crash8.C (struct bar): Likewise.\n\t* g++.dg/template/defarg4.C (struct A): Likewise.\n\t* g++.dg/template/dependent-expr9.C: Likewise.\n\t* g++.dg/template/error10.C (Btest): Likewise.\n\t* g++.dg/template/friend32.C (f): Likewise.\n\t* g++.dg/template/init6.C (Graph::Inner::get): Likewise.\n\t(main): Likewise.\n\t* g++.dg/template/memfriend7.C (A::h): Likewise.\n\t* g++.dg/template/new10.C (Analyzer::ReadDictionary): Likewise.\n\t* g++.dg/template/nontype12.C (baz): Likewise.\n\t* g++.dg/template/overload12.C (foo2): Likewise.\n\t* g++.dg/template/overload5.C (foo::f): Likewise.\n\t* g++.dg/template/overload8.C (struct A): Likewise.\n\t* g++.dg/template/partial10.C (fn): Likewise.\n\t(main): Likewise.\n\t* g++.dg/template/partial9.C (f): Likewise.\n\t* g++.dg/template/qual1.C (shift_compare): Likewise.\n\t* g++.dg/template/show-template-tree-3.C: Likewise.\n\t* g++.dg/template/sizeof8.C (S<sizeof): Likewise.\n\t* g++.dg/template/sizeof9.C (d): Likewise.\n\t* g++.dg/template/spec6.C: Likewise.\n\t* g++.dg/template/spec7.C (h): Likewise.\n\t* g++.dg/template/typedef8.C: Likewise.\n\t* g++.dg/template/using20.C (f): Likewise.\n\t* g++.dg/template/vla1.C (label): Likewise.\n\t* g++.dg/tm/cgraph_edge.C: Likewise.\n\t* g++.dg/tm/pr46646.C: Likewise.\n\t* g++.dg/tm/pr47554.C (class list): Likewise.\n\t* g++.dg/tm/pr47573.C (getStringHeight): Likewise.\n\t* g++.dg/tm/unsafe1.C (f): Likewise.\n\t* g++.dg/tm/unsafe2.C (g): Likewise.\n\t* g++.dg/torture/pr70971.C: Likewise.\n\t* g++.dg/torture/20070621-1.C: Likewise.\n\t* g++.dg/torture/20090329-1.C: Likewise.\n\t* g++.dg/torture/20141013.C: Likewise.\n\t* g++.dg/torture/pr33134.C (fxsaveGIF): Likewise.\n\t* g++.dg/torture/pr33340.C (new): Likewise.\n\t* g++.dg/torture/pr33627.C (class pf_Frag): Likewise.\n\t* g++.dg/torture/pr34222.C (readFloat): Likewise.\n\t* g++.dg/torture/pr34241.C (test): Likewise.\n\t* g++.dg/torture/pr34641.C: Likewise.\n\t* g++.dg/torture/pr34850.C (OctetString::operator^=): Likewise.\n\t* g++.dg/torture/pr35164-1.C: Likewise.\n\t* g++.dg/torture/pr36745.C: Likewise.\n\t* g++.dg/torture/pr38705.C (S::bar): Likewise.\n\t* g++.dg/torture/pr38811.C (AbcAbcdTracer::TestIsoAbcde): Likewise.\n\t* g++.dg/torture/pr39362.C: Likewise.\n\t* g++.dg/torture/pr39732.C (f): Likewise.\n\t* g++.dg/torture/pr40991.C: Likewise.\n\t* g++.dg/torture/pr41775.C: Likewise.\n\t* g++.dg/torture/pr42183.C: Likewise.\n\t* g++.dg/torture/pr42450.C: Likewise.\n\t* g++.dg/torture/pr42704.C: Likewise.\n\t* g++.dg/torture/pr42760.C (baz): Likewise.\n\t(bar): Likewise.\n\t* g++.dg/torture/pr42773.C (Cell::obscuringCells): Likewise.\n\t* g++.dg/torture/pr42883.C: Likewise.\n\t* g++.dg/torture/pr43905.C (struct Matrix): Likewise.\n\t* g++.dg/torture/pr44148.C: Likewise.\n\t* g++.dg/torture/pr44295.C: Likewise.\n\t* g++.dg/torture/pr44357.C: Likewise.\n\t* g++.dg/torture/pr44813.C: Likewise.\n\t* g++.dg/torture/pr45580.C: Likewise.\n\t* g++.dg/torture/pr45874.C (Mpeg2FrameConstructor::ParsePictureHeader): Likewise.\n\t* g++.dg/torture/pr45877.C: Likewise.\n\t* g++.dg/torture/pr46383.C: Likewise.\n\t* g++.dg/torture/pr46469.C (__attribute__): Likewise.\n\t(identifierByPthreadHandle): Likewise.\n\t* g++.dg/torture/pr47313.C: Likewise.\n\t* g++.dg/torture/pr48271.C: Likewise.\n\t* g++.dg/torture/pr49615.C (Dispatch): Likewise.\n\t(C::f): Likewise.\n\t* g++.dg/torture/pr49770.C (main): Likewise.\n\t* g++.dg/torture/pr49938.C: Likewise.\n\t* g++.dg/torture/pr51436.C: Likewise.\n\t* g++.dg/torture/pr51482.C (anim_track_bez_wvect::tangent): Likewise.\n\t* g++.dg/torture/pr51737.C (id_state::start_file): Likewise.\n\t* g++.dg/torture/pr51959.C: Likewise.\n\t* g++.dg/torture/pr52772.C (class c6): Likewise.\n\t* g++.dg/torture/pr52918-2.C (__cxa_allocate_exception): Likewise.\n\t* g++.dg/torture/pr53011.C: Likewise.\n\t* g++.dg/torture/pr53602.C: Likewise.\n\t* g++.dg/torture/pr53752.C: Likewise.\n\t* g++.dg/torture/pr54838.C: Likewise.\n\t* g++.dg/torture/pr54902.C: Likewise.\n\t* g++.dg/torture/pr56029.C: Likewise.\n\t* g++.dg/torture/pr56768.C (operator!=): Likewise.\n\t* g++.dg/torture/pr57107.C: Likewise.\n\t* g++.dg/torture/pr57140.C: Likewise.\n\t* g++.dg/torture/pr57235.C: Likewise.\n\t* g++.dg/torture/pr58252.C: Likewise.\n\t* g++.dg/torture/pr58555.C: Likewise.\n\t* g++.dg/torture/pr59208.C (get_dbx_doc): Likewise.\n\t* g++.dg/torture/pr60438-1.C (foo): Likewise.\n\t* g++.dg/torture/pr60746.C (Two::run): Likewise.\n\t* g++.dg/torture/pr61554.C: Likewise.\n\t* g++.dg/torture/pr63419.C: Likewise.\n\t* g++.dg/torture/pr63476.C: Likewise.\n\t* g++.dg/torture/pr63512.C (C::m_fn3): Likewise.\n\t* g++.dg/torture/pr64282.C (class H): Likewise.\n\t* g++.dg/torture/pr64378.C (struct top): Likewise.\n\t* g++.dg/torture/pr64565.C: Likewise.\n\t* g++.dg/torture/pr64568-2.C: Likewise.\n\t* g++.dg/torture/pr64669.C (Lex::advance_one_char): Likewise.\n\t* g++.dg/torture/pr64686.C (B::m_fn1): Likewise.\n\t* g++.dg/torture/pr64978.C (B::m_fn2): Likewise.\n\t* g++.dg/torture/pr64995.C (A::m_fn2): Likewise.\n\t* g++.dg/torture/pr65655.C: Likewise.\n\t* g++.dg/torture/pr65851.C: Likewise.\n\t* g++.dg/torture/pr67055.C: Likewise.\n\t* g++.dg/torture/pr67191.C: Likewise.\n\t* g++.dg/torture/pr68852.C: Likewise.\n\t* g++.dg/torture/pr69264.C: Likewise.\n\t* g++.dg/torture/pr77674.C: Likewise.\n\t* g++.dg/torture/pr77947.C (B::m_fn2): Likewise.\n\t* g++.dg/torture/pr78268.C: Likewise.\n\t* g++.dg/torture/pr78507.C: Likewise.\n\t* g++.dg/torture/pr78692.C (F::g): Likewise.\n\t* g++.dg/torture/pr80171.C: Likewise.\n\t* g++.dg/torture/pr82154.C (class f): Likewise.\n\t(f::k): Likewise.\n\t* g++.dg/tree-ssa/copyprop.C: Likewise.\n\t* g++.dg/tree-ssa/pr22444.C: Likewise.\n\t* g++.dg/tree-ssa/pr23948.C (make_scheduler_request): Likewise.\n\t* g++.dg/tree-ssa/pr24172.C (dummy): Likewise.\n\t* g++.dg/tree-ssa/pr24351-3.C: Likewise.\n\t* g++.dg/tree-ssa/pr27283.C: Likewise.\n\t* g++.dg/tree-ssa/pr27291.C: Likewise.\n\t* g++.dg/tree-ssa/pr27548.C: Likewise.\n\t* g++.dg/tree-ssa/pr34355.C (Parse_Float): Likewise.\n\t* g++.dg/tree-ssa/pr42337.C: Likewise.\n\t* g++.dg/tree-ssa/pred-1.C (main): Likewise.\n\t* g++.dg/ubsan/pr65019.C (C::foo): Likewise.\n\t* g++.dg/ubsan/pr65583.C: Likewise.\n\t* g++.dg/vect/pr60836.cc (norm_): Likewise.\n\t* g++.dg/vect/pr68145.cc: Likewise.\n\t* g++.dg/vect/pr70729-nest.cc (my_alloc): Likewise.\n\t* g++.dg/vect/pr70729.cc (my_alloc): Likewise.\n\t* g++.dg/warn/Waddress-3.C: Likewise.\n\t* g++.dg/warn/Wconversion-null-2.C (warn_for___null): Likewise.\n\t* g++.dg/warn/Wnull-conversion-2.C (main): Likewise.\n\t* g++.dg/warn/Wparentheses-10.C: Likewise.\n\t* g++.dg/warn/Wparentheses-11.C: Likewise.\n\t* g++.dg/warn/Wparentheses-12.C: Likewise.\n\t* g++.dg/warn/Wparentheses-25.C: Likewise.\n\t* g++.dg/warn/Wparentheses-6.C: Likewise.\n\t* g++.dg/warn/Wparentheses-7.C: Likewise.\n\t* g++.dg/warn/Wparentheses-8.C: Likewise.\n\t* g++.dg/warn/Wparentheses-9.C: Likewise.\n\t* g++.dg/warn/Wshadow-5.C: Likewise.\n\t* g++.dg/warn/Wtype-limits-Wextra.C (ff): Likewise.\n\t(gg): Likewise.\n\t* g++.dg/warn/Wtype-limits-no.C (ff): Likewise.\n\t(gg): Likewise.\n\t* g++.dg/warn/Wtype-limits.C (ff): Likewise.\n\t(gg): Likewise.\n\t* g++.dg/warn/Wunused-local-typedefs.C: Likewise.\n\t* g++.dg/warn/Wzero-as-null-pointer-constant-5.C: Likewise.\n\t* g++.dg/warn/pmf1.C (a::f): Likewise.\n\t* g++.old-deja/g++.benjamin/p13417.C: Likewise.\n\t* g++.old-deja/g++.brendan/crash24.C (main): Likewise.\n\t* g++.old-deja/g++.ext/constructor.C: Likewise.\n\t* g++.old-deja/g++.ext/namedret1.C (f): Likewise.\n\t* g++.old-deja/g++.ext/namedret3.C: Likewise.\n\t* g++.old-deja/g++.ext/return1.C: Likewise.\n\t* g++.old-deja/g++.jason/anon4.C (main): Likewise.\n\t* g++.old-deja/g++.jason/enum6.C: Likewise.\n\t* g++.old-deja/g++.jason/lineno2.C (main): Likewise.\n\t* g++.old-deja/g++.jason/lineno3.C: Likewise.\n\t* g++.old-deja/g++.jason/lineno4.C: Likewise.\n\t* g++.old-deja/g++.jason/new2.C (main): Likewise.\n\t* g++.old-deja/g++.jason/new4.C (main): Likewise.\n\t* g++.old-deja/g++.jason/shadow1.C (main): Likewise.\n\t* g++.old-deja/g++.jason/tempcons.C (struct A): Likewise.\n\t* g++.old-deja/g++.jason/thunk2.C (main): Likewise.\n\t* g++.old-deja/g++.law/builtin1.C (main): Likewise.\n\t* g++.old-deja/g++.law/enum9.C: Likewise.\n\t* g++.old-deja/g++.law/except3.C: Likewise.\n\t* g++.old-deja/g++.law/init6.C: Likewise.\n\t* g++.old-deja/g++.law/profile1.C (main): Likewise.\n\t* g++.old-deja/g++.law/shadow2.C (main): Likewise.\n\t* g++.old-deja/g++.law/temps4.C (main): Likewise.\n\t* g++.old-deja/g++.mike/bool2.C (main): Likewise.\n\t* g++.old-deja/g++.mike/eh1.C: Likewise.\n\t* g++.old-deja/g++.mike/eh10.C: Likewise.\n\t* g++.old-deja/g++.mike/eh13.C (main): Likewise.\n\t* g++.old-deja/g++.mike/eh16.C: Likewise.\n\t* g++.old-deja/g++.mike/eh17.C: Likewise.\n\t* g++.old-deja/g++.mike/eh2.C: Likewise.\n\t* g++.old-deja/g++.mike/eh23.C: Likewise.\n\t* g++.old-deja/g++.mike/eh24.C: Likewise.\n\t* g++.old-deja/g++.mike/eh25.C: Likewise.\n\t* g++.old-deja/g++.mike/eh26.C: Likewise.\n\t* g++.old-deja/g++.mike/eh27.C: Likewise.\n\t* g++.old-deja/g++.mike/eh28.C: Likewise.\n\t* g++.old-deja/g++.mike/eh29.C: Likewise.\n\t* g++.old-deja/g++.mike/eh30.C: Likewise.\n\t* g++.old-deja/g++.mike/eh31.C: Likewise.\n\t* g++.old-deja/g++.mike/eh35.C: Likewise.\n\t* g++.old-deja/g++.mike/eh36.C: Likewise.\n\t* g++.old-deja/g++.mike/eh37.C: Likewise.\n\t* g++.old-deja/g++.mike/eh38.C: Likewise.\n\t* g++.old-deja/g++.mike/eh39.C: Likewise.\n\t* g++.old-deja/g++.mike/eh40.C: Likewise.\n\t* g++.old-deja/g++.mike/eh47.C: Likewise.\n\t* g++.old-deja/g++.mike/eh50.C: Likewise.\n\t* g++.old-deja/g++.mike/eh51.C: Likewise.\n\t* g++.old-deja/g++.mike/eh7.C: Likewise.\n\t* g++.old-deja/g++.mike/eh8.C: Likewise.\n\t* g++.old-deja/g++.mike/eh9.C: Likewise.\n\t* g++.old-deja/g++.mike/mangle1.C: Likewise.\n\t* g++.old-deja/g++.mike/p5958.C: Likewise.\n\t* g++.old-deja/g++.mike/p6004.C: Likewise.\n\t* g++.old-deja/g++.mike/p700.C: Likewise.\n\t* g++.old-deja/g++.mike/p7912.C: Likewise.\n\t* g++.old-deja/g++.mike/p811.C (main): Likewise.\n\t* g++.old-deja/g++.mike/virt4.C (main): Likewise.\n\t* g++.old-deja/g++.oliva/nameret1.C: Likewise.\n\t* g++.old-deja/g++.oliva/nameret2.C: Likewise.\n\t* g++.old-deja/g++.other/decl1.C (bar): Likewise.\n\t* g++.old-deja/g++.other/expr1.C (struct T): Likewise.\n\t(main): Likewise.\n\t* g++.old-deja/g++.other/inline8.C (main): Likewise.\n\t* g++.old-deja/g++.other/loop1.C: Likewise.\n\t* g++.old-deja/g++.other/syntax1.C (main): Likewise.\n\t* g++.old-deja/g++.pt/repo3.C (main): Likewise.\n\t* g++.old-deja/g++.robertl/eb27.C (main): Likewise.\n\t* g++.old-deja/g++.robertl/eb83.C (main): Likewise.\n\t* gcc.dg/pr44545.c: Likewise.\n\t* obj-c++.dg/comp-types-8.mm: Likewise.\n\t* obj-c++.dg/demangle-3.mm: Likewise.\n\t* obj-c++.dg/super-class-1.mm: Likewise.\n\nFrom-SVN: r254440", "tree": {"sha": "742ab2d8af513b70ab2a32fd07d2ab647320c22c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/742ab2d8af513b70ab2a32fd07d2ab647320c22c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19520957ad27c591e888a82d8dd30cb5fccb3896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19520957ad27c591e888a82d8dd30cb5fccb3896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19520957ad27c591e888a82d8dd30cb5fccb3896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19520957ad27c591e888a82d8dd30cb5fccb3896/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3e150d23a9b499387397c67c02e3976a37405e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e150d23a9b499387397c67c02e3976a37405e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e150d23a9b499387397c67c02e3976a37405e6"}], "stats": {"total": 1717, "additions": 1367, "deletions": 350}, "files": [{"sha": "fe5fcf48619831ccd1971c835ba9177672b17bdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 597, "deletions": 0, "changes": 597, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,3 +1,600 @@\n+2017-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/Wimplicit-fallthrough-8.c: Return a value for\n+\tfunctions with non-void return type, or change type to void, or\n+\tadd -Wno-return-type for test.\n+\t* c-c++-common/asan/pr63638.c (f): Likewise.\n+\t* c-c++-common/goacc/parallel-1.c (firstprivate): Likewise.\n+\t* c-c++-common/gomp/sink-1.c (depend): Likewise.\n+\t* c-c++-common/missing-symbol.c: Likewise.\n+\t* c-c++-common/pr36513-2.c (main2): Likewise.\n+\t* c-c++-common/pr36513.c (main1): Likewise.\n+\t* c-c++-common/pr49706-2.c: Likewise.\n+\t* c-c++-common/pr65120.c: Likewise.\n+\t* c-c++-common/tm/volatile-1.c (f): Likewise.\n+\t* c-c++-common/vector-1.c (f): Likewise.\n+\t* c-c++-common/vector-2.c (f): Likewise.\n+\t* g++.dg/abi/abi-tag14.C (f): Likewise.\n+\t(g): Likewise.\n+\t* g++.dg/abi/abi-tag18.C (f): Likewise.\n+\t* g++.dg/abi/abi-tag18a.C (f): Likewise.\n+\t* g++.dg/abi/covariant2.C (struct c3): Likewise.\n+\t(struct c7): Likewise.\n+\t* g++.dg/abi/covariant3.C (c1::f6): Likewise.\n+\t* g++.dg/abi/mangle7.C (f1): Likewise.\n+\t* g++.dg/asan/pr81340.C (class e): Likewise.\n+\t(e::f): Likewise.\n+\t* g++.dg/concepts/fn8.C (struct S): Likewise.\n+\t* g++.dg/concepts/pr65575.C (f): Likewise.\n+\t* g++.dg/concepts/template-parm11.C (f): Likewise.\n+\t* g++.dg/conversion/op6.C: Likewise.\n+\t* g++.dg/cpp0x/Wunused-variable-1.C (foo): Likewise.\n+\t* g++.dg/cpp0x/access01.C: Likewise.\n+\t* g++.dg/cpp0x/alignas3.C (class alignas): Likewise.\n+\t* g++.dg/cpp0x/auto2.C (f): Likewise.\n+\t(struct A): Likewise.\n+\t(main): Likewise.\n+\t* g++.dg/cpp0x/constexpr-array17.C (struct D): Likewise.\n+\t* g++.dg/cpp0x/constexpr-defarg2.C (a): Likewise.\n+\t(B::foo): Likewise.\n+\t(B::bar): Likewise.\n+\t* g++.dg/cpp0x/constexpr-memfn1.C (struct Y): Likewise.\n+\t* g++.dg/cpp0x/dc1.C (struct D): Likewise.\n+\t* g++.dg/cpp0x/dc3.C (struct D): Likewise.\n+\t* g++.dg/cpp0x/decltype12.C: Likewise.\n+\t* g++.dg/cpp0x/decltype17.C (main): Likewise.\n+\t* g++.dg/cpp0x/decltype3.C: Likewise.\n+\t* g++.dg/cpp0x/decltype41.C (struct C): Likewise.\n+\t(struct D): Likewise.\n+\t* g++.dg/cpp0x/defaulted28.C (f): Likewise.\n+\t* g++.dg/cpp0x/enum_base3.C (struct D): Likewise.\n+\t* g++.dg/cpp0x/gen-attrs-4.C (five): Likewise.\n+\t* g++.dg/cpp0x/initlist96.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-58566.C (struct A): Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-conv10.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-conv12.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-defarg3.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-ice3.C (Klass::dostuff): Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-ice5.C (foo): Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-nested2.C (f1): Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-template12.C (class X): Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-template2.C (struct T): Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-this12.C (struct A): Likewise.\n+\t* g++.dg/cpp0x/nolinkage1.C (main): Likewise.\n+\t* g++.dg/cpp0x/nolinkage1a.cc (dummy): Likewise.\n+\t* g++.dg/cpp0x/nsdmi-template5.C: Likewise.\n+\t* g++.dg/cpp0x/parse1.C (B::B): Likewise.\n+\t* g++.dg/cpp0x/pr34054.C (foo): Likewise.\n+\t* g++.dg/cpp0x/pr47416.C: Likewise.\n+\t* g++.dg/cpp0x/pr58781.C: Likewise.\n+\t* g++.dg/cpp0x/pr70538.C: Likewise.\n+\t* g++.dg/cpp0x/pr81325.C: Likewise.\n+\t* g++.dg/cpp0x/range-for13.C (begin): Likewise.\n+\t(end): Likewise.\n+\t* g++.dg/cpp0x/range-for14.C (begin): Likewise.\n+\t(end): Likewise.\n+\t* g++.dg/cpp0x/rv2n.C (test2_18): Likewise.\n+\t(test2_28): Likewise.\n+\t(test2_38): Likewise.\n+\t(test2_58): Likewise.\n+\t(test2_68): Likewise.\n+\t(test2_78): Likewise.\n+\t* g++.dg/cpp0x/rv3n.C (test3_128): Likewise.\n+\t* g++.dg/cpp0x/static_assert10.C (foo): Likewise.\n+\t* g++.dg/cpp0x/static_assert11.C (struct A): Likewise.\n+\t* g++.dg/cpp0x/static_assert12.C: Likewise.\n+\t* g++.dg/cpp0x/static_assert13.C: Likewise.\n+\t* g++.dg/cpp0x/trailing1.C (struct A): Likewise.\n+\t* g++.dg/cpp0x/trailing5.C (foo): Likewise.\n+\t(bar): Likewise.\n+\t* g++.dg/cpp0x/variadic114.C: Likewise.\n+\t* g++.dg/cpp0x/variadic57.C (Dims...>::foo): Likewise.\n+\t(bar): Likewise.\n+\t* g++.dg/cpp0x/variadic65.C: Likewise.\n+\t* g++.dg/cpp0x/variadic66.C (bind): Likewise.\n+\t* g++.dg/cpp0x/variadic97.C: Likewise.\n+\t* g++.dg/cpp0x/variadic98.C (__attribute__): Likewise.\n+\t* g++.dg/cpp1y/auto-fn11.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn29.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn38.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-return2.C: Likewise.\n+\t* g++.dg/cpp1y/lambda-init7.C (foo): Likewise.\n+\t* g++.dg/cpp1y/pr63996.C: Likewise.\n+\t* g++.dg/cpp1y/pr65202.C: Likewise.\n+\t* g++.dg/cpp1y/pr66443-cxx14.C (Ok): Likewise.\n+\t* g++.dg/cpp1y/pr79253.C (struct D): Likewise.\n+\t* g++.dg/cpp1y/static_assert1.C: Likewise.\n+\t* g++.dg/cpp1y/static_assert2.C: Likewise.\n+\t* g++.dg/cpp1y/var-templ44.C: Likewise.\n+\t* g++.dg/cpp1z/fold6.C (f): Likewise.\n+\t* g++.dg/cpp1z/inline-var2.C (foo): Likewise.\n+\t* g++.dg/cpp1z/lambda-this1.C (struct B): Likewise.\n+\t* g++.dg/cpp1z/static_assert-nomsg.C: Likewise.\n+\t* g++.dg/debug/dwarf-eh-personality-1.C (foobar): Likewise.\n+\t* g++.dg/debug/dwarf2/dwarf4-typedef.C (struct B): Likewise.\n+\t* g++.dg/debug/dwarf2/icf.C: Likewise.\n+\t* g++.dg/debug/dwarf2/pr61433.C (main): Likewise.\n+\t* g++.dg/debug/nullptr01.C (g): Likewise.\n+\t* g++.dg/debug/pr16792.C (foo): Likewise.\n+\t* g++.dg/debug/pr46241.C (class btCollisionWorld): Likewise.\n+\t* g++.dg/debug/pr46338.C (struct S): Likewise.\n+\t* g++.dg/debug/pr47106.C (baz): Likewise.\n+\t(bar): Likewise.\n+\t(foo): Likewise.\n+\t* g++.dg/debug/pr71057.C (fn1): Likewise.\n+\t* g++.dg/debug/pr71432.C (class CLIParameterType): Likewise.\n+\t(CLIParameterType::checkSwitched): Likewise.\n+\t* g++.dg/debug/pr80461.C (struct B): Likewise.\n+\t* g++.dg/dfp/44473-1.C (bar): Likewise.\n+\t* g++.dg/dfp/44473-2.C (bar): Likewise.\n+\t(foo): Likewise.\n+\t* g++.dg/eh/builtin1.C: Likewise.\n+\t* g++.dg/eh/builtin2.C: Likewise.\n+\t* g++.dg/eh/builtin3.C: Likewise.\n+\t* g++.dg/eh/pr45569.C (j): Likewise.\n+\t* g++.dg/eh/unwind2.C: Likewise.\n+\t* g++.dg/expr/bitfield11.C: Likewise.\n+\t* g++.dg/expr/static_cast7.C (f): Likewise.\n+\t* g++.dg/ext/altivec-14.C: Likewise.\n+\t* g++.dg/ext/asm13.C (fn1): Likewise.\n+\t* g++.dg/ext/builtin-object-size3.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_assign_odr.C (main): Likewise.\n+\t(S::operator=): Likewise.\n+\t* g++.dg/ext/label7.C (f): Likewise.\n+\t* g++.dg/ext/label8.C (f): Likewise.\n+\t* g++.dg/ext/tmplattr7.C (test): Likewise.\n+\t* g++.dg/ext/vector8.C (f): Likewise.\n+\t* g++.dg/ext/visibility/anon1.C: Likewise.\n+\t* g++.dg/ext/visibility/anon2.C (f): Likewise.\n+\t* g++.dg/ext/visibility/namespace1.C (__attribute): Likewise.\n+\t* g++.dg/ext/vla16.C (fn1): Likewise.\n+\t* g++.dg/goacc/reference.C: Likewise.\n+\t* g++.dg/gomp/pr37189.C: Likewise.\n+\t* g++.dg/gomp/pr39495-1.C: Likewise.\n+\t* g++.dg/gomp/pr39495-2.C: Likewise.\n+\t* g++.dg/gomp/pr82054.C: Likewise.\n+\t* g++.dg/inherit/covariant10.C (struct c6): Likewise.\n+\t(struct c17): Likewise.\n+\t* g++.dg/inherit/covariant11.C (struct c1): Likewise.\n+\t(struct c3): Likewise.\n+\t(struct c11): Likewise.\n+\t(struct c15): Likewise.\n+\t* g++.dg/inherit/protected1.C (A::operator==): Likewise.\n+\t* g++.dg/init/inline1.C (struct A): Likewise.\n+\t* g++.dg/init/new18.C: Likewise.\n+\t* g++.dg/init/reference2.C (f): Likewise.\n+\t* g++.dg/init/reference3.C: Likewise.\n+\t* g++.dg/init/switch1.C (f): Likewise.\n+\t* g++.dg/ipa/devirt-10.C (struct wxDCBase): Likewise.\n+\t* g++.dg/ipa/devirt-13.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-14.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-15.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-16.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-17.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-18.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-19.C: Likewise.\n+\t* g++.dg/ipa/devirt-21.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-23.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-38.C: Likewise.\n+\t* g++.dg/ipa/devirt-40.C (A::m_fn1): Likewise.\n+\t* g++.dg/ipa/devirt-41.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-42.C (main): Likewise.\n+\t* g++.dg/ipa/devirt-44.C (struct A): Likewise.\n+\t(main): Likewise.\n+\t* g++.dg/ipa/devirt-45.C (struct A): Likewise.\n+\t(main): Likewise.\n+\t* g++.dg/ipa/devirt-48.C (struct B): Likewise.\n+\t(struct D): Likewise.\n+\t* g++.dg/ipa/devirt-52.C: Likewise.\n+\t* g++.dg/ipa/nothrow-1.C (main): Likewise.\n+\t* g++.dg/ipa/pr43812.C (LocalSurface::bbox): Likewise.\n+\t* g++.dg/ipa/pr44372.C: Likewise.\n+\t* g++.dg/ipa/pr45572-1.C (fgetc_unlocked): Likewise.\n+\t(putc_unlocked): Likewise.\n+\t(getline): Likewise.\n+\t(ferror_unlocked): Likewise.\n+\t* g++.dg/ipa/pr58371.C: Likewise.\n+\t* g++.dg/ipa/pr59176.C: Likewise.\n+\t* g++.dg/ipa/pr60640-1.C (class G): Likewise.\n+\t* g++.dg/ipa/pr61540.C (struct top): Likewise.\n+\t* g++.dg/ipa/pr63470.C (class FTjackSupport): Likewise.\n+\t* g++.dg/ipa/pr63587-1.C: Likewise.\n+\t* g++.dg/ipa/pr63587-2.C: Likewise.\n+\t* g++.dg/ipa/pr63838.C (__attribute__): Likewise.\n+\t* g++.dg/ipa/pr63894.C (J::m_fn3): Likewise.\n+\t* g++.dg/ipa/pr64068.C (class A): Likewise.\n+\t(A::m_fn2): Likewise.\n+\t(class C): Likewise.\n+\t* g++.dg/ipa/pr64896.C (struct D): Likewise.\n+\t* g++.dg/ipa/pr65002.C: Likewise.\n+\t* g++.dg/ipa/pr65008.C (__attribute__): Likewise.\n+\t* g++.dg/ipa/pr65465.C (struct D): Likewise.\n+\t* g++.dg/ipa/pr66896.C (struct A): Likewise.\n+\t* g++.dg/ipa/pr68851.C (class G): Likewise.\n+\t(C::checkPseudoClass): Likewise.\n+\t* g++.dg/ipa/pr78211.C: Likewise.\n+\t* g++.dg/ipa/pr79931.C (AttrImpl::insertBefore): Likewise.\n+\t* g++.dg/ipa/pure-const-1.C (main): Likewise.\n+\t* g++.dg/ipa/pure-const-2.C (main): Likewise.\n+\t* g++.dg/ipa/pure-const-3.C (main): Likewise.\n+\t* g++.dg/ipa/remref-1.C (main): Likewise.\n+\t* g++.dg/ipa/remref-2.C (main): Likewise.\n+\t* g++.dg/lookup/builtin2.C (f): Likewise.\n+\t* g++.dg/lookup/crash3.C (struct A): Likewise.\n+\t(struct B): Likewise.\n+\t(crash): Likewise.\n+\t* g++.dg/lookup/friend20.C: Likewise.\n+\t* g++.dg/lookup/pr80891-5.C (vf2_subgraph_iso): Likewise.\n+\t* g++.dg/lookup/struct2.C (A::c): Likewise.\n+\t* g++.dg/lto/20080709_0.C (f): Likewise.\n+\t* g++.dg/lto/20080907_0.C: Likewise.\n+\t* g++.dg/lto/20080915_0.C (struct Baz): Likewise.\n+\t* g++.dg/lto/20080916_0.C (g): Likewise.\n+\t* g++.dg/lto/20081022_0.C (main): Likewise.\n+\t* g++.dg/lto/20081023_0.C (main): Likewise.\n+\t* g++.dg/lto/20081118_0.C (foo::method): Likewise.\n+\t* g++.dg/lto/20081118_1.C (bar::method): Likewise.\n+\t* g++.dg/lto/20081120-1_0.C: Likewise.\n+\t* g++.dg/lto/20081120-1_1.C: Likewise.\n+\t* g++.dg/lto/20081127_1.C (main): Likewise.\n+\t* g++.dg/lto/20081217-2_0.C (struct A): Likewise.\n+\t* g++.dg/lto/20090303_0.C: Likewise.\n+\t* g++.dg/lto/20090311-1_0.C: Likewise.\n+\t* g++.dg/lto/20090312_0.C: Likewise.\n+\t* g++.dg/lto/20090315_0.C (main): Likewise.\n+\t* g++.dg/lto/20091002-1_0.C: Likewise.\n+\t* g++.dg/lto/20091002-2_0.C (class DataArray): Likewise.\n+\t* g++.dg/lto/20091002-3_0.C (class DataArray): Likewise.\n+\t* g++.dg/lto/20091004-1_0.C: Likewise.\n+\t* g++.dg/lto/20091004-2_0.C: Likewise.\n+\t* g++.dg/lto/20091004-3_1.C (All_Torus_Intersections): Likewise.\n+\t* g++.dg/lto/20100721-1_0.C (__gthread_active_p): Likewise.\n+\t* g++.dg/lto/20101010-1_0.C: Likewise.\n+\t* g++.dg/lto/20101010-2_0.C: Likewise.\n+\t* g++.dg/lto/pr45679-1_0.C: Likewise.\n+\t* g++.dg/lto/pr45679-1_1.C: Likewise.\n+\t* g++.dg/lto/pr45679-2_0.C: Likewise.\n+\t* g++.dg/lto/pr48042_0.C (B::x): Likewise.\n+\t* g++.dg/lto/pr51650-1_0.C (fn): Likewise.\n+\t(main): Likewise.\n+\t* g++.dg/lto/pr51650-3_0.C (fn): Likewise.\n+\t(main): Likewise.\n+\t* g++.dg/lto/pr63270_1.C: Likewise.\n+\t* g++.dg/lto/pr65193_0.C: Likewise.\n+\t* g++.dg/lto/pr65302_0.C: Likewise.\n+\t* g++.dg/lto/pr65316_0.C: Likewise.\n+\t* g++.dg/lto/pr65475c_0.C: Likewise.\n+\t* g++.dg/lto/pr65549_0.C (main): Likewise.\n+\t* g++.dg/lto/pr69077_0.C (cWeightedStdDev::netPack): Likewise.\n+\t* g++.dg/lto/pr69589_0.C: Likewise.\n+\t* g++.dg/opt/combine.C (qvariant_cast): Likewise.\n+\t(QScriptDebuggerBackendPrivate::trace): Likewise.\n+\t* g++.dg/opt/complex3.C (j): Likewise.\n+\t* g++.dg/opt/covariant1.C (struct T): Likewise.\n+\t* g++.dg/opt/declone3.C (Item::m_fn1): Likewise.\n+\t* g++.dg/opt/dump1.C (__attribute__): Likewise.\n+\t* g++.dg/opt/inline15.C (struct C): Likewise.\n+\t(fn2): Likewise.\n+\t* g++.dg/opt/local1.C (h): Likewise.\n+\t* g++.dg/opt/memcpy1.C (csBoxClipper::Clip): Likewise.\n+\t* g++.dg/opt/new1.C: Likewise.\n+\t* g++.dg/opt/nrv8.C (main): Likewise.\n+\t* g++.dg/opt/pr23299.C (struct A): Likewise.\n+\t(struct B): Likewise.\n+\t(struct C): Likewise.\n+\t* g++.dg/opt/pr27826.C (struct Geometry): Likewise.\n+\t* g++.dg/opt/pr44919.C (back_inserter): Likewise.\n+\t* g++.dg/opt/pr47615.C (main): Likewise.\n+\t* g++.dg/opt/pr55329.C (struct A): Likewise.\n+\t* g++.dg/opt/pr61456.C (Set): Likewise.\n+\t* g++.dg/opt/pr65003.C (D::foo): Likewise.\n+\t(F::foo): Likewise.\n+\t* g++.dg/opt/pr65554.C: Likewise.\n+\t* g++.dg/opt/pr69432.C (struct C): Likewise.\n+\t* g++.dg/opt/pr78373.C (struct D): Likewise.\n+\t(Traits>::m_fn4): Likewise.\n+\t* g++.dg/opt/pr79267.C (struct F): Likewise.\n+\t* g++.dg/opt/pr82159-2.C: Likewise.\n+\t* g++.dg/other/array3.C (reserve): Likewise.\n+\t* g++.dg/other/crash-5.C (f): Likewise.\n+\t* g++.dg/other/crash-8.C: Likewise.\n+\t* g++.dg/other/error34.C (S): Likewise.\n+\t* g++.dg/other/pr22003.C (c3::func): Likewise.\n+\t* g++.dg/other/pr24623.C (RefCountPointer): Likewise.\n+\t* g++.dg/other/pr29610.C (struct __normal_iterator): Likewise.\n+\t(Painter::for_each): Likewise.\n+\t(Painter::redraw_window): Likewise.\n+\t* g++.dg/other/pr42645-1.C (struct S): Likewise.\n+\t* g++.dg/other/pr42645-2.C (foo): Likewise.\n+\t(f3): Likewise.\n+\t* g++.dg/other/pr52048.C: Likewise.\n+\t* g++.dg/other/typedef3.C (XalanCProcessor::getParseOption): Likewise.\n+\t* g++.dg/overload/defarg4.C (class foo): Likewise.\n+\t(bar::Initialize): Likewise.\n+\t* g++.dg/overload/operator5.C (equalIgnoringCase): Likewise.\n+\t* g++.dg/overload/ref-conv1.C: Likewise.\n+\t* g++.dg/overload/template5.C (test): Likewise.\n+\t* g++.dg/parse/crash40.C (class AAA): Likewise.\n+\t* g++.dg/parse/crash61.C: Likewise.\n+\t* g++.dg/parse/crash67.C: Likewise.\n+\t* g++.dg/parse/ctor5.C: Likewise.\n+\t* g++.dg/parse/defarg4.C (Foo): Likewise.\n+\t* g++.dg/parse/defarg6.C: Likewise.\n+\t* g++.dg/parse/error5.C (class Foo): Likewise.\n+\t* g++.dg/parse/expr2.C (foo): Likewise.\n+\t* g++.dg/parse/friend7.C: Likewise.\n+\t* g++.dg/parse/namespace1.C (bar): Likewise.\n+\t* g++.dg/parse/namespace9.C (g): Likewise.\n+\t* g++.dg/parse/ret-type2.C: Likewise.\n+\t* g++.dg/parse/typedef8.C (foo): Likewise.\n+\t* g++.dg/pch/static-1.C (LocalStaticTest): Likewise.\n+\t(main): Likewise.\n+\t* g++.dg/plugin/diagnostic-test-expressions-1.C (test_structure_references): Likewise.\n+\t(test_postfix_incdec): Likewise.\n+\t(test_sizeof): Likewise.\n+\t(test_alignof): Likewise.\n+\t(test_prefix_incdec): Likewise.\n+\t* g++.dg/plugin/dumb-plugin-test-1.C (func): Likewise.\n+\t* g++.dg/plugin/self-assign-test-1.C (func): Likewise.\n+\t* g++.dg/plugin/self-assign-test-2.C (func): Likewise.\n+\t* g++.dg/plugin/self-assign-test-3.C (func): Likewise.\n+\t* g++.dg/pr55513.C (main): Likewise.\n+\t* g++.dg/pr55604.C (main): Likewise.\n+\t* g++.dg/pr57662.C: Likewise.\n+\t* g++.dg/pr58389.C (F::m_fn1): Likewise.\n+\t* g++.dg/pr59510.C: Likewise.\n+\t* g++.dg/pr67989.C: Likewise.\n+\t* g++.dg/pr70590-2.C: Likewise.\n+\t* g++.dg/pr70590.C: Likewise.\n+\t* g++.dg/pr70965.C (foo): Likewise.\n+\t* g++.dg/pr77550.C: Likewise.\n+\t* g++.dg/pr80287.C (struct A): Likewise.\n+\t* g++.dg/pr80707.C (A::m_fn1): Likewise.\n+\t* g++.dg/pr81194.C: Likewise.\n+\t* g++.dg/spellcheck-identifiers.C: Likewise.\n+\t* g++.dg/tc1/dr152.C: Likewise.\n+\t* g++.dg/template/aggr-init1.C (CreateA): Likewise.\n+\t* g++.dg/template/anon1.C (struct x): Likewise.\n+\t(struct vector): Likewise.\n+\t* g++.dg/template/array29.C: Likewise.\n+\t* g++.dg/template/array7.C (bar): Likewise.\n+\t* g++.dg/template/canon-type-8.C: Likewise.\n+\t* g++.dg/template/conv1.C (First::Foo): Likewise.\n+\t* g++.dg/template/crash107.C: Likewise.\n+\t* g++.dg/template/crash23.C (f): Likewise.\n+\t* g++.dg/template/crash8.C (struct bar): Likewise.\n+\t* g++.dg/template/defarg4.C (struct A): Likewise.\n+\t* g++.dg/template/dependent-expr9.C: Likewise.\n+\t* g++.dg/template/error10.C (Btest): Likewise.\n+\t* g++.dg/template/friend32.C (f): Likewise.\n+\t* g++.dg/template/init6.C (Graph::Inner::get): Likewise.\n+\t(main): Likewise.\n+\t* g++.dg/template/memfriend7.C (A::h): Likewise.\n+\t* g++.dg/template/new10.C (Analyzer::ReadDictionary): Likewise.\n+\t* g++.dg/template/nontype12.C (baz): Likewise.\n+\t* g++.dg/template/overload12.C (foo2): Likewise.\n+\t* g++.dg/template/overload5.C (foo::f): Likewise.\n+\t* g++.dg/template/overload8.C (struct A): Likewise.\n+\t* g++.dg/template/partial10.C (fn): Likewise.\n+\t(main): Likewise.\n+\t* g++.dg/template/partial9.C (f): Likewise.\n+\t* g++.dg/template/qual1.C (shift_compare): Likewise.\n+\t* g++.dg/template/show-template-tree-3.C: Likewise.\n+\t* g++.dg/template/sizeof8.C (S<sizeof): Likewise.\n+\t* g++.dg/template/sizeof9.C (d): Likewise.\n+\t* g++.dg/template/spec6.C: Likewise.\n+\t* g++.dg/template/spec7.C (h): Likewise.\n+\t* g++.dg/template/typedef8.C: Likewise.\n+\t* g++.dg/template/using20.C (f): Likewise.\n+\t* g++.dg/template/vla1.C (label): Likewise.\n+\t* g++.dg/tm/cgraph_edge.C: Likewise.\n+\t* g++.dg/tm/pr46646.C: Likewise.\n+\t* g++.dg/tm/pr47554.C (class list): Likewise.\n+\t* g++.dg/tm/pr47573.C (getStringHeight): Likewise.\n+\t* g++.dg/tm/unsafe1.C (f): Likewise.\n+\t* g++.dg/tm/unsafe2.C (g): Likewise.\n+\t* g++.dg/torture/pr70971.C: Likewise.\n+\t* g++.dg/torture/20070621-1.C: Likewise.\n+\t* g++.dg/torture/20090329-1.C: Likewise.\n+\t* g++.dg/torture/20141013.C: Likewise.\n+\t* g++.dg/torture/pr33134.C (fxsaveGIF): Likewise.\n+\t* g++.dg/torture/pr33340.C (new): Likewise.\n+\t* g++.dg/torture/pr33627.C (class pf_Frag): Likewise.\n+\t* g++.dg/torture/pr34222.C (readFloat): Likewise.\n+\t* g++.dg/torture/pr34241.C (test): Likewise.\n+\t* g++.dg/torture/pr34641.C: Likewise.\n+\t* g++.dg/torture/pr34850.C (OctetString::operator^=): Likewise.\n+\t* g++.dg/torture/pr35164-1.C: Likewise.\n+\t* g++.dg/torture/pr36745.C: Likewise.\n+\t* g++.dg/torture/pr38705.C (S::bar): Likewise.\n+\t* g++.dg/torture/pr38811.C (AbcAbcdTracer::TestIsoAbcde): Likewise.\n+\t* g++.dg/torture/pr39362.C: Likewise.\n+\t* g++.dg/torture/pr39732.C (f): Likewise.\n+\t* g++.dg/torture/pr40991.C: Likewise.\n+\t* g++.dg/torture/pr41775.C: Likewise.\n+\t* g++.dg/torture/pr42183.C: Likewise.\n+\t* g++.dg/torture/pr42450.C: Likewise.\n+\t* g++.dg/torture/pr42704.C: Likewise.\n+\t* g++.dg/torture/pr42760.C (baz): Likewise.\n+\t(bar): Likewise.\n+\t* g++.dg/torture/pr42773.C (Cell::obscuringCells): Likewise.\n+\t* g++.dg/torture/pr42883.C: Likewise.\n+\t* g++.dg/torture/pr43905.C (struct Matrix): Likewise.\n+\t* g++.dg/torture/pr44148.C: Likewise.\n+\t* g++.dg/torture/pr44295.C: Likewise.\n+\t* g++.dg/torture/pr44357.C: Likewise.\n+\t* g++.dg/torture/pr44813.C: Likewise.\n+\t* g++.dg/torture/pr45580.C: Likewise.\n+\t* g++.dg/torture/pr45874.C (Mpeg2FrameConstructor::ParsePictureHeader): Likewise.\n+\t* g++.dg/torture/pr45877.C: Likewise.\n+\t* g++.dg/torture/pr46383.C: Likewise.\n+\t* g++.dg/torture/pr46469.C (__attribute__): Likewise.\n+\t(identifierByPthreadHandle): Likewise.\n+\t* g++.dg/torture/pr47313.C: Likewise.\n+\t* g++.dg/torture/pr48271.C: Likewise.\n+\t* g++.dg/torture/pr49615.C (Dispatch): Likewise.\n+\t(C::f): Likewise.\n+\t* g++.dg/torture/pr49770.C (main): Likewise.\n+\t* g++.dg/torture/pr49938.C: Likewise.\n+\t* g++.dg/torture/pr51436.C: Likewise.\n+\t* g++.dg/torture/pr51482.C (anim_track_bez_wvect::tangent): Likewise.\n+\t* g++.dg/torture/pr51737.C (id_state::start_file): Likewise.\n+\t* g++.dg/torture/pr51959.C: Likewise.\n+\t* g++.dg/torture/pr52772.C (class c6): Likewise.\n+\t* g++.dg/torture/pr52918-2.C (__cxa_allocate_exception): Likewise.\n+\t* g++.dg/torture/pr53011.C: Likewise.\n+\t* g++.dg/torture/pr53602.C: Likewise.\n+\t* g++.dg/torture/pr53752.C: Likewise.\n+\t* g++.dg/torture/pr54838.C: Likewise.\n+\t* g++.dg/torture/pr54902.C: Likewise.\n+\t* g++.dg/torture/pr56029.C: Likewise.\n+\t* g++.dg/torture/pr56768.C (operator!=): Likewise.\n+\t* g++.dg/torture/pr57107.C: Likewise.\n+\t* g++.dg/torture/pr57140.C: Likewise.\n+\t* g++.dg/torture/pr57235.C: Likewise.\n+\t* g++.dg/torture/pr58252.C: Likewise.\n+\t* g++.dg/torture/pr58555.C: Likewise.\n+\t* g++.dg/torture/pr59208.C (get_dbx_doc): Likewise.\n+\t* g++.dg/torture/pr60438-1.C (foo): Likewise.\n+\t* g++.dg/torture/pr60746.C (Two::run): Likewise.\n+\t* g++.dg/torture/pr61554.C: Likewise.\n+\t* g++.dg/torture/pr63419.C: Likewise.\n+\t* g++.dg/torture/pr63476.C: Likewise.\n+\t* g++.dg/torture/pr63512.C (C::m_fn3): Likewise.\n+\t* g++.dg/torture/pr64282.C (class H): Likewise.\n+\t* g++.dg/torture/pr64378.C (struct top): Likewise.\n+\t* g++.dg/torture/pr64565.C: Likewise.\n+\t* g++.dg/torture/pr64568-2.C: Likewise.\n+\t* g++.dg/torture/pr64669.C (Lex::advance_one_char): Likewise.\n+\t* g++.dg/torture/pr64686.C (B::m_fn1): Likewise.\n+\t* g++.dg/torture/pr64978.C (B::m_fn2): Likewise.\n+\t* g++.dg/torture/pr64995.C (A::m_fn2): Likewise.\n+\t* g++.dg/torture/pr65655.C: Likewise.\n+\t* g++.dg/torture/pr65851.C: Likewise.\n+\t* g++.dg/torture/pr67055.C: Likewise.\n+\t* g++.dg/torture/pr67191.C: Likewise.\n+\t* g++.dg/torture/pr68852.C: Likewise.\n+\t* g++.dg/torture/pr69264.C: Likewise.\n+\t* g++.dg/torture/pr77674.C: Likewise.\n+\t* g++.dg/torture/pr77947.C (B::m_fn2): Likewise.\n+\t* g++.dg/torture/pr78268.C: Likewise.\n+\t* g++.dg/torture/pr78507.C: Likewise.\n+\t* g++.dg/torture/pr78692.C (F::g): Likewise.\n+\t* g++.dg/torture/pr80171.C: Likewise.\n+\t* g++.dg/torture/pr82154.C (class f): Likewise.\n+\t(f::k): Likewise.\n+\t* g++.dg/tree-ssa/copyprop.C: Likewise.\n+\t* g++.dg/tree-ssa/pr22444.C: Likewise.\n+\t* g++.dg/tree-ssa/pr23948.C (make_scheduler_request): Likewise.\n+\t* g++.dg/tree-ssa/pr24172.C (dummy): Likewise.\n+\t* g++.dg/tree-ssa/pr24351-3.C: Likewise.\n+\t* g++.dg/tree-ssa/pr27283.C: Likewise.\n+\t* g++.dg/tree-ssa/pr27291.C: Likewise.\n+\t* g++.dg/tree-ssa/pr27548.C: Likewise.\n+\t* g++.dg/tree-ssa/pr34355.C (Parse_Float): Likewise.\n+\t* g++.dg/tree-ssa/pr42337.C: Likewise.\n+\t* g++.dg/tree-ssa/pred-1.C (main): Likewise.\n+\t* g++.dg/ubsan/pr65019.C (C::foo): Likewise.\n+\t* g++.dg/ubsan/pr65583.C: Likewise.\n+\t* g++.dg/vect/pr60836.cc (norm_): Likewise.\n+\t* g++.dg/vect/pr68145.cc: Likewise.\n+\t* g++.dg/vect/pr70729-nest.cc (my_alloc): Likewise.\n+\t* g++.dg/vect/pr70729.cc (my_alloc): Likewise.\n+\t* g++.dg/warn/Waddress-3.C: Likewise.\n+\t* g++.dg/warn/Wconversion-null-2.C (warn_for___null): Likewise.\n+\t* g++.dg/warn/Wnull-conversion-2.C (main): Likewise.\n+\t* g++.dg/warn/Wparentheses-10.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-11.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-12.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-25.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-6.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-7.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-8.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-9.C: Likewise.\n+\t* g++.dg/warn/Wshadow-5.C: Likewise.\n+\t* g++.dg/warn/Wtype-limits-Wextra.C (ff): Likewise.\n+\t(gg): Likewise.\n+\t* g++.dg/warn/Wtype-limits-no.C (ff): Likewise.\n+\t(gg): Likewise.\n+\t* g++.dg/warn/Wtype-limits.C (ff): Likewise.\n+\t(gg): Likewise.\n+\t* g++.dg/warn/Wunused-local-typedefs.C: Likewise.\n+\t* g++.dg/warn/Wzero-as-null-pointer-constant-5.C: Likewise.\n+\t* g++.dg/warn/pmf1.C (a::f): Likewise.\n+\t* g++.old-deja/g++.benjamin/p13417.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash24.C (main): Likewise.\n+\t* g++.old-deja/g++.ext/constructor.C: Likewise.\n+\t* g++.old-deja/g++.ext/namedret1.C (f): Likewise.\n+\t* g++.old-deja/g++.ext/namedret3.C: Likewise.\n+\t* g++.old-deja/g++.ext/return1.C: Likewise.\n+\t* g++.old-deja/g++.jason/anon4.C (main): Likewise.\n+\t* g++.old-deja/g++.jason/enum6.C: Likewise.\n+\t* g++.old-deja/g++.jason/lineno2.C (main): Likewise.\n+\t* g++.old-deja/g++.jason/lineno3.C: Likewise.\n+\t* g++.old-deja/g++.jason/lineno4.C: Likewise.\n+\t* g++.old-deja/g++.jason/new2.C (main): Likewise.\n+\t* g++.old-deja/g++.jason/new4.C (main): Likewise.\n+\t* g++.old-deja/g++.jason/shadow1.C (main): Likewise.\n+\t* g++.old-deja/g++.jason/tempcons.C (struct A): Likewise.\n+\t* g++.old-deja/g++.jason/thunk2.C (main): Likewise.\n+\t* g++.old-deja/g++.law/builtin1.C (main): Likewise.\n+\t* g++.old-deja/g++.law/enum9.C: Likewise.\n+\t* g++.old-deja/g++.law/except3.C: Likewise.\n+\t* g++.old-deja/g++.law/init6.C: Likewise.\n+\t* g++.old-deja/g++.law/profile1.C (main): Likewise.\n+\t* g++.old-deja/g++.law/shadow2.C (main): Likewise.\n+\t* g++.old-deja/g++.law/temps4.C (main): Likewise.\n+\t* g++.old-deja/g++.mike/bool2.C (main): Likewise.\n+\t* g++.old-deja/g++.mike/eh1.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh10.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh13.C (main): Likewise.\n+\t* g++.old-deja/g++.mike/eh16.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh17.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh2.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh23.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh24.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh25.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh26.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh27.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh28.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh29.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh30.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh31.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh35.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh36.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh37.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh38.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh39.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh40.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh47.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh50.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh51.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh7.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh8.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh9.C: Likewise.\n+\t* g++.old-deja/g++.mike/mangle1.C: Likewise.\n+\t* g++.old-deja/g++.mike/p5958.C: Likewise.\n+\t* g++.old-deja/g++.mike/p6004.C: Likewise.\n+\t* g++.old-deja/g++.mike/p700.C: Likewise.\n+\t* g++.old-deja/g++.mike/p7912.C: Likewise.\n+\t* g++.old-deja/g++.mike/p811.C (main): Likewise.\n+\t* g++.old-deja/g++.mike/virt4.C (main): Likewise.\n+\t* g++.old-deja/g++.oliva/nameret1.C: Likewise.\n+\t* g++.old-deja/g++.oliva/nameret2.C: Likewise.\n+\t* g++.old-deja/g++.other/decl1.C (bar): Likewise.\n+\t* g++.old-deja/g++.other/expr1.C (struct T): Likewise.\n+\t(main): Likewise.\n+\t* g++.old-deja/g++.other/inline8.C (main): Likewise.\n+\t* g++.old-deja/g++.other/loop1.C: Likewise.\n+\t* g++.old-deja/g++.other/syntax1.C (main): Likewise.\n+\t* g++.old-deja/g++.pt/repo3.C (main): Likewise.\n+\t* g++.old-deja/g++.robertl/eb27.C (main): Likewise.\n+\t* g++.old-deja/g++.robertl/eb83.C (main): Likewise.\n+\t* gcc.dg/pr44545.c: Likewise.\n+\t* obj-c++.dg/comp-types-8.mm: Likewise.\n+\t* obj-c++.dg/demangle-3.mm: Likewise.\n+\t* obj-c++.dg/super-class-1.mm: Likewise.\n+\n 2017-11-06  Martin Liska  <mliska@suse.cz>\n \n \t* c-c++-common/dfp/call-by-value.c (foo32): Return a default"}, {"sha": "d146c788b7409487736d22ad547aa0e430d1e1bf", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-8.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-8.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,7 +4,7 @@\n \n extern void grace (int);\n \n-int\n+void\n fn1 (int i)\n {\n   switch (i)\n@@ -16,7 +16,7 @@ fn1 (int i)\n done:;\n }\n \n-int\n+void\n fn2 (int i)\n {\n   switch (i)\n@@ -32,7 +32,7 @@ fn2 (int i)\n done:;\n }\n \n-int\n+void\n fn3 (int i)\n {\n   switch (i)\n@@ -46,7 +46,7 @@ fn3 (int i)\n done:;\n }\n \n-int\n+void\n fn4 (int i)\n {\n   switch (i)\n@@ -64,7 +64,7 @@ fn4 (int i)\n done:;\n }\n \n-int\n+void\n fn5 (int i)\n {\n   switch (i)\n@@ -83,7 +83,7 @@ fn5 (int i)\n done:;\n }\n \n-int\n+void\n fn6 (int i)\n {\n   switch (i)"}, {"sha": "619a2b6142aabd5bbbdcf1b989846dc0f89368c4", "filename": "gcc/testsuite/c-c++-common/asan/pr63638.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr63638.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr63638.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr63638.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,7 +12,7 @@ struct S{\n \n struct S s[6];\n \n-int f(struct S *p)\n+void f(struct S *p)\n {\n   memcpy(p, &s[2], sizeof(*p));\n   memcpy(p, &s[1], sizeof(*p));"}, {"sha": "0afc53adaa8e06d01fbb7d0af86d4fde8bd993bd", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-1.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -35,4 +35,6 @@ parallel_clauses (void)\n \n #pragma acc parallel firstprivate (a, b)\n   ;\n+\n+  return 0;\n }"}, {"sha": "5ee562bfbf78fa058b4e435718736a13b986eabd", "filename": "gcc/testsuite/c-c++-common/gomp/sink-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsink-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsink-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsink-1.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -93,4 +93,6 @@ baz ()\n \tbar (i, j, 0);\n #pragma omp ordered depend(source)\n       }\n+\n+  return 0;\n }"}, {"sha": "ed319d82e54ef16619cd78a63a5797d377875847", "filename": "gcc/testsuite/c-c++-common/missing-symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-symbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-symbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-symbol.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-fdiagnostics-show-caret\" } */\n+/* { dg-options \"-fdiagnostics-show-caret -Wno-return-type\" } */\n \n extern int foo (void);\n extern int bar (void);"}, {"sha": "d81c81dd4da08f812e7f4ca7f0b0e5852774f1d8", "filename": "gcc/testsuite/c-c++-common/pr36513-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr36513-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr36513-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr36513-2.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,4 +10,5 @@ int main2 ()\n {\n   char *s, t;\n   strchr (s, t);\n+  return 0;\n }"}, {"sha": "b8b2d6d8060d4bcdb008b7ec9e0cae500540aab6", "filename": "gcc/testsuite/c-c++-common/pr36513.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr36513.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr36513.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr36513.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,5 +11,7 @@ int main1 ()\n \t\t  && (t) == '\\0' \n \t\t  ? (char *) __rawmemchr (s, t) \n \t\t  : __builtin_strchr (s, t)));\n+\n+  return 0;\n }\n "}, {"sha": "30a46c286e0e4ab48bf48b6d5355a44969aec45a", "filename": "gcc/testsuite/c-c++-common/pr49706-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706-2.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,7 +10,7 @@\n \n bool r;\n \n-int\n+void\n same (int a, int b)\n {\n   r = !a == !b;"}, {"sha": "c8762e057d5ccf3f9408590bb6c40c0d653c6b62", "filename": "gcc/testsuite/c-c++-common/pr65120.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65120.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65120.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65120.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,7 +9,7 @@\n \n bool r;\n \n-int\n+void\n f1 (int a)\n {\n   r = !a == 0;\n@@ -18,7 +18,7 @@ f1 (int a)\n   r = !a != 1;\t/* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n }\n \n-int\n+void\n f2 (int a)\n {\n   r = !a > 0;\t/* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */"}, {"sha": "40b41803555b84cbdbf365c30ef29d34434ade91", "filename": "gcc/testsuite/c-c++-common/tm/volatile-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fvolatile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fvolatile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fvolatile-1.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -3,7 +3,7 @@\n \n volatile int * p = 0;\n __attribute ((transaction_safe))\n-int f() {\n+void f() {\n   int x = 0;\t     // ok: not volatile\n   p = &x;\t     // ok: the pointer is not volatile\n   int i = *p;\t     // { dg-error \"volatile\" \"read through volatile glvalue\" }"}, {"sha": "027d177794350d8934d1f63c65a6bbbbff5a174a", "filename": "gcc/testsuite/c-c++-common/vector-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-1.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,7 +8,7 @@\n vector float a;\n vector int a1;\n \n-int f(void)\n+void f(void)\n {\n  a =  ~a; /* { dg-error \"\" } */\n  a1 =  ~a1;"}, {"sha": "9db53a88c5f7c484ade84ed2a296c5a03a04ff17", "filename": "gcc/testsuite/c-c++-common/vector-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-2.c?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,7 +9,7 @@ vector int a1;\n vector float b;\n vector int b1;\n \n-int f(void)\n+void f(void)\n {\n  a =  a | b; /* { dg-error \"\" } */\n  a =  a & b; /* { dg-error \"\" } */"}, {"sha": "3017f492cda9e7ec1f8e6baf7086f7d4d90152da", "filename": "gcc/testsuite/g++.dg/abi/abi-tag14.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag14.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,20 +8,20 @@ inline namespace __cxx11 __attribute ((abi_tag (\"cxx11\"))) {\n A a;\t\t\t\t// { dg-warning \"\\\"cxx11\\\"\" }\n \n // { dg-final { scan-assembler \"_Z1fB5cxx11v\" } }\n-A f() {}\t\t\t// { dg-warning \"\\\"cxx11\\\"\" }\n+A f() { return a; }\t\t// { dg-warning \"\\\"cxx11\\\"\" }\n \n namespace {\n   A a2;\n-  A f2() {}\n+  A f2() { return a2; }\n   struct B: A {};\n }\n \n // { dg-final { scan-assembler \"_Z1fPN7__cxx111AE\" } }\n-A f(A*) {}\n+A f(A*) { return a; }\n \n // { dg-final { scan-assembler \"_Z1gIN7__cxx111AEET_v\" } }\n template <class T> T g() { }\n-template <> A g<A>() { }\n+template <> A g<A>() { return a; }\n \n // { dg-final { scan-assembler \"_Z1vIN7__cxx111AEE\" { target c++14 } } }\n #if __cplusplus >= 201402L"}, {"sha": "ad8e16e692b71e7832a88ac952a12d23b6d6b82a", "filename": "gcc/testsuite/g++.dg/abi/abi-tag18.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,9 +11,11 @@ inline A1 f() {\n   struct T {\n     A2 g() {\t\t\t// { dg-warning \"mangled name\" }\n       static X x;\t\t// { dg-warning \"mangled name\" }\n+      return A2();\n     }\n   };\n   T().g();\n+  return A1();\n }\n int main() {\n   f();"}, {"sha": "6c56950233812ada674d00f8537d39d45e035794", "filename": "gcc/testsuite/g++.dg/abi/abi-tag18a.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,9 +11,11 @@ inline A1 f() {\n   struct T {\n     A2 g() {\n       static X x;\n+      return A2();\n     }\n   };\n   T().g();\n+  return A1();\n }\n int main() {\n   f();"}, {"sha": "6c55ad6bb6787c2c7931d568bc87a7e7975f3deb", "filename": "gcc/testsuite/g++.dg/abi/covariant2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,15 +10,15 @@ struct c1 {};\n \n struct c3 : virtual c1\n {\n-    virtual c1* f6() {}\n+    virtual c1* f6() { return 0; }\n     int i;\n };\n \n struct c6 : virtual c3 { };\n \n struct c7 : c3\n {\n-    virtual c3* f6() {}\n+    virtual c3* f6() { return 0; }\n };\n \n struct c24 : virtual c7"}, {"sha": "09b9912524dceab1a68f5fe4ddb7136d63754ac0", "filename": "gcc/testsuite/g++.dg/abi/covariant3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -34,7 +34,7 @@ struct c28 : virtual c0, virtual c11 {\n     virtual c18* f6();\n };\n \n-c0 *c1::f6 () {}\n+c0 *c1::f6 () { return 0; }\n void c5::foo () {}\n void c10::foo () {}\n void c18::bar () {}"}, {"sha": "14c65a24da866c8a619ef587fa71c30a4e183619", "filename": "gcc/testsuite/g++.dg/abi/mangle7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle7.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n typedef void *const t1[2];\n-float const f1(t1 (&)[79], ...) {}\n+float const f1(t1 (&)[79], ...) { return 0.0f; }\n \n /* { dg-final { scan-assembler _Z2f1RA79_A2_KPvz } } */"}, {"sha": "9db5bb46ce795cb490a7115a90bd028b533cf6fe", "filename": "gcc/testsuite/g++.dg/asan/pr81340.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr81340.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr81340.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr81340.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,13 +10,13 @@ public:\n   a(char *) : c(0, d) {}\n };\n class e {\n-  int f(const int &, const int &, const int &, bool, bool, bool, int, bool);\n+  void f(const int &, const int &, const int &, bool, bool, bool, int, bool);\n };\n class g {\n public:\n   static g *h();\n   void i(a, void *);\n };\n-int e::f(const int &, const int &, const int &, bool j, bool, bool, int, bool) {\n+void e::f(const int &, const int &, const int &, bool j, bool, bool, int, bool) {\n   g::h()->i(\"\", &j);\n }"}, {"sha": "b91f1ae95116a985c0677b5c323a4c087fcf4c33", "filename": "gcc/testsuite/g++.dg/concepts/fn8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,7 +12,7 @@ void (*p2)(int) = &f<int>; // { dg-error \"no matches\" }\n void (*p3)(int) = &f; // { dg-error \"no matches\" }\n \n struct S {\n-  template<Class T> int f(T) { }\n+  template<Class T> int f(T) { return 0; }\n };\n \n auto p4 = &S::template f<int>; // { dg-error \"no matches\" }"}, {"sha": "6745b843d31d45bdf7004b304e0ca752b83afd99", "filename": "gcc/testsuite/g++.dg/concepts/pr65575.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65575.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65575.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65575.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,7 +14,7 @@ int (*p)() requires true; // { dg-error \"\" }\n int (&p)() requires true; // { dg-error \"\" }\n int g(int (*)() requires true); // { dg-error \"\" }\n \n-int f() { }\n+int f() { return 0; }\n \n int\n main()"}, {"sha": "352acc2271d9140e744f3b8a2853f0c2faf38b9f", "filename": "gcc/testsuite/g++.dg/concepts/template-parm11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm11.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,7 +12,7 @@ template<NameProvider... ColSpec>\n void getTable(const ColSpec&...)\n {}\n \n-int f()\n+void f()\n {\n   getTable(7, 'a'); // { dg-error \"cannot call\" }\n };"}, {"sha": "8a5efc4023a3cc8fd719ec6b27a7df986076200f", "filename": "gcc/testsuite/g++.dg/conversion/op6.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop6.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -3,9 +3,9 @@\n \n template<class T> class smart_pointer {\n public:\n-    operator T* () const { }\n-    operator bool () const { }\n-    operator bool () { }\n+    operator T* () const { return 0; }\n+    operator bool () const { return true; }\n+    operator bool () { return true; }\n };\n class Context { };\n typedef smart_pointer<Context> ContextP;"}, {"sha": "dd316d1ace5621e3e793ea8aed4f317a8043e5d6", "filename": "gcc/testsuite/g++.dg/cpp0x/Wunused-variable-1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWunused-variable-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWunused-variable-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWunused-variable-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -15,6 +15,7 @@ int\n foo ()\n {\n   C {} (1, 1L, 1LL, 1.0);\n+  return 0;\n }\n \n template<int N>"}, {"sha": "3a7cee4156add525e286dbb10f01aad940b79acc", "filename": "gcc/testsuite/g++.dg/cpp0x/access01.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faccess01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faccess01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faccess01.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@ class A\n {\n   T p;\n public:\n-  template <class U> auto f() -> decltype(+p) { }\n+  template <class U> auto f() -> decltype(+p) { return p; }\n };\n \n int main()"}, {"sha": "af3f171bb3f6aedac811bbab07db7c32a2ca15c7", "filename": "gcc/testsuite/g++.dg/cpp0x/alignas3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -16,5 +16,5 @@ template <class, class Y> typename F<Y>::ret_type cast(Y &);\n class CompoundStmt;\n class alignas(8) Stmt {\n   Stmt *Children[1];\n-  CompoundStmt *getBlock() const { cast<CompoundStmt>(Children[0]); }\n+  CompoundStmt *getBlock() const { cast<CompoundStmt>(Children[0]); return 0; }\n };"}, {"sha": "e967b9423a50f8eee5723b16bf58bf93a321f37c", "filename": "gcc/testsuite/g++.dg/cpp0x/auto2.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,12 +4,12 @@\n #include <typeinfo>\n extern \"C\" void abort();\n \n-int f() {}\n+int f() { return 0; }\n \n struct A\n {\n   int i;\n-  int f() {}\n+  int f() { return 0; }\n   A operator+(A a) { return a; }\n };\n \n@@ -70,4 +70,5 @@ int main()\n     }\n \n   auto j = 42, k = 24;\n+  return 0;\n }"}, {"sha": "f722b25ec3d89e01b82c33dffdfa1877fb4c7857", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array17.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array17.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -18,6 +18,7 @@ struct D {\n   template <typename _ForwardIterator, typename _Size>\n   static _ForwardIterator __uninit_default_n(_ForwardIterator p1, _Size) {\n     _Construct(p1);\n+    return _ForwardIterator();\n   }\n };\n template <typename _ForwardIterator, typename _Size>"}, {"sha": "515576e1f6244c0f5258a335c60be3da4bc2971b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-defarg2.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-defarg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-defarg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-defarg2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -25,6 +25,9 @@ struct A : D\n \n A baz (const char *, A = C ());\n \n+C c;\n+A a (c);\n+\n A\n B::foo ()\n {\n@@ -35,10 +38,13 @@ B::foo ()\n   catch (...)\n     {\n     }\n+\n+  return a;\n }\n \n A\n B::bar ()\n {\n   baz (\"bar\");\n+  return a;\n }"}, {"sha": "d58e2ec6b15f840ab142e65e315c4a2449b3b9f8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-memfn1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -13,6 +13,6 @@ constexpr X X::g(X x) { return x; }\n struct Y\n {\n   Y() { }\n-  constexpr Y f(Y y) {}\t\t// { dg-error \"constexpr\" }\n-  static constexpr Y g(Y y) {}\t// { dg-error \"constexpr\" }\n+  constexpr Y f(Y y) { return y; }  // { dg-error \"constexpr\" }\n+  static constexpr Y g(Y y) { return y; } // { dg-error \"constexpr\" }\n };"}, {"sha": "5ce50764b5f302c2607e3d84cc344f95fd4d924a", "filename": "gcc/testsuite/g++.dg/cpp0x/dc1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -27,7 +27,7 @@ struct D : public C {\n \tD (int _i) : C(), i(_i) { }\n \tD () : D(-1) { }\n \tvirtual ~D() { }\n-\tvirtual int f () { }\n+\tvirtual int f () { return 0; }\n };\n \n void f_D () { C* c = new D(); }"}, {"sha": "9c1fd53e4fe13184293c4da058a59c763ef2639d", "filename": "gcc/testsuite/g++.dg/cpp0x/dc3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -43,7 +43,7 @@ struct D<X> : public C {\n \tD (int _i) : C(), i(_i) { }\n \tD () : D(-1) { }\n \tvirtual ~D() { }\n-\tvirtual int f () { }\n+\tvirtual int f () { return 0; }\n };\n \n void f_D () { D<X>* d = new D<X>(); }"}, {"sha": "58fd415eea5a2fbe5e208d6dcfef59c4abd205a8", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype12.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype12.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,6 @@\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n+\n template<typename T, typename U>\n struct is_same\n {"}, {"sha": "47b70ecd89c96679763eb32a77bde6b1d13f9493", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype17.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype17.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/36628\n // { dg-do run { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n #include <typeinfo>\n #include <string.h>\n@@ -25,4 +26,6 @@ int main()\n     return 2;\n   if (strcmp (typeid(h).name(), \"FOivE\") != 0)\n     return 3;\n+\n+  return 0;\n }"}, {"sha": "b921dd6d899cda0bbd323162fdccdbd79d4bb8fd", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -49,7 +49,7 @@ public:\n   int a;\n   enum B_enum { b }; \n   decltype(a) c;\n-  decltype(a) foo() { }\n+  decltype(a) foo() { return 0; }\n   decltype(b) enums_are_in_scope() { return b; } // ok \n }; \n "}, {"sha": "65f75b1e4fa70fac4caae0b135d47d99e93fcb20", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype41.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype41.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -23,15 +23,15 @@ class B\n template <class T>\n struct C\n {\n-  template <class U> decltype (a.i) f() { } // #1\n-  template <class U> decltype (b.i) f() { } // #2\n+  template <class U> decltype (a.i) f() { return 0; } // #1\n+  template <class U> decltype (b.i) f() { return 1; } // #2\n };\n \n template <class T>\n struct D\n {\n-  template <class U> decltype (A::j) f() { } // #1\n-  template <class U> decltype (B::j) f() { } // #2\n+  template <class U> decltype (A::j) f() { return 2; } // #1\n+  template <class U> decltype (B::j) f() { return 3; } // #2\n };\n \n int main()"}, {"sha": "0e04dbfb8d7722032df0538dac5f05eb4b7319ac", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted28.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,7 +9,7 @@ private:\n   A(A const&) = default;\t// { dg-message \"private\" }\n };\n \n-int f(...) { }\n+int f(...) { return 0; }\n int main() {\n   A a;\n   f(a); \t\t\t// { dg-error \"this context\" }"}, {"sha": "5f7e83e14190e1014e54fec27e9558c84319c118", "filename": "gcc/testsuite/g++.dg/cpp0x/enum_base3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum_base3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum_base3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum_base3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -17,7 +17,7 @@ struct C\n };\n struct D : C\n {\n-  B foo () const { B a; a.foo (d); }\n+  B foo () const { B a; a.foo (d); return B(); }\n   H d;\n };\n struct F : C"}, {"sha": "023d83967774070cd3fa63f273c6825cc3b1e05e", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -22,7 +22,7 @@ void two [[gnu::unused]] (void) {}\n int\n five(void)\n [[noreturn]] // { dg-warning \"ignored\" }\n-{}\n+{ return 0; }\n \n [[noreturn]]\n void"}, {"sha": "94e9c0eb148dbb90305f392184867a4fec39c5a4", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist96.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist96.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist96.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist96.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/66515\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n #include <initializer_list>\n "}, {"sha": "7bcfe3ae70bcea8b057e55ca13a22cd709491fae", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-58566.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-58566.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-58566.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-58566.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,5 +6,6 @@ struct A\n   int foo()\n   {\n     [this]{ return foo; }; // { dg-error \"invalid use of member function|cannot convert\" }\n+    return 0;\n   }\n };"}, {"sha": "c2a60900b353ee03217a4d9785fab3444ad02693", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv10.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv10.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/69889\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename F> struct Tag {\n   static void fp() { f()(0); }"}, {"sha": "e1bd38a7bf718856bdf736a856dfd051d684d45c", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv12.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv12.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/80767\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename T, typename U = T> struct A { using type = U; };\n template <typename F, typename... G> struct B : B<F>::type, B<G...>::type {"}, {"sha": "27aac578c07adbf16a021b847d34f05bd5fdda83", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-defarg3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-defarg3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,7 +10,7 @@ struct function\n \n template<typename T> struct C\n {\n-  static T test(function f = [](int i){return i;}) { }\n+  static T test(function f = [](int i){return i;}) { return T(); }\n };\n \n int main()"}, {"sha": "371d03f941f87624fe88b8bbdfca1b4c82ff5335", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice3.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,6 +14,8 @@ bool Klass::dostuff()\n     if (local & 1) { return true; } // { dg-error \"not captured|non-static\" }\n     return false;\n   };\n+\n+  return true;\n }\n \n int main()"}, {"sha": "50a340dbb221f07bdc7c5fce9b0c892db061b7fd", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice5.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,6 +4,7 @@\n template<int> int foo()\n {\n   [] (void i) { return 0; } (0); // { dg-error \"incomplete|invalid|no match\" }\n+  return 0;\n }\n \n void bar()"}, {"sha": "27954f9408c70843cc76e45b05a4083818ff4fdc", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-nested2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -13,7 +13,7 @@ void f1(int i) {\n   };\n   struct s1 {\n     int f;\n-    int work(int n) {\n+    void work(int n) {\n       int m = n*n;\n       int j = 40;\n       auto m3 = [this,m]{"}, {"sha": "5dfd6ede19cd6245de82687ba10502416e28a143", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template12.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template12.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,6 +14,7 @@ class X\n         [&a]{\n             typename remove_reference < decltype (a) >::type t;\n         };\n+\treturn true;\n     }\n };\n template class X< int >;"}, {"sha": "8fbb821a4d3fc066c0828dea75f5f55dd7c44e91", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,7 +10,7 @@ struct T\n   foo (S<N> *p)\n   {\n     S<N> u;\n-    [&u] ()->bool {} ();\n+    [&u] ()->bool { return true; } ();\n   }\n };\n "}, {"sha": "41e4edd8a0fbcee598433392a81b97406aa1c61a", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this12.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -3,7 +3,7 @@\n \n struct A\n {\n-  int f() {}\n+  int f() { return 0; }\n   int i;\n \n   void foo()"}, {"sha": "474727c135c49c0b9732d2fa5b93eea68c33ce26", "filename": "gcc/testsuite/g++.dg/cpp0x/nolinkage1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -18,4 +18,4 @@ static void g()\n   A<B> a;\n }\n \n-int main() { g(); f(0); }\n+int main() { g(); f(0); return 0; }"}, {"sha": "6672323fdd404d1be4c331bb6bdb6568ab69910d", "filename": "gcc/testsuite/g++.dg/cpp0x/nolinkage1a.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnolinkage1a.cc?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,4 +12,4 @@ static void g()\n   A<B> a;\n }\n \n-int dummy() { g(); f(0); }\n+int dummy() { g(); f(0); return 0; }"}, {"sha": "5f23d463003b344ee3d6f9f5d41c835801e14028", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template5.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -7,7 +7,7 @@ template<> struct A1<0>\n {\n   template<typename, typename...> struct B1\n   {\n-    template<typename> int foo1() {}\n+    template<typename> int foo1() { return 0; }\n \n     int i1 = foo1<int>();\n   };\n@@ -19,7 +19,7 @@ template<> struct A2<0>\n {\n   template<typename, typename> struct B2\n   {\n-    template<typename> int foo2() {}\n+    template<typename> int foo2() { return 1; }\n \n     int i2 = foo2<int>();\n   };\n@@ -31,7 +31,7 @@ template<> struct A3<0>\n {\n   template<typename> struct B3\n   {\n-    template<typename> int foo3() {}\n+    template<typename> int foo3() { return 2; }\n \n     int i3 = foo3<int>();\n   };"}, {"sha": "9a2698435b6294ca6bc1960374561a6bbf1fd70c", "filename": "gcc/testsuite/g++.dg/cpp0x/parse1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile { target c++11 } }\n \n typedef int B;\t\t\t// { dg-message \"\" }\n-B::B() {}\t\t\t// { dg-error \"\" }\n+B::B() { return 0; }\t\t// { dg-error \"\" }"}, {"sha": "7a8b3249701f417dd906659fa04500afba3640c6", "filename": "gcc/testsuite/g++.dg/cpp0x/pr34054.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34054.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,4 @@\n // PR c++/34054\n // { dg-do compile { target c++11 } }\n \n-template<typename... T> T foo() {} // { dg-error \"not expanded|T\" }\n+template<typename... T> T foo() { return T(); } // { dg-error \"not expanded|T\" }"}, {"sha": "cbe2ed09ff8fa9171e741bef3bb19ad2bbcb25d3", "filename": "gcc/testsuite/g++.dg/cpp0x/pr47416.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr47416.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr47416.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr47416.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/47416\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n namespace std\n {"}, {"sha": "069fcd5f6dce43c2590bce6ca036596cf9d2d232", "filename": "gcc/testsuite/g++.dg/cpp0x/pr58781.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58781.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58781.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58781.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,7 +9,7 @@ operator\"\"_s(const char32_t *a, size_t b)\n   return 0;\n }\n \n-int\n+void\n f()\n {\n   using a = decltype(U\"\\x1181\"_s);"}, {"sha": "05665d6b93549104f59a85eda4527802b4329ff5", "filename": "gcc/testsuite/g++.dg/cpp0x/pr70538.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr70538.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr70538.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr70538.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,5 +11,5 @@ class B {\n template <typename> class C : B {\n   using base_type = B;\n   base_type::base_type;  // { dg-warning \"access declarations\" }\n-  PathComponentPiece m_fn1() {}\n+  PathComponentPiece m_fn1() { return PathComponentPiece(); }\n };"}, {"sha": "47f321344772d6079a6afcda16ec01da374cd9cd", "filename": "gcc/testsuite/g++.dg/cpp0x/pr81325.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81325.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81325.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81325.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -35,7 +35,7 @@ struct I {\n };\n template <typename ResultT, typename ArgT> struct J {\n   void operator()();\n-  ResultT operator()(ArgT) {}\n+  ResultT operator()(ArgT) { return ResultT(); }\n };\n struct K {\n   int AllowBind;"}, {"sha": "9ed0458adcc3fd53d2e5f32db9321049a82aed17", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for13.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for13.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -7,10 +7,12 @@\n template<typename T> int *begin(T &t)\n {\n     T::fail;\n+    return 0;\n }\n template<typename T> int *end(T &t)\n {\n     T::fail;\n+    return 0;\n }\n \n struct container1"}, {"sha": "4e0333cf927e52f6d78635ab41f77fd44e4f3d1f", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for14.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for14.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -7,10 +7,12 @@\n template<typename T> int *begin(T &t)\n {\n     T::fail;\n+    return 0;\n }\n template<typename T> int *end(T &t)\n {\n     T::fail;\n+    return 0;\n }\n \n //Test for defaults"}, {"sha": "65eda80fba090569f943a0f2c8a2c785abee8dc5", "filename": "gcc/testsuite/g++.dg/cpp0x/rv2n.C", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv2n.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -144,6 +144,7 @@ int test2_18()\n     sink_2_18(ca);\t\t// { dg-error \"\" }\n     sink_2_18(va);\t\t// { dg-error \"\" }\n     sink_2_18(cva);\t\t// { dg-error \"\" }\n+    return 0;\n }\n \n two   sink_2_23(const          A&);\n@@ -250,6 +251,7 @@ int test2_28()\n     const volatile A cva = a; // { dg-error \"deleted\" }\n     sink_2_28(va);\t\t// { dg-error \"\" }\n     sink_2_28(cva);\t\t// { dg-error \"\" }\n+    return 0;\n }\n \n three sink_2_35(volatile       A&);\n@@ -304,7 +306,7 @@ int test2_37()\n three sink_2_38(volatile       A&);\n eight sink_2_38(const volatile A&&);\n \n-int test2_38()\n+void test2_38()\n {\n                    A a;\n     const          A ca = a; // { dg-error \"deleted\" }\n@@ -396,7 +398,7 @@ int test2_57()\n five  sink_2_58(               A&&);\n eight sink_2_58(const volatile A&&);\n \n-int test2_58()\n+void test2_58()\n {\n                    A a;\n     const          A ca = a; // { dg-error \"deleted\" }\n@@ -439,6 +441,7 @@ int test2_68()\n     sink_2_68(ca);\t\t// { dg-error \"\" }\n     sink_2_68(va);\t\t// { dg-error \"\" }\n     sink_2_68(cva);\t\t// { dg-error \"\" }\n+    return 0;\n }\n \n seven sink_2_78(volatile       A&&);\n@@ -454,6 +457,7 @@ int test2_78()\n     sink_2_78(ca);\t\t// { dg-error \"\" }\n     sink_2_78(va);\t\t// { dg-error \"\" }\n     sink_2_78(cva);\t\t// { dg-error \"\" }\n+    return 0;\n }\n \n int main()"}, {"sha": "4549438f8efc7f353c86b9791133db76b3aa1a14", "filename": "gcc/testsuite/g++.dg/cpp0x/rv3n.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv3n.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -124,6 +124,7 @@ int test3_128()\n \n     sink_3_128(va);\t\t// { dg-error \"\" }\n     sink_3_128(cva);\t\t// { dg-error \"\" }\n+    return 0;\n }\n \n one   sink_3_134(               A&);"}, {"sha": "ffbf3c047eb91ed275bc0d661a227ddaaa4caf18", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert10.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert10.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,4 +5,5 @@ template<typename T> bool foo(T)\n {\n   int i;\n   static_assert(foo(i), \"Error\"); // { dg-error \"non-constant condition|not usable|non-constexpr\" }\n+  return true;\n }"}, {"sha": "36bf458e25f7852db5ea1b3e1401912ec87804d1", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert11.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert11.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,5 +6,6 @@ struct A\n   template<typename T> bool foo(T)\n   {\n     static_assert(foo(0), \"Error\"); // { dg-error \"non-constant condition|constant expression\" }\n+    return true;\n   }\n };"}, {"sha": "5d59e540910e4f37487d7b410b626b488c63d9e4", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,7 +14,7 @@ template<>\n   };\n \n template<typename T>\n-  T\n+  void\n   float_thing(T __x)\n   {\n     static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }"}, {"sha": "7332ff91882c1b29e73013cc5c227185952eb04c", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert13.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,7 +14,7 @@ template<>\n   };\n \n template<typename T>\n-  T\n+  void\n   float_thing(T __x)\n   {\n     static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }"}, {"sha": "ecf092bda0d415e331503e34d14582f729a6e0f1", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -40,9 +40,9 @@ decltype(*(T*)0+*(U*)0) add4(T t, U u)\n template <class T>\n struct A\n {\n-  T f() {}\n+  T f() { return T(); }\n   template <class U>\n-  T g() {}\n+  T g() { return T(); }\n   template <class V>\n   struct B\n   {"}, {"sha": "32390d60897ed3ef22f0b04f9b844d77c0bf80f6", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,9 +2,9 @@\n // { dg-do compile { target c++11 } }\n \n struct A {};\n-auto foo() -> struct A {}\n+auto foo() -> struct A { return A(); }\n \n enum B {};\n-auto bar() -> enum B {}\n+auto bar() -> enum B { return B(); }\n \n auto baz() -> struct C {} {}\t// { dg-error \"\" }"}, {"sha": "183cb2b5631128bbfd9c328db613f506cc4e6300", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic114.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic114.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic114.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic114.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/49785\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename, typename ...> struct B { };\n template <typename> class A;"}, {"sha": "4bf014b54da9bd0d37a604a83d003f60241378f5", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic57.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic57.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,7 +10,7 @@ struct array<T, 0> {\n };\n \n template<typename T, int... Dims>\n-int array<T, Dims...>::foo() { }\n+int array<T, Dims...>::foo() { return 0; }\n \n template<typename T>\n-int array<T, 0>::bar() { }\n+int array<T, 0>::bar() { return 0; }"}, {"sha": "9223235174fb9a91a9251db8bf315a9239ffd496", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic65.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,6 @@\n // { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n+\n struct unused;\n template<typename T1 = unused, typename T2 = unused, typename T3 = unused,\n          typename T4 = unused, typename T5 = unused, typename T6 = unused>"}, {"sha": "bf86deee8fddbe51304cf66bbf7584ad4c3e4816", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic66.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic66.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile { target c++11 } }\n \n template<typename Result, typename Functor, typename... ArgTypes>\n-Result bind(Functor, ArgTypes...) { }\n+Result bind(Functor, ArgTypes...) { return Result(); }\n \n void f()\n {"}, {"sha": "12d05c56237ff47b9690df0e8c517203f316a11a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic97.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic97.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic97.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic97.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -21,7 +21,7 @@ template<typename _Functor, typename... _Bound_args>\n \n template<typename _Functor, typename _Arg>\n   _Bind<_Functor(_Arg)>\n-  bind(_Functor, _Arg) { }\n+  bind(_Functor, _Arg) { return _Bind<_Functor(_Arg)>(); }\n \n struct State\n {"}, {"sha": "6f1d9b40676d73a4878f09041bb77c02c19ff847", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic98.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic98.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/42358\n // { dg-do assemble { target c++11 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n typedef __PTRDIFF_TYPE__ ptrdiff_t;\n typedef __SIZE_TYPE__ size_t;\n@@ -177,6 +178,7 @@ namespace std __attribute__ ((__visibility__ (\"default\"))) {\n     };\n     template<typename _Tp>     struct less : public binary_function<_Tp, _Tp, bool>     {\n \tbool       operator()(const _Tp& __x, const _Tp& __y) const       {\n+\t    return true;\n \t}\n     };\n     template<typename _Pair>     struct _Select1st : public unary_function<_Pair,            typename _Pair::first_type>     {"}, {"sha": "9d79fb61e960ff3803f4ae52dc2b3157c5fc9696", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn11.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn11.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n auto f() { return; } \t\t// OK, return type is void\n auto* g() { return; }\t\t// { dg-error \"no value\" }"}, {"sha": "12f13a08906a8a28b68a4b241c7601e717ba7e6b", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn29.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn29.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -24,6 +24,7 @@ namespace Baboon {\n    template <typename T>\n    bool f4(T const& v){\n        f2(v);\n+       return true;\n    }\n }\n "}, {"sha": "4e541625eec8ac7be24c5eb27e5ebeb842d9e54b", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn38.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn38.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/80145\n // { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n auto* foo() { }  // { dg-error \"no return statements\" }\n auto* foo();"}, {"sha": "d330ccfed3e66ada57a25ad512ca53fc97a85e0e", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-return2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n constexpr int f (int i)\n {"}, {"sha": "d0b2dd3f256fd348e2b1f4bb772d99a17a0bb4a2", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init7.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n // PR c++/59349\n // { dg-do compile { target c++14 } }\n \n-int foo () {\n+void foo () {\n   [bar()]{};\t\t\t// { dg-error \"empty initializer\" }\n }"}, {"sha": "da1e0764a100849a7ebc5385b57a81d29314480f", "filename": "gcc/testsuite/g++.dg/cpp1y/pr63996.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n constexpr int\n foo (int i)"}, {"sha": "43eb01f1fcbb2930e4e65dd4ff875dfd9bfa9f5f", "filename": "gcc/testsuite/g++.dg/cpp1y/pr65202.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // // PR c++/65202\n // { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename T> struct is_move_constructible;\n template <typename T> struct is_move_assignable;"}, {"sha": "ae76f7faa31c6309f55050ecfa39237c2a68fc96", "filename": "gcc/testsuite/g++.dg/cpp1y/pr66443-cxx14.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr66443-cxx14.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -37,6 +37,7 @@ C::C ()\n \n bool Ok (C &c)\n {\n+  return true;\n }\n \n int main ()"}, {"sha": "181702acc5b1287750916b6e6fd62a02aafb55de", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79253.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79253.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79253.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79253.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -28,6 +28,6 @@ struct D\n   baz () { bar<F, B<>>; }\n   template <bool, bool, bool> struct F\n   {\n-    static B<> baz () { foo<E<0, 0, 0>> (0, 0); }\n+    static B<> baz () { foo<E<0, 0, 0>> (0, 0); return B<>(); }\n   };\n };"}, {"sha": "ef655f490977e128fbadcb7d613599ea30ee7781", "filename": "gcc/testsuite/g++.dg/cpp1y/static_assert1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -19,6 +19,7 @@ template<typename T>\n   {\n     static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }\n     static_assert(is_float<T>::value); // { dg-error \"static assertion failed\" }\n+    return T();\n   }\n \n int"}, {"sha": "d602b1e04ce8cafdddb0b0d8132e802a02236db1", "filename": "gcc/testsuite/g++.dg/cpp1y/static_assert2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -19,6 +19,7 @@ template<typename T>\n   {\n     static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }\n     static_assert(is_float<T>::value); // { dg-error \"static assertion failed\" }\n+    return T();\n   }\n \n int"}, {"sha": "2ef01cf74806d43b428e23bef2675f46c94006a1", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ44.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/67161\n // { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename _Tp> struct integral_constant {\n   static constexpr _Tp value = 0;"}, {"sha": "29a20480e7776280f8d6eeaeb29697360ae441a4", "filename": "gcc/testsuite/g++.dg/cpp1z/fold6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold6.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@\n int i;\n \n template <int... Is>\n-int f()\n+void f()\n {\n   (i ? i : Is + ...);\t\t// { dg-error \"\" }\n   (i + Is + ...);\t\t// { dg-error \"\" }"}, {"sha": "852531ad2585b1262d82713fe32b66122d9ce787", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -69,6 +69,7 @@ foo (inline int var31)\t\t\t\t// { dg-error \"'var31' declared as an 'inline' paramet\n {\n   inline int var32;\t\t\t\t// { dg-error \"'inline' specifier invalid for variable 'var32' declared at block scope\" }\n   static inline int var33;\t\t\t// { dg-error \"'inline' specifier invalid for variable 'var33' declared at block scope\" }\n+  return 0;\n }\n template <typename A, typename B, typename C>\n struct Y"}, {"sha": "2c49dd9bf73c011f71604350c3cdc00ea890db7e", "filename": "gcc/testsuite/g++.dg/cpp1z/lambda-this1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -50,7 +50,7 @@ struct B {\n   double foo () {\n     return [this]{ return [*this] { return b; }; }()();\t// { dg-error \"'*this' capture only available with\" \"\" { target c++14_down } }\n   }\n-  double bar () {\n+  void bar () {\n     auto c = []{ return [*this] { return b; }; };\t// { dg-error \"'this' was not captured for this lambda function\" }\n   }\t\t\t\t\t\t\t// { dg-error \"invalid use of non-static data member 'B::b'\" \"\" { target *-*-* } .-1 }\n };\t\t\t\t\t\t\t// { dg-error \"'*this' capture only available with\" \"\" { target c++14_down } .-2 }"}, {"sha": "6f787cde95889fc3bab78e3be8432522e3dfd2ca", "filename": "gcc/testsuite/g++.dg/cpp1z/static_assert-nomsg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic_assert-nomsg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic_assert-nomsg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic_assert-nomsg.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -13,7 +13,7 @@ template<>\n   };\n \n template<typename T>\n-  T\n+  void\n   float_thing(T __x)\n   {\n     static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }"}, {"sha": "8f62edc1cf03acb3b407af897be17a0b2d99e4fb", "filename": "gcc/testsuite/g++.dg/debug/dwarf-eh-personality-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf-eh-personality-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf-eh-personality-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf-eh-personality-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,7 +11,7 @@ int foo (void)\n   return 0;\n }\n \n-int foobar (void)\n+void foobar (void)\n {\n }\n "}, {"sha": "a514472b397f2522767dc4b68db485e39639738b", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/dwarf4-typedef.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf4-typedef.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf4-typedef.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf4-typedef.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,7 +11,7 @@ struct A {\n \n struct B : public A {\n   template <typename A>\n-  bool foo(A x[2]) { }\n+  bool foo(A x[2]) { return true; }\n };\n \n template <typename T>"}, {"sha": "74a11bf25c5044303da3b13a7c5aec4399f8ee87", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/icf.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ficf.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ficf.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ficf.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -21,13 +21,13 @@ class B\n   int j;\n };\n \n-int\n+void\n test1(A* a)\n {\n   a->work();\n }\n \n-int\n+void\n test2(A* a)\n {\n   if (a->p())"}, {"sha": "ef2479f0cd9ceba6dab7a00b331ea3fe44bc543a", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr61433.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr61433.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr61433.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr61433.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,6 +2,7 @@\n // { dg-do compile { target c++11 } }\n // { dg-xfail-if \"\" { powerpc-ibm-aix* } }\n // { dg-options \"-O -fcompare-debug -fno-inline -fno-ipa-pure-const -fipa-sra\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <class T>\n struct A\n@@ -21,4 +22,5 @@ auto k(T t, U u, V v) -> decltype (t.U::template B<V>::MEM)\n int main()\n {\n   k( C(), A<int>(), D() );\n+  return 0;\n }"}, {"sha": "a6514f1ff70d460c8ae42233c4d464ee496619f9", "filename": "gcc/testsuite/g++.dg/debug/nullptr01.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,6 +10,7 @@ template <class T> nullptr_t g(T t);\n template <> nullptr_t g(A<nullptr_t>)\n {\n   nullptr_t local;\n+  return nullptr;\n }\n // { dg-final { scan-assembler \"_Z1fDn\" } }\n // { dg-final { scan-assembler \"_Z1gI1AIDnEEDnT_\" } }"}, {"sha": "0efcbfa74eb69e9ad8d92e1bc8460f1249b749e9", "filename": "gcc/testsuite/g++.dg/debug/pr16792.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr16792.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr16792.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr16792.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n \n struct S { S(); };\n-int foo (S b, double j) { };\n+int foo (S b, double j) { return 0; };\n \n int main ()\n {"}, {"sha": "6ac9116a3d78399e1e1da4dff7b20ed9d47128bb", "filename": "gcc/testsuite/g++.dg/debug/pr46241.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr46241.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr46241.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr46241.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n class btIDebugDraw;\n class btCollisionWorld {\n-    virtual btIDebugDraw* getDebugDrawer()  { };\n+    virtual btIDebugDraw* getDebugDrawer()  { return 0; };\n     static void rayTestSingle();\n };\n class btTriangleCallback {"}, {"sha": "7e242b9bc3dddea258ec6d529eff63195e7ad8b5", "filename": "gcc/testsuite/g++.dg/debug/pr46338.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr46338.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr46338.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr46338.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,6 +9,7 @@ struct S\n {\n   int f ()\n   {\n+    return 0;\n   }\n };\n "}, {"sha": "84c6e3f87be49d113e9c7a3f2748db14970960ca", "filename": "gcc/testsuite/g++.dg/debug/pr47106.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr47106.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr47106.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr47106.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -22,18 +22,20 @@ inline bool\n baz (S s1, S)\n {\n   while (f (&s1));\n+\n+  return true;\n }\n \n inline bool\n bar (S s1, S s2, S)\n {\n-  baz (s1, s2);\n+  return baz (s1, s2);\n }\n \n S getS ();\n \n bool\n foo ()\n {\n-  bar (getS (), getS (), getS ());\n+  return bar (getS (), getS (), getS ());\n }"}, {"sha": "0bd546a74e8ac0dd2243f6b28ad5385aa086048d", "filename": "gcc/testsuite/g++.dg/debug/pr71057.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71057.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71057.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71057.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,4 +9,4 @@ template <typename> struct C {\n };\n template <typename> struct D {};\n C<int> a;\n-D<B<int>> fn1() { fn1, a; }\n+D<B<int>> fn1() { fn1, a; return D<B<int>>(); }"}, {"sha": "e9bc88ca863a6e8e4de8f685dcfc401bcfb31fc2", "filename": "gcc/testsuite/g++.dg/debug/pr71432.C", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71432.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71432.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71432.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -105,9 +105,11 @@ namespace std\n     public:\n       size_type size ()const noexcept\n       {\n+\treturn 0;\n       }\n       const _CharT *data () const noexcept\n       {\n+\treturn 0;\n       }\n     };\n   }\n@@ -127,9 +129,14 @@ class CLIParameterType\n {\n   const std::string & getSwitchOption (unsigned int i) const\n   {\n-  } unsigned int getSwitchOptionCount () const\n+    static std::string a;\n+    return a;\n+  }\n+  unsigned int getSwitchOptionCount () const\n   {\n-  } int checkSwitched (const std::string & value) const;\n+    return 0;\n+  }\n+  int checkSwitched (const std::string & value) const;\n };\n \n int\n@@ -138,4 +145,6 @@ CLIParameterType::checkSwitched (const std::string & value) const\n   int contains = false;\n   for (unsigned int i = 0; !contains && i < getSwitchOptionCount () ;)\n     contains = getSwitchOption (i) == value;\n+\n+  return 0;\n }"}, {"sha": "b472e62c8037ddc34674627031ffe19c2fd92c82", "filename": "gcc/testsuite/g++.dg/debug/pr80461.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr80461.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr80461.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr80461.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@ template <typename> class A;\n struct B\n {\n   template <typename T, typename U>\n-  static bool foo (U T::*) {}\n+  static bool foo (U T::*) { return true; }\n };\n template <typename, typename> class J;\n template <typename T, typename U, typename V, typename... W>"}, {"sha": "940638f4e9bc94702d3022ff3bc62def4e4d813a", "filename": "gcc/testsuite/g++.dg/dfp/44473-1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do assemble } */\n+/* { dg-additional-options \"-Wno-return-type\" } */\n \n /* Minimized from the testcase in PR c++/44473; mangling of decimal types\n    did not include CV qualifiers. */\n@@ -119,4 +120,5 @@ bool\n bar ()\n {\n   vec.push_back (std::decimal::decimal32 (0));\n+  return true;\n }"}, {"sha": "60fc1ebca9c5d76b5f2f6b4c9e037108c31f286f", "filename": "gcc/testsuite/g++.dg/dfp/44473-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,12 +14,12 @@ namespace std {\n   }\n }\n \n-int bar (const std::decimal::decimal64 & x) { }\n+int bar (const std::decimal::decimal64 & x) { return 0; }\n \n int foo ()\n {\n   std::decimal::decimal64 x(0);\n-  bar (x);\n+  return bar (x);\n }\n \n // { dg-final { scan-assembler \"_Z3barRKDd:\" } }"}, {"sha": "2d04d9c08e8f0b8bab6cca6be5301009b040ed75", "filename": "gcc/testsuite/g++.dg/eh/builtin1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,7 +8,7 @@ extern \"C\" int printf (const char *, ...);\n \n extern void callme (void) throw();\n \n-int\n+void\n foo (int i)\n {\n   try {\n@@ -18,7 +18,7 @@ foo (int i)\n   }\n }\n \n-int\n+void\n bar (int i)\n {\n   try {"}, {"sha": "0c0bfe6a6794b1ea5ca21c3e3d27da613609bd4c", "filename": "gcc/testsuite/g++.dg/eh/builtin2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -7,7 +7,7 @@ extern \"C\" int printf (const char *, ...) throw();\n \n extern void callme (void) throw();\n \n-int\n+void\n foo (int i)\n {\n   try {\n@@ -17,7 +17,7 @@ foo (int i)\n   }\n }\n \n-int\n+void\n bar (int i)\n {\n   try {"}, {"sha": "5b8c62b4b639d96c98c46d3fb84603df55e79f52", "filename": "gcc/testsuite/g++.dg/eh/builtin3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fbuiltin3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,7 +5,7 @@\n \n extern void callme (void) throw();\n \n-int\n+void\n bar (int i)\n {\n   try {"}, {"sha": "4f67770b4a71de1dd51017e5254212b96a6273d2", "filename": "gcc/testsuite/g++.dg/eh/pr45569.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr45569.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr45569.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr45569.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -7,7 +7,7 @@ _Complex float g ();\n void\n i (_Complex float);\n \n-float j ()\n+void j ()\n {\n   _Complex float x = 0;\n   try"}, {"sha": "8d98d3fd3d3ee1f38c3811fda9a27fe8f191024d", "filename": "gcc/testsuite/g++.dg/eh/unwind2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funwind2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funwind2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Funwind2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -46,7 +46,7 @@ namespace\n     typedef _CharT char_type;\n     char_type * _M_in_beg;\n     char_type *eback () { return _M_in_beg; }\n-    char_type *gptr () {}\n+    char_type *gptr () { return 0; }\n   };\n }\n namespace std"}, {"sha": "ddf48cb373a27f6c4f855b289253611503ebc71a", "filename": "gcc/testsuite/g++.dg/expr/bitfield11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield11.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@ struct A\n   unsigned int a : 1;\n };\n \n-bool\n+void\n foo (A *x, A *y)\n {\n   x->a = y ? y->a : true;"}, {"sha": "2398bedf1b4b8882ef116ee4d4f92aac50d01508", "filename": "gcc/testsuite/g++.dg/expr/static_cast7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast7.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,7 +1,7 @@\n // Regression test for bug 39415 (and its duplicate 44916).\n struct S {};\n struct T : S {};\n-int f(const T*) {}\n+int f(const T*) { return 0; }\n void f(T*);\n int main() {\n   S* s(0);"}, {"sha": "02e8a23258d2a793be8fc8d6e5663840de50833a", "filename": "gcc/testsuite/g++.dg/ext/altivec-14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-14.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,7 +5,7 @@\n void f (__attribute__((altivec (vector__))) signed int * a,\n \t__attribute__((altivec (vector__))) signed int * const b);\n \n-int\n+void\n foo (void)\n {\n   __attribute__((altivec (vector__))) signed int a[1], b[1];"}, {"sha": "3e1fd4bbe4820eec7bc23bb3a8f3273ef729037f", "filename": "gcc/testsuite/g++.dg/ext/asm13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm13.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n // PR c++/69257\n \n-int fn1() {\n+void fn1() {\n   struct S *x;\n   __asm ( \"\": :\"\" (*x));\t// { dg-error \"incomplete\" }\n }"}, {"sha": "1e158cd6d012e1c59c8f0cbba2243d09b6ebd627", "filename": "gcc/testsuite/g++.dg/ext/builtin-object-size3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,7 +5,7 @@ void baz (int *, int *);\n \n #define MEMCPY(d,s,l) __builtin___memcpy_chk (d, s, l, __builtin_object_size (d, 0)) // { dg-warning \"writing\" }\n \n-int\n+void\n foo ()\n {\n   int *p = new int;\n@@ -15,7 +15,7 @@ foo ()\n   baz (p, q);\n }\n \n-int\n+void\n bar ()\n {\n   int *p = new int;"}, {"sha": "594d3a98672da5229fd9a3cacbe5e09016fd998c", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_assign_odr.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign_odr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign_odr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_assign_odr.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,7 @@\n // PR c++/36870\n // { dg-do run }\n+\n+\n #include <cassert>\n \n struct S { const S& operator= (const S&); };\n@@ -9,8 +11,9 @@ bool f ();\n int main ()\n {\n   assert (__has_nothrow_assign (S) == f ());\n+  return 0;\n }\n \n-const S& S::operator= (const S&) { }\n+const S& S::operator= (const S&a) { return a; }\n \n bool f () { return __has_nothrow_assign (S); }"}, {"sha": "d74a66aa224797772855deb3be2184ad8bfa8eff", "filename": "gcc/testsuite/g++.dg/ext/label7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel7.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,7 +1,7 @@\n // PR c++/32121\n // { dg-do compile }\n \n-int f (void)\n+void f (void)\n {\n   a:;\n   __label__ a;\t// { dg-error \"not at the beginning\" }"}, {"sha": "edffe35a6c617cbfe6d9a3844b0ba0f3be73a251", "filename": "gcc/testsuite/g++.dg/ext/label8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel8.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,7 +1,7 @@\n // PR c++/32121\n // { dg-do compile }\n \n-int f (void)\n+void f (void)\n {\n   __label__ a, b;\n   __label__ c;"}, {"sha": "545e089f1bbbcbae0bcfd9627a4fe8e5b6c5499b", "filename": "gcc/testsuite/g++.dg/ext/tmplattr7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr7.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,4 +8,4 @@ bool test(const List<int> &);\n \n int i = bar(List<int>());\n \n-bool test(const List<int> &) {}\n+bool test(const List<int> &) { return true; }"}, {"sha": "49bdc5a56118880e134695379d2c68f1ecde45b5", "filename": "gcc/testsuite/g++.dg/ext/vector8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector8.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,7 +9,7 @@ vector int a1;\n vector float b;\n vector int b1;\n \n-int f(void)\n+void f(void)\n {\n  a =  a | b; /* { dg-error \"\" } */\n  a =  a & b; /* { dg-error \"\" } */"}, {"sha": "60a34db6edef4dca7338737893ce3370bad1c061", "filename": "gcc/testsuite/g++.dg/ext/visibility/anon1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -7,5 +7,5 @@\n \n namespace\n {\n-  int f() { }\n+  int f() { return 0; }\n }"}, {"sha": "7abdd0505182e2009baecd477a3fb0ecca1fd1b9", "filename": "gcc/testsuite/g++.dg/ext/visibility/anon2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,4 +9,4 @@ namespace\n   struct A { };\n }\n \n-A f () { }\n+A f () { return A(); }"}, {"sha": "1da1c14d254cac366d973787954af922dc46381f", "filename": "gcc/testsuite/g++.dg/ext/visibility/namespace1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,7 +10,7 @@\n \n namespace foo __attribute ((visibility (\"hidden\")))\n {\n-  int f() { }\n+  int f() { return 0; }\n   void g();\n   template <typename T> void t() { }\n   class A"}, {"sha": "fa51feed8f31b6f73c41004397130453d5a299bb", "filename": "gcc/testsuite/g++.dg/ext/vla16.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla16.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,4 +5,6 @@ long fn1() {\n   const int a = fn1();\n   int b[a];\n   int c = *(&b[0] + sizeof(0));\n+\n+  return 0;\n }"}, {"sha": "07e6bd42239076b580dc7209f9ba14e45262edb6", "filename": "gcc/testsuite/g++.dg/goacc/reference.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Freference.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Freference.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Freference.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,4 @@\n-int\n+void\n test1 (int &ref)\n {\n #pragma acc kernels copy (ref)\n@@ -7,7 +7,7 @@ test1 (int &ref)\n   }\n }\n \n-int\n+void\n test2 (int &ref)\n {\n   int b;"}, {"sha": "a83957ea2a34fc5143779a7b20c4155506666fda", "filename": "gcc/testsuite/g++.dg/gomp/pr37189.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr37189.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr37189.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr37189.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -18,7 +18,7 @@ bar (T &)\n {\n }\n \n-int\n+void\n foo ()\n {\n   T t;"}, {"sha": "dfa7db66d2c2679c2219765c72acd5c95e4f7878", "filename": "gcc/testsuite/g++.dg/gomp/pr39495-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr39495-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr39495-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr39495-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@\n #define INT_MAX __INT_MAX__\n #define UINT_MAX (2U * __INT_MAX__ + 1)\n \n-int\n+void\n foo (void)\n {\n   int i;\n@@ -50,7 +50,7 @@ foo (void)\n     ;\n }\n \n-int\n+void\n bar (void)\n {\n   int i;"}, {"sha": "f8b0f23183cf10d20c0871dbd11351afe237f9a6", "filename": "gcc/testsuite/g++.dg/gomp/pr39495-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr39495-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr39495-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr39495-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@\n #define INT_MAX __INT_MAX__\n #define UINT_MAX (2U * __INT_MAX__ + 1)\n \n-int\n+void\n foo (void)\n {\n   int i;"}, {"sha": "706dd8369689b66392c966a28f1f57f05c8b33ef", "filename": "gcc/testsuite/g++.dg/gomp/pr82054.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr82054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr82054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr82054.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,4 +10,6 @@ a::b ()\n {\n #pragma omp parallel\n   ;\n+\n+  return true;\n }"}, {"sha": "6c31aaff03d2981eb8ce1a737b7a77eff7fed6b8", "filename": "gcc/testsuite/g++.dg/inherit/covariant10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant10.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,12 +11,12 @@ struct c1 {\n struct c5 {};\n \n struct c6 : virtual c1 {\n-  virtual c5* f33() const {}\n+  virtual c5* f33() const { return 0; }\n };\n \n struct c13 : virtual c5 { };\n \n struct c17 : virtual c6\n {\n-  virtual c13* f33() const {}\n+  virtual c13* f33() const { return 0; }\n };"}, {"sha": "97b8d13cfa5e3114bf6020d53a52bebb633628ab", "filename": "gcc/testsuite/g++.dg/inherit/covariant11.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant11.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -7,19 +7,19 @@\n struct c2 { int i; };\n \n struct c1 {\n-  virtual c2& f8() {}\n+  virtual c2& f8() { static c2 a; return a; }\n };\n \n struct c3 : c1, c2 {\n-  virtual c2& f8() {}\n+  virtual c2& f8() { static c2 a; return a; }\n };\n \n struct c11 : public c1 {\n-  virtual c3& f8() {}\n+  virtual c3& f8() { static c3 a; return a; }\n };\n \n struct c15 : virtual c3 {\n-  virtual c2& f8() {}\n+  virtual c2& f8() { static c3 a; return a; }\n };\n \n struct c18 : virtual c11 {"}, {"sha": "130b14ad863228fa99b85fba2804e5cecbdd45e0", "filename": "gcc/testsuite/g++.dg/inherit/protected1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fprotected1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fprotected1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fprotected1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,6 +9,7 @@ template <class X> struct B<A<X> >\n   {\n     A<X> a;\n     a.m_class->m_object;\n+    return 0;\n   }\n };\n template <class T> class A\n@@ -23,6 +24,7 @@ bool\n A<T>::operator== (const X &) const\n {\n   B<X>::check;\n+  return true;\n }\n class C\n {"}, {"sha": "18d735fd87be9a0fb6980c208da0459de453f93c", "filename": "gcc/testsuite/g++.dg/init/inline1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finline1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finline1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Finline1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -3,7 +3,7 @@\n \n struct A {\n   ~A();\n-  A f(A) { }\n+  A f(A) { return A(); }\n };\n \n "}, {"sha": "5f07aaa40d03e07679ea2cab348e09314b3d3658", "filename": "gcc/testsuite/g++.dg/init/new18.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew18.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-O2 -fstrict-aliasing\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n // This caused an ICE during placement new.\n "}, {"sha": "903c06496d5cdbe69a9a6ba886b62c313247953a", "filename": "gcc/testsuite/g++.dg/init/reference2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,7 +5,7 @@\n \n // We should we able to diagnostic this without instantiating the template\n template <int a1>\n-int f()\n+void f()\n {\n   typedef int& T;\n   T a = T();  // { dg-error \"value-initialization of reference\" }"}, {"sha": "52ae935ca795781f1b83a73300432ca4ca2e0cc1", "filename": "gcc/testsuite/g++.dg/init/reference3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-additional-options \"-Wno-return-type\" }\n // This code used to be accepted but it is invalid as there is no\n // value initialization of a reference type.\n // PR c++/36695"}, {"sha": "a964a29df587cf3a3473fbeccdeb9a43d24c14a4", "filename": "gcc/testsuite/g++.dg/init/switch1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fswitch1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fswitch1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fswitch1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,4 @@\n-int f(int c)\n+void f(int c)\n {\n   switch (c)\n   {"}, {"sha": "84120e791f9d50313b4ad421d9265d515be4f244", "filename": "gcc/testsuite/g++.dg/ipa/devirt-10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-10.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,7 +4,7 @@ class wxPaintEvent {  };\n struct wxDCBase\n { \n   wxDCBase ();\n-  virtual int GetLayoutDirection() const{}\n+  virtual int GetLayoutDirection() const{ return 0; }\n   virtual void SetLayoutDirection(int){}\n };\n struct wxWindowDC  : public wxDCBase {};"}, {"sha": "923c98e92eb94e83a0bfd7f77e38fee69f124886", "filename": "gcc/testsuite/g++.dg/ipa/devirt-13.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-13.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,7 +11,8 @@ public:\n };\n }\n class A a, *b=&a;\n-main()\n+\n+int main()\n {\n   return b->foo();\n }"}, {"sha": "5efbe68bf03e2d243ae2eda9b14977229831fb10", "filename": "gcc/testsuite/g++.dg/ipa/devirt-14.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-14.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -20,7 +20,8 @@ public:\n };\n }\n class B a, *b=&a;\n-main()\n+\n+int main()\n {\n   if (0)\n     {"}, {"sha": "4a899d4178a68c9e28b3be9005fef87bbc697cff", "filename": "gcc/testsuite/g++.dg/ipa/devirt-15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-15.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -30,7 +30,7 @@ m(void)\n {\n   b->foo();\n }\n-main()\n+int main()\n {\n   m();\n }"}, {"sha": "762ecb29fdeb0de759c83073e62c4872993266f2", "filename": "gcc/testsuite/g++.dg/ipa/devirt-16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-16.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -19,7 +19,7 @@ public:\n };\n }\n class B *b;\n-main()\n+int main()\n {\n   int c;\n   if (c)"}, {"sha": "9edc205ce52944d3bcd5fcade213ce6f197776f3", "filename": "gcc/testsuite/g++.dg/ipa/devirt-17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-17.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -20,7 +20,7 @@ public:\n }\n class B *b;\n void get_me_lost (void *);\n-main()\n+int main()\n {\n   int c;\n   if (c)"}, {"sha": "769e0bbc888b6eb9f83099e858a5e721cbf709cc", "filename": "gcc/testsuite/g++.dg/ipa/devirt-18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-18.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -19,7 +19,7 @@ public:\n };\n }\n class B *b;\n-main()\n+int main()\n {\n   if (0)\n     {"}, {"sha": "8277deaabddd199ca8ccd77cc9b93bf23b6ef720", "filename": "gcc/testsuite/g++.dg/ipa/devirt-19.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-19.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -3,6 +3,8 @@\n    a type change.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-ipa-cp\"  } */\n+/* { dg-additional-options \"-Wno-return-type\"  } */\n+\n struct A {\n   void operator==(const A &);\n };"}, {"sha": "aa0488df92d7a920ef8f80aaa11b629511d7633f", "filename": "gcc/testsuite/g++.dg/ipa/devirt-21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-21.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -33,7 +33,7 @@ MultiTermDocs::~MultiTermDocs() {\n \n B *C::m_fn1(int *) { abort (); }\n \n-main()\n+int main()\n {\n   class C c;\n }"}, {"sha": "15e65b579f7e70a79c3cf9ac5d26fd3982071944", "filename": "gcc/testsuite/g++.dg/ipa/devirt-23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-23.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -41,7 +41,7 @@ MultiTermDocs::~MultiTermDocs() {\n \n B *C::m_fn1(int *) { abort (); }\n \n-main()\n+int main()\n {\n   class C c;\n }"}, {"sha": "fdb5c6235337e23d23836dd9146facadcc6f6e8d", "filename": "gcc/testsuite/g++.dg/ipa/devirt-38.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-38.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,7 +12,7 @@ class A : public SnmpSyntax\n {\n public:\n   A (int);\n-  SnmpSyntax *m_fn1 () const {}\n+  SnmpSyntax *m_fn1 () const { return 0; } \n   SnmpSyntax &operator=(const SnmpSyntax &);\n };\n int a;"}, {"sha": "32e0d22c0e70d8eb4a1e18229bda97a2ff3b3c83", "filename": "gcc/testsuite/g++.dg/ipa/devirt-40.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -13,10 +13,14 @@ class A\n   UnicodeString &m_fn1 (UnicodeString &, int &p2, UErrorCode &) const;\n };\n UnicodeString::UnicodeString () {}\n+\n+UnicodeString g;\n+\n UnicodeString &\n A::m_fn1 (UnicodeString &, int &p2, UErrorCode &) const\n {\n   UnicodeString a[2];\n+  return g;\n }\n \n /* { dg-final { scan-tree-dump-not \"\\\\n  OBJ_TYPE_REF\" \"fre3\"  } } */"}, {"sha": "149da911b250ff85c6b766c72563fe767f802454", "filename": "gcc/testsuite/g++.dg/ipa/devirt-41.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-41.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -13,7 +13,7 @@ test (struct A *a)\n     __builtin_abort ();\n }\n \n-main()\n+int main()\n {\n   struct B a;\n   dostuff (&a);"}, {"sha": "152b9689dc4d6aff51cbbdada225497ea8ccd406", "filename": "gcc/testsuite/g++.dg/ipa/devirt-42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-42.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -16,7 +16,7 @@ A::barbar()\n   return static_cast<B*>(this)->barbar();\n }\n \n-main()\n+int main()\n {\n   struct B b;\n   struct A *a = &b;"}, {"sha": "5de761412d0560b15bfaf01bad184ee70e5990ef", "filename": "gcc/testsuite/g++.dg/ipa/devirt-44.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-44.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O3 -fno-ipa-cp -fdump-ipa-inline-details -fno-early-inlining\" } */\n struct A {\n   virtual int foo () {return 1;}\n-  int wrapfoo () {foo();}\n+  void wrapfoo () {foo();}\n   A() {wrapfoo();}\n };\n struct B:A {virtual int foo () {return 2;}};\n@@ -17,7 +17,7 @@ test (struct A *a)\n     __builtin_abort ();\n }\n \n-main()\n+int main()\n {\n   struct B a;\n   dostuff (&a);"}, {"sha": "ce415e7c003b70019eedf143ed08759fcc769441", "filename": "gcc/testsuite/g++.dg/ipa/devirt-45.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-45.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O3 -fno-ipa-cp -fdump-ipa-inline-details -fno-early-inlining\" } */\n struct A {\n   virtual int foo () {return 1;}\n-  int wrapfoo () {foo();}\n+  void wrapfoo () {foo();}\n   A() {wrapfoo();}\n };\n inline void* operator new(__SIZE_TYPE__ s, void* buf) throw() {\n@@ -29,7 +29,7 @@ test (struct A *a)\n   test2(a);\n }\n \n-main()\n+int main()\n {\n   struct B a;\n   dostuff (&a);"}, {"sha": "1aed85f8642dd8283d7210c2ac6430f675ef7c7b", "filename": "gcc/testsuite/g++.dg/ipa/devirt-48.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-48.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,14 +5,14 @@ struct A {\n };\n struct B:A {\n    virtual int foo(){return 2;}\n-   int callfoo(){foo();}\n+   void callfoo(){foo();}\n };\n struct C:A {\n    virtual int foo(){return 3;}\n };\n struct D:B {\n    virtual int foo(){return 4;}\n-   int callfoo(){foo();}\n+   void callfoo(){foo();}\n };\n static void\n test (struct A *a)"}, {"sha": "5c736c4037a160969857122dcb11bf35b0590a9e", "filename": "gcc/testsuite/g++.dg/ipa/devirt-52.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-52.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n // PR middle-end/77259\n // { dg-do compile { target c++11 } }\n // { dg-options \"-O2\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename, typename = int> class A;\n template <typename, typename> struct A"}, {"sha": "b30b021592431e1584be59b981ac3861eee51626", "filename": "gcc/testsuite/g++.dg/ipa/nothrow-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fnothrow-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fnothrow-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fnothrow-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,7 +11,7 @@ int a(void)\n {\n   return *ptr == *ptr;\n }\n-main()\n+int main()\n {\n   int aa;\n   ptr = &barvar;"}, {"sha": "32d997b927d8249789c6b24cb5839b2153b2c4c0", "filename": "gcc/testsuite/g++.dg/ipa/pr43812.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr43812.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr43812.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr43812.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -35,4 +35,4 @@ public:\n class LocalSurface : public Surface {\n     virtual BBox bbox () const;\n };\n-BBox LocalSurface::bbox () const { }\n+BBox LocalSurface::bbox () const { return BBox(); }"}, {"sha": "dbdd865cfb645ed2258a535d3c8feee6fe5dba89", "filename": "gcc/testsuite/g++.dg/ipa/pr44372.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr44372.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr44372.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr44372.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -fipa-cp -fipa-cp-clone\" } */\n+/* { dg-additional-options \"-Wno-return-type\" } */\n \n template < typename > class S3;\n "}, {"sha": "03a299ff422a2afe785e8e71e82babfb9120f3ee", "filename": "gcc/testsuite/g++.dg/ipa/pr45572-1.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr45572-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,18 +11,22 @@ typedef struct\n extern __inline __attribute__ ((__gnu_inline__)) int\n fgetc_unlocked (FILE *__fp)\n {\n+  return 0;\n }\n extern __inline __attribute__ ((__gnu_inline__)) int\n putc_unlocked (int __c, FILE *__stream)\n {\n+  return 0;\n }\n extern __inline __attribute__ ((__gnu_inline__)) __ssize_t\n getline (char **__lineptr, size_t *__n, FILE *__stream)\n {\n+  return 0;\n }\n extern __inline __attribute__ ((__gnu_inline__)) int\n ferror_unlocked (FILE *__stream) throw ()\n {\n+  return 0;\n }\n }\n typedef struct"}, {"sha": "cfcf677e3d0b531b2c1122920d26a9ce4987a7da", "filename": "gcc/testsuite/g++.dg/ipa/pr58371.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr58371.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr58371.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr58371.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-Wno-return-type\" } */\n \n \n typedef int size_t;"}, {"sha": "379719708ac7f9ac762a4c8a249aca74e6a34337", "filename": "gcc/testsuite/g++.dg/ipa/pr59176.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr59176.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr59176.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr59176.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -33,9 +33,11 @@ class C {\n unsigned long C::m_fn1() {\n CellHierarchy:\n   m_fn2().m_fn1();\n+  return 0;\n }\n \n unsigned long C::m_fn3() {\n CellHierarchy:\n   m_fn2().m_fn1();\n+  return 0;\n }"}, {"sha": "2e626126d07274b363196ef1c6ea7e9186acae02", "filename": "gcc/testsuite/g++.dg/ipa/pr60640-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr60640-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr60640-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr60640-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -25,7 +25,7 @@ class D : ASN1Object, public B\n };\n class G : public D\n {\n-  unsigned m_fn1 (bool) const {}\n+  unsigned m_fn1 (bool) const { return 0; }\n };\n class F : A\n {"}, {"sha": "e297fe360dce3d622227e5089536dfca10f4c66c", "filename": "gcc/testsuite/g++.dg/ipa/pr61540.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61540.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61540.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61540.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@ struct data {\n };\n \n struct top {\n-  virtual int topf() {}\n+  virtual int topf() { return 0; }\n };\n \n struct intermediate: top {"}, {"sha": "ffef0a284deea4ba3b4b4c332d576e27327d38df", "filename": "gcc/testsuite/g++.dg/ipa/pr63470.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63470.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63470.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63470.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -17,6 +17,7 @@ class FTjackSupport : A\n   const char **\n   m_fn2 (int)\n   {\n+    return 0;\n   }\n   int _inited;\n   int *_jackClient;"}, {"sha": "a727b9e9e4c76247ebc4f54046d19c7a69277c23", "filename": "gcc/testsuite/g++.dg/ipa/pr63587-1.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63587-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63587-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63587-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -61,6 +61,7 @@ I<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos (\n   const key_type &p1)\n {\n   _M_impl._M_key_compare (p1, 0);\n+  return A<int>();\n }\n template <typename _Key, typename _Val, typename _KeyOfValue,\n \t  typename _Compare, typename _Alloc>\n@@ -69,6 +70,7 @@ I<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos (\n   H &)\n {\n   _M_get_insert_unique_pos (0);\n+  return A<int>();\n }\n template <typename _Key, typename _Val, typename _KeyOfValue,\n \t  typename _Compare, typename _Alloc>\n@@ -78,6 +80,7 @@ I<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_emplace_hint_unique (\n   H p1, _Args &&...)\n {\n   _M_get_insert_hint_unique_pos (p1);\n+  return 0;\n }\n namespace {\n struct L;"}, {"sha": "7a9b2454507f09d2cb0d8f47dd42cb501d7df17a", "filename": "gcc/testsuite/g++.dg/ipa/pr63587-2.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63587-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63587-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63587-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n // PR ipa/63587\n // { dg-do compile { target c++11 } }\n // { dg-options \"-O2\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n namespace boost {\n class basic_cstring\n@@ -22,6 +23,7 @@ template <typename FunctionObj> struct function_obj_invoker0\n   {\n     FunctionObj f;\n     f ();\n+    return 0;\n   }\n };\n template <typename FunctionObj> struct get_function_obj_invoker0"}, {"sha": "d23b31337482259e2aaa840ebbe4f2eaeab88371", "filename": "gcc/testsuite/g++.dg/ipa/pr63838.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63838.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -27,7 +27,7 @@ bar (int x)\n     fn ();\n }\n \n-__attribute__((noinline, noclone)) int\n+__attribute__((noinline, noclone)) void\n baz (int x)\n {\n   S s;"}, {"sha": "fad02c36accb00db85679249d3aa00bc4c276e61", "filename": "gcc/testsuite/g++.dg/ipa/pr63894.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63894.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63894.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr63894.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -43,4 +43,5 @@ J::m_fn3 (G *p1)\n   p1->m_fn1 (0, D (0, D::BOX, 0));\n   K *d = new (0) K (0, m_fn2 (0));\n   m_fn3 (d);\n+  return true;\n }"}, {"sha": "008fab1e1e6d838881b8449bb34567662eace1b3", "filename": "gcc/testsuite/g++.dg/ipa/pr64068.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr64068.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr64068.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr64068.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -3,12 +3,12 @@\n \n typedef int PROV_ENUMALGS_EX, PCCRYPT_OID_INFO;\n class A {\n-  int m_fn2();\n+  void m_fn2();\n   virtual bool m_fn1(PCCRYPT_OID_INFO);\n };\n int fn1();\n void fn2();\n-int A::m_fn2() { m_fn1(0); }\n+void A::m_fn2() { m_fn1(0); }\n \n bool fn3() {\n   for (;;) {\n@@ -27,7 +27,7 @@ public:\n   B() { fn3(); }\n };\n class C : A {\n-  bool m_fn1(PCCRYPT_OID_INFO) { m_fn3(); }\n+  bool m_fn1(PCCRYPT_OID_INFO) { m_fn3(); return true; }\n   int isSupportedByProvider_algId;\n   PROV_ENUMALGS_EX isSupportedByProvider_outEnumAlgs;\n   PROV_ENUMALGS_EX isSupportedByProvider_enumAlgs;"}, {"sha": "7064cd05f9dfaff971355b33f5b5e5f771245ee5", "filename": "gcc/testsuite/g++.dg/ipa/pr64896.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr64896.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr64896.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr64896.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,9 +5,9 @@\n struct A { int a, b; };\n struct B { A c; int d; };\n struct C { virtual B fn1 () const; };\n-struct D { B fn2 () const; int fn3 () const; C *fn4 () const; };\n+struct D { B fn2 () const; void fn3 () const; C *fn4 () const; };\n \n-int\n+void\n D::fn3 () const\n {\n   fn4 ()->fn1 ();"}, {"sha": "b505ac82c54255d54ed326b5c4088cef6cad656f", "filename": "gcc/testsuite/g++.dg/ipa/pr65002.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65002.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65002.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65002.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,12 +10,12 @@ using fastmath::floor;\n class A {\n public:\n   A(int, int);\n-  virtual int m_fn1(float) const;\n+  virtual void m_fn1(float) const;\n };\n class B : A {\n public:\n   B(int, int p2) : A(entity, p2) {}\n-  int m_fn1(float p1) const { long b(floor(p1)); }\n+  void m_fn1(float p1) const { long b(floor(p1)); }\n   int entity;\n };\n "}, {"sha": "84f10bb276c80baf639ed50ed7d412f893ac75b8", "filename": "gcc/testsuite/g++.dg/ipa/pr65008.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65008.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65008.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65008.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,7 +8,7 @@ struct A\n   virtual void foo () {}\n };\n \n-static inline int __attribute__ ((always_inline)) call_foo (A *a)\n+static inline void __attribute__ ((always_inline)) call_foo (A *a)\n {\n   a->foo ();\n }"}, {"sha": "9c7d026b14a0aaf4ea046090f7931819b1d7c44d", "filename": "gcc/testsuite/g++.dg/ipa/pr65465.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65465.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65465.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65465.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,7 +4,7 @@\n struct A {};\n struct B { virtual A foo () const; };\n struct C { A foo () const; };\n-struct D : virtual B { A foo () const {} };\n+struct D : virtual B { A foo () const { return A(); } };\n struct F : D { virtual int bar () const; };\n int F::bar () const { return 0; }\n A C::foo () const { return A (); }"}, {"sha": "841515c846fac297ab579ba377501def41b10a8c", "filename": "gcc/testsuite/g++.dg/ipa/pr66896.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr66896.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr66896.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr66896.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,7 +9,7 @@ struct A\n   int *a;\n   A ();\n   ~A () { a3 (); }\n-  int a1 (int * p) { if (!p) f3 (); f2 (p); }\n+  void a1 (int * p) { if (!p) f3 (); f2 (p); }\n   void a3 () { if (*a) a1 (a); }\n };\n "}, {"sha": "73096969eb675773917fee6c2dba09c085e414e6", "filename": "gcc/testsuite/g++.dg/ipa/pr68851.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr68851.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr68851.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr68851.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,7 +8,7 @@ public:\n };\n class A {\n public:\n-  virtual bool isFormControlElement() const {}\n+  virtual bool isFormControlElement() const { return false; }\n };\n class C {\n   struct D {\n@@ -20,10 +20,10 @@ class F {\n   virtual bool isFormControlElement() const;\n };\n class G : A, F {\n-  bool isFormControlElement() const {}\n+  bool isFormControlElement() const { return true; }\n };\n bool C::checkPseudoClass(const D &p1, int &) const {\n   A &a = *p1.element;\n   a.isFormControlElement();\n-  a.isFormControlElement() || a.isFormControlElement();\n+  return a.isFormControlElement() || a.isFormControlElement();\n }"}, {"sha": "510fca573de6f68e77a415b854354a3d4dc24d5b", "filename": "gcc/testsuite/g++.dg/ipa/pr78211.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr78211.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr78211.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr78211.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n // PR lto/78211\n // { dg-do compile { target { lto && c++11 } } }\n // { dg-options \"-fcompare-debug -fno-printf-return-value -flto -fno-use-linker-plugin -O3\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n namespace std {\n   typedef __SIZE_TYPE__ size_t;\n@@ -37,7 +38,7 @@ namespace __gnu_cxx {\n     reference operator*() const noexcept { }\n   };\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n-  inline bool operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept { }\n+  inline bool operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept { return true; }\n }\n namespace std {\n   template<typename _CharT> struct char_traits;"}, {"sha": "c5f6816a70f969969918b08053f5f0c93a8f69b8", "filename": "gcc/testsuite/g++.dg/ipa/pr79931.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr79931.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr79931.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr79931.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -21,4 +21,5 @@ NodeImpl *AttrImpl::insertBefore(NodeImpl *newChild, NodeImpl *refChild) {\n   NodeImpl *oldparent = newChild->getParentNode();\n   oldparent->removeChild(newChild);\n   this->getOwnerDocument()->getRanges();\n+  return 0;\n }"}, {"sha": "61940c670e75b3a37e932ef398ff4f6943f7c7f6", "filename": "gcc/testsuite/g++.dg/ipa/pure-const-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,7 +11,7 @@ int a(void)\n {\n   return *ptr == *ptr;\n }\n-main()\n+int main()\n {\n   int aa;\n   ptr = &barvar;"}, {"sha": "6e739de4ade7631b081fe2b623baa805e072ad7b", "filename": "gcc/testsuite/g++.dg/ipa/pure-const-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -15,7 +15,7 @@ static int b(void)\n {\n   return a();\n }\n-main()\n+int main()\n {\n   int aa;\n   ptr = &barvar;"}, {"sha": "4cf9a6a93066605985dfc8044c30b7b214428018", "filename": "gcc/testsuite/g++.dg/ipa/pure-const-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpure-const-3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -21,7 +21,7 @@ static int b(int p)\n     return a(p+1);\n   return 1;\n }\n-main()\n+int main()\n {\n   int aa;\n   ptr = &barvar;"}, {"sha": "a2c316aa9a95c3bdb4e9379b381ac764b577ac94", "filename": "gcc/testsuite/g++.dg/ipa/remref-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fremref-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fremref-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fremref-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -28,7 +28,7 @@ allocate_a ()\n   a = new A();\n }\n \n-main()\n+int main()\n {\n   allocate_a();\n   for (int i=0; i<10000;i++)"}, {"sha": "1cece6541c97e722e2b98b0cba8855f826c4c577", "filename": "gcc/testsuite/g++.dg/ipa/remref-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fremref-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fremref-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fremref-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -29,7 +29,7 @@ allocate_a ()\n   a = new A();\n }\n \n-main()\n+int main()\n {\n   allocate_a();\n   for (int i=0; i<10000;i++)"}, {"sha": "4649737c3d00750febc372def8e2b386bd3f9a95", "filename": "gcc/testsuite/g++.dg/lookup/builtin2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,6 +14,6 @@ namespace std\n   using ::toupper;\n }\n \n-int f () {\n+void f () {\n   std::toupper((signed int)'a');\n }"}, {"sha": "1b78dd607f3f4ad805f7c731eb023c76d9977c96", "filename": "gcc/testsuite/g++.dg/lookup/crash3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,12 +4,12 @@\n \n typedef __SIZE_TYPE__ size_t; \n \n-struct A { void *operator new(size_t s){} };  // { dg-message \"operator new\" }\n-struct B { void *operator new(size_t s){} };  // { dg-message \"operator new\" }\n+struct A { void *operator new(size_t s){ return 0; } };  // { dg-message \"operator new\" }\n+struct B { void *operator new(size_t s){ return 0; } };  // { dg-message \"operator new\" }\n \n struct C : A,B {}; \n \n-int crash() \n+void crash() \n {\n   C *c=new C();   // { dg-error \"ambiguous\" }\n }"}, {"sha": "8ef23a6717914eb9e83f8e0628801d00a5fe26c5", "filename": "gcc/testsuite/g++.dg/lookup/friend20.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend20.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,5 +12,6 @@ template <int = 3> class a\n   a<>\n   d ()\n   {\n+    return a<>();\n   }\n };"}, {"sha": "e018922d68b787fd863c8e73367b5c7ba6855c6e", "filename": "gcc/testsuite/g++.dg/lookup/pr80891-5.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -51,6 +51,7 @@ int vf2_subgraph_iso(GraphSmall, GraphLarge, SubGraphIsoMapCallback p3,\n                      IndexMapSmall, IndexMapLarge, VertexOrderSmall,\n                      EdgeEquivalencePredicate, VertexEquivalencePredicate) {\n   vf2_subgraph_morphism<subgraph_iso>(0, 0, p3, 0, 0, 0, 0, 0);\n+  return 0;\n }\n }\n using namespace boost;"}, {"sha": "a63e03dffdc987893c3dd6127a8103b3fd56b854", "filename": "gcc/testsuite/g++.dg/lookup/struct2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,4 +4,4 @@ struct c {};\n namespace A {\n   int c(struct c*req);\n }\n-int A::c(struct c*req) {}\n+int A::c(struct c*req) { return 0; }"}, {"sha": "c9e81b44e2c6d612a96e933a6d48bad737618cf8", "filename": "gcc/testsuite/g++.dg/lto/20080709_0.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080709_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080709_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080709_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,6 +4,7 @@ class Init     {\n };\n \n int f(Init *a) {\n+    return 0;\n }\n \n int main(void){"}, {"sha": "a423196e7dbacee3935e90b837df5b32b0ea113a", "filename": "gcc/testsuite/g++.dg/lto/20080907_0.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080907_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080907_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080907_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,3 +1,5 @@\n // { dg-lto-do assemble }\n+// { dg-lto-options \"-Wno-return-type\" }\n+\n struct Foo { void func (); }; Foo & bar () { } struct Baz { Baz (Baz &); };\n Baz dummy() { bar().func(); }"}, {"sha": "40c50422857bb5639972e9be41888a8d8302d7e9", "filename": "gcc/testsuite/g++.dg/lto/20080915_0.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080915_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080915_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080915_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,6 @@\n // { dg-lto-do assemble }\n+// { dg-lto-options \"-Wno-return-type\" }\n+\n struct Foo {\n  static const int dummy;\n \n@@ -16,7 +18,7 @@ int func(const Bar& b) {\n }\n \n struct Baz {\n- Bar& operator*() {}\n+ Bar& operator*() { static Bar a; return a; }\n };\n \n void func1(Baz baz, int i, Bar bar) {"}, {"sha": "77494ef689c30ab9ff96fc2cffd9f557f8d44560", "filename": "gcc/testsuite/g++.dg/lto/20080916_0.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080916_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080916_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20080916_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,4 +9,6 @@ class ios_base   {\n };\n \n ios_base& g() {\n+    static ios_base a;\n+    return a;\n }"}, {"sha": "92d463b1cde4dd9413fffaff4df2ca44f84e4f05", "filename": "gcc/testsuite/g++.dg/lto/20081022_0.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081022_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081022_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081022_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,6 +6,8 @@ f (foo * a)\n   return a->bar ();\n }\n \n+int\n main()\n {\n+  return 0;\n }"}, {"sha": "d40ac279b77124eba393fc4b5967b3456dbd7d5a", "filename": "gcc/testsuite/g++.dg/lto/20081023_0.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081023_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081023_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081023_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,6 +9,8 @@ f (void)\n   func ();\n }\n \n+int\n main()\n {\n+  return 0;\n }"}, {"sha": "c1f9dfc97a48f203ac1160c924c0042cf5f898a1", "filename": "gcc/testsuite/g++.dg/lto/20081118_0.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081118_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081118_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081118_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -18,4 +18,5 @@ class foo : public object\n int\n foo::method(void)\n {\n+  return 0;\n }"}, {"sha": "ee870a2eb75758c8496b1cf059b0d03156d2700a", "filename": "gcc/testsuite/g++.dg/lto/20081118_1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081118_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081118_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081118_1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -18,4 +18,5 @@ bar*\n bar::method (void)\n {\n  quxx::method();\n+ return 0;\n }"}, {"sha": "03a9740c09110f4faa06d427d5e33429f4255368", "filename": "gcc/testsuite/g++.dg/lto/20081120-1_0.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081120-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081120-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081120-1_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,6 +4,7 @@ extern \"C\"\n {\n  extern __inline __attribute__((__gnu_inline__)) int pthread_equal(int, int)\n  {\n+    return 0;\n  }\n }\n static __typeof(pthread_equal)"}, {"sha": "9c5d9bd6f4c7ebf60f3a75e24103017983e860de", "filename": "gcc/testsuite/g++.dg/lto/20081120-1_1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081120-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081120-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081120-1_1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,6 +2,7 @@ extern \"C\"\n {\n  extern __inline __attribute__((__gnu_inline__)) int pthread_equal(int, int)\n  {\n+    return 0;\n  }\n }\n static __typeof(pthread_equal)"}, {"sha": "63ae50c31ec0531d36763999a0c84f80e7a1c6ec", "filename": "gcc/testsuite/g++.dg/lto/20081127_1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081127_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081127_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081127_1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,3 +1,3 @@\n struct Foo { Foo(); };\n Foo::Foo() { }\n-main() { return 0; }\n+int main() { return 0; }"}, {"sha": "3bc6ba997a5773812f80a5d749b699e828c6c7cf", "filename": "gcc/testsuite/g++.dg/lto/20081217-2_0.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081217-2_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081217-2_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20081217-2_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,5 @@\n struct A {\n-  virtual int foo() {}\n+  virtual int foo() { return 0; }\n };\n struct B {\n   virtual int f() {return 1; }\n@@ -13,6 +13,7 @@ C::C()\n {\n }\n \n+int\n main()\n {\n   C c;"}, {"sha": "d9ec5a35fed43a1c8484f6b80c8c08a2615bd25a", "filename": "gcc/testsuite/g++.dg/lto/20090303_0.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090303_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090303_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090303_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -16,6 +16,8 @@ void Test() {\n  int int_set_;\n  foobar (&int_set_, &test_ints[j]);\n }\n+\n+int\n main()\n {\n   Test();"}, {"sha": "60c002fbfba72ba604175194b51408f17217cc61", "filename": "gcc/testsuite/g++.dg/lto/20090311-1_0.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090311-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090311-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090311-1_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -26,6 +26,8 @@ struct A {\n A a;\n \n extern int foo();\n+\n+int\n main()\n {\n   a.x = 4 + c.x;"}, {"sha": "579b60e939ecc07c7c61bee44b97039da377a1f0", "filename": "gcc/testsuite/g++.dg/lto/20090312_0.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090312_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090312_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090312_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,6 +5,7 @@ extern \"C\" {\n     extern JSErrorCallback p;\n };\n \n+int\n main()\n {\n   if ( x == ONE && p == 0)"}, {"sha": "1cae572eeb87fe74bbd867c7497e66c2aea476c5", "filename": "gcc/testsuite/g++.dg/lto/20090315_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090315_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090315_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20090315_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,4 +6,4 @@ struct Foo {\n   static Foo *foo_;\n };\n Foo *Foo::foo_;\n-main() { return 0; }\n+int main() { return 0; }"}, {"sha": "a59a0cb9505dc6c10e5f30ba9655a059d7030e56", "filename": "gcc/testsuite/g++.dg/lto/20091002-1_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-1_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n // { dg-lto-do link }\n // { dg-require-effective-target fpic }\n-// { dg-lto-options {{-fPIC -flto}} }\n+// { dg-lto-options {{-fPIC -flto -Wno-return-type}} }\n // { dg-extra-ld-options \"-fPIC -r -nostdlib\" }\n \n namespace std __attribute__ ((__visibility__ (\"default\")))"}, {"sha": "12a1596b3e2dd2f7b75b4a4a2871d308364b61be", "filename": "gcc/testsuite/g++.dg/lto/20091002-2_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-2_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-2_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-2_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,7 +4,7 @@\n // { dg-extra-ld-options \"-fPIC -r -nostdlib\" }\n \n class DataArray {\n-    int max() const    { }\n+    int max() const    { return 0; }\n };\n template < class HashItem > \n class DataHashTable {"}, {"sha": "0d9afc44c281888617daa5c27fbbc6bed42686be", "filename": "gcc/testsuite/g++.dg/lto/20091002-3_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-3_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-3_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091002-3_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,7 +5,7 @@\n \n template < class T > \n class DataArray {\n-    int max() const { }\n+    int max() const { return 0; }\n };\n class Name { };\n class DataHashTable {"}, {"sha": "536ae46dadf2a1acbc20013a03df9deaec4e8607", "filename": "gcc/testsuite/g++.dg/lto/20091004-1_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-1_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n // { dg-lto-do link }\n // { dg-require-effective-target fpic }\n-// { dg-lto-options {{-fPIC -O -flto}} }\n+// { dg-lto-options {{-fPIC -O -flto -Wno-return-type}} }\n \n typedef double Real;\n class Vector {"}, {"sha": "40ef136514b9cd809271056d32c217f3f9f47c9d", "filename": "gcc/testsuite/g++.dg/lto/20091004-2_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-2_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-2_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-2_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n // { dg-lto-do link }\n // { dg-require-effective-target fpic }\n-// { dg-lto-options {{-fPIC -O -flto}} }\n+// { dg-lto-options {{-fPIC -O -flto -Wno-return-type}} }\n \n typedef double Real;\n class Vector {"}, {"sha": "f46b8fc6c11120351dcb21b235fcfb2f75266471", "filename": "gcc/testsuite/g++.dg/lto/20091004-3_1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-3_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-3_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20091004-3_1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,5 +12,6 @@ All_Torus_Intersections(void)\n   VECTOR D;\n   VLength(len, D);\n   VLength(len, D);\n+  return 0;\n }\n "}, {"sha": "e39184b76d1ad21d4a9428c6926ce2d7debe3917", "filename": "gcc/testsuite/g++.dg/lto/20100721-1_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20100721-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20100721-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20100721-1_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n /* { dg-lto-do assemble } */\n \n-static inline int __gthread_active_p (void) { }\n+static inline int __gthread_active_p (void) { return 0; }\n template <int rank, int dim> class Tensor;\n template <int dimension> struct G;\n template <int dim> class T {"}, {"sha": "8f694c78aa708fc89d06dd30b6aa35ff4f37b432", "filename": "gcc/testsuite/g++.dg/lto/20101010-1_0.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-1_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // { dg-lto-do link }\n+// { dg-lto-options \"-Wno-return-type\" }\n \n typedef long size_t;\n template < class, class > struct pair"}, {"sha": "a26956f7fc74df52636f903e1fc2460303e92c1f", "filename": "gcc/testsuite/g++.dg/lto/20101010-2_0.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-2_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-2_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-2_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // { dg-lto-do link }\n+// { dg-lto-options \"-Wno-return-type\" }\n \n typedef int size_t;\n template < size_t _Nw > struct _Base_bitset"}, {"sha": "0dc5fd0dcb553ad54995baef25872ecddb074547", "filename": "gcc/testsuite/g++.dg/lto/pr45679-1_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,5 @@\n // { dg-lto-do link }\n-// { dg-lto-options {{-O3 -Wno-multichar}} } \n+// { dg-lto-options {{-O3 -Wno-multichar -Wno-return-type }} } \n // { dg-extra-ld-options \"-flto -flto-partition=1to1 -r -nostdlib\" }\n \n      extern \"C\" {"}, {"sha": "9aa92fa540ec7ada876b416cd9c752b68bf5d295", "filename": "gcc/testsuite/g++.dg/lto/pr45679-1_1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,4 @@\n-    extern \"C\" {\n+  extern \"C\" {\n     typedef struct _IO_FILE FILE;\n     extern struct _IO_FILE *stderr;\n     extern int fprintf (FILE *__restrict __stream,       __const char *__restrict __format, ...);"}, {"sha": "b88ad92f539e1ad9bae81d19c15596f741d0a5f6", "filename": "gcc/testsuite/g++.dg/lto/pr45679-2_0.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n // { dg-lto-do link }\n-// { dg-lto-options {{-O3 -Wno-multichar}} } \n+// { dg-lto-options {{-O3 -Wno-multichar -Wno-return-type}} } \n // { dg-extra-ld-options \"-flto -flto-partition=1to1 -r -nostdlib\" }\n+\n     extern \"C\" {\n   typedef struct {\n     union   {"}, {"sha": "4ca1a0cebfe4f46823df44ae165b38316906fdf7", "filename": "gcc/testsuite/g++.dg/lto/pr48042_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr48042_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr48042_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr48042_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,5 +10,5 @@ class B:public A {\n };\n \n int B::x() {\n+    return 0;\n }\n-"}, {"sha": "1c37e629e1d3bdd34721e06723fb180013b53213", "filename": "gcc/testsuite/g++.dg/lto/pr51650-1_0.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51650-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51650-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51650-1_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -15,5 +15,6 @@ int\n fn ()\n {\n   C::m ();\n+  return 0;\n }\n-int main() {}\n+int main() { return 0; }"}, {"sha": "ff55e4aab4c14d11c2dc9584fcdff28bb5c034e8", "filename": "gcc/testsuite/g++.dg/lto/pr51650-3_0.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51650-3_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51650-3_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51650-3_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -16,5 +16,6 @@ int\n fn ()\n {\n   C::m ();\n+  return 0;\n }\n-int main() {}\n+int main() { return 0; }"}, {"sha": "b5aab3508cf4fc6f6d97fdbe1bdddb5986592a69", "filename": "gcc/testsuite/g++.dg/lto/pr63270_1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -48,6 +48,7 @@ namespace v8\n     };\n     int PreParser::ParseMemberWithNewPrefixesExpression ( bool * )\n     {\n+      return 0;\n     }\n   }\n }"}, {"sha": "ceebe51069d8b3323b6672eaf076dfb10467b7c4", "filename": "gcc/testsuite/g++.dg/lto/pr65193_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65193_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65193_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65193_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,6 @@\n /* { dg-lto-do link } */\n /* { dg-require-effective-target fpic } */\n-/* { dg-lto-options {{-fPIC -r -nostdlib -flto -O2 -g}} } */\n+/* { dg-lto-options {{-fPIC -r -nostdlib -flto -O2 -g -Wno-return-type}} } */\n \n void frexp (int, int *);\n namespace std"}, {"sha": "83e1194fb101f7bb5486bf6d493ffbfa14c911d7", "filename": "gcc/testsuite/g++.dg/lto/pr65302_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65302_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,5 @@\n // { dg-lto-do link }\n-// { dg-lto-options { { -flto -O2 } } }\n+// { dg-lto-options { { -flto -O2 -Wno-return-type } } }\n // { dg-extra-ld-options \"-r -nostdlib -O0\" }\n \n class CstringStorageReference {"}, {"sha": "2b9360e29fe7efa5ecede0eaa568c3a531ef26ce", "filename": "gcc/testsuite/g++.dg/lto/pr65316_0.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65316_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65316_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65316_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n // { dg-lto-do link }\n-// { dg-lto-options { { -flto -std=c++11 -g2 -fno-lto-odr-type-merging -O2 } } }\n+// { dg-lto-options { { -flto -std=c++11 -g2 -fno-lto-odr-type-merging -O2 -Wno-return-type } } }\n // { dg-extra-ld-options \"-r -nostdlib -O2 -fno-lto-odr-type-merging\" }\n+\n namespace std\n {\n   typedef long unsigned int size_t;"}, {"sha": "73686918c2cfd09285c10074114077677e76a746", "filename": "gcc/testsuite/g++.dg/lto/pr65475c_0.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475c_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475c_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475c_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n /* { dg-lto-do link } */\n-/* { dg-lto-options \"-O2  -w\" } */\n /* { dg-extra-ld-options { -O2 -Wno-odr -r -nostdlib } } */\n+/* { dg-lto-options { \"-O2 -w -Wno-return-type\" } } */\n+\n namespace std\n {\n template < class > struct char_traits;"}, {"sha": "d3ed1dca15879f1f725d0ad40005686d895cf0bc", "filename": "gcc/testsuite/g++.dg/lto/pr65549_0.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65549_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65549_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65549_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,5 @@\n // { dg-lto-do link }\n-// { dg-lto-options { { -std=gnu++14 -flto -g } { -std=gnu++14 -flto -g -O2 -fno-inline -flto-partition=max } } }\n+// { dg-lto-options { { -std=gnu++14 -flto -g -Wno-return-type } { -std=gnu++14 -flto -g -O2 -fno-inline -flto-partition=max -Wno-return-type } } }\n // { dg-extra-ld-options \"-r -nostdlib\" }\n \n namespace std {\n@@ -135,10 +135,12 @@ public:\n     then(0, [] {});\n   }\n } clients;\n-main() {\n+int main() {\n   B app;\n   app.run(0, 0, [&] {\n     auto config = app.configuration()[0].as<std::string>();\n     clients.then([] {});\n   });\n+\n+  return 0;\n }"}, {"sha": "10cb05917b9cc747bc95770fe17c495f601f9bb7", "filename": "gcc/testsuite/g++.dg/lto/pr69077_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69077_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69077_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69077_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -11,4 +11,4 @@ struct cStdDev\n struct cWeightedStdDev : public cStdDev {\n     virtual int netPack();\n };\n-int cWeightedStdDev::netPack() { }\n+int cWeightedStdDev::netPack() { return 0; }"}, {"sha": "c6f72c4090be2e92081e27ec12e928c8930e356f", "filename": "gcc/testsuite/g++.dg/lto/pr69589_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69589_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69589_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69589_0.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,5 @@\n // { dg-lto-do link }\n-// { dg-lto-options \"-O2 -rdynamic\" }\n+// { dg-lto-options { \"-O2 -rdynamic -Wno-return-type\" } }\n // { dg-extra-ld-options \"-r -nostdlib\" }\n // { dg-require-effective-target rdynamic }\n "}, {"sha": "a1325a0dca9329c4cccf5756c7689c63a963ab47", "filename": "gcc/testsuite/g++.dg/opt/combine.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcombine.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -36,6 +36,7 @@ class QVariant { };\n template<typename T> inline T qvariant_cast (const QVariant &v)\n {\n   const int vid = qMetaTypeId<T> ((0)) ;\n+  return T();\n };\n class QScriptContext\n {\n@@ -70,4 +71,5 @@ QScriptValue QScriptDebuggerBackendPrivate::trace (QScriptContext *context)\n {\n   QScriptValue data = context->callee () ;\n   QScriptDebuggerBackendPrivate *self = qscriptvalue_cast<QScriptDebuggerBackendPrivate*> (data) ;\n+  return QScriptValue();\n }"}, {"sha": "ee1b616e4036395848c9fcc1c31f0d127b549d6a", "filename": "gcc/testsuite/g++.dg/opt/complex3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcomplex3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcomplex3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcomplex3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -7,7 +7,7 @@ _Complex float g();\n _Complex float h()throw();\n void i(float)throw();\n \n-float j(void)\n+void j(void)\n {\n   _Complex float x = h();\n   try"}, {"sha": "b8a93177946688f12748d0d937f0c3c054b6c681", "filename": "gcc/testsuite/g++.dg/opt/covariant1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcovariant1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcovariant1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcovariant1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,7 +9,7 @@ bar (int x)\n }\n \n struct S { S () {}; virtual ~S () {}; };\n-struct T { virtual T *foo (int) {}; };\n+struct T { virtual T *foo (int) { return 0; }; };\n struct V : virtual S, virtual T {};\n struct V v;\n struct U : public S, public T"}, {"sha": "3dd939a961c3b0c145b2f2c62d17cb0334aa4a0a", "filename": "gcc/testsuite/g++.dg/opt/declone3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdeclone3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdeclone3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdeclone3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,4 +14,4 @@ struct Item : Object, virtual A {\n   }\n   bool m_fn1();\n };\n-bool Item::m_fn1() {}\n+bool Item::m_fn1() { return true; }"}, {"sha": "f813044456c6ace718d9672aec02d7210371f0b5", "filename": "gcc/testsuite/g++.dg/opt/dump1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdump1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdump1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdump1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,6 +2,7 @@\n // { dg-options \"-O2 -fno-inline -fdump-final-insns\" }\n // { dg-do compile { target c++11 } }\n // { dg-final cleanup-final-insns-dump }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n namespace std\n {\n@@ -348,7 +349,7 @@ namespace std __attribute__ ((__visibility__ (\"default\")))\n   template<typename _Tp>\n     inline reference_wrapper<_Tp>\n     ref(_Tp& __t) noexcept\n-    {}\n+    { return reference_wrapper<_Tp>(); }\n   template<typename _Tp>\n     struct _Maybe_wrap_member_pointer\n     {"}, {"sha": "9aa1b73c8636ec9c64a81ee6ab4697c6b7e57e14", "filename": "gcc/testsuite/g++.dg/opt/inline15.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline15.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -16,7 +16,7 @@ struct A\n };\n struct C : public A\n {\n-  virtual int bar () { }\n+  virtual int bar () { return 0; }\n };\n struct D : public C\n {\n@@ -33,6 +33,7 @@ struct E\n static unsigned *\n fn2 ()\n {\n+  return 0;\n }\n \n void"}, {"sha": "a63afc24f16d2c2af5f0461b8d876471926b81b1", "filename": "gcc/testsuite/g++.dg/opt/local1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flocal1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flocal1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flocal1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,7 +8,7 @@ struct Outer {\n inline void h(const Outer &o)\n {\n   struct Local : public Outer::Inner {\n-    virtual bool f() {};\n+    virtual bool f() { return true; };\n   };\n   Local l;\n   o.g(l);"}, {"sha": "66411cdda39597e523f2ffbc2edfa2cde4172039", "filename": "gcc/testsuite/g++.dg/opt/memcpy1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -63,6 +63,7 @@ namespace CS\n       // the multiplication below to produce a very large number\n       // in excess of the maximum possible object size (SIZE_MAX/2).\n       __builtin_memcpy (this->OutP, InP, OutV * sizeof (csVector2));   // { dg-warning \"specified size \\[0-9\\]+ exceeds maximum object size\" }\n+      return 0;\n     }\n   };\n }\n@@ -79,4 +80,5 @@ csBoxClipper::Clip (csVector2 * InPolygon, size_t InCount,\n                                                            InPolygon, InCount,\n                                                            OutPolygon);\n   uint8 Clipped = boxClip.Clip ();\n+  return 0;\n }"}, {"sha": "d0f7d95b655e46f70efdf6f91f10732bfc8bd308", "filename": "gcc/testsuite/g++.dg/opt/new1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnew1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -15,8 +15,8 @@ namespace QScript {\n     namespace Ecma {\n         class Core {\n         public:\n-            inline QScriptEnginePrivate *engine() const     { }\n-            inline QScriptClassInfo *classInfo() const     { }\n+            inline QScriptEnginePrivate *engine() const     { return 0; }\n+            inline QScriptClassInfo *classInfo() const     { return 0; }\n             QScriptValueImpl publicPrototype;\n         };\n         class Boolean: public Core {"}, {"sha": "ca39e7e0f32b51d720b7290977052b5cd36041b3", "filename": "gcc/testsuite/g++.dg/opt/nrv8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv8.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -20,7 +20,7 @@ A bar()\n   return l;\n }\n \n-main()\n+int main()\n {\n   A a = bar ();\n "}, {"sha": "f14750eb30601489ff2c468a4d783a61690f482a", "filename": "gcc/testsuite/g++.dg/opt/pr23299.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23299.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23299.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23299.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,15 +6,15 @@ extern \"C\" void abort ();\n \n struct A\n {\n-  virtual int a () {}\n+  virtual int a () { return 0; }\n };\n struct B : public A\n {\n-  virtual int b () {}\n+  virtual int b () { return 1; }\n };\n struct C : public A\n {\n-  virtual int c () {}\n+  virtual int c () { return 2; }\n };\n struct D\n {"}, {"sha": "7de08e08133ff2c277971db9c17b5ad7dba620db", "filename": "gcc/testsuite/g++.dg/opt/pr27826.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr27826.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr27826.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr27826.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,7 +5,7 @@ struct Geometry\n {\n         int type:16;\n };\n-struct Geometry get() {};\n+struct Geometry get() { return Geometry(); };\n int f()\n {\n         struct Geometry test;"}, {"sha": "1916a2b359d9e996c2975cd3aef3dad8a49f2ad5", "filename": "gcc/testsuite/g++.dg/opt/pr44919.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr44919.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr44919.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr44919.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } }\n // { dg-options \"-O3 -fselective-scheduling2\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n namespace std {\n \n@@ -9,7 +10,7 @@ template<typename _Tp> class new_allocator { public: typedef size_t size_type; t\n template<typename _Tp> class allocator: public new_allocator<_Tp> { public: typedef size_t size_type; template<typename _Tp1> struct rebind { typedef allocator<_Tp1> other; }; };\n \n class back_insert_iterator { };\n-template<typename _Container> back_insert_iterator back_inserter(_Container& __x) { };\n+template<typename _Container> back_insert_iterator back_inserter(_Container& __x) { return back_insert_iterator(); };\n \n class vector { };\n \n@@ -99,6 +100,7 @@ namespace internal {\n   };\n   template <class K> Object intersection( const typename K::Segment_2 &seg, const typename K::Iso_rectangle_2 &iso, const K&) {\n     typedef Segment_2_Iso_rectangle_2_pair<K> is_t; is_t ispair(&seg, &iso); switch (ispair.intersection_type()) { }\n+    return Object();\n   }\n   template <class K> typename Segment_2_Iso_rectangle_2_pair<K>::Intersection_results Segment_2_Iso_rectangle_2_pair<K>::intersection_type() const {\n     typedef typename K::RT RT;"}, {"sha": "bc467b0c8834e93647a88508688c19aea1bd398a", "filename": "gcc/testsuite/g++.dg/opt/pr47615.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47615.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47615.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47615.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-O -fstrict-aliasing -ftree-pre -fno-tree-fre -fno-tree-sra\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n typedef __SIZE_TYPE__ size_t;\n namespace std \n@@ -434,7 +435,7 @@ template < typename Const_Node_Iterator, typename Node_Iterator, typename, typen\n \treturn ((m_p_nd->m_p_right));\n       }\n       bool operator == (bin_search_tree_const_node_it_)\n-      {}\n+      { return true; }\n       node_pointer m_p_nd;\n     };\n     template\n@@ -704,7 +705,7 @@ typedef\n   int,\n   null_mapped_type,\n   less < int >, rb_tree_tag, tree_order_statistics_node_update > set_t;\n-main ()\n+int main ()\n {\n   set_t s;\n   s.insert (12);"}, {"sha": "28a8a4d72facdfc15fc60564ea7b4d59fdabeffd", "filename": "gcc/testsuite/g++.dg/opt/pr55329.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55329.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55329.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55329.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -19,10 +19,10 @@ struct A\n   int *a;\n   A ();\n   ~A () { a3 (); }\n-  int a1 (int * p) { if (!p) f3 (); f2 (p); }\n+  int a1 (int * p) { if (!p) f3 (); f2 (p); return 0; }\n   int *a2 ();\n   void a3 () { if (*a) a1 (a); }\n-  int a4 (int x) { if (*a) f4 (); *a2 () += x; }\n+  int a4 (int x) { if (*a) f4 (); *a2 () += x; return 0; }\n };\n \n struct B : A"}, {"sha": "51a1e618cb329ce31dec1fa1b307652fed7f9c8f", "filename": "gcc/testsuite/g++.dg/opt/pr61456.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr61456.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr61456.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr61456.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,6 +14,7 @@ typedef decltype (&Funcs::f1) pfunc;\n static int Set (Funcs * f, const pfunc & fp)\n {\n   (f->*fp) ();\n+  return 0;\n }\n \n void"}, {"sha": "333cdbcc477da64004c3a9cfead4788e0f0e4d0a", "filename": "gcc/testsuite/g++.dg/opt/pr65003.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65003.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65003.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65003.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -26,6 +26,6 @@ struct F : D\n   F (int &, const int &, const A &);\n   bool foo (int &, bool) const;\n };\n-bool D::foo (int &, bool) const {}\n+bool D::foo (int &, bool) const { return true; }\n F::F (int &, const int &, const A &) {}\n-bool F::foo (int &, bool) const {}\n+bool F::foo (int &, bool) const { return false; }"}, {"sha": "cae2beafe02a72a004db2373fb5119aab2f96fc2", "filename": "gcc/testsuite/g++.dg/opt/pr65554.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65554.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65554.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr65554.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -24,6 +24,7 @@ namespace std\n     {\n       int _Num = p2 - p1;\n       __builtin_memmove (0, p1, sizeof (_Tp) * _Num);\n+      return 0;\n     }\n   };\n   template <int, typename _II, typename _OI> void __copy_move_a (_II p1, _II p2, _OI p3)\n@@ -68,6 +69,7 @@ namespace std\n     template <typename _InputIterator, typename _ForwardIterator> static _ForwardIterator __uninit_copy (_InputIterator p1, _InputIterator p2, _ForwardIterator p3)\n     {\n       copy (p1, p2, p3);\n+      return _ForwardIterator();\n     }\n   };\n   template <typename _InputIterator, typename _ForwardIterator> void"}, {"sha": "d024ece4cbacc968b781e787ce13ca9fb16f35c3", "filename": "gcc/testsuite/g++.dg/opt/pr69432.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr69432.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr69432.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr69432.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -26,7 +26,7 @@ void f4 (S, U);\n struct C\n {\n   template <typename S, typename T, typename U>\n-  static S f5 (S x, T y, U z) { f2 (x, y, z); }\n+  static S f5 (S x, T y, U z) { f2 (x, y, z); return S(); }\n };\n \n template <typename S, typename T, typename U>"}, {"sha": "b332691ec0bbc6a33ff2caac19c5bbd502288125", "filename": "gcc/testsuite/g++.dg/opt/pr78373.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr78373.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr78373.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr78373.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,11 +12,13 @@ struct D : B {\n   static int m_fn3(int, int, int, A) {\n     D &self = singleton;\n     self.m_fn2();\n+    return 0;\n   }\n   static D singleton;\n };\n template <typename, typename> struct C { bool m_fn4() const; };\n template <typename Base, typename Traits> bool C<Base, Traits>::m_fn4() const {\n   Traits::m_fn3(0, 0, 0, Base::singleton);\n+  return true;\n }\n template struct C<A, D>;"}, {"sha": "69dc6cb02518abd2eff61c9f1f62b961b3a66430", "filename": "gcc/testsuite/g++.dg/opt/pr79267.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79267.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79267.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79267.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -45,12 +45,12 @@ D bar ();\n template <typename T> struct L\n {\n   struct K { K (int); void operator() (int *) { bar ().q (); } };\n-  static J<T> bp () { bq (0); }\n+  static J<T> bp () { bq (0); return J<T>(); }\n   template <typename br> static void bq (br) { J<T> (0, K (0)); }\n };\n struct F\n {\n-  virtual J<int> x (int) { foo (0, 0, 0); J<bs<> > (L<bs<> >::bp ()); }\n+  virtual J<int> x (int) { foo (0, 0, 0); J<bs<> > (L<bs<> >::bp ()); return J<int>(); }\n };\n \n void"}, {"sha": "c9797105562e82eb943cd34625d6705436421bc4", "filename": "gcc/testsuite/g++.dg/opt/pr82159-2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82159-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82159-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82159-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n // PR c++/82159\n // { dg-do compile }\n // { dg-options \"\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename T> struct D { T e; };\n struct F : D<int[0]> {"}, {"sha": "3e6f7d1ad078ed885bbae4a72749142fa5a88d9b", "filename": "gcc/testsuite/g++.dg/other/array3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farray3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -10,5 +10,6 @@ extern unsigned char xvalue_store[];\n bool reserve (int want)\n {\n   new unsigned char[want];\n+  return true;\n }\n unsigned char xvalue_store[257];"}, {"sha": "81e5bac8a253d0a9847d2a8153dc0d57bf16e3e0", "filename": "gcc/testsuite/g++.dg/other/crash-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -9,7 +9,7 @@ struct int_less_than {};\n \n void assert_fail (const char*);\n \n-int f(const set<int, int_less_than>&)\n+void f(const set<int, int_less_than>&)\n {\n     assert_fail (__PRETTY_FUNCTION__);\n "}, {"sha": "b7f56fc9bd7739ff1134b4eaf2fe9dd97e840285", "filename": "gcc/testsuite/g++.dg/other/crash-8.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-8.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -97,6 +97,8 @@ public:\n \n     mapped_type&       operator[](const key_type& __k)       {\n         insert(value_type(__k, mapped_type()));\n+\tstatic mapped_type a;\n+\treturn a;\n     }\n \n };"}, {"sha": "f6b44888f4802048eebad204897f1183becb5fa6", "filename": "gcc/testsuite/g++.dg/other/error34.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n // { dg-options \"\" }\n \n-S () : str(__PRETTY_FUNCTION__) {}\t// { dg-error \"forbids declaration\" \"decl\" }\n+S () : str(__PRETTY_FUNCTION__) { return S(); }\t// { dg-error \"forbids declaration\" \"decl\" }\n // { dg-error \"only constructors\" \"constructor\" { target *-*-* } .-1 }"}, {"sha": "521e3f9b30540a57fc2655b482a3022e10f98a95", "filename": "gcc/testsuite/g++.dg/other/pr22003.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr22003.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr22003.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr22003.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -21,5 +21,6 @@ struct c3 : c1, c2\n \n c4* c3::func()\n {\n+  return 0;\n }\n "}, {"sha": "2a337756c2a01ca027f636e864cd8b84d9431e75", "filename": "gcc/testsuite/g++.dg/other/pr24623.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr24623.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr24623.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr24623.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -34,6 +34,8 @@ RefCountPointer (T * p = 0):_p (p)\n \tif (_p != 0)\n \t  _p->decrementRefCount ();\n       }\n+    static RefCountPointer a;\n+    return a;\n   }\n   ~RefCountPointer ()\n   {"}, {"sha": "d68f4a15a07ce1bcdf80fb7c54f47698c0e5fcc7", "filename": "gcc/testsuite/g++.dg/other/pr29610.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr29610.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr29610.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr29610.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@ struct __normal_iterator\n   typedef int*const *_Iterator;\n   int*const * _M_current;\n   __normal_iterator(const _Iterator& __i) : _M_current(__i){}\n-  const _Iterator& base() const {}\n+  const _Iterator& base() const { static _Iterator a; return a; }\n };\n struct string { ~string(){} };\n struct vector \n@@ -26,9 +26,10 @@ inline int Painter::for_each(vector &layout, SliceWindowFunc func)\n {\n     for (unsigned int window = 0; window < layout.size();++window)\n         (this->*func)();\n+    return 0;\n }\n int t;\n-int Painter::redraw_window(void) {t = 1;}\n+int Painter::redraw_window(void) {t = 1; return 0; }\n string t2(int);\n vector *g(const string&);\n void Painter::tcl_command(void)"}, {"sha": "df93645721e3addfe5c23ea2f22a6a04d9a24954", "filename": "gcc/testsuite/g++.dg/other/pr42645-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr42645-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr42645-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr42645-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -13,7 +13,7 @@ struct S\n     T *t3;\n   } t;\n   int m1 () const { return t.t3[0].t1; }\n-  char *m2 () { foo (); }\n+  char *m2 () { foo (); return 0; }\n   void m3 (int x) { char *m = m2 (); if (m1 () > 0 && x > 0); }\n   void m4 () { if (m1 () > 0) for (int i = 0; i < 4; i++) t.t2[i] = 0; }\n };"}, {"sha": "20cce80f21764f5ee1112ecfebe098dbe9bc2256", "filename": "gcc/testsuite/g++.dg/other/pr42645-2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr42645-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr42645-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr42645-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,14 +8,15 @@ struct C\n   C ();\n };\n \n-static inline C *foo () {}\n+static inline C *foo () { return 0; }\n \n extern void f4 ();\n \n static inline int\n f3 ()\n {\n   f4 ();\n+  return 0;\n }\n \n static inline void"}, {"sha": "cf388a5a04591df2f0bfdf58f6f5a6ea921b7d37", "filename": "gcc/testsuite/g++.dg/other/pr52048.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr52048.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr52048.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr52048.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n // PR debug/52048\n // { dg-do compile }\n // { dg-options \"-fcompare-debug -fnon-call-exceptions -fno-tree-dominator-opts -O2\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename T> struct A;\n template <typename T>"}, {"sha": "ed9aca2cf531ad58f28d4c4521d6eb43ddf944ee", "filename": "gcc/testsuite/g++.dg/other/typedef3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ftypedef3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,5 +8,5 @@ struct XalanCProcessor\n           ParseOptionType getParseOption(void);\n };\n typedef XalanCProcessor::ParseOptionType ParseOptionType;\n-ParseOptionType XalanCProcessor::getParseOption(void) {}\n+ParseOptionType XalanCProcessor::getParseOption(void) { return ParseOptionType(); }\n "}, {"sha": "65ad5821aa310fe6b85d3bcca9381ebf71765809", "filename": "gcc/testsuite/g++.dg/overload/defarg4.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg4.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,11 +6,11 @@ class foo\n {\n  template<typename U>\n  static bool func(const U& x)\n- {}\n+ { return true; }\n public:\n  template<typename U>\n  unsigned int Find(const U& x, bool (*pFunc) (const U&) = func) const\n- {}\n+ { return 0; }\n };\n \n class bar {\n@@ -22,5 +22,6 @@ protected:\n bool bar::Initialize()\n {\n         b.Find(b);\n+\treturn false;\n }\n "}, {"sha": "b90b0fd912e7842d784abf1662fdfffcb8db1648", "filename": "gcc/testsuite/g++.dg/overload/operator5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,7 +8,7 @@ class String {\n    operator UnspecifiedBoolTypeA() const;\n    operator UnspecifiedBoolTypeB() const;\n };\n-inline bool equalIgnoringCase(const String& a, const String& b) { }\n+inline bool equalIgnoringCase(const String& a, const String& b) { return true; }\n inline bool equalPossiblyIgnoringCase(const String& a, \n                                       const String& b,\n                                       bool ignoreCase) {"}, {"sha": "1c525fbc7822bcf86df68fc93cb3516ceffc9e56", "filename": "gcc/testsuite/g++.dg/overload/ref-conv1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fref-conv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fref-conv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fref-conv1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // PR c++/50442\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename T> struct MoveRef { operator T& () {} };\n template <typename T> MoveRef <T> Move(T&) {}"}, {"sha": "902684059a8036725c7e3650880d874eb7970fe7", "filename": "gcc/testsuite/g++.dg/overload/template5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ftemplate5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ftemplate5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ftemplate5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,7 +6,7 @@ int low(T a, T b, T c) { return a + b + c; } // { dg-message \"template\" }\n template<typename T>\n int high(T a, T b, T c) { return a + b + c; } // { dg-message \"template\" }\n \n-int test (void)\n+void test (void)\n {\n   low (5, 6);\t\t\t// { dg-error \"no matching function\" }\n   // { dg-message \"(candidate|3 arguments, 2 provided)\" \"\" { target *-*-* } .-1 }"}, {"sha": "67322f3eb111cc229fce17e39fd680b935ae820c", "filename": "gcc/testsuite/g++.dg/parse/crash40.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash40.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -15,12 +15,12 @@ class AA\n struct BB : AA {};\n \n class AAA {\n-  int get() const {}\n+  int get() const { return 0; }\n };\n struct BBB {\n   static BBB *foo();\n private:\n-  int get() const {} /* { dg-message \"private\" } */\n+  int get() const { return 1; } /* { dg-message \"private\" } */\n };\n template<bool> struct S {\n   S(unsigned int = BBB::foo()->AAA::get()); /* { dg-error \"is not a base of\" } */"}, {"sha": "b2004b85173e24d1886bc15264b97bdded40787c", "filename": "gcc/testsuite/g++.dg/parse/crash61.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/56241\n // { dg-do compile }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n struct pair { constexpr pair (const) : }; // { dg-error \"\" }\n template <0> make_pair () {}\t\t  // { dg-error \"\" }"}, {"sha": "0befc9e2457570f024ac5f71fcac46f312a52caa", "filename": "gcc/testsuite/g++.dg/parse/crash67.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // PR c++/79414\n+// { dg-additional-options \"-Wno-return-type\" }\n \n class x0;\n template <x1> x2() {  // { dg-error \"declared|type\" }"}, {"sha": "917bfb06c347e3bbc2ec2a0f825f8f310b818055", "filename": "gcc/testsuite/g++.dg/parse/ctor5.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,4 +1,5 @@\n // PR c++/27309\n+// { dg-additional-options \"-Wno-return-type\" }\n \n struct A\n {"}, {"sha": "151f6c5f668b071d5981d497335782ff89088df5", "filename": "gcc/testsuite/g++.dg/parse/defarg4.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -19,6 +19,7 @@ struct R\n int Foo ()\n {\n   R s (1);\n+  return 0;\n }\n \n template <typename T> struct Q\n@@ -29,4 +30,5 @@ template <typename T> struct Q\n int Foo (Q<int> *s)\n {\n   s->Foo (1);\n+  return 1;\n }"}, {"sha": "f73c2746cec7843531119fb4b7ae477830781324", "filename": "gcc/testsuite/g++.dg/parse/defarg6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg6.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -6,6 +6,6 @@\n \n namespace sc_dt {\n     class sc_length_param {\n-\tfriend int compare_unsigned(int if_v_signed = 0) {}\n+\tfriend int compare_unsigned(int if_v_signed = 0) { return 0; }\n     };\n }"}, {"sha": "576ae9fd09bf6adfeff2aefb03955e99566927fa", "filename": "gcc/testsuite/g++.dg/parse/error5.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror5.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,19 +1,19 @@\n // PR c++/13269\n // { dg-options \"-fshow-column\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n class Foo { int foo() return 0; } };\n \n-// { dg-error \"30:expected identifier before numeric constant\" \"identifier\" { target *-*-* } 4 }\n+// { dg-error \"30:expected identifier before numeric constant\" \"identifier\" { target *-*-* } 5 }\n \n-// { dg-error \"23:named return values are no longer supported\" \"named return\" { target *-*-* } 4 }\n+// { dg-error \"23:named return values are no longer supported\" \"named return\" { target *-*-* } 5 }\n \n // the column number info of this error output is still wrong because the error\n // message has been generated by cp_parser_error() which does not\n // necessarily allow accurate column number display. At some point, we will\n // need make cp_parser_error() report more accurate column numbers.\n-// { dg-error \"30:expected '\\{' at end of input\" \"brace\" { target *-*-* } 4 }\n+// { dg-error \"30:expected '\\{' at end of input\" \"brace\" { target *-*-* } 5 }\n \n-// { dg-error \"34:expected ';' after class definition\" \"semicolon\" {target *-*-* } 4 }\n-\n-// { dg-error \"35:expected declaration before '\\}' token\" \"declaration\" {target *-*-* } 4 }\n+// { dg-error \"34:expected ';' after class definition\" \"semicolon\" {target *-*-* } 5 }\n \n+// { dg-error \"35:expected declaration before '\\}' token\" \"declaration\" {target *-*-* } 5 }"}, {"sha": "fb572e9408ae15778110ffe033592262244e6f96", "filename": "gcc/testsuite/g++.dg/parse/expr2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,7 +2,7 @@ struct X {\n   X(double *data, double d0, double d1);\n };\n \n-int foo(double d0) {\n+void foo(double d0) {\n   double * data;\n   X(data,d0,d0);\n }"}, {"sha": "7fc480f3ea0cc76e2e2c07dab3652a3c7bfd7257", "filename": "gcc/testsuite/g++.dg/parse/friend7.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend7.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // PR c++/34488\n // { dg-do compile }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n struct A\n {"}, {"sha": "566974192537fdf0c4befd5f65ebe69e6f5f75dc", "filename": "gcc/testsuite/g++.dg/parse/namespace1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,6 +2,6 @@ namespace foo {\n void baz(int);\n }\n \n-int bar(int foo) {\n+void bar(int foo) {\n   foo::baz (3);\n }"}, {"sha": "d5da5446a65c8f96d9ef7e2daebf94d6e42533e7", "filename": "gcc/testsuite/g++.dg/parse/namespace9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnamespace9.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,7 +1,7 @@\n namespace A {\n   void f();\n }\n-int g()\n+void g()\n {\n   struct f { };\n   using A::f;"}, {"sha": "913c8fe0002a53771e02b60482234e2b61997916", "filename": "gcc/testsuite/g++.dg/parse/ret-type2.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fret-type2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fret-type2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fret-type2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,3 +1,5 @@\n+// { dg-additional-options \"-Wno-return-type\" }\n+\n struct S {} f(); // { dg-error \"return\" \"err\" }\n // { dg-message \"note\" \"note\" { target *-*-* } .-1 }\n struct T {} *g(); // { dg-error \"return\" }"}, {"sha": "60b8f39ee5e015eef35deb52ee1f7c4dd3f74ddc", "filename": "gcc/testsuite/g++.dg/parse/typedef8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -5,7 +5,7 @@ typedef register int b; // { dg-error \"conflicting\" }\n typedef extern int c;   // { dg-error \"conflicting\" }\n static typedef int a;   // { dg-error \"conflicting\" }\n \n-int foo()\n+void foo()\n {\n   typedef auto int bar; // { dg-error \"conflicting|two or more data types\" }\n }"}, {"sha": "cd6d4111cc5d27a24f400e20518c2df7aeedec4d", "filename": "gcc/testsuite/g++.dg/pch/static-1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fstatic-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fstatic-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fstatic-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -2,9 +2,11 @@\n int LocalStaticTest()\n {\n         static A sa;\n+\treturn 0;\n }\n \n int main(int argc, char **argv)\n {\n         A::StaticTest();\n+\treturn 0;\n }"}, {"sha": "8b6afeb052ad6f78a249d40cae8c96bd2fe729b0", "filename": "gcc/testsuite/g++.dg/plugin/diagnostic-test-expressions-1.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -66,7 +66,7 @@ struct test_struct\n   int field;\n };\n \n-int test_structure_references (struct test_struct *ptr)\n+void test_structure_references (struct test_struct *ptr)\n {\n   struct test_struct local;\n   local.field = 42;\n@@ -84,7 +84,7 @@ int test_structure_references (struct test_struct *ptr)\n    { dg-end-multiline-output \"\" } */\n }\n \n-int test_postfix_incdec (int i)\n+void test_postfix_incdec (int i)\n {\n   __emit_expression_range (0, i++ ); /* { dg-warning \"range\" } */\n /* { dg-begin-multiline-output \"\" }\n@@ -101,7 +101,7 @@ int test_postfix_incdec (int i)\n \n /* Unary operators.  ****************************************************/\n \n-int test_sizeof (int i)\n+void test_sizeof (int i)\n {\n   __emit_expression_range (0, sizeof(int) + i); /* { dg-warning \"range\" } */\n /* { dg-begin-multiline-output \"\" }\n@@ -128,7 +128,7 @@ int test_sizeof (int i)\n    { dg-end-multiline-output \"\" } */\n }\n \n-int test_alignof (int i)\n+void test_alignof (int i)\n {\n   __emit_expression_range (0, alignof(int) + i); /* { dg-warning \"range\" } */\n /* { dg-begin-multiline-output \"\" }\n@@ -167,7 +167,7 @@ int test_alignof (int i)\n    { dg-end-multiline-output \"\" } */\n }\n \n-int test_prefix_incdec (int i)\n+void test_prefix_incdec (int i)\n {\n   __emit_expression_range (0, ++i ); /* { dg-warning \"range\" } */\n /* { dg-begin-multiline-output \"\" }"}, {"sha": "404cd2124c045d3ce348e04a28c26d69f09cd2c5", "filename": "gcc/testsuite/g++.dg/plugin/dumb-plugin-test-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb-plugin-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb-plugin-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb-plugin-test-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -26,7 +26,7 @@ struct Bar {\n int g = g;\n Foo foo = foo;\n \n-int func()\n+void func()\n {\n   Bar *bar1, bar2;\n   Foo local_foo;"}, {"sha": "08bee09f0d5e09dfc50bdb5f476fd5d4327d61d1", "filename": "gcc/testsuite/g++.dg/plugin/self-assign-test-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -26,7 +26,7 @@ struct Bar {\n int g = g; // { dg-warning \"assigned to itself\" }\n Foo foo = foo; // { dg-warning \"assigned to itself\" }\n \n-int func()\n+void func()\n {\n   Bar *bar1, bar2;\n   Foo local_foo;"}, {"sha": "2c9d8cb7d0e69a88224818df644efe1041ed367a", "filename": "gcc/testsuite/g++.dg/plugin/self-assign-test-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -26,7 +26,7 @@ struct Bar {\n int g = g; // { dg-warning \"assigned to itself\" }\n Foo foo = foo; // { dg-warning \"assigned to itself\" }\n \n-int func()\n+void func()\n {\n   Bar *bar1, bar2;\n   Foo local_foo;"}, {"sha": "48a1aa4139c4ef971d7396d6c7b45d74ad9c8f15", "filename": "gcc/testsuite/g++.dg/plugin/self-assign-test-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fself-assign-test-3.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -26,7 +26,7 @@ struct Bar {\n int g = g; // { dg-bogus \"assigned to itself\" }\n Foo foo = foo; // { dg-bogus \"assigned to itself\" }\n \n-int func()\n+void func()\n {\n   Bar *bar1, bar2;\n   Foo local_foo;"}, {"sha": "1c119e40ebd529fbb3db128b585e8f3f18858a79", "filename": "gcc/testsuite/g++.dg/pr55513.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55513.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55513.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55513.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,11 +1,13 @@\n // { dg-do compile }\n // { dg-options \"-O0 -fdump-tree-gimple\" }\n \n+int\n main ()\n {\n   char s[10];\n   const int t = (__builtin_memcpy (s, \"Hello\", 6), 777);\n   __builtin_printf (\"%d %s\\n\", t, s);\n+  return 0;\n }\n \n // { dg-final { scan-tree-dump-times \"memcpy\" 1 \"gimple\" } }"}, {"sha": "f67a1b4ef149aa1a136288614ec4bff8281fd3e4", "filename": "gcc/testsuite/g++.dg/pr55604.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55604.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55604.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr55604.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,10 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -fdump-rtl-reload\" } */\n \n+int\n main ()\n {\n   char s[10];\n   const int t = (__builtin_memcpy (s, \"Hello\", 6), 5);\n   __builtin_printf (\"%d %s\\n\", t, s);\n+  return 0;\n }\n "}, {"sha": "1592433d0d7b5e31a0129bdb1be95301655c8cd5", "filename": "gcc/testsuite/g++.dg/pr57662.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr57662.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr57662.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr57662.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O2 -fselective-scheduling2 -fsel-sched-pipelining\" } */\n+/* { dg-additional-options \"-Wno-return-type\" } */\n \n extern \"C\" {\n \ttypedef struct _IO_FILE FILE;"}, {"sha": "8c98b67076baf043e8e8e2b1e4d0735506760d3a", "filename": "gcc/testsuite/g++.dg/pr58389.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr58389.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr58389.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr58389.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -51,4 +51,4 @@ inline void C::m_fn1() {\n     sort(c, b, qt_notclosestLeaf);\n   }\n }\n-A F::m_fn1() const { const_cast<F *>(this)->d_ptr->m_fn1(); }\n+A F::m_fn1() const { const_cast<F *>(this)->d_ptr->m_fn1(); return A(); }"}, {"sha": "4ac5becfd26a92d5cb7d98e0565bed9aca27824b", "filename": "gcc/testsuite/g++.dg/pr59510.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59510.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59510.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59510.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,6 +1,7 @@\n // PR debug/59510\n // { dg-do compile }\n // { dg-options \"-O2 -g --param=large-stack-frame-growth=1\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <typename _Iterator>\n struct _Iter_base"}, {"sha": "26748997fdddc6759c97c8aa888b78529aa3e07c", "filename": "gcc/testsuite/g++.dg/pr67989.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67989.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67989.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67989.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=c++11 -O2\" } */\n+/* { dg-additional-options \"-Wno-return-type\" } */\n \n __extension__ typedef unsigned long long int uint64_t;\n namespace std __attribute__ ((__visibility__ (\"default\")))"}, {"sha": "fd79dbfc88301506948cc5e2c1ca71add4c18c15", "filename": "gcc/testsuite/g++.dg/pr70590-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70590-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70590-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70590-2.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -8,13 +8,13 @@ constexpr int *foo = &a;\n \n void blah (int *);\n \n-int\n+void\n bar ()\n {\n   blah (foo);\n }\n \n-int\n+void\n baz ()\n {\n   blah (foo);"}, {"sha": "28c455ab5300c9f0bfb6a50a0e842ef0e956dc50", "filename": "gcc/testsuite/g++.dg/pr70590.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70590.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70590.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70590.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,13 +12,13 @@ foo ()\n \n void blah (int *);\n \n-int\n+void\n bar ()\n {\n   blah (foo ());\n }\n \n-int\n+void\n baz ()\n {\n   blah (foo ());"}, {"sha": "4b45789845f058ae5596155bc2d6252009690189", "filename": "gcc/testsuite/g++.dg/pr70965.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70965.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70965.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70965.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -14,7 +14,7 @@ template <typename> struct D\n extern template class D<char>;\n enum L { M };\n struct F { virtual char *foo (); };\n-template <class> struct I : B { static int foo (int) {} };\n+template <class> struct I : B { static int foo (int) { return 0; } };\n struct G { typedef I<int> t; };\n void foo (int) { G::t::foo (0); }\n void bar (const D<char> &, const D<int> &, int, L);"}, {"sha": "9b31defd09ced6dbe3e723b32682b2a99dd84bd5", "filename": "gcc/testsuite/g++.dg/pr77550.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr77550.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr77550.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr77550.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -235,7 +235,7 @@ template <typename, typename, typename> struct basic_string {\n   basic_string() : _M_dataplus(0) {}\n   basic_string(const basic_string &) : _M_dataplus(0) {}\n   size_type size() { return _M_string_length; }\n-  char *data() const {}\n+  char *data() const { return 0; }\n };\n //template<> basic_string<char, std::char_traits<char>, std::allocator<char>>::\n //_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) {}"}, {"sha": "d01e73371de37ec857ee671f741d7753e2144926", "filename": "gcc/testsuite/g++.dg/pr80287.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80287.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80287.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80287.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -3,7 +3,7 @@\n // { dg-options \"-g\" }\n \n struct A {\n-  operator long() {}\n+  operator long() { return 0; }\n } __attribute__((__may_alias__));\n \n struct {"}, {"sha": "b3848b0eb5f1d4b396922f7e5fc5e493fcb1a8bb", "filename": "gcc/testsuite/g++.dg/pr80707.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80707.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80707.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80707.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -26,4 +26,6 @@ int A::m_fn1(int &p1) const {\n       p1 = 0;\n     b--;\n   }\n+\n+  return 0;\n }"}, {"sha": "5f949389ec6a1f064d73803c17e086498879ccb9", "filename": "gcc/testsuite/g++.dg/pr81194.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81194.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81194.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81194.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,5 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-O2 -std=c++17 -fno-exceptions\" }\n+// { dg-additional-options \"-Wno-return-type\" }\n \n template <class a> struct b { typedef a *c; };\n class e {};"}, {"sha": "e4a606e2052a70fb57d83757f5f86788bee34cf7", "filename": "gcc/testsuite/g++.dg/spellcheck-identifiers.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-identifiers.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -136,7 +136,7 @@ enum foo {\n   FOO_SECOND\n };\n \n-int\n+void\n test_6 (enum foo f)\n {\n   switch (f)"}, {"sha": "7d84d6afc1aa50f35b21595b751cfc0e41aba9f4", "filename": "gcc/testsuite/g++.dg/tc1/dr152.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -12,6 +12,7 @@ namespace N1 {\n   { \n     X x; \n     f(x);     // { dg-error \"matching\" \"matching\" }\n+    return 0;\n   }\n }\n \n@@ -30,6 +31,7 @@ namespace N2 {\n   { \n     X<T> x; \n     N2::f(x);   // { dg-error \"matching\" \"matching\" }\n+    return 0;\n   }\n \n   template int foo<float>();  // { dg-message \"required from here\" }"}, {"sha": "a7fe7c0441b5996bc2f8268cbfe5e8d1a1d73ef4", "filename": "gcc/testsuite/g++.dg/template/aggr-init1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faggr-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faggr-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faggr-init1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -4,5 +4,5 @@ struct A {};\n struct B {\n \tvoid *(*a)();\n };\n-template <typename T> void *CreateA() {}\n+template <typename T> void *CreateA() { return 0; }\n B b = {CreateA<A>};"}, {"sha": "ff5c9ea1553cb3ea7f20b87c234603110a4f2f62", "filename": "gcc/testsuite/g++.dg/template/anon1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fanon1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19520957ad27c591e888a82d8dd30cb5fccb3896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fanon1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fanon1.C?ref=19520957ad27c591e888a82d8dd30cb5fccb3896", "patch": "@@ -1,10 +1,10 @@\n struct x {\n-    int foo () {}\n+    int foo () { return 0; }\n };\n \n template <class T>\n struct vector {\n-    T& bar () {}\n+    T& bar () { static T a; return a; }\n };\n \n template <class T>"}]}