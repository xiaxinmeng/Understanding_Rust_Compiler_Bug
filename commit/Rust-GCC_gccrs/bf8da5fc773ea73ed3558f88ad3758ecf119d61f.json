{"sha": "bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4ZGE1ZmM3NzNlYTczZWQzNTU4Zjg4YWQzNzU4ZWNmMTE5ZDYxZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-04-06T16:24:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-04-06T16:24:16Z"}, "message": "configure.ac: Tidy target case.\n\n        * configure.ac: Tidy target case.\n        (HAVE_LONG_DOUBLE): Allow the target to override.\n        * configure: Regenerate.\n        * include/ffi.h.in: Don't define ffi_type_foo if\n        LIBFFI_HIDE_BASIC_TYPES is defined.\n        (ffi_type_longdouble): If not HAVE_LONG_DOUBLE, define\n        to ffi_type_double.\n        * types.c (LIBFFI_HIDE_BASIC_TYPES): Define.\n        (FFI_TYPEDEF, ffi_type_void): Mark the data const.\n        (ffi_type_longdouble): Special case for Alpha.  Don't define\n        if long double == double.\n\n        * src/alpha/ffi.c (FFI_TYPE_LONGDOUBLE): Assert unique value.\n        (ffi_prep_cif_machdep): Handle it as the 128-bit type.\n        (ffi_call, ffi_closure_osf_inner): Likewise.\n        (ffi_closure_osf_inner): Likewise.  Mark hidden.\n        (ffi_call_osf, ffi_closure_osf): Mark hidden.\n        * src/alpha/ffitarget.h (FFI_LAST_ABI): Tidy definition.\n        * src/alpha/osf.S (ffi_call_osf, ffi_closure_osf): Mark hidden.\n        (load_table): Handle 128-bit long double.\n\n        * testsuite/libffi.call/float4.c: Add -mieee for alpha.\n\nFrom-SVN: r123622", "tree": {"sha": "430f3d3b8444386a212bcbe6f9a70261cfb97d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/430f3d3b8444386a212bcbe6f9a70261cfb97d01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/comments", "author": null, "committer": null, "parents": [{"sha": "8fbba42a965310642c0c893c640b2a86f1b6dd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fbba42a965310642c0c893c640b2a86f1b6dd9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fbba42a965310642c0c893c640b2a86f1b6dd9e"}], "stats": {"total": 463, "additions": 328, "deletions": 135}, "files": [{"sha": "22295f8e89d239c7f8f43124b72db622505577cc", "filename": "libffi/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -1,3 +1,28 @@\n+2007-04-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.ac: Tidy target case.\n+\t(HAVE_LONG_DOUBLE): Allow the target to override.\n+\t* configure: Regenerate.\n+\t* include/ffi.h.in: Don't define ffi_type_foo if\n+\tLIBFFI_HIDE_BASIC_TYPES is defined.\n+\t(ffi_type_longdouble): If not HAVE_LONG_DOUBLE, define\n+\tto ffi_type_double.\n+\t* types.c (LIBFFI_HIDE_BASIC_TYPES): Define.\n+\t(FFI_TYPEDEF, ffi_type_void): Mark the data const.\n+\t(ffi_type_longdouble): Special case for Alpha.  Don't define\n+\tif long double == double.\n+\n+\t* src/alpha/ffi.c (FFI_TYPE_LONGDOUBLE): Assert unique value.\n+\t(ffi_prep_cif_machdep): Handle it as the 128-bit type.\n+\t(ffi_call, ffi_closure_osf_inner): Likewise.\n+\t(ffi_closure_osf_inner): Likewise.  Mark hidden.\n+\t(ffi_call_osf, ffi_closure_osf): Mark hidden.\n+\t* src/alpha/ffitarget.h (FFI_LAST_ABI): Tidy definition.\n+\t* src/alpha/osf.S (ffi_call_osf, ffi_closure_osf): Mark hidden.\n+\t(load_table): Handle 128-bit long double.\n+\n+\t* testsuite/libffi.call/float4.c: Add -mieee for alpha.\n+\n 2007-04-06  Tom Tromey  <tromey@redhat.com>\n \n \tPR libffi/31491:"}, {"sha": "0b8c79ccb385b299ad3bf12557e0319c987109ed", "filename": "libffi/configure", "status": "modified", "additions": 107, "deletions": 50, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -5383,52 +5383,107 @@ fi\n \n TARGETDIR=\"unknown\"\n case \"$host\" in\n-i*86-*-linux*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-gnu*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-solaris2.1[0-9]*) TARGET=X86_64; TARGETDIR=x86;;\n-i*86-*-solaris*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-beos*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-darwin*) TARGET=X86_DARWIN; TARGETDIR=x86;;\n-i*86-*-freebsd* | i*86-*-kfreebsd*-gnu) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-netbsdelf* | i*86-*-knetbsd*-gnu) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-rtems*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-win32*) TARGET=X86_WIN32; TARGETDIR=x86;;\n-i*86-*-cygwin*) TARGET=X86_WIN32; TARGETDIR=x86;;\n-i*86-*-mingw*) TARGET=X86_WIN32; TARGETDIR=x86;;\n-frv-*-*) TARGET=FRV; TARGETDIR=frv;;\n-sparc-sun-4*) TARGET=SPARC; TARGETDIR=sparc;;\n-sparc*-sun-*) TARGET=SPARC; TARGETDIR=sparc;;\n-sparc-*-linux* | sparc-*-netbsdelf* | sparc-*-knetbsd*-gnu) TARGET=SPARC; TARGETDIR=sparc;;\n-sparc*-*-rtems*) TARGET=SPARC; TARGETDIR=sparc;;\n-sparc64-*-linux* | sparc64-*-freebsd* | sparc64-*-netbsd* | sparc64-*-knetbsd*-gnu) TARGET=SPARC; TARGETDIR=sparc;;\n-alpha*-*-linux* | alpha*-*-osf* | alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu | alpha*-*-netbsd* | alpha*-*-knetbsd*-gnu) TARGET=ALPHA; TARGETDIR=alpha;;\n-ia64*-*-*) TARGET=IA64; TARGETDIR=ia64;;\n-m32r*-*-linux* ) TARGET=M32R; TARGETDIR=m32r;;\n-m68k-*-linux*) TARGET=M68K; TARGETDIR=m68k;;\n-mips64*-*);;\n-mips-sgi-irix5.* | mips-sgi-irix6.*) TARGET=MIPS_IRIX; TARGETDIR=mips;;\n-mips*-*-linux*) TARGET=MIPS_LINUX; TARGETDIR=mips;;\n-powerpc*-*-linux* | powerpc-*-sysv*) TARGET=POWERPC; TARGETDIR=powerpc;;\n-powerpc-*-beos*) TARGET=POWERPC; TARGETDIR=powerpc;;\n-powerpc-*-darwin*) TARGET=POWERPC_DARWIN; TARGETDIR=powerpc;;\n-powerpc-*-aix*) TARGET=POWERPC_AIX; TARGETDIR=powerpc;;\n-powerpc-*-freebsd*) TARGET=POWERPC_FREEBSD; TARGETDIR=powerpc;;\n-powerpc*-*-rtems*) TARGET=POWERPC; TARGETDIR=powerpc;;\n-rs6000-*-aix*) TARGET=POWERPC_AIX; TARGETDIR=powerpc;;\n-arm*-*-linux-*) TARGET=ARM; TARGETDIR=arm;;\n-arm*-*-netbsdelf* | arm*-*-knetbsd*-gnu) TARGET=ARM; TARGETDIR=arm;;\n-arm*-*-rtems*) TARGET=ARM; TARGETDIR=arm;;\n-cris-*-*) TARGET=LIBFFI_CRIS; TARGETDIR=cris;;\n-s390-*-linux-*) TARGET=S390; TARGETDIR=s390;;\n-s390x-*-linux-*) TARGET=S390; TARGETDIR=s390;;\n-x86_64-*-linux* | x86_64-*-freebsd* | x86_64-*-kfreebsd*-gnu) TARGET=X86_64; TARGETDIR=x86;;\n-x86_64-*-darwin*) TARGET=X86_DARWIN; TARGETDIR=x86;;\n-sh-*-linux* | sh[34]*-*-linux*) TARGET=SH; TARGETDIR=sh;;\n-sh-*-rtems*) TARGET=SH; TARGETDIR=sh;;\n-sh64-*-linux* | sh5*-*-linux*) TARGET=SH64; TARGETDIR=sh64;;\n-hppa*-*-linux* | parisc*-*-linux*) TARGET=PA_LINUX; TARGETDIR=pa;;\n-hppa*64-*-hpux*) TARGET=PA64_HPUX; TARGETDIR=pa;;\n-hppa*-*-hpux*) TARGET=PA_HPUX; TARGETDIR=pa;;\n+  alpha*-*-*)\n+\tTARGET=ALPHA; TARGETDIR=alpha;\n+\t# Support 128-bit long double, changable via command-line switch.\n+\tHAVE_LONG_DOUBLE='defined(__LONG_DOUBLE_128__)'\n+\t;;\n+\n+  arm*-*-*)\n+\tTARGET=ARM; TARGETDIR=arm\n+\t;;\n+\n+  cris-*-*)\n+\tTARGET=LIBFFI_CRIS; TARGETDIR=cris\n+\t;;\n+\n+  frv-*-*)\n+\tTARGET=FRV; TARGETDIR=frv\n+\t;;\n+\n+  hppa*-*-linux* | parisc*-*-linux*)\n+\tTARGET=PA_LINUX; TARGETDIR=pa\n+\t;;\n+  hppa*64-*-hpux*)\n+\tTARGET=PA64_HPUX; TARGETDIR=pa\n+\t;;\n+  hppa*-*-hpux*)\n+\tTARGET=PA_HPUX; TARGETDIR=pa\n+\t;;\n+\n+  i?86-win32* | i?86-*-cygwin* | i?86-*-mingw*)\n+\tTARGET=X86_WIN32; TARGETDIR=x86\n+\t;;\n+  i?86-*-darwin*)\n+\tTARGET=X86_DARWIN; TARGETDIR=x86\n+\t;;\n+  i?86-*-*)\n+\tTARGET=X86; TARGETDIR=x86\n+\t;;\n+\n+  ia64*-*-*)\n+\tTARGET=IA64; TARGETDIR=ia64\n+\t;;\n+\n+  m32r*-*-*)\n+\tTARGET=M32R; TARGETDIR=m32r\n+\t;;\n+\n+  m68k-*-*)\n+\tTARGET=M68K; TARGETDIR=m68k\n+\t;;\n+\n+  mips64*-*)\n+\t;;\n+  mips-sgi-irix5.* | mips-sgi-irix6.*)\n+\tTARGET=MIPS_IRIX; TARGETDIR=mips\n+\t;;\n+  mips*-*-linux*)\n+\tTARGET=MIPS_LINUX; TARGETDIR=mips\n+\t;;\n+\n+  powerpc*-*-linux* | powerpc-*-sysv*)\n+\tTARGET=POWERPC; TARGETDIR=powerpc\n+\t;;\n+  powerpc-*-beos*)\n+\tTARGET=POWERPC; TARGETDIR=powerpc\n+\t;;\n+  powerpc-*-darwin*)\n+\tTARGET=POWERPC_DARWIN; TARGETDIR=powerpc\n+\t;;\n+  powerpc-*-aix* | rs6000-*-aix*)\n+\tTARGET=POWERPC_AIX; TARGETDIR=powerpc\n+\t;;\n+  powerpc-*-freebsd*)\n+\tTARGET=POWERPC_FREEBSD; TARGETDIR=powerpc\n+\t;;\n+  powerpc*-*-rtems*)\n+\tTARGET=POWERPC; TARGETDIR=powerpc\n+\t;;\n+\n+  s390-*-* | s390x-*-*)\n+\tTARGET=S390; TARGETDIR=s390\n+\t;;\n+\n+  sh-*-* | sh[34]*-*-*)\n+\tTARGET=SH; TARGETDIR=sh\n+\t;;\n+  sh64-*-* | sh5*-*-*)\n+\tTARGET=SH64; TARGETDIR=sh64\n+\t;;\n+\n+  sparc*-*-*)\n+\tTARGET=SPARC; TARGETDIR=sparc\n+\t;;\n+\n+  x86_64-*-darwin*)\n+\tTARGET=X86_DARWIN; TARGETDIR=x86\n+\t;;\n+  x86_64-*-cygwin* | x86_64-*-mingw*)\n+\t;;\n+  x86_64-*-*)\n+\tTARGET=X86_64; TARGETDIR=x86\n+\t;;\n esac\n \n \n@@ -7143,15 +7198,17 @@ _ACEOF\n \n \n # Also AC_SUBST this variable for ffi.h.\n-HAVE_LONG_DOUBLE=0\n-if test $ac_cv_sizeof_double != $ac_cv_sizeof_long_double; then\n-  if test $ac_cv_sizeof_long_double != 0; then\n-    HAVE_LONG_DOUBLE=1\n+if test -z \"$HAVE_LONG_DOUBLE\"; then\n+  HAVE_LONG_DOUBLE=0\n+  if test $ac_cv_sizeof_double != $ac_cv_sizeof_long_double; then\n+    if test $ac_cv_sizeof_long_double != 0; then\n+      HAVE_LONG_DOUBLE=1\n \n cat >>confdefs.h <<\\_ACEOF\n #define HAVE_LONG_DOUBLE 1\n _ACEOF\n \n+    fi\n   fi\n fi\n "}, {"sha": "c171d922f8bc041246542194e2ffcfa76693ad73", "filename": "libffi/configure.ac", "status": "modified", "additions": 108, "deletions": 51, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -41,52 +41,107 @@ AM_CONDITIONAL(TESTSUBDIR, test -d $srcdir/testsuite)\n \n TARGETDIR=\"unknown\"\n case \"$host\" in\n-i*86-*-linux*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-gnu*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-solaris2.1[[0-9]]*) TARGET=X86_64; TARGETDIR=x86;;\n-i*86-*-solaris*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-beos*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-darwin*) TARGET=X86_DARWIN; TARGETDIR=x86;;\n-i*86-*-freebsd* | i*86-*-kfreebsd*-gnu) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-netbsdelf* | i*86-*-knetbsd*-gnu) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-rtems*) TARGET=X86; TARGETDIR=x86;;\n-i*86-*-win32*) TARGET=X86_WIN32; TARGETDIR=x86;;\n-i*86-*-cygwin*) TARGET=X86_WIN32; TARGETDIR=x86;;\n-i*86-*-mingw*) TARGET=X86_WIN32; TARGETDIR=x86;;\n-frv-*-*) TARGET=FRV; TARGETDIR=frv;;\n-sparc-sun-4*) TARGET=SPARC; TARGETDIR=sparc;;\n-sparc*-sun-*) TARGET=SPARC; TARGETDIR=sparc;;\n-sparc-*-linux* | sparc-*-netbsdelf* | sparc-*-knetbsd*-gnu) TARGET=SPARC; TARGETDIR=sparc;;\n-sparc*-*-rtems*) TARGET=SPARC; TARGETDIR=sparc;;\n-sparc64-*-linux* | sparc64-*-freebsd* | sparc64-*-netbsd* | sparc64-*-knetbsd*-gnu) TARGET=SPARC; TARGETDIR=sparc;;\n-alpha*-*-linux* | alpha*-*-osf* | alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu | alpha*-*-netbsd* | alpha*-*-knetbsd*-gnu) TARGET=ALPHA; TARGETDIR=alpha;;\n-ia64*-*-*) TARGET=IA64; TARGETDIR=ia64;;\n-m32r*-*-linux* ) TARGET=M32R; TARGETDIR=m32r;;\n-m68k-*-linux*) TARGET=M68K; TARGETDIR=m68k;;\n-mips64*-*);;\n-mips-sgi-irix5.* | mips-sgi-irix6.*) TARGET=MIPS_IRIX; TARGETDIR=mips;;\n-mips*-*-linux*) TARGET=MIPS_LINUX; TARGETDIR=mips;;\n-powerpc*-*-linux* | powerpc-*-sysv*) TARGET=POWERPC; TARGETDIR=powerpc;;\n-powerpc-*-beos*) TARGET=POWERPC; TARGETDIR=powerpc;;\n-powerpc-*-darwin*) TARGET=POWERPC_DARWIN; TARGETDIR=powerpc;;\n-powerpc-*-aix*) TARGET=POWERPC_AIX; TARGETDIR=powerpc;;\n-powerpc-*-freebsd*) TARGET=POWERPC_FREEBSD; TARGETDIR=powerpc;;\n-powerpc*-*-rtems*) TARGET=POWERPC; TARGETDIR=powerpc;;\n-rs6000-*-aix*) TARGET=POWERPC_AIX; TARGETDIR=powerpc;;\n-arm*-*-linux-*) TARGET=ARM; TARGETDIR=arm;;\n-arm*-*-netbsdelf* | arm*-*-knetbsd*-gnu) TARGET=ARM; TARGETDIR=arm;;\n-arm*-*-rtems*) TARGET=ARM; TARGETDIR=arm;;\n-cris-*-*) TARGET=LIBFFI_CRIS; TARGETDIR=cris;;\n-s390-*-linux-*) TARGET=S390; TARGETDIR=s390;;\n-s390x-*-linux-*) TARGET=S390; TARGETDIR=s390;;\n-x86_64-*-linux* | x86_64-*-freebsd* | x86_64-*-kfreebsd*-gnu) TARGET=X86_64; TARGETDIR=x86;;\n-x86_64-*-darwin*) TARGET=X86_DARWIN; TARGETDIR=x86;;\n-sh-*-linux* | sh[[34]]*-*-linux*) TARGET=SH; TARGETDIR=sh;;\n-sh-*-rtems*) TARGET=SH; TARGETDIR=sh;;\n-sh64-*-linux* | sh5*-*-linux*) TARGET=SH64; TARGETDIR=sh64;;\n-hppa*-*-linux* | parisc*-*-linux*) TARGET=PA_LINUX; TARGETDIR=pa;;\n-hppa*64-*-hpux*) TARGET=PA64_HPUX; TARGETDIR=pa;;\n-hppa*-*-hpux*) TARGET=PA_HPUX; TARGETDIR=pa;;\n+  alpha*-*-*)\n+\tTARGET=ALPHA; TARGETDIR=alpha;\n+\t# Support 128-bit long double, changable via command-line switch.\n+\tHAVE_LONG_DOUBLE='defined(__LONG_DOUBLE_128__)'\n+\t;;\n+\n+  arm*-*-*)\n+\tTARGET=ARM; TARGETDIR=arm\n+\t;;\n+\n+  cris-*-*)\n+\tTARGET=LIBFFI_CRIS; TARGETDIR=cris\n+\t;;\n+\n+  frv-*-*)\n+\tTARGET=FRV; TARGETDIR=frv\n+\t;;\n+\n+  hppa*-*-linux* | parisc*-*-linux*)\n+\tTARGET=PA_LINUX; TARGETDIR=pa\n+\t;;\n+  hppa*64-*-hpux*)\n+\tTARGET=PA64_HPUX; TARGETDIR=pa\n+\t;;\n+  hppa*-*-hpux*)\n+\tTARGET=PA_HPUX; TARGETDIR=pa\n+\t;;\n+\n+  i?86-win32* | i?86-*-cygwin* | i?86-*-mingw*)\n+\tTARGET=X86_WIN32; TARGETDIR=x86\n+\t;;\n+  i?86-*-darwin*)\n+\tTARGET=X86_DARWIN; TARGETDIR=x86\n+\t;;\n+  i?86-*-*)\n+\tTARGET=X86; TARGETDIR=x86\n+\t;;\n+\n+  ia64*-*-*)\n+\tTARGET=IA64; TARGETDIR=ia64\n+\t;;\n+\n+  m32r*-*-*)\n+\tTARGET=M32R; TARGETDIR=m32r\n+\t;;\n+\n+  m68k-*-*)\n+\tTARGET=M68K; TARGETDIR=m68k\n+\t;;\n+\n+  mips64*-*)\n+\t;;\n+  mips-sgi-irix5.* | mips-sgi-irix6.*)\n+\tTARGET=MIPS_IRIX; TARGETDIR=mips\n+\t;;\n+  mips*-*-linux*)\n+\tTARGET=MIPS_LINUX; TARGETDIR=mips\n+\t;;\n+\n+  powerpc*-*-linux* | powerpc-*-sysv*)\n+\tTARGET=POWERPC; TARGETDIR=powerpc\n+\t;;\n+  powerpc-*-beos*)\n+\tTARGET=POWERPC; TARGETDIR=powerpc\n+\t;;\n+  powerpc-*-darwin*)\n+\tTARGET=POWERPC_DARWIN; TARGETDIR=powerpc\n+\t;;\n+  powerpc-*-aix* | rs6000-*-aix*)\n+\tTARGET=POWERPC_AIX; TARGETDIR=powerpc\n+\t;;\n+  powerpc-*-freebsd*)\n+\tTARGET=POWERPC_FREEBSD; TARGETDIR=powerpc\n+\t;;\n+  powerpc*-*-rtems*)\n+\tTARGET=POWERPC; TARGETDIR=powerpc\n+\t;;\n+\n+  s390-*-* | s390x-*-*)\n+\tTARGET=S390; TARGETDIR=s390\n+\t;;\n+\n+  sh-*-* | sh[[34]]*-*-*)\n+\tTARGET=SH; TARGETDIR=sh\n+\t;;\n+  sh64-*-* | sh5*-*-*)\n+\tTARGET=SH64; TARGETDIR=sh64\n+\t;;\n+\n+  sparc*-*-*)\n+\tTARGET=SPARC; TARGETDIR=sparc\n+\t;;\n+\n+  x86_64-*-darwin*)\n+\tTARGET=X86_DARWIN; TARGETDIR=x86\n+\t;;\n+  x86_64-*-cygwin* | x86_64-*-mingw*)\n+\t;;\n+  x86_64-*-*)\n+\tTARGET=X86_64; TARGETDIR=x86\n+\t;;\n esac\n \n AC_SUBST(AM_RUNTESTFLAGS)\n@@ -133,11 +188,13 @@ AC_CHECK_SIZEOF(double)\n AC_CHECK_SIZEOF(long double)\n \n # Also AC_SUBST this variable for ffi.h.\n-HAVE_LONG_DOUBLE=0\n-if test $ac_cv_sizeof_double != $ac_cv_sizeof_long_double; then\n-  if test $ac_cv_sizeof_long_double != 0; then\n-    HAVE_LONG_DOUBLE=1\n-    AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define if you have the long double type and it is bigger than a double])\n+if test -z \"$HAVE_LONG_DOUBLE\"; then\n+  HAVE_LONG_DOUBLE=0\n+  if test $ac_cv_sizeof_double != $ac_cv_sizeof_long_double; then\n+    if test $ac_cv_sizeof_long_double != 0; then\n+      HAVE_LONG_DOUBLE=1\n+      AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define if you have the long double type and it is bigger than a double])\n+    fi\n   fi\n fi\n AC_SUBST(HAVE_LONG_DOUBLE)"}, {"sha": "bffe7ffc96dd1994726a71d632e3b3f2f8d4fafe", "filename": "libffi/include/ffi.h.in", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Finclude%2Fffi.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Finclude%2Fffi.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Finclude%2Fffi.h.in?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -82,6 +82,18 @@ extern \"C\" {\n # endif\n #endif\n \n+/* The closure code assumes that this works on pointers, i.e. a size_t\t*/\n+/* can hold a pointer.\t\t\t\t\t\t\t*/\n+\n+typedef struct _ffi_type\n+{\n+  size_t size;\n+  unsigned short alignment;\n+  unsigned short type;\n+  struct _ffi_type **elements;\n+} ffi_type;\n+\n+#ifndef LIBFFI_HIDE_BASIC_TYPES\n #if SCHAR_MAX == 127\n # define ffi_type_uchar                ffi_type_uint8\n # define ffi_type_schar                ffi_type_sint8\n@@ -130,17 +142,6 @@ extern \"C\" {\n  #error \"long size not supported\"\n #endif\n \n-/* The closure code assumes that this works on pointers, i.e. a size_t\t*/\n-/* can hold a pointer.\t\t\t\t\t\t\t*/\n-\n-typedef struct _ffi_type\n-{\n-  size_t size;\n-  unsigned short alignment;\n-  unsigned short type;\n-  struct _ffi_type **elements;\n-} ffi_type;\n-\n /* These are defined in types.c */\n extern ffi_type ffi_type_void;\n extern ffi_type ffi_type_uint8;\n@@ -153,9 +154,14 @@ extern ffi_type ffi_type_uint64;\n extern ffi_type ffi_type_sint64;\n extern ffi_type ffi_type_float;\n extern ffi_type ffi_type_double;\n-extern ffi_type ffi_type_longdouble;\n extern ffi_type ffi_type_pointer;\n \n+#if @HAVE_LONG_DOUBLE@\n+extern ffi_type ffi_type_longdouble;\n+#else\n+#define ffi_type_longdouble ffi_type_double\n+#endif\n+#endif /* LIBFFI_HIDE_BASIC_TYPES */\n \n typedef enum {\n   FFI_OK = 0,\n@@ -342,4 +348,3 @@ void ffi_call(ffi_cif *cif,\n #endif\n \n #endif\n-"}, {"sha": "cfa7b69e839540f6f2c7f628b8fe48777c1662b2", "filename": "libffi/src/alpha/ffi.c", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fsrc%2Falpha%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fsrc%2Falpha%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Falpha%2Fffi.c?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -25,11 +25,22 @@\n \n #include <ffi.h>\n #include <ffi_common.h>\n-\n #include <stdlib.h>\n \n-extern void ffi_call_osf(void *, unsigned long, unsigned, void *, void (*)());\n-extern void ffi_closure_osf(void);\n+/* Force FFI_TYPE_LONGDOUBLE to be different than FFI_TYPE_DOUBLE;\n+   all further uses in this file will refer to the 128-bit type.  */\n+#if defined(__LONG_DOUBLE_128__)\n+# if FFI_TYPE_LONGDOUBLE != 4\n+#  error FFI_TYPE_LONGDOUBLE out of date\n+# endif\n+#else\n+# undef FFI_TYPE_LONGDOUBLE\n+# define FFI_TYPE_LONGDOUBLE 4\n+#endif\n+\n+extern void ffi_call_osf(void *, unsigned long, unsigned, void *, void (*)())\n+  FFI_HIDDEN;\n+extern void ffi_closure_osf(void) FFI_HIDDEN;\n \n \n ffi_status\n@@ -49,6 +60,11 @@ ffi_prep_cif_machdep(ffi_cif *cif)\n       cif->flags = cif->rtype->type;\n       break;\n \n+    case FFI_TYPE_LONGDOUBLE:\n+      /* 128-bit long double is returned in memory, like a struct.  */\n+      cif->flags = FFI_TYPE_STRUCT;\n+      break;\n+\n     default:\n       cif->flags = FFI_TYPE_INT;\n       break;\n@@ -57,15 +73,14 @@ ffi_prep_cif_machdep(ffi_cif *cif)\n   return FFI_OK;\n }\n \n+\n void\n ffi_call(ffi_cif *cif, void (*fn)(), void *rvalue, void **avalue)\n {\n   unsigned long *stack, *argp;\n   long i, avn;\n   ffi_type **arg_types;\n   \n-  FFI_ASSERT (cif->abi == FFI_OSF);\n-\n   /* If the return value is a struct and we don't have a return\n      value address then we need to make one.  */\n   if (rvalue == NULL && cif->flags == FFI_TYPE_STRUCT)\n@@ -84,6 +99,8 @@ ffi_call(ffi_cif *cif, void (*fn)(), void *rvalue, void **avalue)\n \n   while (i < avn)\n     {\n+      size_t size = (*arg_types)->size;\n+\n       switch ((*arg_types)->type)\n \t{\n \tcase FFI_TYPE_SINT8:\n@@ -129,6 +146,12 @@ ffi_call(ffi_cif *cif, void (*fn)(), void *rvalue, void **avalue)\n \t  *(double *) argp = *(double *)(* avalue);\n \t  break;\n \n+\tcase FFI_TYPE_LONGDOUBLE:\n+\t  /* 128-bit long double is passed by reference.  */\n+\t  *(long double **) argp = (long double *)(* avalue);\n+\t  size = sizeof (long double *);\n+\t  break;\n+\n \tcase FFI_TYPE_STRUCT:\n \t  memcpy(argp, *avalue, (*arg_types)->size);\n \t  break;\n@@ -137,7 +160,7 @@ ffi_call(ffi_cif *cif, void (*fn)(), void *rvalue, void **avalue)\n \t  FFI_ASSERT(0);\n \t}\n \n-      argp += ALIGN((*arg_types)->size, FFI_SIZEOF_ARG) / FFI_SIZEOF_ARG;\n+      argp += ALIGN(size, FFI_SIZEOF_ARG) / FFI_SIZEOF_ARG;\n       i++, arg_types++, avalue++;\n     }\n \n@@ -154,8 +177,6 @@ ffi_prep_closure_loc (ffi_closure* closure,\n {\n   unsigned int *tramp;\n \n-  FFI_ASSERT (cif->abi == FFI_OSF);\n-\n   tramp = (unsigned int *) &closure->tramp[0];\n   tramp[0] = 0x47fb0401;\t/* mov $27,$1\t\t*/\n   tramp[1] = 0xa77b0010;\t/* ldq $27,16($27)\t*/\n@@ -178,7 +199,8 @@ ffi_prep_closure_loc (ffi_closure* closure,\n   return FFI_OK;\n }\n \n-int\n+\n+long FFI_HIDDEN\n ffi_closure_osf_inner(ffi_closure *closure, void *rvalue, unsigned long *argp)\n {\n   ffi_cif *cif;\n@@ -206,6 +228,8 @@ ffi_closure_osf_inner(ffi_closure *closure, void *rvalue, unsigned long *argp)\n   /* Grab the addresses of the arguments from the stack frame.  */\n   while (i < avn)\n     {\n+      size_t size = arg_types[i]->size;\n+\n       switch (arg_types[i]->type)\n \t{\n \tcase FFI_TYPE_SINT8:\n@@ -237,16 +261,22 @@ ffi_closure_osf_inner(ffi_closure *closure, void *rvalue, unsigned long *argp)\n \t  avalue[i] = &argp[argn - (argn < 6 ? 6 : 0)];\n \t  break;\n \n+\tcase FFI_TYPE_LONGDOUBLE:\n+\t  /* 128-bit long double is passed by reference.  */\n+\t  avalue[i] = (long double *) argp[argn];\n+\t  size = sizeof (long double *);\n+\t  break;\n+\n \tdefault:\n-\t  FFI_ASSERT(0);\n+\t  abort ();\n \t}\n \n-      argn += ALIGN(arg_types[i]->size, FFI_SIZEOF_ARG) / FFI_SIZEOF_ARG;\n+      argn += ALIGN(size, FFI_SIZEOF_ARG) / FFI_SIZEOF_ARG;\n       i++;\n     }\n \n   /* Invoke the closure.  */\n-  (closure->fun) (cif, rvalue, avalue, closure->user_data);\n+  closure->fun (cif, rvalue, avalue, closure->user_data);\n \n   /* Tell ffi_closure_osf how to perform return type promotions.  */\n   return cif->rtype->type;"}, {"sha": "9ec82dab1c5e3ef4ded3e5f8f7e9b40d670303d8", "filename": "libffi/src/alpha/ffitarget.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fsrc%2Falpha%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fsrc%2Falpha%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Falpha%2Fffitarget.h?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -33,8 +33,8 @@ typedef signed long            ffi_sarg;\n typedef enum ffi_abi {\n   FFI_FIRST_ABI = 0,\n   FFI_OSF,\n-  FFI_DEFAULT_ABI = FFI_OSF,\n-  FFI_LAST_ABI = FFI_DEFAULT_ABI + 1\n+  FFI_LAST_ABI,\n+  FFI_DEFAULT_ABI = FFI_OSF\n } ffi_abi;\n #endif\n \n@@ -45,4 +45,3 @@ typedef enum ffi_abi {\n #define FFI_NATIVE_RAW_API 0\n \n #endif\n-"}, {"sha": "aba6782e7947a4fbed887a3d389d3543d5cc17fe", "filename": "libffi/src/alpha/osf.S", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fsrc%2Falpha%2Fosf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fsrc%2Falpha%2Fosf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Falpha%2Fosf.S?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -1,10 +1,8 @@\n /* -----------------------------------------------------------------------\n-   osf.S - Copyright (c) 1998, 2001 Red Hat\n+   osf.S - Copyright (c) 1998, 2001, 2007 Red Hat\n    \n    Alpha/OSF Foreign Function Interface \n \n-   $Id: osf.S,v 1.1.1.1 1998/11/29 16:48:16 green Exp $\n-\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n    ``Software''), to deal in the Software without restriction, including\n@@ -42,6 +40,8 @@\n \t.align\t3\n \t.globl\tffi_call_osf\n \t.ent\tffi_call_osf\n+\tFFI_HIDDEN(ffi_call_osf)\n+\n ffi_call_osf:\n \t.frame\t$15, 32, $26, 0\n \t.mask   0x4008000, -32\n@@ -129,6 +129,8 @@ $LFE1:\n \t.align\t3\n \t.globl\tffi_closure_osf\n \t.ent\tffi_closure_osf\n+\tFFI_HIDDEN(ffi_closure_osf)\n+\n ffi_closure_osf:\n \t.frame\t$30, 16*8, $26, 0\n \t.mask\t0x4000000, -16*8\n@@ -265,7 +267,7 @@ $load_table:\n \t.gprel32 $load_32\t# FFI_TYPE_INT\n \t.gprel32 $load_float\t# FFI_TYPE_FLOAT\n \t.gprel32 $load_double\t# FFI_TYPE_DOUBLE\n-\t.gprel32 $load_double\t# FFI_TYPE_LONGDOUBLE\n+\t.gprel32 $load_none\t# FFI_TYPE_LONGDOUBLE\n \t.gprel32 $load_u8\t# FFI_TYPE_UINT8\n \t.gprel32 $load_s8\t# FFI_TYPE_SINT8\n \t.gprel32 $load_u16\t# FFI_TYPE_UINT16"}, {"sha": "6d3048870c886d9731ac2277a6ab87872c63f84e", "filename": "libffi/src/types.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fsrc%2Ftypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Fsrc%2Ftypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Ftypes.c?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -23,6 +23,10 @@\n    OTHER DEALINGS IN THE SOFTWARE.\n    ----------------------------------------------------------------------- */\n \n+/* Hide the basic type definitions from the header file, so that we\n+   can redefine them here as \"const\".  */\n+#define LIBFFI_HIDE_BASIC_TYPES\n+\n #include <ffi.h>\n #include <ffi_common.h>\n \n@@ -33,14 +37,14 @@ struct struct_align_##name {\t\t\t\\\n   char c;\t\t\t\t\t\\\n   type x;\t\t\t\t\t\\\n };\t\t\t\t\t\t\\\n-ffi_type ffi_type_##name = {\t\t\t\\\n+const ffi_type ffi_type_##name = {\t\t\\\n   sizeof(type),\t\t\t\t\t\\\n   offsetof(struct struct_align_##name, x),\t\\\n   id, NULL\t\t\t\t\t\\\n }\n \n /* Size and alignment are fake here. They must not be 0. */\n-ffi_type ffi_type_void = {\n+const ffi_type ffi_type_void = {\n   1, 1, FFI_TYPE_VOID, NULL\n };\n \n@@ -57,4 +61,16 @@ FFI_TYPEDEF(pointer, void*, FFI_TYPE_POINTER);\n \n FFI_TYPEDEF(float, float, FFI_TYPE_FLOAT);\n FFI_TYPEDEF(double, double, FFI_TYPE_DOUBLE);\n+\n+#ifdef __alpha__\n+/* Even if we're not configured to default to 128-bit long double, \n+   maintain binary compatibility, as -mlong-double-128 can be used\n+   at any time.  */\n+/* Validate the hard-coded number below.  */\n+# if defined(__LONG_DOUBLE_128__) && FFI_TYPE_LONGDOUBLE != 4\n+#  error FFI_TYPE_LONGDOUBLE out of date\n+# endif\n+const ffi_type ffi_type_longdouble = { 16, 16, 4, NULL };\n+#elif FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n FFI_TYPEDEF(longdouble, long double, FFI_TYPE_LONGDOUBLE);\n+#endif"}, {"sha": "0dd6d85e7aa0307211322103f66f9ce7d5d614cf", "filename": "libffi/testsuite/libffi.call/float4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Ftestsuite%2Flibffi.call%2Ffloat4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8da5fc773ea73ed3558f88ad3758ecf119d61f/libffi%2Ftestsuite%2Flibffi.call%2Ffloat4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Ffloat4.c?ref=bf8da5fc773ea73ed3558f88ad3758ecf119d61f", "patch": "@@ -5,6 +5,8 @@\n    Originator:\tFrom the original ffitest.c  */\n \n /* { dg-do run } */\n+/* { dg-options \"-mieee\" { target alpha*-*-* } } */\n+\n #include \"ffitest.h\"\n #include \"float.h\"\n "}]}