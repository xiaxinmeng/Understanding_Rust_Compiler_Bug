{"sha": "0b8a03e10ef01bf8f44bbba141a0c2451317c887", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4YTAzZTEwZWYwMWJmOGY0NGJiYmExNDFhMGMyNDUxMzE3Yzg4Nw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-06-04T09:48:34Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-06-04T09:48:34Z"}, "message": "re PR target/46261 (avr-gcc: Segfaults when compiled with the -mint8 option)\n\n\tPR target/46261\n\t* config/avr/avr-stdint.h: New file.\n\t* config.gcc (avr-*-*,tm_file): Use avr/avr-stdint.h instead of\n\tnewlib-stdint.h\n\nFrom-SVN: r188172", "tree": {"sha": "c17dd5438ac83ce3a3bfc1bb006953ebe856460b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c17dd5438ac83ce3a3bfc1bb006953ebe856460b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b8a03e10ef01bf8f44bbba141a0c2451317c887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8a03e10ef01bf8f44bbba141a0c2451317c887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8a03e10ef01bf8f44bbba141a0c2451317c887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8a03e10ef01bf8f44bbba141a0c2451317c887/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f27a3f7f0fbd1f77b6b774cb7a12c6334ff331c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f27a3f7f0fbd1f77b6b774cb7a12c6334ff331c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f27a3f7f0fbd1f77b6b774cb7a12c6334ff331c"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "8cf1091e7ca8a2d8618335a2f06f869dec525cd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8a03e10ef01bf8f44bbba141a0c2451317c887/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8a03e10ef01bf8f44bbba141a0c2451317c887/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b8a03e10ef01bf8f44bbba141a0c2451317c887", "patch": "@@ -1,3 +1,10 @@\n+2012-06-04  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/46261\n+\t* config/avr/avr-stdint.h: New file.\n+\t* config.gcc (avr-*-*,tm_file): Use avr/avr-stdint.h instead of\n+\tnewlib-stdint.h\n+\n 2012-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/53550"}, {"sha": "61adc896c39357534f43b0e2f1f8f257ffaa269d", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8a03e10ef01bf8f44bbba141a0c2451317c887/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8a03e10ef01bf8f44bbba141a0c2451317c887/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0b8a03e10ef01bf8f44bbba141a0c2451317c887", "patch": "@@ -926,7 +926,7 @@ avr-*-rtems*)\n \textra_objs=\"avr-devices.o avr-log.o\"\n \t;;\n avr-*-*)\n-\ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h newlib-stdint.h\"\n+\ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h avr/avr-stdint.h\"\n \ttmake_file=\"avr/t-avr avr/t-multilib\"\n \tuse_gcc_stdint=wrap\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\""}, {"sha": "c3ec3ce9fd571557a17a628f7e39d24350e4faee", "filename": "gcc/config/avr/avr-stdint.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8a03e10ef01bf8f44bbba141a0c2451317c887/gcc%2Fconfig%2Favr%2Favr-stdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8a03e10ef01bf8f44bbba141a0c2451317c887/gcc%2Fconfig%2Favr%2Favr-stdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-stdint.h?ref=0b8a03e10ef01bf8f44bbba141a0c2451317c887", "patch": "@@ -0,0 +1,66 @@\n+/* Definitions for <stdint.h> types on systems using newlib.\n+   Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   The intention of this file is to supply definitions that work with\n+   avr-gcc's -mint8 that sets int to an 8-bit type.\n+\n+   This file is intended to yield the same results as newlib-stdint.h,\n+   but there are some differences to newlib-stdint.h:\n+\n+   - AVR is an 8-bit architecture that cannot access 16-bit values\n+     atomically, this SIG_ATOMIC_TYPE is \"char\".\n+\n+   - For the same reason, [u]int_fast8_t is defined as 8-bit type.\n+\n+*/\n+   \n+#define SIG_ATOMIC_TYPE \"char\"\n+\n+#define INT8_TYPE \"signed char\"\n+#define INT16_TYPE (INT_TYPE_SIZE == 16 ? \"short int\" : \"long int\")\n+#define INT32_TYPE (INT_TYPE_SIZE == 16 ? \"long int\" : \"long long int\")\n+#define INT64_TYPE (INT_TYPE_SIZE == 16 ? \"long long int\" : 0)\n+#define UINT8_TYPE \"unsigned char\"\n+#define UINT16_TYPE (INT_TYPE_SIZE == 16 ? \"short unsigned int\" : \"long unsigned int\")\n+#define UINT32_TYPE (INT_TYPE_SIZE == 16 ? \"long unsigned int\" : \"long long unsigned int\")\n+#define UINT64_TYPE (INT_TYPE_SIZE == 16 ? \"long long unsigned int\" : 0)\n+\n+#define INT_LEAST8_TYPE INT8_TYPE\n+#define INT_LEAST16_TYPE INT16_TYPE\n+#define INT_LEAST32_TYPE INT32_TYPE\n+#define INT_LEAST64_TYPE INT64_TYPE\n+#define UINT_LEAST8_TYPE UINT8_TYPE\n+#define UINT_LEAST16_TYPE UINT16_TYPE\n+#define UINT_LEAST32_TYPE UINT32_TYPE\n+#define UINT_LEAST64_TYPE UINT64_TYPE\n+\n+#define INT_FAST8_TYPE INT8_TYPE\n+#define INT_FAST16_TYPE (INT_TYPE_SIZE == 16 ? \"int\" : INT16_TYPE)\n+#define INT_FAST32_TYPE INT32_TYPE\n+#define INT_FAST64_TYPE INT64_TYPE\n+#define UINT_FAST8_TYPE UINT8_TYPE\n+#define UINT_FAST16_TYPE (INT_TYPE_SIZE == 16 ? \"unsigned int\" : UINT16_TYPE)\n+#define UINT_FAST32_TYPE UINT32_TYPE\n+#define UINT_FAST64_TYPE UINT64_TYPE\n+\n+#define INTPTR_TYPE PTRDIFF_TYPE\n+#ifndef UINTPTR_TYPE\n+#define UINTPTR_TYPE SIZE_TYPE\n+#endif"}]}