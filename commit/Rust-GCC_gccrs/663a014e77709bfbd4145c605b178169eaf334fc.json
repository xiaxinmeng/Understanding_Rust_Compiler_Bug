{"sha": "663a014e77709bfbd4145c605b178169eaf334fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYzYTAxNGU3NzcwOWJmYmQ0MTQ1YzYwNWIxNzgxNjllYWYzMzRmYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-08T10:19:54Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-08T10:20:29Z"}, "message": "i386: Add pack/unpack patterns for 32bit vectors [PR100637]\n\nV1SI mode shift is needed to shift 32bit operands and consequently we\nneed to implement V1SI moves and pushes.\n\n2021-07-08  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100637\n\t* config/i386/i386-expand.c (ix86_expand_sse_unpack):\n\tHandle V4QI mode.\n\t* config/i386/mmx.md (V_32): New mode iterator.\n\t(mov<V_32:mode>): Use V_32 mode iterator.\n\t(*mov<V_32:mode>_internal): Ditto.\n\t(*push<V_32:mode>2_rex64): Ditto.\n\t(*push<V_32:mode>2): Ditto.\n\t(movmisalign<V_32:mode>): Ditto.\n\t(mmx_<any_shiftrt:insn>v1si3): New insn pattern.\n\t(sse4_1_<any_extend:code>v2qiv2hi2): Ditto.\n\t(vec_unpacks_lo_v4qi): New expander.\n\t(vec_unpacks_hi_v4qi): Ditto.\n\t(vec_unpacku_lo_v4qi): Ditto.\n\t(vec_unpacku_hi_v4qi): Ditto.\n\t* config/i386/i386.h (VALID_SSE2_REG_MODE): Add V1SImode.\n\t(VALID_INT_MODE_P): Ditto.", "tree": {"sha": "ea3d44f186a1d556fc6b691fe26a37a33bcc277c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea3d44f186a1d556fc6b691fe26a37a33bcc277c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/663a014e77709bfbd4145c605b178169eaf334fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663a014e77709bfbd4145c605b178169eaf334fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663a014e77709bfbd4145c605b178169eaf334fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663a014e77709bfbd4145c605b178169eaf334fc/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "852b11da11a181df517c0348df044354ff0656d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852b11da11a181df517c0348df044354ff0656d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852b11da11a181df517c0348df044354ff0656d6"}], "stats": {"total": 122, "additions": 105, "deletions": 17}, "files": [{"sha": "65764ad88c56651216d3d49e7881c3208ef4049f", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663a014e77709bfbd4145c605b178169eaf334fc/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663a014e77709bfbd4145c605b178169eaf334fc/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=663a014e77709bfbd4145c605b178169eaf334fc", "patch": "@@ -5355,6 +5355,12 @@ ix86_expand_sse_unpack (rtx dest, rtx src, bool unsigned_p, bool high_p)\n \t  else\n \t    unpack = gen_sse4_1_sign_extendv2hiv2si2;\n \t  break;\n+\tcase E_V4QImode:\n+\t  if (unsigned_p)\n+\t    unpack = gen_sse4_1_zero_extendv2qiv2hi2;\n+\t  else\n+\t    unpack = gen_sse4_1_sign_extendv2qiv2hi2;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -5380,6 +5386,12 @@ ix86_expand_sse_unpack (rtx dest, rtx src, bool unsigned_p, bool high_p)\n \t      emit_insn (gen_mmx_lshrv1di3 (tmp, gen_lowpart (V1DImode, src),\n \t\t\t\t\t    GEN_INT (32)));\n \t      break;\n+\t    case 4:\n+\t      /* Shift higher 2 bytes to lower 2 bytes.  */\n+\t      tmp = gen_reg_rtx (V1SImode);\n+\t      emit_insn (gen_mmx_lshrv1si3 (tmp, gen_lowpart (V1SImode, src),\n+\t\t\t\t\t    GEN_INT (16)));\n+\t      break;\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n@@ -5427,6 +5439,12 @@ ix86_expand_sse_unpack (rtx dest, rtx src, bool unsigned_p, bool high_p)\n \t  else\n \t    unpack = gen_mmx_punpcklwd;\n \t  break;\n+\tcase E_V4QImode:\n+\t  if (high_p)\n+\t    unpack = gen_mmx_punpckhbw_low;\n+\t  else\n+\t    unpack = gen_mmx_punpcklbw_low;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "8c3eace56da69b6795f948475d2bf734c84dc48a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663a014e77709bfbd4145c605b178169eaf334fc/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663a014e77709bfbd4145c605b178169eaf334fc/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=663a014e77709bfbd4145c605b178169eaf334fc", "patch": "@@ -1016,7 +1016,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n-   || (MODE) == V4QImode || (MODE) == V2HImode\t\t\t\t\\\n+   || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (MODE) == V2DImode || (MODE) == DFmode)\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n@@ -1048,7 +1048,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == SImode || (MODE) == DImode\t\t\t\t\\\n    || (MODE) == CQImode || (MODE) == CHImode\t\t\t\t\\\n    || (MODE) == CSImode || (MODE) == CDImode\t\t\t\t\\\n-   || (MODE) == V4QImode || (MODE) == V2HImode\t\t\t\t\\\n+   || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (TARGET_64BIT\t\t\t\t\t\t\t\\\n        && ((MODE) == TImode || (MODE) == CTImode\t\t\t\\\n \t   || (MODE) == TFmode || (MODE) == TCmode\t\t\t\\"}, {"sha": "986b758396a4356feba0f63eb5c723631186e8e2", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 85, "deletions": 15, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663a014e77709bfbd4145c605b178169eaf334fc/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663a014e77709bfbd4145c605b178169eaf334fc/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=663a014e77709bfbd4145c605b178169eaf334fc", "patch": "@@ -57,10 +57,13 @@\n (define_mode_iterator MMXMODE24 [V4HI V2SI])\n (define_mode_iterator MMXMODE248 [V4HI V2SI V1DI])\n \n-;; All 32bit integer vector modes\n+;; All 4-byte integer vector modes\n+(define_mode_iterator V_32 [V4QI V2HI V1SI])\n+\n+;; 4-byte integer vector modes\n (define_mode_iterator VI_32 [V4QI V2HI])\n \n-;; All V2S* modes\n+;; V2S* modes\n (define_mode_iterator V2FI [V2SF V2SI])\n \n ;; Mapping from integer vector mode to mnemonic suffix\n@@ -238,18 +241,18 @@\n })\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VI_32 0 \"nonimmediate_operand\")\n-\t(match_operand:VI_32 1 \"nonimmediate_operand\"))]\n+  [(set (match_operand:V_32 0 \"nonimmediate_operand\")\n+\t(match_operand:V_32 1 \"nonimmediate_operand\"))]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_vector_move (<MODE>mode, operands);\n   DONE;\n })\n \n (define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:VI_32 0 \"nonimmediate_operand\"\n+  [(set (match_operand:V_32 0 \"nonimmediate_operand\"\n     \"=r ,m ,v,v,v,m,r,v\")\n-\t(match_operand:VI_32 1 \"general_operand\"\n+\t(match_operand:V_32 1 \"general_operand\"\n     \"rmC,rC,C,v,m,v,v,r\"))]\n   \"TARGET_SSE2 &&\n    !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -304,8 +307,8 @@\n \n ;; For TARGET_64BIT we always round up to 8 bytes.\n (define_insn \"*push<mode>2_rex64\"\n-  [(set (match_operand:VI_32 0 \"push_operand\" \"=X,X\")\n-\t(match_operand:VI_32 1 \"nonmemory_no_elim_operand\" \"rC,*v\"))]\n+  [(set (match_operand:V_32 0 \"push_operand\" \"=X,X\")\n+\t(match_operand:V_32 1 \"nonmemory_no_elim_operand\" \"rC,*v\"))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n   \"@\n    push{q}\\t%q1\n@@ -314,8 +317,8 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*push<mode>2\"\n-  [(set (match_operand:VI_32 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:VI_32 1 \"general_no_elim_operand\" \"rC*m,*v\"))]\n+  [(set (match_operand:V_32 0 \"push_operand\" \"=<,<\")\n+\t(match_operand:V_32 1 \"general_no_elim_operand\" \"rC*m,*v\"))]\n   \"TARGET_SSE2 && !TARGET_64BIT\"\n   \"@\n    push{l}\\t%1\n@@ -324,20 +327,20 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_split\n-  [(set (match_operand:VI_32 0 \"push_operand\")\n-\t(match_operand:VI_32 1 \"sse_reg_operand\"))]\n+  [(set (match_operand:V_32 0 \"push_operand\")\n+\t(match_operand:V_32 1 \"sse_reg_operand\"))]\n   \"TARGET_SSE2 && reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n     (set (match_dup 0) (match_dup 1))]\n {\n-  operands[2] = GEN_INT (-PUSH_ROUNDING (GET_MODE_SIZE (<VI_32:MODE>mode)));\n+  operands[2] = GEN_INT (-PUSH_ROUNDING (GET_MODE_SIZE (<V_32:MODE>mode)));\n   /* Preserve memory attributes. */\n   operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n })\n \n (define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:VI_32 0 \"nonimmediate_operand\")\n-\t(match_operand:VI_32 1 \"nonimmediate_operand\"))]\n+  [(set (match_operand:V_32 0 \"nonimmediate_operand\")\n+\t(match_operand:V_32 1 \"nonimmediate_operand\"))]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_vector_move (<MODE>mode, operands);\n@@ -2006,6 +2009,23 @@\n \t  (match_operand:DI 2 \"nonmemory_operand\")))]\n   \"TARGET_MMX_WITH_SSE\")\n \n+(define_insn \"mmx_<insn>v1si3\"\n+  [(set (match_operand:V1SI 0 \"register_operand\" \"=x,Yw\")\n+        (any_lshift:V1SI\n+\t  (match_operand:V1SI 1 \"register_operand\" \"0,Yw\")\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"xN,YwN\")))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   p<vshift>d\\t{%2, %0|%0, %2}\n+   vp<vshift>d\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseishft\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"<insn>v2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=x,Yw\")\n         (any_shift:V2HI\n@@ -2732,6 +2752,20 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"sse4_1_<code>v2qiv2hi2\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=Yr,*x,Yw\")\n+\t(any_extend:V2HI\n+\t  (vec_select:V2QI\n+\t    (match_operand:V4QI 1 \"register_operand\" \"Yr,*x,Yw\")\n+\t    (parallel [(const_int 0) (const_int 1)]))))]\n+  \"TARGET_SSE4_1\"\n+  \"%vpmov<extsuffix>bw\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;; Pack/unpack vector modes\n (define_mode_attr mmxpackmode\n   [(V4HI \"V8QI\") (V2SI \"V4HI\")])\n@@ -2748,6 +2782,18 @@\n   DONE;\n })\n \n+(define_expand \"vec_pack_trunc_v2hi\"\n+  [(match_operand:V4QI 0 \"register_operand\")\n+   (match_operand:V2HI 1 \"register_operand\")\n+   (match_operand:V2HI 2 \"register_operand\")]\n+  \"TARGET_SSE2\"\n+{\n+  rtx op1 = gen_lowpart (V4QImode, operands[1]);\n+  rtx op2 = gen_lowpart (V4QImode, operands[2]);\n+  ix86_expand_vec_extract_even_odd (operands[0], op1, op2, 0);\n+  DONE;\n+})\n+\n (define_mode_attr mmxunpackmode\n   [(V8QI \"V4HI\") (V4HI \"V2SI\")])\n \n@@ -2775,6 +2821,30 @@\n   \"TARGET_MMX_WITH_SSE\"\n   \"ix86_expand_sse_unpack (operands[0], operands[1], true, true); DONE;\")\n \n+(define_expand \"vec_unpacks_lo_v4qi\"\n+  [(match_operand:V2HI 0 \"register_operand\")\n+   (match_operand:V4QI 1 \"register_operand\")]\n+  \"TARGET_SSE2\"\n+  \"ix86_expand_sse_unpack (operands[0], operands[1], false, false); DONE;\")\n+\n+(define_expand \"vec_unpacks_hi_v4qi\"\n+  [(match_operand:V2HI 0 \"register_operand\")\n+   (match_operand:V4QI 1 \"register_operand\")]\n+  \"TARGET_SSE2\"\n+  \"ix86_expand_sse_unpack (operands[0], operands[1], false, true); DONE;\")\n+\n+(define_expand \"vec_unpacku_lo_v4qi\"\n+  [(match_operand:V2HI 0 \"register_operand\")\n+   (match_operand:V4QI 1 \"register_operand\")]\n+  \"TARGET_SSE2\"\n+  \"ix86_expand_sse_unpack (operands[0], operands[1], true, false); DONE;\")\n+\n+(define_expand \"vec_unpacku_hi_v4qi\"\n+  [(match_operand:V2HI 0 \"register_operand\")\n+   (match_operand:V4QI 1 \"register_operand\")]\n+  \"TARGET_SSE2\"\n+  \"ix86_expand_sse_unpack (operands[0], operands[1], true, true); DONE;\")\n+\n (define_insn \"*mmx_pinsrd\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=x,Yv\")\n         (vec_merge:V2SI"}]}