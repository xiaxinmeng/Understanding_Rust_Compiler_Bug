{"sha": "d2f2e467c03f108a407473366c950bc2371ca00a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJmMmU0NjdjMDNmMTA4YTQwNzQ3MzM2NmM5NTBiYzIzNzFjYTAwYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-08-13T18:25:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-13T18:25:06Z"}, "message": "call.c (build_x_va_arg): Support passing non-POD through ....\n\n\t* call.c (build_x_va_arg): Support passing non-POD through ....\n\t(convert_arg_to_ellipsis): Likewise.\n\nFrom-SVN: r213921", "tree": {"sha": "5e22cf22a1c702b54fc7df06c5a5de3bb7039526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e22cf22a1c702b54fc7df06c5a5de3bb7039526"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2f2e467c03f108a407473366c950bc2371ca00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f2e467c03f108a407473366c950bc2371ca00a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f2e467c03f108a407473366c950bc2371ca00a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f2e467c03f108a407473366c950bc2371ca00a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9089781ebc147de36d1d98f6021d444b6ab4c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9089781ebc147de36d1d98f6021d444b6ab4c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9089781ebc147de36d1d98f6021d444b6ab4c0a"}], "stats": {"total": 123, "additions": 90, "deletions": 33}, "files": [{"sha": "d4163b0682f71e9f812f25795bbfebb36e801dd5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -1,3 +1,8 @@\n+2014-08-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_x_va_arg): Support passing non-POD through ....\n+\t(convert_arg_to_ellipsis): Likewise.\n+\n 2014-08-13  Andrew Sutton  <andrew.n.sutton@gmail.com>\n \n \t* pt.c (lookup_template_variable): Make dependent variable templates "}, {"sha": "43bfe504d21a719da477eb8543eefa63de0b18dc", "filename": "gcc/cp/call.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -6570,19 +6570,21 @@ convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n \t with no corresponding parameter is conditionally-supported, with\n \t implementation-defined semantics.\n \n-\t We used to just warn here and do a bitwise copy, but now\n-\t cp_expr_size will abort if we try to do that.\n+\t We support it as pass-by-invisible-reference, just like a normal\n+\t value parameter.\n \n \t If the call appears in the context of a sizeof expression,\n \t it is not potentially-evaluated.  */\n       if (cp_unevaluated_operand == 0\n \t  && (type_has_nontrivial_copy_init (arg_type)\n \t      || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (arg_type)))\n \t{\n-\t  if (complain & tf_error)\n-\t    error_at (loc, \"cannot pass objects of non-trivially-copyable \"\n-\t\t      \"type %q#T through %<...%>\", arg_type);\n-\t  return error_mark_node;\n+\t  if (complain & tf_warning)\n+\t    warning (OPT_Wconditionally_supported,\n+\t\t     \"passing objects of non-trivially-copyable \"\n+\t\t     \"type %q#T through %<...%> is conditionally supported\",\n+\t\t     arg_type);\n+\t  return cp_build_addr_expr (arg, complain);\n \t}\n     }\n \n@@ -6595,7 +6597,11 @@ tree\n build_x_va_arg (source_location loc, tree expr, tree type)\n {\n   if (processing_template_decl)\n-    return build_min (VA_ARG_EXPR, type, expr);\n+    {\n+      tree r = build_min (VA_ARG_EXPR, type, expr);\n+      SET_EXPR_LOCATION (r, loc);\n+      return r;\n+    }\n \n   type = complete_type_or_else (type, NULL_TREE);\n \n@@ -6604,18 +6610,24 @@ build_x_va_arg (source_location loc, tree expr, tree type)\n \n   expr = mark_lvalue_use (expr);\n \n+  if (TREE_CODE (type) == REFERENCE_TYPE)\n+    {\n+      error (\"cannot receive reference type %qT through %<...%>\", type);\n+      return error_mark_node;\n+    }\n+\n   if (type_has_nontrivial_copy_init (type)\n-      || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type)\n-      || TREE_CODE (type) == REFERENCE_TYPE)\n-    {\n-      /* Remove reference types so we don't ICE later on.  */\n-      tree type1 = non_reference (type);\n-      /* conditionally-supported behavior [expr.call] 5.2.2/7.  */\n-      error (\"cannot receive objects of non-trivially-copyable type %q#T \"\n-\t     \"through %<...%>; \", type);\n-      expr = convert (build_pointer_type (type1), null_node);\n-      expr = cp_build_indirect_ref (expr, RO_NULL, tf_warning_or_error);\n-      return expr;\n+      || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n+    {\n+      /* conditionally-supported behavior [expr.call] 5.2.2/7.  Let's treat\n+\t it as pass by invisible reference.  */\n+      warning_at (loc, OPT_Wconditionally_supported,\n+\t\t \"receiving objects of non-trivially-copyable type %q#T \"\n+\t\t \"through %<...%> is conditionally-supported\", type);\n+\n+      tree ref = cp_build_reference_type (type, false);\n+      expr = build_va_arg (loc, expr, ref);\n+      return convert_from_reference (expr);\n     }\n \n   return build_va_arg (loc, expr, type);"}, {"sha": "5802311989814b15c91e28c61a366bb6d0a6c9f5", "filename": "gcc/doc/implement-cxx.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Fdoc%2Fimplement-cxx.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Fdoc%2Fimplement-cxx.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-cxx.texi?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -42,7 +42,9 @@ all conditionally-supported constructs that it does not support (C++0x\n @cite{Whether an argument of class type with a non-trivial copy\n constructor or destructor can be passed to ... (C++0x 5.2.2).}\n \n-Such argument passing is not supported.\n+Such argument passing is supported, using the same\n+pass-by-invisible-reference approach used for normal function\n+arguments of such types.\n \n @end itemize\n "}, {"sha": "b67d788e1b732ebf4cf4e7f33ded5cdc31dad7dd", "filename": "gcc/testsuite/g++.dg/ext/varargs1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvarargs1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvarargs1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvarargs1.C?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -0,0 +1,34 @@\n+// Test that passing an object with non-trivial copy constructor and\n+// destructor is (conditionally) supported and has sensible semantics.\n+\n+#include <stdarg.h>\n+extern \"C\" void abort();\n+\n+void *as[5];\n+int i;\n+\n+struct A {\n+  A() { as[i++] = this; }\n+  A(const A& a) {\n+    if (&a != as[i-1])\n+      abort();\n+    as[i++] = this;\n+  }\n+  ~A() {\n+    if (this != as[--i])\n+      abort();\n+  }\n+};\n+\n+void f(int i, ...) {\n+  va_list ap;\n+  va_start (ap, i);\n+  A ar = va_arg (ap, A);\n+}\n+\n+int main()\n+{\n+  f(42,A());\n+  if (i != 0)\n+    abort();\n+}"}, {"sha": "1dde2bc1d2a39dd1253250331936e35d7bbc4f9b", "filename": "gcc/testsuite/g++.dg/overload/ellipsis1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis1.C?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -1,5 +1,6 @@\n // PR c++/15142\n // Bug: We were aborting after giving a warning about passing a non-POD.\n+// { dg-options \"-Wconditionally-supported\" }\n \n struct B { \n     B() throw() { } \n@@ -14,5 +15,5 @@ struct X {\n struct S { S(...); }; \n  \n void SillyFunc() { \n-  throw S(X()); \t\t// { dg-error \"copy\" }\n+  throw S(X()); \t\t// { dg-message \"copy\" }\n } "}, {"sha": "c226e1c5e5879937292c350fe0b33cd720336645", "filename": "gcc/testsuite/g++.dg/overload/ellipsis2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis2.C?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -1,4 +1,5 @@\n // PR c++/60253\n+// { dg-options \"-Wconditionally-supported\" }\n \n struct A\n {\n@@ -10,4 +11,4 @@ struct B\n   B(...);\n };\n \n-B b(0, A());  // { dg-error \"cannot pass\" }\n+B b(0, A());  // { dg-message \"pass\" }"}, {"sha": "35deb096a6575617f9e80baa429b0dfad2be58e8", "filename": "gcc/testsuite/g++.dg/warn/var-args1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fvar-args1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fvar-args1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fvar-args1.C?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -6,6 +6,6 @@ void foo(int, ...)\n {\n     va_list va;\n     int i;\n-    i = va_arg(va, int&); /* { dg-error \"cannot receive objects\" } */\n+    i = va_arg(va, int&); /* { dg-error \"cannot receive\" } */\n }\n "}, {"sha": "badd926c2416fedc2b20327f9ba8f4bb2ebbcfac", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash63.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash63.C?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -13,4 +13,4 @@ class UnitList\n    UnitList (...);\n    };\n \n-UnitList unit_list (String(\"keV\")); // { dg-error \"\" } cannot pass non-pod\n+UnitList unit_list (String(\"keV\"));"}, {"sha": "98f78773750ca5e6fe201296fe548ac7b2759046", "filename": "gcc/testsuite/g++.old-deja/g++.other/vaarg3.C", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvaarg3.C?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do assemble  }\n-// { dg-options \"-Wno-abi\" { target arm_eabi } }\n+// { dg-options \"-Wconditionally-supported\" }\n+// { dg-options \"-Wno-abi -Wconditionally-supported\" { target arm_eabi } }\n \n // Copyright (C) 1999 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 4 Oct 1999 <nathan@acm.org>\n@@ -14,19 +15,19 @@ struct Z;   // { dg-message \"forward decl\" }\n void fn1(va_list args)\n {\n   int i = va_arg (args, int);\n-  Y x = va_arg (args, Y);         // { dg-error \"cannot receive\" }\n-  Y y = va_arg (args, struct Y);  // { dg-error \"cannot receive\" }\n+  Y x = va_arg (args, Y);         // { dg-message \"receiv\" }\n+  Y y = va_arg (args, struct Y);  // { dg-message \"receiv\" }\n   int &r = va_arg (args, int &);  // { dg-error \"cannot receive\" }\n   \n   Z z1 = va_arg (args, Z);        // { dg-error \"incomplete\" } \n   const Z &z2 = va_arg (args, Z);       // { dg-error \"incomplete\" } \n \n   va_arg (args, char);    // { dg-warning \"promote\" } \n-  // { dg-message \"should pass\" \"pass\" { target *-*-* } 24 }\n-  // { dg-message \"abort\" \"abort\" { target *-*-* } 24 }\n+  // { dg-message \"should pass\" \"pass\" { target *-*-* } 25 }\n+  // { dg-message \"abort\" \"abort\" { target *-*-* } 25 }\n   va_arg (args, int []);  // { dg-error \"array with unspecified bounds\" } promote\n   va_arg (args, int ());  // { dg-warning \"promoted\" } promote\n-  // { dg-message \"abort\" \"abort\" { target *-*-* } 28 }\n+  // { dg-message \"abort\" \"abort\" { target *-*-* } 29 }\n   va_arg (args, bool);    // { dg-warning \"promote\" \"promote\" } \n-  // { dg-message \"abort\" \"abort\" { target *-*-* } 30 }\n+  // { dg-message \"abort\" \"abort\" { target *-*-* } 31 }\n }"}, {"sha": "ee84db9b805107c2164d18f30ee69420ae6016ae", "filename": "gcc/testsuite/g++.old-deja/g++.pt/vaarg3.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f2e467c03f108a407473366c950bc2371ca00a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C?ref=d2f2e467c03f108a407473366c950bc2371ca00a", "patch": "@@ -1,4 +1,5 @@\n // { dg-do assemble  }\n+// { dg-options \"-Wconditionally-supported\" }\n // Copyright (C) 2000 Free Software Foundation\n // Contributed by Nathan Sidwell 22 June 2000 <nathan@codesourcery.com>\n \n@@ -14,14 +15,14 @@ void PrintArgs (Type somearg, ...)\n va_list argp;\n va_start (argp, somearg);\n Type value;\n-value = va_arg (argp, Type); // { dg-error \"cannot receive\" } cannot pass non-POD\n+value = va_arg (argp, Type); // { dg-message \"receiv\" } cannot pass non-POD\n va_end (argp);\n }\n \n int main (void)\n {\n A dummy;\n-PrintArgs (dummy, dummy); // { dg-error \"cannot pass\" } cannot pass non-POD\n-// { dg-message \"required\" \"inst\" { target *-*-* } 24 }\n+PrintArgs (dummy, dummy); // { dg-message \"pass\" } cannot pass non-POD\n+// { dg-message \"required\" \"inst\" { target *-*-* } 25 }\n return 0;\n }"}]}