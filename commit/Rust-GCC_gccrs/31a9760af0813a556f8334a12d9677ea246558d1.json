{"sha": "31a9760af0813a556f8334a12d9677ea246558d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhOTc2MGFmMDgxM2E1NTZmODMzNGExMmQ5Njc3ZWEyNDY1NThkMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-07-03T14:35:13Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-07-03T14:35:13Z"}, "message": "re PR tree-optimization/26251 (code size increase with -Os)\n\n\n\tPR tree-optimization/26251\n\t* tree-ssa-threadupdate.c (redirection_block_p): New function.\n\t(thread_block): When optimizing for size refuse to thread jumps\n\tthat would require duplication of blocks other than redirection\n\tblocks.\n\nFrom-SVN: r115150", "tree": {"sha": "b0eab82eb3b2625f5f2f4f8fb7935ccab79b7d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0eab82eb3b2625f5f2f4f8fb7935ccab79b7d8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31a9760af0813a556f8334a12d9677ea246558d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a9760af0813a556f8334a12d9677ea246558d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31a9760af0813a556f8334a12d9677ea246558d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a9760af0813a556f8334a12d9677ea246558d1/comments", "author": null, "committer": null, "parents": [{"sha": "3a3977a8101927bb02c37dd42f20df98fbce8db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3977a8101927bb02c37dd42f20df98fbce8db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3977a8101927bb02c37dd42f20df98fbce8db4"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "55a43e382e19c5ca804ed96cf4091f31c80e2cc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a9760af0813a556f8334a12d9677ea246558d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a9760af0813a556f8334a12d9677ea246558d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31a9760af0813a556f8334a12d9677ea246558d1", "patch": "@@ -1,3 +1,11 @@\n+2006-07-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR tree-optimization/26251\n+\t* tree-ssa-threadupdate.c (redirection_block_p): New function.\n+\t(thread_block): When optimizing for size refuse to thread jumps\n+\tthat would require duplication of blocks other than redirection\n+\tblocks.\n+\n 2006-07-03  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure.ac: Fix thinko in previous check-in."}, {"sha": "0697ae4648eb3517811e326637d3ab5b00c1af52", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a9760af0813a556f8334a12d9677ea246558d1/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a9760af0813a556f8334a12d9677ea246558d1/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=31a9760af0813a556f8334a12d9677ea246558d1", "patch": "@@ -1,5 +1,5 @@\n /* Thread edges through blocks and update the control flow and SSA graphs.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -652,6 +652,33 @@ redirect_edges (void **slot, void *data)\n   return 1;\n }\n \n+/* Return true if this block has no executable statements other than\n+   a simple ctrl flow instruction.  When the number of outgoing edges\n+   is one, this is equivalent to a \"forwarder\" block.  */\n+\n+static bool\n+redirection_block_p (basic_block bb)\n+{\n+  block_stmt_iterator bsi;\n+\n+  /* Advance to the first executable statement.  */\n+  bsi = bsi_start (bb);\n+  while (!bsi_end_p (bsi)\n+          && (TREE_CODE (bsi_stmt (bsi)) == LABEL_EXPR\n+              || IS_EMPTY_STMT (bsi_stmt (bsi))))\n+    bsi_next (&bsi);\n+\n+  /* Check if this is an empty block.  */\n+  if (bsi_end_p (bsi))\n+    return true;\n+\n+  /* Test that we've reached the terminating control statement.  */\n+  return bsi_stmt (bsi)\n+\t && (TREE_CODE (bsi_stmt (bsi)) == COND_EXPR\n+\t     || TREE_CODE (bsi_stmt (bsi)) == GOTO_EXPR\n+\t     || TREE_CODE (bsi_stmt (bsi)) == SWITCH_EXPR);\n+}\n+\n /* BB is a block which ends with a COND_EXPR or SWITCH_EXPR and when BB\n    is reached via one or more specific incoming edges, we know which\n    outgoing edge from BB will be traversed.\n@@ -699,6 +726,17 @@ thread_block (basic_block bb)\n      be threaded to a duplicate of BB.  */\n   bool all = true;\n \n+  /* If optimizing for size, only thread this block if we don't have\n+     to duplicate it or it's an otherwise empty redirection block.  */\n+  if (optimize_size\n+      && EDGE_COUNT (bb->preds) > 1\n+      && !redirection_block_p (bb))\n+    {\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\te->aux = NULL;\n+      return false;\n+    }\n+\n   /* To avoid scanning a linear array for the element we need we instead\n      use a hash table.  For normal code there should be no noticeable\n      difference.  However, if we have a block with a large number of"}]}