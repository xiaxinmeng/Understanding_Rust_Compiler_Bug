{"sha": "d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmMjQ2MGExYmJjZjZiZTM0MTRhYTI2ZTc5ZmE0YTNmYmIzNzE2Yw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2011-01-18T20:13:56Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2011-01-18T20:13:56Z"}, "message": "re PR tree-optimization/47179 (SPU: errno misoptimization around malloc call)\n\n\tPR tree-optimization/47179\n\t* config/spu/spu.c (spu_ref_may_alias_errno): New function.\n\t(TARGET_REF_MAY_ALIAS_ERRNO): Define.\n\nFrom-SVN: r168961", "tree": {"sha": "d7ddfb12047858f67b8fa8a0f95d6b4b596069f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7ddfb12047858f67b8fa8a0f95d6b4b596069f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c/comments", "author": null, "committer": null, "parents": [{"sha": "842627b60624602d0c486f8470e83c0d8039bf60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842627b60624602d0c486f8470e83c0d8039bf60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842627b60624602d0c486f8470e83c0d8039bf60"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "00c85f8e362670368ad37d0fde7c1afb41d78741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c", "patch": "@@ -1,3 +1,9 @@\n+2011-01-18  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\tPR tree-optimization/47179\n+\t* config/spu/spu.c (spu_ref_may_alias_errno): New function.\n+\t(TARGET_REF_MAY_ALIAS_ERRNO): Define.\n+\n 2011-01-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/47216"}, {"sha": "324ac4df21c425671824227c0b74ed8ca22bc7ba", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=d4f2460a1bbcf6be3414aa26e79fa4a3fbb3716c", "patch": "@@ -230,6 +230,7 @@ static void spu_unique_section (tree, int);\n static rtx spu_expand_load (rtx, rtx, rtx, int);\n static void spu_trampoline_init (rtx, tree, rtx);\n static void spu_conditional_register_usage (void);\n+static bool spu_ref_may_alias_errno (ao_ref *);\n \n /* Which instruction set architecture to use.  */\n int spu_arch;\n@@ -491,6 +492,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE spu_conditional_register_usage\n \n+#undef TARGET_REF_MAY_ALIAS_ERRNO\n+#define TARGET_REF_MAY_ALIAS_ERRNO spu_ref_may_alias_errno\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n static void\n@@ -7150,4 +7154,28 @@ spu_function_profiler (FILE * file, int labelno ATTRIBUTE_UNUSED)\n   fprintf (file, \"brsl $75,  _mcount\\n\");\n }\n \n+/* Implement targetm.ref_may_alias_errno.  */\n+static bool\n+spu_ref_may_alias_errno (ao_ref *ref)\n+{\n+  tree base = ao_ref_base (ref);\n+\n+  /* With SPU newlib, errno is defined as something like\n+         _impure_data._errno\n+     The default implementation of this target macro does not\n+     recognize such expressions, so special-code for it here.  */\n+\n+  if (TREE_CODE (base) == VAR_DECL\n+      && !TREE_STATIC (base)\n+      && DECL_EXTERNAL (base)\n+      && TREE_CODE (TREE_TYPE (base)) == RECORD_TYPE\n+      && strcmp (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (base)),\n+\t\t \"_impure_data\") == 0\n+      /* _errno is the first member of _impure_data.  */\n+      && ref->offset == 0)\n+    return true;\n+\n+  return default_ref_may_alias_errno (ref);\n+}\n+\n #include \"gt-spu.h\""}]}