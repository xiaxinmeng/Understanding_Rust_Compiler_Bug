{"sha": "199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5YWNmNmNmYmMzZmRkN2VjYTk5MGM4MTc3NTJmMzJiMTdjN2I0ZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:45:23Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:45:23Z"}, "message": "[arm] Add new isa quirk bit for Cortex-M3 ldrd issue.\n\nWith the new data structures it is trivial to add a new field and we\naren't (too) limited as to the number we have.  This patch adds a new\nbit to describe the need for a particular compiler behaviour\nmodification: in this case a quirk in the cortex-m3.\n\n\t* arm-isa.h (enum isa_feature): Add isa_quirk_cm3_ldrd.\n\t(ISA_ALL_QUIRKS): New macro.\n\t* arm-cores.def (cortex-m3): Add isa_quirk_cm3_ldrd to isa feature list.\n\t* arm.c (isa_quirkbits): New feature-list bitmap.\n\t(arm_configure_build_target): Ignore quirk bits when comparing an\n\tarchitecture feature list with a CPU feature list.\n\t(arm_option_override): Initialize_isa_quirkbits.  If the user has\n\tnot specified -m[no-]fix-cortex-m3-ldrd, automatically enable the\n\tfeature if isa_quirk_cm3_ldrd appears in the isa feature list.\n\nFrom-SVN: r243701", "tree": {"sha": "cb5e285f3080e0da0fe01a7a67f4494f941bf3e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb5e285f3080e0da0fe01a7a67f4494f941bf3e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199acf6cfbc3fdd7eca990c817752f32b17c7b4d/comments", "author": null, "committer": null, "parents": [{"sha": "d2d19167c3a5f46af1726a6b79a6f4bc586e788a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d19167c3a5f46af1726a6b79a6f4bc586e788a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d19167c3a5f46af1726a6b79a6f4bc586e788a"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "659439c85c369ac54f7df5f10a12a6866503a434", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199acf6cfbc3fdd7eca990c817752f32b17c7b4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199acf6cfbc3fdd7eca990c817752f32b17c7b4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "patch": "@@ -1,3 +1,15 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-isa.h (enum isa_feature): Add isa_quirk_cm3_ldrd.\n+\t(ISA_ALL_QUIRKS): New macro.\n+\t* arm-cores.def (cortex-m3): Add isa_quirk_cm3_ldrd to isa feature list.\n+\t* arm.c (isa_quirkbits): New feature-list bitmap.\n+\t(arm_configure_build_target): Ignore quirk bits when comparing an\n+\tarchitecture feature list with a CPU feature list.\n+\t(arm_option_override): Initialize_isa_quirkbits.  If the user has\n+\tnot specified -m[no-]fix-cortex-m3-ldrd, automatically enable the\n+\tfeature if isa_quirk_cm3_ldrd appears in the isa feature list.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (arm_option_override): Use arm_active_target as source of"}, {"sha": "7f64a1f84c85de2c1fa56e5ad08584854366679c", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199acf6cfbc3fdd7eca990c817752f32b17c7b4d/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199acf6cfbc3fdd7eca990c817752f32b17c7b4d/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "patch": "@@ -160,7 +160,7 @@ ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv\n ARM_CORE(\"cortex-r8\",\t\tcortexr8, cortexr7,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), ARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\tTF_LDSCHED, \t  7EM,\tISA_FEAT(ISA_ARMv7em) ISA_FEAT(isa_quirk_no_volatile_ce), ARM_FSET_MAKE_CPU1 (FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM), cortex_m7)\n ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\tTF_LDSCHED, \t  7EM,\tISA_FEAT(ISA_ARMv7em), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM), v7m)\n-ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\tTF_LDSCHED, \t  7M,\tISA_FEAT(ISA_ARMv7m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M), v7m)\n+ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\tTF_LDSCHED, \t  7M,\tISA_FEAT(ISA_ARMv7m) ISA_FEAT(isa_quirk_cm3_ldrd), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M), v7m)\n ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), marvell_pj4)\n \n /* V7 big.LITTLE implementations */"}, {"sha": "c6be4d810a0274374a7d204dd1ff3f05a22fab32", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199acf6cfbc3fdd7eca990c817752f32b17c7b4d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199acf6cfbc3fdd7eca990c817752f32b17c7b4d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=199acf6cfbc3fdd7eca990c817752f32b17c7b4d", "patch": "@@ -3056,6 +3056,7 @@ arm_initialize_isa (sbitmap isa, const enum isa_feature *isa_bits)\n }\n \n static sbitmap isa_fpubits;\n+static sbitmap isa_quirkbits;\n \n /* Configure a build target TARGET from the user-specified options OPTS and\n    OPTS_SET.  If WARN_COMPATIBLE, emit a diagnostic if both the CPU and\n@@ -3097,6 +3098,8 @@ arm_configure_build_target (struct arm_build_target *target,\n \n \t  arm_initialize_isa (cpu_isa, arm_selected_cpu->isa_bits);\n \t  bitmap_xor (cpu_isa, cpu_isa, target->isa);\n+\t  /* Ignore any bits that are quirk bits.  */\n+\t  bitmap_and_compl (cpu_isa, cpu_isa, isa_quirkbits);\n \t  /* Ignore (for now) any bits that might be set by -mfpu.  */\n \t  bitmap_and_compl (cpu_isa, cpu_isa, isa_fpubits);\n \n@@ -3263,6 +3266,10 @@ static void\n arm_option_override (void)\n {\n   static const enum isa_feature fpu_bitlist[] = { ISA_ALL_FPU, isa_nobit };\n+  static const enum isa_feature quirk_bitlist[] = { ISA_ALL_QUIRKS, isa_nobit};\n+\n+  isa_quirkbits = sbitmap_alloc (isa_num_bits);\n+  arm_initialize_isa (isa_quirkbits, quirk_bitlist);\n \n   isa_fpubits = sbitmap_alloc (isa_num_bits);\n   arm_initialize_isa (isa_fpubits, fpu_bitlist);\n@@ -3510,7 +3517,7 @@ arm_option_override (void)\n   /* Enable -mfix-cortex-m3-ldrd by default for Cortex-M3 cores.  */\n   if (fix_cm3_ldrd == 2)\n     {\n-      if (arm_selected_cpu->core == TARGET_CPU_cortexm3)\n+      if (bitmap_bit_p (arm_active_target.isa, isa_quirk_cm3_ldrd))\n \tfix_cm3_ldrd = 1;\n       else\n \tfix_cm3_ldrd = 0;"}]}