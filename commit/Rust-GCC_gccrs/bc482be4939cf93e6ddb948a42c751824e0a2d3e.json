{"sha": "bc482be4939cf93e6ddb948a42c751824e0a2d3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM0ODJiZTQ5MzljZjkzZTZkZGI5NDhhNDJjNzUxODI0ZTBhMmQzZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-30T21:39:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-30T21:39:42Z"}, "message": "expr.c (array_ref_element_size): Force aligned_size back to sizetype.\n\n        * expr.c (array_ref_element_size): Force aligned_size back to\n        sizetype.\n        (component_ref_field_offset): Similarly for aligned_offset.\n        * tree.c (recompute_tree_invarant_for_addr_expr): Mark raw\n        low-bound, element-size, field-offset fields rather than\n        computed values.\n\nFrom-SVN: r86803", "tree": {"sha": "8fba8975eb49eb9a3a44b03ca04682c55bad8378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fba8975eb49eb9a3a44b03ca04682c55bad8378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc482be4939cf93e6ddb948a42c751824e0a2d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc482be4939cf93e6ddb948a42c751824e0a2d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc482be4939cf93e6ddb948a42c751824e0a2d3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc482be4939cf93e6ddb948a42c751824e0a2d3e/comments", "author": null, "committer": null, "parents": [{"sha": "625be2863598fcaa489d1372ee825aff85ea7cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625be2863598fcaa489d1372ee825aff85ea7cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625be2863598fcaa489d1372ee825aff85ea7cec"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "00e61c6c32aaec3b6d21d880c88dbb76c11096d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc482be4939cf93e6ddb948a42c751824e0a2d3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc482be4939cf93e6ddb948a42c751824e0a2d3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc482be4939cf93e6ddb948a42c751824e0a2d3e", "patch": "@@ -1,3 +1,12 @@\n+2004-08-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (array_ref_element_size): Force aligned_size back to\n+\tsizetype.\n+\t(component_ref_field_offset): Similarly for aligned_offset.\n+\t* tree.c (recompute_tree_invarant_for_addr_expr): Mark raw\n+\tlow-bound, element-size, field-offset fields rather than\n+\tcomputed values.\n+\n 2004-08-30  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-parse.in (parmlist_or_identifiers_1): Remove unreachable and"}, {"sha": "ca19b7a62c130cae9ee40db3baac8393c4660c4e", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc482be4939cf93e6ddb948a42c751824e0a2d3e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc482be4939cf93e6ddb948a42c751824e0a2d3e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bc482be4939cf93e6ddb948a42c751824e0a2d3e", "patch": "@@ -5481,8 +5481,14 @@ array_ref_element_size (tree exp)\n   /* If a size was specified in the ARRAY_REF, it's the size measured\n      in alignment units of the element type.  So multiply by that value.  */\n   if (aligned_size)\n-    return size_binop (MULT_EXPR, aligned_size,\n-\t\t       size_int (TYPE_ALIGN (elmt_type) / BITS_PER_UNIT));\n+    {\n+      /* ??? tree_ssa_useless_type_conversion will eliminate casts to\n+\t sizetype from another type of the same width and signedness.  */\n+      if (TREE_TYPE (aligned_size) != sizetype)\n+\taligned_size = fold_convert (sizetype, aligned_size);\n+      return size_binop (MULT_EXPR, aligned_size,\n+\t\t         size_int (TYPE_ALIGN (elmt_type) / BITS_PER_UNIT));\n+    }\n \n   /* Otherwise, take the size from that of the element type.  Substitute\n      any PLACEHOLDER_EXPR that we have.  */\n@@ -5541,8 +5547,14 @@ component_ref_field_offset (tree exp)\n      in units of DECL_OFFSET_ALIGN / BITS_PER_UNIT.  So multiply by that\n      value.  */\n   if (aligned_offset)\n-    return size_binop (MULT_EXPR, aligned_offset,\n-\t\t       size_int (DECL_OFFSET_ALIGN (field) / BITS_PER_UNIT));\n+    {\n+      /* ??? tree_ssa_useless_type_conversion will eliminate casts to\n+\t sizetype from another type of the same width and signedness.  */\n+      if (TREE_TYPE (aligned_offset) != sizetype)\n+\taligned_offset = fold_convert (sizetype, aligned_offset);\n+      return size_binop (MULT_EXPR, aligned_offset,\n+\t\t         size_int (DECL_OFFSET_ALIGN (field) / BITS_PER_UNIT));\n+    }\n \n   /* Otherwise, take the offset from that of the field.  Substitute\n      any PLACEHOLDER_EXPR that we have.  */"}, {"sha": "90e77ab273591577a2eba28d2f8d97fd4b9eff1d", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc482be4939cf93e6ddb948a42c751824e0a2d3e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc482be4939cf93e6ddb948a42c751824e0a2d3e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bc482be4939cf93e6ddb948a42c751824e0a2d3e", "patch": "@@ -2252,15 +2252,20 @@ do { tree _node = (NODE); \\\n \t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (node, 0))) == ARRAY_TYPE)\n \t{\n \t  UPDATE_TITCSE (TREE_OPERAND (node, 1));\n-\t  UPDATE_TITCSE (array_ref_low_bound (node));\n-\t  UPDATE_TITCSE (array_ref_element_size (node));\n+\t  if (TREE_OPERAND (node, 2))\n+\t    UPDATE_TITCSE (TREE_OPERAND (node, 2));\n+\t  if (TREE_OPERAND (node, 3))\n+\t    UPDATE_TITCSE (TREE_OPERAND (node, 3));\n \t}\n       /* Likewise, just because this is a COMPONENT_REF doesn't mean we have a\n \t FIELD_DECL, apparently.  The G++ front end can put something else\n \t there, at least temporarily.  */\n       else if (TREE_CODE (node) == COMPONENT_REF\n \t       && TREE_CODE (TREE_OPERAND (node, 1)) == FIELD_DECL)\n-\tUPDATE_TITCSE (component_ref_field_offset (node));\n+\t{\n+\t  if (TREE_OPERAND (node, 2))\n+\t    UPDATE_TITCSE (TREE_OPERAND (node, 2));\n+\t}\n       else if (TREE_CODE (node) == BIT_FIELD_REF)\n \tUPDATE_TITCSE (TREE_OPERAND (node, 2));\n     }"}]}