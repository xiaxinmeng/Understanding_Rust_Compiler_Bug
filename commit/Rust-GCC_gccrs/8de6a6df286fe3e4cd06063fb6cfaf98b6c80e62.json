{"sha": "8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlNmE2ZGYyODZmZTNlNGNkMDYwNjNmYjZjZmFmOThiNmM4MGU2Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-01-06T14:16:00Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-06T14:16:00Z"}, "message": "libstdc++-v3-dg.exp (libstdc++-v3-init, [...]): Additionally handle files one level deeper in glob patterns.\n\n\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init,\n\tlibstdc++-v3-list-sourcefiles): Additionally handle files one\n\tlevel deeper in glob patterns.\n\n\t* testsuite/27_io/istream_extractor_arith.cc: Delete, split...\n\t* testsuite/27_io/istream_extractor_arith/01.cc,\n\ttestsuite/27_io/istream_extractor_arith/02.cc,\n\ttestsuite/27_io/istream_extractor_arith/03.cc,\n\ttestsuite/27_io/istream_extractor_arith/06.cc,\n\ttestsuite/27_io/istream_extractor_arith/07.cc,\n\ttestsuite/27_io/istream_extractor_arith/08.cc,\n\ttestsuite/27_io/istream_extractor_arith/09.cc,\n\ttestsuite/27_io/istream_extractor_arith/10.cc,\n\ttestsuite/27_io/istream_extractor_arith/11.cc,\n\ttestsuite/27_io/istream_extractor_arith/12.cc,\n\ttestsuite/27_io/istream_extractor_arith/13.cc: ... to new files.\n\t* testsuite/27_io/istream_extractor_arith/12.cc: Add XFAIL for\n\tsparc*-*-solaris2*.\n\nFrom-SVN: r60934", "tree": {"sha": "05a0d4831101001cee4b2df31b36408eac43c777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05a0d4831101001cee4b2df31b36408eac43c777"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/comments", "author": null, "committer": null, "parents": [{"sha": "efbd757f784fb3b08f1977e9b8763aa5f56ef658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbd757f784fb3b08f1977e9b8763aa5f56ef658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efbd757f784fb3b08f1977e9b8763aa5f56ef658"}], "stats": {"total": 1739, "additions": 1125, "deletions": 614}, "files": [{"sha": "1ea147cd224a113c0be4eef2afa9317c571776e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -1,3 +1,24 @@\n+2003-01-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init,\n+\tlibstdc++-v3-list-sourcefiles): Additionally handle files one\n+\tlevel deeper in glob patterns.\n+\t\n+\t* testsuite/27_io/istream_extractor_arith.cc: Delete, split...\n+\t* testsuite/27_io/istream_extractor_arith/01.cc,\n+\ttestsuite/27_io/istream_extractor_arith/02.cc,\n+\ttestsuite/27_io/istream_extractor_arith/03.cc,\n+\ttestsuite/27_io/istream_extractor_arith/06.cc,\n+\ttestsuite/27_io/istream_extractor_arith/07.cc,\n+\ttestsuite/27_io/istream_extractor_arith/08.cc,\n+\ttestsuite/27_io/istream_extractor_arith/09.cc,\n+\ttestsuite/27_io/istream_extractor_arith/10.cc,\n+\ttestsuite/27_io/istream_extractor_arith/11.cc,\n+\ttestsuite/27_io/istream_extractor_arith/12.cc,\n+\ttestsuite/27_io/istream_extractor_arith/13.cc: ... to new files.\n+\t* testsuite/27_io/istream_extractor_arith/12.cc: Add XFAIL for\n+\tsparc*-*-solaris2*.\n+\n 2003-01-05  Paolo Carlini <pcarlini@unitus.it>\n \n \tPR libstdc++/9168"}, {"sha": "c184b3fade203d2a811fdd04856c2668b381375c", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith.cc", "status": "removed", "additions": 0, "deletions": 611, "changes": 611, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbd757f784fb3b08f1977e9b8763aa5f56ef658/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbd757f784fb3b08f1977e9b8763aa5f56ef658/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc?ref=efbd757f784fb3b08f1977e9b8763aa5f56ef658", "patch": "@@ -1,611 +0,0 @@\n-// 1999-04-12 bkoz\n-\n-// Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.6.1.2.2 arithmetic extractors\n-\n-#include <cstdio> // for printf\n-#include <istream>\n-#include <ostream>\n-#include <sstream>\n-#include <locale>\n-#include <testsuite_hooks.h>\n-\n-std::string str_01;\n-std::string str_02(\"true false 0 1 110001\");\n-std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n-std::string str_04(\"0123\");\n-\n-std::stringbuf isbuf_01(std::ios_base::in);\n-std::stringbuf isbuf_02(str_02, std::ios_base::in);\n-std::stringbuf isbuf_03(str_03, std::ios_base::in);\n-std::stringbuf isbuf_04(str_04, std::ios_base::in);\n-\n-std::istream is_01(NULL);\n-std::istream is_02(&isbuf_02);\n-std::istream is_03(&isbuf_03);\n-std::istream is_04(&isbuf_04);\n-std::stringstream ss_01(str_01);\n- \n-// minimal sanity check\n-bool test01() {\n-\n-  bool test = true;\n-\n-  // Integral Types:\n-  bool \t\t\tb1  = false;\n-  bool \t\t\tb2  = false;\n-  short \t\ts1  = 0;\n-  int\t \t\ti1  = 0;\n-  long\t \t\tl1  = 0;\n-  unsigned short \tus1 = 0;\n-  unsigned int \t\tui1 = 0;\n-  unsigned long \tul1 = 0;\n-\n-  // Floating-point Types:\n-  float \t\tf1  = 0;\n-  double \t\td1  = 0;\n-  long double \t\tld1 = 0;\n-\n-  // process alphanumeric versions of bool values\n-  std::ios_base::fmtflags fmt = is_02.flags();\n-  bool testfmt = fmt & std::ios_base::boolalpha;\n-  is_02.setf(std::ios_base::boolalpha);\n-  fmt = is_02.flags();\n-  testfmt = fmt & std::ios_base::boolalpha;\n-  is_02 >> b1;\n-  VERIFY( b1 == 1 );\n-  is_02 >> b1;\n-  VERIFY( b1 == 0 );\n-\n-  // process numeric versions of of bool values\n-  is_02.unsetf(std::ios_base::boolalpha);\n-  fmt = is_02.flags();\n-  testfmt = fmt & std::ios_base::boolalpha;\n-  is_02 >> b1;\n-  VERIFY( b1 == 0 );\n-  is_02 >> b1;\n-  VERIFY( b1 == 1 );\n-\n-  // is_03 == \"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\"\n-  is_03 >> l1;\n-  VERIFY( l1 == -19999999 );\n-  is_03 >> ul1;\n-  VERIFY( ul1 == 777777 );\n-  is_03 >> i1;\n-  VERIFY( i1 == -234234 );\n-  is_03 >> ui1;\n-  VERIFY( ui1 == 233 );\n-  is_03 >> s1;\n-  VERIFY( s1 == -234 );\n-  is_03 >> us1;\n-  VERIFY( us1 == 33 );\n-  is_03 >> b1;\n-  VERIFY( b1 == 1 );\n-  is_03 >> ld1;\n-  VERIFY( ld1 == 66300.25 );\n-  is_03 >> d1;\n-  VERIFY( d1 == .315 );\n-  is_03 >> f1;\n-  VERIFY( f1 == 1.5 );\n-\n-  is_04 >> std::hex >> i1;\n-  std::printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n-  VERIFY( i1 == 0x123 );\n-  std::printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n-\n-  // test void pointers\n-  int i = 55;\n-  void* po = &i;\n-  void* pi;\n-\n-  ss_01 << po;\n-  ss_01 >> pi;\n-  std::printf (\"%x %x\\n\", pi, po);\n-  VERIFY( po == pi );\n-  \n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n-}\n-\n-// elaborated test for ints\n-bool test02() {\n-\n-  bool test = true;\n-  const std::string str_01(\"20000AB\");\n-  std::stringbuf strb_01(str_01, std::ios_base::in);\n-  std::istream is(&strb_01);\n-\n-  int n = 15;\n-  is >> n;\n-  VERIFY( n == 20000 );\n-  char c = is.peek();\n-  VERIFY( c == 65 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n-}\n-\n-bool test03()\n-{\n-  std::stringbuf sbuf;\n-  std::istream istr(&sbuf);\n-  std::ostream ostr(&sbuf);\n-\n-  bool test = true;\n-  long l01;\n-  ostr <<  \"12220101\";\n-  istr >>  l01; // _M_in_end set completely incorrectly here.\n-  VERIFY( l01 == 12220101 );\n-  VERIFY( istr.rdstate() == std::ios_base::eofbit );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-\n-  return test;\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00081.html\n-// Jim Parsons\n-void test06()\n-{\n-  // default locale, grouping is turned off\n-  bool test = true;\n-  unsigned int h4, h3, h2;\n-  char c;\n-  std::string s(\"205,199,144\");\n-  std::istringstream is(s);\n-  \n-  is >> h4; // 205\n-  VERIFY( h4 == 205 );\n-  is >> c; // ','\n-  VERIFY( c == ',' );\n-\n-  is >> h4; // 199\n-  VERIFY( h4 == 199 );\n-  is >> c; // ','\n-  VERIFY( c == ',' );\n-\n-  is >> h4; // 144\n-  VERIFY( is.rdstate() == std::ios_base::eofbit );\n-  VERIFY( h4 == 144 );\n-  is >> c; // EOF\n-  VERIFY( c == ',' );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-namespace std {\n-  class test_numpunct1 : public numpunct<char>\n-  {\n-  protected:\n-    string\n-    do_grouping() const \n-    { return string(1, '\\003'); }\n-  };\n-} // namespace std\n-\n-void test07()\n-{\n-  // manufactured locale, grouping is turned on\n-  bool test = true;\n-  unsigned int h4 = 0, h3 = 0, h2 = 0;\n-  float f1 = 0.0;\n-  const std::string s1(\"205,199 23,445.25 1,024,365 123,22,24\");\n-  std::istringstream is(s1);\n-  is.imbue(std::locale(std::locale(), new std::test_numpunct1));  \n-\n-  // Basic operation.\n-  is >> h4; \n-  VERIFY( h4 == 205199 );\n-  VERIFY( is.good() );\n-\n-  is.clear();\n-  is >> f1; \n-  VERIFY( f1 == 23445.25 );\n-  VERIFY( is.good() );\n-\n-  is.clear();\n-  is >> h3; \n-  VERIFY( h3 == 1024365 );\n-  VERIFY( is.good() );\n-\n-  is.clear();\n-  is >> h2; \n-  VERIFY( h2 == 0 );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n-\n-  // Stress tests for explicit errors in grouping corner cases.  The\n-  // validity of these tests and results have been hammered out in\n-  // private email between bkoz and ncm between Jan 25 and Jan 27, 2000.\n-  // Thanks nate -- benjamin\n-  const std::string s2(\",111 4,,4 0.25,345 5..25 156,, 1,000000 1000000 1234,567\");\n-  h3 = h4 = h2 = 0;\n-  f1 = 0.0;\n-  const char c_control = '?';\n-  char c = c_control;\n-  is.clear();\n-  is.str(s2);\n-\n-  is >> h4; \n-  VERIFY( h4 == 0 );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n-  is.clear();\n-  is >> c;\n-  VERIFY( c == ',' );\n-  VERIFY( is.good() );\n-\n-  is.ignore(3);\n-  is >> f1; \n-  VERIFY( f1 == 0.0 );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n-  is.clear();\n-  is >> c;\n-  VERIFY( c == ',' );\n-  is >> c;\n-  VERIFY( c == '4' );\n-  VERIFY( is.good() );\n-\n-  is >> f1; \n-  VERIFY( f1 == 0.25 );\n-  VERIFY( is.good() );\n-  is >> c;\n-  VERIFY( c == ',' );\n-  is >> h2;\n-  VERIFY( h2 == 345 );\n-  VERIFY( is.good() );\n-  f1 = 0.0;\n-  h2 = 0;\n-\n-  is >> f1; \n-  VERIFY( f1 == 5.0 );\n-  VERIFY( is.good() );\n-  is >> f1; \n-  VERIFY( f1 == .25 );\n-  VERIFY( is.good() );\n-\n-  is >> h3; \n-  VERIFY( h3 == 0 );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n-  is.clear();\n-  is >> c;\n-  VERIFY( c == ',' ); // second one\n-  VERIFY( is.good() );\n-\n-  is >> h2; \n-  VERIFY( h2 == 0 );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n-  is.clear();\n-\n-  is >> h2; \n-  VERIFY( h2 == 1000000 );\n-  VERIFY( is.good() );\n-  h2 = 0;\n-\n-  is >> h2; \n-  VERIFY( h2 == 0 );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n-  is.clear();\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-namespace std {\n-  class test_numpunct2 : public numpunct<char>\n-  {\n-  protected:\n-    string\n-    do_grouping() const \n-    { return string(\"\\002\\003\"); }\n-  };\n-} // namespace std\n-\n-void test08()\n-{\n-  // manufactured locale, grouping is turned on\n-  bool test = true;\n-  unsigned int h4 = 0, h3 = 0, h2 = 0;\n-  float f1 = 0.0;\n-  const std::string s1(\"1,22 205,19 22,123,22\");\n-  const std::string s2(\"1,220 2050,19 202,123,22\");\n-\n-  std::istringstream is(s1);\n-  is.imbue(std::locale(std::locale(), new std::test_numpunct2));  \n-\n-  // Basic operation.\n-  is >> h4; \n-  VERIFY( h4 == 122 );\n-  VERIFY( is.good() );\n-\n-  is.clear();\n-  is >> h3; \n-  VERIFY( h3 == 20519 );\n-  VERIFY( is.good() );\n-\n-  is.clear();\n-  is >> h2; \n-  VERIFY( h2 == 2212322 );\n-  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n-\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-\n-bool test09()\n-{\n-   bool test = true;\n-\n-   std::string st(\"2.456e3-+0.567e-2\");\n-   std::stringbuf sb(st);\n-   std::istream is(&sb);\n-   double f1 = 0, f2 = 0;\n-   char c;\n-   (is>>std::ws) >> f1;\n-   (is>>std::ws) >> c;\n-   (is>>std::ws) >> f2;\n-   test = f1 == 2456;\n-   VERIFY( f2 == 0.00567 );\n-   VERIFY( c == '-' );\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n- \n-  return test;\n-}\n-\n-bool test10() {\n-  std::string str_01(\"0 00 000 +0 +0 -0\");\n-  std::stringbuf isbuf_01(str_01);\n-  std::istream is_01(&isbuf_01);\n-\n-  bool test = true;\n-\n-  int n = 365;\n-  is_01 >> n;\n-  VERIFY( n == 0 );\n-  n = 364;\n-  is_01 >> n;\n-  VERIFY( n == 0 );\n-  n = 363;\n-  is_01 >> n;\n-  VERIFY( n == 0 );\n-  n = 362;\n-  is_01 >> n;\n-  VERIFY( n == 0 );\n-  n = 361;\n-  is_01 >> n;\n-  VERIFY( n == 0 );\n-  n = 360;\n-  is_01 >> n;\n-  VERIFY( n == 0 );\n-  VERIFY( is_01.rdstate() == std::ios_base::eofbit );\n-\n-  std::string str_02(\"0x32 0X33 033 33\");\n-  std::stringbuf isbuf_02(str_02);\n-  std::istream is_02(&isbuf_02);\n-  is_02.unsetf(std::ios_base::basefield);\n-  is_02 >> n;\n-  VERIFY( n == 50 );\n-  is_02 >> n;\n-  VERIFY( n == 51 );\n-  is_02 >> n;\n-  VERIFY( n == 27 );\n-  is_02 >> n;\n-  VERIFY( n == 33 );\n-  VERIFY( is_02.rdstate() == std::ios_base::eofbit );\n-\n-  std::stringbuf isbuf_03(str_02);\n-  std::istream is_03(&isbuf_03);\n-  char c;\n-  int m;\n-\n-  is_03 >> std::dec >> n >> c >> m;\n-  VERIFY( n == 0 );\n-  VERIFY( c == 'x' );\n-  VERIFY( m == 32 );\n-\n-  is_03 >> std::oct >> m >> c >> n;\n-  VERIFY( m == 0 );\n-  VERIFY( c == 'X' );\n-  VERIFY( n == 27 );\n-\n-  is_03 >> std::dec >> m >> n;\n-  VERIFY( m == 33 );\n-  VERIFY( n == 33 );\n-  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n-\n-  std::string str_04(\"3. 4.5E+2a5E-3 .6E1\");\n-  std::stringbuf isbuf_04(str_04);\n-  std::istream is_04(&isbuf_04);\n-\n-  double f;\n-  is_04 >> f;\n-  VERIFY( f == 3.0 );\n-  is_04 >> f;\n-  VERIFY( f == 450.0 );\n-  is_04.ignore();\n-  is_04 >> f;\n-  VERIFY( f == 0.005 );\n-  is_04 >> f;\n-  VERIFY( f == 6 );\n-  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n-\n-  std::string str_05(\"0E20 5Ea E16\");\n-  std::stringbuf isbuf_05(str_05);\n-  std::istream is_05(&isbuf_05);\n-\n-  is_05 >> f;\n-  VERIFY( f == 0 );\n-  is_05 >> f;\n-  VERIFY( f == 0 );\n-  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n-  is_05.clear();\n-  is_05 >> c;\n-  VERIFY( c == 'a' );\n-  is_05 >> f;\n-  VERIFY( f == 0 );\n-  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n-  is_05.clear();\n-  is_05.ignore();\n-  is_05 >> n;\n-  VERIFY( n == 16 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-\n-  return test;\n-}\n-\n-// In the presence of no fmtflags, the input operator should behave\n-// like strtol(x, y, 0)\n-// libstdc++/90\n-bool test11()\n-{\n-  bool test = true;\n-  const char* cstrlit = \"0x2a\";\n-\n-  // sanity check via 'C' library call\n-  char* err;\n-  long l = std::strtol(cstrlit, &err, 0);\n-\n-  std::istringstream iss(cstrlit);\n-  iss.setf(std::ios::fmtflags(0), std::ios::basefield);\n-  int i;\n-  iss >> i;\n-\n-  VERIFY (!iss.fail());\n-  VERIFY (l == i);\n-\n-  return test;\n-}\n-\n-// libstdc++/3720\n-// excess input should not cause a core dump\n-template<typename T>\n-bool test12_aux(bool integer_type)\n-{\n-  bool test = true;\n-  \n-  int digits_overflow;\n-  if (integer_type)\n-    // This many digits will overflow integer types in base 10.\n-    digits_overflow = std::numeric_limits<T>::digits10 + 2;\n-  else\n-    // This might do it, unsure.\n-    digits_overflow = std::numeric_limits<T>::max_exponent10 + 1;\n-  \n-  std::string st;\n-  std::string part = \"1234567890123456789012345678901234567890\";\n-  for (int i = 0; i < digits_overflow / part.size() + 1; ++i)\n-    st += part;\n-  std::stringbuf sb(st);\n-  std::istream is(&sb);\n-  T t;\n-  is >> t;\n-  VERIFY(is.fail());\n-  return test;\n-}\n-\n-bool test12()\n-{\n-  bool test = true;\n-  VERIFY(test12_aux<short>(true));\n-  VERIFY(test12_aux<int>(true));\n-  VERIFY(test12_aux<long>(true));\n-  VERIFY(test12_aux<float>(false));\n-  VERIFY(test12_aux<double>(false));\n-  VERIFY(test12_aux<long double>(false));\n-  return test;\n-}\n-\n-// libstdc++/3720 part two\n-void test13()\n-{\n-  using namespace std;\n-  bool test = true;\n-  const char* l1 = \"12345678901234567890123456789012345678901234567890123456\";\n-  const char* l2 = \"1.2345678901234567890123456789012345678901234567890123456\"\n-                   \"  \"\n-                   \"1246.9\";\n-\n-  // 1 \n-  // used to core.\n-  double d;\n-  istringstream iss1(l2);\n-  iss1 >> d;\n-  iss1 >> d;\n-  VERIFY (d > 1246 && d < 1247);\n-\n-  // 2\n-  // quick test for failbit on maximum length extraction.\n-  int i;\n-  int max_digits = numeric_limits<int>::digits10 + 1;\n-  string digits;\n-  for (int j = 0; j < max_digits; ++j)\n-    digits += '1';\n-  istringstream iss2(digits);\n-  iss2 >> i;\n-  VERIFY( !iss2.fail() );\n-\n-  digits += '1';\n-  i = 0;\n-  iss2.str(digits);\n-  iss2.clear();\n-  iss2 >> i; \n-  VERIFY( i == 0 );\n-  VERIFY( iss2.fail() );\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-\n-  test06();\n-  test07();\n-  test08();\n-  test09();\n-  test10();\n-  \n-  test11();\n-  test12();\n-  test13();\n-  return 0;\n-}\n-\n-// paul miller was right on with riddim warfare!"}, {"sha": "b2fdd2691e753d70af7857cf3a8ae3bf6dc98c5c", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/01.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F01.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,134 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+// minimal sanity check\n+bool test01() {\n+\n+  bool test = true;\n+\n+  // Integral Types:\n+  bool \t\t\tb1  = false;\n+  bool \t\t\tb2  = false;\n+  short \t\ts1  = 0;\n+  int\t \t\ti1  = 0;\n+  long\t \t\tl1  = 0;\n+  unsigned short \tus1 = 0;\n+  unsigned int \t\tui1 = 0;\n+  unsigned long \tul1 = 0;\n+\n+  // Floating-point Types:\n+  float \t\tf1  = 0;\n+  double \t\td1  = 0;\n+  long double \t\tld1 = 0;\n+\n+  // process alphanumeric versions of bool values\n+  std::ios_base::fmtflags fmt = is_02.flags();\n+  bool testfmt = fmt & std::ios_base::boolalpha;\n+  is_02.setf(std::ios_base::boolalpha);\n+  fmt = is_02.flags();\n+  testfmt = fmt & std::ios_base::boolalpha;\n+  is_02 >> b1;\n+  VERIFY( b1 == 1 );\n+  is_02 >> b1;\n+  VERIFY( b1 == 0 );\n+\n+  // process numeric versions of of bool values\n+  is_02.unsetf(std::ios_base::boolalpha);\n+  fmt = is_02.flags();\n+  testfmt = fmt & std::ios_base::boolalpha;\n+  is_02 >> b1;\n+  VERIFY( b1 == 0 );\n+  is_02 >> b1;\n+  VERIFY( b1 == 1 );\n+\n+  // is_03 == \"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\"\n+  is_03 >> l1;\n+  VERIFY( l1 == -19999999 );\n+  is_03 >> ul1;\n+  VERIFY( ul1 == 777777 );\n+  is_03 >> i1;\n+  VERIFY( i1 == -234234 );\n+  is_03 >> ui1;\n+  VERIFY( ui1 == 233 );\n+  is_03 >> s1;\n+  VERIFY( s1 == -234 );\n+  is_03 >> us1;\n+  VERIFY( us1 == 33 );\n+  is_03 >> b1;\n+  VERIFY( b1 == 1 );\n+  is_03 >> ld1;\n+  VERIFY( ld1 == 66300.25 );\n+  is_03 >> d1;\n+  VERIFY( d1 == .315 );\n+  is_03 >> f1;\n+  VERIFY( f1 == 1.5 );\n+\n+  is_04 >> std::hex >> i1;\n+  std::printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n+  VERIFY( i1 == 0x123 );\n+  std::printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n+\n+  // test void pointers\n+  int i = 55;\n+  void* po = &i;\n+  void* pi;\n+\n+  ss_01 << po;\n+  ss_01 >> pi;\n+  std::printf (\"%x %x\\n\", pi, po);\n+  VERIFY( po == pi );\n+  \n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+ \n+  return test;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "374fbd8e0c7efc2e16b3aff04abfda8dc7b7b66b", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/02.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F02.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,71 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+// elaborated test for ints\n+bool test02() {\n+\n+  bool test = true;\n+  const std::string str_01(\"20000AB\");\n+  std::stringbuf strb_01(str_01, std::ios_base::in);\n+  std::istream is(&strb_01);\n+\n+  int n = 15;\n+  is >> n;\n+  VERIFY( n == 20000 );\n+  char c = is.peek();\n+  VERIFY( c == 65 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+ \n+  return test;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "869d828b09199efff8742fc5186eac7be57e286c", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/03.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F03.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,70 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+bool test03()\n+{\n+  std::stringbuf sbuf;\n+  std::istream istr(&sbuf);\n+  std::ostream ostr(&sbuf);\n+\n+  bool test = true;\n+  long l01;\n+  ostr <<  \"12220101\";\n+  istr >>  l01; // _M_in_end set completely incorrectly here.\n+  VERIFY( l01 == 12220101 );\n+  VERIFY( istr.rdstate() == std::ios_base::eofbit );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "de92bcd52cb005e7c276ac00d82d0254209aecbd", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/06.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F06.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F06.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F06.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,83 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00081.html\n+// Jim Parsons\n+void test06()\n+{\n+  // default locale, grouping is turned off\n+  bool test = true;\n+  unsigned int h4, h3, h2;\n+  char c;\n+  std::string s(\"205,199,144\");\n+  std::istringstream is(s);\n+  \n+  is >> h4; // 205\n+  VERIFY( h4 == 205 );\n+  is >> c; // ','\n+  VERIFY( c == ',' );\n+\n+  is >> h4; // 199\n+  VERIFY( h4 == 199 );\n+  is >> c; // ','\n+  VERIFY( c == ',' );\n+\n+  is >> h4; // 144\n+  VERIFY( is.rdstate() == std::ios_base::eofbit );\n+  VERIFY( h4 == 144 );\n+  is >> c; // EOF\n+  VERIFY( c == ',' );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "118668ea1d98789cdf18bd91fd9aac54f42d8654", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/07.cc", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F07.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,169 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+namespace std {\n+  class test_numpunct1 : public numpunct<char>\n+  {\n+  protected:\n+    string\n+    do_grouping() const \n+    { return string(1, '\\003'); }\n+  };\n+} // namespace std\n+\n+void test07()\n+{\n+  // manufactured locale, grouping is turned on\n+  bool test = true;\n+  unsigned int h4 = 0, h3 = 0, h2 = 0;\n+  float f1 = 0.0;\n+  const std::string s1(\"205,199 23,445.25 1,024,365 123,22,24\");\n+  std::istringstream is(s1);\n+  is.imbue(std::locale(std::locale(), new std::test_numpunct1));  \n+\n+  // Basic operation.\n+  is >> h4; \n+  VERIFY( h4 == 205199 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> f1; \n+  VERIFY( f1 == 23445.25 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> h3; \n+  VERIFY( h3 == 1024365 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> h2; \n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n+\n+  // Stress tests for explicit errors in grouping corner cases.  The\n+  // validity of these tests and results have been hammered out in\n+  // private email between bkoz and ncm between Jan 25 and Jan 27, 2000.\n+  // Thanks nate -- benjamin\n+  const std::string s2(\",111 4,,4 0.25,345 5..25 156,, 1,000000 1000000 1234,567\");\n+  h3 = h4 = h2 = 0;\n+  f1 = 0.0;\n+  const char c_control = '?';\n+  char c = c_control;\n+  is.clear();\n+  is.str(s2);\n+\n+  is >> h4; \n+  VERIFY( h4 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  is.clear();\n+  is >> c;\n+  VERIFY( c == ',' );\n+  VERIFY( is.good() );\n+\n+  is.ignore(3);\n+  is >> f1; \n+  VERIFY( f1 == 0.0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  is.clear();\n+  is >> c;\n+  VERIFY( c == ',' );\n+  is >> c;\n+  VERIFY( c == '4' );\n+  VERIFY( is.good() );\n+\n+  is >> f1; \n+  VERIFY( f1 == 0.25 );\n+  VERIFY( is.good() );\n+  is >> c;\n+  VERIFY( c == ',' );\n+  is >> h2;\n+  VERIFY( h2 == 345 );\n+  VERIFY( is.good() );\n+  f1 = 0.0;\n+  h2 = 0;\n+\n+  is >> f1; \n+  VERIFY( f1 == 5.0 );\n+  VERIFY( is.good() );\n+  is >> f1; \n+  VERIFY( f1 == .25 );\n+  VERIFY( is.good() );\n+\n+  is >> h3; \n+  VERIFY( h3 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  is.clear();\n+  is >> c;\n+  VERIFY( c == ',' ); // second one\n+  VERIFY( is.good() );\n+\n+  is >> h2; \n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  is.clear();\n+\n+  is >> h2; \n+  VERIFY( h2 == 1000000 );\n+  VERIFY( is.good() );\n+  h2 = 0;\n+\n+  is >> h2; \n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n+  is.clear();\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "f8491612ddf8b02d60f418e2e0dde0d1c2accf31", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/08.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F08.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F08.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F08.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,93 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+namespace std {\n+  class test_numpunct2 : public numpunct<char>\n+  {\n+  protected:\n+    string\n+    do_grouping() const \n+    { return string(\"\\002\\003\"); }\n+  };\n+} // namespace std\n+\n+void test08()\n+{\n+  // manufactured locale, grouping is turned on\n+  bool test = true;\n+  unsigned int h4 = 0, h3 = 0, h2 = 0;\n+  float f1 = 0.0;\n+  const std::string s1(\"1,22 205,19 22,123,22\");\n+  const std::string s2(\"1,220 2050,19 202,123,22\");\n+\n+  std::istringstream is(s1);\n+  is.imbue(std::locale(std::locale(), new std::test_numpunct2));  \n+\n+  // Basic operation.\n+  is >> h4; \n+  VERIFY( h4 == 122 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> h3; \n+  VERIFY( h3 == 20519 );\n+  VERIFY( is.good() );\n+\n+  is.clear();\n+  is >> h2; \n+  VERIFY( h2 == 2212322 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n+\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "37e175e6f7cd94bf580a907e5115032c66f7f297", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/09.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F09.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F09.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F09.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,72 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+bool test09()\n+{\n+   bool test = true;\n+\n+   std::string st(\"2.456e3-+0.567e-2\");\n+   std::stringbuf sb(st);\n+   std::istream is(&sb);\n+   double f1 = 0, f2 = 0;\n+   char c;\n+   (is>>std::ws) >> f1;\n+   (is>>std::ws) >> c;\n+   (is>>std::ws) >> f2;\n+   test = f1 == 2456;\n+   VERIFY( f2 == 0.00567 );\n+   VERIFY( c == '-' );\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+ \n+  return test;\n+}\n+\n+int main()\n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "bc67190533f869fe4d8af761fed6fb7f38f3ba47", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/10.cc", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F10.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,154 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+bool test10() {\n+  std::string str_01(\"0 00 000 +0 +0 -0\");\n+  std::stringbuf isbuf_01(str_01);\n+  std::istream is_01(&isbuf_01);\n+\n+  bool test = true;\n+\n+  int n = 365;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 364;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 363;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 362;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 361;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  n = 360;\n+  is_01 >> n;\n+  VERIFY( n == 0 );\n+  VERIFY( is_01.rdstate() == std::ios_base::eofbit );\n+\n+  std::string str_02(\"0x32 0X33 033 33\");\n+  std::stringbuf isbuf_02(str_02);\n+  std::istream is_02(&isbuf_02);\n+  is_02.unsetf(std::ios_base::basefield);\n+  is_02 >> n;\n+  VERIFY( n == 50 );\n+  is_02 >> n;\n+  VERIFY( n == 51 );\n+  is_02 >> n;\n+  VERIFY( n == 27 );\n+  is_02 >> n;\n+  VERIFY( n == 33 );\n+  VERIFY( is_02.rdstate() == std::ios_base::eofbit );\n+\n+  std::stringbuf isbuf_03(str_02);\n+  std::istream is_03(&isbuf_03);\n+  char c;\n+  int m;\n+\n+  is_03 >> std::dec >> n >> c >> m;\n+  VERIFY( n == 0 );\n+  VERIFY( c == 'x' );\n+  VERIFY( m == 32 );\n+\n+  is_03 >> std::oct >> m >> c >> n;\n+  VERIFY( m == 0 );\n+  VERIFY( c == 'X' );\n+  VERIFY( n == 27 );\n+\n+  is_03 >> std::dec >> m >> n;\n+  VERIFY( m == 33 );\n+  VERIFY( n == 33 );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n+\n+  std::string str_04(\"3. 4.5E+2a5E-3 .6E1\");\n+  std::stringbuf isbuf_04(str_04);\n+  std::istream is_04(&isbuf_04);\n+\n+  double f;\n+  is_04 >> f;\n+  VERIFY( f == 3.0 );\n+  is_04 >> f;\n+  VERIFY( f == 450.0 );\n+  is_04.ignore();\n+  is_04 >> f;\n+  VERIFY( f == 0.005 );\n+  is_04 >> f;\n+  VERIFY( f == 6 );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n+\n+  std::string str_05(\"0E20 5Ea E16\");\n+  std::stringbuf isbuf_05(str_05);\n+  std::istream is_05(&isbuf_05);\n+\n+  is_05 >> f;\n+  VERIFY( f == 0 );\n+  is_05 >> f;\n+  VERIFY( f == 0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n+  is_05.clear();\n+  is_05 >> c;\n+  VERIFY( c == 'a' );\n+  is_05 >> f;\n+  VERIFY( f == 0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n+  is_05.clear();\n+  is_05.ignore();\n+  is_05 >> n;\n+  VERIFY( n == 16 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "309875dfc54afadeb40e52e27ff847fd0a7b9842", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/11.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F11.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,73 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+// In the presence of no fmtflags, the input operator should behave\n+// like strtol(x, y, 0)\n+// libstdc++/90\n+bool test11()\n+{\n+  bool test = true;\n+  const char* cstrlit = \"0x2a\";\n+\n+  // sanity check via 'C' library call\n+  char* err;\n+  long l = std::strtol(cstrlit, &err, 0);\n+\n+  std::istringstream iss(cstrlit);\n+  iss.setf(std::ios::fmtflags(0), std::ios::basefield);\n+  int i;\n+  iss >> i;\n+\n+  VERIFY (!iss.fail());\n+  VERIFY (l == i);\n+\n+  return test;\n+}\n+\n+int main()\n+{\n+  test11();\n+  return 0;\n+}"}, {"sha": "64795c058125c106745556424c53e739e2ac9913", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/12.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F12.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,94 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+// XXX This test fails on sparc-solaris2 because of a bug in libc\n+// XXX sscanf for very long input.  See:\n+// XXX http://gcc.gnu.org/ml/gcc/2002-12/msg01422.html\n+// { dg-do run { xfail sparc*-*-solaris2* } }\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+// libstdc++/3720\n+// excess input should not cause a core dump\n+template<typename T>\n+bool test12_aux(bool integer_type)\n+{\n+  bool test = true;\n+  \n+  int digits_overflow;\n+  if (integer_type)\n+    // This many digits will overflow integer types in base 10.\n+    digits_overflow = std::numeric_limits<T>::digits10 + 2;\n+  else\n+    // This might do it, unsure.\n+    digits_overflow = std::numeric_limits<T>::max_exponent10 + 1;\n+  \n+  std::string st;\n+  std::string part = \"1234567890123456789012345678901234567890\";\n+  for (int i = 0; i < digits_overflow / part.size() + 1; ++i)\n+    st += part;\n+  std::stringbuf sb(st);\n+  std::istream is(&sb);\n+  T t;\n+  is >> t;\n+  VERIFY(is.fail());\n+  return test;\n+}\n+\n+bool test12()\n+{\n+  bool test = true;\n+  VERIFY(test12_aux<short>(true));\n+  VERIFY(test12_aux<int>(true));\n+  VERIFY(test12_aux<long>(true));\n+  VERIFY(test12_aux<float>(false));\n+  VERIFY(test12_aux<double>(false));\n+  VERIFY(test12_aux<long double>(false));\n+  return test;\n+}\n+\n+int main()\n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "935d456f448a0deda233cfd2a13615f53aebb3b6", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith/13.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith%2F13.cc?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -0,0 +1,88 @@\n+// 1999-04-12 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.1.2.2 arithmetic extractors\n+\n+#include <cstdio> // for printf\n+#include <istream>\n+#include <ostream>\n+#include <sstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+std::string str_01;\n+std::string str_02(\"true false 0 1 110001\");\n+std::string str_03(\"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\");\n+std::string str_04(\"0123\");\n+\n+std::stringbuf isbuf_01(std::ios_base::in);\n+std::stringbuf isbuf_02(str_02, std::ios_base::in);\n+std::stringbuf isbuf_03(str_03, std::ios_base::in);\n+std::stringbuf isbuf_04(str_04, std::ios_base::in);\n+\n+std::istream is_01(NULL);\n+std::istream is_02(&isbuf_02);\n+std::istream is_03(&isbuf_03);\n+std::istream is_04(&isbuf_04);\n+std::stringstream ss_01(str_01);\n+ \n+// libstdc++/3720 part two\n+void test13()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const char* l1 = \"12345678901234567890123456789012345678901234567890123456\";\n+  const char* l2 = \"1.2345678901234567890123456789012345678901234567890123456\"\n+                   \"  \"\n+                   \"1246.9\";\n+\n+  // 1 \n+  // used to core.\n+  double d;\n+  istringstream iss1(l2);\n+  iss1 >> d;\n+  iss1 >> d;\n+  VERIFY (d > 1246 && d < 1247);\n+\n+  // 2\n+  // quick test for failbit on maximum length extraction.\n+  int i;\n+  int max_digits = numeric_limits<int>::digits10 + 1;\n+  string digits;\n+  for (int j = 0; j < max_digits; ++j)\n+    digits += '1';\n+  istringstream iss2(digits);\n+  iss2 >> i;\n+  VERIFY( !iss2.fail() );\n+\n+  digits += '1';\n+  i = 0;\n+  iss2.str(digits);\n+  iss2.clear();\n+  iss2 >> i; \n+  VERIFY( i == 0 );\n+  VERIFY( iss2.fail() );\n+}\n+\n+int main()\n+{\n+  test13();\n+  return 0;\n+}"}, {"sha": "92f3d2f83cc67872b80e69ecb47a7e40537e32bb", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "patch": "@@ -54,8 +54,8 @@ proc libstdc++-v3-init { args } {\n     set dg-do-what-default run\n \n     # Copy any required data files.\n-    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/*/*.tst\"] $outdir\n-    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/*/*.txt\"] $outdir\n+    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/{,*/}*/*.tst\"] $outdir\n+    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/{,*/}*/*.txt\"] $outdir\n \n     # set LD_LIBRARY_PATH so that libgcc_s, libstdc++ binaries can be found.\n     # locate libgcc.a so we don't need to account for different values of\n@@ -233,7 +233,7 @@ proc libstdc++-v3-list-sourcefiles { } {\n \tset f [open $files_file \"w\"]\n \tset where_we_were [pwd]\n \tcd $srcdir\n-\tforeach s [lsort [glob -nocomplain */*.cc]] {\n+\tforeach s [lsort [glob -nocomplain \"{,*/}*/*.cc\"]] {\n \t    lappend sfiles ${srcdir}/${s}\n \t    puts $f $s\n \t}"}]}