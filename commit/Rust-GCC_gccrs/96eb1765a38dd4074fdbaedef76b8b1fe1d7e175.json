{"sha": "96eb1765a38dd4074fdbaedef76b8b1fe1d7e175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlYjE3NjVhMzhkZDQwNzRmZGJhZWRlZjc2YjhiMWZlMWQ3ZTE3NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-06T08:26:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-06T08:26:02Z"}, "message": "[amdgcn] Fix ambiguous .md attribute uses\n\nThis patch is part of a series that fixes ambiguous attribute\nuses in .md files, i.e. cases in which attributes didn't use\n<ITER:ATTR> to specify an iterator, and in which <ATTR> could\nhave different values depending on the iterator chosen.\n\nI think this is a genuine bugfix for the case in which the 1REG_MODE\nand 1REG_ALT are different, since previously we would use the 1REG_MODE\nfor both the comparison and the select, even though the operands being\ncompared are 1REG_ALT rather than 1REG_MODE.\n\n2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/gcn/gcn-valu.md\n\t(vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>): Use\n\tgen_vec_cmp<VEC_1REG_ALT:mode>di rather than (implicitly)\n\tgen_vec_cmp<VEC_1REG_MODE:mode>di.  Explicitly use\n\tgen_vcond_mask_<VEC_1REG_MODE:mode>di.\n\t(vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>_exec): Likewise,\n\tbut using the _exec comparison patterns.\n\t(vcondu<VEC_1REG_INT_MODE:mode><VEC_1REG_INT_ALT:mode>): Use\n\tgen_vec_cmp<VEC_1REG_INT_ALT:mode>di rather than (implicitly)\n\tgen_vec_cmp<VEC_1REG_INT_MODE:mode>di.  Explicitly use\n\tgen_vcond_mask_<VEC_1REG_INT_MODE:mode>di.\n\t(vcondu<VEC_1REG_INT_MODE:mode><VEC_1REG_INT_ALT:mode>_exec): Likewise,\n\tbut using the _exec comparison patterns.\n\nFrom-SVN: r273159", "tree": {"sha": "e4ba0a6dd018a862eff0138ae1c3e1b885554ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4ba0a6dd018a862eff0138ae1c3e1b885554ccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96eb1765a38dd4074fdbaedef76b8b1fe1d7e175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96eb1765a38dd4074fdbaedef76b8b1fe1d7e175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96eb1765a38dd4074fdbaedef76b8b1fe1d7e175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96eb1765a38dd4074fdbaedef76b8b1fe1d7e175/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "193bee751a607fac9d85e0ce8e6462fb5de1b515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193bee751a607fac9d85e0ce8e6462fb5de1b515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/193bee751a607fac9d85e0ce8e6462fb5de1b515"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "9dc0e0936907cc2592ababd384391749ecc767ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb1765a38dd4074fdbaedef76b8b1fe1d7e175/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb1765a38dd4074fdbaedef76b8b1fe1d7e175/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96eb1765a38dd4074fdbaedef76b8b1fe1d7e175", "patch": "@@ -1,3 +1,19 @@\n+2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/gcn/gcn-valu.md\n+\t(vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>): Use\n+\tgen_vec_cmp<VEC_1REG_ALT:mode>di rather than (implicitly)\n+\tgen_vec_cmp<VEC_1REG_MODE:mode>di.  Explicitly use\n+\tgen_vcond_mask_<VEC_1REG_MODE:mode>di.\n+\t(vcond<VEC_1REG_MODE:mode><VEC_1REG_ALT:mode>_exec): Likewise,\n+\tbut using the _exec comparison patterns.\n+\t(vcondu<VEC_1REG_INT_MODE:mode><VEC_1REG_INT_ALT:mode>): Use\n+\tgen_vec_cmp<VEC_1REG_INT_ALT:mode>di rather than (implicitly)\n+\tgen_vec_cmp<VEC_1REG_INT_MODE:mode>di.  Explicitly use\n+\tgen_vcond_mask_<VEC_1REG_INT_MODE:mode>di.\n+\t(vcondu<VEC_1REG_INT_MODE:mode><VEC_1REG_INT_ALT:mode>_exec): Likewise,\n+\tbut using the _exec comparison patterns.\n+\n 2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/arm/sync.md"}, {"sha": "c7e8b160943bbb770a0981802ede91e01ba04df0", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96eb1765a38dd4074fdbaedef76b8b1fe1d7e175/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96eb1765a38dd4074fdbaedef76b8b1fe1d7e175/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=96eb1765a38dd4074fdbaedef76b8b1fe1d7e175", "patch": "@@ -2574,10 +2574,10 @@\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<mode>di (tmp, operands[3], operands[4],\n-\t\t\t\t    operands[5]));\n-    emit_insn (gen_vcond_mask_<mode>di (operands[0], operands[1], operands[2],\n-\t\t\t\t\ttmp));\n+    emit_insn (gen_vec_cmp<VEC_1REG_ALT:mode>di\n+\t       (tmp, operands[3], operands[4], operands[5]));\n+    emit_insn (gen_vcond_mask_<VEC_1REG_MODE:mode>di\n+\t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n@@ -2592,10 +2592,10 @@\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<mode>di_exec (tmp, operands[3], operands[4],\n-\t\t\t\t\t operands[5], operands[6]));\n-    emit_insn (gen_vcond_mask_<mode>di (operands[0], operands[1], operands[2],\n-\t\t\t\t\ttmp));\n+    emit_insn (gen_vec_cmp<VEC_1REG_ALT:mode>di_exec\n+\t       (tmp, operands[3], operands[4], operands[5], operands[6]));\n+    emit_insn (gen_vcond_mask_<VEC_1REG_MODE:mode>di\n+\t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n@@ -2609,10 +2609,10 @@\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<mode>di (tmp, operands[3], operands[4],\n-\t\t\t\t    operands[5]));\n-    emit_insn (gen_vcond_mask_<mode>di (operands[0], operands[1], operands[2],\n-\t\t\t\t        tmp));\n+    emit_insn (gen_vec_cmp<VEC_1REG_INT_ALT:mode>di\n+\t       (tmp, operands[3], operands[4], operands[5]));\n+    emit_insn (gen_vcond_mask_<VEC_1REG_INT_MODE:mode>di\n+\t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n \n@@ -2627,10 +2627,10 @@\n   \"\"\n   {\n     rtx tmp = gen_reg_rtx (DImode);\n-    emit_insn (gen_vec_cmp<mode>di_exec (tmp, operands[3], operands[4],\n-\t\t\t\t\t operands[5], operands[6]));\n-    emit_insn (gen_vcond_mask_<mode>di (operands[0], operands[1], operands[2],\n-\t\t\t\t        tmp));\n+    emit_insn (gen_vec_cmp<VEC_1REG_INT_ALT:mode>di_exec\n+\t       (tmp, operands[3], operands[4], operands[5], operands[6]));\n+    emit_insn (gen_vcond_mask_<VEC_1REG_INT_MODE:mode>di\n+\t       (operands[0], operands[1], operands[2], tmp));\n     DONE;\n   })\n "}]}