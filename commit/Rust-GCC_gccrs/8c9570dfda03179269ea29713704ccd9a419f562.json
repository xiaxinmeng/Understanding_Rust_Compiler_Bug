{"sha": "8c9570dfda03179269ea29713704ccd9a419f562", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5NTcwZGZkYTAzMTc5MjY5ZWEyOTcxMzcwNGNjZDlhNDE5ZjU2Mg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2008-08-21T15:37:05Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2008-08-21T15:37:05Z"}, "message": "libgomp.exp (libgomp_init): Only set things that depend on blddir if blddir exists.\n\n\t* testsuite/libgomp.exp (libgomp_init): Only set things that\n\tdepend on blddir if blddir exists.\n\t(libgomp_target_compile): Likewise.\n\t* testsuite/libgomp.c++/c++.exp: Likewise.\n\t* testsuite/libgomp.fortran/fortran.exp: Likewise.\n\nFrom-SVN: r139393", "tree": {"sha": "9696a01375533862dd7d7b9865ef253a1d1338e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9696a01375533862dd7d7b9865ef253a1d1338e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c9570dfda03179269ea29713704ccd9a419f562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9570dfda03179269ea29713704ccd9a419f562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9570dfda03179269ea29713704ccd9a419f562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9570dfda03179269ea29713704ccd9a419f562/comments", "author": null, "committer": null, "parents": [{"sha": "129a37fc319db84e962397736a3030cb95471df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129a37fc319db84e962397736a3030cb95471df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129a37fc319db84e962397736a3030cb95471df2"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "2b9fedfd4b705a411da0b8c4deaa4840c11e096a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9570dfda03179269ea29713704ccd9a419f562/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9570dfda03179269ea29713704ccd9a419f562/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8c9570dfda03179269ea29713704ccd9a419f562", "patch": "@@ -1,3 +1,11 @@\n+2008-08-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* testsuite/libgomp.exp (libgomp_init): Only set things that\n+\tdepend on blddir if blddir exists.\n+\t(libgomp_target_compile): Likewise.\n+\t* testsuite/libgomp.c++/c++.exp: Likewise.\n+\t* testsuite/libgomp.fortran/fortran.exp: Likewise.\n+\n 2008-07-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* libgomp.texi: Update to GFDL 1.2.  Update copyright years."}, {"sha": "f86f1a18ed04923049585f239bcfcca3973c8b9b", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9570dfda03179269ea29713704ccd9a419f562/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9570dfda03179269ea29713704ccd9a419f562/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=8c9570dfda03179269ea29713704ccd9a419f562", "patch": "@@ -119,10 +119,13 @@ proc libgomp_init { args } {\n     }\n \n     set ALWAYS_CFLAGS \"\"\n-    lappend ALWAYS_CFLAGS \"additional_flags=-B${blddir}/\"\n-    lappend ALWAYS_CFLAGS \"additional_flags=-I${blddir}\"\n+    if { $blddir != \"\" } {\n+        lappend ALWAYS_CFLAGS \"additional_flags=-B${blddir}/\"\n+        lappend ALWAYS_CFLAGS \"additional_flags=-I${blddir}\"\n+        lappend ALWAYS_CFLAGS \"ldflags=-L${blddir}/.libs\"\n+    }\n     lappend ALWAYS_CFLAGS \"additional_flags=-I${srcdir}/..\"\n-    lappend ALWAYS_CFLAGS \"ldflags=-L${blddir}/.libs -lgomp\"\n+    lappend ALWAYS_CFLAGS \"ldflags=-lgomp\"\n \n     # We use atomic operations in the testcases to validate results.\n     if { ([istarget i?86-*-*] || [istarget x86_64-*-*])\n@@ -164,8 +167,11 @@ proc libgomp_target_compile { source dest type options } {\n     global lang_library_path\n     global lang_link_flags\n \n-    if { [info exists lang_test_file] && [file exists \"${blddir}/\"] } {\n-\tlappend options \"ldflags=-L${blddir}/${lang_library_path} ${lang_link_flags}\"\n+    if { [info exists lang_test_file] } {\n+        if { $blddir != \"\" } {\n+            lappend options \"ldflags=-L${blddir}/${lang_library_path}\"\n+        }\n+        lappend options \"ldflags=${lang_link_flags}\"\n     }\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {"}, {"sha": "decda3d1a122ebab2d2bc1dfa27dbb431418c056", "filename": "libgomp/testsuite/libgomp.c++/c++.exp", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9570dfda03179269ea29713704ccd9a419f562/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9570dfda03179269ea29713704ccd9a419f562/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp?ref=8c9570dfda03179269ea29713704ccd9a419f562", "patch": "@@ -12,23 +12,36 @@ dg-init\n \n set blddir [lookfor_file [get_multilibs] libgomp]\n \n-# Look for a static libstdc++ first.\n-if [file exists \"${blddir}/${lang_library_path}/libstdc++.a\"] {\n-    set lang_test_file \"${lang_library_path}/libstdc++.a\"\n-    set lang_test_file_found 1\n-# We may have a shared only build, so look for a shared libstdc++.\n-} elseif [file exists \"${blddir}/${lang_library_path}/libstdc++.${shlib_ext}\"] {\n-    set lang_test_file \"${lang_library_path}/libstdc++.${shlib_ext}\"\n+\n+if { $blddir != \"\" } {\n+    # Look for a static libstdc++ first.\n+    if [file exists \"${blddir}/${lang_library_path}/libstdc++.a\"] {\n+        set lang_test_file \"${lang_library_path}/libstdc++.a\"\n+        set lang_test_file_found 1\n+        # We may have a shared only build, so look for a shared libstdc++.\n+    } elseif [file exists \"${blddir}/${lang_library_path}/libstdc++.${shlib_ext}\"] {\n+        set lang_test_file \"${lang_library_path}/libstdc++.${shlib_ext}\"\n+        set lang_test_file_found 1\n+    } else {\n+        puts \"No libstdc++ library found, will not execute c++ tests\"\n+    }\n+} elseif { [info exists GXX_UNDER_TEST] } {\n     set lang_test_file_found 1\n+    # Needs to exist for libgomp.exp.\n+    set lang_test_file \"\"\n } else {\n-    puts \"No libstdc++ library found, will not execute c++ tests\"\n+    puts \"GXX_UNDER_TEST not defined, will not execute c++ tests\"\n }\n \n if { $lang_test_file_found } {\n     # Gather a list of all tests.\n     set tests [lsort [glob -nocomplain $srcdir/$subdir/*.C]]\n \n-    set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    if { $blddir != \"\" } {\n+        set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    } else {\n+        set ld_library_path \"$always_ld_library_path\"\n+    }\n     append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n     set_ld_library_path_env_vars\n "}, {"sha": "0f7ad6e5a911c059f7262839e86735efc94b669b", "filename": "libgomp/testsuite/libgomp.fortran/fortran.exp", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9570dfda03179269ea29713704ccd9a419f562/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9570dfda03179269ea29713704ccd9a419f562/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp?ref=8c9570dfda03179269ea29713704ccd9a419f562", "patch": "@@ -1,18 +1,36 @@\n set lang_library_path\t\"../libgfortran/.libs\"\n-set lang_test_file\t\"${lang_library_path}/libgfortranbegin.a\"\n set lang_link_flags\t\"-lgfortranbegin -lgfortran\"\n+set lang_test_file_found 0\n \n load_lib libgomp-dg.exp\n \n # Initialize dg.\n dg-init\n \n-if [file exists \"${blddir}/${lang_test_file}\"] {\n+if { $blddir != \"\" } {\n+    if [file exists \"${blddir}/${lang_library_path}/libgfortranbegin.a\"] {\n+        set lang_test_file \"${lang_library_path}/libgfortranbegin.a\"\n+        set lang_test_file_found 1\n+    } else {\n+        puts \"No libgfortranbegin library found, will not execute fortran tests\"\n+    }\n+} elseif [info exists GFORTRAN_UNDER_TEST] {\n+    set lang_test_file_found 1\n+    # Needs to exist for libgomp.exp.\n+    set lang_test_file \"\"\n+} else {\n+    puts \"GFORTRAN_UNDER_TEST not defined, will not execute fortran tests\"\n+}\n \n+if { $lang_test_file_found } {\n     # Gather a list of all tests.\n     set tests [lsort [find $srcdir/$subdir *.\\[fF\\]{,90,95,03,08}]]\n \n-    set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    if { $blddir != \"\" } {\n+        set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    } else {\n+        set ld_library_path \"$always_ld_library_path\"\n+    }\n     append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n     set_ld_library_path_env_vars\n "}]}