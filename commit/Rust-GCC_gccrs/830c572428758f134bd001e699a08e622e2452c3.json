{"sha": "830c572428758f134bd001e699a08e622e2452c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMwYzU3MjQyODc1OGYxMzRiZDAwMWU2OTlhMDhlNjIyZTI0NTJjMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-08T21:03:53Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-09T12:28:46Z"}, "message": "c++: Fix wrong paren-init of aggregates interference [PR93790]\n\nThis PR points out that we are rejecting valid code in C++20.  The\nproblem is that we were surreptitiously transforming\n\n  T& t(e)\n\ninto\n\n  T& t{e}\n\nwhich is wrong, because the type of e had a conversion function to T,\nwhile aggregate initialization of t from e doesn't work.  Therefore, I\nwas violating a design principle of P0960, which says that any existing\nmeaning of A(b) should not change.  So I think we should only attempt to\naggregate-initialize if the original expression was ill-formed.\n\nAnother design principle is that () should work where {} works, so this:\n\n  struct S { int i; };\n  const S& s(1);\n\nhas to keep working.  Thus the special handling for paren-lists with one\nelement.  (A paren-list with more than one element would give you \"error:\nexpression list treated as compound expression in initializer\" C++17.)\n\n\tPR c++/93790\n\t* call.c (initialize_reference): If the reference binding failed, maybe\n\ttry initializing from { }.\n\t* decl.c (grok_reference_init): For T& t(e), set\n\tLOOKUP_AGGREGATE_PAREN_INIT but don't build up a constructor yet.\n\n\t* g++.dg/cpp2a/paren-init23.C: New test.\n\t* g++.dg/init/aggr14.C: New test.", "tree": {"sha": "eb650334e618b8cfd52b357a2f8e84b87eda04fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb650334e618b8cfd52b357a2f8e84b87eda04fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/830c572428758f134bd001e699a08e622e2452c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/830c572428758f134bd001e699a08e622e2452c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/830c572428758f134bd001e699a08e622e2452c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/830c572428758f134bd001e699a08e622e2452c3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "148289004696940ea5828d19e63a1e3791a2fb70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148289004696940ea5828d19e63a1e3791a2fb70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148289004696940ea5828d19e63a1e3791a2fb70"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "cdd9b52915a1b7e3bf4abcb117ef5964923883ac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830c572428758f134bd001e699a08e622e2452c3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830c572428758f134bd001e699a08e622e2452c3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=830c572428758f134bd001e699a08e622e2452c3", "patch": "@@ -1,3 +1,11 @@\n+2020-04-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93790\n+\t* call.c (initialize_reference): If the reference binding failed, maybe\n+\ttry initializing from { }.\n+\t* decl.c (grok_reference_init): For T& t(e), set\n+\tLOOKUP_AGGREGATE_PAREN_INIT but don't build up a constructor yet.\n+\n 2020-04-08  Iain Sandoe  <iain@sandoe.co.uk>\n \t    Jun Ma <JunMa@linux.alibaba.com>\n "}, {"sha": "1f3d9d23b5b269028f9d43918d3d49c1fb5675cd", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830c572428758f134bd001e699a08e622e2452c3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830c572428758f134bd001e699a08e622e2452c3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=830c572428758f134bd001e699a08e622e2452c3", "patch": "@@ -12196,6 +12196,20 @@ initialize_reference (tree type, tree expr,\n \n   conv = reference_binding (type, TREE_TYPE (expr), expr, /*c_cast_p=*/false,\n \t\t\t    flags, complain);\n+  /* If this conversion failed, we're in C++20, and we have something like\n+     A& a(b) where A is an aggregate, try again, this time as A& a{b}.  */\n+  if ((!conv || conv->bad_p)\n+      && (flags & LOOKUP_AGGREGATE_PAREN_INIT))\n+    {\n+      tree e = build_constructor_single (init_list_type_node, NULL_TREE, expr);\n+      CONSTRUCTOR_IS_DIRECT_INIT (e) = true;\n+      CONSTRUCTOR_IS_PAREN_INIT (e) = true;\n+      conversion *c = reference_binding (type, TREE_TYPE (e), e,\n+\t\t\t\t\t /*c_cast_p=*/false, flags, complain);\n+      /* If this worked, use it.  */\n+      if (c && !c->bad_p)\n+\texpr = e, conv = c;\n+    }\n   if (!conv || conv->bad_p)\n     {\n       if (complain & tf_error)"}, {"sha": "1447b89e69286851c5b5c127e0745227feee322e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830c572428758f134bd001e699a08e622e2452c3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830c572428758f134bd001e699a08e622e2452c3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=830c572428758f134bd001e699a08e622e2452c3", "patch": "@@ -5568,9 +5568,22 @@ grok_reference_init (tree decl, tree type, tree init, int flags)\n \t  && !DECL_DECOMPOSITION_P (decl)\n \t  && (cxx_dialect >= cxx2a))\n \t{\n-\t  init = build_constructor_from_list (init_list_type_node, init);\n-\t  CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n-\t  CONSTRUCTOR_IS_PAREN_INIT (init) = true;\n+\t  /* We don't know yet if we should treat const A& r(1) as\n+\t     const A& r{1}.  */\n+\t  if (list_length (init) == 1)\n+\t    {\n+\t      flags |= LOOKUP_AGGREGATE_PAREN_INIT;\n+\t      init = build_x_compound_expr_from_list (init, ELK_INIT,\n+\t\t\t\t\t\t      tf_warning_or_error);\n+\t    }\n+\t  /* If the list had more than one element, the code is ill-formed\n+\t     pre-C++20, so we can build a constructor right away.  */\n+\t  else\n+\t    {\n+\t      init = build_constructor_from_list (init_list_type_node, init);\n+\t      CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n+\t      CONSTRUCTOR_IS_PAREN_INIT (init) = true;\n+\t    }\n \t}\n       else\n \tinit = build_x_compound_expr_from_list (init, ELK_INIT,"}, {"sha": "a5bd5614e5adff77c8c0c8bca2cc012cadb867c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830c572428758f134bd001e699a08e622e2452c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830c572428758f134bd001e699a08e622e2452c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=830c572428758f134bd001e699a08e622e2452c3", "patch": "@@ -1,3 +1,9 @@\n+2020-04-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93790\n+\t* g++.dg/cpp2a/paren-init23.C: New test.\n+\t* g++.dg/init/aggr14.C: New test.\n+\n 2020-04-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR tree-optimization/91322"}, {"sha": "6038f63be5ad0e6e5e9ee203be9cf0052b6de39a", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init23.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830c572428758f134bd001e699a08e622e2452c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830c572428758f134bd001e699a08e622e2452c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init23.C?ref=830c572428758f134bd001e699a08e622e2452c3", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/93790 - wrong paren-init of aggregates interference.\n+// { dg-do compile { target c++2a } }\n+\n+struct S {\n+  int i;\n+};\n+const S& s(1);\n+\n+struct A {\n+  int i;\n+  A(int);\n+};\n+const A& a(1);\n+\n+struct B {\n+  int i;\n+  B(int) = delete;\n+};\n+const B& b(1); // { dg-error \"use of deleted function\" }"}, {"sha": "538b467d467f0c1f8da3a683986f1752bc586b15", "filename": "gcc/testsuite/g++.dg/init/aggr14.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830c572428758f134bd001e699a08e622e2452c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830c572428758f134bd001e699a08e622e2452c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr14.C?ref=830c572428758f134bd001e699a08e622e2452c3", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/93790 - wrong paren-init of aggregates interference.\n+// { dg-do compile }\n+\n+struct S {};\n+class S_refwrap {\n+    S& Sref_;\n+public:\n+    S_refwrap(S& Sref) : Sref_(Sref) {}\n+    operator S&() { return Sref_; }\n+};\n+\n+S s;\n+S_refwrap r(s);\n+S& s2(r);"}]}