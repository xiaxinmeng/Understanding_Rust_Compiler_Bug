{"sha": "2a061db501f101bfd33a6897d30431666689ce08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwNjFkYjUwMWYxMDFiZmQzM2E2ODk3ZDMwNDMxNjY2Njg5Y2UwOA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2006-11-30T17:58:03Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2006-11-30T17:58:03Z"}, "message": "dfp-bit.c (DFP_TO_INT): Use wider precision.\n\ngcc/\n\t* config/dfp-bit.c (DFP_TO_INT): Use wider precision.\ntestsuite/\n\t* gcc.dg/dfp/convert-int-max.c: New test.\n\t* gcc.dg/dfp/convert-int-max-fold.c: New test.\n\nFrom-SVN: r119368", "tree": {"sha": "fab81e8535a653c285625b70442c5203969974c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fab81e8535a653c285625b70442c5203969974c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a061db501f101bfd33a6897d30431666689ce08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a061db501f101bfd33a6897d30431666689ce08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a061db501f101bfd33a6897d30431666689ce08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a061db501f101bfd33a6897d30431666689ce08/comments", "author": null, "committer": null, "parents": [{"sha": "334737afb7f669464b04246783ba48b777f1e809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334737afb7f669464b04246783ba48b777f1e809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334737afb7f669464b04246783ba48b777f1e809"}], "stats": {"total": 303, "additions": 302, "deletions": 1}, "files": [{"sha": "ab6777a97b01c60aa1022e8fed4a304f38666a1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a061db501f101bfd33a6897d30431666689ce08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a061db501f101bfd33a6897d30431666689ce08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a061db501f101bfd33a6897d30431666689ce08", "patch": "@@ -1,3 +1,7 @@\n+2006-11-30  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* config/dfp-bit.c (DFP_TO_INT): Use wider precision.\n+\n 2006-11-30  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-operands.h (struct ssa_operands): New."}, {"sha": "0ee2083e835b7f0bf43392f08fab5edb016ecd2b", "filename": "gcc/config/dfp-bit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a061db501f101bfd33a6897d30431666689ce08/gcc%2Fconfig%2Fdfp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a061db501f101bfd33a6897d30431666689ce08/gcc%2Fconfig%2Fdfp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.c?ref=2a061db501f101bfd33a6897d30431666689ce08", "patch": "@@ -392,7 +392,8 @@ DFP_TO_INT (DFP_C_TYPE x)\n   decNumber qval, n1, n2;\n   decContext context;\n \n-  decContextDefault (&context, CONTEXT_INIT);\n+  /* Use a large context to avoid losing precision.  */\n+  decContextDefault (&context, DEC_INIT_DECIMAL128);\n   /* Need non-default rounding mode here.  */\n   context.round = DEC_ROUND_DOWN;\n "}, {"sha": "3535260897f5785b1f124718532e5c2cb7088b58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a061db501f101bfd33a6897d30431666689ce08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a061db501f101bfd33a6897d30431666689ce08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a061db501f101bfd33a6897d30431666689ce08", "patch": "@@ -1,3 +1,8 @@\n+2006-11-30  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.dg/dfp/convert-int-max.c: New test.\n+\t* gcc.dg/dfp/convert-int-max-fold.c: New test.\n+\n 2006-11-30  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/vect/vect-pow-1.c: Rename ..."}, {"sha": "7e016918ad23b27443c0b104ab136fd5b98e4ad0", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-max-fold.c", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a061db501f101bfd33a6897d30431666689ce08/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a061db501f101bfd33a6897d30431666689ce08/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max-fold.c?ref=2a061db501f101bfd33a6897d30431666689ce08", "patch": "@@ -0,0 +1,146 @@\n+/* { dg-options \"-std=gnu99 -O2\" } */\n+\n+/* N1150 5.1 Conversions from decimal float to integer.  */\n+\n+/* Test decimal float to integer conversions for values at the limit of\n+   what will fit into the destination type.  This assumes 32-bit int and\n+   64-bit long long (there's a check for that below).  This version tests\n+   conversions during compilation.  */\n+\n+extern void link_error (void);\n+\n+void\n+doit ()\n+{\n+  _Decimal32 d32;\n+  _Decimal64 d64;\n+  _Decimal128 d128;\n+  int si;\n+  unsigned int ui;\n+  long long sll;\n+  unsigned long long ull;\n+\n+  /* _Decimal32 to int.  */\n+\n+  d32 = 2147483.E3DF;\n+  si = d32;\n+  if (si != 2147483000)\n+    link_error ();\n+\n+  d32 = -2147483.E3DF;\n+  si = d32;\n+  if (si != -2147483000)\n+    link_error ();\n+\n+  /* _Decimal32 to unsigned int.  */\n+\n+  d32 = 4.294967E9DF;\n+  ui = d32;\n+  if (ui != 4294967000U)\n+    link_error ();\n+\n+  /* _Decimal32 to long long.  */\n+\n+  d32 = 922.3372E16DF;\n+  sll = d32;\n+  if (sll != 9223372000000000000LL)\n+    link_error ();\n+\n+  d32 = -92233.72E14DF;\n+  sll = d32;\n+  if (sll != -9223372000000000000LL)\n+    link_error ();\n+\n+  /* _Decimal32 to unsigned long long.  */\n+\n+  d32 = 0.1844674E20DF;\n+  ull = d32;\n+  if (ull != 18446740000000000000ULL)\n+    link_error ();\n+\n+  /* _Decimal64 to int.  */\n+\n+  d64 = 2.147483647E9DD;\n+  si = d64;\n+  if (si != 2147483647)\n+    link_error ();\n+\n+  d64 = -2147483648.DD;\n+  si = d64;\n+  if (si != -2147483648)\n+    link_error ();\n+\n+  /* _Decimal64 to unsigned int.  */\n+\n+  d64 = 42949.67295E5DD;\n+  ui = d64;\n+  if (ui != 4294967295)\n+    link_error ();\n+\n+  /* _Decimal64 to long long.  */\n+\n+  d64 = 9.223372036854775E18DD;\n+  sll = d64;\n+  if (sll != 9223372036854775000LL)\n+    link_error (); \n+\n+  d64 = -92233720.36854775E11DD;\n+  sll = d64;\n+  if (sll != -9223372036854775000LL)\n+    link_error ();\n+\n+  /* _Decimal64 to unsigned long long.  */\n+  d64 = 1844674407370955.E4DD;\n+  ull = d64;\n+  if (ull != 18446744073709550000ULL)\n+    link_error ();\n+\n+  /* _Decimal128 to int.  */\n+\n+  d128 = 2.147483647E9DL;\n+  si = d128;\n+  if (si != 2147483647)\n+    link_error ();\n+\n+  d128 = -2147483648.DL;\n+  si = d128;\n+  if (si != -2147483648)\n+    link_error ();\n+\n+  /* _Decimal128 to unsigned int.  */\n+\n+  d128 = 4294.967295E6DL;\n+  ui = d128;\n+  if (ui != 4294967295)\n+    link_error ();\n+\n+  /* _Decimal128 to long long.  */\n+\n+  d128 = 9223372036854775807.DL;\n+  sll = d128;\n+  if (sll != 9223372036854775807LL)\n+    link_error (); \n+\n+  d128 = -9.223372036854775808E19DL;\n+  sll = d128;\n+  if (sll != -9223372036854775807LL - 1LL)\n+    link_error ();\n+\n+  /* _Decimal128 to unsigned long long.  */\n+  d128 = 18446744073709551615.DL;\n+  ull = d128;\n+  if (ull != 18446744073709551615ULL)\n+    link_error ();\n+}\n+\n+int\n+main ()\n+{\n+  /* This test assumes 32-bit int and 64-bit long long.  */\n+\n+  if (sizeof (int) != 4 || sizeof (long long) != 8)\n+    return 0;\n+\n+  doit ();\n+  return 0;\n+}"}, {"sha": "2f494323984e530b90de051001299e68b21d015c", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-max.c", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a061db501f101bfd33a6897d30431666689ce08/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a061db501f101bfd33a6897d30431666689ce08/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c?ref=2a061db501f101bfd33a6897d30431666689ce08", "patch": "@@ -0,0 +1,145 @@\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* N1150 5.1 Conversions from decimal float to integer.  */\n+\n+/* Test decimal float to integer conversions for values at the limit of\n+   what will fit into the destination type.  This assumes 32-bit int and\n+   64-bit long long (there's a check for that below).  */\n+\n+extern void abort (void);\n+\n+volatile _Decimal32 d32;\n+volatile _Decimal64 d64;\n+volatile _Decimal128 d128;\n+volatile int si;\n+volatile unsigned int ui;\n+volatile long long sll;\n+volatile unsigned long long ull;\n+\n+void\n+doit ()\n+{\n+  /* _Decimal32 to int.  */\n+\n+  d32 = 2147483.E3DF;\n+  si = d32;\n+  if (si != 2147483000)\n+    abort ();\n+\n+  d32 = -2147483.E3DF;\n+  si = d32;\n+  if (si != -2147483000)\n+    abort ();\n+\n+  /* _Decimal32 to unsigned int.  */\n+\n+  d32 = 4.294967E9DF;\n+  ui = d32;\n+  if (ui != 4294967000U)\n+    abort ();\n+\n+  /* _Decimal32 to long long.  */\n+\n+  d32 = 922.3372E16DF;\n+  sll = d32;\n+  if (sll != 9223372000000000000LL)\n+    abort ();\n+\n+  d32 = -92233.72E14DF;\n+  sll = d32;\n+  if (sll != -9223372000000000000LL)\n+    abort ();\n+\n+  /* _Decimal32 to unsigned long long.  */\n+\n+  d32 = 0.1844674E20DF;\n+  ull = d32;\n+  if (ull != 18446740000000000000ULL)\n+    abort ();\n+\n+  /* _Decimal64 to int.  */\n+\n+  d64 = 2.147483647E9DD;\n+  si = d64;\n+  if (si != 2147483647)\n+    abort ();\n+\n+  d64 = -2147483648.DD;\n+  si = d64;\n+  if (si != -2147483648)\n+    abort ();\n+\n+  /* _Decimal64 to unsigned int.  */\n+\n+  d64 = 42949.67295E5DD;\n+  ui = d64;\n+  if (ui != 4294967295)\n+    abort ();\n+\n+  /* _Decimal64 to long long.  */\n+\n+  d64 = 9.223372036854775E18DD;\n+  sll = d64;\n+  if (sll != 9223372036854775000LL)\n+    abort (); \n+\n+  d64 = -92233720.36854775E11DD;\n+  sll = d64;\n+  if (sll != -9223372036854775000LL)\n+    abort ();\n+\n+  /* _Decimal64 to unsigned long long.  */\n+  d64 = 1844674407370955.E4DD;\n+  ull = d64;\n+  if (ull != 18446744073709550000ULL)\n+    abort ();\n+\n+  /* _Decimal128 to int.  */\n+\n+  d128 = 2.147483647E9DL;\n+  si = d128;\n+  if (si != 2147483647)\n+    abort ();\n+\n+  d128 = -2147483648.DL;\n+  si = d128;\n+  if (si != -2147483648)\n+    abort ();\n+\n+  /* _Decimal128 to unsigned int.  */\n+\n+  d128 = 4294.967295E6DL;\n+  ui = d128;\n+  if (ui != 4294967295)\n+    abort ();\n+\n+  /* _Decimal128 to long long.  */\n+\n+  d128 = 9223372036854775807.DL;\n+  sll = d128;\n+  if (sll != 9223372036854775807LL)\n+    abort (); \n+\n+  d128 = -9.223372036854775808E19DL;\n+  sll = d128;\n+  if (sll != -9223372036854775807LL - 1LL)\n+    abort ();\n+\n+  /* _Decimal128 to unsigned long long.  */\n+  d128 = 18446744073709551615.DL;\n+  ull = d128;\n+  if (ull != 18446744073709551615ULL)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  /* This test assumes 32-bit int and 64-bit long long.  */\n+\n+  if (sizeof (int) != 4 || sizeof (long long) != 8)\n+    return 0;\n+\n+  doit ();\n+  return 0;\n+}"}]}