{"sha": "10bbf137cf8103f09ce049a71f8e98dc92f821ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiYmYxMzdjZjgxMDNmMDljZTA0OWE3MWY4ZTk4ZGM5MmY4MjFhYg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-07-30T23:21:24Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-07-30T23:21:24Z"}, "message": "s390.md (UNSPEC_ROUND, [...]): New constants.\n\n\t* config/s390/s390.md (UNSPEC_ROUND, UNSPEC_SETHIGH,\n\tUNSPECV_BLOCKAGE): New constants.\n\t(\"*sethighqisi\", \"*sethighhisi\", \"*sethiqidi_64\", \"*sethiqidi_31\",\n\t\"*extractqi\", \"*extracthi\", \"*extendqidi2\" splitter, \"*extendqisi2\"\n\tsplitter, \"fix_truncdfdi2_ieee\", \"fix_truncdfsi2_ieee\",\n\t\"fix_truncsfdi2\", \"fix_truncsfsi2\", \"blockage\"): Use them.\n\n\t(all insns and expanders): Write output control string as brace block\n\twhere appropriate.  Remove \\-escapes for doublequote characters.\n\nFrom-SVN: r69978", "tree": {"sha": "579b22dbe0e723baacd94234237990a762fee0bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/579b22dbe0e723baacd94234237990a762fee0bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10bbf137cf8103f09ce049a71f8e98dc92f821ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bbf137cf8103f09ce049a71f8e98dc92f821ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bbf137cf8103f09ce049a71f8e98dc92f821ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bbf137cf8103f09ce049a71f8e98dc92f821ab/comments", "author": null, "committer": null, "parents": [{"sha": "3f2eae23b35c4116315c45678eafa3be48eb79c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2eae23b35c4116315c45678eafa3be48eb79c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2eae23b35c4116315c45678eafa3be48eb79c7"}], "stats": {"total": 588, "additions": 255, "deletions": 333}, "files": [{"sha": "358f141a078d59b90f94cc631e1acfcf7d9f8e1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bbf137cf8103f09ce049a71f8e98dc92f821ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bbf137cf8103f09ce049a71f8e98dc92f821ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10bbf137cf8103f09ce049a71f8e98dc92f821ab", "patch": "@@ -1,3 +1,15 @@\n+2003-07-31  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.md (UNSPEC_ROUND, UNSPEC_SETHIGH, \n+\tUNSPECV_BLOCKAGE): New constants.\n+\t(\"*sethighqisi\", \"*sethighhisi\", \"*sethiqidi_64\", \"*sethiqidi_31\",\n+\t\"*extractqi\", \"*extracthi\", \"*extendqidi2\" splitter, \"*extendqisi2\"\n+\tsplitter, \"fix_truncdfdi2_ieee\", \"fix_truncdfsi2_ieee\",\n+\t\"fix_truncsfdi2\", \"fix_truncsfsi2\", \"blockage\"): Use them.\n+\n+\t(all insns and expanders): Write output control string as brace block\n+\twhere appropriate.  Remove \\-escapes for doublequote characters.\n+\n Thu Jul 31 01:04:19 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* gcse.c (insert_store): Fix typo in previous patch."}, {"sha": "e1a25cc8ef55561960b5fb8a2a1977ebc4663831", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 243, "deletions": 333, "changes": 576, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bbf137cf8103f09ce049a71f8e98dc92f821ab/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bbf137cf8103f09ce049a71f8e98dc92f821ab/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=10bbf137cf8103f09ce049a71f8e98dc92f821ab", "patch": "@@ -50,7 +50,11 @@\n ;;\n \n (define_constants\n-  [; GOT/PLT and lt-relative accesses\n+  [; Miscellaneous\n+   (UNSPEC_ROUND\t\t1)\n+   (UNSPEC_SETHIGH\t\t10)\n+\n+   ; GOT/PLT and lt-relative accesses\n    (UNSPEC_LTREL_OFFSET\t\t100)\n    (UNSPEC_LTREL_BASE\t\t101)\n    (UNSPEC_GOTENT\t\t110)\n@@ -81,7 +85,10 @@\n ;;\n \n (define_constants\n-  [; Literal pool\n+  [; Blockage\n+   (UNSPECV_BLOCKAGE\t\t0)\n+\n+   ; Literal pool\n    (UNSPECV_POOL\t\t200)\n    (UNSPECV_POOL_START\t\t201)\n    (UNSPECV_POOL_END\t\t202)\n@@ -304,48 +311,44 @@\n         (compare:CC (match_operand:DI 0 \"register_operand\" \"\")\n                     (match_operand:DI 1 \"general_operand\" \"\")))]\n   \"TARGET_64BIT\"\n-  \"\n {\n   s390_compare_op0 = operands[0];\n   s390_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n (define_expand \"cmpsi\"\n   [(set (reg:CC 33)\n         (compare:CC (match_operand:SI 0 \"register_operand\" \"\")\n                     (match_operand:SI 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   s390_compare_op0 = operands[0];\n   s390_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n (define_expand \"cmpdf\"\n   [(set (reg:CC 33)\n         (compare:CC (match_operand:DF 0 \"register_operand\" \"\")\n                     (match_operand:DF 1 \"general_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"\n {\n   s390_compare_op0 = operands[0];\n   s390_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n (define_expand \"cmpsf\"\n   [(set (reg:CC 33)\n         (compare:CC (match_operand:SF 0 \"register_operand\" \"\")\n                     (match_operand:SF 1 \"general_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"\n {\n   s390_compare_op0 = operands[0];\n   s390_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n \n ; Test-under-Mask (zero_extract) instructions\n@@ -361,7 +364,6 @@\n    && INTVAL (operands[1]) + INTVAL (operands[2]) <= 64\n    && (INTVAL (operands[1]) + INTVAL (operands[2]) - 1) >> 4\n       == INTVAL (operands[2]) >> 4\"\n-  \"*\n {\n   int part = INTVAL (operands[2]) >> 4;\n   int block = (1 << INTVAL (operands[1])) - 1;\n@@ -371,13 +373,13 @@\n \n   switch (part)\n     {\n-      case 0: return \\\"tmhh\\\\t%0,%x2\\\";\n-      case 1: return \\\"tmhl\\\\t%0,%x2\\\";\n-      case 2: return \\\"tmlh\\\\t%0,%x2\\\";\n-      case 3: return \\\"tmll\\\\t%0,%x2\\\";\n+      case 0: return \"tmhh\\\\t%0,%x2\";\n+      case 1: return \"tmhl\\\\t%0,%x2\";\n+      case 2: return \"tmlh\\\\t%0,%x2\";\n+      case 3: return \"tmll\\\\t%0,%x2\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")])\n \n (define_insn \"*tmsi_ext\"\n@@ -391,7 +393,6 @@\n    && INTVAL (operands[1]) + INTVAL (operands[2]) <= 32\n    && (INTVAL (operands[1]) + INTVAL (operands[2]) - 1) >> 4\n       == INTVAL (operands[2]) >> 4\"\n-  \"*\n {\n   int part = INTVAL (operands[2]) >> 4;\n   int block = (1 << INTVAL (operands[1])) - 1;\n@@ -401,11 +402,11 @@\n \n   switch (part)\n     {\n-      case 0: return \\\"tmh\\\\t%0,%x2\\\";\n-      case 1: return \\\"tml\\\\t%0,%x2\\\";\n+      case 0: return \"tmh\\\\t%0,%x2\";\n+      case 1: return \"tml\\\\t%0,%x2\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")])\n \n (define_insn \"*tmqi_ext\"\n@@ -417,14 +418,13 @@\n   \"s390_match_ccmode(insn, CCTmode)\n    && INTVAL (operands[1]) >= 1 && INTVAL (operands[2]) >= 0\n    && INTVAL (operands[1]) + INTVAL (operands[2]) <= 8\"\n-  \"*\n {\n   int block = (1 << INTVAL (operands[1])) - 1;\n   int shift = 8 - INTVAL (operands[1]) - INTVAL (operands[2]);\n \n   operands[2] = GEN_INT (block << shift);\n-  return which_alternative == 0 ? \\\"tm\\\\t%0,%b2\\\" : \\\"tmy\\\\t%0,%b2\\\";\n-}\"\n+  return which_alternative == 0 ? \"tm\\\\t%0,%b2\" : \"tmy\\\\t%0,%b2\";\n+}\n   [(set_attr \"op_type\" \"SI,SIY\")])\n \n ; Test-under-Mask instructions\n@@ -437,15 +437,14 @@\n   \"TARGET_64BIT\n    && s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n    && s390_single_qi (operands[1], DImode, 0) >= 0\"\n-  \"*\n {\n   int part = s390_single_qi (operands[1], DImode, 0);\n   operands[1] = GEN_INT (s390_extract_qi (operands[1], DImode, part));\n \n   operands[0] = gen_rtx_MEM (QImode,\n \t\t\t     plus_constant (XEXP (operands[0], 0), part));\n-  return which_alternative == 0 ? \\\"tm\\\\t%0,%b1\\\" : \\\"tmy\\\\t%0,%b1\\\";\n-}\"\n+  return which_alternative == 0 ? \"tm\\\\t%0,%b1\" : \"tmy\\\\t%0,%b1\";\n+}\n   [(set_attr \"op_type\" \"SI,SIY\")])\n \n (define_insn \"*tmsi_mem\"\n@@ -455,15 +454,14 @@\n                  (match_operand:SI 2 \"immediate_operand\" \"n,n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n    && s390_single_qi (operands[1], SImode, 0) >= 0\"\n-  \"*\n {\n   int part = s390_single_qi (operands[1], SImode, 0);\n   operands[1] = GEN_INT (s390_extract_qi (operands[1], SImode, part));\n \n   operands[0] = gen_rtx_MEM (QImode,\n \t\t\t     plus_constant (XEXP (operands[0], 0), part));\n-  return which_alternative == 0 ? \\\"tm\\\\t%0,%b1\\\" : \\\"tmy\\\\t%0,%b1\\\";\n-}\"\n+  return which_alternative == 0 ? \"tm\\\\t%0,%b1\" : \"tmy\\\\t%0,%b1\";\n+}\n   [(set_attr \"op_type\" \"SI\")])\n \n (define_insn \"*tmhi_mem\"\n@@ -473,15 +471,14 @@\n                  (match_operand:SI 2 \"immediate_operand\" \"n,n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n    && s390_single_qi (operands[1], HImode, 0) >= 0\"\n-  \"*\n {\n   int part = s390_single_qi (operands[1], HImode, 0);\n   operands[1] = GEN_INT (s390_extract_qi (operands[1], HImode, part));\n \n   operands[0] = gen_rtx_MEM (QImode,\n \t\t\t     plus_constant (XEXP (operands[0], 0), part));\n-  return which_alternative == 0 ? \\\"tm\\\\t%0,%b1\\\" : \\\"tmy\\\\t%0,%b1\\\";\n-}\"\n+  return which_alternative == 0 ? \"tm\\\\t%0,%b1\" : \"tmy\\\\t%0,%b1\";\n+}\n   [(set_attr \"op_type\" \"SI\")])\n \n (define_insn \"*tmqi_mem\"\n@@ -503,20 +500,19 @@\n   \"TARGET_64BIT\n    && s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 1))\n    && s390_single_hi (operands[1], DImode, 0) >= 0\"\n-  \"*\n {\n   int part = s390_single_hi (operands[1], DImode, 0);\n   operands[1] = GEN_INT (s390_extract_hi (operands[1], DImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"tmhh\\\\t%0,%x1\\\";\n-      case 1: return \\\"tmhl\\\\t%0,%x1\\\";\n-      case 2: return \\\"tmlh\\\\t%0,%x1\\\";\n-      case 3: return \\\"tmll\\\\t%0,%x1\\\";\n+      case 0: return \"tmhh\\\\t%0,%x1\";\n+      case 1: return \"tmhl\\\\t%0,%x1\";\n+      case 2: return \"tmlh\\\\t%0,%x1\";\n+      case 3: return \"tmll\\\\t%0,%x1\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")])\n \n (define_insn \"*tmsi_reg\"\n@@ -526,18 +522,17 @@\n                  (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 1))\n    && s390_single_hi (operands[1], SImode, 0) >= 0\"\n-  \"*\n {\n   int part = s390_single_hi (operands[1], SImode, 0);\n   operands[1] = GEN_INT (s390_extract_hi (operands[1], SImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"tmh\\\\t%0,%x1\\\";\n-      case 1: return \\\"tml\\\\t%0,%x1\\\";\n+      case 0: return \"tmh\\\\t%0,%x1\";\n+      case 1: return \"tml\\\\t%0,%x1\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")])\n \n (define_insn \"*tmhi_full\"\n@@ -1036,7 +1031,6 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"\")\n         (match_operand:DI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Handle symbolic constants.  */\n   if (TARGET_64BIT && SYMBOLIC_CONST (operands[1]))\n@@ -1049,7 +1043,7 @@\n       && (!legitimate_reload_constant_p (operands[1])\n           || FP_REG_P (operands[0])))\n     operands[1] = force_const_mem (DImode, operands[1]);\n-}\")\n+})\n \n (define_insn \"*movdi_lhi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -1066,20 +1060,19 @@\n         (match_operand:DI 1 \"immediate_operand\" \"n\"))]\n   \"TARGET_64BIT && s390_single_hi (operands[1], DImode, 0) >= 0\n    && !FP_REG_P (operands[0])\"\n-  \"*\n {\n   int part = s390_single_hi (operands[1], DImode, 0);\n   operands[1] = GEN_INT (s390_extract_hi (operands[1], DImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"llihh\\\\t%0,%x1\\\";\n-      case 1: return \\\"llihl\\\\t%0,%x1\\\";\n-      case 2: return \\\"llilh\\\\t%0,%x1\\\";\n-      case 3: return \\\"llill\\\\t%0,%x1\\\";\n+      case 0: return \"llihh\\\\t%0,%x1\";\n+      case 1: return \"llihl\\\\t%0,%x1\";\n+      case 2: return \"llilh\\\\t%0,%x1\";\n+      case 3: return \"llill\\\\t%0,%x1\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")])\n \n (define_insn \"*movdi_lay\"\n@@ -1210,7 +1203,6 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"\")\n         (match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Handle symbolic constants.  */\n   if (!TARGET_64BIT && SYMBOLIC_CONST (operands[1]))\n@@ -1236,7 +1228,7 @@\n       && (!legitimate_reload_constant_p (operands[1])\n           || FP_REG_P (operands[0])))\n     operands[1] = force_const_mem (SImode, operands[1]);\n-}\")\n+})\n \n (define_insn \"*movsi_lhi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1252,18 +1244,17 @@\n         (match_operand:SI 1 \"immediate_operand\" \"n\"))]\n   \"TARGET_64BIT && s390_single_hi (operands[1], SImode, 0) >= 0\n    && !FP_REG_P (operands[0])\"\n-  \"*\n {\n   int part = s390_single_hi (operands[1], SImode, 0);\n   operands[1] = GEN_INT (s390_extract_hi (operands[1], SImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"llilh\\\\t%0,%x1\\\";\n-      case 1: return \\\"llill\\\\t%0,%x1\\\";\n+      case 0: return \"llilh\\\\t%0,%x1\";\n+      case 1: return \"llill\\\\t%0,%x1\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")])\n \n (define_insn \"*movsi_lay\"\n@@ -1432,14 +1423,13 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n         (match_operand:DF 1 \"general_operand\"  \"\"))]\n   \"\"\n-  \"\n {\n   /* During and after reload, we need to force constants\n      to the literal pool ourselves, if necessary.  */\n   if ((reload_in_progress || reload_completed)\n       && CONSTANT_P (operands[1]))\n     operands[1] = force_const_mem (DFmode, operands[1]);\n-}\")\n+})\n \n (define_insn \"*movdf_64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,d,m,?Q\")\n@@ -1537,14 +1527,13 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n         (match_operand:SF 1 \"general_operand\"  \"\"))]\n   \"\"\n-  \"\n {\n   /* During and after reload, we need to force constants\n      to the literal pool ourselves, if necessary.  */\n   if ((reload_in_progress || reload_completed)\n       && CONSTANT_P (operands[1]))\n     operands[1] = force_const_mem (SFmode, operands[1]);\n-}\")\n+})\n \n (define_insn \"*movsf\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,d,d,R,T,?Q\")\n@@ -1574,7 +1563,6 @@\n \t\t\t  (match_operand 1 \"\" \"\"))\n \t\t     (use (match_operand 2 \"\" \"\"))])]\n   \"\"\n-  \"\n {\n   int regno;\n   int count;\n@@ -1627,19 +1615,18 @@\n \t\t     change_address (operands[1], Pmode,\n \t\t\t\t     plus_constant (from,\n \t\t\t\t\t\t    off + i * UNITS_PER_WORD)));\n-}\")\n+})\n \n (define_insn \"*load_multiple_di\"\n   [(match_parallel 0 \"load_multiple_operation\"\n \t\t   [(set (match_operand:DI 1 \"register_operand\" \"=r\")\n \t\t\t (match_operand:DI 2 \"s_operand\" \"QS\"))])]\n   \"\"\n-  \"*\n {\n   int words = XVECLEN (operands[0], 0);\n   operands[0] = gen_rtx_REG (DImode, REGNO (operands[1]) + words - 1);\n-  return \\\"lmg\\\\t%1,%0,%2\\\";\n-}\"\n+  return \"lmg\\\\t%1,%0,%2\";\n+}\n    [(set_attr \"op_type\" \"RSY\")\n     (set_attr \"type\"    \"lm\")])\n \n@@ -1648,12 +1635,11 @@\n \t\t   [(set (match_operand:SI 1 \"register_operand\" \"=r,r\")\n \t\t\t (match_operand:SI 2 \"s_operand\" \"Q,S\"))])]\n   \"\"\n-  \"*\n {\n   int words = XVECLEN (operands[0], 0);\n   operands[0] = gen_rtx_REG (SImode, REGNO (operands[1]) + words - 1);\n-  return which_alternative == 0 ? \\\"lm\\\\t%1,%0,%2\\\" : \\\"lmy\\\\t%1,%0,%2\\\";\n-}\"\n+  return which_alternative == 0 ? \"lm\\\\t%1,%0,%2\" : \"lmy\\\\t%1,%0,%2\";\n+}\n    [(set_attr \"op_type\" \"RS,RSY\")\n     (set_attr \"type\"    \"lm\")])\n \n@@ -1666,7 +1652,6 @@\n \t\t\t  (match_operand 1 \"\" \"\"))\n \t\t     (use (match_operand 2 \"\" \"\"))])]\n   \"\"\n-  \"\n {\n   int regno;\n   int count;\n@@ -1721,19 +1706,18 @@\n \t\t\t\t     plus_constant (to,\n \t\t\t\t\t\t    off + i * UNITS_PER_WORD)),\n \t\t     gen_rtx_REG (Pmode, regno + i));\n-}\")\n+})\n \n (define_insn \"*store_multiple_di\"\n   [(match_parallel 0 \"store_multiple_operation\"\n \t\t   [(set (match_operand:DI 1 \"s_operand\" \"=QS\")\n \t\t\t (match_operand:DI 2 \"register_operand\" \"r\"))])]\n   \"\"\n-  \"*\n {\n   int words = XVECLEN (operands[0], 0);\n   operands[0] = gen_rtx_REG (DImode, REGNO (operands[2]) + words - 1);\n-  return \\\"stmg\\\\t%2,%0,%1\\\";\n-}\"\n+  return \"stmg\\\\t%2,%0,%1\";\n+}\n    [(set_attr \"op_type\" \"RSY\")\n     (set_attr \"type\"    \"stm\")])\n \n@@ -1743,12 +1727,11 @@\n \t\t   [(set (match_operand:SI 1 \"s_operand\" \"=Q,S\")\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r,r\"))])]\n   \"\"\n-  \"*\n {\n   int words = XVECLEN (operands[0], 0);\n   operands[0] = gen_rtx_REG (SImode, REGNO (operands[2]) + words - 1);\n-  return which_alternative == 0 ? \\\"stm\\\\t%2,%0,%1\\\" : \\\"stmy\\\\t%2,%0,%1\\\";\n-}\"\n+  return which_alternative == 0 ? \"stm\\\\t%2,%0,%1\" : \"stmy\\\\t%2,%0,%1\";\n+}\n    [(set_attr \"op_type\" \"RS,RSY\")\n     (set_attr \"type\"    \"stm\")])\n \n@@ -1785,22 +1768,21 @@\n    (use (match_operand:DI 2 \"nonmemory_operand\" \"n,a\"))\n    (clobber (match_scratch:DI 3 \"=X,&a\"))]\n   \"TARGET_64BIT\"\n-  \"*\n {\n   switch (which_alternative)\n     {\n       case 0:\n-\treturn \\\"mvc\\\\t%O0(%b2+1,%R0),%1\\\";\n+\treturn \"mvc\\\\t%O0(%b2+1,%R0),%1\";\n \n       case 1:\n-\toutput_asm_insn (\\\"bras\\\\t%3,.+10\\\", operands);\n-\toutput_asm_insn (\\\"mvc\\\\t%O0(1,%R0),%1\\\", operands);\n-\treturn \\\"ex\\\\t%2,0(%3)\\\";\n+\toutput_asm_insn (\"bras\\\\t%3,.+10\", operands);\n+\toutput_asm_insn (\"mvc\\\\t%O0(1,%R0),%1\", operands);\n+\treturn \"ex\\\\t%2,0(%3)\";\n \n       default:\n         abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"SS,NN\")\n    (set_attr \"type\"    \"cs,cs\")\n    (set_attr \"atype\"   \"*,agen\")\n@@ -1812,22 +1794,21 @@\n    (use (match_operand:SI 2 \"nonmemory_operand\" \"n,a\"))\n    (clobber (match_scratch:SI 3 \"=X,&a\"))]\n   \"!TARGET_64BIT\"\n-  \"*\n {\n   switch (which_alternative)\n     {\n       case 0:\n-\treturn \\\"mvc\\\\t%O0(%b2+1,%R0),%1\\\";\n+\treturn \"mvc\\\\t%O0(%b2+1,%R0),%1\";\n \n       case 1:\n-\toutput_asm_insn (\\\"bras\\\\t%3,.+10\\\", operands);\n-\toutput_asm_insn (\\\"mvc\\\\t%O0(1,%R0),%1\\\", operands);\n-\treturn \\\"ex\\\\t%2,0(%3)\\\";\n+\toutput_asm_insn (\"bras\\\\t%3,.+10\", operands);\n+\toutput_asm_insn (\"mvc\\\\t%O0(1,%R0),%1\", operands);\n+\treturn \"ex\\\\t%2,0(%3)\";\n \n       default:\n         abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"SS,NN\")\n    (set_attr \"type\"    \"cs,cs\")\n    (set_attr \"atype\"   \"*,agen\")\n@@ -1901,22 +1882,21 @@\n    (clobber (match_scratch:DI 2 \"=X,&a\"))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT\"\n-  \"*\n {\n   switch (which_alternative)\n     {\n       case 0:\n-\treturn \\\"xc\\\\t%O0(%b1+1,%R0),%0\\\";\n+\treturn \"xc\\\\t%O0(%b1+1,%R0),%0\";\n \n       case 1:\n-\toutput_asm_insn (\\\"bras\\\\t%2,.+10\\\", operands);\n-\toutput_asm_insn (\\\"xc\\\\t%O0(1,%R0),%0\\\", operands);\n-\treturn \\\"ex\\\\t%1,0(%2)\\\";\n+\toutput_asm_insn (\"bras\\\\t%2,.+10\", operands);\n+\toutput_asm_insn (\"xc\\\\t%O0(1,%R0),%0\", operands);\n+\treturn \"ex\\\\t%1,0(%2)\";\n \n       default:\n         abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"SS,NN\")\n    (set_attr \"type\"    \"cs,cs\")\n    (set_attr \"atype\"   \"*,agen\")\n@@ -1929,22 +1909,21 @@\n    (clobber (match_scratch:SI 2 \"=X,&a\"))\n    (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n-  \"*\n {\n   switch (which_alternative)\n     {\n       case 0:\n-\treturn \\\"xc\\\\t%O0(%b1+1,%R0),%0\\\";\n+\treturn \"xc\\\\t%O0(%b1+1,%R0),%0\";\n \n       case 1:\n-\toutput_asm_insn (\\\"bras\\\\t%2,.+10\\\", operands);\n-\toutput_asm_insn (\\\"xc\\\\t%O0(1,%R0),%0\\\", operands);\n-\treturn \\\"ex\\\\t%1,0(%2)\\\";\n+\toutput_asm_insn (\"bras\\\\t%2,.+10\", operands);\n+\toutput_asm_insn (\"xc\\\\t%O0(1,%R0),%0\", operands);\n+\treturn \"ex\\\\t%1,0(%2)\";\n \n       default:\n         abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"SS,NN\")\n    (set_attr \"type\"    \"cs,cs\")\n    (set_attr \"atype\"   \"*,agen\")\n@@ -2016,22 +1995,21 @@\n    (use (match_operand:DI 2 \"nonmemory_operand\" \"n,a\"))\n    (clobber (match_scratch:DI 3 \"=X,&a\"))]\n   \"TARGET_64BIT\"\n-  \"*\n {\n   switch (which_alternative)\n     {\n       case 0:\n-\treturn \\\"clc\\\\t%O0(%b2+1,%R0),%1\\\";\n+\treturn \"clc\\\\t%O0(%b2+1,%R0),%1\";\n \n       case 1:\n-\toutput_asm_insn (\\\"bras\\\\t%3,.+10\\\", operands);\n-\toutput_asm_insn (\\\"clc\\\\t%O0(1,%R0),%1\\\", operands);\n-\treturn \\\"ex\\\\t%2,0(%3)\\\";\n+\toutput_asm_insn (\"bras\\\\t%3,.+10\", operands);\n+\toutput_asm_insn (\"clc\\\\t%O0(1,%R0),%1\", operands);\n+\treturn \"ex\\\\t%2,0(%3)\";\n \n       default:\n         abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"SS,NN\")\n    (set_attr \"type\"    \"cs,cs\")\n    (set_attr \"atype\"   \"*,agen\")\n@@ -2044,22 +2022,21 @@\n    (use (match_operand:SI 2 \"nonmemory_operand\" \"n,a\"))\n    (clobber (match_scratch:SI 3 \"=X,&a\"))]\n   \"!TARGET_64BIT\"\n-  \"*\n {\n   switch (which_alternative)\n     {\n       case 0:\n-\treturn \\\"clc\\\\t%O0(%b2+1,%R0),%1\\\";\n+\treturn \"clc\\\\t%O0(%b2+1,%R0),%1\";\n \n       case 1:\n-\toutput_asm_insn (\\\"bras\\\\t%3,.+10\\\", operands);\n-\toutput_asm_insn (\\\"clc\\\\t%O0(1,%R0),%1\\\", operands);\n-\treturn \\\"ex\\\\t%2,0(%3)\\\";\n+\toutput_asm_insn (\"bras\\\\t%3,.+10\", operands);\n+\toutput_asm_insn (\"clc\\\\t%O0(1,%R0),%1\", operands);\n+\treturn \"ex\\\\t%2,0(%3)\";\n \n       default:\n         abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\" \"SS,NN\")\n    (set_attr \"type\"    \"cs,cs\")\n    (set_attr \"atype\"   \"*,agen\")\n@@ -2099,14 +2076,13 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (compare:SI (reg:CCS 33) (const_int 0)))]\n   \"\"\n-  \"*\n {\n-   output_asm_insn (\\\"lhi\\\\t%0,1\\\", operands);\n-   output_asm_insn (\\\"jh\\\\t.+12\\\", operands);\n-   output_asm_insn (\\\"jl\\\\t.+6\\\", operands);\n-   output_asm_insn (\\\"sr\\\\t%0,%0\\\", operands);\n-   return \\\"lcr\\\\t%0,%0\\\";\n-}\"\n+   output_asm_insn (\"lhi\\\\t%0,1\", operands);\n+   output_asm_insn (\"jh\\\\t.+12\", operands);\n+   output_asm_insn (\"jl\\\\t.+6\", operands);\n+   output_asm_insn (\"sr\\\\t%0,%0\", operands);\n+   return \"lcr\\\\t%0,%0\";\n+}\n   [(set_attr \"op_type\" \"NN\")\n    (set_attr \"length\"  \"16\")\n    (set_attr \"type\"    \"other\")])\n@@ -2115,14 +2091,13 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (compare:DI (reg:CCS 33) (const_int 0)))]\n   \"TARGET_64BIT\"\n-  \"*\n {\n-   output_asm_insn (\\\"lghi\\\\t%0,1\\\", operands);\n-   output_asm_insn (\\\"jh\\\\t.+12\\\", operands);\n-   output_asm_insn (\\\"jl\\\\t.+6\\\", operands);\n-   output_asm_insn (\\\"sgr\\\\t%0,%0\\\", operands);\n-   return \\\"lcgr\\\\t%0,%0\\\";\n-}\"\n+   output_asm_insn (\"lghi\\\\t%0,1\", operands);\n+   output_asm_insn (\"jh\\\\t.+12\", operands);\n+   output_asm_insn (\"jl\\\\t.+6\", operands);\n+   output_asm_insn (\"sgr\\\\t%0,%0\", operands);\n+   return \"lcgr\\\\t%0,%0\";\n+}\n   [(set_attr \"op_type\" \"NN\")\n    (set_attr \"length\"  \"22\")\n    (set_attr \"type\"    \"other\")])\n@@ -2134,7 +2109,7 @@\n \n (define_insn \"*sethighqisi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (unspec:SI [(match_operand:QI 1 \"s_operand\" \"Q,S\")] 10))\n+        (unspec:SI [(match_operand:QI 1 \"s_operand\" \"Q,S\")] UNSPEC_SETHIGH))\n    (clobber (reg:CC 33))]\n   \"\"\n   \"@\n@@ -2144,7 +2119,7 @@\n \n (define_insn \"*sethighhisi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (unspec:SI [(match_operand:HI 1 \"s_operand\" \"Q,S\")] 10))\n+        (unspec:SI [(match_operand:HI 1 \"s_operand\" \"Q,S\")] UNSPEC_SETHIGH))\n    (clobber (reg:CC 33))]\n   \"\"\n   \"@\n@@ -2154,15 +2129,15 @@\n \n (define_insn \"*sethighqidi_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (unspec:DI [(match_operand:QI 1 \"s_operand\" \"QS\")] 10))\n+        (unspec:DI [(match_operand:QI 1 \"s_operand\" \"QS\")] UNSPEC_SETHIGH))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT\"\n   \"icmh\\\\t%0,8,%1\"\n   [(set_attr \"op_type\" \"RSY\")])\n \n (define_insn \"*sethighqidi_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (unspec:DI [(match_operand:QI 1 \"s_operand\" \"Q,S\")] 10))\n+        (unspec:DI [(match_operand:QI 1 \"s_operand\" \"Q,S\")] UNSPEC_SETHIGH))\n    (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n   \"@\n@@ -2181,14 +2156,13 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n-    [(set (match_dup 0) (unspec:SI [(match_dup 1)] 10))\n+    [(set (match_dup 0) (unspec:SI [(match_dup 1)] UNSPEC_SETHIGH))\n      (clobber (reg:CC 33))])\n     (set (match_dup 0) (lshiftrt:SI (match_dup 0) (match_dup 2)))]\n-  \"\n {\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   operands[1] = change_address (operands[1], QImode, 0);\n-}\"\n+}\n   [(set_attr \"atype\"   \"agen\")])\n \n (define_insn_and_split \"*extracthi\"\n@@ -2202,14 +2176,13 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n-    [(set (match_dup 0) (unspec:SI [(match_dup 1)] 10))\n+    [(set (match_dup 0) (unspec:SI [(match_dup 1)] UNSPEC_SETHIGH))\n      (clobber (reg:CC 33))])\n     (set (match_dup 0) (lshiftrt:SI (match_dup 0) (match_dup 2)))]\n-  \"\n {\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   operands[1] = change_address (operands[1], HImode, 0);\n-}\"\n+}\n   [(set_attr \"atype\"   \"agen\")])\n \n ;\n@@ -2315,7 +2288,7 @@\n         (sign_extend:DI (match_operand:QI 1 \"s_operand\" \"\")))]\n   \"TARGET_64BIT && !TARGET_LONG_DISPLACEMENT && !reload_completed\"\n   [(parallel\n-    [(set (match_dup 0) (unspec:DI [(match_dup 1)] 10))\n+    [(set (match_dup 0) (unspec:DI [(match_dup 1)] UNSPEC_SETHIGH))\n      (clobber (reg:CC 33))])\n    (parallel\n     [(set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 56)))\n@@ -2377,7 +2350,7 @@\n         (sign_extend:SI (match_operand:QI 1 \"s_operand\" \"\")))]\n   \"(!TARGET_64BIT || !TARGET_LONG_DISPLACEMENT) && !reload_completed\"\n   [(parallel\n-    [(set (match_dup 0) (unspec:SI [(match_dup 1)] 10))\n+    [(set (match_dup 0) (unspec:SI [(match_dup 1)] UNSPEC_SETHIGH))\n      (clobber (reg:CC 33))])\n    (parallel\n     [(set (match_dup 0) (ashiftrt:SI (match_dup 0) (const_int 24)))\n@@ -2600,7 +2573,6 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (unsigned_fix:DI (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"\n {\n   rtx label1 = gen_label_rtx ();\n   rtx label2 = gen_label_rtx ();\n@@ -2609,35 +2581,34 @@\n \n   emit_insn (gen_cmpdf (operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (\n-          REAL_VALUE_ATOF (\\\"9223372036854775808.0\\\", DFmode), DFmode)));\n+          REAL_VALUE_ATOF (\"9223372036854775808.0\", DFmode), DFmode)));\n   emit_jump_insn (gen_blt (label1));\n   emit_insn (gen_subdf3 (temp, operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (\n-          REAL_VALUE_ATOF (\\\"18446744073709551616.0\\\", DFmode), DFmode)));\n+          REAL_VALUE_ATOF (\"18446744073709551616.0\", DFmode), DFmode)));\n   emit_insn (gen_fix_truncdfdi2_ieee (operands[0], temp, GEN_INT(7)));\n   emit_jump (label2);\n \n   emit_label (label1);\n   emit_insn (gen_fix_truncdfdi2_ieee (operands[0], operands[1], GEN_INT(5)));\n   emit_label (label2);\n   DONE;\n-}\")\n+})\n \n (define_expand \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (fix:DI (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"\n {\n   operands[1] = force_reg (DFmode, operands[1]);\n   emit_insn (gen_fix_truncdfdi2_ieee (operands[0], operands[1], GEN_INT(5)));\n   DONE;\n-}\")\n+})\n \n (define_insn \"fix_truncdfdi2_ieee\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (fix:DI (match_operand:DF 1 \"register_operand\" \"f\")))\n-   (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"K\")] 1)\n+   (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"K\")] UNSPEC_ROUND)\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n   \"cgdbr\\\\t%0,%h2,%1\"\n@@ -2652,7 +2623,6 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n         (unsigned_fix:SI (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"\n {\n   rtx label1 = gen_label_rtx ();\n   rtx label2 = gen_label_rtx ();\n@@ -2661,25 +2631,24 @@\n   operands[1] = force_reg (DFmode,operands[1]);\n   emit_insn (gen_cmpdf (operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (\n-          REAL_VALUE_ATOF (\\\"2147483648.0\\\", DFmode), DFmode)));\n+          REAL_VALUE_ATOF (\"2147483648.0\", DFmode), DFmode)));\n   emit_jump_insn (gen_blt (label1));\n   emit_insn (gen_subdf3 (temp, operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (\n-          REAL_VALUE_ATOF (\\\"4294967296.0\\\", DFmode), DFmode)));\n+          REAL_VALUE_ATOF (\"4294967296.0\", DFmode), DFmode)));\n   emit_insn (gen_fix_truncdfsi2_ieee (operands[0], temp, GEN_INT (7)));\n   emit_jump (label2);\n \n   emit_label (label1);\n   emit_insn (gen_fix_truncdfsi2_ieee (operands[0], operands[1], GEN_INT (5)));\n   emit_label (label2);\n   DONE;\n-}\")\n+})\n \n (define_expand \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n         (fix:SI (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"\n {\n   if (TARGET_IBM_FLOAT)\n     {\n@@ -2700,12 +2669,12 @@\n     }\n \n   DONE;\n-}\")\n+})\n \n (define_insn \"fix_truncdfsi2_ieee\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (fix:SI (match_operand:DF 1 \"register_operand\" \"f\")))\n-    (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"K\")] 1)\n+    (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"K\")] UNSPEC_ROUND)\n     (clobber (reg:CC 33))]\n   \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n   \"cfdbr\\\\t%0,%h2,%1\"\n@@ -2720,14 +2689,13 @@\n    (use (match_operand:BLK 4 \"memory_operand\" \"m\"))\n    (clobber (reg:CC 33))]\n   \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"*\n {\n-   output_asm_insn (\\\"sd\\\\t%1,%2\\\", operands);\n-   output_asm_insn (\\\"aw\\\\t%1,%3\\\", operands);\n-   output_asm_insn (\\\"std\\\\t%1,%4\\\", operands);\n-   output_asm_insn (\\\"xi\\\\t%N4,128\\\", operands);\n-   return \\\"l\\\\t%0,%N4\\\";\n-}\"\n+   output_asm_insn (\"sd\\\\t%1,%2\", operands);\n+   output_asm_insn (\"aw\\\\t%1,%3\", operands);\n+   output_asm_insn (\"std\\\\t%1,%4\", operands);\n+   output_asm_insn (\"xi\\\\t%N4,128\", operands);\n+   return \"l\\\\t%0,%N4\";\n+}\n   [(set_attr \"op_type\" \"NN\")\n    (set_attr \"type\"    \"ftoi\")\n    (set_attr \"atype\"   \"agen\")\n@@ -2741,7 +2709,6 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (unsigned_fix:DI (match_operand:SF 1 \"register_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"\n {\n   rtx label1 = gen_label_rtx ();\n   rtx label2 = gen_label_rtx ();\n@@ -2750,36 +2717,35 @@\n   operands[1] = force_reg (SFmode, operands[1]);\n   emit_insn (gen_cmpsf (operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (\n-          REAL_VALUE_ATOF (\\\"9223372036854775808.0\\\", SFmode), SFmode)));\n+          REAL_VALUE_ATOF (\"9223372036854775808.0\", SFmode), SFmode)));\n   emit_jump_insn (gen_blt (label1));\n \n   emit_insn (gen_subsf3 (temp, operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (\n-          REAL_VALUE_ATOF (\\\"18446744073709551616.0\\\", SFmode), SFmode)));\n+          REAL_VALUE_ATOF (\"18446744073709551616.0\", SFmode), SFmode)));\n   emit_insn (gen_fix_truncsfdi2_ieee (operands[0], temp, GEN_INT(7)));\n   emit_jump (label2);\n \n   emit_label (label1);\n   emit_insn (gen_fix_truncsfdi2_ieee (operands[0], operands[1], GEN_INT(5)));\n   emit_label (label2);\n   DONE;\n-}\")\n+})\n \n (define_expand \"fix_truncsfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (fix:DI (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"\n {\n   operands[1] = force_reg (SFmode, operands[1]);\n   emit_insn (gen_fix_truncsfdi2_ieee (operands[0], operands[1], GEN_INT(5)));\n   DONE;\n-}\")\n+})\n \n (define_insn \"fix_truncsfdi2_ieee\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (fix:DI (match_operand:SF 1 \"register_operand\"  \"f\")))\n-   (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"K\")] 1)\n+   (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"K\")] UNSPEC_ROUND)\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n   \"cgebr\\\\t%0,%h2,%1\"\n@@ -2794,7 +2760,6 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n         (unsigned_fix:SI (match_operand:SF 1 \"register_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"\n {\n   rtx label1 = gen_label_rtx ();\n   rtx label2 = gen_label_rtx ();\n@@ -2803,25 +2768,24 @@\n   operands[1] = force_reg (SFmode, operands[1]);\n   emit_insn (gen_cmpsf (operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (\n-          REAL_VALUE_ATOF (\\\"2147483648.0\\\", SFmode), SFmode)));\n+          REAL_VALUE_ATOF (\"2147483648.0\", SFmode), SFmode)));\n   emit_jump_insn (gen_blt (label1));\n   emit_insn (gen_subsf3 (temp, operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (\n-          REAL_VALUE_ATOF (\\\"4294967296.0\\\", SFmode), SFmode)));\n+          REAL_VALUE_ATOF (\"4294967296.0\", SFmode), SFmode)));\n   emit_insn (gen_fix_truncsfsi2_ieee (operands[0], temp, GEN_INT (7)));\n   emit_jump (label2);\n \n   emit_label (label1);\n   emit_insn (gen_fix_truncsfsi2_ieee (operands[0], operands[1], GEN_INT (5)));\n   emit_label (label2);\n   DONE;\n-}\")\n+})\n \n (define_expand \"fix_truncsfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n         (fix:SI (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"\n {\n   if (TARGET_IBM_FLOAT)\n     {\n@@ -2837,12 +2801,12 @@\n     }\n \n   DONE;\n-}\")\n+})\n \n (define_insn \"fix_truncsfsi2_ieee\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (fix:SI (match_operand:SF 1 \"register_operand\" \"f\")))\n-    (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"K\")] 1)\n+    (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"K\")] UNSPEC_ROUND)\n     (clobber (reg:CC 33))]\n   \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n   \"cfebr\\\\t%0,%h2,%1\"\n@@ -2885,7 +2849,6 @@\n           (float:DF (match_operand:SI 1 \"register_operand\" \"\")))\n      (clobber (reg:CC 33))])]\n   \"TARGET_HARD_FLOAT\"\n-  \"\n {\n   if (TARGET_IBM_FLOAT)\n     {\n@@ -2897,7 +2860,7 @@\n       emit_insn (gen_floatsidf2_ibm (operands[0], operands[1], two31, temp));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"floatsidf2_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n@@ -2915,14 +2878,13 @@\n    (use (match_operand:BLK 3 \"memory_operand\" \"m\"))\n    (clobber (reg:CC 33))]\n   \"TARGET_HARD_FLOAT && TARGET_IBM_FLOAT\"\n-  \"*\n {\n-   output_asm_insn (\\\"st\\\\t%1,%N3\\\", operands);\n-   output_asm_insn (\\\"xi\\\\t%N3,128\\\", operands);\n-   output_asm_insn (\\\"mvc\\\\t%O3(4,%R3),%2\\\", operands);\n-   output_asm_insn (\\\"ld\\\\t%0,%3\\\", operands);\n-   return \\\"sd\\\\t%0,%2\\\";\n-}\"\n+   output_asm_insn (\"st\\\\t%1,%N3\", operands);\n+   output_asm_insn (\"xi\\\\t%N3,128\", operands);\n+   output_asm_insn (\"mvc\\\\t%O3(4,%R3),%2\", operands);\n+   output_asm_insn (\"ld\\\\t%0,%3\", operands);\n+   return \"sd\\\\t%0,%2\";\n+}\n   [(set_attr \"op_type\" \"NN\")\n    (set_attr \"type\"    \"other\" )\n    (set_attr \"atype\"   \"agen\")\n@@ -2938,7 +2900,6 @@\n           (float:SF (match_operand:SI 1 \"register_operand\" \"\")))\n      (clobber (reg:CC 33))])]\n   \"TARGET_HARD_FLOAT\"\n-  \"\n {\n   if (TARGET_IBM_FLOAT)\n     {\n@@ -2948,7 +2909,7 @@\n       emit_insn (gen_truncdfsf2 (operands[0], temp));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"floatsisf2_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n@@ -2994,14 +2955,13 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n         (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"\n {\n   if (TARGET_IBM_FLOAT)\n     {\n       emit_insn (gen_extendsfdf2_ibm (operands[0], operands[1]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"extendsfdf2_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n@@ -3233,11 +3193,10 @@\n               (match_operand:DI 1 \"s390_plus_operand\" \"\")\n               (match_operand:DI 2 \"register_operand\" \"=&a\")])]\n   \"TARGET_64BIT\"\n-  \"\n {\n   s390_expand_plus_operand (operands[0], operands[1], operands[2]);\n   DONE;\n-}\")\n+})\n \n \n ;\n@@ -3461,11 +3420,10 @@\n               (match_operand:SI 1 \"s390_plus_operand\" \"\")\n               (match_operand:SI 2 \"register_operand\" \"=&a\")])]\n   \"!TARGET_64BIT\"\n-  \"\n {\n   s390_expand_plus_operand (operands[0], operands[1], operands[2]);\n   DONE;\n-}\")\n+})\n \n \n ;\n@@ -3902,7 +3860,6 @@\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\"))))]\n   \"!TARGET_64BIT\"\n-  \"\n {\n   rtx insn;\n \n@@ -3916,7 +3873,7 @@\n \t\t\t\tgen_rtx_SIGN_EXTEND (DImode, operands[2])),\n \t\t\t   REG_NOTES (insn));\n   DONE;\n-}\")\n+})\n \n (define_insn \"mulsi_6432\"\n    [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -4022,7 +3979,6 @@\n \t\t   (mod:DI (match_dup 1) (match_dup 2)))])\n    (clobber (match_dup 4))]\n   \"TARGET_64BIT\"\n-  \"\n {\n   rtx insn, div_equal, mod_equal, equal;\n \n@@ -4051,7 +4007,7 @@\n         gen_rtx_EXPR_LIST (REG_EQUAL, mod_equal, REG_NOTES (insn));\n \n   DONE;\n-}\")\n+})\n \n (define_insn \"divmodtidi3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=d,d\")\n@@ -4101,7 +4057,6 @@\n \t\t   (umod:DI (match_dup 1) (match_dup 2)))])\n    (clobber (match_dup 4))]\n   \"TARGET_64BIT\"\n-  \"\n {\n   rtx insn, div_equal, mod_equal, equal;\n \n@@ -4130,7 +4085,7 @@\n         gen_rtx_EXPR_LIST (REG_EQUAL, mod_equal, REG_NOTES (insn));\n \n   DONE;\n-}\")\n+})\n \n (define_insn \"udivmodtidi3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=d,d\")\n@@ -4163,7 +4118,6 @@\n \t\t   (mod:SI (match_dup 1) (match_dup 2)))])\n    (clobber (match_dup 4))]\n   \"!TARGET_64BIT\"\n-  \"\n {\n   rtx insn, div_equal, mod_equal, equal;\n \n@@ -4190,7 +4144,7 @@\n         gen_rtx_EXPR_LIST (REG_EQUAL, mod_equal, REG_NOTES (insn));\n \n   DONE;\n-}\")\n+})\n \n (define_insn \"divmoddisi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -4222,7 +4176,6 @@\n                  (match_operand:SI 2 \"general_operand\" \"\")))\n    (clobber (match_dup 3))]\n   \"!TARGET_64BIT\"\n-  \"\n {\n   rtx insn, udiv_equal, umod_equal, equal;\n \n@@ -4306,15 +4259,14 @@\n     }\n   emit_move_insn (operands[0], operands[0]);\n   DONE;\n-}\")\n+})\n \n (define_expand \"umodsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (umod:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n                  (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n    (clobber (match_dup 3))]\n   \"!TARGET_64BIT\"\n-  \"\n {\n   rtx insn, udiv_equal, umod_equal, equal;\n \n@@ -4398,7 +4350,7 @@\n       emit_label (label3);\n     }\n   DONE;\n-}\")\n+})\n \n ;\n ; divdf3 instruction pattern(s).\n@@ -4514,20 +4466,19 @@\n                 (match_operand:DI 2 \"immediate_operand\" \"n\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_single_hi (operands[2], DImode, -1) >= 0\"\n-  \"*\n {\n   int part = s390_single_hi (operands[2], DImode, -1);\n   operands[2] = GEN_INT (s390_extract_hi (operands[2], DImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"nihh\\\\t%0,%x2\\\";\n-      case 1: return \\\"nihl\\\\t%0,%x2\\\";\n-      case 2: return \\\"nilh\\\\t%0,%x2\\\";\n-      case 3: return \\\"nill\\\\t%0,%x2\\\";\n+      case 0: return \"nihh\\\\t%0,%x2\";\n+      case 1: return \"nihl\\\\t%0,%x2\";\n+      case 2: return \"nilh\\\\t%0,%x2\";\n+      case 3: return \"nill\\\\t%0,%x2\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\"  \"RI\")])\n \n (define_insn \"anddi3\"\n@@ -4596,18 +4547,17 @@\n                 (match_operand:SI 2 \"immediate_operand\" \"n\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_single_hi (operands[2], SImode, -1) >= 0\"\n-  \"*\n {\n   int part = s390_single_hi (operands[2], SImode, -1);\n   operands[2] = GEN_INT (s390_extract_hi (operands[2], SImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"nilh\\\\t%0,%x2\\\";\n-      case 1: return \\\"nill\\\\t%0,%x2\\\";\n+      case 0: return \"nilh\\\\t%0,%x2\";\n+      case 1: return \"nill\\\\t%0,%x2\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\"  \"RI\")])\n \n (define_insn \"andsi3\"\n@@ -4770,20 +4720,19 @@\n                 (match_operand:DI 2 \"immediate_operand\" \"n\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_single_hi (operands[2], DImode, 0) >= 0\"\n-  \"*\n {\n   int part = s390_single_hi (operands[2], DImode, 0);\n   operands[2] = GEN_INT (s390_extract_hi (operands[2], DImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"oihh\\\\t%0,%x2\\\";\n-      case 1: return \\\"oihl\\\\t%0,%x2\\\";\n-      case 2: return \\\"oilh\\\\t%0,%x2\\\";\n-      case 3: return \\\"oill\\\\t%0,%x2\\\";\n+      case 0: return \"oihh\\\\t%0,%x2\";\n+      case 1: return \"oihl\\\\t%0,%x2\";\n+      case 2: return \"oilh\\\\t%0,%x2\";\n+      case 3: return \"oill\\\\t%0,%x2\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\"  \"RI\")])\n \n (define_insn \"iordi3\"\n@@ -4852,18 +4801,17 @@\n                 (match_operand:SI 2 \"immediate_operand\" \"n\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_single_hi (operands[2], SImode, 0) >= 0\"\n-  \"*\n {\n   int part = s390_single_hi (operands[2], SImode, 0);\n   operands[2] = GEN_INT (s390_extract_hi (operands[2], SImode, part));\n \n   switch (part)\n     {\n-      case 0: return \\\"oilh\\\\t%0,%x2\\\";\n-      case 1: return \\\"oill\\\\t%0,%x2\\\";\n+      case 0: return \"oilh\\\\t%0,%x2\";\n+      case 1: return \"oill\\\\t%0,%x2\";\n       default: abort ();\n     }\n-}\"\n+}\n   [(set_attr \"op_type\"  \"RI\")])\n \n (define_insn \"iorsi3\"\n@@ -5208,18 +5156,17 @@\n         (neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n    (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n-  \"*\n {\n   rtx xop[1];\n   xop[0] = gen_label_rtx ();\n-  output_asm_insn (\\\"lcr\\\\t%0,%1\\\", operands);\n-  output_asm_insn (\\\"lcr\\\\t%N0,%N1\\\", operands);\n-  output_asm_insn (\\\"je\\\\t%l0\\\", xop);\n-  output_asm_insn (\\\"bctr\\\\t%0,0\\\", operands);\n-  (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n+  output_asm_insn (\"lcr\\\\t%0,%1\", operands);\n+  output_asm_insn (\"lcr\\\\t%N0,%N1\", operands);\n+  output_asm_insn (\"je\\\\t%l0\", xop);\n+  output_asm_insn (\"bctr\\\\t%0,0\", operands);\n+  (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n \t\t\t     CODE_LABEL_NUMBER (xop[0]));\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"op_type\"  \"NN\")\n    (set_attr \"type\"     \"other\")\n    (set_attr \"length\"   \"10\")])\n@@ -5760,7 +5707,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bne\"\n   [(set (reg:CCZ 33) (compare:CCZ (match_dup 1) (match_dup 2)))\n@@ -5769,7 +5716,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bgt\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5778,7 +5725,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bgtu\"\n   [(set (reg:CCU 33) (compare:CCU (match_dup 1) (match_dup 2)))\n@@ -5787,7 +5734,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"blt\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5796,7 +5743,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bltu\"\n   [(set (reg:CCU 33) (compare:CCU (match_dup 1) (match_dup 2)))\n@@ -5805,7 +5752,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bge\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5814,7 +5761,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bgeu\"\n   [(set (reg:CCU 33) (compare:CCU (match_dup 1) (match_dup 2)))\n@@ -5823,7 +5770,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"ble\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5832,7 +5779,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bleu\"\n   [(set (reg:CCU 33) (compare:CCU (match_dup 1) (match_dup 2)))\n@@ -5841,7 +5788,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bunordered\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5850,7 +5797,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bordered\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5859,7 +5806,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"buneq\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5868,7 +5815,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bungt\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5877,7 +5824,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bunlt\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5886,7 +5833,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bunge\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5895,7 +5842,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bunle\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5904,7 +5851,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n (define_expand \"bltgt\"\n   [(set (reg:CCS 33) (compare:CCS (match_dup 1) (match_dup 2)))\n@@ -5913,7 +5860,7 @@\n                       (label_ref (match_operand 0 \"\" \"\"))\n                       (pc)))]\n   \"\"\n-  \"{ operands[1] = s390_compare_op0; operands[2] = s390_compare_op1; }\")\n+  \"operands[1] = s390_compare_op0; operands[2] = s390_compare_op1;\")\n \n \n ;;\n@@ -5927,15 +5874,14 @@\n \t (label_ref (match_operand 0 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"*\n {\n   if (get_attr_length (insn) == 4)\n-    return \\\"j%C1\\\\t%l0\\\";\n+    return \"j%C1\\\\t%l0\";\n   else if (TARGET_64BIT)\n-    return \\\"jg%C1\\\\t%l0\\\";\n+    return \"jg%C1\\\\t%l0\";\n   else\n     abort ();\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"branch\")\n    (set (attr \"length\")\n@@ -5953,13 +5899,12 @@\n \t (match_operand 0 \"address_operand\" \"U\")\n \t (pc)))]\n   \"\"\n-  \"*\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n-    return \\\"b%C1r\\\\t%0\\\";\n+    return \"b%C1r\\\\t%0\";\n   else\n-    return \\\"b%C1\\\\t%a0\\\";\n-}\"\n+    return \"b%C1\\\\t%a0\";\n+}\n   [(set (attr \"op_type\")\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n@@ -5978,15 +5923,14 @@\n          (pc)\n \t (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   if (get_attr_length (insn) == 4)\n-    return \\\"j%D1\\\\t%l0\\\";\n+    return \"j%D1\\\\t%l0\";\n   else if (TARGET_64BIT)\n-    return \\\"jg%D1\\\\t%l0\\\";\n+    return \"jg%D1\\\\t%l0\";\n   else\n     abort ();\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"    \"branch\")\n    (set (attr \"length\")\n@@ -6004,13 +5948,12 @@\n          (pc)\n \t (match_operand 0 \"address_operand\" \"U\")))]\n   \"\"\n-  \"*\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n-    return \\\"b%D1r\\\\t%0\\\";\n+    return \"b%D1r\\\\t%0\";\n   else\n-    return \\\"b%D1\\\\t%a0\\\";\n-}\"\n+    return \"b%D1\\\\t%a0\";\n+}\n   [(set (attr \"op_type\")\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n@@ -6034,7 +5977,6 @@\n \t\t\t    [(match_dup 2) (const_int 0)])\n \t    (match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n    enum machine_mode ccmode;\n \n@@ -6044,7 +5986,7 @@\n \t\t\t        s390_compare_op0, s390_compare_op1);\n    operands[2] = gen_rtx_REG (ccmode, 33);\n    operands[3] = gen_rtx_COMPARE (ccmode, s390_compare_op0, s390_compare_op1);\n-}\")\n+})\n \n (define_insn \"*trap\"\n   [(trap_if (match_operator 0 \"comparison_operator\" [(reg 33) (const_int 0)])\n@@ -6067,7 +6009,6 @@\n    (use (match_operand 3 \"\" \"\"))        ; loop level\n    (use (match_operand 4 \"\" \"\"))]       ; label\n   \"\"\n-  \"\n {\n   if (GET_MODE (operands[0]) == SImode)\n     emit_jump_insn (gen_doloop_si (operands[4], operands[0], operands[0]));\n@@ -6077,7 +6018,7 @@\n     FAIL;\n \n   DONE;\n-}\")\n+})\n \n (define_insn \"doloop_si\"\n   [(set (pc)\n@@ -6091,15 +6032,14 @@\n    (clobber (match_scratch:SI 3 \"=X,&d\"))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"*\n {\n   if (which_alternative != 0)\n-    return \\\"#\\\";\n+    return \"#\";\n   else if (get_attr_length (insn) == 4)\n-    return \\\"brct\\\\t%1,%l0\\\";\n+    return \"brct\\\\t%1,%l0\";\n   else\n     abort ();\n-}\"\n+}\n   [(set_attr \"op_type\"  \"RI\")\n    (set_attr \"type\"  \"branch\")\n    (set (attr \"length\")\n@@ -6122,13 +6062,12 @@\n    (clobber (match_scratch:SI 3 \"=X,&d\"))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"*\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n-    return \\\"bctr\\\\t%1,%0\\\";\n+    return \"bctr\\\\t%1,%0\";\n   else\n-    return \\\"bct\\\\t%1,%a0\\\";\n-}\"\n+    return \"bct\\\\t%1,%a0\";\n+}\n   [(set (attr \"op_type\")\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n@@ -6171,15 +6110,14 @@\n    (clobber (match_scratch:DI 3 \"=X,&d\"))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT\"\n-  \"*\n {\n   if (which_alternative != 0)\n-    return \\\"#\\\";\n+    return \"#\";\n   else if (get_attr_length (insn) == 4)\n-    return \\\"brctg\\\\t%1,%l0\\\";\n+    return \"brctg\\\\t%1,%l0\";\n   else\n     abort ();\n-}\"\n+}\n   [(set_attr \"op_type\"  \"RI\")\n    (set_attr \"type\"  \"branch\")\n    (set (attr \"length\")\n@@ -6198,13 +6136,12 @@\n    (clobber (match_scratch:DI 3 \"=X,&d\"))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"*\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RRE)\n-    return \\\"bctgr\\\\t%1,%0\\\";\n+    return \"bctgr\\\\t%1,%0\";\n   else\n-    return \\\"bctg\\\\t%1,%a0\\\";\n-}\"\n+    return \"bctg\\\\t%1,%a0\";\n+}\n   [(set (attr \"op_type\")\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RRE\") (const_string \"RXE\")))\n@@ -6246,15 +6183,14 @@\n (define_insn \"jump\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n-  \"*\n {\n   if (get_attr_length (insn) == 4)\n-    return \\\"j\\\\t%l0\\\";\n+    return \"j\\\\t%l0\";\n   else if (TARGET_64BIT)\n-    return \\\"jg\\\\t%l0\\\";\n+    return \"jg\\\\t%l0\";\n   else\n     abort ();\n-}\"\n+}\n   [(set_attr \"op_type\" \"RI\")\n    (set_attr \"type\"  \"branch\")\n    (set (attr \"length\")\n@@ -6272,13 +6208,12 @@\n (define_insn \"indirect_jump\"\n  [(set (pc) (match_operand 0 \"address_operand\" \"U\"))]\n   \"\"\n-  \"*\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n-    return \\\"br\\\\t%0\\\";\n+    return \"br\\\\t%0\";\n   else\n-    return \\\"b\\\\t%a0\\\";\n-}\"\n+    return \"b\\\\t%a0\";\n+}\n   [(set (attr \"op_type\")\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n@@ -6293,13 +6228,12 @@\n  [(set (pc) (match_operand 0 \"address_operand\" \"U\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n-  \"*\n {\n   if (get_attr_op_type (insn) == OP_TYPE_RR)\n-    return \\\"br\\\\t%0\\\";\n+    return \"br\\\\t%0\";\n   else\n-    return \\\"b\\\\t%a0\\\";\n-}\"\n+    return \"b\\\\t%a0\";\n+}\n   [(set (attr \"op_type\")\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n@@ -6313,7 +6247,6 @@\n    (label_ref (match_operand 3 \"\" \"\"))\n    (label_ref (match_operand 4 \"\" \"\"))]\n   \"\"\n-  \"\n {\n    rtx index  = gen_reg_rtx (SImode);\n    rtx base   = gen_reg_rtx (Pmode);\n@@ -6344,7 +6277,7 @@\n    emit_jump_insn (gen_casesi_jump (target, operands[3]));\n \n    DONE;\n-}\")\n+})\n \n \n ;;\n@@ -6363,7 +6296,6 @@\n               (match_operand 1 \"\" \"\")\n               (match_operand 2 \"\" \"\")])]\n   \"\"\n-  \"\n {\n   int i;\n \n@@ -6382,13 +6314,13 @@\n   emit_insn (gen_blockage ());\n \n   DONE;\n-}\")\n+})\n \n ;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and\n ;; all of memory.  This blocks insns from being moved across this point.\n \n (define_insn \"blockage\"\n-  [(unspec_volatile [(const_int 0)] 0)]\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)]\n   \"\"\n   \"\"\n   [(set_attr \"type\"    \"none\")\n@@ -6405,7 +6337,6 @@\n          (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))]\n   \"\"\n-  \"\n {\n   rtx insn;\n \n@@ -6439,7 +6370,7 @@\n   insn = emit_call_insn (gen_call_exp (operands[0], operands[1],\n   \t\t\t\t       gen_rtx_REG (Pmode, RETURN_REGNUM)));\n   DONE;\n-}\")\n+})\n \n (define_expand \"call_exp\"\n   [(parallel [(call (match_operand 0 \"\" \"\")\n@@ -6515,7 +6446,6 @@\n               (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))]\n   \"\"\n-  \"\n {\n   rtx insn;\n \n@@ -6550,7 +6480,7 @@\n \t    gen_call_value_exp (operands[0], operands[1], operands[2],\n   \t\t\t\tgen_rtx_REG (Pmode, RETURN_REGNUM)));\n   DONE;\n-}\")\n+})\n \n (define_expand \"call_value_exp\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n@@ -6693,7 +6623,6 @@\n         (call (const_int 0) (const_int 0)))\n    (use (match_operand 1 \"\" \"\"))]\n   \"\"\n-  \"\n {\n   rtx insn, sym;\n \n@@ -6729,7 +6658,7 @@\n   CONST_OR_PURE_CALL_P (insn) = 1;\n \n   DONE;\n-}\")\n+})\n \n (define_expand \"call_value_tls_exp\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n@@ -6823,7 +6752,6 @@\n    (set (match_operand 0 \"general_operand\" \"\")\n         (reg 15))]\n  \"\"\n- \"\n {\n     rtx stack = gen_rtx (REG, Pmode, STACK_POINTER_REGNUM);\n     rtx chain = gen_rtx (MEM, Pmode, stack);\n@@ -6840,7 +6768,7 @@\n \n     emit_move_insn (operands[0], virtual_stack_dynamic_rtx);\n     DONE;\n-}\")\n+})\n \n \n ;\n@@ -6919,17 +6847,15 @@\n    (set (match_dup 0) (match_operand 1 \"register_operand\" \"\"))\n    (set (match_dup 3) (match_dup 2))]\n   \"\"\n-  \"\n {\n   operands[2] = gen_reg_rtx (Pmode);\n   operands[3] = gen_rtx_MEM (Pmode, operands[0]);\n-}\")\n+})\n \n (define_expand \"save_stack_nonlocal\"\n   [(match_operand 0 \"memory_operand\" \"\")\n    (match_operand 1 \"register_operand\" \"\")]\n   \"\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (Pmode);\n \n@@ -6942,13 +6868,12 @@\n                  TARGET_64BIT ? TImode : DImode),\n                  operands[1]);\n   DONE;\n-}\")\n+})\n \n (define_expand \"restore_stack_nonlocal\"\n   [(match_operand 0 \"register_operand\" \"\")\n    (match_operand 1 \"memory_operand\" \"\")]\n   \"\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (Pmode);\n \n@@ -6961,7 +6886,7 @@\n                  TARGET_64BIT ? TImode : DImode));\n   emit_move_insn (gen_rtx_MEM (Pmode, operands[0]), temp);\n   DONE;\n-}\")\n+})\n \n \n ;\n@@ -7122,20 +7047,12 @@\n (define_expand \"prologue\"\n   [(use (const_int 0))]\n   \"\"\n-  \"\n-{\n-      s390_emit_prologue ();\n-      DONE;\n-}\")\n+  \"s390_emit_prologue (); DONE;\")\n \n (define_expand \"epilogue\"\n   [(use (const_int 1))]\n   \"\"\n-  \"\n-{\n-      s390_emit_epilogue ();\n-      DONE;\n-}\")\n+  \"s390_emit_epilogue (); DONE;\")\n \n \n (define_insn \"*return_si\"\n@@ -7205,16 +7122,9 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (match_operand:SI 1 \"register_operand\" \"r\"))]\n    \"\"\n-   \"\n {\n- /*\n-  emit_insn (gen_zero_extendsidi2 (operands[0], operands[1]));\n-  emit_insn (gen_anddi3 (operands[0], operands[0], GEN_INT (0x7fffffff)));\n-  */\n-\n   emit_insn (gen_anddi3 (operands[0],\n \t\t\t gen_lowpart (DImode, operands[1]),\n \t\t\t GEN_INT (0x7fffffff)));\n-\n   DONE;\n-}\")\n+})"}]}