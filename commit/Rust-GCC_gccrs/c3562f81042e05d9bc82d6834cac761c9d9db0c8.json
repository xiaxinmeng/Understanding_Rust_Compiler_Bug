{"sha": "c3562f81042e05d9bc82d6834cac761c9d9db0c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM1NjJmODEwNDJlMDVkOWJjODJkNjgzNGNhYzc2MWM5ZDlkYjBjOA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-20T16:06:58Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-20T16:10:01Z"}, "message": "[ARM][GCC][10x]: MVE ACLE intrinsics \"add with carry across beats\" and \"beat-wise substract\".\n\nThis patch supports following MVE ACLE \"add with carry across beats\" intrinsics and \"beat-wise substract\" intrinsics.\n\nvadciq_s32, vadciq_u32, vadciq_m_s32, vadciq_m_u32, vadcq_s32, vadcq_u32, vadcq_m_s32, vadcq_m_u32, vsbciq_s32, vsbciq_u32, vsbciq_m_s32, vsbciq_m_u32, vsbcq_s32, vsbcq_u32, vsbcq_m_s32, vsbcq_m_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm-builtins.c (ARM_BUILTIN_GET_FPSCR_NZCVQC): Define.\n\t(ARM_BUILTIN_SET_FPSCR_NZCVQC): Likewise.\n\t(arm_init_mve_builtins): Add \"__builtin_arm_get_fpscr_nzcvqc\" and\n\t\"__builtin_arm_set_fpscr_nzcvqc\" to arm_builtin_decls array.\n\t(arm_expand_builtin): Define case ARM_BUILTIN_GET_FPSCR_NZCVQC\n\tand ARM_BUILTIN_SET_FPSCR_NZCVQC.\n\t* config/arm/arm_mve.h (vadciq_s32): Define macro.\n\t(vadciq_u32): Likewise.\n\t(vadciq_m_s32): Likewise.\n\t(vadciq_m_u32): Likewise.\n\t(vadcq_s32): Likewise.\n\t(vadcq_u32): Likewise.\n\t(vadcq_m_s32): Likewise.\n\t(vadcq_m_u32): Likewise.\n\t(vsbciq_s32): Likewise.\n\t(vsbciq_u32): Likewise.\n\t(vsbciq_m_s32): Likewise.\n\t(vsbciq_m_u32): Likewise.\n\t(vsbcq_s32): Likewise.\n\t(vsbcq_u32): Likewise.\n\t(vsbcq_m_s32): Likewise.\n\t(vsbcq_m_u32): Likewise.\n\t(__arm_vadciq_s32): Define intrinsic.\n\t(__arm_vadciq_u32): Likewise.\n\t(__arm_vadciq_m_s32): Likewise.\n\t(__arm_vadciq_m_u32): Likewise.\n\t(__arm_vadcq_s32): Likewise.\n\t(__arm_vadcq_u32): Likewise.\n\t(__arm_vadcq_m_s32): Likewise.\n\t(__arm_vadcq_m_u32): Likewise.\n\t(__arm_vsbciq_s32): Likewise.\n\t(__arm_vsbciq_u32): Likewise.\n\t(__arm_vsbciq_m_s32): Likewise.\n\t(__arm_vsbciq_m_u32): Likewise.\n\t(__arm_vsbcq_s32): Likewise.\n\t(__arm_vsbcq_u32): Likewise.\n\t(__arm_vsbcq_m_s32): Likewise.\n\t(__arm_vsbcq_m_u32): Likewise.\n\t(vadciq_m): Define polymorphic variant.\n\t(vadciq): Likewise.\n\t(vadcq_m): Likewise.\n\t(vadcq): Likewise.\n\t(vsbciq_m): Likewise.\n\t(vsbciq): Likewise.\n\t(vsbcq_m): Likewise.\n\t(vsbcq): Likewise.\n\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_NONE): Use builtin\n\tqualifier.\n\t(BINOP_UNONE_UNONE_UNONE): Likewise.\n\t(QUADOP_NONE_NONE_NONE_NONE_UNONE): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE): Likewise.\n\t* config/arm/mve.md (VADCIQ): Define iterator.\n\t(VADCIQ_M): Likewise.\n\t(VSBCQ): Likewise.\n\t(VSBCQ_M): Likewise.\n\t(VSBCIQ): Likewise.\n\t(VSBCIQ_M): Likewise.\n\t(VADCQ): Likewise.\n\t(VADCQ_M): Likewise.\n\t(mve_vadciq_m_<supf>v4si): Define RTL pattern.\n\t(mve_vadciq_<supf>v4si): Likewise.\n\t(mve_vadcq_m_<supf>v4si): Likewise.\n\t(mve_vadcq_<supf>v4si): Likewise.\n\t(mve_vsbciq_m_<supf>v4si): Likewise.\n\t(mve_vsbciq_<supf>v4si): Likewise.\n\t(mve_vsbcq_m_<supf>v4si): Likewise.\n\t(mve_vsbcq_<supf>v4si): Likewise.\n\t(get_fpscr_nzcvqc): Define isns.\n\t(set_fpscr_nzcvqc): Define isns.\n\t* config/arm/unspecs.md (UNSPEC_GET_FPSCR_NZCVQC): Define.\n\t(UNSPEC_SET_FPSCR_NZCVQC): Define.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n           Andre Vieira  <andre.simoesdiasvieira@arm.com>\n           Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vadciq_m_s32.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vadciq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadciq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadciq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadcq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadcq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadcq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vadcq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbciq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsbcq_u32.c: Likewise.", "tree": {"sha": "d9512f26101eacaf85edbeadff8ca9024be264fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9512f26101eacaf85edbeadff8ca9024be264fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3562f81042e05d9bc82d6834cac761c9d9db0c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3562f81042e05d9bc82d6834cac761c9d9db0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3562f81042e05d9bc82d6834cac761c9d9db0c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3562f81042e05d9bc82d6834cac761c9d9db0c8/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828878c35c8585978e3ac22deddbf10f33c0a576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828878c35c8585978e3ac22deddbf10f33c0a576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828878c35c8585978e3ac22deddbf10f33c0a576"}], "stats": {"total": 926, "additions": 923, "deletions": 3}, "files": [{"sha": "44888caaba02d99a93658a1ace1df3939df0f242", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -1,3 +1,79 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm-builtins.c (ARM_BUILTIN_GET_FPSCR_NZCVQC): Define.\n+\t(ARM_BUILTIN_SET_FPSCR_NZCVQC): Likewise.\t\n+\t(arm_init_mve_builtins): Add \"__builtin_arm_get_fpscr_nzcvqc\" and\n+\t\"__builtin_arm_set_fpscr_nzcvqc\" to arm_builtin_decls array. \n+\t(arm_expand_builtin): Define case ARM_BUILTIN_GET_FPSCR_NZCVQC\n+\tand ARM_BUILTIN_SET_FPSCR_NZCVQC.\n+\t* config/arm/arm_mve.h (vadciq_s32): Define macro.\n+\t(vadciq_u32): Likewise.\n+\t(vadciq_m_s32): Likewise.\n+\t(vadciq_m_u32): Likewise.\n+\t(vadcq_s32): Likewise.\n+\t(vadcq_u32): Likewise.\n+\t(vadcq_m_s32): Likewise.\n+\t(vadcq_m_u32): Likewise.\n+\t(vsbciq_s32): Likewise.\n+\t(vsbciq_u32): Likewise.\n+\t(vsbciq_m_s32): Likewise.\n+\t(vsbciq_m_u32): Likewise.\n+\t(vsbcq_s32): Likewise.\n+\t(vsbcq_u32): Likewise.\n+\t(vsbcq_m_s32): Likewise.\n+\t(vsbcq_m_u32): Likewise.\n+\t(__arm_vadciq_s32): Define intrinsic.\n+\t(__arm_vadciq_u32): Likewise.\n+\t(__arm_vadciq_m_s32): Likewise.\n+\t(__arm_vadciq_m_u32): Likewise.\n+\t(__arm_vadcq_s32): Likewise.\n+\t(__arm_vadcq_u32): Likewise.\n+\t(__arm_vadcq_m_s32): Likewise.\n+\t(__arm_vadcq_m_u32): Likewise.\n+\t(__arm_vsbciq_s32): Likewise.\n+\t(__arm_vsbciq_u32): Likewise.\n+\t(__arm_vsbciq_m_s32): Likewise.\n+\t(__arm_vsbciq_m_u32): Likewise.\n+\t(__arm_vsbcq_s32): Likewise.\n+\t(__arm_vsbcq_u32): Likewise.\n+\t(__arm_vsbcq_m_s32): Likewise.\n+\t(__arm_vsbcq_m_u32): Likewise.\n+\t(vadciq_m): Define polymorphic variant.\n+\t(vadciq): Likewise.\n+\t(vadcq_m): Likewise.\n+\t(vadcq): Likewise.\n+\t(vsbciq_m): Likewise.\n+\t(vsbciq): Likewise.\n+\t(vsbcq_m): Likewise.\n+\t(vsbcq): Likewise.\n+\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_NONE): Use builtin\n+\tqualifier.\n+\t(BINOP_UNONE_UNONE_UNONE): Likewise.\n+\t(QUADOP_NONE_NONE_NONE_NONE_UNONE): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE): Likewise.\n+\t* config/arm/mve.md (VADCIQ): Define iterator.\n+\t(VADCIQ_M): Likewise.\n+\t(VSBCQ): Likewise.\n+\t(VSBCQ_M): Likewise.\n+\t(VSBCIQ): Likewise.\n+\t(VSBCIQ_M): Likewise.\n+\t(VADCQ): Likewise.\n+\t(VADCQ_M): Likewise.\n+\t(mve_vadciq_m_<supf>v4si): Define RTL pattern.\n+\t(mve_vadciq_<supf>v4si): Likewise.\n+\t(mve_vadcq_m_<supf>v4si): Likewise.\n+\t(mve_vadcq_<supf>v4si): Likewise.\n+\t(mve_vsbciq_m_<supf>v4si): Likewise.\n+\t(mve_vsbciq_<supf>v4si): Likewise.\n+\t(mve_vsbcq_m_<supf>v4si): Likewise.\n+\t(mve_vsbcq_<supf>v4si): Likewise.\n+\t(get_fpscr_nzcvqc): Define isns.\n+\t(set_fpscr_nzcvqc): Define isns.\n+\t* config/arm/unspecs.md (UNSPEC_GET_FPSCR_NZCVQC): Define.\n+\t(UNSPEC_SET_FPSCR_NZCVQC): Define.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* config/arm/arm_mve.h (vddupq_x_n_u8): Define macro."}, {"sha": "96d8adcd37eb3caf51c71d66af0331f9d1924b92", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -1151,6 +1151,8 @@ enum arm_builtins\n \n   ARM_BUILTIN_GET_FPSCR,\n   ARM_BUILTIN_SET_FPSCR,\n+  ARM_BUILTIN_GET_FPSCR_NZCVQC,\n+  ARM_BUILTIN_SET_FPSCR_NZCVQC,\n \n   ARM_BUILTIN_CMSE_NONSECURE_CALLER,\n   ARM_BUILTIN_SIMD_LANE_CHECK,\n@@ -1752,6 +1754,22 @@ arm_init_mve_builtins (void)\n   arm_init_simd_builtin_scalar_types ();\n   arm_init_simd_builtin_types ();\n \n+  /* Add support for __builtin_{get,set}_fpscr_nzcvqc, used by MVE intrinsics\n+     that read and/or write the carry bit.  */\n+  tree get_fpscr_nzcvqc = build_function_type_list (intSI_type_node,\n+\t\t\t\t\t\t    NULL);\n+  tree set_fpscr_nzcvqc = build_function_type_list (void_type_node,\n+\t\t\t\t\t\t    intSI_type_node,\n+\t\t\t\t\t\t    NULL);\n+  arm_builtin_decls[ARM_BUILTIN_GET_FPSCR_NZCVQC]\n+    = add_builtin_function (\"__builtin_arm_get_fpscr_nzcvqc\", get_fpscr_nzcvqc,\n+\t\t\t    ARM_BUILTIN_GET_FPSCR_NZCVQC, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+  arm_builtin_decls[ARM_BUILTIN_SET_FPSCR_NZCVQC]\n+    = add_builtin_function (\"__builtin_arm_set_fpscr_nzcvqc\", set_fpscr_nzcvqc,\n+\t\t\t    ARM_BUILTIN_SET_FPSCR_NZCVQC, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+\n   for (i = 0; i < ARRAY_SIZE (mve_builtin_data); i++, fcode++)\n     {\n       arm_builtin_datum *d = &mve_builtin_data[i];\n@@ -3289,6 +3307,23 @@ arm_expand_builtin (tree exp,\n \n   switch (fcode)\n     {\n+    case ARM_BUILTIN_GET_FPSCR_NZCVQC:\n+    case ARM_BUILTIN_SET_FPSCR_NZCVQC:\n+      if (fcode == ARM_BUILTIN_GET_FPSCR_NZCVQC)\n+\t{\n+\t  icode = CODE_FOR_get_fpscr_nzcvqc;\n+\t  target = gen_reg_rtx (SImode);\n+\t  emit_insn (GEN_FCN (icode) (target));\n+\t  return target;\n+\t}\n+      else\n+\t{\n+\t  icode = CODE_FOR_set_fpscr_nzcvqc;\n+\t  op0 = expand_normal (CALL_EXPR_ARG (exp, 0));\n+\t  emit_insn (GEN_FCN (icode) (force_reg (SImode, op0)));\n+\t  return NULL_RTX;\n+\t}\n+\n     case ARM_BUILTIN_GET_FPSCR:\n     case ARM_BUILTIN_SET_FPSCR:\n       if (fcode == ARM_BUILTIN_GET_FPSCR)"}, {"sha": "220319cffd711323e5f72ba49407f4237f70ebf3", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -2450,6 +2450,22 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vrev32q_x_f16(__a, __p) __arm_vrev32q_x_f16(__a, __p)\n #define vrev64q_x_f16(__a, __p) __arm_vrev64q_x_f16(__a, __p)\n #define vrev64q_x_f32(__a, __p) __arm_vrev64q_x_f32(__a, __p)\n+#define vadciq_s32(__a, __b,  __carry_out) __arm_vadciq_s32(__a, __b,  __carry_out)\n+#define vadciq_u32(__a, __b,  __carry_out) __arm_vadciq_u32(__a, __b,  __carry_out)\n+#define vadciq_m_s32(__inactive, __a, __b,  __carry_out, __p) __arm_vadciq_m_s32(__inactive, __a, __b,  __carry_out, __p)\n+#define vadciq_m_u32(__inactive, __a, __b,  __carry_out, __p) __arm_vadciq_m_u32(__inactive, __a, __b,  __carry_out, __p)\n+#define vadcq_s32(__a, __b,  __carry) __arm_vadcq_s32(__a, __b,  __carry)\n+#define vadcq_u32(__a, __b,  __carry) __arm_vadcq_u32(__a, __b,  __carry)\n+#define vadcq_m_s32(__inactive, __a, __b,  __carry, __p) __arm_vadcq_m_s32(__inactive, __a, __b,  __carry, __p)\n+#define vadcq_m_u32(__inactive, __a, __b,  __carry, __p) __arm_vadcq_m_u32(__inactive, __a, __b,  __carry, __p)\n+#define vsbciq_s32(__a, __b,  __carry_out) __arm_vsbciq_s32(__a, __b,  __carry_out)\n+#define vsbciq_u32(__a, __b,  __carry_out) __arm_vsbciq_u32(__a, __b,  __carry_out)\n+#define vsbciq_m_s32(__inactive, __a, __b,  __carry_out, __p) __arm_vsbciq_m_s32(__inactive, __a, __b,  __carry_out, __p)\n+#define vsbciq_m_u32(__inactive, __a, __b,  __carry_out, __p) __arm_vsbciq_m_u32(__inactive, __a, __b,  __carry_out, __p)\n+#define vsbcq_s32(__a, __b,  __carry) __arm_vsbcq_s32(__a, __b,  __carry)\n+#define vsbcq_u32(__a, __b,  __carry) __arm_vsbcq_u32(__a, __b,  __carry)\n+#define vsbcq_m_s32(__inactive, __a, __b,  __carry, __p) __arm_vsbcq_m_s32(__inactive, __a, __b,  __carry, __p)\n+#define vsbcq_m_u32(__inactive, __a, __b,  __carry, __p) __arm_vsbcq_m_u32(__inactive, __a, __b,  __carry, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -15917,6 +15933,158 @@ __arm_vshrq_x_n_u32 (uint32x4_t __a, const int __imm, mve_pred16_t __p)\n   return __builtin_mve_vshrq_m_n_uv4si (vuninitializedq_u32 (), __a, __imm, __p);\n }\n \n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vadciq_s32 (int32x4_t __a, int32x4_t __b, unsigned * __carry_out)\n+{\n+  int32x4_t __res = __builtin_mve_vadciq_sv4si (__a, __b);\n+  *__carry_out = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vadciq_u32 (uint32x4_t __a, uint32x4_t __b, unsigned * __carry_out)\n+{\n+  uint32x4_t __res = __builtin_mve_vadciq_uv4si (__a, __b);\n+  *__carry_out = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vadciq_m_s32 (int32x4_t __inactive, int32x4_t __a, int32x4_t __b, unsigned * __carry_out, mve_pred16_t __p)\n+{\n+  int32x4_t __res =  __builtin_mve_vadciq_m_sv4si (__inactive, __a, __b, __p);\n+  *__carry_out = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vadciq_m_u32 (uint32x4_t __inactive, uint32x4_t __a, uint32x4_t __b, unsigned * __carry_out, mve_pred16_t __p)\n+{\n+  uint32x4_t __res = __builtin_mve_vadciq_m_uv4si (__inactive, __a, __b, __p);\n+  *__carry_out = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vadcq_s32 (int32x4_t __a, int32x4_t __b, unsigned * __carry)\n+{\n+  __builtin_arm_set_fpscr_nzcvqc((__builtin_arm_get_fpscr_nzcvqc () & ~0x20000000u) | (*__carry << 29));\n+  int32x4_t __res = __builtin_mve_vadcq_sv4si (__a, __b);\n+  *__carry = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vadcq_u32 (uint32x4_t __a, uint32x4_t __b, unsigned * __carry)\n+{\n+  __builtin_arm_set_fpscr_nzcvqc((__builtin_arm_get_fpscr_nzcvqc () & ~0x20000000u) | (*__carry << 29));\n+  uint32x4_t __res = __builtin_mve_vadcq_uv4si (__a, __b);\n+  *__carry = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vadcq_m_s32 (int32x4_t __inactive, int32x4_t __a, int32x4_t __b, unsigned * __carry, mve_pred16_t __p)\n+{\n+  __builtin_arm_set_fpscr_nzcvqc((__builtin_arm_get_fpscr_nzcvqc () & ~0x20000000u) | (*__carry << 29));\n+  int32x4_t __res = __builtin_mve_vadcq_m_sv4si (__inactive, __a, __b, __p);\n+  *__carry = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vadcq_m_u32 (uint32x4_t __inactive, uint32x4_t __a, uint32x4_t __b, unsigned * __carry, mve_pred16_t __p)\n+{\n+  __builtin_arm_set_fpscr_nzcvqc((__builtin_arm_get_fpscr_nzcvqc () & ~0x20000000u) | (*__carry << 29));\n+  uint32x4_t __res =  __builtin_mve_vadcq_m_uv4si (__inactive, __a, __b, __p);\n+  *__carry = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsbciq_s32 (int32x4_t __a, int32x4_t __b, unsigned * __carry_out)\n+{\n+  int32x4_t __res = __builtin_mve_vsbciq_sv4si (__a, __b);\n+  *__carry_out = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsbciq_u32 (uint32x4_t __a, uint32x4_t __b, unsigned * __carry_out)\n+{\n+  uint32x4_t __res = __builtin_mve_vsbciq_uv4si (__a, __b);\n+  *__carry_out = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsbciq_m_s32 (int32x4_t __inactive, int32x4_t __a, int32x4_t __b, unsigned * __carry_out, mve_pred16_t __p)\n+{\n+  int32x4_t __res = __builtin_mve_vsbciq_m_sv4si (__inactive, __a, __b, __p);\n+  *__carry_out = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsbciq_m_u32 (uint32x4_t __inactive, uint32x4_t __a, uint32x4_t __b, unsigned * __carry_out, mve_pred16_t __p)\n+{\n+  uint32x4_t __res = __builtin_mve_vsbciq_m_uv4si (__inactive, __a, __b, __p);\n+  *__carry_out = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsbcq_s32 (int32x4_t __a, int32x4_t __b, unsigned * __carry)\n+{\n+  __builtin_arm_set_fpscr_nzcvqc((__builtin_arm_get_fpscr_nzcvqc () & ~0x20000000u) | (*__carry << 29));\n+  int32x4_t __res = __builtin_mve_vsbcq_sv4si (__a, __b);\n+  *__carry = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsbcq_u32 (uint32x4_t __a, uint32x4_t __b, unsigned * __carry)\n+{\n+  __builtin_arm_set_fpscr_nzcvqc((__builtin_arm_get_fpscr_nzcvqc () & ~0x20000000u) | (*__carry << 29));\n+  uint32x4_t __res =  __builtin_mve_vsbcq_uv4si (__a, __b);\n+  *__carry = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsbcq_m_s32 (int32x4_t __inactive, int32x4_t __a, int32x4_t __b, unsigned * __carry, mve_pred16_t __p)\n+{\n+  __builtin_arm_set_fpscr_nzcvqc((__builtin_arm_get_fpscr_nzcvqc () & ~0x20000000u) | (*__carry << 29));\n+  int32x4_t __res = __builtin_mve_vsbcq_m_sv4si (__inactive, __a, __b, __p);\n+  *__carry = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsbcq_m_u32 (uint32x4_t __inactive, uint32x4_t __a, uint32x4_t __b, unsigned * __carry, mve_pred16_t __p)\n+{\n+  __builtin_arm_set_fpscr_nzcvqc((__builtin_arm_get_fpscr_nzcvqc () & ~0x20000000u) | (*__carry << 29));\n+  uint32x4_t __res = __builtin_mve_vsbcq_m_uv4si (__inactive, __a, __b, __p);\n+  *__carry = (__builtin_arm_get_fpscr_nzcvqc () >> 29) & 0x1u;\n+  return __res;\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -25525,6 +25693,65 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int64_t_const_ptr]: __arm_vldrdq_gather_shifted_offset_z_s64 (__ARM_mve_coerce(__p0, int64_t const *), p1, p2), \\\n   int (*)[__ARM_mve_type_uint64_t_const_ptr]: __arm_vldrdq_gather_shifted_offset_z_u64 (__ARM_mve_coerce(__p0, uint64_t const *), p1, p2));})\n \n+#define vadciq_m(p0,p1,p2,p3,p4) __arm_vadciq_m(p0,p1,p2,p3,p4)\n+#define __arm_vadciq_m(p0,p1,p2,p3,p4) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vadciq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3, p4), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vadciq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3, p4));})\n+\n+#define vadciq(p0,p1,p2) __arm_vadciq(p0,p1,p2)\n+#define __arm_vadciq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vadciq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vadciq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vadcq_m(p0,p1,p2,p3,p4) __arm_vadcq_m(p0,p1,p2,p3,p4)\n+#define __arm_vadcq_m(p0,p1,p2,p3,p4) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vadcq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3, p4), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vadcq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3, p4));})\n+\n+#define vadcq(p0,p1,p2) __arm_vadcq(p0,p1,p2)\n+#define __arm_vadcq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vadcq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vadcq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vsbciq_m(p0,p1,p2,p3,p4) __arm_vsbciq_m(p0,p1,p2,p3,p4)\n+#define __arm_vsbciq_m(p0,p1,p2,p3,p4) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vsbciq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3, p4), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vsbciq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3, p4));})\n+\n+#define vsbciq(p0,p1,p2) __arm_vsbciq(p0,p1,p2)\n+#define __arm_vsbciq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vsbciq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vsbciq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vsbcq_m(p0,p1,p2,p3,p4) __arm_vsbcq_m(p0,p1,p2,p3,p4)\n+#define __arm_vsbcq_m(p0,p1,p2,p3,p4) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vsbcq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3, p4), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vsbcq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3, p4));})\n+\n+#define vsbcq(p0,p1,p2) __arm_vsbcq(p0,p1,p2)\n+#define __arm_vsbcq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vsbcq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vsbcq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n \n #define vldrbq_gather_offset_z(p0,p1,p2) __arm_vldrbq_gather_offset_z(p0,p1,p2)\n #define __arm_vldrbq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\"}, {"sha": "38f46beb76a3068dcb8dd97e3ee8dbe2707dd72e", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -857,3 +857,19 @@ VAR1 (LDRGBWBS_Z, vldrdq_gather_base_wb_z_s, v2di)\n VAR1 (LDRGBWBS, vldrwq_gather_base_wb_s, v4si)\n VAR1 (LDRGBWBS, vldrwq_gather_base_wb_f, v4sf)\n VAR1 (LDRGBWBS, vldrdq_gather_base_wb_s, v2di)\n+VAR1 (BINOP_NONE_NONE_NONE, vadciq_s, v4si)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vadciq_u, v4si)\n+VAR1 (BINOP_NONE_NONE_NONE, vadcq_s, v4si)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vadcq_u, v4si)\n+VAR1 (BINOP_NONE_NONE_NONE, vsbciq_s, v4si)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vsbciq_u, v4si)\n+VAR1 (BINOP_NONE_NONE_NONE, vsbcq_s, v4si)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vsbcq_u, v4si)\n+VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vadciq_m_s, v4si)\n+VAR1 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vadciq_m_u, v4si)\n+VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vadcq_m_s, v4si)\n+VAR1 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vadcq_m_u, v4si)\n+VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vsbciq_m_s, v4si)\n+VAR1 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vsbciq_m_u, v4si)\n+VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vsbcq_m_s, v4si)\n+VAR1 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vsbcq_m_u, v4si)"}, {"sha": "25b59732d257a19f38ff7e54898df5cef4fdef3d", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 179, "deletions": 3, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -211,7 +211,10 @@\n \t\t\t VDWDUPQ_M VIDUPQ VIDUPQ_M VIWDUPQ VIWDUPQ_M\n \t\t\t VSTRWQSBWB_S VSTRWQSBWB_U VLDRWQGBWB_S VLDRWQGBWB_U\n \t\t\t VSTRWQSBWB_F VLDRWQGBWB_F VSTRDQSBWB_S VSTRDQSBWB_U\n-\t\t\t VLDRDQGBWB_S VLDRDQGBWB_U])\n+\t\t\t VLDRDQGBWB_S VLDRDQGBWB_U VADCQ_U VADCQ_M_U VADCQ_S\n+\t\t\t VADCQ_M_S VSBCIQ_U VSBCIQ_S VSBCIQ_M_U VSBCIQ_M_S\n+\t\t\t VSBCQ_U VSBCQ_S VSBCQ_M_U VSBCQ_M_S VADCIQ_U VADCIQ_M_U\n+\t\t\t VADCIQ_S VADCIQ_M_S])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -382,8 +385,13 @@\n \t\t       (VSTRWQSO_U \"u\") (VSTRWQSO_S \"s\") (VSTRWQSSO_U \"u\")\n \t\t       (VSTRWQSSO_S \"s\") (VSTRWQSBWB_S \"s\") (VSTRWQSBWB_U \"u\")\n \t\t       (VLDRWQGBWB_S \"s\") (VLDRWQGBWB_U \"u\") (VLDRDQGBWB_S \"s\")\n-\t\t       (VLDRDQGBWB_U \"u\") (VSTRDQSBWB_S \"s\")\n-\t\t       (VSTRDQSBWB_U \"u\")])\n+\t\t       (VLDRDQGBWB_U \"u\") (VSTRDQSBWB_S \"s\") (VADCQ_M_S \"s\")\n+\t\t       (VSTRDQSBWB_U \"u\") (VSBCQ_U \"u\")  (VSBCQ_M_U \"u\")\n+\t\t       (VSBCQ_S \"s\")  (VSBCQ_M_S \"s\") (VSBCIQ_U \"u\")\n+\t\t       (VSBCIQ_M_U \"u\") (VSBCIQ_S \"s\") (VSBCIQ_M_S \"s\")\n+\t\t       (VADCQ_U \"u\")  (VADCQ_M_U \"u\") (VADCQ_S \"s\")\n+\t\t       (VADCIQ_U \"u\") (VADCIQ_M_U \"u\") (VADCIQ_S \"s\")\n+\t\t       (VADCIQ_M_S \"s\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -636,6 +644,15 @@\n (define_int_iterator VLDRWGBWBQ [VLDRWQGBWB_S VLDRWQGBWB_U])\n (define_int_iterator VSTRDSBWBQ [VSTRDQSBWB_S VSTRDQSBWB_U])\n (define_int_iterator VLDRDGBWBQ [VLDRDQGBWB_S VLDRDQGBWB_U])\n+(define_int_iterator VADCIQ [VADCIQ_U VADCIQ_S])\n+(define_int_iterator VADCIQ_M [VADCIQ_M_U VADCIQ_M_S])\n+(define_int_iterator VSBCQ [VSBCQ_U VSBCQ_S])\n+(define_int_iterator VSBCQ_M [VSBCQ_M_U VSBCQ_M_S])\n+(define_int_iterator VSBCIQ [VSBCIQ_U VSBCIQ_S])\n+(define_int_iterator VSBCIQ_M [VSBCIQ_M_U VSBCIQ_M_S])\n+(define_int_iterator VADCQ [VADCQ_U VADCQ_S])\n+(define_int_iterator VADCQ_M [VADCQ_M_U VADCQ_M_S])\n+\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -10597,6 +10614,21 @@\n   DONE;\n })\n \n+(define_insn \"get_fpscr_nzcvqc\"\n+ [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+   (unspec:SI [(reg:SI VFPCC_REGNUM)] UNSPEC_GET_FPSCR_NZCVQC))]\n+ \"TARGET_HAVE_MVE\"\n+ \"vmrs\\\\t%0, FPSCR_nzcvqc\"\n+  [(set_attr \"type\" \"mve_move\")])\n+\n+(define_insn \"set_fpscr_nzcvqc\"\n+ [(set (reg:SI VFPCC_REGNUM)\n+   (unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")]\n+    VUNSPEC_SET_FPSCR_NZCVQC))]\n+ \"TARGET_HAVE_MVE\"\n+ \"vmsr\\\\tFPSCR_nzcvqc, %0\"\n+  [(set_attr \"type\" \"mve_move\")])\n+\n ;;\n ;; [vldrdq_gather_base_wb_z_s vldrdq_gather_base_wb_z_u]\n ;;\n@@ -10621,3 +10653,147 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n+;;\n+;; [vadciq_m_s, vadciq_m_u])\n+;;\n+(define_insn \"mve_vadciq_m_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VADCIQ_M))\n+   (set (reg:SI VFPCC_REGNUM)\n+\t(unspec:SI [(const_int 0)]\n+\t VADCIQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vadcit.i32\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vadciq_u, vadciq_s])\n+;;\n+(define_insn \"mve_vadciq_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VADCIQ))\n+   (set (reg:SI VFPCC_REGNUM)\n+\t(unspec:SI [(const_int 0)]\n+\t VADCIQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vadci.i32\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vadcq_m_s, vadcq_m_u])\n+;;\n+(define_insn \"mve_vadcq_m_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VADCQ_M))\n+   (set (reg:SI VFPCC_REGNUM)\n+\t(unspec:SI [(reg:SI VFPCC_REGNUM)]\n+\t VADCQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vadct.i32\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vadcq_u, vadcq_s])\n+;;\n+(define_insn \"mve_vadcq_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VADCQ))\n+   (set (reg:SI VFPCC_REGNUM)\n+\t(unspec:SI [(reg:SI VFPCC_REGNUM)]\n+\t VADCQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vadc.i32\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"conds\" \"set\")])\n+\n+;;\n+;; [vsbciq_m_u, vsbciq_m_s])\n+;;\n+(define_insn \"mve_vsbciq_m_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSBCIQ_M))\n+   (set (reg:SI VFPCC_REGNUM)\n+\t(unspec:SI [(const_int 0)]\n+\t VSBCIQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vsbcit.i32\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vsbciq_s, vsbciq_u])\n+;;\n+(define_insn \"mve_vsbciq_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VSBCIQ))\n+   (set (reg:SI VFPCC_REGNUM)\n+\t(unspec:SI [(const_int 0)]\n+\t VSBCIQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vsbci.i32\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vsbcq_m_u, vsbcq_m_s])\n+;;\n+(define_insn \"mve_vsbcq_m_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSBCQ_M))\n+   (set (reg:SI VFPCC_REGNUM)\n+\t(unspec:SI [(reg:SI VFPCC_REGNUM)]\n+\t VSBCQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vsbct.i32\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vsbcq_s, vsbcq_u])\n+;;\n+(define_insn \"mve_vsbcq_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VSBCQ))\n+   (set (reg:SI VFPCC_REGNUM)\n+\t(unspec:SI [(reg:SI VFPCC_REGNUM)]\n+\t VSBCQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vsbc.i32\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\" \"4\")])"}, {"sha": "a7575871da7bf123f9e2d693815147fa60e1e914", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -170,6 +170,7 @@\n   UNSPEC_TORC\t\t; Used by the intrinsic form of the iWMMXt TORC instruction.\n   UNSPEC_TORVSC\t\t; Used by the intrinsic form of the iWMMXt TORVSC instruction.\n   UNSPEC_TEXTRC\t\t; Used by the intrinsic form of the iWMMXt TEXTRC instruction.\n+  UNSPEC_GET_FPSCR_NZCVQC\t; Represent fetch of FPSCR_nzcvqc content.\n ])\n \n \n@@ -218,6 +219,7 @@\n   VUNSPEC_STL\t\t; Represent a store-register-release.\n   VUNSPEC_GET_FPSCR\t; Represent fetch of FPSCR content.\n   VUNSPEC_SET_FPSCR\t; Represent assign of FPSCR content.\n+  VUNSPEC_SET_FPSCR_NZCVQC\t; Represent assign of FPSCR_nzcvqc content.\n   VUNSPEC_PROBE_STACK_RANGE ; Represent stack range probing.\n   VUNSPEC_CDP\t\t; Represent the coprocessor cdp instruction.\n   VUNSPEC_CDP2\t\t; Represent the coprocessor cdp2 instruction."}, {"sha": "540ec67b862eb06e130bafbbdd0d4123be939a35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -1,3 +1,24 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vadciq_m_s32.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vadciq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vadciq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vadciq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vadcq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vadcq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vadcq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vadcq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsbciq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsbciq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsbciq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsbciq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsbcq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsbcq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsbcq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsbcq_u32.c: Likewise.\n+\n 2020-03-20  Patrick Palka  <ppalka@redhat.com>\n \n \t* g++.dg/concepts/diagnostic6.C: New test."}, {"sha": "3b4019b6abadd72eaba23c2787442d3d86efbf85", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vadciq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_m_s32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, unsigned * carry_out, mve_pred16_t p)\n+{\n+  return vadciq_m_s32 (inactive, a, b, carry_out, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vadcit.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, unsigned * carry_out, mve_pred16_t p)\n+{\n+  return vadciq_m (inactive, a, b, carry_out, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vadcit.i32\"  }  } */"}, {"sha": "a69039d23925da758a36c7481479f0f3ae7b29a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vadciq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_m_u32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, unsigned * carry_out, mve_pred16_t p)\n+{\n+  return vadciq_m_u32 (inactive, a, b, carry_out, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vadcit.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, unsigned * carry_out, mve_pred16_t p)\n+{\n+  return vadciq_m (inactive, a, b, carry_out, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vadcit.i32\"  }  } */"}, {"sha": "3b7623ce8374c449447a893030afb9dd5e197fd4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vadciq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_s32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, unsigned * carry_out)\n+{\n+  return vadciq_s32 (a, b, carry_out);\n+}\n+\n+/* { dg-final { scan-assembler \"vadci.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, unsigned * carry_out)\n+{\n+  return vadciq (a, b, carry_out);\n+}\n+\n+/* { dg-final { scan-assembler \"vadci.i32\"  }  } */"}, {"sha": "07eb9d8017a8501184ad6fa02bd1268a72bb7e98", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vadciq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadciq_u32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, unsigned * carry_out)\n+{\n+  return vadciq_u32 (a, b, carry_out);\n+}\n+\n+/* { dg-final { scan-assembler \"vadci.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, unsigned * carry_out)\n+{\n+  return vadciq (a, b, carry_out);\n+}\n+\n+/* { dg-final { scan-assembler \"vadci.i32\"  }  } */"}, {"sha": "8c6f2319ead91fde51c5a709fc7a2fc22c58017e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vadcq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_m_s32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, unsigned * carry, mve_pred16_t p)\n+{\n+  return vadcq_m_s32 (inactive, a, b, carry, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vadct.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, unsigned * carry, mve_pred16_t p)\n+{\n+  return vadcq_m (inactive, a, b, carry, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vadct.i32\"  }  } */"}, {"sha": "0747fee0e297ad00d2772f3691ca39d52c8eec8a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vadcq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_m_u32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, unsigned * carry, mve_pred16_t p)\n+{\n+  return vadcq_m_u32 (inactive, a, b, carry, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vadct.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, unsigned * carry, mve_pred16_t p)\n+{\n+  return vadcq_m (inactive, a, b, carry, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vadct.i32\"  }  } */"}, {"sha": "07830070ea09cdc7499c0d1cb8bccd47e6858692", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vadcq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_s32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, unsigned * carry)\n+{\n+  return vadcq_s32 (a, b, carry);\n+}\n+\n+/* { dg-final { scan-assembler \"vadc.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, unsigned * carry)\n+{\n+  return vadcq (a, b, carry);\n+}\n+\n+/* { dg-final { scan-assembler \"vadc.i32\"  }  } */"}, {"sha": "479db3a6e93d26717bea110d40443d10ac6f5eda", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vadcq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvadcq_u32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, unsigned * carry)\n+{\n+  return vadcq_u32 (a, b, carry);\n+}\n+\n+/* { dg-final { scan-assembler \"vadc.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, unsigned * carry)\n+{\n+  return vadcq (a, b, carry);\n+}\n+\n+/* { dg-final { scan-assembler \"vadc.i32\"  }  } */"}, {"sha": "11e5b4011dc6373ae7c23cc03fc7f1d625d10b58", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsbciq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_m_s32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, unsigned * carry_out, mve_pred16_t p)\n+{\n+  return vsbciq_m_s32 (inactive, a, b, carry_out, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsbcit.i32\"  } } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, unsigned * carry_out, mve_pred16_t p)\n+{\n+  return vsbciq_m (inactive, a, b, carry_out, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsbcit.i32\"  } } */"}, {"sha": "df638bc31493b5818d9516815026b7852777f067", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsbciq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_m_u32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, unsigned * carry_out, mve_pred16_t p)\n+{\n+  return vsbciq_m_u32 (inactive, a, b, carry_out, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsbcit.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, unsigned * carry_out, mve_pred16_t p)\n+{\n+  return vsbciq_m (inactive, a, b, carry_out, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsbcit.i32\"  }  } */"}, {"sha": "6f0f4dd3aec9d382761d206a3119d2cfc39d7a21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsbciq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_s32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, unsigned * carry_out)\n+{\n+  return vsbciq_s32 (a, b, carry_out);\n+}\n+\n+/* { dg-final { scan-assembler \"vsbci.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, unsigned * carry_out)\n+{\n+  return vsbciq_s32 (a, b, carry_out);\n+}\n+\n+/* { dg-final { scan-assembler \"vsbci.i32\"  }  } */"}, {"sha": "e68eaa367e9ee2e6f5ef0de476aa36e1bde9ad85", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsbciq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbciq_u32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, unsigned * carry_out)\n+{\n+  return vsbciq_u32 (a, b, carry_out);\n+}\n+\n+/* { dg-final { scan-assembler \"vsbci.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, unsigned * carry_out)\n+{\n+  return vsbciq_u32 (a, b, carry_out);\n+}\n+\n+/* { dg-final { scan-assembler \"vsbci.i32\"  }  } */"}, {"sha": "0f9b9b188dc5f515d69356aab21c4b95cca06aa5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsbcq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_m_s32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, unsigned * carry, mve_pred16_t p)\n+{\n+    return vsbcq_m_s32 (inactive, a, b, carry, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsbct.i32\"  }  } */\n+\n+int32x4_t\n+foo1(int32x4_t inactive, int32x4_t a, int32x4_t b, unsigned * carry, mve_pred16_t p)\n+{\n+    return vsbcq_m (inactive, a, b, carry, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsbct.i32\"  }  } */"}, {"sha": "fb62c26d8c952c61c3466e231880fcf7f28077d8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsbcq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_m_u32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, unsigned * carry, mve_pred16_t p)\n+{\n+    return vsbcq_m_u32 (inactive, a, b, carry, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsbct.i32\"  }  } */\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, unsigned * carry, mve_pred16_t p)\n+{\n+    return vsbcq_m (inactive, a, b, carry, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsbct.i32\"  }  } */"}, {"sha": "fbbda5c9df35bfbb943dcd0d017ec2c92e7ecc1f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsbcq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_s32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, unsigned * carry)\n+{\n+  return vsbcq_s32 (a, b, carry);\n+}\n+\n+/* { dg-final { scan-assembler \"vsbc.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, unsigned * carry)\n+{\n+  return vsbcq (a, b, carry);\n+}\n+\n+/* { dg-final { scan-assembler \"vsbc.i32\"  }  } */"}, {"sha": "286345336cb3f7f07f92827c94ac152859fc3c55", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsbcq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3562f81042e05d9bc82d6834cac761c9d9db0c8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsbcq_u32.c?ref=c3562f81042e05d9bc82d6834cac761c9d9db0c8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, unsigned * carry)\n+{\n+  return vsbcq_u32 (a, b, carry);\n+}\n+\n+/* { dg-final { scan-assembler \"vsbc.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, unsigned * carry)\n+{\n+  return vsbcq (a, b, carry);\n+}\n+\n+/* { dg-final { scan-assembler \"vsbc.i32\"  }  } */"}]}