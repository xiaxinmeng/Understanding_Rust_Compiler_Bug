{"sha": "ec00d3faf4e3d20906e8e6038299343f960dc49e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwMGQzZmFmNGUzZDIwOTA2ZThlNjAzODI5OTM0M2Y5NjBkYzQ5ZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-05-02T17:53:56Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-05-02T17:53:56Z"}, "message": "[openacc] Move GOMP_OPENACC_DIM parsing out of nvptx plugin\n\n2018-05-02  Tom de Vries  <tom@codesourcery.com>\n\n\tPR libgomp/85411\n\t* plugin/plugin-nvptx.c (nvptx_exec): Move parsing of\n\tGOMP_OPENACC_DIM ...\n\t* env.c (parse_gomp_openacc_dim): ... here.  New function.\n\t(initialize_env): Call parse_gomp_openacc_dim.\n\t(goacc_default_dims): Define.\n\t* libgomp.h (goacc_default_dims): Declare.\n\t* oacc-plugin.c (GOMP_PLUGIN_acc_default_dim): New function.\n\t* oacc-plugin.h (GOMP_PLUGIN_acc_default_dim): Declare.\n\t* libgomp.map: New version \"GOMP_PLUGIN_1.2\". Add\n\tGOMP_PLUGIN_acc_default_dim.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-default-runtime.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-default.h: New test.\n\nFrom-SVN: r259852", "tree": {"sha": "f1fb8130e22dfe8536682621accc8592a7e27936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1fb8130e22dfe8536682621accc8592a7e27936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec00d3faf4e3d20906e8e6038299343f960dc49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec00d3faf4e3d20906e8e6038299343f960dc49e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec00d3faf4e3d20906e8e6038299343f960dc49e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec00d3faf4e3d20906e8e6038299343f960dc49e/comments", "author": null, "committer": null, "parents": [{"sha": "92243e7ceab627026b4c63604acb5b2e6486f8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92243e7ceab627026b4c63604acb5b2e6486f8a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92243e7ceab627026b4c63604acb5b2e6486f8a3"}], "stats": {"total": 254, "additions": 227, "deletions": 27}, "files": [{"sha": "1d55d8bf361c0c64ad090a9bf9302f8d34f08caa", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -1,3 +1,19 @@\n+2018-05-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR libgomp/85411\n+\t* plugin/plugin-nvptx.c (nvptx_exec): Move parsing of\n+\tGOMP_OPENACC_DIM ...\n+\t* env.c (parse_gomp_openacc_dim): ... here.  New function.\n+\t(initialize_env): Call parse_gomp_openacc_dim.\n+\t(goacc_default_dims): Define.\n+\t* libgomp.h (goacc_default_dims): Declare.\n+\t* oacc-plugin.c (GOMP_PLUGIN_acc_default_dim): New function.\n+\t* oacc-plugin.h (GOMP_PLUGIN_acc_default_dim): Declare.\n+\t* libgomp.map: New version \"GOMP_PLUGIN_1.2\". Add\n+\tGOMP_PLUGIN_acc_default_dim.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-default-runtime.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-default.h: New test.\n+\n 2018-05-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/83791"}, {"sha": "18c90bb09d096ae2207a6efe413e4fdcd55f8985", "filename": "libgomp/env.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -90,6 +90,7 @@ int gomp_debug_var;\n unsigned int gomp_num_teams_var;\n char *goacc_device_type;\n int goacc_device_num;\n+int goacc_default_dims[GOMP_DIM_MAX];\n \n #ifndef LIBGOMP_OFFLOADED_ONLY\n \n@@ -1065,6 +1066,36 @@ parse_acc_device_type (void)\n     goacc_device_type = NULL;\n }\n \n+static void\n+parse_gomp_openacc_dim (void)\n+{\n+  /* The syntax is the same as for the -fopenacc-dim compilation option.  */\n+  const char *var_name = \"GOMP_OPENACC_DIM\";\n+  const char *env_var = getenv (var_name);\n+  if (!env_var)\n+    return;\n+\n+  const char *pos = env_var;\n+  int i;\n+  for (i = 0; *pos && i != GOMP_DIM_MAX; i++)\n+    {\n+      if (i && *pos++ != ':')\n+\tbreak;\n+\n+      if (*pos == ':')\n+\tcontinue;\n+\n+      const char *eptr;\n+      errno = 0;\n+      long val = strtol (pos, (char **)&eptr, 10);\n+      if (errno || val < 0 || (unsigned)val != val)\n+\tbreak;\n+\n+      goacc_default_dims[i] = (int)val;\n+      pos = eptr;\n+    }\n+}\n+\n static void\n handle_omp_display_env (unsigned long stacksize, int wait_policy)\n {\n@@ -1336,6 +1367,7 @@ initialize_env (void)\n     goacc_device_num = 0;\n \n   parse_acc_device_type ();\n+  parse_gomp_openacc_dim ();\n \n   goacc_runtime_initialize ();\n }"}, {"sha": "10ea8940c960a7579ad88d28887207463f01f546", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -44,6 +44,7 @@\n #include \"config.h\"\n #include \"gstdint.h\"\n #include \"libgomp-plugin.h\"\n+#include \"gomp-constants.h\"\n \n #ifdef HAVE_PTHREAD_H\n #include <pthread.h>\n@@ -367,6 +368,7 @@ extern unsigned int gomp_num_teams_var;\n extern int gomp_debug_var;\n extern int goacc_device_num;\n extern char *goacc_device_type;\n+extern int goacc_default_dims[GOMP_DIM_MAX];\n \n enum gomp_task_kind\n {"}, {"sha": "8752348fbf2d2b88ee8b8c614c224878f2453033", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -420,3 +420,8 @@ GOMP_PLUGIN_1.1 {\n   global:\n \tGOMP_PLUGIN_target_task_completion;\n } GOMP_PLUGIN_1.0;\n+\n+GOMP_PLUGIN_1.2 {\n+  global:\n+\tGOMP_PLUGIN_acc_default_dim;\n+} GOMP_PLUGIN_1.1;"}, {"sha": "c04db90691a43ce16083a7c3a1955a36200fd4f2", "filename": "libgomp/oacc-plugin.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Foacc-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Foacc-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-plugin.c?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -49,3 +49,14 @@ GOMP_PLUGIN_acc_thread (void)\n   struct goacc_thread *thr = goacc_thread ();\n   return thr ? thr->target_tls : NULL;\n }\n+\n+int\n+GOMP_PLUGIN_acc_default_dim (unsigned int i)\n+{\n+  if (i >= GOMP_DIM_MAX)\n+    {\n+      gomp_fatal (\"invalid dimension argument: %d\", i);\n+      return -1;\n+    }\n+  return goacc_default_dims[i];\n+}"}, {"sha": "0a183bb88343bd001d9eb1d3ad3308bda8982d5b", "filename": "libgomp/oacc-plugin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Foacc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Foacc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-plugin.h?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -29,5 +29,6 @@\n \n extern void GOMP_PLUGIN_async_unmap_vars (void *, int);\n extern void *GOMP_PLUGIN_acc_thread (void);\n+extern int GOMP_PLUGIN_acc_default_dim (unsigned int);\n \n #endif"}, {"sha": "89326e5774136f0b47289d9f3adb7ead4ed6aee7", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -1147,33 +1147,8 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n       pthread_mutex_lock (&ptx_dev_lock);\n       if (!default_dims[0])\n \t{\n-\t  const char *var_name = \"GOMP_OPENACC_DIM\";\n-\t  /* We only read the environment variable once.  You can't\n-\t     change it in the middle of execution.  The syntax  is\n-\t     the same as for the -fopenacc-dim compilation option.  */\n-\t  const char *env_var = getenv (var_name);\n-\t  notify_var (var_name, env_var);\n-\t  if (env_var)\n-\t    {\n-\t      const char *pos = env_var;\n-\n-\t      for (i = 0; *pos && i != GOMP_DIM_MAX; i++)\n-\t\t{\n-\t\t  if (i && *pos++ != ':')\n-\t\t    break;\n-\t\t  if (*pos != ':')\n-\t\t    {\n-\t\t      const char *eptr;\n-\n-\t\t      errno = 0;\n-\t\t      long val = strtol (pos, (char **)&eptr, 10);\n-\t\t      if (errno || val < 0 || (unsigned)val != val)\n-\t\t\tbreak;\n-\t\t      default_dims[i] = (int)val;\n-\t\t      pos = eptr;\n-\t\t    }\n-\t\t}\n-\t    }\n+\t  for (int i = 0; i < GOMP_DIM_MAX; ++i)\n+\t    default_dims[i] = GOMP_PLUGIN_acc_default_dim (i);\n \n \t  int warp_size, block_size, dev_size, cpu_size;\n \t  CUdevice dev = nvptx_thread()->ptx_dev->dev;"}, {"sha": "c6110a150f4a9fd71f4f8f1275f79509401a5106", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-default-runtime.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-default-runtime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-default-runtime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-default-runtime.c?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-set-target-env-var GOMP_OPENACC_DIM \"8::\" } */\n+\n+#include \"loop-default.h\"\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  if (check_gang (8) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "a9e26939cf26e13bd257c7a06dbd9a3921d9445a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-default.h", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-default.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec00d3faf4e3d20906e8e6038299343f960dc49e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-default.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-default.h?ref=ec00d3faf4e3d20906e8e6038299343f960dc49e", "patch": "@@ -0,0 +1,145 @@\n+#include <openacc.h>\n+#include <alloca.h>\n+#include <string.h>\n+#include <stdio.h>\n+#include <gomp-constants.h>\n+\n+#pragma acc routine seq\n+static int __attribute__ ((noinline))\n+coord (void)\n+{\n+  int res = 0;\n+\n+  if (acc_on_device (acc_device_nvidia))\n+    {\n+      int g = 0, w = 0, v = 0;\n+      g = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+      w = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+      v = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+\n+      res = (1 << 24) | (g << 16) | (w << 8) | v;\n+    }\n+\n+  return res;\n+}\n+\n+static int\n+check (const int *ary, int size, int gp, int wp, int vp)\n+{\n+  int exit = 0;\n+  int ix;\n+  int *gangs = (int *)alloca (gp * sizeof (int));\n+  int *workers = (int *)alloca (wp * sizeof (int));\n+  int *vectors = (int *)alloca (vp * sizeof (int));\n+  int offloaded = 0;\n+\n+  memset (gangs, 0, gp * sizeof (int));\n+  memset (workers, 0, wp * sizeof (int));\n+  memset (vectors, 0, vp * sizeof (int));\n+\n+  for (ix = 0; ix < size; ix++)\n+    {\n+      int g = (ary[ix] >> 16) & 0xff;\n+      int w = (ary[ix] >> 8) & 0xff;\n+      int v = (ary[ix] >> 0) & 0xff;\n+\n+      if (g >= gp || w >= wp || v >= vp)\n+\t{\n+\t  printf (\"unexpected cpu %#x used\\n\", ary[ix]);\n+\t  exit = 1;\n+\t}\n+      else\n+\t{\n+\t  vectors[v]++;\n+\t  workers[w]++;\n+\t  gangs[g]++;\n+\t}\n+      offloaded += ary[ix] >> 24;\n+    }\n+\n+  if (!offloaded)\n+    return 0;\n+\n+  if (offloaded != size)\n+    {\n+      printf (\"offloaded %d times,  expected %d\\n\", offloaded, size);\n+      return 1;\n+    }\n+\n+  for (ix = 0; ix < gp; ix++)\n+    if (gangs[ix] != gangs[0])\n+      {\n+\tprintf (\"gang %d not used %d times\\n\", ix, gangs[0]);\n+\texit = 1;\n+      }\n+\n+  for (ix = 0; ix < wp; ix++)\n+    if (workers[ix] != workers[0])\n+      {\n+\tprintf (\"worker %d not used %d times\\n\", ix, workers[0]);\n+\texit = 1;\n+      }\n+\n+  for (ix = 0; ix < vp; ix++)\n+    if (vectors[ix] != vectors[0])\n+      {\n+\tprintf (\"vector %d not used %d times\\n\", ix, vectors[0]);\n+\texit = 1;\n+      }\n+\n+  return exit;\n+}\n+\n+#define N (32 * 32 * 32)\n+int ary[N];\n+\n+static int\n+check_gang (int gp)\n+{\n+#pragma acc parallel copyout (ary)\n+  {\n+#pragma acc loop gang (static:1)\n+    for (int ix = 0; ix < N; ix++)\n+      ary[ix] = coord ();\n+  }\n+\n+  return check (ary, N, gp, 1, 1);\n+}\n+\n+static int\n+check_worker (int wp)\n+{\n+#pragma  acc parallel copyout (ary)\n+  {\n+#pragma acc loop worker\n+    for (int ix = 0; ix < N; ix++)\n+      ary[ix] = coord ();\n+  }\n+\n+  return check (ary, N, 1, wp, 1);\n+}\n+\n+static int\n+check_vector (int vp)\n+{\n+#pragma  acc parallel copyout (ary)\n+  {\n+#pragma acc loop vector\n+    for (int ix = 0; ix < N; ix++)\n+      ary[ix] = coord ();\n+  }\n+\n+  return check (ary, N, 1, 1, vp);\n+}\n+\n+static int\n+test_1 (int gp, int wp, int vp)\n+{\n+  int exit = 0;\n+\n+  exit |= check_gang (gp);\n+  exit |= check_worker (wp);\n+  exit |= check_vector (vp);\n+\n+  return exit;\n+}"}]}