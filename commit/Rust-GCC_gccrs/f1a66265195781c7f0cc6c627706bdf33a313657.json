{"sha": "f1a66265195781c7f0cc6c627706bdf33a313657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhNjYyNjUxOTU3ODFjN2YwY2M2YzYyNzcwNmJkZjMzYTMxMzY1Nw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-10-26T06:09:05Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-10-26T06:09:05Z"}, "message": "Index: gcc/gcc/ChangeLog\n2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n\n\t* config/darwin.h (LINK_SPEC): Default weak_reference_mismatches\n\tto 'non-weak'.\n\t(MAKE_DECL_ONE_ONLY): Set DECL_WEAK.\n\t(ASM_MAKE_LABEL_LINKONCE): Delete.\n\t(ASM_WEAKEN_DECL): New.\n\t(ASM_DECLARE_OBJECT_NAME): Look at DECL_WEAK not DECL_ONE_ONLY.\n\t(ASM_DECLARE_FUNCTION_NAME): Likewise.\n\t(TEXT_SECTION_ASM_OP): Add a tab.\n\t(DATA_SECTION_ASM_OP): Likewise.\n\t(SECTION_FUNCTION): Add a tab.  Use fputs.  Don't call\n\tdata_section on every section change.\n\t(EXTRA_SECTIONS): Add a bunch of new extra sections.\n\t(EXTRA_SECTION_FUNCTIONS): Likewise.\n\t(USE_SELECT_SECTION_FOR_FUNCTIONS): Define.\n\t(JCR_SECTION_NAME): Define.\n\t(TARGET_SECTION_TYPE_FLAGS): Don't define.\n\t* config/darwin.c (darwin_encode_section_info): A symbol is defined\n\tin this file if it is not weak.\n\t(textcoal_section): Delete.\n\t(datacoal_section): Delete.\n\t(darwin_make_decl_one_only): Delete.\n\t(machopic_select_section): Handle functions.\n\t(darwin_asm_named_section): Add a tab.\n\t(darwin_section_type_flags): Delete.\n\t(darwin_unique_section): Delete contents.\n\t(darwin_emit_unwind_label): Add a tab.  Make decls weak if\n\tDECL_WEAK is set.\n\t* config/darwin-protos.h (darwin_section_type_flags): Delete.\n\t(darwin_make_decl_one_only): Delete.\n\t(text_coal_section): New.\n\t(text_unlikely_section): New.\n\t(text_unlikely_coal_section): New.\n\t(const_coal_section): New.\n\t(data_coal_section): New.\n\t(const_data_coal_section): New.\n\t* varasm.c (function_section): Honour\n\tUSE_SELECT_SECTION_FOR_FUNCTIONS.\n\t* dwarf2out.c (output_call_frame_info): Look at DECL_WEAK when\n\tTARGET_USES_WEAK_UNWIND_INFO is in effect.\n\t* dbxout.c (dbxout_source_file): Don't change sections while\n\ta function is being output.\n\nIndex: gcc/testsuite/ChangeLog\n2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n\n\t* objc.dg/image-info.m: Update for changes to section selection.\n\nIndex: libjava/ChangeLog\n2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n\n\t* Makefile.am (DARWIN_CRT_SRC): New.\n\t(libgcj_la_SOURCES): Use it.\n\t* configure.ac: Define USING_DARWIN_CRT when on Darwin.\n\t* darwin.cc: New file.\n\t* include/jvm.h (_Jv_RegisterClasses): Constify.\n\t(_Jv_RegisterClasses_Counted): New prototype.\n\t* java/lang/Class.h: Include stddef.h.\n\t(_Jv_RegisterClasses): Constify.\n\t(_Jv_RegisterClasses_Counted): New prototype.\n\t(Object): Make '_Jv_RegisterClasses_Counted' a friend.\n\t* java/lang/natClassLoader.cc (_Jv_RegisterClasses): Constify.\n\t(_Jv_RegisterClasses_Counted): New function.\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* gcj/Makefile.in: Regenerate.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\nIndex: libstdc++-v3/ChangeLog\n2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n\n\t* libsupc++/new_op.cc (new): Make weak.\n\t* libsupc++/new_opnt.cc (new): Make weak.\n\t* libsupc++/new_opv.cc (new): Make weak.\n\t* libsupc++/new_opvnt.cc (new): Make weak.\n\t* libsupc++/delete_op.cc (delete): Make weak.\n\t* libsupc++/delete_opnt.cc (delete): Make weak.\n\t* libsupc++/delete_opv.cc (delete): Make weak.\n\t* libsupc++/delete_opvnt.cc (delete): Make weak.\n\nFrom-SVN: r89572", "tree": {"sha": "55b7af27d9c57fd804dcf7cea7736d928a9d995d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b7af27d9c57fd804dcf7cea7736d928a9d995d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a66265195781c7f0cc6c627706bdf33a313657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a66265195781c7f0cc6c627706bdf33a313657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a66265195781c7f0cc6c627706bdf33a313657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a66265195781c7f0cc6c627706bdf33a313657/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "595961fccbefdeb23a17856f78026f7b15efb67b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595961fccbefdeb23a17856f78026f7b15efb67b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595961fccbefdeb23a17856f78026f7b15efb67b"}], "stats": {"total": 787, "additions": 529, "deletions": 258}, "files": [{"sha": "d2b1cc423bdcc76140d7f29600f6eb3af8450334", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -1,3 +1,47 @@\n+2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/darwin.h (LINK_SPEC): Default weak_reference_mismatches\n+\tto 'non-weak'.\n+\t(MAKE_DECL_ONE_ONLY): Set DECL_WEAK.\n+\t(ASM_MAKE_LABEL_LINKONCE): Delete.\n+\t(ASM_WEAKEN_DECL): New.\n+\t(ASM_DECLARE_OBJECT_NAME): Look at DECL_WEAK not DECL_ONE_ONLY.\n+\t(ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t(TEXT_SECTION_ASM_OP): Add a tab.\n+\t(DATA_SECTION_ASM_OP): Likewise.\n+\t(SECTION_FUNCTION): Add a tab.  Use fputs.  Don't call\n+\tdata_section on every section change.\n+\t(EXTRA_SECTIONS): Add a bunch of new extra sections.\n+\t(EXTRA_SECTION_FUNCTIONS): Likewise.\n+\t(USE_SELECT_SECTION_FOR_FUNCTIONS): Define.\n+\t(JCR_SECTION_NAME): Define.\n+\t(TARGET_SECTION_TYPE_FLAGS): Don't define.\n+\t* config/darwin.c (darwin_encode_section_info): A symbol is defined\n+\tin this file if it is not weak.\n+\t(textcoal_section): Delete.\n+\t(datacoal_section): Delete.\n+\t(darwin_make_decl_one_only): Delete.\n+\t(machopic_select_section): Handle functions.\n+\t(darwin_asm_named_section): Add a tab.\n+\t(darwin_section_type_flags): Delete.\n+\t(darwin_unique_section): Delete contents.\n+\t(darwin_emit_unwind_label): Add a tab.  Make decls weak if\n+\tDECL_WEAK is set.\n+\t* config/darwin-protos.h (darwin_section_type_flags): Delete.\n+\t(darwin_make_decl_one_only): Delete.\n+\t(text_coal_section): New.\n+\t(text_unlikely_section): New.\n+\t(text_unlikely_coal_section): New.\n+\t(const_coal_section): New.\n+\t(data_coal_section): New.\n+\t(const_data_coal_section): New.\n+\t* varasm.c (function_section): Honour\n+\tUSE_SELECT_SECTION_FOR_FUNCTIONS.\n+\t* dwarf2out.c (output_call_frame_info): Look at DECL_WEAK when\n+\tTARGET_USES_WEAK_UNWIND_INFO is in effect.\n+\t* dbxout.c (dbxout_source_file): Don't change sections while\n+\ta function is being output.\n+\n 2004-10-25  David Ayers  <d.ayers@inode.at>\n \n \t* c-common.h: Remove RID_ID."}, {"sha": "9a915a2b16f7a375af36c444e19d31fd67aa0ea6", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -70,7 +70,6 @@ extern void machopic_select_rtx_section (enum machine_mode, rtx,\n \n extern void darwin_unique_section (tree decl, int reloc);\n extern void darwin_asm_named_section (const char *, unsigned int, tree);\n-extern unsigned int darwin_section_type_flags (tree, const char *, int);\n extern void darwin_non_lazy_pcrel (FILE *, rtx);\n \n extern void darwin_emit_unwind_label (FILE *, tree, int, int);\n@@ -81,12 +80,17 @@ extern void darwin_pragma_unused (struct cpp_reader *);\n \n extern void darwin_file_end (void);\n \n-extern void darwin_make_decl_one_only (tree decl);\n extern void darwin_mark_decl_preserved (const char *);\n \n /* Expanded by EXTRA_SECTION_FUNCTIONS into varasm.o.  */\n+extern void text_coal_section (void);\n+extern void text_unlikely_section (void);\n+extern void text_unlikely_coal_section (void);\n extern void const_section (void);\n+extern void const_coal_section (void);\n extern void const_data_section (void);\n+extern void const_data_coal_section (void);\n+extern void data_coal_section (void);\n extern void cstring_section (void);\n extern void literal4_section (void);\n extern void literal8_section (void);"}, {"sha": "0c39fd80c650eef0ab8ad4df30261e597ab50e9f", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 44, "deletions": 52, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -976,7 +976,7 @@ darwin_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_VARIABLE;\n \n   if (!DECL_EXTERNAL (decl)\n-      && (!TREE_PUBLIC (decl) || (!DECL_ONE_ONLY (decl) && !DECL_WEAK (decl)))\n+      && (!TREE_PUBLIC (decl) || !DECL_WEAK (decl))\n       && ((TREE_STATIC (decl)\n \t   && (!DECL_COMMON (decl) || !TREE_PUBLIC (decl)))\n \t  || (!DECL_COMMON (decl) && DECL_INITIAL (decl)\n@@ -989,29 +989,6 @@ darwin_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_STATIC;\n }\n \n-static GTY(()) tree textcoal_section = 0;\n-static GTY(()) tree datacoal_section = 0;\n-\n-void\n-darwin_make_decl_one_only (tree decl)\n-{\n-  tree sec = 0;\n-  if (textcoal_section == 0)\n-    {\n-      static const char *ts = \"__TEXT,__textcoal_nt,coalesced\";\n-      static const char *ds = \"__DATA,__datacoal_nt,coalesced\";\n-      textcoal_section = build_string (strlen (ts), ts);\n-      datacoal_section = build_string (strlen (ds), ds);\n-    }\n-\n-  sec = TREE_CODE (decl) == FUNCTION_DECL\n-    ? textcoal_section\n-    : datacoal_section;\n-  TREE_PUBLIC (decl) = 1;\n-  DECL_ONE_ONLY (decl) = 1;\n-  DECL_SECTION_NAME (decl) = sec;\n-}\n-\n void\n darwin_mark_decl_preserved (const char *name)\n {\n@@ -1025,13 +1002,23 @@ machopic_select_section (tree exp, int reloc,\n \t\t\t unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n   void (*base_function)(void);\n-\n-  if (decl_readonly_section_1 (exp, reloc, MACHOPIC_INDIRECT))\n-    base_function = readonly_data_section;\n+  bool weak_p = DECL_P (exp) && DECL_WEAK (exp);\n+  static void (* const base_funs[][2])(void) = {\n+    { text_section, text_coal_section },\n+    { text_unlikely_section, text_unlikely_coal_section },\n+    { readonly_data_section, const_coal_section },\n+    { const_data_section, const_data_coal_section },\n+    { data_section, data_coal_section }\n+  };\n+\n+  if (TREE_CODE (exp) == FUNCTION_DECL)\n+    base_function = base_funs[reloc][weak_p];\n+  else if (decl_readonly_section_1 (exp, reloc, MACHOPIC_INDIRECT))\n+    base_function = base_funs[2][weak_p];\n   else if (TREE_READONLY (exp) || TREE_CONSTANT (exp))\n-    base_function = const_data_section;\n+    base_function = base_funs[3][weak_p];\n   else\n-    base_function = data_section;\n+    base_function = base_funs[4][weak_p];\n \n   if (TREE_CODE (exp) == STRING_CST\n       && ((size_t) TREE_STRING_LENGTH (exp)\n@@ -1125,6 +1112,28 @@ machopic_select_section (tree exp, int reloc,\n       else\n \tbase_function ();\n     }\n+  /* ::operator new and ::operator delete must be coalesced, even\n+     if not weak.  There are 8 variants that we look for.  */\n+  else if (TREE_CODE (exp) == FUNCTION_DECL\n+\t   && ! DECL_ONE_ONLY (exp))\n+    {\n+      const char * name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (exp));\n+      if (name[0] == '_' && name[1] == 'Z'\n+\t  && ((name[2] == 'n' && (name[3] == 'a' || name[3] == 'w')\n+\t       && name[4] == 'm')\n+\t      || (name[2] == 'd' && (name[3] == 'a' || name[3] == 'l')\n+\t\t  && name[4] == 'P' && name[5] == 'v')))\n+\t{\n+\t  bool delete_p = name[2] == 'd';\n+\t  if (name[5 + delete_p] == 0\n+\t      || strcmp (name + 5 + delete_p, \"KSt9nothrow_t\") == 0)\n+\t    base_funs[reloc][1] ();\n+\t  else\n+\t    base_function ();\n+\t}\n+      else\n+\tbase_function ();\n+    }\n   else\n     base_function ();\n }\n@@ -1191,30 +1200,13 @@ darwin_asm_named_section (const char *name,\n \t\t\t  unsigned int flags ATTRIBUTE_UNUSED,\n \t\t\t  tree decl ATTRIBUTE_UNUSED)\n {\n-  fprintf (asm_out_file, \".section %s\\n\", name);\n+  fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n }\n \n-unsigned int\n-darwin_section_type_flags (tree decl, const char *name, int reloc)\n-{\n-  unsigned int flags = default_section_type_flags (decl, name, reloc);\n- \n-  /* Weak or linkonce variables live in a writable section.  */\n-  if (decl != 0 && TREE_CODE (decl) != FUNCTION_DECL\n-      && (DECL_WEAK (decl) || DECL_ONE_ONLY (decl)))\n-    flags |= SECTION_WRITE;\n-  \n-  return flags;\n-}              \n-\n void \n-darwin_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n+darwin_unique_section (tree decl ATTRIBUTE_UNUSED, int reloc ATTRIBUTE_UNUSED)\n {\n-  /* Darwin does not use unique sections.  However, the target's\n-     unique_section hook is called for linkonce symbols.  We need\n-     to set an appropriate section for such symbols. */\n-  if (DECL_ONE_ONLY (decl) && !DECL_SECTION_NAME (decl))\n-    darwin_make_decl_one_only (decl);\n+  /* Darwin does not use unique sections.  */\n }\n \n #define HAVE_DEAD_STRIP 0\n@@ -1265,14 +1257,14 @@ darwin_emit_unwind_label (FILE *file, tree decl, int for_eh, int empty)\n     strcat(lab, \"\\\"\");\n \n   if (TREE_PUBLIC (decl))\n-    fprintf (file, \"%s %s\\n\",\n+    fprintf (file, \"\\t%s %s\\n\",\n \t     (DECL_VISIBILITY (decl) != VISIBILITY_HIDDEN\n \t      ? \".globl\"\n \t      : \".private_extern\"),\n \t     lab);\n \n-  if (DECL_ONE_ONLY (decl) && TREE_PUBLIC (decl))\n-    fprintf (file, \".weak_definition %s\\n\", lab);\n+  if (DECL_WEAK (decl))\n+    fprintf (file, \"\\t.weak_definition %s\\n\", lab);\n \n   if (empty)\n     {"}, {"sha": "c12d5b67160925eb97890231e54cea60831df343", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 220, "deletions": 172, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -295,6 +295,7 @@ extern const char *darwin_fix_and_continue_switch;\n    %{undefined*} \\\n    %{Zunexported_symbols_list*:-unexported_symbols_list %*} \\\n    %{Zweak_reference_mismatches*:-weak_reference_mismatches %*} \\\n+   %{!Zweak_reference_mismatches*:-weak_reference_mismatches non-weak} \\\n    %{X} \\\n    %{y*} \\\n    %{w} \\\n@@ -364,16 +365,33 @@ extern const char *darwin_fix_and_continue_switch;\n \n #define DBX_OUTPUT_NULL_N_SO_AT_MAIN_SOURCE_FILE_END\n \n-/* Making a symbols weak on Darwin requires more than just setting DECL_WEAK. */\n-#define MAKE_DECL_ONE_ONLY(DECL) darwin_make_decl_one_only (DECL)\n+/* GCC's definition of 'one_only' is the same as its definition of 'weak'.  */\n+#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-/* Representation of linkonce symbols for the MACH-O assembler. Linkonce\n-   symbols must be given a special section *and* must be preceded by a \n-   special assembler directive. */\n-#define ASM_MAKE_LABEL_LINKONCE(FILE,  NAME)                            \\\n- do { const char* _x = (NAME); if (!!strncmp (_x, \"_OBJC_\", 6)) {\t\\\n-  fputs (\".weak_definition \", FILE); assemble_name (FILE, _x);\t\t\\\n-  fputs (\"\\n\", FILE); }} while (0)\n+/* Mach-O supports 'weak imports', and 'weak definitions' in coalesced\n+   sections.  machopic_select_section ensures that weak variables go in\n+   coalesced sections.  Weak aliases (or any other kind of aliases) are\n+   not supported.  Weak symbols that aren't visible outside the .s file\n+   are not supported.  */\n+#define ASM_WEAKEN_DECL(FILE, DECL, NAME, ALIAS)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (ALIAS)\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\twarning (\"alias definitions not supported in Mach-O; ignored\");\t\\\n+\tbreak;\t\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+ \t\t\t\t\t\t\t\t\t\\\n+    if (! DECL_EXTERNAL (DECL) && TREE_PUBLIC (DECL))\t\t\t\\\n+      targetm.asm_out.globalize_label (FILE, NAME);\t\t\t\\\n+    if (DECL_EXTERNAL (DECL))\t\t\t\t\t\t\\\n+      fputs (\"\\t.weak_reference \", FILE);\t\t\t\t\\\n+    else if (TREE_PUBLIC (DECL))\t\t\t\t\t\\\n+      fputs (\"\\t.weak_definition \", FILE);\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+  } while (0)\n \n /* We support hidden visibility */\n #undef TARGET_SUPPORTS_HIDDEN\n@@ -455,37 +473,37 @@ extern const char *darwin_fix_and_continue_switch;\n     const char *xname = NAME;\t\t\t\t\t\t\\\n     if (GET_CODE (XEXP (DECL_RTL (DECL), 0)) != SYMBOL_REF)\t\t\\\n       xname = IDENTIFIER_POINTER (DECL_NAME (DECL));\t\t\t\\\n-    if (! DECL_ONE_ONLY (DECL) && ! DECL_WEAK (DECL))                   \\\n-      if ((TREE_STATIC (DECL)\t\t\t\t\t\t\\\n-\t   && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n-          || DECL_INITIAL (DECL))\t\t\t\t\t\\\n+    if (! DECL_WEAK (DECL)\t\t\t\t\t\t\\\n+        && ((TREE_STATIC (DECL)\t\t\t\t\t\t\\\n+\t     && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n+            || DECL_INITIAL (DECL)))\t\t\t\t\t\\\n         machopic_define_symbol (DECL_RTL (DECL));\t\t\t\\\n     if ((TREE_STATIC (DECL)\t\t\t\t\t\t\\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n         || DECL_INITIAL (DECL))\t\t\t\t\t\t\\\n       (* targetm.encode_section_info) (DECL, DECL_RTL (DECL), false);\t\\\n     ASM_OUTPUT_LABEL (FILE, xname);\t\t\t\t\t\\\n-    /* Darwin doesn't support zero-size objects, so give them a\t\\\n+    /* Darwin doesn't support zero-size objects, so give them a\t\t\\\n        byte.  */\t\t\t\t\t\t\t\\\n     if (tree_low_cst (DECL_SIZE_UNIT (DECL), 1) == 0)\t\t\t\\\n       assemble_zeros (1);\t\t\t\t\t\t\\\n   } while (0)\n \n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)                     \\\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    const char *xname = NAME;                                           \\\n-    if (GET_CODE (XEXP (DECL_RTL (DECL), 0)) != SYMBOL_REF)             \\\n-      xname = IDENTIFIER_POINTER (DECL_NAME (DECL));                    \\\n-    if (! DECL_ONE_ONLY (DECL) && ! DECL_WEAK (DECL))\t\t\t\\\n-      if ((TREE_STATIC (DECL)                                           \\\n-\t   && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))             \\\n-          || DECL_INITIAL (DECL))                                       \\\n-        machopic_define_symbol (DECL_RTL (DECL));                       \\\n-    if ((TREE_STATIC (DECL)                                             \\\n-\t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n-        || DECL_INITIAL (DECL))                                         \\\n+    const char *xname = NAME;\t\t\t\t\t\t\\\n+    if (GET_CODE (XEXP (DECL_RTL (DECL), 0)) != SYMBOL_REF)\t\t\\\n+      xname = IDENTIFIER_POINTER (DECL_NAME (DECL));\t\t\t\\\n+    if (! DECL_WEAK (DECL)\t\t\t\t\t\t\\\n+        && ((TREE_STATIC (DECL)\t\t\t\t\t\t\\\n+\t     && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n+            || DECL_INITIAL (DECL)))\t\t\t\t\t\\\n+        machopic_define_symbol (DECL_RTL (DECL));\t\t\t\\\n+    if ((TREE_STATIC (DECL)\t\t\t\t\t\t\\\n+\t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n+        || DECL_INITIAL (DECL))\t\t\t\t\t\t\\\n       (* targetm.encode_section_info) (DECL, DECL_RTL (DECL), false);\t\\\n-    ASM_OUTPUT_LABEL (FILE, xname);                                     \\\n+    ASM_OUTPUT_LABEL (FILE, xname);\t\t\t\t\t\\\n   } while (0)\n \n #define ASM_DECLARE_CONSTANT_NAME(FILE, NAME, EXP, SIZE)\t\\\n@@ -529,12 +547,12 @@ extern const char *darwin_fix_and_continue_switch;\n \n /* Output before executable code.  */\n #undef TEXT_SECTION_ASM_OP\n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n /* Output before writable data.  */\n \n #undef DATA_SECTION_ASM_OP\n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n \n #undef\tALIGN_ASM_OP\n #define ALIGN_ASM_OP\t\t\".align\"\n@@ -580,160 +598,187 @@ FUNCTION (void)\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (OBJC)\t\t\t\t\t\t\t\t\\\n \tobjc_section_init ();\t\t\t\t\t\t\\\n-      data_section ();\t\t\t\t\t\t\t\\\n       if (asm_out_file)\t\t\t\t\t\t\t\\\n-\tfprintf (asm_out_file, \"%s\\n\", DIRECTIVE);\t\t\t\\\n+\tfputs (\"\\t\" DIRECTIVE \"\\n\", asm_out_file);\t\t\t\\\n       in_section = SECTION;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \n /* Darwin uses many types of special sections.  */\n \n #undef\tEXTRA_SECTIONS\n-#define EXTRA_SECTIONS\t\t\t\t\t\\\n+#define EXTRA_SECTIONS\t\t\t\t\t\t\t\\\n+  in_text_coal, in_text_unlikely, in_text_unlikely_coal,\t\t\\\n   in_const, in_const_data, in_cstring, in_literal4, in_literal8,\t\\\n+  in_const_coal, in_const_data_coal, in_data_coal,\t\t\t\\\n   in_constructor, in_destructor, in_mod_init, in_mod_term,\t\t\\\n-  in_objc_class, in_objc_meta_class, in_objc_category,\t\\\n-  in_objc_class_vars, in_objc_instance_vars,\t\t\\\n-  in_objc_cls_meth, in_objc_inst_meth,\t\t\t\\\n-  in_objc_cat_cls_meth, in_objc_cat_inst_meth,\t\t\\\n-  in_objc_selector_refs,\t\t\t\t\\\n-  in_objc_selector_fixup,\t\t\t\t\\\n-  in_objc_symbols, in_objc_module_info,\t\t\t\\\n-  in_objc_protocol, in_objc_string_object,\t\t\\\n-  in_objc_constant_string_object,\t\t\t\\\n-  in_objc_image_info,\t\t\t\t\t\\\n-  in_objc_class_names, in_objc_meth_var_names,\t\t\\\n-  in_objc_meth_var_types, in_objc_cls_refs,\t\t\\\n-  in_machopic_nl_symbol_ptr,\t\t\t\t\\\n-  in_machopic_lazy_symbol_ptr,\t\t\t\t\\\n-  in_machopic_symbol_stub,\t\t\t\t\\\n-  in_machopic_symbol_stub1,\t\t\t\t\\\n-  in_machopic_picsymbol_stub,\t\t\t\t\\\n-  in_machopic_picsymbol_stub1,\t\t\t\t\\\n-  in_darwin_exception, in_darwin_eh_frame,\t\t\\\n+  in_objc_class, in_objc_meta_class, in_objc_category,\t\t\t\\\n+  in_objc_class_vars, in_objc_instance_vars,\t\t\t\t\\\n+  in_objc_cls_meth, in_objc_inst_meth,\t\t\t\t\t\\\n+  in_objc_cat_cls_meth, in_objc_cat_inst_meth,\t\t\t\t\\\n+  in_objc_selector_refs,\t\t\t\t\t\t\\\n+  in_objc_selector_fixup,\t\t\t\t\t\t\\\n+  in_objc_symbols, in_objc_module_info,\t\t\t\t\t\\\n+  in_objc_protocol, in_objc_string_object,\t\t\t\t\\\n+  in_objc_constant_string_object,\t\t\t\t\t\\\n+  in_objc_image_info,\t\t\t\t\t\t\t\\\n+  in_objc_class_names, in_objc_meth_var_names,\t\t\t\t\\\n+  in_objc_meth_var_types, in_objc_cls_refs,\t\t\t\t\\\n+  in_machopic_nl_symbol_ptr,\t\t\t\t\t\t\\\n+  in_machopic_lazy_symbol_ptr,\t\t\t\t\t\t\\\n+  in_machopic_symbol_stub,\t\t\t\t\t\t\\\n+  in_machopic_symbol_stub1,\t\t\t\t\t\t\\\n+  in_machopic_picsymbol_stub,\t\t\t\t\t\t\\\n+  in_machopic_picsymbol_stub1,\t\t\t\t\t\t\\\n+  in_darwin_exception, in_darwin_eh_frame,\t\t\t\t\\\n   num_sections\n \n #undef\tEXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\\\n-static void objc_section_init (void);\t\t\\\n-SECTION_FUNCTION (const_section,\t\t\\\n-                  in_const,\t\t\t\\\n-                  \".const\", 0)\t\t\t\\\n-SECTION_FUNCTION (const_data_section,\t\t\\\n-                  in_const_data,\t\t\\\n-                  \".const_data\", 0)\t\t\\\n-SECTION_FUNCTION (cstring_section,\t\t\\\n-\t\t  in_cstring,\t\t\t\\\n-\t\t  \".cstring\", 0)\t\t\\\n-SECTION_FUNCTION (literal4_section,\t\t\\\n-\t\t  in_literal4,\t\t\t\\\n-\t\t  \".literal4\", 0)\t\t\\\n-SECTION_FUNCTION (literal8_section,\t\t\\\n-\t\t  in_literal8,\t\t\t\\\n-\t\t  \".literal8\", 0)\t\t\\\n-SECTION_FUNCTION (constructor_section,\t\t\\\n-\t\t  in_constructor,\t\t\\\n-\t\t  \".constructor\", 0)\t\t\\\n-SECTION_FUNCTION (mod_init_section,\t\t\\\n-\t\t  in_mod_init,\t\t\t\\\n-\t\t  \".mod_init_func\", 0)\t\\\n-SECTION_FUNCTION (mod_term_section, \\\n-\t\t  in_mod_term,\t\t\t\\\n-\t\t  \".mod_term_func\", 0)\t\\\n-SECTION_FUNCTION (destructor_section,\t\t\\\n-\t\t  in_destructor,\t\t\\\n-\t\t  \".destructor\", 0)\t\t\\\n-SECTION_FUNCTION (objc_class_section,\t\t\\\n-\t\t  in_objc_class,\t\t\\\n-\t\t  \".objc_class\", 1)\t\t\\\n-SECTION_FUNCTION (objc_meta_class_section,\t\\\n-\t\t  in_objc_meta_class,\t\t\\\n-\t\t  \".objc_meta_class\", 1)\t\\\n-SECTION_FUNCTION (objc_category_section,\t\\\n-\t\t  in_objc_category,\t\t\\\n-\t\t\".objc_category\", 1)\t\t\\\n-SECTION_FUNCTION (objc_class_vars_section,\t\\\n-\t\t  in_objc_class_vars,\t\t\\\n-\t\t  \".objc_class_vars\", 1)\t\\\n-SECTION_FUNCTION (objc_instance_vars_section,\t\\\n-\t\t  in_objc_instance_vars,\t\\\n-\t\t  \".objc_instance_vars\", 1)\t\\\n-SECTION_FUNCTION (objc_cls_meth_section,\t\\\n-\t\t  in_objc_cls_meth,\t\t\\\n-\t\t  \".objc_cls_meth\", 1)\t\\\n-SECTION_FUNCTION (objc_inst_meth_section,\t\\\n-\t\t  in_objc_inst_meth,\t\t\\\n-\t\t  \".objc_inst_meth\", 1)\t\\\n-SECTION_FUNCTION (objc_cat_cls_meth_section,\t\\\n-\t\t  in_objc_cat_cls_meth,\t\t\\\n-\t\t  \".objc_cat_cls_meth\", 1)\t\\\n-SECTION_FUNCTION (objc_cat_inst_meth_section,\t\\\n-\t\t  in_objc_cat_inst_meth,\t\\\n-\t\t  \".objc_cat_inst_meth\", 1)\t\\\n-SECTION_FUNCTION (objc_selector_refs_section,\t\\\n-\t\t  in_objc_selector_refs,\t\\\n-\t\t  \".objc_message_refs\", 1)\t\\\n-SECTION_FUNCTION (objc_selector_fixup_section,\t\\\n-\t\t  in_objc_selector_fixup,\t\\\n-\t\t  \".section __OBJC, __sel_fixup, regular, no_dead_strip\", 1)\t\\\n-SECTION_FUNCTION (objc_symbols_section,\t\t\\\n-\t\t  in_objc_symbols,\t\t\\\n-\t\t  \".objc_symbols\", 1)\t\\\n-SECTION_FUNCTION (objc_module_info_section,\t\\\n-\t\t  in_objc_module_info,\t\t\\\n-\t\t  \".objc_module_info\", 1)\t\\\n-SECTION_FUNCTION (objc_protocol_section,\t\\\n-\t\t  in_objc_protocol,\t\t\\\n-\t\t  \".objc_protocol\", 1)\t\\\n-SECTION_FUNCTION (objc_string_object_section,\t\\\n-\t\t  in_objc_string_object,\t\\\n-\t\t  \".objc_string_object\", 1)\t\\\n-SECTION_FUNCTION (objc_constant_string_object_section,\t\\\n-\t\t  in_objc_constant_string_object,\t\\\n-\t\t  \".section __OBJC, __cstring_object, regular, no_dead_strip\", 1)\t\\\n-/* Fix-and-Continue image marker.  */\t\t\\\n-SECTION_FUNCTION (objc_image_info_section,\t\\\n-                  in_objc_image_info,\t\t\\\n-                  \".section __OBJC, __image_info, regular, no_dead_strip\", 1)\t\\\n-SECTION_FUNCTION (objc_class_names_section,\t\\\n-\t\tin_objc_class_names,\t\t\\\n-\t\t\".objc_class_names\", 1)\t\\\n-SECTION_FUNCTION (objc_meth_var_names_section,\t\\\n-\t\tin_objc_meth_var_names,\t\t\\\n-\t\t\".objc_meth_var_names\", 1)\t\\\n-SECTION_FUNCTION (objc_meth_var_types_section,\t\\\n-\t\tin_objc_meth_var_types,\t\t\\\n-\t\t\".objc_meth_var_types\", 1)\t\\\n-SECTION_FUNCTION (objc_cls_refs_section,\t\\\n-\t\tin_objc_cls_refs,\t\t\\\n-\t\t\".objc_cls_refs\", 1)\t\t\\\n-\t\t\t\t\t\t\\\n-SECTION_FUNCTION (machopic_lazy_symbol_ptr_section,\t\\\n-\t\tin_machopic_lazy_symbol_ptr,\t\t\\\n-\t\t\".lazy_symbol_pointer\", 0)\t\\\n-SECTION_FUNCTION (machopic_nl_symbol_ptr_section,\t\\\n-\t\tin_machopic_nl_symbol_ptr,\t\t\\\n-\t\t\".non_lazy_symbol_pointer\", 0)\t\\\n-SECTION_FUNCTION (machopic_symbol_stub_section,\t\t\\\n-\t\tin_machopic_symbol_stub,\t\t\\\n-\t\t\".symbol_stub\", 0)\t\t\\\n-SECTION_FUNCTION (machopic_symbol_stub1_section,\t\\\n-\t\tin_machopic_symbol_stub1,\t\t\\\n-\t\t\".section __TEXT,__symbol_stub1,symbol_stubs,pure_instructions,16\", 0)\\\n-SECTION_FUNCTION (machopic_picsymbol_stub_section,\t\\\n-\t\tin_machopic_picsymbol_stub,\t\t\\\n-\t\t\".picsymbol_stub\", 0)\t\t\\\n-SECTION_FUNCTION (machopic_picsymbol_stub1_section,\t\\\n-\t\tin_machopic_picsymbol_stub1,\t\t\\\n-\t\t\".section __TEXT,__picsymbolstub1,symbol_stubs,pure_instructions,32\", 0)\\\n-SECTION_FUNCTION (darwin_exception_section,\t\t\\\n-\t\tin_darwin_exception,\t\t\t\\\n-\t\t\".section __DATA,__gcc_except_tab\", 0)\t\\\n-SECTION_FUNCTION (darwin_eh_frame_section,\t\t\\\n-\t\tin_darwin_eh_frame,\t\t\t\\\n-\t\t\".section \" EH_FRAME_SECTION_NAME \",__eh_frame\" EH_FRAME_SECTION_ATTR, 0)  \\\n-\t\t\t\t\t\t\t\\\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n+static void objc_section_init (void);\t\t\t\t\\\n+SECTION_FUNCTION (text_coal_section,\t\t\t\t\\\n+\t\t  in_text_coal,\t\t\t\t\t\\\n+\t\t  \".section __TEXT,__textcoal_nt,coalesced,\"\t\\\n+\t\t    \"pure_instructions\", 0)\t\t\t\\\n+SECTION_FUNCTION (text_unlikely_section,\t\t\t\\\n+\t\t  in_text_unlikely,\t\t\t\t\\\n+\t\t  \".section __TEXT,__text_unlikely,coalesced,\"\t\\\n+\t\t    \"pure_instructions\", 0)\t\t\t\\\n+SECTION_FUNCTION (text_unlikely_coal_section,\t\t\t\\\n+\t\t  in_text_unlikely_coal,\t\t\t\\\n+\t\t  \".section __TEXT,__text_unlikely_coal,\"\t\\\n+\t\t    \"coalesced,pure_instructions\", 0)\t\t\\\n+SECTION_FUNCTION (const_section,\t\t\t\t\\\n+                  in_const,\t\t\t\t\t\\\n+                  \".const\", 0)\t\t\t\t\t\\\n+SECTION_FUNCTION (const_coal_section,\t\t\t\t\\\n+\t\t  in_const_coal,\t\t\t\t\\\n+\t\t  \".section __TEXT,__const_coal,coalesced\", 0)\t\\\n+SECTION_FUNCTION (const_data_section,\t\t\t\t\\\n+                  in_const_data,\t\t\t\t\\\n+                  \".const_data\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (const_data_coal_section,\t\t\t\\\n+                  in_const_data_coal,\t\t\t\t\\\n+                  \".section __DATA,__const_coal,coalesced\", 0)\t\\\n+SECTION_FUNCTION (data_coal_section,\t\t\t\t\\\n+                  in_data_coal,\t\t\t\t\t\\\n+                  \".section __DATA,__datacoal_nt,coalesced\", 0)\t\\\n+SECTION_FUNCTION (cstring_section,\t\t\t\t\\\n+\t\t  in_cstring,\t\t\t\t\t\\\n+\t\t  \".cstring\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (literal4_section,\t\t\t\t\\\n+\t\t  in_literal4,\t\t\t\t\t\\\n+\t\t  \".literal4\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (literal8_section,\t\t\t\t\\\n+\t\t  in_literal8,\t\t\t\t\t\\\n+\t\t  \".literal8\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (constructor_section,\t\t\t\t\\\n+\t\t  in_constructor,\t\t\t\t\\\n+\t\t  \".constructor\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (mod_init_section,\t\t\t\t\\\n+\t\t  in_mod_init,\t\t\t\t\t\\\n+\t\t  \".mod_init_func\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (mod_term_section,\t\t\t\t\\\n+\t\t  in_mod_term,\t\t\t\t\t\\\n+\t\t  \".mod_term_func\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (destructor_section,\t\t\t\t\\\n+\t\t  in_destructor,\t\t\t\t\\\n+\t\t  \".destructor\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (objc_class_section,\t\t\t\t\\\n+\t\t  in_objc_class,\t\t\t\t\\\n+\t\t  \".objc_class\", 1)\t\t\t\t\\\n+SECTION_FUNCTION (objc_meta_class_section,\t\t\t\\\n+\t\t  in_objc_meta_class,\t\t\t\t\\\n+\t\t  \".objc_meta_class\", 1)\t\t\t\\\n+SECTION_FUNCTION (objc_category_section,\t\t\t\\\n+\t\t  in_objc_category,\t\t\t\t\\\n+\t\t\".objc_category\", 1)\t\t\t\t\\\n+SECTION_FUNCTION (objc_class_vars_section,\t\t\t\\\n+\t\t  in_objc_class_vars,\t\t\t\t\\\n+\t\t  \".objc_class_vars\", 1)\t\t\t\\\n+SECTION_FUNCTION (objc_instance_vars_section,\t\t\t\\\n+\t\t  in_objc_instance_vars,\t\t\t\\\n+\t\t  \".objc_instance_vars\", 1)\t\t\t\\\n+SECTION_FUNCTION (objc_cls_meth_section,\t\t\t\\\n+\t\t  in_objc_cls_meth,\t\t\t\t\\\n+\t\t  \".objc_cls_meth\", 1)\t\t\t\t\\\n+SECTION_FUNCTION (objc_inst_meth_section,\t\t\t\\\n+\t\t  in_objc_inst_meth,\t\t\t\t\\\n+\t\t  \".objc_inst_meth\", 1)\t\t\t\t\\\n+SECTION_FUNCTION (objc_cat_cls_meth_section,\t\t\t\\\n+\t\t  in_objc_cat_cls_meth,\t\t\t\t\\\n+\t\t  \".objc_cat_cls_meth\", 1)\t\t\t\\\n+SECTION_FUNCTION (objc_cat_inst_meth_section,\t\t\t\\\n+\t\t  in_objc_cat_inst_meth,\t\t\t\\\n+\t\t  \".objc_cat_inst_meth\", 1)\t\t\t\\\n+SECTION_FUNCTION (objc_selector_refs_section,\t\t\t\\\n+\t\t  in_objc_selector_refs,\t\t\t\\\n+\t\t  \".objc_message_refs\", 1)\t\t\t\\\n+SECTION_FUNCTION (objc_selector_fixup_section,\t\t\t\t     \\\n+\t\t  in_objc_selector_fixup,\t\t\t\t     \\\n+\t\t  \".section __OBJC, __sel_fixup, regular, no_dead_strip\", 1) \\\n+SECTION_FUNCTION (objc_symbols_section,\t\t\t\t\t\\\n+\t\t  in_objc_symbols,\t\t\t\t\t\\\n+\t\t  \".objc_symbols\", 1)\t\t\t\t\t\\\n+SECTION_FUNCTION (objc_module_info_section,\t\t\t\t\\\n+\t\t  in_objc_module_info,\t\t\t\t\t\\\n+\t\t  \".objc_module_info\", 1)\t\t\t\t\\\n+SECTION_FUNCTION (objc_protocol_section,\t\t\t\t\\\n+\t\t  in_objc_protocol,\t\t\t\t\t\\\n+\t\t  \".objc_protocol\", 1)\t\t\t\t\t\\\n+SECTION_FUNCTION (objc_string_object_section,\t\t\t\t\\\n+\t\t  in_objc_string_object,\t\t\t\t\\\n+\t\t  \".objc_string_object\", 1)\t\t\t\t\\\n+SECTION_FUNCTION (objc_constant_string_object_section,\t\t\t\\\n+\t\t  in_objc_constant_string_object,\t\t\t\\\n+\t\t  \".section __OBJC, __cstring_object, regular, \"\t\\\n+\t\t    \"no_dead_strip\", 1)\t\t\t\t\t\\\n+/* Fix-and-Continue image marker.  */\t\t\t\t\t\\\n+SECTION_FUNCTION (objc_image_info_section,\t\t\t\t\\\n+                  in_objc_image_info,\t\t\t\t\t\\\n+                  \".section __OBJC, __image_info, regular, \"\t\t\\\n+\t\t    \"no_dead_strip\", 1)\t\t\t\t\t\\\n+SECTION_FUNCTION (objc_class_names_section,\t\t\t\t\\\n+\t\tin_objc_class_names,\t\t\t\t\t\\\n+\t\t\".objc_class_names\", 1)\t\t\t\t\t\\\n+SECTION_FUNCTION (objc_meth_var_names_section,\t\t\t\t\\\n+\t\tin_objc_meth_var_names,\t\t\t\t\t\\\n+\t\t\".objc_meth_var_names\", 1)\t\t\t\t\\\n+SECTION_FUNCTION (objc_meth_var_types_section,\t\t\t\t\\\n+\t\tin_objc_meth_var_types,\t\t\t\t\t\\\n+\t\t\".objc_meth_var_types\", 1)\t\t\t\t\\\n+SECTION_FUNCTION (objc_cls_refs_section,\t\t\t\t\\\n+\t\tin_objc_cls_refs,\t\t\t\t\t\\\n+\t\t\".objc_cls_refs\", 1)\t\t\t\t\t\\\n+\\\n+SECTION_FUNCTION (machopic_lazy_symbol_ptr_section,\t\t\t\\\n+\t\tin_machopic_lazy_symbol_ptr,\t\t\t\t\\\n+\t\t\".lazy_symbol_pointer\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (machopic_nl_symbol_ptr_section,\t\t\t\\\n+\t\tin_machopic_nl_symbol_ptr,\t\t\t\t\\\n+\t\t\".non_lazy_symbol_pointer\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (machopic_symbol_stub_section,\t\t\t\t\\\n+\t\tin_machopic_symbol_stub,\t\t\t\t\\\n+\t\t\".symbol_stub\", 0)\t\t\t\t\t\\\n+SECTION_FUNCTION (machopic_symbol_stub1_section,\t\t\t\\\n+\t\tin_machopic_symbol_stub1,\t\t\t\t\\\n+\t\t\".section __TEXT,__symbol_stub1,symbol_stubs,\"\t\t\\\n+\t\t  \"pure_instructions,16\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (machopic_picsymbol_stub_section,\t\t\t\\\n+\t\tin_machopic_picsymbol_stub,\t\t\t\t\\\n+\t\t\".picsymbol_stub\", 0)\t\t\t\t\t\\\n+SECTION_FUNCTION (machopic_picsymbol_stub1_section,\t\t\t\\\n+\t\tin_machopic_picsymbol_stub1,\t\t\t\t\\\n+\t\t\".section __TEXT,__picsymbolstub1,symbol_stubs,\"\t\\\n+\t\t  \"pure_instructions,32\", 0)\t\t\t\t\\\n+SECTION_FUNCTION (darwin_exception_section,\t\t\t\t\\\n+\t\tin_darwin_exception,\t\t\t\t\t\\\n+\t\t\".section __DATA,__gcc_except_tab\", 0)\t\t\t\\\n+SECTION_FUNCTION (darwin_eh_frame_section,\t\t\t\t\\\n+\t\tin_darwin_eh_frame,\t\t\t\t\t\\\n+\t\t\".section \" EH_FRAME_SECTION_NAME \",__eh_frame\"\t\t\\\n+\t\t  EH_FRAME_SECTION_ATTR, 0)\t\t\t\t\\\n+\\\n static void\t\t\t\t\t\\\n objc_section_init (void)\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -771,6 +816,8 @@ objc_section_init (void)\t\t\t\\\n \n #undef\tTARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION machopic_select_section\n+#define USE_SELECT_SECTION_FOR_FUNCTIONS\n+\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION machopic_select_rtx_section\n #undef  TARGET_ASM_UNIQUE_SECTION\n@@ -918,6 +965,9 @@ enum machopic_addr_class {\n #define EH_FRAME_SECTION_NAME   \"__TEXT\"\n #define EH_FRAME_SECTION_ATTR \",coalesced,no_toc+strip_static_syms+live_support\"\n \n+/* Java runtime class list.  */\n+#define JCR_SECTION_NAME \"__DATA,jcr,regular,no_dead_strip\"\n+\n #undef ASM_PREFERRED_EH_DATA_FORMAT\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)  \\\n   (((CODE) == 2 && (GLOBAL) == 1) \\\n@@ -938,8 +988,6 @@ enum machopic_addr_class {\n \n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION darwin_asm_named_section\n-#undef TARGET_SECTION_TYPE_FLAGS\n-#define TARGET_SECTION_TYPE_FLAGS darwin_section_type_flags\n \n #define DARWIN_REGISTER_TARGET_PRAGMAS()\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\"}, {"sha": "50118698d399ebd653336aa70dcb536fb88db749", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -759,14 +759,10 @@ dbxout_source_file (FILE *file, const char *filename)\n       fprintf (asm_out_file, \",%d,0,0,\", N_SOL);\n       assemble_name (asm_out_file, ltext_label_name);\n       fputc ('\\n', asm_out_file);\n-      if (current_function_decl != NULL_TREE\n-\t  && DECL_SECTION_NAME (current_function_decl) != NULL_TREE)\n+      if (current_function_decl != NULL_TREE)\n \t; /* Don't change section amid function.  */\n       else\n-\t{\n-\t  if (!in_text_section () && !in_unlikely_text_section ())\n-\t    text_section ();\n-\t}\n+\ttext_section ();\n       targetm.asm_out.internal_label (file, \"Ltext\", source_label_number);\n       source_label_number++;\n       lastfile = filename;"}, {"sha": "63a46149632b15c86c28d23547adce70ab699043", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -2050,7 +2050,7 @@ output_call_frame_info (int for_eh)\n   /* If we make FDEs linkonce, we may have to emit an empty label for\n      an FDE that wouldn't otherwise be emitted.  We want to avoid\n      having an FDE kept around when the function it refers to is\n-     discarded. (Example where this matters: a primary function\n+     discarded.  Example where this matters: a primary function\n      template in C++ requires EH information, but an explicit\n      specialization doesn't.  */\n   if (TARGET_USES_WEAK_UNWIND_INFO\n@@ -2059,7 +2059,7 @@ output_call_frame_info (int for_eh)\n     for (i = 0; i < fde_table_in_use; i++)\n       if ((fde_table[i].nothrow || fde_table[i].all_throwers_are_sibcalls)\n           && !fde_table[i].uses_eh_lsda\n-\t  && ! DECL_ONE_ONLY (fde_table[i].decl))\n+\t  && ! DECL_WEAK (fde_table[i].decl))\n \ttargetm.asm_out.unwind_label (asm_out_file, fde_table[i].decl,\n \t\t\t\t      for_eh, /* empty */ 1);\n \n@@ -2074,8 +2074,7 @@ output_call_frame_info (int for_eh)\n       for (i = 0; i < fde_table_in_use; i++)\n \tif (fde_table[i].uses_eh_lsda)\n \t  any_eh_needed = any_lsda_needed = true;\n-        else if (TARGET_USES_WEAK_UNWIND_INFO\n-\t\t && DECL_ONE_ONLY (fde_table[i].decl))\n+        else if (TARGET_USES_WEAK_UNWIND_INFO && DECL_WEAK (fde_table[i].decl))\n \t  any_eh_needed = true;\n \telse if (! fde_table[i].nothrow\n \t\t && ! fde_table[i].all_throwers_are_sibcalls)\n@@ -2222,7 +2221,7 @@ output_call_frame_info (int for_eh)\n       /* Don't emit EH unwind info for leaf functions that don't need it.  */\n       if (for_eh && !flag_asynchronous_unwind_tables && flag_exceptions\n \t  && (fde->nothrow || fde->all_throwers_are_sibcalls)\n-\t  && (! TARGET_USES_WEAK_UNWIND_INFO || ! DECL_ONE_ONLY (fde->decl))\n+\t  && ! (TARGET_USES_WEAK_UNWIND_INFO && DECL_WEAK (fde_table[i].decl))\n \t  && !fde->uses_eh_lsda)\n \tcontinue;\n "}, {"sha": "8e00d1b887bef7a7305e5884b1cd223a873791de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -1,3 +1,7 @@\n+2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* objc.dg/image-info.m: Update for changes to section selection.\n+\n 2004-10-25  David Ayers  <d.ayers@inode.at>\n \t    Ziemowit Laski  <zlaski@apple.com>\n "}, {"sha": "87f147792956346b775cd2baf89fa37cdbbcc93e", "filename": "gcc/testsuite/objc.dg/image-info.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -35,4 +35,4 @@ @implementation Base\n }\n @end\n \n-/* { dg-final { scan-assembler \"\\n.data\\n.section __OBJC, __image_info.*\\n\\t.align.*\\nL_OBJC_IMAGE_INFO.*:\\n\\t.long\\t0\\n\\t.long\\t1\\n.data\\n.objc_module_info\\n\" } } */\n+/* { dg-final { scan-assembler \"\\t.section __OBJC, __image_info.*\\n\\t.align.*\\nL_OBJC_IMAGE_INFO.*:\\n\\t.long\\t0\\n\\t.long\\t1\\n\\t.objc_module_info\\n\" } } */"}, {"sha": "4c96e9f2737b6f6a0729670b824d7aa6df3df32f", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -574,13 +574,19 @@ asm_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n void\n function_section (tree decl)\n {\n+#ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n+  bool unlikely = scan_ahead_for_unlikely_executed_note (get_insns());\n+  \n+  targetm.asm_out.select_section (decl, unlikely, DECL_ALIGN (decl));\n+#else\n   if (scan_ahead_for_unlikely_executed_note (get_insns()))\n     unlikely_text_section ();\n   else if (decl != NULL_TREE\n \t   && DECL_SECTION_NAME (decl) != NULL_TREE)\n     named_section (decl, (char *) 0, 0);\n   else\n-    text_section (); \n+    text_section ();\n+#endif\n }\n \n /* Switch to read-only data section associated with function DECL.  */"}, {"sha": "51ee45bb6375bd24e16d67c7ca38ab6f699e54aa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -1,3 +1,23 @@\n+2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* Makefile.am (DARWIN_CRT_SRC): New.\n+\t(libgcj_la_SOURCES): Use it.\n+\t* configure.ac: Define USING_DARWIN_CRT when on Darwin.\n+\t* darwin.cc: New file.\n+\t* include/jvm.h (_Jv_RegisterClasses): Constify.\n+\t(_Jv_RegisterClasses_Counted): New prototype.\n+\t* java/lang/Class.h: Include stddef.h.  \n+\t(_Jv_RegisterClasses): Constify.\n+\t(_Jv_RegisterClasses_Counted): New prototype.\n+\t(Object): Make '_Jv_RegisterClasses_Counted' a friend.\n+\t* java/lang/natClassLoader.cc (_Jv_RegisterClasses): Constify.\n+\t(_Jv_RegisterClasses_Counted): New function.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* gcj/Makefile.in: Regenerate.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n 2004-10-25  Tom Tromey  <tromey@redhat.com>\n \n \t* java/util/ResourceBundle.java (tryBundle): Use"}, {"sha": "09c31adb1bf1fb85251254595ed6349d6badc985", "filename": "libjava/Makefile.am", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -69,6 +69,13 @@ else\n SUBDIRS = $(DIRLTDL) gcj include\n endif\n \n+## Darwin uses the jcr section, but doesn't use crtstuff.\n+if USING_DARWIN_CRT\n+DARWIN_CRT_SRC = darwin.cc\n+else\n+DARWIN_CRT_SRC = \n+endif\n+\n # write_entries_to_file - writes each entry in a list\n # to the specified file. Each entry is written individually\n # to accomodate systems with severe command-line-length\n@@ -206,6 +213,7 @@ libgcj_la_SOURCES = prims.cc jni.cc exception.cc \\\n \t$(BOEHMGC_SRC) $(NOGC_SRC) \\\n \t$(BACKTRACE_SRC) \\\n \t$(POSIX_PLATFORM_SRC) $(WIN32_PLATFORM_SRC) $(ECOS_PLATFORM_SRC) \\\n+\t$(DARWIN_CRT_SRC) \\\n \t$(POSIX_THREAD_SRC) $(WIN32_THREAD_SRC) $(NO_THREAD_SRC)\n libgcj_la_DEPENDENCIES = libgcj-@gcc_version@.jar \\\n \tjava/lang/fdlibm.h java/lang/ieeefp.h java/lang/mprec.h \\"}, {"sha": "14eba1367f8eb9729b31642e145c4ef24df7e840", "filename": "libjava/Makefile.in", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -2261,8 +2261,8 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc exception.cc resolve.cc \\\n \tjavax/transaction/UserTransaction.java \\\n \tjava/lang/ConcreteProcess.java \\\n \tgnu/classpath/Configuration.java boehm.cc nogc.cc \\\n-\tsysdep/dwarf2-backtrace.cc posix.cc win32.cc posix-threads.cc \\\n-\twin32-threads.cc no-threads.cc\n+\tsysdep/dwarf2-backtrace.cc posix.cc win32.cc darwin.cc \\\n+\tposix-threads.cc win32-threads.cc no-threads.cc\n am__objects_6 = gnu/gcj/natCore.lo \\\n \tgnu/gcj/convert/JIS0208_to_Unicode.lo \\\n \tgnu/gcj/convert/JIS0212_to_Unicode.lo \\\n@@ -4028,15 +4028,17 @@ am__objects_16 = java/lang/ConcreteProcess.lo \\\n @USING_POSIX_PLATFORM_TRUE@am__objects_20 = posix.lo\n @USING_WIN32_PLATFORM_TRUE@am__objects_21 = win32.lo\n @USING_ECOS_PLATFORM_TRUE@am__objects_22 = posix.lo\n-@USING_POSIX_THREADS_TRUE@am__objects_23 = posix-threads.lo\n-@USING_WIN32_THREADS_TRUE@am__objects_24 = win32-threads.lo\n-@USING_NO_THREADS_TRUE@am__objects_25 = no-threads.lo\n+@USING_DARWIN_CRT_TRUE@am__objects_23 = darwin.lo\n+@USING_POSIX_THREADS_TRUE@am__objects_24 = posix-threads.lo\n+@USING_WIN32_THREADS_TRUE@am__objects_25 = win32-threads.lo\n+@USING_NO_THREADS_TRUE@am__objects_26 = no-threads.lo\n am_libgcj_la_OBJECTS = prims.lo jni.lo exception.lo resolve.lo \\\n \tdefineclass.lo interpret.lo verify.lo $(am__objects_6) \\\n \t$(am__objects_7) $(am__objects_15) $(am__objects_16) \\\n \t$(am__objects_17) $(am__objects_18) $(am__objects_19) \\\n \t$(am__objects_20) $(am__objects_21) $(am__objects_22) \\\n-\t$(am__objects_23) $(am__objects_24) $(am__objects_25)\n+\t$(am__objects_23) $(am__objects_24) $(am__objects_25) \\\n+\t$(am__objects_26)\n libgcj_la_OBJECTS = $(am_libgcj_la_OBJECTS)\n am_libgij_la_OBJECTS = gij.lo\n libgij_la_OBJECTS = $(am_libgij_la_OBJECTS)\n@@ -4243,6 +4245,8 @@ THREADSPEC = @THREADSPEC@\n TOOLKIT = @TOOLKIT@\n USING_BOEHMGC_FALSE = @USING_BOEHMGC_FALSE@\n USING_BOEHMGC_TRUE = @USING_BOEHMGC_TRUE@\n+USING_DARWIN_CRT_FALSE = @USING_DARWIN_CRT_FALSE@\n+USING_DARWIN_CRT_TRUE = @USING_DARWIN_CRT_TRUE@\n USING_ECOS_PLATFORM_FALSE = @USING_ECOS_PLATFORM_FALSE@\n USING_ECOS_PLATFORM_TRUE = @USING_ECOS_PLATFORM_TRUE@\n USING_GCC_FALSE = @USING_GCC_FALSE@\n@@ -4355,6 +4359,8 @@ ACLOCAL_AMFLAGS = -I . -I ../config\n @USING_NO_THREADS_TRUE@NO_THREAD_SRC = no-threads.cc\n @TESTSUBDIR_FALSE@SUBDIRS = $(DIRLTDL) gcj include\n @TESTSUBDIR_TRUE@SUBDIRS = $(DIRLTDL) testsuite gcj include\n+@USING_DARWIN_CRT_FALSE@DARWIN_CRT_SRC = \n+@USING_DARWIN_CRT_TRUE@DARWIN_CRT_SRC = darwin.cc\n \n # write_entries_to_file - writes each entry in a list\n # to the specified file. Each entry is written individually\n@@ -4426,6 +4432,7 @@ libgcj_la_SOURCES = prims.cc jni.cc exception.cc \\\n \t$(BOEHMGC_SRC) $(NOGC_SRC) \\\n \t$(BACKTRACE_SRC) \\\n \t$(POSIX_PLATFORM_SRC) $(WIN32_PLATFORM_SRC) $(ECOS_PLATFORM_SRC) \\\n+\t$(DARWIN_CRT_SRC) \\\n \t$(POSIX_THREAD_SRC) $(WIN32_THREAD_SRC) $(NO_THREAD_SRC)\n \n libgcj_la_DEPENDENCIES = libgcj-@gcc_version@.jar \\\n@@ -18976,6 +18983,7 @@ distclean-compile:\n \t-rm -f *.tab.c\n \n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/boehm.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/darwin.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/defineclass.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/exception.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gij.Plo@am__quote@"}, {"sha": "2c95d849431ca80023304fba4f8dfaf2cf46c58e", "filename": "libjava/configure", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -310,7 +310,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libgcj_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS INCLTDL LIBLTDL DIRLTDL LIBTOOL CXXCPP CPPFLAGS GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs COMPPATH TESTSUBDIR_TRUE TESTSUBDIR_FALSE ONESTEP_TRUE ONESTEP_FALSE LIBGCJDEBUG INTERPRETER LIBFFI LIBFFIINCS PLATFORM_INNER_NAT_HDRS CPP EGREP USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_ECOS_PLATFORM_TRUE USING_ECOS_PLATFORM_FALSE SYSTEMSPEC LIBGCJTESTSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE GTK_AWT_TRUE GTK_AWT_FALSE GTK_CAIRO_TRUE GTK_CAIRO_FALSE PKG_CONFIG CAIRO_CFLAGS CAIRO_LIBS PANGOFT2_CFLAGS PANGOFT2_LIBS GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE tool_include_dir gcc_version LIBICONV LTLIBICONV GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS SUPPLY_BACKTRACE_TRUE SUPPLY_BACKTRACE_FALSE GCJH ZIP ac_ct_GCJ ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir GCJVERSION ALLOCA PERL BACKTRACESPEC SYSDEP_SOURCES here LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libgcj_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS INCLTDL LIBLTDL DIRLTDL LIBTOOL CXXCPP CPPFLAGS GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs COMPPATH TESTSUBDIR_TRUE TESTSUBDIR_FALSE ONESTEP_TRUE ONESTEP_FALSE LIBGCJDEBUG INTERPRETER LIBFFI LIBFFIINCS PLATFORM_INNER_NAT_HDRS CPP EGREP USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_ECOS_PLATFORM_TRUE USING_ECOS_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC LIBGCJTESTSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE GTK_AWT_TRUE GTK_AWT_FALSE GTK_CAIRO_TRUE GTK_CAIRO_FALSE PKG_CONFIG CAIRO_CFLAGS CAIRO_LIBS PANGOFT2_CFLAGS PANGOFT2_LIBS GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE tool_include_dir gcc_version LIBICONV LTLIBICONV GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS SUPPLY_BACKTRACE_TRUE SUPPLY_BACKTRACE_FALSE GCJH ZIP ac_ct_GCJ ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir GCJVERSION ALLOCA PERL BACKTRACESPEC SYSDEP_SOURCES here LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -6328,6 +6328,21 @@ else\n fi\n \n \n+case \"$host\" in\n+  *-darwin*) DARWIN_CRT=true ;;\n+  *) DARWIN_CRT=false ;;\n+esac\n+\n+\n+if $DARWIN_CRT; then\n+  USING_DARWIN_CRT_TRUE=\n+  USING_DARWIN_CRT_FALSE='#'\n+else\n+  USING_DARWIN_CRT_TRUE='#'\n+  USING_DARWIN_CRT_FALSE=\n+fi\n+\n+\n # These may not be defined in a non-ANS conformant embedded system.\n # FIXME: Should these case a runtime exception in that case?\n cat >conftest.$ac_ext <<_ACEOF\n@@ -16433,6 +16448,13 @@ echo \"$as_me: error: conditional \\\"USING_ECOS_PLATFORM\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${USING_DARWIN_CRT_TRUE}\" && test -z \"${USING_DARWIN_CRT_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"USING_DARWIN_CRT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"USING_DARWIN_CRT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n if test -z \"${XLIB_AWT_TRUE}\" && test -z \"${XLIB_AWT_FALSE}\"; then\n   { { echo \"$as_me:$LINENO: error: conditional \\\"XLIB_AWT\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&5\n@@ -17190,6 +17212,8 @@ s,@USING_POSIX_PLATFORM_TRUE@,$USING_POSIX_PLATFORM_TRUE,;t t\n s,@USING_POSIX_PLATFORM_FALSE@,$USING_POSIX_PLATFORM_FALSE,;t t\n s,@USING_ECOS_PLATFORM_TRUE@,$USING_ECOS_PLATFORM_TRUE,;t t\n s,@USING_ECOS_PLATFORM_FALSE@,$USING_ECOS_PLATFORM_FALSE,;t t\n+s,@USING_DARWIN_CRT_TRUE@,$USING_DARWIN_CRT_TRUE,;t t\n+s,@USING_DARWIN_CRT_FALSE@,$USING_DARWIN_CRT_FALSE,;t t\n s,@SYSTEMSPEC@,$SYSTEMSPEC,;t t\n s,@LIBGCJTESTSPEC@,$LIBGCJTESTSPEC,;t t\n s,@ZLIBSPEC@,$ZLIBSPEC,;t t"}, {"sha": "53ff781003c86c4e469a68ba42922439572b68a1", "filename": "libjava/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -427,6 +427,12 @@ AM_CONDITIONAL(USING_WIN32_PLATFORM, test \"$PLATFORM\" = Win32)\n AM_CONDITIONAL(USING_POSIX_PLATFORM, test \"$PLATFORM\" = Posix)\n AM_CONDITIONAL(USING_ECOS_PLATFORM, test \"$PLATFORM\" = Ecos)\n \n+case \"$host\" in\n+  *-darwin*) DARWIN_CRT=true ;;\n+  *) DARWIN_CRT=false ;;\n+esac\n+AM_CONDITIONAL(USING_DARWIN_CRT, $DARWIN_CRT)\n+\n # These may not be defined in a non-ANS conformant embedded system.\n # FIXME: Should these case a runtime exception in that case?\n AC_EGREP_HEADER(mktime, time.h, AC_DEFINE(HAVE_MKTIME, 1,"}, {"sha": "d427ba7cd1948dbda7ec0a7d3402b52f78ff9403", "filename": "libjava/darwin.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fdarwin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fdarwin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdarwin.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -0,0 +1,63 @@\n+/* darwin.cc - class loader stuff for Darwin.  */\n+\n+/* Copyright (C) 2004  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <jvm.h>\n+\n+/* In theory, we should be able to do:\n+   #include <mach-o/getsect.h>\n+   #include <mach-o/dyld.h>\n+\n+   but all the types in these headers changed between Panther and Tiger,\n+   so the only way to be avoid type mismatches is to declare the routines\n+   ourself.  */\n+\n+#include <stdint.h>\n+struct mach_header;\n+extern \"C\" void _dyld_register_func_for_add_image\n+  (void (*func)(const struct mach_header *mh, intptr_t vmaddr_slide));\n+extern \"C\" void _dyld_register_func_for_remove_image\n+  (void (*func)(const struct mach_header *mh, intptr_t vmaddr_slide));\n+extern \"C\" char *getsectdatafromheader\n+(const struct mach_header *mhp, const char *segname, const char *sectname,\n+ uint32_t *size);\n+\n+/* When a new image is loaded, look to see if it has a jcr section\n+   and if so register the classes listed in it.  */\n+\n+static void\n+darwin_java_register_dyld_add_image_hook (const struct mach_header *mh,\n+\t\t\t\t\t  intptr_t slide)\n+{\n+  char *fde;\n+  uint32_t sz;\n+\n+  fde = getsectdatafromheader (mh, \"__DATA\", \"jcr\", &sz);\n+  if (! fde)\n+    return;\n+  \n+  /* As far as I can tell, you're only supposed to load shared\n+     libraries while having a lock on java.lang.Class.  So there's\n+     no need to synchronize on anything here.  (I'm not sure how exactly\n+     you can ensure this given lazy library loading.  FIXME.)  */\n+ \n+  _Jv_RegisterClasses_Counted ((const jclass *) (fde + slide),\n+\t\t\t       sz / sizeof (jclass *));\n+}\n+\n+static struct darwin_constructor_s{\n+  darwin_constructor_s() \n+  {\n+    _dyld_register_func_for_add_image \n+      (darwin_java_register_dyld_add_image_hook);\n+    /* At present, you mustn't unload any java plugin.  */\n+  };\n+} darwin_constructor;"}, {"sha": "70f491b6ad3150ae99408626a206bd217df8a572", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -196,6 +196,8 @@ THREADSPEC = @THREADSPEC@\n TOOLKIT = @TOOLKIT@\n USING_BOEHMGC_FALSE = @USING_BOEHMGC_FALSE@\n USING_BOEHMGC_TRUE = @USING_BOEHMGC_TRUE@\n+USING_DARWIN_CRT_FALSE = @USING_DARWIN_CRT_FALSE@\n+USING_DARWIN_CRT_TRUE = @USING_DARWIN_CRT_TRUE@\n USING_ECOS_PLATFORM_FALSE = @USING_ECOS_PLATFORM_FALSE@\n USING_ECOS_PLATFORM_TRUE = @USING_ECOS_PLATFORM_TRUE@\n USING_GCC_FALSE = @USING_GCC_FALSE@"}, {"sha": "b1856c9fe15692cf64bb910f446b614c68e1d376", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -195,6 +195,8 @@ THREADSPEC = @THREADSPEC@\n TOOLKIT = @TOOLKIT@\n USING_BOEHMGC_FALSE = @USING_BOEHMGC_FALSE@\n USING_BOEHMGC_TRUE = @USING_BOEHMGC_TRUE@\n+USING_DARWIN_CRT_FALSE = @USING_DARWIN_CRT_FALSE@\n+USING_DARWIN_CRT_TRUE = @USING_DARWIN_CRT_TRUE@\n USING_ECOS_PLATFORM_FALSE = @USING_ECOS_PLATFORM_FALSE@\n USING_ECOS_PLATFORM_TRUE = @USING_ECOS_PLATFORM_TRUE@\n USING_GCC_FALSE = @USING_GCC_FALSE@"}, {"sha": "55799515c05ea4e16552a472af471412731eb5c6", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -411,7 +411,9 @@ extern \"C\" void *_Jv_LookupInterfaceMethodIdx (jclass klass, jclass iface,\n                                                int meth_idx);\n extern \"C\" void _Jv_CheckArrayStore (jobject array, jobject obj);\n extern \"C\" void _Jv_RegisterClass (jclass klass);\n-extern \"C\" void _Jv_RegisterClasses (jclass *classes);\n+extern \"C\" void _Jv_RegisterClasses (const jclass *classes);\n+extern \"C\" void _Jv_RegisterClasses_Counted (const jclass *classes,\n+\t\t\t\t\t     size_t count);\n extern \"C\" void _Jv_RegisterResource (void *vptr);\n extern void _Jv_UnregisterClass (_Jv_Utf8Const*, java::lang::ClassLoader*);\n extern void _Jv_ResolveField (_Jv_Field *, java::lang::ClassLoader*);"}, {"sha": "02a97dfcf14e975392974ae8e81622adad2083ed", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -14,6 +14,7 @@ details.  */\n \n #pragma interface\n \n+#include <stddef.h>\n #include <java/lang/Object.h>\n #include <java/lang/String.h>\n #include <java/net/URL.h>\n@@ -24,7 +25,9 @@ details.  */\n \n // We declare these here to avoid including gcj/cni.h.\n extern \"C\" void _Jv_InitClass (jclass klass);\n-extern \"C\" void _Jv_RegisterClasses (jclass *classes);\n+extern \"C\" void _Jv_RegisterClasses (const jclass *classes);\n+extern \"C\" void _Jv_RegisterClasses_Counted (const jclass *classes,\n+\t\t\t\t\t     size_t count);\n \n // This must be predefined with \"C\" linkage.\n extern \"C\" void *_Jv_LookupInterfaceMethodIdx (jclass klass, jclass iface, \n@@ -310,7 +313,9 @@ class java::lang::Class : public java::lang::Object\n   friend class java::io::ObjectStreamClass;\n \n   friend void _Jv_WaitForState (jclass, int);\n-  friend void _Jv_RegisterClasses (jclass *classes);\n+  friend void _Jv_RegisterClasses (const jclass *classes);\n+  friend void _Jv_RegisterClasses_Counted (const jclass *classes, \n+\t\t\t\t\t   size_t count);\n   friend void _Jv_RegisterClassHookDefault (jclass klass);\n   friend void _Jv_RegisterInitiatingLoader (jclass,java::lang::ClassLoader*);\n   friend void _Jv_UnregisterClass (jclass);"}, {"sha": "5a0898a93c4ea7c28120f35317ae24d7809106d6", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -316,7 +316,7 @@ _Jv_RegisterInitiatingLoader (jclass klass, java::lang::ClassLoader *loader)\n // class chain.  At all other times, the caller should synchronize on\n // Class::class$.\n void\n-_Jv_RegisterClasses (jclass *classes)\n+_Jv_RegisterClasses (const jclass *classes)\n {\n   for (; *classes; ++classes)\n     {\n@@ -331,6 +331,24 @@ _Jv_RegisterClasses (jclass *classes)\n     }\n }\n \n+// This is a version of _Jv_RegisterClasses that takes a count.\n+void\n+_Jv_RegisterClasses_Counted (const jclass * classes, size_t count)\n+{\n+  size_t i;\n+  for (i = 0; i < count; i++)\n+    {\n+      jclass klass = classes[i];\n+\n+      (*_Jv_RegisterClassHook) (klass);\n+\n+      // registering a compiled class causes\n+      // it to be immediately \"prepared\".  \n+      if (klass->state == JV_STATE_NOTHING)\n+\tklass->state = JV_STATE_COMPILED;\n+    }\n+}\n+\n void\n _Jv_RegisterClassHookDefault (jclass klass)\n {"}, {"sha": "51c0ea364ff16c3e8c5e5e27e5156ea165bdbdcf", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -184,6 +184,8 @@ THREADSPEC = @THREADSPEC@\n TOOLKIT = @TOOLKIT@\n USING_BOEHMGC_FALSE = @USING_BOEHMGC_FALSE@\n USING_BOEHMGC_TRUE = @USING_BOEHMGC_TRUE@\n+USING_DARWIN_CRT_FALSE = @USING_DARWIN_CRT_FALSE@\n+USING_DARWIN_CRT_TRUE = @USING_DARWIN_CRT_TRUE@\n USING_ECOS_PLATFORM_FALSE = @USING_ECOS_PLATFORM_FALSE@\n USING_ECOS_PLATFORM_TRUE = @USING_ECOS_PLATFORM_TRUE@\n USING_GCC_FALSE = @USING_GCC_FALSE@"}, {"sha": "18b574b1b723cc68fe6ace22020d363b7087c7a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -1,3 +1,14 @@\n+2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* libsupc++/new_op.cc (new): Make weak.\n+\t* libsupc++/new_opnt.cc (new): Make weak.\n+\t* libsupc++/new_opv.cc (new): Make weak.\n+\t* libsupc++/new_opvnt.cc (new): Make weak.\n+\t* libsupc++/delete_op.cc (delete): Make weak.\n+\t* libsupc++/delete_opnt.cc (delete): Make weak.\n+\t* libsupc++/delete_opv.cc (delete): Make weak.\n+\t* libsupc++/delete_opvnt.cc (delete): Make weak.\n+\n 2004-10-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/Makefile.am (GLIBCXX_INCLUDES): Add."}, {"sha": "e6249e656c8e95b3167c3490a3015635b36b6355", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -172,6 +172,13 @@ case \"${host_os}\" in\n   cygwin*)\n     os_include_dir=\"os/newlib\"\n     ;;\n+  darwin*)\n+    # On Darwin, performance is improved if libstdc++ is single-module.\n+    # Up to at least 10.3.5, -flat_namespace is required for proper\n+    # treatment of coalesced symbols.\n+    OPT_LDFLAGS=\"${OPT_LDFLAGS} -Wl,-single_module -Wl,-flat_namespace\"\n+    os_include_dir=\"os/generic\"\n+    ;;\n   *djgpp*)      # leading * picks up \"msdosdjgpp\"\n     os_include_dir=\"os/djgpp\"\n     ;;"}, {"sha": "32ccdb6808b9c4c9895ce465779e3d5354fead33", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -39,7 +39,7 @@ using std::free;\n extern \"C\" void free(void *);\n #endif\n \n-void\n+__attribute__((weak)) void\n operator delete (void *ptr) throw ()\n {\n   if (ptr)"}, {"sha": "6cfb0775e4fb9f0ab81369add106b9015fdaed6d", "filename": "libstdc++-v3/libsupc++/del_opnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -32,7 +32,7 @@\n \n extern \"C\" void free (void *);\n \n-void\n+__attribute__((weak)) void\n operator delete (void *ptr, const std::nothrow_t&) throw ()\n {\n   if (ptr)"}, {"sha": "03e1612c47fa666bd1693e2d61bf75fe35c61fbe", "filename": "libstdc++-v3/libsupc++/del_opv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -30,7 +30,7 @@\n \n #include \"new\"\n \n-void\n+__attribute__((weak)) void\n operator delete[] (void *ptr) throw ()\n {\n   ::operator delete (ptr);"}, {"sha": "5b55cda66e624b9acd2141cb8e4b952c723b95e5", "filename": "libstdc++-v3/libsupc++/del_opvnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -30,7 +30,7 @@\n \n #include \"new\"\n \n-void\n+__attribute__((weak)) void\n operator delete[] (void *ptr, const std::nothrow_t&) throw ()\n {\n   ::operator delete (ptr);"}, {"sha": "656b9f42d558b4f724ad5edc237f03e79ec0e9dd", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -43,7 +43,7 @@ extern \"C\" void *malloc (std::size_t);\n \n extern new_handler __new_handler;\n \n-void *\n+__attribute__((weak)) void *\n operator new (std::size_t sz) throw (std::bad_alloc)\n {\n   void *p;"}, {"sha": "ff550b706ab7bca9e2efe497890325b69ace491e", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -36,7 +36,7 @@ using std::bad_alloc;\n extern \"C\" void *malloc (std::size_t);\n extern new_handler __new_handler;\n \n-void *\n+__attribute__((weak)) void *\n operator new (std::size_t sz, const std::nothrow_t&) throw()\n {\n   void *p;"}, {"sha": "de3bc4ebd7c71c2ddceec17bb796404010b65b0f", "filename": "libstdc++-v3/libsupc++/new_opv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -30,7 +30,7 @@\n \n #include \"new\"\n \n-void *\n+__attribute__((weak)) void *\n operator new[] (std::size_t sz) throw (std::bad_alloc)\n {\n   return ::operator new(sz);"}, {"sha": "1dbf991d83848dfa7e213cf84da96e5f1554e3d5", "filename": "libstdc++-v3/libsupc++/new_opvnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a66265195781c7f0cc6c627706bdf33a313657/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc?ref=f1a66265195781c7f0cc6c627706bdf33a313657", "patch": "@@ -30,7 +30,7 @@\n \n #include \"new\"\n \n-void *\n+__attribute__((weak)) void *\n operator new[] (std::size_t sz, const std::nothrow_t& nothrow) throw()\n {\n   return ::operator new(sz, nothrow);"}]}