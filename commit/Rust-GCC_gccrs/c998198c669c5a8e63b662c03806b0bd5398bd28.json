{"sha": "c998198c669c5a8e63b662c03806b0bd5398bd28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5ODE5OGM2NjljNWE4ZTYzYjY2MmMwMzgwNmIwYmQ1Mzk4YmQyOA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-31T19:05:18Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-31T20:17:31Z"}, "message": "StructExprUnit doesn't really exist\n\nA StructExprUnit is parsed as an IdentifierExpr. An IdentifierExpr,\nwhich is what we call a single segment PathInExpression.\n\nAfter type checking, when generating gcc generic trees, if the\nIdentifierExpr is a type reference (which must be a unit struct), then\na unit expression is generated.\n\nRemove the AST and HIR StructExprUnit classes which are never used.", "tree": {"sha": "dbaef24c82ae59840b2d3803efa90b8368b812ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbaef24c82ae59840b2d3803efa90b8368b812ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c998198c669c5a8e63b662c03806b0bd5398bd28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c998198c669c5a8e63b662c03806b0bd5398bd28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c998198c669c5a8e63b662c03806b0bd5398bd28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c998198c669c5a8e63b662c03806b0bd5398bd28/comments", "author": null, "committer": null, "parents": [{"sha": "34969c14bed456b8a4cd76d71319b75342825878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34969c14bed456b8a4cd76d71319b75342825878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34969c14bed456b8a4cd76d71319b75342825878"}], "stats": {"total": 105, "additions": 0, "deletions": 105}, "files": [{"sha": "09f879c312f8516f32cdf26a21e3d875ab434647", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -109,7 +109,6 @@ class StructExprFieldIdentifierValue;\n class StructExprFieldIndexValue;\n class StructExprStructFields;\n class StructExprStructBase;\n-class StructExprUnit;\n class EnumVariantExpr;\n class EnumExprField;\n class EnumExprFieldIdentifier;"}, {"sha": "8ffc1b20e7052a311278ec6fcc43c39ce4bdecbb", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -5184,12 +5184,6 @@ StructExprStructBase::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-StructExprUnit::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n EnumExprFieldIdentifier::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "ffd1d2d316103cf083b72a32c2b0ff632ee59af6", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -93,7 +93,6 @@ class ASTVisitor\n   virtual void visit (StructExprFieldIndexValue &field) = 0;\n   virtual void visit (StructExprStructFields &expr) = 0;\n   virtual void visit (StructExprStructBase &expr) = 0;\n-  virtual void visit (StructExprUnit &expr) = 0;\n   // virtual void visit(EnumExprField& field) = 0;\n   virtual void visit (EnumExprFieldIdentifier &field) = 0;\n   virtual void visit (EnumExprFieldIdentifierValue &field) = 0;"}, {"sha": "a6882c75e82379c63d33210626bb02a81602ed8e", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -1852,36 +1852,6 @@ class StructExprStructBase : public StructExprStruct\n   }\n };\n \n-// AST node of a \"unit\" struct creator (no fields and no braces)\n-class StructExprUnit : public StructExpr\n-{\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override\n-  {\n-    return get_struct_name ().as_string ();\n-  }\n-\n-  StructExprUnit (PathInExpression struct_path,\n-\t\t  std::vector<Attribute> outer_attribs, Location locus)\n-    : StructExpr (std::move (struct_path), std::move (outer_attribs)),\n-      locus (locus)\n-  {}\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprUnit *clone_expr_without_block_impl () const override\n-  {\n-    return new StructExprUnit (*this);\n-  }\n-};\n-\n // aka EnumerationVariantExpr\n // Base AST node representing creation of an enum variant instance - abstract\n class EnumVariantExpr : public ExprWithoutBlock"}, {"sha": "2ce7369ecde6cccfebc4a2599e2a6b7fd1ccb21a", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -72,7 +72,6 @@ class HIRCompileBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &field) {}\n   virtual void visit (HIR::StructExprStructFields &expr) {}\n   virtual void visit (HIR::StructExprStructBase &expr) {}\n-  virtual void visit (HIR::StructExprUnit &expr) {}\n   // virtual void visit(EnumExprField& field) {}\n   virtual void visit (HIR::EnumExprFieldIdentifier &field) {}\n   virtual void visit (HIR::EnumExprFieldIdentifierValue &field) {}"}, {"sha": "65b2ea060391e7956b04f0e8d575c743ad808396", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -939,23 +939,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n-  void visit (AST::StructExprUnit &expr) override\n-  {\n-    // initial strip test based on outer attrs\n-    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    // strip sub-exprs of path\n-    auto &struct_name = expr.get_struct_name ();\n-    visit (struct_name);\n-    if (struct_name.is_marked_for_strip ())\n-      rust_error_at (struct_name.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-  }\n   void visit (AST::EnumExprFieldIdentifier &) override\n   {\n     // as no attrs (at moment, at least), no stripping possible"}, {"sha": "8debf3967b1d5163ad382e53931a73c3049e93eb", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -96,7 +96,6 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::StructExprFieldIndexValue &field) {}\n   virtual void visit (AST::StructExprStructFields &expr) {}\n   virtual void visit (AST::StructExprStructBase &expr) {}\n-  virtual void visit (AST::StructExprUnit &expr) {}\n   //  virtual void visit(EnumExprField& field) {}\n   virtual void visit (AST::EnumExprFieldIdentifier &field) {}\n   virtual void visit (AST::EnumExprFieldIdentifierValue &field) {}"}, {"sha": "b8cb754766524c460578aa83a9cd839e5fc9087d", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -1578,41 +1578,6 @@ class StructExprStructBase : public StructExprStruct\n   }\n };\n \n-// HIR node of a \"unit\" struct creator (no fields and no braces)\n-class StructExprUnit : public StructExpr\n-{\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override { return struct_name.as_string (); }\n-\n-  StructExprUnit (Analysis::NodeMapping mappings, PathInExpression struct_path,\n-\t\t  AST::AttrVec outer_attribs, Location locus)\n-    : StructExpr (std::move (mappings), std::move (struct_path),\n-\t\t  std::move (outer_attribs)),\n-      locus (locus)\n-  {}\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprUnit *clone_expr_impl () const override\n-  {\n-    return new StructExprUnit (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprUnit *clone_expr_without_block_impl () const override\n-  {\n-    return new StructExprUnit (*this);\n-  }\n-};\n-\n // aka EnumerationVariantExpr\n // Base HIR node representing creation of an enum variant instance - abstract\n class EnumVariantExpr : public ExprWithoutBlock"}, {"sha": "b72678a4f406bf52ae243c172eebc03656b122dc", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -90,7 +90,6 @@ class StructExprFieldIdentifierValue;\n class StructExprFieldIndexValue;\n class StructExprStructFields;\n class StructExprStructBase;\n-class StructExprUnit;\n class EnumVariantExpr;\n class EnumExprField;\n class EnumExprFieldIdentifier;"}, {"sha": "eda5eaf2c0b4b0ea3059dab17c55e4d78b35ae38", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -3930,12 +3930,6 @@ StructExprStructBase::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-StructExprUnit::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n EnumExprFieldIdentifier::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "be9bd37b13dce6fab14d15537c1d715733b01e41", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -60,7 +60,6 @@ class HIRVisitor\n   virtual void visit (StructExprFieldIndexValue &field) = 0;\n   virtual void visit (StructExprStructFields &expr) = 0;\n   virtual void visit (StructExprStructBase &expr) = 0;\n-  virtual void visit (StructExprUnit &expr) = 0;\n   virtual void visit (EnumExprFieldIdentifier &field) = 0;\n   virtual void visit (EnumExprFieldIdentifierValue &field) = 0;\n   virtual void visit (EnumExprFieldIndexValue &field) = 0;"}, {"sha": "86dab263e2ace233129489013265bb98388c1063", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -70,7 +70,6 @@ class MarkLiveBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprUnit &) override {}\n \n   virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n   virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}"}, {"sha": "a3aeaba641c41cf81d2cc5d72792eee9ea88aec9", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -73,7 +73,6 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::StructExprFieldIndexValue &) {}\n   void visit (AST::StructExprStructFields &) {}\n   void visit (AST::StructExprStructBase &) {}\n-  void visit (AST::StructExprUnit &) {}\n   void visit (AST::EnumExprFieldIdentifier &) {}\n   void visit (AST::EnumExprFieldIdentifierValue &) {}\n   void visit (AST::EnumExprFieldIndexValue &) {}"}, {"sha": "a8f2423348c3ca4468b3fc3caffb12520013235a", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -73,7 +73,6 @@ class ConstFoldBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprUnit &) override {}\n \n   virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n   virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}"}, {"sha": "178d78d168a79841d747b87c82e5214dc8e113df", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -74,7 +74,6 @@ class TypeCheckBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprUnit &) override {}\n \n   virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n   virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}"}, {"sha": "e9f2ff4d51cc88403fa685fa275c5b33fe5883aa", "filename": "gcc/rust/typecheck/rust-hir-type-check-util.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c998198c669c5a8e63b662c03806b0bd5398bd28/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h?ref=c998198c669c5a8e63b662c03806b0bd5398bd28", "patch": "@@ -68,7 +68,6 @@ class SimpleHirVisitor : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprUnit &) override {}\n \n   virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n   virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}"}]}