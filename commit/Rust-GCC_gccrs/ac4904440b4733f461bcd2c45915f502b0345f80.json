{"sha": "ac4904440b4733f461bcd2c45915f502b0345f80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM0OTA0NDQwYjQ3MzNmNDYxYmNkMmM0NTkxNWY1MDJiMDM0NWY4MA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@lsd.ic.unicamp.br", "date": "2000-01-24T00:47:38Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gcc.gnu.org", "date": "2000-01-24T00:47:38Z"}, "message": "sol2-sld-64.h (TRANSFER_FROM_TRAMPOLINE): Moved...\n\n* config/sparc/sol2-sld-64.h (TRANSFER_FROM_TRAMPOLINE): Moved...\n* config/sparc/sol2.h: ... here.\n\nFrom-SVN: r31578", "tree": {"sha": "7bf70b75ba24de1d0a8f4f413428bc28d295339d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf70b75ba24de1d0a8f4f413428bc28d295339d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac4904440b4733f461bcd2c45915f502b0345f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4904440b4733f461bcd2c45915f502b0345f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac4904440b4733f461bcd2c45915f502b0345f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4904440b4733f461bcd2c45915f502b0345f80/comments", "author": null, "committer": null, "parents": [{"sha": "d6181b1bdcbc6df86c0a589b7ed9905ee634aa3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6181b1bdcbc6df86c0a589b7ed9905ee634aa3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6181b1bdcbc6df86c0a589b7ed9905ee634aa3e"}], "stats": {"total": 91, "additions": 48, "deletions": 43}, "files": [{"sha": "ee7112c914c89239fa28a12847f0ae49b9529883", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4904440b4733f461bcd2c45915f502b0345f80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4904440b4733f461bcd2c45915f502b0345f80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac4904440b4733f461bcd2c45915f502b0345f80", "patch": "@@ -1,3 +1,8 @@\n+2000-01-23  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n+\n+\t* config/sparc/sol2-sld-64.h (TRANSFER_FROM_TRAMPOLINE): Moved...\n+\t* config/sparc/sol2.h: ... here.\n+\n 2000-01-24  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* basic-block.h (struct loops): New field `levels'."}, {"sha": "275a89f536e6eb8575596bdecb5096d045139894", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4904440b4733f461bcd2c45915f502b0345f80/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4904440b4733f461bcd2c45915f502b0345f80/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=ac4904440b4733f461bcd2c45915f502b0345f80", "patch": "@@ -305,49 +305,6 @@\n  \n #endif /* ! SPARC_BI_ARCH */\n \n-/*\n- * Attempt to turn on access permissions for the stack.\n- *\n- * This code must be defined when compiling gcc but not when compiling\n- * libgcc2.a, unless we're generating code for 64 bits SPARC\n- *\n- * _SC_STACK_PROT is only defined for post 2.6, but we want this code\n- * to run always.  2.6 can change the stack protection but has no way to\n- * query it.\n- *\n- */\n-\n-#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n-static int need_enable_exec_stack;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-static void check_enabling(void) __attribute__ ((constructor));\t\t\\\n-static void check_enabling(void)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  extern long sysconf(int);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  int prot = (int) sysconf(515 /*_SC_STACK_PROT */);\t\t\t\\\n-  if (prot != 7)\t\t\t\t\t\t\t\\\n-    need_enable_exec_stack = 1;\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (addr)\t\t\t\t\t\t\\\n-     void *addr;\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!need_enable_exec_stack)\t\t\t\t\t\t\\\n-    return;\t\t\t\t\t\t\t\t\\\n-  else {\t\t\t\t\t\t\t\t\\\n-    long size = getpagesize ();\t\t\t\t\t\t\\\n-    long mask = ~(size-1);\t\t\t\t\t\t\\\n-    char *page = (char *) (((long) addr) & mask); \t\t\t\\\n-    char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-\t\t\t\t\t\t\t\t\t\\\n-    /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */ \t\t\t\\\n-    if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n-      perror (\"mprotect of trampoline code\");\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n #undef ASM_OUTPUT_CONSTRUCTOR"}, {"sha": "3c52b635315f04674a0cca14fc226897f4a8df9e", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4904440b4733f461bcd2c45915f502b0345f80/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4904440b4733f461bcd2c45915f502b0345f80/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=ac4904440b4733f461bcd2c45915f502b0345f80", "patch": "@@ -235,3 +235,46 @@ Boston, MA 02111-1307, USA.  */\n \t       : /* no outputs */\t\t\t\\\n \t       : \"r\" (ms_flags), \"r\" (ms_saveret));\n #endif /* sparc32 */\n+\f\n+/*\n+ * Attempt to turn on access permissions for the stack.\n+ *\n+ * This code must be defined when compiling gcc but not when compiling\n+ * libgcc2.a, unless we're generating code for 64 bits SPARC\n+ *\n+ * _SC_STACK_PROT is only defined for post 2.6, but we want this code\n+ * to run always.  2.6 can change the stack protection but has no way to\n+ * query it.\n+ *\n+ */\n+\n+#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n+static int need_enable_exec_stack;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void check_enabling(void) __attribute__ ((constructor));\t\t\\\n+static void check_enabling(void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  extern long sysconf(int);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  int prot = (int) sysconf(515 /*_SC_STACK_PROT */);\t\t\t\\\n+  if (prot != 7)\t\t\t\t\t\t\t\\\n+    need_enable_exec_stack = 1;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+__enable_execute_stack (addr)\t\t\t\t\t\t\\\n+     void *addr;\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (!need_enable_exec_stack)\t\t\t\t\t\t\\\n+    return;\t\t\t\t\t\t\t\t\\\n+  else {\t\t\t\t\t\t\t\t\\\n+    long size = getpagesize ();\t\t\t\t\t\t\\\n+    long mask = ~(size-1);\t\t\t\t\t\t\\\n+    char *page = (char *) (((long) addr) & mask); \t\t\t\\\n+    char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */ \t\t\t\\\n+    if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n+      perror (\"mprotect of trampoline code\");\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+}"}]}