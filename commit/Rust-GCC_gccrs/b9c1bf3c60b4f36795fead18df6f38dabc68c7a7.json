{"sha": "b9c1bf3c60b4f36795fead18df6f38dabc68c7a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjljMWJmM2M2MGI0ZjM2Nzk1ZmVhZDE4ZGY2ZjM4ZGFiYzY4YzdhNw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-01-17T04:31:24Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-01-17T04:31:24Z"}, "message": "Initial revision\n\nFrom-SVN: r198", "tree": {"sha": "4d21c90d440d557d0ef81550cdb5412b226faf45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d21c90d440d557d0ef81550cdb5412b226faf45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9c1bf3c60b4f36795fead18df6f38dabc68c7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c1bf3c60b4f36795fead18df6f38dabc68c7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c1bf3c60b4f36795fead18df6f38dabc68c7a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c1bf3c60b4f36795fead18df6f38dabc68c7a7/comments", "author": null, "committer": null, "parents": [{"sha": "819108404b08eb20500da886faa6a39e63616a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819108404b08eb20500da886faa6a39e63616a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/819108404b08eb20500da886faa6a39e63616a9d"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "e995df6e98f6d9c65fa41dca5cce7e54ebb85468", "filename": "gcc/config/aoutos.h", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c1bf3c60b4f36795fead18df6f38dabc68c7a7/gcc%2Fconfig%2Faoutos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c1bf3c60b4f36795fead18df6f38dabc68c7a7/gcc%2Fconfig%2Faoutos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faoutos.h?ref=b9c1bf3c60b4f36795fead18df6f38dabc68c7a7", "patch": "@@ -0,0 +1,84 @@\n+/* aoutos.h  --  operating system specific defines to be used when\n+   targeting GCC for some system that uses a.out file format.\n+   Copyright (C) 1992 Free Software Foundation, Inc.\n+\n+   Written by Ron Guilmette (rfg@ncd.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* To use this file, make up a file with a name like:\n+\n+\t?????aout.h\n+\n+   where ????? is replaced by the name of the basic hardware that you\n+   are targeting for.  Then, in the file ?????aout.h, put something\n+   like:\n+\n+\t#include \"?????.h\"\n+\t#include \"aoutos.h\"\n+\n+   followed by any really system-specific defines (or overrides of\n+   defines) which you find that you need.  Now, modify the configure\n+   or configure.in script to properly use the new ?????aout.h file\n+   when configuring for the system.  */\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors. \n+   If using GNU LD, tell it that this is part of the static destructor set. \n+   This code works for any machine provided you use GNU as/ld.\n+   If not using GNU LD, rely on a \"collect\" program to look for names defined\n+   in the particular form we choose as global constructor function names.  */\n+\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (flag_gnu_linker)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t/* Output an N_SETT (0x16, 22.) for the name.  */\t\t\\\n+\tfprintf (FILE, \"%s \\\"___CTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\t\\\n+\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n+\tfputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (flag_gnu_linker)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t/* Output an N_SETT (0x16, 22.) for the name.  */\t\t\\\n+\tfprintf (FILE, \"%s \\\"___DTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\t\\\n+\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n+\tfputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Likewise for entries we want to record for garbage collection.\n+   Garbage collection is still under development.  */\n+\n+#define ASM_OUTPUT_GC_ENTRY(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (flag_gnu_linker)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t/* Output an N_SETT (0x16, 22.) for the name.  */\t\t\\\n+\tfprintf (FILE, \"%s \\\"___PTR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\t\\\n+\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n+\tfputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)"}]}