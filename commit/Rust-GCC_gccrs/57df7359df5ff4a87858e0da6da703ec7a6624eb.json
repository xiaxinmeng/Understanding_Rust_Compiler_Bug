{"sha": "57df7359df5ff4a87858e0da6da703ec7a6624eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkZjczNTlkZjVmZjRhODc4NThlMGRhNmRhNzAzZWM3YTY2MjRlYg==", "commit": {"author": {"name": "Jie Zhang", "email": "jie.zhang@analog.com", "date": "2007-09-05T16:23:42Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2007-09-05T16:23:42Z"}, "message": "linux-unwind.h: New file.\n\n\t* config/bfin/linux-unwind.h: New file.\n\t* config/bfin/linux.h (MD_UNWIND_SUPPORT): Define.\n\t* config/bfin/uclinux.h (MD_UNWIND_SUPPORT): Define.\n\nFrom-SVN: r128140", "tree": {"sha": "3505d2d73fe5bf7ba7085e3a4a99517edf204183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3505d2d73fe5bf7ba7085e3a4a99517edf204183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57df7359df5ff4a87858e0da6da703ec7a6624eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57df7359df5ff4a87858e0da6da703ec7a6624eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57df7359df5ff4a87858e0da6da703ec7a6624eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57df7359df5ff4a87858e0da6da703ec7a6624eb/comments", "author": {"login": "jiez-adi", "id": 103514486, "node_id": "U_kgDOBiuBdg", "avatar_url": "https://avatars.githubusercontent.com/u/103514486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiez-adi", "html_url": "https://github.com/jiez-adi", "followers_url": "https://api.github.com/users/jiez-adi/followers", "following_url": "https://api.github.com/users/jiez-adi/following{/other_user}", "gists_url": "https://api.github.com/users/jiez-adi/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiez-adi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiez-adi/subscriptions", "organizations_url": "https://api.github.com/users/jiez-adi/orgs", "repos_url": "https://api.github.com/users/jiez-adi/repos", "events_url": "https://api.github.com/users/jiez-adi/events{/privacy}", "received_events_url": "https://api.github.com/users/jiez-adi/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac1b3a475230d82bfa5c80ea3ac70ca0e1ac8cd"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "ef99ebc1131670d70ec7d681aabace8896b6d91e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57df7359df5ff4a87858e0da6da703ec7a6624eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57df7359df5ff4a87858e0da6da703ec7a6624eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57df7359df5ff4a87858e0da6da703ec7a6624eb", "patch": "@@ -1,3 +1,9 @@\n+2007-09-06  Jie Zhang  <jie.zhang@analog.com>\n+\n+\t* config/bfin/linux-unwind.h: New file.\n+\t* config/bfin/linux.h (MD_UNWIND_SUPPORT): Define.\n+\t* config/bfin/uclinux.h (MD_UNWIND_SUPPORT): Define.\n+\n 2007-09-05  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* Makefile.in (stmt.o): Add alloc-pool.h dependency."}, {"sha": "c3697114721cda3428ffeddbb4384d30f178a936", "filename": "gcc/config/bfin/linux-unwind.h", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57df7359df5ff4a87858e0da6da703ec7a6624eb/gcc%2Fconfig%2Fbfin%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57df7359df5ff4a87858e0da6da703ec7a6624eb/gcc%2Fconfig%2Fbfin%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Flinux-unwind.h?ref=57df7359df5ff4a87858e0da6da703ec7a6624eb", "patch": "@@ -0,0 +1,168 @@\n+/* DWARF2 EH unwinding support for Blackfin.\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file with other programs, and to distribute\n+those programs without any restriction coming from the use of this\n+file.  (The General Public License restrictions do apply in other\n+respects; for example, they cover modification of the file, and\n+distribution when not linked into another program.)\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.\n+   Don't use this at all if inhibit_libc is used.  */\n+\n+#ifndef inhibit_libc\n+\n+#include <signal.h>\n+#include <sys/ucontext.h>\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR bfin_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+bfin_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t   _Unwind_FrameState *fs)\n+{\n+  unsigned char *pc = context->ra;\n+  struct sigcontext *sc;\n+  long new_cfa;\n+\n+  /* P0=__NR_rt_sigreturn (X); EXCPT  0x0; */\n+  if (*(unsigned short *)pc == 0xe128\n+      && *(unsigned short *)(pc + 2) == 0x00ad\n+      && *(unsigned short *)(pc + 4) == 0x00a0)\n+    {\n+      struct rt_sigframe {\n+\tint sig;\n+\tstruct siginfo *pinfo;\n+\tvoid *puc;\n+\tchar retcode[8];\n+\tstruct siginfo info;\n+\tstruct ucontext uc;\n+      } *rt_ = context->cfa;\n+\n+      /* The void * cast is necessary to avoid an aliasing warning.\n+         The aliasing warning is correct, but should not be a problem\n+         because it does not alias anything.  */\n+      sc = (struct sigcontext *)(void *)&rt_->uc.uc_mcontext.gregs;\n+    }\n+  else\n+    return _URC_END_OF_STACK;\n+\n+  new_cfa = sc->sc_usp;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 14;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n+\n+  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[0].loc.offset = (long)&sc->sc_r0 - new_cfa;\n+  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[1].loc.offset = (long)&sc->sc_r1 - new_cfa;\n+  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[2].loc.offset = (long)&sc->sc_r2 - new_cfa;\n+  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[3].loc.offset = (long)&sc->sc_r3 - new_cfa;\n+  fs->regs.reg[4].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[4].loc.offset = (long)&sc->sc_r4 - new_cfa;\n+  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[5].loc.offset = (long)&sc->sc_r5 - new_cfa;\n+  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[6].loc.offset = (long)&sc->sc_r6 - new_cfa;\n+  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[7].loc.offset = (long)&sc->sc_r7 - new_cfa;\n+  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[8].loc.offset = (long)&sc->sc_p0 - new_cfa;\n+  fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[9].loc.offset = (long)&sc->sc_p1 - new_cfa;\n+  fs->regs.reg[10].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[10].loc.offset = (long)&sc->sc_p2 - new_cfa;\n+  fs->regs.reg[11].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[11].loc.offset = (long)&sc->sc_p3 - new_cfa;\n+  fs->regs.reg[12].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[12].loc.offset = (long)&sc->sc_p4 - new_cfa;\n+  fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[13].loc.offset = (long)&sc->sc_p5 - new_cfa;\n+\n+  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[15].loc.offset = (long)&sc->sc_fp - new_cfa;\n+  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[16].loc.offset = (long)&sc->sc_i0 - new_cfa;\n+  fs->regs.reg[17].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[17].loc.offset = (long)&sc->sc_i1 - new_cfa;\n+  fs->regs.reg[18].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[18].loc.offset = (long)&sc->sc_i2 - new_cfa;\n+  fs->regs.reg[19].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[19].loc.offset = (long)&sc->sc_i3 - new_cfa;\n+  fs->regs.reg[20].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[20].loc.offset = (long)&sc->sc_b0 - new_cfa;\n+  fs->regs.reg[21].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[21].loc.offset = (long)&sc->sc_b1 - new_cfa;\n+  fs->regs.reg[22].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[22].loc.offset = (long)&sc->sc_b2 - new_cfa;\n+  fs->regs.reg[23].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[23].loc.offset = (long)&sc->sc_b3 - new_cfa;\n+  fs->regs.reg[24].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[24].loc.offset = (long)&sc->sc_l0 - new_cfa;\n+  fs->regs.reg[25].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[25].loc.offset = (long)&sc->sc_l1 - new_cfa;\n+  fs->regs.reg[26].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[26].loc.offset = (long)&sc->sc_l2 - new_cfa;\n+  fs->regs.reg[27].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[27].loc.offset = (long)&sc->sc_l3 - new_cfa;\n+  fs->regs.reg[28].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[28].loc.offset = (long)&sc->sc_m0 - new_cfa;\n+  fs->regs.reg[29].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[29].loc.offset = (long)&sc->sc_m1 - new_cfa;\n+  fs->regs.reg[30].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[30].loc.offset = (long)&sc->sc_m2 - new_cfa;\n+  fs->regs.reg[31].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[31].loc.offset = (long)&sc->sc_m3 - new_cfa;\n+  /* FIXME: Handle A0, A1, CC.  */\n+  fs->regs.reg[35].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[35].loc.offset = (long)&sc->sc_rets - new_cfa;\n+  fs->regs.reg[36].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[36].loc.offset = (long)&sc->sc_pc - new_cfa;\n+  fs->regs.reg[37].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[37].loc.offset = (long)&sc->sc_retx - new_cfa;\n+\n+  fs->regs.reg[40].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[40].loc.offset = (long)&sc->sc_astat - new_cfa;\n+  fs->regs.reg[41].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[41].loc.offset = (long)&sc->sc_seqstat - new_cfa;\n+\n+  fs->regs.reg[44].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[44].loc.offset = (long)&sc->sc_lt0 - new_cfa;\n+  fs->regs.reg[45].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[45].loc.offset = (long)&sc->sc_lt1 - new_cfa;\n+  fs->regs.reg[46].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[46].loc.offset = (long)&sc->sc_lc0 - new_cfa;\n+  fs->regs.reg[47].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[47].loc.offset = (long)&sc->sc_lc1 - new_cfa;\n+  fs->regs.reg[48].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[48].loc.offset = (long)&sc->sc_lb0 - new_cfa;\n+  fs->regs.reg[49].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[49].loc.offset = (long)&sc->sc_lb1 - new_cfa;\n+  fs->retaddr_column = 35;\n+\n+  return _URC_NO_REASON;\n+}\n+\n+#endif /* ifdef inhibit_libc */"}, {"sha": "8e063bd1c9675938a325be81901fff462853a272", "filename": "gcc/config/bfin/linux.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57df7359df5ff4a87858e0da6da703ec7a6624eb/gcc%2Fconfig%2Fbfin%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57df7359df5ff4a87858e0da6da703ec7a6624eb/gcc%2Fconfig%2Fbfin%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Flinux.h?ref=57df7359df5ff4a87858e0da6da703ec7a6624eb", "patch": "@@ -48,3 +48,4 @@ asm (TEXT_SECTION_ASM_OP);\n    %{!dynamic-linker:-dynamic-linker /lib/ld-uClibc.so.0}} \\\n    %{static}} -init __init -fini __fini\"\n \n+#define MD_UNWIND_SUPPORT \"config/bfin/linux-unwind.h\""}, {"sha": "954e66a4929387031520280f9e82247baf7dd73e", "filename": "gcc/config/bfin/uclinux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57df7359df5ff4a87858e0da6da703ec7a6624eb/gcc%2Fconfig%2Fbfin%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57df7359df5ff4a87858e0da6da703ec7a6624eb/gcc%2Fconfig%2Fbfin%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fuclinux.h?ref=57df7359df5ff4a87858e0da6da703ec7a6624eb", "patch": "@@ -44,6 +44,8 @@ asm (TEXT_SECTION_ASM_OP);\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define MD_UNWIND_SUPPORT \"config/bfin/linux-unwind.h\"\n+\n /* Like the definition in gcc.c, but for purposes of uClinux, every link is\n    static.  */\n #define MFWRAP_SPEC \" %{fmudflap|fmudflapth: \\"}]}