{"sha": "a9947bac0799b0c91e21b7c612b80cd0b54016f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk5NDdiYWMwNzk5YjBjOTFlMjFiN2M2MTJiODBjZDBiNTQwMTZmMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-26T11:12:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-26T11:12:36Z"}, "message": "i386: Fix up *{add,sub}v<dwi>4_doubleword patterns (PR target/93412)\n\nIn the *{add,sub}v<dwi>4_doubleword patterns, we don't really want to see a\nVOIDmode last operand, because it then means invalid RTL\n(sign_extend:{TI,POI} (const_int ...)) or so, and therefore something we\ndon't really handle in the splitter either.  We have\n*{add,sub}v<dwi>4_doubleword_1 pattern for those and that is what combine\nwill match, the problem in this testcase is just that it was only RA that\npropagated the constant into the instruction.\n\nIn the similar *{add,sub}v<mode>4 patterns, we make sure not to accept\nVOIDmode operand and similarly to these have _1 suffixed variant that allows\nconstants.\n\n2020-01-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93412\n\t* config/i386/i386.md (*addv<dwi>4_doubleword, *subv<dwi>4_doubleword):\n\tUse nonimmediate_operand instead of x86_64_hilo_general_operand and\n\tdrop <di> from constraint of last operand.\n\n\t* gcc.dg/pr93412.c: New test.", "tree": {"sha": "6e78cfb1dfa00c7c036c513b8bf0d11ac3633a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e78cfb1dfa00c7c036c513b8bf0d11ac3633a63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9947bac0799b0c91e21b7c612b80cd0b54016f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9947bac0799b0c91e21b7c612b80cd0b54016f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9947bac0799b0c91e21b7c612b80cd0b54016f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9947bac0799b0c91e21b7c612b80cd0b54016f0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322db86f4b4df1261308e8a02e69018d9cea98e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322db86f4b4df1261308e8a02e69018d9cea98e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/322db86f4b4df1261308e8a02e69018d9cea98e9"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "420a124b0561ca643dc580edfa841ca02d62ec5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9947bac0799b0c91e21b7c612b80cd0b54016f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9947bac0799b0c91e21b7c612b80cd0b54016f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9947bac0799b0c91e21b7c612b80cd0b54016f0", "patch": "@@ -1,5 +1,10 @@\n 2020-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93412\n+\t* config/i386/i386.md (*addv<dwi>4_doubleword, *subv<dwi>4_doubleword):\n+\tUse nonimmediate_operand instead of x86_64_hilo_general_operand and\n+\tdrop <di> from constraint of last operand.\n+\n \tPR target/93430\n \t* config/i386/sse.md (*avx_vperm_broadcast_<mode>): Disallow for\n \tTARGET_AVX2 and V4DFmode not in the split condition, but in the"}, {"sha": "6e9c9bd2fb603e079806d9a30d9f2aee9917d6e6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9947bac0799b0c91e21b7c612b80cd0b54016f0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9947bac0799b0c91e21b7c612b80cd0b54016f0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a9947bac0799b0c91e21b7c612b80cd0b54016f0", "patch": "@@ -6135,7 +6135,7 @@\n \t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0,0\"))\n \t    (sign_extend:<QPWI>\n-\t      (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n+\t      (match_operand:<DWI> 2 \"nonimmediate_operand\" \"r,o\")))\n \t  (sign_extend:<QPWI>\n \t    (plus:<DWI> (match_dup 1) (match_dup 2)))))\n    (set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n@@ -6644,7 +6644,7 @@\n \t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0,0\"))\n \t    (sign_extend:<QPWI>\n-\t      (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n+\t      (match_operand:<DWI> 2 \"nonimmediate_operand\" \"r,o\")))\n \t  (sign_extend:<QPWI>\n \t    (minus:<DWI> (match_dup 1) (match_dup 2)))))\n    (set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")"}, {"sha": "0cbd0482a8cd07c9368d36a366bb301e397dc6dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9947bac0799b0c91e21b7c612b80cd0b54016f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9947bac0799b0c91e21b7c612b80cd0b54016f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9947bac0799b0c91e21b7c612b80cd0b54016f0", "patch": "@@ -1,5 +1,8 @@\n 2020-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93412\n+\t* gcc.dg/pr93412.c: New test.\n+\n \tPR target/93430\n \t* gcc.dg/pr93430.c: New test.\n \t* gcc.target/i386/avx2-pr93430.c: New test."}, {"sha": "ba82ae1bb34a86a87e6c2c3896d2e3c7f64b1a25", "filename": "gcc/testsuite/gcc.dg/pr93412.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9947bac0799b0c91e21b7c612b80cd0b54016f0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93412.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9947bac0799b0c91e21b7c612b80cd0b54016f0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93412.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93412.c?ref=a9947bac0799b0c91e21b7c612b80cd0b54016f0", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/93412 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-Og\" } */\n+\n+unsigned char a;\n+int b;\n+unsigned c;\n+\n+int\n+foo (int e, int f, int g, int h, int k, int i, short j)\n+{\n+  b = __builtin_add_overflow (a, 0, &c);\n+  b = __builtin_add_overflow_p (b, a, (unsigned __int128) 0) ? b : 0;\n+  return e + f + g + a + h + k + i + j + c;\n+}"}]}