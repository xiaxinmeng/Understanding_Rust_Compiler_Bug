{"sha": "f2d0e05d4ea16b313d4779b1a00311da98ffe178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkMGUwNWQ0ZWExNmIzMTNkNDc3OWIxYTAwMzExZGE5OGZmZTE3OA==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2003-10-24T19:40:30Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2003-10-24T19:40:30Z"}, "message": "GtkDialogPeer.java (handleEvent): Remove method.\n\n2003-10-24  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* gnu/java/awt/peer/gtk/GtkDialogPeer.java (handleEvent):\n\tRemove method.\n\t* gnu/java/awt/peer/gtk/GtkWindowPeer.java (postWindowEvent):\n\tNew method.\n\t* java/awt/Window.java (Window(Window,GraphicsConfiguration),\n\tshow, hide, dispose, getOwnedWindows): Synchronize on tree lock.\n\t(dispose): Post WINDOW_CLOSED event.\n\t(addWindowFocusListener, addWindowStateListener): Assign result\n\tof multicaster add back to window listener.\n\t(removeWindowFocusListener, removeWindowStateListener): Assign\n\tresult of multicaster remove back to window listener.\n\t(dispatchEventImpl): Add null checks for focus and state\n\tlisteners.\n\t(processWindowEvent): Handle case where windowListener is null\n\tbut state or focus listeners exist.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c: Add JNI\n\tglue for postWindowEvent.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c\n\t(window_delete_cb, window_destroy_cb, window_show_cb,\n\twindow_focus_in_cb, window_focus_out_cb, window_window_state_cb,\n\twindow_get_new_state): New functions.\n\t* jni/gtk-peer/gtkpeer.h: Define window event and frame state\n\tmacros.  Declare postWindowEventID.\n\nFrom-SVN: r72906", "tree": {"sha": "cd8f1d68f257446a36e215191eeda195cd3e3c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd8f1d68f257446a36e215191eeda195cd3e3c63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d0e05d4ea16b313d4779b1a00311da98ffe178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d0e05d4ea16b313d4779b1a00311da98ffe178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d0e05d4ea16b313d4779b1a00311da98ffe178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d0e05d4ea16b313d4779b1a00311da98ffe178/comments", "author": null, "committer": null, "parents": [{"sha": "65455962455f9902b21088d73d2b0c30611a4861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65455962455f9902b21088d73d2b0c30611a4861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65455962455f9902b21088d73d2b0c30611a4861"}], "stats": {"total": 395, "additions": 335, "deletions": 60}, "files": [{"sha": "64f5da0e2f7839e487f45aae6f4de98958d33841", "filename": "libjava/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f2d0e05d4ea16b313d4779b1a00311da98ffe178", "patch": "@@ -1,3 +1,29 @@\n+2003-10-24  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/GtkDialogPeer.java (handleEvent):\n+\tRemove method.\n+\t* gnu/java/awt/peer/gtk/GtkWindowPeer.java (postWindowEvent):\n+\tNew method.\n+\t* java/awt/Window.java (Window(Window,GraphicsConfiguration),\n+\tshow, hide, dispose, getOwnedWindows): Synchronize on tree lock.\n+\t(dispose): Post WINDOW_CLOSED event.\n+\t(addWindowFocusListener, addWindowStateListener): Assign result\n+\tof multicaster add back to window listener.\n+\t(removeWindowFocusListener, removeWindowStateListener): Assign\n+\tresult of multicaster remove back to window listener.\n+\t(dispatchEventImpl): Add null checks for focus and state\n+\tlisteners.\n+\t(processWindowEvent): Handle case where windowListener is null\n+\tbut state or focus listeners exist.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c: Add JNI\n+\tglue for postWindowEvent.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c\n+\t(window_delete_cb, window_destroy_cb, window_show_cb,\n+\twindow_focus_in_cb, window_focus_out_cb, window_window_state_cb,\n+\twindow_get_new_state): New functions.\n+\t* jni/gtk-peer/gtkpeer.h: Define window event and frame state\n+\tmacros.  Declare postWindowEventID.\n+\n 2003-10-24  Anthony Green  <green@redhat.com>\n \n \t* java/lang/natClass.cc (_Jv_LinkSymbolTable): Fix case where"}, {"sha": "27867321c3c8bd981fd95dc4b6d038a7ab56d9db", "filename": "libjava/gnu/java/awt/peer/gtk/GtkDialogPeer.java", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java?ref=f2d0e05d4ea16b313d4779b1a00311da98ffe178", "patch": "@@ -80,13 +80,4 @@ public void getArgs (Component component, GtkArgList args)\n     args.add (\"allow_shrink\", dialog.isResizable ());\n     args.add (\"allow_grow\", dialog.isResizable ());\n   }\n-\n-  public void handleEvent (AWTEvent event)\n-  {\n-//     int id = event.getID();\n-    \n-//     if (id == WindowEvent.WINDOW_CLOSING)\n-//       System.out.println (\"got a closing event\");\n-  }\n-\n }"}, {"sha": "821afa929f1eac5bf862e5c918ef30ab4fa7351a", "filename": "libjava/gnu/java/awt/peer/gtk/GtkWindowPeer.java", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java?ref=f2d0e05d4ea16b313d4779b1a00311da98ffe178", "patch": "@@ -42,6 +42,8 @@\n import java.awt.Dimension;\n import java.awt.Insets;\n import java.awt.Window;\n+import java.awt.Frame;\n+import java.awt.event.WindowEvent;\n import java.awt.peer.WindowPeer;\n \n public class GtkWindowPeer extends GtkContainerPeer\n@@ -56,6 +58,9 @@ public class GtkWindowPeer extends GtkContainerPeer\n   static protected final int GDK_WINDOW_TYPE_HINT_DOCK = 6;\n   static protected final int GDK_WINDOW_TYPE_HINT_DESKTOP = 7;\n \n+  private boolean hasBeenShown = false;\n+  private int oldState = Frame.NORMAL;\n+\n   // Unfortunately, X does not provide a clean way to calculate the\n   // dimensions of a window's borders before it has been displayed.\n   // So when creating the application's first window we guess the\n@@ -211,4 +216,29 @@ public void setVisible (boolean b)\n \t\t awtComponent.getHeight());\n     nativeSetVisible (b);\n   }\n+\n+  void postWindowEvent (int id, Window opposite, int newState)\n+  {\n+    if (id == WindowEvent.WINDOW_OPENED)\n+      {\n+\t// Post a WINDOW_OPENED event the first time this window is shown.\n+\tif (!hasBeenShown)\n+\t  {\n+\t    q.postEvent (new WindowEvent ((Window) awtComponent, id,\n+\t\t\t\t\t  opposite));\n+\t    hasBeenShown = true;\n+\t  }\n+      }\n+    else if (id == WindowEvent.WINDOW_STATE_CHANGED)\n+      {\n+\tif (oldState != newState)\n+\t  {\n+\t    q.postEvent (new WindowEvent ((Window) awtComponent, id, opposite,\n+\t\t\t\t\t  oldState, newState));\n+\t    oldState = newState;\n+\t  }\n+      }\n+    else\n+      q.postEvent (new WindowEvent ((Window) awtComponent, id, opposite));\n+  }\n }"}, {"sha": "70d452bf2f7a58f83406981100082526efdcdd56", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 68, "deletions": 51, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=f2d0e05d4ea16b313d4779b1a00311da98ffe178", "patch": "@@ -144,13 +144,12 @@ public Window(Window owner, GraphicsConfiguration gc)\n   {\n     this ();\n \n-    if (owner == null)\n-      throw new IllegalArgumentException (\"owner must not be null\");\n-\n-    parent = owner;\n-\n-    synchronized (owner.ownedWindows)\n+    synchronized (getTreeLock())\n       {\n+\tif (owner == null)\n+\t  throw new IllegalArgumentException (\"owner must not be null\");\n+\n+\tparent = owner;\n         owner.ownedWindows.add(new WeakReference(this));\n       }\n \n@@ -220,7 +219,7 @@ public void show()\n       addNotify();\n \n     // Show visible owned windows.\n-    synchronized (ownedWindows)\n+    synchronized (getTreeLock())\n       {\n \tIterator e = ownedWindows.iterator();\n \twhile(e.hasNext())\n@@ -247,7 +246,7 @@ public void show()\n   public void hide()\n   {\n     // Hide visible owned windows.\n-    synchronized (ownedWindows)\n+    synchronized (getTreeLock ())\n       {\n \tIterator e = ownedWindows.iterator();\n \twhile(e.hasNext())\n@@ -280,7 +279,7 @@ public void dispose()\n   {\n     hide();\n \n-    synchronized (ownedWindows)\n+    synchronized (getTreeLock ())\n       {\n \tIterator e = ownedWindows.iterator();\n \twhile(e.hasNext())\n@@ -292,11 +291,15 @@ public void dispose()\n \t      // Remove null weak reference from ownedWindows.\n \t      e.remove();\n \t  }\n-      }\n \n-    for (int i = 0; i < ncomponents; ++i)\n-      component[i].removeNotify();\n-    this.removeNotify();\n+\tfor (int i = 0; i < ncomponents; ++i)\n+\t  component[i].removeNotify();\n+\tthis.removeNotify();\n+\n+        // Post a WINDOW_CLOSED event.\n+        WindowEvent we = new WindowEvent(this, WindowEvent.WINDOW_CLOSED);\n+        getToolkit().getSystemEventQueue().postEvent(we);\n+      }\n   }\n \n   /**\n@@ -386,7 +389,7 @@ public Window getOwner()\n   public Window[] getOwnedWindows()\n   {\n     Window [] trimmedList;\n-    synchronized (ownedWindows)\n+    synchronized (getTreeLock ())\n       {\n \t// Windows with non-null weak references in ownedWindows.\n \tWindow [] validList = new Window [ownedWindows.size()];\n@@ -479,7 +482,7 @@ public synchronized WindowStateListener[] getWindowStateListeners()\n    */\n   public void addWindowFocusListener (WindowFocusListener wfl)\n   {\n-    AWTEventMulticaster.add (windowFocusListener, wfl);\n+    windowFocusListener = AWTEventMulticaster.add (windowFocusListener, wfl);\n   }\n   \n   /**\n@@ -489,15 +492,15 @@ public void addWindowFocusListener (WindowFocusListener wfl)\n    */\n   public void addWindowStateListener (WindowStateListener wsl)\n   {\n-    AWTEventMulticaster.add (windowStateListener, wsl);  \n+    windowStateListener = AWTEventMulticaster.add (windowStateListener, wsl);  \n   }\n   \n   /**\n    * Removes the specified listener from this window.\n    */\n   public void removeWindowFocusListener (WindowFocusListener wfl)\n   {\n-    AWTEventMulticaster.remove (windowFocusListener, wfl);\n+    windowFocusListener = AWTEventMulticaster.remove (windowFocusListener, wfl);\n   }\n   \n   /**\n@@ -507,7 +510,7 @@ public void removeWindowFocusListener (WindowFocusListener wfl)\n    */\n   public void removeWindowStateListener (WindowStateListener wsl)\n   {\n-    AWTEventMulticaster.remove (windowStateListener, wsl);\n+    windowStateListener = AWTEventMulticaster.remove (windowStateListener, wsl);\n   }\n \n   /**\n@@ -532,7 +535,9 @@ void dispatchEventImpl(AWTEvent e)\n     // Make use of event id's in order to avoid multiple instanceof tests.\n     if (e.id <= WindowEvent.WINDOW_LAST \n         && e.id >= WindowEvent.WINDOW_FIRST\n-        && (windowListener != null \n+        && (windowListener != null\n+\t    || windowFocusListener != null\n+\t    || windowStateListener != null\n \t    || (eventMask & AWTEvent.WINDOW_EVENT_MASK) != 0))\n       processEvent(e);\n     else\n@@ -565,39 +570,51 @@ protected void processEvent(AWTEvent evt)\n    */\n   protected void processWindowEvent(WindowEvent evt)\n   {\n-    if (windowListener != null)\n+    int id = evt.getID();\n+\n+    if (id == WindowEvent.WINDOW_GAINED_FOCUS\n+\t|| id == WindowEvent.WINDOW_LOST_FOCUS)\n+      processWindowFocusEvent (evt);\n+    else if (id == WindowEvent.WINDOW_STATE_CHANGED)\n+      processWindowStateEvent (evt);\n+    else\n       {\n-        switch (evt.getID())\n-          {\n-          case WindowEvent.WINDOW_ACTIVATED:\n-            windowListener.windowActivated(evt);\n-            break;\n-          case WindowEvent.WINDOW_CLOSED:\n-            windowListener.windowClosed(evt);\n-            break;\n-          case WindowEvent.WINDOW_CLOSING:\n-            windowListener.windowClosing(evt);\n-            break;\n-          case WindowEvent.WINDOW_DEACTIVATED:\n-            windowListener.windowDeactivated(evt);\n-            break;\n-          case WindowEvent.WINDOW_DEICONIFIED:\n-            windowListener.windowDeiconified(evt);\n-            break;\n-          case WindowEvent.WINDOW_ICONIFIED:\n-            windowListener.windowIconified(evt);\n-            break;\n-          case WindowEvent.WINDOW_OPENED:\n-            windowListener.windowOpened(evt);\n-            break;\n-          case WindowEvent.WINDOW_GAINED_FOCUS:\n-          case WindowEvent.WINDOW_LOST_FOCUS:\n-            processWindowFocusEvent (evt);\n-            break;\n-          case WindowEvent.WINDOW_STATE_CHANGED:\n-            processWindowStateEvent (evt);\n-            break;\n-          }\n+\tif (windowListener != null)\n+\t  {\n+\t    switch (evt.getID())\n+\t      {\n+\t      case WindowEvent.WINDOW_ACTIVATED:\n+\t\twindowListener.windowActivated(evt);\n+\t\tbreak;\n+\n+\t      case WindowEvent.WINDOW_CLOSED:\n+\t\twindowListener.windowClosed(evt);\n+\t\tbreak;\n+\n+\t      case WindowEvent.WINDOW_CLOSING:\n+\t\twindowListener.windowClosing(evt);\n+\t\tbreak;\n+\n+\t      case WindowEvent.WINDOW_DEACTIVATED:\n+\t\twindowListener.windowDeactivated(evt);\n+\t\tbreak;\n+\n+\t      case WindowEvent.WINDOW_DEICONIFIED:\n+\t\twindowListener.windowDeiconified(evt);\n+\t\tbreak;\n+\n+\t      case WindowEvent.WINDOW_ICONIFIED:\n+\t\twindowListener.windowIconified(evt);\n+\t\tbreak;\n+\n+\t      case WindowEvent.WINDOW_OPENED:\n+\t\twindowListener.windowOpened(evt);\n+\t\tbreak;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t  }\n       }\n   }\n "}, {"sha": "5d144f8ec65daf079286e2da57d51f4c4e4be6ba", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c?ref=f2d0e05d4ea16b313d4779b1a00311da98ffe178", "patch": "@@ -57,6 +57,8 @@ jmethodID postAdjustmentEventID;\n jmethodID postItemEventID;\n jmethodID postListItemEventID;\n jmethodID postTextEventID;\n+jmethodID postWindowEventID;\n+\n JNIEnv *gdk_env;\n \n #ifdef PORTABLE_NATIVE_SYNC\n@@ -163,6 +165,9 @@ Java_gnu_java_awt_peer_gtk_GtkMainThread_gtkInit (JNIEnv *env, jclass clazz)\n \t\t\t\t\t  \"postMouseEvent\", \"(IJIIIIZ)V\");\n   postConfigureEventID = (*env)->GetMethodID (env, gtkwindowpeer, \n \t\t\t\t\t  \"postConfigureEvent\", \"(IIIIIIII)V\");\n+  postWindowEventID = (*env)->GetMethodID (env, gtkwindowpeer,\n+\t\t\t\t\t   \"postWindowEvent\",\n+\t\t\t\t\t   \"(ILjava/awt/Window;I)V\");\n   postExposeEventID = (*env)->GetMethodID (env, gtkcomponentpeer, \n \t\t\t\t\t  \"postExposeEvent\", \"(IIII)V\");\n   postKeyEventID = (*env)->GetMethodID (env, gtkcomponentpeer,"}, {"sha": "d71f36a42982d8edaf8c7f9744b88ab15ab44c4f", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c", "status": "modified", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c?ref=f2d0e05d4ea16b313d4779b1a00311da98ffe178", "patch": "@@ -41,6 +41,23 @@ exception statement from your version. */\n #include \"gnu_java_awt_peer_gtk_GtkFramePeer.h\"\n #include <gdk/gdkprivate.h>\n #include <gdk/gdkx.h>\n+#include <X11/Xatom.h>\n+\n+static void window_delete_cb (GtkWidget *widget, GdkEvent *event,\n+\t\t\t      jobject peer);\n+static void window_destroy_cb (GtkWidget *widget, GdkEvent *event,\n+\t\t\t       jobject peer);\n+static void window_show_cb (GtkWidget *widget, jobject peer);\n+static gboolean window_focus_in_cb (GtkWidget * widget,\n+\t\t\t\t    GdkEventFocus *event,\n+\t\t\t\t    jobject peer);\n+static gboolean window_focus_out_cb (GtkWidget * widget,\n+\t\t\t\t     GdkEventFocus *event,\n+\t\t\t\t     jobject peer);\n+static gboolean window_window_state_cb (GtkWidget *widget,\n+\t\t\t\t\tGdkEvent *event,\n+\t\t\t\t\tjobject peer);\n+static jint window_get_new_state (GtkWidget *widget);\n \n /*\n  * Make a new window.\n@@ -152,6 +169,25 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectHooks\n \n   connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n \n+  /* Connect signals for window event support. */\n+  g_signal_connect (G_OBJECT (ptr), \"delete-event\",\n+\t\t    G_CALLBACK (window_delete_cb), obj);\n+\n+  g_signal_connect (G_OBJECT (ptr), \"destroy-event\",\n+\t\t    G_CALLBACK (window_destroy_cb), obj);\n+\n+  g_signal_connect (G_OBJECT (ptr), \"show\",\n+\t\t    G_CALLBACK (window_show_cb), obj);\n+\n+  g_signal_connect (G_OBJECT (ptr), \"focus-in-event\",\n+\t\t    G_CALLBACK (window_focus_in_cb), obj);\n+\n+  g_signal_connect (G_OBJECT (ptr), \"focus-out-event\",\n+\t\t    G_CALLBACK (window_focus_out_cb), obj);\n+\n+  g_signal_connect (G_OBJECT (ptr), \"window-state-event\",\n+\t\t    G_CALLBACK (window_window_state_cb), obj);\n+\n   gdk_threads_leave ();\n }\n \n@@ -302,3 +338,154 @@ Java_gnu_java_awt_peer_gtk_GtkFramePeer_getMenuBarHeight\n \n   return height;\n }\n+\n+static void\n+window_delete_cb (GtkWidget *widget __attribute__((unused)),\n+\t\t  GdkEvent *event __attribute__((unused)),\n+\t\t  jobject peer)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postWindowEventID,\n+\t\t\t      (jint) AWT_WINDOW_CLOSING,\n+\t\t\t      (jobject) NULL, (jint) 0);\n+}\n+\n+static void\n+window_destroy_cb (GtkWidget *widget __attribute__((unused)),\n+\t\t   GdkEvent *event __attribute__((unused)),\n+\t\t   jobject peer)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postWindowEventID,\n+\t\t\t      (jint) AWT_WINDOW_CLOSED,\n+\t\t\t      (jobject) NULL, (jint) 0);\n+}\n+\n+static void\n+window_show_cb (GtkWidget *widget __attribute__((unused)),\n+\t\tjobject peer)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postWindowEventID,\n+\t\t\t      (jint) AWT_WINDOW_OPENED,\n+\t\t\t      (jobject) NULL, (jint) 0);\n+}\n+\n+static gboolean\n+window_focus_in_cb (GtkWidget * widget __attribute__((unused)),\n+\t\t    GdkEventFocus *event __attribute__((unused)),\n+\t\t    jobject peer)\n+{\n+  /* FIXME: when hiding then showing, we get two sets of\n+     (LOST_FOCUS/DEACTIVATED, ACTIVATED/GAINED_FOCUS) events. */\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postWindowEventID,\n+\t\t\t      (jint) AWT_WINDOW_ACTIVATED,\n+\t\t\t      (jobject) NULL, (jint) 0);\n+\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postWindowEventID,\n+\t\t\t      (jint) AWT_WINDOW_GAINED_FOCUS,\n+\t\t\t      (jobject) NULL, (jint) 0);\n+  return TRUE;\n+}\n+\n+static gboolean\n+window_focus_out_cb (GtkWidget * widget __attribute__((unused)),\n+\t\t     GdkEventFocus *event __attribute__((unused)),\n+\t\t     jobject peer)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postWindowEventID,\n+\t\t\t      (jint) AWT_WINDOW_LOST_FOCUS,\n+\t\t\t      (jobject) NULL, (jint) 0);\n+\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postWindowEventID,\n+\t\t\t      (jint) AWT_WINDOW_DEACTIVATED,\n+\t\t\t      (jobject) NULL, (jint) 0);\n+  return TRUE;\n+}\n+\n+static gboolean\n+window_window_state_cb (GtkWidget *widget,\n+\t\t\tGdkEvent *event,\n+\t\t\tjobject peer)\n+{\n+  jint new_state;\n+\n+  /* Handle WINDOW_ICONIFIED and WINDOW_DEICONIFIED events. */\n+  if (event->window_state.changed_mask & GDK_WINDOW_STATE_ICONIFIED)\n+    {\n+      /* We've either been iconified or deiconified. */\n+      if (event->window_state.new_window_state & GDK_WINDOW_STATE_ICONIFIED)\n+\t{\n+\t  /* We've been iconified. */\n+\t  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t\t      postWindowEventID,\n+\t\t\t\t      (jint) AWT_WINDOW_ICONIFIED,\n+\t\t\t\t      (jobject) NULL, (jint) 0);\n+\t}\n+      else\n+\t{\n+\t  /* We've been deiconified. */\n+\t  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t\t      postWindowEventID,\n+\t\t\t\t      (jint) AWT_WINDOW_DEICONIFIED,\n+\t\t\t\t      (jobject) NULL, (jint) 0);\n+\t}\n+    }\n+\n+  /* Post a WINDOW_STATE_CHANGED event, passing the new frame state to\n+     GtkWindowPeer. */\n+  new_state = AWT_FRAME_STATE_NORMAL;\n+\n+  if (event->window_state.new_window_state & GDK_WINDOW_STATE_ICONIFIED)\n+    new_state |= AWT_FRAME_STATE_ICONIFIED;\n+\n+  new_state |= window_get_new_state (widget);\n+\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postWindowEventID,\n+\t\t\t      (jint) AWT_WINDOW_STATE_CHANGED,\n+\t\t\t      (jobject) NULL, new_state);\n+  return TRUE;\n+}\n+\n+static jint\n+window_get_new_state (GtkWidget *widget)\n+{\n+  GdkDisplay *display = gtk_widget_get_display(widget);\n+  jint new_state = AWT_FRAME_STATE_NORMAL;\n+  Atom type;\n+  gint format;\n+  gulong atom_count;\n+  gulong bytes_after;\n+  Atom *atom_list = NULL;\n+  gulong i;\n+\n+  XGetWindowProperty (GDK_DISPLAY_XDISPLAY (display), GDK_WINDOW_XID (widget->window),\n+\t\t      gdk_x11_get_xatom_by_name_for_display (display, \"_NET_WM_STATE\"),\n+\t\t      0, G_MAXLONG, False, XA_ATOM, &type, &format, &atom_count,\n+\t\t      &bytes_after, (guchar **)&atom_list);\n+\n+  if (type != None)\n+    {\n+      Atom maxvert = gdk_x11_get_xatom_by_name_for_display (display, \"_NET_WM_STATE_MAXIMIZED_VERT\");\n+      Atom maxhorz\t= gdk_x11_get_xatom_by_name_for_display (display, \"_NET_WM_STATE_MAXIMIZED_HORZ\");\n+\n+      i = 0;\n+      while (i < atom_count)\n+        {\n+\t  if (atom_list[i] == maxhorz)\n+\t    new_state |= AWT_FRAME_STATE_MAXIMIZED_HORIZ;\n+          else if (atom_list[i] == maxvert)\n+\t    new_state |= AWT_FRAME_STATE_MAXIMIZED_VERT;\n+\n+          ++i;\n+        }\n+\n+      XFree (atom_list);\n+    }\n+  return new_state;\n+}"}, {"sha": "8f8ec40c08cc18ad1da5337a904706b82da121dc", "filename": "libjava/jni/gtk-peer/gtkpeer.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d0e05d4ea16b313d4779b1a00311da98ffe178/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h?ref=f2d0e05d4ea16b313d4779b1a00311da98ffe178", "patch": "@@ -347,6 +347,23 @@ struct graphics\n #define AWT_FOCUS_LOST 1004\n #define AWT_FOCUS_GAINED 1005\n \n+#define AWT_WINDOW_OPENED 200\n+#define AWT_WINDOW_CLOSING 201\n+#define AWT_WINDOW_CLOSED 202\n+#define AWT_WINDOW_ICONIFIED 203\n+#define AWT_WINDOW_DEICONIFIED 204\n+#define AWT_WINDOW_ACTIVATED 205\n+#define AWT_WINDOW_DEACTIVATED 206\n+#define AWT_WINDOW_GAINED_FOCUS 207\n+#define AWT_WINDOW_LOST_FOCUS 208\n+#define AWT_WINDOW_STATE_CHANGED 209\n+\n+#define AWT_FRAME_STATE_NORMAL 0\n+#define AWT_FRAME_STATE_ICONIFIED 1\n+#define AWT_FRAME_STATE_MAXIMIZED_HORIZ 2\n+#define AWT_FRAME_STATE_MAXIMIZED_VERT 4\n+#define AWT_FRAME_STATE_MAXIMIZED_BOTH 6\n+\n #define AWT_STYLE_PLAIN  0\n #define AWT_STYLE_BOLD   1\n #define AWT_STYLE_ITALIC 2\n@@ -364,6 +381,8 @@ extern jmethodID postAdjustmentEventID;\n extern jmethodID postItemEventID;\n extern jmethodID postListItemEventID;\n extern jmethodID postTextEventID;\n+extern jmethodID postWindowEventID;\n+\n extern jmethodID syncAttrsID;\n extern jclass gdkColor;\n extern jmethodID gdkColorID;"}]}