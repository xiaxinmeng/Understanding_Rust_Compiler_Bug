{"sha": "3bbe3320ec5d9c41544e904c15b6c55db115a9be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiZTMzMjBlYzVkOWM0MTU0NGU5MDRjMTViNmM1NWRiMTE1YTliZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-15T17:51:50Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-15T17:51:50Z"}, "message": "ChangeLog: Follow spelling conventions.\n\n\t* ChangeLog: Follow spelling conventions.\n\t* g++.dg/template/friend4.C: Likewise.\n\t* g++.old-deja/g++.pt/crash67.C: Likewise.\n\t* gcc.c-torture/execute/20000801-4.c: Likewise.\n\t* gcc.dg/c90-digraph-1.c: Likewise.\n\t* gcc.dg/c94-digraph-1.c: Likewise.\n\t* gcc.dg/c99-digraph-1.c: Likewise.\n\t* gcc.dg/cpp/line5.c: Likewise.\n\t* gcc.dg/cpp/multiline.c: Likewise.\n\t* gcc.dg/cpp/trad/literals-1.c: Likewise.\n\t* gcc.dg/format/attr-3.c: Likewise.\n\t* gcc.dg/format/c90-scanf-3.c: Likewise.\n\t* gcc.dg/format/ext-4.c: Likewise.\n\nFrom-SVN: r57161", "tree": {"sha": "76b3d556f3aa187f20feefc138642e07f4e35b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76b3d556f3aa187f20feefc138642e07f4e35b3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bbe3320ec5d9c41544e904c15b6c55db115a9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbe3320ec5d9c41544e904c15b6c55db115a9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bbe3320ec5d9c41544e904c15b6c55db115a9be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbe3320ec5d9c41544e904c15b6c55db115a9be/comments", "author": null, "committer": null, "parents": [{"sha": "56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56149abcd3ec956a50cd8c563bc103acf6fbc3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56149abcd3ec956a50cd8c563bc103acf6fbc3bd"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "d66527dccb04dc7d755adfe3d84a6306d80204d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -1,3 +1,19 @@\n+2002-09-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Follow spelling conventions.\n+\t* g++.dg/template/friend4.C: Likewise.\n+\t* g++.old-deja/g++.pt/crash67.C: Likewise.\n+\t* gcc.c-torture/execute/20000801-4.c: Likewise.\n+\t* gcc.dg/c90-digraph-1.c: Likewise.\n+\t* gcc.dg/c94-digraph-1.c: Likewise.\n+\t* gcc.dg/c99-digraph-1.c: Likewise.\n+\t* gcc.dg/cpp/line5.c: Likewise.\n+\t* gcc.dg/cpp/multiline.c: Likewise.\n+\t* gcc.dg/cpp/trad/literals-1.c: Likewise.\n+\t* gcc.dg/format/attr-3.c: Likewise.\n+\t* gcc.dg/format/c90-scanf-3.c: Likewise.\n+\t* gcc.dg/format/ext-4.c: Likewise.\n+\n 2002-09-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/template/pretty1.C: New test.\n@@ -2057,7 +2073,7 @@ Thu Mar  7 10:05:31 2002  Jeffrey A Law  (law@redhat.com)\n \t* lib/prune.exp: Remove \"In (program|subroutine\"block-data)\"\n \tmessage from g77\n \t* lib/g77-dg.exp: Trim g77 error messages so that they are\n-\trecognised by dg.exp.\n+\trecognized by dg.exp.\n \n 2002-02-07  David Billinghurst <David.Billinghurst@riotinto.com>\n "}, {"sha": "fabf3375bd2152c1039441809bbf775baceffee6", "filename": "gcc/testsuite/g++.dg/template/friend4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend4.C?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -3,7 +3,7 @@\n // Copyright (C) 2002 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 18 Dec 2001 <nathan@codesourcery.com>\n \n-// PR 109, dependant member friends\n+// PR 109, dependent member friends\n \n struct B\n {"}, {"sha": "b532e3d22e94fff7efb2eb8b4ba971af92169da7", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash67.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash67.C?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -4,7 +4,7 @@\n // Copyright (C) 2001 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 6 May 2001 <nathan@codesourcery.com>\n \n-// Bug 2526. We ICE'd after diagnosing dependant name confusion in\n+// Bug 2526. We ICE'd after diagnosing dependent name confusion in\n // friendliness when not being pedantic.\n \n template<typename T>"}, {"sha": "d293f05c438bc3ebc4de4b4859ee080bfb6806c8", "filename": "gcc/testsuite/gcc.c-torture/execute/20000801-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000801-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000801-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000801-4.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -1,8 +1,8 @@\n /* Origin: PR c/128 from Martin Sebor <sebor@roguewave.com>, adapted\n    as a testcase by Joseph Myers <jsm28@cam.ac.uk>.\n */\n-/* Character arrays initialised by a string literal must have\n-   uninitialised elements zeroed.  This isn't clear in the 1990\n+/* Character arrays initialized by a string literal must have\n+   uninitialized elements zeroed.  This isn't clear in the 1990\n    standard, but was fixed in TC2 and C99; see DRs #060, #092.\n */\n extern void abort (void);"}, {"sha": "9396d136736f19dbcfc43a7d8444690d1556240d", "filename": "gcc/testsuite/gcc.dg/c90-digraph-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-digraph-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-digraph-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-digraph-1.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -1,4 +1,4 @@\n-/* Test for recognition of digraphs: should be recognised in C94 and C99\n+/* Test for recognition of digraphs: should be recognized in C94 and C99\n    mode, but not in C90 mode.  Also check correct stringizing.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */"}, {"sha": "55d77146be6f1bfca8bc3e2fb089eede74201418", "filename": "gcc/testsuite/gcc.dg/c94-digraph-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-digraph-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-digraph-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-digraph-1.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -1,4 +1,4 @@\n-/* Test for recognition of digraphs: should be recognised in C94 and C99\n+/* Test for recognition of digraphs: should be recognized in C94 and C99\n    mode, but not in C90 mode.  Also check correct stringizing.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */"}, {"sha": "318aa70bdcc2317d566ba2ecf274833fdf2c56dd", "filename": "gcc/testsuite/gcc.dg/c99-digraph-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-digraph-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-digraph-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-digraph-1.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -1,4 +1,4 @@\n-/* Test for recognition of digraphs: should be recognised in C94 and C99\n+/* Test for recognition of digraphs: should be recognized in C94 and C99\n    mode, but not in C90 mode.  Also check correct stringizing.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */"}, {"sha": "4cad6a1714113fb568e87680eba2e93c21fb49ff", "filename": "gcc/testsuite/gcc.dg/cpp/line5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline5.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -10,6 +10,6 @@\n    -fpreprocessed on raw source.  Nevertheless, we should not\n    segfault.  This is a test that we don't back up two tokens in\n    cpplib.c - one to back up over the number, and one when we\n-   recognise that it's not a valid directive in preprocessed input.  */\n+   recognize that it's not a valid directive in preprocessed input.  */\n \n  # 1 \"foo.c\""}, {"sha": "e76ba0447eab9adc32dbc5ec7d077025b1789597", "filename": "gcc/testsuite/gcc.dg/cpp/multiline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -1,7 +1,7 @@\n /* Copyright (C) 2000 Free Software Foundation, Inc.  */\n /* { dg-do preprocess } */\n /* { dg-options \"-C\" } */\n-/* Test that multi-line tokens are recognised by cpp0 as being\n+/* Test that multi-line tokens are recognized by cpp0 as being\n    multiline .  Source: Neil Booth, 17 Dec 2000.  */\n /* Line 1\n    Line 2"}, {"sha": "15c8030fa550033c615e8f9da067909ce7206f23", "filename": "gcc/testsuite/gcc.dg/cpp/trad/literals-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-1.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -1,4 +1,4 @@\n-/* Test that (what looks like) comments are not recognised in literals\n+/* Test that (what looks like) comments are not recognized in literals\n    and that quotes within quotes do not confused the preprocessor.  */\n \n /* { dg-do run } */"}, {"sha": "8fc1faa6819bf88768c289599dec1f0c0cc97d16", "filename": "gcc/testsuite/gcc.dg/format/attr-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -33,7 +33,7 @@ struct s1 { int i; } __attribute__((format_arg(1))); /* { dg-error \"does not app\n union u1 { int i; } __attribute__((format_arg(1))); /* { dg-error \"does not apply|only applies\" \"format_arg on union\" } */\n enum e1 { E1V0 } __attribute__((format_arg(1))); /* { dg-error \"does not apply|only applies\" \"format_arg on enum\" } */\n \n-/* The format type must be an identifier, one of those recognised.  */\n+/* The format type must be an identifier, one of those recognized.  */\n extern void fe0 (const char *, ...) __attribute__((format(12345, 1, 2))); /* { dg-error \"format specifier\" \"non-id format\" } */\n extern void fe1 (const char *, ...) __attribute__((format(nosuch, 1, 2))); /* { dg-warning \"format function type\" \"unknown format\" } */\n "}, {"sha": "5570707823c7a60b0c58a6eedb1bcbc9cdf93813", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-3.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -10,7 +10,7 @@\n void\n foo (char **sp, wchar_t **lsp)\n {\n-  /* %a formats for allocation, only recognised in C90 mode, are a\n+  /* %a formats for allocation, only recognized in C90 mode, are a\n      GNU extension.\n   */\n   scanf (\"%as\", sp); /* { dg-warning \"C\" \"%as\" } */"}, {"sha": "c11c0ada7de20635134c8df53f7c902f74d19d44", "filename": "gcc/testsuite/gcc.dg/format/ext-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbe3320ec5d9c41544e904c15b6c55db115a9be/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-4.c?ref=3bbe3320ec5d9c41544e904c15b6c55db115a9be", "patch": "@@ -8,7 +8,7 @@\n void\n foo (char **sp, wchar_t **lsp)\n {\n-  /* %a formats for allocation, only recognised in C90 mode, are a\n+  /* %a formats for allocation, only recognized in C90 mode, are a\n      GNU extension.  Followed by other characters, %a is not treated\n      specially.\n   */"}]}