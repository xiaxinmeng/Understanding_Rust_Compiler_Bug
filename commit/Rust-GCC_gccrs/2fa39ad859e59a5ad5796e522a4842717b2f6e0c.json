{"sha": "2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZhMzlhZDg1OWU1OWE1YWQ1Nzk2ZTUyMmE0ODQyNzE3YjJmNmUwYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-12T00:01:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-12T00:01:09Z"}, "message": "runtime: Merge master revision 19185.\n\nThis revision renames several files in the runtime directory\nfrom .c to .goc.\n\nFrom-SVN: r212472", "tree": {"sha": "783acf11ed4625d6499f731501d984f25fa103fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783acf11ed4625d6499f731501d984f25fa103fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/comments", "author": null, "committer": null, "parents": [{"sha": "ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec"}], "stats": {"total": 840, "additions": 279, "deletions": 561}, "files": [{"sha": "23732d0fc85e94a399c58214a41bd0e59452cfe6", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -1,4 +1,4 @@\n-50c8fc924389\n+63484e8b6b76\n \n The first line of this file holds the Mercurial revision number of the\n last merge done from the master library sources."}, {"sha": "f9bc89f322e017213945a1b3bdadff2de35999f7", "filename": "libgo/Makefile.am", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -446,7 +446,6 @@ runtime_files = \\\n \truntime/go-eface-compare.c \\\n \truntime/go-eface-val-compare.c \\\n \truntime/go-fieldtrack.c \\\n-\truntime/go-getgoroot.c \\\n \truntime/go-int-array-to-string.c \\\n \truntime/go-int-to-string.c \\\n \truntime/go-interface-compare.c \\\n@@ -487,16 +486,12 @@ runtime_files = \\\n \truntime/go-type-interface.c \\\n \truntime/go-type-string.c \\\n \truntime/go-typedesc-equal.c \\\n-\truntime/go-typestring.c \\\n \truntime/go-unsafe-new.c \\\n \truntime/go-unsafe-newarray.c \\\n \truntime/go-unsafe-pointer.c \\\n \truntime/go-unwind.c \\\n \truntime/go-varargs.c \\\n-\truntime/chan.c \\\n-\truntime/cpuprof.c \\\n \truntime/env_posix.c \\\n-\truntime/lfstack.c \\\n \t$(runtime_lock_files) \\\n \truntime/mcache.c \\\n \truntime/mcentral.c \\\n@@ -515,11 +510,15 @@ runtime_files = \\\n \truntime/thread.c \\\n \truntime/yield.c \\\n \t$(rtems_task_variable_add_file) \\\n+\tchan.c \\\n+\tcpuprof.c \\\n \tgo-iface.c \\\n+\tlfstack.c \\\n \tmalloc.c \\\n \tmap.c \\\n \tmprof.c \\\n \tnetpoll.c \\\n+\trdebug.c \\\n \treflect.c \\\n \truntime1.c \\\n \tsema.c \\"}, {"sha": "8207e602f8e7a2143c634fcf1fff616aca59c842", "filename": "libgo/Makefile.in", "status": "modified", "additions": 14, "deletions": 52, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -196,7 +196,7 @@ am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-check-interface.lo go-construct-map.lo \\\n \tgo-convert-interface.lo go-copy.lo go-defer.lo \\\n \tgo-deferred-recover.lo go-eface-compare.lo \\\n-\tgo-eface-val-compare.lo go-fieldtrack.lo go-getgoroot.lo \\\n+\tgo-eface-val-compare.lo go-fieldtrack.lo \\\n \tgo-int-array-to-string.lo go-int-to-string.lo \\\n \tgo-interface-compare.lo go-interface-eface-compare.lo \\\n \tgo-interface-val-compare.lo go-make-slice.lo go-map-delete.lo \\\n@@ -209,16 +209,15 @@ am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-strplus.lo go-strslice.lo go-traceback.lo \\\n \tgo-type-complex.lo go-type-eface.lo go-type-error.lo \\\n \tgo-type-float.lo go-type-identity.lo go-type-interface.lo \\\n-\tgo-type-string.lo go-typedesc-equal.lo go-typestring.lo \\\n-\tgo-unsafe-new.lo go-unsafe-newarray.lo go-unsafe-pointer.lo \\\n-\tgo-unwind.lo go-varargs.lo chan.lo cpuprof.lo env_posix.lo \\\n-\tlfstack.lo $(am__objects_1) mcache.lo mcentral.lo \\\n-\t$(am__objects_2) mfixalloc.lo mgc0.lo mheap.lo msize.lo \\\n-\t$(am__objects_3) panic.lo parfor.lo print.lo proc.lo \\\n+\tgo-type-string.lo go-typedesc-equal.lo go-unsafe-new.lo \\\n+\tgo-unsafe-newarray.lo go-unsafe-pointer.lo go-unwind.lo \\\n+\tgo-varargs.lo env_posix.lo $(am__objects_1) mcache.lo \\\n+\tmcentral.lo $(am__objects_2) mfixalloc.lo mgc0.lo mheap.lo \\\n+\tmsize.lo $(am__objects_3) panic.lo parfor.lo print.lo proc.lo \\\n \truntime.lo signal_unix.lo thread.lo yield.lo $(am__objects_4) \\\n-\tgo-iface.lo malloc.lo map.lo mprof.lo netpoll.lo reflect.lo \\\n-\truntime1.lo sema.lo sigqueue.lo string.lo time.lo \\\n-\t$(am__objects_5)\n+\tchan.lo cpuprof.lo go-iface.lo lfstack.lo malloc.lo map.lo \\\n+\tmprof.lo netpoll.lo rdebug.lo reflect.lo runtime1.lo sema.lo \\\n+\tsigqueue.lo string.lo time.lo $(am__objects_5)\n am_libgo_la_OBJECTS = $(am__objects_6)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -775,7 +774,6 @@ runtime_files = \\\n \truntime/go-eface-compare.c \\\n \truntime/go-eface-val-compare.c \\\n \truntime/go-fieldtrack.c \\\n-\truntime/go-getgoroot.c \\\n \truntime/go-int-array-to-string.c \\\n \truntime/go-int-to-string.c \\\n \truntime/go-interface-compare.c \\\n@@ -816,16 +814,12 @@ runtime_files = \\\n \truntime/go-type-interface.c \\\n \truntime/go-type-string.c \\\n \truntime/go-typedesc-equal.c \\\n-\truntime/go-typestring.c \\\n \truntime/go-unsafe-new.c \\\n \truntime/go-unsafe-newarray.c \\\n \truntime/go-unsafe-pointer.c \\\n \truntime/go-unwind.c \\\n \truntime/go-varargs.c \\\n-\truntime/chan.c \\\n-\truntime/cpuprof.c \\\n \truntime/env_posix.c \\\n-\truntime/lfstack.c \\\n \t$(runtime_lock_files) \\\n \truntime/mcache.c \\\n \truntime/mcentral.c \\\n@@ -844,11 +838,15 @@ runtime_files = \\\n \truntime/thread.c \\\n \truntime/yield.c \\\n \t$(rtems_task_variable_add_file) \\\n+\tchan.c \\\n+\tcpuprof.c \\\n \tgo-iface.c \\\n+\tlfstack.c \\\n \tmalloc.c \\\n \tmap.c \\\n \tmprof.c \\\n \tnetpoll.c \\\n+\trdebug.c \\\n \treflect.c \\\n \truntime1.c \\\n \tsema.c \\\n@@ -2428,7 +2426,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-eface-compare.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-eface-val-compare.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-fieldtrack.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-getgoroot.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-iface.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-int-array-to-string.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-int-to-string.Plo@am__quote@\n@@ -2471,7 +2468,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-type-interface.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-type-string.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-typedesc-equal.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-typestring.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-unsafe-new.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-unsafe-newarray.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-unsafe-pointer.Plo@am__quote@\n@@ -2499,6 +2495,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parfor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/print.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rdebug.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reflect.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rtems-task-variable-add.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/runtime.Plo@am__quote@\n@@ -2681,13 +2678,6 @@ go-fieldtrack.lo: runtime/go-fieldtrack.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-fieldtrack.lo `test -f 'runtime/go-fieldtrack.c' || echo '$(srcdir)/'`runtime/go-fieldtrack.c\n \n-go-getgoroot.lo: runtime/go-getgoroot.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-getgoroot.lo -MD -MP -MF $(DEPDIR)/go-getgoroot.Tpo -c -o go-getgoroot.lo `test -f 'runtime/go-getgoroot.c' || echo '$(srcdir)/'`runtime/go-getgoroot.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-getgoroot.Tpo $(DEPDIR)/go-getgoroot.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-getgoroot.c' object='go-getgoroot.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-getgoroot.lo `test -f 'runtime/go-getgoroot.c' || echo '$(srcdir)/'`runtime/go-getgoroot.c\n-\n go-int-array-to-string.lo: runtime/go-int-array-to-string.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-int-array-to-string.lo -MD -MP -MF $(DEPDIR)/go-int-array-to-string.Tpo -c -o go-int-array-to-string.lo `test -f 'runtime/go-int-array-to-string.c' || echo '$(srcdir)/'`runtime/go-int-array-to-string.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-int-array-to-string.Tpo $(DEPDIR)/go-int-array-to-string.Plo\n@@ -2968,13 +2958,6 @@ go-typedesc-equal.lo: runtime/go-typedesc-equal.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-typedesc-equal.lo `test -f 'runtime/go-typedesc-equal.c' || echo '$(srcdir)/'`runtime/go-typedesc-equal.c\n \n-go-typestring.lo: runtime/go-typestring.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-typestring.lo -MD -MP -MF $(DEPDIR)/go-typestring.Tpo -c -o go-typestring.lo `test -f 'runtime/go-typestring.c' || echo '$(srcdir)/'`runtime/go-typestring.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-typestring.Tpo $(DEPDIR)/go-typestring.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-typestring.c' object='go-typestring.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-typestring.lo `test -f 'runtime/go-typestring.c' || echo '$(srcdir)/'`runtime/go-typestring.c\n-\n go-unsafe-new.lo: runtime/go-unsafe-new.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-unsafe-new.lo -MD -MP -MF $(DEPDIR)/go-unsafe-new.Tpo -c -o go-unsafe-new.lo `test -f 'runtime/go-unsafe-new.c' || echo '$(srcdir)/'`runtime/go-unsafe-new.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-unsafe-new.Tpo $(DEPDIR)/go-unsafe-new.Plo\n@@ -3010,34 +2993,13 @@ go-varargs.lo: runtime/go-varargs.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-varargs.lo `test -f 'runtime/go-varargs.c' || echo '$(srcdir)/'`runtime/go-varargs.c\n \n-chan.lo: runtime/chan.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT chan.lo -MD -MP -MF $(DEPDIR)/chan.Tpo -c -o chan.lo `test -f 'runtime/chan.c' || echo '$(srcdir)/'`runtime/chan.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/chan.Tpo $(DEPDIR)/chan.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/chan.c' object='chan.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o chan.lo `test -f 'runtime/chan.c' || echo '$(srcdir)/'`runtime/chan.c\n-\n-cpuprof.lo: runtime/cpuprof.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cpuprof.lo -MD -MP -MF $(DEPDIR)/cpuprof.Tpo -c -o cpuprof.lo `test -f 'runtime/cpuprof.c' || echo '$(srcdir)/'`runtime/cpuprof.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/cpuprof.Tpo $(DEPDIR)/cpuprof.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/cpuprof.c' object='cpuprof.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cpuprof.lo `test -f 'runtime/cpuprof.c' || echo '$(srcdir)/'`runtime/cpuprof.c\n-\n env_posix.lo: runtime/env_posix.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT env_posix.lo -MD -MP -MF $(DEPDIR)/env_posix.Tpo -c -o env_posix.lo `test -f 'runtime/env_posix.c' || echo '$(srcdir)/'`runtime/env_posix.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/env_posix.Tpo $(DEPDIR)/env_posix.Plo\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/env_posix.c' object='env_posix.lo' libtool=yes @AMDEPBACKSLASH@\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o env_posix.lo `test -f 'runtime/env_posix.c' || echo '$(srcdir)/'`runtime/env_posix.c\n \n-lfstack.lo: runtime/lfstack.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lfstack.lo -MD -MP -MF $(DEPDIR)/lfstack.Tpo -c -o lfstack.lo `test -f 'runtime/lfstack.c' || echo '$(srcdir)/'`runtime/lfstack.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/lfstack.Tpo $(DEPDIR)/lfstack.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/lfstack.c' object='lfstack.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lfstack.lo `test -f 'runtime/lfstack.c' || echo '$(srcdir)/'`runtime/lfstack.c\n-\n lock_sema.lo: runtime/lock_sema.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lock_sema.lo -MD -MP -MF $(DEPDIR)/lock_sema.Tpo -c -o lock_sema.lo `test -f 'runtime/lock_sema.c' || echo '$(srcdir)/'`runtime/lock_sema.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/lock_sema.Tpo $(DEPDIR)/lock_sema.Plo"}, {"sha": "165bebf6316fe5d66845a0b726dbf68c6f54f166", "filename": "libgo/go/runtime/export_test.go", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fgo%2Fruntime%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fgo%2Fruntime%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fexport_test.go?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -29,11 +29,11 @@ type LFNode struct {\n \tPushcnt uintptr\n }\n \n-func lfstackpush(head *uint64, node *LFNode)\n-func lfstackpop2(head *uint64) *LFNode\n+func lfstackpush_go(head *uint64, node *LFNode)\n+func lfstackpop_go(head *uint64) *LFNode\n \n-var LFStackPush = lfstackpush\n-var LFStackPop = lfstackpop2\n+var LFStackPush = lfstackpush_go\n+var LFStackPop = lfstackpop_go\n \n type ParFor struct {\n \tbody    *byte\n@@ -46,17 +46,17 @@ type ParFor struct {\n \twait    bool\n }\n \n-func parforalloc2(nthrmax uint32) *ParFor\n-func parforsetup2(desc *ParFor, nthr, n uint32, ctx *byte, wait bool, body func(*ParFor, uint32))\n-func parfordo(desc *ParFor)\n-func parforiters(desc *ParFor, tid uintptr) (uintptr, uintptr)\n+func newParFor(nthrmax uint32) *ParFor\n+func parForSetup(desc *ParFor, nthr, n uint32, ctx *byte, wait bool, body func(*ParFor, uint32))\n+func parForDo(desc *ParFor)\n+func parForIters(desc *ParFor, tid uintptr) (uintptr, uintptr)\n \n-var NewParFor = parforalloc2\n-var ParForSetup = parforsetup2\n-var ParForDo = parfordo\n+var NewParFor = newParFor\n+var ParForSetup = parForSetup\n+var ParForDo = parForDo\n \n func ParForIters(desc *ParFor, tid uint32) (uint32, uint32) {\n-\tbegin, end := parforiters(desc, uintptr(tid))\n+\tbegin, end := parForIters(desc, uintptr(tid))\n \treturn uint32(begin), uint32(end)\n }\n \n@@ -78,11 +78,13 @@ var TestSchedLocalQueueSteal1 = testSchedLocalQueueSteal\n // var Int32Hash = int32Hash\n // var Int64Hash = int64Hash\n \n-// func GogoBytes() int32\n-\n var hashLoad float64 // declared in hashmap.c\n var HashLoad = &hashLoad\n \n func memclrBytes(b []byte)\n \n var MemclrBytes = memclrBytes\n+\n+// func gogoBytes() int32\n+\n+// var GogoBytes = gogoBytes"}, {"sha": "cce60e1be3b94c6f1ce62226be4c4ea67fb0ffd0", "filename": "libgo/go/runtime/pprof/pprof_test.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpprof%2Fpprof_test.go?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -280,31 +280,31 @@ func TestBlockProfile(t *testing.T) {\n \ttests := [...]TestCase{\n \t\t{\"chan recv\", blockChanRecv, `\n [0-9]+ [0-9]+ @ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+\n-#\t0x[0-9,a-f]+\truntime\\.chanrecv1\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.c:[0-9]+\n+#\t0x[0-9,a-f]+\truntime\\.chanrecv1\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.goc:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.blockChanRecv\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.TestBlockProfile\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n `},\n \t\t{\"chan send\", blockChanSend, `\n [0-9]+ [0-9]+ @ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+\n-#\t0x[0-9,a-f]+\truntime\\.chansend1\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.c:[0-9]+\n+#\t0x[0-9,a-f]+\truntime\\.chansend1\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.goc:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.blockChanSend\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.TestBlockProfile\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n `},\n \t\t{\"chan close\", blockChanClose, `\n [0-9]+ [0-9]+ @ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+\n-#\t0x[0-9,a-f]+\truntime\\.chanrecv1\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.c:[0-9]+\n+#\t0x[0-9,a-f]+\truntime\\.chanrecv1\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.goc:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.blockChanClose\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.TestBlockProfile\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n `},\n \t\t{\"select recv async\", blockSelectRecvAsync, `\n [0-9]+ [0-9]+ @ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+\n-#\t0x[0-9,a-f]+\truntime\\.selectgo\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.c:[0-9]+\n+#\t0x[0-9,a-f]+\truntime\\.selectgo\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.goc:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.blockSelectRecvAsync\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.TestBlockProfile\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n `},\n \t\t{\"select send sync\", blockSelectSendSync, `\n [0-9]+ [0-9]+ @ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+ 0x[0-9,a-f]+\n-#\t0x[0-9,a-f]+\truntime\\.selectgo\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.c:[0-9]+\n+#\t0x[0-9,a-f]+\truntime\\.selectgo\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/chan.goc:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.blockSelectSendSync\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n #\t0x[0-9,a-f]+\truntime/pprof_test\\.TestBlockProfile\\+0x[0-9,a-f]+\t.*/src/pkg/runtime/pprof/pprof_test.go:[0-9]+\n `},"}, {"sha": "b636b01953f005ff012d5365f00f63a55be8049d", "filename": "libgo/merge.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fmerge.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fmerge.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmerge.sh?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -163,7 +163,7 @@ done\n   done\n done\n \n-runtime=\"chan.c cpuprof.c env_posix.c lock_futex.c lock_sema.c mcache.c mcentral.c mfixalloc.c mgc0.c mgc0.h mheap.c msize.c netpoll.goc netpoll_epoll.c netpoll_kqueue.c netpoll_stub.c panic.c print.c proc.c race.h runtime.c runtime.h signal_unix.c signal_unix.h malloc.h malloc.goc mprof.goc parfor.c runtime1.goc sema.goc sigqueue.goc string.goc time.goc\"\n+runtime=\"chan.goc chan.h cpuprof.goc env_posix.c lock_futex.c lfstack.goc lock_sema.c mcache.c mcentral.c mfixalloc.c mgc0.c mgc0.h mheap.c msize.c netpoll.goc netpoll_epoll.c netpoll_kqueue.c netpoll_stub.c panic.c print.c proc.c race.h rdebug.goc runtime.c runtime.h signal_unix.c signal_unix.h malloc.h malloc.goc mprof.goc parfor.c runtime1.goc sema.goc sigqueue.goc string.goc time.goc\"\n for f in $runtime; do\n   merge_c $f $f\n done"}, {"sha": "ebe0493856f4ef6067d5493ced5dd80af65cad63", "filename": "libgo/runtime/chan.goc", "status": "renamed", "additions": 32, "deletions": 267, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fchan.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fchan.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.goc?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -2,87 +2,16 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+package runtime\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"go-type.h\"\n #include \"race.h\"\n #include \"malloc.h\"\n-\n-typedef\tstruct\tWaitQ\tWaitQ;\n-typedef\tstruct\tSudoG\tSudoG;\n-typedef\tstruct\tSelect\tSelect;\n-typedef\tstruct\tScase\tScase;\n-\n-typedef struct\t__go_type_descriptor\tType;\n-typedef struct\t__go_channel_type\tChanType;\n-\n-struct\tSudoG\n-{\n-\tG*\tg;\n-\tuint32*\tselectdone;\n-\tSudoG*\tlink;\n-\tint64\treleasetime;\n-\tbyte*\telem;\t\t// data element\n-};\n-\n-struct\tWaitQ\n-{\n-\tSudoG*\tfirst;\n-\tSudoG*\tlast;\n-};\n-\n-// The garbage collector is assuming that Hchan can only contain pointers into the stack\n-// and cannot contain pointers into the heap.\n-struct\tHchan\n-{\n-\tuintgo\tqcount;\t\t\t// total data in the q\n-\tuintgo\tdataqsiz;\t\t// size of the circular q\n-\tuint16\telemsize;\n-\tuint8\telemalign;\n-\tuint8\tpad;\t\t\t// ensures proper alignment of the buffer that follows Hchan in memory\n-\tbool\tclosed;\n-\tconst Type* elemtype;\t\t// element type\n-\tuintgo\tsendx;\t\t\t// send index\n-\tuintgo\trecvx;\t\t\t// receive index\n-\tWaitQ\trecvq;\t\t\t// list of recv waiters\n-\tWaitQ\tsendq;\t\t\t// list of send waiters\n-\tLock;\n-};\n+#include \"chan.h\"\n \n uint32 runtime_Hchansize = sizeof(Hchan);\n \n-// Buffer follows Hchan immediately in memory.\n-// chanbuf(c, i) is pointer to the i'th slot in the buffer.\n-#define chanbuf(c, i) ((byte*)((c)+1)+(uintptr)(c)->elemsize*(i))\n-\n-enum\n-{\n-\tdebug = 0,\n-\n-\t// Scase.kind\n-\tCaseRecv,\n-\tCaseSend,\n-\tCaseDefault,\n-};\n-\n-struct\tScase\n-{\n-\tSudoG\tsg;\t\t\t// must be first member (cast to Scase)\n-\tHchan*\tchan;\t\t\t// chan\n-\tuint16\tkind;\n-\tuint16\tindex;\t\t\t// index to return\n-\tbool*\treceivedp;\t\t// pointer to received bool (recv2)\n-};\n-\n-struct\tSelect\n-{\n-\tuint16\ttcase;\t\t\t// total count of scase[]\n-\tuint16\tncase;\t\t\t// currently filled scase[]\n-\tuint16*\tpollorder;\t\t// case poll order\n-\tHchan**\tlockorder;\t\t// channel lock order\n-\tScase\tscase[1];\t\t// one per case (in order of appearance)\n-};\n-\n static\tvoid\tdequeueg(WaitQ*);\n static\tSudoG*\tdequeue(WaitQ*);\n static\tvoid\tenqueue(WaitQ*, SudoG*);\n@@ -120,21 +49,10 @@ makechan(ChanType *t, int64 hint)\n \treturn c;\n }\n \n-// For reflect\n-//\tfunc makechan(typ *ChanType, size uint64) (chan)\n-Hchan *reflect_makechan(ChanType *, uint64)\n-  __asm__ (GOSYM_PREFIX \"reflect.makechan\");\n-\n-Hchan *\n-reflect_makechan(ChanType *t, uint64 size)\n-{\n-\tHchan *c;\n-\n+func reflect.makechan(t *ChanType, size uint64) (c *Hchan) {\n \tc = makechan(t, size);\n-\treturn c;\n }\n \n-// makechan(t *ChanType, hint int64) (hchan *chan any);\n Hchan*\n __go_new_channel(ChanType *t, uintptr hint)\n {\n@@ -487,8 +405,6 @@ runtime_chanrecv2(ChanType *t, Hchan* c, byte* v)\n \treturn received;\n }\n \n-// func selectnbsend(c chan any, elem *any) bool\n-//\n // compiler implements\n //\n //\tselect {\n@@ -506,17 +422,10 @@ runtime_chanrecv2(ChanType *t, Hchan* c, byte* v)\n //\t\t... bar\n //\t}\n //\n-_Bool\n-runtime_selectnbsend(ChanType *t, Hchan *c, byte *val)\n-{\n-\tbool res;\n-\n-\tres = chansend(t, c, val, false, runtime_getcallerpc(&t));\n-\treturn (_Bool)res;\n+func selectnbsend(t *ChanType, c *Hchan, elem *byte) (selected bool) {\n+\tselected = chansend(t, c, elem, false, runtime_getcallerpc(&t));\n }\n \n-// func selectnbrecv(elem *any, c chan any) bool\n-//\n // compiler implements\n //\n //\tselect {\n@@ -534,17 +443,10 @@ runtime_selectnbsend(ChanType *t, Hchan *c, byte *val)\n //\t\t... bar\n //\t}\n //\n-_Bool\n-runtime_selectnbrecv(ChanType *t, byte *v, Hchan *c)\n-{\n-\tbool selected;\n-\n-\tselected = chanrecv(t, c, v, false, nil);\n-\treturn (_Bool)selected;\n+func selectnbrecv(t *ChanType, elem *byte, c *Hchan) (selected bool) {\n+\tselected = chanrecv(t, c, elem, false, nil);\n }\n \n-// func selectnbrecv2(elem *any, ok *bool, c chan any) bool\n-//\n // compiler implements\n //\n //\tselect {\n@@ -562,76 +464,27 @@ runtime_selectnbrecv(ChanType *t, byte *v, Hchan *c)\n //\t\t... bar\n //\t}\n //\n-_Bool\n-runtime_selectnbrecv2(ChanType *t, byte *v, _Bool *received, Hchan *c)\n-{\n-\tbool selected;\n+func selectnbrecv2(t *ChanType, elem *byte, received *bool, c *Hchan) (selected bool) {\n \tbool r;\n \n-\tr = false;\n-\tselected = chanrecv(t, c, v, false, received == nil ? nil : &r);\n+\tselected = chanrecv(t, c, elem, false, received == nil ? nil : &r);\n \tif(received != nil)\n \t\t*received = r;\n-\treturn selected;\n }\n \n-// For reflect:\n-//\tfunc chansend(c chan, val *any, nb bool) (selected bool)\n-// where val points to the data to be sent.\n-//\n-// The \"uintptr selected\" is really \"bool selected\" but saying\n-// uintptr gets us the right alignment for the output parameter block.\n-\n-_Bool reflect_chansend(ChanType *, Hchan *, byte *, _Bool)\n-  __asm__ (GOSYM_PREFIX \"reflect.chansend\");\n-\n-_Bool\n-reflect_chansend(ChanType *t, Hchan *c, byte *val, _Bool nb)\n-{\n-\tbool selected;\n-\n-\tselected = chansend(t, c, val, !nb, runtime_getcallerpc(&t));\n-\treturn (_Bool)selected;\n+func reflect.chansend(t *ChanType, c *Hchan, elem *byte, nb bool) (selected bool) {\n+\tselected = chansend(t, c, elem, !nb, runtime_getcallerpc(&t));\n }\n \n-// For reflect:\n-//\tfunc chanrecv(c chan, nb bool, val *any) (selected, received bool)\n-// where val points to a data area that will be filled in with the\n-// received value.  val must have the size and type of the channel element type.\n-\n-struct chanrecv_ret\n-{\n-\t_Bool selected;\n-\t_Bool received;\n-};\n-\n-struct chanrecv_ret reflect_chanrecv(ChanType *, Hchan *, _Bool, byte *val)\n-  __asm__ (GOSYM_PREFIX \"reflect.chanrecv\");\n-\n-struct chanrecv_ret\n-reflect_chanrecv(ChanType *t, Hchan *c, _Bool nb, byte *val)\n-{\n-\tstruct chanrecv_ret ret;\n-\tbool selected;\n-\tbool received;\n-\n+func reflect.chanrecv(t *ChanType, c *Hchan, nb bool, elem *byte) (selected bool, received bool) {\n \treceived = false;\n-\tselected = chanrecv(t, c, val, !nb, &received);\n-\tret.selected = (_Bool)selected;\n-\tret.received = (_Bool)received;\n-\treturn ret;\n+\tselected = chanrecv(t, c, elem, !nb, &received);\n }\n \n static Select* newselect(int32);\n \n-// newselect(size uint32) (sel *byte);\n-\n-void* runtime_newselect(int32) __asm__ (GOSYM_PREFIX \"runtime.newselect\");\n-\n-void*\n-runtime_newselect(int32 size)\n-{\n-\treturn (void*)newselect(size);\n+func newselect(size int32) (sel *byte) {\n+ \tsel = (byte*)newselect(size);\n }\n \n static Select*\n@@ -666,19 +519,10 @@ newselect(int32 size)\n // cut in half to give stack a chance to split\n static void selectsend(Select *sel, Hchan *c, int index, void *elem);\n \n-// selectsend(sel *byte, hchan *chan any, elem *any) (selected bool);\n-\n-void runtime_selectsend(Select *, Hchan *, void *, int32)\n-  __asm__ (GOSYM_PREFIX \"runtime.selectsend\");\n-\n-void\n-runtime_selectsend(Select *sel, Hchan *c, void *elem, int32 index)\n-{\n+func selectsend(sel *Select, c *Hchan, elem *byte, index int32) {\n \t// nil cases do not compete\n-\tif(c == nil)\n-\t\treturn;\n-\n-\tselectsend(sel, c, index, elem);\n+\tif(c != nil)\n+\t\tselectsend(sel, c, index, elem);\n }\n \n static void\n@@ -706,34 +550,16 @@ selectsend(Select *sel, Hchan *c, int index, void *elem)\n // cut in half to give stack a chance to split\n static void selectrecv(Select *sel, Hchan *c, int index, void *elem, bool*);\n \n-// selectrecv(sel *byte, hchan *chan any, elem *any) (selected bool);\n-\n-void runtime_selectrecv(Select *, Hchan *, void *, int32)\n-  __asm__ (GOSYM_PREFIX \"runtime.selectrecv\");\n-\n-void\n-runtime_selectrecv(Select *sel, Hchan *c, void *elem, int32 index)\n-{\n+func selectrecv(sel *Select, c *Hchan, elem *byte, index int32) {\n \t// nil cases do not compete\n-\tif(c == nil)\n-\t\treturn;\n-\n-\tselectrecv(sel, c, index, elem, nil);\n+\tif(c != nil)\n+\t\tselectrecv(sel, c, index, elem, nil);\n }\n \n-// selectrecv2(sel *byte, hchan *chan any, elem *any, received *bool) (selected bool);\n-\n-void runtime_selectrecv2(Select *, Hchan *, void *, bool *, int32)\n-  __asm__ (GOSYM_PREFIX \"runtime.selectrecv2\");\n-\n-void\n-runtime_selectrecv2(Select *sel, Hchan *c, void *elem, bool *received, int32 index)\n-{\n+func selectrecv2(sel *Select, c *Hchan, elem *byte, received *bool, index int32) {\n \t// nil cases do not compete\n-\tif(c == nil)\n-\t\treturn;\n-\n-\tselectrecv(sel, c, index, elem, received);\n+\tif(c != nil)\n+\t\tselectrecv(sel, c, index, elem, received);\n }\n \n static void\n@@ -762,13 +588,7 @@ selectrecv(Select *sel, Hchan *c, int index, void *elem, bool *received)\n // cut in half to give stack a chance to split\n static void selectdefault(Select*, int);\n \n-// selectdefault(sel *byte) (selected bool);\n-\n-void runtime_selectdefault(Select *, int32) __asm__ (GOSYM_PREFIX \"runtime.selectdefault\");\n-\n-void\n-runtime_selectdefault(Select *sel, int32 index)\n-{\n+func selectdefault(sel *Select, index int32) {\n \tselectdefault(sel, index);\n }\n \n@@ -844,21 +664,15 @@ selparkcommit(G *gp, void *sel)\n \treturn true;\n }\n \n-void\n-runtime_block(void)\n-{\n+func block() {\n \truntime_park(nil, nil, \"select (no cases)\");\t// forever\n }\n \n static int selectgo(Select**);\n \n // selectgo(sel *byte);\n \n-int runtime_selectgo(Select *) __asm__ (GOSYM_PREFIX \"runtime.selectgo\");\n-\n-int\n-runtime_selectgo(Select *sel)\n-{\n+func selectgo(sel *Select) (ret int32) {\n \treturn selectgo(&sel);\n }\n \n@@ -1196,22 +1010,7 @@ enum SelectDir {\n \tSelectDefault,\n };\n \n-// func rselect(cases []runtimeSelect) (chosen int, recvOK bool)\n-\n-struct rselect_ret {\n-\tintgo chosen;\n-\t_Bool recvOK;\n-};\n-\n-struct rselect_ret reflect_rselect(Slice)\n-     __asm__ (GOSYM_PREFIX \"reflect.rselect\");\n-\n-struct rselect_ret\n-reflect_rselect(Slice cases)\n-{\n-\tstruct rselect_ret ret;\n-\tintgo chosen;\n-\tbool recvOK;\n+func reflect.rselect(cases Slice) (chosen int, recvOK bool) {\n \tint32 i;\n \tSelect *sel;\n \truntimeSelect* rcase, *rc;\n@@ -1242,29 +1041,15 @@ reflect_rselect(Slice cases)\n \t}\n \n \tchosen = (intgo)(uintptr)selectgo(&sel);\n-\n-\tret.chosen = chosen;\n-\tret.recvOK = (_Bool)recvOK;\n-\treturn ret;\n }\n \n static void closechan(Hchan *c, void *pc);\n \n-// closechan(sel *byte);\n-void\n-runtime_closechan(Hchan *c)\n-{\n+func closechan(c *Hchan) {\n \tclosechan(c, runtime_getcallerpc(&c));\n }\n \n-// For reflect\n-//\tfunc chanclose(c chan)\n-\n-void reflect_chanclose(Hchan *) __asm__ (GOSYM_PREFIX \"reflect.chanclose\");\n-\n-void\n-reflect_chanclose(Hchan *c)\n-{\n+func reflect.chanclose(c *Hchan) {\n \tclosechan(c, runtime_getcallerpc(&c));\n }\n \n@@ -1326,21 +1111,11 @@ __go_builtin_close(Hchan *c)\n \truntime_closechan(c);\n }\n \n-// For reflect\n-//\tfunc chanlen(c chan) (len int)\n-\n-intgo reflect_chanlen(Hchan *) __asm__ (GOSYM_PREFIX \"reflect.chanlen\");\n-\n-intgo\n-reflect_chanlen(Hchan *c)\n-{\n-\tintgo len;\n-\n+func reflect.chanlen(c *Hchan) (len int) {\n \tif(c == nil)\n \t\tlen = 0;\n \telse\n \t\tlen = c->qcount;\n-\treturn len;\n }\n \n intgo\n@@ -1349,21 +1124,11 @@ __go_chan_len(Hchan *c)\n \treturn reflect_chanlen(c);\n }\n \n-// For reflect\n-//\tfunc chancap(c chan) int\n-\n-intgo reflect_chancap(Hchan *) __asm__ (GOSYM_PREFIX \"reflect.chancap\");\n-\n-intgo\n-reflect_chancap(Hchan *c)\n-{\n-\tintgo cap;\n-\n+func reflect.chancap(c *Hchan) (cap int) {\n \tif(c == nil)\n \t\tcap = 0;\n \telse\n \t\tcap = c->dataqsiz;\n-\treturn cap;\n }\n \n intgo", "previous_filename": "libgo/runtime/chan.c"}, {"sha": "70b0b9d90903cc1b8a84dda6ee3bcd9ed23ba78a", "filename": "libgo/runtime/chan.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fchan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fchan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.h?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+typedef\tstruct\tWaitQ\tWaitQ;\n+typedef\tstruct\tSudoG\tSudoG;\n+typedef\tstruct\tSelect\tSelect;\n+typedef\tstruct\tScase\tScase;\n+\n+typedef struct\t__go_type_descriptor\tType;\n+typedef struct\t__go_channel_type\tChanType;\n+\n+struct\tSudoG\n+{\n+\tG*\tg;\n+\tuint32*\tselectdone;\n+\tSudoG*\tlink;\n+\tint64\treleasetime;\n+\tbyte*\telem;\t\t// data element\n+};\n+\n+struct\tWaitQ\n+{\n+\tSudoG*\tfirst;\n+\tSudoG*\tlast;\n+};\n+\n+// The garbage collector is assuming that Hchan can only contain pointers into the stack\n+// and cannot contain pointers into the heap.\n+struct\tHchan\n+{\n+\tuintgo\tqcount;\t\t\t// total data in the q\n+\tuintgo\tdataqsiz;\t\t// size of the circular q\n+\tuint16\telemsize;\n+\tuint16\tpad;\t\t\t// ensures proper alignment of the buffer that follows Hchan in memory\n+\tbool\tclosed;\n+\tconst Type* elemtype;\t\t// element type\n+\tuintgo\tsendx;\t\t\t// send index\n+\tuintgo\trecvx;\t\t\t// receive index\n+\tWaitQ\trecvq;\t\t\t// list of recv waiters\n+\tWaitQ\tsendq;\t\t\t// list of send waiters\n+\tLock;\n+};\n+\n+// Buffer follows Hchan immediately in memory.\n+// chanbuf(c, i) is pointer to the i'th slot in the buffer.\n+#define chanbuf(c, i) ((byte*)((c)+1)+(uintptr)(c)->elemsize*(i))\n+\n+enum\n+{\n+\tdebug = 0,\n+\n+\t// Scase.kind\n+\tCaseRecv,\n+\tCaseSend,\n+\tCaseDefault,\n+};\n+\n+struct\tScase\n+{\n+\tSudoG\tsg;\t\t\t// must be first member (cast to Scase)\n+\tHchan*\tchan;\t\t\t// chan\n+\tuint16\tkind;\n+\tuint16\tindex;\t\t\t// index to return\n+\tbool*\treceivedp;\t\t// pointer to received bool (recv2)\n+};\n+\n+struct\tSelect\n+{\n+\tuint16\ttcase;\t\t\t// total count of scase[]\n+\tuint16\tncase;\t\t\t// currently filled scase[]\n+\tuint16*\tpollorder;\t\t// case poll order\n+\tHchan**\tlockorder;\t\t// channel lock order\n+\tScase\tscase[1];\t\t// one per case (in order of appearance)\n+};"}, {"sha": "28ae9bbfa184707041ed2497d7d07f6a8da46f34", "filename": "libgo/runtime/cpuprof.goc", "status": "renamed", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fcpuprof.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fcpuprof.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fcpuprof.goc?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -48,6 +48,7 @@\n // in order to let the log closer set the high bit to indicate \"EOF\" safely\n // in the situation when normally the goroutine \"owns\" handoff.\n \n+package runtime\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n@@ -435,13 +436,8 @@ getprofile(Profile *p)\n \treturn ret;  // set to nil at top of function\n }\n \n-extern Slice runtime_CPUProfile(void)\n-     __asm__ (GOSYM_PREFIX \"runtime.CPUProfile\");\n-\n // CPUProfile returns the next cpu profile block as a []byte.\n // The user documentation is in debug.go.\n-Slice\n-runtime_CPUProfile(void)\n-{\n-\treturn getprofile(prof);\n+func CPUProfile() (ret Slice) {\n+\tret = getprofile(prof);\n }", "previous_filename": "libgo/runtime/cpuprof.c"}, {"sha": "2b7baa4df9c1c0a6013227d06674646adbcaf185", "filename": "libgo/runtime/go-cgo.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fgo-cgo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fgo-cgo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-cgo.c?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -177,19 +177,3 @@ _cgo_panic (const char *p)\n \n   __go_panic (e);\n }\n-\n-/* Return the number of CGO calls.  */\n-\n-int64 runtime_NumCgoCall (void) __asm__ (GOSYM_PREFIX \"runtime.NumCgoCall\");\n-\n-int64\n-runtime_NumCgoCall (void)\n-{\n-  int64 ret;\n-  M* m;\n-\n-  ret = 0;\n-  for (m = runtime_atomicloadp (&runtime_allm); m != NULL; m = m->alllink)\n-    ret += m->ncgocall;\n-  return ret;\n-}"}, {"sha": "1b52d44043837bf0218d95676c3a8dd0702b4ac5", "filename": "libgo/runtime/go-getgoroot.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec/libgo%2Fruntime%2Fgo-getgoroot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec/libgo%2Fruntime%2Fgo-getgoroot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-getgoroot.c?ref=ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec", "patch": "@@ -1,26 +0,0 @@\n-/* go-getgoroot.c -- getgoroot function for runtime package.\n-\n-   Copyright 2010 The Go Authors. All rights reserved.\n-   Use of this source code is governed by a BSD-style\n-   license that can be found in the LICENSE file.  */\n-\n-#include <stdlib.h>\n-\n-#include \"runtime.h\"\n-\n-String getgoroot (void) __asm__ (GOSYM_PREFIX \"runtime.getgoroot\");\n-\n-String\n-getgoroot ()\n-{\n-  const char *p;\n-  String ret;\n-\n-  p = getenv (\"GOROOT\");\n-  ret.str = (const byte *) p;\n-  if (ret.str == NULL)\n-    ret.len = 0;\n-  else\n-    ret.len = __builtin_strlen (p);\n-  return ret;\n-}"}, {"sha": "0a90e84bc1ee72b8bb93cc13eb8ec452a7d920ec", "filename": "libgo/runtime/go-typestring.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec/libgo%2Fruntime%2Fgo-typestring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec/libgo%2Fruntime%2Fgo-typestring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-typestring.c?ref=ca76ae5c35f58f0ea40f656d3e555f2c740cf4ec", "patch": "@@ -1,17 +0,0 @@\n-/* go-typestring.c -- the runtime.typestring function.\n-\n-   Copyright 2010 The Go Authors. All rights reserved.\n-   Use of this source code is governed by a BSD-style\n-   license that can be found in the LICENSE file.  */\n-\n-#include \"runtime.h\"\n-#include \"interface.h\"\n-#include \"go-type.h\"\n-\n-String typestring(struct __go_empty_interface) __asm__ (GOSYM_PREFIX \"runtime.typestring\");\n-\n-String\n-typestring (struct __go_empty_interface e)\n-{\n-  return *e.__type_descriptor->__reflection;\n-}"}, {"sha": "68281c36bca4ad453400c6ac092fb60c581a5898", "filename": "libgo/runtime/goc2c.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fgoc2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fgoc2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgoc2c.c?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -617,9 +617,22 @@ process_file(void)\n \tpackage = read_package();\n \tread_preprocessor_lines();\n \twhile (read_func_header(&name, &params, &rets)) {\n-\t\twrite_func_header(package, name, params, rets);\n+\t\tchar *p;\n+\t\tchar *pkg;\n+\t\tchar *nm;\n+\n+\t\tp = strchr(name, '.');\n+\t\tif (p == NULL) {\n+\t\t\tpkg = package;\n+\t\t\tnm = name;\n+\t\t} else {\n+\t\t\tpkg = name;\n+\t\t\tnm = p + 1;\n+\t\t\t*p = '\\0';\n+\t\t}\n+\t\twrite_func_header(pkg, nm, params, rets);\n \t\tcopy_body();\n-\t\twrite_func_trailer(package, name, rets);\n+\t\twrite_func_trailer(pkg, nm, rets);\n \t\tfree(name);\n \t\tfree_params(params);\n \t\tfree_params(rets);"}, {"sha": "060a0cc5941be71d295c8fc7ba39e407618fa6fa", "filename": "libgo/runtime/lfstack.goc", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Flfstack.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Flfstack.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Flfstack.goc?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -4,6 +4,7 @@\n \n // Lock-free stack.\n \n+package runtime\n #include \"runtime.h\"\n #include \"arch.h\"\n \n@@ -69,11 +70,10 @@ runtime_lfstackpop(uint64 *head)\n \t}\n }\n \n-LFNode* runtime_lfstackpop2(uint64*)\n-  __asm__ (GOSYM_PREFIX \"runtime.lfstackpop2\");\n+func lfstackpush_go(head *uint64, node *LFNode) {\n+\truntime_lfstackpush(head, node);\n+}\n \n-LFNode*\n-runtime_lfstackpop2(uint64 *head)\n-{\n-\treturn runtime_lfstackpop(head);\n+func lfstackpop_go(head *uint64) (node *LFNode) {\n+\tnode = runtime_lfstackpop(head);\n }", "previous_filename": "libgo/runtime/lfstack.c"}, {"sha": "9c8b8c1c74cd7a2cf7525f10306ce0ea1455089c", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -905,10 +905,8 @@ runtime_mal(uintptr n)\n \treturn runtime_mallocgc(n, 0, 0);\n }\n \n-void *\n-runtime_new(const Type *typ)\n-{\n-\treturn runtime_mallocgc(typ->__size, (uintptr)typ | TypeInfo_SingleObject, typ->kind&KindNoPointers ? FlagNoScan : 0);\n+func new(typ *Type) (ret *uint8) {\n+\tret = runtime_mallocgc(typ->__size, (uintptr)typ | TypeInfo_SingleObject, typ->kind&KindNoPointers ? FlagNoScan : 0);\n }\n \n static void*"}, {"sha": "30fbb64c27523d85cf9c2990012c903dbf95962d", "filename": "libgo/runtime/malloc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.h?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -586,6 +586,7 @@ void\truntime_gc_m_ptr(Eface*);\n void\truntime_gc_itab_ptr(Eface*);\n \n void\truntime_memorydump(void);\n+int32\truntime_setgcpercent(int32);\n \n void\truntime_proc_scan(struct Workbuf**, void (*)(struct Workbuf**, Obj));\n void\truntime_time_scan(struct Workbuf**, void (*)(struct Workbuf**, Obj));"}, {"sha": "e67c5b983fb9b6ace32858ce121df43892603bc3", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -1174,6 +1174,7 @@ scanblock(Workbuf *wbuf, bool keepworking)\n #endif\n \n \t\tdefault:\n+\t\t\truntime_printf(\"runtime: invalid GC instruction %p at %p\\n\", pc[0], pc);\n \t\t\truntime_throw(\"scanblock: invalid GC instruction\");\n \t\t\treturn;\n \t\t}\n@@ -2449,13 +2450,9 @@ runtime_debug_readGCStats(Slice *pauses)\n \tpauses->__count = n+3;\n }\n \n-intgo runtime_debug_setGCPercent(intgo)\n-  __asm__(\"runtime_debug.setGCPercent\");\n-\n-intgo\n-runtime_debug_setGCPercent(intgo in)\n-{\n-\tintgo out;\n+int32\n+runtime_setgcpercent(int32 in) {\n+\tint32 out;\n \n \truntime_lock(&runtime_mheap);\n \tif(gcpercent == GcpercentUnknown)"}, {"sha": "386faea512cfbec0c6189bc202d246be94b943fe", "filename": "libgo/runtime/parfor.c", "status": "modified", "additions": 5, "deletions": 42, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fparfor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fparfor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fparfor.c?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -33,18 +33,6 @@ runtime_parforalloc(uint32 nthrmax)\n \treturn desc;\n }\n \n-// For testing from Go\n-// func parforalloc2(nthrmax uint32) *ParFor\n-\n-ParFor *runtime_parforalloc2(uint32)\n-   __asm__ (GOSYM_PREFIX \"runtime.parforalloc2\");\n-\n-ParFor *\n-runtime_parforalloc2(uint32 nthrmax)\n-{\n-\treturn runtime_parforalloc(nthrmax);\n-}\n-\n void\n runtime_parforsetup(ParFor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, void (*body)(ParFor*, uint32))\n {\n@@ -78,18 +66,6 @@ runtime_parforsetup(ParFor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, v\n \t}\n }\n \n-// For testing from Go\n-// func parforsetup2(desc *ParFor, nthr, n uint32, ctx *byte, wait bool, body func(*ParFor, uint32))\n-\n-void runtime_parforsetup2(ParFor *, uint32, uint32, void *, bool, void *)\n-  __asm__ (GOSYM_PREFIX \"runtime.parforsetup2\");\n-\n-void\n-runtime_parforsetup2(ParFor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, void *body)\n-{\n-\truntime_parforsetup(desc, nthr, n, ctx, wait, *(void(**)(ParFor*, uint32))body);\n-}\n-\n void\n runtime_parfordo(ParFor *desc)\n {\n@@ -214,23 +190,10 @@ runtime_parfordo(ParFor *desc)\n \tme->nsleep = 0;\n }\n \n-// For testing from Go\n-// func parforiters(desc *ParFor, tid uintptr) (uintptr, uintptr)\n-\n-struct parforiters_ret {\n-  uintptr start;\n-  uintptr end;\n-};\n-\n-struct parforiters_ret runtime_parforiters(ParFor *, uintptr)\n-  __asm__ (GOSYM_PREFIX \"runtime.parforiters\");\n-\n-struct parforiters_ret\n-runtime_parforiters(ParFor *desc, uintptr tid)\n+// For testing from Go.\n+void\n+runtime_parforiters(ParFor *desc, uintptr tid, uintptr *start, uintptr *end)\n {\n-\tstruct parforiters_ret ret;\n-\n-\tret.start = (uint32)desc->thr[tid].pos;\n-\tret.end = (uint32)(desc->thr[tid].pos>>32);\n-\treturn ret;\n+\t*start = (uint32)desc->thr[tid].pos;\n+\t*end = (uint32)(desc->thr[tid].pos>>32);\n }"}, {"sha": "f602e9a671662e6e12b5540c812260a784d98bb0", "filename": "libgo/runtime/print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fprint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fprint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fprint.c?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -320,7 +320,7 @@ runtime_printhex(uint64 v)\n void\n runtime_printpointer(void *p)\n {\n-\truntime_printhex((uint64)(uintptr)p);\n+\truntime_printhex((uintptr)p);\n }\n \n void"}, {"sha": "8e32f78a2a202468ef4b927b258b9a154fca83d0", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 3, "deletions": 53, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -2456,26 +2456,6 @@ runtime_lockedOSThread(void)\n \treturn g->lockedm != nil && m->lockedg != nil;\n }\n \n-// for testing of callbacks\n-\n-_Bool runtime_golockedOSThread(void)\n-  __asm__ (GOSYM_PREFIX \"runtime.golockedOSThread\");\n-\n-_Bool\n-runtime_golockedOSThread(void)\n-{\n-\treturn runtime_lockedOSThread();\n-}\n-\n-intgo runtime_NumGoroutine (void)\n-  __asm__ (GOSYM_PREFIX \"runtime.NumGoroutine\");\n-\n-intgo\n-runtime_NumGoroutine()\n-{\n-\treturn runtime_gcount();\n-}\n-\n int32\n runtime_gcount(void)\n {\n@@ -3321,13 +3301,10 @@ runtime_testSchedLocalQueueSteal(void)\n \t}\n }\n \n-intgo runtime_debug_setMaxThreads(intgo)\n-     __asm__(GOSYM_PREFIX \"runtime_debug.setMaxThreads\");\n-\n-intgo\n-runtime_debug_setMaxThreads(intgo in)\n+int32\n+runtime_setmaxthreads(int32 in)\n {\n-\tintgo out;\n+\tint32 out;\n \n \truntime_lock(&runtime_sched);\n \tout = runtime_sched.maxmcount;\n@@ -3370,30 +3347,3 @@ runtime_gcwaiting(void)\n {\n \treturn runtime_sched.gcwaiting;\n }\n-\n-// func runtime_procPin() int\n-\n-intgo sync_runtime_procPin(void)\n-  __asm__(GOSYM_PREFIX \"sync.runtime_procPin\");\n-\n-intgo\n-sync_runtime_procPin()\n-{\n-\tM *mp;\n-\n-\tmp = m;\n-\t// Disable preemption.\n-\tmp->locks++;\n-\treturn mp->p->id;\n-}\n-\n-// func runtime_procUnpin()\n-\n-void sync_runtime_procUnpin(void)\n-  __asm__ (GOSYM_PREFIX \"sync.runtime_procUnpin\");\n-\n-void\n-sync_runtime_procUnpin(void)\n-{\n-\tm->locks--;\n-}"}, {"sha": "230e8fa9e9e636eaa3c9f5b6ebaadc203b9314e2", "filename": "libgo/runtime/rdebug.goc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Frdebug.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Frdebug.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Frdebug.goc?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package runtime_debug\n+#include \"runtime.h\"\n+#include \"arch.h\"\n+#include \"malloc.h\"\n+\n+func setMaxStack(in int) (out int) {\n+\tout = runtime_maxstacksize;\n+\truntime_maxstacksize = in;\n+}\n+\n+func setGCPercent(in int) (out int) {\n+\tout = runtime_setgcpercent(in);\n+}\n+\n+func setMaxThreads(in int) (out int) {\n+\tout = runtime_setmaxthreads(in);\n+}"}, {"sha": "1678a45d40a5ba38eb1af7f6a085c6970c2eb296", "filename": "libgo/runtime/runtime.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -9,7 +9,6 @@\n \n #include \"runtime.h\"\n #include \"array.h\"\n-#include \"go-panic.h\"\n \n // The GOTRACEBACK environment variable controls the\n // behavior of a Go program that is crashing and exiting.\n@@ -221,15 +220,6 @@ runtime_tickspersecond(void)\n \treturn res;\n }\n \n-int64 runtime_pprof_runtime_cyclesPerSecond(void)\n-     __asm__ (GOSYM_PREFIX \"runtime_pprof.runtime_cyclesPerSecond\");\n-\n-int64\n-runtime_pprof_runtime_cyclesPerSecond(void)\n-{\n-\treturn runtime_tickspersecond();\n-}\n-\n // Called to initialize a new m (including the bootstrap m).\n // Called on the parent thread (main thread in case of bootstrap), can allocate memory.\n void\n@@ -341,19 +331,6 @@ runtime_timediv(int64 v, int32 div, int32 *rem)\n \n uintptr runtime_maxstacksize = 1<<20; // enough until runtime.main sets it for real\n \n-intgo runtime_debug_setMaxStack(intgo)\n-\t__asm__ (GOSYM_PREFIX \"runtime_debug.setMaxStack\");\n-\n-intgo\n-runtime_debug_setMaxStack(intgo in)\n-{\n-\tintgo out;\n-\n-\tout = runtime_maxstacksize;\n-\truntime_maxstacksize = in;\n-\treturn out;\n-}\n-\n void memclrBytes(Slice)\n      __asm__ (GOSYM_PREFIX \"runtime.memclrBytes\");\n "}, {"sha": "6bd53a852b40709d58cca59fbd94cb72b7a326ae", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -455,7 +455,7 @@ extern bool runtime_precisestack;\n #define\tnelem(x)\t(sizeof(x)/sizeof((x)[0]))\n #define\tnil\t\t((void*)0)\n #define USED(v)\t\t((void) v)\n-#define\tROUND(x, n)\t(((x)+(n)-1)&~((n)-1)) /* all-caps to mark as macro: it evaluates n twice */\n+#define\tROUND(x, n)\t(((x)+(n)-1)&~(uintptr)((n)-1)) /* all-caps to mark as macro: it evaluates n twice */\n \n byte*\truntime_startup_random_data;\n uint32\truntime_startup_random_data_len;\n@@ -491,6 +491,7 @@ extern\tint8*\truntime_goos;\n extern\tint32\truntime_ncpu;\n extern \tvoid\t(*runtime_sysargs)(int32, uint8**);\n extern\tDebugVars\truntime_debug;\n+extern\tuintptr\truntime_maxstacksize;\n \n /*\n  * common functions and data\n@@ -501,9 +502,6 @@ intgo\truntime_findnull(const byte*);\n intgo\truntime_findnullw(const uint16*);\n void\truntime_dump(byte*, int32);\n \n-/*\n- * very low level c-called\n- */\n void\truntime_gogo(G*);\n struct __go_func_type;\n void\truntime_args(int32, byte**);\n@@ -618,6 +616,7 @@ void\truntime_crash(void);\n void\truntime_parsedebugvars(void);\n void\t_rt0_go(void);\n void*\truntime_funcdata(Func*, int32);\n+int32\truntime_setmaxthreads(int32);\n \n void\truntime_stoptheworld(void);\n void\truntime_starttheworld(void);\n@@ -690,7 +689,8 @@ LFNode*\truntime_lfstackpop(uint64 *head);\n  */\n ParFor*\truntime_parforalloc(uint32 nthrmax);\n void\truntime_parforsetup(ParFor *desc, uint32 nthr, uint32 n, void *ctx, bool wait, void (*body)(ParFor*, uint32));\n-void\truntime_parfordo(ParFor *desc) __asm__ (GOSYM_PREFIX \"runtime.parfordo\");\n+void\truntime_parfordo(ParFor *desc);\n+void\truntime_parforiters(ParFor*, uintptr, uintptr*, uintptr*);\n \n /*\n  * low level C-called\n@@ -762,6 +762,7 @@ void\truntime_procyield(uint32);\n void\truntime_osyield(void);\n void\truntime_lockOSThread(void);\n void\truntime_unlockOSThread(void);\n+bool\truntime_lockedOSThread(void);\n \n bool\truntime_showframe(String, bool);\n void\truntime_printcreatedby(G*);"}, {"sha": "e643965fda50086fb913a1067be53e0de4a54c18", "filename": "libgo/runtime/runtime1.goc", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fruntime1.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fruntime1.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime1.goc?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -4,6 +4,8 @@\n \n package runtime\n #include \"runtime.h\"\n+#include \"arch.h\"\n+#include \"go-type.h\"\n \n func GOMAXPROCS(n int) (ret int) {\n \tret = runtime_gomaxprocsfunc(n);\n@@ -12,3 +14,63 @@ func GOMAXPROCS(n int) (ret int) {\n func NumCPU() (ret int) {\n \tret = runtime_ncpu;\n }\n+\n+func NumCgoCall() (ret int64) {\n+\tM *mp;\n+\n+\tret = 0;\n+\tfor(mp=runtime_atomicloadp(&runtime_allm); mp; mp=mp->alllink)\n+\t\tret += mp->ncgocall;\n+}\n+\n+func newParFor(nthrmax uint32) (desc *ParFor) {\n+\tdesc = runtime_parforalloc(nthrmax);\n+}\n+\n+func parForSetup(desc *ParFor, nthr uint32, n uint32, ctx *byte, wait bool, body *byte) {\n+\truntime_parforsetup(desc, nthr, n, ctx, wait, *(void(**)(ParFor*, uint32))body);\n+}\n+\n+func parForDo(desc *ParFor) {\n+\truntime_parfordo(desc);\n+}\n+\n+func parForIters(desc *ParFor, tid uintptr) (start uintptr, end uintptr) {\n+\truntime_parforiters(desc, tid, &start, &end);\n+}\n+\n+func typestring(e Eface) (s String) {\n+\ts = *e.__type_descriptor->__reflection;\n+}\n+\n+func golockedOSThread() (ret bool) {\n+\tret = runtime_lockedOSThread();\n+}\n+\n+func NumGoroutine() (ret int) {\n+\tret = runtime_gcount();\n+}\n+\n+func getgoroot() (out String) {\n+\tconst byte *p;\n+\n+\tp = runtime_getenv(\"GOROOT\");\n+\tout = runtime_gostringnocopy(p);\n+}\n+\n+func runtime_pprof.runtime_cyclesPerSecond() (res int64) {\n+\tres = runtime_tickspersecond();\n+}\n+\n+func sync.runtime_procPin() (p int) {\n+\tM *mp;\n+\n+\tmp = runtime_m();\n+\t// Disable preemption.\n+\tmp->locks++;\n+\tp = mp->p->id;\n+}\n+\n+func sync.runtime_procUnpin() {\n+\truntime_m()->locks--;\n+}"}, {"sha": "f656318d15cb6dbfa98c08e25cc121dbd9c558cc", "filename": "libgo/runtime/string.goc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fstring.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa39ad859e59a5ad5796e522a4842717b2f6e0c/libgo%2Fruntime%2Fstring.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fstring.goc?ref=2fa39ad859e59a5ad5796e522a4842717b2f6e0c", "patch": "@@ -73,13 +73,8 @@ runtime_gostringnocopy(const byte *str)\n \treturn s;\n }\n \n-String runtime_cstringToGo(byte*)\n-  __asm__ (GOSYM_PREFIX \"runtime.cstringToGo\");\n-\n-String\n-runtime_cstringToGo(byte *str)\n-{\n-\treturn runtime_gostringnocopy(str);\n+func cstringToGo(str *byte) (s String) {\n+\ts = runtime_gostringnocopy(str);\n }\n \n enum"}]}