{"sha": "481261380243a1a01b85247285d0cc03a8090540", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxMjYxMzgwMjQzYTFhMDFiODUyNDcyODVkMGNjMDNhODA5MDU0MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-10-01T14:13:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-01T14:13:30Z"}, "message": "builtins.c: Don't include gomp-constants.h.\n\n\t* builtins.c: Don't include gomp-constants.h.\n\t(fold_builtin_1): Don't fold acc_on_device here.\n\t* gimple-fold.c: Include gomp-constants.h.\n\t(gimple_fold_builtin_acc_on_device): New.\n\t(gimple_fold_builtin): Call it.\n\nFrom-SVN: r228340", "tree": {"sha": "75eb04c466d0a7567a3505c2f451fe856bba34a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75eb04c466d0a7567a3505c2f451fe856bba34a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/481261380243a1a01b85247285d0cc03a8090540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481261380243a1a01b85247285d0cc03a8090540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481261380243a1a01b85247285d0cc03a8090540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481261380243a1a01b85247285d0cc03a8090540/comments", "author": null, "committer": null, "parents": [{"sha": "d878e79bf80f4c7bb0c6dd827e4c4dd37c5385bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d878e79bf80f4c7bb0c6dd827e4c4dd37c5385bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d878e79bf80f4c7bb0c6dd827e4c4dd37c5385bf"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "06c9a298153a323f625de22388e510ce6a4bd6d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481261380243a1a01b85247285d0cc03a8090540/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481261380243a1a01b85247285d0cc03a8090540/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=481261380243a1a01b85247285d0cc03a8090540", "patch": "@@ -1,3 +1,11 @@\n+2015-10-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* builtins.c: Don't include gomp-constants.h.\n+\t(fold_builtin_1): Don't fold acc_on_device here.\n+\t* gimple-fold.c: Include gomp-constants.h.\n+\t(gimple_fold_builtin_acc_on_device): New.\n+\t(gimple_fold_builtin): Call it.\n+\n 2015-10-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/x86-tune.def (X86_TUNE_USE_BT): Enable for"}, {"sha": "e20c1f8ff99afcd1c8fb63fe6871416f9d2e44d9", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481261380243a1a01b85247285d0cc03a8090540/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481261380243a1a01b85247285d0cc03a8090540/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=481261380243a1a01b85247285d0cc03a8090540", "patch": "@@ -68,7 +68,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-chkp.h\"\n #include \"rtl-chkp.h\"\n-#include \"gomp-constants.h\"\n \n \n static tree do_mpc_arg1 (tree, tree, int (*)(mpc_ptr, mpc_srcptr, mpc_rnd_t));\n@@ -10234,27 +10233,6 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n \treturn build_empty_stmt (loc);\n       break;\n \n-    case BUILT_IN_ACC_ON_DEVICE:\n-      /* Don't fold on_device until we know which compiler is active.  */\n-      if (symtab->state == EXPANSION)\n-\t{\n-\t  unsigned val_host = GOMP_DEVICE_HOST;\n-\t  unsigned val_dev = GOMP_DEVICE_NONE;\n-\n-#ifdef ACCEL_COMPILER\n-\t  val_host = GOMP_DEVICE_NOT_HOST;\n-\t  val_dev = ACCEL_COMPILER_acc_device;\n-#endif\n-\t  tree host = build2 (EQ_EXPR, boolean_type_node, arg0,\n-\t\t\t      build_int_cst (integer_type_node, val_host));\n-\t  tree dev = build2 (EQ_EXPR, boolean_type_node, arg0,\n-\t\t\t     build_int_cst (integer_type_node, val_dev));\n-\n-\t  tree result = build2 (TRUTH_OR_EXPR, boolean_type_node, host, dev);\n-\t  return fold_convert (integer_type_node, result);\n-\t}\n-      break;\n-\n     default:\n       break;\n     }"}, {"sha": "a6caaa490689c4c22485c1e4202999884d0c45bb", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481261380243a1a01b85247285d0cc03a8090540/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481261380243a1a01b85247285d0cc03a8090540/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=481261380243a1a01b85247285d0cc03a8090540", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"tree-eh.h\"\n #include \"gimple-match.h\"\n+#include \"gomp-constants.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -2708,6 +2709,47 @@ gimple_fold_builtin_strlen (gimple_stmt_iterator *gsi)\n   return true;\n }\n \n+/* Fold a call to __builtin_acc_on_device.  */\n+\n+static bool\n+gimple_fold_builtin_acc_on_device (gimple_stmt_iterator *gsi, tree arg0)\n+{\n+  /* Defer folding until we know which compiler we're in.  */\n+  if (symtab->state != EXPANSION)\n+    return false;\n+\n+  unsigned val_host = GOMP_DEVICE_HOST;\n+  unsigned val_dev = GOMP_DEVICE_NONE;\n+\n+#ifdef ACCEL_COMPILER\n+  val_host = GOMP_DEVICE_NOT_HOST;\n+  val_dev = ACCEL_COMPILER_acc_device;\n+#endif\n+\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n+  \n+  tree host_eq = make_ssa_name (boolean_type_node);\n+  gimple *host_ass = gimple_build_assign\n+    (host_eq, EQ_EXPR, arg0, build_int_cst (TREE_TYPE (arg0), val_host));\n+  gimple_set_location (host_ass, loc);\n+  gsi_insert_before (gsi, host_ass, GSI_SAME_STMT);\n+\n+  tree dev_eq = make_ssa_name (boolean_type_node);\n+  gimple *dev_ass = gimple_build_assign\n+    (dev_eq, EQ_EXPR, arg0, build_int_cst (TREE_TYPE (arg0), val_dev));\n+  gimple_set_location (dev_ass, loc);\n+  gsi_insert_before (gsi, dev_ass, GSI_SAME_STMT);\n+\n+  tree result = make_ssa_name (boolean_type_node);\n+  gimple *result_ass = gimple_build_assign\n+    (result, BIT_IOR_EXPR, host_eq, dev_eq);\n+  gimple_set_location (result_ass, loc);\n+  gsi_insert_before (gsi, result_ass, GSI_SAME_STMT);\n+\n+  replace_call_with_value (gsi, result);\n+\n+  return true;\n+}\n \n /* Fold the non-target builtin at *GSI and return whether any simplification\n    was made.  */\n@@ -2848,6 +2890,9 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t\t\t\t\t   n == 3\n \t\t\t\t\t   ? gimple_call_arg (stmt, 2)\n \t\t\t\t\t   : NULL_TREE, fcode);\n+    case BUILT_IN_ACC_ON_DEVICE:\n+      return gimple_fold_builtin_acc_on_device (gsi,\n+\t\t\t\t\t\tgimple_call_arg (stmt, 0));\n     default:;\n     }\n "}]}