{"sha": "77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdlZjk5NWMxZmJjYWI3NmEyYTY5YjlmNDcwMGJjZmQwMDVkOGU2Mg==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-02-23T23:16:10Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-02-23T23:16:10Z"}, "message": "rs6000: Add support for compatibility built-ins\n\nThe LLVM and GCC teams agreed to rename the __builtin_mma_assemble_pair and\n__builtin_mma_disassemble_pair built-ins to __builtin_vsx_assemble_pair and\n__builtin_vsx_disassemble_pair respectively.  It's too late to remove the\nold names, so this patch renames the built-ins to the new names and then\nadds support for creating compatibility built-ins (ie, multiple built-in\nfunctions generate the same code) and then creates compatibility built-ins\nusing the old names.\n\n2021-02-23  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/mma.md (mma_assemble_pair): Rename from this...\n\t(vsx_assemble_pair): ...to this.\n\t(*mma_assemble_pair): Rename from this...\n\t(*vsx_assemble_pair): ...to this.\n\t(mma_disassemble_pair): Rename from this...\n\t(vsx_disassemble_pair): ...to this.\n\t(*mma_disassemble_pair): Rename from this...\n\t(*vsx_disassemble_pair): ...to this.\n\t* config/rs6000/rs6000-builtin.def (BU_MMA_V2, BU_MMA_V3,\n\tBU_COMPAT): New macros.\n\t(mma_assemble_pair): Rename from this...\n\t(vsx_assemble_pair): ...to this.\n\t(mma_disassemble_pair): Rename from this...\n\t(vsx_disassemble_pair): ...to this.\n\t(mma_assemble_pair): New compatibility built-in.\n\t(mma_disassemble_pair): Likewise.\n\t* config/rs6000/rs6000-call.c (struct builtin_compatibility): New.\n\t(RS6000_BUILTIN_COMPAT): Define.\n\t(bdesc_compat): New.\n\t(mma_expand_builtin): Use VSX_BUILTIN_DISASSEMBLE_PAIR_INTERNAL.\n\t(rs6000_gimple_fold_mma_builtin): Use MMA_BUILTIN_DISASSEMBLE_PAIR\n\tand VSX_BUILTIN_ASSEMBLE_PAIR.\n\t(rs6000_init_builtins): Register compatibility built-ins.\n\t(mma_init_builtins): Use VSX_BUILTIN_ASSEMBLE_PAIR,\n\tVSX_BUILTIN_ASSEMBLE_PAIR_INTERNAL, VSX_BUILTIN_DISASSEMBLE_PAIR and\n\tVSX_BUILTIN_DISASSEMBLE_PAIR_INTERNAL.\n\t* doc/extend.texi (__builtin_mma_assemble_pair): Rename from this...\n\t(__builtin_vsx_assemble_pair): ...to this.\n\t(__builtin_mma_disassemble_pair): Rename from this...\n\t(__builtin_vsx_disassemble_pair): ...to this.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/mma-builtin-4.c: Add tests for\n\t__builtin_vsx_assemble_pair and __builtin_vsx_disassemble_pair.\n\tAdd __has_builtin tests for built-ins.\n\tUpdate expected instruction counts.", "tree": {"sha": "8a26289fa50f3522f908fda14e02ff505dbe0854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a26289fa50f3522f908fda14e02ff505dbe0854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d134ca4b963706f31251f061fc180e517b32546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d134ca4b963706f31251f061fc180e517b32546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d134ca4b963706f31251f061fc180e517b32546"}], "stats": {"total": 168, "additions": 148, "deletions": 20}, "files": [{"sha": "c40501f2e091f4ca748ad0bc3788b1ea18c67251", "filename": "gcc/config/rs6000/mma.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Fconfig%2Frs6000%2Fmma.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Fconfig%2Frs6000%2Fmma.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmma.md?ref=77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "patch": "@@ -321,7 +321,7 @@\n    (set_attr \"length\" \"*,*,16\")\n    (set_attr \"max_prefixed_insns\" \"2,2,*\")])\n \n-(define_expand \"mma_assemble_pair\"\n+(define_expand \"vsx_assemble_pair\"\n   [(match_operand:OO 0 \"vsx_register_operand\")\n    (match_operand:V16QI 1 \"mma_assemble_input_operand\")\n    (match_operand:V16QI 2 \"mma_assemble_input_operand\")]\n@@ -334,7 +334,7 @@\n   DONE;\n })\n \n-(define_insn_and_split \"*mma_assemble_pair\"\n+(define_insn_and_split \"*vsx_assemble_pair\"\n   [(set (match_operand:OO 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:OO [(match_operand:V16QI 1 \"mma_assemble_input_operand\" \"mwa\")\n \t\t    (match_operand:V16QI 2 \"mma_assemble_input_operand\" \"mwa\")]\n@@ -351,7 +351,7 @@\n   DONE;\n })\n \n-(define_expand \"mma_disassemble_pair\"\n+(define_expand \"vsx_disassemble_pair\"\n   [(match_operand:V16QI 0 \"mma_disassemble_output_operand\")\n    (match_operand:OO 1 \"vsx_register_operand\")\n    (match_operand 2 \"const_0_to_1_operand\")]\n@@ -366,7 +366,7 @@\n   DONE;\n })\n \n-(define_insn_and_split \"*mma_disassemble_pair\"\n+(define_insn_and_split \"*vsx_disassemble_pair\"\n   [(set (match_operand:V16QI 0 \"mma_disassemble_output_operand\" \"=mwa\")\n        (unspec:V16QI [(match_operand:OO 1 \"vsx_register_operand\" \"wa\")\n \t\t      (match_operand 2 \"const_0_to_1_operand\")]"}, {"sha": "609bebdfd74850692f80acc7a7efbddb2610796f", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "patch": "@@ -43,6 +43,10 @@\n \tATTR\tbuiltin attribute information.\n \tICODE\tInsn code of the function that implements the builtin.  */\n \n+#ifndef RS6000_BUILTIN_COMPAT\n+  #undef BU_COMPAT\n+  #define BU_COMPAT(ENUM, COMPAT_NAME)\n+\n #ifndef RS6000_BUILTIN_0\n   #error \"RS6000_BUILTIN_0 is not defined.\"\n #endif\n@@ -87,6 +91,36 @@\n   #error \"RS6000_BUILTIN_X is not defined.\"\n #endif\n \n+#else\n+  /* Compatibility builtins.  These builtins are simply mapped into\n+     their compatible builtin function identified by ENUM.  */\n+  #undef BU_COMPAT\n+  #define BU_COMPAT(ENUM, COMPAT_NAME) { ENUM, \"__builtin_\" COMPAT_NAME },\n+\n+  #undef RS6000_BUILTIN_0\n+  #undef RS6000_BUILTIN_1\n+  #undef RS6000_BUILTIN_2\n+  #undef RS6000_BUILTIN_3\n+  #undef RS6000_BUILTIN_4\n+  #undef RS6000_BUILTIN_A\n+  #undef RS6000_BUILTIN_D\n+  #undef RS6000_BUILTIN_H\n+  #undef RS6000_BUILTIN_M\n+  #undef RS6000_BUILTIN_P\n+  #undef RS6000_BUILTIN_X\n+  #define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_M(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n+  #define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n+#endif\n+\n #ifndef BU_AV_1\n /* Define convenience macros using token pasting to allow fitting everything in\n    one line.  */\n@@ -368,6 +402,23 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* Like BU_MMA_2, but uses \"vsx\" rather than \"mma\" naming.  */\n+#define BU_MMA_V2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_M (VSX_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MMA,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY\t\t\t\t\\\n+\t\t     | RS6000_BTC_VOID\t\t\t\t\t\\\n+\t\t     | RS6000_BTC_GIMPLE),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\t\\\n+  RS6000_BUILTIN_M (VSX_BUILTIN_ ## ENUM ## _INTERNAL,\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME \"_internal\",\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MMA,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n #define BU_MMA_3(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_M (MMA_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_mma_\" NAME,\t\t/* NAME */\t\\\n@@ -384,6 +435,23 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* Like BU_MMA_3, but uses \"vsx\" rather than \"mma\" naming.  */\n+#define BU_MMA_V3(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_M (VSX_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MMA,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY\t\t\t\t\\\n+\t\t     | RS6000_BTC_VOID\t\t\t\t\t\\\n+\t\t     | RS6000_BTC_GIMPLE),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\t\\\n+  RS6000_BUILTIN_M (VSX_BUILTIN_ ## ENUM ## _INTERNAL,\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME \"_internal\",\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MMA,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n #define BU_MMA_5(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_M (MMA_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_mma_\" NAME,\t\t/* NAME */\t\\\n@@ -3136,9 +3204,11 @@ BU_MMA_1 (XXMTACC,\t    \"xxmtacc\",\t\tQUAD, mma_xxmtacc)\n BU_MMA_1 (XXSETACCZ,\t    \"xxsetaccz\",\tMISC, mma_xxsetaccz)\n \n BU_MMA_2 (DISASSEMBLE_ACC, \"disassemble_acc\",\tQUAD, mma_disassemble_acc)\n-BU_MMA_2 (DISASSEMBLE_PAIR,\"disassemble_pair\",\tPAIR, mma_disassemble_pair)\n+BU_MMA_V2 (DISASSEMBLE_PAIR, \"disassemble_pair\", PAIR, vsx_disassemble_pair)\n+BU_COMPAT (VSX_BUILTIN_DISASSEMBLE_PAIR, \"mma_disassemble_pair\")\n \n-BU_MMA_3 (ASSEMBLE_PAIR,    \"assemble_pair\",\tMISC, mma_assemble_pair)\n+BU_MMA_V3 (ASSEMBLE_PAIR,   \"assemble_pair\",\tMISC, vsx_assemble_pair)\n+BU_COMPAT (VSX_BUILTIN_ASSEMBLE_PAIR, \"mma_assemble_pair\")\n BU_MMA_3 (XVBF16GER2,\t    \"xvbf16ger2\",\tMISC, mma_xvbf16ger2)\n BU_MMA_3 (XVF16GER2,\t    \"xvf16ger2\",\tMISC, mma_xvf16ger2)\n BU_MMA_3 (XVF32GER,\t    \"xvf32ger\",\t\tMISC, mma_xvf32ger)"}, {"sha": "d2bd03e7a62f8551d0a0c8f3a361930c3b072ffe", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "patch": "@@ -89,6 +89,12 @@\n #define TARGET_NO_PROTOTYPE 0\n #endif\n \n+struct builtin_compatibility\n+{\n+  const enum rs6000_builtins code;\n+  const char *const name;\n+};\n+\n struct builtin_description\n {\n   const HOST_WIDE_INT mask;\n@@ -8839,6 +8845,13 @@ def_builtin (const char *name, tree type, enum rs6000_builtins code)\n \t     (int)code, name, attr_string);\n }\n \n+static const struct builtin_compatibility bdesc_compat[] =\n+{\n+#define RS6000_BUILTIN_COMPAT\n+#include \"rs6000-builtin.def\"\n+};\n+#undef RS6000_BUILTIN_COMPAT\n+\n /* Simple ternary operations: VECd = foo (VECa, VECb, VECc).  */\n \n #undef RS6000_BUILTIN_0\n@@ -10115,7 +10128,7 @@ mma_expand_builtin (tree exp, rtx target, bool *expandedp)\n \n   unsigned attr_args = attr & RS6000_BTC_OPND_MASK;\n   if (attr & RS6000_BTC_QUAD\n-      || fcode == MMA_BUILTIN_DISASSEMBLE_PAIR_INTERNAL)\n+      || fcode == VSX_BUILTIN_DISASSEMBLE_PAIR_INTERNAL)\n     attr_args++;\n \n   gcc_assert (nopnds == attr_args);\n@@ -11730,7 +11743,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n   tree new_decl;\n \n   if (fncode == MMA_BUILTIN_DISASSEMBLE_ACC\n-      || fncode == MMA_BUILTIN_DISASSEMBLE_PAIR)\n+      || fncode == VSX_BUILTIN_DISASSEMBLE_PAIR)\n     {\n       /* This is an MMA disassemble built-in function.  */\n       push_gimplify_context (true);\n@@ -11745,7 +11758,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n \t another accumulator/pair, then just copy the entire thing as is.  */\n       if ((fncode == MMA_BUILTIN_DISASSEMBLE_ACC\n \t   && TREE_TYPE (TREE_TYPE (dst_ptr)) == vector_quad_type_node)\n-\t  || (fncode == MMA_BUILTIN_DISASSEMBLE_PAIR\n+\t  || (fncode == VSX_BUILTIN_DISASSEMBLE_PAIR\n \t      && TREE_TYPE (TREE_TYPE (dst_ptr)) == vector_pair_type_node))\n \t{\n \t  tree dst = build_simple_mem_ref (build1 (VIEW_CONVERT_EXPR,\n@@ -11847,7 +11860,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n       gcc_unreachable ();\n     }\n \n-  if (fncode == MMA_BUILTIN_ASSEMBLE_PAIR)\n+  if (fncode == VSX_BUILTIN_ASSEMBLE_PAIR)\n     lhs = make_ssa_name (vector_pair_type_node);\n   else\n     lhs = make_ssa_name (vector_quad_type_node);\n@@ -13447,6 +13460,18 @@ rs6000_init_builtins (void)\n #ifdef SUBTARGET_INIT_BUILTINS\n   SUBTARGET_INIT_BUILTINS;\n #endif\n+\n+  /* Register the compatibility builtins after all of the normal\n+     builtins have been defined.  */\n+  const struct builtin_compatibility *d = bdesc_compat;\n+  unsigned i;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_compat); i++, d++)\n+    {\n+      tree decl = rs6000_builtin_decls[(int)d->code];\n+      gcc_assert (decl != NULL);\n+      add_builtin_function (d->name, TREE_TYPE (decl), (int)d->code,\n+\t\t\t    BUILT_IN_MD, NULL, NULL_TREE);\n+    }\n }\n \n /* Returns the rs6000 builtin decl for CODE.  */\n@@ -14119,7 +14144,7 @@ mma_init_builtins (void)\n       else\n \t{\n \t  if (!(d->code == MMA_BUILTIN_DISASSEMBLE_ACC_INTERNAL\n-\t\t || d->code == MMA_BUILTIN_DISASSEMBLE_PAIR_INTERNAL)\n+\t\t || d->code == VSX_BUILTIN_DISASSEMBLE_PAIR_INTERNAL)\n \t       && (attr & RS6000_BTC_QUAD) == 0)\n \t    attr_args--;\n \n@@ -14129,7 +14154,7 @@ mma_init_builtins (void)\n \n       /* This is a disassemble pair/acc function. */\n       if (d->code == MMA_BUILTIN_DISASSEMBLE_ACC\n-\t  || d->code == MMA_BUILTIN_DISASSEMBLE_PAIR)\n+\t  || d->code == VSX_BUILTIN_DISASSEMBLE_PAIR)\n \t{\n \t  op[nopnds++] = build_pointer_type (void_type_node);\n \t  if (d->code == MMA_BUILTIN_DISASSEMBLE_ACC)\n@@ -14143,15 +14168,15 @@ mma_init_builtins (void)\n \t  unsigned j = 0;\n \t  if (attr & RS6000_BTC_QUAD\n \t      && d->code != MMA_BUILTIN_DISASSEMBLE_ACC_INTERNAL\n-\t      && d->code != MMA_BUILTIN_DISASSEMBLE_PAIR_INTERNAL)\n+\t      && d->code != VSX_BUILTIN_DISASSEMBLE_PAIR_INTERNAL)\n \t    j = 1;\n \t  for (; j < (unsigned) insn_data[icode].n_operands; j++)\n \t    {\n \t      machine_mode mode = insn_data[icode].operand[j].mode;\n \t      if (gimple_func && mode == XOmode)\n \t\top[nopnds++] = build_pointer_type (vector_quad_type_node);\n \t      else if (gimple_func && mode == OOmode\n-\t\t       && d->code == MMA_BUILTIN_ASSEMBLE_PAIR)\n+\t\t       && d->code == VSX_BUILTIN_ASSEMBLE_PAIR)\n \t\top[nopnds++] = build_pointer_type (vector_pair_type_node);\n \t      else\n \t\t/* MMA uses unsigned types.  */"}, {"sha": "02578cd953fa0867718c0d580b6baffc89aac705", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "patch": "@@ -22219,8 +22219,8 @@ void __builtin_mma_xxsetaccz (__vector_quad *);\n void __builtin_mma_assemble_acc (__vector_quad *, vec_t, vec_t, vec_t, vec_t);\n void __builtin_mma_disassemble_acc (void *, __vector_quad *);\n \n-void __builtin_mma_assemble_pair (__vector_pair *, vec_t, vec_t);\n-void __builtin_mma_disassemble_pair (void *, __vector_pair *);\n+void __builtin_vsx_assemble_pair (__vector_pair *, vec_t, vec_t);\n+void __builtin_vsx_disassemble_pair (void *, __vector_pair *);\n \n vec_t __builtin_vsx_xvcvspbf16 (vec_t);\n vec_t __builtin_vsx_xvcvbf16spn (vec_t);"}, {"sha": "3bedf531de010d181d30c4ed35f55b7da6e7f443", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-4.c", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ef995c1fbcab76a2a69b9f4700bcfd005d8e62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-4.c?ref=77ef995c1fbcab76a2a69b9f4700bcfd005d8e62", "patch": "@@ -12,6 +12,14 @@ foo (__vector_pair *dst, vec_t *src)\n   *dst = pair;\n }\n \n+void\n+foo2 (__vector_pair *dst, vec_t *src)\n+{\n+  __vector_pair pair;\n+  __builtin_vsx_assemble_pair (&pair, src[0], src[4]);\n+  *dst = pair;\n+}\n+\n void\n bar (vec_t *dst, __vector_pair *src)\n {\n@@ -21,8 +29,33 @@ bar (vec_t *dst, __vector_pair *src)\n   dst[4] = res[1];\n }\n \n-/* { dg-final { scan-assembler-times {\\mlxv\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mlxvp\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mstxv\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mstxvp\\M} 1 } } */\n+void\n+bar2 (vec_t *dst, __vector_pair *src)\n+{\n+  vec_t res[2];\n+  __builtin_vsx_disassemble_pair (res, src);\n+  dst[0] = res[0];\n+  dst[4] = res[1];\n+}\n+\n+#if !__has_builtin (__builtin_vsx_assemble_pair)\n+#  error \"__has_builtin (__builtin_vsx_assemble_pair) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_vsx_disassemble_pair)\n+#  error \"__has_builtin (__builtin_vsx_disassemble_pair) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_mma_assemble_pair)\n+#  error \"__has_builtin (__builtin_mma_assemble_pair) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_mma_disassemble_pair)\n+#  error \"__has_builtin (__builtin_mma_disassemble_pair) failed\"\n+#endif\n+\n+/* { dg-final { scan-assembler-times {\\mlxv\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvp\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvp\\M} 2 } } */\n "}]}