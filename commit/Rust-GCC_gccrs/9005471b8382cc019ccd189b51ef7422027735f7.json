{"sha": "9005471b8382cc019ccd189b51ef7422027735f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwNTQ3MWI4MzgyY2MwMTljY2QxODliNTFlZjc0MjIwMjc3MzVmNw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-07-19T09:11:12Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-07-19T09:11:12Z"}, "message": "allow darwin branch island control depening on system version\n\n\t* config/i386/darwin.h: Define darwin_emit_branch_islands.\n\t(TARGET_MACHO_BRANCH_ISLANDS): New.\n\t(FUNCTION_PROFILER): Use TARGET_MACHO_BRANCH_ISLANDS.\n\t* config/i386/i386.h (TARGET_MACHO_BRANCH_ISLANDS): Define a\n\tdefault value.\n\t* config/i386/i386.c (output_pic_addr_const): Do not emit\n\tbranch islands unless TARGET_MACHO_BRANCH_ISLANDS is set.\n\t(x86_output_mi_thunk): Adjust symbol creation.\n\t* config/rs6000/darwin.h: Define darwin_emit_branch_islands.\n\tRemove out of date comment.\n\t* config/rs6000/rs6000.c (print_operand): Adjust symbol.\n\tDARWIN_LINKER_GENERATES_ISLANDS: Remove.\n\tDARWIN_GENERATE_ISLANDS: Ditto.\n\t(output_call):  Do not emit branch islands unless\n\tdarwin_emit_branch_islands is set.\n\t* config/darwin.c: Declare darwin_emit_branch_islands.\n\t(machopic_indirect_data_reference): Do not emit unless\n\tdarwin_emit_branch_islands is set.\n\t(darwin_override_options): Set darwin_emit_branch_islands\n\twhere it is needed.\n\t* config/darwin9.h\n\tDARWIN_LINKER_GENERATES_ISLANDS: Remove.\n\nFrom-SVN: r162299", "tree": {"sha": "d05b69bd4499cd79c964ff9f989bf6e6b5f94c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d05b69bd4499cd79c964ff9f989bf6e6b5f94c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9005471b8382cc019ccd189b51ef7422027735f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9005471b8382cc019ccd189b51ef7422027735f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9005471b8382cc019ccd189b51ef7422027735f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9005471b8382cc019ccd189b51ef7422027735f7/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39354b3b991ec0b77d9137c64eea9551ff0ec6f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39354b3b991ec0b77d9137c64eea9551ff0ec6f7"}], "stats": {"total": 85, "additions": 65, "deletions": 20}, "files": [{"sha": "3384d60b428b694f075a212392103a835436079a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9005471b8382cc019ccd189b51ef7422027735f7", "patch": "@@ -1,3 +1,28 @@\n+2010-07-19  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* config/i386/darwin.h: Define darwin_emit_branch_islands.\n+\t(TARGET_MACHO_BRANCH_ISLANDS): New.\n+\t(FUNCTION_PROFILER): Use TARGET_MACHO_BRANCH_ISLANDS.\n+\t* config/i386/i386.h (TARGET_MACHO_BRANCH_ISLANDS): Define a\n+\tdefault value.\n+\t* config/i386/i386.c (output_pic_addr_const): Do not emit\n+\tbranch islands unless TARGET_MACHO_BRANCH_ISLANDS is set.\n+\t(x86_output_mi_thunk): Adjust symbol creation.\n+\t* config/rs6000/darwin.h: Define darwin_emit_branch_islands.\n+\tRemove out of date comment.\n+\t* config/rs6000/rs6000.c (print_operand): Adjust symbol.\n+\tDARWIN_LINKER_GENERATES_ISLANDS: Remove.\n+\tDARWIN_GENERATE_ISLANDS: Ditto.\n+\t(output_call):  Do not emit branch islands unless\n+\tdarwin_emit_branch_islands is set.\n+\t* config/darwin.c: Declare darwin_emit_branch_islands.\n+\t(machopic_indirect_data_reference): Do not emit unless\n+\tdarwin_emit_branch_islands is set.\n+\t(darwin_override_options): Set darwin_emit_branch_islands\n+\twhere it is needed.\n+\t* config/darwin9.h\n+\tDARWIN_LINKER_GENERATES_ISLANDS: Remove.\n+\n 2010-07-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/sourcebuild.texi (Effective-Target Keywords): Document"}, {"sha": "59c603fb4a2d9a0e9592641580c09edc385a1e9b", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=9005471b8382cc019ccd189b51ef7422027735f7", "patch": "@@ -79,6 +79,12 @@ along with GCC; see the file COPYING3.  If not see\n    of MACHO_SYMBOL_STATIC for the code that handles @code{static}\n    symbol indirection.  */\n \n+/* For darwin >= 9  (OSX 10.5) the linker is capable of making the necessary\n+   branch islands and we no longer need to emit darwin stubs.\n+   However, if we are generating code for earlier systems (or for use in the \n+   kernel) the stubs might still be required, and this will be set true.  */\n+int darwin_emit_branch_islands = false;\n+\n /* Section names.  */\n section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n@@ -625,6 +631,9 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n rtx\n machopic_indirect_call_target (rtx target)\n {\n+  if (! darwin_emit_branch_islands)\n+    return target;\n+\n   if (GET_CODE (target) != MEM)\n     return target;\n \n@@ -1888,12 +1897,19 @@ darwin_override_options (void)\n       flag_exceptions = 0;\n       /* No -fnon-call-exceptions data in kexts.  */\n       flag_non_call_exceptions = 0;\n+      /* We still need to emit branch islands for kernel context.  */\n+      darwin_emit_branch_islands = true;\n     }\n   if (flag_var_tracking\n       && strverscmp (darwin_macosx_version_min, \"10.5\") >= 0\n       && debug_info_level >= DINFO_LEVEL_NORMAL\n       && debug_hooks->var_location != do_nothing_debug_hooks.var_location)\n     flag_var_tracking_uninit = 1;\n+\n+  /* It is assumed that branch island stubs are needed for earlier systems.  */\n+  if (darwin_macosx_version_min\n+      && strverscmp (darwin_macosx_version_min, \"10.5\") < 0)\n+    darwin_emit_branch_islands = true;\n }\n \n /* Add $LDBL128 suffix to long double builtins.  */"}, {"sha": "f1527105dee13ec7e2d02cb5dfe4bf2052f217b2", "filename": "gcc/config/darwin9.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fdarwin9.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fdarwin9.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin9.h?ref=9005471b8382cc019ccd189b51ef7422027735f7", "patch": "@@ -44,9 +44,6 @@ along with GCC; see the file COPYING3.  If not see\n /* libSystem contains unwind information for signal frames.  */\n #define DARWIN_LIBSYSTEM_HAS_UNWIND\n \n-/* The linker can generate branch islands.  */\n-#define DARWIN_LINKER_GENERATES_ISLANDS 1\n-\n #undef  ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "7917f2fc18fe9a45d012213c5a59e2b5e4c1ece5", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=9005471b8382cc019ccd189b51ef7422027735f7", "patch": "@@ -60,6 +60,12 @@ along with GCC; see the file COPYING3.  If not see\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 32\n \n+/* Generate branch islands stubs if this is true.  */\n+extern int darwin_emit_branch_islands;\n+\n+#undef TARGET_MACHO_BRANCH_ISLANDS\n+#define TARGET_MACHO_BRANCH_ISLANDS darwin_emit_branch_islands\n+\n #undef MAX_BITS_PER_WORD\n #define MAX_BITS_PER_WORD 64\n \n@@ -225,7 +231,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      if (MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\t\t\\\n+      if (TARGET_MACHO_BRANCH_ISLANDS && MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  const char *name = machopic_mcount_stub_name ();\t\t\\\n \t  fprintf (FILE, \"\\tcall %s\\n\", name+1);  /*  skip '&'  */\t\\"}, {"sha": "bb0b890277f3603c22e460d680912b245574de55", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9005471b8382cc019ccd189b51ef7422027735f7", "patch": "@@ -11513,7 +11513,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n       break;\n \n     case SYMBOL_REF:\n-      if (! TARGET_MACHO || TARGET_64BIT)\n+      if (TARGET_64BIT || ! TARGET_MACHO_BRANCH_ISLANDS)\n \toutput_addr_const (file, x);\n       else\n \t{\n@@ -27233,10 +27233,11 @@ x86_output_mi_thunk (FILE *file,\n \tif (TARGET_MACHO)\n \t  {\n \t    rtx sym_ref = XEXP (DECL_RTL (function), 0);\n-\t    tmp = (gen_rtx_SYMBOL_REF\n+\t    if (TARGET_MACHO_BRANCH_ISLANDS)\n+\t      sym_ref = (gen_rtx_SYMBOL_REF\n \t\t   (Pmode,\n \t\t    machopic_indirection_name (sym_ref, /*stub_p=*/true)));\n-\t    tmp = gen_rtx_MEM (QImode, tmp);\n+\t    tmp = gen_rtx_MEM (QImode, sym_ref);\n \t    xops[0] = tmp;\n \t    output_asm_insn (\"jmp\\t%0\", xops);\n \t  }"}, {"sha": "e153920a5c1b7f16969b25eeecbababd0c778ad3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9005471b8382cc019ccd189b51ef7422027735f7", "patch": "@@ -477,7 +477,13 @@ extern tree x86_mfence;\n    redefines this to 1.  */\n #define TARGET_MACHO 0\n \n-/* Likewise, for the Windows 64-bit ABI.  */\n+/* Branch island 'stubs' are emitted for earlier versions of darwin.\n+   This provides a default (over-ridden in darwin.h.)  */\n+#ifndef TARGET_MACHO_BRANCH_ISLANDS\n+#define TARGET_MACHO_BRANCH_ISLANDS 0\n+#endif\n+\n+/* For the Windows 64-bit ABI.  */\n #define TARGET_64BIT_MS_ABI (TARGET_64BIT && ix86_cfun_abi () == MS_ABI)\n \n /* Available call abi.  */"}, {"sha": "810563e0ed0cc603e9134e7c8cc592ae6c27f37b", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=9005471b8382cc019ccd189b51ef7422027735f7", "patch": "@@ -65,6 +65,9 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* Generate branch islands stubs if this is true.  */\n+extern int darwin_emit_branch_islands;\n+\n #define SUBTARGET_OVERRIDE_OPTIONS darwin_rs6000_override_options ()\n \n #define C_COMMON_OVERRIDE_OPTIONS do {\t\t\t\t\t\\\n@@ -385,8 +388,6 @@\n #define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n   (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))\n \n-/* XXX: Darwin supports neither .quad, or .llong, but it also doesn't\n-   support 64 bit PowerPC either, so this just keeps things happy.  */\n #define DOUBLE_INT_ASM_OP \"\\t.quad\\t\"\n \n /* For binary compatibility with 2.95; Darwin C APIs use bool from"}, {"sha": "3a8c70760033829a5b8272ec3fb90c7f4b2a30c0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9005471b8382cc019ccd189b51ef7422027735f7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9005471b8382cc019ccd189b51ef7422027735f7", "patch": "@@ -15392,7 +15392,8 @@ print_operand (FILE *file, rtx x, int code)\n \t{\n \t  const char *name = XSTR (x, 0);\n #if TARGET_MACHO\n-\t  if (MACHOPIC_INDIRECT\n+\t  if (darwin_emit_branch_islands\n+\t      && MACHOPIC_INDIRECT\n \t      && machopic_classify_symbol (x) == MACHOPIC_UNDEFINED_FUNCTION)\n \t    name = machopic_indirection_name (x, /*stub_p=*/true);\n #endif\n@@ -24482,14 +24483,6 @@ get_prev_label (tree function_name)\n   return 0;\n }\n \n-#ifndef DARWIN_LINKER_GENERATES_ISLANDS\n-#define DARWIN_LINKER_GENERATES_ISLANDS 0\n-#endif\n-\n-/* KEXTs still need branch islands.  */\n-#define DARWIN_GENERATE_ISLANDS (!DARWIN_LINKER_GENERATES_ISLANDS \\\n-\t\t\t\t || flag_mkernel || flag_apple_kext)\n-\n /* INSN is either a function call or a millicode call.  It may have an\n    unconditional jump in its delay slot.\n \n@@ -24500,7 +24493,7 @@ output_call (rtx insn, rtx *operands, int dest_operand_number,\n \t     int cookie_operand_number)\n {\n   static char buf[256];\n-  if (DARWIN_GENERATE_ISLANDS\n+  if (darwin_emit_branch_islands\n       && GET_CODE (operands[dest_operand_number]) == SYMBOL_REF\n       && (INTVAL (operands[cookie_operand_number]) & CALL_LONG))\n     {"}]}