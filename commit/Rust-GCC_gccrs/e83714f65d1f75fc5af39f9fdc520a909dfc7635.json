{"sha": "e83714f65d1f75fc5af39f9fdc520a909dfc7635", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzNzE0ZjY1ZDFmNzVmYzVhZjM5ZjlmZGM1MjBhOTA5ZGZjNzYzNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-04T16:23:40Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-06T18:00:14Z"}, "message": "lra: Stop eh_return data regs being incorrectly marked live [PR92989]\n\nlra_assign has an assert to make sure that no pseudo is allocated\nto a conflicting hard register.  It used to be restricted to\n!flag_ipa_ra, but in g:a1e6ee38e708ef2bdef4 I'd enabled it for\nflag_ipa_ra too.  It then tripped a few times while building\nlibstdc++ for mips-mti-linux.\n\nPrevious patches fixed one of the problems: registers clobbered\nby the taking of an exception were being treated as live at the\nbeginning of the EH receiver, and this got propagated to predecessor\nblocks.  But it turns out that there was a second problem: eh_return\ndata registers were also being marked live in the same way.\n\nThese registers are defined by the unwinder and so in reality they\nare live on entry to the EH receiver.  But definitions can only happen\nin blocks, not on edges, so for liveness purposes we use artificial\ndefinitions at the start of the EH receiver.  process_bb_lives should\ntherefore model the effect of a definition, not a plain use.\n\n2020-04-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR rtl-optimization/92989\n\t* lra-lives.c (process_bb_lives): Do not treat eh_return data\n\tregisters as being live at the beginning of the EH receiver.", "tree": {"sha": "6b068410184a628cc5c0e2400aebcf7487561721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b068410184a628cc5c0e2400aebcf7487561721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e83714f65d1f75fc5af39f9fdc520a909dfc7635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83714f65d1f75fc5af39f9fdc520a909dfc7635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83714f65d1f75fc5af39f9fdc520a909dfc7635", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83714f65d1f75fc5af39f9fdc520a909dfc7635/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b696698767ba45b4d61a93205167e2f1f744d3f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b696698767ba45b4d61a93205167e2f1f744d3f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b696698767ba45b4d61a93205167e2f1f744d3f1"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "258e9dbc9568b0c5e5b12824b233e70e23ff2e17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83714f65d1f75fc5af39f9fdc520a909dfc7635/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83714f65d1f75fc5af39f9fdc520a909dfc7635/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e83714f65d1f75fc5af39f9fdc520a909dfc7635", "patch": "@@ -1,3 +1,9 @@\n+2020-04-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/92989\n+\t* lra-lives.c (process_bb_lives): Do not treat eh_return data\n+\tregisters as being live at the beginning of the EH receiver.\n+\n 2020-04-05 Zachary Spytz  <zspytz@gmail.com>\n \n \t* extend.texi: Add free to list of ISO C90 functions that"}, {"sha": "917c617903f29d4390e87437ad1dfd2755caeb33", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83714f65d1f75fc5af39f9fdc520a909dfc7635/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83714f65d1f75fc5af39f9fdc520a909dfc7635/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=e83714f65d1f75fc5af39f9fdc520a909dfc7635", "patch": "@@ -1014,13 +1014,19 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n     }\n \n   if (bb_has_eh_pred (bb))\n+    /* Any pseudos that are currently live conflict with the eh_return\n+       data registers.  For liveness purposes, these registers are set\n+       by artificial definitions at the start of the BB, so are not\n+       actually live on entry.  */\n     for (j = 0; ; ++j)\n       {\n \tunsigned int regno = EH_RETURN_DATA_REGNO (j);\n \n \tif (regno == INVALID_REGNUM)\n \t  break;\n+\n \tmake_hard_regno_live (regno);\n+\tmake_hard_regno_dead (regno);\n       }\n \n   /* Pseudos can't go in stack regs at the start of a basic block that"}]}