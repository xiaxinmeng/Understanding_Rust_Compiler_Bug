{"sha": "f2c74cc43a137f5fe81719b4b1514a665bff8766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjNzRjYzQzYTEzN2Y1ZmU4MTcxOWI0YjE1MTRhNjY1YmZmODc2Ng==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2012-01-01T13:52:13Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2012-01-01T13:52:13Z"}, "message": "re PR tree-optimization/51704 (ICE: vector VEC(vec_void_p,base) index domain error, in vinfo_for_stmt at tree-vectorizer.h:620 with -O3 -fno-tree-copy-prop -fno-tree-fre)\n\n\n        PR tree-optimization/51704\n        * tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Check that\n        a use is inside the basic block or loop before accessing its\n        vect info.\n\nFrom-SVN: r182769", "tree": {"sha": "39604a554502660fbe8328eaba9da6d7ec6570a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39604a554502660fbe8328eaba9da6d7ec6570a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2c74cc43a137f5fe81719b4b1514a665bff8766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c74cc43a137f5fe81719b4b1514a665bff8766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2c74cc43a137f5fe81719b4b1514a665bff8766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c74cc43a137f5fe81719b4b1514a665bff8766/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d2314ed1c90db68ee4e0e4c603773f5bc258f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2314ed1c90db68ee4e0e4c603773f5bc258f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d2314ed1c90db68ee4e0e4c603773f5bc258f0b"}], "stats": {"total": 104, "additions": 97, "deletions": 7}, "files": [{"sha": "d2989d42639007061753fbb4b80409f4becd275a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2c74cc43a137f5fe81719b4b1514a665bff8766", "patch": "@@ -1,3 +1,10 @@\n+2012-01-01  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/51704\n+\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Check that\n+\ta use is inside the basic block or loop before accessing its\n+\tvect info.\n+\n 2012-01-01  Jan Hubicka  <jhjh@suse.cz>\n \n \tPR rtl-optimization/51069"}, {"sha": "143c0d1be7d87de8776109a83444e5d04d1048c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2c74cc43a137f5fe81719b4b1514a665bff8766", "patch": "@@ -1,3 +1,10 @@\n+2012-01-01  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/51704\n+\t* gfortran.dg/vect/no-fre-no-copy-prop-O3-pr51704.f90: New.\n+\t* gfortran.dg/vect/vect.exp: Run no-fre-no-copy-prop-O3-* with\n+\tcorresponding flags.\n+\n 2012-01-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51723"}, {"sha": "acfe1b7df42b86c868f559eb5d66b9486e19e360", "filename": "gcc/testsuite/gfortran.dg/vect/no-fre-no-copy-prop-O3-pr51704.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fno-fre-no-copy-prop-O3-pr51704.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fno-fre-no-copy-prop-O3-pr51704.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fno-fre-no-copy-prop-O3-pr51704.f90?ref=f2c74cc43a137f5fe81719b4b1514a665bff8766", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do compile }\n+\n+  integer, parameter :: q = 2\n+  integer, parameter :: nx=3, ny=2*q, nz=5\n+  integer, parameter, dimension(nx,ny,nz) :: p  = &\n+        & reshape ((/ (i**2, i=1,size(p)) /), shape(p))\n+  integer, parameter, dimension(   ny,nz) :: px = &\n+        & reshape ((/ (( &\n+        &       +      nx*(nx-1)*(2*nx-1)/6, &\n+        &       j=0,ny-1), k=0,nz-1) /), shape(px))\n+  integer, parameter, dimension(nx,   nz) :: py = &\n+        & reshape ((/ (( &\n+        &       +(nx   )**2*ny*(ny-1)*(2*ny-1)/6, &\n+        &       i=0,nx-1), k=0,nz-1) /), shape(py))\n+  integer, parameter, dimension(nx,ny   ) :: pz = &\n+        & reshape ((/ (( &\n+        &       +(nx*ny)**2*nz*(nz-1)*(2*nz-1)/6, &\n+        &       i=0,nx-1), j=0,ny-1) /), shape(pz))\n+  integer, dimension(nx,ny,nz) :: a\n+  integer, dimension(nx,ny   ) :: az\n+  if (sum(sum(sum(a,1),2),1) /= sum(a)) call abort\n+  if (sum(sum(sum(a,3),1),1) /= sum(a)) call abort\n+  if (any(1+sum(eid(a),1)+ax+sum( &\n+        neid3(a), &\n+        1)+1  /= 3*ax+2))        call abort\n+  if (any(1+eid(sum(a,2))+ay+ &\n+        neid2( &\n+        sum(a,2) &\n+        )+1  /= 3*ay+2))        call abort\n+  if (any(sum(eid(sum(a,3))+az+2* &\n+        neid2(az) &\n+        ,1)+1 /= 4*sum(az,1)+1)) call abort\n+contains\n+  elemental function eid (x)\n+    integer, intent(in) :: x\n+  end function eid\n+  function neid2 (x)\n+    integer, intent(in) :: x(:,:)\n+    integer             :: neid2(size(x,1),size(x,2))\n+    neid2 = x\n+  end function neid2\n+  function neid3 (x)\n+    integer, intent(in) :: x(:,:,:)\n+    integer             :: neid3(size(x,1),size(x,2),size(x,3))\n+  end function neid3\n+  elemental subroutine set (o, i)\n+    integer, intent(in)  :: i\n+    integer, intent(out) :: o\n+  end subroutine set\n+  elemental subroutine tes (i, o)\n+    integer, intent(in)  :: i\n+    integer, intent(out) :: o\n+  end subroutine tes\n+end\n+\n+! { dg-final { cleanup-tree-dump \"vect\" } }\n+"}, {"sha": "f00b2577337c8ed4eae22ccb06b1969c2b46ccff", "filename": "gcc/testsuite/gfortran.dg/vect/vect.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp?ref=f2c74cc43a137f5fe81719b4b1514a665bff8766", "patch": "@@ -90,6 +90,12 @@ lappend DEFAULT_VECTCFLAGS \"-Ofast\"\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/Ofast-*.\\[fF\\]{,90,95,03,08} ]]  \\\n         \"\" $DEFAULT_VECTCFLAGS\n \n+# With -fno-tree-copy-prop -fno-tree-fre -O3\n+set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n+lappend DEFAULT_VECTCFLAGS \"-fno-tree-copy-prop\" \"-fno-tree-fre\" \"-O3\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/no-fre-no-copy-prop-O3-*.\\[fF\\]{,90,95,03,08} ]]  \\\n+        \"\" $DEFAULT_VECTCFLAGS\n+\n # Clean up.\n set dg-do-what-default ${save-dg-do-what-default}\n "}, {"sha": "ab1914afc62519a64e0669cd98a9cefd6829d571", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c74cc43a137f5fe81719b4b1514a665bff8766/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f2c74cc43a137f5fe81719b4b1514a665bff8766", "patch": "@@ -1,5 +1,5 @@\n /* SLP - Basic Block Vectorization\n-   Copyright (C) 2007, 2008, 2009, 2010, 2011\n+   Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Dorit Naishlos <dorit@il.ibm.com>\n    and Ira Rosen <irar@il.ibm.com>\n@@ -1727,26 +1727,39 @@ static void\n vect_detect_hybrid_slp_stmts (slp_tree node)\n {\n   int i;\n-  gimple stmt;\n+  VEC (gimple, heap) *stmts = SLP_TREE_SCALAR_STMTS (node);\n+  gimple stmt = VEC_index (gimple, stmts, 0);\n   imm_use_iterator imm_iter;\n   gimple use_stmt;\n-  stmt_vec_info stmt_vinfo; \n+  stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n   slp_void_p child;\n+  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n+  struct loop *loop = NULL;\n+  bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_vinfo);\n+  basic_block bb = NULL;\n \n   if (!node)\n     return;\n \n+  if (loop_vinfo)\n+    loop = LOOP_VINFO_LOOP (loop_vinfo);\n+  else\n+    bb = BB_VINFO_BB (bb_vinfo);\n+\n   FOR_EACH_VEC_ELT (gimple, SLP_TREE_SCALAR_STMTS (node), i, stmt)\n     if (PURE_SLP_STMT (vinfo_for_stmt (stmt))\n \t&& TREE_CODE (gimple_op (stmt, 0)) == SSA_NAME)\n       FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, gimple_op (stmt, 0))\n-\tif ((stmt_vinfo = vinfo_for_stmt (use_stmt))\n+\tif (gimple_bb (use_stmt)\n+            && ((loop && flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n+\t\t || bb == gimple_bb (use_stmt))\n+\t    && (stmt_vinfo = vinfo_for_stmt (use_stmt))\n \t    && !STMT_SLP_TYPE (stmt_vinfo)\n             && (STMT_VINFO_RELEVANT (stmt_vinfo)\n                 || VECTORIZABLE_CYCLE_DEF (STMT_VINFO_DEF_TYPE (stmt_vinfo)))\n-            && !(gimple_code (use_stmt) == GIMPLE_PHI\n-                 && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (use_stmt)) \n-                     == vect_reduction_def))\n+\t    && !(gimple_code (use_stmt) == GIMPLE_PHI\n+                 && STMT_VINFO_DEF_TYPE (stmt_vinfo)\n+                  == vect_reduction_def))\n \t  vect_mark_slp_stmts (node, hybrid, i);\n \n   FOR_EACH_VEC_ELT (slp_void_p, SLP_TREE_CHILDREN (node), i, child)"}]}