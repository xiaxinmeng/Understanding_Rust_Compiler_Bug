{"sha": "4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4ZDU0NGJjNjlkY2E5Y2QxYWZlMDkwNWEyZjc4MTZhYTBjZGJlMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-04-04T08:50:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-04-04T08:50:35Z"}, "message": "re PR rtl-optimization/16104 (ICE in reload_cse_simplify_operands, at postreload.c:378 with SSE2 code on -O2)\n\n\tPR rtl-optimization/16104\n\t* fold-const.c (fold_unary): Fix folding of vector conversions.\n\n\t* gcc.c-torture/execute/20050316-1.c: New test.\n\nFrom-SVN: r97529", "tree": {"sha": "1b181db21b4c2c7cc2de3a1c480cc3fa88cec9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b181db21b4c2c7cc2de3a1c480cc3fa88cec9ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/comments", "author": null, "committer": null, "parents": [{"sha": "edc3676fb0a275db10df71dd63f040e2f2a7f1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc3676fb0a275db10df71dd63f040e2f2a7f1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc3676fb0a275db10df71dd63f040e2f2a7f1b6"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "fe589da8458dc2bd57dccd4e344a7476cd9a210a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3", "patch": "@@ -1,3 +1,9 @@\n+2005-04-04  Richard Henderson  <rth@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/16104\n+\t* fold-const.c (fold_unary): Fix folding of vector conversions.\n+\n 2005-04-04  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config.gcc (xstormy16-*-elf): Set extra_options."}, {"sha": "efbf8ed5c78bb6b4b031ce9ae13a484855879f9b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3", "patch": "@@ -6772,16 +6772,19 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t  int inside_int = INTEGRAL_TYPE_P (inside_type);\n \t  int inside_ptr = POINTER_TYPE_P (inside_type);\n \t  int inside_float = FLOAT_TYPE_P (inside_type);\n+\t  int inside_vec = TREE_CODE (inside_type) == VECTOR_TYPE;\n \t  unsigned int inside_prec = TYPE_PRECISION (inside_type);\n \t  int inside_unsignedp = TYPE_UNSIGNED (inside_type);\n \t  int inter_int = INTEGRAL_TYPE_P (inter_type);\n \t  int inter_ptr = POINTER_TYPE_P (inter_type);\n \t  int inter_float = FLOAT_TYPE_P (inter_type);\n+\t  int inter_vec = TREE_CODE (inter_type) == VECTOR_TYPE;\n \t  unsigned int inter_prec = TYPE_PRECISION (inter_type);\n \t  int inter_unsignedp = TYPE_UNSIGNED (inter_type);\n \t  int final_int = INTEGRAL_TYPE_P (type);\n \t  int final_ptr = POINTER_TYPE_P (type);\n \t  int final_float = FLOAT_TYPE_P (type);\n+\t  int final_vec = TREE_CODE (type) == VECTOR_TYPE;\n \t  unsigned int final_prec = TYPE_PRECISION (type);\n \t  int final_unsignedp = TYPE_UNSIGNED (type);\n \n@@ -6801,12 +6804,15 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t     since then we sometimes need the inner conversion.  Likewise if\n \t     the outer has a precision not equal to the size of its mode.  */\n \t  if ((((inter_int || inter_ptr) && (inside_int || inside_ptr))\n-\t       || (inter_float && inside_float))\n+\t       || (inter_float && inside_float)\n+\t       || (inter_vec && inside_vec))\n \t      && inter_prec >= inside_prec\n-\t      && (inter_float || inter_unsignedp == inside_unsignedp)\n+\t      && (inter_float || inter_vec\n+\t\t  || inter_unsignedp == inside_unsignedp)\n \t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (type))\n \t\t    && TYPE_MODE (type) == TYPE_MODE (inter_type))\n-\t      && ! final_ptr)\n+\t      && ! final_ptr\n+\t      && (! final_vec || inter_prec == inside_prec))\n \t    return fold_build1 (code, type, TREE_OPERAND (op0, 0));\n \n \t  /* If we have a sign-extension of a zero-extended value, we can\n@@ -6818,6 +6824,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \n \t  /* Two conversions in a row are not needed unless:\n \t     - some conversion is floating-point (overstrict for now), or\n+\t     - some conversion is a vector (overstrict for now), or\n \t     - the intermediate type is narrower than both initial and\n \t       final, or\n \t     - the intermediate type and innermost type differ in signedness,\n@@ -6827,6 +6834,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t     - the final type is a pointer type and the precisions of the\n \t       initial and intermediate types differ.  */\n \t  if (! inside_float && ! inter_float && ! final_float\n+\t      && ! inside_vec && ! inter_vec && ! final_vec\n \t      && (inter_prec > inside_prec || inter_prec > final_prec)\n \t      && ! (inside_int && inter_int\n \t\t    && inter_unsignedp != inside_unsignedp"}, {"sha": "4abe23ea4de2e13cd2a33c155417920b88e65025", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3", "patch": "@@ -1,3 +1,8 @@\n+2005-04-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/16104\n+\t* gcc.c-torture/execute/20050316-1.c: New test.\n+\n 2005-04-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/template/spec23.C: Fix dg-error text."}, {"sha": "2a1c6254dfaf38b2bcdeefd23ecb9fe1ab8db175", "filename": "gcc/testsuite/gcc.c-torture/execute/20050316-1.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050316-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050316-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050316-1.c?ref=4b8d544bc69dca9cd1afe0905a2f7816aa0cdbe3", "patch": "@@ -0,0 +1,69 @@\n+/* PR rtl-optimization/16104 */\n+\n+extern void abort (void);\n+\n+typedef int V2SI __attribute__ ((vector_size (8)));\n+typedef unsigned int V2USI __attribute__ ((vector_size (8)));\n+typedef short V2HI __attribute__ ((vector_size (4)));\n+typedef unsigned int V2UHI __attribute__ ((vector_size (4)));\n+\n+int\n+test1 (void)\n+{\n+  return (long long) (V2SI) 0LL;\n+}\n+\n+int\n+test2 (V2SI x)\n+{\n+  return (long long) x;\n+}\n+\n+V2SI\n+test3 (void)\n+{\n+  return (V2SI) (long long) (int) (V2HI) 0;\n+}\n+\n+V2SI\n+test4 (V2HI x)\n+{\n+  return (V2SI) (long long) (int) x;\n+}\n+\n+V2SI\n+test5 (V2USI x)\n+{\n+  return (V2SI) x;\n+}\n+\n+int\n+main (void)\n+{\n+  if (sizeof (short) != 2 || sizeof (int) != 4 || sizeof (long long) != 8)\n+    return 0;\n+\n+  if (test1 () != 0)\n+    abort ();\n+\n+  V2SI x = { 2, 2 };\n+  if (test2 (x) != 2)\n+    abort ();\n+\n+  union { V2SI x; int y[2]; V2USI z; long long l; } u;\n+  u.x = test3 ();\n+  if (u.y[0] != 0 || u.y[1] != 0)\n+    abort ();\n+\n+  V2HI y = { 4, 4 };\n+  union { V2SI x; long long y; } v;\n+  v.x = test4 (y);\n+  if (v.y != 0x40004)\n+    abort ();\n+\n+  V2USI z = { 6, 6 };\n+  u.x = test5 (z);\n+  if (u.y[0] != 6 || u.y[1] != 6)\n+    abort ();\n+  return 0;\n+}"}]}