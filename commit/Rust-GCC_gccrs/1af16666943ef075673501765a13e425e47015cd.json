{"sha": "1af16666943ef075673501765a13e425e47015cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmMTY2NjY5NDNlZjA3NTY3MzUwMTc2NWExM2U0MjVlNDcwMTVjZA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-07-27T14:40:21Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2021-07-28T12:53:05Z"}, "message": "amdgcn: Fix attributes for LLVM-12 [PR 100208]\n\nThis should work for a wider range of LLVM 12 variants now.\nMore work required for LLVM 13 though.\n\ngcc/ChangeLog:\n\n\tPR target/100208\n\t* config.in: Regenerate.\n\t* config/gcn/gcn-hsa.h (A_FIJI): New define.\n\t(A_900): New define.\n\t(A_906): New define.\n\t(A_908): New define.\n\t(ASM_SPEC): Use A_FIJI, A_900, A_906 and A_908.\n\t* config/gcn/gcn.c (output_file_start): Adjust attributes according\n\tto the assembler capabilities.\n\t* config/gcn/mkoffload.c (main): Likewise.\n\t* configure: Regenerate.\n\t* configure.ac: Add tests for LLVM assembler attribute features.", "tree": {"sha": "125841bf2e8d59d6fa25396abc5e6d9a274c9116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/125841bf2e8d59d6fa25396abc5e6d9a274c9116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af16666943ef075673501765a13e425e47015cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af16666943ef075673501765a13e425e47015cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af16666943ef075673501765a13e425e47015cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af16666943ef075673501765a13e425e47015cd/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04600a47224b1ff85c6fb870218b51969cceff21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04600a47224b1ff85c6fb870218b51969cceff21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04600a47224b1ff85c6fb870218b51969cceff21"}], "stats": {"total": 241, "additions": 235, "deletions": 6}, "files": [{"sha": "affaff2e33c0c8da8212c77db72736887e27dbad", "filename": "gcc/config.in", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=1af16666943ef075673501765a13e425e47015cd", "patch": "@@ -1449,6 +1449,30 @@\n #endif\n \n \n+/* Define if your assembler allows -mattr=+sram-ecc for fiji. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GCN_SRAM_ECC_FIJI\n+#endif\n+\n+\n+/* Define if your assembler allows -mattr=+sram-ecc for gfx900. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GCN_SRAM_ECC_GFX900\n+#endif\n+\n+\n+/* Define if your assembler allows -mattr=+sram-ecc for gfx906. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GCN_SRAM_ECC_GFX906\n+#endif\n+\n+\n+/* Define if your assembler allows -mattr=+sram-ecc for gfx908. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GCN_SRAM_ECC_GFX908\n+#endif\n+\n+\n /* Define to 1 if you have the `getchar_unlocked' function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GETCHAR_UNLOCKED"}, {"sha": "fc99c8db7520f23fd3a328c3bd190bd6468a276d", "filename": "gcc/config/gcn/gcn-hsa.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h?ref=1af16666943ef075673501765a13e425e47015cd", "patch": "@@ -75,6 +75,28 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n    supported for gcn.  */\n #define GOMP_SELF_SPECS \"\"\n \n+#ifdef HAVE_GCN_SRAM_ECC_FIJI\n+#define A_FIJI\n+#else\n+#define A_FIJI \"!march=*:;march=fiji:;\"\n+#endif\n+#ifdef HAVE_GCN_SRAM_ECC_GFX900\n+#define A_900\n+#else\n+#define A_900 \"march=gfx900:;\"\n+#endif\n+#ifdef HAVE_GCN_SRAM_ECC_GFX906\n+#define A_906\n+#else\n+#define A_906 \"march=gfx906:;\"\n+#endif\n+#ifdef HAVE_GCN_SRAM_ECC_GFX908\n+#define A_908\n+#else\n+#define A_908 \"march=gfx908:;\"\n+#endif\n+\n+/* These targets can't have SRAM-ECC, even if a broken assembler allows it.  */\n #define DRIVER_SELF_SPECS \\\n   \"%{march=fiji|march=gfx900|march=gfx906:%{!msram-ecc=*:-msram-ecc=off}}\"\n \n@@ -83,7 +105,8 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n \t\t  \"%:last_arg(%{march=*:-mcpu=%*}) \" \\\n \t\t  \"-mattr=%{mxnack:+xnack;:-xnack} \" \\\n \t\t  /* FIXME: support \"any\" when we move to HSACOv4.  */ \\\n-\t\t  \"-mattr=%{!msram-ecc=off:+sram-ecc;:-sram-ecc} \" \\\n+\t\t  \"-mattr=%{\" A_FIJI A_900 A_906 A_908 \\\n+\t\t\t    \"!msram-ecc=off:+sram-ecc;:-sram-ecc} \" \\\n \t\t  \"-filetype=obj\"\n #define LINK_SPEC \"--pie --export-dynamic\"\n #define LIB_SPEC  \"-lc\""}, {"sha": "d25c4e54e166c9b31762ba3c2a2d41c048b01cb4", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=1af16666943ef075673501765a13e425e47015cd", "patch": "@@ -5181,18 +5181,39 @@ static void\n output_file_start (void)\n {\n   const char *cpu;\n+  bool use_sram = flag_sram_ecc;\n   switch (gcn_arch)\n     {\n-    case PROCESSOR_FIJI: cpu = \"gfx803\"; break;\n-    case PROCESSOR_VEGA10: cpu = \"gfx900\"; break;\n-    case PROCESSOR_VEGA20: cpu = \"gfx906\"; break;\n-    case PROCESSOR_GFX908: cpu = \"gfx908\"; break;\n+    case PROCESSOR_FIJI:\n+      cpu = \"gfx803\";\n+#ifndef HAVE_GCN_SRAM_ECC_FIJI\n+      use_sram = false;\n+#endif\n+      break;\n+    case PROCESSOR_VEGA10:\n+      cpu = \"gfx900\";\n+#ifndef HAVE_GCN_SRAM_ECC_GFX900\n+      use_sram = false;\n+#endif\n+      break;\n+    case PROCESSOR_VEGA20:\n+      cpu = \"gfx906\";\n+#ifndef HAVE_GCN_SRAM_ECC_GFX906\n+      use_sram = false;\n+#endif\n+      break;\n+    case PROCESSOR_GFX908:\n+      cpu = \"gfx908\";\n+#ifndef HAVE_GCN_SRAM_ECC_GFX908\n+      use_sram = false;\n+#endif\n+      break;\n     default: gcc_unreachable ();\n     }\n \n   const char *xnack = (flag_xnack ? \"+xnack\" : \"\");\n   /* FIXME: support \"any\" when we move to HSACOv4.  */\n-  const char *sram_ecc = (flag_sram_ecc ? \"+sram-ecc\" : \"\");\n+  const char *sram_ecc = (use_sram ? \"+sram-ecc\" : \"\");\n \n   fprintf(asm_out_file, \"\\t.amdgcn_target \\\"amdgcn-unknown-amdhsa--%s%s%s\\\"\\n\",\n \t  cpu, xnack, sram_ecc);"}, {"sha": "732bdfd98e57858eb0aec38493d4787f40964026", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=1af16666943ef075673501765a13e425e47015cd", "patch": "@@ -898,6 +898,9 @@ main (int argc, char **argv)\n       case EF_AMDGPU_MACH_AMDGCN_GFX803:\n       case EF_AMDGPU_MACH_AMDGCN_GFX900:\n       case EF_AMDGPU_MACH_AMDGCN_GFX906:\n+#ifndef HAVE_GCN_SRAM_ECC_GFX908\n+      case EF_AMDGPU_MACH_AMDGCN_GFX908:\n+#endif\n \tbreak;\n       default:\n \t/* FIXME: change this when we move to HSACOv4.  */"}, {"sha": "8b5acd76b2c472ed34e87ca42db70d843d658cbe", "filename": "gcc/configure", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1af16666943ef075673501765a13e425e47015cd", "patch": "@@ -29046,6 +29046,135 @@ $as_echo \"$gcc_cv_as_gcn_global_load_fixed\" >&6; }\n     ;;\n esac\n \n+case \"$target\" in\n+  amdgcn-* | gcn-*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=+sram-ecc for fiji\" >&5\n+$as_echo_n \"checking assembler for assembler accepts -mattr=+sram-ecc for fiji... \" >&6; }\n+if ${gcc_cv_as_gcn_sram_ecc_fiji+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_gcn_sram_ecc_fiji=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.amdgcn_target \"amdgcn-unknown-amdhsa--gfx803+sram-ecc\"' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=fiji -mattr=-xnack -mattr=+sram-ecc -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_gcn_sram_ecc_fiji=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_sram_ecc_fiji\" >&5\n+$as_echo \"$gcc_cv_as_gcn_sram_ecc_fiji\" >&6; }\n+if test $gcc_cv_as_gcn_sram_ecc_fiji = yes; then\n+\n+$as_echo \"#define HAVE_GCN_SRAM_ECC_FIJI 1\" >>confdefs.h\n+\n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=+sram-ecc for gfx900\" >&5\n+$as_echo_n \"checking assembler for assembler accepts -mattr=+sram-ecc for gfx900... \" >&6; }\n+if ${gcc_cv_as_gcn_sram_ecc_gfx900+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_gcn_sram_ecc_gfx900=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.amdgcn_target \"amdgcn-unknown-amdhsa--gfx900+sram-ecc\"' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx900 -mattr=-xnack -mattr=+sram-ecc -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_gcn_sram_ecc_gfx900=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_sram_ecc_gfx900\" >&5\n+$as_echo \"$gcc_cv_as_gcn_sram_ecc_gfx900\" >&6; }\n+if test $gcc_cv_as_gcn_sram_ecc_gfx900 = yes; then\n+\n+$as_echo \"#define HAVE_GCN_SRAM_ECC_GFX900 1\" >>confdefs.h\n+\n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=+sram-ecc for gfx906\" >&5\n+$as_echo_n \"checking assembler for assembler accepts -mattr=+sram-ecc for gfx906... \" >&6; }\n+if ${gcc_cv_as_gcn_sram_ecc_gfx906+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_gcn_sram_ecc_gfx906=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.amdgcn_target \"amdgcn-unknown-amdhsa--gfx906+sram-ecc\"' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx906 -mattr=-xnack -mattr=+sram-ecc -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_gcn_sram_ecc_gfx906=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_sram_ecc_gfx906\" >&5\n+$as_echo \"$gcc_cv_as_gcn_sram_ecc_gfx906\" >&6; }\n+if test $gcc_cv_as_gcn_sram_ecc_gfx906 = yes; then\n+\n+$as_echo \"#define HAVE_GCN_SRAM_ECC_GFX906 1\" >>confdefs.h\n+\n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=+sram-ecc for gfx908\" >&5\n+$as_echo_n \"checking assembler for assembler accepts -mattr=+sram-ecc for gfx908... \" >&6; }\n+if ${gcc_cv_as_gcn_sram_ecc_gfx908+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_gcn_sram_ecc_gfx908=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.amdgcn_target \"amdgcn-unknown-amdhsa--gfx908+sram-ecc\"' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx908 -mattr=-xnack -mattr=+sram-ecc -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_gcn_sram_ecc_gfx908=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_sram_ecc_gfx908\" >&5\n+$as_echo \"$gcc_cv_as_gcn_sram_ecc_gfx908\" >&6; }\n+if test $gcc_cv_as_gcn_sram_ecc_gfx908 = yes; then\n+\n+$as_echo \"#define HAVE_GCN_SRAM_ECC_GFX908 1\" >>confdefs.h\n+\n+fi\n+\n+    ;;\n+esac\n+\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n # info to the output file.  So, as supported targets are added to gas 2.11,"}, {"sha": "c8e0d63fe707a724133d4779ca647e3b5ff431dc", "filename": "gcc/configure.ac", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af16666943ef075673501765a13e425e47015cd/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=1af16666943ef075673501765a13e425e47015cd", "patch": "@@ -5431,6 +5431,35 @@ EOF\n     ;;\n esac\n \n+case \"$target\" in\n+  amdgcn-* | gcn-*)\n+    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=+sram-ecc for fiji],\n+      gcc_cv_as_gcn_sram_ecc_fiji,,\n+      [-triple=amdgcn--amdhsa -mcpu=fiji -mattr=-xnack -mattr=+sram-ecc],\n+      [.amdgcn_target \"amdgcn-unknown-amdhsa--gfx803+sram-ecc\"],,\n+      [AC_DEFINE(HAVE_GCN_SRAM_ECC_FIJI, 1,\n+       [Define if your assembler allows -mattr=+sram-ecc for fiji.])])\n+    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=+sram-ecc for gfx900],\n+      gcc_cv_as_gcn_sram_ecc_gfx900,,\n+      [-triple=amdgcn--amdhsa -mcpu=gfx900 -mattr=-xnack -mattr=+sram-ecc],\n+      [.amdgcn_target \"amdgcn-unknown-amdhsa--gfx900+sram-ecc\"],,\n+      [AC_DEFINE(HAVE_GCN_SRAM_ECC_GFX900, 1,\n+       [Define if your assembler allows -mattr=+sram-ecc for gfx900.])])\n+    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=+sram-ecc for gfx906],\n+      gcc_cv_as_gcn_sram_ecc_gfx906,,\n+      [-triple=amdgcn--amdhsa -mcpu=gfx906 -mattr=-xnack -mattr=+sram-ecc],\n+      [.amdgcn_target \"amdgcn-unknown-amdhsa--gfx906+sram-ecc\"],,\n+      [AC_DEFINE(HAVE_GCN_SRAM_ECC_GFX906, 1,\n+       [Define if your assembler allows -mattr=+sram-ecc for gfx906.])])\n+    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=+sram-ecc for gfx908],\n+      gcc_cv_as_gcn_sram_ecc_gfx908,,\n+      [-triple=amdgcn--amdhsa -mcpu=gfx908 -mattr=-xnack -mattr=+sram-ecc],\n+      [.amdgcn_target \"amdgcn-unknown-amdhsa--gfx908+sram-ecc\"],,\n+      [AC_DEFINE(HAVE_GCN_SRAM_ECC_GFX908, 1,\n+       [Define if your assembler allows -mattr=+sram-ecc for gfx908.])])\n+    ;;\n+esac\n+\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n # info to the output file.  So, as supported targets are added to gas 2.11,"}]}