{"sha": "030d25f41343f0996b56368a54e609959428a0c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMwZDI1ZjQxMzQzZjA5OTZiNTYzNjhhNTRlNjA5OTU5NDI4YTBjNg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2006-02-17T16:08:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-17T16:08:08Z"}, "message": "sem_ch3.adb (Build_Discriminated_Subtype): In case of concurrent type we cannot inherit the primitive operations...\n\n2006-02-17  Javier Miranda  <miranda@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Discriminated_Subtype): In case of concurrent\n\ttype we cannot inherit the primitive operations; we inherit the\n\tCorresponding_Record_Type (which has the list of primitive operations).\n\t(Check_Anonymous_Access_Types): When creating anonymous access types for\n\taccess components, use Rewrite in order to preserve the tree structure,\n\tfor ASIS use.\n\t(Analyze_Object_Declaration): For limited types with access\n\tdiscriminants with defaults initialized by an aggregate, obtain\n\tsubtype from aggregate as for other mutable types.\n\t(Derived_Type_Declaration): If the derived type is a limited interface,\n\tset the corresponding flag (Is_Limited_Record is not sufficient).\n\nFrom-SVN: r111193", "tree": {"sha": "52bd5a1a367bbc697e2060f4f05fb59a110fdf52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52bd5a1a367bbc697e2060f4f05fb59a110fdf52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/030d25f41343f0996b56368a54e609959428a0c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/030d25f41343f0996b56368a54e609959428a0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/030d25f41343f0996b56368a54e609959428a0c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/030d25f41343f0996b56368a54e609959428a0c6/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "861f090ef3bdb37838d74515311e419ddb35b549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861f090ef3bdb37838d74515311e419ddb35b549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861f090ef3bdb37838d74515311e419ddb35b549"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "2ece4cab255dc5037046051c8c93031a69e5f105", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/030d25f41343f0996b56368a54e609959428a0c6/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/030d25f41343f0996b56368a54e609959428a0c6/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=030d25f41343f0996b56368a54e609959428a0c6", "patch": "@@ -1497,6 +1497,7 @@ package body Sem_Ch3 is\n       P := Private_Component (T);\n \n       if Present (P) then\n+\n          --  Check for circular definitions\n \n          if P = Any_Type then\n@@ -2384,7 +2385,17 @@ package body Sem_Ch3 is\n         and then not Is_Constrained (T)\n         and then Has_Discriminants (T)\n       then\n-         Act_T := Build_Default_Subtype;\n+         if No (E) then\n+            Act_T := Build_Default_Subtype;\n+         else\n+            --  Ada 2005:  a limited object may be initialized by means of an\n+            --  aggregate. If the type has default discriminants it has an\n+            --  unconstrained nominal type, Its actual subtype will be obtained\n+            --  from the aggregate, and not from the default discriminants.\n+\n+            Act_T := Etype (E);\n+         end if;\n+\n          Rewrite (Object_Definition (N), New_Occurrence_Of (Act_T, Loc));\n \n       elsif Present (Underlying_Type (T))\n@@ -6985,7 +6996,20 @@ package body Sem_Ch3 is\n       end if;\n \n       if Is_Tagged_Type (T) then\n-         Set_Primitive_Operations (Def_Id, Primitive_Operations (T));\n+\n+         --  Ada 2005 (AI-251): In case of concurrent types we inherit the\n+         --  concurrent record type (which has the list of primitive\n+         --  operations).\n+\n+         if Ada_Version >= Ada_05\n+           and then Is_Concurrent_Type (T)\n+         then\n+            Set_Corresponding_Record_Type (Def_Id,\n+               Corresponding_Record_Type (T));\n+         else\n+            Set_Primitive_Operations (Def_Id, Primitive_Operations (T));\n+         end if;\n+\n          Set_Is_Abstract (Def_Id, Is_Abstract (T));\n       end if;\n \n@@ -11195,6 +11219,10 @@ package body Sem_Ch3 is\n       if Limited_Present (Def) then\n          Set_Is_Limited_Record (T);\n \n+         if Is_Interface (T) then\n+            Set_Is_Limited_Interface (T);\n+         end if;\n+\n          if not Is_Limited_Type (Parent_Type)\n            and then\n              (not Is_Interface (Parent_Type)\n@@ -14856,9 +14884,10 @@ package body Sem_Ch3 is\n                Insert_Before (N, Decl);\n                Analyze (Decl);\n \n-               Set_Access_Definition (Component_Definition (Comp), Empty);\n-               Set_Subtype_Indication (Component_Definition (Comp),\n-                  New_Occurrence_Of (Anon_Access, Loc));\n+               Rewrite (Component_Definition (Comp),\n+                 Make_Component_Definition (Loc,\n+                   Subtype_Indication =>\n+                  New_Occurrence_Of (Anon_Access, Loc)));\n                Set_Ekind (Anon_Access, E_Anonymous_Access_Type);\n                Set_Is_Local_Anonymous_Access (Anon_Access);\n             end if;"}]}