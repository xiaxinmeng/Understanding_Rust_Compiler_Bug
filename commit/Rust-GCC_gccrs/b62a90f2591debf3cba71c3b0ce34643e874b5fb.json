{"sha": "b62a90f2591debf3cba71c3b0ce34643e874b5fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYyYTkwZjI1OTFkZWJmM2NiYTcxYzNiMGNlMzQ2NDNlODc0YjVmYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T13:09:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T13:09:53Z"}, "message": "Makefile.in: (stamp-tools): Add handling of snames.ad[sb]\n\n2009-04-10  Thomas Quinot  <quinot@adacore.com>\n\ngnattools/\n\t* Makefile.in: (stamp-tools): Add handling of snames.ad[sb]\n\nada/\n\t* snames.h, snames.ads, snames.adb: Remove files, now generated from\n\ttemplates.\n\n\t* snames.h-tmpl, snames.ads-tmpl, snames.adb-tmpl: Templates for the\n\tabove.\n\n\t* xsnamest.adb: New file.\n\n\t* gcc-interface/Make-lang.in: New target for automated generation of\n\tsnames.ads, snames.adb and snames.h\n\nFrom-SVN: r145893", "tree": {"sha": "e7c0b78c280386797ba446cb8c787dee6362f9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7c0b78c280386797ba446cb8c787dee6362f9d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b62a90f2591debf3cba71c3b0ce34643e874b5fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b62a90f2591debf3cba71c3b0ce34643e874b5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b62a90f2591debf3cba71c3b0ce34643e874b5fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b62a90f2591debf3cba71c3b0ce34643e874b5fb/comments", "author": null, "committer": null, "parents": [{"sha": "0d24670707462cb06ac0037607ef9df9e733dc44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d24670707462cb06ac0037607ef9df9e733dc44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d24670707462cb06ac0037607ef9df9e733dc44"}], "stats": {"total": 4076, "additions": 1637, "deletions": 2439}, "files": [{"sha": "22031648b0479b6c707f6d949a44456ff26b289a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b62a90f2591debf3cba71c3b0ce34643e874b5fb", "patch": "@@ -1,3 +1,16 @@\n+2009-04-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* snames.h, snames.ads, snames.adb: Remove files, now generated from\n+\ttemplates.\n+\n+\t* snames.h-tmpl, snames.ads-tmpl, snames.adb-tmpl: Templates for the\n+\tabove.\n+\n+\t* xsnamest.adb: New file.\n+\n+\t* gcc-interface/Make-lang.in: New target for automated generation of\n+\tsnames.ads, snames.adb and snames.h\n+\n 2009-04-10  Tristan Gingold  <gingold@adacore.com>\n \n \t* gcc-interface/Makefile.in, gcc-interface/utils.c: Include \"rtl.h\" to"}, {"sha": "3bb6062ea30fd87c3c010c9ef5883228cdd4e950", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=b62a90f2591debf3cba71c3b0ce34643e874b5fb", "patch": "@@ -762,7 +762,7 @@ ada.uninstall:\n ada.mostlyclean:\n \t-$(RM) ada/*$(objext) ada/*.ali ada/b_*.c\n \t-$(RM) ada/*$(coverageexts)\n-\t-$(RM) ada/sdefault.adb ada/stamp-sdefault\n+\t-$(RM) ada/sdefault.adb ada/stamp-sdefault ada/stamp-snames\n \t-$(RMDIR) ada/tools\n ada.clean:\n ada.distclean:\n@@ -792,6 +792,7 @@ ada.maintainer-clean:\n \t-$(RM) ada/nmake.adb\n \t-$(RM) ada/nmake.ads\n \t-$(RM) ada/treeprs.ads\n+\t-$(RM) ada/snames.ads ada/snames.adb ada/snames.h\n \f\n # Stage hooks:\n # The main makefile has already created stage?/ada\n@@ -914,7 +915,7 @@ gnatstage2: force\n # Ada language specific files.\n \n ada_extra_files : ada/treeprs.ads ada/einfo.h ada/sinfo.h ada/nmake.adb \\\n-\tada/nmake.ads\n+\tada/nmake.ads ada/snames.ads ada/snames.adb ada/snames.h\n \n ada/b_gnat1.c : $(GNAT1_ADA_OBJS)\n \t$(GNATBIND) -C $(ADA_INCLUDES) -o ada/b_gnat1.c -n ada/gnat1drv.ali\n@@ -943,6 +944,16 @@ ada/sinfo.h : ada/sinfo.ads ada/xsinfo.adb\n \t$(CP) $^ ada/bldtools/sinfo\n \t(cd ada/bldtools/sinfo && $(GNATMAKE) -q xsinfo && ./xsinfo ../../sinfo.h )\n \n+ada/snames.h ada/snames.ads ada/snames.adb : ada/stamp-snames\n+\t@true\n+\n+ada/stamp-snames : ada/snames.ads-tmpl ada/snames.adb-tmpl ada/snames.h-tmpl ada/xsnamest.adb\n+\t-$(MKDIR) ada/bldtools/snamest\n+\t$(RM) $(addprefix ada/bldtools/snamest/,$(notdir $^))\n+\t$(CP) $^ ada/bldtools/snamest\n+\t(cd ada/bldtools/snamest; gnatmake -q xsnamest ; ./xsnamest ; cp snames.ns ../../snames.ads ; cp snames.nb ../../snames.adb ; cp snames.nh ../../snames.h)\n+\ttouch $@\n+\n ada/nmake.adb : ada/sinfo.ads ada/nmake.adt ada/xnmake.adb ada/xutil.ads ada/xutil.adb\n \t-$(MKDIR) ada/bldtools/nmake_b\n \t$(RM) $(addprefix ada/bldtools/nmake_b/,$(notdir $^))"}, {"sha": "b264b687fc6ab581a238e64feddfead450a92e0e", "filename": "gcc/ada/snames.adb", "status": "removed", "additions": 0, "deletions": 1218, "changes": 1218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=0d24670707462cb06ac0037607ef9df9e733dc44", "patch": "@@ -1,1218 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                               S N A M E S                                --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Opt;   use Opt;\n-with Table;\n-with Types; use Types;\n-\n-package body Snames is\n-\n-   --  Table used to record convention identifiers\n-\n-   type Convention_Id_Entry is record\n-      Name       : Name_Id;\n-      Convention : Convention_Id;\n-   end record;\n-\n-   package Convention_Identifiers is new Table.Table (\n-     Table_Component_Type => Convention_Id_Entry,\n-     Table_Index_Type     => Int,\n-     Table_Low_Bound      => 1,\n-     Table_Initial        => 50,\n-     Table_Increment      => 200,\n-     Table_Name           => \"Name_Convention_Identifiers\");\n-\n-   --  Table of names to be set by Initialize. Each name is terminated by a\n-   --  single #, and the end of the list is marked by a null entry, i.e. by\n-   --  two # marks in succession. Note that the table does not include the\n-   --  entries for a-z, since these are initialized by Namet itself.\n-\n-   Preset_Names : constant String :=\n-     \"_parent#\" &\n-     \"_tag#\" &\n-     \"off#\" &\n-     \"space#\" &\n-     \"time#\" &\n-     \"_abort_signal#\" &\n-     \"_alignment#\" &\n-     \"_assign#\" &\n-     \"_atcb#\" &\n-     \"_chain#\" &\n-     \"_clean#\" &\n-     \"_controller#\" &\n-     \"_entry_bodies#\" &\n-     \"_expunge#\" &\n-     \"_final_list#\" &\n-     \"_idepth#\" &\n-     \"_init#\" &\n-     \"_local_final_list#\" &\n-     \"_master#\" &\n-     \"_object#\" &\n-     \"_postconditions#\" &\n-     \"_priority#\" &\n-     \"_process_atsd#\" &\n-     \"_relative_deadline#\" &\n-     \"_result#\" &\n-     \"_secondary_stack#\" &\n-     \"_service#\" &\n-     \"_size#\" &\n-     \"_stack#\" &\n-     \"_tags#\" &\n-     \"_task#\" &\n-     \"_task_id#\" &\n-     \"_task_info#\" &\n-     \"_task_name#\" &\n-     \"_trace_sp#\" &\n-     \"_disp_asynchronous_select#\" &\n-     \"_disp_conditional_select#\" &\n-     \"_disp_get_prim_op_kind#\" &\n-     \"_disp_get_task_id#\" &\n-     \"_disp_requeue#\" &\n-     \"_disp_timed_select#\" &\n-     \"initialize#\" &\n-     \"adjust#\" &\n-     \"finalize#\" &\n-     \"next#\" &\n-     \"prev#\" &\n-     \"allocate#\" &\n-     \"deallocate#\" &\n-     \"dereference#\" &\n-     \"decimal_io#\" &\n-     \"enumeration_io#\" &\n-     \"fixed_io#\" &\n-     \"float_io#\" &\n-     \"integer_io#\" &\n-     \"modular_io#\" &\n-     \"const#\" &\n-     \"<error>#\" &\n-     \"go#\" &\n-     \"put#\" &\n-     \"put_line#\" &\n-     \"to#\" &\n-     \"exception_traces#\" &\n-     \"finalization#\" &\n-     \"finalization_root#\" &\n-     \"interfaces#\" &\n-     \"most_recent_exception#\" &\n-     \"standard#\" &\n-     \"system#\" &\n-     \"text_io#\" &\n-     \"wide_text_io#\" &\n-     \"wide_wide_text_io#\" &\n-     \"no_dsa#\" &\n-     \"garlic_dsa#\" &\n-     \"polyorb_dsa#\" &\n-     \"addr#\" &\n-     \"async#\" &\n-     \"get_active_partition_id#\" &\n-     \"get_rci_package_receiver#\" &\n-     \"get_rci_package_ref#\" &\n-     \"origin#\" &\n-     \"params#\" &\n-     \"partition#\" &\n-     \"partition_interface#\" &\n-     \"ras#\" &\n-     \"_call#\" &\n-     \"rci_name#\" &\n-     \"receiver#\" &\n-     \"rpc#\" &\n-     \"subp_id#\" &\n-     \"operation#\" &\n-     \"argument#\" &\n-     \"arg_modes#\" &\n-     \"handler#\" &\n-     \"target#\" &\n-     \"req#\" &\n-     \"obj_typecode#\" &\n-     \"stub#\" &\n-     \"Oabs#\" &\n-     \"Oand#\" &\n-     \"Omod#\" &\n-     \"Onot#\" &\n-     \"Oor#\" &\n-     \"Orem#\" &\n-     \"Oxor#\" &\n-     \"Oeq#\" &\n-     \"One#\" &\n-     \"Olt#\" &\n-     \"Ole#\" &\n-     \"Ogt#\" &\n-     \"Oge#\" &\n-     \"Oadd#\" &\n-     \"Osubtract#\" &\n-     \"Oconcat#\" &\n-     \"Omultiply#\" &\n-     \"Odivide#\" &\n-     \"Oexpon#\" &\n-     \"ada_83#\" &\n-     \"ada_95#\" &\n-     \"ada_05#\" &\n-     \"ada_2005#\" &\n-     \"assertion_policy#\" &\n-     \"assume_no_invalid_values#\" &\n-     \"c_pass_by_copy#\" &\n-     \"check_name#\" &\n-     \"check_policy#\" &\n-     \"compile_time_error#\" &\n-     \"compile_time_warning#\" &\n-     \"compiler_unit#\" &\n-     \"component_alignment#\" &\n-     \"convention_identifier#\" &\n-     \"debug_policy#\" &\n-     \"detect_blocking#\" &\n-     \"discard_names#\" &\n-     \"elaboration_checks#\" &\n-     \"eliminate#\" &\n-     \"extend_system#\" &\n-     \"extensions_allowed#\" &\n-     \"external_name_casing#\" &\n-     \"favor_top_level#\" &\n-     \"float_representation#\" &\n-     \"implicit_packing#\" &\n-     \"initialize_scalars#\" &\n-     \"interrupt_state#\" &\n-     \"license#\" &\n-     \"locking_policy#\" &\n-     \"long_float#\" &\n-     \"no_run_time#\" &\n-     \"no_strict_aliasing#\" &\n-     \"normalize_scalars#\" &\n-     \"optimize_alignment#\" &\n-     \"persistent_bss#\" &\n-     \"polling#\" &\n-     \"priority_specific_dispatching#\" &\n-     \"profile#\" &\n-     \"profile_warnings#\" &\n-     \"propagate_exceptions#\" &\n-     \"queuing_policy#\" &\n-     \"ravenscar#\" &\n-     \"restricted_run_time#\" &\n-     \"restrictions#\" &\n-     \"restriction_warnings#\" &\n-     \"reviewable#\" &\n-     \"source_file_name#\" &\n-     \"source_file_name_project#\" &\n-     \"style_checks#\" &\n-     \"suppress#\" &\n-     \"suppress_exception_locations#\" &\n-     \"task_dispatching_policy#\" &\n-     \"universal_data#\" &\n-     \"unsuppress#\" &\n-     \"use_vads_size#\" &\n-     \"validity_checks#\" &\n-     \"warnings#\" &\n-     \"wide_character_encoding#\" &\n-     \"abort_defer#\" &\n-     \"all_calls_remote#\" &\n-     \"annotate#\" &\n-     \"assert#\" &\n-     \"asynchronous#\" &\n-     \"atomic#\" &\n-     \"atomic_components#\" &\n-     \"attach_handler#\" &\n-     \"check#\" &\n-     \"cil_constructor#\" &\n-     \"comment#\" &\n-     \"common_object#\" &\n-     \"complete_representation#\" &\n-     \"complex_representation#\" &\n-     \"controlled#\" &\n-     \"convention#\" &\n-     \"cpp_class#\" &\n-     \"cpp_constructor#\" &\n-     \"cpp_virtual#\" &\n-     \"cpp_vtable#\" &\n-     \"debug#\" &\n-     \"elaborate#\" &\n-     \"elaborate_all#\" &\n-     \"elaborate_body#\" &\n-     \"export#\" &\n-     \"export_exception#\" &\n-     \"export_function#\" &\n-     \"export_object#\" &\n-     \"export_procedure#\" &\n-     \"export_value#\" &\n-     \"export_valued_procedure#\" &\n-     \"external#\" &\n-     \"finalize_storage_only#\" &\n-     \"ident#\" &\n-     \"implemented_by_entry#\" &\n-     \"import#\" &\n-     \"import_exception#\" &\n-     \"import_function#\" &\n-     \"import_object#\" &\n-     \"import_procedure#\" &\n-     \"import_valued_procedure#\" &\n-     \"inline#\" &\n-     \"inline_always#\" &\n-     \"inline_generic#\" &\n-     \"inspection_point#\" &\n-     \"interface_name#\" &\n-     \"interrupt_handler#\" &\n-     \"interrupt_priority#\" &\n-     \"java_constructor#\" &\n-     \"java_interface#\" &\n-     \"keep_names#\" &\n-     \"link_with#\" &\n-     \"linker_alias#\" &\n-     \"linker_constructor#\" &\n-     \"linker_destructor#\" &\n-     \"linker_options#\" &\n-     \"linker_section#\" &\n-     \"list#\" &\n-     \"machine_attribute#\" &\n-     \"main#\" &\n-     \"main_storage#\" &\n-     \"memory_size#\" &\n-     \"no_body#\" &\n-     \"no_return#\" &\n-     \"obsolescent#\" &\n-     \"optimize#\" &\n-     \"pack#\" &\n-     \"page#\" &\n-     \"passive#\" &\n-     \"postcondition#\" &\n-     \"precondition#\" &\n-     \"preelaborable_initialization#\" &\n-     \"preelaborate#\" &\n-     \"preelaborate_05#\" &\n-     \"psect_object#\" &\n-     \"pure#\" &\n-     \"pure_05#\" &\n-     \"pure_function#\" &\n-     \"relative_deadline#\" &\n-     \"remote_call_interface#\" &\n-     \"remote_types#\" &\n-     \"share_generic#\" &\n-     \"shared#\" &\n-     \"shared_passive#\" &\n-     \"source_reference#\" &\n-     \"static_elaboration_desired#\" &\n-     \"stream_convert#\" &\n-     \"subtitle#\" &\n-     \"suppress_all#\" &\n-     \"suppress_debug_info#\" &\n-     \"suppress_initialization#\" &\n-     \"system_name#\" &\n-     \"task_info#\" &\n-     \"task_name#\" &\n-     \"task_storage#\" &\n-     \"thread_local_storage#\" &\n-     \"time_slice#\" &\n-     \"title#\" &\n-     \"unchecked_union#\" &\n-     \"unimplemented_unit#\" &\n-     \"universal_aliasing#\" &\n-     \"unmodified#\" &\n-     \"unreferenced#\" &\n-     \"unreferenced_objects#\" &\n-     \"unreserve_all_interrupts#\" &\n-     \"volatile#\" &\n-     \"volatile_components#\" &\n-     \"weak_external#\" &\n-     \"ada#\" &\n-     \"assembler#\" &\n-     \"cil#\" &\n-     \"cobol#\" &\n-     \"cpp#\" &\n-     \"fortran#\" &\n-     \"intrinsic#\" &\n-     \"java#\" &\n-     \"stdcall#\" &\n-     \"stubbed#\" &\n-     \"asm#\" &\n-     \"assembly#\" &\n-     \"default#\" &\n-     \"c_plus_plus#\" &\n-     \"dll#\" &\n-     \"win32#\" &\n-     \"as_is#\" &\n-     \"assertion#\" &\n-     \"attribute_name#\" &\n-     \"body_file_name#\" &\n-     \"boolean_entry_barriers#\" &\n-     \"casing#\" &\n-     \"code#\" &\n-     \"component#\" &\n-     \"component_size_4#\" &\n-     \"copy#\" &\n-     \"d_float#\" &\n-     \"descriptor#\" &\n-     \"dot_replacement#\" &\n-     \"dynamic#\" &\n-     \"entity#\" &\n-     \"entry_count#\" &\n-     \"external_name#\" &\n-     \"first_optional_parameter#\" &\n-     \"form#\" &\n-     \"g_float#\" &\n-     \"gcc#\" &\n-     \"gnat#\" &\n-     \"gpl#\" &\n-     \"ieee_float#\" &\n-     \"ignore#\" &\n-     \"info#\" &\n-     \"internal#\" &\n-     \"link_name#\" &\n-     \"lowercase#\" &\n-     \"max_entry_queue_depth#\" &\n-     \"max_entry_queue_length#\" &\n-     \"max_size#\" &\n-     \"mechanism#\" &\n-     \"message#\" &\n-     \"mixedcase#\" &\n-     \"modified_gpl#\" &\n-     \"name#\" &\n-     \"nca#\" &\n-     \"no#\" &\n-     \"no_dependence#\" &\n-     \"no_dynamic_attachment#\" &\n-     \"no_dynamic_interrupts#\" &\n-     \"no_requeue#\" &\n-     \"no_requeue_statements#\" &\n-     \"no_task_attributes#\" &\n-     \"no_task_attributes_package#\" &\n-     \"on#\" &\n-     \"policy#\" &\n-     \"parameter_types#\" &\n-     \"reference#\" &\n-     \"restricted#\" &\n-     \"result_mechanism#\" &\n-     \"result_type#\" &\n-     \"runtime#\" &\n-     \"sb#\" &\n-     \"secondary_stack_size#\" &\n-     \"section#\" &\n-     \"semaphore#\" &\n-     \"short_descriptor#\" &\n-     \"simple_barriers#\" &\n-     \"spec_file_name#\" &\n-     \"state#\" &\n-     \"static#\" &\n-     \"stack_size#\" &\n-     \"subunit_file_name#\" &\n-     \"task_stack_size_default#\" &\n-     \"task_type#\" &\n-     \"time_slicing_enabled#\" &\n-     \"top_guard#\" &\n-     \"uba#\" &\n-     \"ubs#\" &\n-     \"ubsb#\" &\n-     \"unit_name#\" &\n-     \"unknown#\" &\n-     \"unrestricted#\" &\n-     \"uppercase#\" &\n-     \"user#\" &\n-     \"vax_float#\" &\n-     \"vms#\" &\n-     \"vtable_ptr#\" &\n-     \"working_storage#\" &\n-     \"abort_signal#\" &\n-     \"access#\" &\n-     \"address#\" &\n-     \"address_size#\" &\n-     \"aft#\" &\n-     \"alignment#\" &\n-     \"asm_input#\" &\n-     \"asm_output#\" &\n-     \"ast_entry#\" &\n-     \"bit#\" &\n-     \"bit_order#\" &\n-     \"bit_position#\" &\n-     \"body_version#\" &\n-     \"callable#\" &\n-     \"caller#\" &\n-     \"code_address#\" &\n-     \"component_size#\" &\n-     \"compose#\" &\n-     \"constrained#\" &\n-     \"count#\" &\n-     \"default_bit_order#\" &\n-     \"definite#\" &\n-     \"delta#\" &\n-     \"denorm#\" &\n-     \"digits#\" &\n-     \"elaborated#\" &\n-     \"emax#\" &\n-     \"enabled#\" &\n-     \"enum_rep#\" &\n-     \"enum_val#\" &\n-     \"epsilon#\" &\n-     \"exponent#\" &\n-     \"external_tag#\" &\n-     \"fast_math#\" &\n-     \"first#\" &\n-     \"first_bit#\" &\n-     \"fixed_value#\" &\n-     \"fore#\" &\n-     \"has_access_values#\" &\n-     \"has_discriminants#\" &\n-     \"has_tagged_values#\" &\n-     \"identity#\" &\n-     \"img#\" &\n-     \"integer_value#\" &\n-     \"invalid_value#\" &\n-     \"large#\" &\n-     \"last#\" &\n-     \"last_bit#\" &\n-     \"leading_part#\" &\n-     \"length#\" &\n-     \"machine_emax#\" &\n-     \"machine_emin#\" &\n-     \"machine_mantissa#\" &\n-     \"machine_overflows#\" &\n-     \"machine_radix#\" &\n-     \"machine_rounding#\" &\n-     \"machine_rounds#\" &\n-     \"machine_size#\" &\n-     \"mantissa#\" &\n-     \"max_size_in_storage_elements#\" &\n-     \"maximum_alignment#\" &\n-     \"mechanism_code#\" &\n-     \"mod#\" &\n-     \"model_emin#\" &\n-     \"model_epsilon#\" &\n-     \"model_mantissa#\" &\n-     \"model_small#\" &\n-     \"modulus#\" &\n-     \"null_parameter#\" &\n-     \"object_size#\" &\n-     \"old#\" &\n-     \"partition_id#\" &\n-     \"passed_by_reference#\" &\n-     \"pool_address#\" &\n-     \"pos#\" &\n-     \"position#\" &\n-     \"priority#\" &\n-     \"range#\" &\n-     \"range_length#\" &\n-     \"result#\" &\n-     \"round#\" &\n-     \"safe_emax#\" &\n-     \"safe_first#\" &\n-     \"safe_large#\" &\n-     \"safe_last#\" &\n-     \"safe_small#\" &\n-     \"scale#\" &\n-     \"scaling#\" &\n-     \"signed_zeros#\" &\n-     \"size#\" &\n-     \"small#\" &\n-     \"storage_size#\" &\n-     \"storage_unit#\" &\n-     \"stream_size#\" &\n-     \"tag#\" &\n-     \"target_name#\" &\n-     \"terminated#\" &\n-     \"to_address#\" &\n-     \"type_class#\" &\n-     \"uet_address#\" &\n-     \"unbiased_rounding#\" &\n-     \"unchecked_access#\" &\n-     \"unconstrained_array#\" &\n-     \"universal_literal_string#\" &\n-     \"unrestricted_access#\" &\n-     \"vads_size#\" &\n-     \"val#\" &\n-     \"valid#\" &\n-     \"value_size#\" &\n-     \"version#\" &\n-     \"wchar_t_size#\" &\n-     \"wide_wide_width#\" &\n-     \"wide_width#\" &\n-     \"width#\" &\n-     \"word_size#\" &\n-     \"adjacent#\" &\n-     \"ceiling#\" &\n-     \"copy_sign#\" &\n-     \"floor#\" &\n-     \"fraction#\" &\n-     \"from_any#\" &\n-     \"image#\" &\n-     \"input#\" &\n-     \"machine#\" &\n-     \"max#\" &\n-     \"min#\" &\n-     \"model#\" &\n-     \"pred#\" &\n-     \"remainder#\" &\n-     \"rounding#\" &\n-     \"succ#\" &\n-     \"to_any#\" &\n-     \"truncation#\" &\n-     \"typecode#\" &\n-     \"value#\" &\n-     \"wide_image#\" &\n-     \"wide_wide_image#\" &\n-     \"wide_value#\" &\n-     \"wide_wide_value#\" &\n-     \"output#\" &\n-     \"read#\" &\n-     \"write#\" &\n-     \"elab_body#\" &\n-     \"elab_spec#\" &\n-     \"storage_pool#\" &\n-     \"base#\" &\n-     \"class#\" &\n-     \"stub_type#\" &\n-     \"ceiling_locking#\" &\n-     \"inheritance_locking#\" &\n-     \"fifo_queuing#\" &\n-     \"priority_queuing#\" &\n-     \"edf_across_priorities#\" &\n-     \"fifo_within_priorities#\" &\n-     \"non_preemptive_within_priorities#\" &\n-     \"round_robin_within_priorities#\" &\n-     \"access_check#\" &\n-     \"accessibility_check#\" &\n-     \"alignment_check#\" &\n-     \"discriminant_check#\" &\n-     \"division_check#\" &\n-     \"elaboration_check#\" &\n-     \"index_check#\" &\n-     \"length_check#\" &\n-     \"overflow_check#\" &\n-     \"range_check#\" &\n-     \"storage_check#\" &\n-     \"tag_check#\" &\n-     \"validity_check#\" &\n-     \"all_checks#\" &\n-     \"abort#\" &\n-     \"abs#\" &\n-     \"accept#\" &\n-     \"and#\" &\n-     \"all#\" &\n-     \"array#\" &\n-     \"at#\" &\n-     \"begin#\" &\n-     \"body#\" &\n-     \"case#\" &\n-     \"constant#\" &\n-     \"declare#\" &\n-     \"delay#\" &\n-     \"do#\" &\n-     \"else#\" &\n-     \"elsif#\" &\n-     \"end#\" &\n-     \"entry#\" &\n-     \"exception#\" &\n-     \"exit#\" &\n-     \"for#\" &\n-     \"function#\" &\n-     \"generic#\" &\n-     \"goto#\" &\n-     \"if#\" &\n-     \"in#\" &\n-     \"is#\" &\n-     \"limited#\" &\n-     \"loop#\" &\n-     \"new#\" &\n-     \"not#\" &\n-     \"null#\" &\n-     \"of#\" &\n-     \"or#\" &\n-     \"others#\" &\n-     \"out#\" &\n-     \"package#\" &\n-     \"pragma#\" &\n-     \"private#\" &\n-     \"procedure#\" &\n-     \"raise#\" &\n-     \"record#\" &\n-     \"rem#\" &\n-     \"renames#\" &\n-     \"return#\" &\n-     \"reverse#\" &\n-     \"select#\" &\n-     \"separate#\" &\n-     \"subtype#\" &\n-     \"task#\" &\n-     \"terminate#\" &\n-     \"then#\" &\n-     \"type#\" &\n-     \"use#\" &\n-     \"when#\" &\n-     \"while#\" &\n-     \"with#\" &\n-     \"xor#\" &\n-     \"divide#\" &\n-     \"enclosing_entity#\" &\n-     \"exception_information#\" &\n-     \"exception_message#\" &\n-     \"exception_name#\" &\n-     \"file#\" &\n-     \"generic_dispatching_constructor#\" &\n-     \"import_address#\" &\n-     \"import_largest_value#\" &\n-     \"import_value#\" &\n-     \"is_negative#\" &\n-     \"line#\" &\n-     \"rotate_left#\" &\n-     \"rotate_right#\" &\n-     \"shift_left#\" &\n-     \"shift_right#\" &\n-     \"shift_right_arithmetic#\" &\n-     \"source_location#\" &\n-     \"unchecked_conversion#\" &\n-     \"unchecked_deallocation#\" &\n-     \"to_pointer#\" &\n-     \"free#\" &\n-     \"abstract#\" &\n-     \"aliased#\" &\n-     \"protected#\" &\n-     \"until#\" &\n-     \"requeue#\" &\n-     \"tagged#\" &\n-     \"raise_exception#\" &\n-     \"ada_roots#\" &\n-     \"aggregate#\" &\n-     \"archive_builder#\" &\n-     \"archive_builder_append_option#\" &\n-     \"archive_indexer#\" &\n-     \"archive_suffix#\" &\n-     \"binder#\" &\n-     \"binder_prefix#\" &\n-     \"body_suffix#\" &\n-     \"builder#\" &\n-     \"builder_switches#\" &\n-     \"compiler#\" &\n-     \"compiler_command#\" &\n-     \"compiler_kind#\" &\n-     \"config_body_file_name#\" &\n-     \"config_body_file_name_pattern#\" &\n-     \"config_file_switches#\" &\n-     \"config_file_unique#\" &\n-     \"config_spec_file_name#\" &\n-     \"config_spec_file_name_pattern#\" &\n-     \"configuration#\" &\n-     \"cross_reference#\" &\n-     \"default_language#\" &\n-     \"default_switches#\" &\n-     \"dependency_driver#\" &\n-     \"dependency_file_kind#\" &\n-     \"dependency_switches#\" &\n-     \"driver#\" &\n-     \"excluded_source_dirs#\" &\n-     \"excluded_source_files#\" &\n-     \"excluded_source_list_file#\" &\n-     \"exec_dir#\" &\n-     \"executable#\" &\n-     \"executable_suffix#\" &\n-     \"extends#\" &\n-     \"externally_built#\" &\n-     \"finder#\" &\n-     \"global_compilation_switches#\" &\n-     \"global_configuration_pragmas#\" &\n-     \"global_config_file#\" &\n-     \"gnatls#\" &\n-     \"gnatstub#\" &\n-     \"ide#\" &\n-     \"implementation#\" &\n-     \"implementation_exceptions#\" &\n-     \"implementation_suffix#\" &\n-     \"include_switches#\" &\n-     \"include_path#\" &\n-     \"include_path_file#\" &\n-     \"inherit_source_path#\" &\n-     \"language_kind#\" &\n-     \"language_processing#\" &\n-     \"languages#\" &\n-     \"library#\" &\n-     \"library_ali_dir#\" &\n-     \"library_auto_init#\" &\n-     \"library_auto_init_supported#\" &\n-     \"library_builder#\" &\n-     \"library_dir#\" &\n-     \"library_gcc#\" &\n-     \"library_interface#\" &\n-     \"library_kind#\" &\n-     \"library_name#\" &\n-     \"library_major_minor_id_supported#\" &\n-     \"library_options#\" &\n-     \"library_partial_linker#\" &\n-     \"library_reference_symbol_file#\" &\n-     \"library_src_dir#\" &\n-     \"library_support#\" &\n-     \"library_symbol_file#\" &\n-     \"library_symbol_policy#\" &\n-     \"library_version#\" &\n-     \"library_version_switches#\" &\n-     \"linker#\" &\n-     \"linker_executable_option#\" &\n-     \"linker_lib_dir_option#\" &\n-     \"linker_lib_name_option#\" &\n-     \"local_config_file#\" &\n-     \"local_configuration_pragmas#\" &\n-     \"locally_removed_files#\" &\n-     \"map_file_option#\" &\n-     \"mapping_file_switches#\" &\n-     \"mapping_spec_suffix#\" &\n-     \"mapping_body_suffix#\" &\n-     \"metrics#\" &\n-     \"naming#\" &\n-     \"object_generated#\" &\n-     \"objects_linked#\" &\n-     \"objects_path#\" &\n-     \"objects_path_file#\" &\n-     \"object_dir#\" &\n-     \"path_syntax#\" &\n-     \"pic_option#\" &\n-     \"pretty_printer#\" &\n-     \"prefix#\" &\n-     \"project#\" &\n-     \"project_dir#\" &\n-     \"roots#\" &\n-     \"required_switches#\" &\n-     \"run_path_option#\" &\n-     \"runtime_project#\" &\n-     \"shared_library_minimum_switches#\" &\n-     \"shared_library_prefix#\" &\n-     \"shared_library_suffix#\" &\n-     \"separate_suffix#\" &\n-     \"source_dirs#\" &\n-     \"source_files#\" &\n-     \"source_list_file#\" &\n-     \"spec#\" &\n-     \"spec_suffix#\" &\n-     \"specification#\" &\n-     \"specification_exceptions#\" &\n-     \"specification_suffix#\" &\n-     \"stack#\" &\n-     \"switches#\" &\n-     \"symbolic_link_supported#\" &\n-     \"sync#\" &\n-     \"synchronize#\" &\n-     \"toolchain_description#\" &\n-     \"toolchain_version#\" &\n-     \"runtime_library_dir#\" &\n-     \"unaligned_valid#\" &\n-     \"interface#\" &\n-     \"overriding#\" &\n-     \"synchronized#\" &\n-     \"#\";\n-\n-   ---------------------\n-   -- Generated Names --\n-   ---------------------\n-\n-   --  This section lists the various cases of generated names which are\n-   --  built from existing names by adding unique leading and/or trailing\n-   --  upper case letters. In some cases these names are built recursively,\n-   --  in particular names built from types may be built from types which\n-   --  themselves have generated names. In this list, xxx represents an\n-   --  existing name to which identifying letters are prepended or appended,\n-   --  and a trailing n represents a serial number in an external name that\n-   --  has some semantic significance (e.g. the n'th index type of an array).\n-\n-   --    xxxA    access type for formal xxx in entry param record   (Exp_Ch9)\n-   --    xxxB    tag table for tagged type xxx                      (Exp_Ch3)\n-   --    xxxB    task body procedure for task xxx                   (Exp_Ch9)\n-   --    xxxD    dispatch table for tagged type xxx                 (Exp_Ch3)\n-   --    xxxD    discriminal for discriminant xxx                   (Sem_Ch3)\n-   --    xxxDn   n'th discr check function for rec type xxx         (Exp_Ch3)\n-   --    xxxE    elaboration boolean flag for task xxx              (Exp_Ch9)\n-   --    xxxE    dispatch table pointer type for tagged type xxx    (Exp_Ch3)\n-   --    xxxE    parameters for accept body for entry xxx           (Exp_Ch9)\n-   --    xxxFn   n'th primitive of a tagged type (named xxx)        (Exp_Ch3)\n-   --    xxxJ    tag table type index for tagged type xxx           (Exp_Ch3)\n-   --    xxxM    master Id value for access type xxx                (Exp_Ch3)\n-   --    xxxP    tag table pointer type for tagged type xxx         (Exp_Ch3)\n-   --    xxxP    parameter record type for entry xxx                (Exp_Ch9)\n-   --    xxxPA   access to parameter record type for entry xxx      (Exp_Ch9)\n-   --    xxxPn   pointer type for n'th primitive of tagged type xxx (Exp_Ch3)\n-   --    xxxR    dispatch table pointer for tagged type xxx         (Exp_Ch3)\n-   --    xxxT    tag table type for tagged type xxx                 (Exp_Ch3)\n-   --    xxxT    literal table for enumeration type xxx             (Sem_Ch3)\n-   --    xxxV    type for task value record for task xxx            (Exp_Ch9)\n-   --    xxxX    entry index constant                               (Exp_Ch9)\n-   --    xxxY    dispatch table type for tagged type xxx            (Exp_Ch3)\n-   --    xxxZ    size variable for task xxx                         (Exp_Ch9)\n-\n-   --  TSS names\n-\n-   --    xxxDA   deep adjust routine for type xxx                   (Exp_TSS)\n-   --    xxxDF   deep finalize routine for type xxx                 (Exp_TSS)\n-   --    xxxDI   deep initialize routine for type xxx               (Exp_TSS)\n-   --    xxxEQ   composite equality routine for record type xxx     (Exp_TSS)\n-   --    xxxFA   PolyORB/DSA From_Any converter for type xxx        (Exp_TSS)\n-   --    xxxIP   initialization procedure for type xxx              (Exp_TSS)\n-   --    xxxRA   RAS type access routine for type xxx               (Exp_TSS)\n-   --    xxxRD   RAS type dereference routine for type xxx          (Exp_TSS)\n-   --    xxxRP   Rep to Pos conversion for enumeration type xxx     (Exp_TSS)\n-   --    xxxSA   array/slice assignment for controlled comp. arrays (Exp_TSS)\n-   --    xxxSI   stream input attribute subprogram for type xxx     (Exp_TSS)\n-   --    xxxSO   stream output attribute subprogram for type xxx    (Exp_TSS)\n-   --    xxxSR   stream read attribute subprogram for type xxx      (Exp_TSS)\n-   --    xxxSW   stream write attribute subprogram for type xxx     (Exp_TSS)\n-   --    xxxTA   PolyORB/DSA To_Any converter for type xxx          (Exp_TSS)\n-   --    xxxTC   PolyORB/DSA Typecode for type xxx                  (Exp_TSS)\n-\n-   --  Implicit type names\n-\n-   --    TxxxT   type of literal table for enumeration type xxx     (Sem_Ch3)\n-\n-   --  (Note: this list is not complete or accurate ???)\n-\n-   ----------------------\n-   -- Get_Attribute_Id --\n-   ----------------------\n-\n-   function Get_Attribute_Id (N : Name_Id) return Attribute_Id is\n-   begin\n-      return Attribute_Id'Val (N - First_Attribute_Name);\n-   end Get_Attribute_Id;\n-\n-   -----------------------\n-   -- Get_Convention_Id --\n-   -----------------------\n-\n-   function Get_Convention_Id (N : Name_Id) return Convention_Id is\n-   begin\n-      case N is\n-         when Name_Ada        => return Convention_Ada;\n-         when Name_Assembler  => return Convention_Assembler;\n-         when Name_C          => return Convention_C;\n-         when Name_CIL        => return Convention_CIL;\n-         when Name_COBOL      => return Convention_COBOL;\n-         when Name_CPP        => return Convention_CPP;\n-         when Name_Fortran    => return Convention_Fortran;\n-         when Name_Intrinsic  => return Convention_Intrinsic;\n-         when Name_Java       => return Convention_Java;\n-         when Name_Stdcall    => return Convention_Stdcall;\n-         when Name_Stubbed    => return Convention_Stubbed;\n-\n-         --  If no direct match, then we must have a convention\n-         --  identifier pragma that has specified this name.\n-\n-         when others          =>\n-            for J in 1 .. Convention_Identifiers.Last loop\n-               if N = Convention_Identifiers.Table (J).Name then\n-                  return Convention_Identifiers.Table (J).Convention;\n-               end if;\n-            end loop;\n-\n-            raise Program_Error;\n-      end case;\n-   end Get_Convention_Id;\n-\n-   -------------------------\n-   -- Get_Convention_Name --\n-   -------------------------\n-\n-   function Get_Convention_Name (C : Convention_Id) return Name_Id is\n-   begin\n-      case C is\n-         when Convention_Ada       => return Name_Ada;\n-         when Convention_Assembler => return Name_Assembler;\n-         when Convention_C         => return Name_C;\n-         when Convention_CIL       => return Name_CIL;\n-         when Convention_COBOL     => return Name_COBOL;\n-         when Convention_CPP       => return Name_CPP;\n-         when Convention_Entry     => return Name_Entry;\n-         when Convention_Fortran   => return Name_Fortran;\n-         when Convention_Intrinsic => return Name_Intrinsic;\n-         when Convention_Java      => return Name_Java;\n-         when Convention_Protected => return Name_Protected;\n-         when Convention_Stdcall   => return Name_Stdcall;\n-         when Convention_Stubbed   => return Name_Stubbed;\n-      end case;\n-   end Get_Convention_Name;\n-\n-   ---------------------------\n-   -- Get_Locking_Policy_Id --\n-   ---------------------------\n-\n-   function Get_Locking_Policy_Id (N : Name_Id) return Locking_Policy_Id is\n-   begin\n-      return Locking_Policy_Id'Val (N - First_Locking_Policy_Name);\n-   end Get_Locking_Policy_Id;\n-\n-   -------------------\n-   -- Get_Pragma_Id --\n-   -------------------\n-\n-   function Get_Pragma_Id (N : Name_Id) return Pragma_Id is\n-   begin\n-      if N = Name_AST_Entry then\n-         return Pragma_AST_Entry;\n-      elsif N = Name_Fast_Math then\n-         return Pragma_Fast_Math;\n-      elsif N = Name_Interface then\n-         return Pragma_Interface;\n-      elsif N = Name_Priority then\n-         return Pragma_Priority;\n-      elsif N = Name_Relative_Deadline then\n-         return Pragma_Relative_Deadline;\n-      elsif N = Name_Storage_Size then\n-         return Pragma_Storage_Size;\n-      elsif N = Name_Storage_Unit then\n-         return Pragma_Storage_Unit;\n-      elsif N not in First_Pragma_Name .. Last_Pragma_Name then\n-         return Unknown_Pragma;\n-      else\n-         return Pragma_Id'Val (N - First_Pragma_Name);\n-      end if;\n-   end Get_Pragma_Id;\n-\n-   ---------------------------\n-   -- Get_Queuing_Policy_Id --\n-   ---------------------------\n-\n-   function Get_Queuing_Policy_Id (N : Name_Id) return Queuing_Policy_Id is\n-   begin\n-      return Queuing_Policy_Id'Val (N - First_Queuing_Policy_Name);\n-   end Get_Queuing_Policy_Id;\n-\n-   ------------------------------------\n-   -- Get_Task_Dispatching_Policy_Id --\n-   ------------------------------------\n-\n-   function Get_Task_Dispatching_Policy_Id\n-     (N : Name_Id) return Task_Dispatching_Policy_Id\n-   is\n-   begin\n-      return Task_Dispatching_Policy_Id'Val\n-        (N - First_Task_Dispatching_Policy_Name);\n-   end Get_Task_Dispatching_Policy_Id;\n-\n-   ----------------\n-   -- Initialize --\n-   ----------------\n-\n-   procedure Initialize is\n-      P_Index      : Natural;\n-      Discard_Name : Name_Id;\n-\n-   begin\n-      P_Index := Preset_Names'First;\n-      loop\n-         Name_Len := 0;\n-         while Preset_Names (P_Index) /= '#' loop\n-            Name_Len := Name_Len + 1;\n-            Name_Buffer (Name_Len) := Preset_Names (P_Index);\n-            P_Index := P_Index + 1;\n-         end loop;\n-\n-         --  We do the Name_Find call to enter the name into the table, but\n-         --  we don't need to do anything with the result, since we already\n-         --  initialized all the preset names to have the right value (we\n-         --  are depending on the order of the names and Preset_Names).\n-\n-         Discard_Name := Name_Find;\n-         P_Index := P_Index + 1;\n-         exit when Preset_Names (P_Index) = '#';\n-      end loop;\n-\n-      --  Make sure that number of names in standard table is correct. If\n-      --  this check fails, run utility program XSNAMES to construct a new\n-      --  properly matching version of the body.\n-\n-      pragma Assert (Discard_Name = Last_Predefined_Name);\n-\n-      --  Initialize the convention identifiers table with the standard\n-      --  set of synonyms that we recognize for conventions.\n-\n-      Convention_Identifiers.Init;\n-\n-      Convention_Identifiers.Append ((Name_Asm,         Convention_Assembler));\n-      Convention_Identifiers.Append ((Name_Assembly,    Convention_Assembler));\n-\n-      Convention_Identifiers.Append ((Name_Default,     Convention_C));\n-      Convention_Identifiers.Append ((Name_External,    Convention_C));\n-\n-      Convention_Identifiers.Append ((Name_C_Plus_Plus, Convention_CPP));\n-\n-      Convention_Identifiers.Append ((Name_DLL,         Convention_Stdcall));\n-      Convention_Identifiers.Append ((Name_Win32,       Convention_Stdcall));\n-   end Initialize;\n-\n-   -----------------------\n-   -- Is_Attribute_Name --\n-   -----------------------\n-\n-   function Is_Attribute_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Attribute_Name .. Last_Attribute_Name;\n-   end Is_Attribute_Name;\n-\n-   ----------------------------------\n-   -- Is_Configuration_Pragma_Name --\n-   ----------------------------------\n-\n-   function Is_Configuration_Pragma_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Pragma_Name .. Last_Configuration_Pragma_Name\n-        or else N = Name_Fast_Math;\n-   end Is_Configuration_Pragma_Name;\n-\n-   ------------------------\n-   -- Is_Convention_Name --\n-   ------------------------\n-\n-   function Is_Convention_Name (N : Name_Id) return Boolean is\n-   begin\n-      --  Check if this is one of the standard conventions\n-\n-      if N in First_Convention_Name .. Last_Convention_Name\n-        or else N = Name_C\n-      then\n-         return True;\n-\n-      --  Otherwise check if it is in convention identifier table\n-\n-      else\n-         for J in 1 .. Convention_Identifiers.Last loop\n-            if N = Convention_Identifiers.Table (J).Name then\n-               return True;\n-            end if;\n-         end loop;\n-\n-         return False;\n-      end if;\n-   end Is_Convention_Name;\n-\n-   ------------------------------\n-   -- Is_Entity_Attribute_Name --\n-   ------------------------------\n-\n-   function Is_Entity_Attribute_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Entity_Attribute_Name .. Last_Entity_Attribute_Name;\n-   end Is_Entity_Attribute_Name;\n-\n-   --------------------------------\n-   -- Is_Function_Attribute_Name --\n-   --------------------------------\n-\n-   function Is_Function_Attribute_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in\n-        First_Renamable_Function_Attribute ..\n-          Last_Renamable_Function_Attribute;\n-   end Is_Function_Attribute_Name;\n-\n-   ---------------------\n-   -- Is_Keyword_Name --\n-   ---------------------\n-\n-   function Is_Keyword_Name (N : Name_Id) return Boolean is\n-   begin\n-      return Get_Name_Table_Byte (N) /= 0\n-        and then (Ada_Version >= Ada_95\n-                  or else N not in Ada_95_Reserved_Words)\n-        and then (Ada_Version >= Ada_05\n-                  or else N not in Ada_2005_Reserved_Words);\n-   end Is_Keyword_Name;\n-\n-   ----------------------------\n-   -- Is_Locking_Policy_Name --\n-   ----------------------------\n-\n-   function Is_Locking_Policy_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Locking_Policy_Name .. Last_Locking_Policy_Name;\n-   end Is_Locking_Policy_Name;\n-\n-   -----------------------------\n-   -- Is_Operator_Symbol_Name --\n-   -----------------------------\n-\n-   function Is_Operator_Symbol_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Operator_Name .. Last_Operator_Name;\n-   end Is_Operator_Symbol_Name;\n-\n-   --------------------\n-   -- Is_Pragma_Name --\n-   --------------------\n-\n-   function Is_Pragma_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Pragma_Name .. Last_Pragma_Name\n-        or else N = Name_AST_Entry\n-        or else N = Name_Fast_Math\n-        or else N = Name_Interface\n-        or else N = Name_Relative_Deadline\n-        or else N = Name_Priority\n-        or else N = Name_Storage_Size\n-        or else N = Name_Storage_Unit;\n-   end Is_Pragma_Name;\n-\n-   ---------------------------------\n-   -- Is_Procedure_Attribute_Name --\n-   ---------------------------------\n-\n-   function Is_Procedure_Attribute_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Procedure_Attribute .. Last_Procedure_Attribute;\n-   end Is_Procedure_Attribute_Name;\n-\n-   ----------------------------\n-   -- Is_Queuing_Policy_Name --\n-   ----------------------------\n-\n-   function Is_Queuing_Policy_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Queuing_Policy_Name .. Last_Queuing_Policy_Name;\n-   end Is_Queuing_Policy_Name;\n-\n-   -------------------------------------\n-   -- Is_Task_Dispatching_Policy_Name --\n-   -------------------------------------\n-\n-   function Is_Task_Dispatching_Policy_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Task_Dispatching_Policy_Name ..\n-                  Last_Task_Dispatching_Policy_Name;\n-   end Is_Task_Dispatching_Policy_Name;\n-\n-   ----------------------------\n-   -- Is_Type_Attribute_Name --\n-   ----------------------------\n-\n-   function Is_Type_Attribute_Name (N : Name_Id) return Boolean is\n-   begin\n-      return N in First_Type_Attribute_Name .. Last_Type_Attribute_Name;\n-   end Is_Type_Attribute_Name;\n-\n-   ----------------------------------\n-   -- Record_Convention_Identifier --\n-   ----------------------------------\n-\n-   procedure Record_Convention_Identifier\n-     (Id         : Name_Id;\n-      Convention : Convention_Id)\n-   is\n-   begin\n-      Convention_Identifiers.Append ((Id, Convention));\n-   end Record_Convention_Identifier;\n-\n-end Snames;"}, {"sha": "b02dc54cc45d8d9d578060fb0afa42de5e996df8", "filename": "gcc/ada/snames.adb-tmpl", "status": "added", "additions": 460, "deletions": 0, "changes": 460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=b62a90f2591debf3cba71c3b0ce34643e874b5fb", "patch": "@@ -0,0 +1,460 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                               S N A M E S                                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Opt;   use Opt;\n+with Table;\n+with Types; use Types;\n+\n+package body Snames is\n+\n+   --  Table used to record convention identifiers\n+\n+   type Convention_Id_Entry is record\n+      Name       : Name_Id;\n+      Convention : Convention_Id;\n+   end record;\n+\n+   package Convention_Identifiers is new Table.Table (\n+     Table_Component_Type => Convention_Id_Entry,\n+     Table_Index_Type     => Int,\n+     Table_Low_Bound      => 1,\n+     Table_Initial        => 50,\n+     Table_Increment      => 200,\n+     Table_Name           => \"Name_Convention_Identifiers\");\n+\n+   --  Table of names to be set by Initialize. Each name is terminated by a\n+   --  single #, and the end of the list is marked by a null entry, i.e. by\n+   --  two # marks in succession. Note that the table does not include the\n+   --  entries for a-z, since these are initialized by Namet itself.\n+\n+   Preset_Names : constant String :=\n+!! TEMPLATE INSERTION POINT\n+     \"#\";\n+\n+   ---------------------\n+   -- Generated Names --\n+   ---------------------\n+\n+   --  This section lists the various cases of generated names which are\n+   --  built from existing names by adding unique leading and/or trailing\n+   --  upper case letters. In some cases these names are built recursively,\n+   --  in particular names built from types may be built from types which\n+   --  themselves have generated names. In this list, xxx represents an\n+   --  existing name to which identifying letters are prepended or appended,\n+   --  and a trailing n represents a serial number in an external name that\n+   --  has some semantic significance (e.g. the n'th index type of an array).\n+\n+   --    xxxA    access type for formal xxx in entry param record   (Exp_Ch9)\n+   --    xxxB    tag table for tagged type xxx                      (Exp_Ch3)\n+   --    xxxB    task body procedure for task xxx                   (Exp_Ch9)\n+   --    xxxD    dispatch table for tagged type xxx                 (Exp_Ch3)\n+   --    xxxD    discriminal for discriminant xxx                   (Sem_Ch3)\n+   --    xxxDn   n'th discr check function for rec type xxx         (Exp_Ch3)\n+   --    xxxE    elaboration boolean flag for task xxx              (Exp_Ch9)\n+   --    xxxE    dispatch table pointer type for tagged type xxx    (Exp_Ch3)\n+   --    xxxE    parameters for accept body for entry xxx           (Exp_Ch9)\n+   --    xxxFn   n'th primitive of a tagged type (named xxx)        (Exp_Ch3)\n+   --    xxxJ    tag table type index for tagged type xxx           (Exp_Ch3)\n+   --    xxxM    master Id value for access type xxx                (Exp_Ch3)\n+   --    xxxP    tag table pointer type for tagged type xxx         (Exp_Ch3)\n+   --    xxxP    parameter record type for entry xxx                (Exp_Ch9)\n+   --    xxxPA   access to parameter record type for entry xxx      (Exp_Ch9)\n+   --    xxxPn   pointer type for n'th primitive of tagged type xxx (Exp_Ch3)\n+   --    xxxR    dispatch table pointer for tagged type xxx         (Exp_Ch3)\n+   --    xxxT    tag table type for tagged type xxx                 (Exp_Ch3)\n+   --    xxxT    literal table for enumeration type xxx             (Sem_Ch3)\n+   --    xxxV    type for task value record for task xxx            (Exp_Ch9)\n+   --    xxxX    entry index constant                               (Exp_Ch9)\n+   --    xxxY    dispatch table type for tagged type xxx            (Exp_Ch3)\n+   --    xxxZ    size variable for task xxx                         (Exp_Ch9)\n+\n+   --  TSS names\n+\n+   --    xxxDA   deep adjust routine for type xxx                   (Exp_TSS)\n+   --    xxxDF   deep finalize routine for type xxx                 (Exp_TSS)\n+   --    xxxDI   deep initialize routine for type xxx               (Exp_TSS)\n+   --    xxxEQ   composite equality routine for record type xxx     (Exp_TSS)\n+   --    xxxFA   PolyORB/DSA From_Any converter for type xxx        (Exp_TSS)\n+   --    xxxIP   initialization procedure for type xxx              (Exp_TSS)\n+   --    xxxRA   RAS type access routine for type xxx               (Exp_TSS)\n+   --    xxxRD   RAS type dereference routine for type xxx          (Exp_TSS)\n+   --    xxxRP   Rep to Pos conversion for enumeration type xxx     (Exp_TSS)\n+   --    xxxSA   array/slice assignment for controlled comp. arrays (Exp_TSS)\n+   --    xxxSI   stream input attribute subprogram for type xxx     (Exp_TSS)\n+   --    xxxSO   stream output attribute subprogram for type xxx    (Exp_TSS)\n+   --    xxxSR   stream read attribute subprogram for type xxx      (Exp_TSS)\n+   --    xxxSW   stream write attribute subprogram for type xxx     (Exp_TSS)\n+   --    xxxTA   PolyORB/DSA To_Any converter for type xxx          (Exp_TSS)\n+   --    xxxTC   PolyORB/DSA Typecode for type xxx                  (Exp_TSS)\n+\n+   --  Implicit type names\n+\n+   --    TxxxT   type of literal table for enumeration type xxx     (Sem_Ch3)\n+\n+   --  (Note: this list is not complete or accurate ???)\n+\n+   ----------------------\n+   -- Get_Attribute_Id --\n+   ----------------------\n+\n+   function Get_Attribute_Id (N : Name_Id) return Attribute_Id is\n+   begin\n+      return Attribute_Id'Val (N - First_Attribute_Name);\n+   end Get_Attribute_Id;\n+\n+   -----------------------\n+   -- Get_Convention_Id --\n+   -----------------------\n+\n+   function Get_Convention_Id (N : Name_Id) return Convention_Id is\n+   begin\n+      case N is\n+         when Name_Ada        => return Convention_Ada;\n+         when Name_Assembler  => return Convention_Assembler;\n+         when Name_C          => return Convention_C;\n+         when Name_CIL        => return Convention_CIL;\n+         when Name_COBOL      => return Convention_COBOL;\n+         when Name_CPP        => return Convention_CPP;\n+         when Name_Fortran    => return Convention_Fortran;\n+         when Name_Intrinsic  => return Convention_Intrinsic;\n+         when Name_Java       => return Convention_Java;\n+         when Name_Stdcall    => return Convention_Stdcall;\n+         when Name_Stubbed    => return Convention_Stubbed;\n+\n+         --  If no direct match, then we must have a convention\n+         --  identifier pragma that has specified this name.\n+\n+         when others          =>\n+            for J in 1 .. Convention_Identifiers.Last loop\n+               if N = Convention_Identifiers.Table (J).Name then\n+                  return Convention_Identifiers.Table (J).Convention;\n+               end if;\n+            end loop;\n+\n+            raise Program_Error;\n+      end case;\n+   end Get_Convention_Id;\n+\n+   -------------------------\n+   -- Get_Convention_Name --\n+   -------------------------\n+\n+   function Get_Convention_Name (C : Convention_Id) return Name_Id is\n+   begin\n+      case C is\n+         when Convention_Ada       => return Name_Ada;\n+         when Convention_Assembler => return Name_Assembler;\n+         when Convention_C         => return Name_C;\n+         when Convention_CIL       => return Name_CIL;\n+         when Convention_COBOL     => return Name_COBOL;\n+         when Convention_CPP       => return Name_CPP;\n+         when Convention_Entry     => return Name_Entry;\n+         when Convention_Fortran   => return Name_Fortran;\n+         when Convention_Intrinsic => return Name_Intrinsic;\n+         when Convention_Java      => return Name_Java;\n+         when Convention_Protected => return Name_Protected;\n+         when Convention_Stdcall   => return Name_Stdcall;\n+         when Convention_Stubbed   => return Name_Stubbed;\n+      end case;\n+   end Get_Convention_Name;\n+\n+   ---------------------------\n+   -- Get_Locking_Policy_Id --\n+   ---------------------------\n+\n+   function Get_Locking_Policy_Id (N : Name_Id) return Locking_Policy_Id is\n+   begin\n+      return Locking_Policy_Id'Val (N - First_Locking_Policy_Name);\n+   end Get_Locking_Policy_Id;\n+\n+   -------------------\n+   -- Get_Pragma_Id --\n+   -------------------\n+\n+   function Get_Pragma_Id (N : Name_Id) return Pragma_Id is\n+   begin\n+      if N = Name_AST_Entry then\n+         return Pragma_AST_Entry;\n+      elsif N = Name_Fast_Math then\n+         return Pragma_Fast_Math;\n+      elsif N = Name_Interface then\n+         return Pragma_Interface;\n+      elsif N = Name_Priority then\n+         return Pragma_Priority;\n+      elsif N = Name_Relative_Deadline then\n+         return Pragma_Relative_Deadline;\n+      elsif N = Name_Storage_Size then\n+         return Pragma_Storage_Size;\n+      elsif N = Name_Storage_Unit then\n+         return Pragma_Storage_Unit;\n+      elsif N not in First_Pragma_Name .. Last_Pragma_Name then\n+         return Unknown_Pragma;\n+      else\n+         return Pragma_Id'Val (N - First_Pragma_Name);\n+      end if;\n+   end Get_Pragma_Id;\n+\n+   ---------------------------\n+   -- Get_Queuing_Policy_Id --\n+   ---------------------------\n+\n+   function Get_Queuing_Policy_Id (N : Name_Id) return Queuing_Policy_Id is\n+   begin\n+      return Queuing_Policy_Id'Val (N - First_Queuing_Policy_Name);\n+   end Get_Queuing_Policy_Id;\n+\n+   ------------------------------------\n+   -- Get_Task_Dispatching_Policy_Id --\n+   ------------------------------------\n+\n+   function Get_Task_Dispatching_Policy_Id\n+     (N : Name_Id) return Task_Dispatching_Policy_Id\n+   is\n+   begin\n+      return Task_Dispatching_Policy_Id'Val\n+        (N - First_Task_Dispatching_Policy_Name);\n+   end Get_Task_Dispatching_Policy_Id;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+      P_Index      : Natural;\n+      Discard_Name : Name_Id;\n+\n+   begin\n+      P_Index := Preset_Names'First;\n+      loop\n+         Name_Len := 0;\n+         while Preset_Names (P_Index) /= '#' loop\n+            Name_Len := Name_Len + 1;\n+            Name_Buffer (Name_Len) := Preset_Names (P_Index);\n+            P_Index := P_Index + 1;\n+         end loop;\n+\n+         --  We do the Name_Find call to enter the name into the table, but\n+         --  we don't need to do anything with the result, since we already\n+         --  initialized all the preset names to have the right value (we\n+         --  are depending on the order of the names and Preset_Names).\n+\n+         Discard_Name := Name_Find;\n+         P_Index := P_Index + 1;\n+         exit when Preset_Names (P_Index) = '#';\n+      end loop;\n+\n+      --  Make sure that number of names in standard table is correct. If\n+      --  this check fails, run utility program XSNAMES to construct a new\n+      --  properly matching version of the body.\n+\n+      pragma Assert (Discard_Name = Last_Predefined_Name);\n+\n+      --  Initialize the convention identifiers table with the standard\n+      --  set of synonyms that we recognize for conventions.\n+\n+      Convention_Identifiers.Init;\n+\n+      Convention_Identifiers.Append ((Name_Asm,         Convention_Assembler));\n+      Convention_Identifiers.Append ((Name_Assembly,    Convention_Assembler));\n+\n+      Convention_Identifiers.Append ((Name_Default,     Convention_C));\n+      Convention_Identifiers.Append ((Name_External,    Convention_C));\n+\n+      Convention_Identifiers.Append ((Name_C_Plus_Plus, Convention_CPP));\n+\n+      Convention_Identifiers.Append ((Name_DLL,         Convention_Stdcall));\n+      Convention_Identifiers.Append ((Name_Win32,       Convention_Stdcall));\n+   end Initialize;\n+\n+   -----------------------\n+   -- Is_Attribute_Name --\n+   -----------------------\n+\n+   function Is_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Attribute_Name .. Last_Attribute_Name;\n+   end Is_Attribute_Name;\n+\n+   ----------------------------------\n+   -- Is_Configuration_Pragma_Name --\n+   ----------------------------------\n+\n+   function Is_Configuration_Pragma_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Pragma_Name .. Last_Configuration_Pragma_Name\n+        or else N = Name_Fast_Math;\n+   end Is_Configuration_Pragma_Name;\n+\n+   ------------------------\n+   -- Is_Convention_Name --\n+   ------------------------\n+\n+   function Is_Convention_Name (N : Name_Id) return Boolean is\n+   begin\n+      --  Check if this is one of the standard conventions\n+\n+      if N in First_Convention_Name .. Last_Convention_Name\n+        or else N = Name_C\n+      then\n+         return True;\n+\n+      --  Otherwise check if it is in convention identifier table\n+\n+      else\n+         for J in 1 .. Convention_Identifiers.Last loop\n+            if N = Convention_Identifiers.Table (J).Name then\n+               return True;\n+            end if;\n+         end loop;\n+\n+         return False;\n+      end if;\n+   end Is_Convention_Name;\n+\n+   ------------------------------\n+   -- Is_Entity_Attribute_Name --\n+   ------------------------------\n+\n+   function Is_Entity_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Entity_Attribute_Name .. Last_Entity_Attribute_Name;\n+   end Is_Entity_Attribute_Name;\n+\n+   --------------------------------\n+   -- Is_Function_Attribute_Name --\n+   --------------------------------\n+\n+   function Is_Function_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in\n+        First_Renamable_Function_Attribute ..\n+          Last_Renamable_Function_Attribute;\n+   end Is_Function_Attribute_Name;\n+\n+   ---------------------\n+   -- Is_Keyword_Name --\n+   ---------------------\n+\n+   function Is_Keyword_Name (N : Name_Id) return Boolean is\n+   begin\n+      return Get_Name_Table_Byte (N) /= 0\n+        and then (Ada_Version >= Ada_95\n+                  or else N not in Ada_95_Reserved_Words)\n+        and then (Ada_Version >= Ada_05\n+                  or else N not in Ada_2005_Reserved_Words);\n+   end Is_Keyword_Name;\n+\n+   ----------------------------\n+   -- Is_Locking_Policy_Name --\n+   ----------------------------\n+\n+   function Is_Locking_Policy_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Locking_Policy_Name .. Last_Locking_Policy_Name;\n+   end Is_Locking_Policy_Name;\n+\n+   -----------------------------\n+   -- Is_Operator_Symbol_Name --\n+   -----------------------------\n+\n+   function Is_Operator_Symbol_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Operator_Name .. Last_Operator_Name;\n+   end Is_Operator_Symbol_Name;\n+\n+   --------------------\n+   -- Is_Pragma_Name --\n+   --------------------\n+\n+   function Is_Pragma_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Pragma_Name .. Last_Pragma_Name\n+        or else N = Name_AST_Entry\n+        or else N = Name_Fast_Math\n+        or else N = Name_Interface\n+        or else N = Name_Relative_Deadline\n+        or else N = Name_Priority\n+        or else N = Name_Storage_Size\n+        or else N = Name_Storage_Unit;\n+   end Is_Pragma_Name;\n+\n+   ---------------------------------\n+   -- Is_Procedure_Attribute_Name --\n+   ---------------------------------\n+\n+   function Is_Procedure_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Procedure_Attribute .. Last_Procedure_Attribute;\n+   end Is_Procedure_Attribute_Name;\n+\n+   ----------------------------\n+   -- Is_Queuing_Policy_Name --\n+   ----------------------------\n+\n+   function Is_Queuing_Policy_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Queuing_Policy_Name .. Last_Queuing_Policy_Name;\n+   end Is_Queuing_Policy_Name;\n+\n+   -------------------------------------\n+   -- Is_Task_Dispatching_Policy_Name --\n+   -------------------------------------\n+\n+   function Is_Task_Dispatching_Policy_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Task_Dispatching_Policy_Name ..\n+                  Last_Task_Dispatching_Policy_Name;\n+   end Is_Task_Dispatching_Policy_Name;\n+\n+   ----------------------------\n+   -- Is_Type_Attribute_Name --\n+   ----------------------------\n+\n+   function Is_Type_Attribute_Name (N : Name_Id) return Boolean is\n+   begin\n+      return N in First_Type_Attribute_Name .. Last_Type_Attribute_Name;\n+   end Is_Type_Attribute_Name;\n+\n+   ----------------------------------\n+   -- Record_Convention_Identifier --\n+   ----------------------------------\n+\n+   procedure Record_Convention_Identifier\n+     (Id         : Name_Id;\n+      Convention : Convention_Id)\n+   is\n+   begin\n+      Convention_Identifiers.Append ((Id, Convention));\n+   end Record_Convention_Identifier;\n+\n+end Snames;"}, {"sha": "48001f6d9a79bc090cdf33e898e7997f892b3438", "filename": "gcc/ada/snames.ads-tmpl", "status": "renamed", "additions": 814, "deletions": 818, "changes": 1632, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=b62a90f2591debf3cba71c3b0ce34643e874b5fb", "previous_filename": "gcc/ada/snames.ads"}, {"sha": "5ac699df65cd4e82e250c7a18c509d14d6c01d93", "filename": "gcc/ada/snames.h", "status": "removed", "additions": 0, "deletions": 400, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=0d24670707462cb06ac0037607ef9df9e733dc44", "patch": "@@ -1,400 +0,0 @@\n-/****************************************************************************\n- *                                                                          *\n- *                         GNAT COMPILER COMPONENTS                         *\n- *                                                                          *\n- *                               S N A M E S                                *\n- *                                                                          *\n- *                              C Header File                               *\n- *                                                                          *\n- *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n- *                                                                          *\n- * GNAT is free software;  you can  redistribute it  and/or modify it under *\n- * terms of the  GNU General Public License as published  by the Free Soft- *\n- * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n- * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n- * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n- * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License *\n- * for  more details.  You should have  received  a copy of the GNU General *\n- * Public License  distributed with GNAT; see file COPYING3.  If not, go to *\n- * http://www.gnu.org/licenses for a complete copy of the license.          *\n- *                                                                          *\n- * GNAT was originally developed  by the GNAT team at  New York University. *\n- * Extensive contributions were provided by Ada Core Technologies Inc.      *\n- *                                                                          *\n- ****************************************************************************/\n-\n-/* This is the C file that corresponds to the Ada package specification\n-   Snames. It was created automatically from the file snames.ads. */\n-\n-/* Name_Id values */\n-\n-#define Name_uParent    (First_Name_Id + 256 + 0)\n-#define Name_uTag       (First_Name_Id + 256 + 1)\n-#define Name_Off        (First_Name_Id + 256 + 2)\n-#define Name_Space      (First_Name_Id + 256 + 3)\n-#define Name_Time       (First_Name_Id + 256 + 4)\n-\n-/* Define the function to return one of the numeric values below. Note\n-   that it actually returns a char since an enumeration value of less\n-   than 256 entries is represented that way in Ada.  The operand is a Chars\n-   field value.  */\n-\n-#define Get_Attribute_Id snames__get_attribute_id\n-extern unsigned char Get_Attribute_Id (int);\n-\n-/* Define the numeric values for attributes.  */\n-\n-#define  Attr_Abort_Signal                  0\n-#define  Attr_Access                        1\n-#define  Attr_Address                       2\n-#define  Attr_Address_Size                  3\n-#define  Attr_Aft                           4\n-#define  Attr_Alignment                     5\n-#define  Attr_Asm_Input                     6\n-#define  Attr_Asm_Output                    7\n-#define  Attr_AST_Entry                     8\n-#define  Attr_Bit                           9\n-#define  Attr_Bit_Order                     10\n-#define  Attr_Bit_Position                  11\n-#define  Attr_Body_Version                  12\n-#define  Attr_Callable                      13\n-#define  Attr_Caller                        14\n-#define  Attr_Code_Address                  15\n-#define  Attr_Component_Size                16\n-#define  Attr_Compose                       17\n-#define  Attr_Constrained                   18\n-#define  Attr_Count                         19\n-#define  Attr_Default_Bit_Order             20\n-#define  Attr_Definite                      21\n-#define  Attr_Delta                         22\n-#define  Attr_Denorm                        23\n-#define  Attr_Digits                        24\n-#define  Attr_Elaborated                    25\n-#define  Attr_Emax                          26\n-#define  Attr_Enabled                       27\n-#define  Attr_Enum_Rep                      28\n-#define  Attr_Enum_Val                      29\n-#define  Attr_Epsilon                       30\n-#define  Attr_Exponent                      31\n-#define  Attr_External_Tag                  32\n-#define  Attr_Fast_Math                     33\n-#define  Attr_First                         34\n-#define  Attr_First_Bit                     35\n-#define  Attr_Fixed_Value                   36\n-#define  Attr_Fore                          37\n-#define  Attr_Has_Access_Values             38\n-#define  Attr_Has_Discriminants             39\n-#define  Attr_Has_Tagged_Values             40\n-#define  Attr_Identity                      41\n-#define  Attr_Img                           42\n-#define  Attr_Integer_Value                 43\n-#define  Attr_Invalid_Value                 44\n-#define  Attr_Large                         45\n-#define  Attr_Last                          46\n-#define  Attr_Last_Bit                      47\n-#define  Attr_Leading_Part                  48\n-#define  Attr_Length                        49\n-#define  Attr_Machine_Emax                  50\n-#define  Attr_Machine_Emin                  51\n-#define  Attr_Machine_Mantissa              52\n-#define  Attr_Machine_Overflows             53\n-#define  Attr_Machine_Radix                 54\n-#define  Attr_Machine_Rounding              55\n-#define  Attr_Machine_Rounds                56\n-#define  Attr_Machine_Size                  57\n-#define  Attr_Mantissa                      58\n-#define  Attr_Max_Size_In_Storage_Elements  59\n-#define  Attr_Maximum_Alignment             60\n-#define  Attr_Mechanism_Code                61\n-#define  Attr_Mod                           62\n-#define  Attr_Model_Emin                    63\n-#define  Attr_Model_Epsilon                 64\n-#define  Attr_Model_Mantissa                65\n-#define  Attr_Model_Small                   66\n-#define  Attr_Modulus                       67\n-#define  Attr_Null_Parameter                68\n-#define  Attr_Object_Size                   69\n-#define  Attr_Old                           70\n-#define  Attr_Partition_ID                  71\n-#define  Attr_Passed_By_Reference           72\n-#define  Attr_Pool_Address                  73\n-#define  Attr_Pos                           74\n-#define  Attr_Position                      75\n-#define  Attr_Priority                      76\n-#define  Attr_Range                         77\n-#define  Attr_Range_Length                  78\n-#define  Attr_Result                        79\n-#define  Attr_Round                         80\n-#define  Attr_Safe_Emax                     81\n-#define  Attr_Safe_First                    82\n-#define  Attr_Safe_Large                    83\n-#define  Attr_Safe_Last                     84\n-#define  Attr_Safe_Small                    85\n-#define  Attr_Scale                         86\n-#define  Attr_Scaling                       87\n-#define  Attr_Signed_Zeros                  88\n-#define  Attr_Size                          89\n-#define  Attr_Small                         90\n-#define  Attr_Storage_Size                  91\n-#define  Attr_Storage_Unit                  92\n-#define  Attr_Stream_Size                   93\n-#define  Attr_Tag                           94\n-#define  Attr_Target_Name                   95\n-#define  Attr_Terminated                    96\n-#define  Attr_To_Address                    97\n-#define  Attr_Type_Class                    98\n-#define  Attr_UET_Address                   99\n-#define  Attr_Unbiased_Rounding             100\n-#define  Attr_Unchecked_Access              101\n-#define  Attr_Unconstrained_Array           102\n-#define  Attr_Universal_Literal_String      103\n-#define  Attr_Unrestricted_Access           104\n-#define  Attr_VADS_Size                     105\n-#define  Attr_Val                           106\n-#define  Attr_Valid                         107\n-#define  Attr_Value_Size                    108\n-#define  Attr_Version                       109\n-#define  Attr_Wchar_T_Size                  110\n-#define  Attr_Wide_Wide_Width               111\n-#define  Attr_Wide_Width                    112\n-#define  Attr_Width                         113\n-#define  Attr_Word_Size                     114\n-#define  Attr_Adjacent                      115\n-#define  Attr_Ceiling                       116\n-#define  Attr_Copy_Sign                     117\n-#define  Attr_Floor                         118\n-#define  Attr_Fraction                      119\n-#define  Attr_From_Any                      120\n-#define  Attr_Image                         121\n-#define  Attr_Input                         122\n-#define  Attr_Machine                       123\n-#define  Attr_Max                           124\n-#define  Attr_Min                           125\n-#define  Attr_Model                         126\n-#define  Attr_Pred                          127\n-#define  Attr_Remainder                     128\n-#define  Attr_Rounding                      129\n-#define  Attr_Succ                          130\n-#define  Attr_To_Any                        131\n-#define  Attr_Truncation                    132\n-#define  Attr_TypeCode                      133\n-#define  Attr_Value                         134\n-#define  Attr_Wide_Image                    135\n-#define  Attr_Wide_Wide_Image               136\n-#define  Attr_Wide_Value                    137\n-#define  Attr_Wide_Wide_Value               138\n-#define  Attr_Output                        139\n-#define  Attr_Read                          140\n-#define  Attr_Write                         141\n-#define  Attr_Elab_Body                     142\n-#define  Attr_Elab_Spec                     143\n-#define  Attr_Storage_Pool                  144\n-#define  Attr_Base                          145\n-#define  Attr_Class                         146\n-#define  Attr_Stub_Type                     147\n-\n-/* Define the numeric values for the conventions.  */\n-\n-#define  Convention_Ada                           0\n-#define  Convention_Intrinsic                     1\n-#define  Convention_Entry                         2\n-#define  Convention_Protected                     3\n-#define  Convention_Stubbed                       4\n-#define  Convention_Assembler                     5\n-#define  Convention_C                             6\n-#define  Convention_CIL                           7\n-#define  Convention_COBOL                         8\n-#define  Convention_CPP                           9\n-#define  Convention_Fortran                       10\n-#define  Convention_Java                          11\n-#define  Convention_Stdcall                       12\n-\n-/* Define the function to check if a Name_Id value is a valid pragma */\n-\n-#define Is_Pragma_Name snames__is_pragma_name\n-extern Boolean Is_Pragma_Name (Name_Id);\n-\n-/* Define the function to return one of the numeric values below.  Note\n-   that it actually returns a char since an enumeration value of less\n-   than 256 entries is represented that way in Ada.  The operand is a Chars\n-   field value.  */\n-\n-#define Get_Pragma_Id snames__get_pragma_id\n-extern unsigned char Get_Pragma_Id (int);\n-\n-/* Define the numeric values for the pragmas. */\n-\n-#define  Pragma_Ada_83                        0\n-#define  Pragma_Ada_95                        1\n-#define  Pragma_Ada_05                        2\n-#define  Pragma_Ada_2005                      3\n-#define  Pragma_Assertion_Policy              4\n-#define  Pragma_Assume_No_Invalid_Values      5\n-#define  Pragma_C_Pass_By_Copy                6\n-#define  Pragma_Check_Name                    7\n-#define  Pragma_Check_Policy                  8\n-#define  Pragma_Compile_Time_Error            9\n-#define  Pragma_Compile_Time_Warning          10\n-#define  Pragma_Compiler_Unit                 11\n-#define  Pragma_Component_Alignment           12\n-#define  Pragma_Convention_Identifier         13\n-#define  Pragma_Debug_Policy                  14\n-#define  Pragma_Detect_Blocking               15\n-#define  Pragma_Discard_Names                 16\n-#define  Pragma_Elaboration_Checks            17\n-#define  Pragma_Eliminate                     18\n-#define  Pragma_Extend_System                 19\n-#define  Pragma_Extensions_Allowed            20\n-#define  Pragma_External_Name_Casing          21\n-#define  Pragma_Favor_Top_Level               22\n-#define  Pragma_Float_Representation          23\n-#define  Pragma_Implicit_Packing              24\n-#define  Pragma_Initialize_Scalars            25\n-#define  Pragma_Interrupt_State               26\n-#define  Pragma_License                       27\n-#define  Pragma_Locking_Policy                28\n-#define  Pragma_Long_Float                    29\n-#define  Pragma_No_Run_Time                   30\n-#define  Pragma_No_Strict_Aliasing            31\n-#define  Pragma_Normalize_Scalars             32\n-#define  Pragma_Optimize_Alignment            33\n-#define  Pragma_Persistent_BSS                34\n-#define  Pragma_Polling                       35\n-#define  Pragma_Priority_Specific_Dispatching 36\n-#define  Pragma_Profile                       37\n-#define  Pragma_Profile_Warnings              38\n-#define  Pragma_Propagate_Exceptions          39\n-#define  Pragma_Queuing_Policy                40\n-#define  Pragma_Ravenscar                     41\n-#define  Pragma_Restricted_Run_Time           42\n-#define  Pragma_Restrictions                  43\n-#define  Pragma_Restriction_Warnings          44\n-#define  Pragma_Reviewable                    45\n-#define  Pragma_Source_File_Name              46\n-#define  Pragma_Source_File_Name_Project      47\n-#define  Pragma_Style_Checks                  48\n-#define  Pragma_Suppress                      49\n-#define  Pragma_Suppress_Exception_Locations  50\n-#define  Pragma_Task_Dispatching_Policy       51\n-#define  Pragma_Universal_Data                52\n-#define  Pragma_Unsuppress                    53\n-#define  Pragma_Use_VADS_Size                 54\n-#define  Pragma_Validity_Checks               55\n-#define  Pragma_Warnings                      56\n-#define  Pragma_Wide_Character_Encoding       57\n-#define  Pragma_Abort_Defer                   58\n-#define  Pragma_All_Calls_Remote              59\n-#define  Pragma_Annotate                      60\n-#define  Pragma_Assert                        61\n-#define  Pragma_Asynchronous                  62\n-#define  Pragma_Atomic                        63\n-#define  Pragma_Atomic_Components             64\n-#define  Pragma_Attach_Handler                65\n-#define  Pragma_Check                         66\n-#define  Pragma_CIL_Constructor               67\n-#define  Pragma_Comment                       68\n-#define  Pragma_Common_Object                 69\n-#define  Pragma_Complete_Representation       70\n-#define  Pragma_Complex_Representation        71\n-#define  Pragma_Controlled                    72\n-#define  Pragma_Convention                    73\n-#define  Pragma_CPP_Class                     74\n-#define  Pragma_CPP_Constructor               75\n-#define  Pragma_CPP_Virtual                   76\n-#define  Pragma_CPP_Vtable                    77\n-#define  Pragma_Debug                         78\n-#define  Pragma_Elaborate                     79\n-#define  Pragma_Elaborate_All                 80\n-#define  Pragma_Elaborate_Body                81\n-#define  Pragma_Export                        82\n-#define  Pragma_Export_Exception              83\n-#define  Pragma_Export_Function               84\n-#define  Pragma_Export_Object                 85\n-#define  Pragma_Export_Procedure              86\n-#define  Pragma_Export_Value                  87\n-#define  Pragma_Export_Valued_Procedure       88\n-#define  Pragma_External                      89\n-#define  Pragma_Finalize_Storage_Only         90\n-#define  Pragma_Ident                         91\n-#define  Pragma_Implemented_By_Entry          92\n-#define  Pragma_Import                        93\n-#define  Pragma_Import_Exception              94\n-#define  Pragma_Import_Function               95\n-#define  Pragma_Import_Object                 96\n-#define  Pragma_Import_Procedure              97\n-#define  Pragma_Import_Valued_Procedure       98\n-#define  Pragma_Inline                        99\n-#define  Pragma_Inline_Always                 100\n-#define  Pragma_Inline_Generic                101\n-#define  Pragma_Inspection_Point              102\n-#define  Pragma_Interface_Name                103\n-#define  Pragma_Interrupt_Handler             104\n-#define  Pragma_Interrupt_Priority            105\n-#define  Pragma_Java_Constructor              106\n-#define  Pragma_Java_Interface                107\n-#define  Pragma_Keep_Names                    108\n-#define  Pragma_Link_With                     109\n-#define  Pragma_Linker_Alias                  110\n-#define  Pragma_Linker_Constructor            111\n-#define  Pragma_Linker_Destructor             112\n-#define  Pragma_Linker_Options                113\n-#define  Pragma_Linker_Section                114\n-#define  Pragma_List                          115\n-#define  Pragma_Machine_Attribute             116\n-#define  Pragma_Main                          117\n-#define  Pragma_Main_Storage                  118\n-#define  Pragma_Memory_Size                   119\n-#define  Pragma_No_Body                       120\n-#define  Pragma_No_Return                     121\n-#define  Pragma_Obsolescent                   122\n-#define  Pragma_Optimize                      123\n-#define  Pragma_Pack                          124\n-#define  Pragma_Page                          125\n-#define  Pragma_Passive                       126\n-#define  Pragma_Postcondition                 127\n-#define  Pragma_Precondition                  128\n-#define  Pragma_Preelaborable_Initialization  129\n-#define  Pragma_Preelaborate                  130\n-#define  Pragma_Preelaborate_05               131\n-#define  Pragma_Psect_Object                  132\n-#define  Pragma_Pure                          133\n-#define  Pragma_Pure_05                       134\n-#define  Pragma_Pure_Function                 135\n-#define  Pragma_Relative_Deadline             136\n-#define  Pragma_Remote_Call_Interface         137\n-#define  Pragma_Remote_Types                  138\n-#define  Pragma_Share_Generic                 139\n-#define  Pragma_Shared                        140\n-#define  Pragma_Shared_Passive                141\n-#define  Pragma_Source_Reference              142\n-#define  Pragma_Static_Elaboration_Desired    143\n-#define  Pragma_Stream_Convert                144\n-#define  Pragma_Subtitle                      145\n-#define  Pragma_Suppress_All                  146\n-#define  Pragma_Suppress_Debug_Info           147\n-#define  Pragma_Suppress_Initialization       148\n-#define  Pragma_System_Name                   149\n-#define  Pragma_Task_Info                     150\n-#define  Pragma_Task_Name                     151\n-#define  Pragma_Task_Storage                  152\n-#define  Pragma_Thread_Local_Storage          153\n-#define  Pragma_Time_Slice                    154\n-#define  Pragma_Title                         155\n-#define  Pragma_Unchecked_Union               156\n-#define  Pragma_Unimplemented_Unit            157\n-#define  Pragma_Universal_Aliasing            158\n-#define  Pragma_Unmodified                    159\n-#define  Pragma_Unreferenced                  160\n-#define  Pragma_Unreferenced_Objects          161\n-#define  Pragma_Unreserve_All_Interrupts      162\n-#define  Pragma_Volatile                      163\n-#define  Pragma_Volatile_Components           164\n-#define  Pragma_Weak_External                 165\n-#define  Pragma_AST_Entry                     166\n-#define  Pragma_Fast_Math                     167\n-#define  Pragma_Interface                     168\n-#define  Pragma_Priority                      169\n-#define  Pragma_Storage_Size                  170\n-#define  Pragma_Storage_Unit                  171\n-\n-/* End of snames.h (C version of Snames package spec) */"}, {"sha": "b15792a57246c2eb32c3cd7c2e54f723b304e768", "filename": "gcc/ada/snames.h-tmpl", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fsnames.h-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fsnames.h-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h-tmpl?ref=b62a90f2591debf3cba71c3b0ce34643e874b5fb", "patch": "@@ -0,0 +1,66 @@\n+/****************************************************************************\n+ *                                                                          *\n+ *                         GNAT COMPILER COMPONENTS                         *\n+ *                                                                          *\n+ *                               S N A M E S                                *\n+ *                                                                          *\n+ *                              C Header File                               *\n+ *                                                                          *\n+ *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n+ *                                                                          *\n+ * GNAT is free software;  you can  redistribute it  and/or modify it under *\n+ * terms of the  GNU General Public License as published  by the Free Soft- *\n+ * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n+ * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n+ * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License *\n+ * for  more details.  You should have  received  a copy of the GNU General *\n+ * Public License  distributed with GNAT; see file COPYING3.  If not, go to *\n+ * http://www.gnu.org/licenses for a complete copy of the license.          *\n+ *                                                                          *\n+ * GNAT was originally developed  by the GNAT team at  New York University. *\n+ * Extensive contributions were provided by Ada Core Technologies Inc.      *\n+ *                                                                          *\n+ ****************************************************************************/\n+\n+/* This is the C file that corresponds to the Ada package specification\n+   Snames. It was created automatically from the file snames.ads. */\n+\n+/* Name_Id values */\n+\n+#define  Name_ !! TEMPLATE INSERTION POINT\n+\n+/* Define the function to return one of the numeric values below. Note\n+   that it actually returns a char since an enumeration value of less\n+   than 256 entries is represented that way in Ada.  The operand is a Chars\n+   field value.  */\n+\n+#define Get_Attribute_Id snames__get_attribute_id\n+extern unsigned char Get_Attribute_Id (int);\n+\n+/* Define the numeric values for attributes.  */\n+\n+#define  Attr_ !! TEMPLATE INSERTION POINT\n+\n+/* Define the numeric values for the conventions.  */\n+\n+#define  Convention_ !! TEMPLATE INSERTION POINT\n+\n+/* Define the function to check if a Name_Id value is a valid pragma */\n+\n+#define Is_Pragma_Name snames__is_pragma_name\n+extern Boolean Is_Pragma_Name (Name_Id);\n+\n+/* Define the function to return one of the numeric values below.  Note\n+   that it actually returns a char since an enumeration value of less\n+   than 256 entries is represented that way in Ada.  The operand is a Chars\n+   field value.  */\n+\n+#define Get_Pragma_Id snames__get_pragma_id\n+extern unsigned char Get_Pragma_Id (int);\n+\n+/* Define the numeric values for the pragmas. */\n+\n+#define  Pragma_ !! TEMPLATE_INSERTION_POINT\n+\n+/* End of snames.h (C version of Snames package spec) */"}, {"sha": "77cb96589fcdc111fd84eebe5ba6c291325ade82", "filename": "gcc/ada/xsnamest.adb", "status": "added", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fxsnamest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gcc%2Fada%2Fxsnamest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxsnamest.adb?ref=b62a90f2591debf3cba71c3b0ce34643e874b5fb", "patch": "@@ -0,0 +1,266 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                          GNAT SYSTEM UTILITIES                           --\n+--                                                                          --\n+--                             X S N A M E S T                              --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This utility is used to make a new version of the Snames package when new\n+--  names are added. This version reads a template file from snames.adt in\n+--  which the numbers are all written as $, and generates a new version of\n+--  the spec file snames.ads (written to snames.ns). It also reads snames.adb\n+--  and generates an updated body (written to snames.nb), and snames.h and\n+--  generates an updated C header file (written to snames.nh).\n+\n+with Ada.Strings.Unbounded;         use Ada.Strings.Unbounded;\n+with Ada.Strings.Unbounded.Text_IO; use Ada.Strings.Unbounded.Text_IO;\n+with Ada.Strings.Maps;              use Ada.Strings.Maps;\n+with Ada.Strings.Maps.Constants;    use Ada.Strings.Maps.Constants;\n+with Ada.Text_IO;                   use Ada.Text_IO;\n+\n+with GNAT.Spitbol;                  use GNAT.Spitbol;\n+with GNAT.Spitbol.Patterns;         use GNAT.Spitbol.Patterns;\n+\n+procedure XSnamesT is\n+\n+   InB  : File_Type;\n+   InT  : File_Type;\n+   OutS : File_Type;\n+   OutB : File_Type;\n+   InH  : File_Type;\n+   OutH : File_Type;\n+\n+   A, B  : VString := Nul;\n+   Line  : VString := Nul;\n+   Name0 : VString := Nul;\n+   Name1 : VString := Nul;\n+   Oval  : VString := Nul;\n+   Restl : VString := Nul;\n+\n+   Name_Ref : constant Pattern := Span (' ') * A & Break (' ') * Name0\n+                                  & Span (' ') * B\n+                                  & \": constant Name_Id := N + $;\"\n+                                  & Rest * Restl;\n+\n+   Get_Name : constant Pattern := \"Name_\" & Rest * Name1;\n+   Chk_Low  : constant Pattern := Pos (0) & Any (Lower_Set) & Rest & Pos (1);\n+   Findu    : constant Pattern := Span ('u') * A;\n+\n+   Val : Natural;\n+\n+   Xlate_U_Und : constant Character_Mapping := To_Mapping (\"u\", \"_\");\n+\n+   M : Match_Result;\n+\n+   type Header_Symbol is (None, Name, Attr, Conv, Prag);\n+   --  A symbol in the header file\n+\n+   procedure Output_Header_Line (S : Header_Symbol);\n+   --  Output header line\n+\n+   Header_Name : aliased String := \"Name\";\n+   Header_Attr : aliased String := \"Attr\";\n+   Header_Conv : aliased String := \"Convention\";\n+   Header_Prag : aliased String := \"Pragma\";\n+   --  Prefixes used in the header file\n+\n+   type String_Ptr is access all String;\n+   Header_Prefix : constant array (Header_Symbol) of String_Ptr :=\n+                     (null,\n+                      Header_Name'Access,\n+                      Header_Attr'Access,\n+                      Header_Conv'Access,\n+                      Header_Prag'Access);\n+\n+   --  Patterns used in the spec file\n+\n+   Get_Attr : constant Pattern := Span (' ') & \"Attribute_\"\n+                                  & Break (\",)\") * Name1;\n+   Get_Conv : constant Pattern := Span (' ') & \"Convention_\"\n+                                  & Break (\",)\") * Name1;\n+   Get_Prag : constant Pattern := Span (' ') & \"Pragma_\"\n+                                  & Break (\",)\") * Name1;\n+\n+   type Header_Symbol_Counter is array (Header_Symbol) of Natural;\n+   Header_Counter : Header_Symbol_Counter := (0, 0, 0, 0, 0);\n+\n+   Header_Current_Symbol : Header_Symbol := None;\n+   Header_Pending_Line : VString := Nul;\n+\n+   ------------------------\n+   -- Output_Header_Line --\n+   ------------------------\n+\n+   procedure Output_Header_Line (S : Header_Symbol) is\n+      function Make_Value (V : Integer) return String;\n+      --  Build the definition for the current macro (Names are integers\n+      --  offset to N, while other items are enumeration values).\n+\n+      function Make_Value (V : Integer) return String is\n+      begin\n+         if S = Name then\n+            return \"(First_Name_Id + 256 + \" & V & \")\";\n+         else\n+            return \"\" & V;\n+         end if;\n+      end Make_Value;\n+\n+   begin\n+      --  Skip all the #define for S-prefixed symbols in the header.\n+      --  Of course we are making implicit assumptions:\n+      --   (1) No newline between symbols with the same prefix.\n+      --   (2) Prefix order is the same as in snames.ads.\n+\n+      if Header_Current_Symbol /= S then\n+         declare\n+            Name2 : Vstring;\n+            Pat : constant Pattern := \"#define  \"\n+                                       & Header_Prefix (S).all\n+                                       & Break (' ') * Name2;\n+            In_Pat : Boolean := False;\n+\n+         begin\n+            if Header_Current_Symbol /= None then\n+               Put_Line (OutH, Header_Pending_Line);\n+            end if;\n+\n+            loop\n+               Line := Get_Line (InH);\n+\n+               if Match (Line, Pat) then\n+                  In_Pat := True;\n+               elsif In_Pat then\n+                  Header_Pending_Line := Line;\n+                  exit;\n+               else\n+                  Put_Line (OutH, Line);\n+               end if;\n+            end loop;\n+\n+            Header_Current_Symbol := S;\n+         end;\n+      end if;\n+\n+      --  Now output the line\n+\n+      --  Note that we must ensure at least one space between macro name and\n+      --  parens, otherwise the parenthesized value gets treated as an argument\n+      --  specification.\n+\n+      Put_Line (OutH, \"#define  \" & Header_Prefix (S).all\n+                  & \"_\" & Name1\n+                  & (30 - Natural'Min (29, Length (Name1))) * ' '\n+                  & Make_Value (Header_Counter (S)));\n+      Header_Counter (S) := Header_Counter (S) + 1;\n+   end Output_Header_Line;\n+\n+--  Start of processing for XSnames\n+\n+begin\n+   Open (InT, In_File, \"snames.ads-tmpl\");\n+   Open (InB, In_File, \"snames.adb-tmpl\");\n+   Open (InH, In_File, \"snames.h-tmpl\");\n+\n+   Create (OutS, Out_File, \"snames.ns\");\n+   Create (OutB, Out_File, \"snames.nb\");\n+   Create (OutH, Out_File, \"snames.nh\");\n+\n+   Anchored_Mode := True;\n+   Val := 0;\n+\n+   loop\n+      Line := Get_Line (InB);\n+      exit when Match (Line, \"   Preset_Names\");\n+      Put_Line (OutB, Line);\n+   end loop;\n+\n+   Put_Line (OutB, Line);\n+\n+   LoopN : while not End_Of_File (InT) loop\n+      Line := Get_Line (InT);\n+\n+      if not Match (Line, Name_Ref) then\n+         Put_Line (OutS, Line);\n+\n+         if Match (Line, Get_Attr) then\n+            Output_Header_Line (Attr);\n+         elsif Match (Line, Get_Conv) then\n+            Output_Header_Line (Conv);\n+         elsif Match (Line, Get_Prag) then\n+            Output_Header_Line (Prag);\n+         end if;\n+      else\n+         Oval := Lpad (V (Val), 3, '0');\n+\n+         if Match (Name0, \"Last_\") then\n+            Oval := Lpad (V (Val - 1), 3, '0');\n+         end if;\n+\n+         Put_Line\n+           (OutS, A & Name0 & B & \": constant Name_Id := N + \"\n+            & Oval & ';' & Restl);\n+\n+         if Match (Name0, Get_Name) then\n+            Name0 := Name1;\n+            Val   := Val + 1;\n+\n+            if Match (Name0, Findu, M) then\n+               Replace (M, Translate (A, Xlate_U_Und));\n+               Translate (Name0, Lower_Case_Map);\n+\n+            elsif not Match (Name0, \"Op_\", \"\") then\n+               Translate (Name0, Lower_Case_Map);\n+\n+            else\n+               Name0 := 'O' & Translate (Name0, Lower_Case_Map);\n+            end if;\n+\n+            if Name0 = \"error\" then\n+               Name0 := V (\"<error>\");\n+            end if;\n+\n+            if not Match (Name0, Chk_Low) then\n+               Put_Line (OutB, \"     \"\"\" & Name0 & \"#\"\" &\");\n+            end if;\n+\n+            Output_Header_Line (Name);\n+         end if;\n+      end if;\n+   end loop LoopN;\n+\n+   loop\n+      Line := Get_Line (InB);\n+      exit when Match (Line, \"     \"\"#\"\";\");\n+   end loop;\n+\n+   Put_Line (OutB, Line);\n+\n+   while not End_Of_File (InB) loop\n+      Line := Get_Line (InB);\n+      Put_Line (OutB, Line);\n+   end loop;\n+\n+   Put_Line (OutH, Header_Pending_Line);\n+   while not End_Of_File (InH) loop\n+      Line := Get_Line (InH);\n+      Put_Line (OutH, Line);\n+   end loop;\n+end XSnamesT;"}, {"sha": "695762a536e0d4088b920473450f9ca5eb001dab", "filename": "gnattools/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gnattools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gnattools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FChangeLog?ref=b62a90f2591debf3cba71c3b0ce34643e874b5fb", "patch": "@@ -1,3 +1,7 @@\n+2009-04-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.in (stamp-tools): Add handling of snames.ad[sb]\n+\n 2009-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.in: Change copyright header to refer to version"}, {"sha": "e0cc4e1a110ea581ec53c1b9776c8eddc0b2dc43", "filename": "gnattools/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gnattools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b62a90f2591debf3cba71c3b0ce34643e874b5fb/gnattools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FMakefile.in?ref=b62a90f2591debf3cba71c3b0ce34643e874b5fb", "patch": "@@ -161,7 +161,7 @@ $(GCC_DIR)/stamp-gnatlib-rts:\n $(GCC_DIR)/stamp-tools:\n \t-rm -rf $(GCC_DIR)/ada/tools\n \t-mkdir -p $(GCC_DIR)/ada/tools\n-\t-(cd $(GCC_DIR)/ada/tools; $(LN_S) ../sdefault.adb .)\n+\t-(cd $(GCC_DIR)/ada/tools; $(LN_S) ../sdefault.adb ../snames.ads ../snames.adb .)\n \t-$(foreach PAIR,$(TOOLS_TARGET_PAIRS), \\\n \t          rm -f $(GCC_DIR)/ada/tools/$(word 1,$(subst <, ,$(PAIR)));\\\n \t          $(LN_S) $(fsrcdir)/$(word 2,$(subst <, ,$(PAIR))) \\"}]}