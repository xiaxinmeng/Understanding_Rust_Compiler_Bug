{"sha": "857c7b46875bdcf9d889543baad54977034d57ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3YzdiNDY4NzViZGNmOWQ4ODk1NDNiYWFkNTQ5NzcwMzRkNTdlZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:09:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:09:41Z"}, "message": "[11/77] Add a float_mode_for_size helper function\n\nThis provides a type-safe way to ask for a float mode and get it as a\nscalar_float_mode.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* coretypes.h (opt_scalar_float_mode): New typedef.\n\t* machmode.h (float_mode_for_size): New function.\n\t* emit-rtl.c (double_mode): Delete.\n\t(init_emit_once): Use float_mode_for_size.\n\t* stor-layout.c (layout_type): Likewise.\n\t* gdbhooks.py (build_pretty_printer): Handle opt_scalar_float_mode.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251463", "tree": {"sha": "60a693fba5c631712da730e6ce07a8deda2af759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60a693fba5c631712da730e6ce07a8deda2af759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/857c7b46875bdcf9d889543baad54977034d57ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857c7b46875bdcf9d889543baad54977034d57ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/857c7b46875bdcf9d889543baad54977034d57ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857c7b46875bdcf9d889543baad54977034d57ef/comments", "author": null, "committer": null, "parents": [{"sha": "d16c828e7aa2a704d887b071864823fc1e39670f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16c828e7aa2a704d887b071864823fc1e39670f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16c828e7aa2a704d887b071864823fc1e39670f"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "8b74bc783c98187d28f19fdcc63511b1ccf54300", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=857c7b46875bdcf9d889543baad54977034d57ef", "patch": "@@ -1,3 +1,14 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* coretypes.h (opt_scalar_float_mode): New typedef.\n+\t* machmode.h (float_mode_for_size): New function.\n+\t* emit-rtl.c (double_mode): Delete.\n+\t(init_emit_once): Use float_mode_for_size.\n+\t* stor-layout.c (layout_type): Likewise.\n+\t* gdbhooks.py (build_pretty_printer): Handle opt_scalar_float_mode.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "6313467d567a1aac481edb4e83b2c3c176a5cf89", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=857c7b46875bdcf9d889543baad54977034d57ef", "patch": "@@ -57,6 +57,7 @@ typedef struct rtx_def *rtx;\n typedef const struct rtx_def *const_rtx;\n class scalar_float_mode;\n template<typename> class opt_mode;\n+typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;\n \n /* Subclasses of rtx_def, using indentation to show the class\n    hierarchy, along with the relevant invariant."}, {"sha": "eaae009875d0c3833614820bce16943c73fe4261", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=857c7b46875bdcf9d889543baad54977034d57ef", "patch": "@@ -72,7 +72,6 @@ struct target_rtl *this_target_rtl = &default_target_rtl;\n \n machine_mode byte_mode;\t/* Mode whose width is BITS_PER_UNIT.  */\n machine_mode word_mode;\t/* Mode whose width is BITS_PER_WORD.  */\n-machine_mode double_mode;\t/* Mode whose width is DOUBLE_TYPE_SIZE.  */\n machine_mode ptr_mode;\t/* Mode whose width is POINTER_SIZE.  */\n \n /* Datastructures maintained for currently processed function in RTL form.  */\n@@ -5889,7 +5888,7 @@ init_emit_once (void)\n {\n   int i;\n   machine_mode mode;\n-  machine_mode double_mode;\n+  scalar_float_mode double_mode;\n \n   /* Initialize the CONST_INT, CONST_WIDE_INT, CONST_DOUBLE,\n      CONST_FIXED, and memory attribute hash tables.  */\n@@ -5933,7 +5932,7 @@ init_emit_once (void)\n   else\n     const_true_rtx = gen_rtx_CONST_INT (VOIDmode, STORE_FLAG_VALUE);\n \n-  double_mode = mode_for_size (DOUBLE_TYPE_SIZE, MODE_FLOAT, 0);\n+  double_mode = float_mode_for_size (DOUBLE_TYPE_SIZE).require ();\n \n   real_from_integer (&dconst0, double_mode, 0, SIGNED);\n   real_from_integer (&dconst1, double_mode, 1, SIGNED);"}, {"sha": "8d0c0656762edf38e79b244d7a4fc7bdb4ee625c", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=857c7b46875bdcf9d889543baad54977034d57ef", "patch": "@@ -542,6 +542,8 @@ def build_pretty_printer():\n \n     pp.add_printer_for_regex(r'opt_mode<(\\S+)>',\n                              'opt_mode', OptMachineModePrinter)\n+    pp.add_printer_for_types(['opt_scalar_float_mode'],\n+                             'opt_mode', OptMachineModePrinter)\n     pp.add_printer_for_types(['scalar_float_mode'],\n                              'scalar_float_mode', MachineModePrinter)\n "}, {"sha": "aa931f59c50549b22862cab771bc952554765885", "filename": "gcc/machmode.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=857c7b46875bdcf9d889543baad54977034d57ef", "patch": "@@ -520,7 +520,16 @@ extern const unsigned char mode_complex[NUM_MACHINE_MODES];\n \n extern machine_mode mode_for_size (unsigned int, enum mode_class, int);\n \n-/* Similar, but find the smallest mode for a given width.  */\n+/* Return the machine mode to use for a MODE_FLOAT of SIZE bits, if one\n+   exists.  */\n+\n+inline opt_scalar_float_mode\n+float_mode_for_size (unsigned int size)\n+{\n+  return dyn_cast <scalar_float_mode> (mode_for_size (size, MODE_FLOAT, 0));\n+}\n+\n+/* Similar to mode_for_size, but find the smallest mode for a given width.  */\n \n extern machine_mode smallest_mode_for_size (unsigned int,\n \t\t\t\t\t\t enum mode_class);"}, {"sha": "433fd9956e69fab8ba1a0c9b9a88c362c4e86407", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857c7b46875bdcf9d889543baad54977034d57ef/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=857c7b46875bdcf9d889543baad54977034d57ef", "patch": "@@ -2205,14 +2205,17 @@ layout_type (tree type)\n       break;\n \n     case REAL_TYPE:\n-      /* Allow the caller to choose the type mode, which is how decimal\n-\t floats are distinguished from binary ones.  */\n-      if (TYPE_MODE (type) == VOIDmode)\n-\tSET_TYPE_MODE (type,\n-\t\t       mode_for_size (TYPE_PRECISION (type), MODE_FLOAT, 0));\n-      TYPE_SIZE (type) = bitsize_int (GET_MODE_BITSIZE (TYPE_MODE (type)));\n-      TYPE_SIZE_UNIT (type) = size_int (GET_MODE_SIZE (TYPE_MODE (type)));\n-      break;\n+      {\n+\t/* Allow the caller to choose the type mode, which is how decimal\n+\t   floats are distinguished from binary ones.  */\n+\tif (TYPE_MODE (type) == VOIDmode)\n+\t  SET_TYPE_MODE\n+\t    (type, float_mode_for_size (TYPE_PRECISION (type)).require ());\n+\tscalar_float_mode mode = as_a <scalar_float_mode> (TYPE_MODE (type));\n+\tTYPE_SIZE (type) = bitsize_int (GET_MODE_BITSIZE (mode));\n+\tTYPE_SIZE_UNIT (type) = size_int (GET_MODE_SIZE (mode));\n+\tbreak;\n+      }\n \n    case FIXED_POINT_TYPE:\n      /* TYPE_MODE (type) has been set already.  */"}]}