{"sha": "9085a4c146a875be4b980241cd8d761b8f12a6f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4NWE0YzE0NmE4NzViZTRiOTgwMjQxY2Q4ZDc2MWI4ZjEyYTZmMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-12-30T17:14:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-30T17:14:16Z"}, "message": "i386.md (*testqi_ext_3): Merge insn pattern and corresponding splitter to define_insn_and_split.\n\n\t* config/i386/i386.md (*testqi_ext_3): Merge insn pattern and\n\tcorresponding splitter to define_insn_and_split.  Use wi::shifted_mask\n\thelper function to calculate mask.\n\nFrom-SVN: r243977", "tree": {"sha": "8d0b58221d69adef4234df0b841e914a3e11066f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0b58221d69adef4234df0b841e914a3e11066f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9085a4c146a875be4b980241cd8d761b8f12a6f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9085a4c146a875be4b980241cd8d761b8f12a6f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9085a4c146a875be4b980241cd8d761b8f12a6f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9085a4c146a875be4b980241cd8d761b8f12a6f1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edf5d079d3471991fe30ab870910481ce85aa925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf5d079d3471991fe30ab870910481ce85aa925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf5d079d3471991fe30ab870910481ce85aa925"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "ead35e3688f54a159a7fe8bcd92fc718e850518c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9085a4c146a875be4b980241cd8d761b8f12a6f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9085a4c146a875be4b980241cd8d761b8f12a6f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9085a4c146a875be4b980241cd8d761b8f12a6f1", "patch": "@@ -1,3 +1,9 @@\n+2016-12-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*testqi_ext_3): Merge insn pattern and\n+\tcorresponding splitter to define_insn_and_split.  Use wi::shifted_mask\n+\thelper function to calculate mask.\n+\n 2016-12-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/predicates.md (ext_register_operand): Do not reject"}, {"sha": "6546e20f17cc0958b3baf52776c1930eaca30ffd", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 34, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9085a4c146a875be4b980241cd8d761b8f12a6f1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9085a4c146a875be4b980241cd8d761b8f12a6f1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9085a4c146a875be4b980241cd8d761b8f12a6f1", "patch": "@@ -7924,42 +7924,33 @@\n    (set_attr \"mode\" \"QI\")])\n \n ;; Combine likes to form bit extractions for some tests.  Humor it.\n-(define_insn \"*testqi_ext_3\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (zero_extract:SWI248\n-\t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n-\t\t   (match_operand 1 \"const_int_operand\" \"n\")\n-\t\t   (match_operand 2 \"const_int_operand\" \"n\"))\n-\t\t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && ((TARGET_64BIT && GET_MODE (operands[0]) == DImode)\n-       || GET_MODE (operands[0]) == SImode\n-       || GET_MODE (operands[0]) == HImode\n-       || GET_MODE (operands[0]) == QImode)\n-   /* Ensure that resulting mask is zero or sign extended operand.  */\n-   && INTVAL (operands[2]) >= 0\n-   && ((INTVAL (operands[1]) > 0\n-\t&& INTVAL (operands[1]) + INTVAL (operands[2]) <= 32)\n-       || (<MODE>mode == DImode\n-\t   && INTVAL (operands[1]) > 32\n-\t   && INTVAL (operands[1]) + INTVAL (operands[2]) == 64))\"\n-  \"#\")\n-\n-(define_split\n+(define_insn_and_split \"*testqi_ext_3\"\n   [(set (match_operand 0 \"flags_reg_operand\")\n         (match_operator 1 \"compare_operator\"\n-\t  [(zero_extract\n-\t     (match_operand 2 \"nonimmediate_operand\")\n-\t     (match_operand 3 \"const_int_operand\")\n-\t     (match_operand 4 \"const_int_operand\"))\n+\t  [(zero_extract:SWI248\n+\t     (match_operand 2 \"nonimmediate_operand\" \"rm\")\n+\t     (match_operand 3 \"const_int_operand\" \"n\")\n+\t     (match_operand 4 \"const_int_operand\" \"n\"))\n \t   (const_int 0)]))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ((TARGET_64BIT && GET_MODE (operands[2]) == DImode)\n+       || GET_MODE (operands[2]) == SImode\n+       || GET_MODE (operands[2]) == HImode\n+       || GET_MODE (operands[2]) == QImode)\n+   /* Ensure that resulting mask is zero or sign extended operand.  */\n+   && INTVAL (operands[4]) >= 0\n+   && ((INTVAL (operands[3]) > 0\n+\t&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n+       || (<MODE>mode == DImode\n+\t   && INTVAL (operands[3]) > 32\n+\t   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\"\n+  \"#\"\n+  \"&& 1\"\n   [(set (match_dup 0) (match_op_dup 1 [(match_dup 2) (const_int 0)]))]\n {\n   rtx val = operands[2];\n   HOST_WIDE_INT len = INTVAL (operands[3]);\n   HOST_WIDE_INT pos = INTVAL (operands[4]);\n-  HOST_WIDE_INT mask;\n   machine_mode mode, submode;\n \n   mode = GET_MODE (val);\n@@ -7990,13 +7981,10 @@\n       val = gen_lowpart (QImode, val);\n     }\n \n-  if (len == HOST_BITS_PER_WIDE_INT)\n-    mask = -1;\n-  else\n-    mask = (HOST_WIDE_INT_1 << len) - 1;\n-  mask <<= pos;\n+  wide_int mask\n+    = wi::shifted_mask (pos, len, false, GET_MODE_PRECISION (mode));\n \n-  operands[2] = gen_rtx_AND (mode, val, gen_int_mode (mask, mode));\n+  operands[2] = gen_rtx_AND (mode, val, immed_wide_int_const (mask, mode));\n })\n \n ;; Convert HImode/SImode test instructions with immediate to QImode ones."}]}