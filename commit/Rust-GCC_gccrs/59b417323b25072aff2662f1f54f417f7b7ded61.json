{"sha": "59b417323b25072aff2662f1f54f417f7b7ded61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTliNDE3MzIzYjI1MDcyYWZmMjY2MmYxZjU0ZjQxN2Y3YjdkZWQ2MQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-02T16:30:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-02T16:30:47Z"}, "message": "Merge #469\n\n469: lowering attribute by copying attribute from AST to HIR directly r=philberty a=thomasyonug\n\nlowering attribute by copying attribute from AST to HIR directly.\r\n\r\nAddresses #459 \n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>", "tree": {"sha": "ab05c3728ec828ed65b037dcfd3f067bdf917030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab05c3728ec828ed65b037dcfd3f067bdf917030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59b417323b25072aff2662f1f54f417f7b7ded61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgt7I3CRBK7hj4Ov3rIwAAD/YIAKjkFGyAyUiML7oZeMAPLe7y\nczvg/DpssbRpfcviNrlIXHiP92MdhuJtT+1X+W5Gbj5mVdnM8m/GYWsxKsbuBAKc\noB5ZZipXRvXSMDSLGEi/l+AJsbYseHYAfxjWx9WXorcGX5gyAyrHb2TDxODjyRWX\no1UPrpiSe/FUxfb2mez9u/ItGfbsK24oIHF7Uh0Ezrs05nzOzxrocJSgcLCllPzf\nzaJL+vMa8BsFL8yCAvah9mgEXNV5aGEAvKaEkT24Y4cN52lc/EyWYB1LJ+n5rfbP\nVCyCGlAJlYgA81ym91Z4aiJvLX7HlyQ8lc4jBSSPZ/L15mYKP2Yt8N6qjJrxNxI=\n=xZVk\n-----END PGP SIGNATURE-----\n", "payload": "tree ab05c3728ec828ed65b037dcfd3f067bdf917030\nparent 325ef69b132819b824ae757695d9724e503f7256\nparent 2840815dc44a46ecaf1d7a9acd6634b92233433b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622651447 +0000\ncommitter GitHub <noreply@github.com> 1622651447 +0000\n\nMerge #469\n\n469: lowering attribute by copying attribute from AST to HIR directly r=philberty a=thomasyonug\n\nlowering attribute by copying attribute from AST to HIR directly.\r\n\r\nAddresses #459 \n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b417323b25072aff2662f1f54f417f7b7ded61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b417323b25072aff2662f1f54f417f7b7ded61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b417323b25072aff2662f1f54f417f7b7ded61/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "325ef69b132819b824ae757695d9724e503f7256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325ef69b132819b824ae757695d9724e503f7256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325ef69b132819b824ae757695d9724e503f7256"}, {"sha": "2840815dc44a46ecaf1d7a9acd6634b92233433b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2840815dc44a46ecaf1d7a9acd6634b92233433b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2840815dc44a46ecaf1d7a9acd6634b92233433b"}], "stats": {"total": 136, "additions": 46, "deletions": 90}, "files": [{"sha": "3b768a652ea8a9a69211ea392a49f391d70b8388", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=59b417323b25072aff2662f1f54f417f7b7ded61", "patch": "@@ -1611,6 +1611,7 @@ struct Crate\n   }\n \n   NodeId get_node_id () const { return node_id; }\n+  const std::vector<Attribute> &get_inner_attrs () const { return inner_attrs; }\n };\n \n // Base path expression AST node - abstract"}, {"sha": "b29bd142454d5484e9bc7bca548450a738dc44a2", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=59b417323b25072aff2662f1f54f417f7b7ded61", "patch": "@@ -142,7 +142,6 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \n   void visit (AST::LoopExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n     HIR::BlockExpr *loop_block\n       = ASTLoweringBlock::translate (expr.get_loop_block ().get (),\n \t\t\t\t     &terminated);\n@@ -158,7 +157,7 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n       = new HIR::LoopExpr (mapping,\n \t\t\t   std::unique_ptr<HIR::BlockExpr> (loop_block),\n \t\t\t   expr.get_locus (), std::move (loop_label),\n-\t\t\t   std::move (outer_attribs));\n+\t\t\t   expr.get_outer_attrs ());\n   }\n \n   void visit (AST::WhileLoopExpr &expr) override;"}, {"sha": "82d13d03dd7bc083153786db0b6da8810dbc3d55", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 21, "deletions": 51, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=59b417323b25072aff2662f1f54f417f7b7ded61", "patch": "@@ -80,8 +80,6 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::TupleIndexExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n-\n     HIR::Expr *tuple_expr\n       = ASTLoweringExpr::translate (expr.get_tuple_expr ().get (), &terminated);\n \n@@ -94,13 +92,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n       = new HIR::TupleIndexExpr (mapping,\n \t\t\t\t std::unique_ptr<HIR::Expr> (tuple_expr),\n \t\t\t\t expr.get_tuple_index (),\n-\t\t\t\t std::move (outer_attribs), expr.get_locus ());\n+\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n   }\n \n   void visit (AST::TupleExpr &expr) override\n   {\n-    AST::AttrVec inner_attribs;\n-    AST::AttrVec outer_attribs;\n     std::vector<std::unique_ptr<HIR::Expr> > tuple_elements;\n     for (auto &e : expr.get_tuple_elems ())\n       {\n@@ -115,8 +111,8 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n     translated\n       = new HIR::TupleExpr (std::move (mapping), std::move (tuple_elements),\n-\t\t\t    std::move (inner_attribs),\n-\t\t\t    std::move (outer_attribs), expr.get_locus ());\n+\t\t\t    expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t    expr.get_locus ());\n   }\n \n   void visit (AST::IfExpr &expr) override\n@@ -163,7 +159,6 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::CallExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n     HIR::Expr *func\n       = ASTLoweringExpr::translate (expr.get_function_expr ().get ());\n     std::vector<std::unique_ptr<HIR::Expr> > params;\n@@ -178,16 +173,13 @@ class ASTLoweringExpr : public ASTLoweringBase\n       crate_num, UNKNOWN_NODEID /* this can map back to the AST*/,\n       mappings->get_next_hir_id (crate_num), UNKNOWN_LOCAL_DEFID);\n \n-    translated\n-      = new HIR::CallExpr (mapping, std::unique_ptr<HIR::Expr> (func),\n-\t\t\t   std::move (params), std::move (outer_attribs),\n-\t\t\t   expr.get_locus ());\n+    translated = new HIR::CallExpr (mapping, std::unique_ptr<HIR::Expr> (func),\n+\t\t\t\t    std::move (params), expr.get_outer_attrs (),\n+\t\t\t\t    expr.get_locus ());\n   }\n \n   void visit (AST::MethodCallExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n-\n     HIR::PathExprSegment method_path\n       = lower_path_expr_seg (expr.get_method_name ());\n \n@@ -209,7 +201,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated\n       = new HIR::MethodCallExpr (mapping, std::unique_ptr<HIR::Expr> (receiver),\n \t\t\t\t method_path, std::move (params),\n-\t\t\t\t std::move (outer_attribs), expr.get_locus ());\n+\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n   }\n \n   void visit (AST::AssignmentExpr &expr) override\n@@ -240,9 +232,6 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::ArrayExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n-    AST::AttrVec inner_attribs;\n-\n     expr.get_array_elems ()->accept_vis (*this);\n     rust_assert (translated_array_elems != nullptr);\n     HIR::ArrayElems *elems = translated_array_elems;\n@@ -254,12 +243,12 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n     translated\n       = new HIR::ArrayExpr (mapping, std::unique_ptr<HIR::ArrayElems> (elems),\n-\t\t\t    inner_attribs, outer_attribs, expr.get_locus ());\n+\t\t\t    expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t    expr.get_locus ());\n   }\n \n   void visit (AST::ArrayIndexExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n     HIR::Expr *array_expr\n       = ASTLoweringExpr::translate (expr.get_array_expr ().get ());\n     HIR::Expr *array_index_expr\n@@ -274,7 +263,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n       = new HIR::ArrayIndexExpr (mapping,\n \t\t\t\t std::unique_ptr<HIR::Expr> (array_expr),\n \t\t\t\t std::unique_ptr<HIR::Expr> (array_index_expr),\n-\t\t\t\t outer_attribs, expr.get_locus ());\n+\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n   }\n \n   void visit (AST::ArrayElemsValues &elems) override\n@@ -402,8 +391,6 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::NegationExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n-\n     HIR::Expr *negated_value\n       = ASTLoweringExpr::translate (expr.get_negated_expr ().get ());\n \n@@ -414,7 +401,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated\n       = new HIR::NegationExpr (mapping,\n \t\t\t       std::unique_ptr<HIR::Expr> (negated_value),\n-\t\t\t       expr.get_expr_type (), std::move (outer_attribs),\n+\t\t\t       expr.get_expr_type (), expr.get_outer_attrs (),\n \t\t\t       expr.get_locus ());\n   }\n \n@@ -482,9 +469,6 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::StructExprStructFields &struct_expr) override\n   {\n-    AST::AttrVec inner_attribs;\n-    AST::AttrVec outer_attribs;\n-\n     // bit of a hack for now\n     HIR::PathInExpression *path\n       = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n@@ -513,18 +497,13 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n \n-    translated\n-      = new HIR::StructExprStructFields (mapping, copied_path,\n-\t\t\t\t\t std::move (fields),\n-\t\t\t\t\t struct_expr.get_locus (), base,\n-\t\t\t\t\t inner_attribs, outer_attribs);\n+    translated = new HIR::StructExprStructFields (\n+      mapping, copied_path, std::move (fields), struct_expr.get_locus (), base,\n+      struct_expr.get_inner_attrs (), struct_expr.get_outer_attrs ());\n   }\n \n   void visit (AST::GroupedExpr &expr) override\n   {\n-    AST::AttrVec inner_attribs;\n-    AST::AttrVec outer_attribs;\n-\n     HIR::Expr *paren_expr\n       = ASTLoweringExpr::translate (expr.get_expr_in_parens ().get ());\n \n@@ -535,15 +514,12 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n     translated\n       = new HIR::GroupedExpr (mapping, std::unique_ptr<HIR::Expr> (paren_expr),\n-\t\t\t      std::move (inner_attribs),\n-\t\t\t      std::move (outer_attribs), expr.get_locus ());\n+\t\t\t      expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t      expr.get_locus ());\n   }\n \n   void visit (AST::FieldAccessExpr &expr) override\n   {\n-    AST::AttrVec inner_attribs;\n-    AST::AttrVec outer_attribs;\n-\n     HIR::Expr *receiver\n       = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n \n@@ -555,7 +531,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n       = new HIR::FieldAccessExpr (mapping,\n \t\t\t\t  std::unique_ptr<HIR::Expr> (receiver),\n \t\t\t\t  expr.get_field_name (),\n-\t\t\t\t  std::move (outer_attribs), expr.get_locus ());\n+\t\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n   }\n \n   void visit (AST::LoopExpr &expr) override\n@@ -570,7 +546,6 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::BreakExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n     HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n     HIR::Expr *break_expr\n       = expr.has_break_expr ()\n@@ -585,12 +560,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated = new HIR::BreakExpr (mapping, expr.get_locus (),\n \t\t\t\t     std ::move (break_label),\n \t\t\t\t     std::unique_ptr<HIR::Expr> (break_expr),\n-\t\t\t\t     std::move (outer_attribs));\n+\t\t\t\t     expr.get_outer_attrs ());\n   }\n \n   void visit (AST::ContinueExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n     HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n \n     auto crate_num = mappings->get_current_crate ();\n@@ -600,13 +574,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n     translated = new HIR::ContinueExpr (mapping, expr.get_locus (),\n \t\t\t\t\tstd ::move (break_label),\n-\t\t\t\t\tstd::move (outer_attribs));\n+\t\t\t\t\texpr.get_outer_attrs ());\n   }\n \n   void visit (AST::BorrowExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n-\n     HIR::Expr *borrow_lvalue\n       = ASTLoweringExpr::translate (expr.get_borrowed_expr ().get ());\n \n@@ -619,13 +591,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n       = new HIR::BorrowExpr (mapping,\n \t\t\t     std::unique_ptr<HIR::Expr> (borrow_lvalue),\n \t\t\t     expr.get_is_mut (), expr.get_is_double_borrow (),\n-\t\t\t     std::move (outer_attribs), expr.get_locus ());\n+\t\t\t     expr.get_outer_attrs (), expr.get_locus ());\n   }\n \n   void visit (AST::DereferenceExpr &expr) override\n   {\n-    AST::AttrVec outer_attribs;\n-\n     HIR::Expr *dref_lvalue\n       = ASTLoweringExpr::translate (expr.get_dereferenced_expr ().get ());\n \n@@ -637,7 +607,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated\n       = new HIR::DereferenceExpr (mapping,\n \t\t\t\t  std::unique_ptr<HIR::Expr> (dref_lvalue),\n-\t\t\t\t  std::move (outer_attribs), expr.get_locus ());\n+\t\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n   }\n \n private:"}, {"sha": "7b884085b3b8c4fc31c735bb3155cee6f1c4b917", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=59b417323b25072aff2662f1f54f417f7b7ded61", "patch": "@@ -60,7 +60,6 @@ class ASTLowerImplItem : public ASTLoweringBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    AST::AttrVec outer_attrs;\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n@@ -74,7 +73,8 @@ class ASTLowerImplItem : public ASTLoweringBase\n     translated = new HIR::ConstantItem (mapping, constant.get_identifier (),\n \t\t\t\t\tvis, std::unique_ptr<HIR::Type> (type),\n \t\t\t\t\tstd::unique_ptr<HIR::Expr> (expr),\n-\t\t\t\t\touter_attrs, constant.get_locus ());\n+\t\t\t\t\tconstant.get_outer_attrs (),\n+\t\t\t\t\tconstant.get_locus ());\n \n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id,\n@@ -86,7 +86,6 @@ class ASTLowerImplItem : public ASTLoweringBase\n   void visit (AST::Function &function) override\n   {\n     // ignore for now and leave empty\n-    AST::AttrVec outer_attrs;\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n@@ -147,7 +146,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t   std::move (qualifiers), std::move (generic_params),\n \t\t\t   std::move (function_params), std::move (return_type),\n \t\t\t   std::move (where_clause), std::move (function_body),\n-\t\t\t   std::move (vis), std::move (outer_attrs), locus);\n+\t\t\t   std::move (vis), function.get_outer_attrs (), locus);\n \n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id, fn);\n@@ -169,7 +168,6 @@ class ASTLowerImplItem : public ASTLoweringBase\n   void visit (AST::Method &method) override\n   {\n     // ignore for now and leave empty\n-    AST::AttrVec outer_attrs;\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n@@ -228,7 +226,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t std::move (self_param), std::move (function_params),\n \t\t\t std::move (return_type), std::move (where_clause),\n \t\t\t std::move (method_body), std::move (vis),\n-\t\t\t std::move (outer_attrs), locus);\n+\t\t\t method.get_outer_attrs (), locus);\n \n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id, mth);"}, {"sha": "936aebbb6466e40b086bd545ea7fe4ad017bca39", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=59b417323b25072aff2662f1f54f417f7b7ded61", "patch": "@@ -58,7 +58,6 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n-    AST::AttrVec outer_attrs;\n \n     std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     if (alias.has_generics ())\n@@ -76,7 +75,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t     std::move (generic_params),\n \t\t\t\t     std::move (where_clause),\n \t\t\t\t     std::unique_ptr<HIR::Type> (existing_type),\n-\t\t\t\t     std::move (vis), std::move (outer_attrs),\n+\t\t\t\t     std::move (vis), alias.get_outer_attrs (),\n \t\t\t\t     alias.get_locus ());\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n@@ -98,11 +97,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n-    AST::AttrVec outer_attrs;\n \n     std::vector<HIR::TupleField> fields;\n     struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\n-      AST::AttrVec outer_attrs;\n       HIR::Visibility vis = HIR::Visibility::create_public ();\n       HIR::Type *type\n \t= ASTLoweringType::translate (field.get_field_type ().get ());\n@@ -118,7 +115,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       Location field_locus;\n       HIR::TupleField translated_field (mapping,\n \t\t\t\t\tstd::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\tfield_locus, outer_attrs);\n+\t\t\t\t\tfield_locus, field.get_outer_attrs ());\n       fields.push_back (std::move (translated_field));\n       return true;\n     });\n@@ -132,7 +129,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t       struct_decl.get_identifier (),\n \t\t\t\t       std::move (generic_params),\n \t\t\t\t       std::move (where_clause), vis,\n-\t\t\t\t       std::move (outer_attrs),\n+\t\t\t\t       struct_decl.get_outer_attrs (),\n \t\t\t\t       struct_decl.get_locus ());\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n@@ -154,12 +151,10 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n-    AST::AttrVec outer_attrs;\n \n     bool is_unit = struct_decl.is_unit_struct ();\n     std::vector<HIR::StructField> fields;\n     struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n-      AST::AttrVec outer_attrs;\n       HIR::Visibility vis = HIR::Visibility::create_public ();\n       HIR::Type *type\n \t= ASTLoweringType::translate (field.get_field_type ().get ());\n@@ -175,7 +170,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       Location field_locus;\n       HIR::StructField translated_field (mapping, field.get_field_name (),\n \t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\t field_locus, outer_attrs);\n+\t\t\t\t\t field_locus, field.get_outer_attrs ());\n       fields.push_back (std::move (translated_field));\n       return true;\n     });\n@@ -189,7 +184,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t\tstruct_decl.get_identifier (),\n \t\t\t\t\tstd::move (generic_params),\n \t\t\t\t\tstd::move (where_clause), is_unit, vis,\n-\t\t\t\t\tstd::move (outer_attrs),\n+\t\t\t\t\tstruct_decl.get_outer_attrs (),\n \t\t\t\t\tstruct_decl.get_locus ());\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n@@ -201,7 +196,6 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::StaticItem &var) override\n   {\n-    AST::AttrVec outer_attrs;\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     HIR::Type *type = ASTLoweringType::translate (var.get_type ().get ());\n@@ -216,7 +210,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       = new HIR::StaticItem (mapping, var.get_identifier (), var.is_mutable (),\n \t\t\t     std::unique_ptr<HIR::Type> (type),\n \t\t\t     std::unique_ptr<HIR::Expr> (expr), vis,\n-\t\t\t     outer_attrs, var.get_locus ());\n+\t\t\t     var.get_outer_attrs (), var.get_locus ());\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n@@ -227,7 +221,6 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    AST::AttrVec outer_attrs;\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n@@ -241,7 +234,8 @@ class ASTLoweringItem : public ASTLoweringBase\n     translated = new HIR::ConstantItem (mapping, constant.get_identifier (),\n \t\t\t\t\tvis, std::unique_ptr<HIR::Type> (type),\n \t\t\t\t\tstd::unique_ptr<HIR::Expr> (expr),\n-\t\t\t\t\touter_attrs, constant.get_locus ());\n+\t\t\t\t\tconstant.get_outer_attrs (),\n+\t\t\t\t\tconstant.get_locus ());\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n@@ -253,7 +247,6 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::Function &function) override\n   {\n     // ignore for now and leave empty\n-    AST::AttrVec outer_attrs;\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::FunctionQualifiers qualifiers (\n@@ -315,7 +308,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t   std::move (qualifiers), std::move (generic_params),\n \t\t\t   std::move (function_params), std::move (return_type),\n \t\t\t   std::move (where_clause), std::move (function_body),\n-\t\t\t   std::move (vis), std::move (outer_attrs), locus);\n+\t\t\t   std::move (vis), function.get_outer_attrs (), locus);\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n@@ -337,8 +330,6 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::InherentImpl &impl_block) override\n   {\n-    AST::AttrVec inner_attrs;\n-    AST::AttrVec outer_attrs;\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n@@ -397,8 +388,8 @@ class ASTLoweringItem : public ASTLoweringBase\n       = new HIR::InherentImpl (mapping, std::move (impl_items),\n \t\t\t       std::move (generic_params),\n \t\t\t       std::unique_ptr<HIR::Type> (trait_type),\n-\t\t\t       where_clause, vis, std::move (inner_attrs),\n-\t\t\t       std::move (outer_attrs),\n+\t\t\t       where_clause, vis, impl_block.get_inner_attrs (),\n+\t\t\t       impl_block.get_outer_attrs (),\n \t\t\t       impl_block.get_locus ());\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);"}, {"sha": "b0763e6fdca405ab9f1a13785e4e3829786c400a", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=59b417323b25072aff2662f1f54f417f7b7ded61", "patch": "@@ -86,7 +86,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n   void visit (AST::LetStmt &stmt) override\n   {\n-    AST::AttrVec outer_attrs;\n     HIR::Pattern *variables\n       = ASTLoweringPattern::translate (stmt.get_pattern ().get ());\n     HIR::Type *type = stmt.has_type ()\n@@ -105,7 +104,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n       = new HIR::LetStmt (mapping, std::unique_ptr<HIR::Pattern> (variables),\n \t\t\t  std::unique_ptr<HIR::Expr> (init_expression),\n \t\t\t  std::unique_ptr<HIR::Type> (type),\n-\t\t\t  std::move (outer_attrs), stmt.get_locus ());\n+\t\t\t  stmt.get_outer_attrs (), stmt.get_locus ());\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       stmt.get_locus ());\n     mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);"}, {"sha": "c8c506c4b8cfb0b840ccd001f4da5e90109a23bf", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=59b417323b25072aff2662f1f54f417f7b7ded61", "patch": "@@ -40,7 +40,6 @@ HIR::Crate\n ASTLowering::go ()\n {\n   std::vector<std::unique_ptr<HIR::Item> > items;\n-  AST::AttrVec inner_attrs;\n   bool has_utf8bom = false;\n   bool has_shebang = false;\n \n@@ -57,17 +56,14 @@ ASTLowering::go ()\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n-  return HIR::Crate (std::move (items), std::move (inner_attrs), mapping,\n+  return HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping,\n \t\t     has_utf8bom, has_shebang);\n }\n \n // rust-ast-lower-block.h\n void\n ASTLoweringBlock::visit (AST::BlockExpr &expr)\n {\n-  AST::AttrVec inner_attribs;\n-  AST::AttrVec outer_attribs;\n-\n   std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n   bool block_did_terminate = false;\n   expr.iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n@@ -105,8 +101,8 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n   translated\n     = new HIR::BlockExpr (mapping, std::move (block_stmts),\n \t\t\t  std::unique_ptr<HIR::ExprWithoutBlock> (tail_expr),\n-\t\t\t  tail_reachable, std::move (inner_attribs),\n-\t\t\t  std::move (outer_attribs), expr.get_locus ());\n+\t\t\t  tail_reachable, expr.get_inner_attrs (),\n+\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n \n   terminated = block_did_terminate;\n }\n@@ -240,7 +236,6 @@ ASTLowerStructExprField::visit (AST::StructExprFieldIdentifier &field)\n void\n ASTLoweringExprWithBlock::visit (AST::WhileLoopExpr &expr)\n {\n-  AST::AttrVec outer_attribs;\n   HIR::BlockExpr *loop_block\n     = ASTLoweringBlock::translate (expr.get_loop_block ().get (), &terminated);\n \n@@ -259,7 +254,7 @@ ASTLoweringExprWithBlock::visit (AST::WhileLoopExpr &expr)\n \t\t\t      std::unique_ptr<HIR::Expr> (loop_condition),\n \t\t\t      std::unique_ptr<HIR::BlockExpr> (loop_block),\n \t\t\t      expr.get_locus (), std::move (loop_label),\n-\t\t\t      std::move (outer_attribs));\n+\t\t\t      expr.get_outer_attrs ());\n }\n \n // rust-ast-lower-expr.h"}, {"sha": "0bc8a54e52799766ec1e9930c8b3cc901d0e0773", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b417323b25072aff2662f1f54f417f7b7ded61/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=59b417323b25072aff2662f1f54f417f7b7ded61", "patch": "@@ -290,6 +290,9 @@ class Item : public Stmt\n \n   virtual void accept_vis (HIRVisitor &vis ATTRIBUTE_UNUSED) {}\n \n+  AST::AttrVec &get_outer_attrs () { return outer_attrs; }\n+  const AST::AttrVec &get_outer_attrs () const { return outer_attrs; }\n+\n protected:\n   // Constructor\n   Item (Analysis::NodeMapping mappings,"}]}