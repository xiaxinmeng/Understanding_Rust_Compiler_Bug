{"sha": "95602da11cade17438211fe316b95e9dd5a68dd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2MDJkYTExY2FkZTE3NDM4MjExZmUzMTZiOTVlOWRkNWE2OGRkNA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@redhat.com", "date": "2001-08-30T12:46:52Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2001-08-30T12:46:52Z"}, "message": "c-typeck.c (pointer_diff): Try to eliminate common term before doing conversions.\n\n\t* c-typeck.c (pointer_diff): Try to eliminate common term before\n\tdoing conversions.\n\nFrom-SVN: r45285", "tree": {"sha": "8096e62d780a763e61db1fc89329a592df90bbae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8096e62d780a763e61db1fc89329a592df90bbae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95602da11cade17438211fe316b95e9dd5a68dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95602da11cade17438211fe316b95e9dd5a68dd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95602da11cade17438211fe316b95e9dd5a68dd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95602da11cade17438211fe316b95e9dd5a68dd4/comments", "author": null, "committer": null, "parents": [{"sha": "f232e4a5007e4367b4985d275d2a28dc2e44c8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f232e4a5007e4367b4985d275d2a28dc2e44c8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f232e4a5007e4367b4985d275d2a28dc2e44c8a6"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "4543e228274fe6e4ba77f3ed20f7bbfd83ff8964", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95602da11cade17438211fe316b95e9dd5a68dd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95602da11cade17438211fe316b95e9dd5a68dd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95602da11cade17438211fe316b95e9dd5a68dd4", "patch": "@@ -1,3 +1,8 @@\n+Thu Aug 30 10:21:43 2001  J\"orn Rennecke <amylaar@redhat.com>\n+\n+\t* c-typeck.c (pointer_diff): Try to eliminate common term before\n+\tdoing conversions.\n+\n 2001-08-29  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* reload1.c (move2add_note_store): Correct typo checking for"}, {"sha": "e28fa399d27d0314d1020029b88f647143625da9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95602da11cade17438211fe316b95e9dd5a68dd4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95602da11cade17438211fe316b95e9dd5a68dd4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=95602da11cade17438211fe316b95e9dd5a68dd4", "patch": "@@ -2684,6 +2684,8 @@ pointer_diff (op0, op1)\n   tree restype = ptrdiff_type_node;\n \n   tree target_type = TREE_TYPE (TREE_TYPE (op0));\n+  tree con0, con1, lit0, lit1;\n+  tree orig_op1 = op1;\n \n   if (pedantic || warn_pointer_arith)\n     {\n@@ -2693,6 +2695,40 @@ pointer_diff (op0, op1)\n \tpedwarn (\"pointer to a function used in subtraction\");\n     }\n \n+  /* If the conversion to ptrdiff_type does anything like widening or\n+     converting a partial to an integral mode, we get a convert_expression\n+     that is in the way to do any simplifications.\n+     (fold-const.c doesn't know that the extra bits won't be needed.\n+     split_tree uses STRIP_SIGN_NOPS, which leaves conversions to a\n+     different mode in place.)\n+     So first try to find a common term here 'by hand'; we want to cover\n+     at least the cases that occur in legal static initializers.  */\n+  con0 = TREE_CODE (op0) == NOP_EXPR ? TREE_OPERAND (op0, 0) : op0;\n+  con1 = TREE_CODE (op1) == NOP_EXPR ? TREE_OPERAND (op1, 0) : op1;\n+\n+  if (TREE_CODE (con0) == PLUS_EXPR)\n+    {\n+      lit0 = TREE_OPERAND (con0, 1);\n+      con0 = TREE_OPERAND (con0, 0);\n+    }\n+  else\n+    lit0 = integer_zero_node;\n+\n+  if (TREE_CODE (con1) == PLUS_EXPR)\n+    {\n+      lit1 = TREE_OPERAND (con1, 1);\n+      con1 = TREE_OPERAND (con1, 0);\n+    }\n+  else\n+    lit1 = integer_zero_node;\n+\n+  if (operand_equal_p (con0, con1, 0))\n+    {\n+      op0 = lit0;\n+      op1 = lit1;\n+    }\n+\n+\n   /* First do the subtraction as integers;\n      then drop through to build the divide operator.\n      Do not do default conversions on the minus operator\n@@ -2701,7 +2737,7 @@ pointer_diff (op0, op1)\n   op0 = build_binary_op (MINUS_EXPR, convert (restype, op0),\n \t\t\t convert (restype, op1), 0);\n   /* This generates an error if op1 is pointer to incomplete type.  */\n-  if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (TREE_TYPE (op1))))\n+  if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (TREE_TYPE (orig_op1))))\n     error (\"arithmetic on pointer to an incomplete type\");\n \n   /* This generates an error if op0 is pointer to incomplete type.  */"}]}