{"sha": "8322b607d60d721542792af78b84e9069ea1a662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMyMmI2MDdkNjBkNzIxNTQyNzkyYWY3OGI4NGU5MDY5ZWExYTY2Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-21T07:37:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-21T07:37:59Z"}, "message": "re PR tree-optimization/81884 (Invalid code generation with zero size arrays or flexible array members)\n\n2017-08-21  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/81884\n\t* tree-ssa-alias.c (stmt_kills_ref_p): Handle array accesses\n\tat struct end conservatively when comparing common bases.\n\n\t* g++.dg/torture/pr81884.C: New testcase.\n\nFrom-SVN: r251217", "tree": {"sha": "f862273caec95a27fb0f0dffcb2344c356018a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f862273caec95a27fb0f0dffcb2344c356018a6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8322b607d60d721542792af78b84e9069ea1a662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8322b607d60d721542792af78b84e9069ea1a662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8322b607d60d721542792af78b84e9069ea1a662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8322b607d60d721542792af78b84e9069ea1a662/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5164293abdea95879f97d4ad711aee010cdbbc95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5164293abdea95879f97d4ad711aee010cdbbc95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5164293abdea95879f97d4ad711aee010cdbbc95"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "213b5c803ab9d03c791f6672ebfcab0b9dc8a913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8322b607d60d721542792af78b84e9069ea1a662/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8322b607d60d721542792af78b84e9069ea1a662/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8322b607d60d721542792af78b84e9069ea1a662", "patch": "@@ -1,3 +1,9 @@\n+2017-08-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/81884\n+\t* tree-ssa-alias.c (stmt_kills_ref_p): Handle array accesses\n+\tat struct end conservatively when comparing common bases.\n+\n 2017-08-21  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-loop-im.c (struct lim_aux_data): Add ref index member."}, {"sha": "35d0be15c0e106a502708b949ea0035d1fe1bca5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8322b607d60d721542792af78b84e9069ea1a662/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8322b607d60d721542792af78b84e9069ea1a662/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8322b607d60d721542792af78b84e9069ea1a662", "patch": "@@ -1,3 +1,8 @@\n+2017-08-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/81884\n+\t* g++.dg/torture/pr81884.C: New testcase.\n+\n 2017-08-20  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR ipa/77732"}, {"sha": "f545355ce35298fbaa69f9f00e07c45f353f1440", "filename": "gcc/testsuite/g++.dg/torture/pr81884.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8322b607d60d721542792af78b84e9069ea1a662/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81884.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8322b607d60d721542792af78b84e9069ea1a662/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81884.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81884.C?ref=8322b607d60d721542792af78b84e9069ea1a662", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+\n+typedef unsigned long uint64_t;\n+\n+struct value_t {\n+    uint64_t _count;\n+    value_t(uint64_t c) : _count(c) {}\n+};\n+\n+struct X {\n+    value_t eventTime;\n+    uint64_t arr[0];\n+};\n+\n+X* x;\n+\n+__attribute__((noclone, noinline))\n+void initialize()\n+{\n+  x->arr[0] = 11;\n+  x->arr[1] = 12;\n+  x->eventTime = value_t(10);\n+  x->arr[2] = 13;\n+  x->arr[3] = 14;\n+}\n+\n+int main()\n+{\n+  char buffer[sizeof(X) + sizeof(uint64_t)*4];\n+  x = (X*)buffer;\n+  x->eventTime = value_t(999);\n+  x->arr[0] = 1;\n+  x->arr[1] = 2;\n+  x->arr[2] = 3;\n+  x->arr[3] = 4;\n+  initialize();\n+  if (x->arr[0] != 11 || x->arr[1] != 12 || x->arr[2] != 13 || x->arr[3] != 14)\n+    __builtin_abort ();\n+}"}, {"sha": "9bbc163b1c3206c5b7a9065dbac2a96acf8e7fb3", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8322b607d60d721542792af78b84e9069ea1a662/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8322b607d60d721542792af78b84e9069ea1a662/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=8322b607d60d721542792af78b84e9069ea1a662", "patch": "@@ -2416,6 +2416,7 @@ stmt_kills_ref_p (gimple *stmt, ao_ref *ref)\n       if (ref->ref)\n \t{\n \t  tree base = ref->ref;\n+\t  tree innermost_dropped_array_ref = NULL_TREE;\n \t  if (handled_component_p (base))\n \t    {\n \t      tree saved_lhs0 = NULL_TREE;\n@@ -2435,6 +2436,11 @@ stmt_kills_ref_p (gimple *stmt, ao_ref *ref)\n \t\t  TREE_OPERAND (base, 0) = saved_base0;\n \t\t  if (res)\n \t\t    break;\n+\t\t  /* Remember if we drop an array-ref that we need to\n+\t\t     double-check not being at struct end.  */ \n+\t\t  if (TREE_CODE (base) == ARRAY_REF\n+\t\t      || TREE_CODE (base) == ARRAY_RANGE_REF)\n+\t\t    innermost_dropped_array_ref = base;\n \t\t  /* Otherwise drop handled components of the access.  */\n \t\t  base = saved_base0;\n \t\t}\n@@ -2443,15 +2449,22 @@ stmt_kills_ref_p (gimple *stmt, ao_ref *ref)\n \t\tTREE_OPERAND (lhs, 0) = saved_lhs0;\n \t    }\n \t  /* Finally check if the lhs has the same address and size as the\n-\t     base candidate of the access.  */\n-\t  if (lhs == base\n-\t      || (((TYPE_SIZE (TREE_TYPE (lhs))\n-\t\t    == TYPE_SIZE (TREE_TYPE (base)))\n-\t\t   || (TYPE_SIZE (TREE_TYPE (lhs))\n-\t\t       && TYPE_SIZE (TREE_TYPE (base))\n-\t\t       && operand_equal_p (TYPE_SIZE (TREE_TYPE (lhs)),\n-\t\t\t\t\t   TYPE_SIZE (TREE_TYPE (base)), 0)))\n-\t\t  && operand_equal_p (lhs, base, OEP_ADDRESS_OF)))\n+\t     base candidate of the access.  Watch out if we have dropped\n+\t     an array-ref that was at struct end, this means ref->ref may\n+\t     be outside of the TYPE_SIZE of its base.  */\n+\t  if ((! innermost_dropped_array_ref\n+\t       || ! array_at_struct_end_p (innermost_dropped_array_ref))\n+\t      && (lhs == base\n+\t\t  || (((TYPE_SIZE (TREE_TYPE (lhs))\n+\t\t\t== TYPE_SIZE (TREE_TYPE (base)))\n+\t\t       || (TYPE_SIZE (TREE_TYPE (lhs))\n+\t\t\t   && TYPE_SIZE (TREE_TYPE (base))\n+\t\t\t   && operand_equal_p (TYPE_SIZE (TREE_TYPE (lhs)),\n+\t\t\t\t\t       TYPE_SIZE (TREE_TYPE (base)),\n+\t\t\t\t\t       0)))\n+\t\t      && operand_equal_p (lhs, base,\n+\t\t\t\t\t  OEP_ADDRESS_OF\n+\t\t\t\t\t  | OEP_MATCH_SIDE_EFFECTS))))\n \t    return true;\n \t}\n "}]}