{"sha": "7dc52ed58b754da4e2e26e50854af835f07520f4", "node_id": "C_kwDOANBUbNoAKDdkYzUyZWQ1OGI3NTRkYTRlMmUyNmU1MDg1NGFmODM1ZjA3NTIwZjQ", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-15T04:42:20Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-15T04:42:20Z"}, "message": "Remove the picoChip documentation\n\nPicoChip support was removed in r5-3431-g157e859ffe3b5d but the\ndocumentation was missed it seems.\n\nCommitted as obvious after running \"make html\" to make sure the\nbuilding of the documentation still works.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi: Remove picoChip builtin section.\n\t* doc/invoke.texi: Remove picoChip option section.", "tree": {"sha": "1bd592f6142d1ec198201e154a4019a868957370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bd592f6142d1ec198201e154a4019a868957370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc52ed58b754da4e2e26e50854af835f07520f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc52ed58b754da4e2e26e50854af835f07520f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc52ed58b754da4e2e26e50854af835f07520f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc52ed58b754da4e2e26e50854af835f07520f4/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298707b8ceaed91921b322356bde6bf986901ed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298707b8ceaed91921b322356bde6bf986901ed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298707b8ceaed91921b322356bde6bf986901ed8"}], "stats": {"total": 90, "additions": 0, "deletions": 90}, "files": [{"sha": "608bbe1699c73070791368515193702c8e44d77d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc52ed58b754da4e2e26e50854af835f07520f4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc52ed58b754da4e2e26e50854af835f07520f4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7dc52ed58b754da4e2e26e50854af835f07520f4", "patch": "@@ -14647,7 +14647,6 @@ instructions, but allow the compiler to schedule those calls.\n * Other MIPS Built-in Functions::\n * MSP430 Built-in Functions::\n * NDS32 Built-in Functions::\n-* picoChip Built-in Functions::\n * Basic PowerPC Built-in Functions::\n * PowerPC AltiVec/VSX Built-in Functions::\n * PowerPC Hardware Transactional Memory Built-in Functions::\n@@ -17774,42 +17773,6 @@ Enable global interrupt.\n Disable global interrupt.\n @end deftypefn\n \n-@node picoChip Built-in Functions\n-@subsection picoChip Built-in Functions\n-\n-GCC provides an interface to selected machine instructions from the\n-picoChip instruction set.\n-\n-@table @code\n-@item int __builtin_sbc (int @var{value})\n-Sign bit count.  Return the number of consecutive bits in @var{value}\n-that have the same value as the sign bit.  The result is the number of\n-leading sign bits minus one, giving the number of redundant sign bits in\n-@var{value}.\n-\n-@item int __builtin_byteswap (int @var{value})\n-Byte swap.  Return the result of swapping the upper and lower bytes of\n-@var{value}.\n-\n-@item int __builtin_brev (int @var{value})\n-Bit reversal.  Return the result of reversing the bits in\n-@var{value}.  Bit 15 is swapped with bit 0, bit 14 is swapped with bit 1,\n-and so on.\n-\n-@item int __builtin_adds (int @var{x}, int @var{y})\n-Saturating addition.  Return the result of adding @var{x} and @var{y},\n-storing the value 32767 if the result overflows.\n-\n-@item int __builtin_subs (int @var{x}, int @var{y})\n-Saturating subtraction.  Return the result of subtracting @var{y} from\n-@var{x}, storing the value @minus{}32768 if the result overflows.\n-\n-@item void __builtin_halt (void)\n-Halt.  The processor stops execution.  This built-in is useful for\n-implementing assertions.\n-\n-@end table\n-\n @node Basic PowerPC Built-in Functions\n @subsection Basic PowerPC Built-in Functions\n "}, {"sha": "ef88f2a6b3fe6d208ea6e2d37d6e2e84f2f70938", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc52ed58b754da4e2e26e50854af835f07520f4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc52ed58b754da4e2e26e50854af835f07520f4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7dc52ed58b754da4e2e26e50854af835f07520f4", "patch": "@@ -1190,10 +1190,6 @@ Objective-C and Objective-C++ Dialects}.\n -mint32  -mno-int16  -mint16  -mno-int32 @gol\n -msplit  -munix-asm  -mdec-asm  -mgnu-asm  -mlra}\n \n-@emph{picoChip Options}\n-@gccoptlist{-mae=@var{ae_type}  -mvliw-lookahead=@var{N} @gol\n--msymbol-as-address  -mno-inefficient-warnings}\n-\n @emph{PowerPC Options}\n See RS/6000 and PowerPC Options.\n \n@@ -19723,7 +19719,6 @@ platform.\n * Nvidia PTX Options::\n * OpenRISC Options::\n * PDP-11 Options::\n-* picoChip Options::\n * PowerPC Options::\n * PRU Options::\n * RISC-V Options::\n@@ -28396,54 +28391,6 @@ Use the new LRA register allocator.  By default, the old ``reload''\n allocator is used.\n @end table\n \n-@node picoChip Options\n-@subsection picoChip Options\n-@cindex picoChip options\n-\n-These @samp{-m} options are defined for picoChip implementations:\n-\n-@table @gcctabopt\n-\n-@item -mae=@var{ae_type}\n-@opindex mcpu\n-Set the instruction set, register set, and instruction scheduling\n-parameters for array element type @var{ae_type}.  Supported values\n-for @var{ae_type} are @samp{ANY}, @samp{MUL}, and @samp{MAC}.\n-\n-@option{-mae=ANY} selects a completely generic AE type.  Code\n-generated with this option runs on any of the other AE types.  The\n-code is not as efficient as it would be if compiled for a specific\n-AE type, and some types of operation (e.g., multiplication) do not\n-work properly on all types of AE.\n-\n-@option{-mae=MUL} selects a MUL AE type.  This is the most useful AE type\n-for compiled code, and is the default.\n-\n-@option{-mae=MAC} selects a DSP-style MAC AE.  Code compiled with this\n-option may suffer from poor performance of byte (char) manipulation,\n-since the DSP AE does not provide hardware support for byte load/stores.\n-\n-@item -msymbol-as-address\n-Enable the compiler to directly use a symbol name as an address in a\n-load/store instruction, without first loading it into a\n-register.  Typically, the use of this option generates larger\n-programs, which run faster than when the option isn't used.  However, the\n-results vary from program to program, so it is left as a user option,\n-rather than being permanently enabled.\n-\n-@item -mno-inefficient-warnings\n-Disables warnings about the generation of inefficient code.  These\n-warnings can be generated, for example, when compiling code that\n-performs byte-level memory operations on the MAC AE type.  The MAC AE has\n-no hardware support for byte-level memory operations, so all byte\n-load/stores must be synthesized from word load/store operations.  This is\n-inefficient and a warning is generated to indicate\n-that you should rewrite the code to avoid byte operations, or to target\n-an AE type that has the necessary hardware support.  This option disables\n-these warnings.\n-\n-@end table\n-\n @node PowerPC Options\n @subsection PowerPC Options\n @cindex PowerPC options"}]}