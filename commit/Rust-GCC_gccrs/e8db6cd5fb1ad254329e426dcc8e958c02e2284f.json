{"sha": "e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkYjZjZDVmYjFhZDI1NDMyOWU0MjZkY2M4ZTk1OGMwMmUyMjg0Zg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-18T17:58:20Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-18T17:58:20Z"}, "message": "re PR fortran/87336 (wrong output for pointer dummy assiocated to target actual argument)\n\n2018-09-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/87336\n\t* trans-array.c (gfc_get_array_span): Try to get the element\n\tlength of incomplete types. Return NULL_TREE otherwise.\n\t(gfc_conv_expr_descriptor): Only set the 'span' field if the\n\tabove does not return NULL_TREE. Set 'span' field if possible\n\tfor all new descriptors.\n\n2018-09-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/87336\n\t* gfortran.dg/pointer_array_10.f90 : New test.\n\t* gfortran.dg/assign_10.f90 : Increase 'parm' count to 20.\n\t* gfortran.dg/transpose_optimization_2.f90 : Increase 'parm'\n\tcount to 72.\n\nFrom-SVN: r264405", "tree": {"sha": "84a19f10fa7f398d30f138a265286552df4b586e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84a19f10fa7f398d30f138a265286552df4b586e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/comments", "author": null, "committer": null, "parents": [{"sha": "b819cc44a1a8f0b47f2c9c421980126776d9a8bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b819cc44a1a8f0b47f2c9c421980126776d9a8bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b819cc44a1a8f0b47f2c9c421980126776d9a8bb"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "5f10add3f0be5066357a3d2570415c03d5d345be", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "patch": "@@ -1,3 +1,12 @@\n+2018-09-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87336\n+\t* trans-array.c (gfc_get_array_span): Try to get the element\n+\tlength of incomplete types. Return NULL_TREE otherwise.\n+\t(gfc_conv_expr_descriptor): Only set the 'span' field if the\n+\tabove does not return NULL_TREE. Set 'span' field if possible\n+\tfor all new descriptors.\n+\n 2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/64120"}, {"sha": "95ea61550cf5adff4fccd1684cb07b60c0856b32", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "patch": "@@ -849,10 +849,22 @@ gfc_get_array_span (tree desc, gfc_expr *expr)\n   else\n     {\n       /* If none of the fancy stuff works, the span is the element\n-\t size of the array.  */\n+\t size of the array. Attempt to deal with unbounded character\n+\t types if possible. Otherwise, return NULL_TREE.  */\n       tmp = gfc_get_element_type (TREE_TYPE (desc));\n-      tmp = fold_convert (gfc_array_index_type,\n-\t\t\t  size_in_bytes (tmp));\n+      if (tmp && TREE_CODE (tmp) == ARRAY_TYPE\n+\t  && TYPE_MAX_VALUE (TYPE_DOMAIN (tmp)) == NULL_TREE)\n+\t{\n+\t  if (expr->expr_type == EXPR_VARIABLE\n+\t      && expr->ts.type == BT_CHARACTER)\n+\t    tmp = fold_convert (gfc_array_index_type,\n+\t\t\t\tgfc_get_expr_charlen (expr));\n+\t  else\n+\t    tmp = NULL_TREE;\n+\t}\n+      else\n+\ttmp = fold_convert (gfc_array_index_type,\n+\t\t\t    size_in_bytes (tmp));\n     }\n   return tmp;\n }\n@@ -7074,7 +7086,8 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \n \t      /* ....and set the span field.  */\n \t      tmp = gfc_get_array_span (desc, expr);\n-\t      gfc_conv_descriptor_span_set (&se->pre, se->expr, tmp);\n+\t      if (tmp != NULL_TREE)\n+\t\tgfc_conv_descriptor_span_set (&se->pre, se->expr, tmp);\n \t    }\n \t  else if (se->want_pointer)\n \t    {\n@@ -7344,13 +7357,9 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n       desc = info->descriptor;\n       if (se->direct_byref && !se->byref_noassign)\n \t{\n-\t  /* For pointer assignments we fill in the destination....  */\n+\t  /* For pointer assignments we fill in the destination.  */\n \t  parm = se->expr;\n \t  parmtype = TREE_TYPE (parm);\n-\n-\t  /* ....and set the span field.  */\n-\t  tmp = gfc_get_array_span (desc, expr);\n-\t  gfc_conv_descriptor_span_set (&loop.pre, parm, tmp);\n \t}\n       else\n \t{\n@@ -7388,6 +7397,11 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \t    }\n \t}\n \n+      /* Set the span field.  */\n+      tmp = gfc_get_array_span (desc, expr);\n+      if (tmp != NULL_TREE)\n+\tgfc_conv_descriptor_span_set (&loop.pre, parm, tmp);\n+\n       offset = gfc_index_zero_node;\n \n       /* The following can be somewhat confusing.  We have two"}, {"sha": "29481f07fc7cfc81d60522aa27b87d62e3581ae2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "patch": "@@ -1,3 +1,11 @@\n+2018-09-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87336\n+\t* gfortran.dg/pointer_array_10.f90 : New test.\n+\t* gfortran.dg/assign_10.f90 : Increase 'parm' count to 20.\n+\t* gfortran.dg/transpose_optimization_2.f90 : Increase 'parm'\n+\tcount to 72.\n+\n 2018-09-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/85065"}, {"sha": "6e57bef1650e5a564c2b3b82d472810dc05f76ec", "filename": "gcc/testsuite/gfortran.dg/assign_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90?ref=e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "patch": "@@ -23,5 +23,5 @@\n ! cases will all yield a temporary, so that atmp appears 18 times.\n ! Note that it is the kind conversion that generates the temp.\n !\n-! { dg-final { scan-tree-dump-times \"parm\" 18 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"parm\" 20 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"atmp\" 18 \"original\" } }"}, {"sha": "4e7b1402f62782115a00b64ebfef21a738abbba9", "filename": "gcc/testsuite/gfortran.dg/pointer_array_10.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_10.f90?ref=e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR87336, in which the 'span' field of the array\n+! descriptor, passed to 'show', was not set.\n+!\n+! Contributed by Juergen Reuter  <juergen.reuter@desy.de> following\n+! a posting to clf by 'Spectrum'.\n+!\n+program main\n+  implicit none\n+  integer, target :: a( 2:4 )\n+\n+  a = [2,3,4]\n+!  print *, \"a [before] = \", a\n+  call show( a )\n+!  print *, \"a [after]  = \", a\n+  if (any (a .ne. [200,300,400])) stop 1\n+\n+contains\n+  subroutine show( arr )\n+    integer, pointer, intent(in) :: arr(:)\n+!    print *, \"arr = \", arr\n+!    print *, \"bounds = \", lbound(arr), ubound(arr)\n+    arr(:) = [200,300,400]\n+!    print *, \"arr2= \", arr\n+  end subroutine show\n+  end program"}, {"sha": "4748da1954702a72f7f6f8b2c4349fbeefc9c304", "filename": "gcc/testsuite/gfortran.dg/transpose_optimization_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_optimization_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8db6cd5fb1ad254329e426dcc8e958c02e2284f/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_optimization_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_optimization_2.f90?ref=e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "patch": "@@ -60,5 +60,5 @@ end subroutine pure_sub\n !\n ! The check below for temporaries gave 14 and 33 for \"parm\" and \"atmp\".\n !\n-! { dg-final { scan-tree-dump-times \"parm\" 66 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"parm\" 72 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"atmp\" 12 \"original\" } }"}]}