{"sha": "0b094f655adbcfc286d1e03937814129dd5fa640", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwOTRmNjU1YWRiY2ZjMjg2ZDFlMDM5Mzc4MTQxMjlkZDVmYTY0MA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "1999-07-21T14:51:24Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "1999-07-21T14:51:24Z"}, "message": "lang.c (flag_use_divide_subroutine): New variable.\n\n1999-07-15  Andrew Haley  <aph@cygnus.com>\n\n        * lang.c (flag_use_divide_subroutine): New variable.\n        * typeck.c: (convert_ieee_real_to_integer): Bounds check\n        fp-to-integer conversion.\n        (convert): Call convert_ieee_real_to_integer when flag_fast_math\n        is not set.\n\n        * expr.c (build_java_soft_divmod): New function.\n        (build_java_binop): Call build_java_soft_divmod if\n        flag_use_divide_subroutine is set.\n        * decl.c: soft_idiv_node, soft_irem_node, soft_ldiv_node, tree\n        soft_lrem_node: new builtin functions.\n        (init_decl_processing) Initialize the new builtins.\n        * java-tree.h soft_idiv_node, soft_irem_node, soft_ldiv_node, tree\n        soft_lrem_node: new builtin functions.\n        (build_java_soft_divmod): New function.\n        * parse.y: Call build_java_soft_divmod if\n        flag_use_divide_subroutine is set.\n        * parse.c: Rebuilt.\n\n        * jvspec.c (lang_specific_driver): Always allow an extra arg (for\n        a --specs= arg) even if not linking.\n        * lang-options.h (DEFINE_LANG_NAME (\"Java\")): Add\n        -fuse-divide-subroutine\n\nFrom-SVN: r28209", "tree": {"sha": "c27a832be3b216288616a1f5fd5aa1334bcc9bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c27a832be3b216288616a1f5fd5aa1334bcc9bca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b094f655adbcfc286d1e03937814129dd5fa640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b094f655adbcfc286d1e03937814129dd5fa640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b094f655adbcfc286d1e03937814129dd5fa640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b094f655adbcfc286d1e03937814129dd5fa640/comments", "author": null, "committer": null, "parents": [{"sha": "aa4759c11cc78443455b69fca236c24ff89c91a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4759c11cc78443455b69fca236c24ff89c91a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4759c11cc78443455b69fca236c24ff89c91a1"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "4911d90e9d77461aef63769a4188039d803b9ec1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b094f655adbcfc286d1e03937814129dd5fa640/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b094f655adbcfc286d1e03937814129dd5fa640/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0b094f655adbcfc286d1e03937814129dd5fa640", "patch": "@@ -1,23 +1,29 @@\n 1999-07-15  Andrew Haley  <aph@cygnus.com>\n \n-\t* lang.c (flag_use_divide_subroutine): New variable.\n-\t* typeck.c: (convert_ieee_real_to_integer): Bounds check\n-\tfp-to-integer conversion.\n-\t(convert): Call convert_ieee_real_to_integer when flag_fast_math\n-\tis not set.\n-\n-\t* expr.c (build_java_soft_divmod): New function.\n-\t(build_java_binop): Call build_java_soft_divmod if\n-\tflag_use_divide_subroutine is set.\n-\t* decl.c: soft_idiv_node, soft_irem_node, soft_ldiv_node, tree\n-\tsoft_lrem_node: new builtin functions.\n-\t(init_decl_processing) Initialize the new builtins.\n-\t* java-tree.h soft_idiv_node, soft_irem_node, soft_ldiv_node, tree\n-\tsoft_lrem_node: new builtin functions.\n-\t(build_java_soft_divmod): New function.\n-\t* parse.y: Call build_java_soft_divmod if\n-\tflag_use_divide_subroutine is set.\n-\t\n+        * lang.c (flag_use_divide_subroutine): New variable.\n+        * typeck.c: (convert_ieee_real_to_integer): Bounds check\n+        fp-to-integer conversion.\n+        (convert): Call convert_ieee_real_to_integer when flag_fast_math\n+        is not set.\n+\n+        * expr.c (build_java_soft_divmod): New function.\n+        (build_java_binop): Call build_java_soft_divmod if\n+        flag_use_divide_subroutine is set.\n+        * decl.c: soft_idiv_node, soft_irem_node, soft_ldiv_node, tree\n+        soft_lrem_node: new builtin functions.\n+        (init_decl_processing) Initialize the new builtins.\n+        * java-tree.h soft_idiv_node, soft_irem_node, soft_ldiv_node, tree\n+        soft_lrem_node: new builtin functions.\n+        (build_java_soft_divmod): New function.\n+        * parse.y: Call build_java_soft_divmod if\n+        flag_use_divide_subroutine is set.\n+        * parse.c: Rebuilt.\n+\n+        * jvspec.c (lang_specific_driver): Always allow an extra arg (for\n+        a --specs= arg) even if not linking.\n+        * lang-options.h (DEFINE_LANG_NAME (\"Java\")): Add\n+        -fuse-divide-subroutine\n+\n Tue Jul 20 13:20:05 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (resolve_and_layout): Check methods only once."}, {"sha": "e962e584fb879c87e45c2dbac9a981a3afc9779c", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b094f655adbcfc286d1e03937814129dd5fa640/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b094f655adbcfc286d1e03937814129dd5fa640/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=0b094f655adbcfc286d1e03937814129dd5fa640", "patch": "@@ -376,8 +376,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n     }\n   if (saw_g + saw_O == 0)\n     num_args++;\n-  if (will_link)\n-    num_args++;\n+  num_args++;\n   arglist = (char **) xmalloc ((num_args + 1) * sizeof (char *));\n \n   for (i = 0, j = 0; i < argc; i++, j++)\n@@ -408,7 +407,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \t  continue;\n \t}\n \n-      if (will_link && spec_file == NULL && strncmp (argv[i], \"-L\", 2) == 0)\n+      if (spec_file == NULL && strncmp (argv[i], \"-L\", 2) == 0)\n \tspec_file = find_spec_file (argv[i] + 2);\n \n       if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n@@ -453,10 +452,10 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   if (saw_g + saw_O == 0)\n     arglist[j++] = \"-g1\";\n \n-  /* Read the specs file corresponding to libgcj, but only if linking.\n+  /* Read the specs file corresponding to libgcj.\n      If we didn't find the spec file on the -L path, then we hope it\n      is somewhere in the standard install areas.  */\n-  if (will_link)\n+  if (! saw_C)\n     arglist[j++] = spec_file == NULL ? \"-specs=libgcj.spec\" : spec_file;\n \n   if (saw_C)"}, {"sha": "7ebc7eed7868a4e1cb6580a47bf1297949875eee", "filename": "gcc/java/lang-options.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b094f655adbcfc286d1e03937814129dd5fa640/gcc%2Fjava%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b094f655adbcfc286d1e03937814129dd5fa640/gcc%2Fjava%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-options.h?ref=0b094f655adbcfc286d1e03937814129dd5fa640", "patch": "@@ -43,6 +43,8 @@ DEFINE_LANG_NAME (\"Java\")\n   { \"-fCLASSPATH\", \"Set class path\" },\n   { \"-I\", \"Add directory to class path\" },\n   { \"-foutput-class-dir\", \"Directory where class files should be written\" },\n+  { \"-fuse-divide-subroutine\", \"\" },\n+  { \"-fno-use-divide-subroutine\", \"Use built-in instructions for division\" },\n   { \"-Wredundant-modifiers\", \n     \"Warn if modifiers are specified when not necessary\"},\n-  { \"-Wunsupported-jdk11\", \"Warn if `final' local variables are specified\"},\n+  { \"-Wunsupported-jdk11\", \"Warn if `final' local variables are specified\"}"}, {"sha": "da19cda26d54878154093d33c7175ba8f9303b0e", "filename": "gcc/java/parse.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b094f655adbcfc286d1e03937814129dd5fa640/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b094f655adbcfc286d1e03937814129dd5fa640/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=0b094f655adbcfc286d1e03937814129dd5fa640", "patch": "@@ -2212,7 +2212,7 @@ static const short yycheck[] = {     3,\n #define YYPURE 1\n \n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/share/misc/bison.simple\"\n+#line 3 \"/usr/local/share/bison.simple\"\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -2229,7 +2229,7 @@ static const short yycheck[] = {     3,\n \n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n-   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* As a special exception, when this file is copied by Bison into a\n    Bison output file, you may use that output file without restriction.\n@@ -2363,10 +2363,8 @@ int yydebug;\t\t\t/*  nonzero means print parse trace\t*/\n \n /* Prevent warning if -Wstrict-prototypes.  */\n #ifdef __GNUC__\n-#ifndef YYPARSE_PARAM\n int yyparse (void);\n #endif\n-#endif\n \f\n #if __GNUC__ > 1\t\t/* GNU C and GNU C++ define this.  */\n #define __yy_memcpy(TO,FROM,COUNT)\t__builtin_memcpy(TO,FROM,COUNT)\n@@ -2407,7 +2405,7 @@ __yy_memcpy (char *to, char *from, int count)\n #endif\n #endif\n \f\n-#line 196 \"/usr/share/misc/bison.simple\"\n+#line 196 \"/usr/local/share/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -4696,7 +4694,7 @@ case 495:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 498 \"/usr/share/misc/bison.simple\"\n+#line 498 \"/usr/local/share/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -11998,6 +11996,12 @@ patch_binop (node, wfl_op1, wfl_op2)\n       if (code == RDIV_EXPR && TREE_CODE (prom_type) == INTEGER_TYPE)\n \tTREE_SET_CODE (node, TRUNC_DIV_EXPR);\n \n+      if (TREE_CODE (prom_type) == INTEGER_TYPE\n+\t  && flag_use_divide_subroutine\n+\t  && ! flag_emit_class_files\n+\t  && (code == RDIV_EXPR || code == TRUNC_MOD_EXPR))\n+\treturn build_java_soft_divmod (TREE_CODE (node), prom_type, op1, op2);\n+ \n       /* This one is more complicated. FLOATs are processed by a\n \t function call to soft_fmod. Duplicate the value of the\n \t COMPOUND_ASSIGN_P flag. */"}]}