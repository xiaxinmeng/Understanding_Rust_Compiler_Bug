{"sha": "92d2b330de38224e6b6de699baa5ee3436c2dbb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkMmIzMzBkZTM4MjI0ZTZiNmRlNjk5YmFhNWVlMzQzNmMyZGJiNg==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2005-02-14T14:54:37Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2005-02-14T14:54:37Z"}, "message": "lambda-code.c (lambda_loopnest_to_gcc_loopnest, [...]): Use standard_iv_increment_position for computing the bsi position for create_iv.\n\n\t* lambda-code.c (lambda_loopnest_to_gcc_loopnest, perfect_nestify):\n\tUse standard_iv_increment_position for computing the bsi position\n\tfor create_iv.\n\t* tree-ssa-loop-manip.c (create_iv): Add a comment on how to compute\n\tthe bsi position.\n\nFrom-SVN: r95013", "tree": {"sha": "b967749b4eb224822e41da16588df79f92eb3539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b967749b4eb224822e41da16588df79f92eb3539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92d2b330de38224e6b6de699baa5ee3436c2dbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d2b330de38224e6b6de699baa5ee3436c2dbb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d2b330de38224e6b6de699baa5ee3436c2dbb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d2b330de38224e6b6de699baa5ee3436c2dbb6/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31c3e6315753afb33f7cd2b9027bfc6d80623a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31c3e6315753afb33f7cd2b9027bfc6d80623a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31c3e6315753afb33f7cd2b9027bfc6d80623a52"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "dc6e63c8a8f713ebacb65039256a220c881dd6e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d2b330de38224e6b6de699baa5ee3436c2dbb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d2b330de38224e6b6de699baa5ee3436c2dbb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92d2b330de38224e6b6de699baa5ee3436c2dbb6", "patch": "@@ -1,3 +1,11 @@\n+2005-02-14  Sebastian Pop  <pop@cri.ensmp.fr>\n+        \n+\t* lambda-code.c (lambda_loopnest_to_gcc_loopnest, perfect_nestify):\n+\tUse standard_iv_increment_position for computing the bsi position\n+\tfor create_iv.\n+\t* tree-ssa-loop-manip.c (create_iv): Add a comment on how to compute\n+\tthe bsi position.\n+\n 2005-02-13  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR target/17428"}, {"sha": "2267e748120ebbd2cb1d3a67dd17550d66e3119b", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d2b330de38224e6b6de699baa5ee3436c2dbb6/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d2b330de38224e6b6de699baa5ee3436c2dbb6/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=92d2b330de38224e6b6de699baa5ee3436c2dbb6", "patch": "@@ -1873,6 +1873,7 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n       tree newupperbound, newlowerbound;\n       lambda_linear_expression offset;\n       tree type;\n+      bool insert_after;\n \n       oldiv = VEC_index (tree, old_ivs, i);\n       type = TREE_TYPE (oldiv);\n@@ -1915,14 +1916,12 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n       bsi = bsi_start (bb);\n       bsi_insert_after (&bsi, stmts, BSI_NEW_STMT);\n \n-      /* Create the new iv, and insert it's increment on the latch\n-         block.  */\n+      /* Create the new iv.  */\n \n-      bb = EDGE_PRED (temp->latch, 0)->src;\n-      bsi = bsi_last (bb);\n+      standard_iv_increment_position (temp, &bsi, &insert_after);\n       create_iv (newlowerbound,\n \t\t build_int_cst (type, LL_STEP (newloop)),\n-\t\t ivvar, temp, &bsi, false, &ivvar,\n+\t\t ivvar, temp, &bsi, insert_after, &ivvar,\n \t\t &ivvarinced);\n \n       /* Replace the exit condition with the new upper bound\n@@ -2297,6 +2296,7 @@ perfect_nestify (struct loops *loops,\n   basic_block preheaderbb, headerbb, bodybb, latchbb, olddest;\n   size_t i;\n   block_stmt_iterator bsi;\n+  bool insert_after;\n   edge e;\n   struct loop *newloop;\n   tree phi;\n@@ -2377,10 +2377,10 @@ perfect_nestify (struct loops *loops,\n   /* Create the new iv.  */\n   ivvar = create_tmp_var (integer_type_node, \"perfectiv\");\n   add_referenced_tmp_var (ivvar);\n-  bsi = bsi_last (EDGE_PRED (newloop->latch, 0)->src);\n+  standard_iv_increment_position (newloop, &bsi, &insert_after);\n   create_iv (VEC_index (tree, lbounds, 0),\n \t     build_int_cst (integer_type_node, VEC_index (int, steps, 0)),\n-\t     ivvar, newloop, &bsi, false, &ivvar, &ivvarinced);\t     \n+\t     ivvar, newloop, &bsi, insert_after, &ivvar, &ivvarinced);\t     \n \n   /* Create the new upper bound.  This may be not just a variable, so we copy\n      it to one just in case.  */\n@@ -2392,7 +2392,12 @@ perfect_nestify (struct loops *loops,\n \t\tVEC_index (tree, ubounds, 0));\n   uboundvar = make_ssa_name (uboundvar, stmt);\n   TREE_OPERAND (stmt, 0) = uboundvar;\n-  bsi_insert_before (&bsi, stmt, BSI_SAME_STMT);\n+\n+  if (insert_after)\n+    bsi_insert_after (&bsi, stmt, BSI_SAME_STMT);\n+  else\n+    bsi_insert_before (&bsi, stmt, BSI_SAME_STMT);\n+\n   COND_EXPR_COND (exit_condition) = build (GE_EXPR, \n \t\t\t\t\t   boolean_type_node,\n \t\t\t\t\t   uboundvar,"}, {"sha": "2fdfafa274f85f6a284124845277d3161b8b85b9", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d2b330de38224e6b6de699baa5ee3436c2dbb6/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d2b330de38224e6b6de699baa5ee3436c2dbb6/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=92d2b330de38224e6b6de699baa5ee3436c2dbb6", "patch": "@@ -41,7 +41,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    It is expected that neither BASE nor STEP are shared with other expressions\n    (unless the sharing rules allow this).  Use VAR as a base var_decl for it\n    (if NULL, a new temporary will be created).  The increment will occur at\n-   INCR_POS (after it if AFTER is true, before it otherwise).  The ssa versions\n+   INCR_POS (after it if AFTER is true, before it otherwise).  INCR_POS and \n+   AFTER can be computed using standard_iv_increment_position.  The ssa versions\n    of the variable before and after increment will be stored in VAR_BEFORE and\n    VAR_AFTER (unless they are NULL).  */\n "}]}