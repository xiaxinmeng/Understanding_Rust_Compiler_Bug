{"sha": "08c85f609a73fb36fdcbd9f327a5a645c20ac816", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjODVmNjA5YTczZmIzNmZkY2JkOWYzMjdhNWE2NDVjMjBhYzgxNg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-15T08:25:16Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-21T08:05:35Z"}, "message": "Disparage slightly the mask register alternative for bitwise operations.\n\nThe avx512 supports bitwise operations with mask registers, but the\nthroughput of those instructions is much lower than that of the\ncorresponding gpr version, so we would additionally disparages\nslightly the mask register alternative for bitwise operations in the\nLRA.\n\nAlso when allocano cost of GENERAL_REGS is same as MASK_REGS, allocate\nMASK_REGS first since it has already been disparaged.\n\ngcc/ChangeLog:\n\n\tPR target/101142\n\t* config/i386/i386.md: (*anddi_1): Disparage slightly the mask\n\tregister alternative.\n\t(*and<mode>_1): Ditto.\n\t(*andqi_1): Ditto.\n\t(*andn<mode>_1): Ditto.\n\t(*<code><mode>_1): Ditto.\n\t(*<code>qi_1): Ditto.\n\t(*one_cmpl<mode>2_1): Ditto.\n\t(*one_cmplsi2_1_zext): Ditto.\n\t(*one_cmplqi2_1): Ditto.\n\t* config/i386/i386.c (x86_order_regs_for_local_alloc): Change\n\tthe order of mask registers to be before general registers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/101142\n\t* gcc.target/i386/spill_to_mask-1.c: Adjust testcase.\n\t* gcc.target/i386/spill_to_mask-2.c: Adjust testcase.\n\t* gcc.target/i386/spill_to_mask-3.c: Adjust testcase.\n\t* gcc.target/i386/spill_to_mask-4.c: Adjust testcase.", "tree": {"sha": "bd9925a840b740531843f8c0697519c2e5fe8006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd9925a840b740531843f8c0697519c2e5fe8006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08c85f609a73fb36fdcbd9f327a5a645c20ac816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c85f609a73fb36fdcbd9f327a5a645c20ac816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c85f609a73fb36fdcbd9f327a5a645c20ac816", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c85f609a73fb36fdcbd9f327a5a645c20ac816/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cedbaab8e048b90ceb9ceef0d851385fae67cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cedbaab8e048b90ceb9ceef0d851385fae67cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cedbaab8e048b90ceb9ceef0d851385fae67cde"}], "stats": {"total": 155, "additions": 96, "deletions": 59}, "files": [{"sha": "c3740ff8ec446dd081b85fe09800207f126a9ad3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=08c85f609a73fb36fdcbd9f327a5a645c20ac816", "patch": "@@ -20475,6 +20475,15 @@ x86_order_regs_for_local_alloc (void)\n    int pos = 0;\n    int i;\n \n+   /* When allocano cost of GENERAL_REGS is same as MASK_REGS, allocate\n+      MASK_REGS first since it has already been disparaged. This is for\n+      testcase bitwise_mask_op3.c where the input is allocated as mask\n+      registers, then mask bitwise instructions should be used there.\n+      Refer to pr101142.  */\n+   /* Mask register.  */\n+   for (i = FIRST_MASK_REG; i <= LAST_MASK_REG; i++)\n+     reg_alloc_order [pos++] = i;\n+\n    /* First allocate the local general purpose registers.  */\n    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n      if (GENERAL_REGNO_P (i) && call_used_or_fixed_reg_p (i))\n@@ -20501,10 +20510,6 @@ x86_order_regs_for_local_alloc (void)\n    for (i = FIRST_EXT_REX_SSE_REG; i <= LAST_EXT_REX_SSE_REG; i++)\n      reg_alloc_order [pos++] = i;\n \n-   /* Mask register.  */\n-   for (i = FIRST_MASK_REG; i <= LAST_MASK_REG; i++)\n-     reg_alloc_order [pos++] = i;\n-\n    /* x87 registers.  */\n    if (TARGET_SSE_MATH)\n      for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)"}, {"sha": "91168284e5e40f76dba6772d8bdd7000810bc26d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=08c85f609a73fb36fdcbd9f327a5a645c20ac816", "patch": "@@ -9138,7 +9138,7 @@\n })\n \n (define_insn \"*anddi_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r,r,k\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r,r,?k\")\n \t(and:DI\n \t (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,qm,k\")\n \t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,m,L,k\")))\n@@ -9226,7 +9226,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*and<mode>_1\"\n-  [(set (match_operand:SWI24 0 \"nonimmediate_operand\" \"=rm,r,Ya,k\")\n+  [(set (match_operand:SWI24 0 \"nonimmediate_operand\" \"=rm,r,Ya,?k\")\n \t(and:SWI24 (match_operand:SWI24 1 \"nonimmediate_operand\" \"%0,0,qm,k\")\n \t\t   (match_operand:SWI24 2 \"<general_operand>\" \"r<i>,m,L,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -9255,7 +9255,7 @@\n    (set_attr \"mode\" \"<MODE>,<MODE>,SI,<MODE>\")])\n \n (define_insn \"*andqi_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,k\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,?k\")\n \t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,k\")\n \t\t(match_operand:QI 2 \"general_operand\" \"qn,m,rn,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -9651,7 +9651,7 @@\n })\n \n (define_insn \"*andn<mode>_1\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r,k\")\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r,?k\")\n \t(and:SWI48\n \t  (not:SWI48 (match_operand:SWI48 1 \"register_operand\" \"r,r,k\"))\n \t  (match_operand:SWI48 2 \"nonimmediate_operand\" \"r,m,k\")))\n@@ -9667,7 +9667,7 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*andn<mode>_1\"\n-  [(set (match_operand:SWI12 0 \"register_operand\" \"=r,k\")\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"=r,?k\")\n \t(and:SWI12\n \t  (not:SWI12 (match_operand:SWI12 1 \"register_operand\" \"r,k\"))\n \t  (match_operand:SWI12 2 \"register_operand\" \"r,k\")))\n@@ -9757,7 +9757,7 @@\n })\n \n (define_insn \"*<code><mode>_1\"\n-  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,r,k\")\n+  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,r,?k\")\n \t(any_or:SWI248\n \t (match_operand:SWI248 1 \"nonimmediate_operand\" \"%0,0,k\")\n \t (match_operand:SWI248 2 \"<general_operand>\" \"r<i>,m,k\")))\n@@ -9847,7 +9847,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*<code>qi_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,k\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,?k\")\n \t(any_or:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,k\")\n \t\t   (match_operand:QI 2 \"general_operand\" \"qn,m,rn,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -10603,7 +10603,7 @@\n   \"split_double_mode (DImode, &operands[0], 2, &operands[0], &operands[2]);\")\n \n (define_insn \"*one_cmpl<mode>2_1\"\n-  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,k\")\n+  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,?k\")\n \t(not:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"0,k\")))]\n   \"ix86_unary_operator_ok (NOT, <MODE>mode, operands)\"\n   \"@\n@@ -10620,7 +10620,7 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*one_cmplsi2_1_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,k\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,?k\")\n \t(zero_extend:DI\n \t  (not:SI (match_operand:SI 1 \"register_operand\" \"0,k\"))))]\n   \"TARGET_64BIT && ix86_unary_operator_ok (NOT, SImode, operands)\"\n@@ -10632,7 +10632,7 @@\n    (set_attr \"mode\" \"SI,SI\")])\n \n (define_insn \"*one_cmplqi2_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,k\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,?k\")\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,k\")))]\n   \"ix86_unary_operator_ok (NOT, QImode, operands)\"\n   \"@"}, {"sha": "94d6764fc56f5f3c161563257debb96e9916554d", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-1.c", "status": "modified", "additions": 62, "deletions": 27, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c?ref=08c85f609a73fb36fdcbd9f327a5a645c20ac816", "patch": "@@ -1,15 +1,31 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -march=skylake-avx512\" } */\n-\n-#ifndef DTYPE\n-#define DTYPE u32\n-#endif\n+/* { dg-options \"-O2 -march=skylake-avx512 -DDTYPE32\" } */\n \n typedef unsigned long long u64;\n typedef unsigned int u32;\n typedef unsigned short u16;\n typedef unsigned char u8;\n \n+#ifdef DTYPE32\n+typedef u32 DTYPE;\n+#define byteswap byteswapu32\n+#endif\n+\n+#ifdef DTYPE16\n+typedef u16 DTYPE;\n+#define byteswap byteswapu16\n+#endif\n+\n+#ifdef DTYPE8\n+typedef u16 DTYPE;\n+#define byteswap byteswapu8\n+#endif\n+\n+#ifdef DTYPE64\n+typedef u16 DTYPE;\n+#define byteswap byteswapu64\n+#endif\n+\n #define R(x,n) ( (x >> n) | (x << (32 - n)))\n \n #define S0(x) (R(x, 2) ^ R(x,13) ^ R(x,22))\n@@ -23,36 +39,51 @@ typedef unsigned char u8;\n     d += tmp1;                                           \\\n }\n \n-static inline DTYPE byteswap(DTYPE x)\n+static inline u32 byteswapu32(u32 x)\n {\n-\tx = (x & 0x0000FFFF) << 16 | (x & 0xFFFF0000) >> 16;\n-\tx = (x & 0x00FF00FF) << 8 | (x & 0xFF00FF00) >> 8;  \n-\treturn x;\n+  x = (x & 0x0000FFFF) << 16 | (x & 0xFFFF0000) >> 16;\n+  x = (x & 0x00FF00FF) << 8 | (x & 0xFF00FF00) >> 8;  \n+  return x;\n }\n \n-#define BE_LOAD32(n,b,i) (n) = byteswap(*(DTYPE *)(b + i))\n+static inline u16 byteswapu16(u16 x)\n+{\n+  x = (x & 0x00FF) << 8 | (x & 0xFF00) >> 8;  \n+  return x;\n+}\n+\n+static inline u8 byteswapu8(u8 x)\n+{\n+  return x;\n+}\n+\n+static inline u64 byteswapu64(u64 x)\n+{\n+  x = ((u64)(byteswapu32 (x & 0x00000000FFFFFFFF))) << 32 | byteswapu32((x & 0xFFFFFFFF00000000) >> 32);\n+  return x;\n+}\n \n-void foo (u8 *in, DTYPE out[8], const DTYPE C[16])\n+void foo (DTYPE in[16], DTYPE out[8], const DTYPE C[16])\n {\n     DTYPE tmp1 = 0, tmp2 = 0, a, b, c, d, e, f, g, h;\n     DTYPE w0, w1, w2, w3, w4, w5, w6, w7,\n \tw8, w9, w10, w11, w12, w13, w14, w15;\n-    w0  = byteswap(*(DTYPE *)(in + 0));\n-    w1  = byteswap(*(DTYPE *)(in + 4));\n-    w2  = byteswap(*(DTYPE *)(in + 8));\n-    w3  = byteswap(*(DTYPE *)(in + 12));\n-    w4  = byteswap(*(DTYPE *)(in + 16));\n-    w5  = byteswap(*(DTYPE *)(in + 20));\n-    w6  = byteswap(*(DTYPE *)(in + 24));\n-    w7  = byteswap(*(DTYPE *)(in + 28));\n-    w8  = byteswap(*(DTYPE *)(in + 32));\n-    w9  = byteswap(*(DTYPE *)(in + 36));\n-    w10 = byteswap(*(DTYPE *)(in + 40));\n-    w11 = byteswap(*(DTYPE *)(in + 44));\n-    w12 = byteswap(*(DTYPE *)(in + 48));\n-    w13 = byteswap(*(DTYPE *)(in + 52));\n-    w14 = byteswap(*(DTYPE *)(in + 56));\n-    w15 = byteswap(*(DTYPE *)(in + 60));\n+    w0  = byteswap(in[0]);\n+    w1  = byteswap(in[1]);\n+    w2  = byteswap(in[2]);\n+    w3  = byteswap(in[3]);\n+    w4  = byteswap(in[4]);\n+    w5  = byteswap(in[5]);\n+    w6  = byteswap(in[6]);\n+    w7  = byteswap(in[7]);\n+    w8  = byteswap(in[8]);\n+    w9  = byteswap(in[9]);\n+    w10 = byteswap(in[10]);\n+    w11 = byteswap(in[11]);\n+    w12 = byteswap(in[12]);\n+    w13 = byteswap(in[13]);\n+    w14 = byteswap(in[14]);\n+    w15 = byteswap(in[15]);\n     a = out[0];\n     b = out[1];\n     c = out[2];\n@@ -90,3 +121,7 @@ void foo (u8 *in, DTYPE out[8], const DTYPE C[16])\n }\n \n /* { dg-final { scan-assembler \"kmovd\" } } */\n+/* { dg-final { scan-assembler-not \"knot\" } } */\n+/* { dg-final { scan-assembler-not \"kxor\" } } */\n+/* { dg-final { scan-assembler-not \"kor\" } } */\n+/* { dg-final { scan-assembler-not \"kandn\" } } */"}, {"sha": "c7d09769ed52d643b0da99d1ee726b9af14400ec", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-2.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-2.c?ref=08c85f609a73fb36fdcbd9f327a5a645c20ac816", "patch": "@@ -1,10 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -march=skylake-avx512\" } */\n-\n-#ifndef DTYPE\n-#define DTYPE u16\n-#endif\n+/* { dg-options \"-O2 -march=skylake-avx512 -DDTYPE16\" } */\n \n #include \"spill_to_mask-1.c\"\n \n-/* { dg-final { scan-assembler \"kmovw\" } } */\n+/* { dg-final { scan-assembler-not \"knot\" } } */\n+/* { dg-final { scan-assembler-not \"kxor\" } } */\n+/* { dg-final { scan-assembler-not \"kor\" } } */\n+/* { dg-final { scan-assembler-not \"kandn\" } } */"}, {"sha": "b7a383fe12f364c7311069e209cd1f4b23f02683", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-3.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-3.c?ref=08c85f609a73fb36fdcbd9f327a5a645c20ac816", "patch": "@@ -1,10 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -march=skylake-avx512\" } */\n-\n-#ifndef DTYPE\n-#define DTYPE u8\n-#endif\n+/* { dg-options \"-O2 -march=skylake-avx512 -DDTYPE8\" } */\n \n #include \"spill_to_mask-1.c\"\n \n-/* { dg-final { scan-assembler \"kmovb\" } } */\n+/* { dg-final { scan-assembler-not \"knot\" } } */\n+/* { dg-final { scan-assembler-not \"kxor\" } } */\n+/* { dg-final { scan-assembler-not \"kor\" } } */\n+/* { dg-final { scan-assembler-not \"kandn\" } } */"}, {"sha": "d67038d5b88b29502e339ff60a7cafe2aa507562", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-4.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c85f609a73fb36fdcbd9f327a5a645c20ac816/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-4.c?ref=08c85f609a73fb36fdcbd9f327a5a645c20ac816", "patch": "@@ -1,10 +1,9 @@\n /* { dg-do compile  { target { ! ia32 } } } */\n-/* { dg-options \"-O2 -march=skylake-avx512\" } */\n-\n-#ifndef DTYPE\n-#define DTYPE u64\n-#endif\n+/* { dg-options \"-O2 -march=skylake-avx512 -DDTYPE64\" } */\n \n #include \"spill_to_mask-1.c\"\n \n-/* { dg-final { scan-assembler \"kmovq\" } } */\n+/* { dg-final { scan-assembler-not \"knot\" } } */\n+/* { dg-final { scan-assembler-not \"kxor\" } } */\n+/* { dg-final { scan-assembler-not \"kor\" } } */\n+/* { dg-final { scan-assembler-not \"kandn\" } } */"}]}