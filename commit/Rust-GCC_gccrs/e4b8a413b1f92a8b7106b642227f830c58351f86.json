{"sha": "e4b8a413b1f92a8b7106b642227f830c58351f86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiOGE0MTNiMWY5MmE4YjcxMDZiNjQyMjI3ZjgzMGM1ODM1MWY4Ng==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1999-05-31T08:43:04Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "1999-05-31T08:43:04Z"}, "message": "flow.c (mark_regs_live_at_end, [...]): Only give FRAME_POINTER_REGNUM and HARD_FRAME_POINTER_REGNUM special treatment...\n\n\t* flow.c (mark_regs_live_at_end, insn_dead_p,\n\tmark_set_1, mark_used_regs): Only give FRAME_POINTER_REGNUM\n\tand HARD_FRAME_POINTER_REGNUM special treatment if reload\n\thasn't run or the frame pointer is needed.\n\t* haifa-sched.c (attach_deaths): Likewise.\n\t* sched.c (attach_deaths): Likewise.\n\nFrom-SVN: r27276", "tree": {"sha": "78c2d352fc235963ecbb33a4a29bd39217e6aca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78c2d352fc235963ecbb33a4a29bd39217e6aca8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4b8a413b1f92a8b7106b642227f830c58351f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b8a413b1f92a8b7106b642227f830c58351f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b8a413b1f92a8b7106b642227f830c58351f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b8a413b1f92a8b7106b642227f830c58351f86/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2d352ba5a352660e9bee9c31a92c1bce9e3f27f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d352ba5a352660e9bee9c31a92c1bce9e3f27f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d352ba5a352660e9bee9c31a92c1bce9e3f27f"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "0efedc1bc286f390867b3e3921620992ac7a5237", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b8a413b1f92a8b7106b642227f830c58351f86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b8a413b1f92a8b7106b642227f830c58351f86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4b8a413b1f92a8b7106b642227f830c58351f86", "patch": "@@ -1,3 +1,12 @@\n+Mon May 31 11:40:20 EDT 1999  John Wehle  (john@feith.com)\n+\n+\t* flow.c (mark_regs_live_at_end, insn_dead_p,\n+\tmark_set_1, mark_used_regs): Only give FRAME_POINTER_REGNUM\n+\tand HARD_FRAME_POINTER_REGNUM special treatment if reload\n+\thasn't run or the frame pointer is needed.\n+\t* haifa-sched.c (attach_deaths): Likewise.\n+\t* sched.c (attach_deaths): Likewise.\n+\n Mon May 31 00:46:17 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* configure.in (native gas tests): Search for an assembler in the"}, {"sha": "8b0a7691aa1d0b806e2a9d03642490de6a7d6d2a", "filename": "gcc/flow.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b8a413b1f92a8b7106b642227f830c58351f86/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b8a413b1f92a8b7106b642227f830c58351f86/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=e4b8a413b1f92a8b7106b642227f830c58351f86", "patch": "@@ -2272,11 +2272,14 @@ mark_regs_live_at_end (set)\n      we end up eliminating it, it will be removed from the live list\n      of each basic block by reload.  */\n \n-  SET_REGNO_REG_SET (set, FRAME_POINTER_REGNUM);\n+  if (! reload_completed || frame_pointer_needed)\n+    {\n+      SET_REGNO_REG_SET (set, FRAME_POINTER_REGNUM);\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n-  /* If they are different, also mark the hard frame pointer as live */\n-  SET_REGNO_REG_SET (set, HARD_FRAME_POINTER_REGNUM);\n+      /* If they are different, also mark the hard frame pointer as live */\n+      SET_REGNO_REG_SET (set, HARD_FRAME_POINTER_REGNUM);\n #endif      \n+    }\n \n   /* Mark all global registers, and all registers used by the epilogue\n      as being live at the end of the function since they may be\n@@ -2957,9 +2960,11 @@ insn_dead_p (x, needed, call_ok, notes)\n \t  /* Don't delete insns to set global regs.  */\n \t  if ((regno < FIRST_PSEUDO_REGISTER && global_regs[regno])\n \t      /* Make sure insns to set frame pointer aren't deleted.  */\n-\t      || regno == FRAME_POINTER_REGNUM\n+\t      || (regno == FRAME_POINTER_REGNUM\n+\t\t  && (! reload_completed || frame_pointer_needed))\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n-\t      || regno == HARD_FRAME_POINTER_REGNUM\n+\t      || (regno == HARD_FRAME_POINTER_REGNUM\n+\t\t  && (! reload_completed || frame_pointer_needed))\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n \t      /* Make sure insns to set arg pointer are never deleted\n@@ -3268,9 +3273,11 @@ mark_set_1 (needed, dead, x, insn, significant)\n     mem_set_list = gen_rtx_EXPR_LIST (VOIDmode, reg, mem_set_list);\n \n   if (GET_CODE (reg) == REG\n-      && (regno = REGNO (reg), regno != FRAME_POINTER_REGNUM)\n+      && (regno = REGNO (reg), ! (regno == FRAME_POINTER_REGNUM\n+\t\t\t\t  && (! reload_completed || frame_pointer_needed)))\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n-      && regno != HARD_FRAME_POINTER_REGNUM\n+      && ! (regno == HARD_FRAME_POINTER_REGNUM\n+\t    && (! reload_completed || frame_pointer_needed))\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       && ! (regno == ARG_POINTER_REGNUM && fixed_regs[regno])\n@@ -3728,12 +3735,14 @@ mark_used_regs (needed, live, x, final, insn)\n \t       nothing below can be necessary, so waste no more time.  */\n \t    if (regno == STACK_POINTER_REGNUM\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n-\t\t|| regno == HARD_FRAME_POINTER_REGNUM\n+\t\t|| (regno == HARD_FRAME_POINTER_REGNUM\n+\t\t    && (! reload_completed || frame_pointer_needed))\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n \t\t|| (regno == ARG_POINTER_REGNUM && fixed_regs[regno])\n #endif\n-\t\t|| regno == FRAME_POINTER_REGNUM)\n+\t\t|| (regno == FRAME_POINTER_REGNUM\n+\t\t    && (! reload_completed || frame_pointer_needed)))\n \t      {\n \t\t/* If this is a register we are going to try to eliminate,\n \t\t   don't mark it live here.  If we are successful in\n@@ -3909,9 +3918,11 @@ mark_used_regs (needed, live, x, final, insn)\n \tif ((GET_CODE (testreg) == PARALLEL\n \t     && GET_MODE (testreg) == BLKmode)\n \t    || (GET_CODE (testreg) == REG\n-\t\t&& (regno = REGNO (testreg), regno != FRAME_POINTER_REGNUM)\n+\t\t&& (regno = REGNO (testreg), ! (regno == FRAME_POINTER_REGNUM\n+\t\t\t\t\t\t&& (! reload_completed || frame_pointer_needed)))\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n-\t\t&& regno != HARD_FRAME_POINTER_REGNUM\n+\t\t&& ! (regno == HARD_FRAME_POINTER_REGNUM\n+\t\t      && (! reload_completed || frame_pointer_needed))\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n \t\t&& ! (regno == ARG_POINTER_REGNUM && fixed_regs[regno])"}, {"sha": "41a61c459cd9764fcc8e017b0239933f76fe6d65", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b8a413b1f92a8b7106b642227f830c58351f86/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b8a413b1f92a8b7106b642227f830c58351f86/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=e4b8a413b1f92a8b7106b642227f830c58351f86", "patch": "@@ -4630,12 +4630,15 @@ attach_deaths (x, insn, set_p)\n \n \tif (regno >= FIRST_PSEUDO_REGISTER || ! global_regs[regno])\n \t  {\n-\t    /* Never add REG_DEAD notes for the FRAME_POINTER_REGNUM or the\n-\t       STACK_POINTER_REGNUM, since these are always considered to be\n-\t       live.  Similarly for ARG_POINTER_REGNUM if it is fixed.  */\n-\t    if (regno != FRAME_POINTER_REGNUM\n+\t    /* Never add REG_DEAD notes for STACK_POINTER_REGNUM\n+\t       since it's always considered to be live.  Similarly\n+\t       for FRAME_POINTER_REGNUM if a frame pointer is needed\n+\t       and for ARG_POINTER_REGNUM if it is fixed.  */\n+\t    if (! (regno == FRAME_POINTER_REGNUM\n+\t\t   && (! reload_completed || frame_pointer_needed))\n #if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t\t&& ! (regno == HARD_FRAME_POINTER_REGNUM)\n+\t\t&& ! (regno == HARD_FRAME_POINTER_REGNUM\n+\t\t      && (! reload_completed || frame_pointer_needed))\n #endif\n #if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n \t\t&& ! (regno == ARG_POINTER_REGNUM && fixed_regs[regno])"}, {"sha": "e8cd070e45c8c9885fe9f949b6e95b9a9fc0df85", "filename": "gcc/sched.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b8a413b1f92a8b7106b642227f830c58351f86/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b8a413b1f92a8b7106b642227f830c58351f86/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=e4b8a413b1f92a8b7106b642227f830c58351f86", "patch": "@@ -2309,12 +2309,15 @@ attach_deaths (x, insn, set_p)\n \n \tif (regno >= FIRST_PSEUDO_REGISTER || ! global_regs[regno])\n \t  {\n-\t    /* Never add REG_DEAD notes for the FRAME_POINTER_REGNUM or the\n-\t       STACK_POINTER_REGNUM, since these are always considered to be\n-\t       live.  Similarly for ARG_POINTER_REGNUM if it is fixed.  */\n-\t    if (regno != FRAME_POINTER_REGNUM\n+\t    /* Never add REG_DEAD notes for STACK_POINTER_REGNUM\n+\t       since it's always considered to be live.  Similarly\n+\t       for FRAME_POINTER_REGNUM if a frame pointer is needed\n+\t       and for ARG_POINTER_REGNUM if it is fixed.  */\n+\t    if (! (regno == FRAME_POINTER_REGNUM\n+\t\t   && (! reload_completed || frame_pointer_needed))\n #if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t\t&& ! (regno == HARD_FRAME_POINTER_REGNUM)\n+\t\t&& ! (regno == HARD_FRAME_POINTER_REGNUM\n+\t\t      && (! reload_completed || frame_pointer_needed))\n #endif\n #if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n \t\t&& ! (regno == ARG_POINTER_REGNUM && fixed_regs[regno])"}]}