{"sha": "bbf171c9d25becdf77087a9e7d2b9e4bde030e80", "node_id": "C_kwDOANBUbNoAKGJiZjE3MWM5ZDI1YmVjZGY3NzA4N2E5ZTdkMmI5ZTRiZGUwMzBlODA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-28T12:44:39Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-28T12:44:39Z"}, "message": "Fix ICE on missing TypeParam within type context\n\nDuring type-resolution we resolve/type-check traits in a query based way.\nSo when we reference a trait we look it up as required but this left a case\nfor the privacy pass where the type-context information on the trait when\nthe trait was not used meant there was no type-checking performed on the\ntrait.\n\nThis patch adds an interface to directly resolve the trait when as we\niterate the crate so we do it as required. There is already code in the\ntrait resolver to check if we have already type-resolved this trait.\n\nFixes #1128", "tree": {"sha": "f7459b4e772f45da4340b71edf8fc3504ca09299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7459b4e772f45da4340b71edf8fc3504ca09299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbf171c9d25becdf77087a9e7d2b9e4bde030e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf171c9d25becdf77087a9e7d2b9e4bde030e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf171c9d25becdf77087a9e7d2b9e4bde030e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e500a4164f988c23f3b1dcf87605388cf8f5d721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e500a4164f988c23f3b1dcf87605388cf8f5d721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e500a4164f988c23f3b1dcf87605388cf8f5d721"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "13edd8d1a6f8cbb88742953af2eed2e8c400c67e", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=bbf171c9d25becdf77087a9e7d2b9e4bde030e80", "patch": "@@ -74,7 +74,14 @@ TraitReference *\n TraitResolver::Resolve (HIR::TypePath &path)\n {\n   TraitResolver resolver;\n-  return resolver.go (path);\n+  return resolver.resolve_path (path);\n+}\n+\n+TraitReference *\n+TraitResolver::Resolve (HIR::Trait &trait)\n+{\n+  TraitResolver resolver;\n+  return resolver.resolve_trait (&trait);\n }\n \n TraitReference *\n@@ -84,10 +91,12 @@ TraitResolver::Lookup (HIR::TypePath &path)\n   return resolver.lookup_path (path);\n }\n \n-TraitResolver::TraitResolver () : TypeCheckBase () {}\n+TraitResolver::TraitResolver ()\n+  : TypeCheckBase (), resolved_trait_reference (nullptr)\n+{}\n \n TraitReference *\n-TraitResolver::go (HIR::TypePath &path)\n+TraitResolver::resolve_path (HIR::TypePath &path)\n {\n   NodeId ref;\n   if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n@@ -110,8 +119,14 @@ TraitResolver::go (HIR::TypePath &path)\n \n   rust_assert (resolved_item != nullptr);\n   resolved_item->accept_vis (*this);\n-  rust_assert (trait_reference != nullptr);\n+  rust_assert (resolved_trait_reference != nullptr);\n \n+  return resolve_trait (resolved_trait_reference);\n+}\n+\n+TraitReference *\n+TraitResolver::resolve_trait (HIR::Trait *trait_reference)\n+{\n   TraitReference *tref = &TraitReference::error_node ();\n   if (context->lookup_trait_reference (\n \ttrait_reference->get_mappings ().get_defid (), &tref))\n@@ -243,11 +258,11 @@ TraitResolver::lookup_path (HIR::TypePath &path)\n \n   rust_assert (resolved_item != nullptr);\n   resolved_item->accept_vis (*this);\n-  rust_assert (trait_reference != nullptr);\n+  rust_assert (resolved_trait_reference != nullptr);\n \n   TraitReference *tref = &TraitReference::error_node ();\n   if (context->lookup_trait_reference (\n-\ttrait_reference->get_mappings ().get_defid (), &tref))\n+\tresolved_trait_reference->get_mappings ().get_defid (), &tref))\n     {\n       return tref;\n     }"}, {"sha": "a73b67fc142e9dd13d49416035c794b8b7c36da5", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=bbf171c9d25becdf77087a9e7d2b9e4bde030e80", "patch": "@@ -66,19 +66,23 @@ class TraitResolver : public TypeCheckBase\n public:\n   static TraitReference *Resolve (HIR::TypePath &path);\n \n+  static TraitReference *Resolve (HIR::Trait &trait);\n+\n   static TraitReference *Lookup (HIR::TypePath &path);\n \n private:\n   TraitResolver ();\n \n-  TraitReference *go (HIR::TypePath &path);\n+  TraitReference *resolve_path (HIR::TypePath &path);\n+\n+  TraitReference *resolve_trait (HIR::Trait *trait_reference);\n \n   TraitReference *lookup_path (HIR::TypePath &path);\n \n-  HIR::Trait *trait_reference;\n+  HIR::Trait *resolved_trait_reference;\n \n public:\n-  void visit (HIR::Trait &trait) override { trait_reference = &trait; }\n+  void visit (HIR::Trait &trait) override { resolved_trait_reference = &trait; }\n };\n \n } // namespace Resolver"}, {"sha": "71b6b815e36d29dd7c789c123a78525216df5053", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=bbf171c9d25becdf77087a9e7d2b9e4bde030e80", "patch": "@@ -224,6 +224,8 @@ class TypeCheckItem : public TypeCheckBase\n       TypeCheckItem::Resolve (item.get ());\n   }\n \n+  void visit (HIR::Trait &trait) override { TraitResolver::Resolve (trait); }\n+\n private:\n   TypeCheckItem () : TypeCheckBase () {}\n };"}, {"sha": "462426b679dad20c0ff5d33fb8d991bf209f60d3", "filename": "gcc/testsuite/rust/compile/issue-1128.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1128.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf171c9d25becdf77087a9e7d2b9e4bde030e80/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1128.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1128.rs?ref=bbf171c9d25becdf77087a9e7d2b9e4bde030e80", "patch": "@@ -0,0 +1,6 @@\n+pub trait Hasher {\n+    fn write(&mut self, bytes: &[u8]);\n+    fn write_u8(&mut self, i: u8) {\n+        self.write(&[i])\n+    }\n+}"}]}