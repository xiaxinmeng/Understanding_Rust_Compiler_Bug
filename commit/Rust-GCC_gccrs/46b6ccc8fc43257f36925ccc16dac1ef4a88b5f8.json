{"sha": "46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiNmNjYzhmYzQzMjU3ZjM2OTI1Y2NjMTZkYWMxZWY0YTg4YjVmOA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-07-31T15:57:03Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-07-31T15:57:03Z"}, "message": "Arc2D.java (getBounds2D): Implement.\n\n\t* java/awt/geom/Arc2D.java (getBounds2D): Implement.\n\t(containsAngle): Likewise.\n\t(getStartPoint): Rewrote.\n\t(getEndPoint): Likewise.\n\t(setAngleStart(Point2D)): Likewise.\n\nFrom-SVN: r70002", "tree": {"sha": "8dca985aa0e2c8638b78623574d123c6184ccb12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dca985aa0e2c8638b78623574d123c6184ccb12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8/comments", "author": null, "committer": null, "parents": [{"sha": "8100063ee72464e47298f557fb93294f1624e963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8100063ee72464e47298f557fb93294f1624e963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8100063ee72464e47298f557fb93294f1624e963"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "68db53c6a713e0c35b5fb7e7f3da6fe836f63eee", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8", "patch": "@@ -1,3 +1,11 @@\n+2003-07-31  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/awt/geom/Arc2D.java (getBounds2D): Implement.\n+\t(containsAngle): Likewise.\n+\t(getStartPoint): Rewrote.\n+\t(getEndPoint): Likewise.\n+\t(setAngleStart(Point2D)): Likewise.\n+\n 2003-07-31  Roger Sayle  <roger@eyesopen.com>\n \t    Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n "}, {"sha": "3819efe62cd097fdfd52f8286170120ece581671", "filename": "libjava/java/awt/geom/Arc2D.java", "status": "modified", "additions": 63, "deletions": 22, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java?ref=46b6ccc8fc43257f36925ccc16dac1ef4a88b5f8", "patch": "@@ -1,5 +1,5 @@\n /* Arc2D.java -- represents an arc in 2-D space\n-   Copyright (C) 2002 Free Software Foundation\n+   Copyright (C) 2002, 2003 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -126,9 +126,11 @@ public int getArcType()\n    */\n   public Point2D getStartPoint()\n   {\n-    double angle = getAngleStart() * (-180 / Math.PI);\n-    double x = (Math.cos(angle) * getWidth() + getX()) / 2;\n-    double y = (Math.sin(angle) * getHeight() + getY()) / 2;\n+    double angle = Math.toRadians(getAngleStart());\n+    double rx = getWidth() / 2;\n+    double ry = getHeight() / 2;\n+    double x = getX() + rx + rx * Math.cos(angle);\n+    double y = getY() + ry - ry * Math.sin(angle);\n     return new Point2D.Double(x, y);\n   }\n \n@@ -139,9 +141,11 @@ public Point2D getStartPoint()\n    */\n   public Point2D getEndPoint()\n   {\n-    double angle = (getAngleStart() + getAngleExtent()) * (-180 / Math.PI);\n-    double x = (Math.cos(angle) * getWidth() + getX()) / 2;\n-    double y = (Math.sin(angle) * getHeight() + getY()) / 2;\n+    double angle = Math.toRadians(getAngleStart() + getAngleExtent());\n+    double rx = getWidth() / 2;\n+    double ry = getHeight() / 2;\n+    double x = getX() + rx + rx * Math.cos(angle);\n+    double y = getY() + ry - ry * Math.sin(angle);\n     return new Point2D.Double(x, y);\n   }\n \n@@ -280,9 +284,10 @@ public void setArcByTangent(Point2D p1, Point2D p2, Point2D p3, double r)\n    */\n   public void setAngleStart(Point2D p)\n   {\n-    double x = ((p.getX() * 2) - getX()) / getWidth();\n-    double y = ((p.getY() * 2) - getY()) / getHeight();\n-    setAngleStart(Math.atan2(y, x) * (-180 / Math.PI));\n+    // Normalize.\n+    double x = p.getX() - (getX() + getWidth() / 2);\n+    double y = p.getY() - (getY() + getHeight() / 2);\n+    setAngleStart(Math.toDegrees(Math.atan2(y, x)));\n   }\n \n   /**\n@@ -303,12 +308,12 @@ public void setAngles(double x1, double y1, double x2, double y2)\n     double my = getY();\n     double mw = getWidth();\n     double mh = getHeight();\n-    x1 = ((x1 * 2) - mx) / mw;\n-    y1 = ((y1 * 2) - my) / mh;\n-    x2 = ((x2 * 2) - mx) / mw;\n-    y2 = ((y2 * 2) - my) / mh;\n-    double start = Math.atan2(y1, x1) * (-180 / Math.PI);\n-    double extent = Math.atan2(y2, x2) * (-180 / Math.PI) - start;\n+    x1 = x1 - (mx + mw / 2);\n+    y1 = y1 - (my + mh / 2);\n+    x2 = x2 - (mx + mw / 2);\n+    y2 = y2 - (my + mh / 2);\n+    double start = Math.toDegrees(Math.atan2(y1, x1));\n+    double extent = Math.toDegrees(Math.atan2(y2, x2)) - start;\n     if (extent < 0)\n       extent += 360;\n     setAngleStart(start);\n@@ -372,8 +377,31 @@ public Rectangle2D getBounds2D()\n     double extent = getAngleExtent();\n     if (Math.abs(extent) >= 360)\n       return makeBounds(getX(), getY(), getWidth(), getHeight());\n-    // XXX Finish implementing.\n-    throw new Error(\"not implemented\");\n+\n+    // Find the minimal bounding box.  This determined by its extrema,\n+    // which are the center, the endpoints of the arc, and any local\n+    // maximum contained by the arc.\n+    double rX = getWidth() / 2;\n+    double rY = getHeight() / 2;\n+    double centerX = getX() + rX;\n+    double centerY = getY() + rY;\n+\n+    Point2D p1 = getStartPoint();\n+    Rectangle2D result = makeBounds(p1.getX(), p1.getY(), 0, 0);\n+    result.add(getEndPoint());\n+\n+    if (type == PIE)\n+      result.add(centerX, centerY);\n+    if (containsAngle(0))\n+      result.add(centerX + rX, centerY);\n+    if (containsAngle(90))\n+      result.add(centerX, centerY - rY);\n+    if (containsAngle(180))\n+      result.add(centerX - rX, centerY);\n+    if (containsAngle(270))\n+      result.add(centerX, centerY + rY);\n+\n+    return result;\n   }\n \n   /**\n@@ -390,16 +418,29 @@ protected abstract Rectangle2D makeBounds(double x, double y,\n \n   /**\n    * Tests if the given angle, in degrees, is included in the arc.\n-   *\n-   * XXX Does this normalize all angles to -180 - 180 first?\n+   * All angles are normalized to be between 0 and 360 degrees.\n    *\n    * @param a the angle to test\n    * @return true if it is contained\n    */\n   public boolean containsAngle(double a)\n   {\n-    // XXX Implement.\n-    throw new Error(\"not implemented\");\n+    double start = getAngleStart();\n+    double end = start + getAngleExtent();\n+\n+    start %= 360;\n+    if (start < 0)\n+      start += 360;\n+\n+    end %= 360;\n+    if (end < 0)\n+      end += 360;\n+\n+    a %= 360;\n+    if (a < 0)\n+      a += 360;\n+\n+    return a >= start && a <= end;\n   }\n \n   /**"}]}