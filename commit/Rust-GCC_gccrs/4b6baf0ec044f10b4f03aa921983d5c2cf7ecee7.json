{"sha": "4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2YmFmMGVjMDQ0ZjEwYjRmMDNhYTkyMTk4M2Q1YzJjZjdlY2VlNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-03-20T10:45:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-03-20T10:45:56Z"}, "message": "jump.c (delete_noop_moves): Remove code attempting to combine stack adjustments.\n\n\t* jump.c (delete_noop_moves): Remove code attempting to\n\tcombine stack adjustments.\n\nFrom-SVN: r32647", "tree": {"sha": "31a1535da43ed7d9363cd10c037133a02d33931f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31a1535da43ed7d9363cd10c037133a02d33931f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7/comments", "author": null, "committer": null, "parents": [{"sha": "a24f8a86aa3c049ac160feaff52229def387ed64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24f8a86aa3c049ac160feaff52229def387ed64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24f8a86aa3c049ac160feaff52229def387ed64"}], "stats": {"total": 103, "additions": 5, "deletions": 98}, "files": [{"sha": "a7c46f3b8d80e4a996cef79b17ef91b92f47f601", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7", "patch": "@@ -1,3 +1,8 @@\n+Mon Mar 20 11:43:15 MET 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* jump.c (delete_noop_moves): Remove code attempting to\n+\tcombine stack adjustments.\n+\n 2000-03-19  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* emit-rtl.c (push_to_full_sequence, end_full_sequence): New functions."}, {"sha": "9f37973a49371711e96be5720876424d16627e7b", "filename": "gcc/jump.c", "status": "modified", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=4b6baf0ec044f10b4f03aa921983d5c2cf7ecee7", "patch": "@@ -2326,104 +2326,6 @@ delete_noop_moves (f)\n \t{\n \t  register rtx body = PATTERN (insn);\n \n-/* Combine stack_adjusts with following push_insns.  */\n-#ifdef PUSH_ROUNDING\n-\t  if (GET_CODE (body) == SET\n-\t      && SET_DEST (body) == stack_pointer_rtx\n-\t      && GET_CODE (SET_SRC (body)) == PLUS\n-\t      && XEXP (SET_SRC (body), 0) == stack_pointer_rtx\n-\t      && GET_CODE (XEXP (SET_SRC (body), 1)) == CONST_INT\n-\t      && INTVAL (XEXP (SET_SRC (body), 1)) > 0)\n-\t    {\n-\t      rtx p;\n-\t      rtx stack_adjust_insn = insn;\n-\t      int stack_adjust_amount = INTVAL (XEXP (SET_SRC (body), 1));\n-\t      int total_pushed = 0;\n-\t      int pushes = 0;\n-\n-\t      /* Find all successive push insns.  */\n-\t      p = insn;\n-\t      /* Don't convert more than three pushes;\n-\t\t that starts adding too many displaced addresses\n-\t\t and the whole thing starts becoming a losing\n-\t\t proposition.  */\n-\t      while (pushes < 3)\n-\t\t{\n-\t\t  rtx pbody, dest;\n-\t\t  p = next_nonnote_insn (p);\n-\t\t  if (p == 0 || GET_CODE (p) != INSN)\n-\t\t    break;\n-\t\t  pbody = PATTERN (p);\n-\t\t  if (GET_CODE (pbody) != SET)\n-\t\t    break;\n-\t\t  dest = SET_DEST (pbody);\n-\t\t  /* Allow a no-op move between the adjust and the push.  */\n-\t\t  if (GET_CODE (dest) == REG\n-\t\t      && GET_CODE (SET_SRC (pbody)) == REG\n-\t\t      && REGNO (dest) == REGNO (SET_SRC (pbody)))\n-\t\t    continue;\n-\t\t  if (! (GET_CODE (dest) == MEM\n-\t\t\t && GET_CODE (XEXP (dest, 0)) == POST_INC\n-\t\t\t && XEXP (XEXP (dest, 0), 0) == stack_pointer_rtx))\n-\t\t    break;\n-\t\t  pushes++;\n-\t\t  if (total_pushed + GET_MODE_SIZE (GET_MODE (SET_DEST (pbody)))\n-\t\t      > stack_adjust_amount)\n-\t\t    break;\n-\t\t  total_pushed += GET_MODE_SIZE (GET_MODE (SET_DEST (pbody)));\n-\t\t}\n-\n-\t      /* Discard the amount pushed from the stack adjust;\n-\t\t maybe eliminate it entirely.  */\n-\t      if (total_pushed >= stack_adjust_amount)\n-\t\t{\n-\t\t  delete_computation (stack_adjust_insn);\n-\t\t  total_pushed = stack_adjust_amount;\n-\t\t}\n-\t      else\n-\t\tXEXP (SET_SRC (PATTERN (stack_adjust_insn)), 1)\n-\t\t  = GEN_INT (stack_adjust_amount - total_pushed);\n-\n-\t      /* Change the appropriate push insns to ordinary stores.  */\n-\t      p = insn;\n-\t      while (total_pushed > 0)\n-\t\t{\n-\t\t  rtx pbody, dest;\n-\t\t  p = next_nonnote_insn (p);\n-\t\t  if (GET_CODE (p) != INSN)\n-\t\t    break;\n-\t\t  pbody = PATTERN (p);\n-\t\t  if (GET_CODE (pbody) != SET)\n-\t\t    break;\n-\t\t  dest = SET_DEST (pbody);\n-\t\t  /* Allow a no-op move between the adjust and the push.  */\n-\t\t  if (GET_CODE (dest) == REG\n-\t\t      && GET_CODE (SET_SRC (pbody)) == REG\n-\t\t      && REGNO (dest) == REGNO (SET_SRC (pbody)))\n-\t\t    continue;\n-\t\t  if (! (GET_CODE (dest) == MEM\n-\t\t\t && GET_CODE (XEXP (dest, 0)) == POST_INC\n-\t\t\t && XEXP (XEXP (dest, 0), 0) == stack_pointer_rtx))\n-\t\t    break;\n-\t\t  total_pushed -= GET_MODE_SIZE (GET_MODE (SET_DEST (pbody)));\n-\t\t  /* If this push doesn't fully fit in the space\n-\t\t     of the stack adjust that we deleted,\n-\t\t     make another stack adjust here for what we\n-\t\t     didn't use up.  There should be peepholes\n-\t\t     to recognize the resulting sequence of insns.  */\n-\t\t  if (total_pushed < 0)\n-\t\t    {\n-\t\t      emit_insn_before (gen_add2_insn (stack_pointer_rtx,\n-\t\t\t\t\t\t       GEN_INT (- total_pushed)),\n-\t\t\t\t\tp);\n-\t\t      break;\n-\t\t    }\n-\t\t  XEXP (dest, 0)\n-\t\t    = plus_constant (stack_pointer_rtx, total_pushed);\n-\t\t}\n-\t    }\n-#endif\n-\n \t  /* Detect and delete no-op move instructions\n \t     resulting from not allocating a parameter in a register.  */\n "}]}