{"sha": "0f0138b6b2669803f26f9a19adce9da9c8eb9911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYwMTM4YjZiMjY2OTgwM2YyNmY5YTE5YWRjZTlkYTljOGViOTkxMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-08-08T16:46:22Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-08-08T16:46:22Z"}, "message": "* predict.def: Set hitrates according our experimental run.\n\nFrom-SVN: r44719", "tree": {"sha": "593189d00d343aa04079a728386234bc706553f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/593189d00d343aa04079a728386234bc706553f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f0138b6b2669803f26f9a19adce9da9c8eb9911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0138b6b2669803f26f9a19adce9da9c8eb9911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f0138b6b2669803f26f9a19adce9da9c8eb9911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0138b6b2669803f26f9a19adce9da9c8eb9911/comments", "author": null, "committer": null, "parents": [{"sha": "b2bcb32d2831ec81ba03baba01c0f29998ee748c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bcb32d2831ec81ba03baba01c0f29998ee748c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2bcb32d2831ec81ba03baba01c0f29998ee748c"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "aa19eca4049466d00f48c36de460de549844a395", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f0138b6b2669803f26f9a19adce9da9c8eb9911/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f0138b6b2669803f26f9a19adce9da9c8eb9911/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f0138b6b2669803f26f9a19adce9da9c8eb9911", "patch": "@@ -1,3 +1,11 @@\n+Wed Aug  8 18:44:37 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.def: Set hitrates according our experimental run.\n+\n+Wed Aug  8 18:01:58 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.h (HARD_REGNO_RENAME_OK): New macro.\n+\n 2001-08-08  H.J. Lu <hjl@gnu.org>\n \n \t* config/mips/mips.c (mips_unique_section): New. Copied from"}, {"sha": "a0d23f6583211a006660e1959e25a9284a44bbb2", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f0138b6b2669803f26f9a19adce9da9c8eb9911/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f0138b6b2669803f26f9a19adce9da9c8eb9911/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0f0138b6b2669803f26f9a19adce9da9c8eb9911", "patch": "@@ -3186,6 +3186,15 @@ enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n    ? emit_i387_cw_initialization (assign_386_stack_local (HImode, 1),\t\\\n \t\t\t\t  assign_386_stack_local (HImode, 2)), 0\\\n    : 0)\n+\f\n+/* Avoid renaming of stack registers, as doing so in combination with\n+   scheduling just increases amount of live registers at time and in\n+   the turn amount of fxch instructions needed.\n+\n+   ??? Maybe Pentium chips benefits from renaming, someone can try...  */\n+\n+#define HARD_REGNO_RENAME_OK(src,target)  \\\n+   ((src) < FIRST_STACK_REG || (src) > LAST_STACK_REG)\n \n \f\n /*"}, {"sha": "7559a12f4779898e5b649e6d04923a1fcf339b88", "filename": "gcc/predict.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f0138b6b2669803f26f9a19adce9da9c8eb9911/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f0138b6b2669803f26f9a19adce9da9c8eb9911/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=0f0138b6b2669803f26f9a19adce9da9c8eb9911", "patch": "@@ -66,7 +66,7 @@ DEF_PREDICTOR (PRED_LOOP_BRANCH, \"loop branch\", HITRATE (88),\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Edge causing loop to terminate is probably not taken. */\n-DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (80),\n+DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (92),\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Condition emitted by preconditiong code to ensure that variable\n@@ -77,16 +77,16 @@ DEF_PREDICTOR (PRED_LOOP_CONDITION, \"loop condition\", PROB_VERY_LIKELY, 0)\n DEF_PREDICTOR (PRED_LOOP_PRECONDITIONING, \"loop preconditioning\", PROB_VERY_LIKELY, 0)\n \n /* Copied condition for the first iteration of loop is probably true.  */\n-DEF_PREDICTOR (PRED_LOOP_HEADER, \"loop header\", HITRATE (75), 0)\n+DEF_PREDICTOR (PRED_LOOP_HEADER, \"loop header\", HITRATE (60), 0)\n \n /* Pointers are usually not NULL.  */\n-DEF_PREDICTOR (PRED_POINTER, \"pointer\", HITRATE (60), 0)\n+DEF_PREDICTOR (PRED_POINTER, \"pointer\", HITRATE (75), 0)\n \n /* NE is probable, EQ not etc...  */\n-DEF_PREDICTOR (PRED_OPCODE, \"opcode\", HITRATE (84), 0)\n+DEF_PREDICTOR (PRED_OPCODE, \"opcode\", HITRATE (53), 0)\n \n /* Branch guarding call is probably taken.  */\n-DEF_PREDICTOR (PRED_CALL, \"call\", HITRATE (78), 0)\n+DEF_PREDICTOR (PRED_CALL, \"call\", HITRATE (66), 0)\n \n /* Branch causing function to terminate is probably not taken.  */\n DEF_PREDICTOR (PRED_ERROR_RETURN, \"error return\", PROB_LIKELY, 0)"}]}