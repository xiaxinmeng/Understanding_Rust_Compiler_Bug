{"sha": "3df6ff355fc898d685bb9e0688634a65c1dc29fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmNmZmMzU1ZmM4OThkNjg1YmI5ZTA2ODg2MzRhNjVjMWRjMjlmZA==", "commit": {"author": {"name": "Andris Pavenis", "email": "andris.pavenis@iki.fi", "date": "2016-01-12T04:57:10Z"}, "committer": {"name": "Andris Pavenis", "email": "andris@gcc.gnu.org", "date": "2016-01-12T04:57:10Z"}, "message": "[PATCH 5/6] [DJGPP] Update DJGPP configuration related files\n\n       * config/i386/djgpp.h (PREFERRED_DEBUGGING_TYPE): Define to DWARF2\n       (TARGET_ASM_OUTPUT_IDENT): Define to default_asm_output_ident_directive\n       (MD_EXEC_PREFIX): Remove.\n       (MD_STARTFILE_PREFIX) Removee.\n       (FILE_NAME_ABSOLUTE_P): Remove.\n       (CPP_SPEC): Do not read macros from sys/version.h.\n       (LINK_COMMAND_SPEC): Remove.\n       (LOCAL_INCLUDE_DIR): Remove.\n       (TARGET_ASM_NAMED_SECTION): Define to i386_djgpp_asm_named_section\n       (TARGET_OS_CPP_BUILTINS): Add DJGPP (non ISO only), __DJGPP, __DJGPP__, unix.\n       (POST_LINK_SPEC): Define to invoke stubify after linker\n       (LIBSTDCXX): Remove define\n       (DBX_REGISTER_NUMBER): Define to svr4_dbx_register_map.\n       (DEFAULT_PCC_STRUCT_RETURN): Define to 1.\n       (SUBTARGET_OVERRIDE_OPTIONS): Remove warning about -mbnu2210.\n       (SUBTARGET_OVERRIDE_OPTIONS): Ignore -fPIC and generate message.\n       (SUBTARGET_OVERRIDE_OPTIONS): Default to DWARF2 debugging info.\n       (IX86_MAYBE_NO_LIBGCC_TFMODE): Remove.\n       (i386_djgpp_asm_named_section): Add propotype of new procedure\n\n       * config/i386/xm-djgpp.h (NATIVE_SYSTEM_HEADER_DIR): Define.\n       (MD_EXEC_PREFIX): Define (moved from config/i386/djgpp.h).\n       (STANDARD_STARTFILE_PREFIX_1): Define (moved from MD_STARTFILE_PREFIX in config/i386/djgpp.h).\n       (STANDARD_STARTFILE_PREFIX_2): Define identical to STANDARD_STARTFILE_PREFIX_1.\n       (LOCAL_INCLUDE_DIR): Define (moved from config/i386/djgpp.h).\n       (GCC_DRIVER_HOST_INITIALIZATION): Fix reporting fatal installation errors.\n       (MAX_OFILE_ALIGNMENT): Define to 128.\n       (HAVE_FTW_H): Undefine as DJGPP do not have nftw, but have ftw.h.\n\n       * config/i386/djgpp.c: New file. Add implementation of i386_djgpp_asm_named_section.\n\n       * config/i386/djgpp.opt: Remove obsolete option -mbnu210.\n\n       * config/i386/t-djgpp: New file. Add djgpp.o to EXTRA_OBJS.\n       Add rule for building djgpp.o.\n\nFrom-SVN: r232258", "tree": {"sha": "ac26307849dff9cc89d7592c2d6dec39a48663e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac26307849dff9cc89d7592c2d6dec39a48663e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df6ff355fc898d685bb9e0688634a65c1dc29fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df6ff355fc898d685bb9e0688634a65c1dc29fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df6ff355fc898d685bb9e0688634a65c1dc29fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df6ff355fc898d685bb9e0688634a65c1dc29fd/comments", "author": {"login": "apavenis", "id": 33935463, "node_id": "MDQ6VXNlcjMzOTM1NDYz", "avatar_url": "https://avatars.githubusercontent.com/u/33935463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apavenis", "html_url": "https://github.com/apavenis", "followers_url": "https://api.github.com/users/apavenis/followers", "following_url": "https://api.github.com/users/apavenis/following{/other_user}", "gists_url": "https://api.github.com/users/apavenis/gists{/gist_id}", "starred_url": "https://api.github.com/users/apavenis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apavenis/subscriptions", "organizations_url": "https://api.github.com/users/apavenis/orgs", "repos_url": "https://api.github.com/users/apavenis/repos", "events_url": "https://api.github.com/users/apavenis/events{/privacy}", "received_events_url": "https://api.github.com/users/apavenis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3574cf47facc3fdc37a02411eb879b1bdcfe4067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3574cf47facc3fdc37a02411eb879b1bdcfe4067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3574cf47facc3fdc37a02411eb879b1bdcfe4067"}], "stats": {"total": 248, "additions": 178, "deletions": 70}, "files": [{"sha": "f8784f0eeb84397c2602994d77d52c1012a67484", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3df6ff355fc898d685bb9e0688634a65c1dc29fd", "patch": "@@ -1,3 +1,41 @@\n+2016-01-12  Andris Pavenis <andris.pavenis@iki.fi>\n+\n+\t* config/i386/djgpp.h (PREFERRED_DEBUGGING_TYPE): Define to DWARF2\n+\t(TARGET_ASM_OUTPUT_IDENT): Define to default_asm_output_ident_directive\n+\t(MD_EXEC_PREFIX): Remove.\n+\t(MD_STARTFILE_PREFIX) Removee.\n+\t(FILE_NAME_ABSOLUTE_P): Remove.\n+\t(CPP_SPEC): Do not read macros from sys/version.h.\n+\t(LINK_COMMAND_SPEC): Remove.\n+\t(LOCAL_INCLUDE_DIR): Remove.\n+\t(TARGET_ASM_NAMED_SECTION): Define to i386_djgpp_asm_named_section\n+\t(TARGET_OS_CPP_BUILTINS): Add DJGPP (non ISO only), __DJGPP, __DJGPP__, unix.\n+\t(POST_LINK_SPEC): Define to invoke stubify after linker\n+\t(LIBSTDCXX): Remove define\n+\t(DBX_REGISTER_NUMBER): Define to svr4_dbx_register_map.\n+\t(DEFAULT_PCC_STRUCT_RETURN): Define to 1.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Remove warning about -mbnu2210.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Ignore -fPIC and generate message.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Default to DWARF2 debugging info.\n+\t(IX86_MAYBE_NO_LIBGCC_TFMODE): Remove.\n+\t(i386_djgpp_asm_named_section): Add propotype of new procedure\n+\n+\t* config/i386/xm-djgpp.h (NATIVE_SYSTEM_HEADER_DIR): Define.\n+\t(MD_EXEC_PREFIX): Define (moved from config/i386/djgpp.h).\n+\t(STANDARD_STARTFILE_PREFIX_1): Define (moved from MD_STARTFILE_PREFIX in config/i386/djgpp.h).\n+\t(STANDARD_STARTFILE_PREFIX_2): Define identical to STANDARD_STARTFILE_PREFIX_1.\n+\t(LOCAL_INCLUDE_DIR): Define (moved from config/i386/djgpp.h).\n+\t(GCC_DRIVER_HOST_INITIALIZATION): Fix reporting fatal installation errors.\n+\t(MAX_OFILE_ALIGNMENT): Define to 128.\n+\t(HAVE_FTW_H): Undefine as DJGPP do not have nftw, but have ftw.h.\n+\n+\t* config/i386/djgpp.c: New file. Add implementation of i386_djgpp_asm_named_section.\n+\n+\t* config/i386/djgpp.opt: Remove obsolete option -mbnu210.\n+\n+\t* config/i386/t-djgpp: New file. Add djgpp.o to EXTRA_OBJS.\n+\tAdd rule for building djgpp.o.\n+\n 2016-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (v2df_reduction_p): New function."}, {"sha": "c602358edd8c5a6bf51c514c4faebcd9a167a4ed", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3df6ff355fc898d685bb9e0688634a65c1dc29fd", "patch": "@@ -4392,6 +4392,9 @@ case ${target} in\n \ti[34567]86-*-gnu*)\n \t\ttmake_file=\"$tmake_file i386/t-gnu\"\n \t\t;;\n+\ti[34567]86-*-msdosdjgpp*)\n+\t\ttmake_file=\"${tmake_file} i386/t-djgpp\"\n+\t\t;;\n \ti[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t\t;;\n \ti[34567]86-*-cygwin* | x86_64-*-cygwin*)"}, {"sha": "7414338e4a53dcb352ae56af2a1871a22db7a364", "filename": "gcc/config/i386/djgpp.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Fdjgpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Fdjgpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.c?ref=3df6ff355fc898d685bb9e0688634a65c1dc29fd", "patch": "@@ -0,0 +1,47 @@\n+/* Subroutines for DJGPP.\n+   Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"output.h\"\n+#include \"lto-section-names.h\"\n+\n+void\n+i386_djgpp_asm_named_section(const char *name, unsigned int flags,\n+\t\t\t     tree)\n+{\n+  char flagchars[8], *f = flagchars;\n+\n+  if (flags & SECTION_WRITE)\n+    *f++ = 'w';\n+  if (flags & SECTION_CODE)\n+    *f++ = 'x';\n+\n+  /* LTO sections need 1-byte alignment to avoid confusing the\n+     zlib decompression algorithm with trailing zero pad bytes.  */\n+  if (strncmp (name, LTO_SECTION_NAME_PREFIX,\n+\t\t\tstrlen (LTO_SECTION_NAME_PREFIX)) == 0)\n+    *f++ = '0';\n+\n+  *f++ = '\\0';\n+\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\\n\", name, flagchars);\n+}"}, {"sha": "c758f5f789d5c475e71c9b0be8a0780396333f27", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 46, "deletions": 60, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=3df6ff355fc898d685bb9e0688634a65c1dc29fd", "patch": "@@ -20,6 +20,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Support generation of DWARF2 debugging info.  */\n #define DWARF2_DEBUGGING_INFO 1\n \n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+\n /* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n@@ -30,6 +33,10 @@ along with GCC; see the file COPYING3.  If not see\n #undef DATA_SECTION_ASM_OP\n #define DATA_SECTION_ASM_OP \"\\t.section .data\"\n \n+/* Define the name of the .ident op.  */\n+#undef TARGET_ASM_OUTPUT_IDENT\n+#define TARGET_ASM_OUTPUT_IDENT default_asm_output_ident_directive\n+\n /* Enable alias attribute support.  */\n #ifndef SET_ASM_OP\n #define SET_ASM_OP \"\\t.set\\t\"\n@@ -39,56 +46,25 @@ along with GCC; see the file COPYING3.  If not see\n #undef TEXT_SECTION_ASM_OP\n #define TEXT_SECTION_ASM_OP \"\\t.section .text\"\n \n-/* Define standard DJGPP installation paths.  */\n-/* We override default /usr or /usr/local part with /dev/env/DJDIR which */\n-/* points to actual DJGPP installation directory.  */\n-\n-/* Search for as.exe and ld.exe in DJGPP's binary directory.  */ \n-#undef MD_EXEC_PREFIX\n-#define MD_EXEC_PREFIX \"/dev/env/DJDIR/bin/\"\n-\n-/* Standard DJGPP library and startup files */\n-#undef MD_STARTFILE_PREFIX\n-#define MD_STARTFILE_PREFIX \"/dev/env/DJDIR/lib/\"\n-\n-/* Correctly handle absolute filename detection in cp/xref.c */\n-#define FILE_NAME_ABSOLUTE_P(NAME) \\\n-        (((NAME)[0] == '/') || ((NAME)[0] == '\\\\') || \\\n-        (((NAME)[0] >= 'A') && ((NAME)[0] <= 'z') && ((NAME)[1] == ':')))\n-\n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n+        if (!flag_iso)                          \\\n+\t   builtin_define_with_int_value (\"DJGPP\",2);  \\\n+\tbuiltin_define_with_int_value (\"__DJGPP\",2);   \\\n+\tbuiltin_define_with_int_value (\"__DJGPP__\",2); \\\n \tbuiltin_define_std (\"MSDOS\");\t\t\\\n \tbuiltin_define_std (\"GO32\");\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n \tbuiltin_assert (\"system=msdos\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Include <sys/version.h> so __DJGPP__ and __DJGPP_MINOR__ are defined.  */\n #undef CPP_SPEC\n-#define CPP_SPEC \"-remap %{posix:-D_POSIX_SOURCE} \\\n-  -imacros %s../include/sys/version.h\"\n-\n-/* We need to override link_command_spec in gcc.c so support -Tdjgpp.djl.\n-   This cannot be done in LINK_SPECS as that LINK_SPECS is processed\n-   before library search directories are known by the linker.\n-   This avoids problems when specs file is not available. An alternate way,\n-   suggested by Robert Hoehne, is to use SUBTARGET_EXTRA_SPECS instead.\n-*/ \n-\n-#undef LINK_COMMAND_SPEC\n-#define LINK_COMMAND_SPEC \\\n-\"%{!fsyntax-only: \\\n-%{!c:%{!M:%{!MM:%{!E:%{!S:%(linker) %l \" LINK_COMPRESS_DEBUG_SPEC \\\n-\"%X %{o*} %{e*} %{N} %{n} \\\n-\\t%{r} %{s} %{t} %{u*} %{z} %{Z}\\\n-\\t%{!nostdlib:%{!nostartfiles:%S}}\\\n-\\t%{static:} %{L*} %D %o\\\n-\\t%{!nostdlib:%{!nodefaultlibs:%G %L %G}}\\\n-\\t%{!nostdlib:%{!nostartfiles:%E}}\\\n-\\t-Tdjgpp.djl %{T*}}}}}}}\\n\\\n-%{!c:%{!M:%{!MM:%{!E:%{!S:stubify %{v} %{o*:%*} %{!o*:a.out} }}}}}\"\n+#define CPP_SPEC \"-remap %{posix:-D_POSIX_SOURCE}\"\n+\n+#undef POST_LINK_SPEC\n+#define POST_LINK_SPEC \"stubify %{v} %{o*:%*} %{!o*:a.out}\"\n \n /* Always just link in 'libc.a'.  */\n #undef LIB_SPEC\n@@ -98,12 +74,8 @@ along with GCC; see the file COPYING3.  If not see\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{pg:gcrt0.o%s}%{!pg:crt0.o%s}\"\n \n-/* Make sure that gcc will not look for .h files in /usr/local/include \n-   unless user explicitly requests it.  */\n-#undef LOCAL_INCLUDE_DIR\n-\n /* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  default_coff_asm_named_section\n+#define TARGET_ASM_NAMED_SECTION  i386_djgpp_asm_named_section\n \n /* This is how to output an assembler line\n    that says to advance the location counter\n@@ -159,23 +131,37 @@ along with GCC; see the file COPYING3.  If not see\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n \n-/* Used to be defined in xm-djgpp.h, but moved here for cross-compilers.  */\n-#define LIBSTDCXX \"stdcxx\"\n-\n-/* Warn that -mbnu210 is now obsolete.  */\n-#undef  SUBTARGET_OVERRIDE_OPTIONS\n-#define SUBTARGET_OVERRIDE_OPTIONS \\\n-do \\\n-  { \\\n-    if (TARGET_BNU210) \\\n-      {\t\\\n-        warning (0, \"-mbnu210 is ignored (option is obsolete)\"); \\\n-      }\t\\\n-  } \\\n-while (0)\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n) svr4_dbx_register_map[n]\n+\n+/* Default to pcc-struct-return.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n+\n+/* Ignore (with warning) -fPIC for DJGPP */\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS                                      \\\n+    do {                                                                \\\n+        if (flag_pic)                                                   \\\n+        {                                                               \\\n+            fnotice(stdout, \"-f%s ignored (not supported for DJGPP)\\n\", \\\n+                (flag_pic > 1) ? \"PIC\" : \"pic\");                        \\\n+            flag_pic = 0;                                               \\\n+        }                                                               \\\n+                                                                        \\\n+        /* Don't emit DWARF3/4 unless specifically selected. */         \\\n+        /* DWARF3/4 currently does not work for DJGPP.  */              \\\n+        if (!global_options_set.x_dwarf_version)                        \\\n+            dwarf_version = 2;                                          \\\n+                                                                        \\\n+        }                                                               \\\n+    while (0)\n \n /* Support for C++ templates.  */\n #undef MAKE_DECL_ONE_ONLY\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-#define IX86_MAYBE_NO_LIBGCC_TFMODE\n+/* Function protypes for gcc/i386/djgpp.c */\n+\n+void\n+i386_djgpp_asm_named_section(const char *name, unsigned int flags,\n+\t\t\t     tree decl);"}, {"sha": "b4ae04fdf12d3f725a320ecacc43fb7713e8044a", "filename": "gcc/config/i386/djgpp.opt", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Fdjgpp.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Fdjgpp.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.opt?ref=3df6ff355fc898d685bb9e0688634a65c1dc29fd", "patch": "@@ -18,11 +18,5 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n-;; -mbnu210 is now ignored and obsolete.  It was used to enable support for\n-;; weak symbols, and .gnu.linkonce support.\n-mbnu210\n-Target Var(TARGET_BNU210)\n-Ignored (obsolete).\n-\n posix\n Driver"}, {"sha": "dd3b32ac351d9c784b76c140dcc5ac47c79b561d", "filename": "gcc/config/i386/t-djgpp", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Ft-djgpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Ft-djgpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-djgpp?ref=3df6ff355fc898d685bb9e0688634a65c1dc29fd", "patch": "@@ -0,0 +1,8 @@\n+\n+EXTRA_OBJS += djgpp.o\n+\n+djgpp.o:    $(srcdir)/config/i386/djgpp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n+  $(TM_P_H) $(HASH_TABLE_H) $(GGC_H) $(LTO_STREAMER_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(srcdir)/config/i386/djgpp.c"}, {"sha": "94e6ff614a7170482cf1c3b894968aa47f06bb69", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df6ff355fc898d685bb9e0688634a65c1dc29fd/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=3df6ff355fc898d685bb9e0688634a65c1dc29fd", "patch": "@@ -22,6 +22,31 @@ along with GCC; see the file COPYING3.  If not see\n \n #define HOST_EXECUTABLE_SUFFIX \".exe\"\n \n+/* Define standard DJGPP installation paths.  */\n+/* We override default /usr or /usr/local part with /dev/env/DJDIR which */\n+/* points to actual DJGPP installation directory.  */\n+\n+/* Native system include directory */\n+#undef NATIVE_SYSTEM_HEADER_DIR\n+#define NATIVE_SYSTEM_HEADER_DIR \"/dev/env/DJDIR/include/\"\n+\n+/* Search for as.exe and ld.exe in DJGPP's binary directory.  */\n+#undef MD_EXEC_PREFIX\n+#define MD_EXEC_PREFIX \"/dev/env/DJDIR/bin/\"\n+\n+/* Standard DJGPP library and startup files */\n+#undef STANDARD_STARTFILE_PREFIX_1\n+#define STANDARD_STARTFILE_PREFIX_1 \"/dev/env/DJDIR/lib/\"\n+\n+/* Define STANDARD_STARTFILE_PREFIX_2 equal to STANDARD_STARTFILE_PREFIX_1\n+   to avoid gcc.c redefining it to /usr/lib */\n+#undef STANDARD_STARTFILE_PREFIX_2\n+#define STANDARD_STARTFILE_PREFIX_1 \"/dev/env/DJDIR/lib/\"\n+\n+/* Make sure that gcc will not look for .h files in /usr/local/include\n+   unless user explicitly requests it.  */\n+#undef LOCAL_INCLUDE_DIR\n+\n /* System dependent initialization for collect2\n    to tell system() to act like Unix.  */\n #define COLLECT2_HOST_INITIALIZATION \\\n@@ -57,12 +82,12 @@ along with GCC; see the file COPYING3.  If not see\n            to try and figure out what's wrong.  */ \\\n         char *djgpp = getenv (\"DJGPP\"); \\\n         if (djgpp == NULL) \\\n-          fatal (\"environment variable DJGPP not defined\"); \\\n+          fatal_error (UNKNOWN_LOCATION, \"environment variable DJGPP not defined\"); \\\n         else if (access (djgpp, R_OK) == 0) \\\n-          fatal (\"environment variable DJGPP points to missing file '%s'\", \\\n+          fatal_error (UNKNOWN_LOCATION, \"environment variable DJGPP points to missing file '%s'\", \\\n                  djgpp); \\\n         else \\\n-          fatal (\"environment variable DJGPP points to corrupt file '%s'\", \\\n+          fatal_error (UNKNOWN_LOCATION, \"environment variable DJGPP points to corrupt file '%s'\", \\\n                   djgpp); \\\n       } \\\n   } while (0)\n@@ -80,4 +105,11 @@ along with GCC; see the file COPYING3.  If not see\n       _fixpath ((PATH), fixed_path);\t\t\\\n       strcat (fixed_path, \"/\");\t\t\t\\\n       (PATH) = xstrdup (fixed_path);\t\t\\\n-    } \n+    }\n+\n+#undef MAX_OFILE_ALIGNMENT\n+#define MAX_OFILE_ALIGNMENT 128\n+\n+/* DJGPP versions up to current (2.05) have ftw.h but only ftw() not nftw().\n+   Disable use of ftw.h */\n+#undef HAVE_FTW_H"}]}