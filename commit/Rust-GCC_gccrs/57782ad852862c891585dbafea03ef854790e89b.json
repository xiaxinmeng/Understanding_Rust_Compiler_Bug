{"sha": "57782ad852862c891585dbafea03ef854790e89b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3ODJhZDg1Mjg2MmM4OTE1ODVkYmFmZWEwM2VmODU0NzkwZTg5Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-02-17T18:32:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-02-17T18:32:45Z"}, "message": "re PR c++/11326 (C++ IA64 ABI: 3.1.4: sometimes pointer to temporary return value is implicit first parameter preceding \"this\")\n\n\tPR c++/11326\n\t* c-common.c (flag_abi_version): Remove.\n\t* c-common.h (flag_abi_version): Likewise.\n\t* c-opts.c (c_common_handle_option): Remove OPT_fabi_version case.\n\t* c.opt (fabi-version): Remove.\n\t* calls.c (expand_call): Always pass a function type to\n\tstruct_value_rtx.  Use convert_memory_address.\n\t* common.opt (fabi-version): Add it.\n\t* flags.h (flag_abi_version): Likewise.\n\t(abi_version_at_least): New macro.\n\t* opts.c (common_handle_option): Add OPT_fabi_version.\n\t* toplev.c (flag_abi_version): Define it.\n\t* config/ia64/ia64.c (ia64_struct_retval_addr_is_first_parm_p):\n\tNew function.\n\t(ia64_output_mi_thunk): Use it.\n\t(ia64_struct_value_rtx): Likewise.\n\n\tPR c++/11326\n\t* cp-tree.h (abi_version_at_least): Remove.\n\t* mangle.c: Include flags.h.\n\n\tPR c++/11326\n\t* g++.dg/abi/structret1.C: New test.\n\nFrom-SVN: r77968", "tree": {"sha": "85a8a16852397c2880c3b5467fc1063168a77fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a8a16852397c2880c3b5467fc1063168a77fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57782ad852862c891585dbafea03ef854790e89b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57782ad852862c891585dbafea03ef854790e89b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57782ad852862c891585dbafea03ef854790e89b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57782ad852862c891585dbafea03ef854790e89b/comments", "author": null, "committer": null, "parents": [{"sha": "3977a4a1eec95645a03f78d85ed1f118cc7cfcbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3977a4a1eec95645a03f78d85ed1f118cc7cfcbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3977a4a1eec95645a03f78d85ed1f118cc7cfcbd"}], "stats": {"total": 210, "additions": 154, "deletions": 56}, "files": [{"sha": "c099df62beb25d3f5e10ff516d3871a73bcc9b82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -1,3 +1,22 @@\n+2004-02-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11326\n+\t* c-common.c (flag_abi_version): Remove.\n+\t* c-common.h (flag_abi_version): Likewise.\n+\t* c-opts.c (c_common_handle_option): Remove OPT_fabi_version case.\n+\t* c.opt (fabi-version): Remove.\n+\t* calls.c (expand_call): Always pass a function type to\n+\tstruct_value_rtx.  Use convert_memory_address.\n+\t* common.opt (fabi-version): Add it.\n+\t* flags.h (flag_abi_version): Likewise.\n+\t(abi_version_at_least): New macro.\n+\t* opts.c (common_handle_option): Add OPT_fabi_version.\n+\t* toplev.c (flag_abi_version): Define it.\n+\t* config/ia64/ia64.c (ia64_struct_retval_addr_is_first_parm_p):\n+\tNew function.\n+\t(ia64_output_mi_thunk): Use it.\n+\t(ia64_struct_value_rtx): Likewise.\n+\t\n 2004-02-17  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (h8300_emit_stack_adjustment):"}, {"sha": "63ce3c7176a780095e6976e611008b1bfb3e8023", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -599,23 +599,6 @@ int flag_permissive;\n \n int flag_enforce_eh_specs = 1;\n \n-/*  The version of the C++ ABI in use.  The following values are\n-    allowed:\n-\n-    0: The version of the ABI believed most conformant with the\n-       C++ ABI specification.  This ABI may change as bugs are\n-       discovered and fixed.  Therefore, 0 will not necessarily\n-       indicate the same ABI in different versions of G++.\n-\n-    1: The version of the ABI first used in G++ 3.2.\n-\n-    2: The version of the ABI first used in G++ 3.4.\n-\n-    Additional positive integers will be assigned as new versions of\n-    the ABI become the default version of the ABI.  */\n-\n-int flag_abi_version = 2;\n-\n /* Nonzero means warn about things that will change when compiling\n    with an ABI-compliant compiler.  */\n "}, {"sha": "00d5d5c18d451cc62d7c185215b97a0e7cfc7464", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -760,21 +760,6 @@ extern int flag_permissive;\n \n extern int flag_enforce_eh_specs;\n \n-/*  The version of the C++ ABI in use.  The following values are\n-    allowed:\n-\n-    0: The version of the ABI believed most conformant with the \n-       C++ ABI specification.  This ABI may change as bugs are\n-       discovered and fixed.  Therefore, 0 will not necessarily\n-       indicate the same ABI in different versions of G++.\n-\n-    1: The version of the ABI first used in G++ 3.2.\n-\n-    Additional positive integers will be assigned as new versions of\n-    the ABI become the default version of the ABI.  */\n-\n-extern int flag_abi_version;\n-\n /* Nonzero means warn about things that will change when compiling\n    with an ABI-compliant compiler.  */\n "}, {"sha": "a0d7382796fa1808bb1afa3ab1567c84fc5b5213", "filename": "gcc/c-opts.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -692,10 +692,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       warning (\"switch \\\"%s\\\" is no longer supported\", option->opt_text);\n       break;\n \n-    case OPT_fabi_version_:\n-      flag_abi_version = value;\n-      break;\n-\n     case OPT_faccess_control:\n       flag_access_control = value;\n       break;"}, {"sha": "2a2ff85b738067276ada5bccf459d8b171e21a17", "filename": "gcc/c.opt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -411,9 +411,6 @@ d\n C ObjC C++ ObjC++ Joined\n ; Documented in common.opt.  FIXME - what about -dI, -dD, -dN and -dD?\n \n-fabi-version=\n-C++ ObjC++ Joined UInteger\n-\n faccess-control\n C++ ObjC++\n Enforce class member access control semantics"}, {"sha": "c6675758a730a57b0850dd317fa3f387d931b176", "filename": "gcc/calls.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -2080,6 +2080,8 @@ expand_call (tree exp, rtx target, int ignore)\n   /* Declaration of the function being called,\n      or 0 if the function is computed (not known by name).  */\n   tree fndecl = 0;\n+  /* The type of the function being called.  */\n+  tree fntype;\n   rtx insn;\n   int try_tail_call = 1;\n   int try_tail_recursion = 1;\n@@ -2188,6 +2190,7 @@ expand_call (tree exp, rtx target, int ignore)\n   fndecl = get_callee_fndecl (exp);\n   if (fndecl)\n     {\n+      fntype = TREE_TYPE (fndecl);\n       if (!flag_no_inline\n \t  && fndecl != current_function_decl\n \t  && DECL_INLINE (fndecl)\n@@ -2223,15 +2226,15 @@ expand_call (tree exp, rtx target, int ignore)\n      attributes set in the type.  */\n   else\n     {\n+      fntype = TREE_TYPE (TREE_TYPE (p));\n       if (ignore\n-\t  && lookup_attribute (\"warn_unused_result\",\n-\t\t\t       TYPE_ATTRIBUTES (TREE_TYPE (TREE_TYPE (p)))))\n+\t  && lookup_attribute (\"warn_unused_result\", TYPE_ATTRIBUTES (fntype)))\n \twarning (\"ignoring return value of function \"\n \t\t \"declared with attribute warn_unused_result\");\n-      flags |= flags_from_decl_or_type (TREE_TYPE (TREE_TYPE (p)));\n+      flags |= flags_from_decl_or_type (fntype);\n     }\n \n-  struct_value = targetm.calls.struct_value_rtx (fndecl ? TREE_TYPE (fndecl) : 0, 0);\n+  struct_value = targetm.calls.struct_value_rtx (fntype, 0);\n \n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */\n@@ -2385,7 +2388,8 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t  || (ACCUMULATE_OUTGOING_ARGS\n \t\t      && stack_arg_under_construction\n \t\t      && structure_value_addr == virtual_outgoing_args_rtx)\n-\t\t  ? copy_addr_to_reg (structure_value_addr)\n+\t\t  ? copy_addr_to_reg (convert_memory_address \n+\t\t\t\t      (Pmode, structure_value_addr))\n \t\t  : structure_value_addr);\n \n       actparms"}, {"sha": "8598d8c479c0c7379fa28eebef9ed5e59beda843", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -179,6 +179,9 @@ Common\n fPIE\n Common\n \n+fabi-version=\n+Common Joined UInteger\n+\n falign-functions\n Common\n Align the start of functions"}, {"sha": "ffbb349ae713c3e2b0567764689889416bd1579b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -8802,6 +8802,27 @@ ia64_rwreloc_section_type_flags (tree decl, const char *name, int reloc)\n   return default_section_type_flags_1 (decl, name, reloc, true);\n }\n \n+/* Returns true if FNTYPE (a FUNCTION_TYPE or a METHOD_TYPE) returns a\n+   structure type and that the address of that type should be passed\n+   in out0, rather than in r8.  */\n+\n+static bool\n+ia64_struct_retval_addr_is_first_parm_p (tree fntype)\n+{\n+  tree ret_type = TREE_TYPE (fntype);\n+\n+  /* The Itanium C++ ABI requires that out0, rather than r8, be used\n+     as the structure return address parameter, if the return value\n+     type has a non-trivial copy constructor or destructor.  It is not\n+     clear if this same convention should be used for other\n+     programming languages.  Until G++ 3.4, we incorrectly used r8 for\n+     these return values.  */\n+  return (abi_version_at_least (2)\n+\t  && ret_type\n+\t  && TYPE_MODE (ret_type) == BLKmode \n+\t  && TREE_ADDRESSABLE (ret_type)\n+\t  && strcmp (lang_hooks.name, \"GNU C++\") == 0);\n+}\n \n /* Output the assembler code for a thunk function.  THUNK_DECL is the\n    declaration for the thunk function itself, FUNCTION is the decl for\n@@ -8815,6 +8836,8 @@ ia64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t      tree function)\n {\n   rtx this, insn, funexp;\n+  unsigned int this_parmno;\n+  unsigned int this_regno;\n \n   reload_completed = 1;\n   epilogue_completed = 1;\n@@ -8828,16 +8851,23 @@ ia64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   current_frame_info.n_input_regs = 1;\n   current_frame_info.need_regstk = (TARGET_REG_NAMES != 0);\n \n-  if (!TARGET_REG_NAMES)\n-    reg_names[IN_REG (0)] = ia64_reg_numbers[0];\n-\n   /* Mark the end of the (empty) prologue.  */\n   emit_note (NOTE_INSN_PROLOGUE_END);\n \n-  this = gen_rtx_REG (Pmode, IN_REG (0));\n+  /* Figure out whether \"this\" will be the first parameter (the\n+     typical case) or the second parameter (as happens when the\n+     virtual function returns certain class objects).  */\n+  this_parmno\n+    = (ia64_struct_retval_addr_is_first_parm_p (TREE_TYPE (thunk))\n+       ? 1 : 0);\n+  this_regno = IN_REG (this_parmno);\n+  if (!TARGET_REG_NAMES)\n+    reg_names[this_regno] = ia64_reg_numbers[this_parmno];\n+\n+  this = gen_rtx_REG (Pmode, this_regno);\n   if (TARGET_ILP32)\n     {\n-      rtx tmp = gen_rtx_REG (ptr_mode, IN_REG (0));\n+      rtx tmp = gen_rtx_REG (ptr_mode, this_regno);\n       REG_POINTER (tmp) = 1;\n       if (delta && CONST_OK_FOR_I (delta))\n \t{\n@@ -8945,9 +8975,11 @@ ia64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n /* Worker function for TARGET_STRUCT_VALUE_RTX.  */\n \n static rtx\n-ia64_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n+ia64_struct_value_rtx (tree fntype,\n \t\t       int incoming ATTRIBUTE_UNUSED)\n {\n+  if (ia64_struct_retval_addr_is_first_parm_p (fntype))\n+    return NULL_RTX;\n   return gen_rtx_REG (Pmode, GR_REG (8));\n }\n "}, {"sha": "48edcfdb0f6658f004d5a463fd789f04e2f37fb4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -1,3 +1,9 @@\n+2004-02-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11326\n+\t* cp-tree.h (abi_version_at_least): Remove.\n+\t* mangle.c: Include flags.h.\n+\n 2004-02-15  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13971"}, {"sha": "36acc5a684ad8f87cc79c61859d15402bbaf8a4c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -213,12 +213,6 @@ struct diagnostic_context;\n \n #endif\n \n-/* Returns TRUE if generated code should match ABI version N or\n-   greater is in use.  */\n-\n-#define abi_version_at_least(N) \\\n-  (flag_abi_version == 0 || flag_abi_version >= (N))\n-\n \f\n /* Language-dependent contents of an identifier.  */\n "}, {"sha": "a41c14108f3b2dcc7f8195036cfdffdbadd9c1e0", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -58,6 +58,7 @@\n #include \"obstack.h\"\n #include \"toplev.h\"\n #include \"varray.h\"\n+#include \"flags.h\"\n \n /* Debugging support.  */\n "}, {"sha": "626993fca6e20e5388b6fd9b0d02c12eb502d103", "filename": "gcc/flags.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -731,6 +731,27 @@ extern int flag_var_tracking;\n \n extern const char *flag_random_seed;\n \n+/*  The version of the C++ ABI in use.  The following values are\n+    allowed:\n+\n+    0: The version of the ABI believed most conformant with the \n+       C++ ABI specification.  This ABI may change as bugs are\n+       discovered and fixed.  Therefore, 0 will not necessarily\n+       indicate the same ABI in different versions of G++.\n+\n+    1: The version of the ABI first used in G++ 3.2.\n+\n+    Additional positive integers will be assigned as new versions of\n+    the ABI become the default version of the ABI.  */\n+\n+extern int flag_abi_version;\n+\n+/* Returns TRUE if generated code should match ABI version N or\n+   greater is in use.  */\n+\n+#define abi_version_at_least(N) \\\n+  (flag_abi_version == 0 || flag_abi_version >= (N))\n+\n /* True if the given mode has a NaN representation and the treatment of\n    NaN operands is important.  Certain optimizations, such as folding\n    x * 0 into x, are not correct for NaN operands, and are normally"}, {"sha": "45acba3c4f765aae6a22c75ca0614ef67f3a5b5a", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -833,6 +833,10 @@ common_handle_option (size_t scode, const char *arg,\n       flag_pie = value + value;\n       break;\n \n+    case OPT_fabi_version_:\n+      flag_abi_version = value;\n+      break;\n+\n     case OPT_falign_functions:\n       align_functions = !value;\n       break;"}, {"sha": "a49e599bd86424ea42259a5fb2d3886adb7f0cef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -1,3 +1,8 @@\n+2004-02-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11326\n+\t* g++.dg/abi/structret1.C: New test.\n+\n 2004-02-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/i386-cpuid.h (bit_CMOV): Define."}, {"sha": "e9d4fd0ff9fa90c3a42c76517cf2e2eade5d5a8f", "filename": "gcc/testsuite/g++.dg/abi/structret1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fstructret1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fstructret1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fstructret1.C?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do run { target ia64-*-* } }\n+// { dg-options \"-fabi-version=0\" }\n+\n+extern \"C\" void abort ();\n+\n+struct ConstructedObject {\n+  ConstructedObject() {};\n+  ~ConstructedObject() {};\n+  ConstructedObject(const ConstructedObject &from) {};\n+};\n+\n+struct FrameworkObject {\n+  ConstructedObject action();\n+};\n+\n+ConstructedObject FrameworkObject::action() {\n+  void *r32, *r33;\n+\n+  asm(\"mov %0 = r32\\nmov %1 = r33\" : \"=r\"(r32), \"=r\"(r33) : );\n+  if (this != r33) {\n+    abort ();\n+  }\n+}\n+\n+int main()\n+{\n+  FrameworkObject slawa;\n+  slawa.action();\n+  return 0;\n+}\n+"}, {"sha": "7473eade90a0e4d7d57ddaa89a83bfabeef66bb8", "filename": "gcc/toplev.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57782ad852862c891585dbafea03ef854790e89b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57782ad852862c891585dbafea03ef854790e89b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=57782ad852862c891585dbafea03ef854790e89b", "patch": "@@ -1016,6 +1016,23 @@ int flag_evaluation_order = 0;\n /* Add or remove a leading underscore from user symbols.  */\n int flag_leading_underscore = -1;\n \n+/*  The version of the C++ ABI in use.  The following values are\n+    allowed:\n+\n+    0: The version of the ABI believed most conformant with the\n+       C++ ABI specification.  This ABI may change as bugs are\n+       discovered and fixed.  Therefore, 0 will not necessarily\n+       indicate the same ABI in different versions of G++.\n+\n+    1: The version of the ABI first used in G++ 3.2.\n+\n+    2: The version of the ABI first used in G++ 3.4.\n+\n+    Additional positive integers will be assigned as new versions of\n+    the ABI become the default version of the ABI.  */\n+\n+int flag_abi_version = 2;\n+\n /* The user symbol prefix after having resolved same.  */\n const char *user_label_prefix;\n "}]}