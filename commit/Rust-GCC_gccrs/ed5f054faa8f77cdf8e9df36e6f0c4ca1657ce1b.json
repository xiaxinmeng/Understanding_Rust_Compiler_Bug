{"sha": "ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1ZjA1NGZhYThmNzdjZGY4ZTlkZjM2ZTZmMGM0Y2ExNjU3Y2UxYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2004-01-15T14:45:15Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2004-01-15T14:45:15Z"}, "message": "re PR c++/13659 (error: no matching function for call to)\n\nPR c++/13659\n* name-lookup.c (validate_nonmember_using_decl): Take scope and\nname by value, instead of computing them.\n(do_local_using_decl, do_toplevel_using_decl): Add scope and name\narguments.  Pass them to validate_nonmember_using_decl.\n* name-lookup.h (do_local_using_decl): Adjust.\n(do_toplevel_using_decl): Likewise.\n* parser.c (cp_parser_using_declaration): Likewise.\n* pt.c (tsubst_expr): Likewise.\n\nFrom-SVN: r75923", "tree": {"sha": "2a56d57a7ff749ac5a954ddde64f4b44d9d18a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a56d57a7ff749ac5a954ddde64f4b44d9d18a9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/comments", "author": null, "committer": null, "parents": [{"sha": "693ec7e1f23f442e91db57177e5b6b0929866b87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693ec7e1f23f442e91db57177e5b6b0929866b87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693ec7e1f23f442e91db57177e5b6b0929866b87"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "91345672750b085da73bd7b83112c67fd0c3b49d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "patch": "@@ -1,3 +1,15 @@\n+2004-01-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/13659\n+\t* name-lookup.c (validate_nonmember_using_decl): Take scope and\n+\tname by value, instead of computing them.\n+\t(do_local_using_decl, do_toplevel_using_decl): Add scope and name\n+\targuments.  Pass them to validate_nonmember_using_decl.\n+\t* name-lookup.h (do_local_using_decl): Adjust.\n+\t(do_toplevel_using_decl): Likewise.\n+\t* parser.c (cp_parser_using_declaration): Likewise.\n+\t* pt.c (tsubst_expr): Likewise.\n+\n 2004-01-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/13594"}, {"sha": "4893e5ebda096431a1dc870339a62d0179922dcf", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "patch": "@@ -2071,17 +2071,13 @@ push_overloaded_decl (tree decl, int flags)\n    being used, and the USING_DECL, or NULL_TREE on failure.  */\n \n static tree\n-validate_nonmember_using_decl (tree decl, tree *scope, tree *name)\n+validate_nonmember_using_decl (tree decl, tree scope, tree name)\n {\n-  *scope = global_namespace;\n-  *name = NULL_TREE;\n-\n   if (TREE_CODE (decl) == TEMPLATE_ID_EXPR)\n     {\n-      *name = TREE_OPERAND (decl, 0);\n       /* 7.3.3/5\n \t   A using-declaration shall not name a template-id.  */\n-      error (\"a using-declaration cannot specify a template-id.  Try `using %D'\", *name);\n+      error (\"a using-declaration cannot specify a template-id.  Try `using %D'\", name);\n       return NULL_TREE;\n     }\n \n@@ -2104,25 +2100,17 @@ validate_nonmember_using_decl (tree decl, tree *scope, tree *name)\n \n   my_friendly_assert (DECL_P (decl), 20020908);\n \n-  if (TREE_CODE (decl) == CONST_DECL)\n-    /* Enumeration constants to not have DECL_CONTEXT set.  */\n-    *scope = TYPE_CONTEXT (TREE_TYPE (decl));\n-  else\n-    *scope = DECL_CONTEXT (decl);\n-  if (!*scope)\n-    *scope = global_namespace;\n-\n   /* [namespace.udecl]\n        A using-declaration for a class member shall be a\n        member-declaration.  */\n-  if (TYPE_P (*scope))\n+  if (TYPE_P (scope))\n     {\n-      error (\"`%T' is not a namespace\", *scope);\n+      error (\"`%T' is not a namespace\", scope);\n       return NULL_TREE;\n     }\n-  *name = DECL_NAME (decl);\n+\n   /* Make a USING_DECL.  */\n-  return push_using_decl (*scope, *name);\n+  return push_using_decl (scope, name);\n }\n \n /* Process local and global using-declarations.  */\n@@ -2235,12 +2223,11 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n /* Process a using-declaration at function scope.  */\n \n void\n-do_local_using_decl (tree decl)\n+do_local_using_decl (tree decl, tree scope, tree name)\n {\n-  tree scope, name;\n   tree oldval, oldtype, newval, newtype;\n \n-  decl = validate_nonmember_using_decl (decl, &scope, &name);\n+  decl = validate_nonmember_using_decl (decl, scope, name);\n   if (decl == NULL_TREE)\n     return;\n \n@@ -3248,13 +3235,12 @@ add_using_namespace (tree user, tree used, bool indirect)\n /* Process a using-declaration not appearing in class or local scope.  */\n \n void\n-do_toplevel_using_decl (tree decl)\n+do_toplevel_using_decl (tree decl, tree scope, tree name)\n {\n-  tree scope, name;\n   tree oldval, oldtype, newval, newtype;\n   cxx_binding *binding;\n \n-  decl = validate_nonmember_using_decl (decl, &scope, &name);\n+  decl = validate_nonmember_using_decl (decl, scope, name);\n   if (decl == NULL_TREE)\n     return;\n   "}, {"sha": "fa95729070ae9a1347f0ce53a2870113456acf7e", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "patch": "@@ -301,8 +301,8 @@ extern tree current_decl_namespace (void);\n extern void push_decl_namespace (tree);\n extern void pop_decl_namespace (void);\n extern void do_namespace_alias (tree, tree);\n-extern void do_toplevel_using_decl (tree);\n-extern void do_local_using_decl (tree);\n+extern void do_toplevel_using_decl (tree, tree, tree);\n+extern void do_local_using_decl (tree, tree, tree);\n extern tree do_class_using_decl (tree);\n extern void do_using_directive (tree);\n extern tree lookup_arg_dependent (tree, tree, tree);"}, {"sha": "6a78264421a8831f957d9afab004991c0d1173ac", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "patch": "@@ -9414,6 +9414,7 @@ cp_parser_using_declaration (cp_parser* parser)\n   tree decl;\n   tree identifier;\n   tree scope;\n+  tree qscope;\n \n   /* Look for the `using' keyword.  */\n   cp_parser_require_keyword (parser, RID_USING, \"`using'\");\n@@ -9438,18 +9439,20 @@ cp_parser_using_declaration (cp_parser* parser)\n   /* If we saw `typename', or didn't see `::', then there must be a\n      nested-name-specifier present.  */\n   if (typename_p || !global_scope_p)\n-    cp_parser_nested_name_specifier (parser, typename_p, \n-\t\t\t\t     /*check_dependency_p=*/true,\n-\t\t\t\t     /*type_p=*/false,\n-\t\t\t\t     /*is_declaration=*/true);\n+    qscope = cp_parser_nested_name_specifier (parser, typename_p, \n+\t\t\t\t\t      /*check_dependency_p=*/true,\n+\t\t\t\t\t      /*type_p=*/false,\n+\t\t\t\t\t      /*is_declaration=*/true);\n   /* Otherwise, we could be in either of the two productions.  In that\n      case, treat the nested-name-specifier as optional.  */\n   else\n-    cp_parser_nested_name_specifier_opt (parser,\n-\t\t\t\t\t /*typename_keyword_p=*/false,\n-\t\t\t\t\t /*check_dependency_p=*/true,\n-\t\t\t\t\t /*type_p=*/false,\n-\t\t\t\t\t /*is_declaration=*/true);\n+    qscope = cp_parser_nested_name_specifier_opt (parser,\n+\t\t\t\t\t\t  /*typename_keyword_p=*/false,\n+\t\t\t\t\t\t  /*check_dependency_p=*/true,\n+\t\t\t\t\t\t  /*type_p=*/false,\n+\t\t\t\t\t\t  /*is_declaration=*/true);\n+  if (!qscope)\n+    qscope = global_namespace;\n \n   /* Parse the unqualified-id.  */\n   identifier = cp_parser_unqualified_id (parser, \n@@ -9485,9 +9488,9 @@ cp_parser_using_declaration (cp_parser* parser)\n \t  if (decl == error_mark_node)\n \t    cp_parser_name_lookup_error (parser, identifier, decl, NULL);\n \t  else if (scope)\n-\t    do_local_using_decl (decl);\n+\t    do_local_using_decl (decl, qscope, identifier);\n \t  else\n-\t    do_toplevel_using_decl (decl);\n+\t    do_toplevel_using_decl (decl, qscope, identifier);\n \t}\n     }\n "}, {"sha": "0701c5bb982fbffe05447aa90c2a230f14be541f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ed5f054faa8f77cdf8e9df36e6f0c4ca1657ce1b", "patch": "@@ -7695,7 +7695,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    if (decl == error_mark_node)\n \t      qualified_name_lookup_error (scope, name);\n \t    else\n-\t      do_local_using_decl (decl);\n+\t      do_local_using_decl (decl, scope, name);\n \t  }\n \telse\n \t  {"}]}