{"sha": "7db12d155ddf4b5d7a5e783a97995f85e19e88dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiMTJkMTU1ZGRmNGI1ZDdhNWU3ODNhOTc5OTVmODVlMTllODhkZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-01-22T21:51:19Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-05T03:19:47Z"}, "message": "libstdc++: Apply the move_iterator changes described in P1207R4\n\nThese changes are needed for some of the tests in the constrained algorithm\npatch, because they use move_iterator with an uncopyable output_iterator.  The\nother changes described in the paper are already applied, it seems.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (move_iterator::move_iterator): Move __i\n\twhen initializing _M_current.\n\t(move_iterator::base): Split into two overloads differing in\n\tref-qualifiers as in P1207R4 for C++20.", "tree": {"sha": "42e3d4a8ca8dc834f60e0cb5d7dd5685f8278cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42e3d4a8ca8dc834f60e0cb5d7dd5685f8278cc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7db12d155ddf4b5d7a5e783a97995f85e19e88dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db12d155ddf4b5d7a5e783a97995f85e19e88dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db12d155ddf4b5d7a5e783a97995f85e19e88dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db12d155ddf4b5d7a5e783a97995f85e19e88dd/comments", "author": null, "committer": null, "parents": [{"sha": "3ef39186b61939da7c658561b97f04b62973bf92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef39186b61939da7c658561b97f04b62973bf92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef39186b61939da7c658561b97f04b62973bf92"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "b54f1f694e4145e8f7fc43677a9c8d0fc9287914", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db12d155ddf4b5d7a5e783a97995f85e19e88dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db12d155ddf4b5d7a5e783a97995f85e19e88dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7db12d155ddf4b5d7a5e783a97995f85e19e88dd", "patch": "@@ -1,3 +1,10 @@\n+2020-02-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (move_iterator::move_iterator): Move __i\n+\twhen initializing _M_current.\n+\t(move_iterator::base): Split into two overloads differing in\n+\tref-qualifiers as in P1207R4 for C++20.\n+\n 2020-02-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/functional (_GLIBCXX_NOT_FN_CALL_OP): Un-define after"}, {"sha": "c200f7a9d14934d001c7421b307b74da839b33db", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db12d155ddf4b5d7a5e783a97995f85e19e88dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db12d155ddf4b5d7a5e783a97995f85e19e88dd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=7db12d155ddf4b5d7a5e783a97995f85e19e88dd", "patch": "@@ -1166,16 +1166,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       explicit _GLIBCXX17_CONSTEXPR\n       move_iterator(iterator_type __i)\n-      : _M_current(__i) { }\n+      : _M_current(std::move(__i)) { }\n \n       template<typename _Iter>\n \t_GLIBCXX17_CONSTEXPR\n \tmove_iterator(const move_iterator<_Iter>& __i)\n \t: _M_current(__i.base()) { }\n \n+#if __cplusplus <= 201703L\n       _GLIBCXX17_CONSTEXPR iterator_type\n       base() const\n       { return _M_current; }\n+#else\n+      constexpr iterator_type\n+      base() const &\n+#if __cpp_lib_concepts\n+\trequires copy_constructible<iterator_type>\n+#endif\n+      { return _M_current; }\n+\n+      constexpr iterator_type\n+      base() &&\n+      { return std::move(_M_current); }\n+#endif\n \n       _GLIBCXX17_CONSTEXPR reference\n       operator*() const"}]}