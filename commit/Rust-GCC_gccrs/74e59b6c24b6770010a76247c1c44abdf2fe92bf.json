{"sha": "74e59b6c24b6770010a76247c1c44abdf2fe92bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlNTliNmMyNGI2NzcwMDEwYTc2MjQ3YzFjNDRhYmRmMmZlOTJiZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-06-15T07:33:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-06-15T07:33:04Z"}, "message": "df.h (df_single_def, [...]): New functions.\n\ngcc/\n\t* df.h (df_single_def, df_single_use): New functions.\n\t* ira.c (find_moveable_pseudos): Use them.\n\nFrom-SVN: r211681", "tree": {"sha": "ade4c61474f0cf78ce51f16f74ba9dd522d0d440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ade4c61474f0cf78ce51f16f74ba9dd522d0d440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e59b6c24b6770010a76247c1c44abdf2fe92bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e59b6c24b6770010a76247c1c44abdf2fe92bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e59b6c24b6770010a76247c1c44abdf2fe92bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e59b6c24b6770010a76247c1c44abdf2fe92bf/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc8e9f583cf683a397fef637af4b170fda429021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8e9f583cf683a397fef637af4b170fda429021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8e9f583cf683a397fef637af4b170fda429021"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "89ea2b6af42301d8b66e1c0b2c0e1bc6478566f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e59b6c24b6770010a76247c1c44abdf2fe92bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e59b6c24b6770010a76247c1c44abdf2fe92bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74e59b6c24b6770010a76247c1c44abdf2fe92bf", "patch": "@@ -1,3 +1,8 @@\n+2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* df.h (df_single_def, df_single_use): New functions.\n+\t* ira.c (find_moveable_pseudos): Use them.\n+\n 2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* df.h (FOR_EACH_INSN_INFO_MW): New macro."}, {"sha": "73c09723dae2dcae176aacc27cdc3cffe61860c0", "filename": "gcc/df.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e59b6c24b6770010a76247c1c44abdf2fe92bf/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e59b6c24b6770010a76247c1c44abdf2fe92bf/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=74e59b6c24b6770010a76247c1c44abdf2fe92bf", "patch": "@@ -1165,6 +1165,25 @@ df_get_artificial_uses (unsigned int bb_index)\n   return df_scan_get_bb_info (bb_index)->artificial_uses;\n }\n \n+/* If INSN defines exactly one register, return the associated reference,\n+   otherwise return null.  */\n+\n+static inline df_ref\n+df_single_def (const df_insn_info *info)\n+{\n+  df_ref *defs = DF_INSN_INFO_DEFS (info);\n+  return defs[0] && !defs[1] ? defs[0] : NULL;\n+}\n+\n+/* If INSN uses exactly one register, return the associated reference,\n+   otherwise return null.  */\n+\n+static inline df_ref\n+df_single_use (const df_insn_info *info)\n+{\n+  df_ref *uses = DF_INSN_INFO_USES (info);\n+  return uses[0] && !uses[1] ? uses[0] : NULL;\n+}\n \n /* web */\n "}, {"sha": "41988fde9f621bba0ce34ee209bb387b21cddc23", "filename": "gcc/ira.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e59b6c24b6770010a76247c1c44abdf2fe92bf/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e59b6c24b6770010a76247c1c44abdf2fe92bf/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=74e59b6c24b6770010a76247c1c44abdf2fe92bf", "patch": "@@ -4437,20 +4437,19 @@ find_moveable_pseudos (void)\n \tif (NONDEBUG_INSN_P (insn))\n \t  {\n \t    df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n-\t    df_ref *u_rec, *d_rec;\n \t    df_ref def, use;\n \n \t    uid_luid[INSN_UID (insn)] = i++;\n \t    \n-\t    u_rec = DF_INSN_INFO_USES (insn_info);\n-\t    d_rec = DF_INSN_INFO_DEFS (insn_info);\n-\t    if (d_rec[0] != NULL && d_rec[1] == NULL\n-\t\t&& u_rec[0] != NULL && u_rec[1] == NULL\n-\t\t&& DF_REF_REGNO (*u_rec) == DF_REF_REGNO (*d_rec)\n-\t\t&& !bitmap_bit_p (&set, DF_REF_REGNO (*u_rec))\n+\t    def = df_single_def (insn_info);\n+\t    use = df_single_use (insn_info);\n+\t    if (use\n+\t\t&& def\n+\t\t&& DF_REF_REGNO (use) == DF_REF_REGNO (def)\n+\t\t&& !bitmap_bit_p (&set, DF_REF_REGNO (use))\n \t\t&& rtx_moveable_p (&PATTERN (insn), OP_IN))\n \t      {\n-\t\tunsigned regno = DF_REF_REGNO (*u_rec);\n+\t\tunsigned regno = DF_REF_REGNO (use);\n \t\tbitmap_set_bit (moveable, regno);\n \t\tbitmap_set_bit (&set, regno);\n \t\tbitmap_set_bit (&used, regno);\n@@ -4487,16 +4486,16 @@ find_moveable_pseudos (void)\n       FOR_BB_INSNS (bb, insn)\n \tif (NONDEBUG_INSN_P (insn))\n \t  {\n+\t    df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n \t    rtx def_insn, closest_use, note;\n-\t    df_ref *def_rec, def, use;\n+\t    df_ref def, use;\n \t    unsigned regno;\n \t    bool all_dominated, all_local;\n \t    enum machine_mode mode;\n \n-\t    def_rec = DF_INSN_DEFS (insn);\n+\t    def = df_single_def (insn_info);\n \t    /* There must be exactly one def in this insn.  */\n-\t    def = *def_rec;\n-\t    if (!def || def_rec[1] || !single_set (insn))\n+\t    if (!def || !single_set (insn))\n \t      continue;\n \t    /* This must be the only definition of the reg.  We also limit\n \t       which modes we deal with so that we can assume we can generate"}]}