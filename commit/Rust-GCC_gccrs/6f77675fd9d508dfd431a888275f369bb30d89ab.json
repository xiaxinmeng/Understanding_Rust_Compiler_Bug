{"sha": "6f77675fd9d508dfd431a888275f369bb30d89ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3NzY3NWZkOWQ1MDhkZmQ0MzFhODg4Mjc1ZjM2OWJiMzBkODlhYg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-08-24T17:19:55Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-08-24T17:19:55Z"}, "message": "reload1.c (reload_reg_free_before_p): New argument EQUIV; Changed all callers.\n\n\t* reload1.c (reload_reg_free_before_p): New argument EQUIV;  Changed\n\tall callers.  Abort for RELOAD_FOR_INSN.  RELOAD_FOR_OUTADDR_ADDR:\n\tconflicts will all RELOAD_FOR_OUTPUT reloads.\n\nFrom-SVN: r21952", "tree": {"sha": "c1ca6b20de29e33216ad0e6a05aee9c90d96083d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ca6b20de29e33216ad0e6a05aee9c90d96083d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f77675fd9d508dfd431a888275f369bb30d89ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f77675fd9d508dfd431a888275f369bb30d89ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f77675fd9d508dfd431a888275f369bb30d89ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f77675fd9d508dfd431a888275f369bb30d89ab/comments", "author": null, "committer": null, "parents": [{"sha": "54e89d2590a49dc28f153bc160fac1f3f2e3bd42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e89d2590a49dc28f153bc160fac1f3f2e3bd42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e89d2590a49dc28f153bc160fac1f3f2e3bd42"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "254f1b94b3f087c0b78b2a854663cf49cfb20510", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f77675fd9d508dfd431a888275f369bb30d89ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f77675fd9d508dfd431a888275f369bb30d89ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f77675fd9d508dfd431a888275f369bb30d89ab", "patch": "@@ -1,4 +1,8 @@\n-Tue Aug 25 00:57:54 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+Tue Aug 25 01:15:27 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (reload_reg_free_before_p): New argument EQUIV;  Changed\n+\tall callers.  Abort for RELOAD_FOR_INSN.  RELOAD_FOR_OUTADDR_ADDR:\n+\tconflicts will all RELOAD_FOR_OUTPUT reloads.\n \n \t* reload1.c (reload_cse_regs_1): When deleting a no-op move that\n \tloads the function result, substitute with a USE."}, {"sha": "309fbe3b69a857360e7392d1506dc3578a9863cb", "filename": "gcc/reload1.c", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f77675fd9d508dfd431a888275f369bb30d89ab/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f77675fd9d508dfd431a888275f369bb30d89ab/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=6f77675fd9d508dfd431a888275f369bb30d89ab", "patch": "@@ -379,7 +379,7 @@ static void mark_reload_reg_in_use\tPROTO((int, int, enum reload_type,\n static void clear_reload_reg_in_use\tPROTO((int, int, enum reload_type,\n \t\t\t\t\t       enum machine_mode));\n static int reload_reg_free_p\t\tPROTO((int, int, enum reload_type));\n-static int reload_reg_free_before_p\tPROTO((int, int, enum reload_type));\n+static int reload_reg_free_before_p\tPROTO((int, int, enum reload_type, int));\n static int reload_reg_free_for_value_p\tPROTO((int, int, enum reload_type, rtx, rtx, int));\n static int reload_reg_reaches_end_p\tPROTO((int, int, enum reload_type));\n static int allocate_reload_reg\t\tPROTO((int, rtx, int, int));\n@@ -4660,23 +4660,35 @@ reload_reg_free_p (regno, opnum, type)\n \n    We can assume that the reload reg was already tested for availability\n    at the time it is needed, and we should not check this again,\n-   in case the reg has already been marked in use.  */\n+   in case the reg has already been marked in use.\n+\n+   However, if EQUIV is set, we are checking the availability of a register\n+   holding an equivalence to the value to be loaded into the reload register,\n+   not the availability of the reload register itself.\n+\n+   This is still less stringent than what reload_reg_free_p checks; for\n+   example, compare the checks for RELOAD_OTHER.  */\n \n static int\n-reload_reg_free_before_p (regno, opnum, type)\n+reload_reg_free_before_p (regno, opnum, type, equiv)\n      int regno;\n      int opnum;\n      enum reload_type type;\n+     int equiv;\n {\n   int i;\n \n   switch (type)\n     {\n     case RELOAD_FOR_OTHER_ADDRESS:\n       /* These always come first.  */\n+      if (equiv && TEST_HARD_REG_BIT (reload_reg_used_in_other_addr, regno))\n+\treturn 0;\n       return 1;\n \n     case RELOAD_OTHER:\n+      if (equiv && TEST_HARD_REG_BIT (reload_reg_used, regno))\n+\treturn 0;\n       return ! TEST_HARD_REG_BIT (reload_reg_used_in_other_addr, regno);\n \n       /* If this use is for part of the insn,\n@@ -4688,19 +4700,25 @@ reload_reg_free_before_p (regno, opnum, type)\n \t the first place, since we know that it was allocated.  */\n \n     case RELOAD_FOR_OUTPUT_ADDRESS:\n+      if (equiv\n+\t  && TEST_HARD_REG_BIT (reload_reg_used_in_output_addr[opnum], regno))\n+\treturn 0;\n       /* Earlier reloads include RELOAD_FOR_OUTADDR_ADDRESS reloads.  */\n       if (TEST_HARD_REG_BIT (reload_reg_used_in_outaddr_addr[opnum], regno))\n \treturn 0;\n       /* ... fall through ...  */\n     case RELOAD_FOR_OUTADDR_ADDRESS:\n+      if (equiv\n+\t  && (TEST_HARD_REG_BIT (reload_reg_used_in_outaddr_addr[opnum], regno)\n+\t      || TEST_HARD_REG_BIT (reload_reg_used, regno)))\n+\treturn 0;\n       /* Earlier reloads are for earlier outputs or their addresses,\n \t any RELOAD_FOR_INSN reloads, any inputs or their addresses, or any\n \t RELOAD_FOR_OTHER_ADDRESS reloads (we know it can't conflict with\n \t RELOAD_OTHER)..  */\n       for (i = 0; i < opnum; i++)\n \tif (TEST_HARD_REG_BIT (reload_reg_used_in_output_addr[i], regno)\n-\t    || TEST_HARD_REG_BIT (reload_reg_used_in_outaddr_addr[i], regno)\n-\t    || TEST_HARD_REG_BIT (reload_reg_used_in_output[i], regno))\n+\t    || TEST_HARD_REG_BIT (reload_reg_used_in_outaddr_addr[i], regno))\n \t  return 0;\n \n       if (TEST_HARD_REG_BIT (reload_reg_used_in_insn, regno))\n@@ -4709,7 +4727,8 @@ reload_reg_free_before_p (regno, opnum, type)\n       for (i = 0; i < reload_n_operands; i++)\n \tif (TEST_HARD_REG_BIT (reload_reg_used_in_input_addr[i], regno)\n \t    || TEST_HARD_REG_BIT (reload_reg_used_in_inpaddr_addr[i], regno)\n-\t    || TEST_HARD_REG_BIT (reload_reg_used_in_input[i], regno))\n+\t    || TEST_HARD_REG_BIT (reload_reg_used_in_input[i], regno)\n+\t    || TEST_HARD_REG_BIT (reload_reg_used_in_output[i], regno))\n \t  return 0;\n \n       return (! TEST_HARD_REG_BIT (reload_reg_used_in_other_addr, regno)\n@@ -4718,19 +4737,31 @@ reload_reg_free_before_p (regno, opnum, type)\n \t      && ! TEST_HARD_REG_BIT (reload_reg_used_in_op_addr, regno));\n \t\t\t\t   \n     case RELOAD_FOR_OUTPUT:\n+    case RELOAD_FOR_INSN:\n       /* There is no reason to call this function for output reloads, thus\n \t anything we'd put here wouldn't be tested.  So just abort.  */\n        abort ();\n \n     case RELOAD_FOR_OPERAND_ADDRESS:\n+      if (equiv && TEST_HARD_REG_BIT (reload_reg_used_in_op_addr, regno))\n+\treturn 0;\n+\n       /* Earlier reloads include RELOAD_FOR_OPADDR_ADDR reloads.  */\n       if (TEST_HARD_REG_BIT (reload_reg_used_in_op_addr_reload, regno))\n \treturn 0;\n \n       /* ... fall through ...  */\n \n     case RELOAD_FOR_OPADDR_ADDR:\n-    case RELOAD_FOR_INSN:\n+      if (equiv)\n+\t{\n+\t  if (TEST_HARD_REG_BIT (reload_reg_used_in_op_addr_reload, regno)\n+\t      || TEST_HARD_REG_BIT (reload_reg_used, regno))\n+\t    return 0;\n+\t  for (i = 0; i < reload_n_operands; i++)\n+\t    if (TEST_HARD_REG_BIT (reload_reg_used_in_input[i], regno))\n+\t      return 0;\n+\t}\n       /* These can't conflict with inputs, or each other, so all we have to\n \t test is input addresses and the addresses of OTHER items.  */\n \n@@ -4742,6 +4773,9 @@ reload_reg_free_before_p (regno, opnum, type)\n       return ! TEST_HARD_REG_BIT (reload_reg_used_in_other_addr, regno);\n \n     case RELOAD_FOR_INPUT:\n+      if (equiv && TEST_HARD_REG_BIT (reload_reg_used, regno))\n+\treturn 0;\n+\n       /* The only things earlier are the address for this and\n \t earlier inputs, other inputs (which we know we don't conflict\n \t with), and addresses of RELOAD_OTHER objects.  */\n@@ -4759,6 +4793,9 @@ reload_reg_free_before_p (regno, opnum, type)\n \treturn 0;\n       /* ... fall through ...  */\n     case RELOAD_FOR_INPADDR_ADDRESS:\n+      if (equiv && TEST_HARD_REG_BIT (reload_reg_used, regno))\n+\treturn 0;\n+\n       /* Similarly, all we have to check is for use in earlier inputs'\n \t addresses.  */\n       for (i = 0; i < opnum; i++)\n@@ -5674,7 +5711,8 @@ choose_reload_regs (insn, avoid_return_reg)\n \t\t      && ((reload_reg_free_p (i, reload_opnum[r],\n \t\t\t\t\t      reload_when_needed[r])\n \t\t\t   && reload_reg_free_before_p (i, reload_opnum[r],\n-\t\t\t\t\t\t\treload_when_needed[r]))\n+\t\t\t\t\t\t\treload_when_needed[r],\n+\t\t\t\t\t\t\t0))\n \t\t\t  || reload_reg_free_for_value_p (i, reload_opnum[r],\n \t\t\t\t\t\t\t  reload_when_needed[r],\n \t\t\t\t\t\t\t  reload_in[r],\n@@ -5781,7 +5819,7 @@ choose_reload_regs (insn, avoid_return_reg)\n \t      if (equiv != 0\n \t\t  && ((spill_reg_order[regno] >= 0\n \t\t       && ! (reload_reg_free_before_p (regno, reload_opnum[r],\n-\t\t\t\t\t\t       reload_when_needed[r])\n+\t\t\t\t\t\t       reload_when_needed[r], 1)\n \t\t\t     || reload_reg_free_for_value_p (regno,\n \t\t\t\t\t\t\t     reload_opnum[r],\n \t\t\t\t\t\t\t     reload_when_needed[r],\n@@ -5987,7 +6025,7 @@ choose_reload_regs (insn, avoid_return_reg)\n       if (reload_inherited[r] && reload_reg_rtx[r] != 0\n \t  && ! (reload_reg_free_before_p (true_regnum (reload_reg_rtx[r]),\n \t\t\t\t\t  reload_opnum[r],\n-\t\t\t\t\t  reload_when_needed[r])\n+\t\t\t\t\t  reload_when_needed[r], 0)\n \t\t|| reload_reg_free_for_value_p (true_regnum (reload_reg_rtx[r]),\n \t\t\t\t\t\treload_opnum[r],\n \t\t\t\t\t\treload_when_needed[r],\n@@ -6045,7 +6083,7 @@ choose_reload_regs (insn, avoid_return_reg)\n \t  int regno = true_regnum (reload_override_in[r]);\n \t  if (spill_reg_order[regno] >= 0\n \t      && ! reload_reg_free_before_p (regno, reload_opnum[r],\n-\t\t\t\t\t     reload_when_needed[r]))\n+\t\t\t\t\t     reload_when_needed[r], 1))\n \t    reload_override_in[r] = 0;\n \t}\n     }\n@@ -6358,7 +6396,7 @@ emit_reload_insns (insn)\n \t\t  && (! reload_reg_free_p (regno, reload_opnum[j],\n \t\t\t\t\t   reload_when_needed[j])\n \t\t      || ! reload_reg_free_before_p (regno, reload_opnum[j],\n-\t\t\t\t\t\t     reload_when_needed[j])))\n+\t\t\t\t\t\t     reload_when_needed[j], 1)))\n \t\toldequiv = 0;\n \n \t      /* If OLDEQUIV is not a spill register,\n@@ -6499,7 +6537,7 @@ emit_reload_insns (insn)\n \t\t      uses the same reg first.  */\n \t\t   && reload_reg_free_before_p (REGNO (reloadreg),\n \t\t\t\t\t\treload_opnum[j],\n-\t\t\t\t\t\treload_when_needed[j]))\n+\t\t\t\t\t\treload_when_needed[j], 0))\n \t    {\n \t      rtx temp = PREV_INSN (insn);\n \t      while (temp && GET_CODE (temp) == NOTE)\n@@ -6840,7 +6878,8 @@ emit_reload_insns (insn)\n \t  && spill_reg_store[reload_spill_index[j]] != 0\n \t  /* This is unsafe if some other reload uses the same reg first.  */\n \t  && reload_reg_free_before_p (reload_spill_index[j],\n-\t\t\t\t       reload_opnum[j], reload_when_needed[j])\n+\t\t\t\t       reload_opnum[j], reload_when_needed[j],\n+\t\t\t\t       0)\n \t  && dead_or_set_p (insn, reload_in[j])\n \t  /* This is unsafe if operand occurs more than once in current\n \t     insn.  Perhaps some occurrences weren't reloaded.  */"}]}