{"sha": "0173bd2a038cbeef871b22b312a6856ab1dcda2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3M2JkMmEwMzhjYmVlZjg3MWIyMmIzMTJhNjg1NmFiMWRjZGEyYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-05-07T19:36:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-05-07T19:36:31Z"}, "message": "re PR c/65179 (Introduce new C warning: -Wshift-negative-value)\n\n\tPR c/65179\n\t* c-common.c (c_fully_fold_internal): Warn when left shifting a\n\tnegative value.\n\t* c.opt (Wshift-negative-value): New option.\n\t* c-opts.c (c_common_post_options): Set warn_shift_negative_value\n\twhen -Wextra and C99/C++11 mode.\n\n\t* c-typeck.c (build_binary_op): Warn when left shifting a negative\n\tvalue.\n\n\t* typeck.c (cp_build_binary_op): Warn when left shifting a negative\n\tvalue.\n\n\t* doc/invoke.texi: Document -Wshift-negative-value.\n\n\t* c-c++-common/Wshift-negative-value-1.c: New test.\n\t* testsuite/c-c++-common/Wshift-negative-value-2.c: New test.\n\t* testsuite/c-c++-common/Wshift-negative-value-3.c: New test.\n\t* testsuite/c-c++-common/Wshift-negative-value-4.c: New test.\n\t* testsuite/c-c++-common/Wshift-negative-value-5.c: New test.\n\t* testsuite/c-c++-common/Wshift-negative-value-6.c: New test.\n\t* testsuite/gcc.dg/c90-left-shift-1.c: New test.\n\t* testsuite/gcc.dg/c99-const-expr-7.c: Add dg-error.\n\t* testsuite/gcc.dg/c99-left-shift-1.c: New test.\n\nFrom-SVN: r222889", "tree": {"sha": "12367850915ce482968be36f7c2f4344d74b5ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12367850915ce482968be36f7c2f4344d74b5ed5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0173bd2a038cbeef871b22b312a6856ab1dcda2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0173bd2a038cbeef871b22b312a6856ab1dcda2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0173bd2a038cbeef871b22b312a6856ab1dcda2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0173bd2a038cbeef871b22b312a6856ab1dcda2a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d57c99458933a21fdf94f508191f145ad8d5ec58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57c99458933a21fdf94f508191f145ad8d5ec58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57c99458933a21fdf94f508191f145ad8d5ec58"}], "stats": {"total": 407, "additions": 405, "deletions": 2}, "files": [{"sha": "f1c685aa8d8466a2b65ddceac04c8acfb5299f42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -1,3 +1,8 @@\n+2015-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65179\n+\t* doc/invoke.texi: Document -Wshift-negative-value.\n+\n 2015-05-06  Aditya Kumar  <hiraditya@msn.com>\n \n \t* gcov-tool.c (do_merge): Refactore to remove int ret."}, {"sha": "6f141215c292d846c0697b8a0d800f848039acd6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -1,3 +1,12 @@\n+2015-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65179\n+\t* c-common.c (c_fully_fold_internal): Warn when left shifting a\n+\tnegative value.\n+\t* c.opt (Wshift-negative-value): New option.\n+\t* c-opts.c (c_common_post_options): Set warn_shift_negative_value\n+\twhen -Wextra and C99/C++11 mode.\n+\n 2015-05-07  Marek Polacek  <polacek@redhat.com>\n \t    Martin Uecker  <uecker@eecs.berkeley.edu>\n "}, {"sha": "378f2373345c2da114de1a4712e9e1b3972978b7", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -1361,6 +1361,14 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  && !TREE_OVERFLOW_P (op0)\n \t  && !TREE_OVERFLOW_P (op1))\n \toverflow_warning (EXPR_LOCATION (expr), ret);\n+      if (code == LSHIFT_EXPR\n+\t  && TREE_CODE (orig_op0) != INTEGER_CST\n+\t  && TREE_CODE (TREE_TYPE (orig_op0)) == INTEGER_TYPE\n+\t  && TREE_CODE (op0) == INTEGER_CST\n+\t  && c_inhibit_evaluation_warnings == 0\n+\t  && tree_int_cst_sgn (op0) < 0)\n+\twarning_at (loc, OPT_Wshift_negative_value,\n+\t\t    \"left shift of negative value\");\n       if ((code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n \t  && TREE_CODE (orig_op1) != INTEGER_CST\n \t  && TREE_CODE (op1) == INTEGER_CST"}, {"sha": "a61d6a857d83aad1b3e25a84f0e4d6ce26aeb67b", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -866,6 +866,11 @@ c_common_post_options (const char **pfilename)\n   if (warn_implicit_int == -1)\n     warn_implicit_int = flag_isoc99;\n \n+  /* -Wshift-negative-value is enabled by -Wextra in C99 and C++11 modes.  */\n+  if (warn_shift_negative_value == -1)\n+    warn_shift_negative_value = (extra_warnings\n+\t\t\t\t && (cxx_dialect >= cxx11 || flag_isoc99));\n+\n   /* Declone C++ 'structors if -Os.  */\n   if (flag_declone_ctor_dtor == -1)\n     flag_declone_ctor_dtor = optimize_size;"}, {"sha": "48947b4f2b40cee0e27a664b85aab0e611ccc5c4", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -781,6 +781,10 @@ Wshift-count-overflow\n C ObjC C++ ObjC++ Var(warn_shift_count_overflow) Init(1) Warning\n Warn if shift count >= width of type\n \n+Wshift-negative-value\n+C ObjC C++ ObjC++ Var(warn_shift_negative_value) Init(-1) Warning\n+Warn if left shifting a negative value\n+\n Wsign-compare\n C ObjC C++ ObjC++ Var(warn_sign_compare) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about signed-unsigned comparisons"}, {"sha": "ccd1e7291cf2aa4e05003f71349628d3fe7ece2b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -1,3 +1,9 @@\n+2015-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65179\n+\t* c-typeck.c (build_binary_op): Warn when left shifting a negative\n+\tvalue.\n+\n 2015-04-30  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c (set_init_label): Call error_at instead of error and"}, {"sha": "73275aa106b0a18e15859ce1532e9f448b6fd564", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -10697,6 +10697,17 @@ build_binary_op (location_t location, enum tree_code code,\n \t  && code1 == INTEGER_TYPE)\n \t{\n \t  doing_shift = true;\n+\t  if (TREE_CODE (op0) == INTEGER_CST\n+\t      && tree_int_cst_sgn (op0) < 0)\n+\t    {\n+\t      /* Don't reject a left shift of a negative value in a context\n+\t\t where a constant expression is needed in C90.  */\n+\t      if (flag_isoc99)\n+\t\tint_const = false;\n+\t      if (c_inhibit_evaluation_warnings == 0)\n+\t\twarning_at (location, OPT_Wshift_negative_value,\n+\t\t\t    \"left shift of negative value\");\n+\t    }\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n \t      if (tree_int_cst_sgn (op1) < 0)"}, {"sha": "3c32e6f77ddbb041e9c1a0dca40370d7cec0d3be", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -1,3 +1,9 @@\n+2015-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65179\n+\t* typeck.c (cp_build_binary_op): Warn when left shifting a negative\n+\tvalue.\n+\n 2015-05-07  Jason Merrill  <jason@redhat.com>\n \n \tDR 1467"}, {"sha": "549e4b161f5b0bd9da486694d4883aeacb705a13", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -4326,11 +4326,20 @@ cp_build_binary_op (location_t location,\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n+\t  tree const_op0 = fold_non_dependent_expr (op0);\n+\t  if (TREE_CODE (const_op0) != INTEGER_CST)\n+\t    const_op0 = op0;\n \t  tree const_op1 = fold_non_dependent_expr (op1);\n \t  if (TREE_CODE (const_op1) != INTEGER_CST)\n \t    const_op1 = op1;\n \t  result_type = type0;\n \t  doing_shift = true;\n+\t  if (TREE_CODE (const_op0) == INTEGER_CST\n+\t      && tree_int_cst_sgn (const_op0) < 0\n+\t      && (complain & tf_warning)\n+\t      && c_inhibit_evaluation_warnings == 0)\n+\t    warning (OPT_Wshift_negative_value,\n+\t\t     \"left shift of negative value\");\n \t  if (TREE_CODE (const_op1) == INTEGER_CST)\n \t    {\n \t      if (tree_int_cst_lt (const_op1, integer_zero_node))"}, {"sha": "934edd6efae6d4f3fa6163cb3e6be06af432f299", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -271,7 +271,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n -Wredundant-decls  -Wno-return-local-addr @gol\n -Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar @gol\n--Wshift-count-negative -Wshift-count-overflow @gol\n+-Wshift-count-negative -Wshift-count-overflow -Wshift-negative-value @gol\n -Wsign-compare  -Wsign-conversion -Wfloat-conversion @gol\n -Wsizeof-pointer-memaccess  -Wsizeof-array-argument @gol\n -Wstack-protector -Wstack-usage=@var{len} -Wstrict-aliasing @gol\n@@ -3489,6 +3489,7 @@ name is still supported, but the newer name is more descriptive.)\n -Wsign-compare  @gol\n -Wtype-limits  @gol\n -Wuninitialized  @gol\n+-Wshift-negative-value  @gol\n -Wunused-parameter @r{(only with} @option{-Wunused} @r{or} @option{-Wall}@r{)} @gol\n -Wunused-but-set-parameter @r{(only with} @option{-Wunused} @r{or} @option{-Wall}@r{)}  @gol\n }\n@@ -3922,6 +3923,12 @@ Warn if shift count is negative. This warning is enabled by default.\n @opindex Wno-shift-count-overflow\n Warn if shift count >= width of type. This warning is enabled by default.\n \n+@item -Wshift-negative-value\n+@opindex Wshift-negative-value\n+@opindex Wno-shift-negative-value\n+Warn if left shifting a negative value.  This warning is enabled by\n+@option{-Wextra} in C99 and C++11 modes (and newer).\n+\n @item -Wswitch\n @opindex Wswitch\n @opindex Wno-switch"}, {"sha": "4ffc42857ef6f8d22da76f03f049bd1df00a0905", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -1,3 +1,16 @@\n+2015-05-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65179\n+\t* c-c++-common/Wshift-negative-value-1.c: New test.\n+\t* testsuite/c-c++-common/Wshift-negative-value-2.c: New test.\n+\t* testsuite/c-c++-common/Wshift-negative-value-3.c: New test.\n+\t* testsuite/c-c++-common/Wshift-negative-value-4.c: New test.\n+\t* testsuite/c-c++-common/Wshift-negative-value-5.c: New test.\n+\t* testsuite/c-c++-common/Wshift-negative-value-6.c: New test.\n+\t* testsuite/gcc.dg/c90-left-shift-1.c: New test.\n+\t* testsuite/gcc.dg/c99-const-expr-7.c: Add dg-error.\n+\t* testsuite/gcc.dg/c99-left-shift-1.c: New test.\n+\n 2015-05-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR middle-end/192"}, {"sha": "5d803ade8d12860a21788a8ffcab5d419f4f151d", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -0,0 +1,49 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wextra\" } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+enum E {\n+  A = 0 << 1,\n+  B = 1 << 1,\n+  C = -1 << 1, /* { dg-warning \"left shift of negative value|not an integer constant\" } */\n+  D = 0 >> 1,\n+  E = 1 >> 1,\n+  F = -1 >> 1\n+};\n+\n+int\n+left (int x)\n+{\n+  /* Warn for LSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z << x;\n+  r += o << x;\n+  r += m << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += 0 << x;\n+  r += 1 << x;\n+  r += -1 << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += -1U << x;\n+  return r;\n+}\n+\n+int\n+right (int x)\n+{\n+  /* Shouldn't warn for RSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z >> x;\n+  r += o >> x;\n+  r += m >> x;\n+  r += 0 >> x;\n+  r += 1 >> x;\n+  r += -1 >> x;\n+  r += -1U >> x;\n+  return r;\n+}"}, {"sha": "fc89af1ba4bf28971dba1fe02eaf51094b46df29", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -0,0 +1,49 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wshift-negative-value\" } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+enum E {\n+  A = 0 << 1,\n+  B = 1 << 1,\n+  C = -1 << 1, /* { dg-warning \"left shift of negative value\" } */\n+  D = 0 >> 1,\n+  E = 1 >> 1,\n+  F = -1 >> 1\n+};\n+\n+int\n+left (int x)\n+{\n+  /* Warn for LSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z << x;\n+  r += o << x;\n+  r += m << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += 0 << x;\n+  r += 1 << x;\n+  r += -1 << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += -1U << x;\n+  return r;\n+}\n+\n+int\n+right (int x)\n+{\n+  /* Shouldn't warn for RSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z >> x;\n+  r += o >> x;\n+  r += m >> x;\n+  r += 0 >> x;\n+  r += 1 >> x;\n+  r += -1 >> x;\n+  r += -1U >> x;\n+  return r;\n+}"}, {"sha": "bf9b1a07bb78317bf0a67730b8a6cfb3b627bb91", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-3.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -0,0 +1,49 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wextra -Wno-shift-negative-value\" } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+enum E {\n+  A = 0 << 1,\n+  B = 1 << 1,\n+  C = -1 << 1,\n+  D = 0 >> 1,\n+  E = 1 >> 1,\n+  F = -1 >> 1\n+};\n+\n+int\n+left (int x)\n+{\n+  /* Warn for LSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z << x;\n+  r += o << x;\n+  r += m << x; /* { dg-bogus \"left shift of negative value\" } */\n+  r += 0 << x;\n+  r += 1 << x;\n+  r += -1 << x; /* { dg-bogus \"left shift of negative value\" } */\n+  r += -1U << x;\n+  return r;\n+}\n+\n+int\n+right (int x)\n+{\n+  /* Shouldn't warn for RSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z >> x;\n+  r += o >> x;\n+  r += m >> x;\n+  r += 0 >> x;\n+  r += 1 >> x;\n+  r += -1 >> x;\n+  r += -1U >> x;\n+  return r;\n+}"}, {"sha": "85fbd0e35253f3bd7f23623999a6d352bc08f7ef", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -0,0 +1,49 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+enum E {\n+  A = 0 << 1,\n+  B = 1 << 1,\n+  C = -1 << 1,\n+  D = 0 >> 1,\n+  E = 1 >> 1,\n+  F = -1 >> 1\n+};\n+\n+int\n+left (int x)\n+{\n+  /* Warn for LSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z << x;\n+  r += o << x;\n+  r += m << x; /* { dg-bogus \"left shift of negative value\" } */\n+  r += 0 << x;\n+  r += 1 << x;\n+  r += -1 << x; /* { dg-bogus \"left shift of negative value\" } */\n+  r += -1U << x;\n+  return r;\n+}\n+\n+int\n+right (int x)\n+{\n+  /* Shouldn't warn for RSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z >> x;\n+  r += o >> x;\n+  r += m >> x;\n+  r += 0 >> x;\n+  r += 1 >> x;\n+  r += -1 >> x;\n+  r += -1U >> x;\n+  return r;\n+}"}, {"sha": "74ecd1e2867298a8e21ff534355719325bdedcb5", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-5.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-5.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -0,0 +1,50 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wshift-negative-value\" } */\n+/* { dg-additional-options \"-std=c++03\" { target c++ } } */\n+/* { dg-additional-options \"-std=c90\" { target c } } */\n+\n+enum E {\n+  A = 0 << 1,\n+  B = 1 << 1,\n+  C = -1 << 1, /* { dg-warning \"left shift of negative value\" } */\n+  D = 0 >> 1,\n+  E = 1 >> 1,\n+  F = -1 >> 1\n+};\n+\n+int\n+left (int x)\n+{\n+  /* Warn for LSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z << x;\n+  r += o << x;\n+  r += m << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += 0 << x;\n+  r += 1 << x;\n+  r += -1 << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += -1U << x;\n+  return r;\n+}\n+\n+int\n+right (int x)\n+{\n+  /* Shouldn't warn for RSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z >> x;\n+  r += o >> x;\n+  r += m >> x;\n+  r += 0 >> x;\n+  r += 1 >> x;\n+  r += -1 >> x;\n+  r += -1U >> x;\n+  return r;\n+}"}, {"sha": "de9db528cb833ab70e02bd6eb6ee7b9958b16c34", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-6.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-6.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -0,0 +1,50 @@\n+/* PR c/65179 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wextra\" } */\n+/* { dg-additional-options \"-std=c++03\" { target c++ } } */\n+/* { dg-additional-options \"-std=c90\" { target c } } */\n+\n+enum E {\n+  A = 0 << 1,\n+  B = 1 << 1,\n+  C = -1 << 1, /* { dg-bogus \"left shift of negative value\" } */\n+  D = 0 >> 1,\n+  E = 1 >> 1,\n+  F = -1 >> 1\n+};\n+\n+int\n+left (int x)\n+{\n+  /* Warn for LSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z << x;\n+  r += o << x;\n+  r += m << x; /* { dg-bogus \"left shift of negative value\" } */\n+  r += 0 << x;\n+  r += 1 << x;\n+  r += -1 << x; /* { dg-bogus \"left shift of negative value\" } */\n+  r += -1U << x;\n+  return r;\n+}\n+\n+int\n+right (int x)\n+{\n+  /* Shouldn't warn for RSHIFT_EXPR.  */\n+  const int z = 0;\n+  const int o = 1;\n+  const int m = -1;\n+  int r = 0;\n+  r += z >> x;\n+  r += o >> x;\n+  r += m >> x;\n+  r += 0 >> x;\n+  r += 1 >> x;\n+  r += -1 >> x;\n+  r += -1U >> x;\n+  return r;\n+}"}, {"sha": "755595f5c27c68d7c00dd89ce37a072891a5112e", "filename": "gcc/testsuite/gcc.dg/c90-left-shift-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-left-shift-1.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+enum E { A = -2 << 1 };\n+int i = -1 << 0;\n+\n+int\n+f (int i)\n+{\n+  switch (i)\n+  case -1 << 0: break;\n+}"}, {"sha": "75b05677ce1efe2589e8be27cf7fcf5e727c9541", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-7.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -30,8 +30,8 @@ int f1 = (0 ? 0 << -1 : 0);\n int g1 = (0 ? 0 >> 1000 : 0);\n int h1 = (0 ? 0 >> -1: 0);\n \n-/* Allowed for now, but actually undefined behavior in C99.  */\n int i = -1 << 0;\n+/* { dg-error \"constant\" \"constant\" { target *-*-* } 33 } */\n \n int j[1] = { DBL_MAX }; /* { dg-warning \"overflow in implicit constant conversion\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 36 } */"}, {"sha": "9a73049fa221dad746ff934c1e7a5f2340aa3206", "filename": "gcc/testsuite/gcc.dg/c99-left-shift-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0173bd2a038cbeef871b22b312a6856ab1dcda2a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-left-shift-1.c?ref=0173bd2a038cbeef871b22b312a6856ab1dcda2a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+enum E { A = -2 << 1 }; /* { dg-error \"constant expression\" } */\n+int i = -1 << 0; /* { dg-error \"constant expression\" } */\n+\n+int\n+f (int i)\n+{\n+  switch (i)\n+  case -1 << 0: break; /* { dg-error \"constant expression\" } */\n+}"}]}