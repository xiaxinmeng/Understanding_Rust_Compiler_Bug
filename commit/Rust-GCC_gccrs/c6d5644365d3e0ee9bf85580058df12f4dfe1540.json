{"sha": "c6d5644365d3e0ee9bf85580058df12f4dfe1540", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkNTY0NDM2NWQzZTBlZTliZjg1NTgwMDU4ZGYxMmY0ZGZlMTU0MA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2006-03-20T22:58:32Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2006-03-20T22:58:32Z"}, "message": "sh.c (untangle_mova): Initialize n_addr and n_target.\n\n\t* config/sh/sh.c (untangle_mova): Initialize n_addr and n_target.\n\n\t* config/sh/sh.c (find_regmode_weight): Change the type of the first\n\tparameter and use get_ebb_head_tail.\n\t(sh_md_init_global): Adjust uses of find_regmode_weight.\n\nFrom-SVN: r112231", "tree": {"sha": "01e2a3441de8aa9c91bfa440349b5a00c0c1db54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01e2a3441de8aa9c91bfa440349b5a00c0c1db54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d5644365d3e0ee9bf85580058df12f4dfe1540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d5644365d3e0ee9bf85580058df12f4dfe1540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d5644365d3e0ee9bf85580058df12f4dfe1540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d5644365d3e0ee9bf85580058df12f4dfe1540/comments", "author": null, "committer": null, "parents": [{"sha": "97a62038664e3b5f7e46ce900b2a090c79bb03bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a62038664e3b5f7e46ce900b2a090c79bb03bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a62038664e3b5f7e46ce900b2a090c79bb03bd"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "37f35339849457ac111b023a233e3343e4d59d44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d5644365d3e0ee9bf85580058df12f4dfe1540/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d5644365d3e0ee9bf85580058df12f4dfe1540/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6d5644365d3e0ee9bf85580058df12f4dfe1540", "patch": "@@ -1,3 +1,11 @@\n+2006-03-20  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (untangle_mova): Initialize n_addr and n_target.\n+\n+\t* config/sh/sh.c (find_regmode_weight): Change the type of the first\n+\tparameter and use get_ebb_head_tail.\n+\t(sh_md_init_global): Adjust uses of find_regmode_weight.\n+\n 2006-03-20  Steven Bosscher  <stevenb.gcc@gmail.com>\n \n \t* function.h (struct function) <x_tail_recursion_reentry>:"}, {"sha": "b4a4dd1956aea1818e6ee530023061c56dfb1424", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d5644365d3e0ee9bf85580058df12f4dfe1540/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d5644365d3e0ee9bf85580058df12f4dfe1540/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c6d5644365d3e0ee9bf85580058df12f4dfe1540", "patch": "@@ -208,7 +208,7 @@ static int sh_issue_rate (void);\n static int sh_dfa_new_cycle (FILE *, int, rtx, int, int, int *sort_p);\n static short find_set_regmode_weight (rtx, enum machine_mode);\n static short find_insn_regmode_weight (rtx, enum machine_mode);\n-static void find_regmode_weight (int, enum machine_mode);\n+static void find_regmode_weight (basic_block, enum machine_mode);\n static void  sh_md_init_global (FILE *, int, int);\n static void  sh_md_finish_global (FILE *, int);\n static int rank_for_reorder (const void *, const void *);\n@@ -3446,8 +3446,8 @@ fixup_mova (rtx mova)\n static int\n untangle_mova (int *num_mova, rtx *first_mova, rtx new_mova)\n {\n-  int n_addr;\n-  int f_target, n_target;\n+  int n_addr = 0; /* Initialization to shut up spurious warning.  */\n+  int f_target, n_target = 0; /* Likewise.  */\n \n   if (optimize)\n     {\n@@ -8748,11 +8748,11 @@ find_insn_regmode_weight (rtx insn, enum machine_mode mode)\n \n /* Calculate regmode weights for all insns of a basic block.  */\n static void\n-find_regmode_weight (int b, enum machine_mode mode)\n+find_regmode_weight (basic_block b, enum machine_mode mode)\n {\n   rtx insn, next_tail, head, tail;\n \n-  get_block_head_tail (b, &head, &tail);\n+  get_ebb_head_tail (b, b, &head, &tail);\n   next_tail = NEXT_INSN (tail);\n \n   for (insn = head; insn != next_tail; insn = NEXT_INSN (insn))\n@@ -8833,8 +8833,8 @@ sh_md_init_global (FILE *dump ATTRIBUTE_UNUSED,\n \n   FOR_EACH_BB_REVERSE (b)\n   {\n-    find_regmode_weight (b->index, SImode);\n-    find_regmode_weight (b->index, SFmode);\n+    find_regmode_weight (b, SImode);\n+    find_regmode_weight (b, SFmode);\n   }\n \n   CURR_REGMODE_PRESSURE (SImode) = 0;"}]}