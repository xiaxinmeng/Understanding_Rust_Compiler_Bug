{"sha": "3403c4c78e001dd78904d4884647904a02c36c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQwM2M0Yzc4ZTAwMWRkNzg5MDRkNDg4NDY0NzkwNGEwMmMzNmM1Mg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-11-28T14:07:04Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-11-28T14:07:04Z"}, "message": "[ARM] Optimize copysign/copysignf for soft-float using BFI\n\n  gcc/\n    * config/arm/arm.md (copysignsf3): New pattern.\n    (copysigndf3): Likewise.\n\n  gcc/testsuite/\n    * gcc.target/arm/copysign_softfloat_1.c: New copysign/copysignf\n    testcase for soft-float.\n\nFrom-SVN: r218159", "tree": {"sha": "52d54564caa573d2942f85e929656820bb94558b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52d54564caa573d2942f85e929656820bb94558b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3403c4c78e001dd78904d4884647904a02c36c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3403c4c78e001dd78904d4884647904a02c36c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3403c4c78e001dd78904d4884647904a02c36c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3403c4c78e001dd78904d4884647904a02c36c52/comments", "author": null, "committer": null, "parents": [{"sha": "476ff787366cedb6f4123c0a5647522698570d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476ff787366cedb6f4123c0a5647522698570d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476ff787366cedb6f4123c0a5647522698570d5f"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "10fec954f9f5744b4feb95efa520e01e7dccfe56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403c4c78e001dd78904d4884647904a02c36c52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403c4c78e001dd78904d4884647904a02c36c52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3403c4c78e001dd78904d4884647904a02c36c52", "patch": "@@ -1,3 +1,8 @@\n+2014-11-28  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/arm/arm.md (copysignsf3): New pattern.\n+\t(copysigndf3): Likewise.\n+\n 2014-11-28  Andrey Turetskiy  <andrey.turetskiy@intel.com>\n \t    Ilya Verbin  <ilya.verbin@intel.com>\n "}, {"sha": "822760bdd34e2e381334fdeecc58d3809c11774f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403c4c78e001dd78904d4884647904a02c36c52/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403c4c78e001dd78904d4884647904a02c36c52/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3403c4c78e001dd78904d4884647904a02c36c52", "patch": "@@ -11192,6 +11192,47 @@\n   [(set_attr \"predicable\" \"yes\")]\n )\n \n+(define_expand \"copysignsf3\"\n+  [(match_operand:SF 0 \"register_operand\")\n+   (match_operand:SF 1 \"register_operand\")\n+   (match_operand:SF 2 \"register_operand\")]\n+  \"TARGET_SOFT_FLOAT && arm_arch_thumb2\"\n+  \"{\n+     emit_move_insn (operands[0], operands[2]);\n+     emit_insn (gen_insv_t2 (simplify_gen_subreg (SImode, operands[0], SFmode, 0),\n+\t\tGEN_INT (31), GEN_INT (0),\n+\t\tsimplify_gen_subreg (SImode, operands[1], SFmode, 0)));\n+     DONE;\n+  }\"\n+)\n+\n+(define_expand \"copysigndf3\"\n+  [(match_operand:DF 0 \"register_operand\")\n+   (match_operand:DF 1 \"register_operand\")\n+   (match_operand:DF 2 \"register_operand\")]\n+  \"TARGET_SOFT_FLOAT && arm_arch_thumb2\"\n+  \"{\n+     rtx op0_low = gen_lowpart (SImode, operands[0]);\n+     rtx op0_high = gen_highpart (SImode, operands[0]);\n+     rtx op1_low = gen_lowpart (SImode, operands[1]);\n+     rtx op1_high = gen_highpart (SImode, operands[1]);\n+     rtx op2_high = gen_highpart (SImode, operands[2]);\n+\n+     rtx scratch1 = gen_reg_rtx (SImode);\n+     rtx scratch2 = gen_reg_rtx (SImode);\n+     emit_move_insn (scratch1, op2_high);\n+     emit_move_insn (scratch2, op1_high);\n+\n+     emit_insn(gen_rtx_SET(SImode, scratch1,\n+\t\t\t   gen_rtx_LSHIFTRT (SImode, op2_high, GEN_INT(31))));\n+     emit_insn(gen_insv_t2(scratch2, GEN_INT(1), GEN_INT(31), scratch1));\n+     emit_move_insn (op0_low, op1_low);\n+     emit_move_insn (op0_high, scratch2);\n+\n+     DONE;\n+  }\"\n+)\n+\n ;; Vector bits common to IWMMXT and Neon\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "8d4a7889ff24f78c9ec6c2b33b8a2794a9a95270", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403c4c78e001dd78904d4884647904a02c36c52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403c4c78e001dd78904d4884647904a02c36c52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3403c4c78e001dd78904d4884647904a02c36c52", "patch": "@@ -1,3 +1,8 @@\n+2014-11-28  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/arm/copysign_softfloat_1.c: New copysign/copysignf\n+\ttestcase for soft-float.\n+\n 2014-11-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr63661.c: Replace -mtune=native with"}, {"sha": "def3fa0cf946e8ed6acd5d95b427093157fcd5c0", "filename": "gcc/testsuite/gcc.target/arm/copysign_softfloat_1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3403c4c78e001dd78904d4884647904a02c36c52/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcopysign_softfloat_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3403c4c78e001dd78904d4884647904a02c36c52/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcopysign_softfloat_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcopysign_softfloat_1.c?ref=3403c4c78e001dd78904d4884647904a02c36c52", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-skip-if \"skip override\" { *-*-* } { \"-mfloat-abi=softfp\" \"-mfloat-abi=hard\" } { \"\" } } */\n+/* { dg-options \"-O2 -mfloat-abi=soft --save-temps\" } */\n+extern void abort (void);\n+\n+#define N 16\n+\n+float a_f[N] = {-0.1f, -3.2f, -6.3f, -9.4f,\n+\t\t-12.5f, -15.6f, -18.7f, -21.8f,\n+\t\t24.9f, 27.1f, 30.2f, 33.3f,\n+\t\t36.4f, 39.5f, 42.6f, 45.7f};\n+\n+float b_f[N] = {-1.2f, 3.4f, -5.6f, 7.8f,\n+\t\t-9.0f, 1.0f, -2.0f, 3.0f,\n+\t\t-4.0f, -5.0f, 6.0f, 7.0f,\n+\t\t-8.0f, -9.0f, 10.0f, 11.0f};\n+\n+float c_f[N] = {-0.1f, 3.2f, -6.3f, 9.4f,\n+\t\t-12.5f, 15.6f, -18.7f, 21.8f,\n+\t\t-24.9f, -27.1f, 30.2f, 33.3f,\n+\t\t-36.4f, -39.5f, 42.6f, 45.7f};\n+\n+double a_d[N] = {-0.1, -3.2, -6.3, -9.4,\n+\t\t -12.5, -15.6, -18.7, -21.8,\n+\t\t 24.9, 27.1, 30.2, 33.3,\n+\t\t 36.4, 39.5, 42.6, 45.7};\n+\n+double b_d[N] = {-1.2, 3.4, -5.6, 7.8,\n+\t\t -9.0, 1.0, -2.0, 3.0,\n+\t\t -4.0, -5.0, 6.0, 7.0,\n+\t\t -8.0, -9.0, 10.0, 11.0};\n+\n+double c_d[N] = {-0.1, 3.2, -6.3, 9.4,\n+\t\t -12.5, 15.6, -18.7, 21.8,\n+\t\t -24.9, -27.1, 30.2, 33.3,\n+\t\t -36.4, -39.5, 42.6, 45.7};\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int index = 0;\n+\n+/* { dg-final { scan-assembler-times \"bfi\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lsr\" 1 } } */\n+  for (index; index < N; index++)\n+    {\n+      if (__builtin_copysignf (a_f[index], b_f[index]) != c_f[index])\n+\tabort();\n+    }\n+\n+  for (index = 0; index < N; index++)\n+    {\n+      if (__builtin_copysign (a_d[index], b_d[index]) != c_d[index])\n+\tabort();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}