{"sha": "08539f3e949c37dcfe6e128d78c527db47cc609d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1MzlmM2U5NDljMzdkY2ZlNmUxMjhkNzhjNTI3ZGI0N2NjNjA5ZA==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2017-11-29T22:14:17Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2017-11-29T22:14:17Z"}, "message": "Riscv patterns to optimize away some redundant zero/sign extends.\n\n\tgcc/\n\t* config/riscv/riscv.c (SINGLE_SHIFT_COST): New.\n\t(riscv_rtx_costs): Case ZERO_EXTRACT, match new pattern, and return\n\tSINGLE_SHIFT_COST.  Case LT and ZERO_EXTEND, likewise.  Case ASHIFT,\n\tuse SINGLE_SHIFT_COST.\n\t* config/riscv/riscv.md (lshrsi3_zero_extend_1): New.\n\t(lshrsi3_zero_extend_2, lshrsi3_zero_extend_3): New.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/riscv.exp: New.\n\t* gcc.target/riscv/zero-extend-1.c: New.\n\t* gcc.target/riscv/zero-extend-2.c: New.\n\t* gcc.target/riscv/zero-extend-3.c: New.\n\t* gcc.target/riscv/zero-extend-4.c: New.\n\n\nCo-Authored-By: Andrew Waterman <andrew@sifive.com>\n\nFrom-SVN: r255257", "tree": {"sha": "22848e6d4ce568310ad8c46274537a4ecda6728e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22848e6d4ce568310ad8c46274537a4ecda6728e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08539f3e949c37dcfe6e128d78c527db47cc609d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08539f3e949c37dcfe6e128d78c527db47cc609d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08539f3e949c37dcfe6e128d78c527db47cc609d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08539f3e949c37dcfe6e128d78c527db47cc609d/comments", "author": null, "committer": null, "parents": [{"sha": "591996bad79b7b109bb01fba69b1c7acc054e287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591996bad79b7b109bb01fba69b1c7acc054e287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591996bad79b7b109bb01fba69b1c7acc054e287"}], "stats": {"total": 187, "additions": 185, "deletions": 2}, "files": [{"sha": "877a4e8e248b3debd162597baf3279172e54416f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -1,3 +1,13 @@\n+2017-11-29  Jim Wilson  <jimw@sifive.com>\n+\t    Andrew Waterman  <andrew@sifive.com>\n+\n+\t* config/riscv/riscv.c (SINGLE_SHIFT_COST): New.\n+\t(riscv_rtx_costs): Case ZERO_EXTRACT, match new pattern, and return\n+\tSINGLE_SHIFT_COST.  Case LT and ZERO_EXTEND, likewise.  Case ASHIFT,\n+\tuse SINGLE_SHIFT_COST.\n+\t* config/riscv/riscv.md (lshrsi3_zero_extend_1): New.\n+\t(lshrsi3_zero_extend_2, lshrsi3_zero_extend_3): New.\n+\n 2017-11-29  Julia Koval  <julia.koval@intel.com>\n \n \t* config/i386/avx512vbmi2intrin.h (_mm512_shldv_epi16,"}, {"sha": "5547d68193cad60f85b363d8f02f8290a68dbe89", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -1429,6 +1429,8 @@ riscv_extend_cost (rtx op, bool unsigned_p)\n \n /* Implement TARGET_RTX_COSTS.  */\n \n+#define SINGLE_SHIFT_COST 1\n+\n static bool\n riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t\t int *total, bool speed)\n@@ -1489,10 +1491,21 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n       *total = riscv_binary_cost (x, 1, 2);\n       return false;\n \n+    case ZERO_EXTRACT:\n+      /* This is an SImode shift.  */\n+      if (outer_code == SET && (INTVAL (XEXP (x, 2)) > 0)\n+\t  && (INTVAL (XEXP (x, 1)) + INTVAL (XEXP (x, 2)) == 32))\n+\t{\n+\t  *total = COSTS_N_INSNS (SINGLE_SHIFT_COST);\n+\t  return true;\n+\t}\n+      return false;\n+\n     case ASHIFT:\n     case ASHIFTRT:\n     case LSHIFTRT:\n-      *total = riscv_binary_cost (x, 1, CONSTANT_P (XEXP (x, 1)) ? 4 : 9);\n+      *total = riscv_binary_cost (x, SINGLE_SHIFT_COST,\n+\t\t\t\t  CONSTANT_P (XEXP (x, 1)) ? 4 : 9);\n       return false;\n \n     case ABS:\n@@ -1504,6 +1517,14 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n       return true;\n \n     case LT:\n+      /* This is an SImode shift.  */\n+      if (outer_code == SET && GET_MODE (x) == DImode\n+\t  && GET_MODE (XEXP (x, 0)) == SImode)\n+\t{\n+\t  *total = COSTS_N_INSNS (SINGLE_SHIFT_COST);\n+\t  return true;\n+\t}\n+      /* Fall through.  */\n     case LTU:\n     case LE:\n     case LEU:\n@@ -1601,8 +1622,15 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \t*total = COSTS_N_INSNS (1);\n       return false;\n \n-    case SIGN_EXTEND:\n     case ZERO_EXTEND:\n+      /* This is an SImode shift.  */\n+      if (GET_CODE (XEXP (x, 0)) == LSHIFTRT)\n+\t{\n+\t  *total = COSTS_N_INSNS (SINGLE_SHIFT_COST);\n+\t  return true;\n+\t}\n+      /* Fall through.  */\n+    case SIGN_EXTEND:\n       *total = riscv_extend_cost (XEXP (x, 0), GET_CODE (x) == ZERO_EXTEND);\n       return false;\n "}, {"sha": "db4fed48e539743b033ca8b4887782f8f4750911", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -1524,6 +1524,49 @@\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; Non-canonical, but can be formed by ree when combine is not successful at\n+;; producing one of the two canonical patterns below.\n+(define_insn \"*lshrsi3_zero_extend_1\"\n+  [(set (match_operand:DI                   0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (lshiftrt:SI (match_operand:SI     1 \"register_operand\" \" r\")\n+\t\t      (match_operand:SI     2 \"const_int_operand\"))))]\n+  \"TARGET_64BIT && (INTVAL (operands[2]) & 0x1f) > 0\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n+\n+  return \"srliw\\t%0,%1,%2\";\n+}\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+;; Canonical form for a zero-extend of a logical right shift.\n+(define_insn \"*lshrsi3_zero_extend_2\"\n+  [(set (match_operand:DI                   0 \"register_operand\" \"=r\")\n+\t(zero_extract:DI (match_operand:DI  1 \"register_operand\" \" r\")\n+\t\t\t (match_operand     2 \"const_int_operand\")\n+\t\t\t (match_operand     3 \"const_int_operand\")))]\n+  \"(TARGET_64BIT && (INTVAL (operands[3]) > 0)\n+    && (INTVAL (operands[2]) + INTVAL (operands[3]) == 32))\"\n+{\n+  return \"srliw\\t%0,%1,%3\";\n+}\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+;; Canonical form for a zero-extend of a logical right shift when the\n+;; shift count is 31.\n+(define_insn \"*lshrsi3_zero_extend_3\"\n+  [(set (match_operand:DI                   0 \"register_operand\" \"=r\")\n+\t(lt:DI (match_operand:SI            1 \"register_operand\" \" r\")\n+\t       (const_int 0)))]\n+  \"TARGET_64BIT\"\n+{\n+  return \"srliw\\t%0,%1,31\";\n+}\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n ;;\n ;;  ....................\n ;;"}, {"sha": "5f237ae78c28c17850525b533a9cca8084d311f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -1,3 +1,11 @@\n+2017-11-29  Jim Wilson  <jimw@sifive.com>\n+\n+\t* gcc.target/riscv/riscv.exp: New.\n+\t* gcc.target/riscv/zero-extend-1.c: New.\n+\t* gcc.target/riscv/zero-extend-2.c: New.\n+\t* gcc.target/riscv/zero-extend-3.c: New.\n+\t* gcc.target/riscv/zero-extend-4.c: New.\n+\n 2017-11-29  David Malcolm  <dmalcolm@redhat.com>\n \n \t* g++.dg/cpp1y/static_assert3.C: New test case."}, {"sha": "7b1f7e097fb8e10c5717a367bb0780b2199e1e50", "filename": "gcc/testsuite/gcc.target/riscv/riscv.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Friscv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Friscv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Friscv.exp?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a RISC-V target.\n+if ![istarget riscv*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "8a7d84ddbca9a9240de7df2efdc9bc337c178e29", "filename": "gcc/testsuite/gcc.target/riscv/zero-extend-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-1.c?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { riscv64*-*-* } } } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2\" } */\n+unsigned long\n+sub1 (unsigned int i)\n+{\n+  return i >> 1;\n+}\n+/* { dg-final { scan-assembler-times \"srliw\" 1 } } */"}, {"sha": "9d30ae2936714f7e0ff594f24794a9ff3f33726f", "filename": "gcc/testsuite/gcc.target/riscv/zero-extend-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-2.c?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { riscv64*-*-* } } } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2\" } */\n+void\n+sub (unsigned int wc, unsigned long step, unsigned char *start)\n+{\n+  do\n+    {\n+      start[--step] = wc;\n+      wc >>= 6;\n+    }\n+  while (step > 1);\n+}\n+/* { dg-final { scan-assembler-times \"sext.w\" 0 } } */"}, {"sha": "eb3b8d43959e04b972521fbb15af19f49b9b74af", "filename": "gcc/testsuite/gcc.target/riscv/zero-extend-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-3.c?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { riscv64*-*-* } } } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2\" } */\n+extern int e (void);\n+enum { a, b }\n+c (void)\n+{\n+  int d = a;\n+  if (e() < 0)\n+    d = b;\n+  return d;\n+}\n+/* { dg-final { scan-assembler-times \"sext.w\" 0 } } */"}, {"sha": "d7703a6dfb7896b26d35e2e86c0eb7fb97bae2cd", "filename": "gcc/testsuite/gcc.target/riscv/zero-extend-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08539f3e949c37dcfe6e128d78c527db47cc609d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-4.c?ref=08539f3e949c37dcfe6e128d78c527db47cc609d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { riscv64*-*-* } } } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2\" } */\n+int a, b, e;\n+struct c *d;\n+struct c\n+{\n+  int bins;\n+  int binmap[10];\n+}\n+f(void)\n+{\n+  for (;;)\n+    {\n+      e = (unsigned) a >> 3;\n+      b = (long) &d[e];\n+      if (b)\n+\td->binmap[0] = e;\n+    }\n+}\n+/* { dg-final { scan-assembler-times \"sext.w\" 0 } } */"}]}