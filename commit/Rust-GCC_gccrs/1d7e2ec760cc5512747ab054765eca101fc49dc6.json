{"sha": "1d7e2ec760cc5512747ab054765eca101fc49dc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3ZTJlYzc2MGNjNTUxMjc0N2FiMDU0NzY1ZWNhMTAxZmM0OWRjNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-06-30T18:51:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-06-30T18:51:22Z"}, "message": "decl.c (build_ptrmemfunc_type): Don't give a PMF RECORD_TYPE TYPE_BINFO or TYPE_LANG_SPECIFIC.\n\n\t* decl.c (build_ptrmemfunc_type): Don't give a PMF RECORD_TYPE\n\tTYPE_BINFO or TYPE_LANG_SPECIFIC.\n\t* cp-tree.h (TYPE_PTRMEMFUNC_FLAG): Use TYPE_LANG_FLAG_2.\n\t(TYPE_PTRMEMFUNC_P): Don't expect TYPE_LANG_SPECIFIC.\n\t* typeck.c (build_ptrmemfunc_access_expr): Don't use lookup_member.\n\t* pt.c (unify): Also check whether the argument is a PMF.\n\nFrom-SVN: r212164", "tree": {"sha": "b299812b619edc726fd28c0a9424c67d7cf22d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b299812b619edc726fd28c0a9424c67d7cf22d25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d7e2ec760cc5512747ab054765eca101fc49dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7e2ec760cc5512747ab054765eca101fc49dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d7e2ec760cc5512747ab054765eca101fc49dc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7e2ec760cc5512747ab054765eca101fc49dc6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17adeaa773a12d1fc04b1af28aadd9c255ae56d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17adeaa773a12d1fc04b1af28aadd9c255ae56d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17adeaa773a12d1fc04b1af28aadd9c255ae56d0"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "e925e133422a9d322e28b7cdbff5de8886aee24b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d7e2ec760cc5512747ab054765eca101fc49dc6", "patch": "@@ -1,3 +1,12 @@\n+2014-06-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (build_ptrmemfunc_type): Don't give a PMF RECORD_TYPE\n+\tTYPE_BINFO or TYPE_LANG_SPECIFIC.\n+\t* cp-tree.h (TYPE_PTRMEMFUNC_FLAG): Use TYPE_LANG_FLAG_2.\n+\t(TYPE_PTRMEMFUNC_P): Don't expect TYPE_LANG_SPECIFIC.\n+\t* typeck.c (build_ptrmemfunc_access_expr): Don't use lookup_member.\n+\t* pt.c (unify): Also check whether the argument is a PMF.\n+\n 2014-06-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54891"}, {"sha": "1e9e1afd2fe2349d5bebac6ca55887904449144a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1d7e2ec760cc5512747ab054765eca101fc49dc6", "patch": "@@ -126,6 +126,7 @@ c-common.h, not after.\n    0: TYPE_DEPENDENT_P\n    1: TYPE_HAS_USER_CONSTRUCTOR.\n    2: TYPE_HAS_LATE_RETURN_TYPE (in FUNCTION_TYPE, METHOD_TYPE)\n+      TYPE_PTRMEMFUNC_FLAG (in RECORD_TYPE)\n    3: TYPE_FOR_JAVA.\n    4: TYPE_HAS_NONTRIVIAL_DESTRUCTOR\n    5: CLASS_TYPE_P (in RECORD_TYPE and UNION_TYPE)\n@@ -3561,11 +3562,10 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    function type.  */\n #define TYPE_PTRMEMFUNC_P(NODE)\t\t\\\n   (TREE_CODE (NODE) == RECORD_TYPE\t\\\n-   && TYPE_LANG_SPECIFIC (NODE)\t\t\\\n    && TYPE_PTRMEMFUNC_FLAG (NODE))\n \n #define TYPE_PTRMEMFUNC_FLAG(NODE) \\\n-  (LANG_TYPE_CLASS_CHECK (NODE)->ptrmemfunc_flag)\n+  (TYPE_LANG_FLAG_2 (RECORD_TYPE_CHECK (NODE)))\n \n /* Returns true if NODE is a pointer-to-member.  */\n #define TYPE_PTRMEM_P(NODE) \\"}, {"sha": "909f762e93c42c39f23fd514c97976f5ea27f13d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1d7e2ec760cc5512747ab054765eca101fc49dc6", "patch": "@@ -8073,13 +8073,10 @@ build_ptrmemfunc_type (tree type)\n     unqualified_variant\n       = build_ptrmemfunc_type (TYPE_MAIN_VARIANT (type));\n \n-  t = make_class_type (RECORD_TYPE);\n-  xref_basetypes (t, NULL_TREE);\n+  t = make_node (RECORD_TYPE);\n \n-  /* Let the front end know this is a pointer to member function...  */\n+  /* Let the front end know this is a pointer to member function.  */\n   TYPE_PTRMEMFUNC_FLAG (t) = 1;\n-  /* ... and not really a class type.  */\n-  SET_CLASS_TYPE_P (t, 0);\n \n   field = build_decl (input_location, FIELD_DECL, pfn_identifier, type);\n   fields = field;\n@@ -8109,7 +8106,6 @@ build_ptrmemfunc_type (tree type)\n       TYPE_MAIN_VARIANT (t) = unqualified_variant;\n       TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (unqualified_variant);\n       TYPE_NEXT_VARIANT (unqualified_variant) = t;\n-      TREE_TYPE (TYPE_BINFO (t)) = t;\n     }\n \n   /* Cache this pointer-to-member type so that we can find it again"}, {"sha": "70a946c09c6371283572d014ba4383434a503d25", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1d7e2ec760cc5512747ab054765eca101fc49dc6", "patch": "@@ -18104,6 +18104,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t\t\tTYPE_PTRMEMFUNC_FN_TYPE (arg),\n \t\t\tstrict, explain_p);\n \t}\n+      else if (TYPE_PTRMEMFUNC_P (arg))\n+\treturn unify_type_mismatch (explain_p, parm, arg);\n \n       if (CLASSTYPE_TEMPLATE_INFO (parm))\n \t{"}, {"sha": "9758dfe44d934d2bfce1cabd7c1c51e125147bfe", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7e2ec760cc5512747ab054765eca101fc49dc6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1d7e2ec760cc5512747ab054765eca101fc49dc6", "patch": "@@ -2848,8 +2848,10 @@ build_ptrmemfunc_access_expr (tree ptrmem, tree member_name)\n      type.  */\n   ptrmem_type = TREE_TYPE (ptrmem);\n   gcc_assert (TYPE_PTRMEMFUNC_P (ptrmem_type));\n-  member = lookup_member (ptrmem_type, member_name, /*protect=*/0,\n-\t\t\t  /*want_type=*/false, tf_warning_or_error);\n+  for (member = TYPE_FIELDS (ptrmem_type); member;\n+       member = DECL_CHAIN (member))\n+    if (DECL_NAME (member) == member_name)\n+      break;\n   return build_simple_component_ref (ptrmem, member);\n }\n "}]}