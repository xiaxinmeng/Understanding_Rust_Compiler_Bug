{"sha": "94504c9ae157db937a2e62d533a36d56598f3c09", "node_id": "C_kwDOANBUbNoAKDk0NTA0YzlhZTE1N2RiOTM3YTJlNjJkNTMzYTM2ZDU2NTk4ZjNjMDk", "commit": {"author": {"name": "Kewen.Lin", "email": "linkw@gcc.gnu.org", "date": "2022-09-13T09:13:59Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-09-13T10:39:04Z"}, "message": "rs6000: Handle unresolved overloaded builtin [PR105485]\n\nPR105485 exposes that new builtin function framework doesn't handle\nunresolved overloaded builtin function well.  With new builtin\nfunction support, we don't have builtin info for any overloaded\nrs6000_gen_builtins enum, since they are expected to be resolved to\none specific instance.  So when function rs6000_gimple_fold_builtin\nfaces one unresolved overloaded builtin, the access for builtin info\nbecomes out of bound and gets ICE then.\n\nWe should not try to fold one unresolved overloaded builtin there\nand as the previous support we should emit one error message during\nexpansion phase like \"unresolved overload for builtin ...\".\n\n\tPR target/105485\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_builtin): Add\n\tthe handling for unresolved overloaded builtin function.\n\t(rs6000_expand_builtin): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/powerpc/pr105485.C: New test.", "tree": {"sha": "c04e839132473c4111c890780fa3ef0ff3cbdeed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c04e839132473c4111c890780fa3ef0ff3cbdeed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94504c9ae157db937a2e62d533a36d56598f3c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94504c9ae157db937a2e62d533a36d56598f3c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94504c9ae157db937a2e62d533a36d56598f3c09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94504c9ae157db937a2e62d533a36d56598f3c09/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee1548d96884d2689482054d925967a9a21d697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee1548d96884d2689482054d925967a9a21d697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee1548d96884d2689482054d925967a9a21d697"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "3ce729c1e6de81a4eaf37b931c74bbfd34761a05", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94504c9ae157db937a2e62d533a36d56598f3c09/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94504c9ae157db937a2e62d533a36d56598f3c09/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=94504c9ae157db937a2e62d533a36d56598f3c09", "patch": "@@ -1260,6 +1260,11 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   enum tree_code bcode;\n   gimple *g;\n \n+  /* For an unresolved overloaded builtin, return early here since there\n+     is no builtin info for it and we are unable to fold it.  */\n+  if (fn_code > RS6000_OVLD_NONE)\n+    return false;\n+\n   size_t uns_fncode = (size_t) fn_code;\n   enum insn_code icode = rs6000_builtin_info[uns_fncode].icode;\n   const char *fn_name1 = rs6000_builtin_info[uns_fncode].bifname;\n@@ -3256,6 +3261,14 @@ rs6000_expand_builtin (tree exp, rtx target, rtx /* subtarget */,\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   enum rs6000_gen_builtins fcode\n     = (enum rs6000_gen_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n+\n+  /* Emit error message if it's an unresolved overloaded builtin.  */\n+  if (fcode > RS6000_OVLD_NONE)\n+    {\n+      error (\"unresolved overload for builtin %qF\", fndecl);\n+      return const0_rtx;\n+    }\n+\n   size_t uns_fcode = (size_t)fcode;\n   enum insn_code icode = rs6000_builtin_info[uns_fcode].icode;\n "}, {"sha": "db1bd944aae4bf0e55b7d96fcca8af6b94995a3f", "filename": "gcc/testsuite/g++.target/powerpc/pr105485.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94504c9ae157db937a2e62d533a36d56598f3c09/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr105485.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94504c9ae157db937a2e62d533a36d56598f3c09/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr105485.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fpowerpc%2Fpr105485.C?ref=94504c9ae157db937a2e62d533a36d56598f3c09", "patch": "@@ -0,0 +1,9 @@\n+/* It's to verify no ICE here, ignore error/warning messages\n+   since they are not test points here.  */\n+/* { dg-excess-errors \"pr105485\" } */\n+\n+template <class> void __builtin_vec_vslv();\n+typedef  __attribute__((altivec(vector__))) char T;\n+T b (T c, T d) {\n+    return __builtin_vec_vslv(c, d);\n+}"}]}