{"sha": "89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODljZTFjOGY3NjNlMWMzNDg1ZDk3ZDNjOGM3NGY3NWY5NGJmMGUwOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-06-23T20:52:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-06-23T20:52:14Z"}, "message": "i386.c (x86_output_mi_thunk): Don't pass MEM to %P0, just SYMBOL_REF.\n\n\t* config/i386/i386.c (x86_output_mi_thunk): Don't pass MEM to %P0,\n\tjust SYMBOL_REF.\n\t* config/s390/s390.c (s390_output_mi_thunk): Avoid .plt in -m31\n\tmode, as it requires pic register loaded.\n\n\t* varasm.c (resolve_unique_section): Remove prototype.  No longer\n\tstatic.\n\t* tree.h (resolve_unique_section): New prototype.\ncp/\n\t* method.c (thunk_labelno): New variable.\n\t(make_alias_for_thunk): New function.\n\t(use_thunk): Use it if defined ASM_OUTPUT_DEF.  Put the thunk\n\tinto the same section as the function it is calling.\n\tInclude gt-cp-method.h.\n\t* Make-lang.in (gt-cp-method.h): Depend on s-gtype.\n\t(cp/method.o): Depend on gt-cp-method.h.\n\t* config-lang.in (gtfiles): Add $(srcdir)/cp/method.c.\n\nFrom-SVN: r68389", "tree": {"sha": "d7c9b0e8e53eafd5f6f0295ca3b1bf6241af32c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7c9b0e8e53eafd5f6f0295ca3b1bf6241af32c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11405c93c09fb95c29b83bb6d8dccb0bed0e4d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11405c93c09fb95c29b83bb6d8dccb0bed0e4d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11405c93c09fb95c29b83bb6d8dccb0bed0e4d89"}], "stats": {"total": 152, "additions": 137, "deletions": 15}, "files": [{"sha": "bb5a5ec1f60350246c906019b4262cb6ab84fdf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -1,3 +1,14 @@\n+2003-06-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (x86_output_mi_thunk): Don't pass MEM to %P0,\n+\tjust SYMBOL_REF.\n+\t* config/s390/s390.c (s390_output_mi_thunk): Avoid .plt in -m31\n+\tmode, as it requires pic register loaded.\n+\n+\t* varasm.c (resolve_unique_section): Remove prototype.  No longer\n+\tstatic.\n+\t* tree.h (resolve_unique_section): New prototype.\n+\n 2003-06-23  Andreas Schwab  <schwab@suse.de>\n \n \tPR debug/9905"}, {"sha": "f08e80cd949b20fe15eabcc906b0c51b857cf80e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -15496,15 +15496,14 @@ x86_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n       output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n     }\n \n-  xops[0] = DECL_RTL (function);\n+  xops[0] = XEXP (DECL_RTL (function), 0);\n   if (TARGET_64BIT)\n     {\n       if (!flag_pic || (*targetm.binds_local_p) (function))\n \toutput_asm_insn (\"jmp\\t%P0\", xops);\n       else\n \t{\n-\t  tmp = XEXP (xops[0], 0);\n-\t  tmp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, tmp), UNSPEC_GOTPCREL);\n+\t  tmp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, xops[0]), UNSPEC_GOTPCREL);\n \t  tmp = gen_rtx_CONST (Pmode, tmp);\n \t  tmp = gen_rtx_MEM (QImode, tmp);\n \t  xops[0] = tmp;"}, {"sha": "4f0dd02542c6111af65808ac588c75aed66ffca0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -6480,13 +6480,16 @@ s390_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n      HOST_WIDE_INT vcall_offset;\n      tree function;\n {\n-  rtx op[9];\n+  rtx op[10];\n+  int nonlocal = 0;\n \n   /* Operand 0 is the target function.  */\n   op[0] = XEXP (DECL_RTL (function), 0);\n   if (flag_pic && !SYMBOL_REF_LOCAL_P (op[0]))\n     {\n-      op[0] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op[0]), 113);\n+      nonlocal = 1;\n+      op[0] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op[0]),\n+\t\t\t      TARGET_64BIT ? 113 : flag_pic == 2 ? 112 : 110);\n       op[0] = gen_rtx_CONST (Pmode, op[0]);\n     }\n \n@@ -6511,6 +6514,9 @@ s390_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n   op[7] = NULL_RTX;\n   op[8] = NULL_RTX;\n \n+  /* Operand 9 can be used for temporary register.  */\n+  op[9] = NULL_RTX;\n+\n   /* Generate code.  */\n   if (TARGET_64BIT)\n     {\n@@ -6641,14 +6647,39 @@ s390_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n \n       /* Jump to target.  */\n       op[8] = gen_label_rtx ();\n+\n       if (!flag_pic)\n \toutput_asm_insn (\"l\\t%4,%8-%5(%4)\", op);\n-      else\n+      else if (!nonlocal)\n \toutput_asm_insn (\"a\\t%4,%8-%5(%4)\", op);\n+      /* We cannot call through .plt, since .plt requires %r12 loaded.  */\n+      else if (flag_pic == 1)\n+\t{\n+\t  output_asm_insn (\"a\\t%4,%8-%5(%4)\", op);\n+\t  output_asm_insn (\"l\\t%4,%0(%4)\", op);\n+\t}\n+      else if (flag_pic == 2)\n+\t{\n+\t  op[9] = gen_rtx_REG (Pmode, 0);\n+\t  output_asm_insn (\"l\\t%9,%8-4-%5(%4)\", op);\n+\t  output_asm_insn (\"a\\t%4,%8-%5(%4)\", op);\n+\t  output_asm_insn (\"ar\\t%4,%9\", op);\n+\t  output_asm_insn (\"l\\t%4,0(%4)\", op);\n+\t}\n+\n       output_asm_insn (\"br\\t%4\", op);\n \n       /* Output literal pool.  */\n       output_asm_insn (\".align\\t4\", op);\n+\n+      if (nonlocal && flag_pic == 2)\n+\toutput_asm_insn (\".long\\t%0\", op);\n+      if (nonlocal)\n+\t{\n+\t  op[0] = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n+\t  SYMBOL_REF_FLAGS (op[0]) = SYMBOL_FLAG_LOCAL;\n+\t}\n+\n       (*targetm.asm_out.internal_label) (file, \"L\", CODE_LABEL_NUMBER (op[8]));\n       if (!flag_pic)\n \toutput_asm_insn (\".long\\t%0\", op);"}, {"sha": "ee9027446b8bde85f170c768ba0e1c618935c37c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -1,3 +1,14 @@\n+2003-06-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* method.c (thunk_labelno): New variable.\n+\t(make_alias_for_thunk): New function.\n+\t(use_thunk): Use it if defined ASM_OUTPUT_DEF.  Put the thunk\n+\tinto the same section as the function it is calling.\n+\tInclude gt-cp-method.h.\n+\t* Make-lang.in (gt-cp-method.h): Depend on s-gtype.\n+\t(cp/method.o): Depend on gt-cp-method.h.\n+\t* config-lang.in (gtfiles): Add $(srcdir)/cp/method.c.\n+\n Mon Jun 23 19:41:27 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* decl.c (register_dtor_fn): Mark cleanup as used."}, {"sha": "e340987c08f3f0b9d0eae1b87ce24f21495ea4f3", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -103,7 +103,7 @@ $(srcdir)/cp/cfns.h: $(srcdir)/cp/cfns.gperf\n \t\t$(srcdir)/cp/cfns.gperf > $(srcdir)/cp/cfns.h\n \n gtype-cp.h gt-cp-call.h gt-cp-decl.h gt-cp-decl2.h : s-gtype; @true\n-gt-cp-pt.h gt-cp-repo.h gt-cp-parser.h : s-gtype; @true\n+gt-cp-pt.h gt-cp-repo.h gt-cp-parser.h gt-cp-method.h : s-gtype; @true\n gt-cp-tree.h gt-cp-mangle.h gt-cp-name-lookup.h: s-gtype; @true\n \n #\f\n@@ -253,7 +253,7 @@ cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) toplev.h $(EXPR_\n cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\\n   except.h\n cp/method.o: cp/method.c $(CXX_TREE_H) $(TM_H) toplev.h $(RTL_H) $(EXPR_H) \\\n-  $(TM_P_H) $(TARGET_H)\n+  $(TM_P_H) $(TARGET_H) gt-cp-method.h\n cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h flags.h toplev.h convert.h\n cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) stack.h flags.h toplev.h $(RTL_H)\n cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h $(RTL_H) \\"}, {"sha": "8ba5506e8fb1bec8e79f34065ea0cc1b3035dd80", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -34,4 +34,4 @@ stagestuff=\"g++\\$(exeext) g++-cross\\$(exeext) cc1plus\\$(exeext)\"\n \n target_libs=\"target-libstdc++-v3 target-gperf\"\n \n-gtfiles=\"\\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/lex.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c\"\n+gtfiles=\"\\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/lex.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c\""}, {"sha": "9e00fff70c0c65fdc53f502ce30ee6ae5a45ce9a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -351,14 +351,61 @@ thunk_adjust (tree ptr, bool this_adjusting,\n   return ptr;\n }\n \n+static GTY (()) int thunk_labelno;\n+\n+/* Create a static alias to function.  */\n+\n+static tree\n+make_alias_for_thunk (tree function)\n+{\n+  tree alias;\n+  char buf[256];\n+\n+  ASM_GENERATE_INTERNAL_LABEL (buf, \"LTHUNK\", thunk_labelno);\n+  thunk_labelno++;\n+  alias = build_decl (FUNCTION_DECL, get_identifier (buf),\n+\t\t      TREE_TYPE (function));\n+  DECL_LANG_SPECIFIC (alias) = DECL_LANG_SPECIFIC (function);\n+  cxx_dup_lang_specific_decl (alias);\n+  DECL_CONTEXT (alias) = NULL;\n+  TREE_READONLY (alias) = TREE_READONLY (function);\n+  TREE_THIS_VOLATILE (alias) = TREE_THIS_VOLATILE (function);\n+  TREE_PUBLIC (alias) = 0;\n+  DECL_INTERFACE_KNOWN (alias) = 1;\n+  DECL_NOT_REALLY_EXTERN (alias) = 1;\n+  DECL_THIS_STATIC (alias) = 1;\n+  DECL_SAVED_FUNCTION_DATA (alias) = NULL;\n+  DECL_DESTRUCTOR_P (alias) = 0;\n+  DECL_CONSTRUCTOR_P (alias) = 0;\n+  DECL_CLONED_FUNCTION (alias) = NULL_TREE;\n+  DECL_EXTERNAL (alias) = 0;\n+  DECL_ARTIFICIAL (alias) = 1;\n+  DECL_NO_STATIC_CHAIN (alias) = 1;\n+  DECL_PENDING_INLINE_P (alias) = 0;\n+  DECL_INLINE (alias) = 0;\n+  DECL_DECLARED_INLINE_P (alias) = 0;\n+  DECL_DEFERRED_FN (alias) = 0;\n+  DECL_USE_TEMPLATE (alias) = 0;\n+  DECL_TEMPLATE_INSTANTIATED (alias) = 0;\n+  DECL_TEMPLATE_INFO (alias) = NULL;\n+  DECL_INITIAL (alias) = error_mark_node;\n+  TREE_ADDRESSABLE (alias) = 1;\n+  TREE_USED (alias) = 1;\n+  SET_DECL_ASSEMBLER_NAME (alias, DECL_NAME (alias));\n+  TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (alias)) = 1;\n+  if (!flag_syntax_only)\n+    assemble_alias (alias, DECL_ASSEMBLER_NAME (function));\n+  return alias;\n+}\n+\n /* Emit the definition of a C++ multiple inheritance or covariant\n    return vtable thunk.  If EMIT_P is nonzero, the thunk is emitted\n    immediately.  */\n \n void\n use_thunk (tree thunk_fndecl, bool emit_p)\n {\n-  tree function;\n+  tree function, alias;\n   tree virtual_offset;\n   HOST_WIDE_INT fixed_offset, virtual_value;\n   bool this_adjusting = DECL_THIS_THUNK_P (thunk_fndecl);\n@@ -386,6 +433,12 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   if (!emit_p)\n     return;\n \n+#ifdef ASM_OUTPUT_DEF\n+  alias = make_alias_for_thunk (function);\n+#else\n+  alias = function;\n+#endif\n+\n   fixed_offset = THUNK_FIXED_OFFSET (thunk_fndecl);\n   virtual_offset = THUNK_VIRTUAL_OFFSET (thunk_fndecl);\n \n@@ -415,14 +468,29 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n \n   push_to_top_level ();\n \n+#ifdef ASM_OUTPUT_DEF\n+  if (targetm.have_named_sections)\n+    {\n+      resolve_unique_section (function, 0, flag_function_sections);\n+\n+      if (DECL_SECTION_NAME (function) != NULL && DECL_ONE_ONLY (function))\n+\t{\n+\t  resolve_unique_section (thunk_fndecl, 0, flag_function_sections);\n+\n+\t  /* Output the thunk into the same section as function.  */\n+\t  DECL_SECTION_NAME (thunk_fndecl) = DECL_SECTION_NAME (function);\n+\t}\n+    }\n+#endif\n+\n   /* The back-end expects DECL_INITIAL to contain a BLOCK, so we\n      create one.  */\n   DECL_INITIAL (thunk_fndecl) = make_node (BLOCK);\n   BLOCK_VARS (DECL_INITIAL (thunk_fndecl)) = DECL_ARGUMENTS (thunk_fndecl);\n   \n   if (this_adjusting\n       && targetm.asm_out.can_output_mi_thunk (thunk_fndecl, fixed_offset,\n-\t\t\t\t\t      virtual_value, function))\n+\t\t\t\t\t      virtual_value, alias))\n     {\n       const char *fnname;\n       current_function_decl = thunk_fndecl;\n@@ -434,7 +502,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n       assemble_start_function (thunk_fndecl, fnname);\n \n       targetm.asm_out.output_mi_thunk (asm_out_file, thunk_fndecl,\n-\t\t\t\t       fixed_offset, virtual_value, function);\n+\t\t\t\t       fixed_offset, virtual_value, alias);\n \n       assemble_end_function (thunk_fndecl, fnname);\n       current_function_decl = 0;\n@@ -486,7 +554,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n       for (a = TREE_CHAIN (a); a; a = TREE_CHAIN (a))\n \tt = tree_cons (NULL_TREE, a, t);\n       t = nreverse (t);\n-      t = build_call (function, t);\n+      t = build_call (alias, t);\n       if (!this_adjusting)\n \tt = thunk_adjust (t, /*this_adjusting=*/0,\n \t\t\t  fixed_offset, virtual_offset);\n@@ -1054,3 +1122,5 @@ skip_artificial_parms_for (tree fn, tree list)\n     list = TREE_CHAIN (list);\n   return list;\n }\n+\n+#include \"gt-cp-method.h\""}, {"sha": "93065c5f2fe714a5b943ca04a7d3c2276094107c", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -2907,6 +2907,7 @@ extern int supports_one_only\t\tPARAMS ((void));\n extern void variable_section\t\tPARAMS ((tree, int));\n enum tls_model decl_tls_model\t\tPARAMS ((tree));\n enum symbol_visibility decl_visibility\tPARAMS ((tree));\n+extern void resolve_unique_section\tPARAMS ((tree, int, int));\n \n /* In stmt.c */\n extern void emit_nop\t\t\tPARAMS ((void));"}, {"sha": "091bbb312099c7b203dc49b7257420792ee478ea", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=89ce1c8f763e1c3485d97d3c8c74f75f94bf0e09", "patch": "@@ -183,7 +183,6 @@ static void asm_output_aligned_bss\n static bool asm_emit_uninitialised\tPARAMS ((tree, const char*,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT));\n-static void resolve_unique_section\tPARAMS ((tree, int, int));\n static void mark_weak                   PARAMS ((tree));\n \f\n enum in_section { no_section, in_text, in_data, in_named\n@@ -460,7 +459,7 @@ named_section (decl, name, reloc)\n \n /* If required, set DECL_SECTION_NAME to a unique name.  */\n \n-static void\n+void\n resolve_unique_section (decl, reloc, flag_function_or_data_sections)\n      tree decl;\n      int reloc ATTRIBUTE_UNUSED;"}]}