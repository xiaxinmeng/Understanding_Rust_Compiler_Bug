{"sha": "7d55b94832e4c81e06cbc5007aa77ee31a8875a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1NWI5NDgzMmU0YzgxZTA2Y2JjNTAwN2FhNzdlZTMxYTg4NzVhNg==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2014-03-12T11:31:19Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2014-03-12T11:31:19Z"}, "message": "re PR target/60264 (ARM ICE in dwarf2out_frame_debug_adjust_cfa, at dwarf2cfi.c:1090)\n\n2014-03-12  Christian Bruel  <christian.bruel@st.com>\n\n        PR target/60264\n        * config/arm/arm.c (arm_emit_vfp_multi_reg_pop): Emit a REG_CFA_DEF_CFA\n        note.\n        (arm_expand_epilogue_apcs_frame): call arm_add_cfa_adjust_cfa_note.\n        (arm_unwind_emit): Allow REG_CFA_DEF_CFA.\n\nFrom-SVN: r208511", "tree": {"sha": "3d4d6c6741e175091e2ab39cf8f7e13a1892746b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d4d6c6741e175091e2ab39cf8f7e13a1892746b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d55b94832e4c81e06cbc5007aa77ee31a8875a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d55b94832e4c81e06cbc5007aa77ee31a8875a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d55b94832e4c81e06cbc5007aa77ee31a8875a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/comments", "author": null, "committer": null, "parents": [{"sha": "c3da584c59f134a74dbedf66a4a26774567af95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3da584c59f134a74dbedf66a4a26774567af95d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3da584c59f134a74dbedf66a4a26774567af95d"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "05127c811cfa0d0f9b0366eb2b8f33e5760436c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d55b94832e4c81e06cbc5007aa77ee31a8875a6", "patch": "@@ -1,3 +1,11 @@\n+2014-03-12  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/60264\n+\t* config/arm/arm.c (arm_emit_vfp_multi_reg_pop): Emit a\tREG_CFA_DEF_CFA\n+\tnote.\n+\t(arm_expand_epilogue_apcs_frame): call arm_add_cfa_adjust_cfa_note.\n+\t(arm_unwind_emit): Allow REG_CFA_DEF_CFA.\n+\n 2014-03-12  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR tree-optimization/60454"}, {"sha": "a68ed8da1ca4c41796801be5ce2a16654371be71", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7d55b94832e4c81e06cbc5007aa77ee31a8875a6", "patch": "@@ -19914,8 +19914,15 @@ arm_emit_vfp_multi_reg_pop (int first_reg, int num_regs, rtx base_reg)\n   par = emit_insn (par);\n   REG_NOTES (par) = dwarf;\n \n-  arm_add_cfa_adjust_cfa_note (par, 2 * UNITS_PER_WORD * num_regs,\n-\t\t\t       base_reg, base_reg);\n+  /* Make sure cfa doesn't leave with IP_REGNUM to allow unwinding fron FP.  */\n+  if (TARGET_VFP && REGNO (base_reg) == IP_REGNUM)\n+    {\n+      RTX_FRAME_RELATED_P (par) = 1;\n+      add_reg_note (par, REG_CFA_DEF_CFA, hard_frame_pointer_rtx);\n+    }\n+  else\n+    arm_add_cfa_adjust_cfa_note (par, 2 * UNITS_PER_WORD * num_regs,\n+\t\t\t\t base_reg, base_reg);\n }\n \n /* Generate and emit a pattern that will be recognized as LDRD pattern.  If even\n@@ -27108,15 +27115,19 @@ arm_expand_epilogue_apcs_frame (bool really_return)\n   if (TARGET_HARD_FLOAT && TARGET_VFP)\n     {\n       int start_reg;\n+      rtx ip_rtx = gen_rtx_REG (SImode, IP_REGNUM);\n \n       /* The offset is from IP_REGNUM.  */\n       int saved_size = arm_get_vfp_saved_size ();\n       if (saved_size > 0)\n         {\n+\t  rtx insn;\n           floats_from_frame += saved_size;\n-          emit_insn (gen_addsi3 (gen_rtx_REG (SImode, IP_REGNUM),\n-                                 hard_frame_pointer_rtx,\n-                                 GEN_INT (-floats_from_frame)));\n+          insn = emit_insn (gen_addsi3 (ip_rtx,\n+\t\t\t\t\thard_frame_pointer_rtx,\n+\t\t\t\t\tGEN_INT (-floats_from_frame)));\n+\t  arm_add_cfa_adjust_cfa_note (insn, -floats_from_frame,\n+\t\t\t\t       ip_rtx, hard_frame_pointer_rtx);\n         }\n \n       /* Generate VFP register multi-pop.  */\n@@ -27189,11 +27200,15 @@ arm_expand_epilogue_apcs_frame (bool really_return)\n   num_regs = bit_count (saved_regs_mask);\n   if ((offsets->outgoing_args != (1 + num_regs)) || cfun->calls_alloca)\n     {\n+      rtx insn;\n       emit_insn (gen_blockage ());\n       /* Unwind the stack to just below the saved registers.  */\n-      emit_insn (gen_addsi3 (stack_pointer_rtx,\n-                             hard_frame_pointer_rtx,\n-                             GEN_INT (- 4 * num_regs)));\n+      insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t    hard_frame_pointer_rtx,\n+\t\t\t\t    GEN_INT (- 4 * num_regs)));\n+\n+      arm_add_cfa_adjust_cfa_note (insn, - 4 * num_regs,\n+\t\t\t\t   stack_pointer_rtx, hard_frame_pointer_rtx);\n     }\n \n   arm_emit_multi_reg_pop (saved_regs_mask);\n@@ -28985,11 +29000,11 @@ arm_unwind_emit (FILE * asm_out_file, rtx insn)\n \t   emit unwind information for it because these are used either for\n \t   pretend arguments or notes to adjust sp and restore registers from\n \t   stack.  */\n+\tcase REG_CFA_DEF_CFA:\n \tcase REG_CFA_ADJUST_CFA:\n \tcase REG_CFA_RESTORE:\n \t  return;\n \n-\tcase REG_CFA_DEF_CFA:\n \tcase REG_CFA_EXPRESSION:\n \tcase REG_CFA_OFFSET:\n \t  /* ??? Only handling here what we actually emit.  */"}, {"sha": "154ebc6254d296934edf7db03e4834a24f14bf6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d55b94832e4c81e06cbc5007aa77ee31a8875a6", "patch": "@@ -1,3 +1,8 @@\n+2014-03-12  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/60264\n+\t* gcc.target/arm/pr60264.c\n+\n 2014-03-12  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR tree-optimization/60454"}, {"sha": "4fe6aedb273f1c195b8125d700b77d1c55629433", "filename": "gcc/testsuite/gcc.target/arm/pr60264.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60264.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d55b94832e4c81e06cbc5007aa77ee31a8875a6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60264.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60264.c?ref=7d55b94832e4c81e06cbc5007aa77ee31a8875a6", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mapcs -g\" } */\n+\n+double bar(void);\n+\n+int foo(void)\n+{\n+  int i = bar() + bar();\n+\n+  return i;\n+}\n+"}]}