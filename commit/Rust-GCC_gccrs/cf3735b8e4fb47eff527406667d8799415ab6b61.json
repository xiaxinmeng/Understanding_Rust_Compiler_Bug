{"sha": "cf3735b8e4fb47eff527406667d8799415ab6b61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzNzM1YjhlNGZiNDdlZmY1Mjc0MDY2NjdkODc5OTQxNWFiNmI2MQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-09-24T16:35:04Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-09-24T16:35:04Z"}, "message": "pa.c (return_addr_rtx): Return NULL_RTX if count is not zero.\n\n\t* pa.c (return_addr_rtx): Return NULL_RTX if count is not zero.  Use\n\tinitial value of return pointer register instead of value in frame-20.\n\tRevise comments.\n\nFrom-SVN: r45778", "tree": {"sha": "6df03957395099ccaaa62110133917d2ff316ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6df03957395099ccaaa62110133917d2ff316ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3735b8e4fb47eff527406667d8799415ab6b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3735b8e4fb47eff527406667d8799415ab6b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3735b8e4fb47eff527406667d8799415ab6b61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3735b8e4fb47eff527406667d8799415ab6b61/comments", "author": null, "committer": null, "parents": [{"sha": "f3403757ec3409d713ace35f9ff07988667560ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3403757ec3409d713ace35f9ff07988667560ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3403757ec3409d713ace35f9ff07988667560ac"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "dd18ed42ec65e2528ca0eb3d7c1881c17377d5b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3735b8e4fb47eff527406667d8799415ab6b61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3735b8e4fb47eff527406667d8799415ab6b61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf3735b8e4fb47eff527406667d8799415ab6b61", "patch": "@@ -1,3 +1,9 @@\n+2001-09-24  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.c (return_addr_rtx): Return NULL_RTX if count is not zero.  Use\n+\tinitial value of return pointer register instead of value in frame-20.\n+\tRevise comments.\n+\n 2001-09-24  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* som.h (ASM_OUTPUT_EXTERNAL): Improve formatting."}, {"sha": "dda9d97309105d1378d1ecc5f5f0c0b7f1e4e693", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3735b8e4fb47eff527406667d8799415ab6b61/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3735b8e4fb47eff527406667d8799415ab6b61/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=cf3735b8e4fb47eff527406667d8799415ab6b61", "patch": "@@ -3461,7 +3461,10 @@ hppa_profile_hook (label_no)\n    the current frame, after the prologue.  FRAMEADDR is the\n    frame pointer of the COUNT frame.\n \n-   We want to ignore any export stub remnants here.\n+   We want to ignore any export stub remnants here.  To handle this,\n+   we examine the code at the return address, and if it is an export\n+   stub, we return a memory rtx for the stub return address stored\n+   at frame-24.\n \n    The value returned is used in two different ways:\n \n@@ -3476,42 +3479,36 @@ hppa_profile_hook (label_no)\n \n    This function handles most instances of case 2; however, it will\n    fail if we did not originally have stub code on the return path\n-   but will need code on the new return path.  This can happen if\n+   but will need stub code on the new return path.  This can happen if\n    the caller & callee are both in the main program, but the new\n-   return location is in a shared library.\n-\n-   To handle this correctly we need to set the return pointer at\n-   frame-20 to point to a return stub frame-24 to point to the\n-   location we wish to return to.  */\n+   return location is in a shared library.  */\n \n rtx\n return_addr_rtx (count, frameaddr)\n-     int count ATTRIBUTE_UNUSED;\n+     int count;\n      rtx frameaddr;\n {\n   rtx label;\n+  rtx rp;\n   rtx saved_rp;\n   rtx ins;\n \n-  if (TARGET_64BIT)\n-    return gen_rtx_MEM (Pmode, plus_constant (frameaddr, -16));\n+  if (count != 0)\n+    return NULL_RTX;\n \n-  if (TARGET_NO_SPACE_REGS)\n-    return gen_rtx_MEM (Pmode, plus_constant (frameaddr, -20));\n+  rp = get_hard_reg_initial_val (Pmode, 2);\n \n-  /* First, we start off with the normal return address pointer from\n-     -20[frameaddr].  */\n+  if (TARGET_64BIT || TARGET_NO_SPACE_REGS)\n+    return rp;\n \n   saved_rp = gen_reg_rtx (Pmode);\n-  emit_move_insn (saved_rp, plus_constant (frameaddr, -20));\n+  emit_move_insn (saved_rp, rp);\n \n   /* Get pointer to the instruction stream.  We have to mask out the\n      privilege level from the two low order bits of the return address\n      pointer here so that ins will point to the start of the first\n      instruction that would have been executed if we returned.  */\n-  ins = copy_to_reg (gen_rtx_AND (Pmode,\n-\t\t\t\t  copy_to_reg (gen_rtx_MEM (Pmode, saved_rp)),\n-\t\t\t\t  MASK_RETURN_ADDR));\n+  ins = copy_to_reg (gen_rtx_AND (Pmode, rp, MASK_RETURN_ADDR));\n   label = gen_label_rtx ();\n \n   /* Check the instruction stream at the normal return address for the\n@@ -3544,20 +3541,24 @@ return_addr_rtx (count, frameaddr)\n \t\t GEN_INT (0xe0400002),\n \t\t NE, NULL_RTX, SImode, 1, 0);\n \n-  /* If there is no export stub then just use our initial guess of\n-     -20[frameaddr].  */\n+  /* If there is no export stub then just use the value saved from\n+     the return pointer register.  */\n \n   emit_jump_insn (gen_bne (label));\n \n-  /* Here we know that our return address pointer points to an export\n+  /* Here we know that our return address points to an export\n      stub.  We don't want to return the address of the export stub,\n-     but rather the return address that leads back into user code.\n-     That return address is stored at -24[frameaddr].  */\n+     but rather the return address of the export stub.  That return\n+     address is stored at -24[frameaddr].  */\n \n-  emit_move_insn (saved_rp, plus_constant (frameaddr, -24));\n+  emit_move_insn (saved_rp,\n+\t\t  gen_rtx_MEM (Pmode,\n+\t\t\t       memory_address (Pmode,\n+\t\t\t\t\t       plus_constant (frameaddr,\n+\t\t\t\t\t\t\t      -24))));\n \n   emit_label (label);\n-  return gen_rtx_MEM (Pmode, memory_address (Pmode, saved_rp));\n+  return saved_rp;\n }\n \n /* This is only valid once reload has completed because it depends on"}]}