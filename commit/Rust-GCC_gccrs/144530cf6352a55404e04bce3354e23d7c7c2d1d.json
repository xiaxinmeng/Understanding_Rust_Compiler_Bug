{"sha": "144530cf6352a55404e04bce3354e23d7c7c2d1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0NTMwY2Y2MzUyYTU1NDA0ZTA0YmNlMzM1NGUyM2Q3YzdjMmQxZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-07-20T11:16:47Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-07-20T11:16:47Z"}, "message": "Properly handly PHI stmts in later_of_the_two (PR\n\n\tPR middle-end/71898\n\t* graphite-isl-ast-to-gimple.c (later_of_the_two):\n\tProperly handly PHI stmts.\n\t* gfortran.dg/graphite/pr71898.f90: New test.\n\nFrom-SVN: r238513", "tree": {"sha": "a52565acc7e86be00d9aefe1d8c726836c81d7c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a52565acc7e86be00d9aefe1d8c726836c81d7c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/144530cf6352a55404e04bce3354e23d7c7c2d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144530cf6352a55404e04bce3354e23d7c7c2d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144530cf6352a55404e04bce3354e23d7c7c2d1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144530cf6352a55404e04bce3354e23d7c7c2d1d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04ac4afa844abb88a4a3bddd9dbfe5572d38aea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ac4afa844abb88a4a3bddd9dbfe5572d38aea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ac4afa844abb88a4a3bddd9dbfe5572d38aea4"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "32e90ce66cd94abc3ecb89a75e393f5556f48ac5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144530cf6352a55404e04bce3354e23d7c7c2d1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144530cf6352a55404e04bce3354e23d7c7c2d1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=144530cf6352a55404e04bce3354e23d7c7c2d1d", "patch": "@@ -1,3 +1,9 @@\n+2016-07-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/71898\n+\t* graphite-isl-ast-to-gimple.c (later_of_the_two):\n+\tProperly handly PHI stmts.\n+\n 2016-07-20  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/71503"}, {"sha": "07c88026cdeb0ee365edb50e2c076d5c95ee1dec", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144530cf6352a55404e04bce3354e23d7c7c2d1d/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144530cf6352a55404e04bce3354e23d7c7c2d1d/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=144530cf6352a55404e04bce3354e23d7c7c2d1d", "patch": "@@ -1305,6 +1305,18 @@ later_of_the_two (gimple_stmt_iterator gsi1, gimple_stmt_iterator gsi2)\n   /* Find the iterator which is the latest.  */\n   if (bb1 == bb2)\n     {\n+      gimple *stmt1 = gsi_stmt (gsi1);\n+      gimple *stmt2 = gsi_stmt (gsi2);\n+\n+      if (stmt1 != NULL && stmt2 != NULL)\n+\t{\n+\t  bool is_phi1 = gimple_code (stmt1) == GIMPLE_PHI;\n+\t  bool is_phi2 = gimple_code (stmt2) == GIMPLE_PHI;\n+\n+\t  if (is_phi1 != is_phi2)\n+\t    return is_phi1 ? gsi2 : gsi1;\n+\t}\n+\n       /* For empty basic blocks gsis point to the end of the sequence.  Since\n \t there is no operator== defined for gimple_stmt_iterator and for gsis\n \t not pointing to a valid statement gsi_next would assert.  */"}, {"sha": "41b09e268db30f879e23c3edcd3d1132dfe097ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144530cf6352a55404e04bce3354e23d7c7c2d1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144530cf6352a55404e04bce3354e23d7c7c2d1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=144530cf6352a55404e04bce3354e23d7c7c2d1d", "patch": "@@ -1,3 +1,7 @@\n+2016-07-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* gfortran.dg/graphite/pr71898.f90: New test.\n+\n 2016-07-20  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/71503"}, {"sha": "01d6852cf3c6f18caf91ec907345816871d68773", "filename": "gcc/testsuite/gfortran.dg/graphite/pr71898.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144530cf6352a55404e04bce3354e23d7c7c2d1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr71898.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144530cf6352a55404e04bce3354e23d7c7c2d1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr71898.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr71898.f90?ref=144530cf6352a55404e04bce3354e23d7c7c2d1d", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! { dg-options \"-floop-nest-optimize -O1\" }\n+\n+MODULE d3_poly\n+    INTEGER, PUBLIC, PARAMETER :: max_grad2=5\n+    INTEGER, PUBLIC, PARAMETER :: max_grad3=3\n+    INTEGER, PUBLIC, PARAMETER :: cached_dim2=(max_grad2+1)*(max_grad2+2)/2\n+    INTEGER, PUBLIC, PARAMETER :: cached_dim3=(max_grad3+1)*(max_grad3+2)*(max_grad3+3)/6\n+    INTEGER, SAVE, DIMENSION(3,cached_dim3) :: a_mono_exp3\n+    INTEGER, SAVE, DIMENSION(cached_dim2,cached_dim2) :: a_mono_mult2\n+    INTEGER, SAVE, DIMENSION(cached_dim3,cached_dim3) :: a_mono_mult3\n+    INTEGER, SAVE, DIMENSION(4,cached_dim3) :: a_mono_mult3a\n+CONTAINS\n+SUBROUTINE init_d3_poly_module()\n+    INTEGER                                  :: grad, i, ii, ij, j, subG\n+    INTEGER, DIMENSION(3)                    :: monoRes3\n+    DO grad=0,max_grad2\n+        DO i=grad,0,-1\n+            DO j=grad-i,0,-1\n+            END DO\n+        END DO\n+    END DO\n+    DO ii=1,cached_dim3\n+        DO ij=ii,cached_dim2\n+            a_mono_mult2(ij,ii)=a_mono_mult2(ii,ij)\n+        END DO\n+    END DO\n+    DO ii=1,cached_dim3\n+        DO ij=ii,cached_dim3\n+            monoRes3=a_mono_exp3(:,ii)+a_mono_exp3(:,ij)\n+            a_mono_mult3(ii,ij)=mono_index3(monoRes3(1),monoRes3(2),monoRes3(3))+1\n+            a_mono_mult3(ij,ii)=a_mono_mult3(ii,ij)\n+        END DO\n+    END DO\n+    DO i=1,cached_dim3\n+       DO j=1,4\n+          a_mono_mult3a(j,i)=a_mono_mult3(j,i)\n+       END DO\n+    END DO\n+END SUBROUTINE\n+PURE FUNCTION mono_index3(i,j,k) RESULT(res)\n+    INTEGER, INTENT(in)                      :: i, j, k\n+    res=grad*(grad+1)*(grad+2)/6+(sgrad)*(sgrad+1)/2+k\n+END FUNCTION\n+END MODULE d3_poly"}]}