{"sha": "70b81845bf34a1bea7f82e9245fa7482edeb34b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiODE4NDViZjM0YTFiZWE3ZjgyZTkyNDVmYTc0ODJlZGViMzRiNg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-01-16T18:53:16Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-01-16T18:53:16Z"}, "message": "dfp-bit.c (dfp_compare_op): Return separate value for NaN.\n\ngcc/\n\t* config/dfp-bit.c (dfp_compare_op): Return separate value for NaN.\n\t(DFP_NE, DFP_LE, DFP_GE): Return false for NaN.\ngcc/testsuite/\n\t* gcc.dg/dfp/compare-special.h: New file.\n\t* gcc.dg/dfp/compare-special-32.c: New test.\n\t* gcc.dg/dfp/compare-special-64.c: New test.\n\t* gcc.dg/dfp/compare-special-128.c: New test.\n\nFrom-SVN: r120830", "tree": {"sha": "8b91c211691919e460efda16f240e785989ae017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b91c211691919e460efda16f240e785989ae017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70b81845bf34a1bea7f82e9245fa7482edeb34b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b81845bf34a1bea7f82e9245fa7482edeb34b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b81845bf34a1bea7f82e9245fa7482edeb34b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b81845bf34a1bea7f82e9245fa7482edeb34b6/comments", "author": null, "committer": null, "parents": [{"sha": "bfcabc6ce2a18a1a42db5483a1b634f0b28ebe6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcabc6ce2a18a1a42db5483a1b634f0b28ebe6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcabc6ce2a18a1a42db5483a1b634f0b28ebe6a"}], "stats": {"total": 354, "additions": 353, "deletions": 1}, "files": [{"sha": "80e90935bbd697eb4c547306fa43557b55758f94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70b81845bf34a1bea7f82e9245fa7482edeb34b6", "patch": "@@ -1,3 +1,8 @@\n+2007-01-16  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* config/dfp-bit.c (dfp_compare_op): Return separate value for NaN.\n+\t(DFP_NE, DFP_LE, DFP_GE): Return false for NaN.\n+\n 2007-01-16  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/darwin-ldouble.c: Build file for SOFT_FLOAT."}, {"sha": "47575ccc8b77d0f14dffa99f4246fc540ede1d71", "filename": "gcc/config/dfp-bit.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Fconfig%2Fdfp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Fconfig%2Fdfp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.c?ref=70b81845bf34a1bea7f82e9245fa7482edeb34b6", "patch": "@@ -146,6 +146,8 @@ dfp_compare_op (dfp_binary_func op, DFP_C_TYPE arg_a, DFP_C_TYPE arg_b)\n     result = -1;\n   else if (decNumberIsZero (&res))\n     result = 0;\n+  else if (decNumberIsNaN (&res))\n+    result = -2;\n   else\n     result = 1;\n \n@@ -302,7 +304,9 @@ DFP_NE (DFP_C_TYPE arg_a, DFP_C_TYPE arg_b)\n {\n   int stat;\n   stat = dfp_compare_op (decNumberCompare, arg_a, arg_b);\n-  /* For NE return nonzero for true, zero for false.  */\n+  /* For NE return zero for true, nonzero for false.  */\n+  if (__builtin_expect (stat == -2, 0))  /* An operand is NaN.  */\n+    return 1;\n   return stat != 0;\n }\n #endif /* L_ne */\n@@ -336,6 +340,8 @@ DFP_LE (DFP_C_TYPE arg_a, DFP_C_TYPE arg_b)\n   int stat;\n   stat = dfp_compare_op (decNumberCompare, arg_a, arg_b);\n   /* For LE return 0 (<= 0) for true, 1 for false.  */\n+  if (__builtin_expect (stat == -2, 0))  /* An operand is NaN.  */\n+    return 1;\n   return stat == 1;\n }\n #endif /* L_le */\n@@ -347,6 +353,8 @@ DFP_GE (DFP_C_TYPE arg_a, DFP_C_TYPE arg_b)\n   int stat;\n   stat = dfp_compare_op (decNumberCompare, arg_a, arg_b);\n   /* For GE return 1 (>=0) for true, -1 for false.  */\n+  if (__builtin_expect (stat == -2, 0))  /* An operand is NaN.  */\n+    return -1;\n   return (stat != -1) ? 1 : -1;\n }\n #endif /* L_ge */"}, {"sha": "b098046ddbcef9f6ac8455aacb10e793767b216e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70b81845bf34a1bea7f82e9245fa7482edeb34b6", "patch": "@@ -1,3 +1,10 @@\n+2007-01-16  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.dg/dfp/compare-special.h: New file.\n+\t* gcc.dg/dfp/compare-special-32.c: New test.\n+\t* gcc.dg/dfp/compare-special-64.c: New test.\n+\t* gcc.dg/dfp/compare-special-128.c: New test.\n+\n 2007-01-16  Roger Sayle  <roger@eyesopen.com>\n \t    Paul Thomas  <pault@gcc.gnu.org>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>"}, {"sha": "cef4670b766464e22c01d48e3940e9c1042bb522", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special-d128.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d128.c?ref=70b81845bf34a1bea7f82e9245fa7482edeb34b6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.8 Relational operators.\n+   C99 6.5.9 Equality operators.\n+   Compare decimal float special values at runtime.  */\n+\n+#define WIDTH 128\n+#include \"compare-special.h\"\n+\n+int\n+main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "fa91d7edd33f2bcaa63447440e684c5371c63dcb", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special-d32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d32.c?ref=70b81845bf34a1bea7f82e9245fa7482edeb34b6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.8 Relational operators.\n+   C99 6.5.9 Equality operators.\n+   Compare decimal float special values at runtime.  */\n+\n+#define WIDTH 32\n+#include \"compare-special.h\"\n+\n+int\n+main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "2238e0190e3b5f34dfc5f6f3599c97bf564e09ab", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special-d64.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d64.c?ref=70b81845bf34a1bea7f82e9245fa7482edeb34b6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.8 Relational operators.\n+   C99 6.5.9 Equality operators.\n+   Compare decimal float special values at runtime.  */\n+\n+#define WIDTH 64\n+#include \"compare-special.h\"\n+\n+int\n+main ()\n+{\n+  test_compares ();\n+  return 0;\n+}"}, {"sha": "1bd77e521563127ad34fa2dc238d969539650e1f", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special.h", "status": "added", "additions": 287, "deletions": 0, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b81845bf34a1bea7f82e9245fa7482edeb34b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h?ref=70b81845bf34a1bea7f82e9245fa7482edeb34b6", "patch": "@@ -0,0 +1,287 @@\n+/* Basic test of runtime relational comparisons using NaNs and infinities.  */\n+\n+#include <stdlib.h>\n+\n+static int failcnt;\n+\n+#define PASTE2(A,B) A ## B\n+#define PASTE(A,B) PASTE2(A,B)\n+\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE(OP,KIND) \\\n+  { printf (\"failed at line %d: %s for %s values\\n\", __LINE__, OP, KIND); \\\n+    failcnt++; }\n+#else\n+#define FAILURE(OP,KIND) abort ();\n+#endif\n+\n+#ifndef WIDTH\n+#error define WIDTH as decimal float size in bytes\n+#endif\n+\n+#if WIDTH == 32\n+#define DTYPE _Decimal32\n+#define SUFFIX DF\n+#define SUFFIX2 d32\n+#elif WIDTH == 64\n+#define DTYPE _Decimal64\n+#define SUFFIX DD\n+#define SUFFIX2 d64\n+#elif WIDTH == 128\n+#define DTYPE _Decimal128\n+#define SUFFIX DL\n+#define SUFFIX2 d128\n+#elif WIDTH == 0\n+/* This is for testing the test using a type known to work.  */\n+#define DTYPE double\n+#define SUFFIX\n+#define SUFFIX2\n+#else\n+#error invalid width for decimal float type\n+#endif\n+\n+DTYPE m_two = PASTE(-2.0, SUFFIX);\n+DTYPE m_one = PASTE(-1.0, SUFFIX);\n+DTYPE zero  = PASTE(0.0, SUFFIX);\n+DTYPE one   = PASTE(1.0, SUFFIX);\n+DTYPE two   = PASTE(2.0, SUFFIX);\n+\n+volatile DTYPE x, y, z, nan, inf, m_inf;\n+\n+void\n+test_compares (void)\n+{\n+  nan = PASTE(__builtin_nan, SUFFIX2) (\"\");\n+  inf = PASTE(__builtin_inf, SUFFIX2) ();\n+  m_inf = - PASTE(__builtin_inf, SUFFIX2) ();\n+\n+  x = PASTE(__builtin_nan, SUFFIX2) (\"\");\n+  y = PASTE(__builtin_inf, SUFFIX2) ();\n+  z = - PASTE(__builtin_inf, SUFFIX2) ();\n+\n+  /* Less than or equal to with NaN.  */\n+\n+  if (x <= two)   FAILURE (\"<=\", \"NaN\")\n+  if (x <= zero)  FAILURE (\"<=\", \"NaN\")\n+  if (x <= m_one) FAILURE (\"<=\", \"NaN\")\n+  if (x <= nan)   FAILURE (\"<=\", \"NaN\")\n+  if (x <= inf)   FAILURE (\"<=\", \"NaN\")\n+  if (x <= m_inf) FAILURE (\"<=\", \"NaN\")\n+\n+  if (two <= x)   FAILURE (\"<=\", \"NaN\")\n+  if (zero <= x)  FAILURE (\"<=\", \"NaN\")\n+  if (m_one <= x) FAILURE (\"<=\", \"NaN\")\n+  if (nan <= x)   FAILURE (\"<=\", \"NaN\")\n+  if (inf <= x)   FAILURE (\"<=\", \"NaN\")\n+  if (m_inf <= x) FAILURE (\"<=\", \"NaN\")\n+\n+  /* Less than or equal to with infinities, no NaNs.  */\n+\n+  if (y <= two)      FAILURE (\"<=\", \"inf\")\n+  if (y <= zero)     FAILURE (\"<=\", \"inf\")\n+  if (y <= m_one)    FAILURE (\"<=\", \"inf\")\n+  if (!(two <= y))   FAILURE (\"<=\", \"inf\")\n+  if (!(zero <= y))  FAILURE (\"<=\", \"inf\")\n+  if (!(m_one <= y)) FAILURE (\"<=\", \"inf\")\n+\n+  if (!(z <= two))   FAILURE (\"<=\", \"-inf\")\n+  if (!(z <= zero))  FAILURE (\"<=\", \"-inf\")\n+  if (!(z <= m_one)) FAILURE (\"<=\", \"-inf\")\n+  if (two <= z)      FAILURE (\"<=\", \"-inf\")\n+  if (zero <= z)     FAILURE (\"<=\", \"-inf\")\n+  if (m_one <= z)    FAILURE (\"<=\", \"-inf\")\n+\n+  if (!(y <= inf))   FAILURE (\"<=\", \"inf\")\n+  if (y <= m_inf)    FAILURE (\"<=\", \"inf\")\n+  if (!(z <= inf))   FAILURE (\"<=\", \"inf\")\n+  if (!(z <= m_inf)) FAILURE (\"<=\", \"inf\")\n+\n+  /* Less than with NaN.  */\n+\n+  if (x < two)       FAILURE (\"<\", \"NaN\")\n+  if (x < zero)      FAILURE (\"<\", \"NaN\")\n+  if (x < m_one)     FAILURE (\"<\", \"NaN\")\n+  if (x < nan)       FAILURE (\"<\", \"NaN\")\n+  if (x < inf)       FAILURE (\"<\", \"NaN\")\n+  if (x < m_inf)     FAILURE (\"<\", \"NaN\")\n+\n+  if (two < x)       FAILURE (\"<\", \"NaN\")\n+  if (zero < x)      FAILURE (\"<\", \"NaN\")\n+  if (m_one < x)     FAILURE (\"<\", \"NaN\")\n+  if (nan < x)       FAILURE (\"<\", \"NaN\")\n+  if (inf < x)       FAILURE (\"<\", \"NaN\")\n+  if (m_inf < x)     FAILURE (\"<\", \"NaN\")\n+\n+  /* Less than with infinities, no NaNs.  */\n+\n+  if (y < two)       FAILURE (\"<\", \"inf\")\n+  if (y < zero)      FAILURE (\"<\", \"inf\")\n+  if (y < m_one)     FAILURE (\"<\", \"inf\")\n+  if (!(two < y))    FAILURE (\"<\", \"inf\")\n+  if (!(zero < y))   FAILURE (\"<\", \"inf\")\n+  if (!(m_one < y))  FAILURE (\"<\", \"inf\")\n+\n+  if (!(z < two))    FAILURE (\"<\", \"-inf\")\n+  if (!(z < zero))   FAILURE (\"<\", \"-inf\")\n+  if (!(z < m_one))  FAILURE (\"<\", \"-inf\")\n+  if (two < z)       FAILURE (\"<\", \"-inf\")\n+  if (zero < z)      FAILURE (\"<\", \"-inf\")\n+  if (m_one < z)     FAILURE (\"<\", \"-inf\")\n+\n+  if (y < inf)       FAILURE (\"<=\", \"inf\")\n+  if (y < m_inf)     FAILURE (\"<=\", \"inf\")\n+  if (!(z < inf))    FAILURE (\"<=\", \"inf\")\n+  if (z < m_inf)     FAILURE (\"<=\", \"inf\")\n+\n+  /* Greater than or equal to with NaN.  */\n+\n+  if (x >= two)      FAILURE (\">=\", \"NaN\")\n+  if (x >= zero)     FAILURE (\">=\", \"NaN\")\n+  if (x >= m_one)    FAILURE (\">=\", \"NaN\")\n+  if (x >= nan)      FAILURE (\">=\", \"NaN\")\n+  if (x >= inf)      FAILURE (\">=\", \"NaN\")\n+  if (x >= m_inf)    FAILURE (\">=\", \"NaN\")\n+\n+  if (two >= x)      FAILURE (\">=\", \"NaN\")\n+  if (zero >= x)     FAILURE (\">=\", \"NaN\")\n+  if (m_one >= x)    FAILURE (\">=\", \"NaN\")\n+  if (nan >= x)      FAILURE (\">=\", \"NaN\")\n+  if (inf >= x)      FAILURE (\">=\", \"NaN\")\n+  if (m_inf >= x)    FAILURE (\">=\", \"NaN\")\n+\n+  /* Greater than or equal to with infinities, no NaNs.  */\n+\n+  if (!(y >= two))   FAILURE (\">=\", \"inf\")\n+  if (!(y >= zero))  FAILURE (\">=\", \"inf\")\n+  if (!(y >= m_one)) FAILURE (\">=\", \"inf\")\n+  if (two >= y)      FAILURE (\">=\", \"inf\")\n+  if (zero >= y)     FAILURE (\">=\", \"inf\")\n+  if (m_one >= y)    FAILURE (\">=\", \"inf\")\n+\n+  if (z >= two)      FAILURE (\">=\", \"-inf\")\n+  if (z >= zero)     FAILURE (\">=\", \"-inf\")\n+  if (z >= m_one)    FAILURE (\">=\", \"-inf\")\n+  if (!(two >= z))   FAILURE (\">=\", \"-inf\")\n+  if (!(zero >= z))  FAILURE (\">=\", \"-inf\")\n+  if (!(m_one >= z)) FAILURE (\">=\", \"-inf\")\n+\n+  if (!(y >= inf))   FAILURE (\"<=\", \"inf\")\n+  if (!(y >= m_inf)) FAILURE (\"<=\", \"inf\")\n+  if (z >= inf)      FAILURE (\"<=\", \"inf\")\n+  if (!(z >= m_inf)) FAILURE (\"<=\", \"inf\")\n+\n+  /* Greater than with NaN.  */\n+\n+  if (x > two)       FAILURE (\">\", \"NaN\")\n+  if (x > zero)      FAILURE (\">\", \"NaN\")\n+  if (x > m_one)     FAILURE (\">\", \"NaN\")\n+  if (x > nan)       FAILURE (\">\", \"NaN\")\n+  if (x > inf)       FAILURE (\">\", \"NaN\")\n+  if (x > m_inf)     FAILURE (\">\", \"NaN\")\n+\n+  if (two > x)       FAILURE (\">\", \"NaN\")\n+  if (zero > x)      FAILURE (\">\", \"NaN\")\n+  if (m_one > x)     FAILURE (\">\", \"NaN\")\n+  if (nan > x)       FAILURE (\">\", \"NaN\")\n+  if (inf > x)       FAILURE (\">\", \"NaN\")\n+  if (m_inf > x)     FAILURE (\">\", \"NaN\")\n+\n+  /* Greater than with infinities, no NaNs.  */\n+\n+  if (!(y > two))    FAILURE (\">\", \"inf\")\n+  if (!(y > zero))   FAILURE (\">\", \"inf\")\n+  if (!(y > m_one))  FAILURE (\">\", \"inf\")\n+  if (two > y)       FAILURE (\">\", \"inf\")\n+  if (zero > y)      FAILURE (\">\", \"inf\")\n+  if (m_one > y)     FAILURE (\">\", \"inf\")\n+\n+  if (z > two)       FAILURE (\">\", \"-inf\")\n+  if (z > zero)      FAILURE (\">\", \"-inf\")\n+  if (z > m_one)     FAILURE (\">\", \"-inf\")\n+  if (!(two > z))    FAILURE (\">\", \"-inf\")\n+  if (!(zero > z))   FAILURE (\">\", \"-inf\")\n+  if (!(m_one > z))  FAILURE (\">\", \"-inf\")\n+\n+  if (y > inf)       FAILURE (\">\", \"inf\")\n+  if (!(y > m_inf))  FAILURE (\">\", \"inf\")\n+  if (z > inf)       FAILURE (\">\", \"inf\")\n+  if (z > m_inf)     FAILURE (\">\", \"inf\")\n+\n+  /* Equal with NaN.  */\n+\n+  if (x == two)      FAILURE (\"==\", \"NaN\")\n+  if (x == zero)     FAILURE (\"==\", \"NaN\")\n+  if (x == m_one)    FAILURE (\"==\", \"NaN\")\n+  if (x == nan)      FAILURE (\"==\", \"NaN\")\n+  if (x == inf)      FAILURE (\"==\", \"NaN\")\n+  if (x == m_inf)    FAILURE (\"==\", \"NaN\")\n+\n+  if (two == x)      FAILURE (\"==\", \"NaN\")\n+  if (zero == x)     FAILURE (\"==\", \"NaN\")\n+  if (m_one == x)    FAILURE (\"==\", \"NaN\")\n+  if (nan == x)      FAILURE (\"==\", \"NaN\")\n+  if (inf == x)      FAILURE (\"==\", \"NaN\")\n+  if (m_inf == x)    FAILURE (\"==\", \"NaN\")\n+\n+  /* Equal with infinities, no NaNs.  */\n+\n+  if (y == two)      FAILURE (\"==\", \"inf\")\n+  if (y == zero)     FAILURE (\"==\", \"inf\")\n+  if (y == m_one)    FAILURE (\"==\", \"inf\")\n+  if (two == y)      FAILURE (\"==\", \"inf\")\n+  if (zero == y)     FAILURE (\"==\", \"inf\")\n+  if (m_one == y)    FAILURE (\"==\", \"inf\")\n+\n+  if (z == two)      FAILURE (\"==\", \"-inf\")\n+  if (z == zero)     FAILURE (\"==\", \"-inf\")\n+  if (z == m_one)    FAILURE (\"==\", \"-inf\")\n+  if (two == z)      FAILURE (\"==\", \"-inf\")\n+  if (zero == z)     FAILURE (\"==\", \"-inf\")\n+  if (m_one == z)    FAILURE (\"==\", \"-inf\")\n+\n+  if (!(y == inf))   FAILURE (\"==\", \"inf\")\n+  if (y == m_inf)    FAILURE (\"==\", \"inf\")\n+  if (z == inf)      FAILURE (\"==\", \"inf\")\n+  if (!(z == m_inf)) FAILURE (\"==\", \"inf\")\n+\n+  /* Not equal with NaN.  */\n+\n+  if (!(x != two))   FAILURE (\"!=\", \"NaN\")\n+  if (!(x != zero))  FAILURE (\"!=\", \"NaN\")\n+  if (!(x != m_one)) FAILURE (\"!=\", \"NaN\")\n+  if (!(x != nan))   FAILURE (\"!=\", \"NaN\")\n+  if (!(x != inf))   FAILURE (\"!=\", \"NaN\")\n+  if (!(x != m_inf)) FAILURE (\"!=\", \"NaN\")\n+\n+  if (!(two != x))   FAILURE (\"!=\", \"NaN\")\n+  if (!(zero != x))  FAILURE (\"!=\", \"NaN\")\n+  if (!(m_one != x)) FAILURE (\"!=\", \"NaN\")\n+  if (!(nan != x))   FAILURE (\"!=\", \"NaN\")\n+  if (!(inf != x))   FAILURE (\"!=\", \"NaN\")\n+  if (!(m_inf != x)) FAILURE (\"!=\", \"NaN\")\n+\n+  /* Not equal with infinities, no NaNs.  */\n+\n+  if (!(y != two))   FAILURE (\"!=\", \"inf\")\n+  if (!(y != zero))  FAILURE (\"!=\", \"inf\")\n+  if (!(y != m_one)) FAILURE (\"!=\", \"inf\")\n+  if (!(two != y))   FAILURE (\"!=\", \"inf\")\n+  if (!(zero != y))  FAILURE (\"!=\", \"inf\")\n+  if (!(m_one != y)) FAILURE (\"!=\", \"inf\")\n+\n+  if (!(z != two))   FAILURE (\"!=\", \"-inf\")\n+  if (!(z != zero))  FAILURE (\"!=\", \"-inf\")\n+  if (!(z != m_one)) FAILURE (\"!=\", \"-inf\")\n+  if (!(two != z))   FAILURE (\"!=\", \"-inf\")\n+  if (!(zero != z))  FAILURE (\"!=\", \"-inf\")\n+  if (!(m_one != z)) FAILURE (\"!=\", \"-inf\")\n+\n+  if (y != inf)      FAILURE (\"!=\", \"inf\")\n+  if (!(y != m_inf)) FAILURE (\"!=\", \"inf\")\n+  if (!(z != inf))   FAILURE (\"!=\", \"inf\")\n+  if (z != m_inf)    FAILURE (\"!=\", \"inf\")\n+\n+  if (failcnt)\n+    abort ();\n+}"}]}