{"sha": "79f565f6bd80427f87c6d605497c5ca5d9bb2123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmNTY1ZjZiZDgwNDI3Zjg3YzZkNjA1NDk3YzVjYTVkOWJiMjEyMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-30T13:33:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-30T13:33:11Z"}, "message": "[multiple changes]\n\nSun May 30 14:29:17 1999  Eric Raskin (ehr@listworks.com)\n        * dgux.h (STARTFILE_SPEC): Fix incorrectly matched curly-braces.\nSun May 30 14:19:13 1999  Jeffrey A Law  (law@cygnus.com)\n        * function.h (cleanup_label, frame_offset): Declare.\n        (tail_recursion_label, tail_recursion_reentry): Likewise.\n        (arg_pointer_save_area, rtl_expr_chain): Likewise.\n        * stmt.c (cleanup_label, frame_offset): Delete extern declarations.\n        (tail_recursion_label, tail_recursion_reentry): Likewise.\n        (arg_pointer_save_area, rtl_expr_chain): Likewise.\n\nFrom-SVN: r27249", "tree": {"sha": "24e646a562d8c65c5fd6a227d3e64fd56b4bcc1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24e646a562d8c65c5fd6a227d3e64fd56b4bcc1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79f565f6bd80427f87c6d605497c5ca5d9bb2123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f565f6bd80427f87c6d605497c5ca5d9bb2123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f565f6bd80427f87c6d605497c5ca5d9bb2123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f565f6bd80427f87c6d605497c5ca5d9bb2123/comments", "author": null, "committer": null, "parents": [{"sha": "95e888e67746fd069db8a85cd8f96aa7d45c8ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e888e67746fd069db8a85cd8f96aa7d45c8ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e888e67746fd069db8a85cd8f96aa7d45c8ec8"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "d6af4427b50130e24834cac1670c831852260505", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f565f6bd80427f87c6d605497c5ca5d9bb2123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f565f6bd80427f87c6d605497c5ca5d9bb2123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79f565f6bd80427f87c6d605497c5ca5d9bb2123", "patch": "@@ -1,3 +1,16 @@\n+Sun May 30 14:29:17 1999  Eric Raskin (ehr@listworks.com)\n+\n+\t* dgux.h (STARTFILE_SPEC): Fix incorrectly matched curly-braces.\n+\n+Sun May 30 14:19:13 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* function.h (cleanup_label, frame_offset): Declare.\n+\t(tail_recursion_label, tail_recursion_reentry): Likewise.\n+\t(arg_pointer_save_area, rtl_expr_chain): Likewise.\n+\t* stmt.c (cleanup_label, frame_offset): Delete extern declarations.\n+\t(tail_recursion_label, tail_recursion_reentry): Likewise.\n+\t(arg_pointer_save_area, rtl_expr_chain): Likewise.\n+\n Sat May 29 19:08:10 1999  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/aout.h (ASM_OUTPUT_ALIGN): Only define if not already "}, {"sha": "ccc8a0a0d81737cd3ea03df98c3edc4d5735ea2c", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f565f6bd80427f87c6d605497c5ca5d9bb2123/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f565f6bd80427f87c6d605497c5ca5d9bb2123/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=79f565f6bd80427f87c6d605497c5ca5d9bb2123", "patch": "@@ -207,8 +207,8 @@ Boston, MA 02111-1307, USA.  */\n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared:%{!symbolic:%{pg:gcrt1.o%s} \t\t\\\n \t\t\t                      %{!pg:%{p:/lib/mcrt1.o%s}\t\\\n-\t\t\t\t\t      %{!p:/lib/crt1.o%s}}} \t\\\n-\t\t\t%{pg:gcrti.o%s}%{!pg:/lib/crti.o%s}} \t\t\\\n+\t\t\t\t\t     %{!p:/lib/crt1.o%s}}}}    \\\n+\t\t       %{pg:gcrti.o%s}%{!pg:/lib/crti.o%s}\t     \\\n \t\t\tcrtbegin.o%s \t\t\t\t\t\\\n \t\t\t%{ansi:/lib/values-Xc.o%s} \t\t\t\\\n \t\t\t%{!ansi:%{traditional:/lib/values-Xt.o%s} \t\\"}, {"sha": "297c4f043c502e8a99e67d48c50d0692abc1c48e", "filename": "gcc/function.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f565f6bd80427f87c6d605497c5ca5d9bb2123/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f565f6bd80427f87c6d605497c5ca5d9bb2123/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=79f565f6bd80427f87c6d605497c5ca5d9bb2123", "patch": "@@ -216,11 +216,40 @@ struct function\n /* The FUNCTION_DECL for an inline function currently being expanded.  */\n extern tree inline_function_decl;\n \n+/* Label that will go on parm cleanup code, if any.\n+   Jumping to this label runs cleanup code for parameters, if\n+   such code must be run.  Following this code is the logical return label.  */\n+\n+extern rtx cleanup_label;\n+\n /* Label that will go on function epilogue.\n    Jumping to this label serves as a \"return\" instruction\n    on machines which require execution of the epilogue on all returns.  */\n+\n extern rtx return_label;\n \n+/* Offset to end of allocated area of stack frame.\n+   If stack grows down, this is the address of the last stack slot allocated.\n+   If stack grows up, this is the address for the next slot.  */\n+extern HOST_WIDE_INT frame_offset;\n+\n+/* Label to jump back to for tail recursion, or 0 if we have\n+   not yet needed one for this function.  */\n+extern rtx tail_recursion_label;\n+\n+/* Place after which to insert the tail_recursion_label if we need one.  */\n+extern rtx tail_recursion_reentry;\n+\n+/* Location at which to save the argument pointer if it will need to be\n+   referenced.  There are two cases where this is done: if nonlocal gotos\n+   exist, or if vars whose is an offset from the argument pointer will be\n+   needed by inner routines.  */\n+\n+extern rtx arg_pointer_save_area;\n+\n+/* Chain of all RTL_EXPRs that have insns in them.  */\n+extern tree rtl_expr_chain;\n+\n /* List (chain of EXPR_LISTs) of all stack slots in this function.\n    Made for the sake of unshare_all_rtl.  */\n extern rtx stack_slot_list;"}, {"sha": "018e1907b7c9b9cc772dee751914cd9d56704a91", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f565f6bd80427f87c6d605497c5ca5d9bb2123/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f565f6bd80427f87c6d605497c5ca5d9bb2123/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=79f565f6bd80427f87c6d605497c5ca5d9bb2123", "patch": "@@ -88,45 +88,6 @@ static rtx last_block_end_note;\n /* Number of binding contours started so far in this function.  */\n \n int block_start_count;\n-\n-/* Nonzero if function being compiled needs to\n-   return the address of where it has put a structure value.  */\n-\n-extern int current_function_returns_pcc_struct;\n-\n-/* Label that will go on parm cleanup code, if any.\n-   Jumping to this label runs cleanup code for parameters, if\n-   such code must be run.  Following this code is the logical return label.  */\n-\n-extern rtx cleanup_label;\n-\n-/* Label that will go on function epilogue.\n-   Jumping to this label serves as a \"return\" instruction\n-   on machines which require execution of the epilogue on all returns.  */\n-\n-extern rtx return_label;\n-\n-/* Offset to end of allocated area of stack frame.\n-   If stack grows down, this is the address of the last stack slot allocated.\n-   If stack grows up, this is the address for the next slot.  */\n-extern int frame_offset;\n-\n-/* Label to jump back to for tail recursion, or 0 if we have\n-   not yet needed one for this function.  */\n-extern rtx tail_recursion_label;\n-\n-/* Place after which to insert the tail_recursion_label if we need one.  */\n-extern rtx tail_recursion_reentry;\n-\n-/* Location at which to save the argument pointer if it will need to be\n-   referenced.  There are two cases where this is done: if nonlocal gotos\n-   exist, or if vars whose is an offset from the argument pointer will be\n-   needed by inner routines.  */\n-\n-extern rtx arg_pointer_save_area;\n-\n-/* Chain of all RTL_EXPRs that have insns in them.  */\n-extern tree rtl_expr_chain;\n \f\n /* Functions and data structures for expanding case statements.  */\n "}]}