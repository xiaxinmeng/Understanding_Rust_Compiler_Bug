{"sha": "744c3195ef778200a0acfc4779e3f2d48237bbf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0YzMxOTVlZjc3ODIwMGEwYWNmYzQ3NzllM2YyZDQ4MjM3YmJmMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-11-29T18:11:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-29T18:11:17Z"}, "message": "compiler, runtime: Track fields with tag go:\"track\".\n\n\t* go-gcc.cc: Include \"output.h\".\n\t(global_variable): Add is_unique_section parameter.\n\t(global_variable_set_init): Adjust unique section if necessary.\n\t* Make-lang.in (go/go-gcc.o): Add dependency on output.h.\n\nFrom-SVN: r193945", "tree": {"sha": "d146677ebcdb05c9d7a8c8b84cab5fb7fa9a0f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d146677ebcdb05c9d7a8c8b84cab5fb7fa9a0f99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/744c3195ef778200a0acfc4779e3f2d48237bbf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744c3195ef778200a0acfc4779e3f2d48237bbf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744c3195ef778200a0acfc4779e3f2d48237bbf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744c3195ef778200a0acfc4779e3f2d48237bbf1/comments", "author": null, "committer": null, "parents": [{"sha": "53750ab003876bae145f36431392e2531e70e7cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53750ab003876bae145f36431392e2531e70e7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53750ab003876bae145f36431392e2531e70e7cc"}], "stats": {"total": 290, "additions": 282, "deletions": 8}, "files": [{"sha": "1797763be96f70953fde3c5a0d86660834f3878b", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -1,3 +1,10 @@\n+2012-11-29  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc: Include \"output.h\".\n+\t(global_variable): Add is_unique_section parameter.\n+\t(global_variable_set_init): Adjust unique section if necessary.\n+\t* Make-lang.in (go/go-gcc.o): Add dependency on output.h.\n+\n 2012-11-17  Diego Novillo  <dnovillo@google.com>\n \n \tAdjust for new vec API (http://gcc.gnu.org/wiki/cxx-conversion/cxx-vec)"}, {"sha": "473a5810d36c0a753e8f7f7172ad5b91f617a60b", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -1,6 +1,6 @@\n # Make-lang.in -- Top level -*- makefile -*- fragment for gcc Go frontend.\n \n-# Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+# Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n \n # This file is part of GCC.\n \n@@ -254,7 +254,7 @@ go/go-lang.o: go/go-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n GOINCLUDES = -I $(srcdir)/go -I $(srcdir)/go/gofrontend\n \n go/go-gcc.o: go/go-gcc.cc $(GO_SYSTEM_H) $(TREE_H) tree-iterator.h \\\n-\t\t$(GIMPLE_H) toplev.h $(GO_C_H) $(GO_GOGO_H) \\\n+\t\t$(GIMPLE_H) toplev.h output.h $(GO_C_H) $(GO_GOGO_H) \\\n \t\tgo/gofrontend/backend.h\n \t$(CXX) -c $(GOINCLUDES) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $< $(OUTPUT_OPTION)\n "}, {"sha": "f8bbaf4bc2ab4ce80b67da7f20d40ca4145c4a41", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -28,6 +28,7 @@\n #include \"tree-iterator.h\"\n #include \"gimple.h\"\n #include \"toplev.h\"\n+#include \"output.h\"\n \n #include \"go-c.h\"\n \n@@ -267,6 +268,7 @@ class Gcc_backend : public Backend\n \t\t  Btype* btype,\n \t\t  bool is_external,\n \t\t  bool is_hidden,\n+\t\t  bool in_unique_section,\n \t\t  Location location);\n \n   void\n@@ -1277,6 +1279,7 @@ Gcc_backend::global_variable(const std::string& package_name,\n \t\t\t     Btype* btype,\n \t\t\t     bool is_external,\n \t\t\t     bool is_hidden,\n+\t\t\t     bool in_unique_section,\n \t\t\t     Location location)\n {\n   tree type_tree = btype->get_tree();\n@@ -1308,6 +1311,9 @@ Gcc_backend::global_variable(const std::string& package_name,\n     }\n   TREE_USED(decl) = 1;\n \n+  if (in_unique_section)\n+    resolve_unique_section (decl, 0, 1);\n+\n   go_preserve_from_gc(decl);\n \n   return new Bvariable(decl);\n@@ -1326,6 +1332,16 @@ Gcc_backend::global_variable_set_init(Bvariable* var, Bexpression* expr)\n   if (var_decl == error_mark_node)\n     return;\n   DECL_INITIAL(var_decl) = expr_tree;\n+\n+  // If this variable goes in a unique section, it may need to go into\n+  // a different one now that DECL_INITIAL is set.\n+  if (DECL_HAS_IMPLICIT_SECTION_NAME_P (var_decl))\n+    {\n+      DECL_SECTION_NAME (var_decl) = NULL_TREE;\n+      resolve_unique_section (var_decl,\n+\t\t\t      compute_reloc_for_constant (expr_tree),\n+\t\t\t      1);\n+    }\n }\n \n // Make a local variable."}, {"sha": "fe6db743cf06897d6deef93dc865f931d1050687", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -326,15 +326,19 @@ class Backend\n   // option.  NAME is the name of the variable.  BTYPE is the type of\n   // the variable.  IS_EXTERNAL is true if the variable is defined in\n   // some other package.  IS_HIDDEN is true if the variable is not\n-  // exported (name begins with a lower case letter).  LOCATION is\n-  // where the variable was defined.\n+  // exported (name begins with a lower case letter).\n+  // IN_UNIQUE_SECTION is true if the variable should be put into a\n+  // unique section if possible; this is intended to permit the linker\n+  // to garbage collect the variable if it is not referenced.\n+  // LOCATION is where the variable was defined.\n   virtual Bvariable*\n   global_variable(const std::string& package_name,\n \t\t  const std::string& pkgpath,\n \t\t  const std::string& name,\n \t\t  Btype* btype,\n \t\t  bool is_external,\n \t\t  bool is_hidden,\n+\t\t  bool in_unique_section,\n \t\t  Location location) = 0;\n \n   // A global variable will 1) be initialized to zero, or 2) be"}, {"sha": "911ce5a7defe8d2f0cd78faa23f48aba76312043", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -10580,6 +10580,102 @@ Expression::make_map_index(Expression* map, Expression* index,\n \n // Class Field_reference_expression.\n \n+// Lower a field reference expression.  There is nothing to lower, but\n+// this is where we generate the tracking information for fields with\n+// the magic go:\"track\" tag.\n+\n+Expression*\n+Field_reference_expression::do_lower(Gogo* gogo, Named_object* function,\n+\t\t\t\t     Statement_inserter* inserter, int)\n+{\n+  Struct_type* struct_type = this->expr_->type()->struct_type();\n+  if (struct_type == NULL)\n+    {\n+      // Error will be reported elsewhere.\n+      return this;\n+    }\n+  const Struct_field* field = struct_type->field(this->field_index_);\n+  if (field == NULL)\n+    return this;\n+  if (!field->has_tag())\n+    return this;\n+  if (field->tag().find(\"go:\\\"track\\\"\") == std::string::npos)\n+    return this;\n+\n+  // We have found a reference to a tracked field.  Build a call to\n+  // the runtime function __go_fieldtrack with a string that describes\n+  // the field.  FIXME: We should only call this once per referenced\n+  // field per function, not once for each reference to the field.\n+\n+  if (this->called_fieldtrack_)\n+    return this;\n+  this->called_fieldtrack_ = true;\n+\n+  Location loc = this->location();\n+\n+  std::string s = \"fieldtrack \\\"\";\n+  Named_type* nt = this->expr_->type()->named_type();\n+  if (nt == NULL || nt->named_object()->package() == NULL)\n+    s.append(gogo->pkgpath());\n+  else\n+    s.append(nt->named_object()->package()->pkgpath());\n+  s.push_back('.');\n+  if (nt != NULL)\n+    s.append(nt->name());\n+  s.push_back('.');\n+  s.append(field->field_name());\n+  s.push_back('\"');\n+\n+  // We can't use a string here, because internally a string holds a\n+  // pointer to the actual bytes; when the linker garbage collects the\n+  // string, it won't garbage collect the bytes.  So we use a\n+  // [...]byte.\n+\n+  mpz_t val;\n+  mpz_init_set_ui(val, s.length());\n+  Expression* length_expr = Expression::make_integer(&val, NULL, loc);\n+  mpz_clear(val);\n+\n+  Type* byte_type = gogo->lookup_global(\"byte\")->type_value();\n+  Type* array_type = Type::make_array_type(byte_type, length_expr);\n+\n+  Expression_list* bytes = new Expression_list();\n+  for (std::string::const_iterator p = s.begin(); p != s.end(); p++)\n+    {\n+      mpz_init_set_ui(val, *p);\n+      Expression* byte = Expression::make_integer(&val, NULL, loc);\n+      mpz_clear(val);\n+      bytes->push_back(byte);\n+    }\n+\n+  Expression* e = Expression::make_composite_literal(array_type, 0, false,\n+\t\t\t\t\t\t     bytes, loc);\n+\n+  Variable* var = new Variable(array_type, e, true, false, false, loc);\n+\n+  static int count;\n+  char buf[50];\n+  snprintf(buf, sizeof buf, \"fieldtrack.%d\", count);\n+  ++count;\n+\n+  Named_object* no = gogo->add_variable(buf, var);\n+  e = Expression::make_var_reference(no, loc);\n+  e = Expression::make_unary(OPERATOR_AND, e, loc);\n+\n+  Expression* call = Runtime::make_call(Runtime::FIELDTRACK, loc, 1, e);\n+  inserter->insert(Statement::make_statement(call, false));\n+\n+  // Put this function, and the global variable we just created, into\n+  // unique sections.  This will permit the linker to garbage collect\n+  // them if they are not referenced.  The effect is that the only\n+  // strings, indicating field references, that will wind up in the\n+  // executable will be those for functions that are actually needed.\n+  function->func_value()->set_in_unique_section();\n+  var->set_in_unique_section();\n+\n+  return this;\n+}\n+\n // Return the type of a field reference.\n \n Type*"}, {"sha": "7bc42424bc1b601174f03503a7797be428111822", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -1842,7 +1842,7 @@ class Field_reference_expression : public Expression\n   Field_reference_expression(Expression* expr, unsigned int field_index,\n \t\t\t     Location location)\n     : Expression(EXPRESSION_FIELD_REFERENCE, location),\n-      expr_(expr), field_index_(field_index)\n+      expr_(expr), field_index_(field_index), called_fieldtrack_(false)\n   { }\n \n   // Return the struct expression.\n@@ -1868,6 +1868,9 @@ class Field_reference_expression : public Expression\n   do_traverse(Traverse* traverse)\n   { return Expression::traverse(&this->expr_, traverse); }\n \n+  Expression*\n+  do_lower(Gogo*, Named_object*, Statement_inserter*, int);\n+\n   Type*\n   do_type();\n \n@@ -1906,6 +1909,8 @@ class Field_reference_expression : public Expression\n   Expression* expr_;\n   // The zero-based index of the field we are retrieving.\n   unsigned int field_index_;\n+  // Whether we have already emitted a fieldtrack call.\n+  bool called_fieldtrack_;\n };\n \n // A reference to a field of an interface."}, {"sha": "7159dfb6244ede5f7e2a38f615788e286cf3d156", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -1316,6 +1316,9 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no, tree id)\n \t      DECL_ATTRIBUTES(decl) = tree_cons(attr, NULL_TREE, NULL_TREE);\n \t    }\n \n+\t  if (this->in_unique_section_)\n+\t    resolve_unique_section (decl, 0, 1);\n+\n \t  go_preserve_from_gc(decl);\n \n \t  if (this->closure_var_ != NULL)"}, {"sha": "0f63afb53cbf6281557e430f3179bd7a1d6d35ae", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -3075,7 +3075,8 @@ Function::Function(Function_type* type, Function* enclosing, Block* block,\n     closure_var_(NULL), block_(block), location_(location), labels_(),\n     local_type_count_(0), fndecl_(NULL), defer_stack_(NULL),\n     results_are_named_(false), nointerface_(false), calls_recover_(false),\n-    is_recover_thunk_(false), has_recover_thunk_(false)\n+    is_recover_thunk_(false), has_recover_thunk_(false),\n+    in_unique_section_(false)\n {\n }\n \n@@ -3896,7 +3897,7 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n     seen_(false), init_is_lowered_(false), type_from_init_tuple_(false),\n     type_from_range_index_(false), type_from_range_value_(false),\n     type_from_chan_element_(false), is_type_switch_var_(false),\n-    determined_type_(false)\n+    determined_type_(false), in_unique_section_(false)\n {\n   go_assert(type != NULL || init != NULL);\n   go_assert(!is_parameter || init == NULL);\n@@ -4315,6 +4316,7 @@ Variable::get_backend_variable(Gogo* gogo, Named_object* function,\n \t\t\t\t\t    btype,\n \t\t\t\t\t    package != NULL,\n \t\t\t\t\t    Gogo::is_hidden_name(name),\n+\t\t\t\t\t    this->in_unique_section_,\n \t\t\t\t\t    this->location_);\n \t  else if (function == NULL)\n \t    {"}, {"sha": "4fbd6374331aea95085924eb89a4104e8935bd24", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -1032,6 +1032,11 @@ class Function\n   set_has_recover_thunk()\n   { this->has_recover_thunk_ = true; }\n \n+  // Mark the function as going into a unique section.\n+  void\n+  set_in_unique_section()\n+  { this->in_unique_section_ = true; }\n+\n   // Swap with another function.  Used only for the thunk which calls\n   // recover.\n   void\n@@ -1139,6 +1144,9 @@ class Function\n   bool is_recover_thunk_;\n   // True if this function already has a recover thunk.\n   bool has_recover_thunk_;\n+  // True if this function should be put in a unique section.  This is\n+  // turned on for field tracking.\n+  bool in_unique_section_ : 1;\n };\n \n // A snapshot of the current binding state.\n@@ -1414,6 +1422,14 @@ class Variable\n   set_is_type_switch_var()\n   { this->is_type_switch_var_ = true; }\n \n+  // Mark the variable as going into a unique section.\n+  void\n+  set_in_unique_section()\n+  {\n+    go_assert(this->is_global_);\n+    this->in_unique_section_ = true;\n+  }\n+\n   // Traverse the initializer expression.\n   int\n   traverse_expression(Traverse*, unsigned int traverse_mask);\n@@ -1504,6 +1520,9 @@ class Variable\n   bool is_type_switch_var_ : 1;\n   // True if we have determined types.\n   bool determined_type_ : 1;\n+  // True if this variable should be put in a unique section.  This is\n+  // used for field tracking.\n+  bool in_unique_section_ : 1;\n };\n \n // A variable which is really the name for a function return value, or"}, {"sha": "0d9ff0380ac3940f56c9137046d727eed4360889", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -354,6 +354,10 @@ DEF_GO_RUNTIME(PRINT_SPACE, \"__go_print_space\", P0(), R0())\n DEF_GO_RUNTIME(PRINT_NL, \"__go_print_nl\", P0(), R0())\n \n \n+// Used for field tracking for data analysis.\n+DEF_GO_RUNTIME(FIELDTRACK, \"__go_fieldtrack\", P1(POINTER), R0())\n+\n+\n // Remove helper macros.\n #undef ABFT6\n #undef ABFT2"}, {"sha": "50a21b8cd1bc2c6aac5d52407776b144955b29de", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -450,6 +450,7 @@ runtime_files = \\\n \truntime/go-deferred-recover.c \\\n \truntime/go-eface-compare.c \\\n \truntime/go-eface-val-compare.c \\\n+\truntime/go-fieldtrack.c \\\n \truntime/go-getgoroot.c \\\n \truntime/go-int-array-to-string.c \\\n \truntime/go-int-to-string.c \\"}, {"sha": "38b8ddfcc4da13b08b1a65a765d6789fc375a0df", "filename": "libgo/Makefile.in", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -196,7 +196,7 @@ am__objects_5 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-check-interface.lo go-construct-map.lo \\\n \tgo-convert-interface.lo go-copy.lo go-defer.lo \\\n \tgo-deferred-recover.lo go-eface-compare.lo \\\n-\tgo-eface-val-compare.lo go-getgoroot.lo \\\n+\tgo-eface-val-compare.lo go-fieldtrack.lo go-getgoroot.lo \\\n \tgo-int-array-to-string.lo go-int-to-string.lo \\\n \tgo-interface-compare.lo go-interface-eface-compare.lo \\\n \tgo-interface-val-compare.lo go-make-slice.lo go-map-delete.lo \\\n@@ -781,6 +781,7 @@ runtime_files = \\\n \truntime/go-deferred-recover.c \\\n \truntime/go-eface-compare.c \\\n \truntime/go-eface-val-compare.c \\\n+\truntime/go-fieldtrack.c \\\n \truntime/go-getgoroot.c \\\n \truntime/go-int-array-to-string.c \\\n \truntime/go-int-to-string.c \\\n@@ -2421,6 +2422,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-deferred-recover.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-eface-compare.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-eface-val-compare.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-fieldtrack.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-getgoroot.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-int-array-to-string.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-int-to-string.Plo@am__quote@\n@@ -2657,6 +2659,13 @@ go-eface-val-compare.lo: runtime/go-eface-val-compare.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-eface-val-compare.lo `test -f 'runtime/go-eface-val-compare.c' || echo '$(srcdir)/'`runtime/go-eface-val-compare.c\n \n+go-fieldtrack.lo: runtime/go-fieldtrack.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-fieldtrack.lo -MD -MP -MF $(DEPDIR)/go-fieldtrack.Tpo -c -o go-fieldtrack.lo `test -f 'runtime/go-fieldtrack.c' || echo '$(srcdir)/'`runtime/go-fieldtrack.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-fieldtrack.Tpo $(DEPDIR)/go-fieldtrack.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-fieldtrack.c' object='go-fieldtrack.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-fieldtrack.lo `test -f 'runtime/go-fieldtrack.c' || echo '$(srcdir)/'`runtime/go-fieldtrack.c\n+\n go-getgoroot.lo: runtime/go-getgoroot.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-getgoroot.lo -MD -MP -MF $(DEPDIR)/go-getgoroot.Tpo -c -o go-getgoroot.lo `test -f 'runtime/go-getgoroot.c' || echo '$(srcdir)/'`runtime/go-getgoroot.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-getgoroot.Tpo $(DEPDIR)/go-getgoroot.Plo"}, {"sha": "9da71a7857c952fb1888fc5b7dc4d1c192b09ede", "filename": "libgo/go/runtime/debug.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/libgo%2Fgo%2Fruntime%2Fdebug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/libgo%2Fgo%2Fruntime%2Fdebug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fdebug.go?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -168,3 +168,10 @@ func BlockProfile(p []BlockProfileRecord) (n int, ok bool)\n // If all is true, Stack formats stack traces of all other goroutines\n // into buf after the trace for the current goroutine.\n func Stack(buf []byte, all bool) int\n+\n+// Get field tracking information.  Only fields with a tag go:\"track\"\n+// are tracked.  This function will add every such field that is\n+// referenced to the map.  The keys in the map will be\n+// PkgPath.Name.FieldName.  The value will be true for each field\n+// added.\n+func Fieldtrack(map[string]bool)"}, {"sha": "62b36dc7bc00c5c7d753d365b108b8920a32f293", "filename": "libgo/runtime/go-fieldtrack.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/744c3195ef778200a0acfc4779e3f2d48237bbf1/libgo%2Fruntime%2Fgo-fieldtrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/744c3195ef778200a0acfc4779e3f2d48237bbf1/libgo%2Fruntime%2Fgo-fieldtrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-fieldtrack.c?ref=744c3195ef778200a0acfc4779e3f2d48237bbf1", "patch": "@@ -0,0 +1,101 @@\n+/* go-fieldtrack.c -- structure field data analysis.\n+\n+   Copyright 2012 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+#include \"runtime.h\"\n+#include \"go-type.h\"\n+#include \"map.h\"\n+\n+/* The compiler will track fields that have the tag go:\"track\".  Any\n+   function that refers to such a field will call this function with a\n+   string\n+       fieldtrack \"package.type.field\"\n+\n+   This function does not actually do anything.  Instead, we gather\n+   the field tracking information by looking for strings of that form\n+   in the read-only data section.  This is, of course, a horrible\n+   hack, but it's good enough for now.  We can improve it, e.g., by a\n+   linker plugin, if this turns out to be useful.  */\n+\n+void\n+__go_fieldtrack (byte *p __attribute__ ((unused)))\n+{\n+}\n+\n+/* A runtime function to add all the tracked fields to a\n+   map[string]bool.  */\n+\n+extern const char _etext[] __attribute__ ((weak));\n+extern const char __etext[] __attribute__ ((weak));\n+extern const char __data_start[] __attribute__ ((weak));\n+extern const char _edata[] __attribute__ ((weak));\n+extern const char __edata[] __attribute__ ((weak));\n+extern const char __bss_start[] __attribute__ ((weak));\n+\n+void runtime_Fieldtrack (struct __go_map *) __asm__ (\"runtime.Fieldtrack\");\n+\n+void\n+runtime_Fieldtrack (struct __go_map *m)\n+{\n+  const char *p;\n+  const char *pend;\n+  const char *prefix;\n+  size_t prefix_len;\n+\n+  p = __data_start;\n+  if (p == NULL)\n+    p = __etext;\n+  if (p == NULL)\n+    p = _etext;\n+  if (p == NULL)\n+    return;\n+\n+  pend = __edata;\n+  if (pend == NULL)\n+    pend = _edata;\n+  if (pend == NULL)\n+    pend = __bss_start;\n+  if (pend == NULL)\n+    return;\n+\n+  prefix = \"fieldtrack \";\n+  prefix_len = __builtin_strlen (prefix);\n+\n+  while (p < pend)\n+    {\n+      const char *q1;\n+      const char *q2;\n+\n+      q1 = __builtin_memchr (p + prefix_len, '\"', pend - (p + prefix_len));\n+      if (q1 == NULL)\n+\tbreak;\n+\n+      if (__builtin_memcmp (q1 - prefix_len, prefix, prefix_len) != 0)\n+\t{\n+\t  p = q1 + 1;\n+\t  continue;\n+\t}\n+\n+      q1++;\n+      q2 = __builtin_memchr (q1, '\"', pend - q1);\n+      if (q2 == NULL)\n+\tbreak;\n+\n+      if (__builtin_memchr (q1, '\\0', q2 - q1) == NULL)\n+\t{\n+\t  String s;\n+\t  void *v;\n+\t  _Bool *pb;\n+\n+\t  s.str = (const byte *) q1;\n+\t  s.len = q2 - q1;\n+\t  v = __go_map_index (m, &s, 1);\n+\t  pb = (_Bool *) v;\n+\t  *pb = 1;\n+\t}\n+\n+      p = q2;\n+    }\n+}"}]}