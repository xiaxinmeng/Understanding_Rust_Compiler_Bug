{"sha": "d46f7484c3735ba98adf1024ea2b96a1c3d40554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ2Zjc0ODRjMzczNWJhOThhZGYxMDI0ZWEyYjk2YTFjM2Q0MDU1NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-06-02T15:37:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-06-02T15:37:34Z"}, "message": "alpha.md (divsi3, [...]): Enable, and work around an OSF/1 library bug wrt sign-extension of inputs.\n\n        * alpha.md (divsi3, udivsi3, modsi3, umodsi3): Enable, and work\n        around an OSF/1 library bug wrt sign-extension of inputs.\n\nFrom-SVN: r20183", "tree": {"sha": "9e0705aec7eac610ba0753b7adca237d6c04b5a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e0705aec7eac610ba0753b7adca237d6c04b5a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d46f7484c3735ba98adf1024ea2b96a1c3d40554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46f7484c3735ba98adf1024ea2b96a1c3d40554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46f7484c3735ba98adf1024ea2b96a1c3d40554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46f7484c3735ba98adf1024ea2b96a1c3d40554/comments", "author": null, "committer": null, "parents": [{"sha": "e3c81d201de04079e47ace2115cbf1664b4f8819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c81d201de04079e47ace2115cbf1664b4f8819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c81d201de04079e47ace2115cbf1664b4f8819"}], "stats": {"total": 138, "additions": 74, "deletions": 64}, "files": [{"sha": "2766e29d7d683704994a9a2cdda3455ad4a2e3be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d46f7484c3735ba98adf1024ea2b96a1c3d40554/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d46f7484c3735ba98adf1024ea2b96a1c3d40554/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d46f7484c3735ba98adf1024ea2b96a1c3d40554", "patch": "@@ -1,3 +1,8 @@\n+Tue Jun  2 14:02:38 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (divsi3, udivsi3, modsi3, umodsi3): Enable, and work\n+\taround an OSF/1 library bug wrt sign-extension of inputs.\n+\n Tue Jun  2 13:02:44 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* vax/netbsd.h (DWARF2_UNWIND_INFO): Must be undef, not defined 0."}, {"sha": "57e2c445050b19132ee8b6020e5fc2fe270d87f2", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 69, "deletions": 64, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d46f7484c3735ba98adf1024ea2b96a1c3d40554/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d46f7484c3735ba98adf1024ea2b96a1c3d40554/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=d46f7484c3735ba98adf1024ea2b96a1c3d40554", "patch": "@@ -804,61 +804,66 @@\n ;; The divide and remainder operations always take their inputs from\n ;; r24 and r25, put their output in r27, and clobber r23 and r28.\n \n-;; ??? comment out the divsi routines since the library functions\n-;; don't seem to do the right thing with the high 32-bits of a\n-;; register nonzero.\n-\n-;(define_expand \"divsi3\"\n-;  [(set (reg:SI 24) (match_operand:SI 1 \"input_operand\" \"\"))\n-;   (set (reg:SI 25) (match_operand:SI 2 \"input_operand\" \"\"))\n-;   (parallel [(set (reg:SI 27)\n-;\t\t   (div:SI (reg:SI 24)\n-;\t\t\t   (reg:SI 25)))\n-;\t      (clobber (reg:DI 23))\n-;\t      (clobber (reg:DI 28))])\n-;   (set (match_operand:SI 0 \"general_operand\" \"\")\n-;\t(reg:SI 27))]\n-;  \"!TARGET_OPEN_VMS\"\n-;  \"\")\n-\n-;(define_expand \"udivsi3\"\n-;  [(set (reg:SI 24) (match_operand:SI 1 \"input_operand\" \"\"))\n-;   (set (reg:SI 25) (match_operand:SI 2 \"input_operand\" \"\"))\n-;   (parallel [(set (reg:SI 27)\n-;\t\t   (udiv:SI (reg:SI 24)\n-;\t\t\t    (reg:SI 25)))\n-;\t      (clobber (reg:DI 23))\n-;\t      (clobber (reg:DI 28))])\n-;   (set (match_operand:SI 0 \"general_operand\" \"\")\n-;\t(reg:SI 27))]\n-;  \"!TARGET_OPEN_VMS\"\n-;  \"\")\n-\n-;(define_expand \"modsi3\"\n-;  [(set (reg:SI 24) (match_operand:SI 1 \"input_operand\" \"\"))\n-;   (set (reg:SI 25) (match_operand:SI 2 \"input_operand\" \"\"))\n-;   (parallel [(set (reg:SI 27)\n-;\t\t   (mod:SI (reg:SI 24)\n-;\t\t\t   (reg:SI 25)))\n-;\t      (clobber (reg:DI 23))\n-;\t      (clobber (reg:DI 28))])\n-;   (set (match_operand:SI 0 \"general_operand\" \"\")\n-;\t(reg:SI 27))]\n-;  \"!TARGET_OPEN_VMS\"\n-;  \"\")\n-\n-;(define_expand \"umodsi3\"\n-;  [(set (reg:SI 24) (match_operand:SI 1 \"input_operand\" \"\"))\n-;   (set (reg:SI 25) (match_operand:SI 2 \"input_operand\" \"\"))\n-;   (parallel [(set (reg:SI 27)\n-;\t\t   (umod:SI (reg:SI 24)\n-;\t\t\t    (reg:SI 25)))\n-;\t      (clobber (reg:DI 23))\n-;\t      (clobber (reg:DI 28))])\n-;   (set (match_operand:SI 0 \"general_operand\" \"\")\n-;\t(reg:SI 27))]\n-;  \"!TARGET_OPEN_VMS\"\n-;  \"\")\n+;; ??? Force sign-extension here because some versions of OSF/1 don't\n+;; do the right thing if the inputs are not properly sign-extended.\n+;; But Linux, for instance, does not have this problem.  Is it worth\n+;; the complication here to eliminate the sign extension?\n+\n+(define_expand \"divsi3\"\n+  [(set (reg:DI 24)\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+   (set (reg:DI 25)\n+\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n+   (parallel [(set (reg:DI 27)\n+\t\t   (sign_extend:DI (div:SI (reg:DI 24) (reg:DI 25))))\n+\t      (clobber (reg:DI 23))\n+\t      (clobber (reg:DI 28))])\n+   (set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(subreg:SI (reg:DI 27) 0))]\n+  \"!TARGET_OPEN_VMS\"\n+  \"\")\n+\n+(define_expand \"udivsi3\"\n+  [(set (reg:DI 24)\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+   (set (reg:DI 25)\n+\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n+   (parallel [(set (reg:DI 27)\n+\t\t   (sign_extend:DI (udiv:SI (reg:DI 24) (reg:DI 25))))\n+\t      (clobber (reg:DI 23))\n+\t      (clobber (reg:DI 28))])\n+   (set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(subreg:SI (reg:DI 27) 0))]\n+  \"!TARGET_OPEN_VMS\"\n+  \"\")\n+\n+(define_expand \"modsi3\"\n+  [(set (reg:DI 24)\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+   (set (reg:DI 25)\n+\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n+   (parallel [(set (reg:DI 27)\n+\t\t   (sign_extend:DI (mod:SI (reg:DI 24) (reg:DI 25))))\n+\t      (clobber (reg:DI 23))\n+\t      (clobber (reg:DI 28))])\n+   (set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(subreg:SI (reg:DI 27) 0))]\n+  \"!TARGET_OPEN_VMS\"\n+  \"\")\n+\n+(define_expand \"umodsi3\"\n+  [(set (reg:DI 24)\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+   (set (reg:DI 25)\n+\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n+   (parallel [(set (reg:DI 27)\n+\t\t   (sign_extend:DI (umod:SI (reg:DI 24) (reg:DI 25))))\n+\t      (clobber (reg:DI 23))\n+\t      (clobber (reg:DI 28))])\n+   (set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(subreg:SI (reg:DI 27) 0))]\n+  \"!TARGET_OPEN_VMS\"\n+  \"\")\n \n (define_expand \"divdi3\"\n   [(set (reg:DI 24) (match_operand:DI 1 \"input_operand\" \"\"))\n@@ -912,15 +917,15 @@\n   \"!TARGET_OPEN_VMS\"\n   \"\")\n \n-;(define_insn \"\"\n-;  [(set (reg:SI 27)\n-;\t(match_operator:SI 1 \"divmod_operator\"\n-;\t\t\t[(reg:SI 24) (reg:SI 25)]))\n-;   (clobber (reg:DI 23))\n-;   (clobber (reg:DI 28))]\n-;  \"!TARGET_OPEN_VMS\"\n-;  \"%E1 $24,$25,$27\"\n-;  [(set_attr \"type\" \"jsr\")])\n+(define_insn \"\"\n+  [(set (reg:DI 27)\n+\t(sign_extend:DI (match_operator:SI 1 \"divmod_operator\"\n+\t\t\t[(reg:DI 24) (reg:DI 25)])))\n+   (clobber (reg:DI 23))\n+   (clobber (reg:DI 28))]\n+  \"!TARGET_OPEN_VMS\"\n+  \"%E1 $24,$25,$27\"\n+  [(set_attr \"type\" \"jsr\")])\n \n (define_insn \"\"\n   [(set (reg:DI 27)"}]}