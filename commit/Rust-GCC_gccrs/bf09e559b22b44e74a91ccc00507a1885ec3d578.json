{"sha": "bf09e559b22b44e74a91ccc00507a1885ec3d578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwOWU1NTliMjJiNDRlNzRhOTFjY2MwMDUwN2ExODg1ZWMzZDU3OA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-05-19T10:21:06Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-05-19T10:21:06Z"}, "message": "re PR fortran/88821 (Inline packing of non-contiguous arguments)\n\n2019-05-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/88821\n\t* expr.c (gfc_is_simply_contiguous): Return true for\n\tan EXPR_ARRAY.\n\t* trans-array.c (is_pointer): New function.\n\t(gfc_conv_array_parameter): Call gfc_conv_subref_array_arg\n\twhen not optimizing and not optimizing for size if the formal\n\targ is passed by reference.\n\t* trans-expr.c (gfc_conv_subref_array_arg): Add arguments\n\tfsym, proc_name and sym.  Add run-time warning for temporary\n\tarray creation.  Wrap argument if passing on an optional\n\targument to an optional argument.\n\t* trans.h (gfc_conv_subref_array_arg): Add optional arguments\n\tfsym, proc_name and sym to prototype.\n\n2019-05-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/88821\n\t* gfortran.dg/alloc_comp_auto_array_3.f90: Add -O0 to dg-options\n\tto make sure the test for internal_pack is retained.\n\t* gfortran.dg/assumed_type_2.f90: Split compile and run time\n\ttests into this and\n\t* gfortran.dg/assumed_type_2a.f90: New file.\n\t* gfortran.dg/c_loc_test_22.f90: Likewise.\n\t* gfortran.dg/contiguous_3.f90: Likewise.\n\t* gfortran.dg/internal_pack_11.f90: Likewise.\n\t* gfortran.dg/internal_pack_12.f90: Likewise.\n\t* gfortran.dg/internal_pack_16.f90: Likewise.\n\t* gfortran.dg/internal_pack_17.f90: Likewise.\n\t* gfortran.dg/internal_pack_18.f90: Likewise.\n\t* gfortran.dg/internal_pack_4.f90: Likewise.\n\t* gfortran.dg/internal_pack_5.f90: Add -O0 to dg-options\n\tto make sure the test for internal_pack is retained.\n\t* gfortran.dg/internal_pack_6.f90: Split compile and run time\n\ttests into this and\n\t* gfortran.dg/internal_pack_6a.f90: New file.\n\t* gfortran.dg/internal_pack_8.f90: Likewise.\n\t* gfortran.dg/missing_optional_dummy_6: Split compile and run time\n\ttests into this and\n\t* gfortran.dg/missing_optional_dummy_6a.f90: New file.\n\t* gfortran.dg/no_arg_check_2.f90: Split compile and run time tests\n\tinto this and\n\t* gfortran.dg/no_arg_check_2a.f90: New file.\n\t* gfortran.dg/typebound_assignment_5.f90: Split compile and run time\n\ttests into this and\n\t* gfortran.dg/typebound_assignment_5a.f90: New file.\n\t* gfortran.dg/typebound_assignment_6.f90: Split compile and run time\n\ttests into this and\n\t* gfortran.dg/typebound_assignment_6a.f90: New file.\n\t* gfortran.dg/internal_pack_19.f90: New file.\n\t* gfortran.dg/internal_pack_20.f90: New file.\n\t* gfortran.dg/internal_pack_21.f90: New file.\n\nFrom-SVN: r271377", "tree": {"sha": "4754f35cf254dbe9e8beb62feabb7f9a587dd2fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4754f35cf254dbe9e8beb62feabb7f9a587dd2fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf09e559b22b44e74a91ccc00507a1885ec3d578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf09e559b22b44e74a91ccc00507a1885ec3d578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf09e559b22b44e74a91ccc00507a1885ec3d578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf09e559b22b44e74a91ccc00507a1885ec3d578/comments", "author": null, "committer": null, "parents": [{"sha": "14688b8de389740f07079a945edf887a682fc9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14688b8de389740f07079a945edf887a682fc9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14688b8de389740f07079a945edf887a682fc9d1"}], "stats": {"total": 703, "additions": 663, "deletions": 40}, "files": [{"sha": "949eff19cdd5cabea0c99346e669fa408b66585d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -5713,6 +5713,9 @@ gfc_is_simply_contiguous (gfc_expr *expr, bool strict, bool permit_element)\n   gfc_ref *ref, *part_ref = NULL;\n   gfc_symbol *sym;\n \n+  if (expr->expr_type == EXPR_ARRAY)\n+    return true;\n+\n   if (expr->expr_type == EXPR_FUNCTION)\n     {\n       if (expr->value.function.esym)"}, {"sha": "9c96d897f4164bd74d6011725387929047b6577c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -7866,6 +7866,23 @@ array_parameter_size (tree desc, gfc_expr *expr, tree *size)\n \t\t\t   *size, fold_convert (gfc_array_index_type, elem));\n }\n \n+/* Helper function - return true if the argument is a pointer.  */\n+ \n+static bool\n+is_pointer (gfc_expr *e)\n+{\n+  gfc_symbol *sym;\n+\n+  if (e->expr_type != EXPR_VARIABLE ||  e->symtree == NULL)\n+    return false;\n+\n+  sym = e->symtree->n.sym;\n+  if (sym == NULL)\n+    return false;\n+\n+  return sym->attr.pointer || sym->attr.proc_pointer;\n+}\n+\n /* Convert an array for passing as an actual parameter.  */\n \n void\n@@ -8117,6 +8134,20 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, bool g77,\n \t\t\t \"Creating array temporary at %L\", &expr->where);\n \t}\n \n+      /* When optmizing, we can use gfc_conv_subref_array_arg for\n+\t making the packing and unpacking operation visible to the\n+\t optimizers.  */\n+\n+      if (g77 && optimize && !optimize_size && expr->expr_type == EXPR_VARIABLE\n+\t  && !is_pointer (expr) && (fsym == NULL\n+\t\t\t\t    || fsym->ts.type != BT_ASSUMED))\n+\t{\n+\t  gfc_conv_subref_array_arg (se, expr, g77,\n+\t\t\t\t     fsym ? fsym->attr.intent : INTENT_INOUT,\n+\t\t\t\t     false, fsym, proc_name, sym);\n+\t  return;\n+\t}\n+\n       ptr = build_call_expr_loc (input_location,\n \t\t\t     gfor_fndecl_in_pack, 1, desc);\n "}, {"sha": "b7a8456c021425647425fd2f21b913d0f4168aaa", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -4576,8 +4576,10 @@ gfc_apply_interface_mapping (gfc_interface_mapping * mapping,\n    an actual argument derived type array is copied and then returned\n    after the function call.  */\n void\n-gfc_conv_subref_array_arg (gfc_se * parmse, gfc_expr * expr, int g77,\n-\t\t\t   sym_intent intent, bool formal_ptr)\n+gfc_conv_subref_array_arg (gfc_se *se, gfc_expr * expr, int g77,\n+\t\t\t   sym_intent intent, bool formal_ptr,\n+\t\t\t   const gfc_symbol *fsym, const char *proc_name,\n+\t\t\t   gfc_symbol *sym)\n {\n   gfc_se lse;\n   gfc_se rse;\n@@ -4594,6 +4596,36 @@ gfc_conv_subref_array_arg (gfc_se * parmse, gfc_expr * expr, int g77,\n   stmtblock_t body;\n   int n;\n   int dimen;\n+  gfc_se work_se;\n+  gfc_se *parmse;\n+  bool pass_optional;\n+\n+  pass_optional = fsym && fsym->attr.optional && sym && sym->attr.optional;\n+\n+  if (pass_optional)\n+    {\n+      gfc_init_se (&work_se, NULL);\n+      parmse = &work_se;\n+    }\n+  else\n+    parmse = se;\n+\n+  if (gfc_option.rtcheck & GFC_RTCHECK_ARRAY_TEMPS)\n+    {\n+      /* We will create a temporary array, so let us warn.  */\n+      char * msg;\n+\n+      if (fsym && proc_name)\n+\tmsg = xasprintf (\"An array temporary was created for argument \"\n+\t\t\t     \"'%s' of procedure '%s'\", fsym->name, proc_name);\n+      else\n+\tmsg = xasprintf (\"An array temporary was created\");\n+\n+      tmp = build_int_cst (logical_type_node, 1);\n+      gfc_trans_runtime_check (false, true, tmp, &parmse->pre,\n+\t\t\t       &expr->where, msg);\n+      free (msg);\n+    }\n \n   gfc_init_se (&lse, NULL);\n   gfc_init_se (&rse, NULL);\n@@ -4848,6 +4880,53 @@ gfc_conv_subref_array_arg (gfc_se * parmse, gfc_expr * expr, int g77,\n   else\n     parmse->expr = gfc_build_addr_expr (NULL_TREE, parmse->expr);\n \n+  if (pass_optional)\n+    {\n+      tree present;\n+      tree type;\n+      stmtblock_t else_block;\n+      tree pre_stmts, post_stmts;\n+      tree pointer;\n+      tree else_stmt;\n+\n+      /* Make this into\n+\n+\t if (present (a))\n+\t   {\n+\t      parmse->pre;\n+\t      optional = parse->expr;\n+\t   }\n+         else\n+\t   optional = NULL;\n+         call foo (optional);\n+         if (present (a))\n+            parmse->post;\n+\n+      */\n+\n+      type = TREE_TYPE (parmse->expr);\n+      pointer = gfc_create_var (type, \"optional\");\n+      tmp = gfc_conv_expr_present (sym);\n+      present = gfc_evaluate_now (tmp, &se->pre);\n+      gfc_add_modify (&parmse->pre, pointer, parmse->expr);\n+      pre_stmts = gfc_finish_block (&parmse->pre);\n+\n+      gfc_init_block (&else_block);\n+      gfc_add_modify (&else_block, pointer, build_int_cst (type, 0));\n+      else_stmt = gfc_finish_block (&else_block);\n+\n+      tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, present,\n+\t\t\t     pre_stmts, else_stmt);\n+      gfc_add_expr_to_block (&se->pre, tmp);\n+\n+      post_stmts = gfc_finish_block (&parmse->post);\n+      tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, present,\n+\t\t\t     post_stmts, build_empty_stmt (input_location));\n+      gfc_add_expr_to_block (&se->post, tmp);\n+\n+      se->expr = pointer;\n+    }\n+\n   return;\n }\n "}, {"sha": "e0118abaf18ebb14173f66f32eec77dac42beca3", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -532,7 +532,10 @@ int gfc_is_intrinsic_libcall (gfc_expr *);\n int gfc_conv_procedure_call (gfc_se *, gfc_symbol *, gfc_actual_arglist *,\n \t\t\t     gfc_expr *, vec<tree, va_gc> *);\n \n-void gfc_conv_subref_array_arg (gfc_se *, gfc_expr *, int, sym_intent, bool);\n+void gfc_conv_subref_array_arg (gfc_se *, gfc_expr *, int, sym_intent, bool,\n+\t\t\t\tconst gfc_symbol *fsym = NULL,\n+\t\t\t\tconst char *proc_name = NULL,\n+\t\t\t\tgfc_symbol *sym = NULL);\n \n /* Generate code for a scalar assignment.  */\n tree gfc_trans_scalar_assign (gfc_se *, gfc_se *, gfc_typespec, bool, bool,"}, {"sha": "2af089e84e8d12cf43d6ad8863df9aba74ed86f5", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_auto_array_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_3.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! Test the fix for PR66082. The original problem was with the first\n ! call foo_1d."}, {"sha": "5d3cd7eaece948f4d754dd073c023855cd0be17e", "filename": "gcc/testsuite/gfortran.dg/assumed_type_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n-! { dg-do run }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-do compile }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! PR fortran/48820\n !"}, {"sha": "125bfcbe8394cfa57a6d84a3d86028c73d09263d", "filename": "gcc/testsuite/gfortran.dg/assumed_type_2a.f90", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2a.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,139 @@\n+! { dg-do run }\n+!\n+! PR fortran/48820\n+!\n+! Test TYPE(*)\n+!\n+\n+module mod\n+  use iso_c_binding, only: c_loc, c_ptr, c_bool\n+  implicit none\n+  interface my_c_loc\n+    function my_c_loc1(x) bind(C)\n+      import c_ptr\n+      type(*) :: x\n+      type(c_ptr) :: my_c_loc1\n+    end function\n+    function my_c_loc2(x) bind(C)\n+      import c_ptr\n+      type(*) :: x(*)\n+      type(c_ptr) :: my_c_loc2\n+    end function\n+  end interface my_c_loc\n+contains\n+  subroutine sub_scalar (arg1, presnt)\n+     type(*), target, optional :: arg1\n+     logical :: presnt\n+     type(c_ptr) :: cpt\n+     if (presnt .neqv. present (arg1)) STOP 1\n+     cpt = c_loc (arg1)\n+  end subroutine sub_scalar\n+\n+  subroutine sub_array_shape (arg2, lbounds, ubounds)\n+     type(*), target :: arg2(:,:)\n+     type(c_ptr) :: cpt\n+     integer :: lbounds(2), ubounds(2)\n+     if (any (lbound(arg2) /= lbounds)) STOP 2\n+     if (any (ubound(arg2) /= ubounds)) STOP 3\n+     if (any (shape(arg2) /= ubounds-lbounds+1)) STOP 4\n+     if (size(arg2) /= product (ubounds-lbounds+1)) STOP 5\n+     if (rank (arg2) /= 2) STOP 6\n+!     if (.not. is_continuous (arg2)) STOP 7 !<< Not yet implemented\n+!     cpt = c_loc (arg2) ! << FIXME: Valid since TS29113\n+     call sub_array_assumed (arg2)\n+  end subroutine sub_array_shape\n+\n+  subroutine sub_array_assumed (arg3)\n+     type(*), target :: arg3(*)\n+     type(c_ptr) :: cpt\n+     cpt = c_loc (arg3)\n+  end subroutine sub_array_assumed\n+end module\n+\n+use mod\n+use iso_c_binding, only: c_int, c_null_ptr\n+implicit none\n+type t1\n+  integer :: a\n+end type t1\n+type :: t2\n+  sequence\n+  integer :: b\n+end type t2\n+type, bind(C) :: t3\n+  integer(c_int) :: c\n+end type t3\n+\n+integer            :: scalar_int\n+real, allocatable  :: scalar_real_alloc\n+character, pointer :: scalar_char_ptr\n+\n+integer            :: array_int(3)\n+real, allocatable  :: array_real_alloc(:,:)\n+character, pointer :: array_char_ptr(:,:)\n+\n+type(t1)              :: scalar_t1\n+type(t2), allocatable :: scalar_t2_alloc\n+type(t3), pointer     :: scalar_t3_ptr\n+\n+type(t1)              :: array_t1(4)\n+type(t2), allocatable :: array_t2_alloc(:,:)\n+type(t3), pointer     :: array_t3_ptr(:,:)\n+\n+class(t1), allocatable :: scalar_class_t1_alloc\n+class(t1), pointer     :: scalar_class_t1_ptr\n+\n+class(t1), allocatable :: array_class_t1_alloc(:,:)\n+class(t1), pointer     :: array_class_t1_ptr(:,:)\n+\n+scalar_char_ptr => null()\n+scalar_t3_ptr => null()\n+\n+call sub_scalar (presnt=.false.)\n+call sub_scalar (scalar_real_alloc, .false.)\n+call sub_scalar (scalar_char_ptr, .false.)\n+call sub_scalar (null (), .false.)\n+call sub_scalar (scalar_t2_alloc, .false.)\n+call sub_scalar (scalar_t3_ptr, .false.)\n+\n+allocate (scalar_real_alloc, scalar_char_ptr, scalar_t3_ptr)\n+allocate (scalar_class_t1_alloc, scalar_class_t1_ptr, scalar_t2_alloc)\n+allocate (array_real_alloc(3:5,2:4), array_char_ptr(-2:2,2))\n+allocate (array_t2_alloc(3:5,2:4), array_t3_ptr(-2:2,2))\n+allocate (array_class_t1_alloc(3,3), array_class_t1_ptr(4,4))\n+\n+call sub_scalar (scalar_int, .true.)\n+call sub_scalar (scalar_real_alloc, .true.)\n+call sub_scalar (scalar_char_ptr, .true.)\n+call sub_scalar (array_int(2), .true.)\n+call sub_scalar (array_real_alloc(3,2), .true.)\n+call sub_scalar (array_char_ptr(0,1), .true.)\n+call sub_scalar (scalar_t1, .true.)\n+call sub_scalar (scalar_t2_alloc, .true.)\n+call sub_scalar (scalar_t3_ptr, .true.)\n+call sub_scalar (array_t1(2), .true.)\n+call sub_scalar (array_t2_alloc(3,2), .true.)\n+call sub_scalar (array_t3_ptr(0,1), .true.)\n+call sub_scalar (array_class_t1_alloc(2,1), .true.)\n+call sub_scalar (array_class_t1_ptr(3,3), .true.)\n+\n+call sub_array_assumed (array_int)\n+call sub_array_assumed (array_real_alloc)\n+call sub_array_assumed (array_char_ptr)\n+call sub_array_assumed (array_t1)\n+call sub_array_assumed (array_t2_alloc)\n+call sub_array_assumed (array_t3_ptr)\n+call sub_array_assumed (array_class_t1_alloc)\n+call sub_array_assumed (array_class_t1_ptr)\n+\n+call sub_array_shape (array_real_alloc, [1,1], shape(array_real_alloc))\n+call sub_array_shape (array_char_ptr, [1,1], shape(array_char_ptr))\n+call sub_array_shape (array_t2_alloc, [1,1], shape(array_t2_alloc))\n+call sub_array_shape (array_t3_ptr, [1,1], shape(array_t3_ptr))\n+call sub_array_shape (array_class_t1_alloc, [1,1], shape(array_class_t1_alloc))\n+call sub_array_shape (array_class_t1_ptr, [1,1], shape(array_class_t1_ptr))\n+\n+deallocate (scalar_char_ptr, scalar_class_t1_ptr, array_char_ptr)\n+deallocate (array_class_t1_ptr, array_t3_ptr)\n+\n+end"}, {"sha": "9c40b26d83028f768a6373955927817581d9277f", "filename": "gcc/testsuite/gfortran.dg/c_loc_test_22.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_22.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! PR fortran/56907\n !"}, {"sha": "ba0ccce8f9ee319767519e973fa24b76fa6d96bb", "filename": "gcc/testsuite/gfortran.dg/contiguous_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_3.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! PR fortran/40632\n !"}, {"sha": "c341a1bbc5faf4f851e45648f4eac17eff7f12f5", "filename": "gcc/testsuite/gfortran.dg/internal_pack_11.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_11.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! Test the fix for PR43173, where unnecessary calls to internal_pack/unpack\n ! were being produced below. These references are contiguous and so do not"}, {"sha": "da507322cbb01782952ffff5e1ac261c79dad019", "filename": "gcc/testsuite/gfortran.dg/internal_pack_12.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_12.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! Test the fix for PR43243, where unnecessary calls to internal_pack/unpack\n ! were being produced below. These references are contiguous and so do not"}, {"sha": "92c4b150db8274ad49d6f67afb997cbb2f3f40d5", "filename": "gcc/testsuite/gfortran.dg/internal_pack_16.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_16.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-additional-options \"-fdump-tree-original\" }\n+! { dg-additional-options \"-O0 -fdump-tree-original\" }\n ! PR 59345 - pack/unpack was not needed here.\n SUBROUTINE S1(A)\n  REAL :: A(3)"}, {"sha": "176ad879ba25377754da57c60d44c699b6304270", "filename": "gcc/testsuite/gfortran.dg/internal_pack_17.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_17.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-additional-options \"-fdump-tree-original\" }\n+! { dg-additional-options \"-O0 -fdump-tree-original\" }\n ! PR 59345 - pack/unpack was not needed here.\n ! Original test case by Joost VandeVondele \n SUBROUTINE S1(A)"}, {"sha": "b4404726d12c793a8fdb9914f7916b115c414cca", "filename": "gcc/testsuite/gfortran.dg/internal_pack_18.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_18.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-additional-options \"-fdump-tree-original\" }\n+! { dg-additional-options \"-O0 -fdump-tree-original\" }\n ! PR 57992 - this was packed/unpacked unnecessarily.\n ! Original case by Tobias Burnus.\n subroutine test"}, {"sha": "06b916b7d8e3fdd8face6a09db2537164f1e6cdc", "filename": "gcc/testsuite/gfortran.dg/internal_pack_19.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_19.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-Os -fdump-tree-original\" }\n+! Check that internal_pack is called with -Os.\n+module x\n+  implicit none\n+contains\n+  subroutine bar(a, n)\n+    integer, intent(in) :: n\n+    integer, intent(in), dimension(n) :: a\n+    print *,a\n+  end subroutine bar\n+end module x\n+\n+program main\n+  use x\n+  implicit none\n+  integer, parameter :: n = 10\n+  integer, dimension(n) :: a\n+  integer :: i\n+  a = [(i,i=1,n)]\n+  call bar(a(n:1:-1),n)\n+end program main\n+! { dg-final { scan-tree-dump-times \"_gfortran_internal_pack\" 1 \"original\" } }"}, {"sha": "f93f06bf2728c55427e8b3cae88476e10d1a9ba0", "filename": "gcc/testsuite/gfortran.dg/internal_pack_20.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_20.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-O -fdump-tree-original\" }\n+! Check that internal_pack is not called with -O.\n+module x\n+  implicit none\n+contains\n+  subroutine bar(a, n)\n+    integer, intent(in) :: n\n+    integer, intent(in), dimension(n) :: a\n+    print *,a\n+  end subroutine bar\n+end module x\n+\n+program main\n+  use x\n+  implicit none\n+  integer, parameter :: n = 10\n+  integer, dimension(n) :: a\n+  integer :: i\n+  a = [(i,i=1,n)]\n+  call bar(a(n:1:-1),n)\n+end program main\n+! { dg-final { scan-tree-dump-not \"_gfortran_internal_pack\" \"original\" } }"}, {"sha": "d0ce942a9f84d68436cbeff9b489e00ce18a46cf", "filename": "gcc/testsuite/gfortran.dg/internal_pack_21.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_21.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! { dg-options \"-O -fdump-tree-original\" }\n+! Test handling of the optional argument.\n+\n+MODULE M1\n+  INTEGER, PARAMETER :: dp=KIND(0.0D0)\n+CONTAINS\n+  SUBROUTINE S1(a)\n+         REAL(dp), DIMENSION(45), INTENT(OUT), &\n+      OPTIONAL                               :: a\n+      if (present(a)) STOP 1\n+  END SUBROUTINE S1\n+  SUBROUTINE S2(a)\n+          REAL(dp), DIMENSION(:, :), INTENT(OUT), &\n+      OPTIONAL                               :: a\n+      CALL S1(a)\n+  END SUBROUTINE\n+END MODULE M1\n+\n+USE M1\n+CALL S2()\n+END\n+! { dg-final { scan-tree-dump-times \"optional\" 4 \"original\" } }\n+! { dg-final { scan-tree-dump-not \"_gfortran_internal_unpack\" \"original\" } }"}, {"sha": "9de09ab072b5440fad63ba32e13792e1cdbc8d07", "filename": "gcc/testsuite/gfortran.dg/internal_pack_4.f90", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_4.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do run }\n-! { dg-options \"-fdump-tree-original\" }\n !\n ! PR fortran/36132\n !\n@@ -25,6 +24,3 @@ END MODULE M1\n USE M1\n CALL S2()\n END\n-\n-! { dg-final { scan-tree-dump-times \"a != 0B \\\\? \\\\\\(.*\\\\\\) _gfortran_internal_pack\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"if \\\\(a != 0B &&\" 1 \"original\" } }"}, {"sha": "360ade491b568e00abe2002c8b1ffde4fbea2637", "filename": "gcc/testsuite/gfortran.dg/internal_pack_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_5.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! PR fortran/36909\n !"}, {"sha": "6d52a8c98c4a18ed87524a683f37c630fd08cf5a", "filename": "gcc/testsuite/gfortran.dg/internal_pack_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n-! { dg-do run }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-do compile }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! Test the fix for PR41113 and PR41117, in which unnecessary calls\n ! to internal_pack and internal_unpack were being generated."}, {"sha": "a9fb2b52d975f52995d7f7635fbdd6bb035abddc", "filename": "gcc/testsuite/gfortran.dg/internal_pack_6a.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6a.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR41113 and PR41117, in which unnecessary calls\n+! to internal_pack and internal_unpack were being generated.\n+!\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n+!\n+MODULE M1\n+ TYPE T1\n+   REAL :: data(10) = [(i, i = 1, 10)]\n+ END TYPE T1\n+CONTAINS\n+ SUBROUTINE S1(data, i, chksum)\n+   REAL, DIMENSION(*) :: data\n+   integer :: i, j\n+   real :: subsum, chksum\n+   subsum = 0\n+   do j = 1, i\n+     subsum = subsum + data(j)\n+   end do\n+   if (abs(subsum - chksum) > 1e-6) STOP 1\n+ END SUBROUTINE S1\n+END MODULE\n+\n+SUBROUTINE S2\n+ use m1\n+ TYPE(T1) :: d\n+\n+ real :: data1(10) = [(i, i = 1, 10)]\n+ REAL :: data(-4:5,-4:5) = reshape ([(real(i), i = 1, 100)], [10,10])\n+\n+! PR41113\n+ CALL S1(d%data, 10, sum (d%data))\n+ CALL S1(data1, 10, sum (data1))\n+\n+! PR41117\n+ DO i=-4,5\n+    CALL S1(data(:,i), 10, sum (data(:,i)))\n+ ENDDO\n+\n+! With the fix for PR41113/7 this is the only time that _internal_pack\n+! was called.  The final part of the fix for PR43072 put paid to it too.\n+ DO i=-4,5\n+    CALL S1(data(-2:,i), 8, sum (data(-2:,i)))\n+ ENDDO\n+ DO i=-4,4\n+    CALL S1(data(:,i:i+1), 20, sum (reshape (data(:,i:i+1), [20])))\n+ ENDDO\n+ DO i=-4,5\n+    CALL S1(data(2,i), 1, data(2,i))\n+ ENDDO\n+END SUBROUTINE S2\n+\n+ call s2\n+end\n+"}, {"sha": "2b44db5a805eda6fb4ff05ec0094fe9e1e369482", "filename": "gcc/testsuite/gfortran.dg/internal_pack_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_9.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! During the discussion of the fix for PR43072, in which unnecessary\n ! calls to internal PACK/UNPACK were being generated, the following,"}, {"sha": "cb6de2ebf614d06bcc3dcad78976bd11e76ded34", "filename": "gcc/testsuite/gfortran.dg/missing_optional_dummy_6.f90", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -46,14 +46,3 @@ subroutine scalar2 (slr2)\n   end subroutine scalar2\n \n end program test\n-\n-! { dg-final { scan-tree-dump-times \"scalar2 \\\\(slr1\" 1 \"original\" } }\n-\n-! { dg-final { scan-tree-dump-times \"= es1 != 0B\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"assumed_shape2 \\\\(es1\" 0 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"explicit_shape2 \\\\(es1\" 1 \"original\" } }\n-\n-! { dg-final { scan-tree-dump-times \"= as1 != 0B\" 2 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"assumed_shape2 \\\\(as1\" 0 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"explicit_shape2 \\\\(as1\" 0 \"original\" } }\n-"}, {"sha": "0e08ed3aa0c073c239f7d0a86c9ac4c6ea172551", "filename": "gcc/testsuite/gfortran.dg/missing_optional_dummy_6a.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6a.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,59 @@\n+! { dg-do compile }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n+!\n+! PR fortran/41907\n+!\n+program test\n+  implicit none\n+  call scalar1 ()\n+  call assumed_shape1 ()\n+  call explicit_shape1 ()\n+contains\n+\n+  ! Calling functions\n+  subroutine scalar1 (slr1)\n+    integer, optional :: slr1\n+    call scalar2 (slr1)\n+  end subroutine scalar1\n+\n+  subroutine assumed_shape1 (as1)\n+    integer, dimension(:), optional :: as1\n+    call assumed_shape2 (as1)\n+    call explicit_shape2 (as1)\n+  end subroutine assumed_shape1\n+\n+  subroutine explicit_shape1 (es1)\n+    integer, dimension(5), optional :: es1\n+    call assumed_shape2 (es1)\n+    call explicit_shape2 (es1)\n+  end subroutine explicit_shape1\n+\n+\n+  ! Called functions\n+  subroutine assumed_shape2 (as2)\n+    integer, dimension(:),optional :: as2\n+    if (present (as2)) STOP 1\n+  end subroutine assumed_shape2\n+\n+  subroutine explicit_shape2 (es2)\n+    integer, dimension(5),optional :: es2\n+    if (present (es2)) STOP 2\n+  end subroutine explicit_shape2\n+\n+  subroutine scalar2 (slr2)\n+    integer, optional :: slr2\n+    if (present (slr2)) STOP 3\n+  end subroutine scalar2\n+\n+end program test\n+\n+! { dg-final { scan-tree-dump-times \"scalar2 \\\\(slr1\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"= es1 != 0B\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"assumed_shape2 \\\\(es1\" 0 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"explicit_shape2 \\\\(es1\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"= as1 != 0B\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"assumed_shape2 \\\\(as1\" 0 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"explicit_shape2 \\\\(as1\" 0 \"original\" } }\n+"}, {"sha": "3570b9719ebb3a30edcb8666680d628961430933", "filename": "gcc/testsuite/gfortran.dg/no_arg_check_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_2.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n-! { dg-do run }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-do compile }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! PR fortran/39505\n ! "}, {"sha": "dc4adcb561929f0747b1e9f2a2b7deaba2781f0b", "filename": "gcc/testsuite/gfortran.dg/no_arg_check_2a.f90", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_2a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_2a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_2a.f90?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,121 @@\n+! { dg-do run }\n+!\n+! PR fortran/39505\n+! \n+! Test NO_ARG_CHECK\n+! Copied from assumed_type_2.f90\n+!\n+\n+module mod\n+  use iso_c_binding, only: c_loc, c_ptr, c_bool\n+  implicit none\n+  interface my_c_loc\n+    function my_c_loc1(x) bind(C)\n+      import c_ptr\n+!GCC$ attributes NO_ARG_CHECK :: x\n+      type(*) :: x\n+      type(c_ptr) :: my_c_loc1\n+    end function\n+  end interface my_c_loc\n+contains\n+  subroutine sub_scalar (arg1, presnt)\n+     integer(8), target, optional :: arg1\n+     logical :: presnt\n+     type(c_ptr) :: cpt\n+!GCC$ attributes NO_ARG_CHECK :: arg1\n+     if (presnt .neqv. present (arg1)) STOP 1\n+     cpt = c_loc (arg1)\n+  end subroutine sub_scalar\n+\n+  subroutine sub_array_assumed (arg3)\n+!GCC$ attributes NO_ARG_CHECK :: arg3\n+     logical(1), target :: arg3(*)\n+     type(c_ptr) :: cpt\n+     cpt = c_loc (arg3)\n+  end subroutine sub_array_assumed\n+end module\n+\n+use mod\n+use iso_c_binding, only: c_int, c_null_ptr\n+implicit none\n+type t1\n+  integer :: a\n+end type t1\n+type :: t2\n+  sequence\n+  integer :: b\n+end type t2\n+type, bind(C) :: t3\n+  integer(c_int) :: c\n+end type t3\n+\n+integer            :: scalar_int\n+real, allocatable  :: scalar_real_alloc\n+character, pointer :: scalar_char_ptr\n+\n+integer            :: array_int(3)\n+real, allocatable  :: array_real_alloc(:,:)\n+character, pointer :: array_char_ptr(:,:)\n+\n+type(t1)              :: scalar_t1\n+type(t2), allocatable :: scalar_t2_alloc\n+type(t3), pointer     :: scalar_t3_ptr\n+\n+type(t1)              :: array_t1(4)\n+type(t2), allocatable :: array_t2_alloc(:,:)\n+type(t3), pointer     :: array_t3_ptr(:,:)\n+\n+class(t1), allocatable :: scalar_class_t1_alloc\n+class(t1), pointer     :: scalar_class_t1_ptr\n+\n+class(t1), allocatable :: array_class_t1_alloc(:,:)\n+class(t1), pointer     :: array_class_t1_ptr(:,:)\n+\n+scalar_char_ptr => null()\n+scalar_t3_ptr => null()\n+\n+call sub_scalar (presnt=.false.)\n+call sub_scalar (scalar_real_alloc, .false.)\n+call sub_scalar (scalar_char_ptr, .false.)\n+call sub_scalar (null (), .false.)\n+call sub_scalar (scalar_t2_alloc, .false.)\n+call sub_scalar (scalar_t3_ptr, .false.)\n+\n+allocate (scalar_real_alloc, scalar_char_ptr, scalar_t3_ptr)\n+allocate (scalar_class_t1_alloc, scalar_class_t1_ptr, scalar_t2_alloc)\n+allocate (array_real_alloc(3:5,2:4), array_char_ptr(-2:2,2))\n+allocate (array_t2_alloc(3:5,2:4), array_t3_ptr(-2:2,2))\n+allocate (array_class_t1_alloc(3,3), array_class_t1_ptr(4,4))\n+\n+call sub_scalar (scalar_int, .true.)\n+call sub_scalar (scalar_real_alloc, .true.)\n+call sub_scalar (scalar_char_ptr, .true.)\n+call sub_scalar (array_int(2), .true.)\n+call sub_scalar (array_real_alloc(3,2), .true.)\n+call sub_scalar (array_char_ptr(0,1), .true.)\n+call sub_scalar (scalar_t1, .true.)\n+call sub_scalar (scalar_t2_alloc, .true.)\n+call sub_scalar (scalar_t3_ptr, .true.)\n+call sub_scalar (array_t1(2), .true.)\n+call sub_scalar (array_t2_alloc(3,2), .true.)\n+call sub_scalar (array_t3_ptr(0,1), .true.)\n+call sub_scalar (array_class_t1_alloc(2,1), .true.)\n+call sub_scalar (array_class_t1_ptr(3,3), .true.)\n+\n+call sub_array_assumed (array_int)\n+call sub_array_assumed (array_real_alloc)\n+call sub_array_assumed (array_char_ptr)\n+call sub_array_assumed (array_t1)\n+call sub_array_assumed (array_t2_alloc)\n+call sub_array_assumed (array_t3_ptr)\n+call sub_array_assumed (array_class_t1_alloc)\n+call sub_array_assumed (array_class_t1_ptr)\n+\n+deallocate (scalar_char_ptr, scalar_class_t1_ptr, array_char_ptr)\n+deallocate (array_class_t1_ptr, array_t3_ptr)\n+contains\n+  subroutine sub(x)\n+    integer :: x(:)\n+    call sub_array_assumed (x)\n+  end subroutine sub\n+end"}, {"sha": "e7c9126b35c744bacfccea27c7e90a1b6a79b890", "filename": "gcc/testsuite/gfortran.dg/typebound_assignment_5.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_5.f03?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,5 @@\n-! { dg-do run }\n-! { dg-options \"-fdump-tree-original\" }\n+! { dg-do compile }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n !\n ! PR fortran/49074\n ! ICE on defined assignment with class arrays."}, {"sha": "b55b42b589c0d3b28663e9c3eda179f581e9d343", "filename": "gcc/testsuite/gfortran.dg/typebound_assignment_5a.f03", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_5a.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_5a.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_5a.f03?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+!\n+! PR fortran/49074\n+! ICE on defined assignment with class arrays.\n+\n+      module foo\n+        type bar\n+          integer :: i\n+\n+          contains\n+\n+          generic :: assignment (=) => assgn_bar\n+          procedure, private :: assgn_bar\n+        end type bar\n+\n+        contains\n+\n+        elemental subroutine assgn_bar (a, b)\n+          class (bar), intent (inout) :: a\n+          class (bar), intent (in) :: b\n+\n+          select type (b)\n+          type is (bar)\n+            a%i = b%i\n+          end select\n+\n+          return\n+        end subroutine assgn_bar\n+      end module foo\n+\n+      program main\n+        use foo\n+\n+        type (bar), allocatable :: foobar(:)\n+\n+        allocate (foobar(2))\n+        foobar = [bar(1), bar(2)]\n+        if (any(foobar%i /= [1, 2])) STOP 1\n+      end program"}, {"sha": "40cd2d0b11674345575de3f00a3bd751538b7369", "filename": "gcc/testsuite/gfortran.dg/typebound_assignment_6.f03", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_6.f03?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do run }\n-! { dg-options \"-fdump-tree-original\" }\n !\n ! PR fortran/56136\n ! ICE on defined assignment with class arrays.\n@@ -37,6 +36,3 @@ PROGRAM ASGN_REALLOC_TEST\n         IF (ANY(A(2::2)%I /= (/ ((50+2*I, I=1,SIZE(A)/4), J=1,2) /))) STOP 3\n       END PROGRAM\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_internal_pack\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_internal_unpack\" 1 \"original\" } }\n-"}, {"sha": "2dab4c7b74dfc8162079012c54b76a866b5ca87c", "filename": "gcc/testsuite/gfortran.dg/typebound_assignment_6a.f03", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_6a.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09e559b22b44e74a91ccc00507a1885ec3d578/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_6a.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_assignment_6a.f03?ref=bf09e559b22b44e74a91ccc00507a1885ec3d578", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do compile }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n+!\n+! PR fortran/56136\n+! ICE on defined assignment with class arrays.\n+!\n+! Original testcase by Alipasha <alipash.celeris@gmail.com>\n+\n+      MODULE A_TEST_M\n+        TYPE :: A_TYPE\n+          INTEGER :: I\n+          CONTAINS\n+          GENERIC :: ASSIGNMENT (=) => ASGN_A\n+          PROCEDURE, PRIVATE :: ASGN_A\n+        END TYPE\n+\n+        CONTAINS\n+\n+        ELEMENTAL SUBROUTINE ASGN_A (A, B)\n+          CLASS (A_TYPE), INTENT (INOUT) :: A\n+          CLASS (A_TYPE), INTENT (IN) :: B\n+          A%I = B%I\n+        END SUBROUTINE\n+      END MODULE A_TEST_M\n+      \n+      PROGRAM ASGN_REALLOC_TEST\n+        USE A_TEST_M\n+        TYPE (A_TYPE), ALLOCATABLE :: A(:)\n+        INTEGER :: I, J\n+\n+        ALLOCATE (A(100))\n+        A = (/ (A_TYPE(I), I=1,SIZE(A)) /)\n+        A(1:50) = A(51:100)\n+        IF (ANY(A%I /= (/ ((50+I, I=1,SIZE(A)/2), J=1,2) /))) STOP 1\n+        A(::2) = A(1:50)        ! pack/unpack\n+        IF (ANY(A( ::2)%I /= (/ (50+I, I=1,SIZE(A)/2) /))) STOP 2\n+        IF (ANY(A(2::2)%I /= (/ ((50+2*I, I=1,SIZE(A)/4), J=1,2) /))) STOP 3\n+      END PROGRAM\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_internal_pack\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_internal_unpack\" 1 \"original\" } }\n+"}]}