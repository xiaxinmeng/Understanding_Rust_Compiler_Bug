{"sha": "45aa7a447652e8541cc381d7ab128544f81ed857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVhYTdhNDQ3NjUyZTg1NDFjYzM4MWQ3YWIxMjg1NDRmODFlZDg1Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-17T10:54:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-17T16:58:46Z"}, "message": "libstdc++: Fix filesystem::path constraints for volatile [PR 100630]\n\nThe constraint check for filesystem::path construction uses\ndecltype(__is_path_src(declval<Source>())) which mean it considers\nconversion from an rvalue.  When Source is a volatile-qualified type\nit cannot use is_path_src(const Unknown&) because a const lvalue\nreference can only bind to a non-volatile rvalue.\n\nSince the relevant path members all have a const Source& parameter,\nthe constraint should be defined in terms of declval<const Source&>(),\nnot declval<Source>(). This avoids the problem of volatile-qualified\nrvalues, because we no longer use an rvalue at all.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100630\n\t* include/experimental/bits/fs_path.h (__is_constructible_from):\n\tTest construction from a const lvalue, not an rvalue.\n\t* testsuite/27_io/filesystem/path/construct/100630.cc: New test.\n\t* testsuite/experimental/filesystem/path/construct/100630.cc:\n\tNew test.", "tree": {"sha": "8d853ef6ec0d7bf62d59190885f81b87f2e917d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d853ef6ec0d7bf62d59190885f81b87f2e917d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45aa7a447652e8541cc381d7ab128544f81ed857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45aa7a447652e8541cc381d7ab128544f81ed857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45aa7a447652e8541cc381d7ab128544f81ed857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45aa7a447652e8541cc381d7ab128544f81ed857/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd89fc77639a63a141dbbc6292dd73e653794d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd89fc77639a63a141dbbc6292dd73e653794d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd89fc77639a63a141dbbc6292dd73e653794d61"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "1ecf2f3a7bd542ed65ccfe480a312875664d181d", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45aa7a447652e8541cc381d7ab128544f81ed857/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45aa7a447652e8541cc381d7ab128544f81ed857/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=45aa7a447652e8541cc381d7ab128544f81ed857", "patch": "@@ -124,7 +124,7 @@ namespace __detail\n \n   template<typename _Source>\n     struct __constructible_from<_Source, void>\n-    : decltype(__is_path_src(std::declval<_Source>(), 0))\n+    : decltype(__is_path_src(std::declval<const _Source&>(), 0))\n     { };\n \n   template<typename _Tp1, typename _Tp2 = void,"}, {"sha": "eb8473e600eb0bacfd3096c6b5bae379eb5aec6b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/100630.cc", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45aa7a447652e8541cc381d7ab128544f81ed857/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F100630.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45aa7a447652e8541cc381d7ab128544f81ed857/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F100630.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F100630.cc?ref=45aa7a447652e8541cc381d7ab128544f81ed857", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <filesystem>\n+\n+void f(bool) { }\n+void f(const std::filesystem::path&) { }\n+\n+void\n+test_100630()\n+{\n+  volatile bool b = true;\n+  f(b);\n+}"}, {"sha": "b2428ff74cf504acb7a302c2210239b7cd18774b", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/construct/100630.cc", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45aa7a447652e8541cc381d7ab128544f81ed857/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2F100630.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45aa7a447652e8541cc381d7ab128544f81ed857/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2F100630.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2F100630.cc?ref=45aa7a447652e8541cc381d7ab128544f81ed857", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+\n+void f(bool) { }\n+void f(const std::experimental::filesystem::path&) { }\n+\n+void\n+test_100630()\n+{\n+  volatile bool b = true;\n+  f(b);\n+}"}]}