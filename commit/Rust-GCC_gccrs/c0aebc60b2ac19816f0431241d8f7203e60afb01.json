{"sha": "c0aebc60b2ac19816f0431241d8f7203e60afb01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhZWJjNjBiMmFjMTk4MTZmMDQzMTI0MWQ4ZjcyMDNlNjBhZmIwMQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-04-23T20:08:46Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-23T20:08:46Z"}, "message": "d: Add support for compiling without libphobos library.\n\nMerges upstream dmd 3b3dca8be\n\nReviewed-on: https://github.com/dlang/dmd/pull/9678\n\ngcc/d/ChangeLog:\n\n2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* d-builtins.cc (d_init_versions): Add D_BetterC, D_ModuleInfo,\n\tD_Exceptions, D_TypeInfo as predefined version conditions.\n\t* d-codegen.cc (build_bounds_condition): Generate trap if D asserts\n\tare turned off.\n\t* d-frontend.cc (getTypeInfoType): Add error when -fno-rtti is set.\n\t* d-lang.cc (d_init_options): Initialize new front-end options.\n\t(d_handle_option): Handle -fdruntime, -fexceptions, and -frtti.\n\t(d_post_options): Turn off D runtime features if -fno-druntime is set.\n\t* d-spec.cc (lang_specific_driver): Handle -fdruntime.\n\t* d-tree.h (have_typeinfo_p): Add prototype.\n\t(build_typeinfo): Update prototype.\n\t* decl.cc (DeclVisitor::visit(StructDeclaration)): Create typeinfo\n\tonly if TypeInfo exists.\n\t(DeclVisitor::visit(ClassDeclaration)): Likewise.\n\t(DeclVisitor::visit(InterfaceDeclaration)): Likewise.\n\t(DeclVisitor::visit(EnumDeclaration)): Likewise.\n\t* expr.cc: Update all calls to build_typeinfo.\n\t* gdc.texi (Runtime Options): Document -fdruntime and -frtti.\n\t* lang.opt: Add -fdruntime and -frtti.\n\t* modules.cc (build_module_tree): Create module info only if\n\tModuleInfo exists.\n\t* toir.cc (IRVisitor::visit(ThrowStatement)): Update test for\n\t-fno-exceptions.\n\t* typeinfo.cc (create_tinfo_types): Build internal typeinfo classes\n\tonly if Object exists.\n\t(have_typeinfo_p): New function.\n\t(class TypeInfoVisitor): Update all calls to build_typeinfo.\n\t(build_typeinfo): Add error when -fno-rtti is set.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* gdc.test/fail_compilation/fail2456.d: New test.\n\t* gdc.test/fail_compilation/test18312.d: New test.\n\t* gdc.test/gdc-test.exp (gdc-convert-args): Handle -betterC.\n\nFrom-SVN: r270518", "tree": {"sha": "4eec38d1f02e2a59de0dc908c56593c54d0d3960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eec38d1f02e2a59de0dc908c56593c54d0d3960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0aebc60b2ac19816f0431241d8f7203e60afb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0aebc60b2ac19816f0431241d8f7203e60afb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0aebc60b2ac19816f0431241d8f7203e60afb01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0aebc60b2ac19816f0431241d8f7203e60afb01/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32efff9f947137bb6f6bf47a846e3bf8a162170a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32efff9f947137bb6f6bf47a846e3bf8a162170a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32efff9f947137bb6f6bf47a846e3bf8a162170a"}], "stats": {"total": 669, "additions": 509, "deletions": 160}, "files": [{"sha": "de191cb7a0215fc9dd489b25f2b3f0d388dbb7b8", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -1,3 +1,34 @@\n+2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc (d_init_versions): Add D_BetterC, D_ModuleInfo,\n+\tD_Exceptions, D_TypeInfo as predefined version conditions.\n+\t* d-codegen.cc (build_bounds_condition): Generate trap if D asserts\n+\tare turned off.\n+\t* d-frontend.cc (getTypeInfoType): Add error when -fno-rtti is set.\n+\t* d-lang.cc (d_init_options): Initialize new front-end options.\n+\t(d_handle_option): Handle -fdruntime, -fexceptions, and -frtti.\n+\t(d_post_options): Turn off D runtime features if -fno-druntime is set.\n+\t* d-spec.cc (lang_specific_driver): Handle -fdruntime.\n+\t* d-tree.h (have_typeinfo_p): Add prototype.\n+\t(build_typeinfo): Update prototype.\n+\t* decl.cc (DeclVisitor::visit(StructDeclaration)): Create typeinfo\n+\tonly if TypeInfo exists.\n+\t(DeclVisitor::visit(ClassDeclaration)): Likewise.\n+\t(DeclVisitor::visit(InterfaceDeclaration)): Likewise.\n+\t(DeclVisitor::visit(EnumDeclaration)): Likewise.\n+\t* expr.cc: Update all calls to build_typeinfo.\n+\t* gdc.texi (Runtime Options): Document -fdruntime and -frtti.\n+\t* lang.opt: Add -fdruntime and -frtti.\n+\t* modules.cc (build_module_tree): Create module info only if\n+\tModuleInfo exists.\n+\t* toir.cc (IRVisitor::visit(ThrowStatement)): Update test for\n+\t-fno-exceptions.\n+\t* typeinfo.cc (create_tinfo_types): Build internal typeinfo classes\n+\tonly if Object exists.\n+\t(have_typeinfo_p): New function.\n+\t(class TypeInfoVisitor): Update all calls to build_typeinfo.\n+\t(build_typeinfo): Add error when -fno-rtti is set.\n+\n 2019-04-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* decl.cc (DeclVisitor::visit(Import)): Set semanticRun after"}, {"sha": "3dbdafb492a89c5e119e72ea2db475afb096da1f", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -447,6 +447,15 @@ d_init_versions (void)\n   if (global.params.useArrayBounds == BOUNDSCHECKoff)\n     VersionCondition::addPredefinedGlobalIdent (\"D_NoBoundsChecks\");\n \n+  if (global.params.betterC)\n+    VersionCondition::addPredefinedGlobalIdent (\"D_BetterC\");\n+  else\n+    {\n+      VersionCondition::addPredefinedGlobalIdent (\"D_ModuleInfo\");\n+      VersionCondition::addPredefinedGlobalIdent (\"D_Exceptions\");\n+      VersionCondition::addPredefinedGlobalIdent (\"D_TypeInfo\");\n+    }\n+\n   VersionCondition::addPredefinedGlobalIdent (\"all\");\n \n   /* Emit all target-specific version identifiers.  */"}, {"sha": "2abff92fc8864b38cebc5defdb5fefc59b59d44a", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -1762,7 +1762,10 @@ build_bounds_condition (const Loc& loc, tree index, tree len, bool inclusive)\n      have already taken care of implicit casts to unsigned.  */\n   tree condition = fold_build2 (inclusive ? GT_EXPR : GE_EXPR,\n \t\t\t\td_bool_type, index, len);\n-  tree boundserr = d_assert_call (loc, LIBCALL_ARRAY_BOUNDS);\n+  /* Terminate the program with a trap if no D runtime present.  */\n+  tree boundserr = (global.params.checkAction == CHECKACTION_D)\n+    ? d_assert_call (loc, LIBCALL_ARRAY_BOUNDS)\n+    : build_call_expr (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n \n   return build_condition (TREE_TYPE (index), condition, boundserr, index);\n }"}, {"sha": "ccd5f50130f6fc824f6ebc05bdeb53bbafca5a30", "filename": "gcc/d/d-frontend.cc", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-frontend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-frontend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-frontend.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -612,8 +612,40 @@ eval_builtin (Loc loc, FuncDeclaration *fd, Expressions *arguments)\n /* Build and return typeinfo type for TYPE.  */\n \n Type *\n-getTypeInfoType (Type *type, Scope *sc)\n+getTypeInfoType (Loc loc, Type *type, Scope *sc)\n {\n+  if (!global.params.useTypeInfo)\n+    {\n+      /* Even when compiling without RTTI we should still be able to evaluate\n+\t TypeInfo at compile-time, just not at run-time.  */\n+      if (!sc || !(sc->flags & SCOPEctfe))\n+\t{\n+\t  static int warned = 0;\n+\n+\t  if (!warned)\n+\t    {\n+\t      error_at (make_location_t (loc),\n+\t\t\t\"%<object.TypeInfo%> cannot be used with -fno-rtti\");\n+\t      warned = 1;\n+\t    }\n+\t}\n+    }\n+\n+  if (Type::dtypeinfo == NULL\n+      || (Type::dtypeinfo->storage_class & STCtemp))\n+    {\n+      /* If TypeInfo has not been declared, warn about each location once.  */\n+      static Loc warnloc;\n+\n+      if (!loc.equals (warnloc))\n+\t{\n+\t  error_at (make_location_t (loc),\n+\t\t    \"%<object.TypeInfo%> could not be found, \"\n+\t\t    \"but is implicitly used\");\n+\t  warnloc = loc;\n+\t}\n+    }\n+\n   gcc_assert (type->ty != Terror);\n   create_typeinfo (type, sc ? sc->_module->importedFrom : NULL);\n   return type->vtinfo->type;"}, {"sha": "62a8ddd69b290e10a42243d5fa58ced8ae03a8b7", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -276,6 +276,9 @@ d_init_options (unsigned int, cl_decoded_option *decoded_options)\n   global.params.useOut = true;\n   global.params.useArrayBounds = BOUNDSCHECKdefault;\n   global.params.useSwitchError = true;\n+  global.params.useModuleInfo = true;\n+  global.params.useTypeInfo = true;\n+  global.params.useExceptions = true;\n   global.params.useInline = false;\n   global.params.obj = true;\n   global.params.hdrStripPlainFunctions = true;\n@@ -467,10 +470,18 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       global.params.ddocfiles->push (arg);\n       break;\n \n+    case OPT_fdruntime:\n+      global.params.betterC = !value;\n+      break;\n+\n     case OPT_fdump_d_original:\n       global.params.vcg_ast = value;\n       break;\n \n+    case OPT_fexceptions:\n+      global.params.useExceptions = value;\n+      break;\n+\n     case OPT_fignore_unknown_pragmas:\n       global.params.ignoreUnsupportedPragmas = value;\n       break;\n@@ -490,7 +501,7 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       break;\n \n     case OPT_fmoduleinfo:\n-      global.params.betterC = !value;\n+      global.params.useModuleInfo = value;\n       break;\n \n     case OPT_fonly_:\n@@ -509,6 +520,10 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       global.params.release = value;\n       break;\n \n+    case OPT_frtti:\n+      global.params.useTypeInfo = value;\n+      break;\n+\n     case OPT_fswitch_errors:\n       global.params.useSwitchError = value;\n       break;\n@@ -728,6 +743,20 @@ d_post_options (const char ** fn)\n \tglobal.params.useSwitchError = false;\n     }\n \n+  if (global.params.betterC)\n+    {\n+      if (!global_options_set.x_flag_moduleinfo)\n+\tglobal.params.useModuleInfo = false;\n+\n+      if (!global_options_set.x_flag_rtti)\n+\tglobal.params.useTypeInfo = false;\n+\n+      if (!global_options_set.x_flag_exceptions)\n+\tglobal.params.useExceptions = false;\n+\n+      global.params.checkAction = CHECKACTION_halt;\n+    }\n+\n   /* Turn off partitioning unless it was explicitly requested, as it doesn't\n      work with D exception chaining, where EH handler uses LSDA to determine\n      whether two thrown exception are in the same context.  */"}, {"sha": "9eba6902bb9fc3a236e985e12dfc031bce17ec54", "filename": "gcc/d/d-spec.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-spec.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -144,6 +144,7 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n   for (i = 1; i < argc; i++)\n     {\n       const char *arg = decoded_options[i].arg;\n+      const int value = decoded_options[i].value;\n \n       switch (decoded_options[i].opt_index)\n \t{\n@@ -161,6 +162,11 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n \t  args[i] |= SKIPOPT;\n \t  break;\n \n+\tcase OPT_fdruntime:\n+\t  if (!value)\n+\t    need_phobos = false;\n+\t  break;\n+\n \tcase OPT_defaultlib_:\n \t  if (defaultlib != NULL)\n \t    free (CONST_CAST (char *, defaultlib));"}, {"sha": "a514bc3902fe54cfdc3df1f1fd078939ad11a0a0", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -647,11 +647,12 @@ extern void d_finish_compilation (tree *, int);\n extern tree build_libcall (libcall_fn, Type *, int ...);\n \n /* In typeinfo.cc.  */\n+extern bool have_typeinfo_p (ClassDeclaration *);\n extern tree layout_typeinfo (TypeInfoDeclaration *);\n extern tree layout_classinfo (ClassDeclaration *);\n extern tree get_typeinfo_decl (TypeInfoDeclaration *);\n extern tree get_classinfo_decl (ClassDeclaration *);\n-extern tree build_typeinfo (Type *);\n+extern tree build_typeinfo (const Loc &, Type *);\n extern void create_typeinfo (Type *, Module *);\n extern void create_tinfo_types (Module *);\n extern void layout_cpp_typeinfo (ClassDeclaration *);"}, {"sha": "49723649230367ee7c9d9515ae2f3ea9d90f7fc9", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -379,7 +379,8 @@ class DeclVisitor : public Visitor\n       return;\n \n     /* Generate TypeInfo.  */\n-    create_typeinfo (d->type, NULL);\n+    if (have_typeinfo_p (Type::dtypeinfo))\n+      create_typeinfo (d->type, NULL);\n \n     /* Generate static initializer.  */\n     d->sinit = aggregate_initializer_decl (d);\n@@ -523,7 +524,9 @@ class DeclVisitor : public Visitor\n     d_finish_decl (d->sinit);\n \n     /* Put out the TypeInfo.  */\n-    create_typeinfo (d->type, NULL);\n+    if (have_typeinfo_p (Type::dtypeinfo))\n+      create_typeinfo (d->type, NULL);\n+\n     DECL_INITIAL (d->csym) = layout_classinfo (d);\n     d_linkonce_linkage (d->csym);\n     d_finish_decl (d->csym);\n@@ -588,8 +591,11 @@ class DeclVisitor : public Visitor\n     d->csym = get_classinfo_decl (d);\n \n     /* Put out the TypeInfo.  */\n-    create_typeinfo (d->type, NULL);\n-    d->type->vtinfo->accept (this);\n+    if (have_typeinfo_p (Type::dtypeinfo))\n+      {\n+\tcreate_typeinfo (d->type, NULL);\n+\td->type->vtinfo->accept (this);\n+      }\n \n     DECL_INITIAL (d->csym) = layout_classinfo (d);\n     d_linkonce_linkage (d->csym);\n@@ -622,7 +628,8 @@ class DeclVisitor : public Visitor\n       return;\n \n     /* Generate TypeInfo.  */\n-    create_typeinfo (d->type, NULL);\n+    if (have_typeinfo_p (Type::dtypeinfo))\n+      create_typeinfo (d->type, NULL);\n \n     TypeEnum *tc = (TypeEnum *) d->type;\n     if (tc->sym->members && !d->type->isZeroInit ())"}, {"sha": "7424576512b79cb218d4ac1f8f4d62304dd15539", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -1,4 +1,4 @@\n-065fbd452f2aa498fc3a554be48a5495bd98aa14\n+3b3dca8be201b443f17621cd29cf614007b5c75e\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "d9a9055cb99b69c6c2e4eb0e3d3351930be35a37", "filename": "gcc/d/dmd/clone.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fclone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fclone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fclone.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -839,7 +839,7 @@ FuncDeclaration *buildPostBlit(StructDeclaration *sd, Scope *sc)\n         }\n         else\n         {\n-            // _ArrayPostblit((cast(S*)this.v.ptr)[0 .. n])\n+            // __ArrayPostblit((cast(S*)this.v.ptr)[0 .. n])\n \n             uinteger_t n = 1;\n             while (tv->ty == Tsarray)\n@@ -865,7 +865,7 @@ FuncDeclaration *buildPostBlit(StructDeclaration *sd, Scope *sc)\n             ((SliceExp *)ex)->upperIsInBounds = true;\n             ((SliceExp *)ex)->lowerIsLessThanUpper = true;\n \n-            ex = new CallExp(loc, new IdentifierExp(loc, Id::_ArrayPostblit), ex);\n+            ex = new CallExp(loc, new IdentifierExp(loc, Id::__ArrayPostblit), ex);\n         }\n         a->push(new ExpStatement(loc, ex)); // combine in forward order\n \n@@ -896,7 +896,7 @@ FuncDeclaration *buildPostBlit(StructDeclaration *sd, Scope *sc)\n         }\n         else\n         {\n-            // _ArrayDtor((cast(S*)this.v.ptr)[0 .. n])\n+            // __ArrayDtor((cast(S*)this.v.ptr)[0 .. n])\n \n             uinteger_t n = 1;\n             while (tv->ty == Tsarray)\n@@ -922,7 +922,7 @@ FuncDeclaration *buildPostBlit(StructDeclaration *sd, Scope *sc)\n             ((SliceExp *)ex)->upperIsInBounds = true;\n             ((SliceExp *)ex)->lowerIsLessThanUpper = true;\n \n-            ex = new CallExp(loc, new IdentifierExp(loc, Id::_ArrayDtor), ex);\n+            ex = new CallExp(loc, new IdentifierExp(loc, Id::__ArrayDtor), ex);\n         }\n         a->push(new OnScopeStatement(loc, TOKon_scope_failure, new ExpStatement(loc, ex)));\n     }\n@@ -1047,7 +1047,7 @@ FuncDeclaration *buildDtor(AggregateDeclaration *ad, Scope *sc)\n         }\n         else\n         {\n-            // _ArrayDtor((cast(S*)this.v.ptr)[0 .. n])\n+            // __ArrayDtor((cast(S*)this.v.ptr)[0 .. n])\n \n             uinteger_t n = 1;\n             while (tv->ty == Tsarray)\n@@ -1073,7 +1073,7 @@ FuncDeclaration *buildDtor(AggregateDeclaration *ad, Scope *sc)\n             ((SliceExp *)ex)->upperIsInBounds = true;\n             ((SliceExp *)ex)->lowerIsLessThanUpper = true;\n \n-            ex = new CallExp(loc, new IdentifierExp(loc, Id::_ArrayDtor), ex);\n+            ex = new CallExp(loc, new IdentifierExp(loc, Id::__ArrayDtor), ex);\n         }\n         e = Expression::combine(ex, e); // combine in reverse order\n     }"}, {"sha": "a3df701c34146b40000ea105dbe3f9947813d2da", "filename": "gcc/d/dmd/dcast.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdcast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdcast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdcast.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -131,7 +131,7 @@ Expression *implicitCastTo(Expression *e, Scope *sc, Type *t)\n             visit((Expression *)e);\n \n             Type *tb = result->type->toBasetype();\n-            if (tb->ty == Tarray)\n+            if (tb->ty == Tarray && global.params.useTypeInfo && Type::dtypeinfo)\n                 semanticTypeInfo(sc, ((TypeDArray *)tb)->next);\n         }\n "}, {"sha": "d0911e21858207a848cd456d657486e0db41d7ae", "filename": "gcc/d/dmd/declaration.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdeclaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdeclaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -2118,7 +2118,7 @@ Expression *VarDeclaration::callScopeDtor(Scope *)\n         }\n         else\n         {\n-            // _ArrayDtor(v[0 .. n])\n+            // __ArrayDtor(v[0 .. n])\n             e = new VarExp(loc, this);\n \n             const d_uns64 sdsz = sd->type->size();\n@@ -2133,7 +2133,7 @@ Expression *VarDeclaration::callScopeDtor(Scope *)\n             // This is a hack so we can call destructors on const/immutable objects.\n             e->type = sd->type->arrayOf();\n \n-            e = new CallExp(loc, new IdentifierExp(loc, Id::_ArrayDtor), e);\n+            e = new CallExp(loc, new IdentifierExp(loc, Id::__ArrayDtor), e);\n         }\n         return e;\n     }"}, {"sha": "acca4e8097db7414038fa9873630ec9d9592f299", "filename": "gcc/d/dmd/dinterpret.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdinterpret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdinterpret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -4633,8 +4633,8 @@ class Interpreter : public Visitor\n             fd = ((VarExp *)ecall)->var->isFuncDeclaration();\n             assert(fd);\n \n-            if (fd->ident == Id::_ArrayPostblit ||\n-                fd->ident == Id::_ArrayDtor)\n+            if (fd->ident == Id::__ArrayPostblit ||\n+                fd->ident == Id::__ArrayDtor)\n             {\n                 assert(e->arguments->dim == 1);\n                 Expression *ea = (*e->arguments)[0];\n@@ -4654,7 +4654,7 @@ class Interpreter : public Visitor\n                 if (CTFEExp::isCantExp(result))\n                     return;\n \n-                if (fd->ident == Id::_ArrayPostblit)\n+                if (fd->ident == Id::__ArrayPostblit)\n                     result = evaluatePostblit(istate, result);\n                 else\n                     result = evaluateDtor(istate, result);"}, {"sha": "1f6fd9f10a6d46ce874142ac3865ef14cd4161ee", "filename": "gcc/d/dmd/dmodule.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -575,69 +575,6 @@ Module *Module::parse()\n             error(\"has non-identifier characters in filename, use module declaration instead\");\n     }\n \n-    // Add internal used functions in 'object' module members.\n-    if (!parent && ident == Id::object)\n-    {\n-        static const utf8_t code_ArrayEq[] =\n-            \"bool _ArrayEq(T1, T2)(T1[] a, T2[] b) {\\n\"\n-            \" if (a.length != b.length) return false;\\n\"\n-            \" foreach (size_t i; 0 .. a.length) { if (a[i] != b[i]) return false; }\\n\"\n-            \" return true; }\\n\";\n-\n-        static const utf8_t code_ArrayPostblit[] =\n-            \"void _ArrayPostblit(T)(T[] a) { foreach (ref T e; a) e.__xpostblit(); }\\n\";\n-\n-        static const utf8_t code_ArrayDtor[] =\n-            \"void _ArrayDtor(T)(T[] a) { foreach_reverse (ref T e; a) e.__xdtor(); }\\n\";\n-\n-        static const utf8_t code_xopEquals[] =\n-            \"bool _xopEquals(in void*, in void*) { throw new Error(\\\"TypeInfo.equals is not implemented\\\"); }\\n\";\n-\n-        static const utf8_t code_xopCmp[] =\n-            \"bool _xopCmp(in void*, in void*) { throw new Error(\\\"TypeInfo.compare is not implemented\\\"); }\\n\";\n-\n-        Identifier *arreq = Id::_ArrayEq;\n-        Identifier *xopeq = Identifier::idPool(\"_xopEquals\");\n-        Identifier *xopcmp = Identifier::idPool(\"_xopCmp\");\n-        for (size_t i = 0; i < members->dim; i++)\n-        {\n-            Dsymbol *sx = (*members)[i];\n-            if (!sx) continue;\n-            if (arreq && sx->ident == arreq) arreq = NULL;\n-            if (xopeq && sx->ident == xopeq) xopeq = NULL;\n-            if (xopcmp && sx->ident == xopcmp) xopcmp = NULL;\n-        }\n-\n-        if (arreq)\n-        {\n-            Parser p(loc, this, code_ArrayEq, strlen((const char *)code_ArrayEq), 0);\n-            p.nextToken();\n-            members->append(p.parseDeclDefs(0));\n-        }\n-        {\n-            Parser p(loc, this, code_ArrayPostblit, strlen((const char *)code_ArrayPostblit), 0);\n-            p.nextToken();\n-            members->append(p.parseDeclDefs(0));\n-        }\n-        {\n-            Parser p(loc, this, code_ArrayDtor, strlen((const char *)code_ArrayDtor), 0);\n-            p.nextToken();\n-            members->append(p.parseDeclDefs(0));\n-        }\n-        if (xopeq)\n-        {\n-            Parser p(loc, this, code_xopEquals, strlen((const char *)code_xopEquals), 0);\n-            p.nextToken();\n-            members->append(p.parseDeclDefs(0));\n-        }\n-        if (xopcmp)\n-        {\n-            Parser p(loc, this, code_xopCmp, strlen((const char *)code_xopCmp), 0);\n-            p.nextToken();\n-            members->append(p.parseDeclDefs(0));\n-        }\n-    }\n-\n     // Insert module into the symbol table\n     Dsymbol *s = this;\n     if (isPackageFile)"}, {"sha": "1338e1f69b04ed99d450d434c975e23da606a692", "filename": "gcc/d/dmd/dstruct.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdstruct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fdstruct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -23,7 +23,7 @@\n #include \"template.h\"\n #include \"tokens.h\"\n \n-Type *getTypeInfoType(Type *t, Scope *sc);\n+Type *getTypeInfoType(Loc loc, Type *t, Scope *sc);\n TypeTuple *toArgTypes(Type *t);\n void unSpeculative(Scope *sc, RootObject *o);\n bool MODimplicitConv(MOD modfrom, MOD modto);\n@@ -101,7 +101,7 @@ void semanticTypeInfo(Scope *sc, Type *t)\n             {\n                 Scope scx;\n                 scx._module = sd->getModule();\n-                getTypeInfoType(t, &scx);\n+                getTypeInfoType(sd->loc, t, &scx);\n                 sd->requestTypeInfo = true;\n             }\n             else if (!sc->minst)\n@@ -111,7 +111,7 @@ void semanticTypeInfo(Scope *sc, Type *t)\n             }\n             else\n             {\n-                getTypeInfoType(t, sc);\n+                getTypeInfoType(sd->loc, t, sc);\n                 sd->requestTypeInfo = true;\n \n                 // Bugzilla 15149, if the typeid operand type comes from a\n@@ -1165,9 +1165,12 @@ void StructDeclaration::semantic(Scope *sc)\n     buildOpAssign(this, sc2);\n     buildOpEquals(this, sc2);\n \n-    xeq = buildXopEquals(this, sc2);\n-    xcmp = buildXopCmp(this, sc2);\n-    xhash = buildXtoHash(this, sc2);\n+    if (global.params.useTypeInfo && Type::dtypeinfo)  // these functions are used for TypeInfo\n+    {\n+        xeq = buildXopEquals(this, sc2);\n+        xcmp = buildXopCmp(this, sc2);\n+        xhash = buildXtoHash(this, sc2);\n+    }\n \n     inv = buildInv(this, sc2);\n "}, {"sha": "19b7ccb72367d225718e28352d74533a9ae9d562", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -46,7 +46,7 @@ bool checkFrameAccess(Loc loc, Scope *sc, AggregateDeclaration *ad, size_t istar\n bool symbolIsVisible(Module *mod, Dsymbol *s);\n VarDeclaration *copyToTemp(StorageClass stc, const char *name, Expression *e);\n Expression *extractSideEffect(Scope *sc, const char *name, Expression **e0, Expression *e, bool alwaysCopy = false);\n-Type *getTypeInfoType(Type *t, Scope *sc);\n+Type *getTypeInfoType(Loc loc, Type *t, Scope *sc);\n bool MODimplicitConv(MOD modfrom, MOD modto);\n MATCH MODmethodConv(MOD modfrom, MOD modto);\n void MODMatchToBuffer(OutBuffer *buf, unsigned char lhsMod, unsigned char rhsMod);\n@@ -713,7 +713,8 @@ class ExpressionSemanticVisitor : public Visitor\n             return setError();\n         }\n \n-        semanticTypeInfo(sc, e->type);\n+        if (global.params.useTypeInfo && Type::dtypeinfo)\n+            semanticTypeInfo(sc, e->type);\n \n         result = e;\n     }\n@@ -1819,7 +1820,7 @@ class ExpressionSemanticVisitor : public Visitor\n         {\n             // Handle this in the glue layer\n             e = new TypeidExp(exp->loc, ta);\n-            e->type = getTypeInfoType(ta, sc);\n+            e->type = getTypeInfoType(exp->loc, ta, sc);\n \n             semanticTypeInfo(sc, ta);\n "}, {"sha": "568decc8cee79307d4433f366ef6e8855d3db27e", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -246,6 +246,15 @@ class NrvoWalker : public StatementRewriteWalker\n             s->finalbody && (des = s->finalbody->isDtorExpStatement()) != NULL &&\n             fd->nrvo_var == des->var)\n         {\n+            if (!(global.params.useExceptions && ClassDeclaration::throwable))\n+            {\n+                /* Don't need to call destructor at all, since it is nrvo\n+                 */\n+                replaceCurrent(s->_body);\n+                s->_body->accept(this);\n+                return;\n+            }\n+\n             /* Normally local variable dtors are called regardless exceptions.\n              * But for nrvo_var, its dtor should be called only when exception is thrown.\n              *\n@@ -1325,6 +1334,16 @@ static void buildEnsureRequire(FuncDeclaration *fdx)\n     }\n }\n \n+/* Determine if function should add `return 0;`\n+ */\n+static bool addReturn0(FuncDeclaration *funcdecl)\n+{\n+    TypeFunction *f = (TypeFunction *)funcdecl->type;\n+\n+    return f->next->ty == Tvoid &&\n+        (funcdecl->isMain() || (global.params.betterC && funcdecl->isCMain()));\n+}\n+\n // Do the semantic analysis on the internals of the function.\n \n void FuncDeclaration::semantic3(Scope *sc)\n@@ -1708,7 +1727,10 @@ void FuncDeclaration::semantic3(Scope *sc)\n                     Expression *exp = (*returns)[i]->exp;\n                     if (exp->op == TOKvar && ((VarExp *)exp)->var == vresult)\n                     {\n-                        exp->type = f->next;\n+                        if (addReturn0(this))\n+                            exp->type = Type::tint32;\n+                        else\n+                            exp->type = f->next;\n                         // Remove `return vresult;` from returns\n                         returns->remove(i);\n                         continue;\n@@ -1901,7 +1923,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n \n             if (returns)\n             {\n-                bool implicit0 = (f->next->ty == Tvoid && isMain());\n+                bool implicit0 = addReturn0(this);\n                 Type *tret = implicit0 ? Type::tint32 : f->next;\n                 assert(tret->ty != Tvoid);\n                 if (vresult || returnLabel)\n@@ -2123,7 +2145,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n                     a->push(s);\n                 }\n             }\n-            if (isMain() && f->next->ty == Tvoid)\n+            if (addReturn0(this))\n             {\n                 // Add a return 0; statement\n                 Statement *s = new ReturnStatement(Loc(), new IntegerExp(0));"}, {"sha": "1094679b83761071c345564399c66b87ef38a5b0", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -36,6 +36,14 @@ enum BOUNDSCHECK\n     BOUNDSCHECKsafeonly // do bounds checking only in @safe functions\n };\n \n+typedef unsigned char CHECKACTION;\n+enum\n+{\n+    CHECKACTION_D,        // call D assert on failure\n+    CHECKACTION_C,        // call C assert on failure\n+    CHECKACTION_halt      // cause program halt on failure\n+};\n+\n enum CPU\n {\n     x87,\n@@ -116,6 +124,9 @@ struct Param\n     bool nofloat;       // code should not pull in floating point support\n     bool ignoreUnsupportedPragmas;      // rather than error on them\n     bool enforcePropertySyntax;\n+    bool useModuleInfo; // generate runtime module information\n+    bool useTypeInfo;   // generate runtime type information\n+    bool useExceptions; // support exception handling\n     bool betterC;       // be a \"better C\" compiler; no dependency on D runtime\n     bool addMain;       // add a default main() function\n     bool allInst;       // generate code for all template instantiations\n@@ -126,7 +137,9 @@ struct Param\n     bool showGaggedErrors;  // print gagged errors anyway\n \n     CPU cpu;                // CPU instruction set to target\n-    BOUNDSCHECK useArrayBounds;\n+\n+    BOUNDSCHECK useArrayBounds;    // when to generate code for array bounds checks\n+    CHECKACTION checkAction;       // action to take when bounds, asserts or switch defaults are violated\n \n     const char *argv0;    // program name\n     Array<const char *> *modFileAliasStrings; // array of char*'s of -I module filename alias strings"}, {"sha": "dc0ecd138615a4c0a61dd278ff445ac419d84dae", "filename": "gcc/d/dmd/idgen.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fidgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fidgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidgen.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -264,9 +264,9 @@ Msgtable msgtable[] =\n     { \"monitorexit\", \"_d_monitorexit\" },\n     { \"criticalenter\", \"_d_criticalenter\" },\n     { \"criticalexit\", \"_d_criticalexit\" },\n-    { \"_ArrayEq\", NULL },\n-    { \"_ArrayPostblit\", NULL },\n-    { \"_ArrayDtor\", NULL },\n+    { \"__ArrayEq\", NULL },\n+    { \"__ArrayPostblit\", NULL },\n+    { \"__ArrayDtor\", NULL },\n     { \"dup\", NULL },\n     { \"_aaApply\", NULL },\n     { \"_aaApply2\", NULL },"}, {"sha": "b3ea6cf467184729e8860a16efca96f3aab9fbc2", "filename": "gcc/d/dmd/opover.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fopover.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fopover.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fopover.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -900,7 +900,9 @@ Expression *op_overload(Expression *e, Scope *sc)\n             if (t->ty != Tstruct)\n                 return false;\n \n-            semanticTypeInfo(sc, t);\n+            if (global.params.useTypeInfo && Type::dtypeinfo)\n+                semanticTypeInfo(sc, t);\n+\n             return ((TypeStruct *)t)->sym->hasIdentityEquals;\n         }\n \n@@ -919,9 +921,9 @@ Expression *op_overload(Expression *e, Scope *sc)\n                 if (needsDirectEq(t1, t2, sc))\n                 {\n                     /* Rewrite as:\n-                     *      _ArrayEq(e1, e2)\n+                     *      __ArrayEq(e1, e2)\n                      */\n-                    Expression *eeq = new IdentifierExp(e->loc, Id::_ArrayEq);\n+                    Expression *eeq = new IdentifierExp(e->loc, Id::__ArrayEq);\n                     result = new CallExp(e->loc, eeq, e->e1, e->e2);\n                     if (e->op == TOKnotequal)\n                         result = new NotExp(e->loc, result);"}, {"sha": "9da58af046d2983bbf03b86a59ddb81f3c2e2352", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -70,7 +70,6 @@ Parser::Parser(Loc loc, Module *module, const utf8_t *base, size_t length, bool\n     //printf(\"Parser::Parser()\\n\");\n     scanloc = loc;\n \n-#ifndef IN_GCC\n     if (loc.filename)\n     {\n         /* Create a pseudo-filename for the mixin string, as it may not even exist\n@@ -80,7 +79,6 @@ Parser::Parser(Loc loc, Module *module, const utf8_t *base, size_t length, bool\n         sprintf(filename, \"%s-mixin-%d\", loc.filename, (int)loc.linnum);\n         scanloc.filename = filename;\n     }\n-#endif\n \n     mod = module;\n     md = NULL;"}, {"sha": "64cc42d9ce9b48a6643c5d3834a6a4669a6df3a6", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -2073,8 +2073,19 @@ class StatementSemanticVisitor : public Visitor\n             CompoundStatement *cs;\n             Statement *s;\n \n-            if (global.params.useSwitchError)\n-                s = new SwitchErrorStatement(ss->loc);\n+            if (global.params.useSwitchError &&\n+                global.params.checkAction != CHECKACTION_halt)\n+            {\n+                if (global.params.checkAction == CHECKACTION_C)\n+                {\n+                    /* Rewrite as an assert(0) and let e2ir generate\n+                     * the call to the C assert failure function\n+                     */\n+                    s = new ExpStatement(ss->loc, new AssertExp(ss->loc, new IntegerExp(ss->loc, 0, Type::tint32)));\n+                }\n+                else\n+                    s = new SwitchErrorStatement(ss->loc);\n+            }\n             else\n                 s = new ExpStatement(ss->loc, new HaltExp(ss->loc));\n \n@@ -3118,6 +3129,18 @@ class StatementSemanticVisitor : public Visitor\n \n     void visit(TryCatchStatement *tcs)\n     {\n+        if (!global.params.useExceptions)\n+        {\n+            tcs->error(\"Cannot use try-catch statements with -betterC\");\n+            return setError();\n+        }\n+\n+        if (!ClassDeclaration::throwable)\n+        {\n+            tcs->error(\"Cannot use try-catch statements because `object.Throwable` was not declared\");\n+            return setError();\n+        }\n+\n         unsigned flags = 0;\n         const unsigned FLAGcpp = 1;\n         const unsigned FLAGd = 2;\n@@ -3227,7 +3250,14 @@ class StatementSemanticVisitor : public Visitor\n             return;\n         }\n \n-        if (blockExit(tfs->_body, sc->func, false) == BEfallthru)\n+        int blockexit = blockExit(tfs->_body, sc->func, false);\n+\n+        // if not worrying about exceptions\n+        if (!(global.params.useExceptions && ClassDeclaration::throwable))\n+            blockexit &= ~BEthrow;            // don't worry about paths that otherwise may throw\n+\n+        // Don't care about paths that halt, either\n+        if ((blockexit & ~BEhalt) == BEfallthru)\n         {\n             result = new CompoundStatement(tfs->loc, tfs->_body, tfs->finalbody);\n             return;\n@@ -3237,7 +3267,6 @@ class StatementSemanticVisitor : public Visitor\n \n     void visit(OnScopeStatement *oss)\n     {\n-#ifndef IN_GCC\n         if (oss->tok != TOKon_scope_exit)\n         {\n             // scope(success) and scope(failure) are rewritten to try-catch(-finally) statement,\n@@ -3255,7 +3284,6 @@ class StatementSemanticVisitor : public Visitor\n                 return setError();\n             }\n         }\n-#endif\n \n         sc = sc->push();\n         sc->tf = NULL;\n@@ -3281,6 +3309,18 @@ class StatementSemanticVisitor : public Visitor\n     {\n         //printf(\"ThrowStatement::semantic()\\n\");\n \n+        if (!global.params.useExceptions)\n+        {\n+            ts->error(\"Cannot use `throw` statements with -betterC\");\n+            return setError();\n+        }\n+\n+        if (!ClassDeclaration::throwable)\n+        {\n+            ts->error(\"Cannot use `throw` statements because `object.Throwable` was not declared\");\n+            return setError();\n+        }\n+\n         FuncDeclaration *fd = sc->parent->isFuncDeclaration();\n         fd->hasReturnExp |= 2;\n \n@@ -3463,7 +3503,6 @@ void semantic(Catch *c, Scope *sc)\n {\n     //printf(\"Catch::semantic(%s)\\n\", ident->toChars());\n \n-#ifndef IN_GCC\n     if (sc->os && sc->os->tok != TOKon_scope_failure)\n     {\n         // If enclosing is scope(success) or scope(exit), this will be placed in finally block.\n@@ -3481,7 +3520,6 @@ void semantic(Catch *c, Scope *sc)\n         error(c->loc, \"cannot put catch statement inside finally block\");\n         c->errors = true;\n     }\n-#endif\n \n     ScopeDsymbol *sym = new ScopeDsymbol();\n     sym->parent = sc->scopesym;"}, {"sha": "6497619e5fdeb130dffe17d48694d9f0dbe67aa1", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -424,7 +424,7 @@ class ExprVisitor : public Visitor\n \t    tree result = build_libcall (LIBCALL_ADEQ2, e->type, 3,\n \t\t\t\t\t d_array_convert (e->e1),\n \t\t\t\t\t d_array_convert (e->e2),\n-\t\t\t\t\t build_typeinfo (t1array));\n+\t\t\t\t\t build_typeinfo (e->loc, t1array));\n \n \t    if (e->op == TOKnotequal)\n \t      result = build1 (TRUTH_NOT_EXPR, build_ctype (e->type), result);\n@@ -449,7 +449,7 @@ class ExprVisitor : public Visitor\n \t/* Use _aaEqual() for associative arrays.  */\n \tTypeAArray *taa1 = (TypeAArray *) tb1;\n \ttree result = build_libcall (LIBCALL_AAEQUAL, e->type, 3,\n-\t\t\t\t     build_typeinfo (taa1),\n+\t\t\t\t     build_typeinfo (e->loc, taa1),\n \t\t\t\t     build_expr (e->e1),\n \t\t\t\t     build_expr (e->e2));\n \n@@ -485,7 +485,7 @@ class ExprVisitor : public Visitor\n     /* Build a call to _aaInX().  */\n     this->result_ = build_libcall (LIBCALL_AAINX, e->type, 3,\n \t\t\t\t   build_expr (e->e2),\n-\t\t\t\t   build_typeinfo (tkey),\n+\t\t\t\t   build_typeinfo (e->loc, tkey),\n \t\t\t\t   build_address (key));\n   }\n \n@@ -533,7 +533,7 @@ class ExprVisitor : public Visitor\n \ttree call = build_libcall (LIBCALL_ADCMP2, Type::tint32, 3,\n \t\t\t\t   d_array_convert (e->e1),\n \t\t\t\t   d_array_convert (e->e2),\n-\t\t\t\t   build_typeinfo (telem->arrayOf ()));\n+\t\t\t\t   build_typeinfo (e->loc, telem->arrayOf ()));\n \tresult = build_boolop (code, call, integer_zero_node);\n \n \tthis->result_ = d_convert (build_ctype (e->type), result);\n@@ -745,13 +745,13 @@ class ExprVisitor : public Visitor\n \t\t\t\t   size_int (ndims), build_address (var));\n \n \tresult = build_libcall (LIBCALL_ARRAYCATNTX, e->type, 2,\n-\t\t\t\tbuild_typeinfo (e->type), arrs);\n+\t\t\t\tbuild_typeinfo (e->loc, e->type), arrs);\n       }\n     else\n       {\n \t/* Handle single concatenation (a ~ b).  */\n \tresult = build_libcall (LIBCALL_ARRAYCATT, e->type, 3,\n-\t\t\t\tbuild_typeinfo (e->type),\n+\t\t\t\tbuild_typeinfo (e->loc, e->type),\n \t\t\t\td_array_convert (etype, e->e1, &elemvars),\n \t\t\t\td_array_convert (etype, e->e2, &elemvars));\n       }\n@@ -859,7 +859,7 @@ class ExprVisitor : public Visitor\n       {\n \tgcc_assert (tb1->ty == Tarray || tb2->ty == Tsarray);\n \n-\ttree tinfo = build_typeinfo (e->type);\n+\ttree tinfo = build_typeinfo (e->loc, e->type);\n \ttree ptr = build_address (build_expr (e->e1));\n \n \tif ((tb2->ty == Tarray || tb2->ty == Tsarray)\n@@ -924,7 +924,7 @@ class ExprVisitor : public Visitor\n \t  ? LIBCALL_ARRAYSETLENGTHT : LIBCALL_ARRAYSETLENGTHIT;\n \n \ttree result = build_libcall (libcall, ale->e1->type, 3,\n-\t\t\t\t     build_typeinfo (ale->e1->type),\n+\t\t\t\t     build_typeinfo (ale->loc, ale->e1->type),\n \t\t\t\t     newlength, ptr);\n \n \tthis->result_ = d_array_length (result);\n@@ -954,7 +954,8 @@ class ExprVisitor : public Visitor\n \t\tlibcall_fn libcall = (e->op == TOKconstruct)\n \t\t  ? LIBCALL_ARRAYSETCTOR : LIBCALL_ARRAYSETASSIGN;\n \t\t/* So we can call postblits on const/immutable objects.  */\n-\t\ttree ti = build_typeinfo (etype->unSharedOf ()->mutableOf ());\n+\t\tType *tm = etype->unSharedOf ()->mutableOf ();\n+\t\ttree ti = build_typeinfo (e->loc, tm);\n \n \t\ttree result = build_libcall (libcall, Type::tvoid, 4,\n \t\t\t\t\t     d_array_ptr (t1),\n@@ -1004,7 +1005,7 @@ class ExprVisitor : public Visitor\n \t\t  ? LIBCALL_ARRAYCTOR : LIBCALL_ARRAYASSIGN;\n \n \t\tthis->result_ = build_libcall (libcall, e->type, 3,\n-\t\t\t\t\t       build_typeinfo (etype),\n+\t\t\t\t\t       build_typeinfo (e->loc, etype),\n \t\t\t\t\t       d_array_convert (e->e2),\n \t\t\t\t\t       d_array_convert (e->e1));\n \t      }\n@@ -1133,7 +1134,7 @@ class ExprVisitor : public Visitor\n \t  {\n \t    /* Generate: _d_arrayctor(ti, from, to)  */\n \t    result = build_libcall (LIBCALL_ARRAYCTOR, arrtype, 3,\n-\t\t\t\t    build_typeinfo (etype),\n+\t\t\t\t    build_typeinfo (e->loc, etype),\n \t\t\t\t    d_array_convert (e->e2),\n \t\t\t\t    d_array_convert (e->e1));\n \t  }\n@@ -1146,7 +1147,7 @@ class ExprVisitor : public Visitor\n \t    tree elembuf = build_local_temp (build_ctype (etype));\n \n \t    result = build_libcall (libcall, arrtype, 4,\n-\t\t\t\t    build_typeinfo (etype),\n+\t\t\t\t    build_typeinfo (e->loc, etype),\n \t\t\t\t    d_array_convert (e->e2),\n \t\t\t\t    d_array_convert (e->e1),\n \t\t\t\t    build_address (elembuf));\n@@ -1210,13 +1211,13 @@ class ExprVisitor : public Visitor\n \t  {\n \t    libcall = LIBCALL_AAGETY;\n \t    ptr = build_address (build_expr (e->e1));\n-\t    tinfo = build_typeinfo (tb1->unSharedOf ()->mutableOf ());\n+\t    tinfo = build_typeinfo (e->loc, tb1->unSharedOf ()->mutableOf ());\n \t  }\n \telse\n \t  {\n \t    libcall = LIBCALL_AAGETRVALUEX;\n \t    ptr = build_expr (e->e1);\n-\t    tinfo = build_typeinfo (tkey);\n+\t    tinfo = build_typeinfo (e->loc, tkey);\n \t  }\n \n \t/* Index the associative array.  */\n@@ -1227,7 +1228,10 @@ class ExprVisitor : public Visitor\n \n \tif (!e->indexIsInBounds && array_bounds_check ())\n \t  {\n-\t    tree tassert = d_assert_call (e->loc, LIBCALL_ARRAY_BOUNDS);\n+\t    tree tassert = (global.params.checkAction == CHECKACTION_D)\n+\t      ? d_assert_call (e->loc, LIBCALL_ARRAY_BOUNDS)\n+\t      : build_call_expr (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+\n \t    result = d_save_expr (result);\n \t    result = build_condition (TREE_TYPE (result),\n \t\t\t\t      d_truthvalue_conversion (result),\n@@ -1486,7 +1490,7 @@ class ExprVisitor : public Visitor\n \t    /* Might need to run destructor on array contents.  */\n \t    TypeStruct *ts = (TypeStruct *) telem;\n \t    if (ts->sym->dtor)\n-\t      ti = build_typeinfo (tb1->nextOf ());\n+\t      ti = build_typeinfo (e->loc, tb1->nextOf ());\n \t  }\n \n \t/* Generate: _delarray_t (&t1, ti);  */\n@@ -1505,8 +1509,9 @@ class ExprVisitor : public Visitor\n \t    TypeStruct *ts = (TypeStruct *)tnext;\n \t    if (ts->sym->dtor)\n \t      {\n+\t\ttree ti = build_typeinfo (e->loc, tnext);\n \t\tthis->result_ = build_libcall (LIBCALL_DELSTRUCT, Type::tvoid,\n-\t\t\t\t\t       2, t1, build_typeinfo (tnext));\n+\t\t\t\t\t       2, t1, ti);\n \t\treturn;\n \t      }\n \t  }\n@@ -1536,7 +1541,7 @@ class ExprVisitor : public Visitor\n \n \tthis->result_ = build_libcall (LIBCALL_AADELX, Type::tbool, 3,\n \t\t\t\t       build_expr (e->e1),\n-\t\t\t\t       build_typeinfo (tkey),\n+\t\t\t\t       build_typeinfo (e->loc, tkey),\n \t\t\t\t       build_address (index));\n       }\n     else\n@@ -1967,7 +1972,8 @@ class ExprVisitor : public Visitor\n     tree assert_pass = void_node;\n     tree assert_fail;\n \n-    if (global.params.useAssert)\n+    if (global.params.useAssert\n+\t&& global.params.checkAction == CHECKACTION_D)\n       {\n \t/* Generate: ((bool) e1  ? (void)0 : _d_assert (...))\n \t\t or: (e1 != null ? e1._invariant() : _d_assert (...))  */\n@@ -2011,6 +2017,13 @@ class ExprVisitor : public Visitor\n \t      }\n \t  }\n       }\n+    else if (global.params.useAssert\n+\t     && global.params.checkAction == CHECKACTION_C)\n+      {\n+\t/* Generate: __builtin_trap()  */\n+\ttree fn = builtin_decl_explicit (BUILT_IN_TRAP);\n+\tassert_fail = build_call_expr (fn, 0);\n+      }\n     else\n       {\n \t/* Assert contracts are turned off, if the contract condition has no\n@@ -2066,7 +2079,7 @@ class ExprVisitor : public Visitor\n   {\n     if (Type *tid = isType (e->obj))\n       {\n-\ttree ti = build_typeinfo (tid);\n+\ttree ti = build_typeinfo (e->loc, tid);\n \n \t/* If the typeinfo is at an offset.  */\n \tif (tid->vtinfo->offset)\n@@ -2390,7 +2403,7 @@ class ExprVisitor : public Visitor\n \t    /* Generate: _d_newitemT()  */\n \t    libcall_fn libcall = htype->isZeroInit ()\n \t      ? LIBCALL_NEWITEMT : LIBCALL_NEWITEMIT;\n-\t    tree arg = build_typeinfo (e->newtype);\n+\t    tree arg = build_typeinfo (e->loc, e->newtype);\n \t    new_call = build_libcall (libcall, tb, 1, arg);\n \t  }\n \n@@ -2461,7 +2474,7 @@ class ExprVisitor : public Visitor\n \t    libcall_fn libcall = tarray->next->isZeroInit ()\n \t      ? LIBCALL_NEWARRAYT : LIBCALL_NEWARRAYIT;\n \t    result = build_libcall (libcall, tb, 2,\n-\t\t\t\t    build_typeinfo (e->type),\n+\t\t\t\t    build_typeinfo (e->loc, e->type),\n \t\t\t\t    build_expr (arg));\n \t  }\n \telse\n@@ -2491,7 +2504,7 @@ class ExprVisitor : public Visitor\n \t    libcall_fn libcall = telem->isZeroInit ()\n \t      ? LIBCALL_NEWARRAYMTX : LIBCALL_NEWARRAYMITX;\n \n-\t    tree tinfo = build_typeinfo (e->type);\n+\t    tree tinfo = build_typeinfo (e->loc, e->type);\n \t    tree dims = d_array_value (build_ctype (Type::tsize_t->arrayOf ()),\n \t\t\t\t       size_int (e->arguments->dim),\n \t\t\t\t       build_address (var));\n@@ -2519,7 +2532,7 @@ class ExprVisitor : public Visitor\n \tlibcall_fn libcall = tpointer->next->isZeroInit (e->loc)\n \t  ? LIBCALL_NEWITEMT : LIBCALL_NEWITEMIT;\n \n-\ttree arg = build_typeinfo (e->newtype);\n+\ttree arg = build_typeinfo (e->loc, e->newtype);\n \tresult = build_libcall (libcall, tb, 1, arg);\n \n \tif (e->arguments && e->arguments->dim == 1)\n@@ -2746,7 +2759,7 @@ class ExprVisitor : public Visitor\n \t/* Allocate space on the memory managed heap.  */\n \ttree mem = build_libcall (LIBCALL_ARRAYLITERALTX,\n \t\t\t\t  etype->pointerTo (), 2,\n-\t\t\t\t  build_typeinfo (etype->arrayOf ()),\n+\t\t\t\t  build_typeinfo (e->loc, etype->arrayOf ()),\n \t\t\t\t  size_int (e->elements->dim));\n \tmem = d_save_expr (mem);\n \n@@ -2821,7 +2834,7 @@ class ExprVisitor : public Visitor\n \t\t\t       build_address (avals));\n \n     tree mem = build_libcall (LIBCALL_ASSOCARRAYLITERALTX, Type::tvoidptr, 3,\n-\t\t\t      build_typeinfo (ta), keys, vals);\n+\t\t\t      build_typeinfo (e->loc, ta), keys, vals);\n \n     /* Return an associative array pointed to by MEM.  */\n     tree aatype = build_ctype (ta);"}, {"sha": "bf2621039887e3d9dbbcb71beb8642fdc3a48466", "filename": "gcc/d/gdc.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fgdc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fgdc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fgdc.texi?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -233,6 +233,18 @@ is compiled into the program.\n Turns on compilation of any @code{debug} code identified by @var{ident}.\n @end table\n \n+@item -fno-druntime\n+@cindex @option{-fdruntime}\n+@cindex @option{-fno-druntime}\n+Implements @uref{https://dlang.org/spec/betterc.html}.  Assumes that\n+compilation targets an environment without a D runtime library.\n+\n+This is equivalent to compiling with the following options:\n+\n+@example\n+gdc -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti\n+@end example\n+\n @item -fno-invariants\n @cindex @option{-finvariants}\n @cindex @option{-fno-invariants}\n@@ -279,6 +291,13 @@ gdc -fno-assert -fbounds-check=safe -fno-invariants \\\n     -fno-postconditions -fno-preconditions -fno-switch-errors\n @end example\n \n+@item -fno-rtti\n+@cindex @option{-frtti}\n+@cindex @option{-fno-rtti}\n+Turns off generation of run-time type information for all user defined types.\n+Any code that uses features of the language that require access to this\n+information will result in an error.\n+\n @item -fno-switch-errors\n @cindex @option{-fswitch-errors}\n @cindex @option{-fno-switch-errors}"}, {"sha": "26cf52c6ca75b107fc55bebc2b3b4c054fa4c61b", "filename": "gcc/d/lang.opt", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Flang.opt?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -229,6 +229,10 @@ fdoc-inc=\n D Joined RejectNegative\n -fdoc-inc=<file>\tInclude a Ddoc macro <file>.\n \n+fdruntime\n+D\n+Assume that standard D runtime libraries and \\\"D main\\\" exist.\n+\n fdump-d-original\n D\n Display the frontend AST after parsing and semantic passes.\n@@ -250,7 +254,7 @@ D Joined RejectNegative\n -fmodule-file=<package.module>=<filespec>\tuse <filespec> as source file for <package.module>.\n \n fmoduleinfo\n-D\n+D Var(flag_moduleinfo)\n Generate ModuleInfo struct for output module.\n \n fonly=\n@@ -269,6 +273,10 @@ frelease\n D\n Compile release version.\n \n+frtti\n+D\n+; Documented in C\n+\n fswitch-errors\n D Var(flag_switch_errors)\n Generate code for switches without a default case."}, {"sha": "88cc5e89e9a7e90b5850bccba3f6b7b02817a072", "filename": "gcc/d/modules.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fmodules.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Fmodules.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fmodules.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -776,7 +776,8 @@ build_module_tree (Module *decl)\n \n   /* Default behavior is to always generate module info because of templates.\n      Can be switched off for not compiling against runtime library.  */\n-  if (!global.params.betterC\n+  if (global.params.useModuleInfo\n+      && Module::moduleinfo != NULL\n       && decl->ident != Identifier::idPool (\"__entrypoint\"))\n     {\n       if (mi.ctors || mi.ctorgates)"}, {"sha": "f1b2e09a94d2158b1bbcd3ffa4ac45cb9c0393c8", "filename": "gcc/d/toir.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Ftoir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Ftoir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftoir.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -1120,7 +1120,7 @@ class IRVisitor : public Visitor\n     InterfaceDeclaration *id = cd->isInterfaceDeclaration ();\n     tree arg = build_expr_dtor (s->exp);\n \n-    if (!flag_exceptions)\n+    if (!global.params.useExceptions)\n       {\n \tstatic int warned = 0;\n \tif (!warned)"}, {"sha": "ffa7e23786512754f73b4115a333d3334bb10cb0", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 60, "deletions": 18, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -227,6 +227,10 @@ create_tinfo_types (Module *mod)\n \t\t\t  ptr_type_node, d_uint_type, ptr_type_node,\n \t\t\t  array_type_node, ptr_type_node, ptr_type_node, NULL);\n \n+  /* If there's no Object class defined, then neither can TypeInfo be.  */\n+  if (ClassDeclaration::object == NULL)\n+    return;\n+\n   /* Create all frontend TypeInfo classes declarations.  We rely on all\n      existing, even if only just as stubs.  */\n   if (!Type::dtypeinfo)\n@@ -289,6 +293,27 @@ create_tinfo_types (Module *mod)\n \t\t\t    ClassDeclaration::object);\n }\n \n+/* Return true if TypeInfo class TINFO is available in the runtime library.  */\n+\n+bool\n+have_typeinfo_p (ClassDeclaration *tinfo)\n+{\n+  /* Run-time typeinfo disabled on command line.  */\n+  if (!global.params.useTypeInfo)\n+    return false;\n+\n+  /* Can't layout TypeInfo if type is not declared, or is an opaque\n+     declaration in the object module.  */\n+  if (!tinfo || !tinfo->members)\n+    return false;\n+\n+  /* Typeinfo is compiler-generated.  */\n+  if (tinfo->storage_class & STCtemp)\n+    return false;\n+\n+  return true;\n+}\n+\n /* Implements the visitor interface to build the TypeInfo layout of all\n    TypeInfoDeclaration AST classes emitted from the D Front-end.\n    All visit methods accept one parameter D, which holds the frontend AST\n@@ -338,7 +363,12 @@ class TypeInfoVisitor : public Visitor\n   void layout_base (ClassDeclaration *cd)\n   {\n     gcc_assert (cd != NULL);\n-    this->layout_field (build_address (get_vtable_decl (cd)));\n+\n+    if (have_typeinfo_p (cd))\n+      this->layout_field (build_address (get_vtable_decl (cd)));\n+    else\n+      this->layout_field (null_pointer_node);\n+\n     this->layout_field (null_pointer_node);\n   }\n \n@@ -490,7 +520,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfoconst);\n \n     /* TypeInfo for the mutable type.  */\n-    this->layout_field (build_typeinfo (tm));\n+    this->layout_field (build_typeinfo (d->loc, tm));\n   }\n \n   /* Layout of TypeInfo_Immutable is:\n@@ -507,7 +537,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfoinvariant);\n \n     /* TypeInfo for the mutable type.  */\n-    this->layout_field (build_typeinfo (tm));\n+    this->layout_field (build_typeinfo (d->loc, tm));\n   }\n \n   /* Layout of TypeInfo_Shared is:\n@@ -524,7 +554,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfoshared);\n \n     /* TypeInfo for the unshared type.  */\n-    this->layout_field (build_typeinfo (tm));\n+    this->layout_field (build_typeinfo (d->loc, tm));\n   }\n \n   /* Layout of TypeInfo_Inout is:\n@@ -541,7 +571,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfowild);\n \n     /* TypeInfo for the mutable type.  */\n-    this->layout_field (build_typeinfo (tm));\n+    this->layout_field (build_typeinfo (d->loc, tm));\n   }\n \n   /* Layout of TypeInfo_Enum is:\n@@ -561,7 +591,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfoenum);\n \n     /* TypeInfo for enum members.  */\n-    tree memtype = (ed->memtype) ? build_typeinfo (ed->memtype)\n+    tree memtype = (ed->memtype) ? build_typeinfo (d->loc, ed->memtype)\n       : null_pointer_node;\n     this->layout_field (memtype);\n \n@@ -593,7 +623,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfopointer);\n \n     /* TypeInfo for pointer-to type.  */\n-    this->layout_field (build_typeinfo (ti->next));\n+    this->layout_field (build_typeinfo (d->loc, ti->next));\n   }\n \n   /* Layout of TypeInfo_Array is:\n@@ -610,7 +640,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfoarray);\n \n     /* TypeInfo for array of type.  */\n-    this->layout_field (build_typeinfo (ti->next));\n+    this->layout_field (build_typeinfo (d->loc, ti->next));\n   }\n \n   /* Layout of TypeInfo_StaticArray is:\n@@ -628,7 +658,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfostaticarray);\n \n     /* TypeInfo for array of type.  */\n-    this->layout_field (build_typeinfo (ti->next));\n+    this->layout_field (build_typeinfo (d->loc, ti->next));\n \n     /* Static array length.  */\n     this->layout_field (size_int (ti->dim->toInteger ()));\n@@ -649,10 +679,10 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfoassociativearray);\n \n     /* TypeInfo for value of type.  */\n-    this->layout_field (build_typeinfo (ti->next));\n+    this->layout_field (build_typeinfo (d->loc, ti->next));\n \n     /* TypeInfo for index of type.  */\n-    this->layout_field (build_typeinfo (ti->index));\n+    this->layout_field (build_typeinfo (d->loc, ti->index));\n   }\n \n   /* Layout of TypeInfo_Vector is:\n@@ -669,7 +699,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfovector);\n \n     /* TypeInfo for equivalent static array.  */\n-    this->layout_field (build_typeinfo (ti->basetype));\n+    this->layout_field (build_typeinfo (d->loc, ti->basetype));\n   }\n \n   /* Layout of TypeInfo_Function is:\n@@ -687,7 +717,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfofunction);\n \n     /* TypeInfo for function return value.  */\n-    this->layout_field (build_typeinfo (ti->next));\n+    this->layout_field (build_typeinfo (d->loc, ti->next));\n \n     /* Mangled name of function declaration.  */\n     this->layout_string (d->tinfo->deco);\n@@ -708,7 +738,7 @@ class TypeInfoVisitor : public Visitor\n     this->layout_base (Type::typeinfodelegate);\n \n     /* TypeInfo for delegate return value.  */\n-    this->layout_field (build_typeinfo (ti->next));\n+    this->layout_field (build_typeinfo (d->loc, ti->next));\n \n     /* Mangled name of delegate declaration.  */\n     this->layout_string (d->tinfo->deco);\n@@ -1038,12 +1068,12 @@ class TypeInfoVisitor : public Visitor\n     if (global.params.is64bit)\n       {\n \t/* TypeInfo m_arg1;  */\n-\ttree arg1type = (sd->arg1type) ? build_typeinfo (sd->arg1type)\n+\ttree arg1type = (sd->arg1type) ? build_typeinfo (d->loc, sd->arg1type)\n \t  : null_pointer_node;\n \tthis->layout_field (arg1type);\n \n \t/* TypeInfo m_arg2;  */\n-\ttree arg2type = (sd->arg2type) ? build_typeinfo (sd->arg2type)\n+\ttree arg2type = (sd->arg2type) ? build_typeinfo (d->loc, sd->arg2type)\n \t  : null_pointer_node;\n \tthis->layout_field (arg2type);\n       }\n@@ -1075,7 +1105,7 @@ class TypeInfoVisitor : public Visitor\n       {\n \tParameter *arg = (*ti->arguments)[i];\n \tCONSTRUCTOR_APPEND_ELT (elms, size_int (i),\n-\t\t\t\tbuild_typeinfo (arg->type));\n+\t\t\t\tbuild_typeinfo (d->loc, arg->type));\n       }\n     tree ctor = build_constructor (build_ctype (satype), elms);\n     tree decl = build_artificial_decl (TREE_TYPE (ctor), ctor);\n@@ -1311,8 +1341,20 @@ get_classinfo_decl (ClassDeclaration *decl)\n /* Returns typeinfo reference for TYPE.  */\n \n tree\n-build_typeinfo (Type *type)\n+build_typeinfo (const Loc &loc, Type *type)\n {\n+  if (!global.params.useTypeInfo)\n+    {\n+      static int warned = 0;\n+\n+      if (!warned)\n+\t{\n+\t  error_at (make_location_t (loc),\n+\t\t    \"%<object.TypeInfo%> cannot be used with -fno-rtti\");\n+\t  warned = 1;\n+\t}\n+    }\n+\n   gcc_assert (type->ty != Terror);\n   create_typeinfo (type, NULL);\n   return build_address (get_typeinfo_decl (type->vtinfo));"}, {"sha": "22145fb0cb3fe9ea9b9644404df005717347f078", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -1,3 +1,9 @@\n+2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.test/fail_compilation/fail2456.d: New test.\n+\t* gdc.test/fail_compilation/test18312.d: New test.\n+\t* gdc.test/gdc-test.exp (gdc-convert-args): Handle -betterC.\n+\n 2018-04-23  Sudakshina Das  <sudi.das@arm.com>\n \n \t* gcc.target/aarch64/bti-1.c: Add scan directive for gnu note section"}, {"sha": "e8cf5abbbf5b6f506e91eeaeddfd8e7f99dd55e5", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail2456.d", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2456.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2456.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail2456.d?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -0,0 +1,110 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail2456.d(14): Error: cannot put `scope(success)` statement inside finally block\n+---\n+*/\n+void test_success()\n+{\n+    try\n+    {\n+    }\n+    finally\n+    {\n+        scope(success) {}           // NG\n+    }\n+}\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail2456.d(31): Error: cannot put `scope(failure)` statement inside finally block\n+---\n+*/\n+void test_failure()\n+{\n+    try\n+    {\n+    }\n+    finally\n+    {\n+        scope(failure) {}           // NG\n+    }\n+}\n+\n+/*\n+TEST_OUTPUT:\n+---\n+---\n+*/\n+void test_exit()\n+{\n+    try\n+    {\n+    }\n+    finally\n+    {\n+        scope(exit) {}              // OK\n+    }\n+}\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail2456.d(64): Error: cannot put `scope(success)` statement inside `scope(success)`\n+fail_compilation/fail2456.d(65): Error: cannot put `scope(failure)` statement inside `scope(success)`\n+fail_compilation/fail2456.d(78): Error: cannot put `scope(success)` statement inside `scope(exit)`\n+fail_compilation/fail2456.d(79): Error: cannot put `scope(failure)` statement inside `scope(exit)`\n+---\n+*/\n+void test2456a()\n+{\n+    scope(success)\n+    {\n+        scope(success) {}   // NG\n+        scope(failure) {}   // NG\n+        scope(exit) {}      // OK\n+    }\n+\n+    scope(failure)\n+    {\n+        scope(success) {}   // OK\n+        scope(failure) {}   // OK\n+        scope(exit) {}      // OK\n+    }\n+\n+    scope(exit)\n+    {\n+        scope(success) {}   // NG\n+        scope(failure) {}   // NG\n+        scope(exit) {}      // OK\n+    }\n+}\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail2456.d(96): Error: cannot put catch statement inside `scope(success)`\n+fail_compilation/fail2456.d(108): Error: cannot put catch statement inside `scope(exit)`\n+---\n+*/\n+void test2456b()\n+{\n+    scope(success)\n+    {\n+        try {}\n+        catch (Throwable) {}    // NG\n+    }\n+\n+    scope(failure)\n+    {\n+        try {}\n+        catch (Throwable) {}    // OK\n+    }\n+\n+    scope(exit)\n+    {\n+        try {}\n+        catch (Throwable) {}    // NG\n+    }\n+}"}, {"sha": "e354a11eae868876fbb55e71a05e9cfe96055d46", "filename": "gcc/testsuite/gdc.test/fail_compilation/test18312.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest18312.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest18312.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest18312.d?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -0,0 +1,15 @@\n+/*\n+REQUIRED_ARGS: -betterC\n+TEST_OUTPUT:\n+---\n+fail_compilation/test18312.d(14): Error: array concatenation of expression `\"[\" ~ s ~ \"]\"` requires the GC which is not available with -betterC\n+---\n+*/\n+\n+// https://issues.dlang.org/show_bug.cgi?id=18312\n+\n+extern (C) void main()\n+{\n+    scope string s;\n+    s = \"[\" ~ s ~ \"]\";\n+}"}, {"sha": "ce5575c071ab1f701e6184891cc7af94637fc005", "filename": "gcc/testsuite/gdc.test/gdc-test.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0aebc60b2ac19816f0431241d8f7203e60afb01/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp?ref=c0aebc60b2ac19816f0431241d8f7203e60afb01", "patch": "@@ -39,6 +39,9 @@ proc gdc-convert-args { args } {\n \t} elseif [string match \"-allinst\" $arg] {\n \t    lappend out \"-fall-instantiations\"\n \n+\t} elseif [string match \"-betterC\" $arg] {\n+\t    lappend out \"-fno-druntime\"\n+\n \t} elseif { [string match \"-boundscheck\" $arg]\n \t\t || [string match \"-boundscheck=on\" $arg] } {\n \t    lappend out \"-fbounds-check\""}]}