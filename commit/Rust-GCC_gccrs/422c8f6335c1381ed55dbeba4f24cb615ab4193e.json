{"sha": "422c8f6335c1381ed55dbeba4f24cb615ab4193e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyYzhmNjMzNWMxMzgxZWQ1NWRiZWJhNGYyNGNiNjE1YWI0MTkzZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-11T00:05:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-11T00:05:31Z"}, "message": "(preserve_rtl_expr_result): New function.\n\nFrom-SVN: r6367", "tree": {"sha": "f42af3ad788e043d3fd70296d81c2187e0ded278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42af3ad788e043d3fd70296d81c2187e0ded278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/422c8f6335c1381ed55dbeba4f24cb615ab4193e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422c8f6335c1381ed55dbeba4f24cb615ab4193e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422c8f6335c1381ed55dbeba4f24cb615ab4193e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422c8f6335c1381ed55dbeba4f24cb615ab4193e/comments", "author": null, "committer": null, "parents": [{"sha": "a18730e12ac53d8ee13593431da87cbf9719610c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18730e12ac53d8ee13593431da87cbf9719610c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a18730e12ac53d8ee13593431da87cbf9719610c"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "a57a8c037e8e164f92e6bd59eaeb621a6b3ddaff", "filename": "gcc/function.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422c8f6335c1381ed55dbeba4f24cb615ab4193e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422c8f6335c1381ed55dbeba4f24cb615ab4193e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=422c8f6335c1381ed55dbeba4f24cb615ab4193e", "patch": "@@ -1,5 +1,5 @@\n /* Expands front end tree to back end RTL for GNU C-Compiler\n-   Copyright (C) 1987, 88, 89, 91, 92, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 91, 92, 93, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -912,6 +912,34 @@ preserve_temp_slots (x)\n       p->level--;\n }\n \n+/* X is the result of an RTL_EXPR.  If it is a temporary slot associated\n+   with that RTL_EXPR, promote it into a temporary slot at the present\n+   level so it will not be freed when we free slots made in the\n+   RTL_EXPR.  */\n+\n+void\n+preserve_rtl_expr_result (x)\n+     rtx x;\n+{\n+  struct temp_slot *p;\n+\n+  /* If X is not in memory or is at a constant address, it cannot be in\n+     a temporary slot.  */\n+  if (x == 0 || GET_CODE (x) != MEM || CONSTANT_P (XEXP (x, 0)))\n+    return;\n+\n+  /* If we can find a match, move it to our level.  */\n+  for (p = temp_slots; p; p = p->next)\n+    if (p->in_use && rtx_equal_p (x, p->slot))\n+      {\n+\tp->level = temp_slot_level;\n+\tp->rtl_expr = 0;\n+\treturn;\n+      }\n+\n+  return;\n+}\n+\n /* Free all temporaries used so far.  This is normally called at the end\n    of generating code for a statement.  Don't free any temporaries\n    currently in use for an RTL_EXPR that hasn't yet been emitted."}]}