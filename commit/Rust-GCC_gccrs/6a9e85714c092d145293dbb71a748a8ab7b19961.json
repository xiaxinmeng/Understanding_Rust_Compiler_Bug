{"sha": "6a9e85714c092d145293dbb71a748a8ab7b19961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5ZTg1NzE0YzA5MmQxNDUyOTNkYmI3MWE3NDhhOGFiN2IxOTk2MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-02-15T17:40:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-02-15T17:40:55Z"}, "message": "sfp-machine.h (CMPtype): Define as typedef using libgcc_cmp_return mode.\n\n        * config/i386/sfp-machine.h (CMPtype): Define as typedef using\n        libgcc_cmp_return mode.\n\nFrom-SVN: r132350", "tree": {"sha": "115325aa439a7294ea337729c4d5e8bce7879787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/115325aa439a7294ea337729c4d5e8bce7879787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a9e85714c092d145293dbb71a748a8ab7b19961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9e85714c092d145293dbb71a748a8ab7b19961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9e85714c092d145293dbb71a748a8ab7b19961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9e85714c092d145293dbb71a748a8ab7b19961/comments", "author": null, "committer": null, "parents": [{"sha": "6837b3b895180864df03d01628eed75168c25a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6837b3b895180864df03d01628eed75168c25a57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6837b3b895180864df03d01628eed75168c25a57"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "cb73795ac9185460191d5fcbc64871efaf5910e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9e85714c092d145293dbb71a748a8ab7b19961/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9e85714c092d145293dbb71a748a8ab7b19961/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a9e85714c092d145293dbb71a748a8ab7b19961", "patch": "@@ -1,11 +1,16 @@\n+2008-02-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sfp-machine.h (CMPtype): Define as typedef using\n+\tlibgcc_cmp_return mode.\n+\n 2008-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/35130\n \t* tree-nested.c (convert_call_expr): Put FRAME.* vars into\n \tOMP_CLAUSE_SHARED rather than OMP_CLAUSE_FIRSTPRIVATE clause.\n \n 2008-02-15  Richard Guenther  <rguenther@suse.de>\n-\tZdenek Dvorak  <ook@ucw.cz>\n+\t    Zdenek Dvorak  <ook@ucw.cz>\n \n \tPR tree-optimization/35164\n \t* tree-flow.h (stmt_references_abnormal_ssa_name): Declare."}, {"sha": "f4bf8796f9fdcac2a0ff6d87cb73a42d4ae242c1", "filename": "gcc/config/i386/sfp-machine.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9e85714c092d145293dbb71a748a8ab7b19961/gcc%2Fconfig%2Fi386%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9e85714c092d145293dbb71a748a8ab7b19961/gcc%2Fconfig%2Fi386%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsfp-machine.h?ref=6a9e85714c092d145293dbb71a748a8ab7b19961", "patch": "@@ -3,14 +3,15 @@\n #define _FP_WS_TYPE\t\tsigned long\n #define _FP_I_TYPE\t\tlong\n \n-typedef int TItype __attribute__((mode(TI)));\n-typedef unsigned int UTItype __attribute__((mode(TI)));\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef unsigned int UTItype __attribute__ ((mode (TI)));\n \n-#define TI_BITS\t\t\t(__CHAR_BIT__ * (int)sizeof(TItype))\n+#define TI_BITS (__CHAR_BIT__ * (int)sizeof(TItype))\n \n-/* The type of the result of a floating point comparison.\n-   This must match `word_mode' in GCC for the target.  */\n-#define CMPtype\t\t\tlong\n+/* The type of the result of a floating point comparison.  This must\n+   match `__libgcc_cmp_return__' in GCC for the target.  */\n+\n+typedef int CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n \n #define _FP_MUL_MEAT_Q(R,X,Y)                           \\\n   _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n@@ -30,8 +31,7 @@ typedef unsigned int UTItype __attribute__((mode(TI)));\n \n /* Here is something Intel misdesigned: the specs don't define\n    the case where we have two NaNs with same mantissas, but\n-   different sign. Different operations pick up different NaNs.\n- */\n+   different sign. Different operations pick up different NaNs.  */\n #define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     if (_FP_FRAC_GT_##wc(X, Y)\t\t\t\t\t\\"}]}