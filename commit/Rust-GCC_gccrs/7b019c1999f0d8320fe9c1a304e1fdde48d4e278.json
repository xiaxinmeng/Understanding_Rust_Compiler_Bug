{"sha": "7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IwMTljMTk5OWYwZDgzMjBmZTljMWEzMDRlMWZkZGU0OGQ0ZTI3OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-07-10T03:47:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-07-10T03:47:36Z"}, "message": "cp-tree.h (char_type_p): New function.\n\n\t* cp-tree.h (char_type_p): New function.\n\t* decl.c (init_decl_processing): Don't initialize\n\tsigned_wchar_type_node or unsigned_wchar_type_node.\n\t(complete_array_type): Handle brace-enclosed string-constants.\n\t* rtti.c (emit_support_tinfos): Remove #if 0'd code.\n\t* tree.c (char_type_p): New function.\n\t* typeck2.c (digest_init): Use char_type_p.\n\nFrom-SVN: r34936", "tree": {"sha": "bbfc7eda55b995ec0bd4e1101b8e4f730bc56861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbfc7eda55b995ec0bd4e1101b8e4f730bc56861"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/comments", "author": null, "committer": null, "parents": [{"sha": "93d87cb15d97e514fcc3c0bd008369b52df3e3bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d87cb15d97e514fcc3c0bd008369b52df3e3bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d87cb15d97e514fcc3c0bd008369b52df3e3bc"}], "stats": {"total": 103, "additions": 78, "deletions": 25}, "files": [{"sha": "0caff7ff8bbb8234fb21f46d9b4da2b23130606b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "patch": "@@ -1,3 +1,13 @@\n+2000-07-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (char_type_p): New function.\n+\t* decl.c (init_decl_processing): Don't initialize\n+\tsigned_wchar_type_node or unsigned_wchar_type_node.\n+\t(complete_array_type): Handle brace-enclosed string-constants.\n+\t* rtti.c (emit_support_tinfos): Remove #if 0'd code.\n+\t* tree.c (char_type_p): New function.\n+\t* typeck2.c (digest_init): Use char_type_p.\n+\n 2000-07-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (tsubst): Don't layout type, if it's error_mark."}, {"sha": "a87a8b777fb4d77c35dc734488c95009c2ace327", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "patch": "@@ -4547,7 +4547,8 @@ extern void remap_save_expr                     PARAMS ((tree *, splay_tree, tre\n extern tree build_shared_int_cst                PARAMS ((int));\n extern special_function_kind special_function_p PARAMS ((tree));\n extern int count_trees                          PARAMS ((tree));\n-\n+extern int char_type_p                          PARAMS ((tree));\n+  \n /* in typeck.c */\n extern int string_conv_p\t\t\tPARAMS ((tree, tree, int));\n extern tree condition_conversion\t\tPARAMS ((tree));"}, {"sha": "ee0d05872401e4a50e77b47942b5efaeeee8c3b4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "patch": "@@ -6549,12 +6549,10 @@ init_decl_processing ()\n \t\t\t\t    : WCHAR_TYPE);\n   wchar_type_node = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (wchar_type_node));\n   wchar_type_size = TYPE_PRECISION (wchar_type_node);\n-  signed_wchar_type_node = make_signed_type (wchar_type_size);\n-  unsigned_wchar_type_node = make_unsigned_type (wchar_type_size);\n-  wchar_type_node\n-    = TREE_UNSIGNED (wchar_type_node)\n-      ? unsigned_wchar_type_node\n-      : signed_wchar_type_node;\n+  if (TREE_UNSIGNED (wchar_type_node))\n+    wchar_type_node = make_signed_type (wchar_type_size);\n+  else\n+    wchar_type_node = make_unsigned_type (wchar_type_size);\n   record_builtin_type (RID_WCHAR, \"__wchar_t\", wchar_type_node);\n \n   /* Artificial declaration of wchar_t -- can be bashed */\n@@ -8637,8 +8635,18 @@ complete_array_type (type, initial_value, do_default)\n \n   if (initial_value)\n     {\n-      /* Note MAXINDEX  is really the maximum index,\n-\t one less than the size.  */\n+      /* An array of character type can be initialized from a\n+\t brace-enclosed string constant.  */\n+      if (char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type)))\n+\t  && TREE_CODE (initial_value) == CONSTRUCTOR\n+\t  && CONSTRUCTOR_ELTS (initial_value)\n+\t  && (TREE_CODE (TREE_VALUE (CONSTRUCTOR_ELTS (initial_value)))\n+\t      == STRING_CST)\n+\t  && TREE_CHAIN (CONSTRUCTOR_ELTS (initial_value)) == NULL_TREE)\n+\tinitial_value = TREE_VALUE (CONSTRUCTOR_ELTS (initial_value));\n+\n+      /* Note MAXINDEX is really the maximum index, one less than the\n+\t size.  */\n       if (TREE_CODE (initial_value) == STRING_CST)\n \t{\n \t  int eltsize"}, {"sha": "b9a19d21274647ab5b86fec55a6da33a2ab498e1", "filename": "gcc/cp/inc/cxxabi.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Finc%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Finc%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fcxxabi.h?ref=7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "patch": "@@ -445,6 +445,14 @@ void __cxa_vec_ctor (void *__array_address,\n                      void (*__constructor) (void *),\n                      void (*__destructor) (void *));\n \n+extern \"C++\"\n+void __cxa_vec_cctor (void *dest_array,\n+\t\t      void *src_array,\n+\t\t      __SIZE_TYPE__ element_count,\n+\t\t      __SIZE_TYPE__ element_size,\n+\t\t      void (*constructor) (void *, void *),\n+\t\t      void (*destructor) (void *));\n+ \n /* destruct array */\n extern \"C++\"\n void __cxa_vec_dtor (void *__array_address,"}, {"sha": "63c1e3cc583ff9d4c53c6728113cd8f020e36b39", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "patch": "@@ -1970,23 +1970,12 @@ emit_support_tinfos ()\n     &void_type_node,\n     &boolean_type_node,\n     &wchar_type_node,\n-#if 0\n-    &signed_wchar_type_node, &unsigned_wchar_type_node,\n-#endif\n     &char_type_node, &signed_char_type_node, &unsigned_char_type_node,\n     &short_integer_type_node, &short_unsigned_type_node,\n     &integer_type_node, &unsigned_type_node,\n     &long_integer_type_node, &long_unsigned_type_node,\n     &long_long_integer_type_node, &long_long_unsigned_type_node,\n     &float_type_node, &double_type_node, &long_double_type_node,\n-\n-    /* GCC extension types */\n-#if 0\n-    &complex_integer_type_node,\n-    &complex_float_type_node, &complex_double_type_node,\n-    &complex_long_double_type_node,\n-#endif\n-    \n     0\n   };\n   int ix;"}, {"sha": "b17915fc50de4815685cd94ed82763398ed8e21b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "patch": "@@ -2488,3 +2488,15 @@ special_function_p (decl)\n \n   return sfk_none;\n }\n+\n+/* Returns non-zero if TYPE is a character type, including wchar_t.  */\n+\n+int\n+char_type_p (type)\n+     tree type;\n+{\n+  return (same_type_p (type, char_type_node)\n+\t  || same_type_p (type, unsigned_char_type_node)\n+\t  || same_type_p (type, signed_char_type_node)\n+\t  || same_type_p (type, wchar_type_node));\n+}"}, {"sha": "7b947d24678396d7d0b46919d8f39f0c114934dc", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "patch": "@@ -573,11 +573,7 @@ digest_init (type, init, tail)\n \t}\n \n       typ1 = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n-      if ((typ1 == char_type_node\n-\t   || typ1 == signed_char_type_node\n-\t   || typ1 == unsigned_char_type_node\n-\t   || typ1 == unsigned_wchar_type_node\n-\t   || typ1 == signed_wchar_type_node)\n+      if (char_type_p (typ1)\n \t  && ((init && TREE_CODE (init) == STRING_CST)\n \t      || (element && TREE_CODE (element) == STRING_CST)))\n \t{"}, {"sha": "5e963cad79afde659821ab349e8dd2f04e296c14", "filename": "gcc/cp/vec.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b019c1999f0d8320fe9c1a304e1fdde48d4e278/gcc%2Fcp%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvec.cc?ref=7b019c1999f0d8320fe9c1a304e1fdde48d4e278", "patch": "@@ -94,6 +94,35 @@ __cxa_vec_ctor (void *array_address,\n     }\n }\n \n+/* construct an array by copying */\n+\n+extern \"C++\" void\n+__cxa_vec_cctor (void *dest_array,\n+\t\t void *src_array,\n+\t\t size_t element_count,\n+\t\t size_t element_size,\n+\t\t void (*constructor) (void *, void *),\n+\t\t void (*destructor) (void *))\n+{\n+  size_t ix = 0;\n+  char *dest_ptr = static_cast <char *> (dest_array);\n+  char *src_ptr = static_cast <char *> (src_array);\n+\n+  try\n+    {\n+      if (constructor)\n+\tfor (; ix != element_count; \n+\t     ix++, src_ptr += element_size, dest_ptr += element_size)\n+\t  constructor (dest_ptr, src_ptr);\n+    }\n+  catch (...)\n+    {\n+      __uncatch_exception ();\n+      __cxa_vec_dtor (dest_array, ix, element_size, destructor);\n+      throw;\n+    }\n+}\n+\n /* destruct array */\n extern \"C++\" void\n __cxa_vec_dtor (void *array_address,"}]}