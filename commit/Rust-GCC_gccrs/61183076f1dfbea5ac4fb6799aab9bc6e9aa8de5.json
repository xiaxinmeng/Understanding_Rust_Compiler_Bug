{"sha": "61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjExODMwNzZmMWRmYmVhNWFjNGZiNjc5OWFhYjliYzZlOWFhOGRlNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-27T08:56:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-27T08:56:03Z"}, "message": "cfg.c (free_edge): Add function argument and use it instead of cfun.\n\n2015-10-27  Richard Biener  <rguenther@suse.de>\n\n\t* cfg.c (free_edge): Add function argument and use it instead of cfun.\n\t(clear_edges): Likewise.\n\t* cfg.h (clear_edges): Adjust prototype.\n\t* cfgexpand.c (pass_expand::execute): Adjust.\n\t* cfgloop.c (release_recorded_exits): Add function argument and use\n\tit instead of cfun.\n\t* cfgloop.h (release_recorded_exits): Adjust prototype.\n\t(loops_state_satisfies_p): Add overload with function argument.\n\t(loops_state_set): Likewise.\n\t(loops_state_clear): Likewise.\n\t(struct loop_iterator): Add function argument to constructor\n\tand iterator and use it instead of cfun.\n\t(FOR_EACH_LOOP_FN): New macro.\n\t(loop_optimizer_finalize): Add overload with function argument.\n\t* loop-init.c (loop_optimizer_init): Adjust.\n\t(fix_loop_structure): Likewise.\n\t(loop_optimizer_finaliz): Add function argument and use it\n\tinstead of cfun.\n\t* tree-cfg.c (delete_tree_cfg_annotations): Likewise.\n\t* tree-cfg.h (delete_tree_cfg_annotations): Adjust prototype.\n\t* cgraph.c (release_function_body): Do not push/pop cfun.\n\t* final.c (rest_of_clean_state): Adjust.\n\t* graphite.c (graphite_finalize): Likewise.\n\t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n\t* tree-ssa-dce.c (perform_tree_ssa_dce): Likewise.\n\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables): Likewise.\n\t(tree_unroll_loops_completely): Likewise.\n\t(pass_complete_unrolli::execute): Likewise.\n\t* tree-ssa-loop-niter.c (free_numbers_of_iterations_estimates):\n\tAdd function argument and use it instead of cfun.\n\t* tree-ssa-loop-niter.h (free_numbers_of_iterations_estimates):\n\tAdjust prototype.\n\t* tree-ssa-loop.c (tree_ssa_loop_done): Adjust.\n\t* tree-ssa.c (delete_tree_ssa): Add function argument and use it\n\tinstead of cfun.\n\t* tree-ssa.h (delete_tree_ssa): Adjust prototype.\n\t* tree-ssanames.c (fini_ssanames): Add function argument and use it\n\tinstead of cfun.\n\t* tree-ssanames.c (fini_ssanames): Adjust prototype.\n\t* tree-vrp.c (execute_vrp): Adjust.\n\t* value-prof.c (free_histograms): Add function argument and use it\n\tinstead of cfun.\n\t* value-prof.h (free_histograms): Adjust prototype.\n\nFrom-SVN: r229405", "tree": {"sha": "bd4ad7e7b2c8112a0f115b874c66bb4632a2280b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd4ad7e7b2c8112a0f115b874c66bb4632a2280b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88bae6f494dc867edd8e6257658974d629bdc53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88bae6f494dc867edd8e6257658974d629bdc53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88bae6f494dc867edd8e6257658974d629bdc53b"}], "stats": {"total": 302, "additions": 187, "deletions": 115}, "files": [{"sha": "6f8f756c7282796febdc89f1b3aac163469e58b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -1,3 +1,49 @@\n+2015-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfg.c (free_edge): Add function argument and use it instead of cfun.\n+\t(clear_edges): Likewise.\n+\t* cfg.h (clear_edges): Adjust prototype.\n+\t* cfgexpand.c (pass_expand::execute): Adjust.\n+\t* cfgloop.c (release_recorded_exits): Add function argument and use\n+\tit instead of cfun.\n+\t* cfgloop.h (release_recorded_exits): Adjust prototype.\n+\t(loops_state_satisfies_p): Add overload with function argument.\n+\t(loops_state_set): Likewise.\n+\t(loops_state_clear): Likewise.\n+\t(struct loop_iterator): Add function argument to constructor\n+\tand iterator and use it instead of cfun.\n+\t(FOR_EACH_LOOP_FN): New macro.\n+\t(loop_optimizer_finalize): Add overload with function argument.\n+\t* loop-init.c (loop_optimizer_init): Adjust.\n+\t(fix_loop_structure): Likewise.\n+\t(loop_optimizer_finaliz): Add function argument and use it\n+\tinstead of cfun.\n+\t* tree-cfg.c (delete_tree_cfg_annotations): Likewise.\n+\t* tree-cfg.h (delete_tree_cfg_annotations): Adjust prototype.\n+\t* cgraph.c (release_function_body): Do not push/pop cfun.\n+\t* final.c (rest_of_clean_state): Adjust.\n+\t* graphite.c (graphite_finalize): Likewise.\n+\t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n+\t* tree-ssa-dce.c (perform_tree_ssa_dce): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables): Likewise.\n+\t(tree_unroll_loops_completely): Likewise.\n+\t(pass_complete_unrolli::execute): Likewise.\n+\t* tree-ssa-loop-niter.c (free_numbers_of_iterations_estimates):\n+\tAdd function argument and use it instead of cfun.\n+\t* tree-ssa-loop-niter.h (free_numbers_of_iterations_estimates):\n+\tAdjust prototype.\n+\t* tree-ssa-loop.c (tree_ssa_loop_done): Adjust.\n+\t* tree-ssa.c (delete_tree_ssa): Add function argument and use it\n+\tinstead of cfun.\n+\t* tree-ssa.h (delete_tree_ssa): Adjust prototype.\n+\t* tree-ssanames.c (fini_ssanames): Add function argument and use it\n+\tinstead of cfun.\n+\t* tree-ssanames.c (fini_ssanames): Adjust prototype.\n+\t* tree-vrp.c (execute_vrp): Adjust.\n+\t* value-prof.c (free_histograms): Add function argument and use it\n+\tinstead of cfun.\n+\t* value-prof.h (free_histograms): Adjust prototype.\n+\n 2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* tree.h (OACC_PARALLEL_BODY, OACC_PARALLEL_CLAUSES)"}, {"sha": "4c4531a7cd3cf9f01c13ee7d817efc3358b2650a", "filename": "gcc/cfg.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -88,35 +88,35 @@ init_flow (struct function *the_fun)\n    without actually removing it from the pred/succ arrays.  */\n \n static void\n-free_edge (edge e)\n+free_edge (function *fn, edge e)\n {\n-  n_edges_for_fn (cfun)--;\n+  n_edges_for_fn (fn)--;\n   ggc_free (e);\n }\n \n /* Free the memory associated with the edge structures.  */\n \n void\n-clear_edges (void)\n+clear_edges (struct function *fn)\n {\n   basic_block bb;\n   edge e;\n   edge_iterator ei;\n \n-  FOR_EACH_BB_FN (bb, cfun)\n+  FOR_EACH_BB_FN (bb, fn)\n     {\n       FOR_EACH_EDGE (e, ei, bb->succs)\n-\tfree_edge (e);\n+\tfree_edge (fn, e);\n       vec_safe_truncate (bb->succs, 0);\n       vec_safe_truncate (bb->preds, 0);\n     }\n \n-  FOR_EACH_EDGE (e, ei, ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs)\n-    free_edge (e);\n-  vec_safe_truncate (EXIT_BLOCK_PTR_FOR_FN (cfun)->preds, 0);\n-  vec_safe_truncate (ENTRY_BLOCK_PTR_FOR_FN (cfun)->succs, 0);\n+  FOR_EACH_EDGE (e, ei, ENTRY_BLOCK_PTR_FOR_FN (fn)->succs)\n+    free_edge (fn, e);\n+  vec_safe_truncate (EXIT_BLOCK_PTR_FOR_FN (fn)->preds, 0);\n+  vec_safe_truncate (ENTRY_BLOCK_PTR_FOR_FN (fn)->succs, 0);\n \n-  gcc_assert (!n_edges_for_fn (cfun));\n+  gcc_assert (!n_edges_for_fn (fn));\n }\n \f\n /* Allocate memory for basic_block.  */\n@@ -350,7 +350,7 @@ remove_edge_raw (edge e)\n   disconnect_src (e);\n   disconnect_dest (e);\n \n-  free_edge (e);\n+  free_edge (cfun, e);\n }\n \n /* Redirect an edge's successor from one block to another.  */"}, {"sha": "9cc624c592805235ad2e50476ee6defddb49678c", "filename": "gcc/cfg.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.h?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -74,8 +74,8 @@ struct GTY(()) control_flow_graph {\n };\n \n \n-extern void init_flow (struct function *);\n-extern void clear_edges (void);\n+extern void init_flow (function *);\n+extern void clear_edges (function *);\n extern basic_block alloc_block (void);\n extern void link_block (basic_block, basic_block);\n extern void unlink_block (basic_block);"}, {"sha": "8d5fb640e178e0a0b2bf4bcd49b340f2684bbe3a", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -6304,7 +6304,7 @@ pass_expand::execute (function *fun)\n   /* Free stuff we no longer need after GIMPLE optimizations.  */\n   free_dominance_info (CDI_DOMINATORS);\n   free_dominance_info (CDI_POST_DOMINATORS);\n-  delete_tree_cfg_annotations ();\n+  delete_tree_cfg_annotations (fun);\n \n   timevar_push (TV_OUT_OF_SSA);\n   finish_out_of_ssa (&SA);\n@@ -6318,7 +6318,7 @@ pass_expand::execute (function *fun)\n   /* Expansion is used by optimization passes too, set maybe_hot_insn_p\n      conservatively to true until they are all profile aware.  */\n   delete lab_rtx_for_bb;\n-  free_histograms ();\n+  free_histograms (fun);\n \n   construct_exit_block ();\n   insn_locations_finalize ();"}, {"sha": "5c13b3737c29ede716f9e8b8f3122d007d91ed0e", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -1114,12 +1114,12 @@ dump_recorded_exits (FILE *file)\n /* Releases lists of loop exits.  */\n \n void\n-release_recorded_exits (void)\n+release_recorded_exits (function *fn)\n {\n-  gcc_assert (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS));\n-  current_loops->exits->empty ();\n-  current_loops->exits = NULL;\n-  loops_state_clear (LOOPS_HAVE_RECORDED_EXITS);\n+  gcc_assert (loops_state_satisfies_p (fn, LOOPS_HAVE_RECORDED_EXITS));\n+  loops_for_fn (fn)->exits->empty ();\n+  loops_for_fn (fn)->exits = NULL;\n+  loops_state_clear (fn, LOOPS_HAVE_RECORDED_EXITS);\n }\n \n /* Returns the list of the exit edges of a LOOP.  */"}, {"sha": "cd4a4c990961588cbc0c5e98230ef73826af488b", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -264,7 +264,7 @@ extern void flow_loop_free (struct loop *);\n int flow_loop_nodes_find (basic_block, struct loop *);\n unsigned fix_loop_structure (bitmap changed_bbs);\n bool mark_irreducible_loops (void);\n-void release_recorded_exits (void);\n+void release_recorded_exits (function *);\n void record_loop_exits (void);\n void rescan_loop_exit (edge, bool, bool);\n \n@@ -491,28 +491,46 @@ number_of_loops (struct function *fn)\n /* Returns true if state of the loops satisfies all properties\n    described by FLAGS.  */\n \n+static inline bool\n+loops_state_satisfies_p (function *fn, unsigned flags)\n+{\n+  return (loops_for_fn (fn)->state & flags) == flags;\n+}\n+\n static inline bool\n loops_state_satisfies_p (unsigned flags)\n {\n-  return (current_loops->state & flags) == flags;\n+  return loops_state_satisfies_p (cfun, flags);\n }\n \n /* Sets FLAGS to the loops state.  */\n \n+static inline void\n+loops_state_set (function *fn, unsigned flags)\n+{\n+  loops_for_fn (fn)->state |= flags;\n+}\n+\n static inline void\n loops_state_set (unsigned flags)\n {\n-  current_loops->state |= flags;\n+  loops_state_set (cfun, flags);\n }\n \n /* Clears FLAGS from the loops state.  */\n \n+static inline void\n+loops_state_clear (function *fn, unsigned flags)\n+{\n+  loops_for_fn (fn)->state &= ~flags;\n+}\n+\n static inline void\n loops_state_clear (unsigned flags)\n {\n   if (!current_loops)\n     return;\n-  current_loops->state &= ~flags;\n+  loops_state_clear (cfun, flags);\n }\n \n /* Loop iterators.  */\n@@ -531,11 +549,14 @@ enum li_flags\n \n struct loop_iterator\n {\n-  loop_iterator (loop_p *loop, unsigned flags);\n+  loop_iterator (function *fn, loop_p *loop, unsigned flags);\n   ~loop_iterator ();\n \n   inline loop_p next ();\n \n+  /* The function we are visiting.  */\n+  function *fn;\n+\n   /* The list of loops to visit.  */\n   vec<int> to_visit;\n \n@@ -551,7 +572,7 @@ loop_iterator::next ()\n   while (this->to_visit.iterate (this->idx, &anum))\n     {\n       this->idx++;\n-      loop_p loop = get_loop (cfun, anum);\n+      loop_p loop = get_loop (fn, anum);\n       if (loop)\n \treturn loop;\n     }\n@@ -560,26 +581,27 @@ loop_iterator::next ()\n }\n \n inline\n-loop_iterator::loop_iterator (loop_p *loop, unsigned flags)\n+loop_iterator::loop_iterator (function *fn, loop_p *loop, unsigned flags)\n {\n   struct loop *aloop;\n   unsigned i;\n   int mn;\n \n   this->idx = 0;\n-  if (!current_loops)\n+  this->fn = fn;\n+  if (!loops_for_fn (fn))\n     {\n       this->to_visit.create (0);\n       *loop = NULL;\n       return;\n     }\n \n-  this->to_visit.create (number_of_loops (cfun));\n+  this->to_visit.create (number_of_loops (fn));\n   mn = (flags & LI_INCLUDE_ROOT) ? 0 : 1;\n \n   if (flags & LI_ONLY_INNERMOST)\n     {\n-      for (i = 0; vec_safe_iterate (current_loops->larray, i, &aloop); i++)\n+      for (i = 0; vec_safe_iterate (loops_for_fn (fn)->larray, i, &aloop); i++)\n \tif (aloop != NULL\n \t    && aloop->inner == NULL\n \t    && aloop->num >= mn)\n@@ -588,7 +610,7 @@ loop_iterator::loop_iterator (loop_p *loop, unsigned flags)\n   else if (flags & LI_FROM_INNERMOST)\n     {\n       /* Push the loops to LI->TO_VISIT in postorder.  */\n-      for (aloop = current_loops->tree_root;\n+      for (aloop = loops_for_fn (fn)->tree_root;\n \t   aloop->inner != NULL;\n \t   aloop = aloop->inner)\n \tcontinue;\n@@ -614,7 +636,7 @@ loop_iterator::loop_iterator (loop_p *loop, unsigned flags)\n   else\n     {\n       /* Push the loops to LI->TO_VISIT in preorder.  */\n-      aloop = current_loops->tree_root;\n+      aloop = loops_for_fn (fn)->tree_root;\n       while (1)\n \t{\n \t  if (aloop->num >= mn)\n@@ -643,7 +665,12 @@ loop_iterator::~loop_iterator ()\n }\n \n #define FOR_EACH_LOOP(LOOP, FLAGS) \\\n-  for (loop_iterator li(&(LOOP), FLAGS); \\\n+  for (loop_iterator li(cfun, &(LOOP), FLAGS); \\\n+       (LOOP); \\\n+       (LOOP) = li.next ())\n+\n+#define FOR_EACH_LOOP_FN(FN, LOOP, FLAGS) \\\n+  for (loop_iterator li(fn, &(LOOP), FLAGS); \\\n        (LOOP); \\\n        (LOOP) = li.next ())\n \n@@ -691,7 +718,12 @@ extern void init_set_costs (void);\n \n /* Loop optimizer initialization.  */\n extern void loop_optimizer_init (unsigned);\n-extern void loop_optimizer_finalize (void);\n+extern void loop_optimizer_finalize (function *);\n+inline void\n+loop_optimizer_finalize ()\n+{\n+  loop_optimizer_finalize (cfun);\n+}\n \n /* Optimization passes.  */\n enum"}, {"sha": "cfcfaf3ed7652816cc4b15dbef2811c88df7578b", "filename": "gcc/cgraph.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -1685,39 +1685,38 @@ cgraph_node::remove_callers (void)\n void\n release_function_body (tree decl)\n {\n-  if (DECL_STRUCT_FUNCTION (decl))\n+  function *fn = DECL_STRUCT_FUNCTION (decl);\n+  if (fn)\n     {\n-      if (DECL_STRUCT_FUNCTION (decl)->cfg\n-\t  || DECL_STRUCT_FUNCTION (decl)->gimple_df)\n+      if (fn->cfg\n+\t  || fn->gimple_df)\n \t{\n-\t  push_cfun (DECL_STRUCT_FUNCTION (decl));\n-\t  if (cfun->cfg\n-\t      && current_loops)\n+\t  if (fn->cfg\n+\t      && loops_for_fn (fn))\n \t    {\n-\t      cfun->curr_properties &= ~PROP_loops;\n-\t      loop_optimizer_finalize ();\n+\t      fn->curr_properties &= ~PROP_loops;\n+\t      loop_optimizer_finalize (fn);\n \t    }\n-\t  if (cfun->gimple_df)\n+\t  if (fn->gimple_df)\n \t    {\n-\t      delete_tree_ssa ();\n-\t      delete_tree_cfg_annotations ();\n-\t      cfun->eh = NULL;\n+\t      delete_tree_ssa (fn);\n+\t      delete_tree_cfg_annotations (fn);\n+\t      fn->eh = NULL;\n \t    }\n-\t  if (cfun->cfg)\n+\t  if (fn->cfg)\n \t    {\n-\t      gcc_assert (!dom_info_available_p (CDI_DOMINATORS));\n-\t      gcc_assert (!dom_info_available_p (CDI_POST_DOMINATORS));\n-\t      clear_edges ();\n-\t      cfun->cfg = NULL;\n+\t      gcc_assert (!dom_info_available_p (fn, CDI_DOMINATORS));\n+\t      gcc_assert (!dom_info_available_p (fn, CDI_POST_DOMINATORS));\n+\t      clear_edges (fn);\n+\t      fn->cfg = NULL;\n \t    }\n-\t  if (cfun->value_histograms)\n-\t    free_histograms ();\n-\t  pop_cfun ();\n+\t  if (fn->value_histograms)\n+\t    free_histograms (fn);\n \t}\n       gimple_set_body (decl, NULL);\n       /* Struct function hangs a lot of data that would leak if we didn't\n          removed all pointers to it.   */\n-      ggc_free (DECL_STRUCT_FUNCTION (decl));\n+      ggc_free (fn);\n       DECL_STRUCT_FUNCTION (decl) = NULL;\n     }\n   DECL_SAVED_TREE (decl) = NULL;"}, {"sha": "9bc0933ef471d9cfda2d3dc4f2b55826fa5bac47", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -4676,7 +4676,7 @@ rest_of_clean_state (void)\n \n   free_bb_for_insn ();\n \n-  delete_tree_ssa ();\n+  delete_tree_ssa (cfun);\n \n   /* We can reduce stack alignment on call site only when we are sure that\n      the function body just produced will be actually used in the final"}, {"sha": "773203e24f68eb11060f202795a0f18ed309eb57", "filename": "gcc/graphite.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -268,7 +268,7 @@ graphite_finalize (bool need_cfg_cleanup_p)\n       scev_reset ();\n       cleanup_tree_cfg ();\n       profile_status_for_fn (cfun) = PROFILE_ABSENT;\n-      release_recorded_exits ();\n+      release_recorded_exits (cfun);\n       tree_estimate_probability ();\n     }\n "}, {"sha": "2a38a0f75663afd18b9f64ecdb65c526728d1a5c", "filename": "gcc/loop-init.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -111,7 +111,7 @@ loop_optimizer_init (unsigned flags)\n \n       /* Clear all flags.  */\n       if (recorded_exits)\n-\trelease_recorded_exits ();\n+\trelease_recorded_exits (cfun);\n       loops_state_clear (~0U);\n \n       if (needs_fixup)\n@@ -139,43 +139,41 @@ loop_optimizer_init (unsigned flags)\n /* Finalize loop structures.  */\n \n void\n-loop_optimizer_finalize (void)\n+loop_optimizer_finalize (struct function *fn)\n {\n   struct loop *loop;\n   basic_block bb;\n \n   timevar_push (TV_LOOP_FINI);\n \n-  if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n-    release_recorded_exits ();\n+  if (loops_state_satisfies_p (fn, LOOPS_HAVE_RECORDED_EXITS))\n+    release_recorded_exits (fn);\n \n-  free_numbers_of_iterations_estimates ();\n+  free_numbers_of_iterations_estimates (fn);\n \n   /* If we should preserve loop structure, do not free it but clear\n      flags that advanced properties are there as we are not preserving\n      that in full.  */\n-  if (cfun->curr_properties & PROP_loops)\n+  if (fn->curr_properties & PROP_loops)\n     {\n-      loops_state_clear (LOOP_CLOSED_SSA\n+      loops_state_clear (fn, LOOP_CLOSED_SSA\n \t\t\t | LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS\n \t\t\t | LOOPS_HAVE_PREHEADERS\n \t\t\t | LOOPS_HAVE_SIMPLE_LATCHES\n \t\t\t | LOOPS_HAVE_FALLTHRU_PREHEADERS);\n-      loops_state_set (LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n+      loops_state_set (fn, LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n       goto loop_fini_done;\n     }\n \n-  gcc_assert (current_loops != NULL);\n-\n-  FOR_EACH_LOOP (loop, 0)\n+  FOR_EACH_LOOP_FN (fn, loop, 0)\n     free_simple_loop_desc (loop);\n \n   /* Clean up.  */\n-  flow_loops_free (current_loops);\n-  ggc_free (current_loops);\n-  current_loops = NULL;\n+  flow_loops_free (loops_for_fn (fn));\n+  ggc_free (loops_for_fn (fn));\n+  set_loops_for_fn (fn, NULL);\n \n-  FOR_ALL_BB_FN (bb, cfun)\n+  FOR_ALL_BB_FN (bb, fn)\n     {\n       bb->loop_father = NULL;\n     }\n@@ -215,7 +213,7 @@ fix_loop_structure (bitmap changed_bbs)\n \n   if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n     {\n-      release_recorded_exits ();\n+      release_recorded_exits (cfun);\n       record_exits = LOOPS_HAVE_RECORDED_EXITS;\n     }\n "}, {"sha": "40d5eb89ed759cf13d6efdf2f2e9761b3747caf8", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -2570,9 +2570,9 @@ stmt_ends_bb_p (gimple *t)\n /* Remove block annotations and other data structures.  */\n \n void\n-delete_tree_cfg_annotations (void)\n+delete_tree_cfg_annotations (struct function *fn)\n {\n-  vec_free (label_to_block_map_for_fn (cfun));\n+  vec_free (label_to_block_map_for_fn (fn));\n }\n \n /* Return the virtual phi in BB.  */"}, {"sha": "3581118cfaa7a0b2011afa1904cbf1a5950e959f", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -57,7 +57,7 @@ extern bool is_ctrl_altering_stmt (gimple *);\n extern bool simple_goto_p (gimple *);\n extern bool stmt_ends_bb_p (gimple *);\n extern bool assert_unreachable_fallthru_edge_p (edge);\n-extern void delete_tree_cfg_annotations (void);\n+extern void delete_tree_cfg_annotations (function *);\n extern gphi *get_virtual_phi (basic_block);\n extern gimple *first_stmt (basic_block);\n extern gimple *last_stmt (basic_block);"}, {"sha": "da9feae71a154bcad34d7de6cb50c1143685ea20", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -561,7 +561,7 @@ fini_copy_prop (void)\n   bool changed = substitute_and_fold (get_value, NULL, true);\n   if (changed)\n     {\n-      free_numbers_of_iterations_estimates ();\n+      free_numbers_of_iterations_estimates (cfun);\n       if (scev_initialized_p ())\n \tscev_reset ();\n     }"}, {"sha": "3bedb4df12ffb02748ac06de2aa8a1962d369031", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -1669,7 +1669,7 @@ perform_tree_ssa_dce (bool aggressive)\n \n   if (something_changed)\n     {\n-      free_numbers_of_iterations_estimates ();\n+      free_numbers_of_iterations_estimates (cfun);\n       if (scev_initialized_p ())\n \tscev_reset ();\n       return TODO_update_ssa | TODO_cleanup_cfg;"}, {"sha": "38f7c3f4abcd27e378f37e20228b0998e3d3b323", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -1138,7 +1138,7 @@ canonicalize_induction_variables (void)\n   bool irred_invalidated = false;\n   bitmap loop_closed_ssa_invalidated = BITMAP_ALLOC (NULL);\n \n-  free_numbers_of_iterations_estimates ();\n+  free_numbers_of_iterations_estimates (cfun);\n   estimate_numbers_of_iterations ();\n \n   FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n@@ -1326,7 +1326,7 @@ tree_unroll_loops_completely (bool may_increase_size, bool unroll_outer)\n       if (loops_state_satisfies_p (LOOP_CLOSED_SSA))\n \tloop_closed_ssa_invalidated = BITMAP_ALLOC (NULL);\n \n-      free_numbers_of_iterations_estimates ();\n+      free_numbers_of_iterations_estimates (cfun);\n       estimate_numbers_of_iterations ();\n \n       changed = tree_unroll_loops_completely_1 (may_increase_size,\n@@ -1532,7 +1532,7 @@ pass_complete_unrolli::execute (function *fun)\n     {\n       scev_initialize ();\n       ret = tree_unroll_loops_completely (optimize >= 3, false);\n-      free_numbers_of_iterations_estimates ();\n+      free_numbers_of_iterations_estimates (fun);\n       scev_finalize ();\n     }\n   loop_optimizer_finalize ();"}, {"sha": "a1c41295259b8df23c50ee67f7192d8ad7aaf365", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -4267,11 +4267,11 @@ free_numbers_of_iterations_estimates_loop (struct loop *loop)\n /* Frees the information on upper bounds on numbers of iterations of loops.  */\n \n void\n-free_numbers_of_iterations_estimates (void)\n+free_numbers_of_iterations_estimates (function *fn)\n {\n   struct loop *loop;\n \n-  FOR_EACH_LOOP (loop, 0)\n+  FOR_EACH_LOOP_FN (fn, loop, 0)\n     {\n       free_numbers_of_iterations_estimates_loop (loop);\n     }"}, {"sha": "b7140276b6964f6d6fe0aba2cec897d499c7a768", "filename": "gcc/tree-ssa-loop-niter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-loop-niter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-loop-niter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.h?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -45,7 +45,7 @@ extern bool nowrap_type_p (tree);\n extern bool scev_probably_wraps_p (tree, tree, gimple *, struct loop *, bool);\n extern void free_loop_control_ivs (struct loop *);\n extern void free_numbers_of_iterations_estimates_loop (struct loop *);\n-extern void free_numbers_of_iterations_estimates (void);\n+extern void free_numbers_of_iterations_estimates (function *);\n extern void substitute_in_loop_info (struct loop *, tree, tree);\n \n #endif /* GCC_TREE_SSA_LOOP_NITER_H */"}, {"sha": "6ea7ae09150b08fd28f4d03cc3cf02b3a42489dc", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -426,7 +426,7 @@ make_pass_iv_optimize (gcc::context *ctxt)\n static unsigned int\n tree_ssa_loop_done (void)\n {\n-  free_numbers_of_iterations_estimates ();\n+  free_numbers_of_iterations_estimates (cfun);\n   scev_finalize ();\n   loop_optimizer_finalize ();\n   return 0;"}, {"sha": "b652b4c000880920b23386a2bd7cbc0d7d66c32e", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -1118,25 +1118,22 @@ make_pass_init_datastructures (gcc::context *ctxt)\n /* Deallocate memory associated with SSA data structures for FNDECL.  */\n \n void\n-delete_tree_ssa (void)\n+delete_tree_ssa (struct function *fn)\n {\n-  fini_ssanames ();\n+  fini_ssanames (fn);\n \n   /* We no longer maintain the SSA operand cache at this point.  */\n-  if (ssa_operands_active (cfun))\n-    fini_ssa_operands (cfun);\n-\n-  cfun->gimple_df->default_defs->empty ();\n-  cfun->gimple_df->default_defs = NULL;\n-  pt_solution_reset (&cfun->gimple_df->escaped);\n-  if (cfun->gimple_df->decls_to_pointers != NULL)\n-    delete cfun->gimple_df->decls_to_pointers;\n-  cfun->gimple_df->decls_to_pointers = NULL;\n-  cfun->gimple_df->modified_noreturn_calls = NULL;\n-  cfun->gimple_df = NULL;\n-\n-  /* We no longer need the edge variable maps.  */\n-  redirect_edge_var_map_destroy ();\n+  if (ssa_operands_active (fn))\n+    fini_ssa_operands (fn);\n+\n+  fn->gimple_df->default_defs->empty ();\n+  fn->gimple_df->default_defs = NULL;\n+  pt_solution_reset (&fn->gimple_df->escaped);\n+  if (fn->gimple_df->decls_to_pointers != NULL)\n+    delete fn->gimple_df->decls_to_pointers;\n+  fn->gimple_df->decls_to_pointers = NULL;\n+  fn->gimple_df->modified_noreturn_calls = NULL;\n+  fn->gimple_df = NULL;\n }\n \n /* Return true if EXPR is a useless type conversion, otherwise return"}, {"sha": "a2c90a021e7938546a50afe8f9a56c8d11642d99", "filename": "gcc/tree-ssa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -45,8 +45,8 @@ extern void insert_debug_temps_for_defs (gimple_stmt_iterator *);\n extern void reset_debug_uses (gimple *);\n extern void release_defs_bitset (bitmap toremove);\n extern void verify_ssa (bool, bool);\n-extern void init_tree_ssa (struct function *);\n-extern void delete_tree_ssa (void);\n+extern void init_tree_ssa (function *);\n+extern void delete_tree_ssa (function *);\n extern bool tree_ssa_useless_type_conversion (tree);\n extern tree tree_ssa_strip_useless_type_conversions (tree);\n "}, {"sha": "804ec627a2c0a0d655163486c2aacf9cacc9ee57", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -102,11 +102,11 @@ init_ssanames (struct function *fn, int size)\n /* Finalize management of SSA_NAMEs.  */\n \n void\n-fini_ssanames (void)\n+fini_ssanames (struct function *fn)\n {\n-  vec_free (SSANAMES (cfun));\n-  vec_free (FREE_SSANAMES (cfun));\n-  vec_free (FREE_SSANAMES_QUEUE (cfun));\n+  vec_free (SSANAMES (fn));\n+  vec_free (FREE_SSANAMES (fn));\n+  vec_free (FREE_SSANAMES_QUEUE (fn));\n }\n \n /* Dump some simple statistics regarding the re-use of SSA_NAME nodes.  */"}, {"sha": "092ada1db85eeaef257c20f77f65eb12bf871913", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -76,7 +76,7 @@ extern enum value_range_type get_range_info (const_tree, wide_int *,\n extern void set_nonzero_bits (tree, const wide_int_ref &);\n extern wide_int get_nonzero_bits (const_tree);\n extern void init_ssanames (struct function *, int);\n-extern void fini_ssanames (void);\n+extern void fini_ssanames (struct function *);\n extern void ssanames_print_statistics (void);\n extern tree make_ssa_name_fn (struct function *, tree, gimple *);\n extern void release_ssa_name_fn (struct function *, tree);"}, {"sha": "0a47d35a1bd5b9590480a251ff448eb3aba00063", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -10281,7 +10281,7 @@ execute_vrp (void)\n   ssa_propagate (vrp_visit_stmt, vrp_visit_phi_node);\n   vrp_finalize ();\n \n-  free_numbers_of_iterations_estimates ();\n+  free_numbers_of_iterations_estimates (cfun);\n \n   /* ASSERT_EXPRs must be removed before finalizing jump threads\n      as finalizing jump threads calls the CFG cleanup code which"}, {"sha": "efdb434e236d180822dd0b721e0eb9a62bfdd291", "filename": "gcc/value-prof.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -603,13 +603,13 @@ free_hist (void **slot, void *data ATTRIBUTE_UNUSED)\n }\n \n void\n-free_histograms (void)\n+free_histograms (struct function *fn)\n {\n-  if (VALUE_HISTOGRAMS (cfun))\n+  if (VALUE_HISTOGRAMS (fn))\n     {\n-      htab_traverse (VALUE_HISTOGRAMS (cfun), free_hist, NULL);\n-      htab_delete (VALUE_HISTOGRAMS (cfun));\n-      VALUE_HISTOGRAMS (cfun) = NULL;\n+      htab_traverse (VALUE_HISTOGRAMS (fn), free_hist, NULL);\n+      htab_delete (VALUE_HISTOGRAMS (fn));\n+      VALUE_HISTOGRAMS (fn) = NULL;\n     }\n }\n "}, {"sha": "2ac77db806e2a7da7d86f3b215915cca42c00401", "filename": "gcc/value-prof.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=61183076f1dfbea5ac4fb6799aab9bc6e9aa8de5", "patch": "@@ -90,7 +90,7 @@ void gimple_duplicate_stmt_histograms (struct function *, gimple *,\n \t\t\t\t       struct function *, gimple *);\n void gimple_move_stmt_histograms (struct function *, gimple *, gimple *);\n void verify_histograms (void);\n-void free_histograms (void);\n+void free_histograms (function *);\n void stringop_block_profile (gimple *, unsigned int *, HOST_WIDE_INT *);\n gcall *gimple_ic (gcall *, struct cgraph_node *, int, gcov_type,\n \t\t  gcov_type);"}]}