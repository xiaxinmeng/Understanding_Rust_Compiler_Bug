{"sha": "0dd9dd1fdfca1219bbe3ac460b50c6776b427119", "node_id": "C_kwDOANBUbNoAKDBkZDlkZDFmZGZjYTEyMTliYmUzYWM0NjBiNTBjNjc3NmI0MjcxMTk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-12T22:04:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-14T14:35:41Z"}, "message": "libstdc++: Disable all emergency EH pool code if obj-count == 0\n\nFor a zero-sized static pool we can completely elide all code for the EH\npool.\n\nWe no longer need to adjust the static buffer size to ensure at least\none free_entry can be created in it, because we no longer use a static\nbuffer at all if obj_count == 0. If the buffer exists, obj_count >= 1\nand the buffer will be much larger than sizeof(free_entry).\n\nlibstdc++-v3/ChangeLog:\n\n\t* libsupc++/eh_alloc.cc [USE_POOL]: New macro.\n\t[!USE_POOL] (__gnu_cxx::__freeres, pool): Do not define.\n\t[_GLIBCXX_EH_POOL_STATIC] (pool::arena): Do not use std::max.\n\t(__cxxabiv1::__cxa_allocate_exception) [!USE_POOL]: Do not use\n\tpool.\n\t(__cxxabiv1::__cxa_free_exception) [!USE_POOL]: Likewise.\n\t(__cxxabiv1::__cxa_allocate_dependent_exception) [!USE_POOL]:\n\tLikewise.\n\t(__cxxabiv1::__cxa_free_dependent_exception) [!USE_POOL]:\n\tLikewise.", "tree": {"sha": "d658f3094b09bfea5263f7b42d258232001cf18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d658f3094b09bfea5263f7b42d258232001cf18c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dd9dd1fdfca1219bbe3ac460b50c6776b427119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd9dd1fdfca1219bbe3ac460b50c6776b427119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd9dd1fdfca1219bbe3ac460b50c6776b427119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd9dd1fdfca1219bbe3ac460b50c6776b427119/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0b7e9787c3686c47219a725f2cbcaa19faaaca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0b7e9787c3686c47219a725f2cbcaa19faaaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0b7e9787c3686c47219a725f2cbcaa19faaaca"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "e93f14c887ba2de414c56164e3d45014a1c43923", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd9dd1fdfca1219bbe3ac460b50c6776b427119/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd9dd1fdfca1219bbe3ac460b50c6776b427119/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=0dd9dd1fdfca1219bbe3ac460b50c6776b427119", "patch": "@@ -101,12 +101,21 @@ using namespace __cxxabiv1;\n #ifdef _GLIBCXX_EH_POOL_NOBJS\n # if _GLIBCXX_EH_POOL_NOBJS > MAX_OBJ_COUNT\n #  warning \"_GLIBCXX_EH_POOL_NOBJS value is too large; ignoring it\"\n+# elif _GLIBCXX_EH_POOL_NOBJS < 0\n+#  warning \"_GLIBCXX_EH_POOL_NOBJS value is negative; ignoring it\"\n # else\n #  undef EMERGENCY_OBJ_COUNT\n #  define EMERGENCY_OBJ_COUNT _GLIBCXX_EH_POOL_NOBJS\n # endif\n #endif\n \n+#if defined _GLIBCXX_EH_POOL_STATIC && EMERGENCY_OBJ_COUNT == 0\n+# define USE_POOL 0\n+#else\n+# define USE_POOL 1\n+#endif\n+\n+#if USE_POOL\n namespace __gnu_cxx\n {\n   void __freeres() noexcept;\n@@ -161,7 +170,7 @@ namespace\n #ifdef _GLIBCXX_EH_POOL_STATIC\n       static constexpr std::size_t arena_size\n \t= buffer_size_in_bytes(EMERGENCY_OBJ_COUNT, EMERGENCY_OBJ_SIZE);\n-      alignas(void*) char arena[std::max(arena_size, sizeof(free_entry))];\n+      alignas(void*) char arena[arena_size];\n #else\n       char *arena = nullptr;\n       std::size_t arena_size = 0;\n@@ -374,6 +383,7 @@ namespace __gnu_cxx\n #endif\n   }\n }\n+#endif // USE_POOL\n \n extern \"C\" void *\n __cxxabiv1::__cxa_allocate_exception(std::size_t thrown_size) noexcept\n@@ -382,8 +392,10 @@ __cxxabiv1::__cxa_allocate_exception(std::size_t thrown_size) noexcept\n \n   void *ret = malloc (thrown_size);\n \n+#if USE_POOL\n   if (!ret)\n     ret = emergency_pool.allocate (thrown_size);\n+#endif\n \n   if (!ret)\n     std::terminate ();\n@@ -398,9 +410,11 @@ extern \"C\" void\n __cxxabiv1::__cxa_free_exception(void *vptr) noexcept\n {\n   char *ptr = (char *) vptr - sizeof (__cxa_refcounted_exception);\n+#if USE_POOL\n   if (emergency_pool.in_pool (ptr)) [[__unlikely__]]\n     emergency_pool.free (ptr);\n   else\n+#endif\n     free (ptr);\n }\n \n@@ -410,8 +424,10 @@ __cxxabiv1::__cxa_allocate_dependent_exception() noexcept\n {\n   void *ret = malloc (sizeof (__cxa_dependent_exception));\n \n+#if USE_POOL\n   if (!ret)\n     ret = emergency_pool.allocate (sizeof (__cxa_dependent_exception));\n+#endif\n \n   if (!ret)\n     std::terminate ();\n@@ -426,8 +442,10 @@ extern \"C\" void\n __cxxabiv1::__cxa_free_dependent_exception\n   (__cxa_dependent_exception *vptr) noexcept\n {\n+#if USE_POOL\n   if (emergency_pool.in_pool (vptr)) [[__unlikely__]]\n     emergency_pool.free (vptr);\n   else\n+#endif\n     free (vptr);\n }"}]}