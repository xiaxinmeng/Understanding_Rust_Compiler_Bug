{"sha": "7bb3fbbb4dd015ad83f96871e15124f896761284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiM2ZiYmI0ZGQwMTVhZDgzZjk2ODcxZTE1MTI0Zjg5Njc2MTI4NA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-08-08T20:23:06Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-08-08T20:23:06Z"}, "message": "* tree.h (get_identifier) Define a macro form of get_identifier\n\tthat calls get_identifier_with_length when the string is constant.\n\t(get_identifier_with_length): Change type of second argument to\n\tsize_t in prototype.\n\t* stringpool.c (get_identifier): Undefine the macro before giving\n\tthe function definition.\n\t(get_identifier_with_length): Change  type of second argument to\n\tsize_t in function definition.\n\t* hashtable.c (calc_hash): Change type of second argument to size_t.\n  \t(ht_lookup): Change type of third argument to size_t.  Reorganize\n\tto speed-up the cases where the hash table slot is empty, or the\n\tfirst probe matches (i.e. there isn't a collision).\n\t* hashtable.h (ht_lookup): Adjust function prototype.\n\nFrom-SVN: r70256", "tree": {"sha": "dc8f4bbb708356e7d8cc6e1931e9f1b46e3866b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc8f4bbb708356e7d8cc6e1931e9f1b46e3866b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bb3fbbb4dd015ad83f96871e15124f896761284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb3fbbb4dd015ad83f96871e15124f896761284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bb3fbbb4dd015ad83f96871e15124f896761284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb3fbbb4dd015ad83f96871e15124f896761284/comments", "author": null, "committer": null, "parents": [{"sha": "32247ce9e4968e0a7d48efd79b1853f77ad2e598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32247ce9e4968e0a7d48efd79b1853f77ad2e598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32247ce9e4968e0a7d48efd79b1853f77ad2e598"}], "stats": {"total": 85, "additions": 63, "deletions": 22}, "files": [{"sha": "6a85d4d30360b2505b16c17134b59752b8286829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bb3fbbb4dd015ad83f96871e15124f896761284", "patch": "@@ -1,3 +1,19 @@\n+2003-08-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.h (get_identifier) Define a macro form of get_identifier\n+\tthat calls get_identifier_with_length when the string is constant.\n+\t(get_identifier_with_length): Change type of second argument to\n+\tsize_t in prototype.\n+\t* stringpool.c (get_identifier): Undefine the macro before giving\n+\tthe function definition.\n+\t(get_identifier_with_length): Change  type of second argument to\n+\tsize_t in function definition.\n+\t* hashtable.c (calc_hash): Change type of second argument to size_t.\n+  \t(ht_lookup): Change type of third argument to size_t.  Reorganize\n+\tto speed-up the cases where the hash table slot is empty, or the\n+\tfirst probe matches (i.e. there isn't a collision).\n+\t* hashtable.h (ht_lookup): Adjust function prototype.\n+\n 2003-08-08  Bernardo Innocenti  <bernie@develer.com>\n \n \tPR target/9697"}, {"sha": "ea7d2b07577d1af33ee0eccb3087e66a5a63004a", "filename": "gcc/hashtable.c", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2Fhashtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2Fhashtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.c?ref=7bb3fbbb4dd015ad83f96871e15124f896761284", "patch": "@@ -30,16 +30,16 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    existing entry with a potential new one.  Also, the ability to\n    delete members from the table has been removed.  */\n \n-static unsigned int calc_hash (const unsigned char *, unsigned int);\n+static unsigned int calc_hash (const unsigned char *, size_t);\n static void ht_expand (hash_table *);\n static double approx_sqrt (double);\n \n /* Calculate the hash of the string STR of length LEN.  */\n \n static unsigned int\n-calc_hash (const unsigned char *str, unsigned int len)\n+calc_hash (const unsigned char *str, size_t len)\n {\n-  unsigned int n = len;\n+  size_t n = len;\n   unsigned int r = 0;\n #define HASHSTEP(r, c) ((r) * 67 + ((c) - 113));\n \n@@ -92,7 +92,7 @@ ht_destroy (hash_table *table)\n    CPP_ALLOCED and the item is assumed to be at the top of the\n    obstack.  */\n hashnode\n-ht_lookup (hash_table *table, const unsigned char *str, unsigned int len,\n+ht_lookup (hash_table *table, const unsigned char *str, size_t len,\n \t   enum ht_lookup_option insert)\n {\n   unsigned int hash = calc_hash (str, len);\n@@ -103,21 +103,15 @@ ht_lookup (hash_table *table, const unsigned char *str, unsigned int len,\n \n   sizemask = table->nslots - 1;\n   index = hash & sizemask;\n-\n-  /* hash2 must be odd, so we're guaranteed to visit every possible\n-     location in the table during rehashing.  */\n-  hash2 = ((hash * 17) & sizemask) | 1;\n   table->searches++;\n \n-  for (;;)\n+  node = table->entries[index];\n+ \n+  if (node != NULL)\n     {\n-      node = table->entries[index];\n-\n-      if (node == NULL)\n-\tbreak;\n-\n-      if (node->hash_value == hash && HT_LEN (node) == len\n-          && !memcmp (HT_STR (node), str, len))\n+      if (node->hash_value == hash\n+\t  && HT_LEN (node) == (unsigned int) len\n+\t  && !memcmp (HT_STR (node), str, len))\n \t{\n \t  if (insert == HT_ALLOCED)\n \t    /* The string we search for was placed at the end of the\n@@ -126,8 +120,29 @@ ht_lookup (hash_table *table, const unsigned char *str, unsigned int len,\n \t  return node;\n \t}\n \n-      index = (index + hash2) & sizemask;\n-      table->collisions++;\n+      /* hash2 must be odd, so we're guaranteed to visit every possible\n+\t location in the table during rehashing.  */\n+      hash2 = ((hash * 17) & sizemask) | 1;\n+\n+      for (;;)\n+\t{\n+\t  table->collisions++;\n+\t  index = (index + hash2) & sizemask;\n+\t  node = table->entries[index];\n+\t  if (node == NULL)\n+\t    break;\n+\n+\t  if (node->hash_value == hash\n+\t      && HT_LEN (node) == (unsigned int) len\n+\t      && !memcmp (HT_STR (node), str, len))\n+\t    {\n+\t      if (insert == HT_ALLOCED)\n+\t      /* The string we search for was placed at the end of the\n+\t\t obstack.  Release it.  */\n+\t\tobstack_free (&table->stack, (void *) str);\n+\t      return node;\n+\t    }\n+\t}\n     }\n \n   if (insert == HT_NO_INSERT)\n@@ -136,7 +151,7 @@ ht_lookup (hash_table *table, const unsigned char *str, unsigned int len,\n   node = (*table->alloc_node) (table);\n   table->entries[index] = node;\n \n-  HT_LEN (node) = len;\n+  HT_LEN (node) = (unsigned int) len;\n   node->hash_value = hash;\n   if (insert == HT_ALLOC)\n     HT_STR (node) = obstack_copy0 (&table->stack, str, len);"}, {"sha": "8efbf5c50e2e20cae5512e782e72aef8be02652f", "filename": "gcc/hashtable.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.h?ref=7bb3fbbb4dd015ad83f96871e15124f896761284", "patch": "@@ -67,7 +67,7 @@ extern hash_table *ht_create (unsigned int order);\n extern void ht_destroy (hash_table *);\n \n extern hashnode ht_lookup (hash_table *, const unsigned char *,\n-\t\t\t   unsigned int, enum ht_lookup_option);\n+\t\t\t   size_t, enum ht_lookup_option);\n \n /* For all nodes in TABLE, make a callback.  The callback takes\n    TABLE->PFILE, the node, and a PTR, and the callback sequence stops"}, {"sha": "0cf3be14f88034537f6ed533853d7bff54607e57", "filename": "gcc/stringpool.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=7bb3fbbb4dd015ad83f96871e15124f896761284", "patch": "@@ -95,6 +95,8 @@ ggc_alloc_string (const char *contents, int length)\n    If an identifier with that name has previously been referred to,\n    the same node is returned this time.  */\n \n+#undef get_identifier\n+\n tree\n get_identifier (const char *text)\n {\n@@ -110,7 +112,7 @@ get_identifier (const char *text)\n    known.  */\n \n tree\n-get_identifier_with_length (const char *text, unsigned int length)\n+get_identifier_with_length (const char *text, size_t length)\n {\n   hashnode ht_node = ht_lookup (ident_hash,\n \t\t\t\t(const unsigned char *) text,"}, {"sha": "69e75e1af36d2cd59bc1ab5823403ad30eb4d363", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb3fbbb4dd015ad83f96871e15124f896761284/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7bb3fbbb4dd015ad83f96871e15124f896761284", "patch": "@@ -2050,10 +2050,18 @@ extern tree make_tree_vec (int);\n \n extern tree get_identifier (const char *);\n \n+#if GCC_VERSION >= 3000\n+#define get_identifier(str) \\\n+  (__builtin_constant_p (str)\t\t\t\t\\\n+    ? get_identifier_with_length ((str), strlen (str))  \\\n+    : get_identifier (str))\n+#endif\n+\n+\n /* Identical to get_identifier, except that the length is assumed\n    known.  */\n \n-extern tree get_identifier_with_length (const char *, unsigned int);\n+extern tree get_identifier_with_length (const char *, size_t);\n \n /* If an identifier with the name TEXT (a null-terminated string) has\n    previously been referred to, return that node; otherwise return"}]}