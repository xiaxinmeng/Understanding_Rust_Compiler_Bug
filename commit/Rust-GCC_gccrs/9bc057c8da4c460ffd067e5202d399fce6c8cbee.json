{"sha": "9bc057c8da4c460ffd067e5202d399fce6c8cbee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjMDU3YzhkYTRjNDYwZmZkMDY3ZTUyMDJkMzk5ZmNlNmM4Y2JlZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-03-17T11:53:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-17T11:53:53Z"}, "message": "re PR middle-end/70245 (Miscompilation of ICU on i386 with atom tuning starting with r227382)\n\n\tPR target/70245\n\t* rtl.h (replace_rtx): Add ALL_REGS argument.\n\t* rtlanal.c (replace_rtx): Likewise.  If true, use REGNO\n\tequality and assert mode is the same, instead of just rtx pointer\n\tequality.\n\t* config/i386/i386.md (mov + arithmetics with load peephole): Pass\n\ttrue as ALL_REGS argument to replace_rtx.\n\nFrom-SVN: r234285", "tree": {"sha": "aa8a16afdb4d9862a59c6cb53f3fe9990ab1bf61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa8a16afdb4d9862a59c6cb53f3fe9990ab1bf61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bc057c8da4c460ffd067e5202d399fce6c8cbee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc057c8da4c460ffd067e5202d399fce6c8cbee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc057c8da4c460ffd067e5202d399fce6c8cbee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc057c8da4c460ffd067e5202d399fce6c8cbee/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea913779b0921886a8d8503263f27e3ddfc1831b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea913779b0921886a8d8503263f27e3ddfc1831b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea913779b0921886a8d8503263f27e3ddfc1831b"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "3edfba0b110d2f7359796794124e6569b00eab38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc057c8da4c460ffd067e5202d399fce6c8cbee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc057c8da4c460ffd067e5202d399fce6c8cbee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bc057c8da4c460ffd067e5202d399fce6c8cbee", "patch": "@@ -1,3 +1,13 @@\n+2016-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70245\n+\t* rtl.h (replace_rtx): Add ALL_REGS argument.\n+\t* rtlanal.c (replace_rtx): Likewise.  If true, use REGNO\n+\tequality and assert mode is the same, instead of just rtx pointer\n+\tequality.\n+\t* config/i386/i386.md (mov + arithmetics with load peephole): Pass\n+\ttrue as ALL_REGS argument to replace_rtx.\n+\n 2016-03-17  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* match.pd (A + (B vcmp C ? 1 : 0) -> A - (B vcmp C)): Apply"}, {"sha": "eed43b1273a3cddd93b0419ad074df450d76c0ef", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc057c8da4c460ffd067e5202d399fce6c8cbee/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc057c8da4c460ffd067e5202d399fce6c8cbee/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9bc057c8da4c460ffd067e5202d399fce6c8cbee", "patch": "@@ -17885,7 +17885,7 @@\n    (parallel [(set (match_dup 0)\n                    (match_op_dup 3 [(match_dup 0) (match_dup 1)]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[4] = replace_rtx (operands[2], operands[0], operands[1]);\")\n+  \"operands[4] = replace_rtx (operands[2], operands[0], operands[1], true);\")\n \n (define_peephole2\n   [(set (match_operand 0 \"register_operand\")"}, {"sha": "7f0bfa443a02e2ec3c7848162fac9bcbb6bc1163", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc057c8da4c460ffd067e5202d399fce6c8cbee/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc057c8da4c460ffd067e5202d399fce6c8cbee/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9bc057c8da4c460ffd067e5202d399fce6c8cbee", "patch": "@@ -3011,7 +3011,7 @@ extern bool can_nonlocal_goto (const rtx_insn *);\n extern void copy_reg_eh_region_note_forward (rtx, rtx_insn *, rtx);\n extern void copy_reg_eh_region_note_backward (rtx, rtx_insn *, rtx);\n extern int inequality_comparisons_p (const_rtx);\n-extern rtx replace_rtx (rtx, rtx, rtx);\n+extern rtx replace_rtx (rtx, rtx, rtx, bool = false);\n extern void replace_label (rtx *, rtx, rtx, bool);\n extern void replace_label_in_insn (rtx_insn *, rtx, rtx, bool);\n extern bool rtx_referenced_p (const_rtx, const_rtx);"}, {"sha": "b4dff86c0e9a7abff946f834ad8aa76ffcb2aeb9", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc057c8da4c460ffd067e5202d399fce6c8cbee/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc057c8da4c460ffd067e5202d399fce6c8cbee/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=9bc057c8da4c460ffd067e5202d399fce6c8cbee", "patch": "@@ -2946,10 +2946,13 @@ inequality_comparisons_p (const_rtx x)\n    not enter into CONST_DOUBLE for the replace.\n \n    Note that copying is not done so X must not be shared unless all copies\n-   are to be modified.  */\n+   are to be modified.\n+\n+   ALL_REGS is true if we want to replace all REGs equal to FROM, not just\n+   those pointer-equal ones.  */\n \n rtx\n-replace_rtx (rtx x, rtx from, rtx to)\n+replace_rtx (rtx x, rtx from, rtx to, bool all_regs)\n {\n   int i, j;\n   const char *fmt;\n@@ -2961,9 +2964,17 @@ replace_rtx (rtx x, rtx from, rtx to)\n   if (x == 0)\n     return 0;\n \n-  if (GET_CODE (x) == SUBREG)\n+  if (all_regs\n+      && REG_P (x)\n+      && REG_P (from)\n+      && REGNO (x) == REGNO (from))\n+    {\n+      gcc_assert (GET_MODE (x) == GET_MODE (from));\n+      return to;\n+    }\n+  else if (GET_CODE (x) == SUBREG)\n     {\n-      rtx new_rtx = replace_rtx (SUBREG_REG (x), from, to);\n+      rtx new_rtx = replace_rtx (SUBREG_REG (x), from, to, all_regs);\n \n       if (CONST_INT_P (new_rtx))\n \t{\n@@ -2979,7 +2990,7 @@ replace_rtx (rtx x, rtx from, rtx to)\n     }\n   else if (GET_CODE (x) == ZERO_EXTEND)\n     {\n-      rtx new_rtx = replace_rtx (XEXP (x, 0), from, to);\n+      rtx new_rtx = replace_rtx (XEXP (x, 0), from, to, all_regs);\n \n       if (CONST_INT_P (new_rtx))\n \t{\n@@ -2997,10 +3008,11 @@ replace_rtx (rtx x, rtx from, rtx to)\n   for (i = GET_RTX_LENGTH (GET_CODE (x)) - 1; i >= 0; i--)\n     {\n       if (fmt[i] == 'e')\n-\tXEXP (x, i) = replace_rtx (XEXP (x, i), from, to);\n+\tXEXP (x, i) = replace_rtx (XEXP (x, i), from, to, all_regs);\n       else if (fmt[i] == 'E')\n \tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  XVECEXP (x, i, j) = replace_rtx (XVECEXP (x, i, j), from, to);\n+\t  XVECEXP (x, i, j) = replace_rtx (XVECEXP (x, i, j),\n+\t\t\t\t\t   from, to, all_regs);\n     }\n \n   return x;"}]}