{"sha": "93f90be62c1d84539017ab6d73b061993b367f54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNmOTBiZTYyYzFkODQ1MzkwMTdhYjZkNzNiMDYxOTkzYjM2N2Y1NA==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@apple.com", "date": "2004-08-16T20:08:31Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2004-08-16T20:08:31Z"}, "message": "Patch to fix -mcpu=G5 interface to EH runtime library.\n\nReviewed by Geoff Keating.\n\nFrom-SVN: r86074", "tree": {"sha": "7ef0be49eaaa279546b71216e1d64b9fd033a840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ef0be49eaaa279546b71216e1d64b9fd033a840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93f90be62c1d84539017ab6d73b061993b367f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f90be62c1d84539017ab6d73b061993b367f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f90be62c1d84539017ab6d73b061993b367f54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f90be62c1d84539017ab6d73b061993b367f54/comments", "author": null, "committer": null, "parents": [{"sha": "392765bf8d611c30e50e135893fb61bfad198d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392765bf8d611c30e50e135893fb61bfad198d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392765bf8d611c30e50e135893fb61bfad198d42"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "85d5500d36bd0e12d59dde162ee3402b6cbe3085", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93f90be62c1d84539017ab6d73b061993b367f54", "patch": "@@ -1,3 +1,13 @@\n+2004-08-16  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\t* except.c (get_exception_filter, build_post_landing_pads,\n+\tdw2_build_landing_pads): Use target-specific mode for 'filter'.\n+\t* target-def.h (TARGET_EH_RETURN_FILTER_MODE): macro defined and used.\n+\t* target.h (eh_return_filter_mode): New field added.\n+\t* targhooks.c (default_eh_return_filter_mode): Defined.\n+\t* targhooks.h (default_eh_return_filter_mode): Declared.\n+\t* config/rs6000/rs6000.c (rs6000_eh_return_filter_mode): Defined.\n+\n 2004-08-16  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure.ac: Replace _GCC_TOPLEV_NONCANONICAL_TARGET with"}, {"sha": "a1760ed0e4890c80f332a8a4a6410d4f44dfe7e7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=93f90be62c1d84539017ab6d73b061993b367f54", "patch": "@@ -748,6 +748,8 @@ static tree rs6000_build_builtin_va_list (void);\n static tree rs6000_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool rs6000_must_pass_in_stack (enum machine_mode, tree);\n \n+static enum machine_mode rs6000_eh_return_filter_mode (void);\n+\n /* Hash table stuff for keeping track of TOC entries.  */\n \n struct toc_hash_struct GTY(())\n@@ -964,6 +966,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR rs6000_gimplify_va_arg\n \n+#undef TARGET_EH_RETURN_FILTER_MODE\n+#define TARGET_EH_RETURN_FILTER_MODE rs6000_eh_return_filter_mode\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -17171,4 +17176,11 @@ rs6000_dbx_register_number (unsigned int regno)\n   abort ();\n }\n \n+/* target hook eh_return_filter_mode */\n+static enum machine_mode \n+rs6000_eh_return_filter_mode (void)\n+{\n+  return TARGET_32BIT ? SImode : word_mode;\n+}\n+\n #include \"gt-rs6000.h\""}, {"sha": "c9e086ec758894814e8e25b91f5ac381dd09cb57", "filename": "gcc/except.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=93f90be62c1d84539017ab6d73b061993b367f54", "patch": "@@ -628,7 +628,7 @@ get_exception_filter (struct function *fun)\n   rtx filter = fun->eh->filter;\n   if (fun == cfun && ! filter)\n     {\n-      filter = gen_reg_rtx (word_mode);\n+      filter = gen_reg_rtx (targetm.eh_return_filter_mode ());\n       fun->eh->filter = filter;\n     }\n   return filter;\n@@ -1528,7 +1528,8 @@ build_post_landing_pads (void)\n \t\t\temit_cmp_and_jump_insns\n \t\t\t  (cfun->eh->filter,\n \t\t\t   GEN_INT (tree_low_cst (TREE_VALUE (flt_node), 0)),\n-\t\t\t   EQ, NULL_RTX, word_mode, 0, c->label);\n+\t\t\t   EQ, NULL_RTX, \n+\t\t\t   targetm.eh_return_filter_mode (), 0, c->label);\n \n \t\t\ttp_node = TREE_CHAIN (tp_node);\n \t\t\tflt_node = TREE_CHAIN (flt_node);\n@@ -1560,7 +1561,8 @@ build_post_landing_pads (void)\n \n \t  emit_cmp_and_jump_insns (cfun->eh->filter,\n \t\t\t\t   GEN_INT (region->u.allowed.filter),\n-\t\t\t\t   EQ, NULL_RTX, word_mode, 0, region->label);\n+\t\t\t\t   EQ, NULL_RTX, \n+\t\t\t\t   targetm.eh_return_filter_mode (), 0, region->label);\n \n \t  /* We delay the generation of the _Unwind_Resume until we generate\n \t     landing pads.  We emit a marker here so as to get good control\n@@ -1738,7 +1740,8 @@ dw2_build_landing_pads (void)\n       emit_move_insn (cfun->eh->exc_ptr,\n \t\t      gen_rtx_REG (ptr_mode, EH_RETURN_DATA_REGNO (0)));\n       emit_move_insn (cfun->eh->filter,\n-\t\t      gen_rtx_REG (word_mode, EH_RETURN_DATA_REGNO (1)));\n+\t\t      gen_rtx_REG (targetm.eh_return_filter_mode (), \n+\t\t\t\t   EH_RETURN_DATA_REGNO (1)));\n \n       seq = get_insns ();\n       end_sequence ();"}, {"sha": "7180a3e1f6724be3da3be3cd2a9c135848fe007a", "filename": "gcc/target-def.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=93f90be62c1d84539017ab6d73b061993b367f54", "patch": "@@ -268,6 +268,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    TARGET_SCHED_DFA_NEW_CYCLE,\t\t\t\t\t\\\n    TARGET_SCHED_IS_COSTLY_DEPENDENCE}\n \n+/* In except.c */\n+#define TARGET_EH_RETURN_FILTER_MODE  default_eh_return_filter_mode;\n+\n /* In tree.c.  */\n #define TARGET_MERGE_DECL_ATTRIBUTES merge_decl_attributes\n #define TARGET_MERGE_TYPE_ATTRIBUTES merge_type_attributes\n@@ -436,6 +439,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n {\t\t\t\t\t\t\\\n   TARGET_ASM_OUT,\t\t\t\t\\\n   TARGET_SCHED,\t\t\t\t\t\\\n+  TARGET_EH_RETURN_FILTER_MODE,\t\t\t\\\n   TARGET_MERGE_DECL_ATTRIBUTES,\t\t\t\\\n   TARGET_MERGE_TYPE_ATTRIBUTES,\t\t\t\\\n   TARGET_ATTRIBUTE_TABLE,\t\t\t\\"}, {"sha": "ad37161bc48ea2de7b70e95bbbf0db51116c956a", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=93f90be62c1d84539017ab6d73b061993b367f54", "patch": "@@ -276,6 +276,9 @@ struct gcc_target\n     bool (* is_costly_dependence) (rtx, rtx, rtx, int, int);\n   } sched;\n \n+  /* Return machine mode for filter value. */\n+  enum machine_mode (* eh_return_filter_mode) (void);\n+\n   /* Given two decls, merge their attributes and return the result.  */\n   tree (* merge_decl_attributes) (tree, tree);\n "}, {"sha": "00d7e8444d7fac2d6428d613cbd8fea1e9e4fa1f", "filename": "gcc/targhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=93f90be62c1d84539017ab6d73b061993b367f54", "patch": "@@ -128,6 +128,12 @@ default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n \t  != default_setup_incoming_varargs);\n }\n \n+enum machine_mode \n+default_eh_return_filter_mode (void)\n+{\n+  return word_mode;\n+}\n+\n /* Generic hook that takes a CUMULATIVE_ARGS pointer and returns true.  */\n \n bool"}, {"sha": "077175eda9df6429f09dd252932542cf28697e8d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90be62c1d84539017ab6d73b061993b367f54/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=93f90be62c1d84539017ab6d73b061993b367f54", "patch": "@@ -31,6 +31,8 @@ extern rtx default_builtin_setjmp_frame_value (void);\n extern bool hook_bool_CUMULATIVE_ARGS_false (CUMULATIVE_ARGS *);\n extern bool default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n \n+extern enum machine_mode default_eh_return_filter_mode (void);\n+\n extern bool hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS *);\n extern tree default_cxx_guard_type (void);\n extern tree default_cxx_get_cookie_size (tree);"}]}