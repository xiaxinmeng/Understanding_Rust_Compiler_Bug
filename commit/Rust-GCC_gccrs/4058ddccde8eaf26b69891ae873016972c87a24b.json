{"sha": "4058ddccde8eaf26b69891ae873016972c87a24b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1OGRkY2NkZThlYWYyNmI2OTg5MWFlODczMDE2OTcyYzg3YTI0Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:36:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:36:52Z"}, "message": "[multiple changes]\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.adb: Minor reformatting.\n\t* opt.ads: Minor comment updates.\n\t* sem.adb: Minor name change Is_Main_Unit =>\n\tIs_Main_Unit_Or_Main_Unit_Spec.\n\t* sem_ch6.adb: Minor reformatting and code reorganization.\n\n2014-01-20  Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: Update gnatpp switches.\n\n2014-01-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch9.adb: Minor comment edit.\n\nFrom-SVN: r206827", "tree": {"sha": "9c64e970d90f9c129794fbb9ef3ce595d46a1011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c64e970d90f9c129794fbb9ef3ce595d46a1011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4058ddccde8eaf26b69891ae873016972c87a24b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4058ddccde8eaf26b69891ae873016972c87a24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4058ddccde8eaf26b69891ae873016972c87a24b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4058ddccde8eaf26b69891ae873016972c87a24b/comments", "author": null, "committer": null, "parents": [{"sha": "d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a764c4fbaf9df22d41c00df4a2ec53355460d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a764c4fbaf9df22d41c00df4a2ec53355460d5"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "19369aee7db68c54dbe3b1c70c3c0ac50bd8d3a7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4058ddccde8eaf26b69891ae873016972c87a24b", "patch": "@@ -1,3 +1,19 @@\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch7.adb: Minor reformatting.\n+\t* opt.ads: Minor comment updates.\n+\t* sem.adb: Minor name change Is_Main_Unit =>\n+\tIs_Main_Unit_Or_Main_Unit_Spec.\n+\t* sem_ch6.adb: Minor reformatting and code reorganization.\n+\n+2014-01-20  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: Update gnatpp switches.\n+\n+2014-01-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch9.adb: Minor comment edit.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document that Allow_Integer_Address is permitted"}, {"sha": "8a16033233fe5db94d89b2dcfa19aa684705913b", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=4058ddccde8eaf26b69891ae873016972c87a24b", "patch": "@@ -7989,12 +7989,15 @@ package body Exp_Ch7 is\n       --  optimize away the extra conditional expression, so we can do this\n       --  modification unconditionally here.\n \n+      --  Why don't we add a test of Opt.Preserve_Control_Flow here???\n+\n       if Is_Boolean_Type (Typ) then\n-         Expr := Make_If_Expression (Loc,\n-                   Expressions => New_List (\n-                     Expr,\n-                     New_Occurrence_Of (Standard_True, Loc),\n-                     New_Occurrence_Of (Standard_False, Loc)));\n+         Expr :=\n+           Make_If_Expression (Loc,\n+             Expressions => New_List (\n+               Expr,\n+               New_Occurrence_Of (Standard_True, Loc),\n+               New_Occurrence_Of (Standard_False, Loc)));\n       end if;\n \n       Insert_Actions (N, New_List ("}, {"sha": "c505e16d09f38a52571c3e945a181b2d296c6ff1", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=4058ddccde8eaf26b69891ae873016972c87a24b", "patch": "@@ -1021,7 +1021,9 @@ package body Exp_Ch9 is\n       --  If compiling with -fpreserve-control-flow, make sure we insert an\n       --  IF statement so that the back-end knows to generate a conditional\n       --  branch instruction, even if the condition is just the name of a\n-      --  boolean object.\n+      --  boolean object. Note that Expand_N_If_Statement knows to preserve\n+      --  such redundant IF statements under -fpreserve-control-flow\n+      --  (whether coming from this routine, or directly from source).\n \n       if Opt.Suppress_Control_Flow_Optimizations then\n          Stmt := Make_Implicit_If_Statement (Cond,"}, {"sha": "6485e9daa82ba2103d1bd9626d5d03cdb9323420", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=4058ddccde8eaf26b69891ae873016972c87a24b", "patch": "@@ -14145,6 +14145,10 @@ Reformat comment blocks\n @item ^-c5^/COMMENTS_LAYOUT=KEEP_SPECIAL^\n Keep unchanged special form comments\n \n+@item --comments-only\n+@cindex @option{--comments-only} @command{gnatpp}\n+Format just the comments.\n+\n @cindex @option{^-l@var{n}^/CONSTRUCT_LAYOUT^} (@command{gnatpp})\n @item ^-l1^/CONSTRUCT_LAYOUT=GNAT^\n GNAT-style layout (this is the default)\n@@ -14431,10 +14435,6 @@ Display Copyright and version, then exit disregarding all other options.\n @cindex @option{--help} @command{gnatpp}\n Display usage, then exit disregarding all other options.\n \n-@item --pp-new\n-@cindex @option{--pp-new} @command{gnatpp}\n-Use the new experimental formatting algorithms. This is the default.\n-\n @item --pp-old\n @cindex @option{--pp-old} @command{gnatpp}\n Use the old formatting algorithms.\n@@ -14659,6 +14659,17 @@ the comment) should be without any change moved from the argument source\n into reformatted source. This switch allows to preserve comments that are used\n as a special marks in the code (e.g.@: SPARK annotation).\n \n+@noindent\n+The @option{--comments-only} switch specifies that only the comments\n+are formatted; the rest of the program text is left alone. The\n+comments are formatted according to the -c3 and -c4 switches; other\n+formatting switches are ignored. For example, @option{--comments-only\n+-c4} means to fill comment paragraphs, and do nothing else. Likewise,\n+@option{--comments-only -c3} ensures comments start with at least two\n+spaces after @code{--}, and @option{--comments-only -c3 -c4} does\n+both. If @option{--comments-only} is given without @option{-c3} or\n+@option{-c4}, then gnatpp doesn't format anything.\n+\n @node Construct Layout\n @subsection Construct Layout\n "}, {"sha": "ea3dd20957250a1c7af6adbee0b05c1325969d7e", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=4058ddccde8eaf26b69891ae873016972c87a24b", "patch": "@@ -1919,10 +1919,11 @@ package Opt is\n    --  This procedure sets the switches to the appropriate initial values. The\n    --  parameter Internal_Unit is True for an internal or predefined unit, and\n    --  affects the way the switches are set (see above). Main_Unit is true if\n-   --  switches are being set for the main unit (this affects setting of the\n-   --  assert/debug pragma switches, which are normally set false by default\n-   --  for an internal unit, except when the internal unit is the main unit,\n-   --  in which case we use the command line settings).\n+   --  switches are being set for the main unit or for the spec of the main\n+   --  unit. This affects setting of the assert/debug pragma switches, which\n+   --  are normally set false by default for an internal unit, except when the\n+   --  internal unit is the main unit, in which case we use the command line\n+   --  settings).\n \n    procedure Restore_Opt_Config_Switches (Save : Config_Switches_Type);\n    --  This procedure restores a set of switch values previously saved by a"}, {"sha": "ced4d41a165e6ecd3ad2385ff5e01d067780c152", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=4058ddccde8eaf26b69891ae873016972c87a24b", "patch": "@@ -1322,15 +1322,14 @@ package body Sem is\n       --  If the main unit is generic, every compiled unit, including its\n       --  context, is compiled with expansion disabled.\n \n-      --  configuration flags have special settings when compiling a predefined\n-      --  file as a main unit. This applies to its spec as well.\n-\n-      Is_Main_Unit : constant Boolean :=\n+      Is_Main_Unit_Or_Main_Unit_Spec : constant Boolean :=\n          Current_Sem_Unit = Main_Unit\n            or else\n              (Nkind (Unit (Cunit (Main_Unit))) = N_Package_Body\n                and then Library_Unit (Cunit (Main_Unit)) =\n                   Cunit (Current_Sem_Unit));\n+      --  Configuration flags have special settings when compiling a predefined\n+      --  file as a main unit. This applies to its spec as well.\n \n       Ext_Main_Source_Unit : constant Boolean :=\n                                In_Extended_Main_Source_Unit (Comp_Unit);\n@@ -1431,7 +1430,7 @@ package body Sem is\n       Save_Opt_Config_Switches (Save_Config_Switches);\n       Set_Opt_Config_Switches\n         (Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit)),\n-          Is_Main_Unit);\n+         Is_Main_Unit_Or_Main_Unit_Spec);\n \n       --  Save current non-partition-wide restrictions\n "}, {"sha": "9555dd1eab05343be02d9cd6cf91dd2997e25abe", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058ddccde8eaf26b69891ae873016972c87a24b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4058ddccde8eaf26b69891ae873016972c87a24b", "patch": "@@ -457,9 +457,11 @@ package body Sem_Ch6 is\n             --  and will be redone when analyzing the body.\n \n             declare\n-               Expr : Node_Id renames Expression (Ret);\n+               Expr : constant Node_Id := Expression (Ret);\n+\n             begin\n                Set_Parent (Expr, Ret);\n+\n                if not In_Instance then\n                   Preanalyze_Spec_Expression (Expr, Etype (Id));\n                end if;"}]}