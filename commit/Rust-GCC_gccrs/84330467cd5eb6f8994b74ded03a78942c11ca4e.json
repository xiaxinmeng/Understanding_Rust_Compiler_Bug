{"sha": "84330467cd5eb6f8994b74ded03a78942c11ca4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzMzA0NjdjZDVlYjZmODk5NGI3NGRlZDAzYTc4OTQyYzExY2E0ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-12T22:40:00Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-12T22:40:00Z"}, "message": "gcc.texi: Change the font used for @def...\n\n\t* doc/gcc.texi: Change the font used for @def... commands to a\n\tfixed width font.\n\t* doc/extend.texi: Use more logical markup.  Use \"built-in\"\n\tinstead of \"builtin\".  Use @deftypefn to mark up built-in\n\tfunctions; specify their types in the @deftypefn and not in the\n\tdescriptive text.  Use TeX quotes and dashes.  Add more index\n\tentries.\n\nFrom-SVN: r43274", "tree": {"sha": "cf59c8d89d927b830d06c055327cd7bfa62dcd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf59c8d89d927b830d06c055327cd7bfa62dcd9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84330467cd5eb6f8994b74ded03a78942c11ca4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84330467cd5eb6f8994b74ded03a78942c11ca4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84330467cd5eb6f8994b74ded03a78942c11ca4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84330467cd5eb6f8994b74ded03a78942c11ca4e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f69f71d874e39aea6d9114ecb048f285e704d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f69f71d874e39aea6d9114ecb048f285e704d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f69f71d874e39aea6d9114ecb048f285e704d5"}], "stats": {"total": 218, "additions": 126, "deletions": 92}, "files": [{"sha": "3d24489c19483c30929553fac9a62bce26df1235", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84330467cd5eb6f8994b74ded03a78942c11ca4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84330467cd5eb6f8994b74ded03a78942c11ca4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84330467cd5eb6f8994b74ded03a78942c11ca4e", "patch": "@@ -1,3 +1,13 @@\n+2001-06-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/gcc.texi: Change the font used for @def... commands to a\n+\tfixed width font.\n+\t* doc/extend.texi: Use more logical markup.  Use \"built-in\"\n+\tinstead of \"builtin\".  Use @deftypefn to mark up built-in\n+\tfunctions; specify their types in the @deftypefn and not in the\n+\tdescriptive text.  Use TeX quotes and dashes.  Add more index\n+\tentries.\n+\n 2001-06-12  lars brinkhoff  <lars@nocrew.org>\n \n \t* gcc.texi (HOST_BITS_PER_LONGLONG): Document."}, {"sha": "88530600d24234f2f1d664e08e76d9b267437fce", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 110, "deletions": 92, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84330467cd5eb6f8994b74ded03a78942c11ca4e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84330467cd5eb6f8994b74ded03a78942c11ca4e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=84330467cd5eb6f8994b74ded03a78942c11ca4e", "patch": "@@ -7,8 +7,9 @@\n @cindex extensions, C language\n @cindex C language extensions\n \n+@opindex pedantic\n GNU C provides several language features not found in ISO standard C.\n-(The @samp{-pedantic} option directs GNU CC to print a warning message if\n+(The @option{-pedantic} option directs GNU CC to print a warning message if\n any of these features is used.)  To test for the availability of these\n features in conditional compilation, check for a predefined macro\n @code{__GNUC__}, which is always defined under GNU CC.\n@@ -498,43 +499,41 @@ and later return that value, without knowing what data type\n the function tried to return (as long as your caller expects\n that data type).\n \n-@table @code\n-@findex __builtin_apply_args\n-@item __builtin_apply_args ()\n-This built-in function returns a pointer of type @code{void *} to data\n+@deftypefn {Built-in Function} {void *} __builtin_apply_args ()\n+This built-in function returns a pointer to data\n describing how to perform a call with the same arguments as were passed\n to the current function.\n \n The function saves the arg pointer register, structure value address,\n and all registers that might be used to pass arguments to a function\n into a block of memory allocated on the stack.  Then it returns the\n address of that block.\n+@end deftypefn\n \n-@findex __builtin_apply\n-@item __builtin_apply (@var{function}, @var{arguments}, @var{size})\n-This built-in function invokes @var{function} (type @code{void (*)()})\n-with a copy of the parameters described by @var{arguments} (type\n-@code{void *}) and @var{size} (type @code{int}).\n+@deftypefn {Built-in Function} {void *} __builtin_apply (void (*@var{function})(), void *@var{arguments}, size_t @var{size})\n+This built-in function invokes @var{function}\n+with a copy of the parameters described by @var{arguments}\n+and @var{size}.\n \n The value of @var{arguments} should be the value returned by\n @code{__builtin_apply_args}.  The argument @var{size} specifies the size\n of the stack argument data, in bytes.\n \n-This function returns a pointer of type @code{void *} to data describing\n+This function returns a pointer to data describing\n how to return whatever value was returned by @var{function}.  The data\n is saved in a block of memory allocated on the stack.\n \n It is not always simple to compute the proper value for @var{size}.  The\n value is used by @code{__builtin_apply} to compute the amount of data\n that should be pushed on the stack and copied from the incoming argument\n area.\n+@end deftypefn\n \n-@findex __builtin_return\n-@item __builtin_return (@var{result})\n+@deftypefn {Built-in Function} {void} __builtin_return (void *@var{result})\n This built-in function returns the value described by @var{result} from\n the containing function.  You should specify, for @var{result}, a value\n returned by @code{__builtin_apply}.\n-@end table\n+@end deftypefn\n \n @node Naming Types\n @section Naming an Expression's Type\n@@ -794,9 +793,9 @@ ISO C99 supports data types for integers that are at least 64 bits wide,\n and as an extension GCC supports them in C89 mode and in C++.\n Simply write @code{long long int} for a signed integer, or\n @code{unsigned long long int} for an unsigned integer.  To make an\n-integer constant of type @code{long long int}, add the suffix @code{LL}\n+integer constant of type @code{long long int}, add the suffix @samp{LL}\n to the integer.  To make an integer constant of type @code{unsigned long\n-long int}, add the suffix @code{ULL} to the integer.\n+long int}, add the suffix @samp{ULL} to the integer.\n \n You can use these types in arithmetic like any other integer types.\n Addition, subtraction, and bitwise boolean operations on these types\n@@ -851,14 +850,14 @@ extract the imaginary part.  This is a GNU extension; for values of\n floating type, you should use the ISO C99 functions @code{crealf},\n @code{creal}, @code{creall}, @code{cimagf}, @code{cimag} and\n @code{cimagl}, declared in @code{<complex.h>} and also provided as\n-builtin functions by GCC.\n+built-in functions by GCC.\n \n @cindex complex conjugation\n The operator @samp{~} performs complex conjugation when used on a value\n with a complex type.  This is a GNU extension; for values of\n floating type, you should use the ISO C99 functions @code{conjf},\n @code{conj} and @code{conjl}, declared in @code{<complex.h>} and also\n-provided as builtin functions by GCC.\n+provided as built-in functions by GCC.\n \n GNU CC can allocate complex automatic variables in a noncontiguous\n fashion; it's even possible for the real part to be in a register while\n@@ -882,16 +881,16 @@ decimal notation, such as @code{1.55e1}, but also numbers such as\n @code{0x1.fp3} written in hexadecimal format.  As a GNU extension, GCC\n supports this in C89 mode (except in some cases when strictly\n conforming) and in C++.  In that format the\n-@code{0x} hex introducer and the @code{p} or @code{P} exponent field are\n+@samp{0x} hex introducer and the @samp{p} or @samp{P} exponent field are\n mandatory.  The exponent is a decimal number that indicates the power of\n-2 by which the significant part will be multiplied.  Thus @code{0x1.f} is\n-1 15/16, @code{p3} multiplies it by 8, and the value of @code{0x1.fp3}\n+2 by which the significant part will be multiplied.  Thus @samp{0x1.f} is\n+1 15/16, @samp{p3} multiplies it by 8, and the value of @code{0x1.fp3}\n is the same as @code{1.55e1}.\n \n Unlike for floating-point numbers in the decimal notation the exponent\n is always required in the hexadecimal notation.  Otherwise the compiler\n would not be able to resolve the ambiguity of, e.g., @code{0x1.f}.  This\n-could mean @code{1.0f} or @code{1.9375} since @code{f} is also the\n+could mean @code{1.0f} or @code{1.9375} since @samp{f} is also the\n extension for floating-point constants of type @code{float}.\n \n @node Zero Length\n@@ -1201,7 +1200,8 @@ size of a @code{void} or of a function as 1.\n A consequence of this is that @code{sizeof} is also allowed on @code{void}\n and on function types, and returns 1.\n \n-The option @samp{-Wpointer-arith} requests a warning if these extensions\n+@opindex Wpointer-arith\n+The option @option{-Wpointer-arith} requests a warning if these extensions\n are used.\n \n @node Initializers\n@@ -1640,7 +1640,7 @@ than 2.96.\n @item const\n Many functions do not examine any values except their arguments, and\n have no effects except the return value.  Basically this is just slightly\n-more strict class than the \"pure\" attribute above, since function is not\n+more strict class than the @code{pure} attribute above, since function is not\n allowed to read global memory.\n \n @cindex pointer arguments\n@@ -1667,6 +1667,7 @@ specifies that the @samp{const} must be attached to the return value.\n \n @item format (@var{archetype}, @var{string-index}, @var{first-to-check})\n @cindex @code{format} function attribute\n+@opindex Wformat\n The @code{format} attribute specifies that a function takes @code{printf},\n @code{scanf}, @code{strftime} or @code{strfmon} style arguments which\n should be type-checked against a format string.  For example, the\n@@ -1700,14 +1701,15 @@ argument of the function @code{my_print}, and the arguments to check\n start with the third argument, so the correct parameters for the format\n attribute are 2 and 3.\n \n+@opindex ffreestanding\n The @code{format} attribute allows you to identify your own functions\n which take format strings as arguments, so that GNU CC can check the\n calls to these functions for errors.  The compiler always (unless\n-@samp{-ffreestanding} is used) checks formats\n+@option{-ffreestanding} is used) checks formats\n for the standard library functions @code{printf}, @code{fprintf},\n @code{sprintf}, @code{scanf}, @code{fscanf}, @code{sscanf}, @code{strftime},\n @code{vprintf}, @code{vfprintf} and @code{vsprintf} whenever such\n-warnings are requested (using @samp{-Wformat}), so there is no need to\n+warnings are requested (using @option{-Wformat}), so there is no need to\n modify the header file @file{stdio.h}.  In C99 mode, the functions\n @code{snprintf}, @code{vsnprintf}, @code{vscanf}, @code{vfscanf} and\n @code{vsscanf} are also checked.  Except in strictly conforming C\n@@ -1716,6 +1718,7 @@ standard modes, the X/Open function @code{strfmon} is also checked.\n \n @item format_arg (@var{string-index})\n @cindex @code{format_arg} function attribute\n+@opindex Wformat-nonliteral\n The @code{format_arg} attribute specifies that a function takes a format\n string for a @code{printf}, @code{scanf}, @code{strftime} or\n @code{strfmon} style function and modifies it (for example, to translate\n@@ -1739,7 +1742,7 @@ consistency with the format string argument @code{my_format}.  If the\n @code{format_arg} attribute had not been specified, all the compiler\n could tell in such calls to format functions would be that the format\n string argument is not constant; this would generate a warning when\n-@code{-Wformat-nonliteral} is used, but the calls could not be checked\n+@option{-Wformat-nonliteral} is used, but the calls could not be checked\n without the attribute.\n \n The parameter @var{string-index} specifies which argument is the format\n@@ -1751,17 +1754,18 @@ calls to @code{printf}, @code{scanf}, @code{strftime} or @code{strfmon}\n type function whose operands are a call to one of your own function.\n The compiler always treats @code{gettext}, @code{dgettext}, and\n @code{dcgettext} in this manner except when strict ISO C support is\n-requested by @samp{-ansi} or an appropriate @samp{-std} option, or\n-@samp{-ffreestanding} is used.  @xref{C Dialect Options,,Options\n+requested by @option{-ansi} or an appropriate @option{-std} option, or\n+@option{-ffreestanding} is used.  @xref{C Dialect Options,,Options\n Controlling C Dialect}.\n \n @item no_instrument_function\n @cindex @code{no_instrument_function} function attribute\n-If @samp{-finstrument-functions} is given, profiling function calls will\n+@opindex finstrument-functions\n+If @option{-finstrument-functions} is given, profiling function calls will\n be generated at entry and exit of most user-compiled functions.\n Functions with this attribute will not be so instrumented.\n \n-@item section (\"section-name\")\n+@item section (\"@var{section-name}\")\n @cindex @code{section} function attribute\n Normally, the compiler places the code it generates in the @code{text} section.\n Sometimes, however, you need additional sections, or you need certain\n@@ -1817,7 +1821,7 @@ may be treated as if it were the malloc function.  The compiler assumes\n that calls to malloc result in a pointers that cannot alias anything.\n This will often improve optimization.\n \n-@item alias (\"target\")\n+@item alias (\"@var{target}\")\n @cindex @code{alias} attribute\n The @code{alias} attribute causes the declaration to be emitted as an\n alias for another symbol, which must be specified.  For instance,\n@@ -1834,9 +1838,10 @@ Not all target machines support this attribute.\n \n @item no_check_memory_usage\n @cindex @code{no_check_memory_usage} function attribute\n+@opindex fcheck-memory-usage\n The @code{no_check_memory_usage} attribute causes GNU CC to omit checks\n of memory references when it generates code for that function.  Normally\n-if you specify @samp{-fcheck-memory-usage} (see @pxref{Code Gen\n+if you specify @option{-fcheck-memory-usage} (see @pxref{Code Gen\n Options}), GNU CC generates calls to support routines before most memory\n accesses to permit support code to record usage and detect uses of\n uninitialized or unallocated storage.  Since GNU CC cannot handle\n@@ -1851,8 +1856,8 @@ you wish, without getting infinite recursion if they get compiled with\n @item regparm (@var{number})\n @cindex functions that are passed arguments in registers on the 386\n On the Intel 386, the @code{regparm} attribute causes the compiler to\n-pass up to @var{number} integer arguments in registers @var{EAX},\n-@var{EDX}, and @var{ECX} instead of on the stack.  Functions that take a\n+pass up to @var{number} integer arguments in registers EAX,\n+EDX, and ECX instead of on the stack.  Functions that take a\n variable number of arguments will continue to be passed all of their\n arguments on the stack.\n \n@@ -1867,10 +1872,11 @@ attribute.\n \n @item cdecl\n @cindex functions that do pop the argument stack on the 386\n+@opindex mrtd\n On the Intel 386, the @code{cdecl} attribute causes the compiler to\n assume that the calling function will pop off the stack space used to\n pass arguments.  This is\n-useful to override the effects of the @samp{-mrtd} switch.\n+useful to override the effects of the @option{-mrtd} switch.\n \n The PowerPC compiler for Windows NT currently ignores the @code{cdecl}\n attribute.\n@@ -2298,8 +2304,8 @@ In GNU C, you may use C++ style comments, which start with @samp{//} and\n continue until the end of the line.  Many other C implementations allow\n such comments, and they are likely to be in a future C standard.\n However, C++ style comments are not recognized if you specify\n-@w{@samp{-ansi}}, a @option{-std} option specifying a version of ISO C\n-before C99, or @w{@samp{-traditional}}, since they are incompatible\n+@w{@option{-ansi}}, a @option{-std} option specifying a version of ISO C\n+before C99, or @w{@option{-traditional}}, since they are incompatible\n with traditional constructs like @code{dividend//*comment*/divisor}.\n \n @node Dollar Signs\n@@ -2459,9 +2465,10 @@ or @samp{__pointer__} for the mode used to represent pointers.\n \n @item nocommon\n @cindex @code{nocommon} attribute\n+@opindex fno-common\n This attribute specifies requests GNU CC not to place a variable\n ``common'' but instead to allocate space for it directly.  If you\n-specify the @samp{-fno-common} flag, GNU CC will do this for all\n+specify the @option{-fno-common} flag, GNU CC will do this for all\n variables.\n \n Specifying the @code{nocommon} attribute for a variable provides an\n@@ -2486,7 +2493,7 @@ struct foo\n @};\n @end example\n \n-@item section (\"section-name\")\n+@item section (\"@var{section-name}\")\n @cindex @code{section} variable attribute\n Normally, the compiler places the objects it generates in sections like\n @code{data} and @code{bss}.  Sometimes, however, you need additional sections,\n@@ -2525,8 +2532,8 @@ You may only use the @code{section} attribute with a fully initialized\n global definition because of the way linkers work.  The linker requires\n each object be defined once, with the exception that uninitialized\n variables tentatively go in the @code{common} (or @code{bss}) section\n-and can be multiply \"defined\".  You can force a variable to be\n-initialized with the @samp{-fno-common} flag or the @code{nocommon}\n+and can be multiply ``defined''.  You can force a variable to be\n+initialized with the @option{-fno-common} flag or the @code{nocommon}\n attribute.\n \n Some file formats do not support arbitrary sections so the @code{section}\n@@ -2539,7 +2546,7 @@ section, consider using the facilities of the linker instead.\n On Windows NT, in addition to putting variable definitions in a named\n section, the section can also be shared among all running copies of an\n executable or DLL. For example, this small program defines shared data\n-by putting it in a named section \"shared\" and marking the section\n+by putting it in a named section @code{shared} and marking the section\n shareable:\n \n @smallexample\n@@ -2712,9 +2719,10 @@ This attribute, attached to an @code{enum}, @code{struct}, or\n @code{union} type definition, specified that the minimum required memory\n be used to represent the type.\n \n+@opindex fshort-enums\n Specifying this attribute for @code{struct} and @code{union} types is\n equivalent to specifying the @code{packed} attribute on each of the\n-structure or union members.  Specifying the @samp{-fshort-enums}\n+structure or union members.  Specifying the @option{-fshort-enums}\n flag on the line is equivalent to specifying the @code{packed}\n attribute on all @code{enum} definitions.\n \n@@ -2811,7 +2819,7 @@ inline function's code needs to be included.  The effect on code size is\n less predictable; object code may be larger or smaller with function\n inlining, depending on the particular case.  Inlining of functions is an\n optimization and it really ``works'' only in optimizing compilation.  If\n-you don't use @samp{-O}, no function is really inline.\n+you don't use @option{-O}, no function is really inline.\n \n Inline functions are included in the ISO C99 standard, but there are\n currently substantial differences between what GCC implements and what\n@@ -2831,13 +2839,14 @@ inc (int *a)\n (If you are writing a header file to be included in ISO C programs, write\n @code{__inline__} instead of @code{inline}.  @xref{Alternate Keywords}.)\n You can also make all ``simple enough'' functions inline with the option\n-@samp{-finline-functions}.\n+@option{-finline-functions}.\n \n+@opindex Winline\n Note that certain usages in a function definition can make it unsuitable\n for inline substitution.  Among these usages are: use of varargs, use of\n alloca, use of variable sized data types (@pxref{Variable Length}),\n use of computed goto (@pxref{Labels as Values}), use of nonlocal goto,\n-and nested functions (@pxref{Nested Functions}).  Using @samp{-Winline}\n+and nested functions (@pxref{Nested Functions}).  Using @option{-Winline}\n will warn when a function marked @code{inline} could not be substituted,\n and will give the reason for the failure.\n \n@@ -2848,17 +2857,19 @@ does not affect the linkage of the function.\n @cindex @code{inline} automatic for C++ member fns\n @cindex member fns, automatically @code{inline}\n @cindex C++ member fns, automatically @code{inline}\n+@opindex fno-default-inline\n GNU CC automatically inlines member functions defined within the class\n body of C++ programs even if they are not explicitly declared\n-@code{inline}.  (You can override this with @samp{-fno-default-inline};\n+@code{inline}.  (You can override this with @option{-fno-default-inline};\n @pxref{C++ Dialect Options,,Options Controlling C++ Dialect}.)\n \n @cindex inline functions, omission of\n+@opindex fkeep-inline-functions\n When a function is both inline and @code{static}, if all calls to the\n function are integrated into the caller, and the function's address is\n never used, then the function's own assembler code is never referenced.\n In this case, GNU CC does not actually output assembler code for the\n-function, unless you specify the option @samp{-fkeep-inline-functions}.\n+function, unless you specify the option @option{-fkeep-inline-functions}.\n Some calls cannot be integrated for various reasons (in particular,\n calls that precede the function's definition cannot be integrated, and\n neither can recursive calls within the definition).  If there is a\n@@ -3206,7 +3217,7 @@ For any input reg that is implicitly popped by an asm, it is\n necessary to know how to adjust the stack to compensate for the pop.\n If any non-popped input is closer to the top of the reg-stack than\n the implicitly popped reg, it would not be possible to know what the\n-stack looked like --- it's not clear how the rest of the stack ``slides\n+stack looked like---it's not clear how the rest of the stack ``slides\n up''.\n \n All implicitly popped input regs must be closer to the top of\n@@ -3236,7 +3247,7 @@ asm (\"foo\" : \"=&t\" (a) : \"f\" (b));\n \n @item\n Some operands need to be in particular places on the stack.  All\n-output operands fall in this category --- there is no other way to\n+output operands fall in this category---there is no other way to\n know which regs the outputs appear in unless the user indicates\n this in the constraints.\n \n@@ -3425,7 +3436,7 @@ solve this problem.)\n If you want to recompile @code{qsort} or other source files which do not\n actually use your global register variable, so that they will not use that\n register for any other purpose, then it suffices to specify the compiler\n-option @samp{-ffixed-@var{reg}}.  You need not actually add a global\n+option @option{-ffixed-@var{reg}}.  You need not actually add a global\n register declaration to their source code.\n \n A function which can alter the value of a global register variable cannot\n@@ -3544,7 +3555,8 @@ macros to replace them with the customary keywords.  It looks like this:\n @end example\n \n @findex __extension__\n-@samp{-pedantic} and other options cause warnings for many GNU C extensions.\n+@opindex pedantic\n+@option{-pedantic} and other options cause warnings for many GNU C extensions.\n You can\n prevent such warnings within one expression by writing\n @code{__extension__} before the expression.  @code{__extension__} has no\n@@ -3656,9 +3668,7 @@ variables, declared in the same way as @code{__func__}.\n These functions may be used to get information about the callers of a\n function.\n \n-@table @code\n-@findex __builtin_return_address\n-@item __builtin_return_address (@var{level})\n+@deftypefn {Built-in Function} {void *} __builtin_return_address (unsigned int @var{level})\n This function returns the return address of the current function, or of\n one of its callers.  The @var{level} argument is number of frames to\n scan up the call stack.  A value of @code{0} yields the return address\n@@ -3673,9 +3683,9 @@ of the stack has been reached, this function will return @code{0}.\n \n This function should only be used with a non-zero argument for debugging\n purposes.\n+@end deftypefn\n \n-@findex __builtin_frame_address\n-@item __builtin_frame_address (@var{level})\n+@deftypefn {Built-in Function} {void *} __builtin_frame_address (unsigned int @var{level})\n This function is similar to @code{__builtin_return_address}, but it\n returns the address of the function frame rather than the return address\n of the function.  Calling @code{__builtin_frame_address} with a value of\n@@ -3693,7 +3703,7 @@ pointer register.\n \n The caveats that apply to @code{__builtin_return_address} apply to this\n function as well.\n-@end table\n+@end deftypefn\n \n @node Other Builtins\n @section Other built-in functions provided by GNU CC\n@@ -3767,39 +3777,42 @@ recommend general use of these functions.\n \n The remaining functions are provided for optimization purposes.\n \n-GNU CC includes builtin versions of many of the functions in the\n+@opindex fno-builtin\n+GNU CC includes built-in versions of many of the functions in the\n standard C library.  The versions prefixed with @code{__builtin_} will\n always be treated as having the same meaning as the C library function\n-even if you specify the @samp{-fno-builtin} (@pxref{C Dialect Options})\n+even if you specify the @option{-fno-builtin} (@pxref{C Dialect Options})\n option.  Many of these functions are only optimized in certain cases; if\n not optimized in a particular case, a call to the library function will\n be emitted.\n \n+@opindex ansi\n+@opindex std\n The functions @code{abort}, @code{exit}, @code{_Exit} and @code{_exit}\n are recognized and presumed not to return, but otherwise are not built\n-in.  @code{_exit} is not recognized in strict ISO C mode (@samp{-ansi},\n-@samp{-std=c89} or @samp{-std=c99}).  @code{_Exit} is not recognized in\n-strict C89 mode (@samp{-ansi} or @samp{-std=c89}).\n+in.  @code{_exit} is not recognized in strict ISO C mode (@option{-ansi},\n+@option{-std=c89} or @option{-std=c99}).  @code{_Exit} is not recognized in\n+strict C89 mode (@option{-ansi} or @option{-std=c89}).\n \n Outside strict ISO C mode, the functions @code{alloca}, @code{bcmp},\n @code{bzero}, @code{index}, @code{rindex} and @code{ffs} may be handled\n-as builtins.  Corresponding versions @code{__builtin_alloca},\n+as built-in functions.  Corresponding versions @code{__builtin_alloca},\n @code{__builtin_bcmp}, @code{__builtin_bzero}, @code{__builtin_index},\n @code{__builtin_rindex} and @code{__builtin_ffs} are also recognized in\n strict ISO C mode.\n \n The ISO C99 functions @code{conj}, @code{conjf}, @code{conjl},\n @code{creal}, @code{crealf}, @code{creall}, @code{cimag}, @code{cimagf},\n-@code{cimagl}, @code{llabs} and @code{imaxabs} are handled as builtins\n-except in strict ISO C89 mode.  There are also builtin versions of the ISO C99\n+@code{cimagl}, @code{llabs} and @code{imaxabs} are handled as built-in functions\n+except in strict ISO C89 mode.  There are also built-in versions of the ISO C99\n functions @code{cosf}, @code{cosl}, @code{fabsf}, @code{fabsl},\n @code{sinf}, @code{sinl}, @code{sqrtf}, and @code{sqrtl}, that are\n recognized in any mode since ISO C89 reserves these names for the\n purpose to which ISO C99 puts them.  All these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n-The following ISO C89 functions are recognized as builtins unless\n-@samp{-fno-builtin} is specified: @code{abs}, @code{cos}, @code{fabs},\n+The following ISO C89 functions are recognized as built-in functions unless\n+@option{-fno-builtin} is specified: @code{abs}, @code{cos}, @code{fabs},\n @code{fprintf}, @code{fputs}, @code{labs}, @code{memcmp}, @code{memcpy},\n @code{memset}, @code{printf}, @code{sin}, @code{sqrt}, @code{strcat},\n @code{strchr}, @code{strcmp}, @code{strcpy}, @code{strcspn},\n@@ -3809,25 +3822,23 @@ of these functions have corresponding versions prefixed with\n @code{__builtin_}, except that the version for @code{sqrt} is called\n @code{__builtin_fsqrt}.\n \n-GNU CC provides builtin versions of the ISO C99 floating point\n+GNU CC provides built-in versions of the ISO C99 floating point\n comparison macros (that avoid raising exceptions for unordered\n operands): @code{__builtin_isgreater}, @code{__builtin_isgreaterequal},\n @code{__builtin_isless}, @code{__builtin_islessequal},\n @code{__builtin_islessgreater}, and @code{__builtin_isunordered}.\n \n \n-@table @code\n-@findex __builtin_constant_p\n-@item __builtin_constant_p (@var{exp})\n-You can use the builtin function @code{__builtin_constant_p} to\n+@deftypefn {Built-in Function} int __builtin_constant_p (@var{exp})\n+You can use the built-in function @code{__builtin_constant_p} to\n determine if a value is known to be constant at compile-time and hence\n that GNU CC can perform constant-folding on expressions involving that\n value.  The argument of the function is the value to test.  The function\n returns the integer 1 if the argument is known to be a compile-time\n constant and 0 if it is not known to be a compile-time constant.  A\n return of 0 does not indicate that the value is @emph{not} a constant,\n but merely that GNU CC cannot prove it is a constant with the specified\n-value of the @samp{-O} option.\n+value of the @option{-O} option.\n \n You would typically use this function in an embedded application where\n memory was a critical resource.  If you have some complex calculation,\n@@ -3840,26 +3851,27 @@ a function if it does not.  For example:\n   ? ((X) * SCALE + OFFSET) : Scale (X))\n @end smallexample\n \n-You may use this builtin function in either a macro or an inline\n+You may use this built-in function in either a macro or an inline\n function.  However, if you use it in an inlined function and pass an\n-argument of the function as the argument to the builtin, GNU CC will\n+argument of the function as the argument to the built-in, GNU CC will\n never return 1 when you call the inline function with a string constant\n or compound literal (@pxref{Compound Literals}) and will not return 1\n when you pass a constant numeric value to the inline function unless you\n-specify the @samp{-O} option.\n+specify the @option{-O} option.\n+@end deftypefn\n \n-@findex __builtin_expect\n-@item __builtin_expect(@var{exp}, @var{c})\n+@deftypefn {Built-in Function} long __builtin_expect (long @var{exp}, long @var{c})\n+@opindex fprofile-arcs\n You may use @code{__builtin_expect} to provide the compiler with\n branch prediction information.  In general, you should prefer to\n-use actual profile feedback for this (@samp{-fprofile-arcs}), as\n+use actual profile feedback for this (@option{-fprofile-arcs}), as\n programmers are notoriously bad at predicting how their programs\n actually perform.  However, there are applications in which this\n data is hard to collect.\n \n The return value is the value of @var{exp}, which should be an\n integral expression.  The value of @var{c} must be a compile-time\n-constant.  The semantics of the builtin are that it is expected\n+constant.  The semantics of the built-in are that it is expected\n that @var{exp} == @var{c}.  For example:\n \n @smallexample\n@@ -3879,7 +3891,7 @@ if (__builtin_expect (ptr != NULL, 1))\n \n @noindent\n when testing pointer or floating-point values.\n-@end table\n+@end deftypefn\n \n @node C++ Extensions\n @chapter Extensions to the C++ Language\n@@ -4045,7 +4057,7 @@ an rvalue.\n \n As with gcc, g++ understands the C99 feature of restricted pointers,\n specified with the @code{__restrict__}, or @code{__restrict} type\n-qualifier. Because you cannot compile C++ by specifying the -std=c99\n+qualifier. Because you cannot compile C++ by specifying the @option{-std=c99}\n language flag, @code{restrict} is not a keyword in C++.\n \n In addition to allowing restricted pointers, you can specify restricted\n@@ -4269,12 +4281,13 @@ an explicit @code{extern} declaration---the compiler emits no code at\n all to define an independent version of the function.  Its definition\n is used only for inlining with its callers.\n \n+@opindex fno-implement-inlines\n Conversely, when you include the same header file in a main source file\n that declares it as @samp{#pragma implementation}, the compiler emits\n code for the function itself; this defines a version of the function\n that can be found via pointers (or by callers compiled without\n inlining).  If all calls to the function can be inlined, you can avoid\n-emitting the function by compiling with @samp{-fno-implement-inlines}.\n+emitting the function by compiling with @option{-fno-implement-inlines}.\n If any calls were not inlined, you will get linker errors.\n \n @node Template Instantiation\n@@ -4340,7 +4353,8 @@ template instantiations:\n \n @enumerate\n @item\n-Compile your template-using code with @samp{-frepo}.  The compiler will\n+@opindex frepo\n+Compile your template-using code with @option{-frepo}.  The compiler will\n generate files with the extension @samp{.rpo} listing all of the\n template instantiations used in the corresponding object files which\n could be instantiated there; the link wrapper, @samp{collect2}, will\n@@ -4364,7 +4378,8 @@ For greater control, use explicit instantiation as described in the next\n option.\n \n @item\n-Compile your code with @samp{-fno-implicit-templates} to disable the\n+@opindex fno-implicit-templates\n+Compile your code with @option{-fno-implicit-templates} to disable the\n implicit generation of template instances, and explicitly instantiate\n all the ones you use.  This approach requires more knowledge of exactly\n which instances you need than do the others, but it's less\n@@ -4388,11 +4403,11 @@ for each of the instances you need, and create a template instantiation\n library from those.\n \n If you are using Cfront-model code, you can probably get away with not\n-using @samp{-fno-implicit-templates} when compiling files that don't\n+using @option{-fno-implicit-templates} when compiling files that don't\n @samp{#include} the member template definitions.\n \n If you use one big file to do the instantiations, you may want to\n-compile it without @samp{-fno-implicit-templates} so you get all of the\n+compile it without @option{-fno-implicit-templates} so you get all of the\n instances required by your explicit instantiations (but not by any\n other files) without having to specify them as well.\n \n@@ -4418,11 +4433,12 @@ uses.  In a large program, this can lead to an unacceptable amount of code\n duplication.\n \n @item\n+@opindex fexternal-templates\n Add @samp{#pragma interface} to all files containing template\n definitions.  For each of these files, add @samp{#pragma implementation\n \"@var{filename}\"} to the top of some @samp{.C} file which\n @samp{#include}s it.  Then compile everything with\n-@samp{-fexternal-templates}.  The templates will then only be expanded\n+@option{-fexternal-templates}.  The templates will then only be expanded\n in the translation unit which implements them (i.e. has a @samp{#pragma\n implementation} line for the file where they live); all other files will\n use external references.  If you're lucky, everything should work\n@@ -4442,8 +4458,9 @@ using code written for the Cfront model, the file containing a class\n template and the file containing its member templates should be\n implemented in the same translation unit.\n \n+@opindex falt-external-templates\n A slight variation on this approach is to instead use the flag\n-@samp{-falt-external-templates}; this flag causes template\n+@option{-falt-external-templates}; this flag causes template\n instances to be emitted in the translation unit that implements the\n header where they are first instantiated, rather than the one which\n implements the file where the templates are defined.  This header must\n@@ -4493,7 +4510,8 @@ converted to function pointers directly:\n fptr p1 = (fptr)(&A::foo);\n @end example\n \n-You must specify @samp{-Wno-pmf-conversions} to use this extension.\n+@opindex Wno-pmf-conversions\n+You must specify @option{-Wno-pmf-conversions} to use this extension.\n \n @node C++ Attributes\n @section C++-Specific Variable, Function, and Type Attributes"}, {"sha": "c38b95d5fd491d6f0ebe9bf24d5dcd6bd2c9b28b", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84330467cd5eb6f8994b74ded03a78942c11ca4e/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84330467cd5eb6f8994b74ded03a78942c11ca4e/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=84330467cd5eb6f8994b74ded03a78942c11ca4e", "patch": "@@ -103,6 +103,12 @@\n @c \\global\\normaloffset =0.75in\n @c @end tex\n \n+@c Change the font used for @def... commands, since the default\n+@c proportional one used is bad for names starting __.\n+@tex\n+\\global\\setfont\\defbf\\ttbshape{10}{\\magstep1}\n+@end tex\n+\n @ifnottex\n @dircategory Programming\n @direntry"}]}