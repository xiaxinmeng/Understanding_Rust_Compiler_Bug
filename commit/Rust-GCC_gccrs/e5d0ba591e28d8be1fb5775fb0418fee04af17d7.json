{"sha": "e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVkMGJhNTkxZTI4ZDhiZTFmYjU3NzVmYjA0MThmZWUwNGFmMTdkNw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-06-16T07:50:07Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-06-16T07:50:07Z"}, "message": "d/dmd: Merge upstream dmd f8e38c001\n\nFixes bug where foreach(int) doesn't work on BigEndian targets by\ndeprecating the use of index types smaller than a size_t/ptrdiff_t.\n\nReviewed-on: https://github.com/dlang/dmd/pull/10009\n\nFrom-SVN: r272350", "tree": {"sha": "2e9f2bbf419a978098a1a9c4cb3305fd4a402a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9f2bbf419a978098a1a9c4cb3305fd4a402a89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/comments", "author": null, "committer": null, "parents": [{"sha": "9bf706aae20a891885780c9d419addd5d0bc510d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf706aae20a891885780c9d419addd5d0bc510d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf706aae20a891885780c9d419addd5d0bc510d"}], "stats": {"total": 188, "additions": 166, "deletions": 22}, "files": [{"sha": "01c8cb0325d6125b71378efe5f1b44833180fb00", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "patch": "@@ -1,4 +1,4 @@\n-9746504883fc64f3dcec0cd4cacbb7a372d52158\n+f8e38c001b9d7bd6586ee5b3dab7f7f199a69be7\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "167836c0478ed79be74e4097679a3e7a150c739d", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "patch": "@@ -773,16 +773,48 @@ class StatementSemanticVisitor : public Visitor\n                         goto Lerror2;\n                     }\n \n+                    // Finish semantic on all foreach parameter types.\n+                    for (size_t i = 0; i < dim; i++)\n+                    {\n+                        Parameter *p = (*fs->parameters)[i];\n+                        p->type = p->type->semantic(loc, sc2);\n+                        p->type = p->type->addStorageClass(p->storageClass);\n+                    }\n+\n+                    tn = tab->nextOf()->toBasetype();\n+\n+                    if (dim == 2)\n+                    {\n+                        Type *tindex = (*fs->parameters)[0]->type;\n+                        if (!tindex->isintegral())\n+                        {\n+                            fs->error(\"foreach: key cannot be of non-integral type `%s`\",\n+                                      tindex->toChars());\n+                            goto Lerror2;\n+                        }\n+                        /* What cases to deprecate implicit conversions for:\n+                         *  1. foreach aggregate is a dynamic array\n+                         *  2. foreach body is lowered to _aApply (see special case below).\n+                         */\n+                        Type *tv = (*fs->parameters)[1]->type->toBasetype();\n+                        if ((tab->ty == Tarray ||\n+                             (tn->ty != tv->ty &&\n+                              (tn->ty == Tchar || tn->ty == Twchar || tn->ty == Tdchar) &&\n+                              (tv->ty == Tchar || tv->ty == Twchar || tv->ty == Tdchar))) &&\n+                            !Type::tsize_t->implicitConvTo(tindex))\n+                        {\n+                            fs->deprecation(\"foreach: loop index implicitly converted from `size_t` to `%s`\",\n+                                            tindex->toChars());\n+                        }\n+                    }\n+\n                     /* Look for special case of parsing char types out of char type\n                      * array.\n                      */\n-                    tn = tab->nextOf()->toBasetype();\n                     if (tn->ty == Tchar || tn->ty == Twchar || tn->ty == Tdchar)\n                     {\n                         int i = (dim == 1) ? 0 : 1;     // index of value\n                         Parameter *p = (*fs->parameters)[i];\n-                        p->type = p->type->semantic(loc, sc2);\n-                        p->type = p->type->addStorageClass(p->storageClass);\n                         tnv = p->type->toBasetype();\n                         if (tnv->ty != tn->ty &&\n                             (tnv->ty == Tchar || tnv->ty == Twchar || tnv->ty == Tdchar))\n@@ -809,8 +841,6 @@ class StatementSemanticVisitor : public Visitor\n                     {\n                         // Declare parameterss\n                         Parameter *p = (*fs->parameters)[i];\n-                        p->type = p->type->semantic(loc, sc2);\n-                        p->type = p->type->addStorageClass(p->storageClass);\n                         VarDeclaration *var;\n \n                         if (dim == 2 && i == 0)\n@@ -908,6 +938,10 @@ class StatementSemanticVisitor : public Visitor\n                         fs->key = new VarDeclaration(loc, Type::tsize_t, idkey, NULL);\n                         fs->key->storage_class |= STCtemp;\n                     }\n+                    else if (fs->key->type->ty != Tsize_t)\n+                    {\n+                        tmp_length = new CastExp(loc, tmp_length, fs->key->type);\n+                    }\n                     if (fs->op == TOKforeach_reverse)\n                         fs->key->_init = new ExpInitializer(loc, tmp_length);\n                     else"}, {"sha": "f5f45ef9076b860942a9a86ff620b38cd768d507", "filename": "gcc/testsuite/gdc.test/compilable/b16976.d", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb16976.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb16976.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fb16976.d?ref=e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "patch": "@@ -0,0 +1,66 @@\n+/* REQUIRED_ARGS: -m64\n+TEST_OUTPUT:\n+---\n+compilable/b16976.d(33): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(34): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(35): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(36): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(41): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(42): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(43): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(44): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(50): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(51): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(52): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(53): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(58): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(59): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(60): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(61): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(62): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(63): Deprecation: foreach: loop index implicitly converted from `size_t` to `int`\n+compilable/b16976.d(64): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+compilable/b16976.d(65): Deprecation: foreach: loop index implicitly converted from `size_t` to `char`\n+---\n+*/\n+void main()\n+{\n+    int[]  dyn = [1,2,3,4,5];\n+    int[5] sta = [1,2,3,4,5];\n+    char[]  str = ['1','2','3','4','5'];\n+    char[5] chr = ['1','2','3','4','5'];\n+\n+    foreach(int i, v; dyn) { }\n+    foreach_reverse(int i, v; dyn) { }\n+    foreach(char i, v; dyn) { }\n+    foreach_reverse(char i, v; dyn) { }\n+    foreach(int i, v; sta) { }\n+    foreach_reverse(int i, v; sta) { }\n+    foreach(char i, v; sta) { }\n+    foreach_reverse(char i, v; sta) { }\n+    foreach(int i, v; str) { }\n+    foreach_reverse(int i, v; str) { }\n+    foreach(char i, v; str) { }\n+    foreach_reverse(char i, v; str) { }\n+    foreach(int i, v; chr) { }\n+    foreach_reverse(int i, v; chr) { }\n+    foreach(char i, v; chr) { }\n+    foreach_reverse(char i, v; chr) { }\n+\n+    foreach(int i, dchar v; dyn) { }\n+    foreach_reverse(int i, dchar v; dyn) { }\n+    foreach(char i, dchar v; dyn) { }\n+    foreach_reverse(char i, dchar v; dyn) { }\n+    foreach(int i, dchar v; sta) { }\n+    foreach_reverse(int i, dchar v; sta) { }\n+    foreach(char i, dchar v; sta) { }\n+    foreach_reverse(char i, dchar v; sta) { }\n+    foreach(int i, dchar v; str) { }\n+    foreach_reverse(int i, dchar v; str) { }\n+    foreach(char i, dchar v; str) { }\n+    foreach_reverse(char i, dchar v; str) { }\n+    foreach(int i, dchar v; chr) { }\n+    foreach_reverse(int i, dchar v; chr) { }\n+    foreach(char i, dchar v; chr) { }\n+    foreach_reverse(char i, dchar v; chr) { }\n+}"}, {"sha": "36cdd13148b9c1c58ad4cadf0eb56cc9c8b4cf95", "filename": "gcc/testsuite/gdc.test/compilable/interpret3.d", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret3.d?ref=e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "patch": "@@ -3396,13 +3396,13 @@ bool test3512()\n     assert(q == 6);\n \n     // _aApplycw2\n-    foreach (int i, wchar c; s)\n+    foreach (ptrdiff_t i, wchar c; s)\n     {\n         assert(i >= 0 && i < s.length);\n     }\n \n     // _aApplycd2\n-    foreach (int i, dchar c; s)\n+    foreach (ptrdiff_t i, dchar c; s)\n     {\n         assert(i >= 0 && i < s.length);\n     }\n@@ -3424,13 +3424,13 @@ bool test3512()\n     assert(q == 13);\n \n     // _aApplywc2\n-    foreach (int i, char c; w)\n+    foreach (ptrdiff_t i, char c; w)\n     {\n         assert(i >= 0 && i < w.length);\n     }\n \n     // _aApplywd2\n-    foreach (int i, dchar c; w)\n+    foreach (ptrdiff_t i, dchar c; w)\n     {\n         assert(i >= 0 && i < w.length);\n     }\n@@ -3454,19 +3454,19 @@ bool test3512()\n     assert(q == 3);\n \n     // _aApplydc2\n-    foreach (int i, char c; d)\n+    foreach (ptrdiff_t i, char c; d)\n     {\n         assert(i >= 0 && i < d.length);\n     }\n     // _aApplydw2\n-    foreach (int i, wchar c; d)\n+    foreach (ptrdiff_t i, wchar c; d)\n     {\n         assert(i >= 0 && i < d.length);\n     }\n \n     dchar[] dr = \"squop\"d.dup;\n \n-    foreach (int n, char c; dr)\n+    foreach (ptrdiff_t n, char c; dr)\n     {\n         if (n == 2)\n             break;\n@@ -3482,22 +3482,22 @@ bool test3512()\n     {}\n \n     // _aApplyRdc2\n-    foreach_reverse (int n, char c; dr)\n+    foreach_reverse (ptrdiff_t n, char c; dr)\n     {\n         if (n == 4)\n             break;\n         assert(c != 'o');\n     }\n \n     // _aApplyRdw2\n-    foreach_reverse (int i, wchar c; dr)\n+    foreach_reverse (ptrdiff_t i, wchar c; dr)\n     {\n         assert(i >= 0 && i < dr.length);\n     }\n \n     q = 0;\n     wstring w2 = ['x', '\u00fc', 'm']; // foreach over array literals\n-    foreach_reverse (int n, char c; w2)\n+    foreach_reverse (ptrdiff_t n, char c; w2)\n     {\n         ++q;\n         if (c == 'm') assert(n == 2 && q == 1);"}, {"sha": "ebfb72b493cf8ac081c10791c1e79ae5b9babcbb", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag16976.d", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16976.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16976.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16976.d?ref=e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "patch": "@@ -0,0 +1,44 @@\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/diag16976.d(28): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(29): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(30): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(31): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(32): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(33): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(34): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(35): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(36): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(37): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(38): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(39): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(40): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(41): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(42): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(43): Error: foreach: key cannot be of non-integral type `float`\n+---\n+*/\n+\n+void main()\n+{\n+    int[]  dyn = [1,2,3,4,5];\n+    int[5] sta = [1,2,3,4,5];\n+    char[]  str = ['1','2','3','4','5'];\n+    char[5] chr = ['1','2','3','4','5'];\n+    foreach(float f, i; dyn) {}\n+    foreach(float f, i; sta) {}\n+    foreach(float f, i; str) {}\n+    foreach(float f, i; chr) {}\n+    foreach(float f, dchar i; dyn) {}\n+    foreach(float f, dchar i; sta) {}\n+    foreach(float f, dchar i; str) {}\n+    foreach(float f, dchar i; chr) {}\n+    foreach_reverse(float f, i; dyn) {}\n+    foreach_reverse(float f, i; sta) {}\n+    foreach_reverse(float f, i; str) {}\n+    foreach_reverse(float f, i; chr) {}\n+    foreach_reverse(float f, dchar i; dyn) {}\n+    foreach_reverse(float f, dchar i; sta) {}\n+    foreach_reverse(float f, dchar i; str) {}\n+    foreach_reverse(float f, dchar i; chr) {}\n+}"}, {"sha": "47034019ea8941614bdb83d6b4f405084e9fc269", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail110.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail110.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail110.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail110.d?ref=e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "patch": "@@ -14,6 +14,6 @@ void main()\n     int i;\n     int[] a;\n     foreach (i; a) {}\n-    foreach (int i, n; a) {}\n+    foreach (size_t i, n; a) {}\n     for (int i;;) {}\n }"}, {"sha": "a142195c62fd0ced61c3ac1c123615c441bcf286", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "patch": "@@ -1,4 +1,4 @@\n-aab44549221cb29434fe2feccaf1174af54dd79d\n+cb1583b4b7313bb6d79a5102b6c91e71f5181b19\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "4722866356226e3e3b6ad2a5bae9ee20b1047b44", "filename": "libphobos/libdruntime/rt/minfo.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/libphobos%2Flibdruntime%2Frt%2Fminfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d0ba591e28d8be1fb5775fb0418fee04af17d7/libphobos%2Flibdruntime%2Frt%2Fminfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fminfo.d?ref=e5d0ba591e28d8be1fb5775fb0418fee04af17d7", "patch": "@@ -125,7 +125,7 @@ struct ModuleGroup\n                     break;\n             distloop:\n                 // search for next (previous) module in cycle.\n-                foreach (int m, d; distance)\n+                foreach (m, d; distance)\n                 {\n                     if (d == curdist)\n                     {\n@@ -470,7 +470,7 @@ struct ModuleGroup\n             // pre-allocate enough space to hold all modules.\n             ctors = (cast(immutable(ModuleInfo)**).malloc(len * (void*).sizeof));\n             ctoridx = 0;\n-            foreach (int idx, m; _modules)\n+            foreach (idx, m; _modules)\n             {\n                 if (m.flags & relevantFlags)\n                 {\n@@ -582,8 +582,8 @@ struct ModuleGroup\n         }\n \n         // initialize the initial edges\n-        foreach (int i, ref v; initialEdges)\n-            v = i;\n+        foreach (i, ref v; initialEdges)\n+            v = cast(int)i;\n \n         bool sort(ref immutable(ModuleInfo)*[] ctors, uint mask)\n         {"}]}