{"sha": "e78f4a977a1f0f802035fd473d64659d4f48a8ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4ZjRhOTc3YTFmMGY4MDIwMzVmZDQ3M2Q2NDY1OWQ0ZjQ4YThhYg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-01T22:35:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-01T22:35:50Z"}, "message": "builtins.def (BUILT_IN_IMAXABS): Add.\n\n\t* builtins.def (BUILT_IN_IMAXABS): Add.\n\t* builtins.c (expand_builtin): Also abort on BUILT_IN_IMAXABS.\n\t* c-common.c (c_common_nodes_and_builtins): Create builtin\n\tfunctions __builtin_imaxabs, and plain imaxabs unless\n\tflag_no_nonansi_builtin outside C99 mode.\n\t(expand_tree_builtin): Handle BUILT_IN_IMAXABS.\n\t* extend.texi: Document builtin imaxabs.\n\nFrom-SVN: r37932", "tree": {"sha": "e2e2c8b7ff41d4e0a9b83ff190cf53f596eecefa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2e2c8b7ff41d4e0a9b83ff190cf53f596eecefa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e78f4a977a1f0f802035fd473d64659d4f48a8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78f4a977a1f0f802035fd473d64659d4f48a8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78f4a977a1f0f802035fd473d64659d4f48a8ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78f4a977a1f0f802035fd473d64659d4f48a8ab/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd8e53691af618b8ff21f8abdaefbb234ab8dc6"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "509dfc9d83e9e2f0667145e33899bed863d51a9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e78f4a977a1f0f802035fd473d64659d4f48a8ab", "patch": "@@ -1,3 +1,13 @@\n+2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* builtins.def (BUILT_IN_IMAXABS): Add.\n+\t* builtins.c (expand_builtin): Also abort on BUILT_IN_IMAXABS.\n+\t* c-common.c (c_common_nodes_and_builtins): Create builtin\n+\tfunctions __builtin_imaxabs, and plain imaxabs unless\n+\tflag_no_nonansi_builtin outside C99 mode.\n+\t(expand_tree_builtin): Handle BUILT_IN_IMAXABS.\n+\t* extend.texi: Document builtin imaxabs.\n+\n 2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c: Include \"defaults.h\"."}, {"sha": "154bd7062842e78a53d7cdb3b07e6986cd7ae429", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e78f4a977a1f0f802035fd473d64659d4f48a8ab", "patch": "@@ -3098,6 +3098,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_ABS:\n     case BUILT_IN_LABS:\n     case BUILT_IN_LLABS:\n+    case BUILT_IN_IMAXABS:\n     case BUILT_IN_FABS:\n       /* build_function_call changes these into ABS_EXPR.  */\n       abort ();"}, {"sha": "9d2884e072a162defc6f7bc863c9648252faba52", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=e78f4a977a1f0f802035fd473d64659d4f48a8ab", "patch": "@@ -24,6 +24,7 @@ DEF_BUILTIN(BUILT_IN_ABS)\n DEF_BUILTIN(BUILT_IN_FABS)\n DEF_BUILTIN(BUILT_IN_LABS)\n DEF_BUILTIN(BUILT_IN_LLABS)\n+DEF_BUILTIN(BUILT_IN_IMAXABS)\n DEF_BUILTIN(BUILT_IN_FFS)\n DEF_BUILTIN(BUILT_IN_DIV)\n DEF_BUILTIN(BUILT_IN_LDIV)"}, {"sha": "c4fd4639b065d574dc14f111e83250066ee28c4f", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e78f4a977a1f0f802035fd473d64659d4f48a8ab", "patch": "@@ -4911,6 +4911,7 @@ c_common_nodes_and_builtins ()\n   tree string_ftype_string_cstring_sizet, int_ftype_cstring_cstring_sizet;\n   tree long_ftype_long;\n   tree longlong_ftype_longlong;\n+  tree intmax_ftype_intmax;\n   /* Either char* or void*.  */\n   tree traditional_ptr_type_node;\n   /* Either const char* or const void*.  */\n@@ -5007,6 +5008,11 @@ c_common_nodes_and_builtins ()\n \t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n \t\t\t\t      endlink));\n \n+  intmax_ftype_intmax\n+    = build_function_type (intmax_type_node,\n+\t\t\t   tree_cons (NULL_TREE, intmax_type_node,\n+\t\t\t\t      endlink));\n+\n   int_ftype_cptr_cptr_sizet\n     = build_function_type (integer_type_node,\n \t\t\t   tree_cons (NULL_TREE, const_ptr_type_node,\n@@ -5190,6 +5196,8 @@ c_common_nodes_and_builtins ()\n \t\t    BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_llabs\", longlong_ftype_longlong, BUILT_IN_LLABS,\n \t\t    BUILT_IN_NORMAL, NULL_PTR);\n+  builtin_function (\"__builtin_imaxabs\", intmax_ftype_intmax, BUILT_IN_IMAXABS,\n+\t\t    BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_saveregs\", ptr_ftype, BUILT_IN_SAVEREGS,\n \t\t    BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_classify_type\", default_function_type,\n@@ -5375,8 +5383,12 @@ c_common_nodes_and_builtins ()\n       builtin_function (\"labs\", long_ftype_long, BUILT_IN_LABS,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       if (flag_isoc99 || ! flag_no_nonansi_builtin)\n-\tbuiltin_function (\"llabs\", longlong_ftype_longlong, BUILT_IN_LLABS,\n-\t\t\t  BUILT_IN_NORMAL, NULL_PTR);\n+\t{\n+\t  builtin_function (\"llabs\", longlong_ftype_longlong, BUILT_IN_LLABS,\n+\t\t\t    BUILT_IN_NORMAL, NULL_PTR);\n+\t  builtin_function (\"imaxabs\", intmax_ftype_intmax, BUILT_IN_IMAXABS,\n+\t\t\t    BUILT_IN_NORMAL, NULL_PTR);\n+\t}\n       builtin_function (\"memcpy\", memcpy_ftype, BUILT_IN_MEMCPY,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"memcmp\", int_ftype_cptr_cptr_sizet, BUILT_IN_MEMCMP,\n@@ -5573,6 +5585,7 @@ expand_tree_builtin (function, params, coerced_params)\n     case BUILT_IN_ABS:\n     case BUILT_IN_LABS:\n     case BUILT_IN_LLABS:\n+    case BUILT_IN_IMAXABS:\n     case BUILT_IN_FABS:\n       if (coerced_params == 0)\n \treturn integer_zero_node;"}, {"sha": "bf60bca726d989813bf596a8e3de0f0707900452", "filename": "gcc/extend.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78f4a977a1f0f802035fd473d64659d4f48a8ab/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=e78f4a977a1f0f802035fd473d64659d4f48a8ab", "patch": "@@ -3296,6 +3296,7 @@ function as well.\n @findex fabsl\n @findex ffs\n @findex fputs\n+@findex imaxabs\n @findex index\n @findex labs\n @findex llabs\n@@ -3348,7 +3349,8 @@ as builtins.  Corresponding versions @code{__builtin_alloca},\n @code{__builtin_rindex} and @code{__builtin_ffs} are also recognized in\n strict ISO C mode.\n \n-The ISO C99 function @code{llabs} is handled as a builtin except in\n+The ISO C99 functions @code{llabs} and @code{imaxabs}\n+are handled as builtins except in\n strict ISO C89 mode.  There are also builtin versions of the ISO C99\n functions @code{cosf}, @code{cosl}, @code{fabsf}, @code{fabsl},\n @code{sinf}, @code{sinl}, @code{sqrtf}, and @code{sqrtl}, that are"}]}