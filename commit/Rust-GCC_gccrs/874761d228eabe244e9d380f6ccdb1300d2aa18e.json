{"sha": "874761d228eabe244e9d380f6ccdb1300d2aa18e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc0NzYxZDIyOGVhYmUyNDRlOWQzODBmNmNjZGIxMzAwZDJhYTE4ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-10-05T18:48:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-10-05T18:48:56Z"}, "message": "i386.md (*cmpxf_cc_i387): Remove pattern.\n\n\t* config/i386/i386.md (*cmpxf_cc_i387): Remove pattern.\n\t(*cmp<mode>_cc_i387): Ditto.\n\t(*cmpu<mode>_cc_i387): Ditto.\n\t(*cmp<X87MODEF:mode>_<SWI24:mode>_cc_i387): Ditto.\n\t* config/i386/i386.c (ix86_expand_fp_compare): Remove\n\t\"scratch\" argument.\n\t<case IX86_FPCMP_SAHF>: Do not generate pattern with HImode clobber.\n\tEmit x86_sahf_1 pattern.\n\t(ix86_expand_compare): Update call to ix86_expand_fp_compare.\n\t(ix86_expand_carry_flag_compare): Ditto.\n\nFrom-SVN: r264884", "tree": {"sha": "56f937bee3eb6a278c7b6a9ffeef1e9e8ed1dfb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56f937bee3eb6a278c7b6a9ffeef1e9e8ed1dfb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/874761d228eabe244e9d380f6ccdb1300d2aa18e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874761d228eabe244e9d380f6ccdb1300d2aa18e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874761d228eabe244e9d380f6ccdb1300d2aa18e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874761d228eabe244e9d380f6ccdb1300d2aa18e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7717110a429283f3b0c48972cf222b86fa445d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7717110a429283f3b0c48972cf222b86fa445d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7717110a429283f3b0c48972cf222b86fa445d65"}], "stats": {"total": 177, "additions": 46, "deletions": 131}, "files": [{"sha": "c2ebbbcf436d32fa3029a1a91b2be2c4083681c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874761d228eabe244e9d380f6ccdb1300d2aa18e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874761d228eabe244e9d380f6ccdb1300d2aa18e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=874761d228eabe244e9d380f6ccdb1300d2aa18e", "patch": "@@ -13,6 +13,19 @@\n \t* doc/invoke.texi (pdp11 -mfloat32): Remove:\n \t(pdp11 -mfloat64): Remove.\n \n+2018-10-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*cmpxf_cc_i387): Remove pattern.\n+\t(*cmp<mode>_cc_i387): Ditto.\n+\t(*cmpu<mode>_cc_i387): Ditto.\n+\t(*cmp<X87MODEF:mode>_<SWI24:mode>_cc_i387): Ditto.\n+\t* config/i386/i386.c (ix86_expand_fp_compare): Remove\n+\t\"scratch\" argument.\n+\t<case IX86_FPCMP_SAHF>: Do not generate pattern with HImode clobber.\n+\tEmit x86_sahf_1 pattern.\n+\t(ix86_expand_compare): Update call to ix86_expand_fp_compare.\n+\t(ix86_expand_carry_flag_compare): Ditto.\n+\n 2018-10-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*cmpxf_i387): Change operand 2 predicate"}, {"sha": "0cf4152acb261666ed584f46eebe7b0c97886f48", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874761d228eabe244e9d380f6ccdb1300d2aa18e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874761d228eabe244e9d380f6ccdb1300d2aa18e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=874761d228eabe244e9d380f6ccdb1300d2aa18e", "patch": "@@ -22258,53 +22258,45 @@ ix86_fp_compare_code_to_integer (enum rtx_code code)\n /* Generate insn patterns to do a floating point compare of OPERANDS.  */\n \n static rtx\n-ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n+ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1)\n {\n   bool unordered_compare = ix86_unordered_fp_compare (code);\n-  machine_mode intcmp_mode;\n-  rtx tmp, tmp2;\n+  machine_mode cmp_mode;\n+  rtx tmp, scratch;\n \n   code = ix86_prepare_fp_compare_args (code, &op0, &op1);\n \n+  tmp = gen_rtx_COMPARE (CCFPmode, op0, op1);\n+  if (unordered_compare)\n+    tmp = gen_rtx_UNSPEC (CCFPmode, gen_rtvec (1, tmp), UNSPEC_NOTRAP);\n+\n   /* Do fcomi/sahf based test when profitable.  */\n   switch (ix86_fp_comparison_strategy (code))\n     {\n     case IX86_FPCMP_COMI:\n-      intcmp_mode = CCFPmode;\n-      tmp = gen_rtx_COMPARE (CCFPmode, op0, op1);\n-      if (unordered_compare)\n-\ttmp = gen_rtx_UNSPEC (CCFPmode, gen_rtvec (1, tmp), UNSPEC_NOTRAP);\n+      cmp_mode = CCFPmode;\n       emit_insn (gen_rtx_SET (gen_rtx_REG (CCFPmode, FLAGS_REG), tmp));\n       break;\n \n     case IX86_FPCMP_SAHF:\n-      intcmp_mode = CCFPmode;\n-      tmp = gen_rtx_COMPARE (CCFPmode, op0, op1);\n-      if (unordered_compare)\n-\ttmp = gen_rtx_UNSPEC (CCFPmode, gen_rtvec (1, tmp), UNSPEC_NOTRAP);\n-      tmp = gen_rtx_SET (gen_rtx_REG (CCFPmode, FLAGS_REG), tmp);\n-      if (!scratch)\n-\tscratch = gen_reg_rtx (HImode);\n-      tmp2 = gen_rtx_CLOBBER (VOIDmode, scratch);\n-      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, tmp2)));\n+      cmp_mode = CCFPmode;\n+      tmp = gen_rtx_UNSPEC (HImode, gen_rtvec (1, tmp), UNSPEC_FNSTSW);\n+      scratch = gen_reg_rtx (HImode);\n+      emit_insn (gen_rtx_SET (scratch, tmp));\n+      emit_insn (gen_x86_sahf_1 (scratch));\n       break;\n \n     case IX86_FPCMP_ARITH:\n-      /* Sadness wrt reg-stack pops killing fpsr -- gotta get fnstsw first.  */\n-      tmp = gen_rtx_COMPARE (CCFPmode, op0, op1);\n-      if (unordered_compare)\n-\ttmp = gen_rtx_UNSPEC (CCFPmode, gen_rtvec (1, tmp), UNSPEC_NOTRAP);\n+      cmp_mode = CCNOmode;\n       tmp = gen_rtx_UNSPEC (HImode, gen_rtvec (1, tmp), UNSPEC_FNSTSW);\n-      if (!scratch)\n-\tscratch = gen_reg_rtx (HImode);\n+      scratch = gen_reg_rtx (HImode);\n       emit_insn (gen_rtx_SET (scratch, tmp));\n \n       /* In the unordered case, we have to check C2 for NaN's, which\n \t doesn't happen to work out to anything nice combination-wise.\n \t So do some bit twiddling on the value we've got in AH to come\n \t up with an appropriate set of condition codes.  */\n \n-      intcmp_mode = CCNOmode;\n       switch (code)\n \t{\n \tcase GT:\n@@ -22319,7 +22311,7 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n \t      emit_insn (gen_andqi_ext_1 (scratch, scratch, GEN_INT (0x45)));\n \t      emit_insn (gen_addqi_ext_1 (scratch, scratch, constm1_rtx));\n \t      emit_insn (gen_cmpqi_ext_3 (scratch, GEN_INT (0x44)));\n-\t      intcmp_mode = CCmode;\n+\t      cmp_mode = CCmode;\n \t      code = GEU;\n \t    }\n \t  break;\n@@ -22329,7 +22321,7 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n \t    {\n \t      emit_insn (gen_andqi_ext_1 (scratch, scratch, GEN_INT (0x45)));\n \t      emit_insn (gen_cmpqi_ext_3 (scratch, const1_rtx));\n-\t      intcmp_mode = CCmode;\n+\t      cmp_mode = CCmode;\n \t      code = EQ;\n \t    }\n \t  else\n@@ -22359,7 +22351,7 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n \t      emit_insn (gen_andqi_ext_1 (scratch, scratch, GEN_INT (0x45)));\n \t      emit_insn (gen_addqi_ext_1 (scratch, scratch, constm1_rtx));\n \t      emit_insn (gen_cmpqi_ext_3 (scratch, GEN_INT (0x40)));\n-\t      intcmp_mode = CCmode;\n+\t      cmp_mode = CCmode;\n \t      code = LTU;\n \t    }\n \t  else\n@@ -22374,7 +22366,7 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n \t    {\n \t      emit_insn (gen_andqi_ext_1 (scratch, scratch, GEN_INT (0x45)));\n \t      emit_insn (gen_cmpqi_ext_3 (scratch, GEN_INT (0x40)));\n-\t      intcmp_mode = CCmode;\n+\t      cmp_mode = CCmode;\n \t      code = EQ;\n \t    }\n \t  else\n@@ -22420,7 +22412,7 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n   /* Return the test that should be put into the flags user, i.e.\n      the bcc, scc, or cmov instruction.  */\n   return gen_rtx_fmt_ee (code, VOIDmode,\n-\t\t\t gen_rtx_REG (intcmp_mode, FLAGS_REG),\n+\t\t\t gen_rtx_REG (cmp_mode, FLAGS_REG),\n \t\t\t const0_rtx);\n }\n \n@@ -22435,7 +22427,7 @@ ix86_expand_compare (enum rtx_code code, rtx op0, rtx op1)\n   else if (SCALAR_FLOAT_MODE_P (GET_MODE (op0)))\n     {\n       gcc_assert (!DECIMAL_FLOAT_MODE_P (GET_MODE (op0)));\n-      ret = ix86_expand_fp_compare (code, op0, op1, NULL_RTX);\n+      ret = ix86_expand_fp_compare (code, op0, op1);\n     }\n   else\n     ret = ix86_expand_int_compare (code, op0, op1);\n@@ -22735,7 +22727,7 @@ ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n \t we decide to expand comparison using arithmetic that is not\n \t too common scenario.  */\n       start_sequence ();\n-      compare_op = ix86_expand_fp_compare (code, op0, op1, NULL_RTX);\n+      compare_op = ix86_expand_fp_compare (code, op0, op1);\n       compare_seq = get_insns ();\n       end_sequence ();\n "}, {"sha": "7c440a4ed500ebe2d91db230f511f5ae5b9b9a2a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 101, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874761d228eabe244e9d380f6ccdb1300d2aa18e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874761d228eabe244e9d380f6ccdb1300d2aa18e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=874761d228eabe244e9d380f6ccdb1300d2aa18e", "patch": "@@ -1480,26 +1480,6 @@\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn_and_split \"*cmpxf_cc_i387\"\n-  [(set (reg:CCFP FLAGS_REG)\n-\t(compare:CCFP\n-\t  (match_operand:XF 1 \"register_operand\" \"f\")\n-\t  (match_operand:XF 2 \"reg_or_0_operand\" \"fC\")))\n-   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n-  \"TARGET_80387 && TARGET_SAHF && !TARGET_CMOVE\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:HI\n-\t  [(compare:CCFP (match_dup 1)(match_dup 2))]\n-\tUNSPEC_FNSTSW))\n-   (set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"unit\" \"i387\")\n-   (set_attr \"mode\" \"XF\")])\n-\n (define_insn \"*cmp<mode>_i387\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(unspec:HI\n@@ -1513,65 +1493,6 @@\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"*cmp<mode>_cc_i387\"\n-  [(set (reg:CCFP FLAGS_REG)\n-\t(compare:CCFP\n-\t  (match_operand:MODEF 1 \"register_operand\" \"f\")\n-\t  (match_operand:MODEF 2 \"nonimm_or_0_operand\" \"fmC\")))\n-   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n-  \"TARGET_80387 && TARGET_SAHF && !TARGET_CMOVE\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:HI\n-\t  [(compare:CCFP (match_dup 1)(match_dup 2))]\n-\tUNSPEC_FNSTSW))\n-   (set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"unit\" \"i387\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*cmpu<mode>_i387\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n-\t(unspec:HI\n-\t  [(unspec:CCFP\n-\t     [(compare:CCFP\n-\t\t(match_operand:X87MODEF 1 \"register_operand\" \"f\")\n-\t\t(match_operand:X87MODEF 2 \"register_operand\" \"f\"))]\n-\t     UNSPEC_NOTRAP)]\n-\t  UNSPEC_FNSTSW))]\n-  \"TARGET_80387\"\n-  \"* return output_fp_compare (insn, operands, false, true);\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"unit\" \"i387\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn_and_split \"*cmpu<mode>_cc_i387\"\n-  [(set (reg:CCFP FLAGS_REG)\n-\t(unspec:CCFP\n-\t  [(compare:CCFP\n-\t     (match_operand:X87MODEF 1 \"register_operand\" \"f\")\n-\t     (match_operand:X87MODEF 2 \"register_operand\" \"f\"))]\n-\t  UNSPEC_NOTRAP))\n-   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n-  \"TARGET_80387 && TARGET_SAHF && !TARGET_CMOVE\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:HI\n-\t  [(unspec:CCFP\n-\t     [(compare:CCFP (match_dup 1)(match_dup 2))]\n-\t     UNSPEC_NOTRAP)]\n-\t  UNSPEC_FNSTSW))\n-   (set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n-  \"\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"unit\" \"i387\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*cmp<X87MODEF:mode>_<SWI24:mode>_i387\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(unspec:HI\n@@ -1589,31 +1510,20 @@\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"<SWI24:MODE>\")])\n \n-(define_insn_and_split \"*cmp<X87MODEF:mode>_<SWI24:mode>_cc_i387\"\n-  [(set (reg:CCFP FLAGS_REG)\n-\t(compare:CCFP\n-\t  (match_operand:X87MODEF 1 \"register_operand\" \"f\")\n-\t  (float:X87MODEF\n-\t    (match_operand:SWI24 2 \"nonimmediate_operand\" \"m\"))))\n-   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n-  \"TARGET_80387 && TARGET_SAHF && !TARGET_CMOVE\n-   && (TARGET_USE_<SWI24:MODE>MODE_FIOP\n-       || optimize_function_for_size_p (cfun))\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n+(define_insn \"*cmpu<mode>_i387\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(unspec:HI\n-\t  [(compare:CCFP\n-\t     (match_dup 1)\n-\t     (float:X87MODEF (match_dup 2)))]\n-\tUNSPEC_FNSTSW))\n-   (set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n-  \"\"\n+\t  [(unspec:CCFP\n+\t     [(compare:CCFP\n+\t\t(match_operand:X87MODEF 1 \"register_operand\" \"f\")\n+\t\t(match_operand:X87MODEF 2 \"register_operand\" \"f\"))]\n+\t     UNSPEC_NOTRAP)]\n+\t  UNSPEC_FNSTSW))]\n+  \"TARGET_80387\"\n+  \"* return output_fp_compare (insn, operands, false, true);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"unit\" \"i387\")\n-   (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"<SWI24:MODE>\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; FP compares, step 2:\n ;; Get ax into flags, general case."}]}