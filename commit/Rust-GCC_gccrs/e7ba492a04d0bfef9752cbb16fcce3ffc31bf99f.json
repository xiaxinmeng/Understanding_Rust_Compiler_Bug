{"sha": "e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdiYTQ5MmEwNGQwYmZlZjk3NTJjYmIxNmZjY2UzZmZjMzFiZjk5Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-12T08:14:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-12T08:14:34Z"}, "message": "[arch64] Fix ambiguous .md attribute uses\n\nThis patch is part of a series that fixes ambiguous attribute\nuses in .md files, i.e. cases in which attributes didn't use\n<ITER:ATTR> to specify an iterator, and in which <ATTR> could\nhave different values depending on the iterator chosen.\n\nNo behavioural change except for dropping the unused SVE\ndivide permutations.\n\n2019-07-12  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.md (*compare_condjump<mode>)\n\t(loadwb_pair<GPI:mode>_<P:mode>, loadwb_pair<GPF:mode>_<P:mode>)\n\t(storewb_pair<GPI:mode>_<P:mode>, storewb_pair<GPF:mode>_<P:mode>)\n\t(*ands<mode>_compare0): Fix ambiguous uses of .md attributes.\n\t* config/aarch64/aarch64-simd.md\n\t(*aarch64_get_lane_extend<GPI:mode><VDQQH:mode>): Likewise.\n\t(*aarch64_get_lane_zero_extend<GPI:mode><VDQQH:mode>): Likewise.\n\t* config/aarch64/aarch64-sve.md\n\t(while_ult<GPI:mode><PRED_ALL:mode>): Likewise.\n\t(*cond_<optab><mode>_any): Fix SVE_I/SVE_SDI typo.\n\nFrom-SVN: r273433", "tree": {"sha": "beab0d611bc7664962aa004ab9250ec833045ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beab0d611bc7664962aa004ab9250ec833045ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d281492de84960b5885f88fffeeb226650f5141d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d281492de84960b5885f88fffeeb226650f5141d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d281492de84960b5885f88fffeeb226650f5141d"}], "stats": {"total": 81, "additions": 48, "deletions": 33}, "files": [{"sha": "66e715f42e9b415520a56833276327e4e6e62ec0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f", "patch": "@@ -1,3 +1,16 @@\n+2019-07-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*compare_condjump<mode>)\n+\t(loadwb_pair<GPI:mode>_<P:mode>, loadwb_pair<GPF:mode>_<P:mode>)\n+\t(storewb_pair<GPI:mode>_<P:mode>, storewb_pair<GPF:mode>_<P:mode>)\n+\t(*ands<mode>_compare0): Fix ambiguous uses of .md attributes.\n+\t* config/aarch64/aarch64-simd.md\n+\t(*aarch64_get_lane_extend<GPI:mode><VDQQH:mode>): Likewise.\n+\t(*aarch64_get_lane_zero_extend<GPI:mode><VDQQH:mode>): Likewise.\n+\t* config/aarch64/aarch64-sve.md\n+\t(while_ult<GPI:mode><PRED_ALL:mode>): Likewise.\n+\t(*cond_<optab><mode>_any): Fix SVE_I/SVE_SDI typo.\n+\n 2019-07-12  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* doc/md.texi: Document that @ patterns can have different"}, {"sha": "d480e430f251d6c948085a8c0571c3e3ac47ac75", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f", "patch": "@@ -3135,30 +3135,31 @@\n (define_insn \"*aarch64_get_lane_extend<GPI:mode><VDQQH:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(sign_extend:GPI\n-\t  (vec_select:<VEL>\n+\t  (vec_select:<VDQQH:VEL>\n \t    (match_operand:VDQQH 1 \"register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_SIMD\"\n   {\n-    operands[2] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[2]));\n+    operands[2] = aarch64_endian_lane_rtx (<VDQQH:MODE>mode,\n+\t\t\t\t\t   INTVAL (operands[2]));\n     return \"smov\\\\t%<GPI:w>0, %1.<VDQQH:Vetype>[%2]\";\n   }\n-  [(set_attr \"type\" \"neon_to_gp<q>\")]\r\n-)\r\n-\r\n-(define_insn \"*aarch64_get_lane_zero_extend<GPI:mode><VDQQH:mode>\"\r\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\r\n-\t(zero_extend:GPI\r\n-\t  (vec_select:<VEL>\r\n-\t    (match_operand:VDQQH 1 \"register_operand\" \"w\")\r\n-\t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\r\n-  \"TARGET_SIMD\"\r\n-  {\r\n-    operands[2] = aarch64_endian_lane_rtx (<VDQQH:MODE>mode,\r\n-\t\t\t\t\t   INTVAL (operands[2]));\r\n-    return \"umov\\\\t%w0, %1.<Vetype>[%2]\";\r\n-  }\r\n-  [(set_attr \"type\" \"neon_to_gp<q>\")]\r\n+  [(set_attr \"type\" \"neon_to_gp<VDQQH:q>\")]\n+)\n+\n+(define_insn \"*aarch64_get_lane_zero_extend<GPI:mode><VDQQH:mode>\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:GPI\n+\t  (vec_select:<VDQQH:VEL>\n+\t    (match_operand:VDQQH 1 \"register_operand\" \"w\")\n+\t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[2] = aarch64_endian_lane_rtx (<VDQQH:MODE>mode,\n+\t\t\t\t\t   INTVAL (operands[2]));\n+    return \"umov\\\\t%w0, %1.<VDQQH:Vetype>[%2]\";\n+  }\n+  [(set_attr \"type\" \"neon_to_gp<VDQQH:q>\")]\n )\n \n ;; Lane extraction of a value, neither sign nor zero extension"}, {"sha": "e489afbdde947cbb9cf1a41c38bd72dac576f8f1", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f", "patch": "@@ -1363,7 +1363,7 @@\n   ;; don't have an unnecessary PTRUE.\n   \"&& !CONSTANT_P (operands[1])\"\n   {\n-    operands[1] = CONSTM1_RTX (<MODE>mode);\n+    operands[1] = CONSTM1_RTX (<PRED_ALL:MODE>mode);\n   }\n )\n "}, {"sha": "d1b2c20104d0714d05a8adbec624e8ccfa0e7603", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=e7ba492a04d0bfef9752cbb16fcce3ffc31bf99f", "patch": "@@ -567,26 +567,27 @@\n ;; \tsub\tx0, x1, #(CST & 0xfff000)\n ;; \tsubs\tx0, x0, #(CST & 0x000fff)\n ;; \tb<ne,eq> .Label\n-(define_insn_and_split \"*compare_condjump<mode>\"\n+(define_insn_and_split \"*compare_condjump<GPI:mode>\"\n   [(set (pc) (if_then_else (EQL\n \t\t\t      (match_operand:GPI 0 \"register_operand\" \"r\")\n \t\t\t      (match_operand:GPI 1 \"aarch64_imm24\" \"n\"))\n \t\t\t   (label_ref:P (match_operand 2 \"\" \"\"))\n \t\t\t   (pc)))]\n-  \"!aarch64_move_imm (INTVAL (operands[1]), <MODE>mode)\n-   && !aarch64_plus_operand (operands[1], <MODE>mode)\n+  \"!aarch64_move_imm (INTVAL (operands[1]), <GPI:MODE>mode)\n+   && !aarch64_plus_operand (operands[1], <GPI:MODE>mode)\n    && !reload_completed\"\n   \"#\"\n   \"&& true\"\n   [(const_int 0)]\n   {\n     HOST_WIDE_INT lo_imm = UINTVAL (operands[1]) & 0xfff;\n     HOST_WIDE_INT hi_imm = UINTVAL (operands[1]) & 0xfff000;\n-    rtx tmp = gen_reg_rtx (<MODE>mode);\n-    emit_insn (gen_add<mode>3 (tmp, operands[0], GEN_INT (-hi_imm)));\n-    emit_insn (gen_add<mode>3_compare0 (tmp, tmp, GEN_INT (-lo_imm)));\n+    rtx tmp = gen_reg_rtx (<GPI:MODE>mode);\n+    emit_insn (gen_add<GPI:mode>3 (tmp, operands[0], GEN_INT (-hi_imm)));\n+    emit_insn (gen_add<GPI:mode>3_compare0 (tmp, tmp, GEN_INT (-lo_imm)));\n     rtx cc_reg = gen_rtx_REG (CC_NZmode, CC_REGNUM);\n-    rtx cmp_rtx = gen_rtx_fmt_ee (<EQL:CMP>, <MODE>mode, cc_reg, const0_rtx);\n+    rtx cmp_rtx = gen_rtx_fmt_ee (<EQL:CMP>, <GPI:MODE>mode,\n+\t\t\t\t  cc_reg, const0_rtx);\n     emit_jump_insn (gen_condjump (cmp_rtx, cc_reg, operands[2]));\n     DONE;\n   }\n@@ -1505,8 +1506,8 @@\n           (mem:GPI (plus:P (match_dup 1)\n                    (match_operand:P 5 \"const_int_operand\" \"n\"))))])]\n   \"INTVAL (operands[5]) == GET_MODE_SIZE (<GPI:MODE>mode)\"\n-  \"ldp\\\\t%<w>2, %<w>3, [%1], %4\"\n-  [(set_attr \"type\" \"load_<ldpstp_sz>\")]\n+  \"ldp\\\\t%<GPI:w>2, %<GPI:w>3, [%1], %4\"\n+  [(set_attr \"type\" \"load_<GPI:ldpstp_sz>\")]\n )\n \n (define_insn \"loadwb_pair<GPF:mode>_<P:mode>\"\n@@ -1520,7 +1521,7 @@\n           (mem:GPF (plus:P (match_dup 1)\n                    (match_operand:P 5 \"const_int_operand\" \"n\"))))])]\n   \"INTVAL (operands[5]) == GET_MODE_SIZE (<GPF:MODE>mode)\"\n-  \"ldp\\\\t%<w>2, %<w>3, [%1], %4\"\n+  \"ldp\\\\t%<GPF:w>2, %<GPF:w>3, [%1], %4\"\n   [(set_attr \"type\" \"neon_load1_2reg\")]\n )\n \n@@ -1553,8 +1554,8 @@\n                    (match_operand:P 5 \"const_int_operand\" \"n\")))\n           (match_operand:GPI 3 \"register_operand\" \"r\"))])]\n   \"INTVAL (operands[5]) == INTVAL (operands[4]) + GET_MODE_SIZE (<GPI:MODE>mode)\"\n-  \"stp\\\\t%<w>2, %<w>3, [%0, %4]!\"\n-  [(set_attr \"type\" \"store_<ldpstp_sz>\")]\n+  \"stp\\\\t%<GPI:w>2, %<GPI:w>3, [%0, %4]!\"\n+  [(set_attr \"type\" \"store_<GPI:ldpstp_sz>\")]\n )\n \n (define_insn \"storewb_pair<GPF:mode>_<P:mode>\"\n@@ -1569,7 +1570,7 @@\n                    (match_operand:P 5 \"const_int_operand\" \"n\")))\n           (match_operand:GPF 3 \"register_operand\" \"w\"))])]\n   \"INTVAL (operands[5]) == INTVAL (operands[4]) + GET_MODE_SIZE (<GPF:MODE>mode)\"\n-  \"stp\\\\t%<w>2, %<w>3, [%0, %4]!\"\n+  \"stp\\\\t%<GPF:w>2, %<GPF:w>3, [%0, %4]!\"\n   [(set_attr \"type\" \"neon_store1_2reg<q>\")]\n )\n \n@@ -4782,7 +4783,7 @@\n   [(set_attr \"type\" \"alus_imm\")]\n )\n \n-(define_insn \"*ands<mode>_compare0\"\n+(define_insn \"*ands<GPI:mode>_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n \t (zero_extend:GPI (match_operand:SHORT 1 \"register_operand\" \"r\"))"}]}