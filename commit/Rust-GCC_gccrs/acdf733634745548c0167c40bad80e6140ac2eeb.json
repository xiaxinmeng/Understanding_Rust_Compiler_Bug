{"sha": "acdf733634745548c0167c40bad80e6140ac2eeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkZjczMzYzNDc0NTU0OGMwMTY3YzQwYmFkODBlNjE0MGFjMmVlYg==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-04-27T08:07:15Z"}, "committer": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-04-27T08:10:05Z"}, "message": "aarch64: Fix .cfi_window_save with pac-ret [PR94515]\n\nOn aarch64 -mbranch-protection=pac-ret reuses the dwarf\nopcode for window_save to mean \"toggle the return address\nmangle state\", but in the dwarf2cfi internal logic the\nstate was not updated when an opcode was emitted, the\ncurrently present update logic is only valid for the\noriginal sparc use of window_save so a separate bool is\nused on aarch64 to track the state.\n\nThis bug can cause the unwinder not to authenticate return\naddresses that were signed (or vice versa) which means a\nruntime crash on a pauth enabled system.\n\nCurrently only aarch64 pac-ret uses REG_CFA_TOGGLE_RA_MANGLE.\n\nThis should be backported to gcc-9 and gcc-8 branches.\n\ngcc/ChangeLog:\n\n\tPR target/94515\n\t* dwarf2cfi.c (struct GTY): Add ra_mangled.\n\t(cfi_row_equal_p): Check ra_mangled.\n\t(dwarf2out_frame_debug_cfa_window_save): Remove the argument,\n\tthis only handles the sparc logic now.\n\t(dwarf2out_frame_debug_cfa_toggle_ra_mangle): New function for\n\tthe aarch64 specific logic.\n\t(dwarf2out_frame_debug): Update to use the new subroutines.\n\t(change_cfi_row): Check ra_mangled.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/94515\n\t* g++.target/aarch64/pr94515-1.C: New test.\n\t* g++.target/aarch64/pr94515-2.C: New test.", "tree": {"sha": "198376008404a5ee3b02575568042ba5aad97020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198376008404a5ee3b02575568042ba5aad97020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acdf733634745548c0167c40bad80e6140ac2eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdf733634745548c0167c40bad80e6140ac2eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acdf733634745548c0167c40bad80e6140ac2eeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdf733634745548c0167c40bad80e6140ac2eeb/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9612a4833d761e3beda083a3e4dc92feba3b01bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9612a4833d761e3beda083a3e4dc92feba3b01bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9612a4833d761e3beda083a3e4dc92feba3b01bc"}], "stats": {"total": 146, "additions": 139, "deletions": 7}, "files": [{"sha": "2f65b5dfa315cd92fd8418d479d6544d7217e9a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acdf733634745548c0167c40bad80e6140ac2eeb", "patch": "@@ -1,3 +1,15 @@\n+2020-04-27  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/94515\n+\t* dwarf2cfi.c (struct GTY): Add ra_mangled.\n+\t(cfi_row_equal_p): Check ra_mangled.\n+\t(dwarf2out_frame_debug_cfa_window_save): Remove the argument,\n+\tthis only handles the sparc logic now.\n+\t(dwarf2out_frame_debug_cfa_toggle_ra_mangle): New function for\n+\tthe aarch64 specific logic.\n+\t(dwarf2out_frame_debug): Update to use the new subroutines.\n+\t(change_cfi_row): Check ra_mangled.\n+\n 2020-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94704"}, {"sha": "0d179b388e49256e31af13cf6a9fedd87cd53728", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=acdf733634745548c0167c40bad80e6140ac2eeb", "patch": "@@ -71,6 +71,9 @@ struct GTY(()) dw_cfi_row\n \n   /* True if the register window is saved.  */\n   bool window_save;\n+\n+  /* True if the return address is in a mangled state.  */\n+  bool ra_mangled;\n };\n \n /* The caller's ORIG_REG is saved in SAVED_IN_REG.  */\n@@ -772,6 +775,9 @@ cfi_row_equal_p (dw_cfi_row *a, dw_cfi_row *b)\n   if (a->window_save != b->window_save)\n     return false;\n \n+  if (a->ra_mangled != b->ra_mangled)\n+    return false;\n+\n   return true;\n }\n \n@@ -1370,20 +1376,33 @@ dwarf2out_frame_debug_cfa_restore (rtx reg)\n }\n \n /* A subroutine of dwarf2out_frame_debug, process a REG_CFA_WINDOW_SAVE.\n-   FAKE is true if this is not really a window save but something else.\n \n    ??? Perhaps we should note in the CIE where windows are saved (instead\n    of assuming 0(cfa)) and what registers are in the window.  */\n \n static void\n-dwarf2out_frame_debug_cfa_window_save (bool fake)\n+dwarf2out_frame_debug_cfa_window_save (void)\n {\n   dw_cfi_ref cfi = new_cfi ();\n \n   cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n   add_cfi (cfi);\n-  if (!fake)\n-    cur_row->window_save = true;\n+  cur_row->window_save = true;\n+}\n+\n+/* A subroutine of dwarf2out_frame_debug, process a REG_CFA_TOGGLE_RA_MANGLE.\n+   Note: DW_CFA_GNU_window_save dwarf opcode is reused for toggling RA mangle\n+   state, this is a target specific operation on AArch64 and can only be used\n+   on other targets if they don't use the window save operation otherwise.  */\n+\n+static void\n+dwarf2out_frame_debug_cfa_toggle_ra_mangle (void)\n+{\n+  dw_cfi_ref cfi = new_cfi ();\n+\n+  cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n+  add_cfi (cfi);\n+  cur_row->ra_mangled = !cur_row->ra_mangled;\n }\n \n /* Record call frame debugging information for an expression EXPR,\n@@ -2143,13 +2162,12 @@ dwarf2out_frame_debug (rtx_insn *insn)\n \tbreak;\n \n       case REG_CFA_TOGGLE_RA_MANGLE:\n-\t/* This uses the same DWARF opcode as the next operation.  */\n-\tdwarf2out_frame_debug_cfa_window_save (true);\n+\tdwarf2out_frame_debug_cfa_toggle_ra_mangle ();\n \thandled_one = true;\n \tbreak;\n \n       case REG_CFA_WINDOW_SAVE:\n-\tdwarf2out_frame_debug_cfa_window_save (false);\n+\tdwarf2out_frame_debug_cfa_window_save ();\n \thandled_one = true;\n \tbreak;\n \n@@ -2218,6 +2236,17 @@ change_cfi_row (dw_cfi_row *old_row, dw_cfi_row *new_row)\n     {\n       dw_cfi_ref cfi = new_cfi ();\n \n+      gcc_assert (!old_row->ra_mangled && !new_row->ra_mangled);\n+      cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n+      add_cfi (cfi);\n+    }\n+\n+  if (old_row->ra_mangled != new_row->ra_mangled)\n+    {\n+      dw_cfi_ref cfi = new_cfi ();\n+\n+      gcc_assert (!old_row->window_save && !new_row->window_save);\n+      /* DW_CFA_GNU_window_save is reused for toggling RA mangle state.  */\n       cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n       add_cfi (cfi);\n     }"}, {"sha": "ee7c95df1166c0439cd4d1a4fd3a6d8a08bf1d0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acdf733634745548c0167c40bad80e6140ac2eeb", "patch": "@@ -1,3 +1,9 @@\n+2020-04-27  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/94515\n+\t* g++.target/aarch64/pr94515-1.C: New test.\n+\t* g++.target/aarch64/pr94515-2.C: New test.\n+\n 2020-04-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90320"}, {"sha": "20ae81215fca8181270fd50d8dd7b47c480c5587", "filename": "gcc/testsuite/g++.target/aarch64/pr94515-1.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94515-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94515-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94515-1.C?ref=acdf733634745548c0167c40bad80e6140ac2eeb", "patch": "@@ -0,0 +1,44 @@\n+/* PR target/94515. Check .cfi_window_save with multiple return paths.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-additional-options \"-O2 --save-temps\" } */\n+\n+volatile int zero = 0;\n+\n+__attribute__((noinline, target(\"branch-protection=none\")))\n+void unwind (void)\n+{\n+  if (zero == 0)\n+    throw 42;\n+}\n+\n+__attribute__((noinline, noipa, target(\"branch-protection=pac-ret\")))\n+int test (int z)\n+{\n+  if (z) {\n+    asm volatile (\"\":::\"x20\",\"x21\");\n+    unwind ();\n+    return 1;\n+  } else {\n+    unwind ();\n+    return 2;\n+  }\n+}\n+\n+__attribute__((target(\"branch-protection=none\")))\n+int main ()\n+{\n+  try {\n+    test (zero);\n+    __builtin_abort ();\n+  } catch (...) {\n+    return 0;\n+  }\n+  __builtin_abort ();\n+}\n+\n+/* This check only works if there are two return paths in test and\n+   cfi_window_save is used for both instead of cfi_remember_state\n+   plus cfi_restore_state.  This is currently the case with -O2.  */\n+\n+/* { dg-final { scan-assembler-times {\\t\\.cfi_window_save\\n} 4 } } */"}, {"sha": "e73df4990700d58e8cd77938ffb7c6d7dfcbddf8", "filename": "gcc/testsuite/g++.target/aarch64/pr94515-2.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94515-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdf733634745548c0167c40bad80e6140ac2eeb/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94515-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94515-2.C?ref=acdf733634745548c0167c40bad80e6140ac2eeb", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/94515. Check .cfi_window_save with multiple return paths.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-additional-options \"-O2 -mbranch-protection=pac-ret\" } */\n+\n+volatile int zero = 0;\n+int global = 0;\n+\n+__attribute__((noinline))\n+int bar(void)\n+{\n+  if (zero == 0) return 3;\n+  return 0;\n+}\n+\n+__attribute__((noinline, noreturn))\n+void unwind (void)\n+{\n+  throw 42;\n+}\n+\n+__attribute__((noinline, noipa))\n+int test(int x)\n+{\n+  if (x==1) return 2; /* This return path may not use the stack.  */\n+  int y = bar();\n+  if (y > global) global=y;\n+  if (y==3) unwind(); /* This return path must have RA mangle state set.  */\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  try {\n+    test (zero);\n+    __builtin_abort ();\n+  } catch (...) {\n+    return 0;\n+  }\n+  __builtin_abort ();\n+}"}]}