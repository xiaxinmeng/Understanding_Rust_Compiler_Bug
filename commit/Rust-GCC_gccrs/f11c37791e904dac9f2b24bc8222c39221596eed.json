{"sha": "f11c37791e904dac9f2b24bc8222c39221596eed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExYzM3NzkxZTkwNGRhYzlmMmIyNGJjODIyMmMzOTIyMTU5NmVlZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:05:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:05:39Z"}, "message": "hash-table.h: Include hash-traits.h.\n\ngcc/\n\t* hash-table.h: Include hash-traits.h.\n\t(typed_free_remove, typed_noop_remove, pointer_hash, ggc_hasher)\n\t(ggc_cache_hasher): Move to...\n\t* hash-traits.h: ...this new file.\n\nFrom-SVN: r224953", "tree": {"sha": "f551a43b863d0c904390615ad907d54d7b94782d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f551a43b863d0c904390615ad907d54d7b94782d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f11c37791e904dac9f2b24bc8222c39221596eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c37791e904dac9f2b24bc8222c39221596eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11c37791e904dac9f2b24bc8222c39221596eed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c37791e904dac9f2b24bc8222c39221596eed/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbf196a2560584a0c71b7c44e6354eac93721888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf196a2560584a0c71b7c44e6354eac93721888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf196a2560584a0c71b7c44e6354eac93721888"}], "stats": {"total": 306, "additions": 168, "deletions": 138}, "files": [{"sha": "2045dc778c8e229c0c4d0ea7949745cb70ac31c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c37791e904dac9f2b24bc8222c39221596eed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c37791e904dac9f2b24bc8222c39221596eed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f11c37791e904dac9f2b24bc8222c39221596eed", "patch": "@@ -1,3 +1,10 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-table.h: Include hash-traits.h.\n+\t(typed_free_remove, typed_noop_remove, pointer_hash, ggc_hasher)\n+\t(ggc_cache_hasher): Move to...\n+\t* hash-traits.h: ...this new file.\n+\n 2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-core.h (struct tree_optimization_option): Make opts a pointer to"}, {"sha": "71c0f63ec9a5dfd6fc7294538197adf9b3b56022", "filename": "gcc/hash-table.h", "status": "modified", "additions": 2, "deletions": 138, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c37791e904dac9f2b24bc8222c39221596eed/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c37791e904dac9f2b24bc8222c39221596eed/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=f11c37791e904dac9f2b24bc8222c39221596eed", "patch": "@@ -81,7 +81,7 @@ along with GCC; see the file COPYING3.  If not see\n    We compose this into a few steps.\n \n       1. Decide on a removal policy for values stored in the table.\n-         This header provides class templates for the two most common\n+         hash-traits.h provides class templates for the two most common\n          policies.\n \n          * typed_free_remove implements the static 'remove' member function\n@@ -202,6 +202,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"inchash.h\"\n #include \"mem-stats-traits.h\"\n+#include \"hash-traits.h\"\n #include \"hash-map-traits.h\"\n \n template<typename, typename, typename> class hash_map;\n@@ -238,143 +239,6 @@ xcallocator <Type>::data_free (Type *memory)\n }\n \n \n-/* Helpful type for removing with free.  */\n-\n-template <typename Type>\n-struct typed_free_remove\n-{\n-  static inline void remove (Type *p);\n-};\n-\n-\n-/* Remove with free.  */\n-\n-template <typename Type>\n-inline void\n-typed_free_remove <Type>::remove (Type *p)\n-{\n-  free (p);\n-}\n-\n-\n-/* Helpful type for a no-op remove.  */\n-\n-template <typename Type>\n-struct typed_noop_remove\n-{\n-  static inline void remove (Type *p);\n-};\n-\n-\n-/* Remove doing nothing.  */\n-\n-template <typename Type>\n-inline void\n-typed_noop_remove <Type>::remove (Type *p ATTRIBUTE_UNUSED)\n-{\n-}\n-\n-\n-/* Pointer hash with a no-op remove method.  */\n-\n-template <typename Type>\n-struct pointer_hash : typed_noop_remove <Type>\n-{\n-  typedef Type *value_type;\n-  typedef Type *compare_type;\n-\n-  static inline hashval_t hash (const value_type &);\n-\n-  static inline bool equal (const value_type &existing,\n-\t\t\t    const compare_type &candidate);\n-};\n-\n-template <typename Type>\n-inline hashval_t\n-pointer_hash <Type>::hash (const value_type &candidate)\n-{\n-  /* This is a really poor hash function, but it is what the current code uses,\n-     so I am reusing it to avoid an additional axis in testing.  */\n-  return (hashval_t) ((intptr_t)candidate >> 3);\n-}\n-\n-template <typename Type>\n-inline bool\n-pointer_hash <Type>::equal (const value_type &existing,\n-\t\t\t   const compare_type &candidate)\n-{\n-  return existing == candidate;\n-}\n-\n-/* Hasher for entry in gc memory.  */\n-\n-template<typename T>\n-struct ggc_hasher\n-{\n-  typedef T value_type;\n-  typedef T compare_type;\n-\n-  static void remove (T) {}\n-\n-  static void\n-  ggc_mx (T p)\n-  {\n-    extern void gt_ggc_mx (T &);\n-    gt_ggc_mx (p);\n-  }\n-\n-  static void\n-  pch_nx (T &p)\n-  {\n-  extern void gt_pch_nx (T &);\n-  gt_pch_nx (p);\n-  }\n-\n-  static void\n-  pch_nx (T &p, gt_pointer_operator op, void *cookie)\n-  {\n-    op (&p, cookie);\n-  }\n-};\n-\n-/* Hasher for cache entry in gc memory.  */\n-\n-template<typename T>\n-struct ggc_cache_hasher\n-{\n-  typedef T value_type;\n-  typedef T compare_type;\n-\n-  static void remove (T &) {}\n-\n-  /* Entries are weakly held because this is for caches.  */\n-\n-  static void ggc_mx (T &) {}\n-\n-  static void\n-  pch_nx (T &p)\n-  {\n-  extern void gt_pch_nx (T &);\n-  gt_pch_nx (p);\n-  }\n-\n-  static void\n-  pch_nx (T &p, gt_pointer_operator op, void *cookie)\n-  {\n-    op (&p, cookie);\n-  }\n-\n-  /* Clear out entries if they are about to be gc'd.  */\n-\n-  static void\n-  handle_cache_entry (T &e)\n-  {\n-    if (e != HTAB_EMPTY_ENTRY && e != HTAB_DELETED_ENTRY && !ggc_marked_p (e))\n-      e = static_cast<T> (HTAB_DELETED_ENTRY);\n-  }\n-};\n-\n-\n /* Table of primes and their inversion information.  */\n \n struct prime_ent"}, {"sha": "1bac581ee6ca87cbc955e41952edb7a627669f55", "filename": "gcc/hash-traits.h", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c37791e904dac9f2b24bc8222c39221596eed/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c37791e904dac9f2b24bc8222c39221596eed/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=f11c37791e904dac9f2b24bc8222c39221596eed", "patch": "@@ -0,0 +1,159 @@\n+/* Traits for hashable types.\n+   Copyright (C) 2014-2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef hash_traits_h\n+#define hash_traits_h\n+\n+/* Helpful type for removing with free.  */\n+\n+template <typename Type>\n+struct typed_free_remove\n+{\n+  static inline void remove (Type *p);\n+};\n+\n+\n+/* Remove with free.  */\n+\n+template <typename Type>\n+inline void\n+typed_free_remove <Type>::remove (Type *p)\n+{\n+  free (p);\n+}\n+\n+\n+/* Helpful type for a no-op remove.  */\n+\n+template <typename Type>\n+struct typed_noop_remove\n+{\n+  static inline void remove (Type *p);\n+};\n+\n+\n+/* Remove doing nothing.  */\n+\n+template <typename Type>\n+inline void\n+typed_noop_remove <Type>::remove (Type *p ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+\n+/* Pointer hash with a no-op remove method.  */\n+\n+template <typename Type>\n+struct pointer_hash : typed_noop_remove <Type>\n+{\n+  typedef Type *value_type;\n+  typedef Type *compare_type;\n+\n+  static inline hashval_t hash (const value_type &);\n+\n+  static inline bool equal (const value_type &existing,\n+\t\t\t    const compare_type &candidate);\n+};\n+\n+template <typename Type>\n+inline hashval_t\n+pointer_hash <Type>::hash (const value_type &candidate)\n+{\n+  /* This is a really poor hash function, but it is what the current code uses,\n+     so I am reusing it to avoid an additional axis in testing.  */\n+  return (hashval_t) ((intptr_t)candidate >> 3);\n+}\n+\n+template <typename Type>\n+inline bool\n+pointer_hash <Type>::equal (const value_type &existing,\n+\t\t\t   const compare_type &candidate)\n+{\n+  return existing == candidate;\n+}\n+\n+/* Hasher for entry in gc memory.  */\n+\n+template<typename T>\n+struct ggc_hasher\n+{\n+  typedef T value_type;\n+  typedef T compare_type;\n+\n+  static void remove (T) {}\n+\n+  static void\n+  ggc_mx (T p)\n+  {\n+    extern void gt_ggc_mx (T &);\n+    gt_ggc_mx (p);\n+  }\n+\n+  static void\n+  pch_nx (T &p)\n+  {\n+    extern void gt_pch_nx (T &);\n+    gt_pch_nx (p);\n+  }\n+\n+  static void\n+  pch_nx (T &p, gt_pointer_operator op, void *cookie)\n+  {\n+    op (&p, cookie);\n+  }\n+};\n+\n+/* Hasher for cache entry in gc memory.  */\n+\n+template<typename T>\n+struct ggc_cache_hasher\n+{\n+  typedef T value_type;\n+  typedef T compare_type;\n+\n+  static void remove (T &) {}\n+\n+  /* Entries are weakly held because this is for caches.  */\n+\n+  static void ggc_mx (T &) {}\n+\n+  static void\n+  pch_nx (T &p)\n+  {\n+    extern void gt_pch_nx (T &);\n+    gt_pch_nx (p);\n+  }\n+\n+  static void\n+  pch_nx (T &p, gt_pointer_operator op, void *cookie)\n+  {\n+    op (&p, cookie);\n+  }\n+\n+  /* Clear out entries if they are about to be gc'd.  */\n+\n+  static void\n+  handle_cache_entry (T &e)\n+  {\n+    if (e != HTAB_EMPTY_ENTRY && e != HTAB_DELETED_ENTRY && !ggc_marked_p (e))\n+      e = static_cast<T> (HTAB_DELETED_ENTRY);\n+  }\n+};\n+\n+#endif"}]}