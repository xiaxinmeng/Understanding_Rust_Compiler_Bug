{"sha": "4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVkMDI0YjYwNGViNmFjMmI1ZjIzYjNlZDA5NjVhMzFhZmU5ZGY2Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-05-10T14:17:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-05-10T14:17:45Z"}, "message": "re PR c++/57196 (Bogus \"aggregate ... has incomplete type and cannot be defined\")\n\n\tPR c++/57196\n\t* pt.c (convert_template_argument): Use dependent_template_arg_p,\n\tnot uses_template_parms.\n\nFrom-SVN: r198778", "tree": {"sha": "0f80add227634d86964045224762e91632107eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f80add227634d86964045224762e91632107eff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "616eece3a583ddc62b43a5fed364df7a991cf5af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616eece3a583ddc62b43a5fed364df7a991cf5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616eece3a583ddc62b43a5fed364df7a991cf5af"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "67b4d77788c1542a44b198b9bc3f751c16beb874", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "patch": "@@ -1,5 +1,9 @@\n 2013-05-10  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/57196\n+\t* pt.c (convert_template_argument): Use dependent_template_arg_p,\n+\tnot uses_template_parms.\n+\n \tPR c++/57047\n \t* semantics.c (cxx_fold_indirect_ref): Fix thinko.\n "}, {"sha": "8f88b10fef3c25531912035169c783ad3761ed5b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "patch": "@@ -6368,7 +6368,8 @@ convert_template_argument (tree parm,\n \t      val = error_mark_node;\n \t    }\n \t}\n-      else if (!uses_template_parms (orig_arg) && !uses_template_parms (t))\n+      else if (!dependent_template_arg_p (orig_arg)\n+\t       && !uses_template_parms (t))\n \t/* We used to call digest_init here.  However, digest_init\n \t   will report errors, which we don't want when complain\n \t   is zero.  More importantly, digest_init will try too"}, {"sha": "f215b9d79323b4401895902a1108a95900ab7408", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist70.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist70.C?ref=4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/57196\n+// { dg-require-effective-target c++11 }\n+\n+#include <initializer_list>\n+\n+template<class T>\n+struct set {\n+  set() = default;\n+  set(std::initializer_list<T>){}\n+};\n+\n+struct string {\n+  string(const char*){}\n+  ~string(){}\n+};\n+\n+typedef decltype(sizeof(0)) size_t;\n+\n+template <size_t> struct EqHelper { };\n+\n+int IsNullLiteralHelper(...);\n+\n+void Fn() {\n+  EqHelper<sizeof IsNullLiteralHelper(set<int>{1})>        eq1;  // ok\n+  EqHelper<sizeof IsNullLiteralHelper(set<string>())>      eq2;  // ok\n+  EqHelper<sizeof IsNullLiteralHelper(set<string>{\"foo\"})> eq3;  // error\n+}"}, {"sha": "ebd47bcffd4caad95e5009aebae000aec1d28f5c", "filename": "gcc/testsuite/g++.dg/template/crash106.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C?ref=4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "patch": "@@ -10,3 +10,5 @@ struct A\n template<T N = 0, void (A::*)() = &A::foo<N> > struct B {}; // { dg-error \"type|declared\" }\n \n B<> b; // { dg-error \"type|declaration\" }\n+\n+// { dg-prune-output \"could not convert\" }"}, {"sha": "ff35764c7c7aa71960cd3e4ebb15dc65e59a7526", "filename": "gcc/testsuite/g++.dg/template/crash112.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash112.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash112.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash112.C?ref=4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "patch": "@@ -5,11 +5,13 @@ struct A\n   template<typename> void foo() {}\n };\n \n-template<void (A::*)()> struct B {}; // { dg-error \"declaration\" }\n+template<void (A::*)()> struct B {};\n \n template<int> struct C\n {\n   B<&A::foo<int int> > b; // { dg-error \"declaration|type\" }\n };\n \n C<0> c;\n+\n+// { dg-prune-output \"could not convert\" }"}, {"sha": "a540e55f4e52da420cf4e80d9c9162b1086457c0", "filename": "gcc/testsuite/g++.dg/template/dependent-args1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-args1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-args1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-args1.C?ref=4ed024b604eb6ac2b5f23b3ed0965a31afe9df6b", "patch": "@@ -9,3 +9,5 @@ struct A\n template<int N, void (A::*)() = &A::foo<N> > struct B {};\n \n B<int> b; // { dg-error \"type/value mismatch|expected a constant|invalid type\" }\n+\n+// { dg-prune-output \"could not convert\" }"}]}