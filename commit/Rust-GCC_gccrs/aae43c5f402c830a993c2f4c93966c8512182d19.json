{"sha": "aae43c5f402c830a993c2f4c93966c8512182d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlNDNjNWY0MDJjODMwYTk5M2MyZjRjOTM5NjZjODUxMjE4MmQxOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-01T23:13:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-01T23:13:19Z"}, "message": "(convert_arguments): Give proper warnings when converting\nCOMPLEX_TYPE; widen check to include all integral types.\n\nFrom-SVN: r8012", "tree": {"sha": "15d546c1820a7b43f8905c75a3c0b458fe415713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d546c1820a7b43f8905c75a3c0b458fe415713"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae43c5f402c830a993c2f4c93966c8512182d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae43c5f402c830a993c2f4c93966c8512182d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae43c5f402c830a993c2f4c93966c8512182d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae43c5f402c830a993c2f4c93966c8512182d19/comments", "author": null, "committer": null, "parents": [{"sha": "1a655ca39b582ef0a30d39d597fdee65fb162992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a655ca39b582ef0a30d39d597fdee65fb162992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a655ca39b582ef0a30d39d597fdee65fb162992"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "d09399bbec7335dd1f4c9e1fbcb359a94ecf7946", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae43c5f402c830a993c2f4c93966c8512182d19/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae43c5f402c830a993c2f4c93966c8512182d19/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=aae43c5f402c830a993c2f4c93966c8512182d19", "patch": "@@ -1659,12 +1659,21 @@ convert_arguments (typelist, values, name, fundecl)\n \t\t{\n \t\t  int formal_prec = TYPE_PRECISION (type);\n \n-\t\t  if (TREE_CODE (type) != REAL_TYPE\n+\t\t  if (INTEGRAL_TYPE_P (type)\n \t\t      && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n \t\t    warn_for_assignment (\"%s as integer rather than floating due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t  else if (TREE_CODE (type) == COMPLEX_TYPE\n+\t\t\t   && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n+\t\t    warn_for_assignment (\"%s as complex rather than floating due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n-\t\t      && TREE_CODE (TREE_TYPE (val)) != REAL_TYPE)\n+\t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n \t\t    warn_for_assignment (\"%s as floating rather than integer due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t  else if (TREE_CODE (type) == REAL_TYPE\n+\t\t\t   && TREE_CODE (TREE_TYPE (val)) == COMPLEX_TYPE)\n+\t\t    warn_for_assignment (\"%s as floating rather than complex due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t  /* ??? At some point, messages should be written about\n+\t\t     conversions between complex types, but that's too messy\n+\t\t     to do now.  */\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t\t   && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n \t\t    {\n@@ -1674,10 +1683,8 @@ convert_arguments (typelist, values, name, fundecl)\n \t\t\twarn_for_assignment (\"%s as `float' rather than `double' due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t    }\n \t\t  /* Detect integer changing in width or signedness.  */\n-\t\t  else if ((TREE_CODE (type) == INTEGER_TYPE\n-\t\t\t    || TREE_CODE (type) == ENUMERAL_TYPE)\n-\t\t\t   && (TREE_CODE (TREE_TYPE (val)) == INTEGER_TYPE\n-\t\t\t       || TREE_CODE (TREE_TYPE (val)) == ENUMERAL_TYPE))\n+\t\t  else if (INTEGRAL_TYPE_P (type)\n+\t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n \t\t    {\n \t\t      tree would_have_been = default_conversion (val);\n \t\t      tree type1 = TREE_TYPE (would_have_been);"}]}