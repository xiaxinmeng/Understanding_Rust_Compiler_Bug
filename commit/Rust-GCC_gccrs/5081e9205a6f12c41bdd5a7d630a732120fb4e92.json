{"sha": "5081e9205a6f12c41bdd5a7d630a732120fb4e92", "node_id": "C_kwDOANBUbNoAKDUwODFlOTIwNWE2ZjEyYzQxYmRkNWE3ZDYzMGE3MzIxMjBmYjRlOTI", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2022-01-03T14:29:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:33Z"}, "message": "[Ada] Fix visibility inside declare_expression\n\nThe first implementation just created a scope for the analysis of the\ndeclarations and the expression, so that visibility would just work as\nit does for all other constructs. However this led to an annoying bug\nwhen one of the declarations or the expression itself creates a\ntransient scope: there may be a confusion on scope exit between those\ntwo scopes. As a result visibility is handled by explicit traversal of\nthe expression and replacement of occurrences of the local variables,\nsee Replace_Local_Ref in Resolve_Declare_Expression (sem_res.adb). The\ncurrent code does not take into account that there may be references to\na local object in a subsequent declaration (not just in the expression).\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Declare_Expression): Traverse the\n\texpression to replace references to local variables that occur\n\twithin declarations of the declare_expression; fix typos in\n\tcomments.", "tree": {"sha": "af78b3e26dc280ed5b4c6993d9b0135b19bc92d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af78b3e26dc280ed5b4c6993d9b0135b19bc92d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5081e9205a6f12c41bdd5a7d630a732120fb4e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5081e9205a6f12c41bdd5a7d630a732120fb4e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5081e9205a6f12c41bdd5a7d630a732120fb4e92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5081e9205a6f12c41bdd5a7d630a732120fb4e92/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1231d9a0baab25e0a07b0d6146b91e59ecfadb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1231d9a0baab25e0a07b0d6146b91e59ecfadb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1231d9a0baab25e0a07b0d6146b91e59ecfadb8"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "f5c8b10456e25701dcb4d6a0915bf20f4d3eccdd", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5081e9205a6f12c41bdd5a7d630a732120fb4e92/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5081e9205a6f12c41bdd5a7d630a732120fb4e92/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5081e9205a6f12c41bdd5a7d630a732120fb4e92", "patch": "@@ -7595,7 +7595,7 @@ package body Sem_Res is\n       Local : Entity_Id := Empty;\n \n       function Replace_Local (N  : Node_Id) return Traverse_Result;\n-      --  Use a tree traversal to replace each ocurrence of the name of\n+      --  Use a tree traversal to replace each occurrence of the name of\n       --  a local object declared in the construct, with the corresponding\n       --  entity. This replaces the usual way to perform name capture by\n       --  visibility, because it is not possible to place on the scope\n@@ -7632,7 +7632,7 @@ package body Sem_Res is\n \n       procedure Replace_Local_Ref is new Traverse_Proc (Replace_Local);\n \n-      --  Start of processing for  Resolve_Declare_Expression\n+   --  Start of processing for Resolve_Declare_Expression\n \n    begin\n \n@@ -7645,6 +7645,19 @@ package body Sem_Res is\n          then\n             Local := Defining_Identifier (Decl);\n             Replace_Local_Ref (Expr);\n+\n+            --  Traverse the expression to replace references to local\n+            --  variables that occur within declarations of the\n+            --  declare_expression.\n+\n+            declare\n+               D : Node_Id := Next (Decl);\n+            begin\n+               while Present (D) loop\n+                  Replace_Local_Ref (D);\n+                  Next (D);\n+               end loop;\n+            end;\n          end if;\n \n          Next (Decl);"}]}