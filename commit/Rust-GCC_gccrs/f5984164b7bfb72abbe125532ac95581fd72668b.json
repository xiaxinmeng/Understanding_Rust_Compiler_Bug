{"sha": "f5984164b7bfb72abbe125532ac95581fd72668b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU5ODQxNjRiN2JmYjcyYWJiZTEyNTUzMmFjOTU1ODFmZDcyNjY4Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-02T03:13:16Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-02T03:13:16Z"}, "message": "gxx.gperf (hash, [...]): Add prototypes.\n\n\t* gxx.gperf (hash, is_reserved_word): Add prototypes.\n\n\t* init.c (build_vec_init): Initialize variable `try_block'.\n\n\t* lex.c (init_parse): Call memcpy, not bcopy, to avoid casts.\n\tLikewise for bzero/memset.\n\t(token_getch, token_put_back): Add static prototypes.  Remove\n\t`inline' from the definitions.\n\t(retrofit_lang_decl): Call memset, not bzero, to avoid casts.\n\nFrom-SVN: r29042", "tree": {"sha": "9eadea04e4ce16ec29f10e8d7e9ccd268f6f1711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eadea04e4ce16ec29f10e8d7e9ccd268f6f1711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5984164b7bfb72abbe125532ac95581fd72668b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5984164b7bfb72abbe125532ac95581fd72668b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5984164b7bfb72abbe125532ac95581fd72668b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5984164b7bfb72abbe125532ac95581fd72668b/comments", "author": null, "committer": null, "parents": [{"sha": "aea87e88e11f4cf9bee3542f3bb827c98b6a9342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea87e88e11f4cf9bee3542f3bb827c98b6a9342", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea87e88e11f4cf9bee3542f3bb827c98b6a9342"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "b6721d4d9559aeebe06265f57bfebdeefd5988aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f5984164b7bfb72abbe125532ac95581fd72668b", "patch": "@@ -1,3 +1,15 @@\n+1999-09-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gxx.gperf (hash, is_reserved_word): Add prototypes.\n+\n+\t* init.c (build_vec_init): Initialize variable `try_block'.\n+\n+\t* lex.c (init_parse): Call memcpy, not bcopy, to avoid casts.\n+\tLikewise for bzero/memset.\n+\t(token_getch, token_put_back): Add static prototypes.  Remove\n+\t`inline' from the definitions.\n+\t(retrofit_lang_decl): Call memset, not bzero, to avoid casts.\n+\n 1999-09-01  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (lang_type): Move align into type_flags."}, {"sha": "fab533d646e2c8635493a3701844cbfa98eeca59", "filename": "gcc/cp/gxx.gperf", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2Fgxx.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2Fgxx.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxx.gperf?ref=f5984164b7bfb72abbe125532ac95581fd72668b", "patch": "@@ -1,7 +1,15 @@\n %{\n-/* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n+/* Command-line: gperf -L C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n %}\n struct resword { const char *name; short token; enum rid rid;};\n+#ifdef __GNUC__\n+__inline\n+#endif\n+static unsigned int hash PARAMS ((const char *, unsigned int));\n+#ifdef __GNUC__\n+__inline\n+#endif\n+struct resword *is_reserved_word PARAMS ((const char *, unsigned int));\n %%\n __alignof, ALIGNOF, RID_UNUSED\n __alignof__, ALIGNOF, RID_UNUSED"}, {"sha": "8518d5ba1dcc9146636d778f4550c8af730e0238", "filename": "gcc/cp/hash.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fhash.h?ref=f5984164b7bfb72abbe125532ac95581fd72668b", "patch": "@@ -1,7 +1,15 @@\n /* C code produced by gperf version 2.7.1 (19981006 egcs) */\n /* Command-line: gperf -L C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ../../../gcc/cp/gxx.gperf  */\n-/* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n+/* Command-line: gperf -L C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n struct resword { const char *name; short token; enum rid rid;};\n+#ifdef __GNUC__\n+__inline\n+#endif\n+static unsigned int hash PARAMS ((const char *, unsigned int));\n+#ifdef __GNUC__\n+__inline\n+#endif\n+struct resword *is_reserved_word PARAMS ((const char *, unsigned int));\n \n #define TOTAL_KEYWORDS 103\n #define MIN_WORD_LENGTH 2"}, {"sha": "3c549fb6b4ae6184e4f3df026681d3a2900235a4", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=f5984164b7bfb72abbe125532ac95581fd72668b", "patch": "@@ -2765,7 +2765,7 @@ build_vec_init (decl, base, maxindex, init, from_array)\n   tree stmt_expr;\n   tree compound_stmt;\n   int destroy_temps;\n-  tree try_block;\n+  tree try_block = NULL_TREE;\n   int num_initialized_elts = 0;\n \n   maxindex = cp_convert (ptrdiff_type_node, maxindex);"}, {"sha": "d5a12bf14b29f42f800989eab81f7a46e4e3071e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5984164b7bfb72abbe125532ac95581fd72668b/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=f5984164b7bfb72abbe125532ac95581fd72668b", "patch": "@@ -91,6 +91,8 @@ static int pragma_getc PROTO((void));\n static void pragma_ungetc PROTO((int));\n #endif\n static int read_line_number PROTO((int *));\n+static int token_getch PROTO ((void));\n+static void token_put_back PROTO ((int));\n \n /* Given a file name X, return the nondirectory portion.\n    Keep in mind that X can be computed more than once.  */\n@@ -533,20 +535,20 @@ init_parse (filename)\n   init_cplus_unsave ();\n   init_cplus_expand ();\n \n-  bcopy (cplus_tree_code_type,\n-\t tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n-\t (int)LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE);\n-  bcopy ((char *)cplus_tree_code_length,\n-\t (char *)(tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE),\n-\t (LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (int));\n-  bcopy ((char *)cplus_tree_code_name,\n-\t (char *)(tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE),\n-\t (LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (char *));\n+  memcpy (tree_code_type + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  cplus_tree_code_type,\n+\t  (int)LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE);\n+  memcpy (tree_code_length + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  cplus_tree_code_length,\n+\t  (LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (int));\n+  memcpy (tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE,\n+\t  cplus_tree_code_name,\n+\t  (LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (char *));\n \n   opname_tab = (const char **)oballoc ((int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n-  bzero ((char *)opname_tab, (int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n+  memset (opname_tab, 0, (int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n   assignop_tab = (const char **)oballoc ((int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n-  bzero ((char *)assignop_tab, (int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n+  memset (assignop_tab, 0, (int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n \n   ansi_opname[0] = get_identifier (\"<invalid operator>\");\n   for (i = 0; i < (int) LAST_CPLUS_TREE_CODE; i++)\n@@ -3459,7 +3461,7 @@ parse_float (data)\n    next token, which screws up feed_input.  So just return a null\n    character.  */\n \n-inline int\n+static int\n token_getch ()\n {\n #if USE_CPPLIB\n@@ -3469,7 +3471,7 @@ token_getch ()\n   return getch ();\n }\n \n-inline void\n+static void\n token_put_back (ch)\n      int ch;\n {\n@@ -4781,7 +4783,7 @@ retrofit_lang_decl (t)\n   else\n     ld = (struct lang_decl *) obstack_alloc (obstack, size);\n \n-  bzero (ld, size);\n+  memset (ld, 0, size);\n \n   DECL_LANG_SPECIFIC (t) = ld;\n   LANG_DECL_PERMANENT (ld) = obstack == &permanent_obstack;"}]}