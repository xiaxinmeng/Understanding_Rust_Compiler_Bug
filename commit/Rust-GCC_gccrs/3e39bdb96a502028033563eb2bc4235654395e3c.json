{"sha": "3e39bdb96a502028033563eb2bc4235654395e3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzOWJkYjk2YTUwMjAyODAzMzU2M2ViMmJjNDIzNTY1NDM5NWUzYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2000-12-26T18:14:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2000-12-26T18:14:54Z"}, "message": "h8300.c: Fix a comment typo.\n\n2000-12-26  Kazu Hirata  <kazu@hxi.com>\n\n\t* config/h8300/h8300.c: Fix a comment typo.\n\t(get_shift_alg): Do not output extra whitespace after one line\n\tof assembly code.  Output a tab after an opcode instead of a\n\tspace.\n\t(emit_a_shift): Output a tab after an opcode instead of a space.\n\nFrom-SVN: r38491", "tree": {"sha": "f7ad0326d87ce17abc4cab0fbe9c633bb76d2248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7ad0326d87ce17abc4cab0fbe9c633bb76d2248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e39bdb96a502028033563eb2bc4235654395e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e39bdb96a502028033563eb2bc4235654395e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e39bdb96a502028033563eb2bc4235654395e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e39bdb96a502028033563eb2bc4235654395e3c/comments", "author": null, "committer": null, "parents": [{"sha": "a3027199a51e00d4e0b718f05ad73dd811578ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3027199a51e00d4e0b718f05ad73dd811578ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3027199a51e00d4e0b718f05ad73dd811578ab3"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "b93316ce2e21c28323632e5d67278aab21971cb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e39bdb96a502028033563eb2bc4235654395e3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e39bdb96a502028033563eb2bc4235654395e3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e39bdb96a502028033563eb2bc4235654395e3c", "patch": "@@ -1,7 +1,11 @@\n 2000-12-26  Kazu Hirata  <kazu@hxi.com>\n \n-\t* config/h8300/h8300.c (get_shift_alg): Fix a typo in the assembly\n-\tcode for 12-bit ASHIFTRT in HImode.\n+\t* config/h8300/h8300.c: Fix a comment typo.\n+\t(get_shift_alg): Fix a typo in the assembly code for 12-bit\n+\tASHIFTRT in HImode.  Do not output extra whitespace after one line\n+\tof assembly code.  Output a tab after an opcode instead of a\n+\tspace.\n+\t(emit_a_shift): Output a tab after an opcode instead of a space.\n \n 2000-12-23  Marek Michalkiewicz  <marekm@linux.org.pl>\n "}, {"sha": "d34903b294f80f930edf7428636c485e53e408e8", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e39bdb96a502028033563eb2bc4235654395e3c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e39bdb96a502028033563eb2bc4235654395e3c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=3e39bdb96a502028033563eb2bc4235654395e3c", "patch": "@@ -1713,7 +1713,7 @@ bit_operator (x, mode)\n             (with sign extension for ASHIFTRT)\n    16     - move word into place, zero or sign extend other\n    17-20  - do 16bit shift, then inline remaining shifts\n-   20-23  - loop\n+   21-23  - loop\n    24*    - ASHIFT: move byte 0(msb) to byte 1, zero byte 0,\n                     move word 0 to word 1, zero word 0\n             LSHIFTRT: move word 1 to word 0, move byte 1 to byte 0,\n@@ -2113,7 +2113,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tshll\\t%t0\\n\\tsubx\\t%t0,%t0\\t\";\n+\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tshll\\t%t0\\n\\tsubx\\t%t0,%t0\";\n \t      else\n \t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\";\n \t      *cc_valid_p = 0;\n@@ -2147,7 +2147,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n \t    {\n \t    case SHIFT_ASHIFT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t#2,%t0\\n\\t\";\n+\t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t#2,%t0\";\n \t      else\n \t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\";\n \t      *cc_valid_p = 0;\n@@ -2442,7 +2442,7 @@ get_shift_alg (cpu, shift_type, mode, count, assembler_p,\n \t  if (shift_type == SHIFT_ASHIFTRT)\n \t    {\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"shll\\t%z0\\n\\tsubx %w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n+\t\t*assembler_p = \"shll\\t%z0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n \t      else\n \t\t*assembler_p = \"shll\\t%e0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n \t      *cc_valid_p = 0;\n@@ -2623,12 +2623,12 @@ emit_a_shift (insn, operands)\n \t\tswitch (mode)\n \t\t  {\n \t\t  case QImode:\n-\t\t    sprintf (insn_buf, \"and #%d,%%X0\", mask);\n+\t\t    sprintf (insn_buf, \"and\\t#%d,%%X0\", mask);\n \t\t    cc_status.value1 = operands[0];\n \t\t    cc_status.flags |= CC_NO_CARRY;\n \t\t    break;\n \t\t  case HImode:\n-\t\t    sprintf (insn_buf, \"and #%d,%%s0\\n\\tand #%d,%%t0\",\n+\t\t    sprintf (insn_buf, \"and\\t#%d,%%s0\\n\\tand\\t#%d,%%t0\",\n \t\t\t     mask & 255, mask >> 8);\n \t\t    break;\n \t\t  case SImode:\n@@ -2639,7 +2639,7 @@ emit_a_shift (insn, operands)\n \t      }\n \t    else\n \t      {\n-\t\tsprintf (insn_buf, \"and.%c #%d,%%%c0\",\n+\t\tsprintf (insn_buf, \"and.%c\\t#%d,%%%c0\",\n \t\t\t \"bwl\"[shift_mode], mask,\n \t\t\t mode == QImode ? 'X' : mode == HImode ? 'T' : 'S');\n \t\tcc_status.value1 = operands[0];"}]}