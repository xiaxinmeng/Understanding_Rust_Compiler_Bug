{"sha": "97ba0040a84c942562074621f4b550774e0c38e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdiYTAwNDBhODRjOTQyNTYyMDc0NjIxZjRiNTUwNzc0ZTBjMzhlNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-10-15T01:20:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-10-15T01:20:55Z"}, "message": "re PR rtl-optimization/45621 (ICE: verify_cgraph_node failed: inlined_to pointer is set but no predecessors found with -fipa-cp-clone -flto)\n\n\n\tPR middle-end/45621\n\t* g++.dg/lto/pr45621.h : New.\n\t* g++.dg/lto/pr45621_0.C: New.\n\t* g++.dg/lto/pr45621_1.C: New.\n\t* cgraph.c (cgraph_update_edges_for_call_stmt_node): When new call is\n\tredirected to clone, be happy.\n\t* cgraph.h (cgraph node): Enable former_clone_of unconditinally.\n\t* cgraphunit.c (verify_cgraph_node, cgraph_materialize_clone): Handle\n\tformer_clone_of unconditinally.\n\nFrom-SVN: r165492", "tree": {"sha": "02fe16310bd09fdf1d3c23fde7236a1aa760fb1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02fe16310bd09fdf1d3c23fde7236a1aa760fb1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ba0040a84c942562074621f4b550774e0c38e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ba0040a84c942562074621f4b550774e0c38e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ba0040a84c942562074621f4b550774e0c38e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ba0040a84c942562074621f4b550774e0c38e7/comments", "author": null, "committer": null, "parents": [{"sha": "23ac8b8d6aac34d9c9014c95a70b09e0e43e039e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ac8b8d6aac34d9c9014c95a70b09e0e43e039e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ac8b8d6aac34d9c9014c95a70b09e0e43e039e"}], "stats": {"total": 73, "additions": 61, "deletions": 12}, "files": [{"sha": "5c0d576f402972c7f3e06f59616c13081851373b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97ba0040a84c942562074621f4b550774e0c38e7", "patch": "@@ -1,3 +1,12 @@\n+2010-10-14  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/45621\n+\t* cgraph.c (cgraph_update_edges_for_call_stmt_node): When new call is\n+\tredirected to clone, be happy.\n+\t* cgraph.h (cgraph node): Enable former_clone_of unconditinally.\n+\t* cgraphunit.c (verify_cgraph_node, cgraph_materialize_clone): Handle\n+\tformer_clone_of unconditinally.\n+\t\n 2010-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tmerge from FSF apple 'trunk' branch. "}, {"sha": "465e9afbf79b3471e1b04cf6258abc7e4895fc26", "filename": "gcc/cgraph.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=97ba0040a84c942562074621f4b550774e0c38e7", "patch": "@@ -1241,9 +1241,18 @@ cgraph_update_edges_for_call_stmt_node (struct cgraph_node *node,\n \t{\n \t  /* See if the edge is already there and has the correct callee.  It\n \t     might be so because of indirect inlining has already updated\n-\t     it.  */\n-\t  if (new_call && e->callee && e->callee->decl == new_call)\n-\t    return;\n+\t     it.  We also might've cloned and redirected the edge.  */\n+\t  if (new_call && e->callee)\n+\t    {\n+\t      struct cgraph_node *callee = e->callee;\n+\t      while (callee)\n+\t\t{\n+\t\t  if (callee->decl == new_call\n+\t\t      || callee->former_clone_of == new_call)\n+\t\t    return;\n+\t\t  callee = callee->clone_of;\n+\t\t}\n+\t    }\n \n \t  /* Otherwise remove edge and create new one; we can't simply redirect\n \t     since function has changed, so inline plan and other information"}, {"sha": "d7ca67c692f6283f874ce42bdb8940fb3271e257", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=97ba0040a84c942562074621f4b550774e0c38e7", "patch": "@@ -227,11 +227,8 @@ struct GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\"))) cgraph_node {\n   /* For functions with many calls sites it holds map from call expression\n      to the edge to speed up cgraph_edge function.  */\n   htab_t GTY((param_is (struct cgraph_edge))) call_site_hash;\n-#ifdef ENABLE_CHECKING\n-  /* Declaration node used to be clone of.  Used for checking only. \n-     We must skip it or we get references from release checking GGC files. */\n-  tree GTY ((skip)) former_clone_of;\n-#endif\n+  /* Declaration node used to be clone of. */\n+  tree former_clone_of;\n \n   PTR GTY ((skip)) aux;\n "}, {"sha": "7d4349a8b6dbe43e75a2a7184c67452b3cc486f7", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=97ba0040a84c942562074621f4b550774e0c38e7", "patch": "@@ -656,7 +656,6 @@ verify_cgraph_node (struct cgraph_node *node)\n \t\t\t\tdebug_tree (e->callee->decl);\n \t\t\t\terror_found = true;\n \t\t\t      }\n-#ifdef ENABLE_CHECKING\n \t\t\t    else if (!e->callee->global.inlined_to\n \t\t\t\t     && decl\n \t\t\t\t     && cgraph_get_node (decl)\n@@ -671,7 +670,6 @@ verify_cgraph_node (struct cgraph_node *node)\n \t\t\t\tdebug_tree (decl);\n \t\t\t\terror_found = true;\n \t\t\t      }\n-#endif\n \t\t\t  }\n \t\t\telse if (decl)\n \t\t\t  {\n@@ -2079,11 +2077,9 @@ static void\n cgraph_materialize_clone (struct cgraph_node *node)\n {\n   bitmap_obstack_initialize (NULL);\n-#ifdef ENABLE_CHECKING\n   node->former_clone_of = node->clone_of->decl;\n   if (node->clone_of->former_clone_of)\n     node->former_clone_of = node->clone_of->former_clone_of;\n-#endif\n   /* Copy the OLD_VERSION_NODE function tree to the new version.  */\n   tree_function_versioning (node->clone_of->decl, node->decl,\n   \t\t\t    node->clone.tree_map, true,"}, {"sha": "6f8e1fdf9da94839f3704ce15dc18036301a8b08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97ba0040a84c942562074621f4b550774e0c38e7", "patch": "@@ -1,3 +1,10 @@\n+2010-10-14  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/45621\n+\t* g++.dg/lto/pr45621.h : New.\n+\t* g++.dg/lto/pr45621_0.C: New.\n+\t* g++.dg/lto/pr45621_1.C: New.\n+\n 2010-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* objc.dg/property: New."}, {"sha": "81a764225c7b0efcef4c6f7787c59d8bf075e2b1", "filename": "gcc/testsuite/g++.dg/lto/pr45621.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621.h?ref=97ba0040a84c942562074621f4b550774e0c38e7", "patch": "@@ -0,0 +1,8 @@\n+struct S\n+{\n+  void m ();\n+  virtual void v1 ();\n+  virtual void v2 ();\n+};\n+\n+extern S s;"}, {"sha": "746079cdcebf60b9431448b1b2481b11173735cd", "filename": "gcc/testsuite/g++.dg/lto/pr45621_0.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621_0.C?ref=97ba0040a84c942562074621f4b550774e0c38e7", "patch": "@@ -0,0 +1,10 @@\n+// { dg-lto-do assemble }\n+// { dg-extra-ld-options \"-O2 -fipa-cp-clone -flto -nostdlib -r\" }\n+#include \"pr45621.h\"\n+\n+void\n+foo ()\n+{\n+  s.v1 ();\n+  s.m ();\n+}"}, {"sha": "2ada6a8798e9a1244d6a3c0934a9786a4c8e7e0b", "filename": "gcc/testsuite/g++.dg/lto/pr45621_1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ba0040a84c942562074621f4b550774e0c38e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45621_1.C?ref=97ba0040a84c942562074621f4b550774e0c38e7", "patch": "@@ -0,0 +1,13 @@\n+#include \"pr45621.h\"\n+\n+void\n+S::v1 ()\n+{\n+  v2 ();\n+}\n+\n+void\n+S::m ()\n+{\n+  v1 ();\n+}"}]}