{"sha": "f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMwYTlhOGQ5ZTA2YWUyYmYzOGUwZDI1ZTNjYTYwOTUyMTJjNzhlOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2020-11-24T16:21:17Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2020-11-24T16:35:11Z"}, "message": "arm: correctly handle negating INT_MIN in arm_split_atomic_op [PR97534]\n\narm_split_atomic_op handles subtracting a constant by converting it\ninto addition of the negated constant.  But if the type of the operand\nis int and the constant is -1 we currently end up generating invalid\nRTL which can lead to an abort later on.\n\nThe problem is that in a HOST_WIDE_INT, INT_MIN is represented as\n0xffffffff80000000 and the negation of this is 0x0000000080000000, but\nthat's not a valid constant for use in SImode operations.\n\nThe fix is straight-forward which is to use gen_int_mode rather than\nsimply GEN_INT.  This knows how to correctly sign-extend the negated\nconstant when this is needed.\n\ngcc/\n\tPR target/97534\n\t* config/arm/arm.c (arm_split_atomic_op): Use gen_int_mode when\n\tnegating a const_int.\ngcc/testsuite\n\t* gcc.dg/pr97534.c: New test.", "tree": {"sha": "769e77479c0bf8e207a94679f520cbb09d520670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/769e77479c0bf8e207a94679f520cbb09d520670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9/comments", "author": null, "committer": null, "parents": [{"sha": "13f93cf5336ec0085277b9a5ef88c02359527170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f93cf5336ec0085277b9a5ef88c02359527170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f93cf5336ec0085277b9a5ef88c02359527170"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "56ed556b098bc042b912d6dfee4fede8299489d5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9", "patch": "@@ -30824,7 +30824,7 @@ arm_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n     case MINUS:\n       if (CONST_INT_P (value))\n \t{\n-\t  value = GEN_INT (-INTVAL (value));\n+\t  value = gen_int_mode (-INTVAL (value), wmode);\n \t  code = PLUS;\n \t}\n       /* FALLTHRU */"}, {"sha": "b363a322aa5437c33cbc6fe0040242e2a351a71a", "filename": "gcc/testsuite/gcc.dg/pr97534.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97534.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97534.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97534.c?ref=f30a9a8d9e06ae2bf38e0d25e3ca6095212c78e9", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/97534 - ICE in decompose on arm*-*-*.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O2 -g\" } */\n+\n+int f (int a)\n+{\n+  int b;\n+  __atomic_fetch_sub(&b, (int)(-__INT_MAX__ - 1), (int)0);\n+}"}]}