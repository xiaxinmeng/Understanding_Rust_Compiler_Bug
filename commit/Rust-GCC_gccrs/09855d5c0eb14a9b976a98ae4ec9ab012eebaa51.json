{"sha": "09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "node_id": "C_kwDOANBUbNoAKDA5ODU1ZDVjMGViMTRhOWI5NzZhOThhZTRlYzlhYjAxMmVlYmFhNTE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-20T11:49:53Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-20T13:08:51Z"}, "message": "macro: Allow the repetition of metavars when expanding repetitions\n\nWhen expanding repeating metavars, we have to allow the repetition of non-repeating metavars as well:\n\n```\nmacro_rules! foo {\n    ( ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n        $(\n            impl $Trait for $Ty {\n                fn bar() -> i32 {\n                    14\n                }\n            }\n        )+\n    }\n}\n\ntrait Foo {\n    fn bar() -> i32;\n}\n\ntrait Bar {\n    fn bar() -> i32;\n}\n\ntrait Baz {\n    fn bar() -> i32;\n}\n\ntrait Qux {\n    fn bar() -> i32;\n}\n\nstruct S;\n\nfoo!{(Foo, Bar, Baz, Qux) for S}\n```\n\nThis is valid, as the $Ty metavar is not a repetition. However, this should fail to compile:\n\n```\nmacro_rules! foo {\n//                                 note the repetition here now\n    ( ( $( $Trait: ident ),+ ) for $($Ty: ident)+ ) => {\n        $(\n            impl $Trait for $Ty {\n                fn bar() -> i32 {\n                    14\n                }\n            }\n        )+\n    }\n}\n\ntrait Foo {\n    fn bar() -> i32;\n}\n\ntrait Bar {\n    fn bar() -> i32;\n}\n\ntrait Baz {\n    fn bar() -> i32;\n}\n\ntrait Qux {\n    fn bar() -> i32;\n}\n\nstruct S;\n\nfoo!{(Foo, Bar, Baz, Qux) for S}\n```\n\nObviously, if we were to specify as many $Ty as $Trait then there would be no issue, but that behavior is already handled.", "tree": {"sha": "d3cb79c22ffa2c662d29394c84111771f032a26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3cb79c22ffa2c662d29394c84111771f032a26a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9"}], "stats": {"total": 142, "additions": 123, "deletions": 19}, "files": [{"sha": "f96c28834dd9ea46e5b20386478430a588fd4049", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "patch": "@@ -83,10 +83,15 @@ MacroExpander::expand_decl_macro (Location invoc_locus,\n \n       if (did_match_rule)\n \t{\n+\t  // FIXME: ARTHUR: Comment\n \t  // Debugging\n-\t  //   for (auto &kv : matched_fragments)\n-\t  //     rust_debug (\"[fragment]: %s (%ld)\", kv.first.c_str (),\n-\t  // \t\tkv.second.get_fragments ().size ());\n+\t  for (auto &kv : matched_fragments)\n+\t    rust_debug (\"[fragment]: %s (%ld - %s)\", kv.first.c_str (),\n+\t\t\tkv.second.get_fragments ().size (),\n+\t\t\tkv.second.get_kind ()\n+\t\t\t    == MatchedFragmentContainer::Kind::Repetition\n+\t\t\t  ? \"repetition\"\n+\t\t\t  : \"metavar\");\n \n \t  matched_rule = &rule;\n \t  break;\n@@ -621,7 +626,8 @@ MacroExpander::match_n_matches (Parser<MacroInvocLexer> &parser,\n \n \t\t// matched fragment get the offset in the token stream\n \t\tsize_t offs_end = source.get_offs ();\n-\t\tsub_stack.insert_fragment (\n+\t\t// FIXME: ARTHUR: Here we want to append?\n+\t\tsub_stack.append_fragment (\n \t\t  MatchedFragment (fragment->get_ident (), offs_begin,\n \t\t\t\t   offs_end));\n \t      }"}, {"sha": "51d7516f1c5836e0afe3441bb0889515f21fb30e", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "patch": "@@ -76,8 +76,17 @@ struct MatchedFragment\n class MatchedFragmentContainer\n {\n public:\n-  MatchedFragmentContainer (std::vector<MatchedFragment> fragments)\n-    : fragments (fragments)\n+  // Does the container refer to a simple metavariable, different from a\n+  // repetition repeated once\n+  enum class Kind\n+  {\n+    MetaVar,\n+    Repetition,\n+  };\n+\n+  MatchedFragmentContainer (std::vector<MatchedFragment> fragments,\n+\t\t\t    Kind kind = Kind::Repetition)\n+    : fragments (fragments), kind (kind)\n   {}\n \n   /**\n@@ -94,7 +103,7 @@ class MatchedFragmentContainer\n    */\n   static MatchedFragmentContainer one (MatchedFragment fragment)\n   {\n-    return MatchedFragmentContainer ({fragment});\n+    return MatchedFragmentContainer ({fragment}, Kind::MetaVar);\n   }\n \n   /**\n@@ -103,6 +112,8 @@ class MatchedFragmentContainer\n   void add_fragment (MatchedFragment fragment)\n   {\n     fragments.emplace_back (fragment);\n+\n+    kind = Kind::Repetition;\n   }\n \n   size_t get_match_amount () const { return fragments.size (); }\n@@ -112,20 +123,28 @@ class MatchedFragmentContainer\n   }\n   // const std::string &get_fragment_name () const { return fragment_name; }\n \n-  bool is_single_fragment () const { return get_match_amount () == 1; }\n+  bool is_single_fragment () const\n+  {\n+    // FIXME: Is that valid?\n+    return get_match_amount () == 1 && kind == Kind::MetaVar;\n+  }\n+\n   const MatchedFragment get_single_fragment () const\n   {\n-    rust_assert (get_match_amount () == 1);\n+    rust_assert (is_single_fragment ());\n \n     return fragments[0];\n   }\n \n+  const Kind &get_kind () const { return kind; }\n+\n private:\n   /**\n    * Fragments matched `match_amount` times. This can be an empty vector\n    * in case having zero matches is allowed (i.e ? or * operators)\n    */\n   std::vector<MatchedFragment> fragments;\n+  Kind kind;\n };\n \n class SubstitutionScope\n@@ -156,15 +175,26 @@ class SubstitutionScope\n     auto it = current_map.find (fragment.fragment_ident);\n \n     if (it == current_map.end ())\n-      {\n-\tcurrent_map.insert (\n-\t  {fragment.fragment_ident, MatchedFragmentContainer::one (fragment)});\n-      }\n+      current_map.insert (\n+\t{fragment.fragment_ident, MatchedFragmentContainer::one (fragment)});\n     else\n-      {\n-\tauto &frags = it->second;\n-\tfrags.add_fragment (fragment);\n-      }\n+      gcc_unreachable ();\n+  }\n+\n+  /**\n+   * Append a new matched fragment to a repetition into the current substitution\n+   * map\n+   */\n+  void append_fragment (MatchedFragment fragment)\n+  {\n+    auto &current_map = stack.back ();\n+    auto it = current_map.find (fragment.fragment_ident);\n+\n+    if (it == current_map.end ())\n+      current_map.insert (\n+\t{fragment.fragment_ident, MatchedFragmentContainer ({fragment})});\n+    else\n+      it->second.add_fragment (fragment);\n   }\n \n   void insert_matches (std::string key, MatchedFragmentContainer matches)"}, {"sha": "1031cea483d92bda319f9b383e5512b1c0afc94f", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "patch": "@@ -74,15 +74,18 @@ SubstituteCtx::check_repetition_amount (size_t pattern_start,\n \t\t  is_valid = false;\n \t\t}\n \n-\t      size_t repeat_amount = it->second.get_match_amount ();\n+\t      auto &fragment = it->second;\n+\n+\t      size_t repeat_amount = fragment.get_match_amount ();\n \t      if (!first_fragment_found)\n \t\t{\n \t\t  first_fragment_found = true;\n \t\t  expected_repetition_amount = repeat_amount;\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (repeat_amount != expected_repetition_amount)\n+\t\t  if (repeat_amount != expected_repetition_amount\n+\t\t      && !fragment.is_single_fragment ())\n \t\t    {\n \t\t      rust_error_at (\n \t\t\tfrag_token->get_locus (),"}, {"sha": "ba7b61b0b16632d0af2ebdb752f3d8aaca24b378", "filename": "gcc/testsuite/rust/compile/macro-issue1400-2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs?ref=09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "patch": "@@ -0,0 +1,32 @@\n+macro_rules! foo {\n+    ( ( $( $Trait: ident ),+ ) for $($Ty: ident)* ) => {\n+        $(\n+            impl $Trait for $Ty {\n+    // { dg-error \"different amount of matches used in merged repetitions: expected 4, got 1\" \"\" { target *-*-* } .-1 }\n+                fn bar() -> i32 {\n+                    14\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+trait Foo {\n+    fn bar() -> i32;\n+}\n+\n+trait Bar {\n+    fn bar() -> i32;\n+}\n+\n+trait Baz {\n+    fn bar() -> i32;\n+}\n+\n+trait Qux {\n+    fn bar() -> i32;\n+}\n+\n+struct S;\n+\n+foo! {(Foo, Bar, Baz, Qux) for S}"}, {"sha": "971bd778054eb46798f34e20fbca8abf05afe85a", "filename": "gcc/testsuite/rust/compile/macro-issue1400.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09855d5c0eb14a9b976a98ae4ec9ab012eebaa51/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs?ref=09855d5c0eb14a9b976a98ae4ec9ab012eebaa51", "patch": "@@ -0,0 +1,33 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! foo {\n+    ( ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+        $(\n+            impl $Trait for $Ty {\n+                fn bar() -> i32 {\n+                    14\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+trait Foo {\n+    fn bar() -> i32;\n+}\n+\n+trait Bar {\n+    fn bar() -> i32;\n+}\n+\n+trait Baz {\n+    fn bar() -> i32;\n+}\n+\n+trait Qux {\n+    fn bar() -> i32;\n+}\n+\n+struct S;\n+\n+foo! {(Foo, Bar, Baz, Qux) for S}"}]}