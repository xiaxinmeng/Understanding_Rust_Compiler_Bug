{"sha": "187b9e1dc53da0a7db345b3c39fce7941e15f0f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3YjllMWRjNTNkYTBhN2RiMzQ1YjNjMzlmY2U3OTQxZTE1ZjBmMQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-11-30T15:33:23Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-11-30T15:33:23Z"}, "message": "[libbacktrace] Add tests for unused formats\n\nWhen building libbacktrace, we typically use elf.c, and don't build pecoff.c,\nxcoff.c or unknown.c.\n\nAdd testcases that use unused format to ensure that we also build and\ntest those on a typical development setup.\n\nBootstrapped and reg-tested on x86_64.\n\n2018-11-30  Tom de Vries  <tdevries@suse.de>\n\n\t* Makefile.am (check_PROGRAMS): Add test_elf, test_xcoff_32,\n\ttest_xcoff_64, test_pecoff and test_unknown.\n\t* Makefile.in: Regenerate.\n\t* test_format.c: New file.\n\nFrom-SVN: r266668", "tree": {"sha": "2278b013a18d99cde1bd0604c72fce27d41d5265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2278b013a18d99cde1bd0604c72fce27d41d5265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/187b9e1dc53da0a7db345b3c39fce7941e15f0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187b9e1dc53da0a7db345b3c39fce7941e15f0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187b9e1dc53da0a7db345b3c39fce7941e15f0f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b7d1a9741bb4064a091a9c065487dafe7408102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7d1a9741bb4064a091a9c065487dafe7408102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7d1a9741bb4064a091a9c065487dafe7408102"}], "stats": {"total": 240, "additions": 228, "deletions": 12}, "files": [{"sha": "19494e9b6001cb3c782cba5957f83a3262fe14e2", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=187b9e1dc53da0a7db345b3c39fce7941e15f0f1", "patch": "@@ -1,3 +1,10 @@\n+2018-11-30  Tom de Vries  <tdevries@suse.de>\n+\n+\t* Makefile.am (check_PROGRAMS): Add test_elf, test_xcoff_32,\n+\ttest_xcoff_64, test_pecoff and test_unknown.\n+\t* Makefile.in: Regenerate.\n+\t* test_format.c: New file.\n+\n 2018-11-30  Tom de Vries  <tdevries@suse.de>\n \n \t* Makefile.am : Add _with_alloc version for each test in"}, {"sha": "1a3680bc98ca5247c628de2dedd84dfecaaf9359", "filename": "libbacktrace/Makefile.am", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/libbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/libbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.am?ref=187b9e1dc53da0a7db345b3c39fce7941e15f0f1", "patch": "@@ -96,6 +96,45 @@ libbacktrace_alloc_la_LIBADD = $(BACKTRACE_FILE) $(FORMAT_FILE) read.lo alloc.lo\n \n libbacktrace_alloc_la_DEPENDENCIES = $(libbacktrace_alloc_la_LIBADD)\n \n+check_LTLIBRARIES += libbacktrace_noformat.la\n+\n+libbacktrace_noformat_la_SOURCES = $(libbacktrace_la_SOURCES)\n+libbacktrace_noformat_la_LIBADD = $(BACKTRACE_FILE) $(VIEW_FILE) $(ALLOC_FILE)\n+\n+libbacktrace_noformat_la_DEPENDENCIES = $(libbacktrace_noformat_la_LIBADD)\n+\n+xcoff_%.c: xcoff.c\n+\tSEARCH='#error \"Unknown BACKTRACE_XCOFF_SIZE\"'; \\\n+\tREPLACE='#undef BACKTRACE_XCOFF_SIZE\\n#define BACKTRACE_XCOFF_SIZE'; \\\n+\t$(SED) \"s/^$$SEARCH\\$$/$$REPLACE $*/\" \\\n+\t\t$(srcdir)/xcoff.c \\\n+\t\t> $@\n+\n+test_elf_SOURCES = test_format.c testlib.c\n+test_elf_LDADD = libbacktrace_noformat.la elf.lo\n+\n+check_PROGRAMS += test_elf\n+\n+test_xcoff_32_SOURCES = test_format.c testlib.c\n+test_xcoff_32_LDADD = libbacktrace_noformat.la xcoff_32.lo\n+\n+check_PROGRAMS += test_xcoff_32\n+\n+test_xcoff_64_SOURCES = test_format.c testlib.c\n+test_xcoff_64_LDADD = libbacktrace_noformat.la xcoff_64.lo\n+\n+check_PROGRAMS += test_xcoff_64\n+\n+test_pecoff_SOURCES = test_format.c testlib.c\n+test_pecoff_LDADD = libbacktrace_noformat.la pecoff.lo\n+\n+check_PROGRAMS += test_pecoff\n+\n+test_unknown_SOURCES = test_format.c testlib.c\n+test_unknown_LDADD = libbacktrace_noformat.la unknown.lo\n+\n+check_PROGRAMS += test_unknown\n+\n unittest_SOURCES = unittest.c testlib.c\n unittest_LDADD = libbacktrace.la\n "}, {"sha": "6eaa1e28c01311db738db35d758c0cf54c3ec9dc", "filename": "libbacktrace/Makefile.in", "status": "modified", "additions": 127, "deletions": 12, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/libbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/libbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.in?ref=187b9e1dc53da0a7db345b3c39fce7941e15f0f1", "patch": "@@ -121,9 +121,10 @@ build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n check_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3)\n-@NATIVE_TRUE@am__append_1 = unittest unittest_alloc btest btest_alloc \\\n-@NATIVE_TRUE@\tstest stest_alloc ztest ztest_alloc edtest \\\n-@NATIVE_TRUE@\tedtest_alloc\n+@NATIVE_TRUE@am__append_1 = test_elf test_xcoff_32 test_xcoff_64 \\\n+@NATIVE_TRUE@\ttest_pecoff test_unknown unittest unittest_alloc \\\n+@NATIVE_TRUE@\tbtest btest_alloc stest stest_alloc ztest \\\n+@NATIVE_TRUE@\tztest_alloc edtest edtest_alloc\n @HAVE_ZLIB_TRUE@@NATIVE_TRUE@am__append_2 = -lz\n @HAVE_ZLIB_TRUE@@NATIVE_TRUE@am__append_3 = -lz\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__append_4 = ttest ttest_alloc\n@@ -168,11 +169,18 @@ am__objects_1 = atomic.lo dwarf.lo fileline.lo posix.lo print.lo \\\n @NATIVE_TRUE@am_libbacktrace_alloc_la_OBJECTS = $(am__objects_1)\n libbacktrace_alloc_la_OBJECTS = $(am_libbacktrace_alloc_la_OBJECTS)\n @NATIVE_TRUE@am_libbacktrace_alloc_la_rpath =\n-@NATIVE_TRUE@am__EXEEXT_1 = unittest$(EXEEXT) unittest_alloc$(EXEEXT) \\\n-@NATIVE_TRUE@\tbtest$(EXEEXT) btest_alloc$(EXEEXT) \\\n-@NATIVE_TRUE@\tstest$(EXEEXT) stest_alloc$(EXEEXT) \\\n-@NATIVE_TRUE@\tztest$(EXEEXT) ztest_alloc$(EXEEXT) \\\n-@NATIVE_TRUE@\tedtest$(EXEEXT) edtest_alloc$(EXEEXT)\n+@NATIVE_TRUE@am_libbacktrace_noformat_la_OBJECTS = $(am__objects_1)\n+libbacktrace_noformat_la_OBJECTS =  \\\n+\t$(am_libbacktrace_noformat_la_OBJECTS)\n+@NATIVE_TRUE@am_libbacktrace_noformat_la_rpath =\n+@NATIVE_TRUE@am__EXEEXT_1 = test_elf$(EXEEXT) test_xcoff_32$(EXEEXT) \\\n+@NATIVE_TRUE@\ttest_xcoff_64$(EXEEXT) test_pecoff$(EXEEXT) \\\n+@NATIVE_TRUE@\ttest_unknown$(EXEEXT) unittest$(EXEEXT) \\\n+@NATIVE_TRUE@\tunittest_alloc$(EXEEXT) btest$(EXEEXT) \\\n+@NATIVE_TRUE@\tbtest_alloc$(EXEEXT) stest$(EXEEXT) \\\n+@NATIVE_TRUE@\tstest_alloc$(EXEEXT) ztest$(EXEEXT) \\\n+@NATIVE_TRUE@\tztest_alloc$(EXEEXT) edtest$(EXEEXT) \\\n+@NATIVE_TRUE@\tedtest_alloc$(EXEEXT)\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__EXEEXT_2 = ttest$(EXEEXT) \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@\tttest_alloc$(EXEEXT)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__EXEEXT_3 =  \\\n@@ -245,6 +253,30 @@ stest_OBJECTS = $(am_stest_OBJECTS)\n @NATIVE_TRUE@am_stest_alloc_OBJECTS = $(am__objects_6)\n stest_alloc_OBJECTS = $(am_stest_alloc_OBJECTS)\n @NATIVE_TRUE@stest_alloc_DEPENDENCIES = libbacktrace_alloc.la\n+@NATIVE_TRUE@am_test_elf_OBJECTS = test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_elf_OBJECTS = $(am_test_elf_OBJECTS)\n+@NATIVE_TRUE@test_elf_DEPENDENCIES = libbacktrace_noformat.la elf.lo\n+@NATIVE_TRUE@am_test_pecoff_OBJECTS = test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_pecoff_OBJECTS = $(am_test_pecoff_OBJECTS)\n+@NATIVE_TRUE@test_pecoff_DEPENDENCIES = libbacktrace_noformat.la \\\n+@NATIVE_TRUE@\tpecoff.lo\n+@NATIVE_TRUE@am_test_unknown_OBJECTS = test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_unknown_OBJECTS = $(am_test_unknown_OBJECTS)\n+@NATIVE_TRUE@test_unknown_DEPENDENCIES = libbacktrace_noformat.la \\\n+@NATIVE_TRUE@\tunknown.lo\n+@NATIVE_TRUE@am_test_xcoff_32_OBJECTS = test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_xcoff_32_OBJECTS = $(am_test_xcoff_32_OBJECTS)\n+@NATIVE_TRUE@test_xcoff_32_DEPENDENCIES = libbacktrace_noformat.la \\\n+@NATIVE_TRUE@\txcoff_32.lo\n+@NATIVE_TRUE@am_test_xcoff_64_OBJECTS = test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_xcoff_64_OBJECTS = $(am_test_xcoff_64_OBJECTS)\n+@NATIVE_TRUE@test_xcoff_64_DEPENDENCIES = libbacktrace_noformat.la \\\n+@NATIVE_TRUE@\txcoff_64.lo\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am_ttest_OBJECTS =  \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@\tttest-ttest.$(OBJEXT) \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@\tttest-testlib.$(OBJEXT)\n@@ -323,13 +355,17 @@ am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)\n am__v_CCLD_0 = @echo \"  CCLD    \" $@;\n am__v_CCLD_1 = \n SOURCES = $(libbacktrace_la_SOURCES) $(EXTRA_libbacktrace_la_SOURCES) \\\n-\t$(libbacktrace_alloc_la_SOURCES) $(btest_SOURCES) \\\n+\t$(libbacktrace_alloc_la_SOURCES) \\\n+\t$(libbacktrace_noformat_la_SOURCES) $(btest_SOURCES) \\\n \t$(btest_alloc_SOURCES) $(ctesta_SOURCES) \\\n \t$(ctesta_alloc_SOURCES) $(ctestg_SOURCES) \\\n \t$(ctestg_alloc_SOURCES) $(edtest_SOURCES) \\\n \t$(edtest_alloc_SOURCES) $(stest_SOURCES) \\\n-\t$(stest_alloc_SOURCES) $(ttest_SOURCES) $(ttest_alloc_SOURCES) \\\n-\t$(unittest_SOURCES) $(unittest_alloc_SOURCES) $(ztest_SOURCES) \\\n+\t$(stest_alloc_SOURCES) $(test_elf_SOURCES) \\\n+\t$(test_pecoff_SOURCES) $(test_unknown_SOURCES) \\\n+\t$(test_xcoff_32_SOURCES) $(test_xcoff_64_SOURCES) \\\n+\t$(ttest_SOURCES) $(ttest_alloc_SOURCES) $(unittest_SOURCES) \\\n+\t$(unittest_alloc_SOURCES) $(ztest_SOURCES) \\\n \t$(ztest_alloc_SOURCES)\n am__can_run_installinfo = \\\n   case $$AM_UPDATE_INFO_DIR in \\\n@@ -739,10 +775,24 @@ libbacktrace_la_LIBADD = \\\n \n libbacktrace_la_DEPENDENCIES = $(libbacktrace_la_LIBADD)\n TESTS = $(check_PROGRAMS) $(am__append_5)\n-@NATIVE_TRUE@check_LTLIBRARIES = libbacktrace_alloc.la\n+@NATIVE_TRUE@check_LTLIBRARIES = libbacktrace_alloc.la \\\n+@NATIVE_TRUE@\tlibbacktrace_noformat.la\n @NATIVE_TRUE@libbacktrace_alloc_la_SOURCES = $(libbacktrace_la_SOURCES)\n @NATIVE_TRUE@libbacktrace_alloc_la_LIBADD = $(BACKTRACE_FILE) $(FORMAT_FILE) read.lo alloc.lo\n @NATIVE_TRUE@libbacktrace_alloc_la_DEPENDENCIES = $(libbacktrace_alloc_la_LIBADD)\n+@NATIVE_TRUE@libbacktrace_noformat_la_SOURCES = $(libbacktrace_la_SOURCES)\n+@NATIVE_TRUE@libbacktrace_noformat_la_LIBADD = $(BACKTRACE_FILE) $(VIEW_FILE) $(ALLOC_FILE)\n+@NATIVE_TRUE@libbacktrace_noformat_la_DEPENDENCIES = $(libbacktrace_noformat_la_LIBADD)\n+@NATIVE_TRUE@test_elf_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_elf_LDADD = libbacktrace_noformat.la elf.lo\n+@NATIVE_TRUE@test_xcoff_32_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_xcoff_32_LDADD = libbacktrace_noformat.la xcoff_32.lo\n+@NATIVE_TRUE@test_xcoff_64_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_xcoff_64_LDADD = libbacktrace_noformat.la xcoff_64.lo\n+@NATIVE_TRUE@test_pecoff_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_pecoff_LDADD = libbacktrace_noformat.la pecoff.lo\n+@NATIVE_TRUE@test_unknown_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_unknown_LDADD = libbacktrace_noformat.la unknown.lo\n @NATIVE_TRUE@unittest_SOURCES = unittest.c testlib.c\n @NATIVE_TRUE@unittest_LDADD = libbacktrace.la\n @NATIVE_TRUE@unittest_alloc_SOURCES = $(unittest_SOURCES)\n@@ -895,6 +945,9 @@ libbacktrace.la: $(libbacktrace_la_OBJECTS) $(libbacktrace_la_DEPENDENCIES) $(EX\n libbacktrace_alloc.la: $(libbacktrace_alloc_la_OBJECTS) $(libbacktrace_alloc_la_DEPENDENCIES) $(EXTRA_libbacktrace_alloc_la_DEPENDENCIES) \n \t$(AM_V_CCLD)$(LINK) $(am_libbacktrace_alloc_la_rpath) $(libbacktrace_alloc_la_OBJECTS) $(libbacktrace_alloc_la_LIBADD) $(LIBS)\n \n+libbacktrace_noformat.la: $(libbacktrace_noformat_la_OBJECTS) $(libbacktrace_noformat_la_DEPENDENCIES) $(EXTRA_libbacktrace_noformat_la_DEPENDENCIES) \n+\t$(AM_V_CCLD)$(LINK) $(am_libbacktrace_noformat_la_rpath) $(libbacktrace_noformat_la_OBJECTS) $(libbacktrace_noformat_la_LIBADD) $(LIBS)\n+\n clean-checkPROGRAMS:\n \t@list='$(check_PROGRAMS)'; test -n \"$$list\" || exit 0; \\\n \techo \" rm -f\" $$list; \\\n@@ -944,6 +997,26 @@ stest_alloc$(EXEEXT): $(stest_alloc_OBJECTS) $(stest_alloc_DEPENDENCIES) $(EXTRA\n \t@rm -f stest_alloc$(EXEEXT)\n \t$(AM_V_CCLD)$(LINK) $(stest_alloc_OBJECTS) $(stest_alloc_LDADD) $(LIBS)\n \n+test_elf$(EXEEXT): $(test_elf_OBJECTS) $(test_elf_DEPENDENCIES) $(EXTRA_test_elf_DEPENDENCIES) \n+\t@rm -f test_elf$(EXEEXT)\n+\t$(AM_V_CCLD)$(LINK) $(test_elf_OBJECTS) $(test_elf_LDADD) $(LIBS)\n+\n+test_pecoff$(EXEEXT): $(test_pecoff_OBJECTS) $(test_pecoff_DEPENDENCIES) $(EXTRA_test_pecoff_DEPENDENCIES) \n+\t@rm -f test_pecoff$(EXEEXT)\n+\t$(AM_V_CCLD)$(LINK) $(test_pecoff_OBJECTS) $(test_pecoff_LDADD) $(LIBS)\n+\n+test_unknown$(EXEEXT): $(test_unknown_OBJECTS) $(test_unknown_DEPENDENCIES) $(EXTRA_test_unknown_DEPENDENCIES) \n+\t@rm -f test_unknown$(EXEEXT)\n+\t$(AM_V_CCLD)$(LINK) $(test_unknown_OBJECTS) $(test_unknown_LDADD) $(LIBS)\n+\n+test_xcoff_32$(EXEEXT): $(test_xcoff_32_OBJECTS) $(test_xcoff_32_DEPENDENCIES) $(EXTRA_test_xcoff_32_DEPENDENCIES) \n+\t@rm -f test_xcoff_32$(EXEEXT)\n+\t$(AM_V_CCLD)$(LINK) $(test_xcoff_32_OBJECTS) $(test_xcoff_32_LDADD) $(LIBS)\n+\n+test_xcoff_64$(EXEEXT): $(test_xcoff_64_OBJECTS) $(test_xcoff_64_DEPENDENCIES) $(EXTRA_test_xcoff_64_DEPENDENCIES) \n+\t@rm -f test_xcoff_64$(EXEEXT)\n+\t$(AM_V_CCLD)$(LINK) $(test_xcoff_64_OBJECTS) $(test_xcoff_64_LDADD) $(LIBS)\n+\n ttest$(EXEEXT): $(ttest_OBJECTS) $(ttest_DEPENDENCIES) $(EXTRA_ttest_DEPENDENCIES) \n \t@rm -f ttest$(EXEEXT)\n \t$(AM_V_CCLD)$(ttest_LINK) $(ttest_OBJECTS) $(ttest_LDADD) $(LIBS)\n@@ -1312,6 +1385,41 @@ recheck: all $(check_LTLIBRARIES) $(check_PROGRAMS)\n \t        am__force_recheck=am--force-recheck \\\n \t        TEST_LOGS=\"$$log_list\"; \\\n \texit $$?\n+test_elf.log: test_elf$(EXEEXT)\n+\t@p='test_elf$(EXEEXT)'; \\\n+\tb='test_elf'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+test_xcoff_32.log: test_xcoff_32$(EXEEXT)\n+\t@p='test_xcoff_32$(EXEEXT)'; \\\n+\tb='test_xcoff_32'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+test_xcoff_64.log: test_xcoff_64$(EXEEXT)\n+\t@p='test_xcoff_64$(EXEEXT)'; \\\n+\tb='test_xcoff_64'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+test_pecoff.log: test_pecoff$(EXEEXT)\n+\t@p='test_pecoff$(EXEEXT)'; \\\n+\tb='test_pecoff'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+test_unknown.log: test_unknown$(EXEEXT)\n+\t@p='test_unknown$(EXEEXT)'; \\\n+\tb='test_unknown'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n unittest.log: unittest$(EXEEXT)\n \t@p='unittest$(EXEEXT)'; \\\n \tb='unittest'; \\\n@@ -1580,6 +1688,13 @@ uninstall-am:\n .PRECIOUS: Makefile\n \n \n+@NATIVE_TRUE@xcoff_%.c: xcoff.c\n+@NATIVE_TRUE@\tSEARCH='#error \"Unknown BACKTRACE_XCOFF_SIZE\"'; \\\n+@NATIVE_TRUE@\tREPLACE='#undef BACKTRACE_XCOFF_SIZE\\n#define BACKTRACE_XCOFF_SIZE'; \\\n+@NATIVE_TRUE@\t$(SED) \"s/^$$SEARCH\\$$/$$REPLACE $*/\" \\\n+@NATIVE_TRUE@\t\t$(srcdir)/xcoff.c \\\n+@NATIVE_TRUE@\t\t> $@\n+\n @NATIVE_TRUE@edtest2_build.c: gen_edtest2_build; @true\n @NATIVE_TRUE@gen_edtest2_build: $(srcdir)/edtest2.c\n @NATIVE_TRUE@\tcat $(srcdir)/edtest2.c > tmp-edtest2_build.c"}, {"sha": "bb65b8c083ac9366401b55da89eb7cb9e0ff13dd", "filename": "libbacktrace/test_format.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/libbacktrace%2Ftest_format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187b9e1dc53da0a7db345b3c39fce7941e15f0f1/libbacktrace%2Ftest_format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Ftest_format.c?ref=187b9e1dc53da0a7db345b3c39fce7941e15f0f1", "patch": "@@ -0,0 +1,55 @@\n+/* test_format.c -- Test for libbacktrace library\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    (1) Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+    (2) Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in\n+    the documentation and/or other materials provided with the\n+    distribution.\n+\n+    (3) The name of the author may not be used to\n+    endorse or promote products derived from this software without\n+    specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.  */\n+\n+/* This program tests the externally visible interfaces of the\n+   libbacktrace library.  */\n+\n+#include <assert.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include \"filenames.h\"\n+\n+#include \"backtrace.h\"\n+#include \"backtrace-supported.h\"\n+\n+#include \"testlib.h\"\n+\n+int\n+main (int argc ATTRIBUTE_UNUSED, char **argv)\n+{\n+  state = backtrace_create_state (argv[0], BACKTRACE_SUPPORTS_THREADS,\n+\t\t\t\t  error_callback_create, NULL);\n+\n+  exit (failures ? EXIT_FAILURE : EXIT_SUCCESS);\n+}"}]}