{"sha": "a651f22233b5d950f4ba26d20c1c7b1d54b201c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY1MWYyMjIzM2I1ZDk1MGY0YmEyNmQyMGMxYzdiMWQ1NGIyMDFjMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-10-06T18:13:02Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-10-06T18:13:02Z"}, "message": "Use split_double to break apart CONST_DOUBLEs\n\nFrom-SVN: r12907", "tree": {"sha": "b5a61d56db0294506331e90cf74f88fc9a46a6cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5a61d56db0294506331e90cf74f88fc9a46a6cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a651f22233b5d950f4ba26d20c1c7b1d54b201c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a651f22233b5d950f4ba26d20c1c7b1d54b201c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a651f22233b5d950f4ba26d20c1c7b1d54b201c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a651f22233b5d950f4ba26d20c1c7b1d54b201c0/comments", "author": null, "committer": null, "parents": [{"sha": "f508963359e6f3c084f2288e9359f48d4c7970bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f508963359e6f3c084f2288e9359f48d4c7970bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f508963359e6f3c084f2288e9359f48d4c7970bc"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "e80f66e686a55811c7e0afd1ac40ca6ac9524234", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a651f22233b5d950f4ba26d20c1c7b1d54b201c0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a651f22233b5d950f4ba26d20c1c7b1d54b201c0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a651f22233b5d950f4ba26d20c1c7b1d54b201c0", "patch": "@@ -5583,8 +5583,7 @@\n {\n   operands[2] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n-  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n-  operands[5] = GEN_INT (CONST_DOUBLE_LOW  (operands[1]));\n+  split_double (operands[1], &operands[4], &operands[5]);\n }\")\n \n (define_split\n@@ -5596,11 +5595,16 @@\n    (set (match_dup 2) (ior:SI (match_dup 2) (match_dup 6)))]\n   \"\n {\n-  HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n-  HOST_WIDE_INT low  = CONST_DOUBLE_LOW  (operands[1]);\n+  rtx high_rtx, low_rtx;\n+  HOST_WIDE_INT high;\n+  HOST_WIDE_INT low;\n   rtx high_reg = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   rtx low_reg  = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n \n+  split_double (operands[1], &high_rtx, &low_rtx);\n+  high = INTVAL (high_rtx);\n+  low  = INTVAL (low_rtx);\n+\n   if (((unsigned HOST_WIDE_INT) (low + 0x8000) < 0x10000)\n       || (low & 0xffff) == 0)\n     {\n@@ -5630,8 +5634,13 @@\n    (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 7)))]\n   \"\n {\n-  HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n-  HOST_WIDE_INT low  = CONST_DOUBLE_LOW  (operands[1]);\n+  rtx high_rtx, low_rtx;\n+  HOST_WIDE_INT high;\n+  HOST_WIDE_INT low;\n+\n+  split_double (operands[1], &high_rtx, &low_rtx);\n+  high = INTVAL (high_rtx);\n+  low  = INTVAL (low_rtx);\n \n   operands[2] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n@@ -5793,8 +5802,10 @@\n \n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n \t{\n-\t  low = CONST_DOUBLE_LOW (operands[1]);\n-\t  high = CONST_DOUBLE_HIGH (operands[1]);\n+\t  rtx high_rtx, low_rtx;\n+\t  split_double (operands[1], &high_rtx, &low_rtx);\n+\t  high = INTVAL (high_rtx);\n+\t  low  = INTVAL (low_rtx);\n \t}\n       else\n #if HOST_BITS_PER_WIDE_INT == 32\n@@ -5932,8 +5943,7 @@\n {\n   operands[2] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n-  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n-  operands[5] = GEN_INT (CONST_DOUBLE_LOW  (operands[1]));\n+  split_double (operands[1], &operands[4], &operands[5]);\n }\")\n \n (define_split\n@@ -5945,11 +5955,16 @@\n    (set (match_dup 2) (ior:SI (match_dup 2) (match_dup 6)))]\n   \"\n {\n-  HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n-  HOST_WIDE_INT low  = CONST_DOUBLE_LOW  (operands[1]);\n+  rtx high_rtx, low_rtx;\n+  HOST_WIDE_INT high;\n+  HOST_WIDE_INT low;\n   rtx high_reg = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   rtx low_reg  = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n \n+  split_double (operands[1], &high_rtx, &low_rtx);\n+  high = INTVAL (high_rtx);\n+  low  = INTVAL (low_rtx);\n+\n   if (((unsigned HOST_WIDE_INT) (low + 0x8000) < 0x10000)\n       || (low & 0xffff) == 0)\n     {\n@@ -5979,8 +5994,13 @@\n    (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 7)))]\n   \"\n {\n-  HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n-  HOST_WIDE_INT low  = CONST_DOUBLE_LOW  (operands[1]);\n+  rtx high_rtx, low_rtx;\n+  HOST_WIDE_INT high;\n+  HOST_WIDE_INT low;\n+\n+  split_double (operands[1], &high_rtx, &low_rtx);\n+  high = INTVAL (high_rtx);\n+  low  = INTVAL (low_rtx);\n \n   operands[2] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n@@ -6042,8 +6062,10 @@\n \n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n-      low = CONST_DOUBLE_LOW (operands[1]);\n-      high = CONST_DOUBLE_HIGH (operands[1]);\n+      rtx high_rtx, low_rtx;\n+      split_double (operands[1], &high_rtx, &low_rtx);\n+      high = INTVAL (high_rtx);\n+      low  = INTVAL (low_rtx);\n     }\n   else\n #if HOST_BITS_PER_WIDE_INT == 32"}]}