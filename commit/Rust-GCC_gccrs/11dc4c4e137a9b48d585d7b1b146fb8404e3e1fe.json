{"sha": "11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFkYzRjNGUxMzdhOWI0OGQ1ODVkN2IxYjE0NmZiODQwNGUzZTFmZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-26T21:35:56Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-29T21:35:56Z"}, "message": "c++: Implement CWG 625: Use of auto as template-arg [PR97479]\n\nThis patch implements CWG 625 which prohibits using auto in a template\nargument.  A few tests used this construction.  Since this usage was\nallowed by the Concepts TS, we only give an error in C++20.\n\ngcc/cp/ChangeLog:\n\n\tDR 625\n\tPR c++/97479\n\t* parser.c (cp_parser_type_id_1): Reject using auto as\n\ta template-argument in C++20.\n\ngcc/testsuite/ChangeLog:\n\n\tDR 625\n\tPR c++/97479\n\t* g++.dg/cpp0x/auto3.C: Update dg-error.\n\t* g++.dg/cpp0x/auto9.C: Likewise.\n\t* g++.dg/cpp2a/concepts-pr84979-2.C: Likewise.\n\t* g++.dg/cpp2a/concepts-pr84979-3.C: Likewise.\n\t* g++.dg/cpp2a/concepts-pr84979.C: Likewise.\n\t* g++.dg/DRs/dr625.C: New test.", "tree": {"sha": "f38a813180bed2fdf59ebbb03e4dbd9b6cdd1761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f38a813180bed2fdf59ebbb03e4dbd9b6cdd1761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52215bb3ec6e1bbf44729574ab34ea478f3066b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52215bb3ec6e1bbf44729574ab34ea478f3066b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52215bb3ec6e1bbf44729574ab34ea478f3066b1"}], "stats": {"total": 63, "additions": 46, "deletions": 17}, "files": [{"sha": "bd8c241dd822407c86a3596d61204dc3220c330d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "patch": "@@ -22419,9 +22419,20 @@ cp_parser_type_id_1 (cp_parser *parser, cp_parser_flags flags,\n   if (!cp_parser_parse_definitely (parser))\n     abstract_declarator = NULL;\n \n+  bool auto_typeid_ok = false;\n+  /* The concepts TS allows 'auto' as a type-id.  */\n+  if (flag_concepts_ts)\n+    auto_typeid_ok = !parser->in_type_id_in_expr_p;\n+  /* DR 625 prohibits use of auto as a template-argument.  We allow 'auto'\n+     outside the template-argument-list context here only for the sake of\n+     diagnostic: grokdeclarator then can emit a better error message for\n+     e.g. using T = auto.  */\n+  else if (flag_concepts)\n+    auto_typeid_ok = (!parser->in_type_id_in_expr_p\n+\t\t      && !parser->in_template_argument_list_p);\n+\n   if (type_specifier_seq.type\n-      /* The concepts TS allows 'auto' as a type-id.  */\n-      && (!flag_concepts || parser->in_type_id_in_expr_p)\n+      && !auto_typeid_ok\n       /* None of the valid uses of 'auto' in C++14 involve the type-id\n \t nonterminal, but it is valid in a trailing-return-type.  */\n       && !(cxx_dialect >= cxx14 && is_trailing_return))\n@@ -22448,6 +22459,9 @@ cp_parser_type_id_1 (cp_parser *parser, cp_parser_flags flags,\n \t\tinform (DECL_SOURCE_LOCATION (tmpl), \"%qD declared here\",\n \t\t\ttmpl);\n \t      }\n+\t    else if (parser->in_template_argument_list_p)\n+\t      error_at (loc, \"%qT not permitted in template argument\",\n+\t\t\tauto_node);\n \t    else\n \t      error_at (loc, \"invalid use of %qT\", auto_node);\n \t    return error_mark_node;"}, {"sha": "ce30a9258e6b120d23650d015533adf3f99f4e23", "filename": "gcc/testsuite/g++.dg/DRs/dr625.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr625.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr625.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr625.C?ref=11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "patch": "@@ -0,0 +1,15 @@\n+// DR 625 - Use of auto as a template-argument\n+// PR c++/97479\n+// { dg-do compile { target c++14 } }\n+\n+template<typename>\n+struct A { };\n+\n+void f(int);\n+\n+int main()\n+{\n+  A<decltype(auto)> x = A<void>(); // { dg-error \"not permitted|invalid|cannot convert\" }\n+  A<auto> a = A<void>(); // { dg-error \"not permitted|invalid|cannot convert\" }\n+  void (*p)(auto); // { dg-error \"parameter\" }\n+}"}, {"sha": "2cd0520023d712d2beeda39a693f67d1cdaf3305", "filename": "gcc/testsuite/g++.dg/cpp0x/auto3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C?ref=11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "patch": "@@ -17,7 +17,7 @@ struct A { };\n \n A<int> A1;\n // CWG issue 625\n-A<auto> A2 = A1;\t\t// { dg-error \"\" \"\" { target { ! concepts } } }\n+A<auto> A2 = A1;\t\t// { dg-error \"\" }\n \n auto foo() { }\t\t\t// { dg-error \"auto\" \"\" { target { ! c++14 } } }\n "}, {"sha": "0e80c30ef74fdfe655e25952e8a982569e17074e", "filename": "gcc/testsuite/g++.dg/cpp0x/auto9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C?ref=11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "patch": "@@ -114,7 +114,7 @@ badthrow2 () throw (auto &)\t\t\t// { dg-error \"invalid use of|expected\" }\n template <auto V = 4> struct G {};\t\t// { dg-error \"11:parameter\" \"\" { target { ! c++17 } } }\n \n template <typename T> struct H { H (); ~H (); };\n-H<auto> h;\t\t\t\t\t// { dg-error \"invalid|initializer\" }\n+H<auto> h;\t\t\t\t\t// { dg-error \"invalid|initializer|not permitted in template argument\" }\n \n void qq (auto);\t\t       // { dg-error \"auto\" \"\" { target { ! concepts } } }\n void qr (auto*);\t       // { dg-error \"auto\" \"\" { target { ! concepts } } }"}, {"sha": "290aaf83819cec9cc42bb21a32e73a370f21db61", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84979-2.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C?ref=11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "patch": "@@ -4,9 +4,9 @@\n template <typename T>\n void foo1(T& t) {\n   typename T::template C<void> tcv = t;\n-  typename T::template C<auto> u = tcv;\n-  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete\" }\n-  (typename T::template D<auto> (t)); // { dg-error \"invalid\" }\n+  typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n+  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n+  (typename T::template D<auto> (t)); // { dg-error \"invalid|not permitted\" }\n }\n \n struct T1 {\n@@ -22,9 +22,9 @@ struct T1 {\n template <typename T>\n void foo2(T& t) {\n   typename T::template C<void> tcv = t;\n-  typename T::template C<auto> u = tcv;\n-  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete\" }\n-  T::template D<auto> (t); // { dg-error \"invalid\" }\n+  typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n+  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n+  T::template D<auto> (t); // { dg-error \"invalid|not permitted\" }\n }\n \n struct T2 {"}, {"sha": "d612327b9ae5d7c96563910c5afca5455d5934d0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84979-3.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C?ref=11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "patch": "@@ -8,9 +8,9 @@\n template <typename T>\n void foo1(T& t) {\n   typename T::template C<void> tcv = t;\n-  typename T::template C<auto> u = tcv;\n-  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete\" }\n-  (typename T::template D<auto> (t)); // { dg-error \"invalid\" }\n+  typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n+  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n+  (typename T::template D<auto> (t)); // { dg-error \"invalid|not permitted\" }\n }\n \n struct T1 {\n@@ -26,9 +26,9 @@ struct T1 {\n template <typename T>\n void foo2(T& t) {\n   typename T::template C<void> tcv = t;\n-  typename T::template C<auto> u = tcv;\n-  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete\" }\n-  T::template D<auto> (t); // { dg-error \"yields a type\" }\n+  typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n+  T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n+  T::template D<auto> (t); // { dg-error \"yields a type|not permitted\" }\n }\n \n struct T2 {"}, {"sha": "81555eb455444de80c4a737d1e8f0f6ea38d86e0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84979.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979.C?ref=11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "patch": "@@ -5,5 +5,5 @@ template<typename> void foo() {}\n \n void bar()\n {\n-  foo<auto>(); // { dg-error \"invalid\" }\n+  foo<auto>(); // { dg-error \"not permitted|invalid|no matching function\" }\n }"}]}