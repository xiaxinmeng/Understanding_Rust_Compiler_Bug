{"sha": "f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2NjQ3YzJlYzhjNTNkNDBkM2YwMTFkMzVhYjJhMzY5MWVkYTYyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T09:54:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T09:54:42Z"}, "message": "[multiple changes]\n\n2016-04-21  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_pakd.adb, sem_ch13.adb: Minor reformatting.\n\n2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_dbug.adb, exp_dbug.ads (Qualify_Entity_Name): Add suffixes to\n\tdisambiguate local variables that may be hidden from inner visibility\n\tby nested block declarations or loop variables.\n\nFrom-SVN: r235327", "tree": {"sha": "a525bd07154a8cea385ae9cc008414a7183f1f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a525bd07154a8cea385ae9cc008414a7183f1f5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/comments", "author": null, "committer": null, "parents": [{"sha": "22a4f9d54db67a17191dfad5dfb635465489be8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a4f9d54db67a17191dfad5dfb635465489be8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a4f9d54db67a17191dfad5dfb635465489be8c"}], "stats": {"total": 143, "additions": 98, "deletions": 45}, "files": [{"sha": "602116bfbebaf40b7d3c705beca6e7dfba0fd5a8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "patch": "@@ -1,3 +1,13 @@\n+2016-04-21  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_pakd.adb, sem_ch13.adb: Minor reformatting.\n+\n+2016-04-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_dbug.adb, exp_dbug.ads (Qualify_Entity_Name): Add suffixes to\n+\tdisambiguate local variables that may be hidden from inner visibility\n+\tby nested block declarations or loop variables.\n+\n 2016-04-21  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* s-soflin.adb: Initialize the Stack_Limit global variable."}, {"sha": "df0543d4cb06fdbd66d0f8ccac43a631c617cf02", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "patch": "@@ -1458,6 +1458,35 @@ package body Exp_Dbug is\n \n       else\n          Set_Has_Qualified_Name (Ent);\n+\n+         --  If a variable is hidden by a subsequent loop variable, qualify\n+         --  the name of that loop variable to prevent visibility issues when\n+         --  translating to C. Note that gdb probably never handled properly\n+         --  this accidental hiding, given that loops are not scopes at\n+         --  runtime. We also qualify a name if it hides an outer homonym,\n+         --  and both are declared in blocks.\n+\n+         if Modify_Tree_For_C and then Ekind (Ent) =  E_Variable then\n+            if Present (Hiding_Loop_Variable (Ent)) then\n+               declare\n+                  Var : constant Entity_Id := Hiding_Loop_Variable (Ent);\n+\n+               begin\n+                  Set_Entity_Name (Var);\n+                  Add_Str_To_Name_Buffer (\"L\");\n+                  Set_Chars (Var, Name_Enter);\n+               end;\n+\n+            elsif Present (Homonym (Ent))\n+              and then Ekind (Scope (Ent)) = E_Block\n+              and then Ekind (Scope (Homonym (Ent))) = E_Block\n+            then\n+               Set_Entity_Name (Ent);\n+               Add_Str_To_Name_Buffer (\"B\");\n+               Set_Chars (Ent, Name_Enter);\n+            end if;\n+         end if;\n+\n          return;\n       end if;\n "}, {"sha": "b160caf62a9cda2842178629f7313bda35ebda6f", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -435,6 +435,21 @@ package Exp_Dbug is\n    --  generating code, since the necessary information for computing the\n    --  proper external name is not available in this case.\n \n+   -------------------------------------\n+   -- Encoding for translation into C --\n+   -------------------------------------\n+\n+   --  In Modify_Tree_For_C mode we must add encodings to dismabiguate cases\n+   --  where Ada block structure cannot be directly translated. These cases\n+   --  are as follows:\n+\n+   --    a)  A loop variable may hide a homonym in an enclosing block\n+   --    b)  A block-local variable may hide a homonym in an enclosing block\n+\n+   --  In C these constructs are not scopes and we must distinguish the names\n+   --  explicitly. In the first case we create a qualified name with the suffix\n+   --  'L', in the second case with a suffix 'B'.\n+\n    --------------------------------------------\n    -- Subprograms for Handling Qualification --\n    --------------------------------------------"}, {"sha": "b4f0f0abe9658a4a1e1a75c8f332e5e7d069bc5c", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 41, "deletions": 42, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "patch": "@@ -81,12 +81,6 @@ package body Exp_Pakd is\n    -- Local Subprograms --\n    -----------------------\n \n-   function Compute_Number_Components\n-      (N   : Node_Id;\n-       Typ : Entity_Id) return Node_Id;\n-   --  Build an expression that multiplies the length of the dimensions of the\n-   --  array, used to control array equality checks.\n-\n    procedure Compute_Linear_Subscript\n      (Atyp   : Entity_Id;\n       N      : Node_Id;\n@@ -96,6 +90,12 @@ package body Exp_Pakd is\n    --  Standard.Integer representing the zero-based linear subscript value.\n    --  This expression includes any required range checks.\n \n+   function Compute_Number_Components\n+      (N   : Node_Id;\n+       Typ : Entity_Id) return Node_Id;\n+   --  Build an expression that multiplies the length of the dimensions of the\n+   --  array, used to control array equality checks.\n+\n    procedure Convert_To_PAT_Type (Aexp : Node_Id);\n    --  Given an expression of a packed array type, builds a corresponding\n    --  expression whose type is the implementation type used to represent\n@@ -266,38 +266,6 @@ package body Exp_Pakd is\n       return Adjusted;\n    end Revert_Storage_Order;\n \n-   -------------------------------\n-   -- Compute_Number_Components --\n-   -------------------------------\n-\n-   function Compute_Number_Components\n-      (N   : Node_Id;\n-       Typ : Entity_Id) return Node_Id\n-   is\n-      Loc      : constant Source_Ptr := Sloc (N);\n-      Len_Expr : Node_Id;\n-\n-   begin\n-      Len_Expr :=\n-        Make_Attribute_Reference (Loc,\n-          Attribute_Name => Name_Length,\n-          Prefix         => New_Occurrence_Of (Typ, Loc),\n-          Expressions    => New_List (Make_Integer_Literal (Loc, 1)));\n-\n-      for J in 2 .. Number_Dimensions (Typ) loop\n-         Len_Expr :=\n-           Make_Op_Multiply (Loc,\n-             Left_Opnd  => Len_Expr,\n-             Right_Opnd =>\n-               Make_Attribute_Reference (Loc,\n-                Attribute_Name => Name_Length,\n-                Prefix         => New_Occurrence_Of (Typ, Loc),\n-                Expressions    => New_List (Make_Integer_Literal (Loc, J))));\n-      end loop;\n-\n-      return Len_Expr;\n-   end Compute_Number_Components;\n-\n    ------------------------------\n    -- Compute_Linear_Subscript --\n    ------------------------------\n@@ -434,6 +402,38 @@ package body Exp_Pakd is\n       end loop;\n    end Compute_Linear_Subscript;\n \n+   -------------------------------\n+   -- Compute_Number_Components --\n+   -------------------------------\n+\n+   function Compute_Number_Components\n+      (N   : Node_Id;\n+       Typ : Entity_Id) return Node_Id\n+   is\n+      Loc      : constant Source_Ptr := Sloc (N);\n+      Len_Expr : Node_Id;\n+\n+   begin\n+      Len_Expr :=\n+        Make_Attribute_Reference (Loc,\n+          Attribute_Name => Name_Length,\n+          Prefix         => New_Occurrence_Of (Typ, Loc),\n+          Expressions    => New_List (Make_Integer_Literal (Loc, 1)));\n+\n+      for J in 2 .. Number_Dimensions (Typ) loop\n+         Len_Expr :=\n+           Make_Op_Multiply (Loc,\n+             Left_Opnd  => Len_Expr,\n+             Right_Opnd =>\n+               Make_Attribute_Reference (Loc,\n+                Attribute_Name => Name_Length,\n+                Prefix         => New_Occurrence_Of (Typ, Loc),\n+                Expressions    => New_List (Make_Integer_Literal (Loc, J))));\n+      end loop;\n+\n+      return Len_Expr;\n+   end Compute_Number_Components;\n+\n    -------------------------\n    -- Convert_To_PAT_Type --\n    -------------------------\n@@ -1882,14 +1882,13 @@ package body Exp_Pakd is\n \n       LLexpr :=\n         Make_Op_Multiply (Loc,\n-          Left_Opnd => Compute_Number_Components (N, Ltyp),\n+          Left_Opnd  => Compute_Number_Components (N, Ltyp),\n           Right_Opnd => Make_Integer_Literal (Loc, Component_Size (Ltyp)));\n \n       RLexpr :=\n         Make_Op_Multiply (Loc,\n-          Left_Opnd => Compute_Number_Components (N, Rtyp),\n-          Right_Opnd =>\n-            Make_Integer_Literal (Loc, Component_Size (Rtyp)));\n+          Left_Opnd  => Compute_Number_Components (N, Rtyp),\n+          Right_Opnd => Make_Integer_Literal (Loc, Component_Size (Rtyp)));\n \n       --  For the modular case, we transform the comparison to:\n "}, {"sha": "7a28bef3b353d9029d762bddfc7cef4dfe0194ca", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76647c2ec8c53d40d3f011d35ab2a3691eda62c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f76647c2ec8c53d40d3f011d35ab2a3691eda62c", "patch": "@@ -8646,8 +8646,8 @@ package body Sem_Ch13 is\n             --  function at this point.\n \n             elsif Nkind (Ritem) = N_Aspect_Specification\n-               and then Present (Aspect_Rep_Item (Ritem))\n-               and then Scope (Typ) /= Current_Scope\n+              and then Present (Aspect_Rep_Item (Ritem))\n+              and then Scope (Typ) /= Current_Scope\n             then\n                declare\n                   Prag : constant Node_Id := Aspect_Rep_Item (Ritem);"}]}