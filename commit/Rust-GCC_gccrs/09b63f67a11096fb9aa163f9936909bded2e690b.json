{"sha": "09b63f67a11096fb9aa163f9936909bded2e690b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliNjNmNjdhMTEwOTZmYjlhYTE2M2Y5OTM2OTA5YmRlZDJlNjkwYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-06T13:56:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-06T13:56:35Z"}, "message": "re PR tree-optimization/80334 (Segfault when taking address of copy of unaligned struct)\n\n2017-04-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80334\n\t* tree-ssa-loop-ivopts.c (rewrite_use_address): Properly\n\tpreserve alignment of accesses.\n\n\t* g++.dg/torture/pr80334.C: New testcase.\n\nFrom-SVN: r246731", "tree": {"sha": "da3f3563b3e45068a62272cac655c0a59901f435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da3f3563b3e45068a62272cac655c0a59901f435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09b63f67a11096fb9aa163f9936909bded2e690b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b63f67a11096fb9aa163f9936909bded2e690b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09b63f67a11096fb9aa163f9936909bded2e690b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b63f67a11096fb9aa163f9936909bded2e690b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9f8c5af8bc43681764923379dc465b62b56877a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f8c5af8bc43681764923379dc465b62b56877a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f8c5af8bc43681764923379dc465b62b56877a"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "d4f0c937d44a63bc6f598d0b245f4547e647dae0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b63f67a11096fb9aa163f9936909bded2e690b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b63f67a11096fb9aa163f9936909bded2e690b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09b63f67a11096fb9aa163f9936909bded2e690b", "patch": "@@ -1,3 +1,9 @@\n+2017-04-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80334\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_address): Properly\n+\tpreserve alignment of accesses.\n+\n 2017-04-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80262"}, {"sha": "e5b327469e8c9ed0d7c74edb3cfd700710462658", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b63f67a11096fb9aa163f9936909bded2e690b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b63f67a11096fb9aa163f9936909bded2e690b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09b63f67a11096fb9aa163f9936909bded2e690b", "patch": "@@ -1,3 +1,8 @@\n+2017-04-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80334\n+\t* g++.dg/torture/pr80334.C: New testcase.\n+\n 2017-04-06  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/80166"}, {"sha": "de50c463535c30ef556004aeace6389335bf65f8", "filename": "gcc/testsuite/g++.dg/torture/pr80334.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b63f67a11096fb9aa163f9936909bded2e690b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80334.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b63f67a11096fb9aa163f9936909bded2e690b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80334.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80334.C?ref=09b63f67a11096fb9aa163f9936909bded2e690b", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do run }\n+\n+struct A { alignas(16) char c; };\n+struct B { A unpacked; char d; } __attribute__((packed));\n+\n+char x;\n+\n+int\n+main()\n+{\n+  alignas(16) B b[3];\n+  for (int i = 0; i < 3; i++) b[i].unpacked.c = 'a' + i;\n+  for (int i = 0; i < 3; i++)\n+    {\n+      auto a = new A(b[i].unpacked);\n+      x = a->c;\n+    }\n+}"}, {"sha": "d5bd0362f25ad31d8907de186e77f16e7e3d7cc9", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b63f67a11096fb9aa163f9936909bded2e690b/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b63f67a11096fb9aa163f9936909bded2e690b/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=09b63f67a11096fb9aa163f9936909bded2e690b", "patch": "@@ -7396,7 +7396,11 @@ rewrite_use_address (struct ivopts_data *data,\n     base_hint = var_at_stmt (data->current_loop, cand, use->stmt);\n \n   iv = var_at_stmt (data->current_loop, cand, use->stmt);\n-  ref = create_mem_ref (&bsi, TREE_TYPE (*use->op_p), &aff,\n+  tree type = TREE_TYPE (*use->op_p);\n+  unsigned int align = get_object_alignment (*use->op_p);\n+  if (align != TYPE_ALIGN (type))\n+    type = build_aligned_type (type, align);\n+  ref = create_mem_ref (&bsi, type, &aff,\n \t\t\treference_alias_ptr_type (*use->op_p),\n \t\t\tiv, base_hint, data->speed);\n   copy_ref_info (ref, *use->op_p);"}]}