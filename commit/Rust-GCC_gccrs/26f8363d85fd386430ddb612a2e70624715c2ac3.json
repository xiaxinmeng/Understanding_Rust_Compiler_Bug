{"sha": "26f8363d85fd386430ddb612a2e70624715c2ac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmODM2M2Q4NWZkMzg2NDMwZGRiNjEyYTJlNzA2MjQ3MTVjMmFjMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-07-05T18:03:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-07-05T18:03:05Z"}, "message": "PR c++/67184 (again)\n\n/cp\n2019-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/67184 (again)\n\tPR c++/69445\n\t* call.c (build_over_call): Devirtualize user-defined operators\n\tcoming from a base too.\n\t(build_new_method_call_1): Do not devirtualize here.\n\n/testsuite\n2019-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/67184 (again)\n\tPR c++/69445\n\t* g++.dg/other/final4.C: New.\n\nFrom-SVN: r273147", "tree": {"sha": "e952ca4b13bc05867824025fd1d3b8a58c1c2047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e952ca4b13bc05867824025fd1d3b8a58c1c2047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f8363d85fd386430ddb612a2e70624715c2ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f8363d85fd386430ddb612a2e70624715c2ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f8363d85fd386430ddb612a2e70624715c2ac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f8363d85fd386430ddb612a2e70624715c2ac3/comments", "author": null, "committer": null, "parents": [{"sha": "131138d51d22ea58e95a8f21e75f67aab7881854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131138d51d22ea58e95a8f21e75f67aab7881854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131138d51d22ea58e95a8f21e75f67aab7881854"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "05e455527afe95a0531fda3016a043c34495831f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f8363d85fd386430ddb612a2e70624715c2ac3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f8363d85fd386430ddb612a2e70624715c2ac3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=26f8363d85fd386430ddb612a2e70624715c2ac3", "patch": "@@ -1,7 +1,16 @@\n+2019-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/67184 (again)\n+\tPR c++/69445\n+\t* call.c (build_over_call): Devirtualize user-defined operators\n+\tcoming from a base too.\n+\t(build_new_method_call_1): Do not devirtualize here.\n+\n 2019-07-04  Marek Polacek  <polacek@redhat.com>\n \n \tDR 1813\n-\tPR c++/83374 - __is_standard_layout wrong for a class with repeated bases.\n+\tPR c++/83374 - __is_standard_layout wrong for a class with repeated\n+\tbases.\n \t* class.c (check_bases): Set CLASSTYPE_NON_STD_LAYOUT for a class if\n \tCLASSTYPE_REPEATED_BASE_P is true.\n "}, {"sha": "90116f4995747bbe2e4a34c3eb663c7e2e508613", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f8363d85fd386430ddb612a2e70624715c2ac3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f8363d85fd386430ddb612a2e70624715c2ac3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=26f8363d85fd386430ddb612a2e70624715c2ac3", "patch": "@@ -8241,10 +8241,17 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t    return error_mark_node;\n \t}\n \n-      /* See if the function member or the whole class type is declared\n-\t final and the call can be devirtualized.  */\n+      /* Optimize away vtable lookup if we know that this\n+\t function can't be overridden.  We need to check if\n+\t the context and the type where we found fn are the same,\n+\t actually FN might be defined in a different class\n+\t type because of a using-declaration. In this case, we\n+\t do not want to perform a non-virtual call.  Note that\n+\t resolves_to_fixed_type_p checks CLASSTYPE_FINAL too.  */\n       if (DECL_FINAL_P (fn)\n-\t  || CLASSTYPE_FINAL (TYPE_METHOD_BASETYPE (TREE_TYPE (fn))))\n+\t  || (resolves_to_fixed_type_p (arg, 0)\n+\t      && same_type_ignoring_top_level_qualifiers_p\n+\t      (DECL_CONTEXT (fn), BINFO_TYPE (cand->conversion_path)))) \n \tflags |= LOOKUP_NONVIRTUAL;\n \n       /* [class.mfct.nonstatic]: If a nonstatic member function of a class\n@@ -9845,17 +9852,6 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \n \t  if (call != error_mark_node)\n \t    {\n-\t      /* Optimize away vtable lookup if we know that this\n-\t\t function can't be overridden.  We need to check if\n-\t\t the context and the type where we found fn are the same,\n-\t\t actually FN might be defined in a different class\n-\t\t type because of a using-declaration. In this case, we\n-\t\t do not want to perform a non-virtual call.  */\n-\t      if (DECL_VINDEX (fn) && ! (flags & LOOKUP_NONVIRTUAL)\n-\t\t  && same_type_ignoring_top_level_qualifiers_p\n-\t\t  (DECL_CONTEXT (fn), BINFO_TYPE (binfo))\n-\t\t  && resolves_to_fixed_type_p (instance, 0))\n-\t\tflags |= LOOKUP_NONVIRTUAL;\n               if (explicit_targs)\n                 flags |= LOOKUP_EXPLICIT_TMPL_ARGS;\n \t      /* Now we know what function is being called.  */"}, {"sha": "33645b1f0538bf955fe85f3a40b31ab3a17cc260", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f8363d85fd386430ddb612a2e70624715c2ac3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f8363d85fd386430ddb612a2e70624715c2ac3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26f8363d85fd386430ddb612a2e70624715c2ac3", "patch": "@@ -1,7 +1,14 @@\n+2019-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/67184 (again)\n+\tPR c++/69445\n+\t* g++.dg/other/final4.C: New.\n+\n 2019-07-04  Marek Polacek  <polacek@redhat.com>\n \n \tDR 1813\n-\tPR c++/83374 - __is_standard_layout wrong for a class with repeated bases.\n+\tPR c++/83374 - __is_standard_layout wrong for a class with repeated\n+\tbases.\n \t* g++.dg/ext/is_std_layout3.C: New test.\n \t* g++.dg/ext/is_std_layout4.C: New test.\n "}, {"sha": "867ef3830e717a0cbbea59d6f2d40dca36913002", "filename": "gcc/testsuite/g++.dg/other/final4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f8363d85fd386430ddb612a2e70624715c2ac3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f8363d85fd386430ddb612a2e70624715c2ac3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal4.C?ref=26f8363d85fd386430ddb612a2e70624715c2ac3", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/67184\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fdump-tree-original\"  }\n+\n+struct B\n+{\n+  virtual void operator()();\n+  virtual operator int();\n+  virtual int operator++();\n+};\n+\n+struct D final : B { };\n+\n+void foo(D& d) { d(); int t = d; ++d; }\n+\n+// { dg-final { scan-tree-dump-times \"OBJ_TYPE_REF\" 0 \"original\" } }"}]}