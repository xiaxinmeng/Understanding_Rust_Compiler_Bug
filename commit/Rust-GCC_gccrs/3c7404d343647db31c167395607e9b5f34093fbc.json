{"sha": "3c7404d343647db31c167395607e9b5f34093fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3NDA0ZDM0MzY0N2RiMzFjMTY3Mzk1NjA3ZTliNWYzNDA5M2ZiYw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2003-10-17T11:44:33Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2003-10-17T11:44:33Z"}, "message": "config.gcc (mips-sgi-irix6*o32): Only enable use_collect2 without gas.\n\n\t* config.gcc (mips-sgi-irix6*o32): Only enable use_collect2\n\twithout gas.\n\t(mips-sgi-irix6*): Likewise.\n\n\t* config/mips/iris6gas.h: New file.\n\t* gcc/config.gcc (mips-sgi-irix6*): Use it.\n\n\t* config/mips/mips.h (TARGET_IRIX): Provide default.\n\t(TARGET_IRIX5): Likewise.\n\t(TARGET_SGI_O32_AS): Likewise.\n\t* config/mips/iris5.h (TARGET_IRIX): Redefine as 1.\n\t(TARGET_IRIX5): Likewise.\n\t* config/mips/iris6.h (TARGET_IRIX6): Remove.\n\t(TARGET_IRIX5): Redefine as 0.\n\n\t* config/mips/mips.c (mips_output_external): Test for IRIX 6 O32\n\tlinker workaround with TARGET_IRIX and mips_abi instead of\n\tASM_OUTPUT_UNDEF_FUNCTION.\n\t(mips_file_end): Inline old ASM_OUTPUT_UNDEF_FUNCTION definition,\n\ttesting TARGET_IRIX and mips_abi explicitly.\n\t* config/mips/iris5.h (ASM_OUTPUT_UNDEF_FUNCTION): Remove.\n\t* config/mips/iris6.h (ASM_OUTPUT_UNDEF_FUNCTION): Remove undef.\n\n\t* config/mips/mips.c (irix_output_external_libcall): Renamed from\n\tmips_output_external_libcall.\n\tUse new TARGET_IRIX in guard.\n\t* config/mips/mips-protos.h (irix_output_external_libcall): Match\n\tthis.\n\t* config/mips/iris5.h (TARGET_ASM_EXTERNAL_LIBCALL): Likewise.\n\n\t* config/mips/iris5gas.h (HAVE_GAS_SHF_MERGE): Update comment.\n\tDefine as 0.\n\n\t* config/mips/iris6.h (FUNCTION_NAME_ALREADY_DECLARED): Define\n\tdepending on mips_abi.\n\t* config/mips/linux.h (FUNCTION_NAME_ALREADY_DECLARED): Define as 1.\n\t* config/mips/mips.c (mips_output_function_prologue): Test\n\tFUNCTION_NAME_ALREADY_DECLARED at runtime.\n\t(mips_output_function_epilogue): Likewise.\n\t(build_mips16_function_stub): Likewise.\n\t(build_mips16_call_stub): Likewise.\n\t* config/mips/mips.h (FUNCTION_NAME_ALREADY_DECLARED): Provide\n\tdefault.\n\n\t* config/mips/iris6.h (DWARF2_UNWIND_INFO): Don't define for native\n\tIRIX 6 O32 assembler.\n\t(SUBTARGET_CC1_SPEC): Enforce mips2 ISA with O32 ABI.\n\t(TARGET_OS_CPP_BUILTINS): Define _ABIO32, use it to define\n\t_MIPS_SIM for O32 ABI.\n\t(DWARF2_FRAME_INFO): Don't define for native IRIX 6 O32 assembler.\n\t(ASM_DECLARE_FUNCTION_NAME): Integrate mips.h version.\n\t(ASM_DECLARE_FUNCTION_SIZE): Move undef before redefinition.\n\tIntegrate O32 version.\n\t(SUBTARGET_ASM_SPEC): Handle -mabi=32.\n\t(SUBTARGET_ASM_DEBUGGING_SPEC): Add mdebug_asm_spec for gas with\n\tO32 ABI.\n\t(BSS_SECTION_ASM_OP_32): Define.\n\t(BSS_SECTION_ASM_OP_64): Likewise.\n\t(BSS_SECTION_ASM_OP): Define differently for O32 and N32/N64 ABIs\n\tusing them.\n\t(TARGET_ASM_NAMED_SECTION): Reflect renaming.\n\tMove up to allow override for O32 ABI without GNU as.\n\t(EH_FRAME_SECTION_NAME): Define explicitly.\n\t(MUST_USE_SJLJ_EXCEPTIONS): Define.\n\t[_MIPS_SIM == _ABIO32 && !GAS] (CTORS_SECTION_ASM_OP,\n\tDTORS_SECTION_ASM_OP): Dummy definitions.\n\t(TARGET_ASM_NAMED_SECTION): Undef statically.\n\t(EH_FRAME_SECTION_NAME): Likewise.\n\t(ASM_OUTPUT_FILENAME): Integrate mips.h version.\n\t(LINK_SPEC): Only use default options -call_shared -no_unresolved\n\twithout -r.\n\tDon't pass -init, -fini with -mabi=32.\n\t(COLLECT_PARSE_FLAG): Define.\n\n\t* config/mips/mips.c (iris6_asm_named_section_1): Changed guard to\n\tTARGET_IRIX.\n\tRenamed to use irix_ prefix.\n\t(iris6_asm_named_section): Likewise.\n\t(iris_section_align_entry_eq): Likewise.\n\t(iris_section_align_entry_hash): Likewise.\n\t(iris6_file_start): Likewise.\n\t(iris6_section_align_1): Likewise.\n\t(iris6_file_end): Likewise.\n\t(iris6_section_type_flags): Likewise.\n\t(iris_section_align_htab): Likewise.\n\t(iris_orig_asm_out_file): Likewise.\n\t[TARGET_IRIX] (TARGET_ASM_FILE_START): Reflect rename.\n\t(TARGET_ASM_FILE_END): Likewise.\n\t(TARGET_SECTION_TYPE_FLAGS): Likewise.\n\n\t* config/mips/mips.c [TARGET_IRIX5 && !TARGET_IRIX6]\n\t(TARGET_ASM_UNALIGNED_HI_OP): Use runtime initialization in\n\toverride_options instead.\n\t(TARGET_ASM_UNALIGNED_SI_OP): Likewise.\n\t(TARGET_ASM_UNALIGNED_DI_OP): Likewise.\n\t* config/mips/mips.c (override_options) [USE_COLLECT2]: Restore\n\tflag_gnu_linker to defaults without USE_COLLECT2 for non-IRIX O32\n\tassemblers.\n\tLikewise for constructor/destructor handling.\n\t(override_options): Handle IRIX O32 assembler quirks.\n\t[TARGET_IRIX] (irix_asm_named_section): Handle O32 ABI with and\n\twithout gas.\n\t(mips_file_start): Use new TARGET_IRIX.\n\t(mips_declare_object_name): No special processing for IRIX O32\n\tassembler.\n\t(mips_finish_declare_object): Likewise.\n\t(irix_asm_output_align): Renamed from iris6_asm_output_align.\n\tDon't record alignment for O32 ABI.\n\t(irix_file_start): Renamed from iris6_file_start.\n\tReturn early for O32 ABI.\n\t(irix_file_end): Renamed from iris6_file_end.\n\tDon't emit .section directives for O32 ABI.\n\t* config/mips/iris6.h (ASM_OUTPUT_ALIGN): Reflect renaming.\n\t* config/mips/mips-protos.h (irix_asm_output_align): Likewise.\n\n\t* config/mips/t-iris6 (MULTILIB_OPTIONS): Add mabi=32.\n\t(MULTILIB_OSDIRNAMES): Likewise.\n\nFrom-SVN: r72600", "tree": {"sha": "1208d9c82f66394ae5a3a03aa18027de655c00aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1208d9c82f66394ae5a3a03aa18027de655c00aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c7404d343647db31c167395607e9b5f34093fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7404d343647db31c167395607e9b5f34093fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7404d343647db31c167395607e9b5f34093fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7404d343647db31c167395607e9b5f34093fbc/comments", "author": null, "committer": null, "parents": [{"sha": "5f31e9bc315703be11e7c2852efe601edecea697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f31e9bc315703be11e7c2852efe601edecea697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f31e9bc315703be11e7c2852efe601edecea697"}], "stats": {"total": 673, "additions": 484, "deletions": 189}, "files": [{"sha": "b73afb99e8199615c99c7cab97c0d51c886f2399", "filename": "gcc/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -1,3 +1,123 @@\n+2003-10-17  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* config.gcc (mips-sgi-irix6*o32): Only enable use_collect2\n+\twithout gas.\n+\t(mips-sgi-irix6*): Likewise.\n+\n+\t* config/mips/iris6gas.h: New file.\n+\t* gcc/config.gcc (mips-sgi-irix6*): Use it.\n+\n+\t* config/mips/mips.h (TARGET_IRIX): Provide default.\n+\t(TARGET_IRIX5): Likewise.\n+\t(TARGET_SGI_O32_AS): Likewise.\n+\t* config/mips/iris5.h (TARGET_IRIX): Redefine as 1.\n+\t(TARGET_IRIX5): Likewise.\n+\t* config/mips/iris6.h (TARGET_IRIX6): Remove.\n+\t(TARGET_IRIX5): Redefine as 0.\n+\n+\t* config/mips/mips.c (mips_output_external): Test for IRIX 6 O32\n+\tlinker workaround with TARGET_IRIX and mips_abi instead of\n+\tASM_OUTPUT_UNDEF_FUNCTION.\n+\t(mips_file_end): Inline old ASM_OUTPUT_UNDEF_FUNCTION definition,\n+\ttesting TARGET_IRIX and mips_abi explicitly.\n+\t* config/mips/iris5.h (ASM_OUTPUT_UNDEF_FUNCTION): Remove.\n+\t* config/mips/iris6.h (ASM_OUTPUT_UNDEF_FUNCTION): Remove undef.\n+\n+\t* config/mips/mips.c (irix_output_external_libcall): Renamed from\n+\tmips_output_external_libcall.\n+\tUse new TARGET_IRIX in guard.\n+\t* config/mips/mips-protos.h (irix_output_external_libcall): Match\n+\tthis.\n+\t* config/mips/iris5.h (TARGET_ASM_EXTERNAL_LIBCALL): Likewise.\n+\n+\t* config/mips/iris5gas.h (HAVE_GAS_SHF_MERGE): Update comment.\n+\tDefine as 0.\n+\n+\t* config/mips/iris6.h (FUNCTION_NAME_ALREADY_DECLARED): Define\n+\tdepending on mips_abi. \n+\t* config/mips/linux.h (FUNCTION_NAME_ALREADY_DECLARED): Define as 1.\n+\t* config/mips/mips.c (mips_output_function_prologue): Test\n+\tFUNCTION_NAME_ALREADY_DECLARED at runtime.\n+\t(mips_output_function_epilogue): Likewise.\n+\t(build_mips16_function_stub): Likewise.\n+\t(build_mips16_call_stub): Likewise.\n+\t* config/mips/mips.h (FUNCTION_NAME_ALREADY_DECLARED): Provide\n+\tdefault.\n+\t\n+\t* config/mips/iris6.h (DWARF2_UNWIND_INFO): Don't define for native\n+\tIRIX 6 O32 assembler.\n+\t(SUBTARGET_CC1_SPEC): Enforce mips2 ISA with O32 ABI.\n+\t(TARGET_OS_CPP_BUILTINS): Define _ABIO32, use it to define\n+\t_MIPS_SIM for O32 ABI.\n+\t(DWARF2_FRAME_INFO): Don't define for native IRIX 6 O32 assembler.\n+\t(ASM_DECLARE_FUNCTION_NAME): Integrate mips.h version.\n+\t(ASM_DECLARE_FUNCTION_SIZE): Move undef before redefinition.\n+\tIntegrate O32 version.\n+\t(SUBTARGET_ASM_SPEC): Handle -mabi=32.\n+\t(SUBTARGET_ASM_DEBUGGING_SPEC): Add mdebug_asm_spec for gas with\n+\tO32 ABI.\n+\t(BSS_SECTION_ASM_OP_32): Define.\n+\t(BSS_SECTION_ASM_OP_64): Likewise.\n+\t(BSS_SECTION_ASM_OP): Define differently for O32 and N32/N64 ABIs\n+\tusing them.\n+\t(TARGET_ASM_NAMED_SECTION): Reflect renaming.\n+\tMove up to allow override for O32 ABI without GNU as.\n+\t(EH_FRAME_SECTION_NAME): Define explicitly.\n+\t(MUST_USE_SJLJ_EXCEPTIONS): Define.\n+\t[_MIPS_SIM == _ABIO32 && !GAS] (CTORS_SECTION_ASM_OP,\n+\tDTORS_SECTION_ASM_OP): Dummy definitions.\n+\t(TARGET_ASM_NAMED_SECTION): Undef statically. \n+\t(EH_FRAME_SECTION_NAME): Likewise.\n+\t(ASM_OUTPUT_FILENAME): Integrate mips.h version.\n+\t(LINK_SPEC): Only use default options -call_shared -no_unresolved\n+\twithout -r.\n+\tDon't pass -init, -fini with -mabi=32.\n+\t(COLLECT_PARSE_FLAG): Define.\n+\n+\t* config/mips/mips.c (iris6_asm_named_section_1): Changed guard to\n+\tTARGET_IRIX.\n+\tRenamed to use irix_ prefix.\n+\t(iris6_asm_named_section): Likewise.\n+\t(iris_section_align_entry_eq): Likewise.\n+\t(iris_section_align_entry_hash): Likewise.\n+\t(iris6_file_start): Likewise.\n+\t(iris6_section_align_1): Likewise.\n+\t(iris6_file_end): Likewise.\n+\t(iris6_section_type_flags): Likewise.\n+\t(iris_section_align_htab): Likewise.\n+\t(iris_orig_asm_out_file): Likewise.\n+\t[TARGET_IRIX] (TARGET_ASM_FILE_START): Reflect rename.\n+\t(TARGET_ASM_FILE_END): Likewise.\n+\t(TARGET_SECTION_TYPE_FLAGS): Likewise.\n+\n+\t* config/mips/mips.c [TARGET_IRIX5 && !TARGET_IRIX6]\n+\t(TARGET_ASM_UNALIGNED_HI_OP): Use runtime initialization in\n+\toverride_options instead.\n+\t(TARGET_ASM_UNALIGNED_SI_OP): Likewise.\n+\t(TARGET_ASM_UNALIGNED_DI_OP): Likewise.\n+\t* config/mips/mips.c (override_options) [USE_COLLECT2]: Restore\n+\tflag_gnu_linker to defaults without USE_COLLECT2 for non-IRIX O32\n+\tassemblers.\n+\tLikewise for constructor/destructor handling.\n+\t(override_options): Handle IRIX O32 assembler quirks.\n+\t[TARGET_IRIX] (irix_asm_named_section): Handle O32 ABI with and\n+\twithout gas.\n+\t(mips_file_start): Use new TARGET_IRIX.\n+\t(mips_declare_object_name): No special processing for IRIX O32\n+\tassembler.\n+\t(mips_finish_declare_object): Likewise.\n+\t(irix_asm_output_align): Renamed from iris6_asm_output_align.\n+\tDon't record alignment for O32 ABI.\n+\t(irix_file_start): Renamed from iris6_file_start.\n+\tReturn early for O32 ABI.\n+\t(irix_file_end): Renamed from iris6_file_end.\n+\tDon't emit .section directives for O32 ABI.\n+\t* config/mips/iris6.h (ASM_OUTPUT_ALIGN): Reflect renaming.\n+\t* config/mips/mips-protos.h (irix_asm_output_align): Likewise.\n+\n+\t* config/mips/t-iris6 (MULTILIB_OPTIONS): Add mabi=32.\n+\t(MULTILIB_OSDIRNAMES): Likewise.\n+\n 2003-10-17  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* collect2.c (COLLECT_PARSE_FLAG): Provide default."}, {"sha": "ee4a2cc8c02c1fe25d3296b2012a83dc10b5ecef", "filename": "gcc/config.gcc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -1377,21 +1377,34 @@ mips-sgi-irix6*o32)\t\t# SGI System V.4., IRIX 6, O32 ABI\n \ttarget_cpu_default=\"MASK_ABICALLS\"\n \t# mips-tfile doesn't work yet\n \t# See comment in mips/iris5.h file.\n-\tuse_collect2=yes\n+\tif test x$gas = xno\n+\tthen\n+\t\tuse_collect2=yes\n+\tfi\n #\tif test x$enable_threads = xyes; then\n #\t\tthread_file='irix'\n #\tfi\n \tuse_fixproto=yes\n \t;;\n mips-sgi-irix6*)\t\t# SGI System V.4., IRIX 6\n \ttm_file=\"${tm_file} mips/iris5.h mips/iris6.h\"\n+\tif test x$gas = xyes\n+\tthen\n+\t\ttm_file=\"${tm_file} mips/iris6gas.h\"\n+\tfi\n \tif test \"x$gnu_ld\" = xyes\n \tthen\n \t\ttm_file=\"${tm_file} mips/iris6gld.h\"\n \tfi\n \ttmake_file=\"mips/t-iris mips/t-iris5-6 mips/t-iris6\"\n \ttarget_cpu_default=\"MASK_ABICALLS|MASK_FLOAT64|MASK_64BIT\"\n \ttm_defines=\"MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_N32\"\n+\t# See comment in mips/iris5.h file.  Only enabled for O32 ABI\n+\t# without GNU as.\n+\tif test x$gas = xno\n+\tthen\n+\t\tuse_collect2=yes\n+\tfi\n #\tif test x$enable_threads = xyes; then\n #\t\tthread_file='irix'\n #\tfi"}, {"sha": "41de65223f9fa9c1e28fe902c0c6e1e05efb43b9", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -19,6 +19,12 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* We are compiling for IRIX now.  */\n+#undef TARGET_IRIX\n+#define TARGET_IRIX 1\n+\n+/* Allow some special handling for IRIX 5.  */\n+#undef TARGET_IRIX5\n #define TARGET_IRIX5 1\n \n #define ABICALLS_ASM_OP \"\\t.option pic2\"\n@@ -203,20 +209,9 @@ do {\t\t\t\t\t\t\t\t\\\n   fputs (\"\\n\", (FILE));\t\t\t\t\t\t\\\n } while (0)\n \n-/* In IRIX 5, we must output a `.global name .text' directive for every used\n-   but undefined function.  If we don't, the linker may perform an optimization\n-   (skipping over the insns that set $gp) when it is unsafe.  This is used\n-   indirectly by ASM_OUTPUT_EXTERNAL.  */\n-#define ASM_OUTPUT_UNDEF_FUNCTION(FILE, NAME)\t\\\n-do {\t\t\t\t\t\t\\\n-  fputs (\"\\t.globl \", FILE);\t\t\t\\\n-  assemble_name (FILE, NAME);\t\t\t\\\n-  fputs (\" .text\\n\", FILE);\t\t\t\\\n-} while (0)\n-\n /* Also do this for libcalls.  */\n #undef TARGET_ASM_EXTERNAL_LIBCALL\n-#define TARGET_ASM_EXTERNAL_LIBCALL mips_output_external_libcall\n+#define TARGET_ASM_EXTERNAL_LIBCALL irix_output_external_libcall\n \n /* This does for functions what ASM_DECLARE_OBJECT_NAME does for variables.\n    This is used indirectly by ASM_OUTPUT_EXTERNAL.  */"}, {"sha": "27b3118e647f3b1a5c4fbc3c00abdd1b1985546a", "filename": "gcc/config/mips/iris5gas.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Firis5gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Firis5gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5gas.h?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -76,5 +76,8 @@ do {\t\t\t\t\t\t\t\\\n #define NM_FLAGS \"-Bng\"\n \n /* Disable SHF_MERGE support.  Even if gas supports it, the IRIX ld does not\n-   without a special elspec(5) file.  */\n+   without a special elspec(5) file.\n+\n+   FIXME: Only do this if not using GNU ld.  */\n #undef HAVE_GAS_SHF_MERGE\n+#define HAVE_GAS_SHF_MERGE 0"}, {"sha": "d708bcf5d969fb1ca5dd528fa0bd108f0a05ff3b", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 91, "deletions": 33, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -19,16 +19,18 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Let mips.c know we need the IRIX 6 functions.  */\n-#define TARGET_IRIX6 1\n+/* No more special IRIX 5 handling.  */\n+#undef TARGET_IRIX5\n+#define TARGET_IRIX5 0\n \n /* Default to -mabi=n32 and -mips3.  */\n #undef MULTILIB_DEFAULTS\n #define MULTILIB_DEFAULTS { \"mabi=n32\" }\n \n-/* IRIX 6 assembler does handle DWARF2 directives.  Override setting in\n-   iris5.h file.  */\n+/* The IRIX 6 O32 assembler cannot calculate label differences, while both\n+   the N32/N64 assembler and gas can.  Override setting in iris5.h file.  */\n #undef DWARF2_UNWIND_INFO\n+#define DWARF2_UNWIND_INFO !TARGET_SGI_O32_AS\n \n /* The IRIX 6 assembler will sometimes assign labels to the wrong\n    section unless the labels are within .ent/.end blocks.  Therefore,\n@@ -54,8 +56,9 @@ Boston, MA 02111-1307, USA.  */\n /* For IRIX 6, -mabi=64 implies TARGET_LONG64.  */\n /* This is handled in override_options.  */\n \n+/* Default to the mips2 ISA for the O32 ABI.  */\n #undef SUBTARGET_CC1_SPEC\n-#define SUBTARGET_CC1_SPEC \"\"\n+#define SUBTARGET_CC1_SPEC \"%{mabi=32: %{!mips*: -mips2}}\"\n \n /* #line directives let the O32 assembler create object files that cause the\n    O32 linker to crash.  */\n@@ -91,7 +94,8 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t\t\t\t\t\\\n      if (mips_abi == ABI_32)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"_MIPS_SIM=_MIPS_SIM_ABI32\");\t\\\n+\tbuiltin_define (\"_ABIO32=1\");\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SIM=_ABIO32\");\t\t\\\n \tbuiltin_define (\"_MIPS_SZLONG=32\");\t\t\\\n \tbuiltin_define (\"_MIPS_SZPTR=32\");\t\t\\\n       }\t\t\t\t\t\t\t\\\n@@ -151,7 +155,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Force the generation of dwarf .debug_frame sections even if not\n    compiling -g.  This guarantees that we can unwind the stack.  */\n-#define DWARF2_FRAME_INFO 1\n+#define DWARF2_FRAME_INFO !TARGET_SGI_O32_AS\n \n /* The size in bytes of a DWARF field indicating an offset or length\n    relative to a debug info section, specified to be 4 bytes in the DWARF-2\n@@ -180,11 +184,6 @@ Boston, MA 02111-1307, USA.  */\n #undef MACHINE_TYPE\n #define MACHINE_TYPE \"SGI running IRIX 6.x\"\n \n-/* IRIX 5 stuff that we don't need for IRIX 6.  */\n-/* ??? We do need this for the -mabi=32 switch though.  */\n-#undef ASM_OUTPUT_UNDEF_FUNCTION\n-#undef ASM_DECLARE_FUNCTION_SIZE\n-\n /* Stuff we need for IRIX 6 that isn't in IRIX 5.  */\n \n /* The SGI assembler doesn't like labels before the .ent, so we must output\n@@ -193,25 +192,38 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(STREAM, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fputs (\"\\t.ent\\t\", STREAM);\t\t\t\t\t\t\\\n-    assemble_name (STREAM, NAME);\t\t\t\t\t\\\n-    fputs (\"\\n\", STREAM);\t\t\t\t\t\t\\\n-    assemble_name (STREAM, NAME);\t\t\t\t\t\\\n-    fputs (\":\\n\", STREAM);\t\t\t\t\t\t\\\n+    if (mips_abi != ABI_32)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        fputs (\"\\t.ent\\t\", STREAM);\t\t\t\t\t\\\n+        assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+        fputs (\"\\n\", STREAM);\t\t\t\t\t\t\\\n+        assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+        fputs (\":\\n\", STREAM);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n /* Likewise, the SGI assembler doesn't like labels after the .end, so we\n    must output the .end here.  */\n+#undef ASM_DECLARE_FUNCTION_SIZE\n #define ASM_DECLARE_FUNCTION_SIZE(STREAM, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fputs (\"\\t.end\\t\", STREAM);\t\t\t\t\t\t\\\n-    assemble_name (STREAM, NAME);\t\t\t\t\t\\\n-    fputs (\"\\n\", STREAM);\t\t\t\t\t\t\\\n+    if (mips_abi == ABI_32)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        tree name_tree = get_identifier (NAME);\t\t\t\t\\\n+        TREE_ASM_WRITTEN (name_tree) = 1;\t\t\t\t\\\n+      } \t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        fputs (\"\\t.end\\t\", STREAM);\t\t\t\t\t\\\n+        assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+        fputs (\"\\n\", STREAM);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n /* Tell function_prologue in mips.c that we have already output the .ent/.end\n    pseudo-ops.  */\n-#define FUNCTION_NAME_ALREADY_DECLARED\n+#undef FUNCTION_NAME_ALREADY_DECLARED\n+#define FUNCTION_NAME_ALREADY_DECLARED (mips_abi != ABI_32)\n \n #undef SET_ASM_OP\t/* Has no equivalent.  See ASM_OUTPUT_DEF below.  */\n \n@@ -248,7 +260,7 @@ Boston, MA 02111-1307, USA.  */\n    on the mipsX option.  */\n /* If no mips[3,4] option given, give the appropriate default for mabi=X */\n #undef SUBTARGET_ASM_SPEC\n-#define SUBTARGET_ASM_SPEC \"%{!mabi*:-n32} %{!mips*: %{!mabi*:-mips3} %{mabi=n32|mabi=64:-mips3}}\"\n+#define SUBTARGET_ASM_SPEC \"%{!mabi*:-n32} %{mabi=32:-32} %{!mips*: %{!mabi*:-mips3} %{mabi=32:-mips2} %{mabi=n32|mabi=64:-mips3}}\"\n \n /* Must pass -g0 to the assembler, otherwise it may overwrite our\n    debug info with its own debug info.  */\n@@ -262,7 +274,7 @@ Boston, MA 02111-1307, USA.  */\n #define SUBTARGET_MIPS_AS_ASM_SPEC \"%{v:-show} -G 0 -w\"\n \n #undef SUBTARGET_ASM_DEBUGGING_SPEC\n-#define SUBTARGET_ASM_DEBUGGING_SPEC \"-g0\"\n+#define SUBTARGET_ASM_DEBUGGING_SPEC \"-g0 %(mdebug_asm_spec)\"\n \n /* The MIPS assembler occasionally misoptimizes.  Since GCC should be\n    doing scheduling anyhow, just turn off optimization in the assembler.  */\n@@ -275,7 +287,12 @@ Boston, MA 02111-1307, USA.  */\n    and dtor lists this way, so we use -init and -fini to invoke the\n    do_global_* functions instead of running collect2.  */\n \n-#define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n+#define BSS_SECTION_ASM_OP_32\t\"\\t.data\"\n+#define BSS_SECTION_ASM_OP_64\t\"\\t.section\\t.bss\"\n+#define BSS_SECTION_ASM_OP\t\t\t\\\n+  (mips_abi != ABI_32 && mips_abi != ABI_O64\t\\\n+   ? BSS_SECTION_ASM_OP_64\t\t\t\\\n+   : BSS_SECTION_ASM_OP_32)\n \n #undef READONLY_DATA_SECTION_ASM_OP\n #define READONLY_DATA_SECTION_ASM_OP_32\t\"\\t.rdata\"\n@@ -285,8 +302,41 @@ Boston, MA 02111-1307, USA.  */\n    ? READONLY_DATA_SECTION_ASM_OP_64\t\t\\\n    : READONLY_DATA_SECTION_ASM_OP_32)\n \n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  irix_asm_named_section\n+\n+/* The default definition in defaults.h cannot cope with the runtime-variable\n+   definition of DWARF2_UNWIND_INFO above, so define here explicitly.  */\n+#define EH_FRAME_SECTION_NAME \".eh_frame\"\n+\n+/* MUST_USE_SJLJ_EXCEPTIONS has the same problem.  */\n+#define MUST_USE_SJLJ_EXCEPTIONS (DWARF2_UNWIND_INFO == 0)\n+\n+/* The native IRIX 6 O32 assembler doesn't support named sections, while\n+   the N32/N64 assembler does.  We need crt{begin, end}.o for the N32/N64\n+   ABIs, but there's no way to disable them for just one multilib.\n+   Therefore we provide dummy definitions to allow crtstuff.c to compile,\n+   but the resulting files are not used for the O32 ABI.  */\n+\n+#if (defined _ABIO32 && _MIPS_SIM == _ABIO32) \\\n+  && ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GAS) == 0\n+\n+/* Provide dummy definitions.  */\n+#define CTORS_SECTION_ASM_OP \"\"\n+#define DTORS_SECTION_ASM_OP \"\"\n+\n+/* Undef so JCR_SECTION_NAME isn't defined and __JCR_{LIST, END}__ are not\n+   used.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+\n+/* Undef so __EH_FRAME_BEGIN__/__FRAME_END__ are not used.  */\n+#undef EH_FRAME_SECTION_NAME\n+\n+#endif /* _MIPS_SIM == _ABIO32 && !GAS */\n+\n /* Define functions to read the name and flags of the current section.\n-   They are used by iris6_asm_output_align.  */\n+   They are used by irix_asm_output_align.  */\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n@@ -325,13 +375,9 @@ current_section_flags (void)\t\t\t\t\t\t\\\n   abort ();\t\t\t\t\t\t\t\t\\\n }\n \n-/* Switch into a generic section.  */\n-#undef TARGET_ASM_NAMED_SECTION\n-#define TARGET_ASM_NAMED_SECTION  iris6_asm_named_section\n-\n /* SGI assembler needs all sorts of extra help to do alignment properly.  */\n #undef ASM_OUTPUT_ALIGN\n-#define ASM_OUTPUT_ALIGN iris6_asm_output_align\n+#define ASM_OUTPUT_ALIGN irix_asm_output_align\n \n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT (32768*8)\n@@ -343,7 +389,10 @@ current_section_flags (void)\t\t\t\t\t\t\\\n #define ASM_OUTPUT_FILENAME(STREAM, NUM_SOURCE_FILENAMES, NAME) \\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t#.file\\t%d \", NUM_SOURCE_FILENAMES);\t\\\n+    if (mips_abi == ABI_32)\t\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.file\\t%d \", NUM_SOURCE_FILENAMES);\t\\\n+    else\t\t\t\t\t\t\t\\\n+      fprintf (STREAM, \"\\t#.file\\t%d \", NUM_SOURCE_FILENAMES);\t\\\n     output_quoted_string (STREAM, NAME);\t\t\t\\\n     fputs (\"\\n\", STREAM);\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n@@ -457,10 +506,19 @@ while (0)\n %{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n %{bestGnum} %{shared} %{non_shared} \\\n %{call_shared} %{no_archive} %{exact_version} %{w} \\\n-%{!shared: %{!non_shared: %{!call_shared: -call_shared -no_unresolved}}} \\\n-%{rpath} -init __do_global_ctors -fini __do_global_dtors \\\n+%{!shared: %{!non_shared: %{!call_shared:%{!r: -call_shared -no_unresolved}}}} \\\n+%{rpath} %{!mabi=32: -init __do_global_ctors -fini __do_global_dtors} \\\n %{shared:-hidden_symbol __do_global_ctors,__do_global_ctors_1,__do_global_dtors} \\\n -_SYSTYPE_SVR4 -woff 131 \\\n %{mabi=32: -32}%{mabi=n32: -n32}%{mabi=64: -64}%{!mabi*: -n32}\"\n \n+/* We need to disable collecting for the N32 and N64 ABIs.  */\n+#define COLLECT_PARSE_FLAG(FLAG)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  if (! strcmp (FLAG, \"-n32\") || ! strcmp (FLAG, \"-64\"))\t\\\n+    do_collecting = 0;\t\t\t\t\t\t\\\n+  if (! strcmp (FLAG, \"-32\") || ! strcmp (FLAG, \"-o32\"))\t\\\n+    do_collecting = 1;\t\t\t\t\t\t\\\n+} while (0)\n+\n #define MIPS_TFMODE_FORMAT mips_extended_format"}, {"sha": "e73bfaf019b5d2c2aa77e91adf42310afc2d5c3d", "filename": "gcc/config/mips/iris6gas.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Firis6gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Firis6gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6gas.h?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -0,0 +1,32 @@\n+/* Definitions of target machine for GNU compiler.  IRIX 6 with GNU as.  */\n+\n+/* Override mips.h version to match DWARF 2 default.  */\n+#undef MDEBUG_ASM_SPEC\n+#define MDEBUG_ASM_SPEC \"%{gstabs*|gcoff*:-mdebug} \\\n+%{!gstabs*:%{!gcoff*:-no-mdebug}}\"\n+\n+/* Override iris6.h version to always use -init/-fini.\n+\n+   FIXME: integrate those use separate spec/define for this?  */\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{bestGnum} %{shared} %{non_shared} \\\n+%{call_shared} %{no_archive} %{exact_version} %{w} \\\n+%{!shared: %{!non_shared: %{!call_shared:%{!r: -call_shared -no_unresolved}}}} \\\n+%{rpath} -init __do_global_ctors -fini __do_global_dtors \\\n+%{shared:-hidden_symbol __do_global_ctors,__do_global_ctors_1,__do_global_dtors} \\\n+-_SYSTYPE_SVR4 -woff 131 \\\n+%{mabi=32: -32}%{mabi=n32: -n32}%{mabi=64: -64}%{!mabi*: -n32}\"\n+\n+/* Disable SHF_MERGE support.  Even if gas supports it, the IRIX 6 O32 ld\n+   does not without a special elspec(5) file.\n+\n+   FIXME: Only do this if not using GNU ld.  */\n+#if HAVE_GAS_SHF_MERGE\n+#undef HAVE_GAS_SHF_MERGE\n+#define HAVE_GAS_SHF_MERGE (mips_abi != ABI_32)\n+#endif /* HAVE_GAS_SHF_MERGE */\n+\n+/* There's no need to perform collecting with GNU as.  */\n+#undef COLLECT_PARSE_FLAG"}, {"sha": "ad2aa188c9c4ae91be584f7cd67708f6ca31fa04", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -171,7 +171,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Tell function_prologue in mips.c that we have already output the .ent/.end\n    pseudo-ops.  */\n-#define FUNCTION_NAME_ALREADY_DECLARED\n+#define FUNCTION_NAME_ALREADY_DECLARED 1\n \n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)       \t\t\\\n   (flag_pic\t\t\t\t\t\t\t\t\\"}, {"sha": "2e31138e12757c5e0604bf0bfa1ea88cc98b74b1", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -98,8 +98,8 @@ extern HOST_WIDE_INT mips_debugger_offset (rtx, HOST_WIDE_INT);\n extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern int mips_output_external (FILE *, tree, const char *);\n-#if TARGET_IRIX5 || TARGET_IRIX6\n-extern void mips_output_external_libcall (rtx);\n+#if TARGET_IRIX\n+extern void irix_output_external_libcall (rtx);\n #endif\n extern void mips_output_filename (FILE *, const char *);\n extern void mips_output_lineno (FILE *, int);\n@@ -141,7 +141,7 @@ extern unsigned int mips_hard_regno_nregs (int, enum machine_mode);\n extern int mips_return_in_memory (tree);\n extern const char *mips_emit_prefetch (rtx *);\n \n-extern void iris6_asm_output_align (FILE *, unsigned);\n+extern void irix_asm_output_align (FILE *, unsigned);\n extern const char *current_section_name (void);\n extern unsigned int current_section_flags (void);\n "}, {"sha": "b79ce0e27794ecba9ef748eb6f59778eb9fb9e34", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 201, "deletions": 134, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -276,17 +276,17 @@ static int mips_issue_rate (void);\n static int mips_use_dfa_pipeline_interface (void);\n static void mips_init_libfuncs (void);\n \n-#ifdef TARGET_IRIX6\n-static void iris6_asm_named_section_1 (const char *, unsigned int,\n-\t\t\t\t       unsigned int);\n-static void iris6_asm_named_section (const char *, unsigned int);\n-static int iris_section_align_entry_eq (const void *, const void *);\n-static hashval_t iris_section_align_entry_hash (const void *);\n-static void iris6_file_start (void);\n-static int iris6_section_align_1 (void **, void *);\n+#if TARGET_IRIX\n+static void irix_asm_named_section_1 (const char *, unsigned int,\n+\t\t\t\t      unsigned int);\n+static void irix_asm_named_section (const char *, unsigned int);\n+static int irix_section_align_entry_eq (const void *, const void *);\n+static hashval_t irix_section_align_entry_hash (const void *);\n+static void irix_file_start (void);\n+static int irix_section_align_1 (void **, void *);\n static void copy_file_data (FILE *, FILE *);\n-static void iris6_file_end (void);\n-static unsigned int iris6_section_type_flags (tree, const char *, int);\n+static void irix_file_end (void);\n+static unsigned int irix_section_type_flags (tree, const char *, int);\n #endif\n \n /* Structure to be filled in by compute_frame_size with register\n@@ -738,17 +738,6 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #undef TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER mips_assemble_integer\n \n-#if TARGET_IRIX5 && !TARGET_IRIX6\n-#undef TARGET_ASM_UNALIGNED_HI_OP\n-#define TARGET_ASM_UNALIGNED_HI_OP \"\\t.align 0\\n\\t.half\\t\"\n-#undef TARGET_ASM_UNALIGNED_SI_OP\n-#define TARGET_ASM_UNALIGNED_SI_OP \"\\t.align 0\\n\\t.word\\t\"\n-/* The IRIX 6 O32 assembler gives an error for `align 0; .dword', contrary\n-   to the documentation, so disable it.  */\n-#undef TARGET_ASM_UNALIGNED_DI_OP\n-#define TARGET_ASM_UNALIGNED_DI_OP NULL\n-#endif\n-\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE mips_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n@@ -785,19 +774,19 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n \n #undef TARGET_ASM_FILE_START\n #undef TARGET_ASM_FILE_END\n-#ifdef TARGET_IRIX6\n-#define TARGET_ASM_FILE_START iris6_file_start\n-#define TARGET_ASM_FILE_END iris6_file_end\n+#if TARGET_IRIX\n+#define TARGET_ASM_FILE_START irix_file_start\n+#define TARGET_ASM_FILE_END irix_file_end\n #else\n #define TARGET_ASM_FILE_START mips_file_start\n #define TARGET_ASM_FILE_END mips_file_end\n #endif\n #undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n-#ifdef TARGET_IRIX6\n+#if TARGET_IRIX\n #undef TARGET_SECTION_TYPE_FLAGS\n-#define TARGET_SECTION_TYPE_FLAGS iris6_section_type_flags\n+#define TARGET_SECTION_TYPE_FLAGS irix_section_type_flags\n #endif\n \n #undef TARGET_INIT_LIBFUNCS\n@@ -4705,6 +4694,60 @@ override_options (void)\n   if (mips_abi != ABI_32 && mips_abi != ABI_O64)\n     flag_pcc_struct_return = 0;\n \n+#if defined(USE_COLLECT2)\n+  /* For IRIX 5 or IRIX 6 with integrated O32 ABI support, USE_COLLECT2 is\n+     always defined when GNU as is not in use, but collect2 is only used\n+     for the O32 ABI, so override the toplev.c and target-def.h defaults\n+     for flag_gnu_linker, TARGET_ASM_{CONSTRUCTOR, DESTRUCTOR} and\n+     TARGET_HAVE_CTORS_DTORS.\n+\n+     Since the IRIX 5 and IRIX 6 O32 assemblers cannot handle named\n+     sections, constructor/destructor handling depends on the ABI in use.\n+\n+     Since USE_COLLECT2 is defined, we only need to restore the non-collect2\n+     defaults for the N32/N64 ABIs.  */\n+  if (TARGET_IRIX && !TARGET_SGI_O32_AS)\n+    {\n+      flag_gnu_linker = 1;\n+\n+      targetm.have_ctors_dtors = true;\n+      targetm.asm_out.constructor = default_named_section_asm_out_constructor;\n+      targetm.asm_out.destructor = default_named_section_asm_out_destructor;\n+    }\n+#endif\n+\n+  /* Handle some quirks of the IRIX 5 and IRIX 6 O32 assemblers.  */\n+\n+  if (TARGET_SGI_O32_AS)\n+    {\n+      /* They don't recognize `.[248]byte'. */\n+      targetm.asm_out.unaligned_op.hi = \"\\t.align 0\\n\\t.half\\t\";\n+      targetm.asm_out.unaligned_op.si = \"\\t.align 0\\n\\t.word\\t\";\n+      /* The IRIX 6 O32 assembler gives an error for `align 0; .dword',\n+\t contrary to the documentation, so disable it.  */\n+      targetm.asm_out.unaligned_op.di = NULL;\n+\n+      /* They cannot handle named sections.  */\n+      targetm.have_named_sections = false;\n+      /* Therefore, EH_FRAME_SECTION_NAME isn't defined and we must use\n+\t collect2.  */\n+      targetm.terminate_dw2_eh_frame_info = true;\n+      targetm.asm_out.eh_frame_section = collect2_eh_frame_section;\n+\n+      /* They cannot handle debug information.  */\n+      if (write_symbols != NO_DEBUG)\n+\t{\n+\t  /* Adapt wording to IRIX version: IRIX 5 only had a single ABI,\n+\t     so -mabi=32 isn't usually specified.  */\n+\t  if (TARGET_IRIX5)\n+\t    warning (\"-g is only supported using GNU as,\");\n+\t  else\n+\t    warning (\"-g is only supported using GNU as with -mabi=32,\");\n+\t  warning (\"-g option disabled\");\n+\t  write_symbols = NO_DEBUG;\n+\t}\n+    }\n+\n   if ((target_flags_explicit & MASK_BRANCHLIKELY) == 0)\n     {\n       /* If neither -mbranch-likely nor -mno-branch-likely was given\n@@ -5571,8 +5614,8 @@ mips_output_external (FILE *file ATTRIBUTE_UNUSED, tree decl, const char *name)\n       extern_head = p;\n     }\n \n-#ifdef ASM_OUTPUT_UNDEF_FUNCTION\n-  if (TREE_CODE (decl) == FUNCTION_DECL\n+  if (TARGET_IRIX && mips_abi == ABI_32\n+      && TREE_CODE (decl) == FUNCTION_DECL\n       /* ??? Don't include alloca, since gcc will always expand it\n \t inline.  If we don't do this, the C++ library fails to build.  */\n       && strcmp (name, \"alloca\")\n@@ -5586,14 +5629,13 @@ mips_output_external (FILE *file ATTRIBUTE_UNUSED, tree decl, const char *name)\n       p->size = -1;\n       extern_head = p;\n     }\n-#endif\n \n   return 0;\n }\n \n-#if TARGET_IRIX5 || TARGET_IRIX6\n+#if TARGET_IRIX\n void\n-mips_output_external_libcall (rtx fun)\n+irix_output_external_libcall (rtx fun)\n {\n   register struct extern_list *p;\n \n@@ -5763,7 +5805,7 @@ mips_file_start (void)\n \n   if (TARGET_GAS)\n     {\n-#if defined(OBJECT_FORMAT_ELF) && !(TARGET_IRIX5 || TARGET_IRIX6)\n+#if defined(OBJECT_FORMAT_ELF) && !TARGET_IRIX\n       /* Generate a special section to describe the ABI switches used to\n \t produce the resultant binary.  This used to be done by the assembler\n \t setting bits in the ELF header's flags field, but we have run out of\n@@ -5853,11 +5895,18 @@ mips_file_end (void)\n \t  if (! TREE_ASM_WRITTEN (name_tree))\n \t    {\n \t      TREE_ASM_WRITTEN (name_tree) = 1;\n-#ifdef ASM_OUTPUT_UNDEF_FUNCTION\n-\t      if (p->size == -1)\n-\t\tASM_OUTPUT_UNDEF_FUNCTION (asm_out_file, p->name);\n+\t      /* In IRIX 5 or IRIX 6 for the O32 ABI, we must output a\n+\t\t `.global name .text' directive for every used but\n+\t\t undefined function.  If we don't, the linker may perform\n+\t\t an optimization (skipping over the insns that set $gp)\n+\t\t when it is unsafe.  */\n+\t      if (TARGET_IRIX && mips_abi == ABI_32 && p->size == -1)\n+\t\t{\n+\t\t  fputs (\"\\t.globl \", asm_out_file);\t\t       \n+\t\t  assemble_name (asm_out_file, p->name);\n+\t\t  fputs (\" .text\\n\", asm_out_file);\n+\t\t}\n \t      else\n-#endif\n \t\t{\n \t\t  fputs (\"\\t.extern\\t\", asm_out_file);\n \t\t  assemble_name (asm_out_file, p->name);\n@@ -5897,18 +5946,21 @@ void\n mips_declare_object_name (FILE *stream, const char *name,\n \t\t\t  tree decl ATTRIBUTE_UNUSED)\n {\n+  if (!TARGET_SGI_O32_AS)\n+    {\n #ifdef ASM_OUTPUT_TYPE_DIRECTIVE\n-  ASM_OUTPUT_TYPE_DIRECTIVE (stream, name, \"object\");\n+      ASM_OUTPUT_TYPE_DIRECTIVE (stream, name, \"object\");\n #endif\n \n-  size_directive_output = 0;\n-  if (!flag_inhibit_size_directive && DECL_SIZE (decl))\n-    {\n-      HOST_WIDE_INT size;\n+      size_directive_output = 0;\n+      if (!flag_inhibit_size_directive && DECL_SIZE (decl))\n+\t{\n+\t  HOST_WIDE_INT size;\n \n-      size_directive_output = 1;\n-      size = int_size_in_bytes (TREE_TYPE (decl));\n-      ASM_OUTPUT_SIZE_DIRECTIVE (stream, name, size);\n+\t  size_directive_output = 1;\n+\t  size = int_size_in_bytes (TREE_TYPE (decl));\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (stream, name, size);\n+\t}\n     }\n \n   mips_declare_object (stream, name, \"\", \":\\n\", 0);\n@@ -5922,7 +5974,8 @@ mips_finish_declare_object (FILE *stream, tree decl, int top_level, int at_end)\n   const char *name;\n \n   name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n-  if (!flag_inhibit_size_directive\n+  if (!TARGET_SGI_O32_AS\n+      && !flag_inhibit_size_directive\n       && DECL_SIZE (decl) != 0\n       && !at_end && top_level\n       && DECL_INITIAL (decl) == error_mark_node\n@@ -6329,9 +6382,7 @@ mips_for_each_saved_reg (HOST_WIDE_INT sp_offset, mips_save_restore_fn fn)\n static void\n mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\n-#ifndef FUNCTION_NAME_ALREADY_DECLARED\n   const char *fnname;\n-#endif\n   HOST_WIDE_INT tsize = cfun->machine->frame.total_size;\n \n   /* ??? When is this really needed?  At least the GNU assembler does not\n@@ -6353,23 +6404,24 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n       && current_function_args_info.fp_code != 0)\n     build_mips16_function_stub (file);\n \n-#ifndef FUNCTION_NAME_ALREADY_DECLARED\n-  /* Get the function name the same way that toplev.c does before calling\n-     assemble_start_function.  This is needed so that the name used here\n-     exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n-  fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n-\n-  if (!flag_inhibit_size_directive)\n+  if (!FUNCTION_NAME_ALREADY_DECLARED)\n     {\n-      fputs (\"\\t.ent\\t\", file);\n+      /* Get the function name the same way that toplev.c does before calling\n+\t assemble_start_function.  This is needed so that the name used here\n+\t exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n+      fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+\n+      if (!flag_inhibit_size_directive)\n+\t{\n+\t  fputs (\"\\t.ent\\t\", file);\n+\t  assemble_name (file, fnname);\n+\t  fputs (\"\\n\", file);\n+\t}\n+\n       assemble_name (file, fnname);\n-      fputs (\"\\n\", file);\n+      fputs (\":\\n\", file);\n     }\n \n-  assemble_name (file, fnname);\n-  fputs (\":\\n\", file);\n-#endif\n-\n   if (!flag_inhibit_size_directive)\n     {\n       /* .frame FRAMEREG, FRAMESIZE, RETREG */\n@@ -6627,8 +6679,7 @@ mips_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n       set_noreorder = set_nomacro = 0;\n     }\n \n-#ifndef FUNCTION_NAME_ALREADY_DECLARED\n-  if (!flag_inhibit_size_directive)\n+  if (!FUNCTION_NAME_ALREADY_DECLARED && !flag_inhibit_size_directive)\n     {\n       const char *fnname;\n \n@@ -6640,7 +6691,6 @@ mips_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n       assemble_name (file, fnname);\n       fputs (\"\\n\", file);\n     }\n-#endif\n \n   while (string_constants != NULL)\n     {\n@@ -7521,11 +7571,12 @@ build_mips16_function_stub (FILE *file)\n \n   /* ??? If FUNCTION_NAME_ALREADY_DECLARED is defined, then we are\n      within a .ent, and we can not emit another .ent.  */\n-#ifndef FUNCTION_NAME_ALREADY_DECLARED\n-  fputs (\"\\t.ent\\t\", file);\n-  assemble_name (file, stubname);\n-  fputs (\"\\n\", file);\n-#endif\n+  if (!FUNCTION_NAME_ALREADY_DECLARED)\n+    {\n+      fputs (\"\\t.ent\\t\", file);\n+      assemble_name (file, stubname);\n+      fputs (\"\\n\", file);\n+    }\n \n   assemble_name (file, stubname);\n   fputs (\":\\n\", file);\n@@ -7551,11 +7602,12 @@ build_mips16_function_stub (FILE *file)\n \n   fprintf (file, \"\\t.set\\treorder\\n\");\n \n-#ifndef FUNCTION_NAME_ALREADY_DECLARED\n-  fputs (\"\\t.end\\t\", file);\n-  assemble_name (file, stubname);\n-  fputs (\"\\n\", file);\n-#endif\n+  if (!FUNCTION_NAME_ALREADY_DECLARED)\n+    {\n+      fputs (\"\\t.end\\t\", file);\n+      assemble_name (file, stubname);\n+      fputs (\"\\n\", file);\n+    }\n \n   fprintf (file, \"\\t.set\\tmips16\\n\");\n \n@@ -7750,14 +7802,15 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n       fprintf (asm_out_file, \"\\t.set\\tnomips16\\n\");\n       assemble_start_function (stubdecl, stubname);\n \n-#ifndef FUNCTION_NAME_ALREADY_DECLARED\n-      fputs (\"\\t.ent\\t\", asm_out_file);\n-      assemble_name (asm_out_file, stubname);\n-      fputs (\"\\n\", asm_out_file);\n+      if (!FUNCTION_NAME_ALREADY_DECLARED)\n+\t{\n+\t  fputs (\"\\t.ent\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, stubname);\n+\t  fputs (\"\\n\", asm_out_file);\n \n-      assemble_name (asm_out_file, stubname);\n-      fputs (\":\\n\", asm_out_file);\n-#endif\n+\t  assemble_name (asm_out_file, stubname);\n+\t  fputs (\":\\n\", asm_out_file);\n+\t}\n \n       /* We build the stub code by hand.  That's the only way we can\n \t do it, since we can't generate 32 bit code during a 16 bit\n@@ -7824,11 +7877,12 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n       ASM_DECLARE_FUNCTION_SIZE (asm_out_file, stubname, stubdecl);\n #endif\n \n-#ifndef FUNCTION_NAME_ALREADY_DECLARED\n-      fputs (\"\\t.end\\t\", asm_out_file);\n-      assemble_name (asm_out_file, stubname);\n-      fputs (\"\\n\", asm_out_file);\n-#endif\n+      if (!FUNCTION_NAME_ALREADY_DECLARED)\n+\t{\n+\t  fputs (\"\\t.end\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, stubname);\n+\t  fputs (\"\\n\", asm_out_file);\n+\t}\n \n       fprintf (asm_out_file, \"\\t.set\\tmips16\\n\");\n \n@@ -9222,11 +9276,11 @@ mips_emit_prefetch (rtx *operands)\n \n \n \f\n-#ifdef TARGET_IRIX6\n+#if TARGET_IRIX\n /* Output assembly to switch to section NAME with attribute FLAGS.  */\n \n static void\n-iris6_asm_named_section_1 (const char *name, unsigned int flags,\n+irix_asm_named_section_1 (const char *name, unsigned int flags,\n \t\t\t   unsigned int align)\n {\n   unsigned int sh_type, sh_flags, sh_entsize;\n@@ -9259,92 +9313,103 @@ iris6_asm_named_section_1 (const char *name, unsigned int flags,\n }\n \n static void\n-iris6_asm_named_section (const char *name, unsigned int flags)\n+irix_asm_named_section (const char *name, unsigned int flags)\n {\n-  iris6_asm_named_section_1 (name, flags, 0);\n+  if (TARGET_SGI_O32_AS)\n+    default_no_named_section (name, flags);\n+  else if (mips_abi == ABI_32 && TARGET_GAS)\n+    default_elf_asm_named_section (name, flags);\n+  else\n+    irix_asm_named_section_1 (name, flags, 0);\n }\n \n /* In addition to emitting a .align directive, record the maximum\n    alignment requested for the current section.  */\n \n-struct GTY (()) iris_section_align_entry\n+struct GTY (()) irix_section_align_entry\n {\n   const char *name;\n   unsigned int log;\n   unsigned int flags;\n };\n \n-static htab_t iris_section_align_htab;\n-static FILE *iris_orig_asm_out_file;\n+static htab_t irix_section_align_htab;\n+static FILE *irix_orig_asm_out_file;\n \n static int\n-iris_section_align_entry_eq (const void *p1, const void *p2)\n+irix_section_align_entry_eq (const void *p1, const void *p2)\n {\n-  const struct iris_section_align_entry *old = p1;\n+  const struct irix_section_align_entry *old = p1;\n   const char *new = p2;\n \n   return strcmp (old->name, new) == 0;\n }\n \n static hashval_t\n-iris_section_align_entry_hash (const void *p)\n+irix_section_align_entry_hash (const void *p)\n {\n-  const struct iris_section_align_entry *old = p;\n+  const struct irix_section_align_entry *old = p;\n   return htab_hash_string (old->name);\n }\n \n void\n-iris6_asm_output_align (FILE *file, unsigned int log)\n+irix_asm_output_align (FILE *file, unsigned int log)\n {\n   const char *section = current_section_name ();\n-  struct iris_section_align_entry **slot, *entry;\n-\n-  if (! section)\n-    abort ();\n+  struct irix_section_align_entry **slot, *entry;\n \n-  slot = (struct iris_section_align_entry **)\n-    htab_find_slot_with_hash (iris_section_align_htab, section,\n-\t\t\t      htab_hash_string (section), INSERT);\n-  entry = *slot;\n-  if (! entry)\n+  if (mips_abi != ABI_32)\n     {\n-      entry = (struct iris_section_align_entry *)\n-\txmalloc (sizeof (struct iris_section_align_entry));\n-      *slot = entry;\n-      entry->name = section;\n-      entry->log = log;\n-      entry->flags = current_section_flags ();\n+      if (! section)\n+\tabort ();\n+\n+      slot = (struct irix_section_align_entry **)\n+\thtab_find_slot_with_hash (irix_section_align_htab, section,\n+\t\t\t\t  htab_hash_string (section), INSERT);\n+      entry = *slot;\n+      if (! entry)\n+\t{\n+\t  entry = (struct irix_section_align_entry *)\n+\t    xmalloc (sizeof (struct irix_section_align_entry));\n+\t  *slot = entry;\n+\t  entry->name = section;\n+\t  entry->log = log;\n+\t  entry->flags = current_section_flags ();\n+\t}\n+      else if (entry->log < log)\n+\tentry->log = log;\n     }\n-  else if (entry->log < log)\n-    entry->log = log;\n \n   fprintf (file, \"\\t.align\\t%u\\n\", log);\n }\n \n-/* The Iris assembler does not record alignment from .align directives,\n+/* The IRIX assembler does not record alignment from .align directives,\n    but takes it from the first .section directive seen.  Play file\n    switching games so that we can emit a .section directive at the\n    beginning of the file with the proper alignment attached.  */\n \n static void\n-iris6_file_start (void)\n+irix_file_start (void)\n {\n   mips_file_start ();\n \n-  iris_orig_asm_out_file = asm_out_file;\n+  if (mips_abi == ABI_32)\n+    return;\n+\n+  irix_orig_asm_out_file = asm_out_file;\n   asm_out_file = tmpfile ();\n \n-  iris_section_align_htab = htab_create (31, iris_section_align_entry_hash,\n-\t\t\t\t\t iris_section_align_entry_eq, NULL);\n+  irix_section_align_htab = htab_create (31, irix_section_align_entry_hash,\n+\t\t\t\t\t irix_section_align_entry_eq, NULL);\n }\n \n static int\n-iris6_section_align_1 (void **slot, void *data ATTRIBUTE_UNUSED)\n+irix_section_align_1 (void **slot, void *data ATTRIBUTE_UNUSED)\n {\n-  const struct iris_section_align_entry *entry\n-    = *(const struct iris_section_align_entry **) slot;\n+  const struct irix_section_align_entry *entry\n+    = *(const struct irix_section_align_entry **) slot;\n \n-  iris6_asm_named_section_1 (entry->name, entry->flags, 1 << entry->log);\n+  irix_asm_named_section_1 (entry->name, entry->flags, 1 << entry->log);\n   return 1;\n }\n \n@@ -9369,16 +9434,19 @@ copy_file_data (FILE *to, FILE *from)\n }\n \n static void\n-iris6_file_end (void)\n+irix_file_end (void)\n {\n-  /* Emit section directives with the proper alignment at the top of the\n-     real output file.  */\n-  FILE *temp = asm_out_file;\n-  asm_out_file = iris_orig_asm_out_file;\n-  htab_traverse (iris_section_align_htab, iris6_section_align_1, NULL);\n+  if (mips_abi != ABI_32)\n+    {\n+      /* Emit section directives with the proper alignment at the top of the\n+\t real output file.  */\n+      FILE *temp = asm_out_file;\n+      asm_out_file = irix_orig_asm_out_file;\n+      htab_traverse (irix_section_align_htab, irix_section_align_1, NULL);\n \n-  /* Copy the data emitted to the temp file to the real output file.  */\n-  copy_file_data (asm_out_file, temp);\n+      /* Copy the data emitted to the temp file to the real output file.  */\n+      copy_file_data (asm_out_file, temp);\n+    }\n \n   mips_file_end ();\n }\n@@ -9389,7 +9457,7 @@ iris6_file_end (void)\n    default code.  */\n \n static unsigned int\n-iris6_section_type_flags (tree decl, const char *section, int relocs_p)\n+irix_section_type_flags (tree decl, const char *section, int relocs_p)\n {\n   unsigned int flags;\n \n@@ -9404,7 +9472,6 @@ iris6_section_type_flags (tree decl, const char *section, int relocs_p)\n   return flags;\n }\n \n-\n-#endif /* TARGET_IRIX6 */\n+#endif /* TARGET_IRIX */\n \n #include \"gt-mips.h\""}, {"sha": "0ac04c5e2f3806f40c547622bf566e33235dfe40", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -336,6 +336,11 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n #define TARGET_NEWABI\t\t    (mips_abi == ABI_N32 || mips_abi == ABI_64)\n \n+/* IRIX specific stuff.  */\n+#define TARGET_IRIX\t   0\n+#define TARGET_IRIX5\t   0\n+#define TARGET_SGI_O32_AS  (TARGET_IRIX && mips_abi == ABI_32 && !TARGET_GAS)\n+\n /* Define preprocessor macros for the -march and -mtune options.\n    PREFIX is either _MIPS_ARCH or _MIPS_TUNE, INFO is the selected\n    processor.  If INFO's canonical name is \"foo\", define PREFIX to\n@@ -3276,7 +3281,6 @@ while (0)\n #define ASM_OUTPUT_EXTERNAL(STREAM,DECL,NAME) \\\n   mips_output_external(STREAM,DECL,NAME)\n \n-\n /* This is how to declare a function name.  The actual work of\n    emitting the label is moved to function_prologue, so that we can\n    get the line number correctly emitted before the .ent directive,\n@@ -3286,6 +3290,10 @@ while (0)\n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL)\n \n+#ifndef FUNCTION_NAME_ALREADY_DECLARED\n+#define FUNCTION_NAME_ALREADY_DECLARED 0\n+#endif\n+\n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class."}, {"sha": "d157b3a0ca98bd12e5dab516630de2572c445227", "filename": "gcc/config/mips/t-iris6", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7404d343647db31c167395607e9b5f34093fbc/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=3c7404d343647db31c167395607e9b5f34093fbc", "patch": "@@ -1,10 +1,9 @@\n # ??? If no mabi=X option given, but a mipsX option is, then should deal\n # with that.\n-# ??? mabi=32 is deliberately left off the list because it doesn't work yet.\n-MULTILIB_OPTIONS=mabi=n32/mabi=64\n+MULTILIB_OPTIONS=mabi=32/mabi=n32/mabi=64\n MULTILIB_DIRNAMES=\n MULTILIB_MATCHES=\n-MULTILIB_OSDIRNAMES=. mabi=64\n+MULTILIB_OSDIRNAMES=mabi=32 . mabi=64\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}]}