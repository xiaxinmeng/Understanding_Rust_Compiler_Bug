{"sha": "4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3NjE0ZTlmMTc0MWU2ZDAxYzM1YmExZTQwZTIyZGE0YWJlOTFjZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-12-12T16:41:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-12-12T16:41:15Z"}, "message": "decl.c (grokdeclarator): Allow field with same name as class in extern \"C\".\n\n\t* decl.c (grokdeclarator): Allow field with same name as class\n\tin extern \"C\".\n\t* decl.c (lookup_name_real): Don't limit field lookup to types.\n\t* class.c (check_member_decl_is_same_in_complete_scope): No error\n\tif icv and x are the same.\n\t* lex.c (do_identifier): Tweak error message.\n\nFrom-SVN: r24269", "tree": {"sha": "ca189ed953b571a2b77b7df975656cfd2e91ab68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca189ed953b571a2b77b7df975656cfd2e91ab68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/comments", "author": null, "committer": null, "parents": [{"sha": "d5db8224ad6c2ef118b67e22ec6820b94fa5fbb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5db8224ad6c2ef118b67e22ec6820b94fa5fbb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5db8224ad6c2ef118b67e22ec6820b94fa5fbb2"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "1c3bd37b8412da5c1dc21b16226952f551cec236", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "patch": "@@ -1,3 +1,13 @@\n+1998-12-08  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (grokdeclarator): Allow field with same name as class\n+\tin extern \"C\".\n+\n+\t* decl.c (lookup_name_real): Don't limit field lookup to types.\n+\t* class.c (check_member_decl_is_same_in_complete_scope): No error \n+\tif icv and x are the same.\n+\t* lex.c (do_identifier): Tweak error message.\n+\n 1998-12-10  Mark Mitchell  <mark@markmitchell.com>\n \n \t* decl.c (start_enum): Use push_obstacks, not"}, {"sha": "a73605a96e5df9b7a834119343580eeb2a09a069", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "patch": "@@ -4371,7 +4371,9 @@ check_member_decl_is_same_in_complete_scope (t, x)\n       else\n \ticv = NULL_TREE;\n \n-      if (icv\n+      /* This should match pushdecl_class_level.  */\n+      if (icv && icv != x\n+\t  && flag_optional_diags\n \t  /* Don't complain about constructors.  */\n \t  && name != constructor_name (current_class_type)\n \t  /* Or inherited names.  */"}, {"sha": "c2afcb7d0fcfdf913507de9198421b2982e9e899", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "patch": "@@ -3809,6 +3809,7 @@ pushdecl_class_level (x)\n \t     members are checked in finish_struct.  */\n \t  tree icv = IDENTIFIER_CLASS_VALUE (name);\n \n+\t  /* This should match check_member_decl_is_same_in_complete_scope.  */\n \t  if (icv && icv != x\n \t      && flag_optional_diags\n \t      /* Don't complain about inherited names.  */\n@@ -5191,9 +5192,9 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n       classval = IDENTIFIER_CLASS_VALUE (name);\n       if (classval == NULL_TREE && TYPE_BEING_DEFINED (current_class_type))\n \t/* Try to find values from base classes if we are presently\n-\t   defining a type.  We are presently only interested in\n-\t   TYPE_DECLs.  */\n-\tclassval = lookup_field (current_class_type, name, 0, 1);\n+\t   defining a type.  We are primarily interested in\n+\t   TYPE_DECLs or constants.  */\n+\tclassval = lookup_field (current_class_type, name, 0, prefer_type);\n \n       /* Add implicit 'typename' to types from template bases.  lookup_field\n          will do this for us.  If classval is actually from an enclosing\n@@ -10824,7 +10825,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      }\n \n \t    /* 9.2p13 [class.mem] */\n-\t    if (declarator == constructor_name (current_class_type))\n+\t    if (declarator == constructor_name (current_class_type)\n+\t\t/* Divergence from the standard:  In extern \"C\", we\n+\t\t   allow non-static data members here, because C does\n+\t\t   and /usr/include/netinet/in.h uses that.  */\n+\t\t&& (staticp || current_lang_name != lang_c))\n \t      cp_pedwarn (\"ANSI C++ forbids data member `%D' with same name as enclosing class\",\n \t\t\t  declarator);\n "}, {"sha": "45d3d41c3c9e42850ec9edf67cb7694ed0ffbf07", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7614e9f1741e6d01c35ba1e40e22da4abe91cd/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=4d7614e9f1741e6d01c35ba1e40e22da4abe91cd", "patch": "@@ -2934,8 +2934,7 @@ do_identifier (token, parsing, args)\n \tmy_friendly_abort (61);\n       else\n \t{\n-\t  cp_error (\"invalid use of member `%D' from base class `%T'\", field,\n-\t\t    DECL_FIELD_CONTEXT (field));\n+\t  cp_error (\"invalid use of member `%D'\", field);\n \t  id = error_mark_node;\n \t  return id;\n \t}"}]}