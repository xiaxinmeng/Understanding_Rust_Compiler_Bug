{"sha": "09bf5279e87a15f658e37c7f873ccc40e5ef2576", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliZjUyNzllODdhMTVmNjU4ZTM3YzdmODczY2NjNDBlNWVmMjU3Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-06T20:07:05Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-06T20:09:51Z"}, "message": "i386: Clean up constraints.md\n\nNo functional changes.\n\n2021-06-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/constraints.md (Bs):\n\tRemove boolean operators from match_test RTX.\n\t(Bw): Ditto.\n\t(L): Ditto.\n\t(M): Use \"mode\" variable instead of GET_MODE (op) in match_test RTX.\n\t(Wz): Ditto.", "tree": {"sha": "126c380fa6ebf3b7359e4acd9fcf0f47d263160e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126c380fa6ebf3b7359e4acd9fcf0f47d263160e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09bf5279e87a15f658e37c7f873ccc40e5ef2576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09bf5279e87a15f658e37c7f873ccc40e5ef2576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09bf5279e87a15f658e37c7f873ccc40e5ef2576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09bf5279e87a15f658e37c7f873ccc40e5ef2576/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4b99be48af1c0911ce2a957af20d9cd946f364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4b99be48af1c0911ce2a957af20d9cd946f364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4b99be48af1c0911ce2a957af20d9cd946f364"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "485e3f5b2cf4b5a1f1dd536122f397c3a9cd6080", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09bf5279e87a15f658e37c7f873ccc40e5ef2576/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09bf5279e87a15f658e37c7f873ccc40e5ef2576/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=09bf5279e87a15f658e37c7f873ccc40e5ef2576", "patch": "@@ -198,15 +198,17 @@\n   (ior (and (not (match_test \"TARGET_INDIRECT_BRANCH_REGISTER\"))\n \t    (not (match_test \"TARGET_X32\"))\n \t    (match_operand 0 \"sibcall_memory_operand\"))\n-       (and (match_test \"TARGET_X32 && Pmode == DImode\")\n+       (and (match_test \"TARGET_X32\")\n+\t    (match_test \"Pmode == DImode\")\n \t    (match_operand 0 \"GOT_memory_operand\"))))\n \n (define_constraint \"Bw\"\n   \"@internal Call memory operand.\"\n   (ior (and (not (match_test \"TARGET_INDIRECT_BRANCH_REGISTER\"))\n \t    (not (match_test \"TARGET_X32\"))\n \t    (match_operand 0 \"memory_operand\"))\n-       (and (match_test \"TARGET_X32 && Pmode == DImode\")\n+       (and (match_test \"TARGET_X32\")\n+\t    (match_test \"Pmode == DImode\")\n \t    (match_operand 0 \"GOT_memory_operand\"))))\n \n (define_constraint \"Bz\"\n@@ -239,8 +241,9 @@\n   \"@code{0xFF}, @code{0xFFFF} or @code{0xFFFFFFFF}\n    for AND as a zero-extending move.\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival == 0xff || ival == 0xffff\n-\t\t    || ival == (HOST_WIDE_INT) 0xffffffff\")))\n+       (ior (match_test \"ival == 0xff\")\n+\t    (match_test \"ival == 0xffff\")\n+\t    (match_test \"ival == (HOST_WIDE_INT) 0xffffffff\"))))\n \n (define_constraint \"M\"\n   \"0, 1, 2, or 3 (shifts for the @code{lea} instruction).\"\n@@ -289,14 +292,14 @@\n    to fit that range (for sign-extending conversion operations that\n    require non-VOIDmode immediate operands).\"\n   (and (match_operand 0 \"x86_64_immediate_operand\")\n-       (match_test \"GET_MODE (op) != VOIDmode\")))\n+       (match_test \"mode != VOIDmode\")))\n \n (define_constraint \"Wz\"\n   \"32-bit unsigned integer constant, or a symbolic reference known\n    to fit that range (for zero-extending conversion operations that\n    require non-VOIDmode immediate operands).\"\n   (and (match_operand 0 \"x86_64_zext_immediate_operand\")\n-       (match_test \"GET_MODE (op) != VOIDmode\")))\n+       (match_test \"mode != VOIDmode\")))\n \n (define_constraint \"Wd\"\n   \"128-bit integer constant where both the high and low 64-bit word"}]}