{"sha": "3598da80668da2ebf4098529b8f298800997776c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5OGRhODA2NjhkYTJlYmY0MDk4NTI5YjhmMjk4ODAwOTk3Nzc2Yw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2011-08-15T11:57:33Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2011-08-15T11:57:33Z"}, "message": "re PR target/50022 (\"incorrect condition in IT block\" when building mozilla code base for ARM)\n\n\n\n2011-08-15  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\n\tPR target/50022\n\t* config/arm/arm.c (output_move_double): Add 2 parameters\n\tto count the number of insns emitted and whether to emit or not.\n\tUse the flag to decide when to emit and count number of instructions\n\tthat will be emitted.\n\tHandle case where output_move_double might be called for calculating\n\tlengths with an invalid constant.\n\t(arm_count_output_move_double_insns): Define.\n\t* config/arm/arm-protos.h (arm_count_output_move_double_insns): Declare.\n\t(output_move_double): Adjust prototype.\n\t* config/arm/vfp.md (\"*movdi_vfp\"): Adjust call to\n\toutput_move_double.\n\t(\"*movdi_vfp_cortexa8\"): Likewise and add attribute\n\tfor ce_count.\n\t* config/arm/arm.md (\"*arm_movdi\"): Adjust call to output_move_double.\n\t(\"*movdf_soft_insn\"): Likewise.\n\t* config/arm/cirrus.md (\"*cirrus_arm_movdi\"): Likewise.\n\t(\"*cirrus_thumb2_movdi\"): Likewise.\n\t(\"*thumb2_cirrus_movdf_hard_insn\"): Likewise.\n\t(\"*cirrus_movdf_hard_insn\"): Likewise.\n\t* config/arm/neon.md (*neon_mov<mode> VD): Likewise.\n\t* config/arm/iwmmxt.md (\"*iwmmxt_arm_movdi\"): Likewise.\n\t(\"mov<mode>_internal VMMX\"): Likewise.\n\t* config/arm/fpa.md (*movdf_fpa, *thumb2_movdf_fpa): Likewise.\n\nFrom-SVN: r177759", "tree": {"sha": "e91b0dcd35aaa0b0f0cafdec443fcc708f28854e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e91b0dcd35aaa0b0f0cafdec443fcc708f28854e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3598da80668da2ebf4098529b8f298800997776c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3598da80668da2ebf4098529b8f298800997776c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3598da80668da2ebf4098529b8f298800997776c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3598da80668da2ebf4098529b8f298800997776c/comments", "author": null, "committer": null, "parents": [{"sha": "e7d4e45e2e4f102eb479a56ee73b312c70a4f91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d4e45e2e4f102eb479a56ee73b312c70a4f91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7d4e45e2e4f102eb479a56ee73b312c70a4f91b"}], "stats": {"total": 351, "additions": 260, "deletions": 91}, "files": [{"sha": "32162ecd41fbda8c8eb0cc51190d9952fccd635a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -1,3 +1,30 @@\n+2011-08-15  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tPR target/50022\n+\t* config/arm/arm.c (output_move_double): Add 2 parameters\n+\tto count the number of insns emitted and whether to emit or not.\n+\tUse the flag to decide when to emit and count number of instructions\n+\tthat will be emitted.\n+\tHandle case where output_move_double might be called for calculating\n+\tlengths with an invalid constant.\n+\t(arm_count_output_move_double_insns): Define.\n+\t* config/arm/arm-protos.h (arm_count_output_move_double_insns): Declare.\n+\t(output_move_double): Adjust prototype.\n+\t* config/arm/vfp.md (\"*movdi_vfp\"): Adjust call to\n+\toutput_move_double.\n+\t(\"*movdi_vfp_cortexa8\"): Likewise and add attribute\n+\tfor ce_count.\n+\t* config/arm/arm.md (\"*arm_movdi\"): Adjust call to output_move_double.\n+\t(\"*movdf_soft_insn\"): Likewise.\n+\t* config/arm/cirrus.md (\"*cirrus_arm_movdi\"): Likewise.\n+\t(\"*cirrus_thumb2_movdi\"): Likewise.\n+\t(\"*thumb2_cirrus_movdf_hard_insn\"): Likewise.\n+\t(\"*cirrus_movdf_hard_insn\"): Likewise.\n+\t* config/arm/neon.md (*neon_mov<mode> VD): Likewise.\n+\t* config/arm/iwmmxt.md (\"*iwmmxt_arm_movdi\"): Likewise.\n+\t(\"mov<mode>_internal VMMX\"): Likewise.\n+\t* config/arm/fpa.md (*movdf_fpa, *thumb2_movdf_fpa): Likewise.\n+\n 2011-08-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_expand_round_sse4): New function."}, {"sha": "235370483a1407ea60af75156b4929f27182296d", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -131,8 +131,9 @@ extern const char *output_mov_long_double_arm_from_fpa (rtx *);\n extern const char *output_mov_long_double_arm_from_arm (rtx *);\n extern const char *output_mov_double_fpa_from_arm (rtx *);\n extern const char *output_mov_double_arm_from_fpa (rtx *);\n-extern const char *output_move_double (rtx *);\n+extern const char *output_move_double (rtx *, bool, int *count);\n extern const char *output_move_quad (rtx *);\n+extern int arm_count_output_move_double_insns (rtx *);\n extern const char *output_move_vfp (rtx *operands);\n extern const char *output_move_neon (rtx *operands);\n extern int arm_attr_length_move_neon (rtx);"}, {"sha": "fc2fd474b7cc3027272a66cdee5fbc97c68a596d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 205, "deletions": 73, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -13284,11 +13284,24 @@ output_mov_double_arm_from_fpa (rtx *operands)\n /* Output a move between double words.  It must be REG<-MEM\n    or MEM<-REG.  */\n const char *\n-output_move_double (rtx *operands)\n+output_move_double (rtx *operands, bool emit, int *count)\n {\n   enum rtx_code code0 = GET_CODE (operands[0]);\n   enum rtx_code code1 = GET_CODE (operands[1]);\n   rtx otherops[3];\n+  if (count)\n+    *count = 1;\n+\n+  /* The only case when this might happen is when \n+     you are looking at the length of a DImode instruction\n+     that has an invalid constant in it.  */\n+  if (code0 == REG && code1 != MEM)\n+    {\n+      gcc_assert (!emit);\n+      *count = 2;\n+      return \"\";\n+    }\n+      \n \n   if (code0 == REG)\n     {\n@@ -13301,35 +13314,49 @@ output_move_double (rtx *operands)\n       switch (GET_CODE (XEXP (operands[1], 0)))\n \t{\n \tcase REG:\n-\t  if (TARGET_LDRD\n-\t      && !(fix_cm3_ldrd && reg0 == REGNO(XEXP (operands[1], 0))))\n-\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1]\", operands);\n-\t  else\n-\t    output_asm_insn (\"ldm%(ia%)\\t%m1, %M0\", operands);\n+\n+\t  if (emit)\n+\t    {\n+\t      if (TARGET_LDRD\n+\t\t  && !(fix_cm3_ldrd && reg0 == REGNO(XEXP (operands[1], 0))))\n+\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%m1]\", operands);\n+\t      else\n+\t\toutput_asm_insn (\"ldm%(ia%)\\t%m1, %M0\", operands);\n+\t    }\n \t  break;\n \n \tcase PRE_INC:\n \t  gcc_assert (TARGET_LDRD);\n-\t  output_asm_insn (\"ldr%(d%)\\t%0, [%m1, #8]!\", operands);\n+\t  if (emit)\n+\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1, #8]!\", operands);\n+\t  \n \t  break;\n \n \tcase PRE_DEC:\n-\t  if (TARGET_LDRD)\n-\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1, #-8]!\", operands);\n-\t  else\n-\t    output_asm_insn (\"ldm%(db%)\\t%m1!, %M0\", operands);\n+\t  if (emit)\n+\t    {\n+\t      if (TARGET_LDRD)\n+\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%m1, #-8]!\", operands);\n+\t      else\n+\t\toutput_asm_insn (\"ldm%(db%)\\t%m1!, %M0\", operands);\n+\t    }\n \t  break;\n \n \tcase POST_INC:\n-\t  if (TARGET_LDRD)\n-\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1], #8\", operands);\n-\t  else\n-\t    output_asm_insn (\"ldm%(ia%)\\t%m1!, %M0\", operands);\n+\t  \n+\t  if (emit)\n+\t    {\n+\t      if (TARGET_LDRD)\n+\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%m1], #8\", operands);\n+\t      else\n+\t\toutput_asm_insn (\"ldm%(ia%)\\t%m1!, %M0\", operands);\n+\t    }\n \t  break;\n \n \tcase POST_DEC:\n \t  gcc_assert (TARGET_LDRD);\n-\t  output_asm_insn (\"ldr%(d%)\\t%0, [%m1], #-8\", operands);\n+\t  if (emit)\n+\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1], #-8\", operands);\n \t  break;\n \n \tcase PRE_MODIFY:\n@@ -13347,8 +13374,13 @@ output_move_double (rtx *operands)\n \t      if (reg_overlap_mentioned_p (otherops[0], otherops[2]))\n \t\t{\n \t\t  /* Registers overlap so split out the increment.  */\n-\t\t  output_asm_insn (\"add%?\\t%1, %1, %2\", otherops);\n-\t\t  output_asm_insn (\"ldr%(d%)\\t%0, [%1] @split\", otherops);\n+\t\t  if (emit)\n+\t\t    {\n+\t\t      output_asm_insn (\"add%?\\t%1, %1, %2\", otherops);\n+\t\t      output_asm_insn (\"ldr%(d%)\\t%0, [%1] @split\", otherops);\n+\t\t    }\n+\t\t  if (count)\n+\t\t    *count = 2;\n \t\t}\n \t      else\n \t\t{\n@@ -13359,11 +13391,20 @@ output_move_double (rtx *operands)\n \t\t      || GET_CODE (otherops[2]) != CONST_INT\n \t\t      || (INTVAL (otherops[2]) > -256\n \t\t\t  && INTVAL (otherops[2]) < 256))\n-\t\t    output_asm_insn (\"ldr%(d%)\\t%0, [%1, %2]!\", otherops);\n+\t\t    {\n+\t\t      if (emit)\n+\t\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%1, %2]!\", otherops);\n+\t\t    }\n \t\t  else\n \t\t    {\n-\t\t      output_asm_insn (\"ldr%?\\t%0, [%1, %2]!\", otherops);\n-\t\t      output_asm_insn (\"ldr%?\\t%H0, [%1, #4]\", otherops);\n+\t\t      if (emit)\n+\t\t\t{\n+\t\t\t  output_asm_insn (\"ldr%?\\t%0, [%1, %2]!\", otherops);\n+\t\t\t  output_asm_insn (\"ldr%?\\t%H0, [%1, #4]\", otherops);\n+\t\t\t}\n+\t\t      if (count)\n+\t\t\t*count = 2;\n+\n \t\t    }\n \t\t}\n \t    }\n@@ -13376,11 +13417,19 @@ output_move_double (rtx *operands)\n \t\t  || GET_CODE (otherops[2]) != CONST_INT\n \t\t  || (INTVAL (otherops[2]) > -256\n \t\t      && INTVAL (otherops[2]) < 256))\n-\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%1], %2\", otherops);\n+\t\t{\n+\t\t  if (emit)\n+\t\t    output_asm_insn (\"ldr%(d%)\\t%0, [%1], %2\", otherops);\n+\t\t}\n \t      else\n \t\t{\n-\t\t  output_asm_insn (\"ldr%?\\t%H0, [%1, #4]\", otherops);\n-\t\t  output_asm_insn (\"ldr%?\\t%0, [%1], %2\", otherops);\n+\t\t  if (emit)\n+\t\t    {\n+\t\t      output_asm_insn (\"ldr%?\\t%H0, [%1, #4]\", otherops);\n+\t\t      output_asm_insn (\"ldr%?\\t%0, [%1], %2\", otherops);\n+\t\t    }\n+\t\t  if (count)\n+\t\t    *count = 2;\n \t\t}\n \t    }\n \t  break;\n@@ -13393,12 +13442,19 @@ output_move_double (rtx *operands)\n \t  /* Use the second register of the pair to avoid problematic\n \t     overlap.  */\n \t  otherops[1] = operands[1];\n-\t  output_asm_insn (\"adr%?\\t%0, %1\", otherops);\n+\t  if (emit)\n+\t    output_asm_insn (\"adr%?\\t%0, %1\", otherops);\n \t  operands[1] = otherops[0];\n-\t  if (TARGET_LDRD)\n-\t    output_asm_insn (\"ldr%(d%)\\t%0, [%1]\", operands);\n-\t  else\n-\t    output_asm_insn (\"ldm%(ia%)\\t%1, %M0\", operands);\n+\t  if (emit)\n+\t    {\n+\t      if (TARGET_LDRD)\n+\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%1]\", operands);\n+\t      else\n+\t\toutput_asm_insn (\"ldm%(ia%)\\t%1, %M0\", operands);\n+\t    }\n+\n+\t  if (count)\n+\t    *count = 2;\n \t  break;\n \n \t  /* ??? This needs checking for thumb2.  */\n@@ -13417,17 +13473,20 @@ output_move_double (rtx *operands)\n \t\t      switch ((int) INTVAL (otherops[2]))\n \t\t\t{\n \t\t\tcase -8:\n-\t\t\t  output_asm_insn (\"ldm%(db%)\\t%1, %M0\", otherops);\n+\t\t\t  if (emit)\n+\t\t\t    output_asm_insn (\"ldm%(db%)\\t%1, %M0\", otherops);\n \t\t\t  return \"\";\n \t\t\tcase -4:\n \t\t\t  if (TARGET_THUMB2)\n \t\t\t    break;\n-\t\t\t  output_asm_insn (\"ldm%(da%)\\t%1, %M0\", otherops);\n+\t\t\t  if (emit)\n+\t\t\t    output_asm_insn (\"ldm%(da%)\\t%1, %M0\", otherops);\n \t\t\t  return \"\";\n \t\t\tcase 4:\n \t\t\t  if (TARGET_THUMB2)\n \t\t\t    break;\n-\t\t\t  output_asm_insn (\"ldm%(ib%)\\t%1, %M0\", otherops);\n+\t\t\t  if (emit)\n+\t\t\t    output_asm_insn (\"ldm%(ib%)\\t%1, %M0\", otherops);\n \t\t\t  return \"\";\n \t\t\t}\n \t\t    }\n@@ -13455,48 +13514,75 @@ output_move_double (rtx *operands)\n \t\t      if (reg_overlap_mentioned_p (operands[0], otherops[2])\n \t\t\t  || (fix_cm3_ldrd && reg0 == REGNO (otherops[1])))\n \t\t\t{\n-\t\t\t  output_asm_insn (\"add%?\\t%0, %1, %2\", otherops);\n-\t\t\t  output_asm_insn (\"ldr%(d%)\\t%0, [%1]\", operands);\n+\t\t\t  if (emit)\n+\t\t\t    {\n+\t\t\t      output_asm_insn (\"add%?\\t%0, %1, %2\", otherops);\n+\t\t\t      output_asm_insn (\"ldr%(d%)\\t%0, [%1]\", operands);\n+\t\t\t    }\n+\t\t\t  if (count)\n+\t\t\t    *count = 2;\n \t\t\t}\n \t\t      else\n \t\t\t{\n \t\t\t  otherops[0] = operands[0];\n-\t\t\t  output_asm_insn (\"ldr%(d%)\\t%0, [%1, %2]\", otherops);\n+\t\t\t  if (emit)\n+\t\t\t    output_asm_insn (\"ldr%(d%)\\t%0, [%1, %2]\", otherops);\n \t\t\t}\n \t\t      return \"\";\n \t\t    }\n \n \t\t  if (GET_CODE (otherops[2]) == CONST_INT)\n+\t\t    {\t\t\t\t\t\t\t\n+\t\t      if (emit)\n+\t\t\t{\n+\t\t\t  if (!(const_ok_for_arm (INTVAL (otherops[2]))))\n+\t\t\t    output_asm_insn (\"sub%?\\t%0, %1, #%n2\", otherops);\n+\t\t\t  else\n+\t\t\t    output_asm_insn (\"add%?\\t%0, %1, %2\", otherops);\n+\t\t\t}\n+\t\t\t\n+\t\t    }\n+\t\t  else\n \t\t    {\n-\t\t      if (!(const_ok_for_arm (INTVAL (otherops[2]))))\n-\t\t\toutput_asm_insn (\"sub%?\\t%0, %1, #%n2\", otherops);\n-\t\t      else\n+\t\t      if (emit)\n \t\t\toutput_asm_insn (\"add%?\\t%0, %1, %2\", otherops);\n \t\t    }\n-\t\t  else\n-\t\t    output_asm_insn (\"add%?\\t%0, %1, %2\", otherops);\n \t\t}\n \t      else\n-\t\toutput_asm_insn (\"sub%?\\t%0, %1, %2\", otherops);\n+\t\t{\n+\t\t  if (emit)\n+\t\t    output_asm_insn (\"sub%?\\t%0, %1, %2\", otherops);\n+\t\t}\n \n \t      if (TARGET_LDRD)\n \t\treturn \"ldr%(d%)\\t%0, [%1]\";\n-\n-\t      return \"ldm%(ia%)\\t%1, %M0\";\n+\t      \n+\t\treturn \"ldm%(ia%)\\t%1, %M0\";\n \t    }\n \t  else\n \t    {\n \t      otherops[1] = adjust_address (operands[1], SImode, 4);\n \t      /* Take care of overlapping base/data reg.  */\n \t      if (reg_mentioned_p (operands[0], operands[1]))\n \t\t{\n-\t\t  output_asm_insn (\"ldr%?\\t%0, %1\", otherops);\n-\t\t  output_asm_insn (\"ldr%?\\t%0, %1\", operands);\n+\t\t  if (emit)\n+\t\t    {\n+\t\t      output_asm_insn (\"ldr%?\\t%0, %1\", otherops);\n+\t\t      output_asm_insn (\"ldr%?\\t%0, %1\", operands);\n+\t\t    }\n+\t\t  if (count)\n+\t\t    *count = 2;\n+\n \t\t}\n \t      else\n \t\t{\n-\t\t  output_asm_insn (\"ldr%?\\t%0, %1\", operands);\n-\t\t  output_asm_insn (\"ldr%?\\t%0, %1\", otherops);\n+\t\t  if (emit)\n+\t\t    {\n+\t\t      output_asm_insn (\"ldr%?\\t%0, %1\", operands);\n+\t\t      output_asm_insn (\"ldr%?\\t%0, %1\", otherops);\n+\t\t    }\n+\t\t  if (count)\n+\t\t    *count = 2;\n \t\t}\n \t    }\n \t}\n@@ -13510,34 +13596,45 @@ output_move_double (rtx *operands)\n       switch (GET_CODE (XEXP (operands[0], 0)))\n         {\n \tcase REG:\n-\t  if (TARGET_LDRD)\n-\t    output_asm_insn (\"str%(d%)\\t%1, [%m0]\", operands);\n-\t  else\n-\t    output_asm_insn (\"stm%(ia%)\\t%m0, %M1\", operands);\n+\t  if (emit)\n+\t    {\n+\t      if (TARGET_LDRD)\n+\t\toutput_asm_insn (\"str%(d%)\\t%1, [%m0]\", operands);\n+\t      else\n+\t\toutput_asm_insn (\"stm%(ia%)\\t%m0, %M1\", operands);\n+\t    }\n \t  break;\n \n         case PRE_INC:\n \t  gcc_assert (TARGET_LDRD);\n-\t  output_asm_insn (\"str%(d%)\\t%1, [%m0, #8]!\", operands);\n+\t  if (emit)\n+\t    output_asm_insn (\"str%(d%)\\t%1, [%m0, #8]!\", operands);\n \t  break;\n \n         case PRE_DEC:\n-\t  if (TARGET_LDRD)\n-\t    output_asm_insn (\"str%(d%)\\t%1, [%m0, #-8]!\", operands);\n-\t  else\n-\t    output_asm_insn (\"stm%(db%)\\t%m0!, %M1\", operands);\n+\t  if (emit)\n+\t    {\n+\t      if (TARGET_LDRD)\n+\t\toutput_asm_insn (\"str%(d%)\\t%1, [%m0, #-8]!\", operands);\n+\t      else\n+\t\toutput_asm_insn (\"stm%(db%)\\t%m0!, %M1\", operands);\n+\t    }\n \t  break;\n \n         case POST_INC:\n-\t  if (TARGET_LDRD)\n-\t    output_asm_insn (\"str%(d%)\\t%1, [%m0], #8\", operands);\n-\t  else\n-\t    output_asm_insn (\"stm%(ia%)\\t%m0!, %M1\", operands);\n+\t  if (emit)\n+\t    {\n+\t      if (TARGET_LDRD)\n+\t\toutput_asm_insn (\"str%(d%)\\t%1, [%m0], #8\", operands);\n+\t      else\n+\t\toutput_asm_insn (\"stm%(ia%)\\t%m0!, %M1\", operands);\n+\t    }\n \t  break;\n \n         case POST_DEC:\n \t  gcc_assert (TARGET_LDRD);\n-\t  output_asm_insn (\"str%(d%)\\t%1, [%m0], #-8\", operands);\n+\t  if (emit)\n+\t    output_asm_insn (\"str%(d%)\\t%1, [%m0], #-8\", operands);\n \t  break;\n \n \tcase PRE_MODIFY:\n@@ -13555,19 +13652,35 @@ output_move_double (rtx *operands)\n \t    {\n \t      if (GET_CODE (XEXP (operands[0], 0)) == PRE_MODIFY)\n \t\t{\n-\t\t  output_asm_insn (\"str%?\\t%0, [%1, %2]!\", otherops);\n-\t\t  output_asm_insn (\"str%?\\t%H0, [%1, #4]\", otherops);\n+\t\t  if (emit)\n+\t\t    {\n+\t\t      output_asm_insn (\"str%?\\t%0, [%1, %2]!\", otherops);\n+\t\t      output_asm_insn (\"str%?\\t%H0, [%1, #4]\", otherops);\n+\t\t    }\n+\t\t  if (count)\n+\t\t    *count = 2;\n \t\t}\n \t      else\n \t\t{\n-\t\t  output_asm_insn (\"str%?\\t%H0, [%1, #4]\", otherops);\n-\t\t  output_asm_insn (\"str%?\\t%0, [%1], %2\", otherops);\n+\t\t  if (emit)\n+\t\t    {\n+\t\t      output_asm_insn (\"str%?\\t%H0, [%1, #4]\", otherops);\n+\t\t      output_asm_insn (\"str%?\\t%0, [%1], %2\", otherops);\n+\t\t    }\n+\t\t  if (count)\n+\t\t    *count = 2;\n \t\t}\n \t    }\n \t  else if (GET_CODE (XEXP (operands[0], 0)) == PRE_MODIFY)\n-\t    output_asm_insn (\"str%(d%)\\t%0, [%1, %2]!\", otherops);\n+\t    {\n+\t      if (emit)\n+\t\toutput_asm_insn (\"str%(d%)\\t%0, [%1, %2]!\", otherops);\n+\t    }\n \t  else\n-\t    output_asm_insn (\"str%(d%)\\t%0, [%1], %2\", otherops);\n+\t    {\n+\t      if (emit)\n+\t\toutput_asm_insn (\"str%(d%)\\t%0, [%1], %2\", otherops);\n+\t    }\n \t  break;\n \n \tcase PLUS:\n@@ -13577,19 +13690,22 @@ output_move_double (rtx *operands)\n \t      switch ((int) INTVAL (XEXP (XEXP (operands[0], 0), 1)))\n \t\t{\n \t\tcase -8:\n-\t\t  output_asm_insn (\"stm%(db%)\\t%m0, %M1\", operands);\n+\t\t  if (emit)\n+\t\t    output_asm_insn (\"stm%(db%)\\t%m0, %M1\", operands);\n \t\t  return \"\";\n \n \t\tcase -4:\n \t\t  if (TARGET_THUMB2)\n \t\t    break;\n-\t\t  output_asm_insn (\"stm%(da%)\\t%m0, %M1\", operands);\n+\t\t  if (emit)\n+\t\t    output_asm_insn (\"stm%(da%)\\t%m0, %M1\", operands);\n \t\t  return \"\";\n \n \t\tcase 4:\n \t\t  if (TARGET_THUMB2)\n \t\t    break;\n-\t\t  output_asm_insn (\"stm%(ib%)\\t%m0, %M1\", operands);\n+\t\t  if (emit)\n+\t\t    output_asm_insn (\"stm%(ib%)\\t%m0, %M1\", operands);\n \t\t  return \"\";\n \t\t}\n \t    }\n@@ -13602,16 +13718,23 @@ output_move_double (rtx *operands)\n \t    {\n \t      otherops[0] = operands[1];\n \t      otherops[1] = XEXP (XEXP (operands[0], 0), 0);\n-\t      output_asm_insn (\"str%(d%)\\t%0, [%1, %2]\", otherops);\n+\t      if (emit)\n+\t\toutput_asm_insn (\"str%(d%)\\t%0, [%1, %2]\", otherops);\n \t      return \"\";\n \t    }\n \t  /* Fall through */\n \n         default:\n \t  otherops[0] = adjust_address (operands[0], SImode, 4);\n \t  otherops[1] = operands[1];\n-\t  output_asm_insn (\"str%?\\t%1, %0\", operands);\n-\t  output_asm_insn (\"str%?\\t%H1, %0\", otherops);\n+\t  if (emit)\n+\t    {\n+\t      output_asm_insn (\"str%?\\t%1, %0\", operands);\n+\t      output_asm_insn (\"str%?\\t%H1, %0\", otherops);\n+\t    }\n+\t  if (count)\n+\t    *count = 2;\n+\n \t}\n     }\n \n@@ -24205,4 +24328,13 @@ arm_attr_length_push_multi(rtx parallel_op, rtx first_op)\n   return 4;\n }\n \n+/* Compute the number of instructions emitted by output_move_double.  */\n+int\n+arm_count_output_move_double_insns (rtx *operands)\n+{\n+  int count;\n+  output_move_double (operands, false, &count);\n+  return count;\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "4cbd5e563ad582a30a68a4df27ac8210a9522a53", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -4981,7 +4981,7 @@\n     case 2:\n       return \\\"#\\\";\n     default:\n-      return output_move_double (operands);\n+      return output_move_double (operands, true, NULL);\n     }\n   \"\n   [(set_attr \"length\" \"8,12,16,8,8\")\n@@ -6341,7 +6341,7 @@\n     case 2:\n       return \\\"#\\\";\n     default:\n-      return output_move_double (operands);\n+      return output_move_double (operands, true, NULL);\n     }\n   \"\n   [(set_attr \"length\" \"8,12,16,8,8\")"}, {"sha": "bfd2bb852635e3113f7bf431f6de6b4f909991d4", "filename": "gcc/config/arm/cirrus.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Fcirrus.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Fcirrus.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcirrus.md?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -1,4 +1,4 @@\n-;; Cirrus EP9312 \"Maverick\" ARM floating point co-processor description.\n+;; CIRRUS EP9312 \"Maverick\" ARM floating point co-processor description.\n ;; Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n ;; Contributed by Red Hat.\n ;; Written by Aldy Hernandez (aldyh@redhat.com)\n@@ -379,7 +379,7 @@\n       return \\\"#\\\";\n     case 1:\n     case 2:\n-      return output_move_double (operands);\n+      return output_move_double (operands, true, NULL);\n \n     case 3: return \\\"cfmv64lr%?\\\\t%V0, %Q1\\;cfmv64hr%?\\\\t%V0, %R1\\\";\n     case 4: return \\\"cfmvr64l%?\\\\t%Q0, %V1\\;cfmvr64h%?\\\\t%R0, %V1\\\";\n@@ -439,7 +439,7 @@\n     case 0: return \\\"ldm%?ia\\\\t%m1, %M0\\\\t%@ double\\\";\n     case 1: return \\\"stm%?ia\\\\t%m0, %M1\\\\t%@ double\\\";\n     case 2: return \\\"#\\\";\n-    case 3: case 4: return output_move_double (operands);\n+    case 3: case 4: return output_move_double (operands, true, NULL);\n     case 5: return \\\"cfcpyd%?\\\\t%V0, %V1\\\";\n     case 6: return \\\"cfldrd%?\\\\t%V0, %1\\\";\n     case 7: return \\\"cfmvdlr\\\\t%V0, %Q1\\;cfmvdhr%?\\\\t%V0, %R1\\\";\n@@ -466,7 +466,7 @@\n     case 0:\n     case 1:\n     case 2:\n-      return (output_move_double (operands));\n+      return (output_move_double (operands, true, NULL));\n \n     case 3: return \\\"cfmv64lr%?\\\\t%V0, %Q1\\;cfmv64hr%?\\\\t%V0, %R1\\\";\n     case 4: return \\\"cfmvr64l%?\\\\t%Q0, %V1\\;cfmvr64h%?\\\\t%R0, %V1\\\";\n@@ -522,7 +522,7 @@\n     {\n     case 0: return \\\"ldm%?ia\\\\t%m1, %M0\\\\t%@ double\\\";\n     case 1: return \\\"stm%?ia\\\\t%m0, %M1\\\\t%@ double\\\";\n-    case 2: case 3: case 4: return output_move_double (operands);\n+    case 2: case 3: case 4: return output_move_double (operands, true, NULL);\n     case 5: return \\\"cfcpyd%?\\\\t%V0, %V1\\\";\n     case 6: return \\\"cfldrd%?\\\\t%V0, %1\\\";\n     case 7: return \\\"cfmvdlr\\\\t%V0, %Q1\\;cfmvdhr%?\\\\t%V0, %R1\\\";"}, {"sha": "f2113a98458f849340898bbc8c728d52c4f21b0e", "filename": "gcc/config/arm/fpa.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Ffpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Ffpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffpa.md?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -567,7 +567,7 @@\n     case 0: return \\\"ldm%(ia%)\\\\t%m1, %M0\\\\t%@ double\\\";\n     case 1: return \\\"stm%(ia%)\\\\t%m0, %M1\\\\t%@ double\\\";\n     case 2: return \\\"#\\\";\n-    case 3: case 4: return output_move_double (operands);\n+    case 3: case 4: return output_move_double (operands, true, NULL);\n     case 5: return \\\"mvf%?d\\\\t%0, %1\\\";\n     case 6: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n     case 7: return \\\"ldf%?d\\\\t%0, %1\\\";\n@@ -657,7 +657,7 @@\n     default:\n     case 0: return \\\"ldm%(ia%)\\\\t%m1, %M0\\\\t%@ double\\\";\n     case 1: return \\\"stm%(ia%)\\\\t%m0, %M1\\\\t%@ double\\\";\n-    case 2: case 3: case 4: return output_move_double (operands);\n+    case 2: case 3: case 4: return output_move_double (operands, true, NULL);\n     case 5: return \\\"mvf%?d\\\\t%0, %1\\\";\n     case 6: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n     case 7: return \\\"ldf%?d\\\\t%0, %1\\\";"}, {"sha": "bc0b80defc958970e0fa11c6a2791938a871a865", "filename": "gcc/config/arm/iwmmxt.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiwmmxt.md?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -76,7 +76,7 @@\n   switch (which_alternative)\n     {\n     default:\n-      return output_move_double (operands);\n+      return output_move_double (operands, true, NULL);\n     case 0:\n       return \\\"#\\\";\n     case 3:\n@@ -173,7 +173,7 @@\n    case 3: return \\\"tmrrc%?\\\\t%Q0, %R0, %1\\\";\n    case 4: return \\\"tmcrr%?\\\\t%0, %Q1, %R1\\\";\n    case 5: return \\\"#\\\";\n-   default: return output_move_double (operands);\n+   default: return output_move_double (operands, true, NULL);\n    }\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"length\"         \"4,     4,   4,4,4,8,   8,8\")"}, {"sha": "24dd9419bec16646595981d03d7f36e39bdd2904", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -190,7 +190,7 @@\n     case 2: gcc_unreachable ();\n     case 4: return \"vmov\\t%Q0, %R0, %P1  @ <mode>\";\n     case 5: return \"vmov\\t%P0, %Q1, %R1  @ <mode>\";\n-    default: return output_move_double (operands);\n+    default: return output_move_double (operands, true, NULL);\n     }\n }\n  [(set_attr \"neon_type\" \"neon_int_1,*,neon_vmov,*,neon_mrrc,neon_mcr_2_mcrr,*,*,*\")"}, {"sha": "991b5174cf8a183a9a7c634c54056b8dc8a9b5dd", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3598da80668da2ebf4098529b8f298800997776c/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=3598da80668da2ebf4098529b8f298800997776c", "patch": "@@ -150,7 +150,7 @@\n     case 4:\n     case 5:\n     case 6:\n-      return output_move_double (operands);\n+      return output_move_double (operands, true, NULL);\n     case 7:\n       return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n     case 8:\n@@ -199,7 +199,7 @@\n     case 4:\n     case 5:\n     case 6:\n-      return output_move_double (operands);\n+      return output_move_double (operands, true, NULL);\n     case 7:\n       return \\\"fmdrr%?\\\\t%P0, %Q1, %R1\\\\t%@ int\\\";\n     case 8:\n@@ -213,10 +213,19 @@\n     }\n   \"\n   [(set_attr \"type\" \"*,*,*,*,load2,load2,store2,r_2_f,f_2_r,ffarithd,f_loadd,f_stored\")\n-   (set_attr \"length\" \"4,8,12,16,8,8,8,4,4,4,4,4\")\n+   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"1\") (const_int 8)\n+                               (eq_attr \"alternative\" \"2\") (const_int 12)\n+                               (eq_attr \"alternative\" \"3\") (const_int 16)\n+                               (eq_attr \"alternative\" \"4,5,6\") \n+\t\t\t       (symbol_ref \n+\t\t\t\t\"arm_count_output_move_double_insns (operands) \\\n+                                 * 4\")]\n+                              (const_int 4)))\n    (set_attr \"predicable\"    \"yes\")\n    (set_attr \"pool_range\"     \"*,*,*,*,1020,4096,*,*,*,*,1020,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,*,1008,0,*,*,*,*,1008,*\")\n+   (set (attr \"ce_count\") \n+\t(symbol_ref \"get_attr_length (insn) / 4\"))\n    (set_attr \"arch\"           \"t2,any,any,any,a,t2,any,any,any,any,any,any\")]\n  )\n \n@@ -427,7 +436,7 @@\n       case 3: case 4:\n \treturn output_move_vfp (operands);\n       case 5: case 6:\n-\treturn output_move_double (operands);\n+\treturn output_move_double (operands, true, NULL);\n       case 7:\n \tif (TARGET_VFP_SINGLE)\n \t  return \\\"fcpys%?\\\\t%0, %1\\;fcpys%?\\\\t%p0, %p1\\\";\n@@ -473,7 +482,7 @@\n       case 3: case 4:\n \treturn output_move_vfp (operands);\n       case 5: case 6: case 8:\n-\treturn output_move_double (operands);\n+\treturn output_move_double (operands, true, NULL);\n       case 7:\n \tif (TARGET_VFP_SINGLE)\n \t  return \\\"fcpys%?\\\\t%0, %1\\;fcpys%?\\\\t%p0, %p1\\\";"}]}