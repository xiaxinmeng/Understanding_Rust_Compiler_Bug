{"sha": "6bdb985fc9a573ed779448cf5e31abffe062823e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkYjk4NWZjOWE1NzNlZDc3OTQ0OGNmNWUzMWFiZmZlMDYyODIzZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-11-23T14:41:37Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-11-23T14:41:37Z"}, "message": "pt.c (instantiate_class_template): Don't try to figure out what specialization to use for a partial instantiation.\n\n\t* pt.c (instantiate_class_template): Don't try to figure out what\n\tspecialization to use for a partial instantiation.  Correct\n\ttypos in a couple of comments.  Avoid calling uses_template_parms\n\tmultiple times.\n\nFrom-SVN: r23808", "tree": {"sha": "068bf485001da36ce190f37a2dd0af9f0675ce64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/068bf485001da36ce190f37a2dd0af9f0675ce64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bdb985fc9a573ed779448cf5e31abffe062823e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bdb985fc9a573ed779448cf5e31abffe062823e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bdb985fc9a573ed779448cf5e31abffe062823e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bdb985fc9a573ed779448cf5e31abffe062823e/comments", "author": null, "committer": null, "parents": [{"sha": "c9a3de160b149070709a5302e138607ed206fee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9a3de160b149070709a5302e138607ed206fee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9a3de160b149070709a5302e138607ed206fee9"}], "stats": {"total": 92, "additions": 69, "deletions": 23}, "files": [{"sha": "ff7f5630c56fa048f6192e2290c35e59f4668388", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bdb985fc9a573ed779448cf5e31abffe062823e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bdb985fc9a573ed779448cf5e31abffe062823e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6bdb985fc9a573ed779448cf5e31abffe062823e", "patch": "@@ -1,3 +1,10 @@\n+1998-11-23  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* pt.c (instantiate_class_template): Don't try to figure out what\n+\tspecialization to use for a partial instantiation.  Correct\n+\ttypos in a couple of comments.  Avoid calling uses_template_parms\n+\tmultiple times.\n+\n 1998-11-23  Benjamin Kosnik  <bkoz@cygnus.com>\n \n         * method.c (process_overload_item): Add call to"}, {"sha": "c8ecd4599b3d24347fd7c03a90b5c7c372025331", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 47, "deletions": 23, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bdb985fc9a573ed779448cf5e31abffe062823e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bdb985fc9a573ed779448cf5e31abffe062823e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6bdb985fc9a573ed779448cf5e31abffe062823e", "patch": "@@ -4452,6 +4452,7 @@ instantiate_class_template (type)\n {\n   tree template, args, pattern, t;\n   tree typedecl;\n+  int is_partial_instantiation;\n \n   if (type == error_mark_node)\n     return error_mark_node;\n@@ -4465,29 +4466,52 @@ instantiate_class_template (type)\n      argument coercion and such is simply lost.  */\n   push_momentary ();\n \n+  /* Figure out which template is being instantiated.  */\n   template = most_general_template (CLASSTYPE_TI_TEMPLATE (type));\n-  args = CLASSTYPE_TI_ARGS (type);\n   my_friendly_assert (TREE_CODE (template) == TEMPLATE_DECL, 279);\n-  t = most_specialized_class (template, args);\n \n-  if (t == error_mark_node)\n+  /* Figure out which arguments are being used to do the\n+     instantiation.  */\n+  args = CLASSTYPE_TI_ARGS (type);\n+  is_partial_instantiation = uses_template_parms (args);\n+\n+  if (is_partial_instantiation)\n+    /* There's no telling which specialization is appropriate at this\n+       point.  Since all peeking at the innards of this partial\n+       instantiation are extensions (like the \"implicit typename\"\n+       extension, which allows users to omit the keyword `typename' on\n+       names that are declared as types in template base classes), we\n+       are free to do what we please.\n+\n+       Trying to figure out which partial instantiation to use can\n+       cause a crash.  (Some of the template arguments don't even have\n+       types.)  So, we just use the most general version.  */\n+    t = NULL_TREE;\n+  else\n     {\n-      char *str = \"candidates are:\";\n-      cp_error (\"ambiguous class template instantiation for `%#T'\", type);\n-      for (t = DECL_TEMPLATE_SPECIALIZATIONS (template); t; t = TREE_CHAIN (t))\n+      t = most_specialized_class (template, args);\n+\n+      if (t == error_mark_node)\n \t{\n-\t  if (get_class_bindings (TREE_VALUE (t), TREE_PURPOSE (t),\n-\t\t\t\t  args))\n+\t  char *str = \"candidates are:\";\n+\t  cp_error (\"ambiguous class template instantiation for `%#T'\", type);\n+\t  for (t = DECL_TEMPLATE_SPECIALIZATIONS (template); t; \n+\t       t = TREE_CHAIN (t))\n \t    {\n-\t      cp_error_at (\"%s %+#T\", str, TREE_TYPE (t));\n-\t      str = \"               \";\n+\t      if (get_class_bindings (TREE_VALUE (t), TREE_PURPOSE (t),\n+\t\t\t\t      args))\n+\t\t{\n+\t\t  cp_error_at (\"%s %+#T\", str, TREE_TYPE (t));\n+\t\t  str = \"               \";\n+\t\t}\n \t    }\n+\t  TYPE_BEING_DEFINED (type) = 1;\n+\t  type = error_mark_node;\n+\t  goto end;\n \t}\n-      TYPE_BEING_DEFINED (type) = 1;\n-      type = error_mark_node;\n-      goto end;\n     }\n-  else if (t)\n+\n+  if (t)\n     pattern = TREE_TYPE (t);\n   else\n     pattern = TREE_TYPE (template);\n@@ -4523,14 +4547,14 @@ instantiate_class_template (type)\n \targs = inner_args;\n     }\n \n-  if (pedantic && uses_template_parms (args))\n+  if (pedantic && is_partial_instantiation)\n     {\n-      /* If there are still template parameters amongst the args, then\n-\t we can't instantiate the type; there's no telling whether or not one\n-\t of the template parameters might eventually be instantiated to some\n-\t value that results in a specialization being used.  We do the\n-\t type as complete so that, for example, declaring one of its\n-\t members to be a friend will not be rejected.  */\n+      /* If this is a partial instantiation, then we can't instantiate\n+\t the type; there's no telling whether or not one of the\n+\t template parameters might eventually be instantiated to some\n+\t value that results in a specialization being used.  We do\n+\t mark the type as complete so that, for example, declaring one\n+\t of its members to be a friend will not be rejected.  */\n       TYPE_SIZE (type) = integer_zero_node;\n       goto end;\n     }\n@@ -4603,7 +4627,7 @@ instantiate_class_template (type)\n   /* If this is a partial instantiation, don't tsubst anything.  We will\n      only use this type for implicit typename, so the actual contents don't\n      matter.  All that matters is whether a particular name is a type.  */\n-  if (uses_template_parms (type))\n+  if (is_partial_instantiation)\n     {\n       TYPE_BINFO_BASETYPES (type) = TYPE_BINFO_BASETYPES (pattern);\n       TYPE_FIELDS (type) = TYPE_FIELDS (pattern);\n@@ -7335,7 +7359,7 @@ unify (tparms, targs, parm, arg, strict, explicit_mask)\n     return 0;\n \n   /* If PARM uses template parameters, then we can't bail out here,\n-     even in ARG == PARM, since we won't record unifications for the\n+     even if ARG == PARM, since we won't record unifications for the\n      template parameters.  We might need them if we're trying to\n      figure out which of two things is more specialized.  */\n   if (arg == parm && !uses_template_parms (parm))"}, {"sha": "884abf07dee26c92ab9d4103a9e2183c8ae7e177", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec25.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bdb985fc9a573ed779448cf5e31abffe062823e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bdb985fc9a573ed779448cf5e31abffe062823e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec25.C?ref=6bdb985fc9a573ed779448cf5e31abffe062823e", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link:\n+\n+template <class T, int I>\n+struct S {\n+};\n+\n+template <int I>\n+struct S <double, I> {\n+};\n+\n+template <class T>\n+void f ()\n+{\n+  S<double, T::x> s;\n+}"}]}