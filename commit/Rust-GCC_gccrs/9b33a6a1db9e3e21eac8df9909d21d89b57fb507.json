{"sha": "9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzM2E2YTFkYjllM2UyMWVhYzhkZjk5MDlkMjFkODliNTdmYjUwNw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-16T17:33:23Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-16T17:33:23Z"}, "message": "re PR fortran/33197 (Fortran 2008: math functions)\n\n\tPR fortran/33197\n\n\t* intrinsic.c (add_functions): Use ERFC_SCALED simplification.\n\t* intrinsic.h (gfc_simplify_erfc_scaled): New prototype.\n\t* simplify.c (fullprec_erfc_scaled, asympt_erfc_scaled,\n\tgfc_simplify_erfc_scaled): New functions.\n\n\t* gfortran.dg/erf_2.F90: New test.\n\t* gfortran.dg/erfc_scaled_2.f90: New test.\n\nFrom-SVN: r147621", "tree": {"sha": "4fec6f5d2ae7971100be9fe6ac743f7eb89a125b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fec6f5d2ae7971100be9fe6ac743f7eb89a125b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0c068160f502c9d37ec02c8a514546937544eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c068160f502c9d37ec02c8a514546937544eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c068160f502c9d37ec02c8a514546937544eb8"}], "stats": {"total": 222, "additions": 220, "deletions": 2}, "files": [{"sha": "199e7ccb1fe30a8a2c7790f556a2b02e1a281b46", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "patch": "@@ -1,3 +1,11 @@\n+2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33197\n+\t* intrinsic.c (add_functions): Use ERFC_SCALED simplification.\n+\t* intrinsic.h (gfc_simplify_erfc_scaled): New prototype.\n+\t* simplify.c (fullprec_erfc_scaled, asympt_erfc_scaled,\n+\tgfc_simplify_erfc_scaled): New functions.\n+\n 2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31243"}, {"sha": "612026edadbc42f6ced1b5c19da1814fc6e8125c", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "patch": "@@ -1431,8 +1431,9 @@ add_functions (void)\n   make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_F2008);\n \n   add_sym_1 (\"erfc_scaled\", GFC_ISYM_ERFC_SCALED, CLASS_ELEMENTAL, ACTUAL_NO,\n-\t     BT_REAL, dr, GFC_STD_F2008, gfc_check_fn_r, NULL,\n-\t     gfc_resolve_g77_math1, x, BT_REAL, dr, REQUIRED);\n+\t     BT_REAL, dr, GFC_STD_F2008, gfc_check_fn_r,\n+\t     gfc_simplify_erfc_scaled, gfc_resolve_g77_math1, x, BT_REAL,\n+\t     dr, REQUIRED);\n \n   make_generic (\"erfc_scaled\", GFC_ISYM_ERFC_SCALED, GFC_STD_F2008);\n "}, {"sha": "7e8bc73ec6fc4b01b3c0e8929323df7454ac99b8", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "patch": "@@ -232,6 +232,7 @@ gfc_expr *gfc_simplify_dprod (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_epsilon (gfc_expr *);\n gfc_expr *gfc_simplify_erf (gfc_expr *);\n gfc_expr *gfc_simplify_erfc (gfc_expr *);\n+gfc_expr *gfc_simplify_erfc_scaled (gfc_expr *);\n gfc_expr *gfc_simplify_exp (gfc_expr *);\n gfc_expr *gfc_simplify_exponent (gfc_expr *);\n gfc_expr *gfc_simplify_float (gfc_expr *);"}, {"sha": "01b252cf2ad5bdd8ac45480ebc936bec795901bd", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "patch": "@@ -1213,6 +1213,143 @@ gfc_simplify_erfc (gfc_expr *x)\n }\n \n \n+/* Helper functions to simplify ERFC_SCALED(x) = ERFC(x) * EXP(X**2).  */\n+\n+#define MAX_ITER 200\n+#define ARG_LIMIT 12\n+\n+/* Calculate ERFC_SCALED directly by its definition:\n+\n+     ERFC_SCALED(x) = ERFC(x) * EXP(X**2)\n+\n+   using a large precision for intermediate results.  This is used for all\n+   but large values of the argument.  */\n+static void\n+fullprec_erfc_scaled (mpfr_t res, mpfr_t arg)\n+{\n+  mp_prec_t prec;\n+  mpfr_t a, b;\n+\n+  prec = mpfr_get_default_prec ();\n+  mpfr_set_default_prec (10 * prec);\n+\n+  mpfr_init (a);\n+  mpfr_init (b);\n+\n+  mpfr_set (a, arg, GFC_RND_MODE);\n+  mpfr_sqr (b, a, GFC_RND_MODE);\n+  mpfr_exp (b, b, GFC_RND_MODE);\n+  mpfr_erfc (a, a, GFC_RND_MODE);\n+  mpfr_mul (a, a, b, GFC_RND_MODE);\n+\n+  mpfr_set (res, a, GFC_RND_MODE);\n+  mpfr_set_default_prec (prec);\n+\n+  mpfr_clear (a);\n+  mpfr_clear (b);\n+}\n+\n+/* Calculate ERFC_SCALED using a power series expansion in 1/arg:\n+\n+    ERFC_SCALED(x) = 1 / (x * sqrt(pi))\n+                     * (1 + Sum_n (-1)**n * (1 * 3 * 5 * ... * (2n-1))\n+                                          / (2 * x**2)**n)\n+\n+  This is used for large values of the argument.  Intermediate calculations\n+  are performed with twice the precision.  We don't do a fixed number of\n+  iterations of the sum, but stop when it has converged to the required\n+  precision.  */\n+static void\n+asympt_erfc_scaled (mpfr_t res, mpfr_t arg)\n+{\n+  mpfr_t sum, x, u, v, w, oldsum, sumtrunc;\n+  mpz_t num;\n+  mp_prec_t prec;\n+  unsigned i;\n+\n+  prec = mpfr_get_default_prec ();\n+  mpfr_set_default_prec (2 * prec);\n+\n+  mpfr_init (sum);\n+  mpfr_init (x);\n+  mpfr_init (u);\n+  mpfr_init (v);\n+  mpfr_init (w);\n+  mpz_init (num);\n+\n+  mpfr_init (oldsum);\n+  mpfr_init (sumtrunc);\n+  mpfr_set_prec (oldsum, prec);\n+  mpfr_set_prec (sumtrunc, prec);\n+\n+  mpfr_set (x, arg, GFC_RND_MODE);\n+  mpfr_set_ui (sum, 1, GFC_RND_MODE);\n+  mpz_set_ui (num, 1);\n+\n+  mpfr_set (u, x, GFC_RND_MODE);\n+  mpfr_sqr (u, u, GFC_RND_MODE);\n+  mpfr_mul_ui (u, u, 2, GFC_RND_MODE);\n+  mpfr_pow_si (u, u, -1, GFC_RND_MODE);\n+\n+  for (i = 1; i < MAX_ITER; i++)\n+  {\n+    mpfr_set (oldsum, sum, GFC_RND_MODE);\n+\n+    mpz_mul_ui (num, num, 2 * i - 1);\n+    mpz_neg (num, num);\n+\n+    mpfr_set (w, u, GFC_RND_MODE);\n+    mpfr_pow_ui (w, w, i, GFC_RND_MODE);\n+\n+    mpfr_set_z (v, num, GFC_RND_MODE);\n+    mpfr_mul (v, v, w, GFC_RND_MODE);\n+\n+    mpfr_add (sum, sum, v, GFC_RND_MODE);\n+\n+    mpfr_set (sumtrunc, sum, GFC_RND_MODE);\n+    if (mpfr_cmp (sumtrunc, oldsum) == 0)\n+      break;\n+  }\n+\n+  /* We should have converged by now; otherwise, ARG_LIMIT is probably\n+     set too low.  */\n+  gcc_assert (i < MAX_ITER);\n+\n+  /* Divide by x * sqrt(Pi).  */\n+  mpfr_const_pi (u, GFC_RND_MODE);\n+  mpfr_sqrt (u, u, GFC_RND_MODE);\n+  mpfr_mul (u, u, x, GFC_RND_MODE);\n+  mpfr_div (sum, sum, u, GFC_RND_MODE);\n+\n+  mpfr_set (res, sum, GFC_RND_MODE);\n+  mpfr_set_default_prec (prec);\n+\n+  mpfr_clears (sum, x, u, v, w, oldsum, sumtrunc, NULL);\n+  mpz_clear (num);\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_erfc_scaled (gfc_expr *x)\n+{\n+  gfc_expr *result;\n+\n+  if (x->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+  if (mpfr_cmp_d (x->value.real, ARG_LIMIT) >= 0)\n+    asympt_erfc_scaled (result->value.real, x->value.real);\n+  else\n+    fullprec_erfc_scaled (result->value.real, x->value.real);\n+\n+  return range_check (result, \"ERFC_SCALED\");\n+}\n+\n+#undef MAX_ITER\n+#undef ARG_LIMIT\n+\n+\n gfc_expr *\n gfc_simplify_epsilon (gfc_expr *e)\n {"}, {"sha": "41a1338ee7967ec89b96c76456ac4101b3de03d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "patch": "@@ -1,3 +1,9 @@\n+2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33197\n+\t* gfortran.dg/erf_2.F90: New test.\n+\t* gfortran.dg/erfc_scaled_2.f90: New test.\n+\n 2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31243"}, {"sha": "d9d3299314e500c462acd3e82dd73e63e53cd0fc", "filename": "gcc/testsuite/gfortran.dg/erf_2.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90?ref=9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do run }\n+! { dg-options \"-fno-range-check -ffree-line-length-none \" }\n+!\n+! Check that simplification functions and runtime library agree on ERF,\n+! ERFC and ERFC_SCALED.\n+\n+program test\n+  implicit none\n+\n+  interface check\n+    procedure check_r4\n+    procedure check_r8\n+  end interface check\n+\n+  real(kind=4) :: x4\n+  real(kind=8) :: x8\n+\n+#define CHECK(a) \\\n+  x8 = a ; x4 = a ; \\\n+  call check(erf(real(a,kind=8)), erf(x8)) ; \\\n+  call check(erf(real(a,kind=4)), erf(x4)) ; \\\n+  call check(erfc(real(a,kind=8)), erfc(x8)) ; \\\n+  call check(erfc(real(a,kind=4)), erfc(x4)) ; \\\n+  call check(erfc_scaled(real(a,kind=8)), erfc_scaled(x8)) ; \\\n+  call check(erfc_scaled(real(a,kind=4)), erfc_scaled(x4)) ;\n+\n+  CHECK(0.0)\n+  CHECK(0.9)\n+  CHECK(1.9)\n+  CHECK(19.)\n+  CHECK(190.)\n+\n+  CHECK(-0.0)\n+  CHECK(-0.9)\n+  CHECK(-1.9)\n+  CHECK(-19.)\n+  CHECK(-190.)\n+\n+contains\n+\n+  subroutine check_r4 (a, b)\n+    real(kind=4), intent(in) :: a, b\n+    if (abs(a - b) > 10 * spacing(a)) call abort\n+  end subroutine\n+\n+  subroutine check_r8 (a, b)\n+    real(kind=8), intent(in) :: a, b\n+    if (abs(a - b) > 10 * spacing(a)) call abort\n+  end subroutine\n+\n+end program test"}, {"sha": "97fa91fb915af8282ac7df544c24a5b9bd8bd42c", "filename": "gcc/testsuite/gfortran.dg/erfc_scaled_2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b33a6a1db9e3e21eac8df9909d21d89b57fb507/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_2.f90?ref=9b33a6a1db9e3e21eac8df9909d21d89b57fb507", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+!\n+! Check that ERFC_SCALED can be used in initialization expressions\n+  real, parameter :: r = 100*erfc_scaled(12.7)\n+  integer(kind=int(r)) :: i\n+\n+  real(kind=8), parameter :: r8 = 100*erfc_scaled(6.77)\n+  integer(kind=int(r8)) :: j\n+\n+  i = 12\n+  j = 8\n+  print *, i, j\n+\n+  end"}]}