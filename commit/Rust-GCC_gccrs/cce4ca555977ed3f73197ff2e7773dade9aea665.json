{"sha": "cce4ca555977ed3f73197ff2e7773dade9aea665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NlNGNhNTU1OTc3ZWQzZjczMTk3ZmYyZTc3NzNkYWRlOWFlYTY2NQ==", "commit": {"author": {"name": "Dorit Naishlos", "email": "dorit@il.ibm.com", "date": "2005-02-03T06:19:16Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-02-03T06:19:16Z"}, "message": "tree-vectorizer.c (slpeel_make_loop_iterate_ntimes): Copy EXPR_LOCUS from orig_cond to the new cond_stmt.\n\n\n        * tree-vectorizer.c (slpeel_make_loop_iterate_ntimes): Copy\n        EXPR_LOCUS from orig_cond to the new cond_stmt.\n        (vect_finish_stmt_generation): Copy EXPR_LOCUS from stmt to\n        the new vec_stmt.\n\n\n        * tree-vectorizer.c (slpeel_make_loop_iterate_ntimes): Call\n        standard_iv_increment_position. Remove call to bsi_next\n        (no need to bump the iterator anymore).\n        (vect_create_index_for_vector_ref): Call\n        standard_iv_increment_position. Remove second function argument.\n        (vect_finish_stmt_generation): Remove call to bsi_next\n        (no need to bump the iterator anymore).\n        (vect_create_data_ref_ptr): Remove second argument (bsi) in call\n        to vect_create_index_for_vector_ref.\n\n\n        * tree-vectorizer.c (vect_mark_stmts_to_be_vectorized): Check if\n        phis are used out of the loop.\n\nFrom-SVN: r94651", "tree": {"sha": "fb17645cfb7cdeecac69d75ddc2ad73dd3dd00ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb17645cfb7cdeecac69d75ddc2ad73dd3dd00ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cce4ca555977ed3f73197ff2e7773dade9aea665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce4ca555977ed3f73197ff2e7773dade9aea665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce4ca555977ed3f73197ff2e7773dade9aea665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce4ca555977ed3f73197ff2e7773dade9aea665/comments", "author": null, "committer": null, "parents": [{"sha": "73aea290cc5417e4025eb92d95afaf1eeab73631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73aea290cc5417e4025eb92d95afaf1eeab73631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73aea290cc5417e4025eb92d95afaf1eeab73631"}], "stats": {"total": 101, "additions": 78, "deletions": 23}, "files": [{"sha": "3dd5b28df188f30fdcc753c239fdd2e39aa35eaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce4ca555977ed3f73197ff2e7773dade9aea665/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce4ca555977ed3f73197ff2e7773dade9aea665/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cce4ca555977ed3f73197ff2e7773dade9aea665", "patch": "@@ -1,3 +1,27 @@\n+2005-02-03  Dorit Naishlos  <dorit@il.ibm.com>\n+\n+\t* tree-vectorizer.c (slpeel_make_loop_iterate_ntimes): Copy\n+\tEXPR_LOCUS from orig_cond to the new cond_stmt.\n+\t(vect_finish_stmt_generation): Copy EXPR_LOCUS from stmt to\n+\tthe new vec_stmt.\n+\n+2005-02-03  Dorit Naishlos  <dorit@il.ibm.com>\n+\n+\t* tree-vectorizer.c (slpeel_make_loop_iterate_ntimes): Call\n+\tstandard_iv_increment_position. Remove call to bsi_next \n+\t(no need to bump the iterator anymore).\n+\t(vect_create_index_for_vector_ref): Call\n+\tstandard_iv_increment_position. Remove second function argument.\n+\t(vect_finish_stmt_generation): Remove call to bsi_next \n+\t(no need to bump the iterator anymore).\n+\t(vect_create_data_ref_ptr): Remove second argument (bsi) in call\n+\tto vect_create_index_for_vector_ref.\n+\n+2005-02-03  Dorit Naishlos  <dorit@il.ibm.com>\n+\n+\t* tree-vectorizer.c (vect_mark_stmts_to_be_vectorized): Check if\n+\tphis are used out of the loop.\n+\n 2005-02-03  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/17807"}, {"sha": "2d036f6f36522b63a14ddeffe12812ffbcc6c8ff", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 54, "deletions": 23, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce4ca555977ed3f73197ff2e7773dade9aea665/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce4ca555977ed3f73197ff2e7773dade9aea665/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=cce4ca555977ed3f73197ff2e7773dade9aea665", "patch": "@@ -236,8 +236,7 @@ static tree vect_strip_conversion (tree);\n static tree vect_create_destination_var (tree, tree);\n static tree vect_create_data_ref_ptr \n   (tree, block_stmt_iterator *, tree, tree *, bool); \n-static tree vect_create_index_for_vector_ref \n-  (struct loop *, block_stmt_iterator *);\n+static tree vect_create_index_for_vector_ref (struct loop *);\n static tree vect_create_addr_base_for_vector_ref (tree, tree *, tree);\n static tree get_vectype_for_scalar_type (tree);\n static tree vect_get_new_vect_var (tree, enum vect_var_kind, const char *);\n@@ -657,23 +656,29 @@ slpeel_make_loop_iterate_ntimes (struct loop *loop, tree niters)\n   tree indx_before_incr, indx_after_incr, cond_stmt, cond;\n   tree orig_cond;\n   edge exit_edge = loop->exit_edges[0];\n-  block_stmt_iterator loop_exit_bsi = bsi_last (exit_edge->src);\n+  block_stmt_iterator loop_cond_bsi;\n+  block_stmt_iterator incr_bsi;\n+  bool insert_after;\n   tree begin_label = tree_block_label (loop->latch);\n   tree exit_label = tree_block_label (loop->single_exit->dest);\n   tree init = build_int_cst (TREE_TYPE (niters), 0);\n   tree step = build_int_cst (TREE_TYPE (niters), 1);\n   tree then_label;\n   tree else_label;\n+  tree incr;\n \n   orig_cond = get_loop_exit_condition (loop);\n+#ifdef ENABLE_CHECKING\n   gcc_assert (orig_cond);\n+#endif\n+  loop_cond_bsi = bsi_for_stmt (orig_cond);\n+\n+  standard_iv_increment_position (loop, &incr_bsi, &insert_after);\n   create_iv (init, step, NULL_TREE, loop,\n-             &loop_exit_bsi, false, &indx_before_incr, &indx_after_incr);\n-  \n-  /* CREATE_IV uses BSI_INSERT with TSI_NEW_STMT, so we want to get\n-     back to the exit condition statement.  */\n-  bsi_next (&loop_exit_bsi);\n-  gcc_assert (bsi_stmt (loop_exit_bsi) == orig_cond);\n+             &incr_bsi, insert_after, &indx_before_incr, &indx_after_incr);\n+  incr = bsi_stmt (incr_bsi);\n+  get_stmt_operands (incr);\n+  set_stmt_info (stmt_ann (incr), new_stmt_vec_info (incr, loop));\n \n   if (exit_edge->flags & EDGE_TRUE_VALUE) /* 'then' edge exits the loop.  */\n     {\n@@ -690,10 +695,10 @@ slpeel_make_loop_iterate_ntimes (struct loop *loop, tree niters)\n \n   cond_stmt = build3 (COND_EXPR, TREE_TYPE (orig_cond), cond,\n \t\t     then_label, else_label);\n-  bsi_insert_before (&loop_exit_bsi, cond_stmt, BSI_SAME_STMT);\n+  bsi_insert_before (&loop_cond_bsi, cond_stmt, BSI_SAME_STMT);\n \n   /* Remove old loop exit test:  */\n-  bsi_remove (&loop_exit_bsi);\n+  bsi_remove (&loop_cond_bsi);\n \n   if (vect_debug_stats (loop) || vect_debug_details (loop))\n     print_generic_expr (dump_file, cond_stmt, TDF_SLIM);\n@@ -1847,10 +1852,13 @@ vect_get_new_vect_var (tree type, enum vect_var_kind var_kind, const char *name)\n    just before the conditional expression that ends the single block loop.  */\n \n static tree\n-vect_create_index_for_vector_ref (struct loop *loop, block_stmt_iterator *bsi)\n+vect_create_index_for_vector_ref (struct loop *loop)\n {\n   tree init, step;\n+  block_stmt_iterator incr_bsi;\n+  bool insert_after;\n   tree indx_before_incr, indx_after_incr;\n+  tree incr;\n \n   /* It is assumed that the base pointer used for vectorized access contains\n      the address of the first vector.  Therefore the index used for vectorized\n@@ -1859,9 +1867,12 @@ vect_create_index_for_vector_ref (struct loop *loop, block_stmt_iterator *bsi)\n   init = integer_zero_node;\n   step = integer_one_node;\n \n-  /* Assuming that bsi_insert is used with BSI_NEW_STMT  */\n-  create_iv (init, step, NULL_TREE, loop, bsi, false,\n+  standard_iv_increment_position (loop, &incr_bsi, &insert_after);\n+  create_iv (init, step, NULL_TREE, loop, &incr_bsi, insert_after,\n \t&indx_before_incr, &indx_after_incr);\n+  incr = bsi_stmt (incr_bsi);\n+  get_stmt_operands (incr);\n+  set_stmt_info (stmt_ann (incr), new_stmt_vec_info (incr, loop));\n \n   return indx_before_incr;\n }\n@@ -2196,7 +2207,7 @@ vect_create_data_ref_ptr (tree stmt, block_stmt_iterator *bsi, tree offset,\n   if (only_init) /* No update in loop is required.  */\n     return vect_ptr_init;\n \n-  idx = vect_create_index_for_vector_ref (loop, bsi);\n+  idx = vect_create_index_for_vector_ref (loop);\n \n   /* Create: update = idx * vectype_size  */\n   tmp = create_tmp_var (integer_type_node, \"update\");\n@@ -2440,15 +2451,16 @@ vect_finish_stmt_generation (tree stmt, tree vec_stmt, block_stmt_iterator *bsi)\n       print_generic_expr (dump_file, vec_stmt, TDF_SLIM);\n     }\n \n+#ifdef ENABLE_CHECKING\n   /* Make sure bsi points to the stmt that is being vectorized.  */\n-\n-  /* Assumption: any stmts created for the vectorization of stmt S were\n-     inserted before S. BSI is expected to point to S or some new stmt before S.\n-   */\n-\n-  while (stmt != bsi_stmt (*bsi) && !bsi_end_p (*bsi))\n-    bsi_next (bsi);\n   gcc_assert (stmt == bsi_stmt (*bsi));\n+#endif\n+\n+#ifdef USE_MAPPED_LOCATION\n+  SET_EXPR_LOCATION (vec_stmt, EXPR_LOCUS (stmt));\n+#else\n+  SET_EXPR_LOCUS (vec_stmt, EXPR_LOCUS (stmt));\n+#endif\n }\n \n \n@@ -5143,17 +5155,36 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n   int j;\n   use_optype use_ops;\n   stmt_vec_info stmt_info;\n+  basic_block bb;\n+  tree phi;\n \n   if (vect_debug_details (NULL))\n     fprintf (dump_file, \"\\n<<vect_mark_stmts_to_be_vectorized>>\\n\");\n \n+  bb = loop->header;\n+  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+    {\n+      if (vect_debug_details (NULL))\n+        {\n+          fprintf (dump_file, \"init: phi relevant? \");\n+          print_generic_expr (dump_file, phi, TDF_SLIM);\n+        }\n+\n+      if (vect_stmt_relevant_p (phi, loop_vinfo))\n+\t{\n+\t  if (vect_debug_details (NULL))\n+\t    fprintf (dump_file, \"unsupported reduction/induction.\");\n+          return false;\n+\t}\n+    }\n+\n   VARRAY_TREE_INIT (worklist, 64, \"work list\");\n \n   /* 1. Init worklist.  */\n \n   for (i = 0; i < nbbs; i++)\n     {\n-      basic_block bb = bbs[i];\n+      bb = bbs[i];\n       for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n \t{\n \t  stmt = bsi_stmt (si);"}]}