{"sha": "4f73c5ddfbe6d428d13e8b581d91b80bc89341c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY3M2M1ZGRmYmU2ZDQyOGQxM2U4YjU4MWQ5MWI4MGJjODkzNDFjNg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-06-25T10:33:35Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-06-25T10:33:35Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1283", "tree": {"sha": "85ca31814474a70abb7430645497da9dc4919606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85ca31814474a70abb7430645497da9dc4919606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f73c5ddfbe6d428d13e8b581d91b80bc89341c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f73c5ddfbe6d428d13e8b581d91b80bc89341c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f73c5ddfbe6d428d13e8b581d91b80bc89341c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f73c5ddfbe6d428d13e8b581d91b80bc89341c6/comments", "author": null, "committer": null, "parents": [{"sha": "cc61d0dec451a7a3bd0756a0894981be4c07d790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc61d0dec451a7a3bd0756a0894981be4c07d790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc61d0dec451a7a3bd0756a0894981be4c07d790"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "d9e49bdad5f06312aee12a19bef169508da84304", "filename": "gcc/stmt.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f73c5ddfbe6d428d13e8b581d91b80bc89341c6/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f73c5ddfbe6d428d13e8b581d91b80bc89341c6/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4f73c5ddfbe6d428d13e8b581d91b80bc89341c6", "patch": "@@ -3624,15 +3624,20 @@ expand_end_case (orig_index)\n \t make a sequence of conditional branches instead of a dispatch.\n \t If the switch-index is a constant, do it this way\n \t because we can optimize it.  */\n-      else if (TREE_INT_CST_HIGH (range) != 0\n+\n+#ifndef CASE_VALUES_THRESHOLD\n #ifdef HAVE_casesi\n-\t       || (HAVE_casesi ? count < 4 : count < 5)\n+#define CASE_VALUES_THRESHOLD (HAVE_casesi ? 4 : 5)\n #else\n-\t       /* If machine does not have a case insn that compares the\n-\t\t  bounds, this means extra overhead for dispatch tables\n-\t\t  which raises the threshold for using them.  */\n-\t       || count < 5\n-#endif\n+      /* If machine does not have a case insn that compares the\n+\t bounds, this means extra overhead for dispatch tables\n+\t which raises the threshold for using them.  */\n+#define CASE_VALUES_THRESHOLD 5\n+#endif /* HAVE_casesi */\n+#endif /* CASE_VALUES_THRESHOLD */\n+\n+      else if (TREE_INT_CST_HIGH (range) != 0\n+\t       || count < CASE_VALUES_THRESHOLD\n \t       || (unsigned) (TREE_INT_CST_LOW (range)) > 10 * count\n \t       || TREE_CODE (index_expr) == INTEGER_CST\n \t       /* These will reduce to a constant.  */"}]}