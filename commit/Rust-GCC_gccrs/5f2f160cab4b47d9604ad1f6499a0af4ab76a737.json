{"sha": "5f2f160cab4b47d9604ad1f6499a0af4ab76a737", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyZjE2MGNhYjRiNDdkOTYwNGFkMWY2NDk5YTBhZjRhYjc2YTczNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-12-15T01:48:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-12-15T01:48:48Z"}, "message": "dwarf2out.c (gen_struct_or_union_type_die): Check AGGREGATE_TYPE_P instead of TREE_CODE_CLASS == 't'.\n\n\t* dwarf2out.c (gen_struct_or_union_type_die): Check AGGREGATE_TYPE_P\n\tinstead of TREE_CODE_CLASS == 't'.\n\t(gen_type_die): Likewise.\n\t(scope_die_for): Ignore FUNCTION_TYPE \"scopes\".\n\nFrom-SVN: r24319", "tree": {"sha": "fbd03e2591e0f9efd2aa1681f25057a0fd97234a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbd03e2591e0f9efd2aa1681f25057a0fd97234a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2f160cab4b47d9604ad1f6499a0af4ab76a737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2f160cab4b47d9604ad1f6499a0af4ab76a737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2f160cab4b47d9604ad1f6499a0af4ab76a737", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2f160cab4b47d9604ad1f6499a0af4ab76a737/comments", "author": null, "committer": null, "parents": [{"sha": "e291f368db62200119b6ca13e6e91a219e842fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e291f368db62200119b6ca13e6e91a219e842fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e291f368db62200119b6ca13e6e91a219e842fb3"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "4d7e9072011f1d3965058fad3893fa964b3c48bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f160cab4b47d9604ad1f6499a0af4ab76a737/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f160cab4b47d9604ad1f6499a0af4ab76a737/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f2f160cab4b47d9604ad1f6499a0af4ab76a737", "patch": "@@ -1,3 +1,10 @@\n+Tue Dec 15 01:45:26 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* dwarf2out.c (gen_struct_or_union_type_die): Check AGGREGATE_TYPE_P\n+\tinstead of TREE_CODE_CLASS == 't'.\n+\t(gen_type_die): Likewise.\n+\t(scope_die_for): Ignore FUNCTION_TYPE \"scopes\".\n+\n Mon Dec 14 16:23:27 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* real.c (endian): Disable last change unless"}, {"sha": "3c59c3f14a907318edd092a9a2c93e66a3bbb881", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2f160cab4b47d9604ad1f6499a0af4ab76a737/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2f160cab4b47d9604ad1f6499a0af4ab76a737/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5f2f160cab4b47d9604ad1f6499a0af4ab76a737", "patch": "@@ -7559,7 +7559,7 @@ push_decl_scope (scope)\n      subtype.  In such a case, we need to search the decl_scope_table to\n      find the parent of this subtype.  */\n \n-  if (TREE_CODE_CLASS (TREE_CODE (scope)) == 't')\n+  if (AGGREGATE_TYPE_P (scope))\n     containing_scope = TYPE_CONTEXT (scope);\n   else\n     containing_scope = NULL_TREE;\n@@ -7611,6 +7611,12 @@ scope_die_for (t, context_die)\n   if (containing_scope && TREE_CODE (containing_scope) == NAMESPACE_DECL)\n     containing_scope = NULL_TREE;\n \n+  /* Ignore function type \"scopes\" from the C frontend.  They mean that\n+     a tagged type is local to a parmlist of a function declarator, but\n+     that isn't useful to DWARF.  */\n+  if (containing_scope && TREE_CODE (containing_scope) == FUNCTION_TYPE)\n+    containing_scope = NULL_TREE;\n+\n   /* Function-local tags and functions get stuck in limbo until they are\n      fixed up by decls_for_scope.  */\n   if (context_die == NULL && containing_scope != NULL_TREE\n@@ -8838,7 +8844,7 @@ gen_struct_or_union_type_die (type, context_die)\n     return;\n \n   if (TYPE_CONTEXT (type) != NULL_TREE\n-      && TREE_CODE_CLASS (TREE_CODE (TYPE_CONTEXT (type))) == 't')\n+      && AGGREGATE_TYPE_P (TYPE_CONTEXT (type)))\n     nested = 1;\n \n   scope_die = scope_die_for (type, context_die);\n@@ -9051,7 +9057,7 @@ gen_type_die (type, context_die)\n       /* If this is a nested type whose containing class hasn't been\n \t written out yet, writing it out will cover this one, too.  */\n       if (TYPE_CONTEXT (type)\n-\t  && TREE_CODE_CLASS (TREE_CODE (TYPE_CONTEXT (type))) == 't'\n+\t  && AGGREGATE_TYPE_P (TYPE_CONTEXT (type))\n \t  && ! TREE_ASM_WRITTEN (TYPE_CONTEXT (type)))\n \t{\n \t  gen_type_die (TYPE_CONTEXT (type), context_die);\n@@ -9070,7 +9076,7 @@ gen_type_die (type, context_die)\n \tgen_struct_or_union_type_die (type, context_die);\n \n       if (TYPE_CONTEXT (type)\n-\t  && TREE_CODE_CLASS (TREE_CODE (TYPE_CONTEXT (type))) == 't'\n+\t  && AGGREGATE_TYPE_P (TYPE_CONTEXT (type))\n \t  && ! TREE_ASM_WRITTEN (TYPE_CONTEXT (type)))\n \tpop_decl_scope ();\n "}]}