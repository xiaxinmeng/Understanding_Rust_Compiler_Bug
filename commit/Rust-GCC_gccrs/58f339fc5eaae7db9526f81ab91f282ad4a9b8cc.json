{"sha": "58f339fc5eaae7db9526f81ab91f282ad4a9b8cc", "node_id": "C_kwDOANBUbNoAKDU4ZjMzOWZjNWVhYWU3ZGI5NTI2ZjgxYWI5MWYyODJhZDRhOWI4Y2M", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-19T11:31:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-19T16:27:06Z"}, "message": "libstdc++: Implement std::random_device::entropy() for other sources\n\nCurrently this function only returns a non-zero value for /dev/random\nand /dev/urandom. When a hardware instruction such as RDRAND is in use\nit should (in theory) be perfectly random and produce 32 bits of entropy\nin each 32-bit result. Add a helper function to identify the source of\nrandomness from the _M_func and _M_file data members, and return a\nsuitable value when RDRAND or RDSEED is being used.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/random.cc (which_source): New helper function.\n\t(random_device::_M_getentropy()): Use which_source and return\n\tsuitable values for sources other than device files.\n\t* testsuite/26_numerics/random/random_device/entropy.cc: New test.", "tree": {"sha": "3c6974aae38d7c6d988ac5625bc143db6147405d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c6974aae38d7c6d988ac5625bc143db6147405d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f339fc5eaae7db9526f81ab91f282ad4a9b8cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f339fc5eaae7db9526f81ab91f282ad4a9b8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f339fc5eaae7db9526f81ab91f282ad4a9b8cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f339fc5eaae7db9526f81ab91f282ad4a9b8cc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cfbe5dc08b574bccc398256946cc03e2a767329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfbe5dc08b574bccc398256946cc03e2a767329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfbe5dc08b574bccc398256946cc03e2a767329"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "4b64bde00ea747a762a4b41f41585951ded6a264", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f339fc5eaae7db9526f81ab91f282ad4a9b8cc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f339fc5eaae7db9526f81ab91f282ad4a9b8cc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=58f339fc5eaae7db9526f81ab91f282ad4a9b8cc", "patch": "@@ -192,6 +192,51 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       return lcg();\n     }\n #endif\n+\n+    enum Which {\n+      rand_s = 1, rdseed = 2, rdrand = 4, device_file = 8, prng = 16,\n+      any = 0xffff\n+    };\n+\n+    inline Which\n+    which_source(random_device::result_type (*func [[maybe_unused]])(void*),\n+\t\t void* file [[maybe_unused]])\n+    {\n+#ifdef _GLIBCXX_USE_CRT_RAND_S\n+      if (func == &__winxp_rand_s)\n+\treturn rand_s;\n+#endif\n+\n+#ifdef USE_RDSEED\n+#ifdef USE_RDRAND\n+      if (func == &__x86_rdseed_rdrand)\n+\treturn rdseed;\n+#endif\n+      if (func == &__x86_rdseed)\n+\treturn rdseed;\n+#endif\n+\n+#ifdef USE_RDRAND\n+      if (func == &__x86_rdrand)\n+\treturn rdrand;\n+#endif\n+\n+#ifdef _GLIBCXX_USE_DEV_RANDOM\n+      if (file != nullptr)\n+\treturn device_file;\n+#endif\n+\n+#ifdef USE_LCG\n+      if (func == &__lcg)\n+\treturn prng;\n+#endif\n+\n+#ifdef USE_MT19937\n+      return prng;\n+#endif\n+\n+      return any; // should be unreachable\n+    }\n   }\n \n   void\n@@ -209,10 +254,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n     const char* fname [[gnu::unused]] = nullptr;\n \n-    enum {\n-\trand_s = 1, rdseed = 2, rdrand = 4, device_file = 8, prng = 16,\n-\tany = 0xffff\n-    } which;\n+    Which which;\n \n     if (token == \"default\")\n       {\n@@ -449,10 +491,25 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   double\n   random_device::_M_getentropy() const noexcept\n   {\n+    const int max = sizeof(result_type) * __CHAR_BIT__;\n+\n+    switch(which_source(_M_func, _M_file))\n+    {\n+    case rdrand:\n+    case rdseed:\n+      return (double) max;\n+    case rand_s:\n+    case prng:\n+      return 0.0;\n+    case device_file:\n+      // handled below\n+      break;\n+    default:\n+      return 0.0;\n+    }\n+\n #if defined _GLIBCXX_USE_DEV_RANDOM \\\n     && defined _GLIBCXX_HAVE_SYS_IOCTL_H && defined RNDGETENTCNT\n-    if (!_M_file)\n-      return 0.0;\n \n #ifdef USE_POSIX_FILE_IO\n     const int fd = _M_fd;\n@@ -469,7 +526,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     if (ent < 0)\n       return 0.0;\n \n-    const int max = sizeof(result_type) * __CHAR_BIT__;\n     if (ent > max)\n       ent = max;\n "}, {"sha": "9ef1538d2bb6322cc92d6048e7b544bd96fe707d", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/entropy.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f339fc5eaae7db9526f81ab91f282ad4a9b8cc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f339fc5eaae7db9526f81ab91f282ad4a9b8cc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc?ref=58f339fc5eaae7db9526f81ab91f282ad4a9b8cc", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do run { target c++11 } }\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+#include <testsuite_random.h>\n+\n+void\n+test01()\n+{\n+  for (auto token : { \"mt19937\", \"prng\", \"rand_s\" })\n+    if (__gnu_test::random_device_available(token))\n+      VERIFY( std::random_device(token).entropy() == 0.0 );\n+\n+  using result_type = std::random_device::result_type;\n+  const double max = std::log2(std::numeric_limits<result_type>::max() + 1.0);\n+\n+  for (auto token : { \"/dev/random\", \"/dev/urandom\" })\n+    if (__gnu_test::random_device_available(token))\n+    {\n+      const double entropy = std::random_device(token).entropy();\n+      VERIFY( entropy >= 0.0 );\n+      VERIFY( entropy <= max );\n+    }\n+\n+  for (auto token : { \"rdrand\", \"rdseed\" })\n+    if (__gnu_test::random_device_available(token))\n+    {\n+      const double entropy = std::random_device(token).entropy();\n+      VERIFY( entropy == max );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}