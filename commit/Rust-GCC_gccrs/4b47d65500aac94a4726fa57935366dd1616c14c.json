{"sha": "4b47d65500aac94a4726fa57935366dd1616c14c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0N2Q2NTUwMGFhYzk0YTQ3MjZmYTU3OTM1MzY2ZGQxNjE2YzE0Yw==", "commit": {"author": {"name": "Mitsuru Kariya", "email": "kariya_mitsuru@hotmail.com", "date": "2013-09-11T22:24:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-09-11T22:24:50Z"}, "message": "re PR libstdc++/58358 (search_n has a Complexity violation for random access iterator)\n\n2013-09-11  Mitsuru Kariya  <kariya_mitsuru@hotmail.com>\n\t    Chris Jefferson  <chris@bubblescope.net>\n\n\tPR libstdc++/58358\n\t* include/bits/stl_algo.h (search_n): Fix to guarantee a number\n\tof comparisons <= number of elements in the range.\n\t* testsuite/25_algorithms/search_n/58358.cc: New.\n\t* testsuite/25_algorithms/search_n/iterator.cc: Extend.\n\nCo-Authored-By: Chris Jefferson <chris@bubblescope.net>\n\nFrom-SVN: r202510", "tree": {"sha": "c2b99462fd063dc457a51c589c4228eef285b714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2b99462fd063dc457a51c589c4228eef285b714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b47d65500aac94a4726fa57935366dd1616c14c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b47d65500aac94a4726fa57935366dd1616c14c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b47d65500aac94a4726fa57935366dd1616c14c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b47d65500aac94a4726fa57935366dd1616c14c/comments", "author": {"login": "kariya-mitsuru", "id": 2217224, "node_id": "MDQ6VXNlcjIyMTcyMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2217224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kariya-mitsuru", "html_url": "https://github.com/kariya-mitsuru", "followers_url": "https://api.github.com/users/kariya-mitsuru/followers", "following_url": "https://api.github.com/users/kariya-mitsuru/following{/other_user}", "gists_url": "https://api.github.com/users/kariya-mitsuru/gists{/gist_id}", "starred_url": "https://api.github.com/users/kariya-mitsuru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kariya-mitsuru/subscriptions", "organizations_url": "https://api.github.com/users/kariya-mitsuru/orgs", "repos_url": "https://api.github.com/users/kariya-mitsuru/repos", "events_url": "https://api.github.com/users/kariya-mitsuru/events{/privacy}", "received_events_url": "https://api.github.com/users/kariya-mitsuru/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "088845a5f0ba6f712c80bdb9a3a3e98c11f5681f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088845a5f0ba6f712c80bdb9a3a3e98c11f5681f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/088845a5f0ba6f712c80bdb9a3a3e98c11f5681f"}], "stats": {"total": 132, "additions": 80, "deletions": 52}, "files": [{"sha": "6eab7c7300a780cbebd2d44888c36fc7d3d570ac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b47d65500aac94a4726fa57935366dd1616c14c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b47d65500aac94a4726fa57935366dd1616c14c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4b47d65500aac94a4726fa57935366dd1616c14c", "patch": "@@ -1,3 +1,12 @@\n+2013-09-11  Mitsuru Kariya  <kariya_mitsuru@hotmail.com>\n+\t    Chris Jefferson  <chris@bubblescope.net>\n+\n+\tPR libstdc++/58358\n+\t* include/bits/stl_algo.h (search_n): Fix to guarantee a number\n+\tof comparisons <= number of elements in the range.\n+\t* testsuite/25_algorithms/search_n/58358.cc: New.\n+\t* testsuite/25_algorithms/search_n/iterator.cc: Extend.\n+\n 2013-09-10  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* testsuite/28_regex/traits/wchar_t/value.cc: Change template args"}, {"sha": "b06211e0100948844f2704c1ed9b21ae69a9fb6e", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 22, "deletions": 52, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b47d65500aac94a4726fa57935366dd1616c14c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b47d65500aac94a4726fa57935366dd1616c14c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=4b47d65500aac94a4726fa57935366dd1616c14c", "patch": "@@ -385,38 +385,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_DistanceType;\n \n       _DistanceType __tailSize = __last - __first;\n-      const _DistanceType __pattSize = __count;\n+      _DistanceType __remainder = __count;\n \n-      if (__tailSize < __pattSize)\n-        return __last;\n-\n-      const _DistanceType __skipOffset = __pattSize - 1;\n-      _RandomAccessIter __lookAhead = __first + __skipOffset;\n-      __tailSize -= __pattSize;\n-\n-      while (1) // the main loop...\n+      while (__remainder <= __tailSize) // the main loop...\n \t{\n-\t  // __lookAhead here is always pointing to the last element of next \n-\t  // possible match.\n-\t  while (!(*__lookAhead == __val)) // the skip loop...\n-\t    {\n-\t      if (__tailSize < __pattSize)\n-\t\treturn __last;  // Failure\n-\t      __lookAhead += __pattSize;\n-\t      __tailSize -= __pattSize;\n-\t    }\n-\t  _DistanceType __remainder = __skipOffset;\n-\t  for (_RandomAccessIter __backTrack = __lookAhead - 1; \n-\t       *__backTrack == __val; --__backTrack)\n+\t  __first += __remainder;\n+\t  __tailSize -= __remainder;\n+\t  // __first here is always pointing to one past the last element of\n+\t  // next possible match.\n+\t  _RandomAccessIter __backTrack = __first; \n+\t  while (*--__backTrack == __val)\n \t    {\n \t      if (--__remainder == 0)\n-\t\treturn (__lookAhead - __skipOffset); // Success\n+\t        return (__first - __count); // Success\n \t    }\n-\t  if (__remainder > __tailSize)\n-\t    return __last; // Failure\n-\t  __lookAhead += __remainder;\n-\t  __tailSize -= __remainder;\n+\t  __remainder = __count + 1 - (__first - __backTrack);\n \t}\n+      return __last; // Failure\n     }\n \n   // search_n\n@@ -478,38 +463,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_DistanceType;\n \n       _DistanceType __tailSize = __last - __first;\n-      const _DistanceType __pattSize = __count;\n+      _DistanceType __remainder = __count;\n \n-      if (__tailSize < __pattSize)\n-        return __last;\n-\n-      const _DistanceType __skipOffset = __pattSize - 1;\n-      _RandomAccessIter __lookAhead = __first + __skipOffset;\n-      __tailSize -= __pattSize;\n-\n-      while (1) // the main loop...\n+      while (__remainder <= __tailSize) // the main loop...\n \t{\n-\t  // __lookAhead here is always pointing to the last element of next \n-\t  // possible match.\n-\t  while (!bool(__binary_pred(*__lookAhead, __val))) // the skip loop...\n-\t    {\n-\t      if (__tailSize < __pattSize)\n-\t\treturn __last;  // Failure\n-\t      __lookAhead += __pattSize;\n-\t      __tailSize -= __pattSize;\n-\t    }\n-\t  _DistanceType __remainder = __skipOffset;\n-\t  for (_RandomAccessIter __backTrack = __lookAhead - 1; \n-\t       __binary_pred(*__backTrack, __val); --__backTrack)\n+\t  __first += __remainder;\n+\t  __tailSize -= __remainder;\n+\t  // __first here is always pointing to one past the last element of\n+\t  // next possible match.\n+\t  _RandomAccessIter __backTrack = __first; \n+\t  while (__binary_pred(*--__backTrack, __val))\n \t    {\n \t      if (--__remainder == 0)\n-\t\treturn (__lookAhead - __skipOffset); // Success\n+\t        return (__first - __count); // Success\n \t    }\n-\t  if (__remainder > __tailSize)\n-\t    return __last; // Failure\n-\t  __lookAhead += __remainder;\n-\t  __tailSize -= __remainder;\n+\t  __remainder = __count + 1 - (__first - __backTrack);\n \t}\n+      return __last; // Failure\n     }\n \n   // find_end for forward iterators."}, {"sha": "b5ae34617f9a5b044695b7f4f6b3cb2f127532e7", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/58358.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b47d65500aac94a4726fa57935366dd1616c14c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F58358.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b47d65500aac94a4726fa57935366dd1616c14c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F58358.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F58358.cc?ref=4b47d65500aac94a4726fa57935366dd1616c14c", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// 25.1.9 [lib.alg.search]\n+\n+#include <algorithm>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<int> a{2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n+  int count = 0;\n+  std::search_n(a.begin(), a.end(), 10, 1,\n+\t\t[&count](int t, int u) { ++count; return t == u; });\n+  VERIFY( count <= 11 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "10616960dc239f9fa6e7e6851c5d6302935b3d9c", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/iterator.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b47d65500aac94a4726fa57935366dd1616c14c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b47d65500aac94a4726fa57935366dd1616c14c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc?ref=4b47d65500aac94a4726fa57935366dd1616c14c", "patch": "@@ -31,9 +31,11 @@\n int array1[11] = {0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0};\n int array2[TEST_DEPTH];\n \n+int pred_count;\n bool \n pred(int i, int j)\n {\n+  ++pred_count;\n   return i == j;\n }\n \n@@ -90,16 +92,22 @@ int main()\n \n \t    int* t1 = search_n(forwardcon.begin(),\n \t\t\t       forwardcon.end(), j, 1).ptr;\n+\t    pred_count = 0;\n \t    int* t2 = search_n(forwardcon.begin(),\n \t\t\t       forwardcon.end(), j, 1, pred).ptr;\n+\t    VERIFY(pred_count <= i);\n \t    int* t3 = search_n(bidircon.begin(),\n \t\t\t       bidircon.end(), j, 1).ptr;\n+\t    pred_count = 0;\n \t    int* t4 = search_n(bidircon.begin(),\n \t\t\t       bidircon.end(), j, 1, pred).ptr;\n+\t    VERIFY(pred_count <= i);\n \t    int* t5 = search_n(randomcon.begin(),\n \t\t\t       randomcon.end(), j, 1).ptr;\n+\t    pred_count = 0;\n \t    int* t6 = search_n(randomcon.begin(),\n \t\t\t       randomcon.end(), j, 1, pred).ptr;\n+\t    VERIFY(pred_count <= i);\n \t    VERIFY((t1 == t2) && (t2 == t3) && (t3 == t4) &&\n \t\t   (t4 == t5) && (t5 == t6));\n \t  }"}]}