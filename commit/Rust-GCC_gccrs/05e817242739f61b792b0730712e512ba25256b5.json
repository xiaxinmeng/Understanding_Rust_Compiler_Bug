{"sha": "05e817242739f61b792b0730712e512ba25256b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlODE3MjQyNzM5ZjYxYjc5MmIwNzMwNzEyZTUxMmJhMjUyNTZiNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-11T21:30:16Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-11T21:30:16Z"}, "message": "[multiple changes]\n\n2001-01-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n\n        * cppinit.c (cpp_start_read): If -fpreprocessed, ignore\n\t-D, -U and -A, and don't initialize the builtins.\n\t* cppmain.c (cb_define, cb_undef): Unconditionally process\n\tthe callback.\n\t* tradcpp.c (main): Fix typo.\n\n2000-01-11  Mark Elbrecht  <snowball3@bigfoot.com>\n\n        * cppfiles.c (cpp_included, find_include_file, _cpp_execute_include)\n          (read_name_map): Use IS_ABSOLUTE_PATH.\n        * tradcpp.c (get_filename): Likewise.\n\nFrom-SVN: r38925", "tree": {"sha": "ccce935ca0e9dc123a10800c572cceabc8074b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccce935ca0e9dc123a10800c572cceabc8074b67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05e817242739f61b792b0730712e512ba25256b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e817242739f61b792b0730712e512ba25256b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05e817242739f61b792b0730712e512ba25256b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e817242739f61b792b0730712e512ba25256b5/comments", "author": null, "committer": null, "parents": [{"sha": "76d06edcf6c741801b51ecf31a48f262c8f85c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d06edcf6c741801b51ecf31a48f262c8f85c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d06edcf6c741801b51ecf31a48f262c8f85c52"}], "stats": {"total": 89, "additions": 51, "deletions": 38}, "files": [{"sha": "8e8c11652ee1409fe34e51a14811c1b77f1b5b65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e817242739f61b792b0730712e512ba25256b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e817242739f61b792b0730712e512ba25256b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05e817242739f61b792b0730712e512ba25256b5", "patch": "@@ -1,3 +1,17 @@\n+2001-01-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppinit.c (cpp_start_read): If -fpreprocessed, ignore\n+        -D, -U and -A, and don't initialize the builtins.\n+        * cppmain.c (cb_define, cb_undef): Unconditionally process\n+        the callback.\n+        * tradcpp.c (main): Fix typo.\n+\n+2000-01-11  Mark Elbrecht  <snowball3@bigfoot.com>\n+\t  \n+\t * cppfiles.c (cpp_included, find_include_file, _cpp_execute_include)\n+\t   (read_name_map): Use IS_ABSOLUTE_PATH.\n+\t * tradcpp.c (get_filename): Likewise.   \n+\n 2001-01-11  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.md (*adcq, *subcq): Fix operand numbers."}, {"sha": "91f886b8f798dab7654e74ced5a48e088a7593c0", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e817242739f61b792b0730712e512ba25256b5/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e817242739f61b792b0730712e512ba25256b5/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=05e817242739f61b792b0730712e512ba25256b5", "patch": "@@ -430,7 +430,7 @@ cpp_included (pfile, fname)\n   char *name;\n   splay_tree_node nd;\n \n-  if (fname[0] == '/')\n+  if (IS_ABSOLUTE_PATHNAME (fname))\n     {\n       /* Just look it up.  */\n       nd = splay_tree_lookup (pfile->all_include_files, (splay_tree_key) fname);\n@@ -470,7 +470,7 @@ find_include_file (pfile, fname, search_start)\n   char *name;\n   struct include_file *file;\n \n-  if (fname[0] == '/')\n+  if (IS_ABSOLUTE_PATHNAME (fname))\n     return open_file (pfile, fname);\n       \n   /* Search directory path for the file.  */\n@@ -648,7 +648,7 @@ _cpp_execute_include (pfile, header, no_reinclude, include_next)\n   if (CPP_OPTION (pfile, print_deps_missing_files)\n       && PRINT_THIS_DEP (pfile, angle_brackets))\n     {\n-      if (!angle_brackets || *fname == '/')\n+      if (!angle_brackets || IS_ABSOLUTE_PATHNAME (fname))\n \tdeps_add_dep (pfile->deps, fname);\n       else\n \t{\n@@ -890,7 +890,7 @@ read_name_map (pfile, dirname)\n \t  ptr->map_from = from;\n \n \t  /* Make the real filename absolute.  */\n-\t  if (*to == '/')\n+\t  if (IS_ABSOLUTE_PATHNAME (to))\n \t    ptr->map_to = to;\n \t  else\n \t    {"}, {"sha": "b7cbbf2eac7ba095d3138afc1ce9cb077a9bab00", "filename": "gcc/cppinit.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e817242739f61b792b0730712e512ba25256b5/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e817242739f61b792b0730712e512ba25256b5/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=05e817242739f61b792b0730712e512ba25256b5", "patch": "@@ -849,20 +849,21 @@ do_includes (pfile, p, scan)\n     {\n       struct pending_option *q;\n \n-      /* Later: maybe update this to use the #include \"\" search path\n-\t if cpp_read_file fails.  */\n-      if (_cpp_read_file (pfile, p->arg) && scan)\n+      /* Don't handle if -fpreprocessed.  Later: maybe update this to\n+\t use the #include \"\" search path if cpp_read_file fails.  */\n+      if (! CPP_OPTION (pfile, preprocessed))\n+\tcpp_error (pfile, \"-include and -imacros cannot be used with -fpreprocessed\");\n+      else if (_cpp_read_file (pfile, p->arg) && scan)\n \tcpp_scan_buffer_nooutput (pfile, 0);\n       q = p->next;\n       free (p);\n       p = q;\n     }\n }\n \n-/* This is called after options have been processed.  Check options\n- for consistency, and setup for processing input from the file named\n- FNAME.  (Use standard input if FNAME == NULL.)  Return 1 on success,\n- 0 on failure.  */\n+/* This is called after options have been processed.  Setup for\n+   processing input from the file named FNAME.  (Use standard input if\n+   FNAME == NULL.)  Return 1 on success, 0 on failure.  */\n \n int\n cpp_start_read (pfile, fname)\n@@ -915,18 +916,22 @@ cpp_start_read (pfile, fname)\n   if (!_cpp_read_file (pfile, fname))\n     return 0;\n \n-  /* Install __LINE__, etc.  */\n-  init_builtins (pfile);\n+  /* If already preprocessed, don't install __LINE__, etc., and ignore\n+     command line definitions and assertions.  Handle -U's, -D's and\n+     -A's in the order they were seen.  */\n+  if (! CPP_OPTION (pfile, preprocessed))\n+    init_builtins (pfile);\n \n-  /* Do -U's, -D's and -A's in the order they were seen.  */\n   p = CPP_OPTION (pfile, pending)->directive_head;\n   while (p)\n     {\n-      (*p->handler) (pfile, p->arg);\n+      if (! CPP_OPTION (pfile, preprocessed))\n+\t(*p->handler) (pfile, p->arg);\n       q = p->next;\n       free (p);\n       p = q;\n     }\n+\n   pfile->done_initializing = 1;\n \n   /* The -imacros files can be scanned now, but the -include files\n@@ -1131,10 +1136,10 @@ static const struct cl_option cl_options[] =\n    command-line matches.  Returns its index in the option array,\n    negative on failure.  Complications arise since some options can be\n    suffixed with an argument, and multiple complete matches can occur,\n-   e.g. -iwithprefix and -iwithprefixbefore.  Moreover, we want to\n-   accept options beginning with -g and -W that we do not recognise,\n-   but not to swallow any subsequent command line argument; these are\n-   handled as special cases in cpp_handle_option.  */\n+   e.g. -iwithprefix and -iwithprefixbefore.  Moreover, we need to\n+   accept options beginning with -W that we do not recognise, but not\n+   to swallow any subsequent command line argument; this is handled as\n+   special cases in cpp_handle_option.  */\n static int\n parse_option (input)\n      const char *input;"}, {"sha": "dbb86ea97c81d185ea2a517991f56d66597ad8b2", "filename": "gcc/cppmain.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e817242739f61b792b0730712e512ba25256b5/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e817242739f61b792b0730712e512ba25256b5/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=05e817242739f61b792b0730712e512ba25256b5", "patch": "@@ -344,31 +344,25 @@ cb_define (pfile, node)\n      cpp_reader *pfile;\n      cpp_hashnode *node;\n {\n-  if (pfile->done_initializing)\n-    {\n-      maybe_print_line (cpp_get_line (pfile)->output_line);\n-      fprintf (print.outf, \"#define %s\", node->name);\n+  maybe_print_line (cpp_get_line (pfile)->output_line);\n+  fprintf (print.outf, \"#define %s\", node->name);\n \n-      /* -dD command line option.  */\n-      if (CPP_OPTION (pfile, dump_macros) == dump_definitions)\n-\tfputs ((const char *) cpp_macro_definition (pfile, node), print.outf);\n+  /* -dD command line option.  */\n+  if (CPP_OPTION (pfile, dump_macros) == dump_definitions)\n+    fputs ((const char *) cpp_macro_definition (pfile, node), print.outf);\n \n-      putc ('\\n', print.outf);\n-      print.lineno++;\n-    }\n+  putc ('\\n', print.outf);\n+  print.lineno++;\n }\n \n static void\n cb_undef (pfile, node)\n      cpp_reader *pfile;\n      cpp_hashnode *node;\n {\n-  if (pfile->done_initializing)\n-    {\n-      maybe_print_line (cpp_get_line (pfile)->output_line);\n-      fprintf (print.outf, \"#undef %s\\n\", node->name);\n-      print.lineno++;\n-    }\n+  maybe_print_line (cpp_get_line (pfile)->output_line);\n+  fprintf (print.outf, \"#undef %s\\n\", node->name);\n+  print.lineno++;\n }\n \n static void"}, {"sha": "e5e0935b754ad7a49bea6f14c18802b9ae64d1ce", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e817242739f61b792b0730712e512ba25256b5/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e817242739f61b792b0730712e512ba25256b5/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=05e817242739f61b792b0730712e512ba25256b5", "patch": "@@ -647,7 +647,7 @@ main (argc, argv)\n \t    int quoted = argv[i][2] == 'Q';\n \n \t    if (*tgt == '\\0' && i + 1 == argc)\n-\t      fatal (\"Filename missing after %s option\", argv[i]);\n+\t      fatal (\"Target missing after %s option\", argv[i]);\n \t    else\n \t      {\n \t\tif (*tgt == '\\0')\n@@ -2374,7 +2374,7 @@ do_include (buf, limit, op)\n \n   /* If specified file name is absolute, just open it.  */\n \n-  if (*fbeg == '/') {\n+  if (IS_ABSOLUTE_PATHNAME (fbeg)) {\n     strncpy (fname, (const char *)fbeg, flen);\n     fname[flen] = 0;\n     f = open (fname, O_RDONLY, 0666);\n@@ -2409,7 +2409,7 @@ do_include (buf, limit, op)\n       else\n \tstackp = include;\n \n-      if (!system_header_p || *fbeg == '/' || !stackp->fname)\n+      if (!system_header_p || IS_ABSOLUTE_PATHNAME (fbeg) || !stackp->fname)\n \tdeps_add_dep (deps, fname);\n       else {\n \tchar *p;"}]}