{"sha": "bfe7c10c9b72680d7ecedd5e408499f971097420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlN2MxMGM5YjcyNjgwZDdlY2VkZDVlNDA4NDk5Zjk3MTA5NzQyMA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2006-02-15T09:46:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:46:41Z"}, "message": "s-valint.adb (Scan_Integer): Call Scan_Raw_Unsigned instead of Scan_Unsigned...\n\n2006-02-13  Bob Duff  <duff@adacore.com>\n\n\t* s-valint.adb (Scan_Integer): Call Scan_Raw_Unsigned instead of\n\tScan_Unsigned, so we do not scan leading blanks and sign twice.\n\tInteger'Value(\"- 5\") and Integer'Value(\"-+5\") now correctly\n\traise Constraint_Error.\n\n\t* s-vallli.adb (Scan_Long_Long_Integer): Call\n\tScan_Raw_Long_Long_Unsigned instead of Scan_Long_Long_Unsigned, so we\n\tdo not scan leading blanks and sign twice.\n\tInteger'Value(\"- 5\") and Integer'Value(\"-+5\") now correctly\n\traise Constraint_Error.\n\n\t* s-valllu.ads, s-valllu.adb (Scan_Raw_Long_Long_Unsigned,\n\tScan_Long_Long_Unsigned): Split out most of the processing from\n\tScan_Long_Long_Unsigned out into\n\tScan_Raw_Long_Long_Unsigned, so that Val_LLI can call the Raw_ version.\n\tThis prevents scanning leading blanks and sign twice.\n\tAlso fixed a bug: Modular'Value(\"-0\") should raise Constraint_Error\n\tSee RM-3.5(44).\n\n\t* s-valuns.ads, s-valuns.adb (Scan_Raw_Unsigned, Scan_Unsigned): Split\n\tout most of the processing from Scan_Unsigned out into\n\tScan_Raw_Unsigned, so that Val_LLI can call the Raw_ version.\n\tThis prevents scanning leading blanks and sign twice.\n\n\t* s-valuti.ads, s-valuti.adb (Scan_Plus_Sign): Add Scan_Plus_Sign, for\n\tuse with Modular'Value attribute.\n\t(Scan_Plus_Sign): Add Scan_Plus_Sign, for use with Modular'Value\n\tattribute.\n\nFrom-SVN: r111101", "tree": {"sha": "cc8ecc6bf75735f2544635ed3a30db37cf84caf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc8ecc6bf75735f2544635ed3a30db37cf84caf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfe7c10c9b72680d7ecedd5e408499f971097420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe7c10c9b72680d7ecedd5e408499f971097420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe7c10c9b72680d7ecedd5e408499f971097420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe7c10c9b72680d7ecedd5e408499f971097420/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "744ab5804b6c501e99fa2fd16c580904682ba2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744ab5804b6c501e99fa2fd16c580904682ba2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744ab5804b6c501e99fa2fd16c580904682ba2f9"}], "stats": {"total": 251, "additions": 175, "deletions": 76}, "files": [{"sha": "60c761fdfd381ba5ff9d62e58de30b7d32fa61a4", "filename": "gcc/ada/s-valint.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valint.adb?ref=bfe7c10c9b72680d7ecedd5e408499f971097420", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,7 +57,13 @@ package body System.Val_Int is\n \n    begin\n       Scan_Sign (Str, Ptr, Max, Minus, Start);\n-      Uval := Scan_Unsigned (Str, Ptr, Max);\n+\n+      if Str (Ptr.all) not in '0' .. '9' then\n+         Ptr.all := Start;\n+         raise Constraint_Error;\n+      end if;\n+\n+      Uval := Scan_Raw_Unsigned (Str, Ptr, Max);\n \n       --  Deal with overflow cases, and also with maximum negative number\n "}, {"sha": "850bdf1b7a938a6d16e5b5caa5a00317065389fa", "filename": "gcc/ada/s-vallli.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-vallli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-vallli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vallli.adb?ref=bfe7c10c9b72680d7ecedd5e408499f971097420", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,9 +37,9 @@ with System.Val_Util;       use System.Val_Util;\n \n package body System.Val_LLI is\n \n-   ---------------------------\n-   -- Scn_Long_Long_Integer --\n-   ---------------------------\n+   ----------------------------\n+   -- Scan_Long_Long_Integer --\n+   ----------------------------\n \n    function Scan_Long_Long_Integer\n      (Str  : String;\n@@ -57,13 +57,20 @@ package body System.Val_LLI is\n \n    begin\n       Scan_Sign (Str, Ptr, Max, Minus, Start);\n-      Uval := Scan_Long_Long_Unsigned (Str, Ptr, Max);\n+\n+      if Str (Ptr.all) not in '0' .. '9' then\n+         Ptr.all := Start;\n+         raise Constraint_Error;\n+      end if;\n+\n+      Uval := Scan_Raw_Long_Long_Unsigned (Str, Ptr, Max);\n \n       --  Deal with overflow cases, and also with maximum negative number\n \n       if Uval > Long_Long_Unsigned (Long_Long_Integer'Last) then\n          if Minus\n-           and then Uval = Long_Long_Unsigned (-(Long_Long_Integer'First)) then\n+           and then Uval = Long_Long_Unsigned (-(Long_Long_Integer'First))\n+         then\n             return Long_Long_Integer'First;\n          else\n             raise Constraint_Error;"}, {"sha": "ab5752f4c7c41d04926a8e53108bdb50c1618329", "filename": "gcc/ada/s-valllu.adb", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.adb?ref=bfe7c10c9b72680d7ecedd5e408499f971097420", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,11 +36,11 @@ with System.Val_Util;       use System.Val_Util;\n \n package body System.Val_LLU is\n \n-   -----------------------------\n-   -- Scan_Long_Long_Unsigned --\n-   -----------------------------\n+   ---------------------------------\n+   -- Scan_Raw_Long_Long_Unsigned --\n+   ---------------------------------\n \n-   function Scan_Long_Long_Unsigned\n+   function Scan_Raw_Long_Long_Unsigned\n      (Str : String;\n       Ptr : access Integer;\n       Max : Integer) return Long_Long_Unsigned\n@@ -54,17 +54,9 @@ package body System.Val_LLU is\n       Expon : Integer;\n       --  Exponent value\n \n-      Minus : Boolean := False;\n-      --  Set to True if minus sign is present, otherwise to False. Note that\n-      --  a minus sign is permissible for the singular case of -0, and in any\n-      --  case the pointer is left pointing past a negative integer literal.\n-\n       Overflow : Boolean := False;\n       --  Set True if overflow is detected at any point\n \n-      Start : Positive;\n-      --  Save location of first non-blank character\n-\n       Base_Char : Character;\n       --  Base character (# or :) in based case\n \n@@ -75,13 +67,6 @@ package body System.Val_LLU is\n       --  Digit value\n \n    begin\n-      Scan_Sign (Str, Ptr, Max, Minus, Start);\n-\n-      if Str (Ptr.all) not in '0' .. '9' then\n-         Ptr.all := Start;\n-         raise Constraint_Error;\n-      end if;\n-\n       P := Ptr.all;\n       Uval := Character'Pos (Str (P)) - Character'Pos ('0');\n       P := P + 1;\n@@ -273,11 +258,34 @@ package body System.Val_LLU is\n \n       --  Return result, dealing with sign and overflow\n \n-      if Overflow or else (Minus and then Uval /= 0) then\n+      if Overflow then\n          raise Constraint_Error;\n       else\n          return Uval;\n       end if;\n+   end Scan_Raw_Long_Long_Unsigned;\n+\n+   -----------------------------\n+   -- Scan_Long_Long_Unsigned --\n+   -----------------------------\n+\n+   function Scan_Long_Long_Unsigned\n+     (Str : String;\n+      Ptr : access Integer;\n+      Max : Integer) return Long_Long_Unsigned\n+   is\n+      Start : Positive;\n+      --  Save location of first non-blank character\n+\n+   begin\n+      Scan_Plus_Sign (Str, Ptr, Max, Start);\n+\n+      if Str (Ptr.all) not in '0' .. '9' then\n+         Ptr.all := Start;\n+         raise Constraint_Error;\n+      end if;\n+\n+      return Scan_Raw_Long_Long_Unsigned (Str, Ptr, Max);\n    end Scan_Long_Long_Unsigned;\n \n    ------------------------------"}, {"sha": "e6c740f8a50cf021ca08a954c7cbc7df67e3616a", "filename": "gcc/ada/s-valllu.ads", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.ads?ref=bfe7c10c9b72680d7ecedd5e408499f971097420", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,26 +31,27 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains routines for scanning unsigned Long_Long_Unsigned\n+--  This package contains routines for scanning modular Long_Long_Unsigned\n --  values for use in Text_IO.Modular_IO, and the Value attribute.\n \n with System.Unsigned_Types;\n \n package System.Val_LLU is\n    pragma Pure;\n \n-   function Scan_Long_Long_Unsigned\n+   function Scan_Raw_Long_Long_Unsigned\n      (Str : String;\n       Ptr : access Integer;\n       Max : Integer) return System.Unsigned_Types.Long_Long_Unsigned;\n    --  This function scans the string starting at Str (Ptr.all) for a valid\n    --  integer according to the syntax described in (RM 3.5(43)). The substring\n-   --  scanned extends no further than Str (Max). There are three cases for the\n-   --  return:\n+   --  scanned extends no further than Str (Max).  Note: this does not scan\n+   --  leading or trailing blanks, nor leading sign.\n+   --\n+   --  There are three cases for the return:\n    --\n-   --  If a valid integer is found after scanning past any initial spaces, then\n-   --  Ptr.all is updated past the last character of the integer (but trailing\n-   --  spaces are not scanned out).\n+   --  If a valid integer is found, then Ptr.all is updated past the last\n+   --  character of the integer.\n    --\n    --  If no valid integer is found, then Ptr.all points either to an initial\n    --  non-digit character, or to Max + 1 if the field is all spaces and the\n@@ -59,16 +60,24 @@ package System.Val_LLU is\n    --  If a syntactically valid integer is scanned, but the value is out of\n    --  range, or, in the based case, the base value is out of range or there\n    --  is an out of range digit, then Ptr.all points past the integer, and\n-   --  Constraint_Error is raised. Note that if a minus sign is present, and\n-   --  the integer value is non-zero, then constraint error will be raised.\n+   --  Constraint_Error is raised.\n    --\n    --  Note: these rules correspond to the requirements for leaving the pointer\n-   --  positioned in Text_Io.Get\n+   --  positioned in Text_IO.Get\n    --\n-   --  Note: if Str is null, i.e. if Max is less than Ptr, then this is a\n+   --  Note: if Str is empty, i.e. if Max is less than Ptr, then this is a\n    --  special case of an all-blank string, and Ptr is unchanged, and hence\n    --  is greater than Max as required in this case.\n \n+   function Scan_Long_Long_Unsigned\n+     (Str : String;\n+      Ptr : access Integer;\n+      Max : Integer) return System.Unsigned_Types.Long_Long_Unsigned;\n+   --  Same as Scan_Raw_Long_Long_Unsigned, except scans optional leading\n+   --  blanks, and an optional leading plus sign.\n+   --  Note: if a minus sign is present, Constraint_Error will be raised.\n+   --  Note: trailing blanks are not scanned.\n+\n    function Value_Long_Long_Unsigned\n      (Str : String) return System.Unsigned_Types.Long_Long_Unsigned;\n    --  Used in computing X'Value (Str) where X is a modular integer type whose"}, {"sha": "d9d7940a3560787fed50961544228a03ed3309c8", "filename": "gcc/ada/s-valuns.adb", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valuns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valuns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuns.adb?ref=bfe7c10c9b72680d7ecedd5e408499f971097420", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,11 +36,11 @@ with System.Val_Util;       use System.Val_Util;\n \n package body System.Val_Uns is\n \n-   -------------------\n-   -- Scan_Unsigned --\n-   -------------------\n+   -----------------------\n+   -- Scan_Raw_Unsigned --\n+   -----------------------\n \n-   function Scan_Unsigned\n+   function Scan_Raw_Unsigned\n      (Str : String;\n       Ptr : access Integer;\n       Max : Integer) return Unsigned\n@@ -54,17 +54,9 @@ package body System.Val_Uns is\n       Expon : Integer;\n       --  Exponent value\n \n-      Minus : Boolean := False;\n-      --  Set to True if minus sign is present, otherwise to False. Note that\n-      --  a minus sign is permissible for the singular case of -0, and in any\n-      --  case the pointer is left pointing past a negative integer literal.\n-\n       Overflow : Boolean := False;\n       --  Set True if overflow is detected at any point\n \n-      Start : Positive;\n-      --  Save location of first non-blank character\n-\n       Base_Char : Character;\n       --  Base character (# or :) in based case\n \n@@ -75,13 +67,6 @@ package body System.Val_Uns is\n       --  Digit value\n \n    begin\n-      Scan_Sign (Str, Ptr, Max, Minus, Start);\n-\n-      if Str (Ptr.all) not in '0' .. '9' then\n-         Ptr.all := Start;\n-         raise Constraint_Error;\n-      end if;\n-\n       P := Ptr.all;\n       Uval := Character'Pos (Str (P)) - Character'Pos ('0');\n       P := P + 1;\n@@ -270,11 +255,34 @@ package body System.Val_Uns is\n \n       --  Return result, dealing with sign and overflow\n \n-      if Overflow or else (Minus and then Uval /= 0) then\n+      if Overflow then\n          raise Constraint_Error;\n       else\n          return Uval;\n       end if;\n+   end Scan_Raw_Unsigned;\n+\n+   -------------------\n+   -- Scan_Unsigned --\n+   -------------------\n+\n+   function Scan_Unsigned\n+     (Str : String;\n+      Ptr : access Integer;\n+      Max : Integer) return Unsigned\n+   is\n+      Start : Positive;\n+      --  Save location of first non-blank character\n+\n+   begin\n+      Scan_Plus_Sign (Str, Ptr, Max, Start);\n+\n+      if Str (Ptr.all) not in '0' .. '9' then\n+         Ptr.all := Start;\n+         raise Constraint_Error;\n+      end if;\n+\n+      return Scan_Raw_Unsigned (Str, Ptr, Max);\n    end Scan_Unsigned;\n \n    --------------------"}, {"sha": "7503ca4b72036b4ce74c87ba98cf7a819eb9fba0", "filename": "gcc/ada/s-valuns.ads", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valuns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valuns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuns.ads?ref=bfe7c10c9b72680d7ecedd5e408499f971097420", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,25 +32,26 @@\n ------------------------------------------------------------------------------\n \n --  This package contains routines for scanning modular Unsigned\n---  values for use in Text_IO.Modular, and the Value attribute.\n+--  values for use in Text_IO.Modular_IO, and the Value attribute.\n \n with System.Unsigned_Types;\n \n package System.Val_Uns is\n    pragma Pure;\n \n-   function Scan_Unsigned\n+   function Scan_Raw_Unsigned\n      (Str : String;\n       Ptr : access Integer;\n       Max : Integer) return System.Unsigned_Types.Unsigned;\n    --  This function scans the string starting at Str (Ptr.all) for a valid\n    --  integer according to the syntax described in (RM 3.5(43)). The substring\n-   --  scanned extends no further than Str (Max). There are three cases for the\n-   --  return:\n+   --  scanned extends no further than Str (Max).  Note: this does not scan\n+   --  leading or trailing blanks, nor leading sign.\n+   --\n+   --  There are three cases for the return:\n    --\n-   --  If a valid integer is found after scanning past any initial spaces, then\n-   --  Ptr.all is updated past the last character of the integer (but trailing\n-   --  spaces are not scanned out).\n+   --  If a valid integer is found, then Ptr.all is updated past the last\n+   --  character of the integer.\n    --\n    --  If no valid integer is found, then Ptr.all points either to an initial\n    --  non-digit character, or to Max + 1 if the field is all spaces and the\n@@ -59,16 +60,24 @@ package System.Val_Uns is\n    --  If a syntactically valid integer is scanned, but the value is out of\n    --  range, or, in the based case, the base value is out of range or there\n    --  is an out of range digit, then Ptr.all points past the integer, and\n-   --  Constraint_Error is raised. Note that if a minus sign is present, and\n-   --  the integer value is non-zero, then constraint error will be raised.\n+   --  Constraint_Error is raised.\n    --\n    --  Note: these rules correspond to the requirements for leaving the pointer\n-   --  positioned in Text_Io.Get\n+   --  positioned in Text_IO.Get\n    --\n-   --  Note: if Str is null, i.e. if Max is less than Ptr, then this is a\n+   --  Note: if Str is empty, i.e. if Max is less than Ptr, then this is a\n    --  special case of an all-blank string, and Ptr is unchanged, and hence\n    --  is greater than Max as required in this case.\n \n+   function Scan_Unsigned\n+     (Str : String;\n+      Ptr : access Integer;\n+      Max : Integer) return System.Unsigned_Types.Unsigned;\n+   --  Same as Scan_Raw_Unsigned, except scans optional leading\n+   --  blanks, and an optional leading plus sign.\n+   --  Note: if a minus sign is present, Constraint_Error will be raised.\n+   --  Note: trailing blanks are not scanned.\n+\n    function Value_Unsigned\n      (Str : String) return System.Unsigned_Types.Unsigned;\n    --  Used in computing X'Value (Str) where X is a modular integer type whose"}, {"sha": "258620e24b6482fa70c1b193f3881e70631911ce", "filename": "gcc/ada/s-valuti.adb", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuti.adb?ref=bfe7c10c9b72680d7ecedd5e408499f971097420", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -159,6 +159,50 @@ package body System.Val_Util is\n \n    end Scan_Exponent;\n \n+   --------------------\n+   -- Scan_Plus_Sign --\n+   --------------------\n+\n+   procedure Scan_Plus_Sign\n+     (Str   : String;\n+      Ptr   : access Integer;\n+      Max   : Integer;\n+      Start : out Positive)\n+   is\n+      P : Natural := Ptr.all;\n+\n+   begin\n+      if P > Max then\n+         raise Constraint_Error;\n+      end if;\n+\n+      --  Scan past initial blanks\n+\n+      while Str (P) = ' ' loop\n+         P := P + 1;\n+\n+         if P > Max then\n+            Ptr.all := P;\n+            raise Constraint_Error;\n+         end if;\n+      end loop;\n+\n+      Start := P;\n+\n+      --  Skip past an initial plus sign\n+\n+      if Str (P) = '+' then\n+         P := P + 1;\n+\n+         if P > Max then\n+            Ptr.all := Start;\n+            raise Constraint_Error;\n+         end if;\n+      end if;\n+\n+      Ptr.all := P;\n+   end Scan_Plus_Sign;\n+\n    ---------------\n    -- Scan_Sign --\n    ---------------"}, {"sha": "944b945a2ae18ec3be6fcb83ad59bcac2c7c654c", "filename": "gcc/ada/s-valuti.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe7c10c9b72680d7ecedd5e408499f971097420/gcc%2Fada%2Fs-valuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuti.ads?ref=bfe7c10c9b72680d7ecedd5e408499f971097420", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -70,6 +70,14 @@ package System.Val_Util is\n    --  is greater than Max as required in this case. Constraint_Error is\n    --  also raised in this case.\n \n+   procedure Scan_Plus_Sign\n+     (Str   : String;\n+      Ptr   : access Integer;\n+      Max   : Integer;\n+      Start : out Positive);\n+   --  Same as Scan_Sign, but allows only plus, not minus.\n+   --  This is used for modular types.\n+\n    function Scan_Exponent\n      (Str  : String;\n       Ptr  : access Integer;"}]}