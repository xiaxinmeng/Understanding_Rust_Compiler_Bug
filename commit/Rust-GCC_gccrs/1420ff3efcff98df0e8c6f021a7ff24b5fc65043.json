{"sha": "1420ff3efcff98df0e8c6f021a7ff24b5fc65043", "node_id": "C_kwDOANBUbNoAKDE0MjBmZjNlZmNmZjk4ZGYwZThjNmYwMjFhN2ZmMjRiNWZjNjUwNDM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-11-29T12:52:47Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-11-29T12:52:47Z"}, "message": "c++: redundant explicit 'this' capture before C++20 [PR100493]\n\nAs described in detail in the PR, in C++20 implicitly capturing 'this'\nvia a '=' capture default is deprecated, and in C++17 adding an explicit\n'this' capture alongside a '=' capture default is diagnosed as redundant\n(and is strictly speaking ill-formed).  This means it's impossible to\nwrite, in a forward-compatible way, a C++17 lambda that has a '=' capture\ndefault and that also captures 'this' (implicitly or explicitly):\n\n  [=] { this; }      // #1 deprecated in C++20, OK in C++17\n\t\t     // GCC issues a -Wdeprecated warning in C++20 mode\n\n  [=, this] { }      // #2 ill-formed in C++17, OK in C++20\n\t\t     // GCC issues an unconditional warning in C++17 mode\n\nThis patch resolves this dilemma by downgrading the warning for #2 into\na -pedantic one.  In passing, move it into the -Wc++20-extensions class\nof warnings and adjust its wording accordingly.\n\n\tPR c++/100493\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_lambda_introducer): In C++17, don't\n\tdiagnose a redundant 'this' capture alongside a by-copy\n\tcapture default unless -pedantic.  Move the diagnostic into\n\t-Wc++20-extensions and adjust wording accordingly.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/lambda-this1.C: Adjust expected diagnostics.\n\t* g++.dg/cpp1z/lambda-this8.C: New test.\n\t* g++.dg/cpp2a/lambda-this3.C: Compile with -pedantic in C++17\n\tto continue to diagnose redundant 'this' captures.", "tree": {"sha": "692094210fd905557b78e08063f1f0e55bb25e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/692094210fd905557b78e08063f1f0e55bb25e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1420ff3efcff98df0e8c6f021a7ff24b5fc65043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1420ff3efcff98df0e8c6f021a7ff24b5fc65043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1420ff3efcff98df0e8c6f021a7ff24b5fc65043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/comments", "author": null, "committer": null, "parents": [{"sha": "a5d269f0c1cda545a86da960e8989bea862dd75e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d269f0c1cda545a86da960e8989bea862dd75e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d269f0c1cda545a86da960e8989bea862dd75e"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "899797b0c79910ce7f7c95ff86a6861ea34e8b84", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1420ff3efcff98df0e8c6f021a7ff24b5fc65043", "patch": "@@ -11184,10 +11184,12 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n       if (cp_lexer_next_token_is_keyword (parser->lexer, RID_THIS))\n \t{\n \t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n-\t  if (cxx_dialect < cxx20\n+\t  if (cxx_dialect < cxx20 && pedantic\n \t      && LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr) == CPLD_COPY)\n-\t    pedwarn (loc, 0, \"explicit by-copy capture of %<this%> redundant \"\n-\t\t     \"with by-copy capture default\");\n+\t    pedwarn (loc, OPT_Wc__20_extensions,\n+\t\t     \"explicit by-copy capture of %<this%> \"\n+\t\t     \"with by-copy capture default only available with \"\n+\t\t     \"%<-std=c++20%> or %<-std=gnu++20%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t  if (LAMBDA_EXPR_THIS_CAPTURE (lambda_expr))\n \t    pedwarn (input_location, 0,"}, {"sha": "e12330a829181f70f6843497a8ef7444d625e8d3", "filename": "gcc/testsuite/g++.dg/cpp1z/lambda-this1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this1.C?ref=1420ff3efcff98df0e8c6f021a7ff24b5fc65043", "patch": "@@ -18,7 +18,7 @@ struct A {\n     auto i = [=] { return a; };\t\t// { dg-warning \"implicit capture\" \"\" { target c++2a } }\n     auto j = [&] { return a; };\n     // P0409R2 - C++2A lambda capture [=, this]\n-    auto k = [=, this] { return a; };// { dg-error \"explicit by-copy capture of 'this' redundant with by-copy capture default\" \"\" { target c++17_down } }\n+    auto k = [=, this] { return a; };// { dg-error \"explicit by-copy capture of 'this' with by-copy capture default only available with\" \"\" { target c++17_down } }\n     auto l = [&, this] { return a; };\n     auto m = [=, *this] { return a; };// { dg-error \"'*this' capture only available with\" \"\" { target c++14_down } }\n     auto n = [&, *this] { return a; };// { dg-error \"'*this' capture only available with\" \"\" { target c++14_down } }\n@@ -27,12 +27,12 @@ struct A {\n \t\t\t\t\t// { dg-error \"'*this' capture only available with\" \"\" { target c++14_down } .-1 }\n     auto q = [=, this, *this] { return a; };// { dg-error \"already captured 'this'\" }\n \t\t\t\t\t    // { dg-error \"'*this' capture only available with\" \"\" { target c++14_down } .-1 }\n-\t\t\t\t\t    // { dg-error \"explicit by-copy capture of 'this' redundant with by-copy capture default\" \"\" { target c++17_down } .-2 }\n+\t\t\t\t\t    // { dg-error \"explicit by-copy capture of 'this' with by-copy capture default only available with\" \"\" { target c++17_down } .-2 }\n     auto r = [=, this, this] { return a; };// { dg-error \"already captured 'this'\" }\n-\t\t\t\t\t   // { dg-error \"explicit by-copy capture of 'this' redundant with by-copy capture default\" \"\" { target c++17_down } .-1 }\n+\t\t\t\t\t   // { dg-error \"explicit by-copy capture of 'this' with by-copy capture default only available with\" \"\" { target c++17_down } .-1 }\n     auto s = [=, *this, this] { return a; };// { dg-error \"already captured 'this'\" }\n \t\t\t\t\t    // { dg-error \"'*this' capture only available with\" \"\" { target c++14_down } .-1 }\n-\t\t\t\t\t    // { dg-error \"explicit by-copy capture of 'this' redundant with by-copy capture default\" \"\" { target c++17_down } .-2 }\n+\t\t\t\t\t    // { dg-error \"explicit by-copy capture of 'this' with by-copy capture default only available with\" \"\" { target c++17_down } .-2 }\n     auto t = [=, *this, *this] { return a; };// { dg-error \"already captured 'this'\" }\n \t\t\t\t\t     // { dg-error \"'*this' capture only available with\" \"\" { target c++14_down } .-1 }\n     auto u = [&, this, *this] { return a; };// { dg-error \"already captured 'this'\" }"}, {"sha": "4542cbd85064022e7a4a8b292cdc9291e76e445d", "filename": "gcc/testsuite/g++.dg/cpp1z/lambda-this8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this8.C?ref=1420ff3efcff98df0e8c6f021a7ff24b5fc65043", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/100493\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"\" }\n+\n+struct A {\n+  void f() {\n+    [=, this] { };\n+  }\n+};"}, {"sha": "bc54a4c895dc89d211f3c99c27ef58e0f3052112", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-this3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-this3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1420ff3efcff98df0e8c6f021a7ff24b5fc65043/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-this3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-this3.C?ref=1420ff3efcff98df0e8c6f021a7ff24b5fc65043", "patch": "@@ -1,6 +1,6 @@\n // P0806R2\n // { dg-do compile { target c++17 } }\n-// { dg-options \"\" }\n+// { dg-options \"-pedantic\" }\n \n struct X {\n   int x;"}]}