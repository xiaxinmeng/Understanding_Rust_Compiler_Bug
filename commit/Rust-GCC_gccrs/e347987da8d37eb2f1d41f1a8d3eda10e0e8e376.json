{"sha": "e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0Nzk4N2RhOGQzN2ViMmYxZDQxZjFhOGQzZWRhMTBlMGU4ZTM3Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-03T14:35:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-03T14:35:28Z"}, "message": "Fix libstdc++ versioned namespace build\n\n\tPR libstdc++/68323\n\tPR libstdc++/77794\n\t* config/abi/pre/gnu-versioned-namespace.ver: Add exports for\n\t__cxa_thread_atexit and __gnu_cxx::__freeres.\n\t* include/Makefile.am: Add <experimental/bits/lfts_config.h>\n\t* include/Makefile.in: Regenerate.\n\t* include.bits/basic_string.h: Fix nesting of versioned namespaces.\n\t* include/bits/c++config: Declare versioned namespaces for literals.\n\t* include/bits/regex.h (basic_regex, match_results): Add workarounds\n\tfor PR c++/59256.\n\t* include/bits/uniform_int_dist.h: Fix nesting of versioned namespace.\n\t* include/std/chrono: Likewise.\n\t* include/std/complex: Likewise.\n\t* include/std/string_view: Likewise.\n\t* include/std/variant: Likewise. Add workaround for PR c++/59256.\n\t* include/experimental/bits/fs_fwd.h: Declare versioned namespace.\n\t* include/experimental/bits/lfts_config.h: Declare versioned\n\tnamespaces.\n\t* include/experimental/algorithm: Include\n\t<experimental/bits/lfts_config.h>.\n\t* include/experimental/any: Likewise.\n\t* include/experimental/bits/erase_if.h: Likewise.\n\t* include/experimental/chrono: Likewise.\n\t* include/experimental/functional: Likewise.\n\t* include/experimental/memory_resource: Likewise.\n\t* include/experimental/optional: Likewise.\n\t* include/experimental/propagate_const: Likewise.\n\t* include/experimental/random: Likewise.\n\t* include/experimental/ratio: Likewise.\n\t* include/experimental/system_error: Likewise.\n\t* include/experimental/tuple: Likewise.\n\t* include/experimental/type_traits: Likewise.\n\t* include/experimental/utility: Likewise.\n\t* include/experimental/string_view: Likewise. Fix nesting of\n\tversioned namespaces.\n\t* include/experimental/bits/string_view.tcc: Reopen inline namespace\n\tfor non-inline function definitions.\n\t* testsuite/17_intro/using_namespace_std_exp_neg.cc: New test.\n\t* testsuite/20_util/duration/literals/range.cc: Adjust dg-error line.\n\t* testsuite/experimental/any/misc/any_cast_neg.cc: Likewise.\n\t* testsuite/experimental/propagate_const/assignment/move_neg.cc:\n\tLikewise.\n\t* testsuite/experimental/propagate_const/cons/move_neg.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements2.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements3.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements4.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements5.cc: Likewise.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Likewise.\n\nFrom-SVN: r240714", "tree": {"sha": "b6af99ff232031deeae85d4b5056af3171278fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6af99ff232031deeae85d4b5056af3171278fbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1adae327479aaff6d8020d9df6e401b7075c5672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adae327479aaff6d8020d9df6e401b7075c5672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1adae327479aaff6d8020d9df6e401b7075c5672"}], "stats": {"total": 332, "additions": 283, "deletions": 49}, "files": [{"sha": "7753c85d585352fd9a55f4cf2dd42371a979cc83", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -1,5 +1,54 @@\n 2016-10-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/68323\n+\tPR libstdc++/77794\n+\t* config/abi/pre/gnu-versioned-namespace.ver: Add exports for\n+\t__cxa_thread_atexit and __gnu_cxx::__freeres.\n+\t* include/Makefile.am: Add <experimental/bits/lfts_config.h>\n+\t* include/Makefile.in: Regenerate.\n+\t* include.bits/basic_string.h: Fix nesting of versioned namespaces.\n+\t* include/bits/c++config: Declare versioned namespaces for literals.\n+\t* include/bits/regex.h (basic_regex, match_results): Add workarounds\n+\tfor PR c++/59256.\n+\t* include/bits/uniform_int_dist.h: Fix nesting of versioned namespace.\n+\t* include/std/chrono: Likewise.\n+\t* include/std/complex: Likewise.\n+\t* include/std/string_view: Likewise.\n+\t* include/std/variant: Likewise. Add workaround for PR c++/59256.\n+\t* include/experimental/bits/fs_fwd.h: Declare versioned namespace.\n+\t* include/experimental/bits/lfts_config.h: Declare versioned\n+\tnamespaces.\n+\t* include/experimental/algorithm: Include\n+\t<experimental/bits/lfts_config.h>.\n+\t* include/experimental/any: Likewise.\n+\t* include/experimental/bits/erase_if.h: Likewise.\n+\t* include/experimental/chrono: Likewise.\n+\t* include/experimental/functional: Likewise.\n+\t* include/experimental/memory_resource: Likewise.\n+\t* include/experimental/optional: Likewise.\n+\t* include/experimental/propagate_const: Likewise.\n+\t* include/experimental/random: Likewise.\n+\t* include/experimental/ratio: Likewise.\n+\t* include/experimental/system_error: Likewise.\n+\t* include/experimental/tuple: Likewise.\n+\t* include/experimental/type_traits: Likewise.\n+\t* include/experimental/utility: Likewise.\n+\t* include/experimental/string_view: Likewise. Fix nesting of\n+\tversioned namespaces.\n+\t* include/experimental/bits/string_view.tcc: Reopen inline namespace\n+\tfor non-inline function definitions.\n+\t* testsuite/17_intro/using_namespace_std_exp_neg.cc: New test.\n+\t* testsuite/20_util/duration/literals/range.cc: Adjust dg-error line.\n+\t* testsuite/experimental/any/misc/any_cast_neg.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/assignment/move_neg.cc:\n+\tLikewise.\n+\t* testsuite/experimental/propagate_const/cons/move_neg.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements2.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements3.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements4.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements5.cc: Likewise.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Likewise.\n+\n \tPR libstdc++/77814\n \t* include/bits/std_abs.h: Use \"C++\" language linkage.\n \t* testsuite/17_intro/headers/c++2011/linkage.cc: Move <complex.h> to"}, {"sha": "34d58aea206a0362f559c95f1b457be06ef6edc6", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -187,6 +187,7 @@ CXXABI_2.0 {\n     __cxa_guard_release;\n     __cxa_pure_virtual;\n     __cxa_rethrow;\n+    __cxa_thread_atexit;\n     __cxa_throw;\n     __cxa_type_match;\n     __cxa_vec_cctor;\n@@ -344,6 +345,9 @@ CXXABI_2.0 {\n     _ZdlPv[jmy];\n     # operator delete[](void*, std::size_t)\n     _ZdaPv[jmy];\n+\n+    # __gnu_cxx::__freeres()\n+    _ZN9__gnu_cxx9__freeresEv;\n };\n \n # Symbols in the support library (libsupc++) supporting trans-mem."}, {"sha": "bb4a5329280b045f3db3bc6d98272b76b2b70b3c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -692,6 +692,7 @@ experimental_bits_srcdir = ${glibcxx_srcdir}/include/experimental/bits\n experimental_bits_builddir = ./experimental/bits\n experimental_bits_headers = \\\n \t${experimental_bits_srcdir}/erase_if.h \\\n+\t${experimental_bits_srcdir}/lfts_config.h \\\n \t${experimental_bits_srcdir}/shared_ptr.h \\\n \t${experimental_bits_srcdir}/string_view.tcc \\\n \t${experimental_bits_filesystem_headers}"}, {"sha": "3bef9d0453704e3436f5a62ed77350797d8ae13e", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -982,6 +982,7 @@ experimental_bits_srcdir = ${glibcxx_srcdir}/include/experimental/bits\n experimental_bits_builddir = ./experimental/bits\n experimental_bits_headers = \\\n \t${experimental_bits_srcdir}/erase_if.h \\\n+\t${experimental_bits_srcdir}/lfts_config.h \\\n \t${experimental_bits_srcdir}/shared_ptr.h \\\n \t${experimental_bits_srcdir}/string_view.tcc \\\n \t${experimental_bits_filesystem_headers}"}, {"sha": "b80e2705c29aa9d1066f27c80f6bfd37fc1f0f26", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -6091,6 +6091,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n #endif\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n #if __cplusplus > 201103L\n \n #define __cpp_lib_string_udls 201304\n@@ -6099,6 +6101,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   inline namespace string_literals\n   {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<char>\n@@ -6124,12 +6127,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string<char32_t>{__str, __len}; }\n #endif\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n   } // inline namespace string_literals\n   } // inline namespace literals\n \n #endif // __cplusplus > 201103L\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #endif // C++11"}, {"sha": "6db66d7914cee66ada9556f02a595c56c7597795", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -187,8 +187,11 @@\n     namespace placeholders { }\n     namespace regex_constants { }\n     namespace this_thread { }\n-\n-    namespace experimental { }\n+    inline namespace literals {\n+      inline namespace chrono_literals { }\n+      inline namespace complex_literals { }\n+      inline namespace string_literals { }\n+    }\n   }\n \n   namespace abi { }\n@@ -273,9 +276,16 @@ namespace std\n   namespace regex_constants { inline namespace __7 { } }\n   namespace this_thread { inline namespace __7 { } }\n \n-  namespace experimental { inline namespace __7 { } }\n+  inline namespace literals {\n+    inline namespace chrono_literals { inline namespace __7 { } }\n+    inline namespace complex_literals { inline namespace __7 { } }\n+    inline namespace string_literals { inline namespace __7 { } }\n+  }\n \n-  namespace __detail { inline namespace __7 { } }\n+  namespace __detail {\n+    inline namespace __7 { }\n+    namespace __variant { inline namespace __7 { } }\n+  }\n }\n \n namespace __gnu_cxx"}, {"sha": "a7d45e6edc47a1604b7fac0a2e1d1fec8c5344a7", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -769,10 +769,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n \t__detail::_RegexExecutorPolicy, bool>\n-\tfriend bool\n-\t__detail::__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n-\t\t\t\t    const basic_regex<_Cp, _Rp>&,\n-\t\t\t\t    regex_constants::match_flag_type);\n+\tfriend bool __detail::\n+#if _GLIBCXX_INLINE_VERSION\n+        __7:: // Required due to PR c++/59256\n+#endif\n+\t__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n+                          const basic_regex<_Cp, _Rp>&,\n+                          regex_constants::match_flag_type);\n \n       template<typename, typename, typename, bool>\n \tfriend class __detail::_Executor;\n@@ -1860,10 +1863,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n \t__detail::_RegexExecutorPolicy, bool>\n-\tfriend bool\n-\t__detail::__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n-\t\t\t\t    const basic_regex<_Cp, _Rp>&,\n-\t\t\t\t    regex_constants::match_flag_type);\n+\tfriend bool __detail::\n+#if _GLIBCXX_INLINE_VERSION\n+        __7:: // Required due to PR c++/59256\n+#endif\n+\t__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n+                          const basic_regex<_Cp, _Rp>&,\n+                          regex_constants::match_flag_type);\n \n       void\n       _M_resize(unsigned int __size)"}, {"sha": "2d668bcadb72b7c713fb8ea43bb75a3bb5623c70", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -36,19 +36,22 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   namespace __detail\n   {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /* Determine whether number is a power of 2.  */\n     template<typename _Tp>\n       inline bool\n       _Power_of_2(_Tp __x)\n       {\n \treturn ((__x - 1) & __x) == 0;\n       };\n+_GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   /**\n    * @brief Uniform discrete distribution for random numbers.\n    * A discrete random distribution on the range @f$[min, max]@f$ with equal"}, {"sha": "0ba6311e952f6cd31fea9b07838d608afc9683f4", "filename": "libstdc++-v3/include/experimental/algorithm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -37,6 +37,7 @@\n \n #include <algorithm>\n #include <random>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "5e091a45dda6ad77b4561b1b399b2082d6f0a032", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -39,6 +39,7 @@\n #include <new>\n #include <utility>\n #include <type_traits>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "0ed60aa4749faf8696a6ea1bab1872a510a7874f", "filename": "libstdc++-v3/include/experimental/bits/erase_if.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -35,6 +35,7 @@\n #if __cplusplus <= 201103L\n # include <bits/c++14_warning.h>\n #else\n+#include <experimental/bits/lfts_config.h>\n \n namespace std\n {"}, {"sha": "1c08b197ddad75adac381e63f5b70e7e2ac72abb", "filename": "libstdc++-v3/include/experimental/bits/fs_fwd.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -46,10 +46,13 @@ namespace filesystem\n {\n inline namespace v1\n {\n+#if _GLIBCXX_INLINE_VERSION\n+inline namespace __7 { }\n+#endif\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_USE_CXX11_ABI\n-  inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n+inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n #endif\n \n   /**"}, {"sha": "10e36874de2fdcaeaddb75485944c3b1631e0508", "filename": "libstdc++-v3/include/experimental/bits/lfts_config.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -0,0 +1,60 @@\n+// Namespace declarations for Library Fundamentals TS -*- C++ -*-\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/bits/lfts_config.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly.\n+ */\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+#include <bits/c++config.h>\n+\n+#if _GLIBCXX_INLINE_VERSION\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace chrono\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v1 { inline namespace __7 { } }\n+inline namespace fundamentals_v2 { inline namespace __7 { } }\n+} // namespace experimental\n+} // namespace chrono\n+\n+namespace experimental\n+{\n+inline namespace fundamentals_v1 { inline namespace __7 { } }\n+inline namespace fundamentals_v2 {\n+  inline namespace __7 { }\n+  namespace pmr { inline namespace __7 { } }\n+} // namespace fundamentals_v2\n+inline namespace literals { inline namespace string_view_literals {\n+  inline namespace __7 { }\n+} } // namespace literals::string_view_literals\n+} // namespace experimental\n+} // namespace std\n+#endif\n+#endif"}, {"sha": "7c6b1be32d9ad1f362ab8a410d5b62d9694950b6", "filename": "libstdc++-v3/include/experimental/bits/string_view.tcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -44,6 +44,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace experimental\n {\n+inline namespace fundamentals_v1\n+{\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits>\n@@ -222,6 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v1\n } // namespace experimental\n } // namespace std\n "}, {"sha": "e703d9364ef8997f7e9d117ebabb58549e1cae75", "filename": "libstdc++-v3/include/experimental/chrono", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -40,7 +40,7 @@\n #else\n \n #include <chrono>\n-\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "082e58ccd079f908f3e3b5222593d0fe0085e5eb", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -45,6 +45,7 @@\n #ifdef _GLIBCXX_PARALLEL\n # include <parallel/algorithm> // For std::__parallel::search\n #endif\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "39187c5088193d1b1a20136ad8f2e7bcec269b20", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -34,6 +34,7 @@\n #include <atomic>\n #include <cstddef>\n #include <bits/alloc_traits.h>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std {\n namespace experimental {"}, {"sha": "7191eca98ef6424d7f97d79f169d9d9722fdc5b6", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -53,6 +53,7 @@\n #include <bits/functexcept.h>\n #include <bits/functional_hash.h>\n #include <bits/enable_special_members.h>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "15ffe4ac6ad85bd5252e9c9584454b27b04ef9fa", "filename": "libstdc++-v3/include/experimental/propagate_const", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fpropagate_const?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -37,6 +37,7 @@\n \n #include <type_traits>\n #include <functional>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "039e45fd6945a96fdda2c7ffe85637ab79335dee", "filename": "libstdc++-v3/include/experimental/random", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -30,6 +30,7 @@\n #define _GLIBCXX_EXPERIMENTAL_RANDOM 1\n \n #include <random>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std {\n namespace experimental {"}, {"sha": "d55f6ae3388be2f1c1e32d15860cf21b0bc816d0", "filename": "libstdc++-v3/include/experimental/ratio", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -40,7 +40,7 @@\n #else\n \n #include <ratio>\n-\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -49,6 +49,7 @@ namespace experimental\n inline namespace fundamentals_v1\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n // See C++14 \u00a720.11.5, ratio comparison\n template <typename _R1, typename _R2>\n   constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;"}, {"sha": "8cb8c1ffa1c377677d373eb2f52c24a0e0fe36cf", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -41,6 +41,7 @@\n \n #include <string>\n #include <limits>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -651,13 +652,12 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n namespace experimental\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n   // I added these EMSR.\n   inline namespace literals\n   {\n   inline namespace string_view_literals\n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     inline constexpr basic_string_view<char>\n     operator\"\"sv(const char* __str, size_t __len)\n@@ -679,10 +679,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string_view<char32_t>{__str, __len}; }\n #endif\n \n-  }\n-  }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n+  _GLIBCXX_END_NAMESPACE_VERSION\n+  } // namespace string_literals\n+  } // namespace literals\n } // namespace experimental\n } // namespace std\n "}, {"sha": "5b286ee6b96769481fbbc508581fc1760d3c5b95", "filename": "libstdc++-v3/include/experimental/system_error", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -40,7 +40,7 @@\n #else\n \n #include <system_error>\n-\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -49,12 +49,14 @@ namespace experimental\n inline namespace fundamentals_v1\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n // See C++14 \u00a719.5, System error support\n template <typename _Tp>\n   constexpr bool is_error_code_enum_v = is_error_code_enum<_Tp>::value;\n template <typename _Tp>\n   constexpr bool is_error_condition_enum_v =\n     is_error_condition_enum<_Tp>::value;\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v1\n } // namespace experimental"}, {"sha": "dc158e8834224c35fc106c6445e128fc92d7a7bc", "filename": "libstdc++-v3/include/experimental/tuple", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -36,7 +36,9 @@\n #else\n \n #include <tuple>\n+#include <functional>\n #include <bits/invoke.h>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "06f1023a1393f702ae40d44d296ed5e467668697", "filename": "libstdc++-v3/include/experimental/type_traits", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -40,7 +40,7 @@\n #else\n \n #include <type_traits>\n-\n+#include <experimental/bits/lfts_config.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "77a161e314a58ee5147b7ab526051b5d7f2c06f1", "filename": "libstdc++-v3/include/experimental/utility", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Futility?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -31,6 +31,7 @@\n \n #include <utility>\n #include <bits/uses_allocator.h>\n+#include <experimental/bits/lfts_config.h>\n \n namespace std {\n namespace experimental {"}, {"sha": "cb8c87651833627cfa035ba5f3ea6cce69065d4f", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -881,6 +881,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n   {\n   inline namespace chrono_literals\n   {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _Rep, unsigned long long _Val>\n       struct _Checked_integral_constant\n@@ -956,6 +957,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       operator\"\"ns()\n       { return __check_overflow<chrono::nanoseconds, _Digits...>(); }\n \n+  _GLIBCXX_END_NAMESPACE_VERSION\n   } // inline namespace chrono_literals\n   } // inline namespace literals\n "}, {"sha": "a682247b2a66a5127d555b8048097337be24adec", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -1932,10 +1932,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     conj(_Tp __x)\n     { return __x; }\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n #if __cplusplus > 201103L\n \n inline namespace literals {\n inline namespace complex_literals {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_complex_udls 201309\n \n@@ -1963,12 +1966,12 @@ inline namespace complex_literals {\n   operator\"\"il(unsigned long long __num)\n   { return std::complex<long double>{0.0L, static_cast<long double>(__num)}; }\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // inline namespace complex_literals\n } // inline namespace literals\n \n #endif // C++14\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n #endif  // C++11"}, {"sha": "14bfcd06e00ad2af4fca90bb4e44ef9b49a1de23", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -427,10 +427,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t\t    _M_len;\n       const _CharT* _M_str;\n     };\n-\n+_GLIBCXX_END_NAMESPACE_VERSION\n \n   // [string.view.comparison], non-member basic_string_view comparison function\n- _GLIBCXX_END_NAMESPACE_VERSION\n   namespace __detail\n   {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -445,8 +444,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _Tp>\n       using __idt = typename __identity<_Tp>::type;\n- _GLIBCXX_END_NAMESPACE_VERSION\n+_GLIBCXX_END_NAMESPACE_VERSION\n   }\n+\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits>\n@@ -639,8 +639,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_fast_hash<hash<u32string_view>> : std::false_type\n     { };\n #endif\n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "48baf9a33c481a5c7ca9a8be210f6957f5bba3dc", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -85,10 +85,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   constexpr size_t variant_npos = -1;\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n namespace __detail\n {\n namespace __variant\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Returns the first apparence of _Tp in _Types.\n   // Returns sizeof...(_Types) if _Tp is not in _Types.\n   template<typename _Tp, typename... _Types>\n@@ -725,9 +728,12 @@ namespace __variant\n       }\n     };\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __variant\n } // namespace __detail\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   template<typename _Tp, typename... _Types>\n     inline constexpr bool holds_alternative(const variant<_Types...>& __v)\n     noexcept\n@@ -1250,7 +1256,11 @@ namespace __variant\n       }\n \n       template<typename _Vp>\n-\tfriend void* __detail::__variant::__get_storage(_Vp&& __v);\n+\tfriend void* __detail::__variant::\n+#if _GLIBCXX_INLINE_VERSION\n+        __7:: // Required due to PR c++/59256\n+#endif\n+        __get_storage(_Vp&& __v);\n     };\n \n   // To honor algebraic data type, variant<> should be a bottom type, which"}, {"sha": "22196e366438b57a2cea9df7d2a1d34cc482d414", "filename": "libstdc++-v3/testsuite/17_intro/using_namespace_std_exp_neg.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_exp_neg.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <array>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <random>\n+#include <regex>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <tuple>\n+#include <typeinfo>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <valarray>\n+#include <vector>\n+\n+namespace gnu\n+{\n+  using namespace std::experimental;  // { dg-error \"is not a namespace-name\" }\n+}\n+\n+// { dg-error \"expected namespace-name before\" \"\" { target *-*-* } 62 }"}, {"sha": "4ade327abbab959c70ba15f0f335a9b24868d01b", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -26,5 +26,5 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 889 }\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 890 }\n }"}, {"sha": "4310572493885467b63d75b951ed3f7f287d7dd8", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -25,5 +25,5 @@ void test01()\n   using std::experimental::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 368 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 369 }\n }"}, {"sha": "1b0366d756a2a1589fef638eb7223b2c80ba982f", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/assignment/move_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fassignment%2Fmove_neg.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -25,7 +25,7 @@\n using std::experimental::propagate_const;\n using std::unique_ptr;\n \n-// { dg-error \"no type\" \"\" { target *-*-* } 158 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 159 }\n \n int main()\n {"}, {"sha": "ffdc756569128914478233f2ca245ce9831ef600", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/cons/move_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Fcons%2Fmove_neg.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -25,10 +25,10 @@\n using std::experimental::propagate_const;\n using std::unique_ptr;\n \n-// { dg-error \"no type\" \"\" { target *-*-* } 117 }\n-// { dg-error \"no type\" \"\" { target *-*-* } 124 }\n-// { dg-error \"no type\" \"\" { target *-*-* } 133 }\n-// { dg-error \"no type\" \"\" { target *-*-* } 142 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 118 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 125 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 134 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 143 }\n \n int main()\n {"}, {"sha": "de2d293453de3b4cbfc9f6cff3cf93041f498f5d", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -21,9 +21,9 @@\n \n using std::experimental::propagate_const;\n \n-// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 104 }\n-// { dg-error \"not a pointer-to-object type\" \"\" { target *-*-* } 65 }\n-// { dg-error \"forming pointer to reference type\" \"\" { target *-*-* } 184 }\n-// { dg-error \"forming pointer to reference type\" \"\" { target *-*-* } 210 }\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 105 }\n+// { dg-error \"not a pointer-to-object type\" \"\" { target *-*-* } 66 }\n+// { dg-error \"forming pointer to reference type\" \"\" { target *-*-* } 185 }\n+// { dg-error \"forming pointer to reference type\" \"\" { target *-*-* } 211 }\n \n propagate_const<void*> test1;"}, {"sha": "fd25204efb1e0325f51a34a191dc6ae3ad5a3202", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -21,6 +21,6 @@\n \n using std::experimental::propagate_const;\n \n-// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 104 }\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 105 }\n \n propagate_const<void (*)()> test1;"}, {"sha": "3cea93d4f38b41a879c074a7431c1c3c5e1de86e", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements4.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -21,8 +21,8 @@\n \n using std::experimental::propagate_const;\n \n-// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 104 }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 65 }\n-// { dg-error \"uninitialized reference member\" \"\" { target *-*-* } 111 }\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 105 }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 66 }\n+// { dg-error \"uninitialized reference member\" \"\" { target *-*-* } 112 }\n \n propagate_const<int&> test1; // { dg-error \"use of deleted function\" }"}, {"sha": "9740fc31d8cb80fcb2fad4a4d0cd9cd08927c881", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -21,6 +21,6 @@\n \n using std::experimental::propagate_const;\n \n-// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 104 }\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 105 }\n \n propagate_const<int[1]> test1;"}, {"sha": "20bc198d5f1b9ed76a280e4218f04900b8a930ba", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347987da8d37eb2f1d41f1a8d3eda10e0e8e376/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=e347987da8d37eb2f1d41f1a8d3eda10e0e8e376", "patch": "@@ -25,7 +25,7 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 332 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 342 }\n \n // \"template argument 1 is invalid\"\n // { dg-prune-output \"tuple:993\" }"}]}