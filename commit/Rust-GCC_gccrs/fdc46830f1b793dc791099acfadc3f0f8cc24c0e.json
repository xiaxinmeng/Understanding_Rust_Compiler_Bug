{"sha": "fdc46830f1b793dc791099acfadc3f0f8cc24c0e", "node_id": "C_kwDOANBUbNoAKGZkYzQ2ODMwZjFiNzkzZGM3OTEwOTlhY2ZhZGMzZjBmOGNjMjRjMGU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-23T12:47:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-23T12:51:43Z"}, "message": "middle-end/104644 - recursion with bswap match.pd pattern\n\nThe following patch avoids infinite recursion during generic folding.\nThe (cmp (bswap @0) INTEGER_CST@1) simplification relies on\n(bswap @1) actually being simplified, if it is not simplified, we just\nmove the bswap from one operand to the other and if @0 is also INTEGER_CST,\nwe apply the same rule next.\n\nThe reason why bswap @1 isn't folded to INTEGER_CST is that the INTEGER_CST\nhas TREE_OVERFLOW set on it and fold-const-call.cc predicate punts in\nsuch cases:\nstatic inline bool\ninteger_cst_p (tree t)\n{\n  return TREE_CODE (t) == INTEGER_CST && !TREE_OVERFLOW (t);\n}\nThe patch uses ! modifier to ensure the bswap is simplified and\nextends support to GENERIC by means of requiring !EXPR_P which\nis not perfect but a conservative approximation.\n\n2022-02-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104644\n\t* doc/match-and-simplify.texi: Amend ! documentation.\n\t* genmatch.cc (expr::gen_transform): Code-generate ! support\n\tfor GENERIC.\n\t(parser::parse_expr): Allow ! for GENERIC.\n\t* match.pd (cmp (bswap @0) INTEGER_CST@1): Use ! modifier on\n\tbswap.\n\n\t* gcc.dg/pr104644.c: New test.\n\nCo-Authored-by: Jakub Jelinek <jakub@redhat.com>", "tree": {"sha": "e258eabd0bfcca853c5e450e99b215becdbe18f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e258eabd0bfcca853c5e450e99b215becdbe18f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdc46830f1b793dc791099acfadc3f0f8cc24c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc46830f1b793dc791099acfadc3f0f8cc24c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc46830f1b793dc791099acfadc3f0f8cc24c0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "055a5308e7dcf7a476cdea8cb2bf8f98570adaca", "filename": "gcc/doc/match-and-simplify.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/gcc%2Fdoc%2Fmatch-and-simplify.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/gcc%2Fdoc%2Fmatch-and-simplify.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmatch-and-simplify.texi?ref=fdc46830f1b793dc791099acfadc3f0f8cc24c0e", "patch": "@@ -374,8 +374,10 @@ for example\n \n which moves the outer @code{plus} operation to the inner arms\n of the @code{vec_cond} expression but only if the actual plus\n-operations both simplify.  Note this is currently only supported\n-for code generation targeting @code{GIMPLE}.\n+operations both simplify.  Note that on @code{GENERIC} a simple\n+operand means that the result satisfies @code{!EXPR_P} which\n+can be limiting if the operation itself simplifies but the\n+remaining operand is an (unrelated) expression.\n \n As intermediate conversions are often optional there is a way to\n avoid the need to repeat patterns both with and without such"}, {"sha": "2eda73008219132ddd682f231ea7e424b9b2e553", "filename": "gcc/genmatch.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/gcc%2Fgenmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/gcc%2Fgenmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.cc?ref=fdc46830f1b793dc791099acfadc3f0f8cc24c0e", "patch": "@@ -2553,19 +2553,20 @@ expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n \tfprintf_indent (f, indent, \"_r%d = fold_build%d_loc (loc, %s, %s\",\n \t\t\tdepth, ops.length(), opr_name, type);\n       else\n-\t{\n-\t  fprintf_indent (f, indent, \"{\\n\");\n-\t  fprintf_indent (f, indent, \"  _r%d = maybe_build_call_expr_loc (loc, \"\n-\t\t\t  \"%s, %s, %d\", depth, opr_name, type, ops.length());\n-\t}\n+\tfprintf_indent (f, indent, \"_r%d = maybe_build_call_expr_loc (loc, \"\n+\t\t\t\"%s, %s, %d\", depth, opr_name, type, ops.length());\n       for (unsigned i = 0; i < ops.length (); ++i)\n \tfprintf (f, \", _o%d[%u]\", depth, i);\n       fprintf (f, \");\\n\");\n       if (opr->kind != id_base::CODE)\n \t{\n-\t  fprintf_indent (f, indent, \"  if (!_r%d)\\n\", depth);\n-\t  fprintf_indent (f, indent, \"    goto %s;\\n\", fail_label);\n-\t  fprintf_indent (f, indent, \"}\\n\");\n+\t  fprintf_indent (f, indent, \"if (!_r%d)\\n\", depth);\n+\t  fprintf_indent (f, indent, \"  goto %s;\\n\", fail_label);\n+\t}\n+      if (force_leaf)\n+\t{\n+\t  fprintf_indent (f, indent, \"if (EXPR_P (_r%d))\\n\", depth);\n+\t  fprintf_indent (f, indent, \"  goto %s;\\n\", fail_label);\n \t}\n       if (*opr == CONVERT_EXPR)\n \t{\n@@ -4297,9 +4298,6 @@ parser::parse_expr ()\n       && token->type == CPP_NOT\n       && !(token->flags & PREV_WHITE))\n     {\n-      if (!gimple)\n-\tfatal_at (token, \"forcing simplification to a leaf is not supported \"\n-\t\t  \"for GENERIC\");\n       eat_token (CPP_NOT);\n       e->force_leaf = true;\n     }"}, {"sha": "cf78a11ddd4aacaec8e9d45c9690e26b1704302e", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=fdc46830f1b793dc791099acfadc3f0f8cc24c0e", "patch": "@@ -3962,7 +3962,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (simplify\n    (cmp (bswap @0) INTEGER_CST@1)\n    (with { tree ctype = TREE_TYPE (@1); }\n-    (cmp (convert:ctype @0) (bswap @1)))))\n+    (cmp (convert:ctype @0) (bswap! @1)))))\n  /* (bswap(x) >> C1) & C2 can sometimes be simplified to (x >> C3) & C2.  */\n  (simplify\n   (bit_and (convert1? (rshift@0 (convert2? (bswap@4 @1)) INTEGER_CST@2))"}, {"sha": "70bf3a49647fb1289048d5b083be3df7fa497c5b", "filename": "gcc/testsuite/gcc.dg/pr104644.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104644.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc46830f1b793dc791099acfadc3f0f8cc24c0e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104644.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104644.c?ref=fdc46830f1b793dc791099acfadc3f0f8cc24c0e", "patch": "@@ -0,0 +1,9 @@\n+/* PR tree-optimization/104644 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-overflow\" } */\n+\n+int\n+foo (void)\n+{\n+  return __builtin_bswap16 (1.31072e+5f) != (signed char) 1.31072e+5f;\n+}"}]}