{"sha": "505970fc3324e2a0c00f5d82d66f62bae133e282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1OTcwZmMzMzI0ZTJhMGMwMGY1ZDgyZDY2ZjYyYmFlMTMzZTI4Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-09-01T03:45:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-09-01T03:45:30Z"}, "message": "target-def.h (TARGET_CXX): Add TARGET_CXX_EXPORT_CLASS_DATA.\n\n\t* target-def.h (TARGET_CXX): Add TARGET_CXX_EXPORT_CLASS_DATA.\n\t* target.h (cxx): Add export_class_data.\n\t* config/arm/arm.c (arm_cxx_export_class_data): New function.\n\t(TARGET_CXX_EXPORT_CLASS_DATA): Use it.\n\t* testsuite/g++.dg/ext/visibility/arm1.C: New test.\n\n\t* cp-tree.h (DECL_CONSTRUCTION_VTABLE_P): New macro.\n\t* class.c (build_ctor_vtbl_group): Set DECL_CONSTRUCTION_VTABLE_P.\n\t* decl2.c (determine_visibility): Honor\n\tTARGET_CXX_EXPORT_CLASS_DATA.\n\n\t* g++.dg/ext/visibility/arm1.C: New test.\n\nFrom-SVN: r86867", "tree": {"sha": "ec2aef636de8abf10479855a1221a1b908fabff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec2aef636de8abf10479855a1221a1b908fabff6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/505970fc3324e2a0c00f5d82d66f62bae133e282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505970fc3324e2a0c00f5d82d66f62bae133e282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/505970fc3324e2a0c00f5d82d66f62bae133e282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505970fc3324e2a0c00f5d82d66f62bae133e282/comments", "author": null, "committer": null, "parents": [{"sha": "be8fff8104f223a0eaa5ea36f385982d09d9731e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8fff8104f223a0eaa5ea36f385982d09d9731e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8fff8104f223a0eaa5ea36f385982d09d9731e"}], "stats": {"total": 110, "additions": 93, "deletions": 17}, "files": [{"sha": "55d646e834de7ee6294aebfa75f04553d6ff42a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -1,3 +1,11 @@\n+2004-08-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* target-def.h (TARGET_CXX): Add TARGET_CXX_EXPORT_CLASS_DATA.\n+\t* target.h (cxx): Add export_class_data.\n+\t* config/arm/arm.c (arm_cxx_export_class_data): New function.\n+\t(TARGET_CXX_EXPORT_CLASS_DATA): Use it.\n+\t* testsuite/g++.dg/ext/visibility/arm1.C: New test.\n+\n 2004-08-31  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (output_branch): Check the insn length possibly"}, {"sha": "52566be805aed0ffa1ad0ade0182498596b27951", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -172,6 +172,8 @@ static bool arm_cxx_guard_mask_bit (void);\n static tree arm_get_cookie_size (tree);\n static bool arm_cookie_has_size (void);\n static bool arm_cxx_cdtor_returns_this (void);\n+static bool arm_cxx_key_method_may_be_inline (void);\n+static bool arm_cxx_export_class_data (void);\n static void arm_init_libfuncs (void);\n \n \f\n@@ -296,6 +298,12 @@ static void arm_init_libfuncs (void);\n #undef TARGET_CXX_CDTOR_RETURNS_THIS\n #define TARGET_CXX_CDTOR_RETURNS_THIS arm_cxx_cdtor_returns_this\n \n+#undef TARGET_CXX_KEY_METHOD_MAY_BE_INLINE\n+#define TARGET_CXX_KEY_METHOD_MAY_BE_INLINE arm_cxx_key_method_may_be_inline\n+\n+#undef TARGET_CXX_EXPORT_CLASS_DATA\n+#define TARGET_CXX_EXPORT_CLASS_DATA arm_cxx_export_class_data\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -14204,6 +14212,25 @@ arm_cxx_cdtor_returns_this (void)\n   return TARGET_AAPCS_BASED;\n }\n \n+/* The EABI says that an inline function may never be the key\n+   method.  */\n+\n+static bool\n+arm_cxx_key_method_may_be_inline (void)\n+{\n+  return !TARGET_AAPCS_BASED;\n+}\n+\n+/* The EABI says that the virtual table, etc., for a class must be\n+   exported if it has a key method.  The EABI does not specific the\n+   behavior if there is no key method, but there is no harm in\n+   exporting the class data in that case too.  */\n+\n+static bool\n+arm_cxx_export_class_data (void)\n+{\n+  return TARGET_AAPCS_BASED;\n+}\n \n void\n arm_set_return_address (rtx source, rtx scratch)"}, {"sha": "60d6e75b73a8f71bd94e08e67d50b22a095af8ac", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -46,7 +46,7 @@\n   \"%{static:-Bstatic} %{shared:-shared} %{symbolic:-Bsymbolic} \"\t\\\n   \"-X\"\n \n-#if defined (__thumb__) && !defined (__THUMB_INTERWORK) \n+#if defined (__thumb__) && !defined (__THUMB_INTERWORK__) \n #define RENAME_LIBRARY_SET \".thumb_set\"\n #else\n #define RENAME_LIBRARY_SET \".set\""}, {"sha": "929bde0077ec13417a7d7f4af4a676e9c3746663", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -1,5 +1,10 @@\n 2004-08-31  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (DECL_CONSTRUCTION_VTABLE_P): New macro.\n+\t* class.c (build_ctor_vtbl_group): Set DECL_CONSTRUCTION_VTABLE_P.\n+\t* decl2.c (determine_visibility): Honor \n+\tTARGET_CXX_EXPORT_CLASS_DATA.\n+\n  \t* class.c (key_method): Rename to ...\n \t(determine_key_method): ... this.\n \t(finish_struct_1): Adjust accordingly."}, {"sha": "957151d33ebf0d289e5a1fe0aa03942329360c12", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -6996,6 +6996,7 @@ build_ctor_vtbl_group (tree binfo, tree t)\n      constructing the addresses of secondary vtables in the\n      construction vtable group.  */\n   vtbl = build_vtable (t, id, ptr_type_node);\n+  DECL_CONSTRUCTION_VTABLE_P (vtbl) = 1;\n   list = build_tree_list (vtbl, NULL_TREE);\n   accumulate_vtbl_inits (binfo, TYPE_BINFO (TREE_TYPE (binfo)),\n \t\t\t binfo, t, list);"}, {"sha": "35eb3a7766cf3545815ca3a03dea5deb78aa16a8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -74,6 +74,7 @@ struct diagnostic_context;\n    5: C_IS_RESERVED_WORD (in IDENTIFIER_NODE)\n       DECL_VTABLE_OR_VTT_P (in VAR_DECL)\n    6: IDENTIFIER_REPO_CHOSEN (in IDENTIFIER_NODE)\n+      DECL_CONSTRUCTION_VTABLE_P (in VAR_DECL)\n \n    Usage of TYPE_LANG_FLAG_?:\n    0: TYPE_DEPENDENT_P\n@@ -1992,6 +1993,12 @@ struct lang_decl GTY(())\n /* 1 iff VAR_DECL node NODE is virtual table or VTT.  */\n #define DECL_VTABLE_OR_VTT_P(NODE) TREE_LANG_FLAG_5 (VAR_DECL_CHECK (NODE))\n \n+/* Returns 1 iff VAR_DECL is a construction virtual table.\n+   DECL_VTABLE_OR_VTT_P will be true in this case and must be checked\n+   before using this macro.  */\n+#define DECL_CONSTRUCTION_VTABLE_P(NODE) \\\n+  TREE_LANG_FLAG_6 (VAR_DECL_CHECK (NODE))\n+\n /* 1 iff NODE is function-local, but for types.  */\n #define LOCAL_CLASS_P(NODE)\t\t\t\t\\\n   (decl_function_context (TYPE_MAIN_DECL (NODE)) != NULL_TREE)"}, {"sha": "c26d48fe954e1a5afef00b04bb38b91a7f925a07", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -1655,17 +1655,24 @@ determine_visibility (tree decl)\n      the visibility of their containing class.  */\n   if (class_type)\n     {\n-      if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-\t  && lookup_attribute (\"dllexport\", TYPE_ATTRIBUTES (class_type)))\n+      if (targetm.cxx.export_class_data ()\n+\t  && (DECL_TINFO_P (decl)\n+\t      || (DECL_VTABLE_OR_VTT_P (decl)\n+\t\t  /* Construction virtual tables are not emitted\n+\t\t     because they cannot be referred to from other\n+\t\t     object files; their name is not standardized by\n+\t\t     the ABI.  */\n+\t\t  && !DECL_CONSTRUCTION_VTABLE_P (decl))))\n+\tDECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n+      else if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\t       && lookup_attribute (\"dllexport\", TYPE_ATTRIBUTES (class_type)))\n \t{\n \t  DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n \t  DECL_VISIBILITY_SPECIFIED (decl) = 1;\n-\t  return;\n \t}\n-\n-      if (TREE_CODE (decl) == FUNCTION_DECL\n-\t  && DECL_DECLARED_INLINE_P (decl)\n-\t  && visibility_options.inlines_hidden)\n+      else if (TREE_CODE (decl) == FUNCTION_DECL\n+\t       && DECL_DECLARED_INLINE_P (decl)\n+\t       && visibility_options.inlines_hidden)\n \t{\n \t  DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n \t  DECL_VISIBILITY_SPECIFIED (decl) = 1;"}, {"sha": "bba444c0fbe9f675ba2be2fd9e10991392881ac2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -8538,6 +8538,14 @@ some variants of the ABI, an inline function can never be the key\n method.  The default is to return @code{true}.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_CXX_EXPORT_CLASS_DATA (void)\n+If this hook returns false (the default), then virtual tables and RTTI\n+data structures will have the ELF visibility of their containing\n+class.  If this hook returns true, then these data structures will\n+have ELF ``default'' visibility, independently of the visibility of\n+the containing class.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "3b4c11b069458feb0e21356d113c2a3b33e4758c", "filename": "gcc/target-def.h", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -441,15 +441,20 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_CXX_KEY_METHOD_MAY_BE_INLINE hook_bool_void_true\n #endif\n \n-#define TARGET_CXX\t\t\\\n-  {\t\t\t\t\\\n-    TARGET_CXX_GUARD_TYPE,\t\\\n-    TARGET_CXX_GUARD_MASK_BIT,\t\\\n-    TARGET_CXX_GET_COOKIE_SIZE,\t\\\n-    TARGET_CXX_COOKIE_HAS_SIZE,\t\\\n-    TARGET_CXX_IMPORT_EXPORT_CLASS,\t\\\n-    TARGET_CXX_CDTOR_RETURNS_THIS,\t\\\n-    TARGET_CXX_KEY_METHOD_MAY_BE_INLINE \\\n+#ifndef TARGET_CXX_EXPORT_CLASS_DATA\n+#define TARGET_CXX_EXPORT_CLASS_DATA hook_bool_void_false\n+#endif\n+\n+#define TARGET_CXX\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TARGET_CXX_GUARD_TYPE,\t\t\t\\\n+    TARGET_CXX_GUARD_MASK_BIT,\t\t\t\\\n+    TARGET_CXX_GET_COOKIE_SIZE,\t\t\t\\\n+    TARGET_CXX_COOKIE_HAS_SIZE,\t\t\t\\\n+    TARGET_CXX_IMPORT_EXPORT_CLASS,\t\t\\\n+    TARGET_CXX_CDTOR_RETURNS_THIS,\t\t\\\n+    TARGET_CXX_KEY_METHOD_MAY_BE_INLINE,\t\\\n+    TARGET_CXX_EXPORT_CLASS_DATA\t\t\\\n   }\n \n /* The whole shebang.  */"}, {"sha": "035aeed4426863460d6fa638e35e0f5400ee1d4d", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -521,6 +521,10 @@ struct gcc_target\n        itself.  Returning true is the behavior required by the Itanium\n        C++ ABI.  */\n     bool (*key_method_may_be_inline) (void);\n+    /* Returns true if all class data (virtual tables, type info,\n+       etc.) should be exported from the current DLL, even when the\n+       associated class is not exported.  */\n+    bool (*export_class_data) (void);\n   } cxx;\n \n   /* Leave the boolean fields at the end.  */"}, {"sha": "203f6a6fffd73db7cbf3611f995129a0d3dc43f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505970fc3324e2a0c00f5d82d66f62bae133e282/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=505970fc3324e2a0c00f5d82d66f62bae133e282", "patch": "@@ -1,3 +1,7 @@\n+2004-08-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/ext/visibility/arm1.C: New test.\n+\n 2004-08-31  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/funcdef-storage-1.c: Add dg-options to suppress"}]}