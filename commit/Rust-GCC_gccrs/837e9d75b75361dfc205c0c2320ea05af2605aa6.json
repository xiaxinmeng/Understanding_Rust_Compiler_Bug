{"sha": "837e9d75b75361dfc205c0c2320ea05af2605aa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM3ZTlkNzViNzUzNjFkZmMyMDVjMGMyMzIwZWEwNWFmMjYwNWFhNg==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-03-17T22:40:22Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-18T09:18:07Z"}, "message": "Typo fix in substition\n\nReplace all occurences of [Ss]ubstition[s] by [Ss]ubstition[s].", "tree": {"sha": "5a85ab1a6e66e324325d81f0bd7acfaa56740b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a85ab1a6e66e324325d81f0bd7acfaa56740b58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/837e9d75b75361dfc205c0c2320ea05af2605aa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837e9d75b75361dfc205c0c2320ea05af2605aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/837e9d75b75361dfc205c0c2320ea05af2605aa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837e9d75b75361dfc205c0c2320ea05af2605aa6/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe9e08d952187cb70e71d284ce1e4cd50a302fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe9e08d952187cb70e71d284ce1e4cd50a302fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe9e08d952187cb70e71d284ce1e4cd50a302fe"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "d7f2bdb557c62d054d0f187036eae035c5f2f4a3", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=837e9d75b75361dfc205c0c2320ea05af2605aa6", "patch": "@@ -780,7 +780,7 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     HIR::PathExprSegment seg = expr.get_final_segment ();\n-    if (!infered->supports_substitions () && seg.has_generic_args ())\n+    if (!infered->supports_substitutions () && seg.has_generic_args ())\n       {\n \trust_error_at (expr.get_locus (),\n \t\t       \"path does not support substitutions\");\n@@ -798,8 +798,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n \tTyTy::ADTType *adt = static_cast<TyTy::ADTType *> (infered);\n \tinfered = seg.has_generic_args ()\n-\t\t    ? adt->handle_substitions (seg.get_generic_args ())\n-\t\t    : adt->infer_substitions ();\n+\t\t    ? adt->handle_substitutions (seg.get_generic_args ())\n+\t\t    : adt->infer_substitutions ();\n       }\n   }\n "}, {"sha": "63c0f4246f572058a06544673f88eac747f6f786", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=837e9d75b75361dfc205c0c2320ea05af2605aa6", "patch": "@@ -42,7 +42,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n   void visit (HIR::TupleStruct &struct_decl) override\n   {\n-    std::vector<TyTy::SubstitionMapping> substitions;\n+    std::vector<TyTy::SubstitutionMapping> substitutions;\n     if (struct_decl.has_generics ())\n       {\n \tfor (auto &generic_param : struct_decl.get_generic_params ())\n@@ -51,8 +51,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitions.push_back (\n-\t      TyTy::SubstitionMapping (generic_param, param_type));\n+\t    substitutions.push_back (\n+\t      TyTy::SubstitutionMapping (generic_param, param_type));\n \t  }\n       }\n \n@@ -75,14 +75,14 @@ class TypeCheckTopLevel : public TypeCheckBase\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   mappings->get_next_hir_id (),\n \t\t\t   struct_decl.get_identifier (), true,\n-\t\t\t   std::move (fields), std::move (substitions));\n+\t\t\t   std::move (fields), std::move (substitutions));\n \n     context->insert_type (struct_decl.get_mappings (), type);\n   }\n \n   void visit (HIR::StructStruct &struct_decl) override\n   {\n-    std::vector<TyTy::SubstitionMapping> substitions;\n+    std::vector<TyTy::SubstitutionMapping> substitutions;\n     if (struct_decl.has_generics ())\n       {\n \tfor (auto &generic_param : struct_decl.get_generic_params ())\n@@ -91,8 +91,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitions.push_back (\n-\t      TyTy::SubstitionMapping (generic_param, param_type));\n+\t    substitutions.push_back (\n+\t      TyTy::SubstitutionMapping (generic_param, param_type));\n \t  }\n       }\n \n@@ -112,7 +112,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   mappings->get_next_hir_id (),\n \t\t\t   struct_decl.get_identifier (), false,\n-\t\t\t   std::move (fields), std::move (substitions));\n+\t\t\t   std::move (fields), std::move (substitutions));\n \n     context->insert_type (struct_decl.get_mappings (), type);\n   }\n@@ -136,7 +136,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n   void visit (HIR::Function &function) override\n   {\n-    std::vector<TyTy::SubstitionMapping> substitions;\n+    std::vector<TyTy::SubstitutionMapping> substitutions;\n     if (function.has_generics ())\n       {\n \tfor (auto &generic_param : function.get_generic_params ())\n@@ -145,8 +145,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitions.push_back (\n-\t      TyTy::SubstitionMapping (generic_param, param_type));\n+\t    substitutions.push_back (\n+\t      TyTy::SubstitutionMapping (generic_param, param_type));\n \t  }\n       }\n "}, {"sha": "ec9cbdadd3215fd85cba4111ef497aa8be9786e4", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=837e9d75b75361dfc205c0c2320ea05af2605aa6", "patch": "@@ -195,7 +195,7 @@ class TypeCheckType : public TypeCheckBase\n \n \t\t    TyTy::ADTType *adt\n \t\t      = static_cast<TyTy::ADTType *> (translated);\n-\t\t    translated = adt->handle_substitions (args);\n+\t\t    translated = adt->handle_substitutions (args);\n \t\t  }\n \t\telse\n \t\t  {\n@@ -208,7 +208,7 @@ class TypeCheckType : public TypeCheckBase\n \t\t    return;\n \t\t  }\n \t      }\n-\t    else if (translated->supports_substitions ())\n+\t    else if (translated->supports_substitutions ())\n \t      {\n \t\t// so far we only support ADT so lets just handle it here\n \t\t// for now\n@@ -222,7 +222,7 @@ class TypeCheckType : public TypeCheckBase\n \t\t  }\n \n \t\tTyTy::ADTType *adt = static_cast<TyTy::ADTType *> (translated);\n-\t\ttranslated = adt->infer_substitions ();\n+\t\ttranslated = adt->infer_substitutions ();\n \t      }\n \n \t    return;"}, {"sha": "fff3087eda549022a944b17872230bf0a72403ff", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=837e9d75b75361dfc205c0c2320ea05af2605aa6", "patch": "@@ -325,13 +325,13 @@ TypeCheckStructExpr::visit (HIR::PathInExpression &expr)\n     }\n \n   struct_path_resolved = static_cast<TyTy::ADTType *> (lookup);\n-  if (struct_path_resolved->has_substitions ())\n+  if (struct_path_resolved->has_substitutions ())\n     {\n       HIR::PathExprSegment seg = expr.get_final_segment ();\n-      struct_path_resolved\n-\t= seg.has_generic_args ()\n-\t    ? struct_path_resolved->handle_substitions (seg.get_generic_args ())\n-\t    : struct_path_resolved->infer_substitions ();\n+      struct_path_resolved = seg.has_generic_args ()\n+\t\t\t       ? struct_path_resolved->handle_substitutions (\n+\t\t\t\t seg.get_generic_args ())\n+\t\t\t       : struct_path_resolved->infer_substitutions ();\n     }\n }\n "}, {"sha": "113021256d44842447f095fe9c9309517f4f4dc6", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=837e9d75b75361dfc205c0c2320ea05af2605aa6", "patch": "@@ -228,7 +228,7 @@ ADTType::clone ()\n }\n \n ADTType *\n-ADTType::infer_substitions ()\n+ADTType::infer_substitutions ()\n {\n   auto context = Resolver::TypeCheckContext::get ();\n   ADTType *adt = static_cast<ADTType *> (clone ());\n@@ -254,9 +254,9 @@ ADTType::infer_substitions ()\n }\n \n ADTType *\n-ADTType::handle_substitions (HIR::GenericArgs &generic_args)\n+ADTType::handle_substitutions (HIR::GenericArgs &generic_args)\n {\n-  if (generic_args.get_type_args ().size () != get_num_substitions ())\n+  if (generic_args.get_type_args ().size () != get_num_substitutions ())\n     {\n       rust_error_at (generic_args.get_locus (),\n \t\t     \"invalid number of generic arguments to generic ADT type\");\n@@ -288,13 +288,13 @@ ADTType::handle_substitions (HIR::GenericArgs &generic_args)\n void\n ADTType::fill_in_at (size_t index, BaseType *type)\n {\n-  SubstitionMapping sub = get_substition_mapping_at (index);\n-  SubstitionRef<ADTType>::fill_in_at (index, type);\n+  SubstitutionMapping sub = get_substitution_mapping_at (index);\n+  SubstitutionRef<ADTType>::fill_in_at (index, type);\n   fill_in_params_for (sub, type);\n }\n \n void\n-ADTType::fill_in_params_for (SubstitionMapping sub, BaseType *type)\n+ADTType::fill_in_params_for (SubstitutionMapping sub, BaseType *type)\n {\n   iterate_fields ([&] (StructFieldType *field) mutable -> bool {\n     bool is_param_ty = field->get_field_type ()->get_kind () == TypeKind::PARAM;"}, {"sha": "2db65a65e2d5771e4cf81da3e45c1f0eb0639f50", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837e9d75b75361dfc205c0c2320ea05af2605aa6/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=837e9d75b75361dfc205c0c2320ea05af2605aa6", "patch": "@@ -97,7 +97,7 @@ class BaseType\n \n   void append_reference (HirId id) { combined.insert (id); }\n \n-  virtual bool supports_substitions () const { return false; }\n+  virtual bool supports_substitutions () const { return false; }\n \n   virtual bool has_subsititions_defined () const { return false; }\n \n@@ -322,22 +322,22 @@ class ParamType : public BaseType\n   HIR::GenericParam &param;\n };\n \n-class SubstitionMapping\n+class SubstitutionMapping\n {\n public:\n-  SubstitionMapping (std::unique_ptr<HIR::GenericParam> &generic,\n-\t\t     ParamType *param)\n+  SubstitutionMapping (std::unique_ptr<HIR::GenericParam> &generic,\n+\t\t       ParamType *param)\n     : generic (generic), param (param)\n   {}\n \n   std::string as_string () const { return param->as_string (); }\n \n   void fill_param_ty (BaseType *type) { param->set_ty_ref (type->get_ref ()); }\n \n-  SubstitionMapping clone ()\n+  SubstitutionMapping clone ()\n   {\n-    return SubstitionMapping (generic,\n-\t\t\t      static_cast<ParamType *> (param->clone ()));\n+    return SubstitutionMapping (generic,\n+\t\t\t\tstatic_cast<ParamType *> (param->clone ()));\n   }\n \n   const ParamType *get_param_ty () const { return param; }\n@@ -347,80 +347,80 @@ class SubstitionMapping\n   ParamType *param;\n };\n \n-template <class T> class SubstitionRef\n+template <class T> class SubstitutionRef\n {\n public:\n-  SubstitionRef (std::vector<SubstitionMapping> substitions)\n-    : substitions (substitions)\n+  SubstitutionRef (std::vector<SubstitutionMapping> substitutions)\n+    : substitutions (substitutions)\n   {}\n \n-  bool has_substitions () const { return substitions.size () > 0; }\n+  bool has_substitutions () const { return substitutions.size () > 0; }\n \n   std::string subst_as_string () const\n   {\n     std::string buffer;\n-    for (size_t i = 0; i < substitions.size (); i++)\n+    for (size_t i = 0; i < substitutions.size (); i++)\n       {\n-\tconst SubstitionMapping &sub = substitions.at (i);\n+\tconst SubstitutionMapping &sub = substitutions.at (i);\n \tbuffer += sub.as_string ();\n \n-\tif ((i + 1) < substitions.size ())\n+\tif ((i + 1) < substitutions.size ())\n \t  buffer += \", \";\n       }\n \n     return buffer.empty () ? \"\" : \"<\" + buffer + \">\";\n   }\n \n-  size_t get_num_substitions () const { return substitions.size (); }\n+  size_t get_num_substitutions () const { return substitutions.size (); }\n \n-  std::vector<SubstitionMapping> &get_substs () { return substitions; }\n+  std::vector<SubstitutionMapping> &get_substs () { return substitutions; }\n \n-  std::vector<SubstitionMapping> clone_substs ()\n+  std::vector<SubstitutionMapping> clone_substs ()\n   {\n-    std::vector<SubstitionMapping> clone;\n-    for (auto &sub : substitions)\n+    std::vector<SubstitutionMapping> clone;\n+    for (auto &sub : substitutions)\n       clone.push_back (sub.clone ());\n \n     return clone;\n   }\n \n-  virtual T *infer_substitions () = 0;\n+  virtual T *infer_substitutions () = 0;\n \n-  virtual T *handle_substitions (HIR::GenericArgs &generic_args) = 0;\n+  virtual T *handle_substitutions (HIR::GenericArgs &generic_args) = 0;\n \n protected:\n   virtual void fill_in_at (size_t index, BaseType *type)\n   {\n-    substitions.at (index).fill_param_ty (type);\n+    substitutions.at (index).fill_param_ty (type);\n   }\n \n-  SubstitionMapping get_substition_mapping_at (size_t index)\n+  SubstitutionMapping get_substitution_mapping_at (size_t index)\n   {\n-    return substitions.at (index);\n+    return substitutions.at (index);\n   }\n \n private:\n-  std::vector<SubstitionMapping> substitions;\n+  std::vector<SubstitutionMapping> substitutions;\n };\n \n-class ADTType : public BaseType, public SubstitionRef<ADTType>\n+class ADTType : public BaseType, public SubstitutionRef<ADTType>\n {\n public:\n   ADTType (HirId ref, std::string identifier, bool is_tuple,\n \t   std::vector<StructFieldType *> fields,\n-\t   std::vector<SubstitionMapping> subst_refs,\n+\t   std::vector<SubstitutionMapping> subst_refs,\n \t   std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::ADT, refs),\n-      SubstitionRef (std::move (subst_refs)), identifier (identifier),\n+      SubstitutionRef (std::move (subst_refs)), identifier (identifier),\n       fields (fields), is_tuple (is_tuple)\n   {}\n \n   ADTType (HirId ref, HirId ty_ref, std::string identifier, bool is_tuple,\n \t   std::vector<StructFieldType *> fields,\n-\t   std::vector<SubstitionMapping> subst_refs,\n+\t   std::vector<SubstitutionMapping> subst_refs,\n \t   std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::ADT, refs),\n-      SubstitionRef (std::move (subst_refs)), identifier (identifier),\n+      SubstitutionRef (std::move (subst_refs)), identifier (identifier),\n       fields (fields), is_tuple (is_tuple)\n   {}\n \n@@ -482,20 +482,20 @@ class ADTType : public BaseType, public SubstitionRef<ADTType>\n       }\n   }\n \n-  bool supports_substitions () const override final { return true; }\n+  bool supports_substitutions () const override final { return true; }\n \n   bool has_subsititions_defined () const override final\n   {\n-    return has_substitions ();\n+    return has_substitutions ();\n   }\n \n-  ADTType *infer_substitions () override final;\n+  ADTType *infer_substitutions () override final;\n \n-  ADTType *handle_substitions (HIR::GenericArgs &generic_args) override final;\n+  ADTType *handle_substitutions (HIR::GenericArgs &generic_args) override final;\n \n   void fill_in_at (size_t index, BaseType *type) override final;\n \n-  void fill_in_params_for (SubstitionMapping sub, BaseType *type);\n+  void fill_in_params_for (SubstitutionMapping sub, BaseType *type);\n \n private:\n   std::string identifier;"}]}