{"sha": "36ce7daa0448f03228d99bc6a081f693cd04ba48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjZTdkYWEwNDQ4ZjAzMjI4ZDk5YmM2YTA4MWY2OTNjZDA0YmE0OA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-04-18T23:47:50Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-18T23:47:50Z"}, "message": "localefwd.h (locale::id::_M_id): Do this correctly, as type safety is important, especially on solaris.\n\n\n2002-04-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/localefwd.h (locale::id::_M_id): Do this correctly,\n\tas type safety is important, especially on solaris.\n\t* include/bits/istream.tcc (istream::read): Clean.\n\t(istream::readsome): Same.\n\t* locale.cc: Wrap lines.\n\n\t* testsuite/21_strings/inserters_extractors.cc: Tweaks.\n\t* testsuite/27_io/instantiations.cc (test): Add bool variable...\n\t* testsuite/21_strings/capacity.cc: Clean.\n\nFrom-SVN: r52501", "tree": {"sha": "b620818e988b06e19978d5a14d76296e2d300e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b620818e988b06e19978d5a14d76296e2d300e1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ce7daa0448f03228d99bc6a081f693cd04ba48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ce7daa0448f03228d99bc6a081f693cd04ba48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ce7daa0448f03228d99bc6a081f693cd04ba48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ce7daa0448f03228d99bc6a081f693cd04ba48/comments", "author": null, "committer": null, "parents": [{"sha": "2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f82dbf8658b933fdecbe751a9569ba48ef81e0c"}], "stats": {"total": 298, "additions": 148, "deletions": 150}, "files": [{"sha": "42ac41617efa05d9cfec3a5b12b196f43a26cf6d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=36ce7daa0448f03228d99bc6a081f693cd04ba48", "patch": "@@ -1,3 +1,15 @@\n+2002-04-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/localefwd.h (locale::id::_M_id): Do this correctly,\n+\tas type safety is important, especially on solaris.\n+\t* include/bits/istream.tcc (istream::read): Clean.\n+\t(istream::readsome): Same.\n+\t* locale.cc: Wrap lines.\n+\n+\t* testsuite/21_strings/inserters_extractors.cc: Tweaks.\n+\t* testsuite/27_io/instantiations.cc (test): Add bool variable...\n+\t* testsuite/21_strings/capacity.cc: Clean.\n+\t\t\n 2002-04-17  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/doxygroups.cc:  New group on binary searching."}, {"sha": "6b2e4ca4acbce4e5fcf40dded92d445a2b10a87d", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 36, "deletions": 49, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=36ce7daa0448f03228d99bc6a081f693cd04ba48", "patch": "@@ -777,39 +777,28 @@ namespace std\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  if (__n > 0)\n+\t  try \n \t    {\n-\t      try \n-\t\t{\n-\t\t  const int_type __eof = traits_type::eof();\n-\t\t  __streambuf_type* __sb = this->rdbuf();\n-\t\t  int_type __c = __sb->sbumpc();\t\n-\t\t  bool __testeof =  __c == __eof;\n-\t\t  \n-\t\t  while (_M_gcount < __n - 1 && !__testeof)\n-\t\t    {\n-\t\t      *__s++ = traits_type::to_char_type(__c);\n-\t\t      ++_M_gcount;\n-\t\t      __c = __sb->sbumpc();\n-\t\t      __testeof = __c == __eof;\n-\t\t    }\n-\t\t  if (__testeof)\n-\t\t    this->setstate(ios_base::eofbit | ios_base::failbit);\n-\t\t  else\n-\t\t    {\n-\t\t      // _M_gcount == __n - 1\n-\t\t      *__s++ = traits_type::to_char_type(__c);\n-\t\t      ++_M_gcount;\n-\t\t    }\t    \n-\t\t}\n-\t      catch(exception& __fail)\n+\t      const int_type __eof = traits_type::eof();\n+\t      __streambuf_type* __sb = this->rdbuf();\n+\t      int_type __c = __sb->sgetc();\t\n+\t      \n+\t      while (_M_gcount < __n && __c != __eof)\n \t\t{\n-\t\t  // 27.6.1.3 paragraph 1\n-\t\t  // Turn this on without causing an ios::failure to be thrown.\n-\t\t  this->setstate(ios_base::badbit);\n-\t\t  if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t    __throw_exception_again;\n+\t\t  *__s++ = traits_type::to_char_type(__c);\n+\t\t  ++_M_gcount;\n+\t\t  __c = __sb->snextc();\n \t\t}\n+\t      if (__c == __eof)\n+\t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n+\t    }\t    \n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n \t    }\n \t}\n       else\n@@ -822,32 +811,30 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     readsome(char_type* __s, streamsize __n)\n     {\n-      const int_type __eof = traits_type::eof();\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  if (__n > 0)\n+\t  try \n \t    {\n-\t      try \n-\t\t{\n-\t\t  streamsize __num = this->rdbuf()->in_avail();\n-\t\t  if (__num != static_cast<streamsize>(__eof))\n-\t\t    {\n-\t\t      __num = min(__num, __n);\n-\t\t      _M_gcount = this->rdbuf()->sgetn(__s, __num);\n-\t\t    }\n-\t\t  else\n-\t\t    this->setstate(ios_base::eofbit);\t\t    \n-\t\t}\n-\t      catch(exception& __fail)\n+\t      const int_type __eof = traits_type::eof(); \n+\t      streamsize __num = this->rdbuf()->in_avail();\n+\t      if (__num != static_cast<streamsize>(__eof))\n \t\t{\n-\t\t  // 27.6.1.3 paragraph 1\n-\t\t  // Turn this on without causing an ios::failure to be thrown.\n-\t\t  this->setstate(ios_base::badbit);\n-\t\t  if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t    __throw_exception_again;\n+\t\t  __num = min(__num, __n);\n+\t\t  if (__num)\n+\t\t    _M_gcount = this->rdbuf()->sgetn(__s, __num);\n \t\t}\n+\t      else\n+\t\tthis->setstate(ios_base::eofbit);\t\t    \n+\t    }\n+\t  catch(exception& __fail)\n+\t    {\n+\t      // 27.6.1.3 paragraph 1\n+\t      // Turn this on without causing an ios::failure to be thrown.\n+\t      this->setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n \t    }\n \t}\n       else"}, {"sha": "028c4126b85e1152b14a2e48830bba0a576bc313", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=36ce7daa0448f03228d99bc6a081f693cd04ba48", "patch": "@@ -455,14 +455,11 @@ namespace std\n     // counted on to be zero-initialized.\n     id();\n \n-    size_t\n+    inline size_t\n     _M_id() const\n     {\n       if (!_M_index)\n-\t{\n-\t  __exchange_and_add(&_S_highwater, 1);\n-\t  _M_index = _S_highwater;\n-\t}\n+\t_M_index = 1 + __exchange_and_add(&_S_highwater, 1);\n       return _M_index - 1;\n     }\n   };"}, {"sha": "26c2834eb7d6afdf0f6bd9070ed44e25c492bd57", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=36ce7daa0448f03228d99bc6a081f693cd04ba48", "patch": "@@ -226,7 +226,8 @@ namespace std\n   locale::operator==(const locale& __rhs) const throw()\n   {\n     string __name = this->name();\n-    return (_M_impl == __rhs._M_impl || (__name != \"*\" && __name == __rhs.name()));\n+    return (_M_impl == __rhs._M_impl \n+\t    || (__name != \"*\" && __name == __rhs.name()));\n   }\n \n   const locale&"}, {"sha": "be209e07e0cae5a3c564ab351f3b9699f1e4440d", "filename": "libstdc++-v3/testsuite/21_strings/capacity.cc", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcapacity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcapacity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcapacity.cc?ref=36ce7daa0448f03228d99bc6a081f693cd04ba48", "patch": "@@ -1,6 +1,6 @@\n // 1999-05-11 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,7 +21,6 @@\n // 21.3.3 string capacity\n \n #include <string>\n-#include <cstdio>\n #include <testsuite_hooks.h>\n \n template<typename T>\n@@ -37,7 +36,7 @@ template<typename T>\n \n struct B { };\n \n-bool test01()\n+void test01()\n {\n   // 1 POD types : resize, capacity, reserve\n   bool test = true;\n@@ -161,17 +160,11 @@ bool test01()\n   VERIFY( b01 == true );\n   sz04 = str02.size();  \n   VERIFY( sz03 >= sz04 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  \n-  return test;\n }\n \n // libstdc++/4548\n // http://gcc.gnu.org/ml/libstdc++/2001-11/msg00150.html\n-bool test02()\n+void test02()\n {\n   bool test = true;\n \n@@ -180,12 +173,6 @@ bool test02()\n   std::string str02 = str01;\n   str01.reserve(1);\n   VERIFY( str01.capacity() == 12 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-\n-  return test;\n }\n \n #if !__GXX_WEAK__\n@@ -206,7 +193,3 @@ int main()\n \n   return 0;\n }\n-\n-\n-\n-"}, {"sha": "41a9a65f6ea60392addca61c4982a114b0ab7e4f", "filename": "libstdc++-v3/testsuite/21_strings/inserters_extractors.cc", "status": "modified", "additions": 89, "deletions": 72, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc?ref=36ce7daa0448f03228d99bc6a081f693cd04ba48", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-01 bkoz\n \n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,16 +53,20 @@ bool test01(void)\n   std::istringstream istrs01(str01);\n   istrs01 >> str10;\n   VERIFY( str10 == str02 );\n-  try {\n-    std::istringstream::int_type i01 = istrs01.peek(); //a-boo\n-    VERIFY( std::istringstream::traits_type::to_char_type(i01) == ' ' );\n-  }\n-  catch(std::exception& fail) {\n-    VERIFY( false ); // shouldn't throw\n-  }\n+  try \n+    {\n+      std::istringstream::int_type i01 = istrs01.peek(); //a-boo\n+      VERIFY( std::istringstream::traits_type::to_char_type(i01) == ' ' );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n \n+  istrs01.clear();\n   istrs01 >> str10; \n   VERIFY( str10 == str03 ); \n+  istrs01.clear();\n   istrs01 >> str10; \n   VERIFY( str10 == str04 ); // sentry picks out the white spaces. . \n \n@@ -72,73 +76,86 @@ bool test01(void)\n  \n   // istream& getline(istream&, string&, char)\n   // istream& getline(istream&, string&)\n-  try {\n-    getline(istrs01, str10);\n-    VERIFY( !istrs01.fail() );\n-    VERIFY( !istrs01.eof() );\n-    VERIFY( istrs01.good() );\n-    VERIFY( str10 == \" bay\" );\n-  }\n-  catch(std::exception& fail) {\n-    VERIFY( false ); // shouldn't throw\n-  }\n-\n-  try {\n-    istrs01.clear();\n-    getline(istrs01, str10,'\\t');\n-    VERIFY( !istrs01.fail() );\n-    VERIFY( !istrs01.eof() );\n-    VERIFY( istrs01.good() );\n-    VERIFY( str10 == str05 );\n-  }\n-  catch(std::exception& fail) {\n-    VERIFY( false ); // shouldn't throw\n-  }\n-\n-  try {\n-    istrs01.clear();\n-    getline(istrs01, str10,'\\t');\n-    VERIFY( !istrs01.fail() );\n-    VERIFY( !istrs01.eof() );\n-    VERIFY( istrs01.good() );\n-    VERIFY( str10 == str05 );\n-  }\n-  catch(std::exception& fail) {\n-    VERIFY( false ); // shouldn't throw\n-  }\n-\n-  try {\n-    istrs01.clear();\n-    getline(istrs01, str10, '.');\n-    VERIFY( !istrs01.fail() );\n-    VERIFY( istrs01.eof() );\n-    VERIFY( !istrs01.good() );\n-    VERIFY( str10 == \"\\t    from Elk Rapids to the point reminds me of miles\" );\n-  }\n-  catch(std::exception& fail) {\n-    VERIFY( false ); // shouldn't throw\n-  }\n-\n-  try {\n-    getline(istrs02, str10);\n-    VERIFY( istrs02.fail() );\n-    VERIFY( istrs02.eof() );\n-    VERIFY( str10 ==\"\\t    from Elk Rapids to the point reminds me of miles\" );\n-  }\n-  catch(std::exception& fail) {\n-    VERIFY( false ); // shouldn't throw\n-  }\n+  try \n+    {\n+      istrs01.clear();\n+      getline(istrs01, str10);\n+      VERIFY( !istrs01.fail() );\n+      VERIFY( !istrs01.eof() );\n+      VERIFY( istrs01.good() );\n+      VERIFY( str10 == \" bay\" );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+\n+  try \n+    {\n+      istrs01.clear();\n+      getline(istrs01, str10,'\\t');\n+      VERIFY( !istrs01.fail() );\n+      VERIFY( !istrs01.eof() );\n+      VERIFY( istrs01.good() );\n+      VERIFY( str10 == str05 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+  \n+  try \n+    {\n+      istrs01.clear();\n+      getline(istrs01, str10,'\\t');\n+      VERIFY( !istrs01.fail() );\n+      VERIFY( !istrs01.eof() );\n+      VERIFY( istrs01.good() );\n+      VERIFY( str10 == str05 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+  \n+  try \n+    {\n+      istrs01.clear();\n+      getline(istrs01, str10, '.');\n+      VERIFY( !istrs01.fail() );\n+      VERIFY( istrs01.eof() );\n+      VERIFY( !istrs01.good() );\n+      VERIFY( str10 == \"\\t    from Elk Rapids to the point reminds me of miles\" );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n \n+  try \n+    {\n+      getline(istrs02, str10);\n+      VERIFY( istrs02.fail() );\n+      VERIFY( istrs02.eof() );\n+      VERIFY( str10 ==\"\\t    from Elk Rapids to the point reminds me of miles\" );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+  \n   // ostream& operator<<(ostream&, const basic_string&)\n   std::ostringstream ostrs01;\n-  try {\n-    ostrs01 << str01;\n-    VERIFY( ostrs01.str() == str01 );\n-  }\n-  catch(std::exception& fail) {\n-    VERIFY( false );\n-  }\n-\n+  try \n+    {\n+      ostrs01 << str01;\n+      VERIFY( ostrs01.str() == str01 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false );\n+    }\n+  \n   std::string hello_world;\n   std::cout << hello_world;\n   "}, {"sha": "b7ee2b4b6f53a888057ba9745ee6bdcbd47b588a", "filename": "libstdc++-v3/testsuite/27_io/instantiations.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Finstantiations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ce7daa0448f03228d99bc6a081f693cd04ba48/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Finstantiations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Finstantiations.cc?ref=36ce7daa0448f03228d99bc6a081f693cd04ba48", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,6 +35,7 @@ void\n test01()\n {\n   using namespace std;\n+  bool test = true;\n   string x (\"   this is text\");\n   istringstream  sin (x);\n   ostringstream  sout;\n@@ -47,7 +48,7 @@ test01()\n       >> setprecision(5)\n       >> setw(20)\n       >> ws;\n-  VERIFY(sin);\n+  VERIFY(sin.good());\n \n   sout << resetiosflags(ios_base::dec)\n        << setiosflags(ios_base::dec)\n@@ -56,7 +57,7 @@ test01()\n        << setprecision(5)\n        << setw(20)\n        << ends << flush << endl;\n-  VERIFY(sout);\n+  VERIFY(sout.good());\n }\n \n "}]}