{"sha": "c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhMjk0MjNkZThjZmI3ZTJiNTY0MmI5ZDQ0ZWIyMWU0YjI4NmFlYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-06-01T19:17:37Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-06-01T19:17:37Z"}, "message": "intrinsic.c (add_conv): No longer take a \"simplify\" argument as its always gfc_convert_constant...\n\n\n\t* intrinsic.c (add_conv): No longer take a \"simplify\" argument as\n\tits always gfc_convert_constant, instead take a \"standard\" argument.\n\t(add_conversions): Change all existing calls of add_conv to pass\n\tGFC_STD_F77 as appropriate.  Additionally, if we're allowing GNU\n\textensions support integer-logical and logical-integer conversions.\n\t(gfc_convert_type_warn): Warn about use the use of these conversions\n\tas a extension when appropriate, i.e. with -pedantic.\n\t* simplify.c (gfc_convert_constant): Add support for integer to\n\tlogical and logical to integer conversions, using gfc_int2log and\n\tgfc_log2int.\n\t* arith.c (gfc_log2int, gfc_int2log): New functions.\n\t* arith.h (gfc_log2int, gfc_int2log): Prototype here.\n\t* gfortran.texi: Document this new GNU extension.\n\n\t* gfortran.dg/logint-1.f: New test case.\n\t* gfortran.dg/logint-2.f: Likewise.\n\t* gfortran.dg/logint-3.f: Likewise.\n\nFrom-SVN: r100461", "tree": {"sha": "aca5715d2e2402e23f8d6fcb8a69bdb7516dab2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aca5715d2e2402e23f8d6fcb8a69bdb7516dab2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/comments", "author": null, "committer": null, "parents": [{"sha": "cdeee6d28017c9c881d2395645b3314fa575e59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdeee6d28017c9c881d2395645b3314fa575e59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdeee6d28017c9c881d2395645b3314fa575e59b"}], "stats": {"total": 254, "additions": 236, "deletions": 18}, "files": [{"sha": "e7c0c95f7124593a82dc0d14e792fb41ae610ea3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -1,3 +1,19 @@\n+2005-06-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* intrinsic.c (add_conv): No longer take a \"simplify\" argument as\n+\tits always gfc_convert_constant, instead take a \"standard\" argument.\n+\t(add_conversions): Change all existing calls of add_conv to pass\n+\tGFC_STD_F77 as appropriate.  Additionally, if we're allowing GNU\n+\textensions support integer-logical and logical-integer conversions.\n+\t(gfc_convert_type_warn): Warn about use the use of these conversions\n+\tas a extension when appropriate, i.e. with -pedantic.\n+\t* simplify.c (gfc_convert_constant): Add support for integer to\n+\tlogical and logical to integer conversions, using gfc_int2log and\n+\tgfc_log2int.\n+\t* arith.c (gfc_log2int, gfc_int2log): New functions.\n+\t* arith.h (gfc_log2int, gfc_int2log): Prototype here.\n+\t* gfortran.texi: Document this new GNU extension.\n+\n 2005-06-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* fortran/trans-expr.c (gfc_conv_variable): Clean up bracketting."}, {"sha": "684ae7bfd8be7bfb694a5aa81dddcf4b6100e519", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -2191,3 +2191,26 @@ gfc_log2log (gfc_expr * src, int kind)\n \n   return result;\n }\n+\n+/* Convert logical to integer.  */\n+\n+gfc_expr *\n+gfc_log2int (gfc_expr *src, int kind)\n+{\n+  gfc_expr *result;\n+  result = gfc_constant_result (BT_INTEGER, kind, &src->where);\n+  mpz_set_si (result->value.integer, src->value.logical);\n+  return result;\n+}\n+\n+/* Convert integer to logical.  */\n+\n+gfc_expr *\n+gfc_int2log (gfc_expr *src, int kind)\n+{\n+  gfc_expr *result;\n+  result = gfc_constant_result (BT_LOGICAL, kind, &src->where);\n+  result->value.logical = (mpz_cmp_si (src->value.integer, 0) != 0);\n+  return result;\n+}\n+"}, {"sha": "f75b826ee7c48baa3c09c2ad68abb8b3870ffbc4", "filename": "gcc/fortran/arith.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Farith.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Farith.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.h?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -80,6 +80,8 @@ gfc_expr *gfc_complex2int (gfc_expr *, int);\n gfc_expr *gfc_complex2real (gfc_expr *, int);\n gfc_expr *gfc_complex2complex (gfc_expr *, int);\n gfc_expr *gfc_log2log (gfc_expr *, int);\n+gfc_expr *gfc_log2int (gfc_expr *, int);\n+gfc_expr *gfc_int2log (gfc_expr *, int);\n \n #endif /* GFC_ARITH_H  */\n "}, {"sha": "50b649909850adf8ab043cfedef4909192b74ed7", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -637,6 +637,7 @@ of extensions, and @option{-std=legacy} allows both without warning.\n * Hexadecimal constants::\n * Real array indices::\n * Unary operators::\n+* Implicitly interconvert LOGICAL and INTEGER::\n @end menu\n \n @node Old-style kind specifications\n@@ -793,6 +794,22 @@ operators without the need for parenthesis.\n        X = Y * -Z\n @end smallexample\n \n+@node Implicitly interconvert LOGICAL and INTEGER\n+@section Implicitly interconvert LOGICAL and INTEGER\n+@cindex Implicitly interconvert LOGICAL and INTEGER\n+\n+As a GNU extension for backwards compatability with other compilers,\n+@command{gfortran} allows the implicit conversion of LOGICALs to INTEGERs\n+and vice versa.  When converting from a LOGICAL to an INTEGER, the numeric\n+value of @code{.FALSE.} is zero, and that of @code{.TRUE.} is one.  When\n+converting from INTEGER to LOGICAL, the value zero is interpreted as\n+@code{.FALSE.} and any non-zero value is interpreted as @code{.TRUE.}.\n+\n+@smallexample\n+       INTEGER*4 i\n+       i = .FALSE.\n+@end smallexample\n+\n @include intrinsic.texi\n @c ---------------------------------------------------------------------\n @c Contributing"}, {"sha": "66cf1902689b5d17e785eaf1c8bfae6532ae685d", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -2227,8 +2227,7 @@ add_subroutines (void)\n /* Add a function to the list of conversion symbols.  */\n \n static void\n-add_conv (bt from_type, int from_kind, bt to_type, int to_kind,\n-\t  gfc_expr * (*simplify) (gfc_expr *, bt, int))\n+add_conv (bt from_type, int from_kind, bt to_type, int to_kind, int standard)\n {\n \n   gfc_typespec from, to;\n@@ -2250,9 +2249,10 @@ add_conv (bt from_type, int from_kind, bt to_type, int to_kind,\n \n   sym = conversion + nconv;\n \n-  sym->name =  conv_name (&from, &to);\n+  sym->name = conv_name (&from, &to);\n   sym->lib_name = sym->name;\n-  sym->simplify.cc = simplify;\n+  sym->simplify.cc = gfc_convert_constant;\n+  sym->standard = standard;\n   sym->elemental = 1;\n   sym->ts = to;\n   sym->generic_id = GFC_ISYM_CONVERSION;\n@@ -2277,24 +2277,24 @@ add_conversions (void)\n \t  continue;\n \n \tadd_conv (BT_INTEGER, gfc_integer_kinds[i].kind,\n-\t\t  BT_INTEGER, gfc_integer_kinds[j].kind, gfc_convert_constant);\n+\t\t  BT_INTEGER, gfc_integer_kinds[j].kind, GFC_STD_F77);\n       }\n \n   /* Integer-Real/Complex conversions.  */\n   for (i = 0; gfc_integer_kinds[i].kind != 0; i++)\n     for (j = 0; gfc_real_kinds[j].kind != 0; j++)\n       {\n \tadd_conv (BT_INTEGER, gfc_integer_kinds[i].kind,\n-\t\t  BT_REAL, gfc_real_kinds[j].kind, gfc_convert_constant);\n+\t\t  BT_REAL, gfc_real_kinds[j].kind, GFC_STD_F77);\n \n \tadd_conv (BT_REAL, gfc_real_kinds[j].kind,\n-\t\t  BT_INTEGER, gfc_integer_kinds[i].kind, gfc_convert_constant);\n+\t\t  BT_INTEGER, gfc_integer_kinds[i].kind, GFC_STD_F77);\n \n \tadd_conv (BT_INTEGER, gfc_integer_kinds[i].kind,\n-\t\t  BT_COMPLEX, gfc_real_kinds[j].kind, gfc_convert_constant);\n+\t\t  BT_COMPLEX, gfc_real_kinds[j].kind, GFC_STD_F77);\n \n \tadd_conv (BT_COMPLEX, gfc_real_kinds[j].kind,\n-\t\t  BT_INTEGER, gfc_integer_kinds[i].kind, gfc_convert_constant);\n+\t\t  BT_INTEGER, gfc_integer_kinds[i].kind, GFC_STD_F77);\n       }\n \n   /* Real/Complex - Real/Complex conversions.  */\n@@ -2304,17 +2304,17 @@ add_conversions (void)\n \tif (i != j)\n \t  {\n \t    add_conv (BT_REAL, gfc_real_kinds[i].kind,\n-\t\t      BT_REAL, gfc_real_kinds[j].kind, gfc_convert_constant);\n+\t\t      BT_REAL, gfc_real_kinds[j].kind, GFC_STD_F77);\n \n \t    add_conv (BT_COMPLEX, gfc_real_kinds[i].kind,\n-\t\t      BT_COMPLEX, gfc_real_kinds[j].kind, gfc_convert_constant);\n+\t\t      BT_COMPLEX, gfc_real_kinds[j].kind, GFC_STD_F77);\n \t  }\n \n \tadd_conv (BT_REAL, gfc_real_kinds[i].kind,\n-\t\t  BT_COMPLEX, gfc_real_kinds[j].kind, gfc_convert_constant);\n+\t\t  BT_COMPLEX, gfc_real_kinds[j].kind, GFC_STD_F77);\n \n \tadd_conv (BT_COMPLEX, gfc_real_kinds[i].kind,\n-\t\t  BT_REAL, gfc_real_kinds[j].kind, gfc_convert_constant);\n+\t\t  BT_REAL, gfc_real_kinds[j].kind, GFC_STD_F77);\n       }\n \n   /* Logical/Logical kind conversion.  */\n@@ -2325,8 +2325,19 @@ add_conversions (void)\n \t  continue;\n \n \tadd_conv (BT_LOGICAL, gfc_logical_kinds[i].kind,\n-\t\t  BT_LOGICAL, gfc_logical_kinds[j].kind, gfc_convert_constant);\n+\t\t  BT_LOGICAL, gfc_logical_kinds[j].kind, GFC_STD_F77);\n       }\n+\n+  /* Integer-Logical and Logical-Integer conversions.  */\n+  if ((gfc_option.allow_std & GFC_STD_LEGACY) != 0)\n+    for (i=0; gfc_integer_kinds[i].kind; i++)\n+      for (j=0; gfc_logical_kinds[j].kind; j++)\n+\t{\n+\t  add_conv (BT_INTEGER, gfc_integer_kinds[i].kind,\n+\t\t    BT_LOGICAL, gfc_logical_kinds[j].kind, GFC_STD_LEGACY);\n+\t  add_conv (BT_LOGICAL, gfc_logical_kinds[j].kind,\n+\t\t    BT_INTEGER, gfc_integer_kinds[i].kind, GFC_STD_LEGACY);\n+\t}\n }\n \n \n@@ -3142,7 +3153,10 @@ gfc_convert_type_warn (gfc_expr * expr, gfc_typespec * ts, int eflag,\n     goto bad;\n \n   /* At this point, a conversion is necessary. A warning may be needed.  */\n-  if (wflag && gfc_option.warn_conversion)\n+  if ((gfc_option.warn_std & sym->standard) != 0)\n+    gfc_warning_now (\"Extension: Conversion from %s to %s at %L\",\n+\t\t     gfc_typename (&from_ts), gfc_typename (ts), &expr->where);\n+  else if (wflag && gfc_option.warn_conversion)\n     gfc_warning_now (\"Conversion from %s to %s at %L\",\n \t\t     gfc_typename (&from_ts), gfc_typename (ts), &expr->where);\n "}, {"sha": "6797bcad9fa2f3ce704031d2cc4d47befdd9e332", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -3659,6 +3659,9 @@ gfc_convert_constant (gfc_expr * e, bt type, int kind)\n \tcase BT_COMPLEX:\n \t  f = gfc_int2complex;\n \t  break;\n+\tcase BT_LOGICAL:\n+\t  f = gfc_int2log;\n+\t  break;\n \tdefault:\n \t  goto oops;\n \t}\n@@ -3700,9 +3703,17 @@ gfc_convert_constant (gfc_expr * e, bt type, int kind)\n       break;\n \n     case BT_LOGICAL:\n-      if (type != BT_LOGICAL)\n-\tgoto oops;\n-      f = gfc_log2log;\n+      switch (type)\n+\t{\n+\tcase BT_INTEGER:\n+\t  f = gfc_log2int;\n+\t  break;\n+\tcase BT_LOGICAL:\n+\t  f = gfc_log2log;\n+\t  break;\n+\tdefault:\n+\t  goto oops;\n+\t}\n       break;\n \n     default:"}, {"sha": "9f2246c8d1594428b83d1d1b5a890874e95b6414", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -1,3 +1,9 @@\n+2005-06-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/logint-1.f: New test case.\n+\t* gfortran.dg/logint-2.f: Likewise.\n+\t* gfortran.dg/logint-3.f: Likewise.\n+\n 2005-06-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/21536"}, {"sha": "d6349100860e7c5f8a9828c639c5351fac01d05a", "filename": "gcc/testsuite/gfortran.dg/logint-1.f", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-1.f?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -0,0 +1,43 @@\n+c { dg-do compile }\n+c { dg-options \"-O2 -std=legacy\" }\n+       LOGICAL*1 l1\n+       LOGICAL*2 l2\n+       LOGICAL*4 l4\n+       INTEGER*1 i1\n+       INTEGER*2 i2\n+       INTEGER*4 i4\n+\n+       i1 = .TRUE.\n+       i2 = .TRUE.\n+       i4 = .TRUE.\n+\n+       i1 = .FALSE.\n+       i2 = .FALSE.\n+       i4 = .FALSE.\n+\n+       i1 = l1\n+       i2 = l1\n+       i4 = l1\n+\n+       i1 = l2\n+       i2 = l2\n+       i4 = l2\n+\n+       i1 = l4\n+       i2 = l4\n+       i4 = l4\n+\n+       l1 = i1\n+       l2 = i1\n+       l4 = i1\n+\n+       l1 = i2\n+       l2 = i2\n+       l4 = i2\n+\n+       l1 = i4\n+       l2 = i4\n+       l4 = i4\n+\n+       END\n+ "}, {"sha": "a5fcf230a9135e331368759ef49d93a9df950ad7", "filename": "gcc/testsuite/gfortran.dg/logint-2.f", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-2.f?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -0,0 +1,43 @@\n+c { dg-do compile }\n+c { dg-options \"-O2 -std=f95\" }\n+       LOGICAL*1 l1\n+       LOGICAL*2 l2\n+       LOGICAL*4 l4\n+       INTEGER*1 i1\n+       INTEGER*2 i2\n+       INTEGER*4 i4\n+\n+       i1 = .TRUE.  ! { dg-error \"convert\" }\n+       i2 = .TRUE.  ! { dg-error \"convert\" }\n+       i4 = .TRUE.  ! { dg-error \"convert\" }\n+\n+       i1 = .FALSE. ! { dg-error \"convert\" }\n+       i2 = .FALSE. ! { dg-error \"convert\" }\n+       i4 = .FALSE. ! { dg-error \"convert\" }\n+\n+       i1 = l1      ! { dg-error \"convert\" }\n+       i2 = l1      ! { dg-error \"convert\" }\n+       i4 = l1      ! { dg-error \"convert\" }\n+\n+       i1 = l2      ! { dg-error \"convert\" }\n+       i2 = l2      ! { dg-error \"convert\" }\n+       i4 = l2      ! { dg-error \"convert\" }\n+\n+       i1 = l4      ! { dg-error \"convert\" }\n+       i2 = l4      ! { dg-error \"convert\" }\n+       i4 = l4      ! { dg-error \"convert\" }\n+\n+       l1 = i1      ! { dg-error \"convert\" }\n+       l2 = i1      ! { dg-error \"convert\" }\n+       l4 = i1      ! { dg-error \"convert\" }\n+\n+       l1 = i2      ! { dg-error \"convert\" }\n+       l2 = i2      ! { dg-error \"convert\" }\n+       l4 = i2      ! { dg-error \"convert\" }\n+\n+       l1 = i4      ! { dg-error \"convert\" }\n+       l2 = i4      ! { dg-error \"convert\" }\n+       l4 = i4      ! { dg-error \"convert\" }\n+\n+       END\n+ "}, {"sha": "cf927ab8e83b860c36b82372dcea01dd5005726f", "filename": "gcc/testsuite/gfortran.dg/logint-3.f", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a29423de8cfb7e2b5642b9d44eb21e4b286aec/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flogint-3.f?ref=c3a29423de8cfb7e2b5642b9d44eb21e4b286aec", "patch": "@@ -0,0 +1,43 @@\n+c { dg-do compile }\n+c { dg-options \"-O2\" }\n+       LOGICAL*1 l1\n+       LOGICAL*2 l2\n+       LOGICAL*4 l4\n+       INTEGER*1 i1\n+       INTEGER*2 i2\n+       INTEGER*4 i4\n+\n+       i1 = .TRUE.  ! { dg-warning \"Extension: Conversion\" }\n+       i2 = .TRUE.  ! { dg-warning \"Extension: Conversion\" }\n+       i4 = .TRUE.  ! { dg-warning \"Extension: Conversion\" }\n+\n+       i1 = .FALSE. ! { dg-warning \"Extension: Conversion\" }\n+       i2 = .FALSE. ! { dg-warning \"Extension: Conversion\" }\n+       i4 = .FALSE. ! { dg-warning \"Extension: Conversion\" }\n+\n+       i1 = l1      ! { dg-warning \"Extension: Conversion\" }\n+       i2 = l1      ! { dg-warning \"Extension: Conversion\" }\n+       i4 = l1      ! { dg-warning \"Extension: Conversion\" }\n+\n+       i1 = l2      ! { dg-warning \"Extension: Conversion\" }\n+       i2 = l2      ! { dg-warning \"Extension: Conversion\" }\n+       i4 = l2      ! { dg-warning \"Extension: Conversion\" }\n+\n+       i1 = l4      ! { dg-warning \"Extension: Conversion\" }\n+       i2 = l4      ! { dg-warning \"Extension: Conversion\" }\n+       i4 = l4      ! { dg-warning \"Extension: Conversion\" }\n+\n+       l1 = i1      ! { dg-warning \"Extension: Conversion\" }\n+       l2 = i1      ! { dg-warning \"Extension: Conversion\" }\n+       l4 = i1      ! { dg-warning \"Extension: Conversion\" }\n+\n+       l1 = i2      ! { dg-warning \"Extension: Conversion\" }\n+       l2 = i2      ! { dg-warning \"Extension: Conversion\" }\n+       l4 = i2      ! { dg-warning \"Extension: Conversion\" }\n+\n+       l1 = i4      ! { dg-warning \"Extension: Conversion\" }\n+       l2 = i4      ! { dg-warning \"Extension: Conversion\" }\n+       l4 = i4      ! { dg-warning \"Extension: Conversion\" }\n+\n+       END\n+ "}]}