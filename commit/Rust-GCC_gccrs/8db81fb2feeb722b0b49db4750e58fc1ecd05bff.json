{"sha": "8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRiODFmYjJmZWViNzIyYjBiNDlkYjQ3NTBlNThmYzFlY2QwNWJmZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-07-16T20:43:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-07-16T20:43:11Z"}, "message": "re PR libstdc++/53978 (Missing static const definitions in <bits/alloc_traits.h>)\n\n\tPR libstdc++/53978\n\t* include/bits/alloc_traits.h (allocator_traits): Define static\n\tconstants.\n\t* include/bits/ptr_traits.h (pointer_traits): Likewise.\n\t* include/ext/alloc_traits.h (__allocator_always_compares_equal):\n\tLikewise.\n\nFrom-SVN: r189547", "tree": {"sha": "a45ab54f7f6447cf29ea8247f56bbe95204a64c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a45ab54f7f6447cf29ea8247f56bbe95204a64c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b667f1bb41b795971e965d61a1733b31c36acc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b667f1bb41b795971e965d61a1733b31c36acc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b667f1bb41b795971e965d61a1733b31c36acc9"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "e1f8bd9bebd1e6243c415e1cd061266140f2b533", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "patch": "@@ -1,3 +1,12 @@\n+2012-07-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/53978\n+\t* include/bits/alloc_traits.h (allocator_traits): Define static\n+\tconstants.\n+\t* include/bits/ptr_traits.h (pointer_traits): Likewise.\n+\t* include/ext/alloc_traits.h (__allocator_always_compares_equal):\n+\tLikewise.\n+\n 2012-07-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/53657"}, {"sha": "80cc956a6fbf52702bea1538729c66aac6004d9e", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "patch": "@@ -1,6 +1,6 @@\n // Allocator traits -*- C++ -*-\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -56,6 +56,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static const bool __value = _S_chk<_Alloc, _Tp>(nullptr);\n     };\n \n+  template<typename _Alloc, typename _Tp>\n+    const bool __alloctr_rebind_helper<_Alloc, _Tp>::__value;\n+\n   template<typename _Alloc, typename _Tp,\n            bool = __alloctr_rebind_helper<_Alloc, _Tp>::__value>\n     struct __alloctr_rebind;\n@@ -422,6 +425,27 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n       { return _S_select(__rhs); }\n     };\n \n+  template<typename _Alloc>\n+  template<typename _Alloc2>\n+    const bool allocator_traits<_Alloc>::__allocate_helper<_Alloc2>::value;\n+\n+  template<typename _Alloc>\n+  template<typename _Tp, typename... _Args>\n+    const bool\n+    allocator_traits<_Alloc>::__construct_helper<_Tp, _Args...>::value;\n+\n+  template<typename _Alloc>\n+  template<typename _Tp>\n+    const bool allocator_traits<_Alloc>::__destroy_helper<_Tp>::value;\n+\n+  template<typename _Alloc>\n+  template<typename _Alloc2>\n+    const bool allocator_traits<_Alloc>::__maxsize_helper<_Alloc2>::value;\n+\n+  template<typename _Alloc>\n+  template<typename _Alloc2>\n+    const bool allocator_traits<_Alloc>::__select_helper<_Alloc2>::value;\n+\n   template<typename _Alloc>\n     inline void\n     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)"}, {"sha": "552f48745f33d78d11bb370b98d0c2b62ed4fa74", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "patch": "@@ -1,6 +1,6 @@\n // Pointer Traits -*- C++ -*-\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -86,6 +86,9 @@ _GLIBCXX_HAS_NESTED_TYPE(difference_type)\n       static const bool __value = _S_chk<_Ptr, _Up>(nullptr);\n     };\n \n+  template<typename _Ptr, typename _Up>\n+    const bool __ptrtr_rebind_helper<_Ptr, _Up>::__value;\n+\n   template<typename _Tp, typename _Up,\n            bool = __ptrtr_rebind_helper<_Tp, _Up>::__value>\n     struct __ptrtr_rebind;"}, {"sha": "b66f818a37a54f7d6ed742cd563d15314299dd85", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db81fb2feeb722b0b49db4750e58fc1ecd05bff/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "patch": "@@ -1,6 +1,6 @@\n // Allocator traits -*- C++ -*-\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,37 +49,56 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-template<typename _Alloc>\n-  struct __allocator_always_compares_equal\n-  { static const bool value = false; };\n+  template<typename _Alloc>\n+    struct __allocator_always_compares_equal\n+    { static const bool value = false; };\n+\n+  template<typename _Alloc>\n+    const bool __allocator_always_compares_equal<_Alloc>::value;\n \n   template<typename _Tp>\n     struct __allocator_always_compares_equal<std::allocator<_Tp>>\n     { static const bool value = true; };\n \n+  template<typename _Tp>\n+    const bool __allocator_always_compares_equal<std::allocator<_Tp>>::value;\n+\n   template<typename, typename> struct array_allocator;\n \n   template<typename _Tp, typename _Array>\n     struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>\n     { static const bool value = true; };\n \n+  template<typename _Tp, typename _Array>\n+    const bool\n+    __allocator_always_compares_equal<array_allocator<_Tp, _Array>>::value;\n+\n   template<typename> struct mt_allocator;\n \n   template<typename _Tp>\n     struct __allocator_always_compares_equal<mt_allocator<_Tp>>\n     { static const bool value = true; };\n \n+  template<typename _Tp>\n+    const bool __allocator_always_compares_equal<mt_allocator<_Tp>>::value;\n+\n   template<typename> struct new_allocator;\n \n   template<typename _Tp>\n     struct __allocator_always_compares_equal<new_allocator<_Tp>>\n     { static const bool value = true; };\n \n+  template<typename _Tp>\n+    const bool __allocator_always_compares_equal<new_allocator<_Tp>>::value;\n+\n   template<typename> struct pool_allocator;\n \n   template<typename _Tp>\n     struct __allocator_always_compares_equal<pool_allocator<_Tp>>\n     { static const bool value = true; };\n+\n+  template<typename _Tp>\n+    const bool __allocator_always_compares_equal<pool_allocator<_Tp>>::value;\n #endif\n \n /**"}]}