{"sha": "62e56a0d652ce83ae3d220cc4a01de46674188f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlNTZhMGQ2NTJjZTgzYWUzZDIyMGNjNGEwMWRlNDY2NzQxODhmMQ==", "commit": {"author": {"name": "Victoria Stepanyan", "email": "victoria.stepanyan@amd.com", "date": "2015-12-06T17:02:48Z"}, "committer": {"name": "Venkataramanan Kumar", "email": "vekumar@gcc.gnu.org", "date": "2015-12-06T17:02:48Z"}, "message": "support for AMD clzero isa.\n\ngcc/ChangeLog\n2015-12-06  Victoria Stepanyan  <victoria.stepanyan@amd.com>\n\n        * common/config/i386/i386-common.c\n        (OPTION_MASK_ISA_CLZERO_SET): New.\n        (ix86_handle_option): Handle clzero.\n        * config.gcc (i[34567]86-*-*): Add clzerointrin.h,\n        (x86_64-*-*): Likewise.\n        * config/i386/clzerointrin.h: New header.\n        * config/i386/cpuid.h (bit_CLZERO):  Define.\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect\n        CLZERO support.\n        * config/i386/i386.opt (clzero): New.\n        * config/i386/i386-c.c: Define __CLZERO__ if needed.\n        * config/i386/i386.c (ix86_target_string): Define -mclzero option.\n        (PTA_CLZERO): New.\n        (ix86_option_override_internal): Handle new option.\n        (processor_alias_table): Added PTA_CLZERO.\n        (ix86_valid_target_attribute_inner_p): Add OPT_mclzero.\n        (ix86_builtins): Add IX86_BUILTIN_CLZERO, IX86_BUILTIN_CLZERO.\n        (ix86_expand_builtin): Handle IX86_BUILTIN_CLZERO and\n        IX86_BUILTIN_CLZERO  built-ins.\n        * config/i386/i386.h (TARGET_CLZERO):  New.\n        * config/i386/i386.md (unspecv): Add UNSPEC_CLZERO.\n        (clzero):  New pattern.\n        (clzero_<mode>): New pattern.\n        * config/i386/x86intrin.h: Include clzerointrin.h.\n        * doc/extend.texi: Document clzero builtins.\n        * doc/invoke.texi: Document -mclzero option.\n\ngcc/testsuite/ChangeLog\n2015-12-06  Victoria Stepanyan  <victoria.stepanyan@amd.com>\n\n        * gcc.target/i386/clzero.c: New.\n        * gcc.target/i386/sse-12.c: Add -mclzero.\n        * gcc.target/i386/sse-13.c: Ditto.\n        * gcc.target/i386/sse-14.c: Ditto.\n        * gcc.target/i386/sse-22.c: Ditto.\n        * gcc.target/i386/sse-23.c: Ditto.\n        * g++.dg/other/i386-2.C: Ditto.\n        * g++.dg/other/i386-3.C: Ditto.\n\nFrom-SVN: r231340", "tree": {"sha": "caf97ab569ab5baf08a9753bd71ed1d4c81deee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caf97ab569ab5baf08a9753bd71ed1d4c81deee5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e56a0d652ce83ae3d220cc4a01de46674188f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e56a0d652ce83ae3d220cc4a01de46674188f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e56a0d652ce83ae3d220cc4a01de46674188f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e56a0d652ce83ae3d220cc4a01de46674188f1/comments", "author": null, "committer": null, "parents": [{"sha": "2097a8906f26415d7ad36f485ad7841ed5142fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2097a8906f26415d7ad36f485ad7841ed5142fba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2097a8906f26415d7ad36f485ad7841ed5142fba"}], "stats": {"total": 181, "additions": 168, "deletions": 13}, "files": [{"sha": "71f0931efbb0f4376c3f424acc9c8d4be6471a2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -1,3 +1,32 @@\n+2015-12-06  Victoria Stepanyan  <victoria.stepanyan@amd.com>\n+\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_CLZERO_SET): New.\n+\t(ix86_handle_option): Handle clzero.\n+\t* config.gcc (i[34567]86-*-*): Add clzerointrin.h,\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/clzerointrin.h: New header.\n+\t* config/i386/cpuid.h (bit_CLZERO):  Define.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tCLZERO support.\n+\t* config/i386/i386.opt (clzero): New.\n+\t* config/i386/i386-c.c: Define __CLZERO__ if needed.\n+\t* config/i386/i386.c (ix86_target_string): Define -mclzero option.\n+\t(PTA_CLZERO): New.\n+\t(ix86_option_override_internal): Handle new option.\n+\t(processor_alias_table): Added PTA_CLZERO.\n+\t(ix86_valid_target_attribute_inner_p): Add OPT_mclzero.\n+\t(ix86_builtins): Add IX86_BUILTIN_CLZERO, IX86_BUILTIN_CLZERO.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_CLZERO and\n+\tIX86_BUILTIN_CLZERO  built-ins.\n+\t* config/i386/i386.h (TARGET_CLZERO):  New.\n+\t* config/i386/i386.md (unspecv): Add UNSPEC_CLZERO.\n+\t(clzero):  New pattern.\n+\t(clzero_<mode>): New pattern.\n+\t* config/i386/x86intrin.h: Include clzerointrin.h.\n+\t* doc/extend.texi: Document clzero builtins.\n+\t* doc/invoke.texi: Document -mclzero option.\n+\n 2015-12-05  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-icf.c (sem_function::merge): Check that local_original exists."}, {"sha": "a9d2208bc49c7edd31566b3eb0c9d2cd5c640a7a", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -128,6 +128,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_F16C_SET \\\n   (OPTION_MASK_ISA_F16C | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA_MWAITX_SET OPTION_MASK_ISA_MWAITX\n+#define OPTION_MASK_ISA_CLZERO_SET OPTION_MASK_ISA_CLZERO\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -188,6 +189,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_PCOMMIT_UNSET OPTION_MASK_ISA_PCOMMIT\n #define OPTION_MASK_ISA_CLWB_UNSET OPTION_MASK_ISA_CLWB\n #define OPTION_MASK_ISA_MWAITX_UNSET OPTION_MASK_ISA_MWAITX\n+#define OPTION_MASK_ISA_CLZERO_UNSET OPTION_MASK_ISA_CLZERO\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -947,6 +949,20 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mclzero:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLZERO_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CLZERO_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_CLZERO_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CLZERO_UNSET;\n+\t}\n+      return true;\n+\n+\n   /* Comes from final.c -- no real reason to change it.  */\n #define MAX_CODE_ALIGN 16\n "}, {"sha": "882e4134b4c883a5fe0f19996e54ac63769bada1", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -372,7 +372,7 @@ i[34567]86-*-*)\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n-\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h mwaitxintrin.h\"\n+\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h mwaitxintrin.h clzerointrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -393,7 +393,7 @@ x86_64-*-*)\n \t\t       xsavesintrin.h avx512dqintrin.h avx512bwintrin.h\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n-\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h mwaitxintrin.h\"\n+\t\t       avx512vbmivlintrin.h clwbintrin.h pcommitintrin.h mwaitxintrin.h clzerointrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "696585b6d8839ae7afa6b674707263b63c4a30e0", "filename": "gcc/config/i386/clzerointrin.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fclzerointrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fclzerointrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fclzerointrin.h?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -0,0 +1,44 @@\n+/* Copyright (C) 2012-2015 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _CLZEROINTRIN_H_INCLUDED\n+#define _CLZEROINTRIN_H_INCLUDED\n+\n+#ifndef __CLZERO__\n+#pragma GCC push_options\n+#pragma GCC target(\"clzero\")\n+#define __DISABLE_CLZERO__\n+#endif /* __CLZERO__ */\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_clzero (void * __I)\n+{\n+  __builtin_ia32_clzero (__I);\n+}\n+\n+#ifdef __DISABLE_CLZERO__\n+#undef __DISABLE_CLZERO__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_CLZERO__ */\n+\n+#endif /* _CLZEROINTRIN_H_INCLUDED */"}, {"sha": "0f3c3ec452c35bb5ab47559650b74ef2654c180d", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -439,6 +439,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__CLWB__\");\n   if (isa_flag & OPTION_MASK_ISA_MWAITX)\n     def_or_undef (parse_in, \"__MWAITX__\");\n+  if (isa_flag & OPTION_MASK_ISA_CLZERO)\n+    def_or_undef (parse_in, \"__CLZERO__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "1e6969f483eae31b5ab1f694117137a03af01fff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -2501,6 +2501,7 @@ static rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx, rtx);\n static rtx (*ix86_gen_one_cmpl2) (rtx, rtx);\n static rtx (*ix86_gen_monitor) (rtx, rtx, rtx);\n static rtx (*ix86_gen_monitorx) (rtx, rtx, rtx);\n+static rtx (*ix86_gen_clzero) (rtx);\n static rtx (*ix86_gen_andsp) (rtx, rtx, rtx);\n static rtx (*ix86_gen_allocate_stack_worker) (rtx, rtx);\n static rtx (*ix86_gen_adjust_stack_and_probe) (rtx, rtx, rtx);\n@@ -5370,6 +5371,7 @@ ix86_option_override_internal (bool main_args_p,\n       ix86_gen_probe_stack_range = gen_probe_stack_rangedi;\n       ix86_gen_monitor = gen_sse3_monitor_di;\n       ix86_gen_monitorx = gen_monitorx_di;\n+      ix86_gen_clzero = gen_clzero_di;\n     }\n   else\n     {\n@@ -5383,6 +5385,7 @@ ix86_option_override_internal (bool main_args_p,\n       ix86_gen_probe_stack_range = gen_probe_stack_rangesi;\n       ix86_gen_monitor = gen_sse3_monitor_si;\n       ix86_gen_monitorx = gen_monitorx_si;\n+      ix86_gen_clzero = gen_clzero_si;\n     }\n \n #ifdef USE_IX86_CLD\n@@ -5915,6 +5918,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"clwb\",\tOPT_mclwb),\n     IX86_ATTR_ISA (\"pcommit\",\tOPT_mpcommit),\n     IX86_ATTR_ISA (\"mwaitx\",\tOPT_mmwaitx),\n+    IX86_ATTR_ISA (\"clzero\",    OPT_mclzero),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -30009,6 +30013,7 @@ enum ix86_builtins\n \n   IX86_BUILTIN_MONITOR,\n   IX86_BUILTIN_MWAIT,\n+  IX86_BUILTIN_CLZERO,\n \n   /* SSSE3.  */\n   IX86_BUILTIN_PHADDW,\n@@ -35893,6 +35898,10 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (OPTION_MASK_ISA_MWAITX, \"__builtin_ia32_mwaitx\",\n \t       VOID_FTYPE_UNSIGNED_UNSIGNED_UNSIGNED, IX86_BUILTIN_MWAITX);\n \n+  /* CLZERO.  */\n+  def_builtin (OPTION_MASK_ISA_CLZERO, \"__builtin_ia32_clzero\",\n+               VOID_FTYPE_PCVOID, IX86_BUILTIN_CLZERO);\n+\n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n     {\n@@ -40663,6 +40672,14 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_mwaitx (op0, op1, op2));\n       return 0;\n \n+    case IX86_BUILTIN_CLZERO:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+      if (!REG_P (op0))\n+\top0 = ix86_zero_extend_to_Pmode (op0);\n+      emit_insn (ix86_gen_clzero (op0));\n+      return 0;\n+\n     case IX86_BUILTIN_VEC_INIT_V2SI:\n     case IX86_BUILTIN_VEC_INIT_V4HI:\n     case IX86_BUILTIN_VEC_INIT_V8QI:"}, {"sha": "fd0a706217c1e94efce1d5388fdc718a3cdf50fc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -265,6 +265,9 @@\n   UNSPECV_MONITORX\n   UNSPECV_MWAITX\n \n+  ;; For CLZERO support\n+  UNSPECV_CLZERO\n+\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -19120,6 +19123,15 @@\n   [(set (attr \"length\")\n      (symbol_ref (\"(Pmode != word_mode) + 3\")))])\n \n+;; CLZERO\n+(define_insn \"clzero_<mode>\"\n+  [(unspec_volatile [(match_operand: P 0 \"register_operand\" \"a\")]\n+                   UNSPECV_CLZERO)]\n+  \"TARGET_CLZERO\"\n+  \"clzero\"\n+  [(set_attr \"length\" \"3\")\n+  (set_attr \"memory\" \"unknown\")])\n+\n ;; MPX instructions\n \n (define_expand \"<mode>_mk\""}, {"sha": "730b753ba4bdfdd1aee0312f3b232ca6f7dad31b", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -751,10 +751,6 @@ mclflushopt\n Target Report Mask(ISA_CLFLUSHOPT) Var(ix86_isa_flags) Save\n Support CLFLUSHOPT instructions.\n \n-mclzero\n-Target Report Mask(ISA_CLZERO) Var(ix86_isa_flags) Save\n-Support CLZERO instructions.\n-\n mclwb\n Target Report Mask(ISA_CLWB) Var(ix86_isa_flags) Save\n Support CLWB instruction.\n@@ -876,6 +872,10 @@ mmwaitx\n Target Report Mask(ISA_MWAITX) Var(ix86_isa_flags) Save\n Support MWAITX and MONITORX built-in functions and code generation.\n \n+mclzero\n+Target Report Mask(ISA_CLZERO) Var(ix86_isa_flags) Save\n+Support CLZERO built-in functions and code generation.\n+\n mstack-protector-guard=\n Target RejectNegative Joined Enum(stack_protector_guard) Var(ix86_stack_protector_guard) Init(SSP_TLS)\n Use given stack-protector guard."}, {"sha": "9b292b35434734758906da0182b77e364d7131c3", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -93,6 +93,8 @@\n \n #include <mwaitxintrin.h>\n \n+#include <clzerointrin.h>\n+\n #endif /* __iamcu__ */\n \n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "883d9b334ab5d9090953a3b17d7898f0a78cd4a6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -18337,6 +18337,12 @@ void __builtin_ia32_monitorx (void *, unsigned int, unsigned int)\n void __builtin_ia32_mwaitx (unsigned int, unsigned int, unsigned int)\n @end smallexample\n \n+The following built-in functions are available when @option{-mclzero} is used.\n+All of them generate the machine instruction that is part of the name.\n+@smallexample\n+void __builtin_i32_clzero (void *)\n+@end smallexample\n+\n @node x86 transactional memory intrinsics\n @subsection x86 Transactional Memory Intrinsics\n "}, {"sha": "33f579f88cd82a9cfeb2df1e9ff9b106f5529f2b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -1101,7 +1101,7 @@ See RS/6000 and PowerPC Options.\n -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n -mprefetchwt1 -mclflushopt -mxsavec -mxsaves @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n--mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mmpx -mmwaitx -mthreads @gol\n+-mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mmpx -mmwaitx -mclzero -mthreads @gol\n -mms-bitfields -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy} -mmemset-strategy=@var{strategy} @gol\n@@ -23216,6 +23216,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mmwaitx\n @opindex mmwaitx\n+@need 200\n+@itemx -mclzero\n+@opindex mclzero\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,"}, {"sha": "682272fc6e9b08b1aefcd0464769c5cd4971e07e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -1,3 +1,14 @@\n+2015-12-06  Victoria Stepanyan  <victoria.stepanyan@amd.com>\n+\n+\t* gcc.target/i386/clzero.c: New.\n+\t* gcc.target/i386/sse-12.c: Add -mclzero.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2015-12-05  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/recip-sqrtf.c: New test."}, {"sha": "99caa10210e6edf2784e48a4694c23bb0f932080", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx -mclzero\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "49b4484a98b86067de8c188a63a427d1b5ee64c1", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx -mclzero\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "9a68a4928a894de418ac5feaf71e89e611b1c02b", "filename": "gcc/testsuite/gcc.target/i386/clzero.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclzero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclzero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclzero.c?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mclzero\" } */\n+\n+/* Verify that they work in both 32bit and 64bit.  */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (void *k)\n+{\n+   _mm_clzero (k);\n+}\n+"}, {"sha": "8b7ef6d960ba1e95deb01758dfbb5159212601e5", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx -mclzero\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "0592370ef264290ad27c88cfa68b86394a8f98da", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mclwb -mpcommit -mmwaitx -mclzero\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "1baf6fc0c22814d94cabd54bb6f2a5713082a795", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mclwb -mpcommit -mmwaitx -mclzero\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "45613547c420a0ad1a0f7b5487600de4bafcf7ff", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e56a0d652ce83ae3d220cc4a01de46674188f1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=62e56a0d652ce83ae3d220cc4a01de46674188f1", "patch": "@@ -594,6 +594,6 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,clwb,pcommit,mwaitx\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,clwb,pcommit,mwaitx,clzero\")\n \n #include <x86intrin.h>"}]}