{"sha": "6646d624d0901f1bd5a494b67205d00b63ff554b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0NmQ2MjRkMDkwMWYxYmQ1YTQ5NGI2NzIwNWQwMGI2M2ZmNTU0Yg==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-08-09T07:53:28Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-08-09T07:53:28Z"}, "message": "regex_constants.h: Change syntax_option_type to enum type.\n\n2013-08-09  Tim Shen  <timshen91@gmail.com>\n\n\t* include/bits/regex_constants.h: Change syntax_option_type to enum\n\ttype.\n\nFrom-SVN: r201621", "tree": {"sha": "f06f5fad3bdf3e5b9f6f01db07dc41f6e2102705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f06f5fad3bdf3e5b9f6f01db07dc41f6e2102705"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6646d624d0901f1bd5a494b67205d00b63ff554b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6646d624d0901f1bd5a494b67205d00b63ff554b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6646d624d0901f1bd5a494b67205d00b63ff554b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6646d624d0901f1bd5a494b67205d00b63ff554b/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03b0ee0aba82efa8e6cfc873286abef4b5ef92d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b0ee0aba82efa8e6cfc873286abef4b5ef92d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b0ee0aba82efa8e6cfc873286abef4b5ef92d8"}], "stats": {"total": 203, "additions": 123, "deletions": 80}, "files": [{"sha": "17267c8380ddccb57e6d3b631b8d64f5851357ba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6646d624d0901f1bd5a494b67205d00b63ff554b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6646d624d0901f1bd5a494b67205d00b63ff554b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6646d624d0901f1bd5a494b67205d00b63ff554b", "patch": "@@ -1,3 +1,8 @@\n+2013-08-09  Tim Shen  <timshen91@gmail.com>\n+\n+\t* include/bits/regex_constants.h: Change syntax_option_type to enum\n+\ttype.\n+\n 2013-08-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* include/bits/regex.h: Replace _A, _B, _C, _R by _Ap, _Bp,"}, {"sha": "6ac65d7991315b13e85b816a40816ac23b206e97", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 118, "deletions": 80, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6646d624d0901f1bd5a494b67205d00b63ff554b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6646d624d0901f1bd5a494b67205d00b63ff554b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=6646d624d0901f1bd5a494b67205d00b63ff554b", "patch": "@@ -77,87 +77,125 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * elements @c ECMAScript, @c basic, @c extended, @c awk, @c grep, @c egrep\n    * %set.\n    */\n-  typedef unsigned int syntax_option_type;\n-\n-  /**\n-   * Specifies that the matching of regular expressions against a character\n-   * sequence shall be performed without regard to case.\n-   */\n-  constexpr syntax_option_type icase      = 1 << _S_icase;\n-\n-  /**\n-   * Specifies that when a regular expression is matched against a character\n-   * container sequence, no sub-expression matches are to be stored in the\n-   * supplied match_results structure.\n-   */\n-  constexpr syntax_option_type nosubs     = 1 << _S_nosubs;\n-\n-  /**\n-   * Specifies that the regular expression engine should pay more attention to\n-   * the speed with which regular expressions are matched, and less to the\n-   * speed with which regular expression objects are constructed. Otherwise\n-   * it has no detectable effect on the program output.\n-   */\n-  constexpr syntax_option_type optimize   = 1 << _S_optimize;\n-\n-  /**\n-   * Specifies that character ranges of the form [a-b] should be locale\n-   * sensitive.\n-   */\n-  constexpr syntax_option_type collate    = 1 << _S_collate;\n-\n-  /**\n-   * Specifies that the grammar recognized by the regular expression engine is\n-   * that used by ECMAScript in ECMA-262 [Ecma International, ECMAScript\n-   * Language Specification, Standard Ecma-262, third edition, 1999], as\n-   * modified in section [28.13].  This grammar is similar to that defined\n-   * in the PERL scripting language but extended with elements found in the\n-   * POSIX regular expression grammar.\n-   */\n-  constexpr syntax_option_type ECMAScript = 1 << _S_ECMAScript;\n-\n-  /**\n-   * Specifies that the grammar recognized by the regular expression engine is\n-   * that used by POSIX basic regular expressions in IEEE Std 1003.1-2001,\n-   * Portable Operating System Interface (POSIX), Base Definitions and\n-   * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n-   * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n-   */\n-  constexpr syntax_option_type basic      = 1 << _S_basic;\n-\n-  /**\n-   * Specifies that the grammar recognized by the regular expression engine is\n-   * that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n-   * Portable Operating System Interface (POSIX), Base Definitions and Headers,\n-   * Section 9, Regular Expressions.\n-   */\n-  constexpr syntax_option_type extended   = 1 << _S_extended;\n-\n-  /**\n-   * Specifies that the grammar recognized by the regular expression engine is\n-   * that used by POSIX utility awk in IEEE Std 1003.1-2001.  This option is\n-   * identical to syntax_option_type extended, except that C-style escape\n-   * sequences are supported.  These sequences are:\n-   * \\\\\\\\, \\\\a, \\\\b, \\\\f, \\\\n, \\\\r, \\\\t , \\\\v, \\\\&apos;, &apos;,\n-   * and \\\\ddd (where ddd is one, two, or three octal digits).\n-   */\n-  constexpr syntax_option_type awk        = 1 << _S_awk;\n-\n-  /**\n-   * Specifies that the grammar recognized by the regular expression engine is\n-   * that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n-   * identical to syntax_option_type basic, except that newlines are treated\n-   * as whitespace.\n-   */\n-  constexpr syntax_option_type grep       = 1 << _S_grep;\n+  enum syntax_option_type\n+    {\n+      /**\n+       * Specifies that the matching of regular expressions against a character\n+       * sequence shall be performed without regard to case.\n+       */\n+      icase      = 1 << _S_icase,\n+\n+      /**\n+       * Specifies that when a regular expression is matched against a character\n+       * container sequence, no sub-expression matches are to be stored in the\n+       * supplied match_results structure.\n+       */\n+      nosubs     = 1 << _S_nosubs,\n+\n+      /**\n+       * Specifies that the regular expression engine should pay more attention to\n+       * the speed with which regular expressions are matched, and less to the\n+       * speed with which regular expression objects are constructed. Otherwise\n+       * it has no detectable effect on the program output.\n+       */\n+      optimize   = 1 << _S_optimize,\n+\n+      /**\n+       * Specifies that character ranges of the form [a-b] should be locale\n+       * sensitive.\n+       */\n+      collate    = 1 << _S_collate,\n+\n+      /**\n+       * Specifies that the grammar recognized by the regular expression engine is\n+       * that used by ECMAScript in ECMA-262 [Ecma International, ECMAScript\n+       * Language Specification, Standard Ecma-262, third edition, 1999], as\n+       * modified in section [28.13].  This grammar is similar to that defined\n+       * in the PERL scripting language but extended with elements found in the\n+       * POSIX regular expression grammar.\n+       */\n+      ECMAScript = 1 << _S_ECMAScript,\n+\n+      /**\n+       * Specifies that the grammar recognized by the regular expression engine is\n+       * that used by POSIX basic regular expressions in IEEE Std 1003.1-2001,\n+       * Portable Operating System Interface (POSIX), Base Definitions and\n+       * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n+       * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n+       */\n+      basic      = 1 << _S_basic,\n+\n+      /**\n+       * Specifies that the grammar recognized by the regular expression engine is\n+       * that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n+       * Portable Operating System Interface (POSIX), Base Definitions and Headers,\n+       * Section 9, Regular Expressions.\n+       */\n+      extended   = 1 << _S_extended,\n+\n+      /**\n+       * Specifies that the grammar recognized by the regular expression engine is\n+       * that used by POSIX utility awk in IEEE Std 1003.1-2001.  This option is\n+       * identical to syntax_option_type extended, except that C-style escape\n+       * sequences are supported.  These sequences are:\n+       * \\\\\\\\, \\\\a, \\\\b, \\\\f, \\\\n, \\\\r, \\\\t , \\\\v, \\\\&apos,, &apos,,\n+       * and \\\\ddd (where ddd is one, two, or three octal digits).\n+       */\n+      awk        = 1 << _S_awk,\n+\n+      /**\n+       * Specifies that the grammar recognized by the regular expression engine is\n+       * that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n+       * identical to syntax_option_type basic, except that newlines are treated\n+       * as whitespace.\n+       */\n+      grep       = 1 << _S_grep,\n+\n+      /**\n+       * Specifies that the grammar recognized by the regular expression engine is\n+       * that used by POSIX utility grep when given the -E option in\n+       * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type\n+       * extended, except that newlines are treated as whitespace.\n+       */\n+      egrep      = 1 << _S_egrep,\n+    };\n \n-  /**\n-   * Specifies that the grammar recognized by the regular expression engine is\n-   * that used by POSIX utility grep when given the -E option in\n-   * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type\n-   * extended, except that newlines are treated as whitespace.\n-   */\n-  constexpr syntax_option_type egrep      = 1 << _S_egrep;\n+  constexpr inline syntax_option_type\n+  operator&(syntax_option_type __a, syntax_option_type __b)\n+  {\n+    return (syntax_option_type)(static_cast<unsigned int>(__a)\n+                                & static_cast<unsigned int>(__b));\n+  }\n+\n+  constexpr inline syntax_option_type\n+  operator|(syntax_option_type __a, syntax_option_type __b)\n+  {\n+    return (syntax_option_type)(static_cast<unsigned int>(__a)\n+                                | static_cast<unsigned int>(__b));\n+  }\n+\n+  constexpr inline syntax_option_type\n+  operator^(syntax_option_type __a, syntax_option_type __b)\n+  {\n+    return (syntax_option_type)(static_cast<unsigned int>(__a)\n+                                ^ static_cast<unsigned int>(__b));\n+  }\n+\n+  constexpr inline syntax_option_type\n+  operator~(syntax_option_type __a)\n+  { return (syntax_option_type)(~static_cast<unsigned int>(__a)); }\n+\n+  inline syntax_option_type&\n+  operator&=(syntax_option_type& __a, syntax_option_type __b)\n+  { return __a = __a & __b; }\n+\n+  inline syntax_option_type&\n+  operator|=(syntax_option_type& __a, syntax_option_type __b)\n+  { return __a = __a | __b; }\n+\n+  inline syntax_option_type&\n+  operator^=(syntax_option_type& __a, syntax_option_type __b)\n+  { return __a = __a ^ __b; }\n \n   //@}\n "}]}