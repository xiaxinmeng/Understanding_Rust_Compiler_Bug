{"sha": "dee29e84edf944f6fa7b16d3e2d236ea81637087", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVlMjllODRlZGY5NDRmNmZhN2IxNmQzZTJkMjM2ZWE4MTYzNzA4Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-29T12:39:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-29T12:39:50Z"}, "message": "re PR tree-optimization/62291 (PRE uses too much memory and compile-time)\n\n2014-08-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/62291\n\t* tree-ssa-pre.c (sorted_array_from_bitmap_set): Reserve\n\texactly the vector size needed and use quick_push.\n\t(phi_translate_1): Adjust comment.\n\t(valid_in_sets): Remove block argument and remove pointless\n\tchecking of NAMEs.\n\t(dependent_clean): Adjust for removal of block argument.\n\t(clean): Likewise.\n\t(compute_antic_aux): Likewise.\n\t(compute_partial_antic_aux): Likewise.\n\nFrom-SVN: r214727", "tree": {"sha": "0d68035ead4a4740ee4e38279de36593d2c24825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d68035ead4a4740ee4e38279de36593d2c24825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dee29e84edf944f6fa7b16d3e2d236ea81637087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee29e84edf944f6fa7b16d3e2d236ea81637087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dee29e84edf944f6fa7b16d3e2d236ea81637087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee29e84edf944f6fa7b16d3e2d236ea81637087/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cb0a27f93c1340fe07c02fdca86280d6d5d37fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb0a27f93c1340fe07c02fdca86280d6d5d37fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb0a27f93c1340fe07c02fdca86280d6d5d37fe"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "eab1819da557c6f9110e12b6ab24a2d7bcca0ccd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dee29e84edf944f6fa7b16d3e2d236ea81637087/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dee29e84edf944f6fa7b16d3e2d236ea81637087/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dee29e84edf944f6fa7b16d3e2d236ea81637087", "patch": "@@ -1,3 +1,16 @@\n+2014-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62291\n+\t* tree-ssa-pre.c (sorted_array_from_bitmap_set): Reserve\n+\texactly the vector size needed and use quick_push.\n+\t(phi_translate_1): Adjust comment.\n+\t(valid_in_sets): Remove block argument and remove pointless\n+\tchecking of NAMEs.\n+\t(dependent_clean): Adjust for removal of block argument.\n+\t(clean): Likewise.\n+\t(compute_antic_aux): Likewise.\n+\t(compute_partial_antic_aux): Likewise.\n+\n 2014-08-29  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "ce9cf73d420995b3aa733868d42e0c7b779e2cec", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dee29e84edf944f6fa7b16d3e2d236ea81637087/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dee29e84edf944f6fa7b16d3e2d236ea81637087/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=dee29e84edf944f6fa7b16d3e2d236ea81637087", "patch": "@@ -719,8 +719,8 @@ sorted_array_from_bitmap_set (bitmap_set_t set)\n   bitmap_iterator bi, bj;\n   vec<pre_expr> result;\n \n-  /* Pre-allocate roughly enough space for the array.  */\n-  result.create (bitmap_count_bits (&set->values));\n+  /* Pre-allocate enough space for the array.  */\n+  result.create (bitmap_count_bits (&set->expressions));\n \n   FOR_EACH_VALUE_ID_IN_SET (set, i, bi)\n     {\n@@ -738,7 +738,7 @@ sorted_array_from_bitmap_set (bitmap_set_t set)\n       EXECUTE_IF_SET_IN_BITMAP (exprset, 0, j, bj)\n \t{\n \t  if (bitmap_bit_p (&set->expressions, j))\n-\t    result.safe_push (expression_for_id (j));\n+\t    result.quick_push (expression_for_id (j));\n         }\n     }\n \n@@ -1736,8 +1736,9 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \n \t    return get_or_alloc_expr_for_name (def);\n \t  }\n-\t/* Otherwise return it unchanged - it will get cleaned if its\n-\t   value is not available in PREDs AVAIL_OUT set of expressions.  */\n+\t/* Otherwise return it unchanged - it will get removed if its\n+\t   value is not available in PREDs AVAIL_OUT set of expressions\n+\t   by the subtraction of TMP_GEN.  */\n \treturn expr;\n       }\n \n@@ -1976,14 +1977,14 @@ op_valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, tree op)\n    For loads/calls, we also see if the vuse is killed in this block.  */\n \n static bool\n-valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n-\t       basic_block block)\n+valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr)\n {\n   switch (expr->kind)\n     {\n     case NAME:\n-      return bitmap_find_leader (AVAIL_OUT (block),\n-\t\t\t\t get_expr_value_id (expr)) != NULL;\n+      /* By construction all NAMEs are available.  Non-available\n+\t NAMEs are removed by subtracting TMP_GEN from the sets.  */\n+      return true;\n     case NARY:\n       {\n \tunsigned int i;\n@@ -2021,15 +2022,15 @@ valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n    PA_IN.  */\n \n static void\n-dependent_clean (bitmap_set_t set1, bitmap_set_t set2, basic_block block)\n+dependent_clean (bitmap_set_t set1, bitmap_set_t set2)\n {\n   vec<pre_expr> exprs = sorted_array_from_bitmap_set (set1);\n   pre_expr expr;\n   int i;\n \n   FOR_EACH_VEC_ELT (exprs, i, expr)\n     {\n-      if (!valid_in_sets (set1, set2, expr, block))\n+      if (!valid_in_sets (set1, set2, expr))\n \tbitmap_remove_from_set (set1, expr);\n     }\n   exprs.release ();\n@@ -2040,15 +2041,15 @@ dependent_clean (bitmap_set_t set1, bitmap_set_t set2, basic_block block)\n    in SET.  */\n \n static void\n-clean (bitmap_set_t set, basic_block block)\n+clean (bitmap_set_t set)\n {\n   vec<pre_expr> exprs = sorted_array_from_bitmap_set (set);\n   pre_expr expr;\n   int i;\n \n   FOR_EACH_VEC_ELT (exprs, i, expr)\n     {\n-      if (!valid_in_sets (set, NULL, expr, block))\n+      if (!valid_in_sets (set, NULL, expr))\n \tbitmap_remove_from_set (set, expr);\n     }\n   exprs.release ();\n@@ -2250,7 +2251,7 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n     bitmap_value_insert_into_set (ANTIC_IN (block),\n \t\t\t\t  expression_for_id (bii));\n \n-  clean (ANTIC_IN (block), block);\n+  clean (ANTIC_IN (block));\n \n   if (!bitmap_set_equal (old, ANTIC_IN (block)))\n     {\n@@ -2405,7 +2406,7 @@ compute_partial_antic_aux (basic_block block,\n   /* PA_IN[block] = PA_IN[block] - ANTIC_IN[block] */\n   bitmap_set_subtract_values (PA_IN (block), ANTIC_IN (block));\n \n-  dependent_clean (PA_IN (block), ANTIC_IN (block), block);\n+  dependent_clean (PA_IN (block), ANTIC_IN (block));\n \n   if (!bitmap_set_equal (old_PA_IN, PA_IN (block)))\n     {"}]}