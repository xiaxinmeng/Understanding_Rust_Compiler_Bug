{"sha": "98837d6e79dd27c15f5218f3f1ddf838cda4796c", "node_id": "C_kwDOANBUbNoAKDk4ODM3ZDZlNzlkZDI3YzE1ZjUyMThmM2YxZGRmODM4Y2RhNDc5NmM", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-01-11T16:54:58Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-01-11T16:54:58Z"}, "message": "PR tree-optimization/71343: Value number X<<2 as X*4.\n\nThis patch is the second part of a fix for PR tree-optimization/71343,\nthat implements Richard Biener's suggestion of using tree-ssa's value\nnumbering instead of match.pd.  The change is that when assigning a\nvalue number for the expression X<<C, we actually look-up or insert\nthe value number for the multiplication X*(1<<C).  This elegantly\nhandles the fact that we (intentionally) don't canonicalize these as\nequivalent in GIMPLE, and the optimization/equivalence in PR 71343 now\nhappens by (tree-ssa SCCVN) magic.\n\n2023-01-11  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/71343\n\t* tree-ssa-sccvn.cc (visit_nary_op) <case LSHIFT_EXPR>: Make\n\tthe value number of the expression X << C the same as the value\n\tnumber for the multiplication X * (1<<C).\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/71343\n\t* gcc.dg/pr71343-2.c: New test case.", "tree": {"sha": "fde16497c0e452d16b312eee25175a6a745a0882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde16497c0e452d16b312eee25175a6a745a0882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98837d6e79dd27c15f5218f3f1ddf838cda4796c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98837d6e79dd27c15f5218f3f1ddf838cda4796c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98837d6e79dd27c15f5218f3f1ddf838cda4796c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98837d6e79dd27c15f5218f3f1ddf838cda4796c/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7279270a2deda81eaeba37a87d721bee0ed6004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7279270a2deda81eaeba37a87d721bee0ed6004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7279270a2deda81eaeba37a87d721bee0ed6004"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "11800a9191e0799a6d6d8ea8176ae59e48b27393", "filename": "gcc/testsuite/gcc.dg/pr71343-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98837d6e79dd27c15f5218f3f1ddf838cda4796c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71343-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98837d6e79dd27c15f5218f3f1ddf838cda4796c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71343-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71343-2.c?ref=98837d6e79dd27c15f5218f3f1ddf838cda4796c", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned int test1(unsigned int a , unsigned int b)\n+{\n+  return (a << 2) + (b << 2) == a * 4 + b * 4;\n+}\n+\n+unsigned int test2(unsigned int a , unsigned int b)\n+{\n+  return (a << 2) + (b << 2) == (a + b) << 2;\n+}\n+\n+unsigned int test3(unsigned int a , unsigned int b)\n+{\n+  return a * 4 + b * 4 == (a + b) * 4;\n+}\n+\n+unsigned int test4(unsigned int a , unsigned int b)\n+{\n+  return (a + b) << 2 == (a + b) * 4;\n+}\n+\n+unsigned int test5(unsigned int a , unsigned int b)\n+{\n+  return (a << 2) + (b << 2) ==  (a + b) * 4;\n+}\n+\n+unsigned int test6(unsigned int a , unsigned int b)\n+{\n+  return (a + b) << 2 == a * 4 + b * 4;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 1\" 6 \"optimized\" } } */"}, {"sha": "a01022b0d1219ea02b7f325b0fefedec5e90c7b0", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98837d6e79dd27c15f5218f3f1ddf838cda4796c/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98837d6e79dd27c15f5218f3f1ddf838cda4796c/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=98837d6e79dd27c15f5218f3f1ddf838cda4796c", "patch": "@@ -5385,6 +5385,32 @@ visit_nary_op (tree lhs, gassign *stmt)\n \t    }\n \t}\n       break;\n+    case LSHIFT_EXPR:\n+      /* For X << C, use the value number of X * (1 << C).  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TYPE_OVERFLOW_WRAPS (type)\n+\t  && !TYPE_SATURATING (type))\n+\t{\n+\t  tree rhs2 = gimple_assign_rhs2 (stmt);\n+\t  if (TREE_CODE (rhs2) == INTEGER_CST\n+\t      && tree_fits_uhwi_p (rhs2)\n+\t      && tree_to_uhwi (rhs2) < TYPE_PRECISION (type))\n+\t    {\n+\t      wide_int w = wi::set_bit_in_zero (tree_to_uhwi (rhs2),\n+\t\t\t\t\t\tTYPE_PRECISION (type));\n+\t      gimple_match_op match_op (gimple_match_cond::UNCOND,\n+\t\t\t\t\tMULT_EXPR, type, rhs1,\n+\t\t\t\t\twide_int_to_tree (type, w));\n+\t      result = vn_nary_build_or_lookup (&match_op);\n+\t      if (result)\n+\t\t{\n+\t\t  bool changed = set_ssa_val_to (lhs, result);\n+\t\t  vn_nary_op_insert_stmt (stmt, result);\n+\t\t  return changed;\n+\t\t}\n+\t    }\n+\t}\n+      break;\n     default:\n       break;\n     }"}]}