{"sha": "416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2Yzk5MWZkZDU1NjgxOTdkMGY1NDVjMGUwYTJhZDNmZDU3N2RjNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-10T07:46:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-10T07:46:31Z"}, "message": "re PR middle-end/34018 (ICE: verify_stmts failed)\n\n\tPR middle-end/34018\n\t* tree-inline.h (copy_body_data): Add regimplify field.\n\t* tree-inline.c (copy_body_r): Set id->regimplify to true\n\tif an TREE_INVARIANT ADDR_EXPR is no longer invariant after\n\tsubstitutions.\n\t(copy_bb): Clear id->regimplify before walk_tree, if it is\n\tset afterwards, regimplify the whole statement.\n\n\t* g++.dg/opt/inline14.C: New test.\n\nFrom-SVN: r130068", "tree": {"sha": "93916a577dc944948c3fc3c3b0feb8354f23744a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93916a577dc944948c3fc3c3b0feb8354f23744a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/comments", "author": null, "committer": null, "parents": [{"sha": "6481b879bad720854a3a1f8be3edc2940b3d4085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6481b879bad720854a3a1f8be3edc2940b3d4085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6481b879bad720854a3a1f8be3edc2940b3d4085"}], "stats": {"total": 276, "additions": 174, "deletions": 102}, "files": [{"sha": "ac0e088abf0e793b8a178dfca770a8236ab0c854", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "patch": "@@ -1,5 +1,13 @@\n 2007-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/34018\n+\t* tree-inline.h (copy_body_data): Add regimplify field.\n+\t* tree-inline.c (copy_body_r): Set id->regimplify to true\n+\tif an TREE_INVARIANT ADDR_EXPR is no longer invariant after\n+\tsubstitutions.\n+\t(copy_bb): Clear id->regimplify before walk_tree, if it is\n+\tset afterwards, regimplify the whole statement.\n+\n \tPR tree-optimization/33680\n \t* tree-data-ref.c (split_constant_offset) <case ADDR_EXPR>: Punt\n \tif the added cast involves variable length types."}, {"sha": "f98b9181cd8a68d42375e60c781d5837c78b7621", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 102, "deletions": 99, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "patch": "@@ -1,5 +1,8 @@\n 2007-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/34018\n+\t* g++.dg/opt/inline14.C: New test.\n+\n \tPR tree-optimization/33680\n \t* gcc.c-torture/compile/20071108-1.c: New test.\n \n@@ -123,21 +126,21 @@\n \t\n 2007-11-06  Douglas Gregor  <doug.gregor@gmail.com>\n \n-\t* testsuite/g++.dg/parser/crash36.C: Tweak expected errors.\n-\t* testsuite/g++.dg/cpp0x/pr31439.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr32114.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr32115.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr32125.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr32126.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr32127.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr32128.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr32253.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr32566.C: New.\n-\t* testsuite/g++.dg/cpp0x/pr31445.C: Tweak expected errors.\n-\t* testsuite/g++.dg/cpp0x/pr31438.C: Ditto.\n-\t* testsuite/g++.dg/cpp0x/variadic81.C: Ditto.\n-\t* testsuite/g++.dg/cpp0x/pr31432.C: Ditto.\n-\t* testsuite/g++.dg/cpp0x/pr31442.C: Ditto.\n+\t* g++.dg/parser/crash36.C: Tweak expected errors.\n+\t* g++.dg/cpp0x/pr31439.C: New.\n+\t* g++.dg/cpp0x/pr32114.C: New.\n+\t* g++.dg/cpp0x/pr32115.C: New.\n+\t* g++.dg/cpp0x/pr32125.C: New.\n+\t* g++.dg/cpp0x/pr32126.C: New.\n+\t* g++.dg/cpp0x/pr32127.C: New.\n+\t* g++.dg/cpp0x/pr32128.C: New.\n+\t* g++.dg/cpp0x/pr32253.C: New.\n+\t* g++.dg/cpp0x/pr32566.C: New.\n+\t* g++.dg/cpp0x/pr31445.C: Tweak expected errors.\n+\t* g++.dg/cpp0x/pr31438.C: Ditto.\n+\t* g++.dg/cpp0x/variadic81.C: Ditto.\n+\t* g++.dg/cpp0x/pr31432.C: Ditto.\n+\t* g++.dg/cpp0x/pr31442.C: Ditto.\n \n 2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -449,72 +452,72 @@\n \n 2007-10-30  Revital Eres  <eres@il.ibm.com>\n \n-\t* testsuite/gcc.dg/vect/pr33866.c: Require vect_long.\n+\t* gcc.dg/vect/pr33866.c: Require vect_long.\n \n 2007-10-30  Revital Eres  <eres@il.ibm.com>\n \n-\t* testsuite/gcc.dg/vect/vect-shift-1.c: Require vect_int.\n-\t* testsuite/gcc.dg/vect/vect-ifcvt-4.c: Likewise.\n+\t* gcc.dg/vect/vect-shift-1.c: Require vect_int.\n+\t* gcc.dg/vect/vect-ifcvt-4.c: Likewise.\n \n 2007-10-29  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/32893\n-\t* testsuite/lib/target-supports.exp\n+\t* lib/target-supports.exp\n \t(check_effective_target_unaligned_stack): new keyword.\n-\t* testsuite/gcc.dg/vect/vect-2.c: Globalize arrays to make the test\n+\t* gcc.dg/vect/vect-2.c: Globalize arrays to make the test\n \tnot sensitive to unaligned_stack.\n-\t* testsuite/gcc.dg/vect/vect-3.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-4.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-5.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-6.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-7.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-13.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-17.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-18.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-19.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-20.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-21.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-22.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-27.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-29.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-64.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-65.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-66.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-72.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-73.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-86.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-all.c: Likewise.\n-\t* testsuite/gcc.dg/vect/slp-25.c: Likewise.\n-\t* testsuite/gcc.dg/vect/wrapv-vect-7.c: Likewise.\n-\t* testsuite/gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: Likewise.\n-\t* testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c: Likewise.\n-\n-\t* testsuite/gcc.dg/vect/vect-31.c: Removed alignment checks.        \n-\t* testsuite/gcc.dg/vect/vect-34.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-36.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-64.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-65.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-66.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-68.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-76.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-77.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-78.c: Likewise.\n-\n-\t* testsuite/gcc.dg/vect/no-section-anchors-vect-31.c: New test, Like the\n+\t* gcc.dg/vect/vect-3.c: Likewise.\n+\t* gcc.dg/vect/vect-4.c: Likewise.\n+\t* gcc.dg/vect/vect-5.c: Likewise.\n+\t* gcc.dg/vect/vect-6.c: Likewise.\n+\t* gcc.dg/vect/vect-7.c: Likewise.\n+\t* gcc.dg/vect/vect-13.c: Likewise.\n+\t* gcc.dg/vect/vect-17.c: Likewise.\n+\t* gcc.dg/vect/vect-18.c: Likewise.\n+\t* gcc.dg/vect/vect-19.c: Likewise.\n+\t* gcc.dg/vect/vect-20.c: Likewise.\n+\t* gcc.dg/vect/vect-21.c: Likewise.\n+\t* gcc.dg/vect/vect-22.c: Likewise.\n+\t* gcc.dg/vect/vect-27.c: Likewise.\n+\t* gcc.dg/vect/vect-29.c: Likewise.\n+\t* gcc.dg/vect/vect-64.c: Likewise.\n+\t* gcc.dg/vect/vect-65.c: Likewise.\n+\t* gcc.dg/vect/vect-66.c: Likewise.\n+\t* gcc.dg/vect/vect-72.c: Likewise.\n+\t* gcc.dg/vect/vect-73.c: Likewise.\n+\t* gcc.dg/vect/vect-86.c: Likewise.\n+\t* gcc.dg/vect/vect-all.c: Likewise.\n+\t* gcc.dg/vect/slp-25.c: Likewise.\n+\t* gcc.dg/vect/wrapv-vect-7.c: Likewise.\n+\t* gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: Likewise.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c: Likewise.\n+\n+\t* gcc.dg/vect/vect-31.c: Removed alignment checks.        \n+\t* gcc.dg/vect/vect-34.c: Likewise.\n+\t* gcc.dg/vect/vect-36.c: Likewise.\n+\t* gcc.dg/vect/vect-64.c: Likewise.\n+\t* gcc.dg/vect/vect-65.c: Likewise.\n+\t* gcc.dg/vect/vect-66.c: Likewise.\n+\t* gcc.dg/vect/vect-68.c: Likewise.\n+\t* gcc.dg/vect/vect-76.c: Likewise.\n+\t* gcc.dg/vect/vect-77.c: Likewise.\n+\t* gcc.dg/vect/vect-78.c: Likewise.\n+\n+\t* gcc.dg/vect/no-section-anchors-vect-31.c: New test, Like the\n \toriginal testcase (without no-section-anchors prefix) but with global arrays.       \n-\t* testsuite/gcc.dg/vect/no-section-anchors-vect-34.c: Likewise.\n-\t* testsuite/gcc.dg/vect/no-section-anchors-vect-36.c: Likewsie.\n-\t* testsuite/gcc.dg/vect/no-section-anchors-vect-64.c: Likewise.\n-\t* testsuite/gcc.dg/vect/no-section-anchors-vect-65.c: Likewise.\n-\t* testsuite/gcc.dg/vect/no-section-anchors-vect-66.c: Likewise.\n-\t* testsuite/gcc.dg/vect/no-section-anchors-vect-68.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-77-global.c: Likewise.\n-\t* testsuite/gcc.dg/vect/vect-78-global.c: Likewise.\n-\n-\t* testsuite/gcc.dg/vect/vect-77-alignchecks.c: New test. Like the\n+\t* gcc.dg/vect/no-section-anchors-vect-34.c: Likewise.\n+\t* gcc.dg/vect/no-section-anchors-vect-36.c: Likewsie.\n+\t* gcc.dg/vect/no-section-anchors-vect-64.c: Likewise.\n+\t* gcc.dg/vect/no-section-anchors-vect-65.c: Likewise.\n+\t* gcc.dg/vect/no-section-anchors-vect-66.c: Likewise.\n+\t* gcc.dg/vect/no-section-anchors-vect-68.c: Likewise.\n+\t* gcc.dg/vect/vect-77-global.c: Likewise.\n+\t* gcc.dg/vect/vect-78-global.c: Likewise.\n+\n+\t* gcc.dg/vect/vect-77-alignchecks.c: New test. Like the\n \toriginal testcase (without no-section-anchors prefix) but fix alignment checks \n \tto also consider unaligned_stack targets.\n-\t* testsuite/gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n+\t* gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n \n 2007-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -549,30 +552,30 @@\n \n \tAutomatic parallelization reduction tests.\n \n-\t* testsuite/gcc.dg/tree-ssa/reduc-1.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-1char.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-1short.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-2.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-2char.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-2short.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-3.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-6.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-7.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-8.c: New test.\n-\t* testsuite/gcc.dg/tree-ssa/reduc-9.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-1.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-1char.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-1short.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-2.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-2char.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-2short.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-3.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-6.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-7.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-8.c: New test.\n+\t* gcc.dg/tree-ssa/reduc-9.c: New test.\n \n 2007-10-29  Razya Ladelsky  <razya@il.ibm.com>\n \t    Zdenek Dvorak  <ook@ucw.cz>\n \n \tOMP_ATOMIC Changes, testsuite changes.\n \n-\t* testsuite/gcc.dg/gomp/atomic-3.c: Search for string on ompexp dump\n+\t* gcc.dg/gomp/atomic-3.c: Search for string on ompexp dump\n \tinstead of gimple dump.\n-\t* testsuite/gcc.dg/gomp/atomic-9.c: Same.\n-\t* testsuite/gcc.dg/gomp/atomic-10.c: Same.\n-\t* testsuite/g++.dg/gomp/atomic-3.C: Same.\n-\t* testsuite/g++.dg/gomp/atomic-9.C: Same.\n-\t* testsuite/g++.dg/gomp/atomic-10.C: Same.\n+\t* gcc.dg/gomp/atomic-9.c: Same.\n+\t* gcc.dg/gomp/atomic-10.c: Same.\n+\t* g++.dg/gomp/atomic-3.C: Same.\n+\t* g++.dg/gomp/atomic-9.C: Same.\n+\t* g++.dg/gomp/atomic-10.C: Same.\n \n 2007-10-29  Paul Thomas  <pault@gcc.gnu.org>\n \n@@ -747,7 +750,7 @@\n 2007-10-23  Tehila Meyzels  <tehila@il.ibm.com>\n \t    Revital Eres  <eres@il.ibm.com>\t \n \n-\t* testsuite/gcc.dg/sms-2.c: New testcase.\n+\t* gcc.dg/sms-2.c: New testcase.\n \n 2007-10-22  David S. Miller  <davem@davemloft.net>\n \n@@ -1604,7 +1607,7 @@\n \n 2007-09-25  Revital Eres  <eres@il.ibm.com>\n \n-\t* testsuite/gcc.target/powerpc/ppc-paired.c (paired_sel): Add.\n+\t* gcc.target/powerpc/ppc-paired.c (paired_sel): Add.\n \n 2007-09-25  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -3216,7 +3219,7 @@\n \t* gcc.target/mips/gcc-have-sync-compare-and-swap-1.c: New test.\n \t* gcc.target/mips/gcc-have-sync-compare-and-swap-2.c: Ditto.\n \t* gcc.target/mips/atomic-memory-1.c: Ditto.\n-\t* testsuite/gcc.target/mips/atomic-memory-2.c: Ditto.\n+\t* gcc.target/mips/atomic-memory-2.c: Ditto.\n \n 2007-09-03  Jesper Nilsson  <jesper.nilsson@axis.com>\n \n@@ -3247,8 +3250,8 @@\n 2007-08-31 Douglas Gregor <doug.gregor@gmail.com>\n \n \tPR c++/32597\n-\t* gcc/testsuite/g++.dg/cpp0x/variadic-new2.C: New.\n-\t* gcc/testsuite/g++.dg/cpp0x/variadic-new.C: New.\n+\t* g++.dg/cpp0x/variadic-new2.C: New.\n+\t* g++.dg/cpp0x/variadic-new.C: New.\n \n 2007-08-31  Tobias Burnus  <burnus@net-b.de>\n \n@@ -3665,7 +3668,7 @@\n 2007-08-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/32328\n-\t* testsuite/gcc.dg/pr32328.c: New testcase.\n+\t* gcc.dg/pr32328.c: New testcase.\n \n 2007-08-23  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n@@ -3914,13 +3917,13 @@\n \n 2007-08-19  Dorit Nuzman  <dorit@il.ibm.com>\n \n-\t* testsuite/gcc.dg/vect/pr20122.c: Fix test (now vectorized, with\n+\t* gcc.dg/vect/pr20122.c: Fix test (now vectorized, with\n \tversioning for aliasing).\n-\t* testsuite/gcc.dg/vect/vect-35.c: Likewise.\n+\t* gcc.dg/vect/vect-35.c: Likewise.\n \n-\t* testsuite/gcc.dg/vect/vect-iv-6.c: Fix test for vect_no_align\n+\t* gcc.dg/vect/vect-iv-6.c: Fix test for vect_no_align\n \ttargets.\n-\t* testsuite/gcc.dg/vect/vect-multitypes-11.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-11.c: Likewise.\n \n 2007-08-18  Tom Tromey  <tromey@redhat.com>\n \n@@ -4198,7 +4201,7 @@\n 2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31629\n-\t* gcc/testsuite/gfortran.dg/module_private_1.f90: New test.\n+\t* gfortran.dg/module_private_1.f90: New test.\n \n 2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n@@ -6331,7 +6334,7 @@\n \n 2007-06-21  Sebastian Pop  <sebpop@gmail.com>\n \n-\t* gcc/testsuite/gcc.dg/tree-ssa/pr19590.c: New.\n+\t* gcc.dg/tree-ssa/pr19590.c: New.\n \n 2007-06-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n@@ -6376,7 +6379,7 @@\n 2007-06-20  Adam Nemet  <anemet@caviumnetworks.com>\n \n \tPR tree-optimization/25737\n-\t* testsuite/gcc.dg/tree-ssa/alias-14.c: New test.\n+\t* gcc.dg/tree-ssa/alias-14.c: New test.\n \n 2007-06-20  Hui-May Chang  <hm.chang@apple.com>\n "}, {"sha": "8d2a5d4bb28d2286ca212a062484d68939aa8d8e", "filename": "gcc/testsuite/g++.dg/opt/inline14.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline14.C?ref=416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "patch": "@@ -0,0 +1,51 @@\n+// PR middle-end/34018\n+// { dg-do compile }\n+// { dg-options \"-O1\" }\n+\n+template <typename E, unsigned long N>\n+struct A\n+{\n+  typedef E F;\n+  E elems[N];\n+  A () {}\n+  E *begin () { return elems; }\n+  const E *begin () const { return elems; }\n+\n+  explicit A (F const &v0, F const &v1, F const &v2)\n+  {\n+    elems[0] = v0;\n+    elems[1] = v1;\n+    elems[2] = v2;\n+  }\n+};\n+\n+template <typename E1, typename E2, typename E3>\n+inline void\n+bar (const E1 *a1, E2 const &a2, E3 *a3, unsigned long const &sz)\n+{\n+  E3 *r = a3 + sz;\n+  for (;a3 != r; a1++, a3++)\n+    *a3 = *a1 - a2;\n+}\n+\n+template<typename E, unsigned long N>\n+inline A<E, N>\n+operator- (A<E, N> const& a1, E const& a2)\n+{\n+  typedef A<E, N> G;\n+  G a3;\n+  bar (a1.begin (), a2, a3.begin (), N);\n+  return a3;\n+}\n+\n+struct B\n+{\n+  B (A<unsigned long, 3> const &m) : n (m - static_cast<unsigned long>(1)) {}\n+  A<unsigned long, 3> n;\n+};\n+\n+void\n+foo ()\n+{\n+  B t (A<unsigned long, 3> (0,0,0));\n+}"}, {"sha": "e0d4093a38c9526f7b1bd9a2668f052385452dd8", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "patch": "@@ -748,13 +748,18 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n \t and friends are up-to-date.  */\n       else if (TREE_CODE (*tp) == ADDR_EXPR)\n \t{\n+\t  int invariant = TREE_INVARIANT (*tp);\n \t  walk_tree (&TREE_OPERAND (*tp, 0), copy_body_r, id, NULL);\n \t  /* Handle the case where we substituted an INDIRECT_REF\n \t     into the operand of the ADDR_EXPR.  */\n \t  if (TREE_CODE (TREE_OPERAND (*tp, 0)) == INDIRECT_REF)\n \t    *tp = TREE_OPERAND (TREE_OPERAND (*tp, 0), 0);\n \t  else\n \t    recompute_tree_invariant_for_addr_expr (*tp);\n+\t  /* If this used to be invariant, but is not any longer,\n+\t     then regimplification is probably needed.  */\n+\t  if (invariant && !TREE_INVARIANT (*tp))\n+\t    id->regimplify = true;\n \t  *walk_subtrees = 0;\n \t}\n     }\n@@ -792,6 +797,7 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale, int count_scal\n       tree stmt = bsi_stmt (bsi);\n       tree orig_stmt = stmt;\n \n+      id->regimplify = false;\n       walk_tree (&stmt, copy_body_r, id, NULL);\n \n       /* RETURN_EXPR might be removed,\n@@ -804,9 +810,10 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale, int count_scal\n \n \t  /* With return slot optimization we can end up with\n \t     non-gimple (foo *)&this->m, fix that here.  */\n-\t  if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n-\t      && TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == NOP_EXPR\n-\t      && !is_gimple_val (TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt, 1), 0)))\n+\t  if ((TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n+\t       && TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == NOP_EXPR\n+\t       && !is_gimple_val (TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt, 1), 0)))\n+\t      || id->regimplify)\n \t    gimplify_stmt (&stmt);\n \n           bsi_insert_after (&copy_bsi, stmt, BSI_NEW_STMT);"}, {"sha": "33eb908b7cde9b410bc61be683e08fe46af7674b", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416c991fdd5568197d0f545c0e0a2ad3fd577dc6/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=416c991fdd5568197d0f545c0e0a2ad3fd577dc6", "patch": "@@ -92,6 +92,9 @@ typedef struct copy_body_data\n      duplicating BLOCK nodes.  */\n   bool transform_lang_insert_block;\n \n+  /* True if this statement will need to be regimplified.  */\n+  bool regimplify;\n+\n   /* Statements that might be possibly folded.  */\n   struct pointer_set_t *statements_to_fold;\n } copy_body_data;"}]}