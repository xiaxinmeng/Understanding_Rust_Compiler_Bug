{"sha": "fc1fcfa0b666f04e7891b5665f418136f2731fad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMxZmNmYTBiNjY2ZjA0ZTc4OTFiNTY2NWY0MTgxMzZmMjczMWZhZA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2014-12-19T04:49:16Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2014-12-19T04:49:16Z"}, "message": "* [SH] Miscellaneous changes for LRA.\n\nFrom-SVN: r218889", "tree": {"sha": "770002d38ea52f933a8f6090b20a8e0ee731134f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/770002d38ea52f933a8f6090b20a8e0ee731134f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc1fcfa0b666f04e7891b5665f418136f2731fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc1fcfa0b666f04e7891b5665f418136f2731fad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc1fcfa0b666f04e7891b5665f418136f2731fad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc1fcfa0b666f04e7891b5665f418136f2731fad/comments", "author": null, "committer": null, "parents": [{"sha": "106a52b7bff18807dedbfc54e48db07d375e7eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106a52b7bff18807dedbfc54e48db07d375e7eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106a52b7bff18807dedbfc54e48db07d375e7eac"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "2753fae33b20ca3a924593d7b0a45a107050b77f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc1fcfa0b666f04e7891b5665f418136f2731fad", "patch": "@@ -1,3 +1,17 @@\n+2014-12-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/predicates.md (general_movsrc_operand): Allow only\n+\tvalid plus address expressions.\n+\t(general_movdst_operand): Likewise.\n+\t(t_reg_operand): Allow (zero_extend (reg t)).\n+\t* config/sh/sh-protos.h (sh_hard_regno_caller_save_mode): Declare.\n+\t* config/sh/sh.c (sh_hard_regno_caller_save_mode): New function.\n+\t(sh_secondary_reload): Return NO_REGS instead of FPUL_REGS in one\n+\tcase.\n+\t* config/sh/sh.h (HARD_REGNO_CALLER_SAVE_MODE): Define.\n+\t* config/sh/sh.md (untyped_call): Clobber function value\n+\tregisters before call.\n+\n 2014-12-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (sh_lra_p): New function."}, {"sha": "152056ae360e604531d6079bd18879405bcbf6db", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=fc1fcfa0b666f04e7891b5665f418136f2731fad", "patch": "@@ -510,7 +510,25 @@\n \t  && GET_CODE (x) == PLUS && REG_P (XEXP (x, 0)) && REG_P (XEXP (x, 1)))\n \treturn false;\n \n-      if ((mode == QImode || mode == HImode)\n+      if (GET_CODE (x) == PLUS)\n+\t{\n+\t  rtx y = XEXP (x, 0);\n+\n+\t  if (! REG_P (y)\n+\t      && ! (GET_CODE (y) == SUBREG && REG_P (SUBREG_REG (y))))\n+\t    return false;\n+\t  y = XEXP (x, 1);\n+\t  if (! REG_P (y)\n+\t      && ! (GET_CODE (y) == SUBREG && REG_P (SUBREG_REG (y)))\n+\t      && ! CONST_INT_P (y))\n+\t    return false;\n+\t}\n+\n+      /* LRA will try to satisfy the constraints for the memory displacements\n+\t and thus we must not reject invalid displacements in the predicate,\n+\t or else LRA will bail out.\n+\t FIXME: maybe remove this check completely?  */\n+      if (!lra_in_progress && (mode == QImode || mode == HImode)\n \t  && GET_CODE (x) == PLUS\n \t  && REG_P (XEXP (x, 0))\n \t  && CONST_INT_P (XEXP (x, 1)))\n@@ -595,7 +613,25 @@\n \t  && GET_CODE (x) == PLUS && REG_P (XEXP (x, 0)) && REG_P (XEXP (x, 1)))\n \treturn false;\n \n-      if ((mode == QImode || mode == HImode)\n+      if (GET_CODE (x) == PLUS)\n+\t{\n+\t  rtx y = XEXP (x, 0);\n+\n+\t  if (! REG_P (y)\n+\t      && ! (GET_CODE (y) == SUBREG && REG_P (SUBREG_REG (y))))\n+\t    return false;\n+\t  y = XEXP (x, 1);\n+\t  if (! REG_P (y)\n+\t      && ! (GET_CODE (y) == SUBREG && REG_P (SUBREG_REG (y)))\n+\t      && ! CONST_INT_P (y))\n+\t    return false;\n+\t}\n+\n+      /* LRA will try to satisfy the constraints for the memory displacements\n+\t and thus we must not reject invalid displacements in the predicate,\n+\t or else LRA will bail out.\n+\t FIXME: maybe remove this check completely?  */\n+      if (!lra_in_progress && (mode == QImode || mode == HImode)\n \t  && GET_CODE (x) == PLUS\n \t  && REG_P (XEXP (x, 0))\n \t  && CONST_INT_P (XEXP (x, 1)))\n@@ -1117,6 +1153,8 @@\n \n       case ZERO_EXTEND:\n       case SIGN_EXTEND:\n+        if (REG_P (XEXP (op, 0)) && REGNO (XEXP (op, 0)) == T_REG)\n+\t  return true;\n \treturn GET_CODE (XEXP (op, 0)) == SUBREG\n \t       && REG_P (SUBREG_REG (XEXP (op, 0)))\n \t       && REGNO (SUBREG_REG (XEXP (op, 0))) == T_REG;"}, {"sha": "7697c4cbe0be0b210ed2260ff5d34b532f0c924a", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=fc1fcfa0b666f04e7891b5665f418136f2731fad", "patch": "@@ -262,5 +262,7 @@ extern int sh2a_get_function_vector_number (rtx);\n extern bool sh2a_is_function_vector_call (rtx);\n extern void sh_fix_range (const char *);\n extern bool sh_hard_regno_mode_ok (unsigned int, machine_mode);\n+extern machine_mode sh_hard_regno_caller_save_mode (unsigned int, unsigned int,\n+\t\t\t\t\t\t    machine_mode);\n extern bool sh_can_use_simple_return_p (void);\n #endif /* ! GCC_SH_PROTOS_H */"}, {"sha": "b01efb09d3fd7b097d37af4110aac7821c189c13", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=fc1fcfa0b666f04e7891b5665f418136f2731fad", "patch": "@@ -12186,6 +12186,26 @@ sh_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n   return true;\n }\n \n+/* Specify the modes required to caller save a given hard regno.\n+   choose_hard_reg_mode chooses mode based on HARD_REGNO_MODE_OK\n+   and returns ?Imode for float regs when sh_hard_regno_mode_ok\n+   permits integer modes on them.  That makes LRA's split process\n+   unhappy.  See PR55212.\n+ */\n+machine_mode\n+sh_hard_regno_caller_save_mode (unsigned int regno, unsigned int nregs,\n+\t\t\t\tmachine_mode mode)\n+{\n+  if (FP_REGISTER_P (regno)\n+      && (mode == SFmode\n+\t  || mode == SCmode\n+\t  || ((mode == DFmode || mode == DCmode)\n+\t      && ((regno - FIRST_FP_REG) & 1) == 0)))\n+    return mode;\n+\n+  return choose_hard_reg_mode (regno, nregs, false);\n+}\n+\n /* Return the class of registers for which a mode change from FROM to TO\n    is invalid.  */\n bool\n@@ -13183,7 +13203,7 @@ sh_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n     {\n       if (rclass == FPUL_REGS)\n \treturn GENERAL_REGS;\n-      return FPUL_REGS;\n+      return NO_REGS;  // LRA wants NO_REGS here, it used to be FPUL_REGS;\n     }\n   if ((rclass == TARGET_REGS\n        || (TARGET_SHMEDIA && rclass == SIBCALL_REGS))"}, {"sha": "ae1e39b51351ed6737d2e13ef1ec60fb3686c081", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=fc1fcfa0b666f04e7891b5665f418136f2731fad", "patch": "@@ -905,6 +905,10 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n \t\t\t      && (GET_MODE_SIZE (MODE2) <= 4)) \\\n \t\t\t  : ((MODE1) != SFmode && (MODE2) != SFmode))))\n \n+/* Specify the modes required to caller save a given hard regno.  */\n+#define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE)\t\\\n+  sh_hard_regno_caller_save_mode ((REGNO), (NREGS), (MODE))\n+\n /* A C expression that is nonzero if hard register NEW_REG can be\n    considered for use as a rename register for OLD_REG register */\n #define HARD_REGNO_RENAME_OK(OLD_REG, NEW_REG) \\"}, {"sha": "536a49896657bb3aee9ff931067d86506f03eadf", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc1fcfa0b666f04e7891b5665f418136f2731fad/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=fc1fcfa0b666f04e7891b5665f418136f2731fad", "patch": "@@ -10055,6 +10055,18 @@ label:\n \t      (match_operand 2 \"\" \"\")])]\n   \"(TARGET_SH2E || TARGET_SH2A) || TARGET_SHMEDIA\"\n {\n+  if (! TARGET_SHMEDIA)\n+    {\n+      /* RA does not know that the call sets the function value registers.\n+\t We avoid problems by claiming that those registers are clobbered\n+\t at this point.  */\n+      for (int i = 0; i < XVECLEN (operands[2], 0); i++)\n+\t{\n+\t  rtx set = XVECEXP (operands[2], 0, i);\n+\t  emit_clobber (SET_SRC (set));\n+\t}\n+    }\n+\n   emit_call_insn (gen_call (operands[0], const0_rtx, const0_rtx));\n \n   for (int i = 0; i < XVECLEN (operands[2], 0); i++)"}]}