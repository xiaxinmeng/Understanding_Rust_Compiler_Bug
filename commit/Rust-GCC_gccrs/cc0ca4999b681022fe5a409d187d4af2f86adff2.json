{"sha": "cc0ca4999b681022fe5a409d187d4af2f86adff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MwY2E0OTk5YjY4MTAyMmZlNWE0MDlkMTg3ZDRhZjJmODZhZGZmMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-12-16T12:21:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-16T12:21:45Z"}, "message": "opt61.adb: New test.\n\n\t* gnat.dg/opt61.adb: New test.\n\t* gnat.dg/opt61_pkg.ad[sb]: New helper.\n\nFrom-SVN: r243740", "tree": {"sha": "d461f98c54f706ac7a34637df9e110e95dce772a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d461f98c54f706ac7a34637df9e110e95dce772a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc0ca4999b681022fe5a409d187d4af2f86adff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0ca4999b681022fe5a409d187d4af2f86adff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0ca4999b681022fe5a409d187d4af2f86adff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0ca4999b681022fe5a409d187d4af2f86adff2/comments", "author": null, "committer": null, "parents": [{"sha": "62549523462ea288aebd4e476bb33169bbe0a293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62549523462ea288aebd4e476bb33169bbe0a293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62549523462ea288aebd4e476bb33169bbe0a293"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "afd90ee71d1eb1926b8d4de83d242aa18e5319b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc0ca4999b681022fe5a409d187d4af2f86adff2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc0ca4999b681022fe5a409d187d4af2f86adff2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc0ca4999b681022fe5a409d187d4af2f86adff2", "patch": "@@ -1,3 +1,8 @@\n+2016-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt61.adb: New test.\n+\t* gnat.dg/opt61_pkg.ad[sb]: New helper.\n+\n 2016-12-16  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/71694"}, {"sha": "09d5cdc385ce5b4482feed2005f0f9218409b812", "filename": "gcc/testsuite/gnat.dg/opt61.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc0ca4999b681022fe5a409d187d4af2f86adff2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc0ca4999b681022fe5a409d187d4af2f86adff2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61.adb?ref=cc0ca4999b681022fe5a409d187d4af2f86adff2", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Interfaces;\n+with Opt61_Pkg; use Opt61_Pkg;\n+\n+procedure Opt61 is\n+\n+   use type Interfaces.Integer_64;\n+\n+   X : constant Int64 := 3125;\n+   Y : constant Int64 := 5;\n+   Z : constant Int64 := 10;\n+   Q, R: Int64;\n+\n+begin\n+   Double_Divide (X, Y, Z, Q, R, False);\n+   if R /= 25 then\n+     raise Program_Error;\n+   end if;\n+end;"}, {"sha": "c35f703ffde5bb381fb7f00bbcaf504fd44479a7", "filename": "gcc/testsuite/gnat.dg/opt61_pkg.adb", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc0ca4999b681022fe5a409d187d4af2f86adff2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc0ca4999b681022fe5a409d187d4af2f86adff2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61_pkg.adb?ref=cc0ca4999b681022fe5a409d187d4af2f86adff2", "patch": "@@ -0,0 +1,132 @@\n+with Interfaces; use Interfaces;\n+\n+with Ada.Unchecked_Conversion;\n+\n+package body Opt61_Pkg is\n+\n+   pragma Suppress (Overflow_Check);\n+   pragma Suppress (Range_Check);\n+\n+   subtype Uns64 is Unsigned_64;\n+\n+   function To_Int is new Ada.Unchecked_Conversion (Uns64, Int64);\n+\n+   subtype Uns32 is Unsigned_32;\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   function \"+\" (A : Uns64; B : Uns32) return Uns64 is (A + Uns64 (B));\n+   --  Length doubling additions\n+\n+   function \"*\" (A, B : Uns32) return Uns64 is (Uns64 (A) * Uns64 (B));\n+   --  Length doubling multiplication\n+\n+   function \"&\" (Hi, Lo : Uns32) return Uns64 is\n+     (Shift_Left (Uns64 (Hi), 32) or Uns64 (Lo));\n+   --  Concatenate hi, lo values to form 64-bit result\n+\n+   function \"abs\" (X : Int64) return Uns64 is\n+     (if X = Int64'First then 2**63 else Uns64 (Int64'(abs X)));\n+   --  Convert absolute value of X to unsigned. Note that we can't just use\n+   --  the expression of the Else, because it overflows for X = Int64'First.\n+\n+   function Lo (A : Uns64) return Uns32 is (Uns32 (A and 16#FFFF_FFFF#));\n+   --  Low order half of 64-bit value\n+\n+   function Hi (A : Uns64) return Uns32 is (Uns32 (Shift_Right (A, 32)));\n+   --  High order half of 64-bit value\n+\n+   -------------------\n+   -- Double_Divide --\n+   -------------------\n+\n+   procedure Double_Divide\n+     (X, Y, Z : Int64;\n+      Q, R    : out Int64;\n+      Round   : Boolean)\n+   is\n+      Xu  : constant Uns64 := abs X;\n+      Yu  : constant Uns64 := abs Y;\n+\n+      Yhi : constant Uns32 := Hi (Yu);\n+      Ylo : constant Uns32 := Lo (Yu);\n+\n+      Zu  : constant Uns64 := abs Z;\n+      Zhi : constant Uns32 := Hi (Zu);\n+      Zlo : constant Uns32 := Lo (Zu);\n+\n+      T1, T2     : Uns64;\n+      Du, Qu, Ru : Uns64;\n+      Den_Pos    : Boolean;\n+\n+   begin\n+      if Yu = 0 or else Zu = 0 then\n+         raise Constraint_Error;\n+      end if;\n+\n+      --  Compute Y * Z. Note that if the result overflows 64 bits unsigned,\n+      --  then the rounded result is clearly zero (since the dividend is at\n+      --  most 2**63 - 1, the extra bit of precision is nice here).\n+\n+      if Yhi /= 0 then\n+         if Zhi /= 0 then\n+            Q := 0;\n+            R := X;\n+            return;\n+         else\n+            T2 := Yhi * Zlo;\n+         end if;\n+\n+      else\n+         T2 := (if Zhi /= 0 then Ylo * Zhi else 0);\n+      end if;\n+\n+      T1 := Ylo * Zlo;\n+      T2 := T2 + Hi (T1);\n+\n+      if Hi (T2) /= 0 then\n+         Q := 0;\n+         R := X;\n+         return;\n+      end if;\n+\n+      Du := Lo (T2) & Lo (T1);\n+\n+      --  Set final signs (RM 4.5.5(27-30))\n+\n+      Den_Pos := (Y < 0) = (Z < 0);\n+\n+      --  Check overflow case of largest negative number divided by 1\n+\n+      if X = Int64'First and then Du = 1 and then not Den_Pos then\n+         raise Constraint_Error;\n+      end if;\n+\n+      --  Perform the actual division\n+\n+      Qu := Xu / Du;\n+      Ru := Xu rem Du;\n+\n+      --  Deal with rounding case\n+\n+      if Round and then Ru > (Du - Uns64'(1)) / Uns64'(2) then\n+         Qu := Qu + Uns64'(1);\n+      end if;\n+\n+      --  Case of dividend (X) sign positive\n+\n+      if X >= 0 then\n+         R := To_Int (Ru);\n+         Q := (if Den_Pos then To_Int (Qu) else -To_Int (Qu));\n+\n+      --  Case of dividend (X) sign negative\n+\n+      else\n+         R := -To_Int (Ru);\n+         Q := (if Den_Pos then -To_Int (Qu) else To_Int (Qu));\n+      end if;\n+   end Double_Divide;\n+\n+end Opt61_Pkg;"}, {"sha": "ffc5634fad91d853aa63e8a65aa766e0791070ea", "filename": "gcc/testsuite/gnat.dg/opt61_pkg.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc0ca4999b681022fe5a409d187d4af2f86adff2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc0ca4999b681022fe5a409d187d4af2f86adff2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt61_pkg.ads?ref=cc0ca4999b681022fe5a409d187d4af2f86adff2", "patch": "@@ -0,0 +1,12 @@\n+with Interfaces;\n+\n+package Opt61_Pkg is\n+\n+   subtype Int64 is Interfaces.Integer_64;\n+\n+   procedure Double_Divide\n+     (X, Y, Z : Int64;\n+      Q, R    : out Int64;\n+      Round   : Boolean);\n+\n+end Opt61_Pkg;"}]}