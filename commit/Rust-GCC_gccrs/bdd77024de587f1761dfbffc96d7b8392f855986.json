{"sha": "bdd77024de587f1761dfbffc96d7b8392f855986", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRkNzcwMjRkZTU4N2YxNzYxZGZiZmZjOTZkN2I4MzkyZjg1NTk4Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-07-03T17:34:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-07-03T17:34:59Z"}, "message": "invoke.texi: Replace -march=24kf with -march=24kf2_1 and -march=24kx with -march=24kf1_1.\n\ngcc/\n2007-07-03  Richard Sandiford  <richard@codesourcery.com>\n\t    David Ung  <davidu@mips.com>\n\n\t* doc/invoke.texi: Replace -march=24kf with -march=24kf2_1 and\n\t-march=24kx with -march=24kf1_1.  Likewise 24ke[fx], 34k[fx]\n\tand 74k[fx].  Document aliases for the new options.\n\t* config/mips/mips.h (PROCESSOR_24KF): Rename to...\n\t(PROCESSOR_24KF2_1): ...this.\n\t(PROCESSOR_24KX): Rename to...\n\t(PROCESSOR_24KF1_1): ...this.\n\t(PROCESSOR_74KF): Rename to...\n\t(PROCESSOR_74KF2_1): ...this.\n\t(PROCESSOR_74KX): Rename to...\n\t(PROCESSOR_74KF1_1): ...this.\n\t(TUNE_74K): Update PROCESSOR_* names.\n\t* config/mips/mips.c (mips_cpu_info): Add 24kf2_1 as a synonym\n\tfor 24kf.  Add 24kf1_1 and 24kfx as synonyms for 24kx.  Likewise\n\tthe 24ke*, 34k* and 74k* processors.  Update PROCESSOR_* names.\n\t(mips_rtx_cost_data): Update processor names in comments.\n\t(mips_issue_rate): Update PROCESSOR_* names.\n\t* config/mips/mips.md (cpu): Rename 24kf to 24kf2_1, 24kx to\n\t24kf1_1, 74kf to 74kf2_1 and 74kx to 74kf1_1.\n\t* config/mips/24k.md: Rename FPU-related r24k_* insn reservations\n\tto r24kf2_1_*.  Rename r24kx_* insn reservations to r24kf1_1_*.\n\tUpdate cpu attribute names.\n\t(r24k_fpu_iss): Rename this reservation to...\n\t(r24kf2_1_fpu_iss): ...this and update all uses.\n\t(r24kx_fpu_iss): Rename this reservation to...\n\t(r24kf1_1_fpu_iss): ...this and update all uses.\n\t* config/mips/74k.md: Rename FPU-related r74kf_* insn reservations\n\tto r74kf2_1_*.  Rename r74kx_* insn reservations to r74kf1_1_*.\n\tUpdate cpu attribute names.\n\nCo-Authored-By: David Ung <davidu@mips.com>\n\nFrom-SVN: r126266", "tree": {"sha": "12e5ea7d383c8e132aebfcee43b712ed039b3df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12e5ea7d383c8e132aebfcee43b712ed039b3df7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdd77024de587f1761dfbffc96d7b8392f855986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd77024de587f1761dfbffc96d7b8392f855986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd77024de587f1761dfbffc96d7b8392f855986", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd77024de587f1761dfbffc96d7b8392f855986/comments", "author": null, "committer": null, "parents": [{"sha": "fbaeb717be672acdb109f85765eedc647628d855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbaeb717be672acdb109f85765eedc647628d855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbaeb717be672acdb109f85765eedc647628d855"}], "stats": {"total": 515, "additions": 285, "deletions": 230}, "files": [{"sha": "c65552cabf9bac0b23488c55c0f5b6deda34682a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdd77024de587f1761dfbffc96d7b8392f855986", "patch": "@@ -1,3 +1,36 @@\n+2007-07-03  Richard Sandiford  <richard@codesourcery.com>\n+\t    David Ung  <davidu@mips.com>\n+\n+\t* doc/invoke.texi: Replace -march=24kf with -march=24kf2_1 and\n+\t-march=24kx with -march=24kf1_1.  Likewise 24ke[fx], 34k[fx]\n+\tand 74k[fx].  Document aliases for the new options.\n+\t* config/mips/mips.h (PROCESSOR_24KF): Rename to...\n+\t(PROCESSOR_24KF2_1): ...this.\n+\t(PROCESSOR_24KX): Rename to...\n+\t(PROCESSOR_24KF1_1): ...this.\n+\t(PROCESSOR_74KF): Rename to...\n+\t(PROCESSOR_74KF2_1): ...this.\n+\t(PROCESSOR_74KX): Rename to...\n+\t(PROCESSOR_74KF1_1): ...this.\n+\t(TUNE_74K): Update PROCESSOR_* names.\n+\t* config/mips/mips.c (mips_cpu_info): Add 24kf2_1 as a synonym\n+\tfor 24kf.  Add 24kf1_1 and 24kfx as synonyms for 24kx.  Likewise\n+\tthe 24ke*, 34k* and 74k* processors.  Update PROCESSOR_* names.\n+\t(mips_rtx_cost_data): Update processor names in comments.\n+\t(mips_issue_rate): Update PROCESSOR_* names.\n+\t* config/mips/mips.md (cpu): Rename 24kf to 24kf2_1, 24kx to\n+\t24kf1_1, 74kf to 74kf2_1 and 74kx to 74kf1_1.\n+\t* config/mips/24k.md: Rename FPU-related r24k_* insn reservations\n+\tto r24kf2_1_*.  Rename r24kx_* insn reservations to r24kf1_1_*.\n+\tUpdate cpu attribute names.\n+\t(r24k_fpu_iss): Rename this reservation to...\n+\t(r24kf2_1_fpu_iss): ...this and update all uses.\n+\t(r24kx_fpu_iss): Rename this reservation to...\n+\t(r24kf1_1_fpu_iss): ...this and update all uses.\n+\t* config/mips/74k.md: Rename FPU-related r74kf_* insn reservations\n+\tto r74kf2_1_*.  Rename r74kx_* insn reservations to r74kf1_1_*.\n+\tUpdate cpu attribute names.\n+\n 2007-07-01  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/m32r/constraints.md: New file."}, {"sha": "21e527d6cdc82ffe80cd076e3fe71abc69c49ac1", "filename": "gcc/config/mips/24k.md", "status": "modified", "additions": 130, "deletions": 130, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2F24k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2F24k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F24k.md?ref=bdd77024de587f1761dfbffc96d7b8392f855986", "patch": "@@ -2,8 +2,8 @@\n ;; Contributed by Chao-ying Fu (fu@mips.com), Nigel Stephens (nigel@mips.com)\n ;;   and David Ung (davidu@mips.com)\n ;;\n-;; The 24K is a single-issue processor with a half-clocked fpu.\n-;; The 24Kx is 24k with 1:1 clocked fpu.\n+;; The 24kf2_1 is a single-issue processor with a half-clocked fpu.\n+;; The 24kf1_1 is 24k with 1:1 clocked fpu.\n ;;\n ;; References:\n ;;   \"MIPS32 24K Processor Core Family Software User's Manual, Rev 3.04.\"\n@@ -42,7 +42,7 @@\n \n ;; 1. Loads: lb, lbu, lh, lhu, ll, lw, lwl, lwr, lwpc, lwxs\n (define_insn_reservation \"r24k_int_load\" 2\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"load\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n@@ -54,75 +54,75 @@\n ;; (movn/movz is not matched, we'll need to split condmov to\n ;;  differentiate between integer/float moves)\n (define_insn_reservation \"r24k_int_arith\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"arith,const,nop,shift,slt\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 3. Links: bgezal, bgezall, bltzal, bltzall, jal, jalr, jalx\n ;; 3a. jr/jalr consumer\n (define_insn_reservation \"r24k_int_jump\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"call,jump\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n ;; 3b. branch consumer\n (define_insn_reservation \"r24k_int_branch\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"branch\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 4. MDU: fully pipelined multiplier\n ;; mult - delivers result to hi/lo in 1 cycle (pipelined)\n (define_insn_reservation \"r24k_int_mult\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"imul\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n ;; madd, msub - delivers result to hi/lo in 1 cycle (pipelined)\n (define_insn_reservation \"r24k_int_madd\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"imadd\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n ;; mul - delivers result to gpr in 5 cycles\n (define_insn_reservation \"r24k_int_mul3\" 5\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"imul3\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)*5\")\n \n ;; mfhi, mflo, mflhxu - deliver result to gpr in 5 cycles\n (define_insn_reservation \"r24k_int_mfhilo\" 5\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"mfhilo\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n ;; mthi, mtlo, mtlhx - deliver result to hi/lo, thence madd, handled as bypass\n (define_insn_reservation \"r24k_int_mthilo\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"mthilo\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n ;; div - default to 36 cycles for 32bit operands.  Faster for 24bit, 16bit and\n ;; 8bit, but is tricky to identify.\n (define_insn_reservation \"r24k_int_div\" 36\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"idiv\"))\n   \"r24k_iss+(r24k_mul3a+r24k_mul3b+r24k_mul3c)*36\")\n \n \n ;; 5. Cop: cfc1, di, ei, mfc0, mtc0\n ;; (Disabled until we add proper cop0 support)\n ;;(define_insn_reservation \"r24k_int_cop\" 3\n-;;  (and (eq_attr \"cpu\" \"24k,24kx\")\n+;;  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n ;;       (eq_attr \"type\" \"cop0\"))\n ;;  \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 6. Store\n (define_insn_reservation \"r24k_int_store\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (and (eq_attr \"type\" \"store\")\n \t    (eq_attr \"mode\" \"!unknown\")))\n   \"r24k_iss+r24k_ixu_arith\")\n@@ -132,15 +132,15 @@\n ;;     against store_data_bypass_p, which would then fail because cprestore\n ;;     does not have a normal SET pattern.\n (define_insn_reservation \"r24k_unknown_store\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (and (eq_attr \"type\" \"store\")\n \t    (eq_attr \"mode\" \"unknown\")))\n   \"r24k_iss+r24k_ixu_arith\")\n \n \n ;; 7. Multiple instructions\n (define_insn_reservation \"r24k_int_multi\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"multi\"))\n   \"r24k_iss+r24k_ixu_arith+r24k_fpu_arith+(r24k_mul3a+r24k_mul3b+r24k_mul3c)\")\n \n@@ -149,14 +149,14 @@\n ;;    rtls. They do not really affect scheduling latency, (blockage affects\n ;;    scheduling via log links, but not used here).\n (define_insn_reservation \"r24k_int_unknown\" 0\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"unknown\"))\n   \"r24k_iss\")\n \n \n ;; 9. Prefetch\n (define_insn_reservation \"r24k_int_prefetch\" 1\n-  (and (eq_attr \"cpu\" \"24kc,24kf,24kx\")\n+  (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n        (eq_attr \"type\" \"prefetch,prefetchx\"))\n   \"r24k_iss+r24k_ixu_arith\")\n \n@@ -223,233 +223,233 @@\n ;; These timings are therefore twice the values in the 24K manual,\n ;; which are quoted in fpu clocks.\n ;;\n-;; The 24kx is a 24k configured with 1:1 cpu and fpu, so use\n+;; The 24kf1_1 is a 24k configured with 1:1 cpu and fpu, so use\n ;; the unscaled timings\n \n-(define_reservation \"r24k_fpu_iss\"\t\"r24k_iss+(r24k_fpu_arith*2)\")\n+(define_reservation \"r24kf2_1_fpu_iss\"\t\"r24k_iss+(r24k_fpu_arith*2)\")\n \n ;; fadd, fabs, fneg\n-(define_insn_reservation \"r24k_fadd\" 8\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fadd\" 8\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (eq_attr \"type\" \"fadd,fabs,fneg\"))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; fmove, fcmove\n-(define_insn_reservation \"r24k_fmove\" 8\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fmove\" 8\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (eq_attr \"type\" \"fmove,condmove\"))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; fload\n-(define_insn_reservation \"r24k_fload\" 6\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fload\" 6\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (eq_attr \"type\" \"fpload,fpidxload\"))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; fstore\n-(define_insn_reservation \"r24k_fstore\" 2\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fstore\" 2\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (eq_attr \"type\" \"fpstore\"))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; fmul, fmadd\n-(define_insn_reservation \"r24k_fmul_sf\" 8\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fmul_sf\" 8\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"SF\")))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n-(define_insn_reservation \"r24k_fmul_df\" 10\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fmul_df\" 10\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"DF\")))\n-  \"r24k_fpu_iss,(r24k_fpu_arith*2)\")\n+  \"r24kf2_1_fpu_iss,(r24k_fpu_arith*2)\")\n \n \n ;; fdiv, fsqrt, frsqrt\n-(define_insn_reservation \"r24k_fdiv_sf\" 34\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fdiv_sf\" 34\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt,frsqrt\")\n \t    (eq_attr \"mode\" \"SF\")))\n-  \"r24k_fpu_iss,(r24k_fpu_arith*26)\")\n+  \"r24kf2_1_fpu_iss,(r24k_fpu_arith*26)\")\n \n-(define_insn_reservation \"r24k_fdiv_df\" 64\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fdiv_df\" 64\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n-  \"r24k_fpu_iss,(r24k_fpu_arith*56)\")\n+  \"r24kf2_1_fpu_iss,(r24k_fpu_arith*56)\")\n \n ;; frsqrt\n-(define_insn_reservation \"r24k_frsqrt_df\" 70\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_frsqrt_df\" 70\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n-  \"r24k_fpu_iss,(r24k_fpu_arith*60)\")\n+  \"r24kf2_1_fpu_iss,(r24k_fpu_arith*60)\")\n \n ;; fcmp\n-(define_insn_reservation \"r24k_fcmp\" 4\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fcmp\" 4\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (eq_attr \"type\" \"fcmp\"))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; fcmp -> movf.fmt & movt.fmt bypass (dependency must be on the condition)\n-(define_bypass 2 \"r24k_fcmp\" \"r24k_fmove\")\n+(define_bypass 2 \"r24kf2_1_fcmp\" \"r24kf2_1_fmove\")\n \n ;; fcvt (cvt.d.s, cvt.[sd].[wl])\n-(define_insn_reservation \"r24k_fcvt_i2f_s2d\" 8\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fcvt_i2f_s2d\" 8\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"I2S,I2D,S2D\")))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; fcvt (cvt.s.d)\n-(define_insn_reservation \"r24k_fcvt_s2d\" 12\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fcvt_s2d\" 12\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"D2S\")))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; fcvt (cvt.[wl].[sd], etc)\n-(define_insn_reservation \"r24k_fcvt_f2i\" 10\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fcvt_f2i\" 10\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"S2I,D2I\")))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; fxfer (mfc1, mfhc1, mtc1, mthc1)\n-(define_insn_reservation \"r24k_fxfer\" 4\n-  (and (eq_attr \"cpu\" \"24kf\")\n+(define_insn_reservation \"r24kf2_1_fxfer\" 4\n+  (and (eq_attr \"cpu\" \"24kf2_1\")\n        (eq_attr \"type\" \"mfc,mtc\"))\n-  \"r24k_fpu_iss\")\n+  \"r24kf2_1_fpu_iss\")\n \n ;; --------------------------------------------------------------\n ;; Bypass to Consumer\n ;; --------------------------------------------------------------\n-;; r24k_fcvt_f2i->l/s base : 11 cycles\n-;; r24k_fcvt_f2i->prefetch : 11 cycles\n-(define_bypass 11 \"r24k_fcvt_f2i\" \"r24k_int_load\")\n-(define_bypass 11 \"r24k_fcvt_f2i\" \"r24k_int_store\" \"!store_data_bypass_p\")\n-(define_bypass 11 \"r24k_fcvt_f2i\" \"r24k_int_prefetch\")\n-\n-;; r24k_fxfer->l/s base : 5 cycles\n-;; r24k_fxfer->prefetch : 5 cycles\n-(define_bypass 5 \"r24k_fxfer\" \"r24k_int_load\")\n-(define_bypass 5 \"r24k_fxfer\" \"r24k_int_store\" \"!store_data_bypass_p\")\n-(define_bypass 5 \"r24k_fxfer\" \"r24k_int_prefetch\")\n+;; r24kf2_1_fcvt_f2i->l/s base : 11 cycles\n+;; r24kf2_1_fcvt_f2i->prefetch : 11 cycles\n+(define_bypass 11 \"r24kf2_1_fcvt_f2i\" \"r24k_int_load\")\n+(define_bypass 11 \"r24kf2_1_fcvt_f2i\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 11 \"r24kf2_1_fcvt_f2i\" \"r24k_int_prefetch\")\n+\n+;; r24kf2_1_fxfer->l/s base : 5 cycles\n+;; r24kf2_1_fxfer->prefetch : 5 cycles\n+(define_bypass 5 \"r24kf2_1_fxfer\" \"r24k_int_load\")\n+(define_bypass 5 \"r24kf2_1_fxfer\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 5 \"r24kf2_1_fxfer\" \"r24k_int_prefetch\")\n \n ;; --------------------------------------------------------------\n-;; The 24kx is a 24k configured with 1:1 cpu and fpu, so use\n+;; The 24kf1_1 is a 24k configured with 1:1 cpu and fpu, so use\n ;; the unscaled timings\n ;; --------------------------------------------------------------\n \n-(define_reservation \"r24kx_fpu_iss\"\t\"r24k_iss+r24k_fpu_arith\")\n+(define_reservation \"r24kf1_1_fpu_iss\"\t\"r24k_iss+r24k_fpu_arith\")\n \n ;; fadd, fabs, fneg\n-(define_insn_reservation \"r24kx_fadd\" 4\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fadd\" 4\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (eq_attr \"type\" \"fadd,fabs,fneg\"))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; fmove, fcmove\n-(define_insn_reservation \"r24kx_fmove\" 4\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fmove\" 4\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (eq_attr \"type\" \"fmove,condmove\"))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; fload\n-(define_insn_reservation \"r24kx_fload\" 3\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fload\" 3\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (eq_attr \"type\" \"fpload,fpidxload\"))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; fstore\n-(define_insn_reservation \"r24kx_fstore\" 1\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fstore\" 1\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (eq_attr \"type\" \"fpstore\"))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; fmul, fmadd\n-(define_insn_reservation \"r24kx_fmul_sf\" 4\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fmul_sf\" 4\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"SF\")))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n-(define_insn_reservation \"r24kx_fmul_df\" 5\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fmul_df\" 5\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"DF\")))\n-  \"r24kx_fpu_iss,r24k_fpu_arith\")\n+  \"r24kf1_1_fpu_iss,r24k_fpu_arith\")\n \n \n ;; fdiv, fsqrt, frsqrt\n-(define_insn_reservation \"r24kx_fdiv_sf\" 17\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fdiv_sf\" 17\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt,frsqrt\")\n \t    (eq_attr \"mode\" \"SF\")))\n-  \"r24kx_fpu_iss,(r24k_fpu_arith*13)\")\n+  \"r24kf1_1_fpu_iss,(r24k_fpu_arith*13)\")\n \n-(define_insn_reservation \"r24kx_fdiv_df\" 32\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fdiv_df\" 32\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n-  \"r24kx_fpu_iss,(r24k_fpu_arith*28)\")\n+  \"r24kf1_1_fpu_iss,(r24k_fpu_arith*28)\")\n \n ;; frsqrt\n-(define_insn_reservation \"r24kx_frsqrt_df\" 35\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_frsqrt_df\" 35\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n-  \"r24kx_fpu_iss,(r24k_fpu_arith*30)\")\n+  \"r24kf1_1_fpu_iss,(r24k_fpu_arith*30)\")\n \n ;; fcmp\n-(define_insn_reservation \"r24kx_fcmp\" 2\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fcmp\" 2\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (eq_attr \"type\" \"fcmp\"))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; fcmp -> movf.fmt & movt.fmt bypass (dependency must be on the condition)\n-(define_bypass 1 \"r24kx_fcmp\" \"r24kx_fmove\")\n+(define_bypass 1 \"r24kf1_1_fcmp\" \"r24kf1_1_fmove\")\n \n ;; fcvt (cvt.d.s, cvt.[sd].[wl])\n-(define_insn_reservation \"r24kx_fcvt_i2f_s2d\" 4\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fcvt_i2f_s2d\" 4\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"I2S,I2D,S2D\")))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; fcvt (cvt.s.d)\n-(define_insn_reservation \"r24kx_fcvt_s2d\" 6\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fcvt_s2d\" 6\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"D2S\")))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; fcvt (cvt.[wl].[sd], etc)\n-(define_insn_reservation \"r24kx_fcvt_f2i\" 5\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fcvt_f2i\" 5\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (and (eq_attr \"type\" \"fcvt\")\n \t    (eq_attr \"cnv_mode\" \"S2I,D2I\")))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; fxfer (mfc1, mfhc1, mtc1, mthc1)\n-(define_insn_reservation \"r24kx_fxfer\" 2\n-  (and (eq_attr \"cpu\" \"24kx\")\n+(define_insn_reservation \"r24kf1_1_fxfer\" 2\n+  (and (eq_attr \"cpu\" \"24kf1_1\")\n        (eq_attr \"type\" \"mfc,mtc\"))\n-  \"r24kx_fpu_iss\")\n+  \"r24kf1_1_fpu_iss\")\n \n ;; --------------------------------------------------------------\n ;; Bypass to Consumer\n ;; --------------------------------------------------------------\n-;; r24kx_fcvt_f2i->l/s base : 6 cycles\n-;; r24kx_fcvt_f2i->prefetch : 6 cycles\n-(define_bypass 6 \"r24kx_fcvt_f2i\" \"r24k_int_load\")\n-(define_bypass 6 \"r24kx_fcvt_f2i\" \"r24k_int_store\" \"!store_data_bypass_p\")\n-(define_bypass 6 \"r24kx_fcvt_f2i\" \"r24k_int_prefetch\")\n-\n-;; r24kx_fxfer->l/s base : 3 cycles\n-;; r24kx_fxfer->prefetch : 3 cycles\n-(define_bypass 3 \"r24kx_fxfer\" \"r24k_int_load\")\n-(define_bypass 3 \"r24kx_fxfer\" \"r24k_int_store\" \"!store_data_bypass_p\")\n-(define_bypass 3 \"r24kx_fxfer\" \"r24k_int_prefetch\")\n+;; r24kf1_1_fcvt_f2i->l/s base : 6 cycles\n+;; r24kf1_1_fcvt_f2i->prefetch : 6 cycles\n+(define_bypass 6 \"r24kf1_1_fcvt_f2i\" \"r24k_int_load\")\n+(define_bypass 6 \"r24kf1_1_fcvt_f2i\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 6 \"r24kf1_1_fcvt_f2i\" \"r24k_int_prefetch\")\n+\n+;; r24kf1_1_fxfer->l/s base : 3 cycles\n+;; r24kf1_1_fxfer->prefetch : 3 cycles\n+(define_bypass 3 \"r24kf1_1_fxfer\" \"r24k_int_load\")\n+(define_bypass 3 \"r24kf1_1_fxfer\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 3 \"r24kf1_1_fxfer\" \"r24k_int_prefetch\")\n "}, {"sha": "2f237c95292bd4d446a2d42c61a158e9e9fac82a", "filename": "gcc/config/mips/74k.md", "status": "modified", "additions": 71, "deletions": 72, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2F74k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2F74k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F74k.md?ref=bdd77024de587f1761dfbffc96d7b8392f855986", "patch": "@@ -40,74 +40,74 @@\n ;;    sllv, slt, slti, sltiu, sltu, sra, srav, srl, srlv, sub, subu, wsbh,\n ;;    xor, xori\n (define_insn_reservation \"r74k_int_arith\" 2\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"arith,const,shift,slt,clz\"))\n   \"r74k_alu\")\n \n (define_insn_reservation \"r74k_int_nop\" 0\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"nop\"))\n   \"nothing\")\n \n (define_insn_reservation \"r74k_int_cmove\" 4\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"condmove\"))\n   \"r74k_agen*2\")\n \n ;; MDU: fully pipelined multiplier\n ;; mult, madd, msub - delivers result to hi/lo in 4 cycle (pipelined)\n (define_insn_reservation \"r74k_int_mult\" 4\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"imul,imadd\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; mul - delivers result to general register in 7 cycles\n (define_insn_reservation \"r74k_int_mul3\" 7\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"imul3\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; mfhi, mflo, mflhxu - deliver result to gpr in 7 cycles\n (define_insn_reservation \"r74k_int_mfhilo\" 7\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"mfhilo\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; mthi, mtlo, mtlhx - deliver result to hi/lo, thence madd, handled as bypass\n (define_insn_reservation \"r74k_int_mthilo\" 7\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"mthilo\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; div - default to 50 cycles for 32bit operands.  Faster for 8 bit,\n ;; but is tricky to identify.\n (define_insn_reservation \"r74k_int_div\" 50\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"idiv\"))\n   \"r74k_alu+r74k_mul*50\")\n \n ;; call\n (define_insn_reservation \"r74k_int_call\" 1\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"call\"))\n   \"r74k_agen\")\n \n ;; branch/jump\n (define_insn_reservation \"r74k_int_jump\" 1\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"branch,jump\"))\n   \"r74k_agen\")\n \n ;; loads: lb, lbu, lh, lhu, ll, lw, lwl, lwr, lwpc, lwxs\n ;; prefetch: prefetch, prefetchx\n (define_insn_reservation \"r74k_int_load\" 3 \n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"load,prefetch,prefetchx\"))\n   \"r74k_agen\")\n \n ;; stores\n (define_insn_reservation \"r74k_int_store\" 1\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (and (eq_attr \"type\" \"store\")\n             (eq_attr \"mode\" \"!unknown\")))\n   \"r74k_agen\")\n@@ -118,12 +118,12 @@\n ;;            affects scheduling via log links, but not used here).\n ;;\n (define_insn_reservation \"r74k_unknown\" 1 \n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"unknown\"))\n   \"r74k_alu\")\n \n (define_insn_reservation \"r74k_multi\" 10\n-  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n        (eq_attr \"type\" \"multi\"))\n   \"(r74k_alu+r74k_agen)*10\")\n \n@@ -157,167 +157,166 @@\n ;; Floating Point Instructions\n ;; --------------------------------------------------------------\n \n-;; 74Kf has FPU at 1/2 speed of CPU; 74Kx is the name used by GCC for\n-;; a version with 1:1 speed FPU.\n+;; 74Kf FPU runs at 1:1 or 2:1 core/FPU clock ratio.\n \n ;; fadd, fabs, fneg, \n-(define_insn_reservation \"r74kx_fadd\" 4\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fadd\" 4\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"fadd,fabs,fneg\"))\n   \"r74k_fpu_arith\")\n \n-(define_insn_reservation \"r74kf_fadd\" 8\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fadd\" 8\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"fadd,fabs,fneg\"))\n   \"r74k_fpu_arith*2\")\n \n ;; fmove, fcmove\n-(define_insn_reservation \"r74kx_fmove\" 4\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fmove\" 4\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"fmove\"))\n   \"r74k_fpu_arith\")\n \n-(define_insn_reservation \"r74kf_fmove\" 8\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fmove\" 8\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"fmove\"))\n   \"r74k_fpu_arith*2\")\n \n ;; fload\n-(define_insn_reservation \"r74kx_fload\" 4\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fload\" 4\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"fpload,fpidxload\"))\n   \"r74k_agen+r74k_fpu_ldst\")\n \n-(define_insn_reservation \"r74kf_fload\" 8\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fload\" 8\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"fpload,fpidxload\"))\n   \"r74k_agen+(r74k_fpu_ldst*2)\")\n \n ;; fstore\n-(define_insn_reservation \"r74kx_fstore\" 1\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fstore\" 1\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"fpstore,fpidxstore\"))\n   \"r74k_agen+r74k_fpu_ldst\")\n \n-(define_insn_reservation \"r74kf_fstore\" 2\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fstore\" 2\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"fpstore,fpidxstore\"))\n   \"r74k_agen+(r74k_fpu_ldst*2)\")\n \n ;; fmul, fmadd\n-(define_insn_reservation \"r74kx_fmul_sf\" 4\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fmul_sf\" 4\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith\")\n \n-(define_insn_reservation \"r74kf_fmul_sf\" 8\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fmul_sf\" 8\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith*2\")\n \n-(define_insn_reservation \"r74kx_fmul_df\" 5\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fmul_df\" 5\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*2\")\n \n-(define_insn_reservation \"r74kf_fmul_df\" 10\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fmul_df\" 10\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*4\")\n \n ;; fdiv, fsqrt\n-(define_insn_reservation \"r74kx_fdiv_sf\" 17\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fdiv_sf\" 17\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith*14\")\n \n-(define_insn_reservation \"r74kf_fdiv_sf\" 34\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fdiv_sf\" 34\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith*28\")\n \n-(define_insn_reservation \"r74kx_fdiv_df\" 32\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fdiv_df\" 32\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*29\")\n \n-(define_insn_reservation \"r74kf_fdiv_df\" 64\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fdiv_df\" 64\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*58\")\n \n ;; frsqrt\n-(define_insn_reservation \"r74kx_frsqrt_sf\" 17\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_frsqrt_sf\" 17\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith*14\")\n \n-(define_insn_reservation \"r74kf_frsqrt_sf\" 34\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_frsqrt_sf\" 34\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith*28\")\n \n-(define_insn_reservation \"r74kx_frsqrt_df\" 36\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_frsqrt_df\" 36\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*31\")\n \n-(define_insn_reservation \"r74kf_frsqrt_df\" 72\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_frsqrt_df\" 72\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*62\")\n \n ;; fcmp\n-(define_insn_reservation \"r74kx_fcmp\" 4\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fcmp\" 4\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"fcmp\"))\n   \"r74k_fpu_arith\")\n \n-(define_insn_reservation \"r74kf_fcmp\" 8\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fcmp\" 8\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"fcmp\"))\n   \"r74k_fpu_arith*2\")\n \n ;; fcvt\n-(define_insn_reservation \"r74kx_fcvt\" 4\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fcvt\" 4\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"fcvt\"))\n   \"r74k_fpu_arith\")\n \n-(define_insn_reservation \"r74kf_fcvt\" 8\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fcvt\" 8\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"fcvt\"))\n   \"r74k_fpu_arith*2\")\n \n ;; fxfer (MTC1, DMTC1: latency is 4) (MFC1, DMFC1: latency is 1)\n-(define_insn_reservation \"r74kx_fxfer_to_c1\" 4\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fxfer_to_c1\" 4\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"mtc\"))\n   \"r74k_fpu_arith\")\n \n-(define_insn_reservation \"r74kf_fxfer_to_c1\" 8\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fxfer_to_c1\" 8\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"mtc\"))\n   \"r74k_fpu_arith*2\")\n \n-(define_insn_reservation \"r74kx_fxfer_from_c1\" 1\n-  (and (eq_attr \"cpu\" \"74kx\")\n+(define_insn_reservation \"r74kf1_1_fxfer_from_c1\" 1\n+  (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"mfc\"))\n   \"r74k_fpu_arith\")\n \n-(define_insn_reservation \"r74kf_fxfer_from_c1\" 2\n-  (and (eq_attr \"cpu\" \"74kf\")\n+(define_insn_reservation \"r74kf2_1_fxfer_from_c1\" 2\n+  (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"mfc\"))\n   \"r74k_fpu_arith*2\")"}, {"sha": "8adf7c3be0e375e96714283713263b54968a7f4d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=bdd77024de587f1761dfbffc96d7b8392f855986", "patch": "@@ -771,18 +771,34 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   { \"4kec\", PROCESSOR_4KC, 33 },\n   { \"4kem\", PROCESSOR_4KC, 33 },\n   { \"4kep\", PROCESSOR_4KP, 33 },\n-  { \"24kc\", PROCESSOR_24KC, 33 },  /* 24K  no FPU */\n-  { \"24kf\", PROCESSOR_24KF, 33 },  /* 24K 1:2 FPU */\n-  { \"24kx\", PROCESSOR_24KX, 33 },  /* 24K 1:1 FPU */\n+\n+  { \"24kc\", PROCESSOR_24KC, 33 },\n+  { \"24kf2_1\", PROCESSOR_24KF2_1, 33 },\n+  { \"24kf\", PROCESSOR_24KF2_1, 33 },\n+  { \"24kf1_1\", PROCESSOR_24KF1_1, 33 },\n+  { \"24kfx\", PROCESSOR_24KF1_1, 33 },\n+  { \"24kx\", PROCESSOR_24KF1_1, 33 },\n+\n   { \"24kec\", PROCESSOR_24KC, 33 }, /* 24K with DSP */\n-  { \"24kef\", PROCESSOR_24KF, 33 },\n-  { \"24kex\", PROCESSOR_24KX, 33 },\n-  { \"34kc\", PROCESSOR_24KC, 33 },  /* 34K with MT/DSP */\n-  { \"34kf\", PROCESSOR_24KF, 33 },\n-  { \"34kx\", PROCESSOR_24KX, 33 },\n-  { \"74kc\", PROCESSOR_74KC, 33 },\n-  { \"74kf\", PROCESSOR_74KF, 33 },\n-  { \"74kx\", PROCESSOR_74KX, 33 },\n+  { \"24kef2_1\", PROCESSOR_24KF2_1, 33 },\n+  { \"24kef\", PROCESSOR_24KF2_1, 33 },\n+  { \"24kef1_1\", PROCESSOR_24KF1_1, 33 },\n+  { \"24kefx\", PROCESSOR_24KF1_1, 33 },\n+  { \"24kex\", PROCESSOR_24KF1_1, 33 },\n+\n+  { \"34kc\", PROCESSOR_24KC, 33 }, /* 34K with MT/DSP */\n+  { \"34kf2_1\", PROCESSOR_24KF2_1, 33 },\n+  { \"34kf\", PROCESSOR_24KF2_1, 33 },\n+  { \"34kf1_1\", PROCESSOR_24KF1_1, 33 },\n+  { \"34kfx\", PROCESSOR_24KF1_1, 33 },\n+  { \"34kx\", PROCESSOR_24KF1_1, 33 },\n+\n+  { \"74kc\", PROCESSOR_74KC, 33 }, /* 74K with DSPr2 */\n+  { \"74kf2_1\", PROCESSOR_74KF2_1, 33 },\n+  { \"74kf\", PROCESSOR_74KF2_1, 33 },\n+  { \"74kf1_1\", PROCESSOR_74KF1_1, 33 },\n+  { \"74kfx\", PROCESSOR_74KF1_1, 33 },\n+  { \"74kx\", PROCESSOR_74KF1_1, 33 },\n \n   /* MIPS64 */\n   { \"5kc\", PROCESSOR_5KC, 64 },\n@@ -901,7 +917,7 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n                        1,           /* branch_cost */\n                        4            /* memory_latency */\n     },\n-    { /* 24KF */\n+    { /* 24KF2_1 */\n       COSTS_N_INSNS (8),            /* fp_add */\n       COSTS_N_INSNS (8),            /* fp_mult_sf */\n       COSTS_N_INSNS (10),           /* fp_mult_df */\n@@ -914,7 +930,7 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n                        1,           /* branch_cost */\n                        4            /* memory_latency */\n     },\n-    { /* 24KX */\n+    { /* 24KF1_1 */\n       COSTS_N_INSNS (4),            /* fp_add */\n       COSTS_N_INSNS (4),            /* fp_mult_sf */\n       COSTS_N_INSNS (5),            /* fp_mult_df */\n@@ -936,7 +952,7 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n                        1,           /* branch_cost */\n                        4            /* memory_latency */\n     },\n-    { /* 74KF */\n+    { /* 74KF2_1 */\n       COSTS_N_INSNS (8),            /* fp_add */\n       COSTS_N_INSNS (8),            /* fp_mult_sf */\n       COSTS_N_INSNS (10),           /* fp_mult_df */\n@@ -949,7 +965,7 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n                        1,           /* branch_cost */\n                        4            /* memory_latency */\n     },\n-    { /* 74KX */\n+    { /* 74KF1_1 */\n       COSTS_N_INSNS (4),            /* fp_add */\n       COSTS_N_INSNS (4),            /* fp_mult_sf */\n       COSTS_N_INSNS (5),            /* fp_mult_df */\n@@ -10780,8 +10796,8 @@ mips_issue_rate (void)\n   switch (mips_tune)\n     {\n     case PROCESSOR_74KC:\n-    case PROCESSOR_74KF:\n-    case PROCESSOR_74KX:\n+    case PROCESSOR_74KF2_1:\n+    case PROCESSOR_74KF1_1:\n     case PROCESSOR_R4130:\n     case PROCESSOR_R5400:\n     case PROCESSOR_R5500:"}, {"sha": "a07af1858667cb032fcd7c5d7a7acc2802f93425", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=bdd77024de587f1761dfbffc96d7b8392f855986", "patch": "@@ -41,11 +41,11 @@ enum processor_type {\n   PROCESSOR_5KF,\n   PROCESSOR_20KC,\n   PROCESSOR_24KC,\n-  PROCESSOR_24KF,\n-  PROCESSOR_24KX,\n+  PROCESSOR_24KF2_1,\n+  PROCESSOR_24KF1_1,\n   PROCESSOR_74KC,\n-  PROCESSOR_74KF,\n-  PROCESSOR_74KX,\n+  PROCESSOR_74KF2_1,\n+  PROCESSOR_74KF1_1,\n   PROCESSOR_M4K,\n   PROCESSOR_R3900,\n   PROCESSOR_R6000,\n@@ -249,8 +249,8 @@ extern const struct mips_rtx_cost_data *mips_cost;\n #define TUNE_SB1                    (mips_tune == PROCESSOR_SB1\t\t\\\n \t\t\t\t     || mips_tune == PROCESSOR_SB1A)\n #define TUNE_74K                    (mips_tune == PROCESSOR_74KC\t\\\n-\t\t\t\t     || mips_tune == PROCESSOR_74KF\t\\\n-\t\t\t\t     || mips_tune == PROCESSOR_74KX)\n+\t\t\t\t     || mips_tune == PROCESSOR_74KF2_1\t\\\n+\t\t\t\t     || mips_tune == PROCESSOR_74KF1_1)\n \n /* True if the pre-reload scheduler should try to create chains of\n    multiply-add or multiply-subtract instructions.  For example,"}, {"sha": "e663abd07c6444cd1996265ded17ecf07ac3fe05", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=bdd77024de587f1761dfbffc96d7b8392f855986", "patch": "@@ -397,7 +397,7 @@\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n (define_attr \"cpu\"\n-  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf,24kx,74kc,74kf,74kx,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000\"\n+  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf2_1,24kf1_1,74kc,74kf2_1,74kf1_1,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000\"\n   (const (symbol_ref \"mips_tune\")))\n \n ;; The type of hardware hazard associated with this instruction."}, {"sha": "1a9c1aaea9d87150a73af4a5598db2f0e5c27ee8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd77024de587f1761dfbffc96d7b8392f855986/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bdd77024de587f1761dfbffc96d7b8392f855986", "patch": "@@ -11425,10 +11425,10 @@ The processor names are:\n @samp{4kec}, @samp{4kem}, @samp{4kep},\n @samp{5kc}, @samp{5kf},\n @samp{20kc},\n-@samp{24kc}, @samp{24kf}, @samp{24kx},\n-@samp{24kec}, @samp{24kef}, @samp{24kex},\n-@samp{34kc}, @samp{34kf}, @samp{34kx},\n-@samp{74kc}, @samp{74kf}, @samp{74kx},\n+@samp{24kc}, @samp{24kf2_1}, @samp{24kf1_1},\n+@samp{24kec}, @samp{24kef2_1}, @samp{24kef1_1},\n+@samp{34kc}, @samp{34kf2_1}, @samp{34kf1_1},\n+@samp{74kc}, @samp{74kf2_1}, @samp{74kf1_1},\n @samp{m4k},\n @samp{orion},\n @samp{r2000}, @samp{r3000}, @samp{r3900}, @samp{r4000}, @samp{r4400},\n@@ -11446,6 +11446,13 @@ In processor names, a final @samp{000} can be abbreviated as @samp{k}\n (for example, @samp{-march=r2k}).  Prefixes are optional, and\n @samp{vr} may be written @samp{r}.\n \n+Names of the form @samp{@var{n}f2_1} refer to processors with\n+FPUs clocked at half the rate of the core.  Names of the form\n+@samp{@var{n}f1_1} refer to processors with FPUs clocked at the same\n+rate as the core.  For compatibility reasons, @samp{@var{n}f} is\n+accepted as a synonym for @samp{@var{n}f2_1} while @samp{@var{n}x} and\n+@samp{@var{b}fx} are accepted as synonyms for @samp{@var{n}f1_1}.\n+\n GCC defines two macros based on the value of this option.  The first\n is @samp{_MIPS_ARCH}, which gives the name of target architecture, as\n a string.  The second has the form @samp{_MIPS_ARCH_@var{foo}},"}]}