{"sha": "aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE1M2Y4MzJhYzY4YWNmNmI1ZjhkZWU5NmJjMWFlYjU3MDgxZmU3Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-10-08T23:32:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-10-08T23:32:23Z"}, "message": "localefwd.h (class locale): Add static member _S_num_extra_categories...\n\n\n2002-10-08  Paolo Carlini  <pcarlini@unitus.it>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/localefwd.h (class locale): Add static member\n\t_S_num_extra_categories, encoding the number of additional\n\tcategories.\n\tChange _S_num_categories to _S_categories_size.\n\t(class locale::_Impl): Add _M_c_cats.\n\t(class locale::_Impl::_M_names): Change to array of chars.\n\t(class locale::_Impl::_M_check_same_name): Use\n\t_S_extra_categories_size, tweak.\n\t(locale::locale(const locale&, _Facet*)): Ditto.\n    \t* src/locale.cc (locale::locale(const char* )): Rewrite to deal\n\twith the environment in a POSIX-compliant way while being thread\n\tsafe.\n\t(locale::name()): Update to output POSIX environment strings.\n\t* src/localename.cc\n\t(locale::_Impl::_Impl(const _Impl&, size_t): Use\n\t_S_categories_size_*, tweak.\n\t(locale::_Impl::_Impl(facet**, size_t, bool)): Ditto.\n\t(locale::_Impl::_Impl(const char*, size_t)): Name each category\n\tindividually.\n\t(locale::_Impl::_M_replace_categories): Use strcpy.\n\n\t* include/bits/locale_facets.h (numpunct::_M_initialize_numpunct):\n\tChange default argument to NULL from _S_c_locale.\n\t(timepunct::_M_initialize_timepunct): Same.\n\t_S_c_locale cleanups.\n\t* src/codecvt.c: _S_c_locale simplification.\n\t* src/ctype.c: Same.\n\t* src/globals.cc: Add fake_name.\n\t* src/locale-inst.cc: Remove extra includes.\n\t* src/locale.cc: Remove extra includes.\n\tAdd _S_extra_categories_size definition.\n\tCorrect \"C\" initialization.\n\t(locale::facet::facet): Don't initialize _S_c_locale.\n\t(locale::facet::_M_remove_reference): Adjust.\n\t* src/localename: Use facet_vec, facet_name.\n\t(locale::_Impl::_Impl(facet** __f, size_t __refs, bool)): Set\n\tfacet ref counts to one. Initialize _S_c_locale.\n\t(locale::_Impl::_M_install_facet(id*, facet*)): Adjust facet ref\n\tcounts when installing unilaterally.\n\n\t* config/locale/generic/c_locale.cc: Add _S_categories definition.\n\t* config/locale/generic/c_locale.h: Add _GLIBCPP_NUM_CATEGORIES macro.\n\t* config/locale/generic/time_members.cc: _S_c_locale cleanup.\n\n\t* config/locale/gnu/c_locale.cc: Add _S_categories definition.\n\t(_S_destroy_c_locale): Move checks against _S_c_locale here.\n\t* config/locale/gnu/c_locale.h: Add _GLIBCPP_NUM_CATEGORIES macro.\n\t* config/locale/gnu/ctype_members.cc: Simplify _S_destroy_c_locale\n\tcalls, _S_c_locale usage.\n\t* config/locale/gnu/monetary_members.cc: Same, tweaks.\n\t* config/locale/gnu/monetary_members.cc: Same.\n\t* config/locale/gnu/time_members.cc: Same.\n\t* config/os/gnu-linux/ctype_noninline.h: Use locale::classic().\n\n\t* docs/html/22_locale/locale.html: Add bits about global locales\n\tand \"C\" setlocale.\n\n\t* testsuite/22_locale/facet.cc (test02): Add.\n\t* testsuite/22_locale/static_members.cc (test02): Add.\n\t* testsuite/22_locale/ctor_copy_dtor.cc (test04): Add.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r57964", "tree": {"sha": "eea072530953d98ce478b1802853a40787210c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eea072530953d98ce478b1802853a40787210c1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/comments", "author": null, "committer": null, "parents": [{"sha": "131d2c168d48e54d62a55263c560195ff0eadc9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131d2c168d48e54d62a55263c560195ff0eadc9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131d2c168d48e54d62a55263c560195ff0eadc9f"}], "stats": {"total": 787, "additions": 609, "deletions": 178}, "files": [{"sha": "5bb78b8422679bbe298cb425681c358351c4418a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -1,3 +1,67 @@\n+2002-10-08  Paolo Carlini  <pcarlini@unitus.it>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\t\n+\n+\t* include/bits/localefwd.h (class locale): Add static member\n+\t_S_num_extra_categories, encoding the number of additional\n+\tcategories.\n+\tChange _S_num_categories to _S_categories_size.\n+\t(class locale::_Impl): Add _M_c_cats.\n+\t(class locale::_Impl::_M_names): Change to array of chars.\n+\t(class locale::_Impl::_M_check_same_name): Use\n+\t_S_extra_categories_size, tweak.\n+\t(locale::locale(const locale&, _Facet*)): Ditto.\n+    \t* src/locale.cc (locale::locale(const char* )): Rewrite to deal\n+\twith the environment in a POSIX-compliant way while being thread\n+\tsafe.\n+\t(locale::name()): Update to output POSIX environment strings.\n+\t* src/localename.cc\n+\t(locale::_Impl::_Impl(const _Impl&, size_t): Use\n+\t_S_categories_size_*, tweak.\n+\t(locale::_Impl::_Impl(facet**, size_t, bool)): Ditto.\n+\t(locale::_Impl::_Impl(const char*, size_t)): Name each category\n+\tindividually.\n+\t(locale::_Impl::_M_replace_categories): Use strcpy.\n+\n+\t* include/bits/locale_facets.h (numpunct::_M_initialize_numpunct):\n+\tChange default argument to NULL from _S_c_locale.\n+\t(timepunct::_M_initialize_timepunct): Same.\n+\t_S_c_locale cleanups.\n+\t* src/codecvt.c: _S_c_locale simplification.\n+\t* src/ctype.c: Same.\n+\t* src/globals.cc: Add fake_name.\n+\t* src/locale-inst.cc: Remove extra includes.\t\n+\t* src/locale.cc: Remove extra includes.\n+\tAdd _S_extra_categories_size definition.\n+\tCorrect \"C\" initialization.\n+\t(locale::facet::facet): Don't initialize _S_c_locale.\n+\t(locale::facet::_M_remove_reference): Adjust.\n+\t* src/localename: Use facet_vec, facet_name.\n+\t(locale::_Impl::_Impl(facet** __f, size_t __refs, bool)): Set\n+\tfacet ref counts to one. Initialize _S_c_locale.\n+\t(locale::_Impl::_M_install_facet(id*, facet*)): Adjust facet ref\n+\tcounts when installing unilaterally.\n+\n+\t* config/locale/generic/c_locale.cc: Add _S_categories definition.\n+\t* config/locale/generic/c_locale.h: Add _GLIBCPP_NUM_CATEGORIES macro.\n+\t* config/locale/generic/time_members.cc: _S_c_locale cleanup.\n+\t\n+\t* config/locale/gnu/c_locale.cc: Add _S_categories definition.\n+\t(_S_destroy_c_locale): Move checks against _S_c_locale here.\n+\t* config/locale/gnu/c_locale.h: Add _GLIBCPP_NUM_CATEGORIES macro.\n+\t* config/locale/gnu/ctype_members.cc: Simplify _S_destroy_c_locale\n+\tcalls, _S_c_locale usage.\n+\t* config/locale/gnu/monetary_members.cc: Same, tweaks.\n+\t* config/locale/gnu/monetary_members.cc: Same.\n+\t* config/locale/gnu/time_members.cc: Same.\t\n+\t* config/os/gnu-linux/ctype_noninline.h: Use locale::classic().\n+\n+\t* docs/html/22_locale/locale.html: Add bits about global locales\n+\tand \"C\" setlocale.\n+\n+\t* testsuite/22_locale/facet.cc (test02): Add.\n+\t* testsuite/22_locale/static_members.cc (test02): Add.\n+\t* testsuite/22_locale/ctor_copy_dtor.cc (test04): Add.\n+\n 2002-10-07  Jonathan Wakely  <jw@kayari.org>\n \n \t* docs/html/configopts.html, docs/html/documentation.html,"}, {"sha": "689bbf592b930651027d844e08e1d8c0d60e6673", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -223,4 +223,15 @@ namespace std\n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale&)\n   { return __c_locale(); }\n+\n+  const char* locale::_S_categories[_S_categories_size \n+\t\t\t\t    + _S_extra_categories_size] =\n+    {\n+      \"LC_CTYPE\", \n+      \"LC_NUMERIC\", \n+      \"LC_COLLATE\", \n+      \"LC_TIME\", \n+      \"LC_MONETARY\",\n+      \"LC_MESSAGES\"\n+    };\n }  // namespace std"}, {"sha": "9627d8646afe33e55f1ca974d62d1b65f777e4a3", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -35,6 +35,8 @@\n \n #include <clocale>\n \n+#define _GLIBCPP_NUM_CATEGORIES 0\n+\n namespace std\n {\n   typedef int*\t\t\t__c_locale;"}, {"sha": "7b5a25c87609973a82d78eb776a0eef1bc356ad8", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -40,10 +40,7 @@ namespace std\n {\n   template<>\n     __timepunct<char>::~__timepunct()\n-    {\n-      if (_M_c_locale_timepunct != _S_c_locale)\n-\t_S_destroy_c_locale(_M_c_locale_timepunct); \n-    }\n+    { _S_destroy_c_locale(_M_c_locale_timepunct); }\n \n   template<>\n     void\n@@ -123,10 +120,7 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<>\n     __timepunct<wchar_t>::~__timepunct()\n-    {\n-      if (_M_c_locale_timepunct != _S_c_locale)\n-\t_S_destroy_c_locale(_M_c_locale_timepunct); \n-    }\n+    { _S_destroy_c_locale(_M_c_locale_timepunct); }\n \n   template<>\n     void"}, {"sha": "188f3a2f1c1bcb60db184d6769dcfd529ce8a1e2", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -178,9 +178,29 @@ namespace std\n   \n   void\n   locale::facet::_S_destroy_c_locale(__c_locale& __cloc)\n-  { __freelocale(__cloc); }\n+  {\n+    if (_S_c_locale != __cloc)\n+      __freelocale(__cloc); \n+  }\n \n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale& __cloc)\n   { return __duplocale(__cloc); }\n+\n+  const char* locale::_S_categories[_S_categories_size \n+\t\t\t\t    + _S_extra_categories_size] =\n+    {\n+      \"LC_CTYPE\", \n+      \"LC_NUMERIC\", \n+      \"LC_COLLATE\", \n+      \"LC_TIME\", \n+      \"LC_MONETARY\",\n+      \"LC_MESSAGES\", \n+      \"LC_PAPER\", \n+      \"LC_NAME\", \n+      \"LC_ADDRESS\",\n+      \"LC_TELEPHONE\", \n+      \"LC_MEASUREMENT\", \n+      \"LC_IDENTIFICATION\" \n+    };\n }  // namespace std"}, {"sha": "130b843d7f9e433c3922a511a3f854da80b2ab52", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -40,6 +40,8 @@\n \n #define _GLIBCPP_C_LOCALE_GNU 1\n \n+#define _GLIBCPP_NUM_CATEGORIES 6\n+\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n namespace __gnu_cxx\n {"}, {"sha": "3b78c60405a155b2b94ce08536fb6e42a2a5862c", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -44,8 +44,7 @@ namespace std\n     ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n     : ctype<char>(0, false, __refs) \n     { \t\n-      if (_M_c_locale_ctype != _S_c_locale)\n-\t_S_destroy_c_locale(_M_c_locale_ctype);\n+      _S_destroy_c_locale(_M_c_locale_ctype);\n       _S_create_c_locale(_M_c_locale_ctype, __s); \n       _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n       _M_tolower = _M_c_locale_ctype->__ctype_tolower;"}, {"sha": "0386ab6dc5469ce43e1db4dbf8817bf66a99d101", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -220,7 +220,7 @@ namespace std\n     moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc, \n \t\t\t\t\t\t     const char*)\n     {\n-      if (__cloc == _S_c_locale)\n+      if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = '.';\n@@ -265,7 +265,7 @@ namespace std\n     moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc, \n \t\t\t\t\t\t      const char*)\n     {\n-      if (__cloc == _S_c_locale)\n+      if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = '.';\n@@ -319,7 +319,7 @@ namespace std\n     moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc, \n \t\t\t\t\t\t\tconst char* __name)\n     {\n-      if (__cloc == _S_c_locale)\n+      if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = L'.';\n@@ -348,14 +348,12 @@ namespace std\n \t  _M_thousands_sep = static_cast<wchar_t>(((union { const char *__s; unsigned int __w; }){ __s: __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc)}).__w);\n \t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \n-\t  mbstate_t __state;\n-\t  size_t __len;\n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \t  const char* __ccurr = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n \n-\t  // NB: Should swich to __cloc's ctype info first.\n-\t  __len = strlen(__cpossign);\n+\t  mbstate_t __state;\n+\t  size_t __len = strlen(__cpossign);\n \t  if (__len)\n \t    {\n \t      ++__len;\n@@ -418,7 +416,7 @@ namespace std\n     moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale __cloc, \n \t\t\t\t\t\t\t const char* __name)\n     {\n-      if (__cloc == _S_c_locale)\n+      if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = L'.';\n@@ -446,13 +444,12 @@ namespace std\n \t  _M_thousands_sep = static_cast<wchar_t>(((union { const char *__s; unsigned int __w; }){ __s: __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc)}).__w);\n \t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \n-\t  mbstate_t __state;\n-\t  size_t __len;\n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \t  const char* __ccurr = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n \n-\t  // NB: Should swich to __cloc's ctype info first.\n+\t  mbstate_t __state;\n+\t  size_t __len;\n \t  __len = strlen(__cpossign);\n \t  if (__len)\n \t    {"}, {"sha": "a502bfb2150f88895112f04161aeb2453332b33c", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -42,7 +42,7 @@ namespace std\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n-      if (__cloc == _S_c_locale)\n+      if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = '.';\n@@ -76,7 +76,7 @@ namespace std\n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n-      if (__cloc == _S_c_locale)\n+      if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = L'.';"}, {"sha": "b2b6f23120f9b4de144dc8a8b32a21c4cd09f663", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -41,10 +41,7 @@ namespace std\n {\n   template<>\n     __timepunct<char>::~__timepunct()\n-    {\n-      if (_M_c_locale_timepunct != _S_c_locale)\n-\t_S_destroy_c_locale(_M_c_locale_timepunct); \n-    }\n+    { _S_destroy_c_locale(_M_c_locale_timepunct); }\n \n   template<>\n     void\n@@ -67,11 +64,10 @@ namespace std\n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n-      if (__cloc == _S_c_locale)\n+      if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\n-\t  _M_c_locale_timepunct = _S_c_locale; \n+\t  _M_c_locale_timepunct = _S_c_locale;\n \n \t  _M_date_format = \"%m/%d/%y\";\n \t  _M_date_era_format = \"%m/%d/%y\";\n@@ -194,10 +190,7 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<>\n     __timepunct<wchar_t>::~__timepunct()\n-    {\n-      if (_M_c_locale_timepunct != _S_c_locale)\n-\t_S_destroy_c_locale(_M_c_locale_timepunct); \n-    }\n+    { _S_destroy_c_locale(_M_c_locale_timepunct); }\n \n   template<>\n     void\n@@ -220,11 +213,10 @@ namespace std\n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n-      if (__cloc == _S_c_locale)\n+      if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\n-\t  _M_c_locale_timepunct = _S_c_locale; \n+\t  _M_c_locale_timepunct = _S_c_locale;\n \n \t  _M_date_format = L\"%m/%d/%y\";\n \t  _M_date_era_format = L\"%m/%d/%y\";"}, {"sha": "8f06d1397ee0cc397d9cf4a79263777f74401201", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -38,8 +38,7 @@\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   {\n-    if (!_S_c_locale)\n-      _S_create_c_locale(_S_c_locale, \"C\");\n+    locale::classic();\n     return _S_c_locale->__ctype_b;\n   }\n #else\n@@ -96,7 +95,7 @@\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n   __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)\n   {\n-    _M_c_locale_ctype = _S_c_locale;\n+    _M_c_locale_ctype = _S_c_locale; \n     _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n     _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n     _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;"}, {"sha": "d4d74b536c93366f9bd205f61f1b2bed33b9347a", "filename": "libstdc++-v3/docs/html/22_locale/locale.html", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -68,14 +68,36 @@ <h2>\n The only other thing of interest in this class is the memory\n management of facets. Each constructor of a facet class takes a\n std::size_t __refs argument: if __refs == 0, the facet is deleted when\n-no longer used. if __refs == 1, the facet is not destroyed, even when\n-it is no longer reference.\n+the locale containing it is destroyed. If __refs == 1, the facet is\n+not destroyed, even when it is no longer referenced.\n \n \n class id\n Provides an index for looking up specific facets.\n \n class _Impl\n+The internal representation of the std::locale object.\n+\n+<h2>\n+5.  Relationship to traditional \"C\" locales.\n+</h2>\n+\n+From Josuttis, p. 697-698, which says, that \"there is only *one*\n+relation (of the C++ locale mechanism) to the C locale mechanism: the\n+global C locale is modified if a named C++ locale object is set as the\n+global locale\" (emphasis Paolo), that is:\n+\n+    std::locale::global(std::locale(\"\"));\n+\n+affects the C functions as if the following call was made:\n+\n+    std::setlocale(LC_ALL, \"\");\n+\n+On the other hand, there is *no* viceversa, that is, calling setlocale\n+has *no* whatsoever on the C++ locale mechanism, in particular on the\n+working of locale(\"\"), which constructs the locale object from the\n+environment of the running program, that is, in practice, the set of\n+LC_ALL, LANG, etc. variable of the shell.\n \n <h2>\n 5.  Examples\n@@ -87,8 +109,7 @@ <h2>\n \n More information can be found in the following testcases:\n <ul>\n-<li> testsuite/22_locale/ctype_char_members.cc    </li>\n-<li> testsuite/22_locale/ctype_wchar_t_members.cc </li>\n+<li> testsuite/22_locale/all   </li>\n </ul>\n \n <h2>"}, {"sha": "55953c0d5b1514b69d7cd5829acf5784f76e4f0a", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -525,7 +525,7 @@ namespace std\n \n       // For use at construction time only.\n       void \n-      _M_initialize_numpunct(__c_locale __cloc = _S_c_locale);\n+      _M_initialize_numpunct(__c_locale __cloc = NULL);\n     };\n \n   template<typename _CharT>\n@@ -875,10 +875,7 @@ namespace std\n   protected:\n       virtual\n       ~collate() \n-      {\n-\tif (_M_c_locale_collate != _S_c_locale)\n-\t  _S_destroy_c_locale(_M_c_locale_collate); \n-      }\n+      { _S_destroy_c_locale(_M_c_locale_collate); }\n \n       virtual int  \n       do_compare(const _CharT* __lo1, const _CharT* __hi1,\n@@ -924,8 +921,7 @@ namespace std\n       collate_byname(const char* __s, size_t __refs = 0)\n       : collate<_CharT>(__refs) \n       { \n-\tif (_M_c_locale_collate != _S_c_locale)\n-\t  _S_destroy_c_locale(_M_c_locale_collate);\n+\t_S_destroy_c_locale(_M_c_locale_collate);\n \t_S_create_c_locale(_M_c_locale_collate, __s); \n       }\n \n@@ -1123,7 +1119,7 @@ namespace std\n \n       // For use at construction time only.\n       void \n-      _M_initialize_timepunct(__c_locale __cloc = _S_c_locale);\n+      _M_initialize_timepunct(__c_locale __cloc = NULL);\n     };\n \n   template<typename _CharT>\n@@ -1459,7 +1455,7 @@ namespace std\n \n       // For use at construction time only.\n        void \n-       _M_initialize_moneypunct(__c_locale __cloc = _S_c_locale, \n+       _M_initialize_moneypunct(__c_locale __cloc = NULL, \n \t\t\t\tconst char* __name = NULL);\n     };\n \n@@ -1667,10 +1663,7 @@ namespace std\n     protected:\n       virtual \n       ~messages()\n-       { \n-\t if (_M_c_locale_messages != _S_c_locale)\n-\t   _S_destroy_c_locale(_M_c_locale_messages); \n-       }\n+       { _S_destroy_c_locale(_M_c_locale_messages); }\n \n       virtual catalog \n       do_open(const basic_string<char>&, const locale&) const;\n@@ -1759,8 +1752,7 @@ namespace std\n       : messages<_CharT>(__refs) \n       { \n \t_M_name_messages = __s;\n-\tif (_M_c_locale_messages != _S_c_locale)\n-\t  _S_destroy_c_locale(_M_c_locale_messages);\n+\t_S_destroy_c_locale(_M_c_locale_messages);\n \t_S_create_c_locale(_M_c_locale_messages, __s); \n       }\n "}, {"sha": "762796099215d5e70bf15a3097b2eaec40b75d39", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -207,8 +207,8 @@ namespace std\n     static const category time \t\t= 1L << 3;\n     static const category monetary \t= 1L << 4;\n     static const category messages \t= 1L << 5;\n-    static const category all \t\t= (collate | ctype | monetary |\n-\t\t\t\t \t   numeric | time  | messages);\n+    static const category all \t\t= (ctype | numeric | collate |\n+\t\t\t\t \t   time  | monetary | messages);\n \n     // Construct/copy/destroy:\n     locale() throw();\n@@ -267,7 +267,26 @@ namespace std\n     // Current global reference locale\n     static _Impl* \t_S_global;  \n \n-    static const size_t\t_S_num_categories = 6;\n+    // Number of standard categories. For C++, these categories are\n+    // collate, ctype, monetary, numeric, time, and messages. These\n+    // directly correspond to ISO C99 macros LC_COLLATE, LC_CTYPE,\n+    // LC_MONETARY, LC_NUMERIC, and LC_TIME. In addition, POSIX (IEEE\n+    // 1003.1-2001) specifies LC_MESSAGES.\n+    static const size_t\t_S_categories_size = 6;\n+\n+    // In addition to the standard categories, the underlying\n+    // operating system is allowed to define extra LC_*\n+    // macros. For GNU systems, the following are also valid:\n+    // LC_PAPER, LC_NAME, LC_ADDRESS, LC_TELEPHONE, LC_MEASUREMENT,\n+    // and LC_IDENTIFICATION.\n+    static const size_t\t_S_extra_categories_size = _GLIBCPP_NUM_CATEGORIES;\n+\n+    // Names of underlying locale categories.  \n+    // NB: locale::global() has to know how to modify all the\n+    // underlying categories, not just the ones required by the C++\n+    // standard.\n+    static const char* \t_S_categories[_S_categories_size \n+\t\t\t\t      + _S_extra_categories_size];\n \n     explicit \n     locale(_Impl*) throw();\n@@ -308,7 +327,9 @@ namespace std\n     _Atomic_word\t\t\t_M_references;\n     facet** \t\t\t\t_M_facets;\n     size_t \t\t\t\t_M_facets_size;\n-    const char* \t\t\t_M_names[_S_num_categories];\n+\n+    char* \t\t\t\t_M_names[_S_categories_size\n+\t\t\t\t\t\t + _S_extra_categories_size];\n     static const locale::id* const \t_S_id_ctype[];\n     static const locale::id* const \t_S_id_numeric[];\n     static const locale::id* const \t_S_id_collate[];\n@@ -348,8 +369,10 @@ namespace std\n     _M_check_same_name()\n     {\n       bool __ret = true;\n-      for (size_t i = 0; __ret && i < _S_num_categories - 1; ++i)\n-\t__ret &= (strcmp(_M_names[i], _M_names[i + 1]) == 0);\n+      for (size_t __i = 0; \n+\t   __ret && __i < _S_categories_size + _S_extra_categories_size - 1; \n+\t   ++__i)\n+\t__ret &= (strcmp(_M_names[__i], _M_names[__i + 1]) == 0);\n       return __ret;\n     }\n \n@@ -376,8 +399,14 @@ namespace std\n     {\n       _M_impl = new _Impl(*__other._M_impl, 1);\n       _M_impl->_M_install_facet(&_Facet::id, __f);\n-      for (size_t __i = 0; __i < _S_num_categories; ++__i)\n-\t_M_impl->_M_names[__i] = \"*\";\n+      for (size_t __i = 0; \n+\t   __i < _S_categories_size + _S_extra_categories_size; ++__i)\n+\t{\n+\t  delete [] _M_impl->_M_names[__i];\n+\t  char* __new = new char[2];\n+\t  strcpy(__new, \"*\");\n+\t  _M_impl->_M_names[__i] = __new;\n+\t}\n     }\n \n   // 22.1.1.1.2  Class locale::facet"}, {"sha": "b9575cf70bc5c1b54a1d6422a47ae140a5ce2fdf", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -55,10 +55,7 @@ namespace std\n \n   codecvt<char, char, mbstate_t>::\n   ~codecvt()\n-   {\n-     if (_M_c_locale_codecvt != _S_c_locale)\n-       _S_destroy_c_locale(_M_c_locale_codecvt);\n-   }\n+  { _S_destroy_c_locale(_M_c_locale_codecvt); }\n   \n   codecvt_base::result\n   codecvt<char, char, mbstate_t>::\n@@ -123,7 +120,7 @@ namespace std\n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(size_t __refs)\n   : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs)\n-  { _M_c_locale_codecvt = _S_c_locale; }  \n+  { _M_c_locale_codecvt = _S_c_locale; }\n \n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(__c_locale __cloc, size_t __refs)\n@@ -132,10 +129,7 @@ namespace std\n \n   codecvt<wchar_t, char, mbstate_t>::\n   ~codecvt()\n-  {\n-    if (_M_c_locale_codecvt != _S_c_locale)\n-      _S_destroy_c_locale(_M_c_locale_codecvt); \n-  }\n+  { _S_destroy_c_locale(_M_c_locale_codecvt); }\n   \n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::"}, {"sha": "3d5ee618c53ee7dfb051b193d59b634a6a084556", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -79,8 +79,7 @@ namespace std\n \n   ctype<char>::~ctype()\n   { \n-    if (_M_c_locale_ctype != _S_c_locale)\n-      _S_destroy_c_locale(_M_c_locale_ctype);\n+    _S_destroy_c_locale(_M_c_locale_ctype);\n     if (_M_del) \n       delete[] this->table(); \n   }\n@@ -135,17 +134,13 @@ namespace std\n   { _M_c_locale_ctype = _S_clone_c_locale(__cloc); }\n \n   ctype<wchar_t>::~ctype() \n-  { \n-    if (_M_c_locale_ctype != _S_c_locale)\n-      _S_destroy_c_locale(_M_c_locale_ctype); \n-  }\n+  { _S_destroy_c_locale(_M_c_locale_ctype); }\n \n   template<>\n     ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n     : ctype<wchar_t>(__refs) \n     { \t\n-      if (_M_c_locale_ctype != _S_c_locale)\n-\t_S_destroy_c_locale(_M_c_locale_ctype);\n+      _S_destroy_c_locale(_M_c_locale_ctype);\n       _S_create_c_locale(_M_c_locale_ctype, __s); \n     }\n #endif"}, {"sha": "079fff8fdab0eff6cab8653f6c042c3cf715d69d", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -59,6 +59,10 @@ namespace std\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n   fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n \n+  typedef char fake_facet_name[sizeof(char*)]\n+  __attribute__ ((aligned(__alignof__(char*))));\n+  fake_facet_name facet_name[6 + _GLIBCPP_NUM_CATEGORIES];\n+\n   typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n   fake_ctype_c ctype_c;\n@@ -200,7 +204,6 @@ namespace std\n   fake_wfilebuf buf_wcerr;\n #endif\n \n-\n   // Globals for once-only runtime initialization of mutex objects.  This\n   // allows static initialization of these objects on systems that need a\n   // function call to initialize a mutex.  For example, see stl_threads.h."}, {"sha": "8f2c86381779e0f23eab04b87c5cfcf3f26a78c1", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -35,11 +35,7 @@\n #include <clocale>\n #include <cstring>\n #include <cassert>\n-#include <limits>\n-#include <exception>\n #include <locale>\n-#include <istream>\n-#include <ostream>\n \n namespace std\n {"}, {"sha": "641bee21baaad5bc958aec4a0eef823ee7916640", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 117, "deletions": 34, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -31,19 +31,14 @@\n #include <cassert>\n #include <cctype>\n #include <cwctype>     // For towupper, etc.\n-#include <limits>\n-#include <exception>\n #include <locale>\n-#include <istream>\n-#include <ostream>\n #include <bits/atomicity.h>\n \n namespace std \n {\n   // Defined in globals.cc.\n   extern locale \t\tc_locale;\n   extern locale::_Impl \t\tc_locale_impl;\n-  extern locale::facet**\tfacet_vec;\n \n   // Definitions for static const data members of locale.\n   const locale::category \tlocale::none;\n@@ -57,7 +52,8 @@ namespace std\n \n   locale::_Impl* \t\tlocale::_S_classic;\n   locale::_Impl* \t\tlocale::_S_global; \n-  const size_t \t\t\tlocale::_S_num_categories;\n+  const size_t \t\t\tlocale::_S_categories_size;\n+  const size_t \t\t\tlocale::_S_extra_categories_size;\n \n   // Definitions for static const data members of locale::id\n   _Atomic_word locale::id::_S_highwater;  // init'd to 0 by linker\n@@ -146,8 +142,8 @@ namespace std\n     locale::_Impl::_S_id_ctype,\n     locale::_Impl::_S_id_numeric,\n     locale::_Impl::_S_id_collate,\n-    locale::_Impl::_S_id_monetary,\n     locale::_Impl::_S_id_time,\n+    locale::_Impl::_S_id_monetary,\n     locale::_Impl::_S_id_messages,\n     0\n   };\n@@ -192,18 +188,110 @@ namespace std\n \t_S_initialize(); \n \tif (strcmp(__s, \"C\") == 0 || strcmp(__s, \"POSIX\") == 0)\n \t  (_M_impl = _S_classic)->_M_add_reference();\n-\telse if (strcmp(__s, \"\") == 0)\n+\telse if (strcmp(__s, \"\") != 0)\n+\t  _M_impl = new _Impl(__s, 1);\n+\telse\n \t  {\n+\t    // Get it from the environment.\n \t    char* __env = getenv(\"LC_ALL\");\n-\t    if (__env)\n-\t      _M_impl = new _Impl(__env, 1);\n-\t    else if ((__env = getenv(\"LANG\")))\n-\t      _M_impl = new _Impl(__env, 1);\n+\t    // If LC_ALL is set we are done.\n+\t    if (__env && strcmp(__env, \"\") != 0)\n+\t      {\n+\t\tif (strcmp(__env, \"C\") == 0 || strcmp(__env, \"POSIX\") == 0)\n+\t\t  (_M_impl = _S_classic)->_M_add_reference();\n+\t\telse\n+\t\t  _M_impl = new _Impl(__env, 1);\n+\t      }\n \t    else\n-\t      (_M_impl = _S_classic)->_M_add_reference();\n+\t      {\n+\t\tchar* __res;\n+\t\t// LANG may set a default different from \"C\".\n+\t\tchar* __env = getenv(\"LANG\");\n+\t\tif (!__env || strcmp(__env, \"\") == 0 || strcmp(__env, \"C\") == 0\n+\t\t    || strcmp(__env, \"POSIX\") == 0)\n+\t\t  __res = strdup(\"C\");\n+\t\telse \n+\t\t  __res = strdup(__env);\n+\t\t\n+\t\t// Scan the categories looking for the first one\n+\t\t// different from LANG.\n+\t\tsize_t __i = 0;\n+\t\tif (strcmp(__res, \"C\") == 0)\n+\t\t  for (__i = 0; \n+\t\t       __i < _S_categories_size + _S_extra_categories_size; \n+\t\t       ++__i)\n+\t\t    {\n+\t\t      __env = getenv(_S_categories[__i]);\n+\t\t      if (__env && strcmp(__env, \"\") != 0 \n+\t\t\t  && strcmp(__env, \"C\") != 0 \n+\t\t\t  && strcmp(__env, \"POSIX\") != 0) \n+\t\t\tbreak;\n+\t\t    }\n+\t\telse\n+\t\t  for (__i = 0; \n+\t\t       __i < _S_categories_size + _S_extra_categories_size; \n+\t\t       ++__i)\n+\t\t    {\n+\t\t      __env = getenv(_S_categories[__i]);\n+\t\t      if (__env && strcmp(__env, \"\") != 0 \n+\t\t\t  && strcmp(__env, __res) != 0) \n+\t\t\tbreak;\n+\t\t    }\n+\t\n+\t\t// If one is found, build the complete string of\n+\t\t// the form LC_CTYPE=xxx;LC_NUMERIC=yyy; and so on...\n+\t\tif (__i < _S_categories_size + _S_extra_categories_size)\n+\t\t  {\n+\t\t    string __str;\n+\t\t    for (size_t __j = 0; __j < __i; ++__j)\n+\t\t      {\n+\t\t\t__str += _S_categories[__j];\n+\t\t\t__str += \"=\";\n+\t\t\t__str += __res;\n+\t\t\t__str += \";\";\n+\t\t      }\n+\t\t    __str += _S_categories[__i];\n+\t\t    __str += \"=\";\n+\t\t    __str += __env;\n+\t\t    __str += \";\";\n+\t\t    __i++;\n+\t\t    for (; __i < _S_categories_size\n+\t\t\t   + _S_extra_categories_size; ++__i)\n+\t\t      {\n+\t\t\t__env = getenv(_S_categories[__i]);\n+\t\t\tif (!__env || strcmp(__env, \"\") == 0)\n+\t\t\t  {\n+\t\t\t    __str += _S_categories[__i];\n+\t\t\t    __str += '=';\n+\t\t\t    __str += __res;\n+\t\t\t    __str += ';';\n+\t\t\t  }\n+\t\t\telse if (strcmp(__env, \"C\") == 0\n+\t\t\t\t || strcmp(__env, \"POSIX\") == 0)\n+\t\t\t  {\n+\t\t\t    __str += _S_categories[__i];\n+\t\t\t    __str += \"=C;\";\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  {\n+\t\t\t    __str += _S_categories[__i];\n+\t\t\t    __str += \"=\";\n+\t\t\t    __str += __env;\n+\t\t\t    __str += \";\";\n+\t\t\t  }\n+\t\t      }\n+\t\t    __str.erase(__str.end() - 1);\n+\t\t    _M_impl = new _Impl(__str.c_str(), 1);\n+\t\t  }\n+\t\t// ... otherwise either an additional instance of\n+\t\t// the \"C\" locale or LANG.\n+\t\telse if (strcmp(__res, \"C\") == 0)\n+\t\t  (_M_impl = _S_classic)->_M_add_reference();\n+\t\telse\n+\t\t  _M_impl = new _Impl(__res, 1);\n+\t\tfree(__res);\n+\t      }\n \t  }\n-\telse\n-\t  _M_impl = new _Impl(__s, 1);\n       }\n     else\n       __throw_runtime_error(\"attempt to create locale from NULL name\");\n@@ -261,20 +349,22 @@ namespace std\n   string\n   locale::name() const\n   {\n-    // Need some kind of separator character. This one was pretty much\n-    // arbitrarily chosen as to not conflict with glibc locales: the\n-    // exact formatting is not set in stone.\n-    const char __separator = '|';\n-\n     string __ret;\n     if (_M_impl->_M_check_same_name())\n       __ret = _M_impl->_M_names[0];\n     else\n       {\n-\tfor (size_t i = 0; i < _S_num_categories; ++i)\n+\t__ret += _S_categories[0];\n+\t__ret += \"=\";\n+\t__ret += _M_impl->_M_names[0]; \n+\tfor (size_t __i = 1; \n+\t     __i < _S_categories_size + _S_extra_categories_size; \n+\t     ++__i)\n \t  {\n-\t    __ret += __separator;\n-\t    __ret += _M_impl->_M_names[i];\n+\t    __ret += \";\";\n+\t    __ret += _S_categories[__i];\n+\t    __ret += \"=\";\n+\t    __ret += _M_impl->_M_names[__i];\n \t  }\n       }\n     return __ret;\n@@ -292,11 +382,7 @@ namespace std\n \t  {\n \t    // 26 Standard facets, 2 references.\n \t    // One reference for _M_classic, one for _M_global\n-\t    facet** f = new(&facet_vec) facet*[_GLIBCPP_NUM_FACETS];\n-\t    for (size_t __i = 0; __i < _GLIBCPP_NUM_FACETS; ++__i)\n-\t      f[__i] = 0;\n-\n-\t    _S_classic = new (&c_locale_impl) _Impl(f, 2, true);\n+\t    _S_classic = new (&c_locale_impl) _Impl(0, 2, true);\n \t    _S_global = _S_classic; \t    \n \t    new (&c_locale) locale(_S_classic);\n \t  }\n@@ -361,11 +447,8 @@ namespace std\n   ~facet() { }\n \n   locale::facet::\n-  facet(size_t __refs) throw() : _M_references(__refs) \n-  { \n-    if (!_S_c_locale)\n-      _S_create_c_locale(_S_c_locale, \"C\");\n-  }\n+  facet(size_t __refs) throw() : _M_references(__refs ? 1 : 0) \n+  { }\n \n   void  \n   locale::facet::\n@@ -376,7 +459,7 @@ namespace std\n   locale::facet::\n   _M_remove_reference() throw()\n   {\n-    if (__exchange_and_add(&_M_references, -1) == 0)\n+    if (__exchange_and_add(&_M_references, -1) == 1)\n       {\n         try \n \t  { delete this; }  "}, {"sha": "a233eb3ec9dd5be24eafacf9c4ece9dea4abd08e", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 105, "deletions": 43, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -33,6 +33,9 @@\n namespace std\n {\n   // Defined in globals.cc.\n+  extern locale::facet** facet_vec;\n+  extern char* facet_name[6 + _GLIBCPP_NUM_CATEGORIES];\n+\n   extern std::ctype<char>\t\t\tctype_c;\n   extern std::collate<char> \t\t\tcollate_c;\n   extern numpunct<char> \t\t\tnumpunct_c;\n@@ -71,6 +74,10 @@ namespace std\n       if (_M_facets[__i])\n \t_M_facets[__i]->_M_remove_reference();\n     delete [] _M_facets;\n+\n+    for (size_t __i = 0; \n+\t __i < _S_categories_size + _S_extra_categories_size; ++__i)\n+      delete [] _M_names[__i];  \n   }\n \n   // Clone existing _Impl object.\n@@ -95,14 +102,19 @@ namespace std\n \tif (_M_facets[__i])\n \t  _M_facets[__i]->_M_add_reference();\n       }\n-    for (size_t __i = 0; __i < _S_num_categories; ++__i)\n-      _M_names[__i] = __imp._M_names[__i];\n+    for (size_t __i = 0; \n+\t __i < _S_categories_size + _S_extra_categories_size; ++__i)\n+      {\n+\tchar* __new = new char[strlen(__imp._M_names[__i]) + 1];\n+\tstrcpy(__new, __imp._M_names[__i]);\n+\t_M_names[__i] = __new;\n+      }\n   }\n \n   // Construct named _Impl.\n   locale::_Impl::\n   _Impl(const char* __s, size_t __refs) \n-  : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS) // XXX\n+  : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS) \n   {\n     // Initialize the underlying locale model, which also checks\n     // to see if the given name is valid.\n@@ -122,11 +134,40 @@ namespace std\n       }\n \n     // Name all the categories.\n-    for (size_t i = 0; i < _S_num_categories; ++i)\n-      _M_names[i] = __s;\n+    if (!strchr(__s, ';'))\n+      {\n+\tsize_t __len = strlen(__s) + 1;\n+\tfor (size_t __i = 0; \n+\t     __i < _S_categories_size + _S_extra_categories_size; ++__i)\n+\t  {\n+\t    _M_names[__i] = new char[__len];\n+\t    strcpy(_M_names[__i], __s);\n+\t  }\n+      }\n+    else\n+      {\n+\tchar* __tmp = strdup(__s);\n+\t__tmp[strlen(__tmp)] = ';';\n+\tstrtok(__tmp, \"=;\");\n+\tfor (size_t __i = 0; \n+\t     __i < _S_categories_size + _S_extra_categories_size - 1; ++__i)\n+\t  {\n+\t    char* __src = strtok(NULL, \"=;\");\n+\t    char* __new = new char[strlen(__src) + 1];\n+\t    strcpy(__new, __src);\n+\t    _M_names[__i] = __new;\n+\t    strtok(NULL, \"=;\");\n+\t  }\n+\tchar* __src = strtok(NULL, \"=;\");\n+\tchar* __new = new char[strlen(__src) + 1];\n+\tstrcpy(__new, __src);\n+\t_M_names[_S_categories_size + _S_extra_categories_size - 1] = __new;\n \n-    // Construct all standard facets and add them to _M_facets.\n-    _M_init_facet(new std::ctype<char>(__cloc));\n+\tfree(__tmp);\n+      }\n+      \n+    // Construct all standard facets and add them to _M_facets.  \n+    _M_init_facet(new std::ctype<char>(__cloc, 0, false));\n     _M_init_facet(new codecvt<char, char, mbstate_t>(__cloc));\n     _M_init_facet(new numpunct<char>(__cloc));\n     _M_init_facet(new num_get<char>);\n@@ -162,55 +203,69 @@ namespace std\n \n   // Construct \"C\" _Impl.\n   locale::_Impl::\n-  _Impl(facet** __f, size_t __refs, bool) \n-  : _M_references(__refs), _M_facets(__f), _M_facets_size(_GLIBCPP_NUM_FACETS)\n+  _Impl(facet**, size_t __refs, bool) \n+  : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS)\n   {\n+    // Initialize the underlying locale model.\n+    locale::facet::_S_create_c_locale(locale::facet::_S_c_locale, \"C\");\n+\n+    _M_facets = new(&facet_vec) facet*[_M_facets_size];\n+    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+      _M_facets[__i] = 0;\n+\n     // Name all the categories.\n-    for (size_t i = 0; i < _S_num_categories; ++i)\n-      _M_names[i] = \"C\";\n+    for (size_t __i = 0; \n+\t __i < _S_categories_size + _S_extra_categories_size; ++__i)\n+      {\n+\t_M_names[__i]  = new (&facet_name[__i]) char[2];\n+\tstrcpy(_M_names[__i], \"C\");\n+      }\n \n     // This is needed as presently the C++ version of \"C\" locales\n     // != data in the underlying locale model for __timepunct,\n     // numpunct, and moneypunct. Also, the \"C\" locales must be\n     // constructed in a way such that they are pre-allocated.\n-    _M_init_facet(new (&ctype_c) std::ctype<char>);\n-    _M_init_facet(new (&codecvt_c) codecvt<char, char, mbstate_t>);\n-    _M_init_facet(new (&numpunct_c) numpunct<char>);\n-    _M_init_facet(new (&num_get_c) num_get<char>);\n-    _M_init_facet(new (&num_put_c) num_put<char>);\n-    _M_init_facet(new (&collate_c) std::collate<char>);\n-    _M_init_facet(new (&moneypunct_fc) moneypunct<char, false>);\n-    _M_init_facet(new (&moneypunct_tc) moneypunct<char, true>);\n-    _M_init_facet(new (&money_get_c) money_get<char>);\n-    _M_init_facet(new (&money_put_c) money_put<char>);\n-    _M_init_facet(new (&timepunct_c) __timepunct<char>);\n-    _M_init_facet(new (&time_get_c) time_get<char>);\n-    _M_init_facet(new (&time_put_c) time_put<char>);\n-    _M_init_facet(new (&messages_c) std::messages<char>);\t\n+    // NB: Set locale::facets(ref) count to one so that each individual\n+    // facet is not destroyed when the locale (and thus locale::_Impl) is\n+    // destroyed.\n+    _M_init_facet(new (&ctype_c) std::ctype<char>(0, false, 1));\n+    _M_init_facet(new (&codecvt_c) codecvt<char, char, mbstate_t>(1));\n+    _M_init_facet(new (&numpunct_c) numpunct<char>(1));\n+    _M_init_facet(new (&num_get_c) num_get<char>(1));\n+    _M_init_facet(new (&num_put_c) num_put<char>(1));\n+    _M_init_facet(new (&collate_c) std::collate<char>(1));\n+    _M_init_facet(new (&moneypunct_fc) moneypunct<char, false>(1));\n+    _M_init_facet(new (&moneypunct_tc) moneypunct<char, true>(1));\n+    _M_init_facet(new (&money_get_c) money_get<char>(1));\n+    _M_init_facet(new (&money_put_c) money_put<char>(1));\n+    _M_init_facet(new (&timepunct_c) __timepunct<char>(1));\n+    _M_init_facet(new (&time_get_c) time_get<char>(1));\n+    _M_init_facet(new (&time_put_c) time_put<char>(1));\n+    _M_init_facet(new (&messages_c) std::messages<char>(1));\t\n #ifdef  _GLIBCPP_USE_WCHAR_T\n-    _M_init_facet(new (&ctype_w) std::ctype<wchar_t>);\n-    _M_init_facet(new (&codecvt_w) codecvt<wchar_t, char, mbstate_t>);\n-    _M_init_facet(new (&numpunct_w) numpunct<wchar_t>);\n-    _M_init_facet(new (&num_get_w) num_get<wchar_t>);\n-    _M_init_facet(new (&num_put_w) num_put<wchar_t>);\n-    _M_init_facet(new (&collate_w) std::collate<wchar_t>);\n-    _M_init_facet(new (&moneypunct_fw) moneypunct<wchar_t, false>);\n-    _M_init_facet(new (&moneypunct_tw) moneypunct<wchar_t, true>);\n-    _M_init_facet(new (&money_get_w) money_get<wchar_t>);\n-    _M_init_facet(new (&money_put_w) money_put<wchar_t>);\n-    _M_init_facet(new (&timepunct_w) __timepunct<wchar_t>);\n-    _M_init_facet(new (&time_get_w) time_get<wchar_t>);\n-    _M_init_facet(new (&time_put_w) time_put<wchar_t>);\n-    _M_init_facet(new (&messages_w) std::messages<wchar_t>);\n-#endif\t  \n+    _M_init_facet(new (&ctype_w) std::ctype<wchar_t>(1));\n+    _M_init_facet(new (&codecvt_w) codecvt<wchar_t, char, mbstate_t>(1));\n+    _M_init_facet(new (&numpunct_w) numpunct<wchar_t>(1));\n+    _M_init_facet(new (&num_get_w) num_get<wchar_t>(1));\n+    _M_init_facet(new (&num_put_w) num_put<wchar_t>(1));\n+    _M_init_facet(new (&collate_w) std::collate<wchar_t>(1));\n+    _M_init_facet(new (&moneypunct_fw) moneypunct<wchar_t, false>(1));\n+    _M_init_facet(new (&moneypunct_tw) moneypunct<wchar_t, true>(1));\n+    _M_init_facet(new (&money_get_w) money_get<wchar_t>(1));\n+    _M_init_facet(new (&money_put_w) money_put<wchar_t>(1));\n+    _M_init_facet(new (&timepunct_w) __timepunct<wchar_t>(1));\n+    _M_init_facet(new (&time_get_w) time_get<wchar_t>(1));\n+    _M_init_facet(new (&time_put_w) time_put<wchar_t>(1));\n+    _M_init_facet(new (&messages_w) std::messages<wchar_t>(1));\n+#endif \n   }\n   \n   void\n   locale::_Impl::\n   _M_replace_categories(const _Impl* __imp, category __cat)\n   {\n     category __mask;\n-    for (unsigned int __ix = 0; __ix < _S_num_categories; ++__ix)\n+    for (size_t __ix = 0; __ix < _S_categories_size; ++__ix)\n       {\n \t__mask = 1 << __ix;\n \tif (__mask & __cat)\n@@ -220,7 +275,12 @@ namespace std\n \t    // If both have names, go ahead and mangle.\n \t    if (strcmp(_M_names[__ix], \"*\") != 0 \n \t\t&& strcmp(__imp->_M_names[__ix], \"*\") != 0)\n-\t      _M_names[__ix] = __imp->_M_names[__ix];\n+\t      {\n+\t\tdelete [] _M_names[__ix];\n+\t\tchar* __new = new char[strlen(__imp->_M_names[__ix]) + 1];\n+\t\tstrcpy(__new, __imp->_M_names[__ix]);\n+\t\t_M_names[__ix] = __new;\n+\t      }\n \t  }\n       }\n   }\n@@ -250,6 +310,8 @@ namespace std\n     if (__fp)\n       {\n \tsize_t __index = __idp->_M_id();\n+\n+\t// Check size of facet vector to ensure adequate room.\n \tif (__index > _M_facets_size - 1)\n \t  {\n \t    facet** __old = _M_facets;\n@@ -266,11 +328,11 @@ namespace std\n \t    delete [] __old;\n \t  }\n \n+\t__fp->_M_add_reference();\n \tfacet*& __fpr = _M_facets[__index];\n \tif (__fpr)\n \t  {\n \t    // Replacing an existing facet. Order matters.\n-\t    __fp->_M_add_reference();\n \t    __fpr->_M_remove_reference();\n \t    __fpr = __fp;\n \t  }"}, {"sha": "6f4b1bf5cff17ca16fc103cc0344d414834d9774", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -121,7 +121,7 @@ void test01()\n   string str1, str2;\n \n   // construct a locale object with the C facet\n-  const locale& \tloc01 = locale::classic();\n+  const locale\tloc01 = locale::classic();\n \n   // 1\n   // template <class Facet> locale(const locale& other, Facet* f)\n@@ -315,16 +315,92 @@ void test03()\n {\n   bool test = true;\n #ifdef _GLIBCPP_HAVE_SETENV \n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"it_IT\", 1))\n+  const char* oldLC_ALL = getenv(\"LC_ALL\");\n+  if (!setenv(\"LC_ALL\", \"it_IT\", 1))\n     {\n       std::locale loc(\"\"); \n       VERIFY( loc.name() == \"it_IT\" );\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n+      setenv(\"LC_ALL\", oldLC_ALL ? oldLC_ALL : \"\", 1);\n     }\n #endif\n }\n \n+\n+// More tests for Posix locale::name. \n+void test04()\n+{\n+  bool test = true;\n+#ifdef _GLIBCPP_HAVE_SETENV\n+\n+  const char* oldLC_ALL = getenv(\"LC_ALL\") ? strdup(getenv(\"LC_ALL\")) : \"\";\n+  const char* oldLANG = getenv(\"LANG\") ? strdup(getenv(\"LANG\")) : \"\";\n+\n+  // Check that a \"POSIX\" LC_ALL is equivalent to \"C\".\n+  if (!setenv(\"LC_ALL\", \"POSIX\", 1))\n+    {\n+      std::locale loc(\"\");\n+      VERIFY( loc.name() == \"C\" );\n+    }\n+\n+  // Check the default set by LANG.\n+  if (!setenv(\"LC_ALL\", \"\", 1) && !setenv(\"LANG\", \"fr_FR\", 1))\n+    {\n+      std::locale loc(\"\");\n+      VERIFY( loc.name() == \"fr_FR\" );\n+    }\n+\n+  // Check that a \"POSIX\" LANG is equivalent to \"C\".\n+  if (!setenv(\"LANG\", \"POSIX\", 1))\n+    {\n+      std::locale loc(\"\"); \n+      VERIFY( loc.name() == \"C\" );\n+    }\n+\n+  // Setting a category in the \"C\" default.\n+  const char* oldLC_COLLATE =\n+    getenv(\"LC_COLLATE\") ? strdup(getenv(\"LC_COLLATE\")) : \"\";\n+  if (!setenv(\"LC_COLLATE\", \"de_DE\", 1))\n+    {\n+      std::locale loc(\"\");\n+      VERIFY( loc.name() == \"LC_CTYPE=C;LC_NUMERIC=C;LC_COLLATE=de_DE;\"\n+\t      \"LC_TIME=C;LC_MONETARY=C;LC_MESSAGES=C;LC_PAPER=C;\"\n+\t      \"LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=C;\"\n+\t      \"LC_IDENTIFICATION=C\" );\n+    }\n+\n+  // Changing the LANG default while LC_COLLATE is set.\n+  if (!setenv(\"LANG\", \"fr_FR\", 1))\n+    {\n+      std::locale loc(\"\");\n+      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n+\t      \"LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;\"\n+\t      \"LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;\"\n+\t      \"LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;\"\n+\t      \"LC_IDENTIFICATION=fr_FR\" );\n+    }\n+  \n+  // Changing another (C only) category.\n+  const char* oldLC_IDENTIFICATION =\n+    getenv(\"LC_IDENTIFICATION\") ? strdup(getenv(\"LC_IDENTIFICATION\")) : \"\";\n+  if (!setenv(\"LC_IDENTIFICATION\", \"it_IT\", 1))\n+    {\n+      std::locale loc(\"\");\n+      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n+\t      \"LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;\"\n+\t      \"LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;\"\n+\t      \"LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;\"\n+\t      \"LC_IDENTIFICATION=it_IT\" );\n+    }\n+\n+  // Restore the environment.\n+  setenv(\"LC_ALL\", oldLC_ALL ? oldLC_ALL : \"\", 1);\n+  setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n+  setenv(\"LC_COLLATE\", oldLC_COLLATE ? oldLC_COLLATE : \"\", 1);\n+  setenv(\"LC_IDENTIFICATION\",\n+\t oldLC_IDENTIFICATION ? oldLC_IDENTIFICATION : \"\", 1);\n+#endif\n+}\n+\n int main()\n {\n   test00();\n@@ -335,6 +411,7 @@ int main()\n \n   test02();\n   test03();\n+  test04();\n \n   return 0;\n }"}, {"sha": "9c613b4c2033564ecb2890207492ebebfc0a9493", "filename": "libstdc++-v3/testsuite/22_locale/facet.cc", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-31 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000 Free Software Foundation\n+// Copyright (C) 2000, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,6 +25,7 @@\n #include <stdexcept>\n #include <string>\n #include <iterator>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n // 1 a class if a facet if it is publicly derived from another facet\n@@ -233,9 +234,69 @@ void test01()\n     }\n }\n \n+// Static counter for use in checking ctors/dtors.\n+static std::size_t counter;\n+\n+class surf : public std::locale::facet\n+{\n+public:\n+  static std::locale::id \t       \tid;\n+  surf(size_t refs = 0): std::locale::facet(refs) { ++counter; }\n+  ~surf() { --counter; }\n+};\n+\n+std::locale::id surf::id;\n+\n+typedef surf facet_type;\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // 1: Destroyed when out of scope.\n+  VERIFY( counter == 0 );\n+  {\n+    locale loc01(locale::classic(), new facet_type);\n+    VERIFY( counter == 1 );\n+  }\n+  VERIFY( counter == 0 );\n+\n+  // 2: Not destroyed when out of scope, deliberately leaked.\n+  VERIFY( counter == 0 );\n+  {\n+    // Default refs argument is zero.\n+    locale loc02(locale::classic(), new facet_type(1));\n+    VERIFY( counter == 1 );\n+  }\n+  VERIFY( counter == 1 );\n+\n+  // 3: Pathological.\n+  counter = 0;\n+  {\n+    // Test bounds.\n+    facet_type* f = new facet_type(numeric_limits<size_t>::max());\n+    VERIFY( counter == 1 );\n+    // Add a reference.\n+    locale loc01(locale::classic(), f);\n+    {\n+      // Add another reference...\n+      locale loc02(locale::classic(), f);\n+    }\n+    VERIFY( counter == 1 );\n+  }\n+\n+  // 4: Named locale should destroy facets when it goes out of scope.\n+  // Not quite sure how to test for this w/o valgrind at the moment.\n+  {\n+    locale loc03(\"es_MX\");\n+  }\n+}\n+\n int main ()\n {\n   test01();\n \n+  test02();\n   return 0;\n }"}, {"sha": "06b125852c26d031699d2a2e4b19a16aaba74782", "filename": "libstdc++-v3/testsuite/22_locale/static_members.cc", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53f832ac68acf6b5f8dee96bc1aeb57081fe76/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc?ref=aa53f832ac68acf6b5f8dee96bc1aeb57081fe76", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000 Free Software Foundation\n+// Copyright (C) 2000, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,7 +22,9 @@\n \n #include <cwchar> // for mbstate_t\n #include <locale>\n-#include <testsuite_hooks.h>\n+#include <iostream>\n+//#include <testsuite_hooks.h>\n+#define VERIFY(x) test &= x\n \n typedef std::codecvt<char, char, std::mbstate_t> ccodecvt;\n class gnu_codecvt: public ccodecvt { }; \n@@ -34,10 +36,12 @@ void test01()\n   bool test = true;\n   string str1, str2;\n \n-  // construct a locale object with the C facet\n-  const locale& \tloc01 = locale::classic();\n-  // construct a locale object with the specialized facet.\n-  locale                loc02(locale::classic(), new gnu_codecvt);\n+  // Construct a locale object with the C facet.\n+  const locale loc_env(\"\");\n+  const locale loc01 = locale::classic();\n+\n+  // Construct a locale object with the specialized facet.\n+  locale loc02(locale::classic(), new gnu_codecvt);\n   VERIFY ( loc01 != loc02 );\n   VERIFY ( !(loc01 == loc02) );\n \n@@ -54,11 +58,45 @@ void test01()\n   locale loc05;\n   VERIFY (loc05 != loc03);\n   VERIFY (loc05 == loc02);\n+\n+  // Reset global locale.\n+  locale::global(loc_env);\n+}\n+\n+// Sanity check locale::global(loc) and setlocale.\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  const string ph(\"en_PH\");\n+  const string mx(\"es_MX\");\n+\n+  const locale loc_ph(ph.c_str());\n+  const locale loc_mx(mx.c_str());\n+\n+  // Get underlying current locale and environment settings.\n+  const string lc_all_orig = std::setlocale(LC_ALL, NULL);\n+  const locale loc_orig(\"\");\n+\n+  // setlocale to en_PH\n+  string lc_all_ph = std::setlocale(LC_ALL, ph.c_str());\n+\n+  const locale loc_env(\"\");\n+  VERIFY( loc_env == loc_orig );\n+\n+  locale::global(loc_mx);\n+  string lc_all_mx = std::setlocale(LC_ALL, NULL);\n+  VERIFY( lc_all_mx == mx.c_str() );\n+\n+  // Restore global info.\n+  locale::global(loc_orig);\n }\n \n int main ()\n {\n   test01();\n+  test02();\n \n   return 0;\n }"}]}