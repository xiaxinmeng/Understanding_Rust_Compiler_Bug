{"sha": "7f3d8f56e747b1a814c633a9ab160adf02b5d498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzZDhmNTZlNzQ3YjFhODE0YzYzM2E5YWIxNjBhZGYwMmI1ZDQ5OA==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2011-12-05T10:42:53Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2011-12-05T10:42:53Z"}, "message": "Use vcvt from fixed to floating point where applicable.\n\n2011-12-05  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\n         * config/arm/arm.c (vfp3_const_double_for_fract_bits): Define.\n         * config/arm/arm-protos.h (vfp3_const_double_for_fract_bits): Declare.\n         * config/arm/constraints.md (\"Dt\"): New constraint.\n         * config/arm/predicates.md (const_double_vcvt_power_of_two_reciprocal):\n          New.\n         * config/arm/vfp.md (*arm_combine_vcvt_f32_s32): New.\n         (*arm_combine_vcvt_f32_u32): New.\n\nFrom-SVN: r182005", "tree": {"sha": "4a87ff296b65cc5bfe682da8351229352bb7e4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a87ff296b65cc5bfe682da8351229352bb7e4d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f3d8f56e747b1a814c633a9ab160adf02b5d498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3d8f56e747b1a814c633a9ab160adf02b5d498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3d8f56e747b1a814c633a9ab160adf02b5d498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3d8f56e747b1a814c633a9ab160adf02b5d498/comments", "author": null, "committer": null, "parents": [{"sha": "3128f9557f09ae599cc07f5e5bbcd96a8c4ec957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3128f9557f09ae599cc07f5e5bbcd96a8c4ec957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3128f9557f09ae599cc07f5e5bbcd96a8c4ec957"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "8522c9986d6430b5d1c5cb822348241a0e3ac12e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f3d8f56e747b1a814c633a9ab160adf02b5d498", "patch": "@@ -1,3 +1,13 @@\n+2011-12-05  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+       * config/arm/arm.c (vfp3_const_double_for_fract_bits): Define.\n+       * config/arm/arm-protos.h (vfp3_const_double_for_fract_bits): Declare.\n+       * config/arm/constraints.md (\"Dt\"): New constraint.\n+       * config/arm/predicates.md\n+       (const_double_vcvt_power_of_two_reciprocal): New.\n+       * config/arm/vfp.md (*arm_combine_vcvt_f32_s32): New.\n+       (*arm_combine_vcvt_f32_u32): New.\n+\n 2011-12-05  Richard Guenther  <rguenther@suse.de>\n \n \t* cgraph.c (cgraph_create_edge_1): Initialize"}, {"sha": "296550aff1c0c10b3be9465b0675e05bc3df3832", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=7f3d8f56e747b1a814c633a9ab160adf02b5d498", "patch": "@@ -241,6 +241,7 @@ struct tune_params\n };\n \n extern const struct tune_params *current_tune;\n+extern int vfp3_const_double_for_fract_bits (rtx);\n #endif /* RTX_CODE */\n \n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "65b4e9d58ae9ca93c2f3469c492371715794423a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7f3d8f56e747b1a814c633a9ab160adf02b5d498", "patch": "@@ -17671,6 +17671,11 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       }\n       return;\n \n+    case 'v':\n+\tgcc_assert (GET_CODE (x) == CONST_DOUBLE);\n+\tfprintf (stream, \"#%d\", vfp3_const_double_for_fract_bits (x));\n+\treturn;\n+\n     /* Register specifier for vld1.16/vst1.16.  Translate the S register\n        number into a D register number and element index.  */\n     case 'z':\n@@ -25038,4 +25043,27 @@ arm_count_output_move_double_insns (rtx *operands)\n   return count;\n }\n \n+int\n+vfp3_const_double_for_fract_bits (rtx operand)\n+{\n+  REAL_VALUE_TYPE r0;\n+  \n+  if (GET_CODE (operand) != CONST_DOUBLE)\n+    return 0;\n+  \n+  REAL_VALUE_FROM_CONST_DOUBLE (r0, operand);\n+  if (exact_real_inverse (DFmode, &r0))\n+    {\n+      if (exact_real_truncate (DFmode, &r0))\n+\t{\n+\t  HOST_WIDE_INT value = real_to_integer (&r0);\n+\t  value = value & 0xffffffff;\n+\t  if ((value != 0) && ( (value & (value - 1)) == 0))\n+\t    return int_log2 (value);\n+\t}\n+    }\n+  return 0;\n+}\n+\n #include \"gt-arm.h\"\n+"}, {"sha": "7d0269ae5065b35e5bd8e9e6fffe718aa0fab6ff", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=7f3d8f56e747b1a814c633a9ab160adf02b5d498", "patch": "@@ -29,7 +29,7 @@\n ;; in Thumb-1 state: I, J, K, L, M, N, O\n \n ;; The following multi-letter normal constraints have been used:\n-;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv, Dy, Di, Dz\n+;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv, Dy, Di, Dt, Dz\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd\n ;; in Thumb-2 state: Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py\n \n@@ -291,6 +291,12 @@\n  (and (match_code \"const_double\")\n       (match_test \"TARGET_32BIT && TARGET_VFP_DOUBLE && vfp3_const_double_rtx (op)\")))\n \n+(define_constraint \"Dt\" \n+ \"@internal\n+  In ARM/ Thumb2 a const_double which can be used with a vcvt.f32.s32 with fract bits operation\"\n+  (and (match_code \"const_double\")\n+       (match_test \"TARGET_32BIT && TARGET_VFP && vfp3_const_double_for_fract_bits (op)\")))\n+\n (define_memory_constraint \"Ut\"\n  \"@internal\n   In ARM/Thumb-2 state an address valid for loading/storing opaque structure"}, {"sha": "b535335a3fc07619a05b5564ed93f36f94ceac24", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=7f3d8f56e747b1a814c633a9ab160adf02b5d498", "patch": "@@ -754,6 +754,11 @@\n   return true; \n })\n \n+(define_predicate \"const_double_vcvt_power_of_two_reciprocal\"\n+  (and (match_code \"const_double\")\n+       (match_test \"TARGET_32BIT && TARGET_VFP \n+       \t\t   && vfp3_const_double_for_fract_bits (op)\")))\n+\n (define_predicate \"neon_struct_operand\"\n   (and (match_code \"mem\")\n        (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, 2)\")))"}, {"sha": "ad19e31ffa46eab20019edb44aa1e531ff3b3bc4", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8f56e747b1a814c633a9ab160adf02b5d498/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=7f3d8f56e747b1a814c633a9ab160adf02b5d498", "patch": "@@ -1144,9 +1144,40 @@\n    (set_attr \"type\" \"fcmpd\")]\n )\n \n+;; Fixed point to floating point conversions. \n+(define_code_iterator FCVT [unsigned_float float])\n+(define_code_attr FCVTI32typename [(unsigned_float \"u32\") (float \"s32\")])\n+\n+(define_insn \"*combine_vcvt_f32_<FCVTI32typename>\"\n+  [(set (match_operand:SF 0 \"s_register_operand\" \"=t\")\n+\t(mult:SF (FCVT:SF (match_operand:SI 1 \"s_register_operand\" \"0\"))\n+\t\t (match_operand 2 \n+\t\t\t\"const_double_vcvt_power_of_two_reciprocal\" \"Dt\")))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP3 && !flag_rounding_math\"\n+  \"vcvt.f32.<FCVTI32typename>\\\\t%0, %1, %v2\"\n+ [(set_attr \"predicable\" \"no\")\n+  (set_attr \"type\" \"f_cvt\")]\n+)\n \n-;; Store multiple insn used in function prologue.\n+;; Not the ideal way of implementing this. Ideally we would be able to split\n+;; this into a move to a DP register and then a vcvt.f64.i32\n+(define_insn \"*combine_vcvt_f64_<FCVTI32typename>\"\n+  [(set (match_operand:DF 0 \"s_register_operand\" \"=x,x,w\")\n+\t(mult:DF (FCVT:DF (match_operand:SI 1 \"s_register_operand\" \"r,t,r\"))\n+\t\t (match_operand 2 \n+\t\t     \"const_double_vcvt_power_of_two_reciprocal\" \"Dt,Dt,Dt\")))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP3 && !flag_rounding_math \n+  && !TARGET_VFP_SINGLE\"\n+  \"@\n+  vmov.f32\\\\t%0, %1\\;vcvt.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\n+  vmov.f32\\\\t%0, %1\\;vcvt.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\n+  vmov.f64\\\\t%0, %1, %1\\; vcvt.f64.<FCVTI32typename>\\\\t%P0, %P0, %v2\"\n+ [(set_attr \"predicable\" \"no\")\n+  (set_attr \"type\" \"f_cvt\")\n+  (set_attr \"length\" \"8\")]\n+)\n \n+;; Store multiple insn used in function prologue.\n (define_insn \"*push_multi_vfp\"\n   [(match_parallel 2 \"multi_register_push\"\n     [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")"}]}