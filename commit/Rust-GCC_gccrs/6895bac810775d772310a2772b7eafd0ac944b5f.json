{"sha": "6895bac810775d772310a2772b7eafd0ac944b5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg5NWJhYzgxMDc3NWQ3NzIzMTBhMjc3MmI3ZWFmZDBhYzk0NGI1Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-25T23:30:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-25T23:30:10Z"}, "message": "c-decl.c (build_enumerator): Allow values folding to integer constants but not integer constant expressions...\n\n\t* c-decl.c (build_enumerator): Allow values folding to integer\n\tconstants but not integer constant expressions with a pedwarn if\n\tpedantic.\n\ntestsuite:\n\t* gcc.dg/enum-const-1.c, gcc.dg/enum-const-2.c,\n\tgcc.dg/enum-const-3.c: New tests.\n\t* gcc.dg/gnu89-const-expr-1.c, gcc.dg/gnu99-const-expr-1.c: Use\n\t-pedantic-errors.  Update expected diagnostics.\n\nFrom-SVN: r146789", "tree": {"sha": "35521b0d5e431f68faee7dbbfd427e26918ae543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35521b0d5e431f68faee7dbbfd427e26918ae543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6895bac810775d772310a2772b7eafd0ac944b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6895bac810775d772310a2772b7eafd0ac944b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6895bac810775d772310a2772b7eafd0ac944b5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6895bac810775d772310a2772b7eafd0ac944b5f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24070fcb42eca4e9df8129f9c3ffb3cf71379fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24070fcb42eca4e9df8129f9c3ffb3cf71379fa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24070fcb42eca4e9df8129f9c3ffb3cf71379fa5"}], "stats": {"total": 125, "additions": 98, "deletions": 27}, "files": [{"sha": "badad854614ab98ec99d699280b071f2a0679e89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6895bac810775d772310a2772b7eafd0ac944b5f", "patch": "@@ -1,3 +1,9 @@\n+2009-04-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (build_enumerator): Allow values folding to integer\n+\tconstants but not integer constant expressions with a pedwarn if\n+\tpedantic.\n+\n 2009-04-25  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/39582"}, {"sha": "7732d5aba1d3b536ae7c3c7d8761ea65d123b259", "filename": "gcc/c-decl.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6895bac810775d772310a2772b7eafd0ac944b5f", "patch": "@@ -6077,16 +6077,32 @@ build_enumerator (struct c_enum_contents *the_enum, tree name, tree value,\n \t undeclared identifier) - just ignore the value expression.  */\n       if (value == error_mark_node)\n \tvalue = 0;\n-      else if (!INTEGRAL_TYPE_P (TREE_TYPE (value))\n-\t       || TREE_CODE (value) != INTEGER_CST)\n+      else if (!INTEGRAL_TYPE_P (TREE_TYPE (value)))\n \t{\n \t  error (\"enumerator value for %qE is not an integer constant\", name);\n \t  value = 0;\n \t}\n       else\n \t{\n-\t  value = default_conversion (value);\n-\t  constant_expression_warning (value);\n+\t  if (TREE_CODE (value) != INTEGER_CST)\n+\t    {\n+\t      value = c_fully_fold (value, false, NULL);\n+\t      if (TREE_CODE (value) == INTEGER_CST)\n+\t\tpedwarn (value_loc, OPT_pedantic,\n+\t\t\t \"enumerator value for %qE is not an integer \"\n+\t\t\t \"constant expression\", name);\n+\t    }\n+\t  if (TREE_CODE (value) != INTEGER_CST)\n+\t    {\n+\t      error (\"enumerator value for %qE is not an integer constant\",\n+\t\t     name);\n+\t      value = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      value = default_conversion (value);\n+\t      constant_expression_warning (value);\n+\t    }\n \t}\n     }\n "}, {"sha": "36b1a49511fb8d839dc3858965b7069b2444f0f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6895bac810775d772310a2772b7eafd0ac944b5f", "patch": "@@ -1,3 +1,10 @@\n+2009-04-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/enum-const-1.c, gcc.dg/enum-const-2.c,\n+\tgcc.dg/enum-const-3.c: New tests.\n+\t* gcc.dg/gnu89-const-expr-1.c, gcc.dg/gnu99-const-expr-1.c: Use\n+\t-pedantic-errors.  Update expected diagnostics.\n+\n 2009-04-25  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/39582"}, {"sha": "205bb237214a99702e4c430edab99084ffe9aca7", "filename": "gcc/testsuite/gcc.dg/enum-const-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-1.c?ref=6895bac810775d772310a2772b7eafd0ac944b5f", "patch": "@@ -0,0 +1,8 @@\n+/* Test for enumeration constants not integer constant expressions but\n+   folding to integer constants (used in Linux kernel,\n+   <http://gcc.gnu.org/ml/gcc/2009-04/msg00677.html>).  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+extern int i;\n+enum e { E = (1 ? 1 : i) };"}, {"sha": "7e83a6ff45f48b5d8ac40c643b897766c7367854", "filename": "gcc/testsuite/gcc.dg/enum-const-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-2.c?ref=6895bac810775d772310a2772b7eafd0ac944b5f", "patch": "@@ -0,0 +1,8 @@\n+/* Test for enumeration constants not integer constant expressions but\n+   folding to integer constants (used in Linux kernel,\n+   <http://gcc.gnu.org/ml/gcc/2009-04/msg00677.html>).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+extern int i;\n+enum e { E = (1 ? 1 : i) }; /* { dg-warning \"not an integer constant expression\" } */"}, {"sha": "ab355cafe1f44b77ce7908e5422bae501682f980", "filename": "gcc/testsuite/gcc.dg/enum-const-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-const-3.c?ref=6895bac810775d772310a2772b7eafd0ac944b5f", "patch": "@@ -0,0 +1,8 @@\n+/* Test for enumeration constants not integer constant expressions but\n+   folding to integer constants (used in Linux kernel,\n+   <http://gcc.gnu.org/ml/gcc/2009-04/msg00677.html>).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+extern int i;\n+enum e { E = (1 ? 1 : i) }; /* { dg-error \"not an integer constant expression\" } */"}, {"sha": "4fd6671a4dbb03d19f2f33b540b28126743118a0", "filename": "gcc/testsuite/gcc.dg/gnu89-const-expr-1.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-1.c?ref=6895bac810775d772310a2772b7eafd0ac944b5f", "patch": "@@ -1,47 +1,56 @@\n /* Test for constant expressions: GNU extensions.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu89\" } */\n+/* { dg-options \"-std=gnu89 -pedantic-errors\" } */\n \n int n;\n \n void\n f (void)\n {\n   int i = 0;\n-  int a[n];\n+  int a[n]; /* { dg-error \"ISO C90 forbids variable length array\" } */\n   enum e1 {\n     /* Integer constant expressions may not contain statement\n        expressions (not a permitted operand).  */\n-    E1 = (1 ? 0 : ({ 0; })), /* { dg-error \"constant\" } */\n+    E1 = (1 ? 0 : ({ 0; })), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"ISO C forbids braced-groups\" \"ISO\" { target *-*-* } 16 } */\n     /* Real and imaginary parts act like other arithmetic\n        operators.  */\n-    E2 = __real__ (1 ? 0 : i++), /* { dg-error \"constant\" } */\n+    E2 = __real__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n     E3 = __real__ 0,\n     E4 = __imag__ (1 ? 0 : i++), /* { dg-error \"constant\" } */\n     E5 = __imag__ 0,\n     /* __alignof__ always constant.  */\n-    E6 = __alignof__ (int[n]),\n+    E6 = __alignof__ (int[n]), /* { dg-error \"ISO C90 forbids variable length array\" } */\n     E7 = __alignof__ (a),\n     /* __extension__ ignored for constant expression purposes.  */\n-    E8 = __extension__ (1 ? 0 : i++), /* { dg-error \"constant\" } */\n+    E8 = __extension__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n     E9 = __extension__ 0,\n     /* Conditional expressions with omitted arguments act like the\n        standard type.  */ \n-    E10 = (1 ? : i++), /* { dg-error \"constant\" } */\n-    E11 = (1 ? : 0)\n+    E10 = (1 ? : i++), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"ISO C forbids omitting\" \"ISO\" { target *-*-* } 32 } */\n+    E11 = (1 ? : 0) /* { dg-error \"ISO C forbids omitting\" } */\n   };\n   enum e2 {\n     /* Complex integer constants may be cast directly to integer\n        types, but not after further arithmetic on them.  */\n-    F1 = (int) (_Complex int) 2i, /* { dg-error \"constant\" } */\n-    F2 = (int) +2i, /* { dg-error \"constant\" } */\n-    F3 = (int) (1 + 2i), /* { dg-error \"constant\" } */\n-    F4 = (int) 2i\n+    F1 = (int) (_Complex int) 2i, /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"complex\" \"complex\" { target *-*-* } 39 } */\n+    /* { dg-error \"imaginary\" \"imaginary\" { target *-*-* } 39 } */\n+    F2 = (int) +2i, /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 42 } */\n+    F3 = (int) (1 + 2i), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 44 } */\n+    F4 = (int) 2i /* { dg-error \"imaginary\" } */\n   };\n   static double dr = __real__ (1.0 + 2.0i);\n+  /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 48 } */\n   static double di = __imag__ (1.0 + 2.0i);\n+  /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 50 } */\n   /* Statement expressions allowed in unevaluated subexpressions in\n      initializers in gnu99 but not gnu89.  */\n-  static int j = (1 ? 0 : ({ 0; })); /* { dg-warning \"constant expression\" } */\n+  static int j = (1 ? 0 : ({ 0; })); /* { dg-error \"constant expression\" } */\n+  /* { dg-error \"braced\" \"ISO\" { target *-*-* } 54 } */\n }"}, {"sha": "3f5f25e6d2ebaa6202a0799d86d89d7609d7650b", "filename": "gcc/testsuite/gcc.dg/gnu99-const-expr-1.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6895bac810775d772310a2772b7eafd0ac944b5f/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-1.c?ref=6895bac810775d772310a2772b7eafd0ac944b5f", "patch": "@@ -1,7 +1,7 @@\n /* Test for constant expressions: GNU extensions.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n \n int n;\n \n@@ -13,35 +13,44 @@ f (void)\n   enum e1 {\n     /* Integer constant expressions may not contain statement\n        expressions (not a permitted operand).  */\n-    E1 = (1 ? 0 : ({ 0; })), /* { dg-error \"constant\" } */\n+    E1 = (1 ? 0 : ({ 0; })), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"ISO C forbids braced-groups\" \"ISO\" { target *-*-* } 16 } */\n     /* Real and imaginary parts act like other arithmetic\n        operators.  */\n-    E2 = __real__ (1 ? 0 : i++), /* { dg-error \"constant\" } */\n+    E2 = __real__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n     E3 = __real__ 0,\n     E4 = __imag__ (1 ? 0 : i++), /* { dg-error \"constant\" } */\n     E5 = __imag__ 0,\n     /* __alignof__ always constant.  */\n     E6 = __alignof__ (int[n]),\n     E7 = __alignof__ (a),\n     /* __extension__ ignored for constant expression purposes.  */\n-    E8 = __extension__ (1 ? 0 : i++), /* { dg-error \"constant\" } */\n+    E8 = __extension__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n     E9 = __extension__ 0,\n     /* Conditional expressions with omitted arguments act like the\n        standard type.  */ \n-    E10 = (1 ? : i++), /* { dg-error \"constant\" } */\n-    E11 = (1 ? : 0)\n+    E10 = (1 ? : i++), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"ISO C forbids omitting\" \"ISO\" { target *-*-* } 32 } */\n+    E11 = (1 ? : 0) /* { dg-error \"ISO C forbids omitting\" } */\n   };\n   enum e2 {\n     /* Complex integer constants may be cast directly to integer\n        types, but not after further arithmetic on them.  */\n-    F1 = (int) (_Complex int) 2i, /* { dg-error \"constant\" } */\n-    F2 = (int) +2i, /* { dg-error \"constant\" } */\n-    F3 = (int) (1 + 2i), /* { dg-error \"constant\" } */\n-    F4 = (int) 2i\n+    F1 = (int) (_Complex int) 2i, /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"complex\" \"complex\" { target *-*-* } 39 } */\n+    /* { dg-error \"imaginary\" \"imaginary\" { target *-*-* } 39 } */\n+    F2 = (int) +2i, /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 42 } */\n+    F3 = (int) (1 + 2i), /* { dg-error \"constant expression\" } */\n+    /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 44 } */\n+    F4 = (int) 2i /* { dg-error \"imaginary\" } */\n   };\n   static double dr = __real__ (1.0 + 2.0i);\n+  /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 48 } */\n   static double di = __imag__ (1.0 + 2.0i);\n+  /* { dg-error \"imaginary\" \"ISO\" { target *-*-* } 50 } */\n   /* Statement expressions allowed in unevaluated subexpressions in\n      initializers in gnu99 but not gnu89.  */\n   static int j = (1 ? 0 : ({ 0; }));\n+  /* { dg-error \"braced\" \"ISO\" { target *-*-* } 54 } */\n }"}]}