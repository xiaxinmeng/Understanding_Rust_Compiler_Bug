{"sha": "6b17203a20c907fd7736f3f5c8bfe34731e8efba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIxNzIwM2EyMGM5MDdmZDc3MzZmM2Y1YzhiZmUzNDczMWU4ZWZiYQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2014-10-21T13:10:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-10-21T13:10:51Z"}, "message": "Implement more Library Fundamentals v1 variable templates.\n\n2014-10-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tImplement more Library Fundamentals v1 variable templates.\n\t* include/Makefile.am: Add ratio, chrono and system_error.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/chrono: New.\n\t* include/experimental/ratio: Likewise.\n\t* include/experimental/system_error: Likewise.\n\t* include/experimental/tuple (tuple_size_v): Likewise.\n\t* testsuite/experimental/chrono/value.cc: Likewise.\n\t* testsuite/experimental/ratio/value.cc: Likewise.\n\t* testsuite/experimental/system_error/value.cc: Likewise.\n\t* testsuite/experimental/tuple/tuple_size.cc: Likewise.\n\nFrom-SVN: r216513", "tree": {"sha": "35989753521e889209bd245d8e56877162b4b012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35989753521e889209bd245d8e56877162b4b012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b17203a20c907fd7736f3f5c8bfe34731e8efba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b17203a20c907fd7736f3f5c8bfe34731e8efba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b17203a20c907fd7736f3f5c8bfe34731e8efba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b17203a20c907fd7736f3f5c8bfe34731e8efba/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "803f46c9223acc3ab7b600d5d7337ad95c0d1642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/803f46c9223acc3ab7b600d5d7337ad95c0d1642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/803f46c9223acc3ab7b600d5d7337ad95c0d1642"}], "stats": {"total": 384, "additions": 384, "deletions": 0}, "files": [{"sha": "34b7e1599407710b918a140070ab67f7ad245cd8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -1,3 +1,17 @@\n+2014-10-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement more Library Fundamentals v1 variable templates.\n+\t* include/Makefile.am: Add ratio, chrono and system_error.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/chrono: New.\n+\t* include/experimental/ratio: Likewise.\n+\t* include/experimental/system_error: Likewise.\n+\t* include/experimental/tuple (tuple_size_v): Likewise.\n+\t* testsuite/experimental/chrono/value.cc: Likewise.\n+\t* testsuite/experimental/ratio/value.cc: Likewise.\n+\t* testsuite/experimental/system_error/value.cc: Likewise.\n+\t* testsuite/experimental/tuple/tuple_size.cc: Likewise.\n+\n 2014-10-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++98/Makefile.am: Move ctype.cc, ctype_configure_char.cc and"}, {"sha": "89fa4364ebcab099451a4086a926c60febcdbf4e", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -640,8 +640,11 @@ experimental_srcdir = ${glibcxx_srcdir}/include/experimental\n experimental_builddir = ./experimental\n experimental_headers = \\\n \t${experimental_srcdir}/any \\\n+\t${experimental_srcdir}/chrono \\\n \t${experimental_srcdir}/optional \\\n+\t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/string_view \\\n+\t${experimental_srcdir}/system_error \\\n \t${experimental_srcdir}/string_view.tcc \\\n \t${experimental_srcdir}/tuple \\\n \t${experimental_srcdir}/type_traits"}, {"sha": "bf10d6f45d8a5f250f15ba9bc152642daa1a5e2a", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -906,8 +906,11 @@ experimental_srcdir = ${glibcxx_srcdir}/include/experimental\n experimental_builddir = ./experimental\n experimental_headers = \\\n \t${experimental_srcdir}/any \\\n+\t${experimental_srcdir}/chrono \\\n \t${experimental_srcdir}/optional \\\n+\t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/string_view \\\n+\t${experimental_srcdir}/system_error \\\n \t${experimental_srcdir}/string_view.tcc \\\n \t${experimental_srcdir}/tuple \\\n \t${experimental_srcdir}/type_traits"}, {"sha": "4754ea0a3082f5c980f8d7a4164970c10fe754cb", "filename": "libstdc++-v3/include/experimental/chrono", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fchrono?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -0,0 +1,65 @@\n+// Variable Templates For chrono -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/chrono\n+ *  This is a TS C++ Library header.\n+ */\n+\n+//\n+// N3932 Variable Templates For Type Traits (Revision 1)\n+//\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_CHRONO\n+#define _GLIBCXX_EXPERIMENTAL_CHRONO 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <chrono>\n+\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace chrono {\n+namespace experimental\n+{\n+inline namespace fundamentals_v1\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+// See C++14 \u00a720.12.4, customization traits\n+template <typename _Rep>\n+   constexpr bool treat_as_floating_point_v =\n+     treat_as_floating_point<_Rep>::value;\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v1\n+} // namespace experimental\n+} // namespace chrono\n+} // namespace std\n+\n+#endif // __cplusplus <= 201103L\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_CHRONO"}, {"sha": "1f2080b4c951449ad80b30291f4c6c051fb0a544", "filename": "libstdc++-v3/include/experimental/ratio", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fratio?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -0,0 +1,73 @@\n+// Variable Templates For ratio -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/ratio\n+ *  This is a TS C++ Library header.\n+ */\n+\n+//\n+// N3932 Variable Templates For Type Traits (Revision 1)\n+//\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_RATIO\n+#define _GLIBCXX_EXPERIMENTAL_RATIO 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <ratio>\n+\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v1\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+// See C++14 \u00a720.11.5, ratio comparison\n+template <typename _R1, typename _R2>\n+  constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;\n+template <typename _R1, typename _R2>\n+  constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;\n+template <typename _R1, typename _R2>\n+  constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;\n+template <typename _R1, typename _R2>\n+  constexpr bool ratio_less_equal_v = ratio_less_equal<_R1, _R2>::value;\n+template <typename _R1, typename _R2>\n+  constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;\n+template <typename _R1, typename _R2>\n+  constexpr bool ratio_greater_equal_v = ratio_greater_equal<_R1, _R2>::value;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v1\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // __cplusplus <= 201103L\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_RATIO"}, {"sha": "3f879dae038524d80c2451174c7ff3c8a8c988a1", "filename": "libstdc++-v3/include/experimental/system_error", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsystem_error?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -0,0 +1,65 @@\n+// Variable Templates For system_error -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/system_error\n+ *  This is a TS C++ Library header.\n+ */\n+\n+//\n+// N3932 Variable Templates For Type Traits (Revision 1)\n+//\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_SYSTEM_ERROR\n+#define _GLIBCXX_EXPERIMENTAL_CHRONO 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <system_error>\n+\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v1\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+// See C++14 \u00a719.5, System error support\n+template <typename _Tp>\n+  constexpr bool is_error_code_enum_v = is_error_code_enum<_Tp>::value;\n+template <typename _Tp>\n+  constexpr bool is_error_condition_enum_v =\n+    is_error_condition_enum<_Tp>::value;\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v1\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // __cplusplus <= 201103L\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_SYSTEM_ERROR"}, {"sha": "da756b8549836812b039ac4f8f9db6af0cdf8bd8", "filename": "libstdc++-v3/include/experimental/tuple", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -44,6 +44,9 @@ namespace experimental\n inline namespace fundamentals_v1\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  // See C++14 \u00a720.4.2.5, tuple helper classes\n+  template <typename _Tp>\n+    constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n \n   template <typename _Fn, typename _Tuple, std::size_t... _Idx>\n     constexpr decltype(auto)"}, {"sha": "c06c12a4c1b8a28e3a26baee275791143b5f660b", "filename": "libstdc++-v3/testsuite/experimental/chrono/value.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fchrono%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fchrono%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fchrono%2Fvalue.cc?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/chrono>\n+\n+using namespace std::chrono;\n+using namespace std::chrono::experimental;\n+\n+// These tests are rather simple, the front-end tests already test\n+// variable templates, and the library tests for the underlying\n+// traits are more elaborate. These are just simple sanity tests.\n+\n+static_assert(!treat_as_floating_point_v<int>\n+\t      && !treat_as_floating_point<int>::value, \"\");\n+\n+static_assert(treat_as_floating_point_v<double>\n+\t      && treat_as_floating_point<double>::value, \"\");"}, {"sha": "4c8bdd7a3604a564d7135c8018def00fdf351d19", "filename": "libstdc++-v3/testsuite/experimental/ratio/value.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fratio%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fratio%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fratio%2Fvalue.cc?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/ratio>\n+\n+using namespace std;\n+using namespace std::experimental;\n+\n+// These tests are rather simple, the front-end tests already test\n+// variable templates, and the library tests for the underlying\n+// traits are more elaborate. These are just simple sanity tests.\n+\n+static_assert(ratio_equal_v<ratio<1, 3>, ratio<2, 6>>\n+\t      && ratio_equal<ratio<1, 3>, ratio<2, 6>>::value, \"\");\n+\n+static_assert(ratio_not_equal_v<ratio<1, 3>, ratio<2, 5>>\n+\t      && ratio_not_equal<ratio<1, 3>, ratio<2, 5>>::value, \"\");\n+\n+static_assert(ratio_less_v<ratio<1, 4>, ratio<1, 3>>\n+\t      && ratio_less<ratio<1, 4>, ratio<1, 3>>::value, \"\");\n+\n+static_assert(ratio_less_equal_v<ratio<1, 4>, ratio<1, 4>>\n+\t      && ratio_less_equal_v<ratio<1, 4>, ratio<1, 3>>\n+\t      && ratio_less_equal<ratio<1, 4>, ratio<1, 4>>::value\n+\t      && ratio_less_equal<ratio<1, 4>, ratio<1, 3>>::value, \"\");\n+\n+static_assert(ratio_greater_v<ratio<1, 3>, ratio<1, 4>>\n+\t      && ratio_greater<ratio<1, 3>, ratio<1, 4>>::value, \"\");\n+\n+static_assert(ratio_greater_equal_v<ratio<1, 4>, ratio<1, 4>>\n+\t      && ratio_greater_equal_v<ratio<1, 3>, ratio<1, 4>>\n+\t      && ratio_greater_equal<ratio<1, 4>, ratio<1, 4>>::value\n+\t      && ratio_greater_equal<ratio<1, 3>, ratio<1, 4>>::value, \"\");"}, {"sha": "66b40fbf60f9e122f4a4f8b29778e72b26b8d211", "filename": "libstdc++-v3/testsuite/experimental/system_error/value.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsystem_error%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsystem_error%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsystem_error%2Fvalue.cc?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/system_error>\n+#include <future>\n+using namespace std;\n+using namespace std::experimental;\n+\n+// These tests are rather simple, the front-end tests already test\n+// variable templates, and the library tests for the underlying\n+// traits are more elaborate. These are just simple sanity tests.\n+\n+static_assert(is_error_code_enum_v<future_errc>\n+\t      && is_error_code_enum<future_errc>::value, \"\");\n+\n+static_assert(!is_error_code_enum_v<int>\n+\t      && !is_error_code_enum<int>::value, \"\");\n+\n+static_assert(is_error_condition_enum_v<errc>\n+\t      && is_error_condition_enum<errc>::value, \"\");\n+\n+static_assert(!is_error_condition_enum_v<int>\n+\t      && !is_error_condition_enum<int>::value, \"\");"}, {"sha": "604e2c9bc38573eb58b2336796d274a2ebaf3e65", "filename": "libstdc++-v3/testsuite/experimental/tuple/tuple_size.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftuple%2Ftuple_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b17203a20c907fd7736f3f5c8bfe34731e8efba/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftuple%2Ftuple_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftuple%2Ftuple_size.cc?ref=6b17203a20c907fd7736f3f5c8bfe34731e8efba", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/tuple>\n+\n+using namespace std;\n+using namespace std::experimental;\n+\n+// These tests are rather simple, the front-end tests already test\n+// variable templates, and the library tests for the underlying\n+// traits are more elaborate. These are just simple sanity tests.\n+\n+static_assert(tuple_size_v<tuple<int>> == 1\n+\t      && tuple_size<tuple<int>>::value == 1, \"\");\n+\n+static_assert(tuple_size_v<tuple<int, int>> == 2\n+\t      && tuple_size<tuple<int, int>>::value == 2, \"\");"}]}