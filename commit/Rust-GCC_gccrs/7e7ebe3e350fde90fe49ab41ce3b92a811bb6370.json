{"sha": "7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "node_id": "C_kwDOANBUbNoAKDdlN2ViZTNlMzUwZmRlOTBmZTQ5YWI0MWNlM2I5MmE4MTFiYjYzNzA", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-10-29T07:05:54Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-10-29T11:02:26Z"}, "message": "d: Merge upstream dmd, druntime e4f8919591, phobos 3ad507b51.\n\nD front-end changes:\n\n    - Import dmd v2.101.0-beta.1.\n    - Add predefined version `D_Optimized' when compiling with `-O'.\n    - Shortened method syntax (DIP1043) is now enabled by default.\n    - Array literals assigned to `scope' array variables are now\n      allocated on the stack.\n    - Implement `@system' variables (DIP1035), available behind the\n      preview feature flag `-fpreview=systemvariables'.\n\nD runtime changes:\n\n    - Import druntime v2.101.0-beta.1.\n\nPhobos changes:\n\n    - Import phobos v2.101.0-beta.1.\n    - Added `std.typecons.SafeRefCounted', that can be used in `@safe'\n      code with `-fpreview=dip1000'.\n\ngcc/d/ChangeLog:\n\n\t* d-attribs.cc (apply_user_attributes): Update for new front-end\n\tinterface.\n\t* d-builtins.cc (d_init_versions): Predefine `D_Optimized' with\n\tcompiling with optimizations enabled.\n\t* d-lang.cc (d_handle_option): Update for new front-end interface.\n\tHandle new option `-fpreview=systemvariables'.\n\t* dmd/MERGE: Merge upstream dmd e4f8919591.\n\t* dmd/VERSION: Bump version to v2.101.0-beta.1.\n\t* expr.cc (ExprVisitor::visit (AssignExp *)): Treat construction of\n\tstatic arrays from a call expression as a simple assignment.\n\t(ExprVisitor::visit (ArrayLiteralExp *)): Handle array literals with\n\t`scope' storage.\n\t* gdc.texi: Update documentation of `-fpreview=' options.\n\t* lang.opt (fpreview=shortenedmethods): Remove.\n\t(fpreview=systemvariables):  New option.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime e4f8919591.\n\t* src/MERGE: Merge upstream phobos 3ad507b51.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/simd19630.d: Move tests with errors to ...\n\t* gdc.dg/simd19630b.d: ... here.  New test.\n\t* gdc.dg/simd19630c.d: New test.\n\t* gdc.dg/simd_ctfe.d: Removed.\n\t* gdc.dg/simd18867.d: New test.\n\t* gdc.dg/simd19788.d: New test.\n\t* gdc.dg/simd21469.d: New test.\n\t* gdc.dg/simd21672.d: New test.\n\t* gdc.dg/simd23077.d: New test.\n\t* gdc.dg/simd23084.d: New test.\n\t* gdc.dg/simd23085.d: New test.\n\t* gdc.dg/torture/simd19632.d: New test.\n\t* gdc.dg/torture/simd20041.d: New test.\n\t* gdc.dg/torture/simd21673.d: New test.\n\t* gdc.dg/torture/simd21676.d: New test.\n\t* gdc.dg/torture/simd22438.d: New test.\n\t* gdc.dg/torture/simd23009.d: New test.\n\t* gdc.dg/torture/simd23077.d: New test.\n\t* gdc.dg/torture/simd8.d: New test.\n\t* gdc.dg/torture/simd9.d: New test.\n\t* gdc.dg/torture/simd_prefetch.d: New test.", "tree": {"sha": "be7a6dd9ae43a807ff7107d51ed03069a4a336f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be7a6dd9ae43a807ff7107d51ed03069a4a336f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd85418051e8413e84ae7011cb5cb99cd8e337c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd85418051e8413e84ae7011cb5cb99cd8e337c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd85418051e8413e84ae7011cb5cb99cd8e337c"}], "stats": {"total": 5809, "additions": 3826, "deletions": 1983}, "files": [{"sha": "90e72e311ce57d51e4690c418f86585c54c99cc7", "filename": "gcc/d/d-attribs.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fd-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fd-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-attribs.cc?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -426,7 +426,8 @@ build_attributes (Expressions *eattrs)\n void\n apply_user_attributes (Dsymbol *sym, tree node)\n {\n-  if (!sym->userAttribDecl)\n+  UserAttributeDeclaration *uda = sym->userAttribDecl ();\n+  if (uda == NULL)\n     return;\n \n   location_t saved_location = input_location;\n@@ -436,7 +437,7 @@ apply_user_attributes (Dsymbol *sym, tree node)\n   if (TYPE_P (node) && !COMPLETE_TYPE_P (node))\n     attr_flags |= ATTR_FLAG_TYPE_IN_PLACE;\n \n-  Expressions *attrs = sym->userAttribDecl->getAttributes ();\n+  Expressions *attrs = uda->getAttributes ();\n   decl_attributes (&node, build_attributes (attrs), attr_flags);\n \n   input_location = saved_location;"}, {"sha": "51e562a96c13bc93c7ac578ed613e1de1364a8fd", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -505,6 +505,9 @@ d_init_versions (void)\n       VersionCondition::addPredefinedGlobalIdent (\"D_TypeInfo\");\n     }\n \n+  if (optimize)\n+    VersionCondition::addPredefinedGlobalIdent (\"D_Optimized\");\n+\n   VersionCondition::addPredefinedGlobalIdent (\"all\");\n \n   /* Emit all target-specific version identifiers.  */"}, {"sha": "3b61301645fdc0283d3e79a031ce51987caf8f87", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -567,10 +567,10 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       global.params.fixAliasThis = value;\n       global.params.previewIn = value;\n       global.params.fix16997 = value;\n-      global.params.noSharedAccess = value;\n+      global.params.noSharedAccess = FeatureState::enabled;\n       global.params.rvalueRefParam = FeatureState::enabled;\n       global.params.inclusiveInContracts = value;\n-      global.params.shortenedMethods = value;\n+      global.params.systemVariables = FeatureState::enabled;\n       global.params.fixImmutableConv = value;\n       break;\n \n@@ -619,15 +619,15 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       break;\n \n     case OPT_fpreview_nosharedaccess:\n-      global.params.noSharedAccess = value;\n+      global.params.noSharedAccess = FeatureState::enabled;\n       break;\n \n     case OPT_fpreview_rvaluerefparam:\n       global.params.rvalueRefParam = FeatureState::enabled;\n       break;\n \n-    case OPT_fpreview_shortenedmethods:\n-      global.params.shortenedMethods = value;\n+    case OPT_fpreview_systemvariables:\n+      global.params.systemVariables = FeatureState::enabled;\n       break;\n \n     case OPT_frelease:"}, {"sha": "2398875bce779368ad98167bbe9bee4876625896", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,4 +1,4 @@\n-4219ba670ce9ff92f3e874f0f048f2c28134c008\n+e4f89195913be1dc638707b1abb24c4f3ae7e0bf\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "50adf9c67bdc062c5afd065abf0a5cb137eef332", "filename": "gcc/d/dmd/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FVERSION?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1 +1 @@\n-v2.100.1\n+v2.101.0-beta.1"}, {"sha": "e9e8bbe4e27c9ca33b95d87cc3686432544499dd", "filename": "gcc/d/dmd/aggregate.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Faggregate.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Faggregate.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faggregate.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -109,7 +109,7 @@ extern (C++) abstract class AggregateDeclaration : ScopeDsymbol\n     CPPMANGLE cppmangle;\n \n     /// overridden symbol with pragma(mangle, \"...\") if not null\n-    MangleOverride* mangleOverride;\n+    MangleOverride* pMangleOverride;\n \n     /**\n      * !=null if is nested"}, {"sha": "d4432b513c4dd1943f0e739d32aabcbbfe23583b", "filename": "gcc/d/dmd/aggregate.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Faggregate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Faggregate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faggregate.h?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -82,7 +82,7 @@ class AggregateDeclaration : public ScopeDsymbol\n     CPPMANGLE cppmangle;\n \n     // overridden symbol with pragma(mangle, \"...\")\n-    MangleOverride *mangleOverride;\n+    MangleOverride *pMangleOverride;\n     /* !=NULL if is nested\n      * pointing to the dsymbol that directly enclosing it.\n      * 1. The function that enclosing it (nested struct and class)\n@@ -174,7 +174,7 @@ class StructDeclaration : public AggregateDeclaration\n     structalign_t alignment;    // alignment applied outside of the struct\n     ThreeState ispod;           // if struct is POD\n private:\n-    uint8_t bitFields;\n+    uint16_t bitFields;\n public:\n     static StructDeclaration *create(const Loc &loc, Identifier *id, bool inObject);\n     StructDeclaration *syntaxCopy(Dsymbol *s) override;"}, {"sha": "3f27cb990b0209b9d977e5cde1e6327050e1bc54", "filename": "gcc/d/dmd/attrib.d", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fattrib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fattrib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -894,50 +894,9 @@ extern (C++) final class PragmaDeclaration : AttribDeclaration\n             // then it's evaluated on demand in function semantic\n             return createNewScope(sc, sc.stc, sc.linkage, sc.cppmangle, sc.visibility, sc.explicitVisibility, sc.aligndecl, this);\n         }\n-        if (ident == Id.printf || ident == Id.scanf)\n-        {\n-            auto sc2 = sc.push();\n-\n-            if (ident == Id.printf)\n-                // Override previous setting, never let both be set\n-                sc2.flags = (sc2.flags & ~SCOPE.scanf) | SCOPE.printf;\n-            else\n-                sc2.flags = (sc2.flags & ~SCOPE.printf) | SCOPE.scanf;\n-\n-            return sc2;\n-        }\n         return sc;\n     }\n \n-    PINLINE evalPragmaInline(Scope* sc)\n-    {\n-        if (!args || args.dim == 0)\n-            return PINLINE.default_;\n-\n-        Expression e = (*args)[0];\n-        if (!e.type)\n-        {\n-\n-            sc = sc.startCTFE();\n-            e = e.expressionSemantic(sc);\n-            e = resolveProperties(sc, e);\n-            sc = sc.endCTFE();\n-            e = e.ctfeInterpret();\n-            e = e.toBoolean(sc);\n-            if (e.isErrorExp())\n-                error(\"pragma(`inline`, `true` or `false`) expected, not `%s`\", (*args)[0].toChars());\n-            (*args)[0] = e;\n-        }\n-\n-        const opt = e.toBool();\n-        if (opt.isEmpty())\n-            return PINLINE.default_;\n-        else if (opt.get())\n-            return PINLINE.always;\n-        else\n-            return PINLINE.never;\n-    }\n-\n     override const(char)* kind() const\n     {\n         return \"pragma\";"}, {"sha": "b153229ccaa7b862e4a90c598badfda8ec7483ab", "filename": "gcc/d/dmd/attrib.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fattrib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fattrib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.h?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -154,7 +154,6 @@ class PragmaDeclaration final : public AttribDeclaration\n \n     PragmaDeclaration *syntaxCopy(Dsymbol *s) override;\n     Scope *newScope(Scope *sc) override;\n-    PINLINE evalPragmaInline(Scope* sc);\n     const char *kind() const override;\n     void accept(Visitor *v) override { v->visit(this); }\n };"}, {"sha": "c999048dc49a8cdc0629228839ce838a32a546ae", "filename": "gcc/d/dmd/clone.d", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fclone.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fclone.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fclone.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -300,7 +300,7 @@ FuncDeclaration buildOpAssign(StructDeclaration sd, Scope* sc)\n     auto tf = new TypeFunction(ParameterList(fparams), sd.handleType(), LINK.d, stc | STC.ref_);\n     auto fop = new FuncDeclaration(declLoc, Loc.initial, Id.assign, stc, tf);\n     fop.storage_class |= STC.inference;\n-    fop.flags  |= FUNCFLAG.generated;\n+    fop.isGenerated = true;\n     Expression e;\n     if (stc & STC.disable)\n     {\n@@ -581,7 +581,7 @@ FuncDeclaration buildXopEquals(StructDeclaration sd, Scope* sc)\n     tf = tf.addSTC(STC.const_).toTypeFunction();\n     Identifier id = Id.xopEquals;\n     auto fop = new FuncDeclaration(declLoc, Loc.initial, id, 0, tf);\n-    fop.flags |= FUNCFLAG.generated;\n+    fop.isGenerated = true;\n     fop.parent = sd;\n     Expression e1 = new IdentifierExp(loc, Id.This);\n     Expression e2 = new IdentifierExp(loc, Id.p);\n@@ -705,7 +705,7 @@ FuncDeclaration buildXopCmp(StructDeclaration sd, Scope* sc)\n     tf = tf.addSTC(STC.const_).toTypeFunction();\n     Identifier id = Id.xopCmp;\n     auto fop = new FuncDeclaration(declLoc, Loc.initial, id, 0, tf);\n-    fop.flags |= FUNCFLAG.generated;\n+    fop.isGenerated = true;\n     fop.parent = sd;\n     Expression e1 = new IdentifierExp(loc, Id.This);\n     Expression e2 = new IdentifierExp(loc, Id.p);\n@@ -823,7 +823,7 @@ FuncDeclaration buildXtoHash(StructDeclaration sd, Scope* sc)\n     auto tf = new TypeFunction(ParameterList(parameters), Type.thash_t, LINK.d, STC.nothrow_ | STC.trusted);\n     Identifier id = Id.xtoHash;\n     auto fop = new FuncDeclaration(declLoc, Loc.initial, id, STC.static_, tf);\n-    fop.flags |= FUNCFLAG.generated;\n+    fop.isGenerated = true;\n \n     /* Do memberwise hashing.\n      *\n@@ -961,7 +961,7 @@ void buildDtors(AggregateDeclaration ad, Scope* sc)\n         {\n             //printf(\"Building __fieldDtor(), %s\\n\", e.toChars());\n             auto dd = new DtorDeclaration(declLoc, Loc.initial, stc, Id.__fieldDtor);\n-            dd.flags |= FUNCFLAG.generated;\n+            dd.isGenerated = true;\n             dd.storage_class |= STC.inference;\n             dd.fbody = new ExpStatement(loc, e);\n             ad.members.push(dd);\n@@ -1017,7 +1017,7 @@ void buildDtors(AggregateDeclaration ad, Scope* sc)\n             e = Expression.combine(e, ce);\n         }\n         auto dd = new DtorDeclaration(declLoc, Loc.initial, stc, Id.__aggrDtor);\n-        dd.flags |= FUNCFLAG.generated;\n+        dd.isGenerated = true;\n         dd.storage_class |= STC.inference;\n         dd.fbody = new ExpStatement(loc, e);\n         ad.members.push(dd);\n@@ -1088,7 +1088,7 @@ private DtorDeclaration buildWindowsCppDtor(AggregateDeclaration ad, DtorDeclara\n     stmts.push(new ExpStatement(loc, call));\n     stmts.push(new ReturnStatement(loc, new CastExp(loc, new ThisExp(loc), Type.tvoidptr)));\n     func.fbody = new CompoundStatement(loc, stmts);\n-    func.flags |= FUNCFLAG.generated;\n+    func.isGenerated = true;\n \n     auto sc2 = sc.push();\n     sc2.stc &= ~STC.static_; // not a static destructor\n@@ -1140,7 +1140,7 @@ private DtorDeclaration buildExternDDtor(AggregateDeclaration ad, Scope* sc)\n     auto call = new CallExp(dtor.loc, dtor, null);\n     call.directcall = true;                   // non-virtual call Class.__dtor();\n     func.fbody = new ExpStatement(dtor.loc, call);\n-    func.flags |= FUNCFLAG.generated;\n+    func.isGenerated = true;\n     func.storage_class |= STC.inference;\n \n     auto sc2 = sc.push();\n@@ -1416,7 +1416,7 @@ FuncDeclaration buildPostBlit(StructDeclaration sd, Scope* sc)\n         //printf(\"Building __fieldPostBlit()\\n\");\n         checkShared();\n         auto dd = new PostBlitDeclaration(declLoc, Loc.initial, stc, Id.__fieldPostblit);\n-        dd.flags |= FUNCFLAG.generated;\n+        dd.isGenerated = true;\n         dd.storage_class |= STC.inference | STC.scope_;\n         dd.fbody = (stc & STC.disable) ? null : new CompoundStatement(loc, postblitCalls);\n         sd.postblits.shift(dd);\n@@ -1454,7 +1454,7 @@ FuncDeclaration buildPostBlit(StructDeclaration sd, Scope* sc)\n \n         checkShared();\n         auto dd = new PostBlitDeclaration(declLoc, Loc.initial, stc, Id.__aggrPostblit);\n-        dd.flags |= FUNCFLAG.generated;\n+        dd.isGenerated = true;\n         dd.storage_class |= STC.inference;\n         dd.fbody = new ExpStatement(loc, e);\n         sd.members.push(dd);\n@@ -1517,7 +1517,7 @@ private CtorDeclaration generateCopyCtorDeclaration(StructDeclaration sd, const\n     auto ccd = new CtorDeclaration(sd.loc, Loc.initial, STC.ref_, tf, true);\n     ccd.storage_class |= funcStc;\n     ccd.storage_class |= STC.inference;\n-    ccd.flags |= FUNCFLAG.generated;\n+    ccd.isGenerated = true;\n     return ccd;\n }\n "}, {"sha": "bba61ad371545e72fab759b674977e2e6f51a0a1", "filename": "gcc/d/dmd/common/bitfields.d", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fcommon%2Fbitfields.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fcommon%2Fbitfields.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcommon%2Fbitfields.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -23,6 +23,7 @@ if (__traits(isUnsigned, T))\n     string result = \"extern (C++) pure nothrow @nogc @safe final {\";\n     enum structName = __traits(identifier, S);\n \n+    string initialValue = \"\";\n     foreach (size_t i, mem; __traits(allMembers, S))\n     {\n         static assert(is(typeof(__traits(getMember, S, mem)) == bool));\n@@ -37,8 +38,10 @@ if (__traits(isUnsigned, T))\n             v ? (bitFields |= \"~mask~\") : (bitFields &= ~\"~mask~\");\n             return v;\n         }\";\n+\n+        initialValue = (__traits(getMember, S.init, mem) ? \"1\" : \"0\") ~ initialValue;\n     }\n-    return result ~ \"}\\n private \"~T.stringof~\" bitFields;\\n\";\n+    return result ~ \"}\\n private \"~T.stringof~\" bitFields = 0b\" ~ initialValue ~ \";\\n\";\n }\n \n ///\n@@ -48,7 +51,7 @@ unittest\n     {\n         bool x;\n         bool y;\n-        bool z;\n+        bool z = 1;\n     }\n \n     static struct S\n@@ -66,5 +69,5 @@ unittest\n     s.y = true;\n     assert(s.y);\n     assert(!s.x);\n-    assert(!s.z);\n+    assert(s.z);\n }"}, {"sha": "89e702703e6b855066985cd1968aa61b23691f7a", "filename": "gcc/d/dmd/common/file.d", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fcommon%2Ffile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fcommon%2Ffile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcommon%2Ffile.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -144,9 +144,14 @@ struct FileMapping(Datum)\n         import core.stdc.string : strlen;\n         import core.stdc.stdlib : malloc;\n         import core.stdc.string : memcpy;\n-        auto totalNameLength = filename.strlen() + 1;\n-        name = cast(char*) memcpy(malloc(totalNameLength), filename, totalNameLength);\n-        name || assert(0, \"FileMapping: Out of memory.\");\n+        const totalNameLength = filename.strlen() + 1;\n+        auto namex = cast(char*) malloc(totalNameLength);\n+        if (!namex)\n+        {\n+            fprintf(stderr, \"FileMapping: Out of memory.\");\n+            exit(1);\n+        }\n+        name = cast(char*) memcpy(namex, filename, totalNameLength);\n     }\n \n     /**"}, {"sha": "ad1ad6791c56fd47d72d9c607f9dcf6d8550a817", "filename": "gcc/d/dmd/cparse.d", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fcparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fcparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcparse.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1906,6 +1906,8 @@ final class CParser(AST) : Parser!AST\n                     {\n                         auto str = asmName.peekString();\n                         p.mangleOverride = str;\n+//                      p.adFlags |= AST.VarDeclaration.nounderscore;\n+                        p.adFlags |= 4; // cannot get above line to compile on Ubuntu\n                     }\n                 }\n                 s = applySpecifier(s, specifier);\n@@ -5164,18 +5166,40 @@ final class CParser(AST) : Parser!AST\n         if (n.value == TOK.identifier && n.ident == Id.pop)\n         {\n             scan(&n);\n-            while (n.value == TOK.comma)\n+            size_t len = this.records.length;\n+            if (n.value == TOK.rightParenthesis) // #pragma pack ( pop )\n+            {\n+                if (len == 0)   // nothing to pop\n+                    return closingParen();\n+\n+                this.records.setDim(len - 1);\n+                this.packs.setDim(len - 1);\n+                if (len == 1)   // stack is now empty\n+                    packalign.setDefault();\n+                else\n+                    packalign = (*this.packs)[len - 1];\n+                return closingParen();\n+            }\n+            while (n.value == TOK.comma)        // #pragma pack ( pop ,\n             {\n                 scan(&n);\n                 if (n.value == TOK.identifier)\n                 {\n-                    for (size_t len = this.records.length; len; --len)\n+                    /* pragma pack(pop, identifier\n+                     * Pop until identifier is found, pop that one too, and set\n+                     * alignment to the new top of the stack.\n+                     * If identifier is not found, do nothing.\n+                     */\n+                    for ( ; len; --len)\n                     {\n                         if ((*this.records)[len - 1] == n.ident)\n                         {\n-                            packalign = (*this.packs)[len - 1];\n                             this.records.setDim(len - 1);\n                             this.packs.setDim(len - 1);\n+                            if (len > 1)\n+                                packalign = (*this.packs)[len - 2];\n+                            else\n+                                packalign.setDefault(); // stack empty, use default\n                             break;\n                         }\n                     }\n@@ -5184,14 +5208,18 @@ final class CParser(AST) : Parser!AST\n                 else if (n.value == TOK.int32Literal)\n                 {\n                     setPackAlign(n);\n-                    this.records.push(null);\n-                    this.packs.push(packalign);\n+                    scan(&n);\n+                }\n+                else\n+                {\n+                    error(loc, \"identifier or alignment value expected following `#pragma pack(pop,` not `%s`\", n.toChars());\n                     scan(&n);\n                 }\n             }\n             return closingParen();\n         }\n         /* # pragma pack ( integer )\n+         * Sets alignment to integer\n          */\n         if (n.value == TOK.int32Literal)\n         {\n@@ -5200,6 +5228,7 @@ final class CParser(AST) : Parser!AST\n             return closingParen();\n         }\n         /* # pragma pack ( )\n+         * Sets alignment to default\n          */\n         if (n.value == TOK.rightParenthesis)\n         {"}, {"sha": "7c130e9486266a96a717d91f7cb2bf162890b6cc", "filename": "gcc/d/dmd/cppmangle.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fcppmangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fcppmangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcppmangle.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -615,7 +615,7 @@ private final class CppMangleVisitor : Visitor\n         if (!ti)\n         {\n             auto ag = s.isAggregateDeclaration();\n-            const ident = (ag && ag.mangleOverride) ? ag.mangleOverride.id : s.ident;\n+            const ident = (ag && ag.pMangleOverride) ? ag.pMangleOverride.id : s.ident;\n             this.writeNamespace(s.cppnamespace, () {\n                 this.writeIdentifier(ident);\n                 this.abiTags.writeSymbol(s, this);\n@@ -654,14 +654,14 @@ private final class CppMangleVisitor : Visitor\n         }\n \n         auto ag = ti.aliasdecl ? ti.aliasdecl.isAggregateDeclaration() : null;\n-        if (ag && ag.mangleOverride)\n+        if (ag && ag.pMangleOverride)\n         {\n             this.writeNamespace(\n                 ti.toAlias().cppnamespace, () {\n-                    this.writeIdentifier(ag.mangleOverride.id);\n-                    if (ag.mangleOverride.agg && ag.mangleOverride.agg.isInstantiated())\n+                    this.writeIdentifier(ag.pMangleOverride.id);\n+                    if (ag.pMangleOverride.agg && ag.pMangleOverride.agg.isInstantiated())\n                     {\n-                        auto to = ag.mangleOverride.agg.isInstantiated();\n+                        auto to = ag.pMangleOverride.agg.isInstantiated();\n                         append(to);\n                         this.abiTags.writeSymbol(to.tempdecl, this);\n                         template_args(to);"}, {"sha": "ba3afb7716d2dd8392744346cd53844769a8a775", "filename": "gcc/d/dmd/dcast.d", "status": "modified", "additions": 46, "deletions": 68, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdcast.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdcast.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdcast.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -327,6 +327,45 @@ MATCH implicitConvTo(Expression e, Type t)\n         return MATCH.nomatch;\n     }\n \n+    // Apply mod bits to each function parameter,\n+    // and see if we can convert the function argument to the modded type\n+    static bool parametersModMatch(Expressions* args, TypeFunction tf, MOD mod)\n+    {\n+        const size_t nparams = tf.parameterList.length;\n+        const size_t j = tf.isDstyleVariadic(); // if TypeInfoArray was prepended\n+        foreach (const i; j .. args.dim)\n+        {\n+            Expression earg = (*args)[i];\n+            Type targ = earg.type.toBasetype();\n+            static if (LOG)\n+            {\n+                printf(\"[%d] earg: %s, targ: %s\\n\", cast(int)i, earg.toChars(), targ.toChars());\n+            }\n+            if (i - j < nparams)\n+            {\n+                Parameter fparam = tf.parameterList[i - j];\n+                if (fparam.isLazy())\n+                    return false; // not sure what to do with this\n+                Type tparam = fparam.type;\n+                if (!tparam)\n+                    continue;\n+                if (fparam.isReference())\n+                {\n+                    if (targ.constConv(tparam.castMod(mod)) == MATCH.nomatch)\n+                        return false;\n+                    continue;\n+                }\n+            }\n+            static if (LOG)\n+            {\n+                printf(\"[%d] earg: %s, targm: %s\\n\", cast(int)i, earg.toChars(), targ.addMod(mod).toChars());\n+            }\n+            if (implicitMod(earg, targ, mod) == MATCH.nomatch)\n+                return false;\n+        }\n+        return true;\n+    }\n+\n     MATCH visitAdd(AddExp e)\n     {\n         version (none)\n@@ -894,9 +933,6 @@ MATCH implicitConvTo(Expression e, Type t)\n         /* Apply mod bits to each function parameter,\n          * and see if we can convert the function argument to the modded type\n          */\n-\n-        size_t nparams = tf.parameterList.length;\n-        size_t j = tf.isDstyleVariadic(); // if TypeInfoArray was prepended\n         if (auto dve = e.e1.isDotVarExp())\n         {\n             /* Treat 'this' as just another function argument\n@@ -905,36 +941,9 @@ MATCH implicitConvTo(Expression e, Type t)\n             if (targ.constConv(targ.castMod(mod)) == MATCH.nomatch)\n                 return result;\n         }\n-        foreach (const i; j .. e.arguments.dim)\n-        {\n-            Expression earg = (*e.arguments)[i];\n-            Type targ = earg.type.toBasetype();\n-            static if (LOG)\n-            {\n-                printf(\"[%d] earg: %s, targ: %s\\n\", cast(int)i, earg.toChars(), targ.toChars());\n-            }\n-            if (i - j < nparams)\n-            {\n-                Parameter fparam = tf.parameterList[i - j];\n-                if (fparam.isLazy())\n-                    return result; // not sure what to do with this\n-                Type tparam = fparam.type;\n-                if (!tparam)\n-                    continue;\n-                if (fparam.isReference())\n-                {\n-                    if (targ.constConv(tparam.castMod(mod)) == MATCH.nomatch)\n-                        return result;\n-                    continue;\n-                }\n-            }\n-            static if (LOG)\n-            {\n-                printf(\"[%d] earg: %s, targm: %s\\n\", cast(int)i, earg.toChars(), targ.addMod(mod).toChars());\n-            }\n-            if (implicitMod(earg, targ, mod) == MATCH.nomatch)\n-                return result;\n-        }\n+\n+        if (!parametersModMatch(e.arguments, tf, mod))\n+            return result;\n \n         /* Success\n          */\n@@ -1206,47 +1215,16 @@ MATCH implicitConvTo(Expression e, Type t)\n             if (tf.purity == PURE.impure)\n                 return MATCH.nomatch; // impure\n \n+            // Allow a conversion to immutable type, or\n+            // conversions of mutable types between thread-local and shared.\n             if (e.type.immutableOf().implicitConvTo(t) < MATCH.constant && e.type.addMod(MODFlags.shared_).implicitConvTo(t) < MATCH.constant && e.type.implicitConvTo(t.addMod(MODFlags.shared_)) < MATCH.constant)\n             {\n                 return MATCH.nomatch;\n             }\n-            // Allow a conversion to immutable type, or\n-            // conversions of mutable types between thread-local and shared.\n-\n-            Expressions* args = e.arguments;\n \n-            size_t nparams = tf.parameterList.length;\n-            // if TypeInfoArray was prepended\n-            size_t j = tf.isDstyleVariadic();\n-            for (size_t i = j; i < e.arguments.dim; ++i)\n+            if (!parametersModMatch(e.arguments, tf, mod))\n             {\n-                Expression earg = (*args)[i];\n-                Type targ = earg.type.toBasetype();\n-                static if (LOG)\n-                {\n-                    printf(\"[%d] earg: %s, targ: %s\\n\", cast(int)i, earg.toChars(), targ.toChars());\n-                }\n-                if (i - j < nparams)\n-                {\n-                    Parameter fparam = tf.parameterList[i - j];\n-                    if (fparam.isLazy())\n-                        return MATCH.nomatch; // not sure what to do with this\n-                    Type tparam = fparam.type;\n-                    if (!tparam)\n-                        continue;\n-                    if (fparam.isReference())\n-                    {\n-                        if (targ.constConv(tparam.castMod(mod)) == MATCH.nomatch)\n-                            return MATCH.nomatch;\n-                        continue;\n-                    }\n-                }\n-                static if (LOG)\n-                {\n-                    printf(\"[%d] earg: %s, targm: %s\\n\", cast(int)i, earg.toChars(), targ.addMod(mod).toChars());\n-                }\n-                if (implicitMod(earg, targ, mod) == MATCH.nomatch)\n-                    return MATCH.nomatch;\n+                return MATCH.nomatch;\n             }\n         }\n "}, {"sha": "07d58f047c33c889c18f1168478c99a2aff6e808", "filename": "gcc/d/dmd/declaration.d", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdeclaration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdeclaration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -227,6 +227,7 @@ extern (C++) abstract class Declaration : Dsymbol\n     ubyte adFlags;         // control re-assignment of AliasDeclaration (put here for packing reasons)\n       enum wasRead    = 1; // set if AliasDeclaration was read\n       enum ignoreRead = 2; // ignore any reads of AliasDeclaration\n+      enum nounderscore = 4; // don't prepend _ to mangled name\n \n     Symbol* isym;           // import version of csym\n \n@@ -481,6 +482,11 @@ extern (C++) abstract class Declaration : Dsymbol\n         return (storage_class & STC.scope_) != 0;\n     }\n \n+    final bool isReturn() const pure nothrow @nogc @safe\n+    {\n+        return (storage_class & STC.return_) != 0;\n+    }\n+\n     final bool isSynchronized() const pure nothrow @nogc @safe\n     {\n         return (storage_class & STC.synchronized_) != 0;\n@@ -542,6 +548,11 @@ extern (C++) abstract class Declaration : Dsymbol\n         return (storage_class & STC.future) != 0;\n     }\n \n+    final extern(D) bool isSystem() const pure nothrow @nogc @safe\n+    {\n+        return (storage_class & STC.system) != 0;\n+    }\n+\n     override final Visibility visible() pure nothrow @nogc @safe\n     {\n         return visibility;\n@@ -780,7 +791,17 @@ extern (C++) final class AliasDeclaration : Declaration\n              * is not overloadable.\n              */\n             if (type)\n-                return false;\n+            {\n+                /*\n+                    If type has been resolved already we could\n+                    still be inserting an alias from an import.\n+\n+                    If we are handling an alias then pretend\n+                    it was inserting and return true, if not then\n+                    false since we didn't even pretend to insert something.\n+                */\n+                return this._import && this.equals(s);\n+            }\n \n             /* When s is added in member scope by static if, mixin(\"code\") or others,\n              * aliassym is determined already. See the case in: test/compilable/test61.d\n@@ -1634,7 +1655,7 @@ extern (C++) class VarDeclaration : Declaration\n         // Add this VarDeclaration to fdv.closureVars[] if not already there\n         if (!sc.intypeof && !(sc.flags & SCOPE.compile) &&\n             // https://issues.dlang.org/show_bug.cgi?id=17605\n-            (fdv.flags & FUNCFLAG.compileTimeOnly || !(fdthis.flags & FUNCFLAG.compileTimeOnly))\n+            (fdv.isCompileTimeOnly || !fdthis.isCompileTimeOnly)\n            )\n         {\n             if (!fdv.closureVars.contains(this))\n@@ -1754,16 +1775,21 @@ extern (C++) class BitFieldDeclaration : VarDeclaration\n \n     override final void setFieldOffset(AggregateDeclaration ad, ref FieldState fieldState, bool isunion)\n     {\n-        //printf(\"BitFieldDeclaration::setFieldOffset(ad: %s, field: %s)\\n\", ad.toChars(), toChars());\n-        static void print(const ref FieldState fieldState)\n+        enum log = false;\n+        static if (log)\n         {\n-            printf(\"FieldState.offset      = %d bytes\\n\",   fieldState.offset);\n-            printf(\"          .fieldOffset = %d bytes\\n\",   fieldState.fieldOffset);\n-            printf(\"          .bitOffset   = %d bits\\n\",    fieldState.bitOffset);\n-            printf(\"          .fieldSize   = %d bytes\\n\",   fieldState.fieldSize);\n-            printf(\"          .inFlight    = %d\\n\\n\", fieldState.inFlight);\n+            printf(\"BitFieldDeclaration::setFieldOffset(ad: %s, field: %s)\\n\", ad.toChars(), toChars());\n+            void print(const ref FieldState fieldState)\n+            {\n+                printf(\"FieldState.offset      = %d bytes\\n\",   fieldState.offset);\n+                printf(\"          .fieldOffset = %d bytes\\n\",   fieldState.fieldOffset);\n+                printf(\"          .bitOffset   = %d bits\\n\",    fieldState.bitOffset);\n+                printf(\"          .fieldSize   = %d bytes\\n\",   fieldState.fieldSize);\n+                printf(\"          .inFlight    = %d\\n\",         fieldState.inFlight);\n+                printf(\"          fieldWidth   = %d bits\\n\",    fieldWidth);\n+            }\n+            print(fieldState);\n         }\n-        //print(fieldState);\n \n         Type t = type.toBasetype();\n         const bool anon = isAnonymous();\n@@ -1780,6 +1806,7 @@ extern (C++) class BitFieldDeclaration : VarDeclaration\n         assert(sz != SIZE_INVALID && sz < uint.max);\n         uint memsize = cast(uint)sz;                // size of member\n         uint memalignsize = target.fieldalign(t);   // size of member for alignment purposes\n+        if (log) printf(\"          memsize: %u memalignsize: %u\\n\", memsize, memalignsize);\n \n         if (fieldWidth == 0 && !anon)\n             error(loc, \"named bit fields cannot have 0 width\");\n@@ -1790,6 +1817,7 @@ extern (C++) class BitFieldDeclaration : VarDeclaration\n \n         void startNewField()\n         {\n+            if (log) printf(\"startNewField()\\n\");\n             uint alignsize;\n             if (style == TargetC.BitFieldStyle.Gcc_Clang)\n             {\n@@ -1881,15 +1909,15 @@ extern (C++) class BitFieldDeclaration : VarDeclaration\n \n         if (!fieldState.inFlight)\n         {\n+            //printf(\"not in flight\\n\");\n             startNewField();\n         }\n         else if (style == TargetC.BitFieldStyle.Gcc_Clang)\n         {\n-            if (fieldState.bitOffset + fieldWidth > memsize * 8)\n-            {\n-                //printf(\"start1 fieldState.bitOffset:%u fieldWidth:%u memsize:%u\\n\", fieldState.bitOffset, fieldWidth, memsize);\n-                startNewField();\n-            }\n+            // If the bit-field spans more units of alignment than its type,\n+            // start a new field at the next alignment boundary.\n+            if (fieldState.bitOffset == fieldState.fieldSize * 8)\n+                startNewField();        // the bit field is full\n             else\n             {\n                 // if alignment boundary is crossed\n@@ -1909,6 +1937,7 @@ extern (C++) class BitFieldDeclaration : VarDeclaration\n             if (memsize != fieldState.fieldSize ||\n                 fieldState.bitOffset + fieldWidth > fieldState.fieldSize * 8)\n             {\n+                //printf(\"new field\\n\");\n                 startNewField();\n             }\n         }"}, {"sha": "2668b6ec05e178fcde253983b22fc56f8f2ad535", "filename": "gcc/d/dmd/declaration.h", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdeclaration.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdeclaration.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.h?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -139,6 +139,7 @@ class Declaration : public Dsymbol\n     bool isWild() const         { return (storage_class & STCwild) != 0; }\n     bool isAuto() const         { return (storage_class & STCauto) != 0; }\n     bool isScope() const        { return (storage_class & STCscope) != 0; }\n+    bool isReturn() const       { return (storage_class & STCreturn) != 0; }\n     bool isSynchronized() const { return (storage_class & STCsynchronized) != 0; }\n     bool isParameter() const    { return (storage_class & STCparameter) != 0; }\n     bool isDeprecated() const override final { return (storage_class & STCdeprecated) != 0; }\n@@ -615,7 +616,54 @@ class FuncDeclaration : public Declaration\n \n     AttributeViolation* safetyViolation;\n \n-    unsigned flags;                     // FUNCFLAGxxxxx\n+    // Formerly FUNCFLAGS\n+    uint32_t flags;\n+    bool purityInprocess() const;\n+    bool purityInprocess(bool v);\n+    bool safetyInprocess() const;\n+    bool safetyInprocess(bool v);\n+    bool nothrowInprocess() const;\n+    bool nothrowInprocess(bool v);\n+    bool nogcInprocess() const;\n+    bool nogcInprocess(bool v);\n+    bool returnInprocess() const;\n+    bool returnInprocess(bool v);\n+    bool inlineScanned() const;\n+    bool inlineScanned(bool v);\n+    bool inferScope() const;\n+    bool inferScope(bool v);\n+    bool hasCatches() const;\n+    bool hasCatches(bool v);\n+    bool isCompileTimeOnly() const;\n+    bool isCompileTimeOnly(bool v);\n+    bool printf() const;\n+    bool printf(bool v);\n+    bool scanf() const;\n+    bool scanf(bool v);\n+    bool noreturn() const;\n+    bool noreturn(bool v);\n+    bool isNRVO() const;\n+    bool isNRVO(bool v);\n+    bool isNaked() const;\n+    bool isNaked(bool v);\n+    bool isGenerated() const;\n+    bool isGenerated(bool v);\n+    bool isIntroducing() const;\n+    bool isIntroducing(bool v);\n+    bool hasSemantic3Errors() const;\n+    bool hasSemantic3Errors(bool v);\n+    bool hasNoEH() const;\n+    bool hasNoEH(bool v);\n+    bool inferRetType() const;\n+    bool inferRetType(bool v);\n+    bool hasDualContext() const;\n+    bool hasDualContext(bool v);\n+    bool hasAlwaysInlines() const;\n+    bool hasAlwaysInlines(bool v);\n+    bool isCrtCtor() const;\n+    bool isCrtCtor(bool v);\n+    bool isCrtDtor() const;\n+    bool isCrtDtor(bool v);\n \n     // Data for a function declaration that is needed for the Objective-C\n     // integration.\n@@ -655,22 +703,6 @@ class FuncDeclaration : public Declaration\n \n     bool isNogc();\n     bool isNogcBypassingInference();\n-    bool isNRVO() const;\n-    void isNRVO(bool v);\n-    bool isNaked() const;\n-    void isNaked(bool v);\n-    bool isGenerated() const;\n-    void isGenerated(bool v);\n-    bool isIntroducing() const;\n-    bool hasSemantic3Errors() const;\n-    bool hasNoEH() const;\n-    bool inferRetType() const;\n-    bool hasDualContext() const;\n-    bool hasAlwaysInlines() const;\n-    bool isCrtCtor() const;\n-    void isCrtCtor(bool v);\n-    bool isCrtDtor() const;\n-    void isCrtDtor(bool v);\n \n     virtual bool isNested() const;\n     AggregateDeclaration *isThis() override;"}, {"sha": "63b700096e5e042e8c84497dedb91de67c131a4c", "filename": "gcc/d/dmd/dinterpret.d", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdinterpret.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdinterpret.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -2872,6 +2872,12 @@ public:\n                         else\n                             m = v.getConstInitializer(true);\n                     }\n+                    else if (v.type.isTypeNoreturn())\n+                    {\n+                        // Noreturn field with default initializer\n+                        (*elems)[fieldsSoFar + i] = null;\n+                        continue;\n+                    }\n                     else\n                         m = v.type.defaultInitLiteral(e.loc);\n                     if (exceptionOrCant(m))"}, {"sha": "b2908ce02b03f5a6e5243fc853ac6349756771d5", "filename": "gcc/d/dmd/dmodule.d", "status": "modified", "additions": 207, "deletions": 228, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdmodule.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdmodule.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -98,13 +98,13 @@ private const(char)[] getFilename(Identifier[] packages, Identifier ident) nothr\n {\n     const(char)[] filename = ident.toString();\n \n-    if (packages.length == 0)\n-        return filename;\n-\n     OutBuffer buf;\n     OutBuffer dotmods;\n     auto modAliases = &global.params.modFileAliasStrings;\n \n+    if (packages.length == 0 && modAliases.length == 0)\n+        return filename;\n+\n     void checkModFileAlias(const(char)[] p)\n     {\n         /* Check and replace the contents of buf[] with\n@@ -308,7 +308,7 @@ extern (C++) class Package : ScopeDsymbol\n             packages ~= s.ident;\n         reverse(packages);\n \n-        if (FileManager.lookForSourceFile(getFilename(packages, ident), global.path ? (*global.path)[] : null))\n+        if (Module.find(getFilename(packages, ident)))\n             Module.load(Loc.initial, packages, this.ident);\n         else\n             isPkgMod = PKG.package_;\n@@ -492,6 +492,16 @@ extern (C++) final class Module : Package\n         return new Module(Loc.initial, filename, ident, doDocComment, doHdrGen);\n     }\n \n+    static const(char)* find(const(char)* filename)\n+    {\n+        return find(filename.toDString).ptr;\n+    }\n+\n+    extern (D) static const(char)[] find(const(char)[] filename)\n+    {\n+        return FileManager.lookForSourceFile(filename, global.path ? (*global.path)[] : null);\n+    }\n+\n     extern (C++) static Module load(const ref Loc loc, Identifiers* packages, Identifier ident)\n     {\n         return load(loc, packages ? (*packages)[] : null, ident);\n@@ -506,7 +516,7 @@ extern (C++) final class Module : Package\n         //  foo\\bar\\baz\n         const(char)[] filename = getFilename(packages, ident);\n         // Look for the source file\n-        if (const result = FileManager.lookForSourceFile(filename, global.path ? (*global.path)[] : null))\n+        if (const result = find(filename))\n             filename = result; // leaks\n \n         auto m = new Module(loc, filename, ident, 0, 0);\n@@ -703,232 +713,12 @@ extern (C++) final class Module : Package\n     /// ditto\n     extern (D) Module parseModule(AST)()\n     {\n-        enum Endian { little, big}\n-        enum SourceEncoding { utf16, utf32}\n-\n-        /*\n-         * Convert a buffer from UTF32 to UTF8\n-         * Params:\n-         *    Endian = is the buffer big/little endian\n-         *    buf = buffer of UTF32 data\n-         * Returns:\n-         *    input buffer reencoded as UTF8\n-         */\n-\n-        char[] UTF32ToUTF8(Endian endian)(const(char)[] buf)\n-        {\n-            static if (endian == Endian.little)\n-                alias readNext = Port.readlongLE;\n-            else\n-                alias readNext = Port.readlongBE;\n-\n-            if (buf.length & 3)\n-            {\n-                error(\"odd length of UTF-32 char source %llu\", cast(ulong) buf.length);\n-                return null;\n-            }\n-\n-            const (uint)[] eBuf = cast(const(uint)[])buf;\n-\n-            OutBuffer dbuf;\n-            dbuf.reserve(eBuf.length);\n-\n-            foreach (i; 0 .. eBuf.length)\n-            {\n-                const u = readNext(&eBuf[i]);\n-                if (u & ~0x7F)\n-                {\n-                    if (u > 0x10FFFF)\n-                    {\n-                        error(\"UTF-32 value %08x greater than 0x10FFFF\", u);\n-                        return null;\n-                    }\n-                    dbuf.writeUTF8(u);\n-                }\n-                else\n-                    dbuf.writeByte(u);\n-            }\n-            dbuf.writeByte(0); //add null terminator\n-            return dbuf.extractSlice();\n-        }\n-\n-        /*\n-         * Convert a buffer from UTF16 to UTF8\n-         * Params:\n-         *    Endian = is the buffer big/little endian\n-         *    buf = buffer of UTF16 data\n-         * Returns:\n-         *    input buffer reencoded as UTF8\n-         */\n-\n-        char[] UTF16ToUTF8(Endian endian)(const(char)[] buf)\n-        {\n-            static if (endian == Endian.little)\n-                alias readNext = Port.readwordLE;\n-            else\n-                alias readNext = Port.readwordBE;\n-\n-            if (buf.length & 1)\n-            {\n-                error(\"odd length of UTF-16 char source %llu\", cast(ulong) buf.length);\n-                return null;\n-            }\n-\n-            const (ushort)[] eBuf = cast(const(ushort)[])buf;\n-\n-            OutBuffer dbuf;\n-            dbuf.reserve(eBuf.length);\n-\n-            //i will be incremented in the loop for high codepoints\n-            foreach (ref i; 0 .. eBuf.length)\n-            {\n-                uint u = readNext(&eBuf[i]);\n-                if (u & ~0x7F)\n-                {\n-                    if (0xD800 <= u && u < 0xDC00)\n-                    {\n-                        i++;\n-                        if (i >= eBuf.length)\n-                        {\n-                            error(\"surrogate UTF-16 high value %04x at end of file\", u);\n-                            return null;\n-                        }\n-                        const u2 = readNext(&eBuf[i]);\n-                        if (u2 < 0xDC00 || 0xE000 <= u2)\n-                        {\n-                            error(\"surrogate UTF-16 low value %04x out of range\", u2);\n-                            return null;\n-                        }\n-                        u = (u - 0xD7C0) << 10;\n-                        u |= (u2 - 0xDC00);\n-                    }\n-                    else if (u >= 0xDC00 && u <= 0xDFFF)\n-                    {\n-                        error(\"unpaired surrogate UTF-16 value %04x\", u);\n-                        return null;\n-                    }\n-                    else if (u == 0xFFFE || u == 0xFFFF)\n-                    {\n-                        error(\"illegal UTF-16 value %04x\", u);\n-                        return null;\n-                    }\n-                    dbuf.writeUTF8(u);\n-                }\n-                else\n-                    dbuf.writeByte(u);\n-            }\n-            dbuf.writeByte(0); //add a terminating null byte\n-            return dbuf.extractSlice();\n-        }\n-\n         const(char)* srcname = srcfile.toChars();\n         //printf(\"Module::parse(srcname = '%s')\\n\", srcname);\n         isPackageFile = isPackageFileName(srcfile);\n-        const(char)[] buf = cast(const(char)[]) this.src;\n-\n-        bool needsReencoding = true;\n-        bool hasBOM = true; //assume there's a BOM\n-        Endian endian;\n-        SourceEncoding sourceEncoding;\n-\n-        if (buf.length >= 2)\n-        {\n-            /* Convert all non-UTF-8 formats to UTF-8.\n-             * BOM : https://www.unicode.org/faq/utf_bom.html\n-             * 00 00 FE FF  UTF-32BE, big-endian\n-             * FF FE 00 00  UTF-32LE, little-endian\n-             * FE FF        UTF-16BE, big-endian\n-             * FF FE        UTF-16LE, little-endian\n-             * EF BB BF     UTF-8\n-             */\n-            if (buf[0] == 0xFF && buf[1] == 0xFE)\n-            {\n-                endian = Endian.little;\n-\n-                sourceEncoding = buf.length >= 4 && buf[2] == 0 && buf[3] == 0\n-                                 ? SourceEncoding.utf32\n-                                 : SourceEncoding.utf16;\n-            }\n-            else if (buf[0] == 0xFE && buf[1] == 0xFF)\n-            {\n-                endian = Endian.big;\n-                sourceEncoding = SourceEncoding.utf16;\n-            }\n-            else if (buf.length >= 4 && buf[0] == 0 && buf[1] == 0 && buf[2] == 0xFE && buf[3] == 0xFF)\n-            {\n-                endian = Endian.big;\n-                sourceEncoding = SourceEncoding.utf32;\n-            }\n-            else if (buf.length >= 3 && buf[0] == 0xEF && buf[1] == 0xBB && buf[2] == 0xBF)\n-            {\n-                needsReencoding = false;//utf8 with BOM\n-            }\n-            else\n-            {\n-                /* There is no BOM. Make use of Arcane Jill's insight that\n-                 * the first char of D source must be ASCII to\n-                 * figure out the encoding.\n-                 */\n-                hasBOM = false;\n-                if (buf.length >= 4 && buf[1] == 0 && buf[2] == 0 && buf[3] == 0)\n-                {\n-                    endian = Endian.little;\n-                    sourceEncoding = SourceEncoding.utf32;\n-                }\n-                else if (buf.length >= 4 && buf[0] == 0 && buf[1] == 0 && buf[2] == 0)\n-                {\n-                    endian = Endian.big;\n-                    sourceEncoding = SourceEncoding.utf32;\n-                }\n-                else if (buf.length >= 2 && buf[1] == 0) //try to check for UTF-16\n-                {\n-                    endian = Endian.little;\n-                    sourceEncoding = SourceEncoding.utf16;\n-                }\n-                else if (buf[0] == 0)\n-                {\n-                    endian = Endian.big;\n-                    sourceEncoding = SourceEncoding.utf16;\n-                }\n-                else {\n-                    // It's UTF-8\n-                    needsReencoding = false;\n-                    if (buf[0] >= 0x80)\n-                    {\n-                        error(\"source file must start with BOM or ASCII character, not \\\\x%02X\", buf[0]);\n-                        return null;\n-                    }\n-                }\n-            }\n-            //throw away BOM\n-            if (hasBOM)\n-            {\n-                if (!needsReencoding) buf = buf[3..$];// utf-8 already\n-                else if (sourceEncoding == SourceEncoding.utf32) buf = buf[4..$];\n-                else buf = buf[2..$]; //utf 16\n-            }\n-        }\n-        // Assume the buffer is from memory and has not be read from disk. Assume UTF-8.\n-        else if (buf.length >= 1 && (buf[0] == '\\0' || buf[0] == 0x1A))\n-            needsReencoding = false;\n-         //printf(\"%s, %d, %d, %d\\n\", srcfile.name.toChars(), needsReencoding, endian == Endian.little, sourceEncoding == SourceEncoding.utf16);\n-        if (needsReencoding)\n-        {\n-            if (sourceEncoding == SourceEncoding.utf16)\n-            {\n-                buf = endian == Endian.little\n-                      ? UTF16ToUTF8!(Endian.little)(buf)\n-                      : UTF16ToUTF8!(Endian.big)(buf);\n-            }\n-            else\n-            {\n-                buf = endian == Endian.little\n-                      ? UTF32ToUTF8!(Endian.little)(buf)\n-                      : UTF32ToUTF8!(Endian.big)(buf);\n-            }\n-            // an error happened on UTF conversion\n-            if (buf is null) return null;\n-        }\n+        const(char)[] buf = processSource(src, this);\n+        // an error happened on UTF conversion\n+        if (buf is null) return null;\n \n         /* If it starts with the string \"Ddoc\", then it's a documentation\n          * source file.\n@@ -1533,3 +1323,192 @@ extern (C++) struct ModuleDeclaration\n         return this.toChars().toDString;\n     }\n }\n+\n+/**\n+ * Process the content of a source file\n+ *\n+ * Attempts to find which encoding it is using, if it has BOM,\n+ * and then normalize the source to UTF-8. If no encoding is required,\n+ * a slice of `src` will be returned without extra allocation.\n+ *\n+ * Params:\n+ *  src = Content of the source file to process\n+ *  mod = Module matching `src`, used for error handling\n+ *\n+ * Returns:\n+ *   UTF-8 encoded variant of `src`, stripped of any BOM,\n+ *   or `null` if an error happened.\n+ */\n+private const(char)[] processSource (const(ubyte)[] src, Module mod)\n+{\n+    enum SourceEncoding { utf16, utf32}\n+    enum Endian { little, big}\n+\n+    /*\n+     * Convert a buffer from UTF32 to UTF8\n+     * Params:\n+     *    Endian = is the buffer big/little endian\n+     *    buf = buffer of UTF32 data\n+     * Returns:\n+     *    input buffer reencoded as UTF8\n+     */\n+\n+    char[] UTF32ToUTF8(Endian endian)(const(char)[] buf)\n+    {\n+        static if (endian == Endian.little)\n+            alias readNext = Port.readlongLE;\n+        else\n+            alias readNext = Port.readlongBE;\n+\n+        if (buf.length & 3)\n+        {\n+            mod.error(\"odd length of UTF-32 char source %llu\", cast(ulong) buf.length);\n+            return null;\n+        }\n+\n+        const (uint)[] eBuf = cast(const(uint)[])buf;\n+\n+        OutBuffer dbuf;\n+        dbuf.reserve(eBuf.length);\n+\n+        foreach (i; 0 .. eBuf.length)\n+        {\n+            const u = readNext(&eBuf[i]);\n+            if (u & ~0x7F)\n+            {\n+                if (u > 0x10FFFF)\n+                {\n+                    mod.error(\"UTF-32 value %08x greater than 0x10FFFF\", u);\n+                    return null;\n+                }\n+                dbuf.writeUTF8(u);\n+            }\n+            else\n+                dbuf.writeByte(u);\n+        }\n+        dbuf.writeByte(0); //add null terminator\n+        return dbuf.extractSlice();\n+    }\n+\n+    /*\n+     * Convert a buffer from UTF16 to UTF8\n+     * Params:\n+     *    Endian = is the buffer big/little endian\n+     *    buf = buffer of UTF16 data\n+     * Returns:\n+     *    input buffer reencoded as UTF8\n+     */\n+\n+    char[] UTF16ToUTF8(Endian endian)(const(char)[] buf)\n+    {\n+        static if (endian == Endian.little)\n+            alias readNext = Port.readwordLE;\n+        else\n+            alias readNext = Port.readwordBE;\n+\n+        if (buf.length & 1)\n+        {\n+            mod.error(\"odd length of UTF-16 char source %llu\", cast(ulong) buf.length);\n+            return null;\n+        }\n+\n+        const (ushort)[] eBuf = cast(const(ushort)[])buf;\n+\n+        OutBuffer dbuf;\n+        dbuf.reserve(eBuf.length);\n+\n+        //i will be incremented in the loop for high codepoints\n+        foreach (ref i; 0 .. eBuf.length)\n+        {\n+            uint u = readNext(&eBuf[i]);\n+            if (u & ~0x7F)\n+            {\n+                if (0xD800 <= u && u < 0xDC00)\n+                {\n+                    i++;\n+                    if (i >= eBuf.length)\n+                    {\n+                        mod.error(\"surrogate UTF-16 high value %04x at end of file\", u);\n+                        return null;\n+                    }\n+                    const u2 = readNext(&eBuf[i]);\n+                    if (u2 < 0xDC00 || 0xE000 <= u2)\n+                    {\n+                        mod.error(\"surrogate UTF-16 low value %04x out of range\", u2);\n+                        return null;\n+                    }\n+                    u = (u - 0xD7C0) << 10;\n+                    u |= (u2 - 0xDC00);\n+                }\n+                else if (u >= 0xDC00 && u <= 0xDFFF)\n+                {\n+                    mod.error(\"unpaired surrogate UTF-16 value %04x\", u);\n+                    return null;\n+                }\n+                else if (u == 0xFFFE || u == 0xFFFF)\n+                {\n+                    mod.error(\"illegal UTF-16 value %04x\", u);\n+                    return null;\n+                }\n+                dbuf.writeUTF8(u);\n+            }\n+            else\n+                dbuf.writeByte(u);\n+        }\n+        dbuf.writeByte(0); //add a terminating null byte\n+        return dbuf.extractSlice();\n+    }\n+\n+    const(char)[] buf = cast(const(char)[]) src;\n+\n+    // Assume the buffer is from memory and has not be read from disk. Assume UTF-8.\n+    if (buf.length < 2)\n+        return buf;\n+\n+    /* Convert all non-UTF-8 formats to UTF-8.\n+     * BOM : https://www.unicode.org/faq/utf_bom.html\n+     * 00 00 FE FF  UTF-32BE, big-endian\n+     * FF FE 00 00  UTF-32LE, little-endian\n+     * FE FF        UTF-16BE, big-endian\n+     * FF FE        UTF-16LE, little-endian\n+     * EF BB BF     UTF-8\n+     */\n+    if (buf[0] == 0xFF && buf[1] == 0xFE)\n+    {\n+        if (buf.length >= 4 && buf[2] == 0 && buf[3] == 0)\n+            return UTF32ToUTF8!(Endian.little)(buf[4 .. $]);\n+        return UTF16ToUTF8!(Endian.little)(buf[2 .. $]);\n+    }\n+\n+    if (buf[0] == 0xFE && buf[1] == 0xFF)\n+        return UTF16ToUTF8!(Endian.big)(buf[2 .. $]);\n+\n+    if (buf.length >= 4 && buf[0] == 0 && buf[1] == 0 && buf[2] == 0xFE && buf[3] == 0xFF)\n+        return UTF32ToUTF8!(Endian.big)(buf[4 .. $]);\n+\n+    if (buf.length >= 3 && buf[0] == 0xEF && buf[1] == 0xBB && buf[2] == 0xBF)\n+        return buf[3 .. $];\n+\n+    /* There is no BOM. Make use of Arcane Jill's insight that\n+     * the first char of D source must be ASCII to\n+     * figure out the encoding.\n+     */\n+    if (buf.length >= 4 && buf[1] == 0 && buf[2] == 0 && buf[3] == 0)\n+        return UTF32ToUTF8!(Endian.little)(buf);\n+    if (buf.length >= 4 && buf[0] == 0 && buf[1] == 0 && buf[2] == 0)\n+        return UTF32ToUTF8!(Endian.big)(buf);\n+    // try to check for UTF-16\n+    if (buf.length >= 2 && buf[1] == 0)\n+        return UTF16ToUTF8!(Endian.little)(buf);\n+    if (buf[0] == 0)\n+        return UTF16ToUTF8!(Endian.big)(buf);\n+\n+    // It's UTF-8\n+    if (buf[0] >= 0x80)\n+    {\n+        mod.error(\"source file must start with BOM or ASCII character, not \\\\x%02X\", buf[0]);\n+        return null;\n+    }\n+\n+    return buf;\n+}"}, {"sha": "c81675957087c391cd7a64ee3317db1fc2a3ed94", "filename": "gcc/d/dmd/dscope.d", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdscope.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdscope.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -63,17 +63,13 @@ enum SCOPE\n     free          = 0x8000,   /// is on free list\n \n     fullinst      = 0x10000,  /// fully instantiate templates\n-\n-    // The following are mutually exclusive\n-    printf        = 0x4_0000, /// printf-style function\n-    scanf         = 0x8_0000, /// scanf-style function\n }\n \n /// Flags that are carried along with a scope push()\n private enum PersistentFlags =\n     SCOPE.contract | SCOPE.debug_ | SCOPE.ctfe | SCOPE.compile | SCOPE.constraint |\n     SCOPE.noaccesscheck | SCOPE.ignoresymbolvisibility |\n-    SCOPE.printf | SCOPE.scanf | SCOPE.Cfile;\n+    SCOPE.Cfile;\n \n struct Scope\n {"}, {"sha": "1c2f22653282b7d343c8b3383309ea99a3487a52", "filename": "gcc/d/dmd/dstruct.d", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdstruct.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdstruct.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -216,14 +216,19 @@ extern (C++) class StructDeclaration : AggregateDeclaration\n         bool hasIdentityEquals;     // true if has identity opEquals\n         bool hasNoFields;           // has no fields\n         bool hasCopyCtor;           // copy constructor\n+        bool hasPointerField;       // members with indirections\n+        bool hasVoidInitPointers;   // void-initialized unsafe fields\n+        bool hasSystemFields;      // @system members\n+        bool hasFieldWithInvariant; // invariants\n+        bool computedTypeProperties;// the above 3 fields are computed\n         // Even if struct is defined as non-root symbol, some built-in operations\n         // (e.g. TypeidExp, NewExp, ArrayLiteralExp, etc) request its TypeInfo.\n         // For those, today TypeInfo_Struct is generated in COMDAT.\n         bool requestTypeInfo;\n     }\n \n     import dmd.common.bitfields : generateBitFields;\n-    mixin(generateBitFields!(BitFields, ubyte));\n+    mixin(generateBitFields!(BitFields, ushort));\n \n     extern (D) this(const ref Loc loc, Identifier id, bool inObject)\n     {\n@@ -391,9 +396,35 @@ extern (C++) class StructDeclaration : AggregateDeclaration\n             }\n         }\n \n+\n         argTypes = target.toArgTypes(type);\n     }\n \n+    /// Compute cached type properties for `TypeStruct`\n+    extern(D) final void determineTypeProperties()\n+    {\n+        if (computedTypeProperties)\n+            return;\n+        foreach (vd; fields)\n+        {\n+            if (vd.storage_class & STC.ref_ || vd.hasPointers())\n+                hasPointerField = true;\n+\n+            if (vd._init && vd._init.isVoidInitializer() && vd.type.hasPointers())\n+                hasVoidInitPointers = true;\n+\n+            if (vd.storage_class & STC.system || vd.type.hasSystemFields())\n+                hasSystemFields = true;\n+\n+            if (!vd._init && vd.type.hasVoidInitPointers())\n+                hasVoidInitPointers = true;\n+\n+            if (vd.type.hasInvariant())\n+                hasFieldWithInvariant = true;\n+        }\n+        computedTypeProperties = true;\n+    }\n+\n     /***************************************\n      * Determine if struct is POD (Plain Old Data).\n      *"}, {"sha": "2f10e834d9dd9ff826e716a44105d15a89e4907f", "filename": "gcc/d/dmd/dsymbol.d", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdsymbol.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdsymbol.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -236,25 +236,33 @@ struct FieldState\n     bool inFlight;      /// bit field is in flight\n }\n \n+// 99.9% of Dsymbols don't have attributes (at least in druntime and Phobos),\n+// so save memory by grouping them into a separate struct\n+private struct DsymbolAttributes\n+{\n+    /// C++ namespace this symbol belongs to\n+    CPPNamespaceDeclaration cppnamespace;\n+    /// customized deprecation message\n+    DeprecatedDeclaration depdecl_;\n+    /// user defined attributes\n+    UserAttributeDeclaration userAttribDecl;\n+}\n+\n /***********************************************************\n  */\n extern (C++) class Dsymbol : ASTNode\n {\n     Identifier ident;\n     Dsymbol parent;\n-    /// C++ namespace this symbol belongs to\n-    CPPNamespaceDeclaration cppnamespace;\n     Symbol* csym;           // symbol for code generator\n     const Loc loc;          // where defined\n     Scope* _scope;          // !=null means context to use for semantic()\n     const(char)* prettystring;  // cached value of toPrettyChars()\n+    private DsymbolAttributes* atts; /// attached attribute declarations\n     bool errors;            // this symbol failed to pass semantic()\n     PASS semanticRun = PASS.initial;\n     ushort localNum;        /// perturb mangled name to avoid collisions with those in FuncDeclaration.localsymtab\n \n-    DeprecatedDeclaration depdecl;           // customized deprecation message\n-    UserAttributeDeclaration userAttribDecl;    // user defined attributes\n-\n     final extern (D) this() nothrow\n     {\n         //printf(\"Dsymbol::Dsymbol(%p)\\n\", this);\n@@ -285,6 +293,42 @@ extern (C++) class Dsymbol : ASTNode\n         return ident ? ident.toChars() : \"__anonymous\";\n     }\n \n+    // Getters / setters for fields stored in `DsymbolAttributes`\n+    final nothrow pure @safe\n+    {\n+        private ref DsymbolAttributes getAtts()\n+        {\n+            if (!atts)\n+                atts = new DsymbolAttributes();\n+            return *atts;\n+        }\n+\n+        inout(DeprecatedDeclaration) depdecl() inout { return atts ? atts.depdecl_ : null; }\n+        inout(CPPNamespaceDeclaration) cppnamespace() inout { return atts ? atts.cppnamespace : null; }\n+        inout(UserAttributeDeclaration) userAttribDecl() inout { return atts ? atts.userAttribDecl : null; }\n+\n+        DeprecatedDeclaration depdecl(DeprecatedDeclaration dd)\n+        {\n+            if (!dd && !atts)\n+                return null;\n+            return getAtts().depdecl_ = dd;\n+        }\n+\n+        CPPNamespaceDeclaration cppnamespace(CPPNamespaceDeclaration ns)\n+        {\n+            if (!ns && !atts)\n+                return null;\n+            return getAtts().cppnamespace = ns;\n+        }\n+\n+        UserAttributeDeclaration userAttribDecl(UserAttributeDeclaration uad)\n+        {\n+            if (!uad && !atts)\n+                return null;\n+            return getAtts().userAttribDecl = uad;\n+        }\n+    }\n+\n     // helper to print fully qualified (template) arguments\n     const(char)* toPrettyCharsHelper()\n     {"}, {"sha": "3e9b634307fa08947fec12e98604b9273c0a00f8", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -167,25 +167,31 @@ struct FieldState\n     bool inFlight;\n };\n \n+struct DsymbolAttributes;\n+\n class Dsymbol : public ASTNode\n {\n public:\n     Identifier *ident;\n     Dsymbol *parent;\n-    /// C++ namespace this symbol belongs to\n-    CPPNamespaceDeclaration *namespace_;\n     Symbol *csym;               // symbol for code generator\n     Loc loc;                    // where defined\n     Scope *_scope;               // !=NULL means context to use for semantic()\n     const utf8_t *prettystring;\n+private:\n+    DsymbolAttributes* atts;\n+public:\n     bool errors;                // this symbol failed to pass semantic()\n     PASS semanticRun;\n     unsigned short localNum;        // perturb mangled name to avoid collisions with those in FuncDeclaration.localsymtab\n-    DeprecatedDeclaration *depdecl; // customized deprecation message\n-    UserAttributeDeclaration *userAttribDecl;   // user defined attributes\n-\n     static Dsymbol *create(Identifier *);\n     const char *toChars() const override;\n+    DeprecatedDeclaration* depdecl();\n+    CPPNamespaceDeclaration* cppnamespace();\n+    UserAttributeDeclaration* userAttribDecl();\n+    DeprecatedDeclaration* depdecl(DeprecatedDeclaration* dd);\n+    CPPNamespaceDeclaration* cppnamespace(CPPNamespaceDeclaration* ns);\n+    UserAttributeDeclaration* userAttribDecl(UserAttributeDeclaration* uad);\n     virtual const char *toPrettyCharsHelper(); // helper to print fully qualified (template) arguments\n     Loc getLoc();\n     const char *locToChars();"}, {"sha": "b877828ffe56aa61ed6877cc2da01091c64d36c6", "filename": "gcc/d/dmd/dsymbolsem.d", "status": "modified", "additions": 130, "deletions": 74, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbolsem.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -98,6 +98,29 @@ private uint setMangleOverride(Dsymbol s, const(char)[] sym)\n     return 0;\n }\n \n+/**\n+ * Apply pragma printf/scanf to FuncDeclarations under `s`,\n+ * poking through attribute declarations such as `extern(C)`\n+ * but not through aggregates or function bodies.\n+ *\n+ * Params:\n+ *    s = symbol to apply\n+ *    printf = `true` for printf, `false` for scanf\n+ */\n+private void setPragmaPrintf(Dsymbol s, bool printf)\n+{\n+    if (auto fd = s.isFuncDeclaration())\n+    {\n+        fd.printf = printf;\n+        fd.scanf = !printf;\n+    }\n+\n+    if (auto ad = s.isAttribDeclaration())\n+    {\n+        ad.include(null).foreachDsymbol( (s) { setPragmaPrintf(s, printf); } );\n+    }\n+}\n+\n /*************************************\n  * Does semantic analysis on the public face of declarations.\n  */\n@@ -855,17 +878,20 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         }\n \n         // Calculate type size + safety checks\n-        if (1)\n+        if (sc && sc.func)\n         {\n-            if (dsym._init && dsym._init.isVoidInitializer() &&\n-                (dsym.type.hasPointers() || dsym.type.hasInvariant())) // also computes type size\n+            if (dsym._init && dsym._init.isVoidInitializer())\n             {\n-                if (dsym.type.hasPointers())\n+\n+                if (dsym.type.hasPointers()) // also computes type size\n                     sc.setUnsafe(false, dsym.loc,\n                         \"`void` initializers for pointers not allowed in safe functions\");\n-                else\n+                else if (dsym.type.hasInvariant())\n                     sc.setUnsafe(false, dsym.loc,\n                         \"`void` initializers for structs with invariants are not allowed in safe functions\");\n+                else if (dsym.type.hasSystemFields())\n+                    sc.setUnsafePreview(global.params.systemVariables, false, dsym.loc,\n+                        \"`void` initializers for `@system` variables not allowed in safe functions\");\n             }\n             else if (!dsym._init &&\n                      !(dsym.storage_class & (STC.static_ | STC.extern_ | STC.gshared | STC.manifest | STC.field | STC.parameter)) &&\n@@ -1036,6 +1062,12 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                             if (f.tookAddressOf)\n                                 f.tookAddressOf--;\n                         }\n+                        else if (auto ale = ex.isArrayLiteralExp())\n+                        {\n+                            // or an array literal assigned to a `scope` variable\n+                            if (!dsym.type.nextOf().needsDestruction())\n+                                ale.onstack = true;\n+                        }\n                     }\n \n                     Expression exp = ei.exp;\n@@ -1200,7 +1232,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n \n     override void visit(BitFieldDeclaration dsym)\n     {\n-        //printf(\"BitField::semantic('%s') %s\\n\", toPrettyChars(), id.toChars());\n+        //printf(\"BitField::semantic('%s')\\n\", dsym.toChars());\n         if (dsym.semanticRun >= PASS.semanticdone)\n             return;\n \n@@ -1558,6 +1590,12 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n \n             foreach (s; (*pd.decl)[])\n             {\n+                if (pd.ident == Id.printf || pd.ident == Id.scanf)\n+                {\n+                    s.setPragmaPrintf(pd.ident == Id.printf);\n+                    continue;\n+                }\n+\n                 s.dsymbolSemantic(sc2);\n                 if (pd.ident != Id.mangle)\n                     continue;\n@@ -1574,27 +1612,27 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                         agg = tc.sym;\n                     else if (auto ts = e.type.isTypeStruct())\n                         agg = ts.sym;\n-                    ad.mangleOverride = new MangleOverride;\n+                    ad.pMangleOverride = new MangleOverride;\n                     void setString(ref Expression e)\n                     {\n                         if (auto se = verifyMangleString(e))\n                         {\n                             const name = (cast(const(char)[])se.peekData()).xarraydup;\n-                            ad.mangleOverride.id = Identifier.idPool(name);\n+                            ad.pMangleOverride.id = Identifier.idPool(name);\n                             e = se;\n                         }\n                         else\n                             e.error(\"must be a string\");\n                     }\n                     if (agg)\n                     {\n-                        ad.mangleOverride.agg = agg;\n+                        ad.pMangleOverride.agg = agg;\n                         if (pd.args.dim == 2)\n                         {\n                             setString((*pd.args)[1]);\n                         }\n                         else\n-                            ad.mangleOverride.id = agg.ident;\n+                            ad.pMangleOverride.id = agg.ident;\n                     }\n                     else\n                         setString((*pd.args)[0]);\n@@ -1649,29 +1687,8 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             if (!pd.args)\n                 return noDeclarations();\n \n-            for (size_t i = 0; i < pd.args.dim; i++)\n-            {\n-                Expression e = (*pd.args)[i];\n-                sc = sc.startCTFE();\n-                e = e.expressionSemantic(sc);\n-                e = resolveProperties(sc, e);\n-                sc = sc.endCTFE();\n-                e = ctfeInterpretForPragmaMsg(e);\n-                if (e.op == EXP.error)\n-                {\n-                    errorSupplemental(pd.loc, \"while evaluating `pragma(msg, %s)`\", (*pd.args)[i].toChars());\n-                    return;\n-                }\n-                StringExp se = e.toStringExp();\n-                if (se)\n-                {\n-                    se = se.toUTF8(sc);\n-                    fprintf(stderr, \"%.*s\", cast(int)se.len, se.peekString().ptr);\n-                }\n-                else\n-                    fprintf(stderr, \"%s\", e.toChars());\n-            }\n-            fprintf(stderr, \"\\n\");\n+            if (!pragmaMsgSemantic(pd.loc, sc, pd.args))\n+                return;\n \n             return noDeclarations();\n         }\n@@ -1707,33 +1724,11 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         }\n         else if (pd.ident == Id.startaddress)\n         {\n-            if (!pd.args || pd.args.dim != 1)\n-                pd.error(\"function name expected for start address\");\n-            else\n-            {\n-                /* https://issues.dlang.org/show_bug.cgi?id=11980\n-                 * resolveProperties and ctfeInterpret call are not necessary.\n-                 */\n-                Expression e = (*pd.args)[0];\n-                sc = sc.startCTFE();\n-                e = e.expressionSemantic(sc);\n-                sc = sc.endCTFE();\n-                (*pd.args)[0] = e;\n-                Dsymbol sa = getDsymbol(e);\n-                if (!sa || !sa.isFuncDeclaration())\n-                    pd.error(\"function name expected for start address, not `%s`\", e.toChars());\n-            }\n+            pragmaStartAddressSemantic(pd.loc, sc, pd.args);\n             return noDeclarations();\n         }\n         else if (pd.ident == Id.Pinline)\n         {\n-            if (pd.args && pd.args.dim > 1)\n-            {\n-                pd.error(\"one boolean expression expected for `pragma(inline)`, not %llu\", cast(ulong) pd.args.dim);\n-                pd.args.setDim(1);\n-                (*pd.args)[0] = ErrorExp.get();\n-            }\n-\n             // this pragma now gets evaluated on demand in function semantic\n \n             return declarations();\n@@ -1774,7 +1769,11 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                     }\n                     else if (auto f = s.isFuncDeclaration())\n                     {\n-                        f.flags |= isCtor ? FUNCFLAG.CRTCtor : FUNCFLAG.CRTDtor;\n+                        if (isCtor)\n+                            f.isCrtCtor = true;\n+                        else\n+                            f.isCrtDtor = true;\n+\n                         return 1;\n                     }\n                     else\n@@ -3048,7 +3047,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         //printf(\"function storage_class = x%llx, sc.stc = x%llx, %x\\n\", storage_class, sc.stc, Declaration.isFinal());\n \n         if (sc.flags & SCOPE.compile)\n-            funcdecl.flags |= FUNCFLAG.compileTimeOnly; // don't emit code for this function\n+            funcdecl.isCompileTimeOnly = true; // don't emit code for this function\n \n         funcdecl._linkage = sc.linkage;\n         if (auto fld = funcdecl.isFuncLiteralDeclaration())\n@@ -3069,7 +3068,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n \n         // evaluate pragma(inline)\n         if (auto pragmadecl = sc.inlining)\n-            funcdecl.inlining = pragmadecl.evalPragmaInline(sc);\n+            funcdecl.inlining = evalPragmaInline(pragmadecl.loc, sc, pragmadecl.args);\n \n         funcdecl.visibility = sc.visibility;\n         funcdecl.userAttribDecl = sc.userAttribDecl;\n@@ -3269,9 +3268,9 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         }\n \n         // check pragma(crt_constructor) signature\n-        if (funcdecl.flags & (FUNCFLAG.CRTCtor | FUNCFLAG.CRTDtor))\n+        if (funcdecl.isCrtCtor || funcdecl.isCrtDtor)\n         {\n-            const idStr = (funcdecl.flags & FUNCFLAG.CRTCtor) ? \"crt_constructor\" : \"crt_destructor\";\n+            const idStr = funcdecl.isCrtCtor ? \"crt_constructor\" : \"crt_destructor\";\n             if (f.nextOf().ty != Tvoid)\n                 funcdecl.error(\"must return `void` for `pragma(%s)`\", idStr.ptr);\n             if (funcdecl._linkage != LINK.c && f.parameterList.length != 0)\n@@ -3351,7 +3350,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             }\n         }\n \n-        if (const pors = sc.flags & (SCOPE.printf | SCOPE.scanf))\n+        if (funcdecl.printf || funcdecl.scanf)\n         {\n             /* printf/scanf-like functions must be of the form:\n              *    extern (C/C++) T printf([parameters...], const(char)* format, ...);\n@@ -3387,11 +3386,11 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                 )\n                )\n             {\n-                funcdecl.flags |= (pors == SCOPE.printf) ? FUNCFLAG.printf : FUNCFLAG.scanf;\n+                // the signature is valid for printf/scanf, no error\n             }\n             else\n             {\n-                const p = (pors == SCOPE.printf ? Id.printf : Id.scanf).toChars();\n+                const p = (funcdecl.printf ? Id.printf : Id.scanf).toChars();\n                 if (f.parameterList.varargs == VarArg.variadic)\n                 {\n                     funcdecl.error(\"`pragma(%s)` functions must be `extern(C) %s %s([parameters...], const(char)*, ...)`\"\n@@ -3538,7 +3537,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                 else\n                 {\n                     //printf(\"\\tintroducing function %s\\n\", funcdecl.toChars());\n-                    funcdecl.flags |= FUNCFLAG.introducing;\n+                    funcdecl.isIntroducing = true;\n                     if (cd.classKind == ClassKind.cpp && target.cpp.reverseOverloads)\n                     {\n                         /* Overloaded functions with same name are grouped and in reverse order.\n@@ -4555,13 +4554,16 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n         if (sd.semanticRun == PASS.initial)\n             sd.type = sd.type.addSTC(sc.stc | sd.storage_class);\n         sd.type = sd.type.typeSemantic(sd.loc, sc);\n-        if (auto ts = sd.type.isTypeStruct())\n+        auto ts = sd.type.isTypeStruct();\n+        if (ts)\n+        {\n             if (ts.sym != sd)\n             {\n                 auto ti = ts.sym.isInstantiated();\n                 if (ti && isError(ti))\n                     ts.sym = sd;\n             }\n+        }\n \n         // Ungag errors when not speculative\n         Ungag ungag = sd.ungagSpeculative();\n@@ -4699,16 +4701,26 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             }\n         }\n \n-        if (sd.type.ty == Tstruct && (cast(TypeStruct)sd.type).sym != sd)\n+        if (ts && ts.sym != sd)\n         {\n-            // https://issues.dlang.org/show_bug.cgi?id=19024\n-            StructDeclaration sym = (cast(TypeStruct)sd.type).sym;\n-            version (none)\n+            StructDeclaration sym = ts.sym;\n+            if (sd.isCsymbol() && sym.isCsymbol())\n+            {\n+                /* This is two structs imported from different C files.\n+                 * Just ignore sd, the second one. The first one will always\n+                 * be found when going through the type.\n+                 */\n+            }\n+            else\n             {\n-                printf(\"this = %p %s\\n\", sd, sd.toChars());\n-                printf(\"type = %d sym = %p, %s\\n\", sd.type.ty, sym, sym.toPrettyChars());\n+                version (none)\n+                {\n+                    printf(\"this = %p %s\\n\", sd, sd.toChars());\n+                    printf(\"type = %d sym = %p, %s\\n\", sd.type.ty, sym, sym.toPrettyChars());\n+                }\n+                // https://issues.dlang.org/show_bug.cgi?id=19024\n+                sd.error(\"already exists at %s. Perhaps in another function with the same name?\", sym.loc.toChars());\n             }\n-            sd.error(\"already exists at %s. Perhaps in another function with the same name?\", sym.loc.toChars());\n         }\n \n         if (global.errors != errors)\n@@ -5291,7 +5303,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n \n                 auto ctor = new CtorDeclaration(cldec.loc, Loc.initial, 0, tf);\n                 ctor.storage_class |= STC.inference;\n-                ctor.flags |= FUNCFLAG.generated;\n+                ctor.isGenerated = true;\n                 ctor.fbody = new CompoundStatement(Loc.initial, new Statements());\n \n                 cldec.members.push(ctor);\n@@ -7099,3 +7111,47 @@ private CallExp doAtomicOp (string op, Identifier var, Expression arg)\n \n     return CallExp.create(loc, dti, args);\n }\n+\n+/***************************************\n+ * Interpret a `pragma(inline, x)`\n+ *\n+ * Params:\n+ *   loc = location for error messages\n+ *   sc = scope for evaluation of argument\n+ *   args = pragma arguments\n+ * Returns: corresponding `PINLINE` state\n+ */\n+PINLINE evalPragmaInline(Loc loc, Scope* sc, Expressions* args)\n+{\n+    if (!args || args.dim == 0)\n+        return PINLINE.default_;\n+\n+    if (args && args.dim > 1)\n+    {\n+        .error(loc, \"one boolean expression expected for `pragma(inline)`, not %llu\", cast(ulong) args.dim);\n+        args.setDim(1);\n+        (*args)[0] = ErrorExp.get();\n+    }\n+\n+    Expression e = (*args)[0];\n+    if (!e.type)\n+    {\n+        sc = sc.startCTFE();\n+        e = e.expressionSemantic(sc);\n+        e = resolveProperties(sc, e);\n+        sc = sc.endCTFE();\n+        e = e.ctfeInterpret();\n+        e = e.toBoolean(sc);\n+        if (e.isErrorExp())\n+            .error(loc, \"pragma(`inline`, `true` or `false`) expected, not `%s`\", (*args)[0].toChars());\n+        (*args)[0] = e;\n+    }\n+\n+    const opt = e.toBool();\n+    if (opt.isEmpty())\n+        return PINLINE.default_;\n+    else if (opt.get())\n+        return PINLINE.always;\n+    else\n+        return PINLINE.never;\n+}"}, {"sha": "1f99c58decd7e3bdcb4cece102bf7bcfa03b7d35", "filename": "gcc/d/dmd/dtemplate.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdtemplate.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fdtemplate.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1173,7 +1173,7 @@ extern (C++) final class TemplateDeclaration : ScopeDsymbol\n \n                 fd = new FuncDeclaration(fd.loc, fd.endloc, fd.ident, fd.storage_class, tf);\n                 fd.parent = ti;\n-                fd.flags |= FUNCFLAG.inferRetType;\n+                fd.inferRetType = true;\n \n                 // Shouldn't run semantic on default arguments and return type.\n                 foreach (ref param; *tf.parameterList.parameters)\n@@ -3901,7 +3901,7 @@ MATCH deduceType(RootObject o, Scope* sc, Type tparam, TemplateParameters* param\n                     // https://issues.dlang.org/show_bug.cgi?id=2579\n                     // Apply function parameter storage classes to parameter types\n                     fparam.type = fparam.type.addStorageClass(fparam.storageClass);\n-                    fparam.storageClass &= ~(STC.TYPECTOR | STC.in_);\n+                    fparam.storageClass &= ~STC.TYPECTOR;\n \n                     // https://issues.dlang.org/show_bug.cgi?id=15243\n                     // Resolve parameter type if it's not related with template parameters"}, {"sha": "2b499c14fcc9d6b9ecccb3ab4652bce509eaa7ed", "filename": "gcc/d/dmd/entity.d", "status": "modified", "additions": 97, "deletions": 139, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fentity.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fentity.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fentity.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -25,7 +25,7 @@ nothrow:\n  *      code point corresponding to the named entity\n  *      ~0 for not recognized as a named entity\n  */\n-public uint HtmlNamedEntity(scope const char[] name) pure @nogc @safe\n+public uint[2] HtmlNamedEntity(scope const char[] name) pure @nogc @safe\n {\n     const firstC = tolower(name[0]);\n     if (firstC >= 'a' && firstC <= 'z')\n@@ -34,10 +34,10 @@ public uint HtmlNamedEntity(scope const char[] name) pure @nogc @safe\n         foreach (entity; namesTable[firstC - 'a'])\n         {\n             if (entity.name == name)\n-                return entity.value;\n+                return [entity.value, entity.value2];\n         }\n     }\n-    return ~0;\n+    return [0, 0];\n }\n \n private:\n@@ -52,6 +52,7 @@ struct NameId\n {\n     string name;\n     uint value;\n+    uint value2;\n }\n \n // @todo@ order namesTable and names? by frequency\n@@ -72,7 +73,7 @@ immutable NameId[] namesA =\n     {\"abreve\",           0x00103},  // LATIN SMALL LETTER A WITH BREVE\n     {\"ac\",               0x0223E},  // INVERTED LAZY S\n     {\"acd\",              0x0223F},  // SINE WAVE\n-//  {\"acE\",              0x0223E;0x00333},  // INVERTED LAZY S with double underline\n+    {\"acE\",              0x0223E, 0x00333},  // INVERTED LAZY S with double underline\n     {\"Acirc\",            0x000C2},  // LATIN CAPITAL LETTER A WITH CIRCUMFLEX\n     {\"acirc\",            0x000E2},  // LATIN SMALL LETTER A WITH CIRCUMFLEX\n     {\"acute\",            0x000B4},  // ACUTE ACCENT\n@@ -157,42 +158,30 @@ immutable NameId[] namesB =\n     {\"backsim\",          0x0223D},  // REVERSED TILDE\n     {\"backsimeq\",        0x022CD},  // REVERSED TILDE EQUALS\n     {\"Backslash\",        0x02216},  // SET MINUS\n-//  \"b.alpha\",          0x1D6C2},  // MATHEMATICAL BOLD SMALL ALPHA\n     {\"Barv\",             0x02AE7},  // SHORT DOWN TACK WITH OVERBAR\n     {\"barvee\",           0x022BD},  // NOR\n     {\"barwed\",           0x02305},  // PROJECTIVE\n     {\"Barwed\",           0x02306},  // PERSPECTIVE\n     {\"barwedge\",         0x02305},  // PROJECTIVE\n-//  \"b.beta\",           0x1D6C3},  // MATHEMATICAL BOLD SMALL BETA\n     {\"bbrk\",             0x023B5},  // BOTTOM SQUARE BRACKET\n     {\"bbrktbrk\",         0x023B6},  // BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET\n-//  \"b.chi\",            0x1D6D8},  // MATHEMATICAL BOLD SMALL CHI\n     {\"bcong\",            0x0224C},  // ALL EQUAL TO\n     {\"Bcy\",              0x00411},  // CYRILLIC CAPITAL LETTER BE\n     {\"bcy\",              0x00431},  // CYRILLIC SMALL LETTER BE\n-//  \"b.Delta\",          0x1D6AB},  // MATHEMATICAL BOLD CAPITAL DELTA\n-//  \"b.delta\",          0x1D6C5},  // MATHEMATICAL BOLD SMALL DELTA\n     {\"bdquo\",            0x0201E},  // DOUBLE LOW-9 QUOTATION MARK\n     {\"becaus\",           0x02235},  // BECAUSE\n     {\"because\",          0x02235},  // BECAUSE\n     {\"Because\",          0x02235},  // BECAUSE\n     {\"bemptyv\",          0x029B0},  // REVERSED EMPTY SET\n     {\"bepsi\",            0x003F6},  // GREEK REVERSED LUNATE EPSILON SYMBOL\n-//  \"b.epsi\",           0x1D6C6},  // MATHEMATICAL BOLD SMALL EPSILON\n-//  \"b.epsiv\",          0x1D6DC},  // MATHEMATICAL BOLD EPSILON SYMBOL\n     {\"bernou\",           0x0212C},  // SCRIPT CAPITAL B\n     {\"Bernoullis\",       0x0212C},  // SCRIPT CAPITAL B\n     {\"Beta\",             0x00392},  // GREEK CAPITAL LETTER BETA\n     {\"beta\",             0x003B2},  // GREEK SMALL LETTER BETA\n-//  \"b.eta\",            0x1D6C8},  // MATHEMATICAL BOLD SMALL ETA\n     {\"beth\",             0x02136},  // BET SYMBOL\n     {\"between\",          0x0226C},  // BETWEEN\n     {\"Bfr\",              0x1D505},  // MATHEMATICAL FRAKTUR CAPITAL B\n     {\"bfr\",              0x1D51F},  // MATHEMATICAL FRAKTUR SMALL B\n-//  \"b.Gamma\",          0x1D6AA},  // MATHEMATICAL BOLD CAPITAL GAMMA\n-//  \"b.gamma\",          0x1D6C4},  // MATHEMATICAL BOLD SMALL GAMMA\n-//  \"b.Gammad\",         0x1D7CA},  // MATHEMATICAL BOLD CAPITAL DIGAMMA\n-//  \"b.gammad\",         0x1D7CB},  // MATHEMATICAL BOLD SMALL DIGAMMA\n     {\"Bgr\",              0x00392},  // GREEK CAPITAL LETTER BETA\n     {\"bgr\",              0x003B2},  // GREEK SMALL LETTER BETA\n     {\"bigcap\",           0x022C2},  // N-ARY INTERSECTION\n@@ -208,31 +197,22 @@ immutable NameId[] namesB =\n     {\"biguplus\",         0x02A04},  // N-ARY UNION OPERATOR WITH PLUS\n     {\"bigvee\",           0x022C1},  // N-ARY LOGICAL OR\n     {\"bigwedge\",         0x022C0},  // N-ARY LOGICAL AND\n-//  \"b.iota\",           0x1D6CA},  // MATHEMATICAL BOLD SMALL IOTA\n-//  \"b.kappa\",          0x1D6CB},  // MATHEMATICAL BOLD SMALL KAPPA\n-//  \"b.kappav\",         0x1D6DE},  // MATHEMATICAL BOLD KAPPA SYMBOL\n     {\"bkarow\",           0x0290D},  // RIGHTWARDS DOUBLE DASH ARROW\n     {\"blacklozenge\",     0x029EB},  // BLACK LOZENGE\n     {\"blacksquare\",      0x025AA},  // BLACK SMALL SQUARE\n     {\"blacktriangle\",    0x025B4},  // BLACK UP-POINTING SMALL TRIANGLE\n     {\"blacktriangledown\", 0x025BE},  // BLACK DOWN-POINTING SMALL TRIANGLE\n     {\"blacktriangleleft\", 0x025C2},  // BLACK LEFT-POINTING SMALL TRIANGLE\n     {\"blacktriangleright\", 0x025B8},  // BLACK RIGHT-POINTING SMALL TRIANGLE\n-//  \"b.Lambda\",         0x1D6B2},  // MATHEMATICAL BOLD CAPITAL LAMDA\n-//  \"b.lambda\",         0x1D6CC},  // MATHEMATICAL BOLD SMALL LAMDA\n     {\"blank\",            0x02423},  // OPEN BOX\n     {\"blk12\",            0x02592},  // MEDIUM SHADE\n     {\"blk14\",            0x02591},  // LIGHT SHADE\n     {\"blk34\",            0x02593},  // DARK SHADE\n     {\"block\",            0x02588},  // FULL BLOCK\n-//  \"b.mu\",             0x1D6CD},  // MATHEMATICAL BOLD SMALL MU\n-//  \"bne\",              0x0003D;0x020E5},  // EQUALS SIGN with reverse slash\n-//  \"bnequiv\",          0x02261;0x020E5},  // IDENTICAL TO with reverse slash\n+    {\"bne\",              0x0003D, 0x020E5},  // EQUALS SIGN with reverse slash\n+    {\"bnequiv\",          0x02261, 0x020E5},  // IDENTICAL TO with reverse slash\n     {\"bnot\",             0x02310},  // REVERSED NOT SIGN\n     {\"bNot\",             0x02AED},  // REVERSED DOUBLE STROKE NOT SIGN\n-//  \"b.nu\",             0x1D6CE},  // MATHEMATICAL BOLD SMALL NU\n-//  \"b.Omega\",          0x1D6C0},  // MATHEMATICAL BOLD CAPITAL OMEGA\n-//  \"b.omega\",          0x1D6DA},  // MATHEMATICAL BOLD SMALL OMEGA\n     {\"Bopf\",             0x1D539},  // MATHEMATICAL DOUBLE-STRUCK CAPITAL B\n     {\"bopf\",             0x1D553},  // MATHEMATICAL DOUBLE-STRUCK SMALL B\n     {\"bot\",              0x022A5},  // UP TACK\n@@ -282,47 +262,25 @@ immutable NameId[] namesB =\n     {\"boxvR\",            0x0255E},  // BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE\n     {\"boxVr\",            0x0255F},  // BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE\n     {\"boxVR\",            0x02560},  // BOX DRAWINGS DOUBLE VERTICAL AND RIGHT\n-//  \"b.Phi\",            0x1D6BD},  // MATHEMATICAL BOLD CAPITAL PHI\n-//  \"b.phi\",            0x1D6D7},  // MATHEMATICAL BOLD SMALL PHI\n-//  \"b.phiv\",           0x1D6DF},  // MATHEMATICAL BOLD PHI SYMBOL\n-//  \"b.Pi\",             0x1D6B7},  // MATHEMATICAL BOLD CAPITAL PI\n-//  \"b.pi\",             0x1D6D1},  // MATHEMATICAL BOLD SMALL PI\n-//  \"b.piv\",            0x1D6E1},  // MATHEMATICAL BOLD PI SYMBOL\n     {\"bprime\",           0x02035},  // REVERSED PRIME\n-//  \"b.Psi\",            0x1D6BF},  // MATHEMATICAL BOLD CAPITAL PSI\n-//  \"b.psi\",            0x1D6D9},  // MATHEMATICAL BOLD SMALL PSI\n     {\"breve\",            0x002D8},  // BREVE\n     {\"Breve\",            0x002D8},  // BREVE\n-//  \"b.rho\",            0x1D6D2},  // MATHEMATICAL BOLD SMALL RHO\n-//  \"b.rhov\",           0x1D6E0},  // MATHEMATICAL BOLD RHO SYMBOL\n     {\"brvbar\",           0x000A6},  // BROKEN BAR\n     {\"Bscr\",             0x0212C},  // SCRIPT CAPITAL B\n     {\"bscr\",             0x1D4B7},  // MATHEMATICAL SCRIPT SMALL B\n     {\"bsemi\",            0x0204F},  // REVERSED SEMICOLON\n-//  \"b.Sigma\",          0x1D6BA},  // MATHEMATICAL BOLD CAPITAL SIGMA\n-//  \"b.sigma\",          0x1D6D4},  // MATHEMATICAL BOLD SMALL SIGMA\n-//  \"b.sigmav\",         0x1D6D3},  // MATHEMATICAL BOLD SMALL FINAL SIGMA\n     {\"bsim\",             0x0223D},  // REVERSED TILDE\n     {\"bsime\",            0x022CD},  // REVERSED TILDE EQUALS\n     {\"bsol\",             0x0005C},  // REVERSE SOLIDUS\n     {\"bsolb\",            0x029C5},  // SQUARED FALLING DIAGONAL SLASH\n     {\"bsolhsub\",         0x027C8},  // REVERSE SOLIDUS PRECEDING SUBSET\n-//  \"b.tau\",            0x1D6D5},  // MATHEMATICAL BOLD SMALL TAU\n-//  \"b.Theta\",          0x1D6AF},  // MATHEMATICAL BOLD CAPITAL THETA\n-//  \"b.thetas\",         0x1D6C9},  // MATHEMATICAL BOLD SMALL THETA\n-//  \"b.thetav\",         0x1D6DD},  // MATHEMATICAL BOLD THETA SYMBOL\n     {\"bull\",             0x02022},  // BULLET\n     {\"bullet\",           0x02022},  // BULLET\n     {\"bump\",             0x0224E},  // GEOMETRICALLY EQUIVALENT TO\n     {\"bumpe\",            0x0224F},  // DIFFERENCE BETWEEN\n     {\"bumpE\",            0x02AAE},  // EQUALS SIGN WITH BUMPY ABOVE\n     {\"Bumpeq\",           0x0224E},  // GEOMETRICALLY EQUIVALENT TO\n     {\"bumpeq\",           0x0224F},  // DIFFERENCE BETWEEN\n-//  \"b.Upsi\",           0x1D6BC},  // MATHEMATICAL BOLD CAPITAL UPSILON\n-//  \"b.upsi\",           0x1D6D6},  // MATHEMATICAL BOLD SMALL UPSILON\n-//  \"b.Xi\",             0x1D6B5},  // MATHEMATICAL BOLD CAPITAL XI\n-//  \"b.xi\",             0x1D6CF},  // MATHEMATICAL BOLD SMALL XI\n-//  \"b.zeta\",           0x1D6C7},  // MATHEMATICAL BOLD SMALL ZETA\n ];\n \n immutable NameId[] namesC =\n@@ -337,7 +295,7 @@ immutable NameId[] namesC =\n     {\"capcup\",           0x02A47},  // INTERSECTION ABOVE UNION\n     {\"capdot\",           0x02A40},  // INTERSECTION WITH DOT\n     {\"CapitalDifferentialD\", 0x02145},  // DOUBLE-STRUCK ITALIC CAPITAL D\n-//  \"caps\",             0x02229;0x0FE00},  // INTERSECTION with serifs\n+    {\"caps\",             0x02229, 0x0FE00},  // INTERSECTION with serifs\n     {\"caret\",            0x02041},  // CARET INSERTION POINT\n     {\"caron\",            0x002C7},  // CARON\n     {\"Cayleys\",          0x0212D},  // BLACK-LETTER CAPITAL C\n@@ -440,7 +398,7 @@ immutable NameId[] namesC =\n     {\"cupcup\",           0x02A4A},  // UNION BESIDE AND JOINED WITH UNION\n     {\"cupdot\",           0x0228D},  // MULTISET MULTIPLICATION\n     {\"cupor\",            0x02A45},  // UNION WITH LOGICAL OR\n-//  \"cups\",             0x0222A;0x0FE00},  // UNION with serifs\n+    {\"cups\",             0x0222A, 0x0FE00},  // UNION with serifs\n     {\"curarr\",           0x021B7},  // CLOCKWISE TOP SEMICIRCLE ARROW\n     {\"curarrm\",          0x0293C},  // TOP ARC CLOCKWISE ARROW WITH MINUS\n     {\"curlyeqprec\",      0x022DE},  // EQUAL TO OR PRECEDES\n@@ -694,7 +652,7 @@ immutable NameId[] namesF =\n     {\"filig\",            0x0FB01},  // LATIN SMALL LIGATURE FI\n     {\"FilledSmallSquare\", 0x025FC},  // BLACK MEDIUM SQUARE\n     {\"FilledVerySmallSquare\", 0x025AA},  // BLACK SMALL SQUARE\n-//  \"fjlig\",            0x00066;0x0006A},  // fj ligature\n+    {\"fjlig\",            0x00066, 0x0006A},  // fj ligature\n     {\"flat\",             0x0266D},  // MUSIC FLAT SIGN\n     {\"fllig\",            0x0FB02},  // LATIN SMALL LIGATURE FL\n     {\"fltns\",            0x025B1},  // WHITE PARALLELOGRAM\n@@ -757,7 +715,7 @@ immutable NameId[] namesG =\n     {\"gesdot\",           0x02A80},  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE\n     {\"gesdoto\",          0x02A82},  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE\n     {\"gesdotol\",         0x02A84},  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT\n-//  \"gesl\",             0x022DB;0x0FE00},  // GREATER-THAN slanted EQUAL TO OR LESS-THAN\n+    {\"gesl\",             0x022DB, 0x0FE00},  // GREATER-THAN slanted EQUAL TO OR LESS-THAN\n     {\"gesles\",           0x02A94},  // GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL\n     {\"Gfr\",              0x1D50A},  // MATHEMATICAL FRAKTUR CAPITAL G\n     {\"gfr\",              0x1D524},  // MATHEMATICAL FRAKTUR SMALL G\n@@ -810,8 +768,8 @@ immutable NameId[] namesG =\n     {\"gtreqqless\",       0x02A8C},  // GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN\n     {\"gtrless\",          0x02277},  // GREATER-THAN OR LESS-THAN\n     {\"gtrsim\",           0x02273},  // GREATER-THAN OR EQUIVALENT TO\n-//  \"gvertneqq\",        0x02269;0x0FE00},  // GREATER-THAN BUT NOT EQUAL TO - with vertical stroke\n-//  \"gvnE\",             0x02269;0x0FE00},  // GREATER-THAN BUT NOT EQUAL TO - with vertical stroke\n+    {\"gvertneqq\",        0x02269, 0x0FE00},  // GREATER-THAN BUT NOT EQUAL TO - with vertical stroke\n+    {\"gvnE\",             0x02269, 0x0FE00},  // GREATER-THAN BUT NOT EQUAL TO - with vertical stroke\n ];\n \n immutable NameId[] namesH =\n@@ -1020,7 +978,7 @@ immutable NameId[] namesL =\n     {\"latail\",           0x02919},  // LEFTWARDS ARROW-TAIL\n     {\"lAtail\",           0x0291B},  // LEFTWARDS DOUBLE ARROW-TAIL\n     {\"late\",             0x02AAD},  // LARGER THAN OR EQUAL TO\n-//  \"lates\",            0x02AAD;0x0FE00},  // LARGER THAN OR slanted EQUAL\n+    {\"lates\",            0x02AAD, 0x0FE00},  // LARGER THAN OR slanted EQUAL\n     {\"lbarr\",            0x0290C},  // LEFTWARDS DOUBLE DASH ARROW\n     {\"lBarr\",            0x0290E},  // LEFTWARDS TRIPLE DASH ARROW\n     {\"lbbrk\",            0x02772},  // LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT\n@@ -1091,7 +1049,7 @@ immutable NameId[] namesL =\n     {\"lesdot\",           0x02A7F},  // LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE\n     {\"lesdoto\",          0x02A81},  // LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE\n     {\"lesdotor\",         0x02A83},  // LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT\n-//  \"lesg\",             0x022DA;0x0FE00},  // LESS-THAN slanted EQUAL TO OR GREATER-THAN\n+    {\"lesg\",             0x022DA, 0x0FE00},  // LESS-THAN slanted EQUAL TO OR GREATER-THAN\n     {\"lesges\",           0x02A93},  // LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL\n     {\"lessapprox\",       0x02A85},  // LESS-THAN OR APPROXIMATE\n     {\"lessdot\",          0x022D6},  // LESS-THAN WITH DOT\n@@ -1202,8 +1160,8 @@ immutable NameId[] namesL =\n     {\"ltrPar\",           0x02996},  // DOUBLE RIGHT ARC LESS-THAN BRACKET\n     {\"lurdshar\",         0x0294A},  // LEFT BARB UP RIGHT BARB DOWN HARPOON\n     {\"luruhar\",          0x02966},  // LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP\n-//  \"lvertneqq\",        0x02268;0x0FE00},  // LESS-THAN BUT NOT EQUAL TO - with vertical stroke\n-//  \"lvnE\",             0x02268;0x0FE00},  // LESS-THAN BUT NOT EQUAL TO - with vertical stroke\n+    {\"lvertneqq\",        0x02268, 0x0FE00},  // LESS-THAN BUT NOT EQUAL TO - with vertical stroke\n+    {\"lvnE\",             0x02268, 0x0FE00},  // LESS-THAN BUT NOT EQUAL TO - with vertical stroke\n ];\n \n immutable NameId[] namesM =\n@@ -1263,25 +1221,25 @@ immutable NameId[] namesN =\n     {\"nabla\",            0x02207},  // NABLA\n     {\"Nacute\",           0x00143},  // LATIN CAPITAL LETTER N WITH ACUTE\n     {\"nacute\",           0x00144},  // LATIN SMALL LETTER N WITH ACUTE\n-//  \"nang\",             0x02220;0x020D2},  // ANGLE with vertical line\n+    {\"nang\",             0x02220, 0x020D2},  // ANGLE with vertical line\n     {\"nap\",              0x02249},  // NOT ALMOST EQUAL TO\n-//  \"napE\",             0x02A70;0x00338},  // APPROXIMATELY EQUAL OR EQUAL TO with slash\n-//  \"napid\",            0x0224B;0x00338},  // TRIPLE TILDE with slash\n+    {\"napE\",             0x02A70, 0x00338},  // APPROXIMATELY EQUAL OR EQUAL TO with slash\n+    {\"napid\",            0x0224B, 0x00338},  // TRIPLE TILDE with slash\n     {\"napos\",            0x00149},  // LATIN SMALL LETTER N PRECEDED BY APOSTROPHE\n     {\"napprox\",          0x02249},  // NOT ALMOST EQUAL TO\n     {\"natur\",            0x0266E},  // MUSIC NATURAL SIGN\n     {\"natural\",          0x0266E},  // MUSIC NATURAL SIGN\n     {\"naturals\",         0x02115},  // DOUBLE-STRUCK CAPITAL N\n     {\"nbsp\",             0x000A0},  // NO-BREAK SPACE\n-//  \"nbump\",            0x0224E;0x00338},  // GEOMETRICALLY EQUIVALENT TO with slash\n-//  \"nbumpe\",           0x0224F;0x00338},  // DIFFERENCE BETWEEN with slash\n+    {\"nbump\",            0x0224E, 0x00338},  // GEOMETRICALLY EQUIVALENT TO with slash\n+    {\"nbumpe\",           0x0224F, 0x00338},  // DIFFERENCE BETWEEN with slash\n     {\"ncap\",             0x02A43},  // INTERSECTION WITH OVERBAR\n     {\"Ncaron\",           0x00147},  // LATIN CAPITAL LETTER N WITH CARON\n     {\"ncaron\",           0x00148},  // LATIN SMALL LETTER N WITH CARON\n     {\"Ncedil\",           0x00145},  // LATIN CAPITAL LETTER N WITH CEDILLA\n     {\"ncedil\",           0x00146},  // LATIN SMALL LETTER N WITH CEDILLA\n     {\"ncong\",            0x02247},  // NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO\n-//  \"ncongdot\",         0x02A6D;0x00338},  // CONGRUENT WITH DOT ABOVE with slash\n+    {\"ncongdot\",         0x02A6D, 0x00338},  // CONGRUENT WITH DOT ABOVE with slash\n     {\"ncup\",             0x02A42},  // UNION WITH OVERBAR\n     {\"Ncy\",              0x0041D},  // CYRILLIC CAPITAL LETTER EN\n     {\"ncy\",              0x0043D},  // CYRILLIC SMALL LETTER EN\n@@ -1291,35 +1249,35 @@ immutable NameId[] namesN =\n     {\"nearr\",            0x02197},  // NORTH EAST ARROW\n     {\"neArr\",            0x021D7},  // NORTH EAST DOUBLE ARROW\n     {\"nearrow\",          0x02197},  // NORTH EAST ARROW\n-//  \"nedot\",            0x02250;0x00338},  // APPROACHES THE LIMIT with slash\n+    {\"nedot\",            0x02250, 0x00338},  // APPROACHES THE LIMIT with slash\n     {\"NegativeMediumSpace\", 0x0200B},  // ZERO WIDTH SPACE\n     {\"NegativeThickSpace\", 0x0200B},  // ZERO WIDTH SPACE\n     {\"NegativeThinSpace\", 0x0200B},  // ZERO WIDTH SPACE\n     {\"NegativeVeryThinSpace\", 0x0200B},  // ZERO WIDTH SPACE\n     {\"nequiv\",           0x02262},  // NOT IDENTICAL TO\n     {\"nesear\",           0x02928},  // NORTH EAST ARROW AND SOUTH EAST ARROW\n-//  \"nesim\",            0x02242;0x00338},  // MINUS TILDE with slash\n+    {\"nesim\",            0x02242, 0x00338},  // MINUS TILDE with slash\n     {\"NestedGreaterGreater\", 0x0226B},  // MUCH GREATER-THAN\n     {\"NestedLessLess\",   0x0226A},  // MUCH LESS-THAN\n     {\"NewLine\",          0x0000A},  // LINE FEED (LF)\n     {\"nexist\",           0x02204},  // THERE DOES NOT EXIST\n     {\"nexists\",          0x02204},  // THERE DOES NOT EXIST\n     {\"Nfr\",              0x1D511},  // MATHEMATICAL FRAKTUR CAPITAL N\n     {\"nfr\",              0x1D52B},  // MATHEMATICAL FRAKTUR SMALL N\n-//  \"ngE\",              0x02267;0x00338},  // GREATER-THAN OVER EQUAL TO with slash\n+    {\"ngE\",              0x02267, 0x00338},  // GREATER-THAN OVER EQUAL TO with slash\n     {\"nge\",              0x02271},  // NEITHER GREATER-THAN NOR EQUAL TO\n     {\"ngeq\",             0x02271},  // NEITHER GREATER-THAN NOR EQUAL TO\n-//  \"ngeqq\",            0x02267;0x00338},  // GREATER-THAN OVER EQUAL TO with slash\n-//  \"ngeqslant\",        0x02A7E;0x00338},  // GREATER-THAN OR SLANTED EQUAL TO with slash\n-//  \"nges\",             0x02A7E;0x00338},  // GREATER-THAN OR SLANTED EQUAL TO with slash\n-//  \"nGg\",              0x022D9;0x00338},  // VERY MUCH GREATER-THAN with slash\n+    {\"ngeqq\",            0x02267, 0x00338},  // GREATER-THAN OVER EQUAL TO with slash\n+    {\"ngeqslant\",        0x02A7E, 0x00338},  // GREATER-THAN OR SLANTED EQUAL TO with slash\n+    {\"nges\",             0x02A7E, 0x00338},  // GREATER-THAN OR SLANTED EQUAL TO with slash\n+    {\"nGg\",              0x022D9, 0x00338},  // VERY MUCH GREATER-THAN with slash\n     {\"Ngr\",              0x0039D},  // GREEK CAPITAL LETTER NU\n     {\"ngr\",              0x003BD},  // GREEK SMALL LETTER NU\n     {\"ngsim\",            0x02275},  // NEITHER GREATER-THAN NOR EQUIVALENT TO\n-//  \"nGt\",              0x0226B;0x020D2},  // MUCH GREATER THAN with vertical line\n+    {\"nGt\",              0x0226B, 0x020D2},  // MUCH GREATER THAN with vertical line\n     {\"ngt\",              0x0226F},  // NOT GREATER-THAN\n     {\"ngtr\",             0x0226F},  // NOT GREATER-THAN\n-//  \"nGtv\",             0x0226B;0x00338},  // MUCH GREATER THAN with slash\n+    {\"nGtv\",             0x0226B, 0x00338},  // MUCH GREATER THAN with slash\n     {\"nharr\",            0x021AE},  // LEFT RIGHT ARROW WITH STROKE\n     {\"nhArr\",            0x021CE},  // LEFT RIGHT DOUBLE ARROW WITH STROKE\n     {\"nhpar\",            0x02AF2},  // PARALLEL WITH HORIZONTAL STROKE\n@@ -1332,24 +1290,24 @@ immutable NameId[] namesN =\n     {\"nlarr\",            0x0219A},  // LEFTWARDS ARROW WITH STROKE\n     {\"nlArr\",            0x021CD},  // LEFTWARDS DOUBLE ARROW WITH STROKE\n     {\"nldr\",             0x02025},  // TWO DOT LEADER\n-//  \"nlE\",              0x02266;0x00338},  // LESS-THAN OVER EQUAL TO with slash\n+    {\"nlE\",              0x02266, 0x00338},  // LESS-THAN OVER EQUAL TO with slash\n     {\"nle\",              0x02270},  // NEITHER LESS-THAN NOR EQUAL TO\n     {\"nleftarrow\",       0x0219A},  // LEFTWARDS ARROW WITH STROKE\n     {\"nLeftarrow\",       0x021CD},  // LEFTWARDS DOUBLE ARROW WITH STROKE\n     {\"nleftrightarrow\",  0x021AE},  // LEFT RIGHT ARROW WITH STROKE\n     {\"nLeftrightarrow\",  0x021CE},  // LEFT RIGHT DOUBLE ARROW WITH STROKE\n     {\"nleq\",             0x02270},  // NEITHER LESS-THAN NOR EQUAL TO\n-//  \"nleqq\",            0x02266;0x00338},  // LESS-THAN OVER EQUAL TO with slash\n-//  \"nleqslant\",        0x02A7D;0x00338},  // LESS-THAN OR SLANTED EQUAL TO with slash\n-//  \"nles\",             0x02A7D;0x00338},  // LESS-THAN OR SLANTED EQUAL TO with slash\n+    {\"nleqq\",            0x02266, 0x00338},  // LESS-THAN OVER EQUAL TO with slash\n+    {\"nleqslant\",        0x02A7D, 0x00338},  // LESS-THAN OR SLANTED EQUAL TO with slash\n+    {\"nles\",             0x02A7D, 0x00338},  // LESS-THAN OR SLANTED EQUAL TO with slash\n     {\"nless\",            0x0226E},  // NOT LESS-THAN\n-//  \"nLl\",              0x022D8;0x00338},  // VERY MUCH LESS-THAN with slash\n+    {\"nLl\",              0x022D8, 0x00338},  // VERY MUCH LESS-THAN with slash\n     {\"nlsim\",            0x02274},  // NEITHER LESS-THAN NOR EQUIVALENT TO\n-//  \"nLt\",              0x0226A;0x020D2},  // MUCH LESS THAN with vertical line\n+    {\"nLt\",              0x0226A, 0x020D2},  // MUCH LESS THAN with vertical line\n     {\"nlt\",              0x0226E},  // NOT LESS-THAN\n     {\"nltri\",            0x022EA},  // NOT NORMAL SUBGROUP OF\n     {\"nltrie\",           0x022EC},  // NOT NORMAL SUBGROUP OF OR EQUAL TO\n-//  \"nLtv\",             0x0226A;0x00338},  // MUCH LESS THAN with slash\n+    {\"nLtv\",             0x0226A, 0x00338},  // MUCH LESS THAN with slash\n     {\"nmid\",             0x02224},  // DOES NOT DIVIDE\n     {\"NoBreak\",          0x02060},  // WORD JOINER\n     {\"NonBreakingSpace\", 0x000A0},  // NO-BREAK SPACE\n@@ -1362,56 +1320,56 @@ immutable NameId[] namesN =\n     {\"NotDoubleVerticalBar\", 0x02226},  // NOT PARALLEL TO\n     {\"NotElement\",       0x02209},  // NOT AN ELEMENT OF\n     {\"NotEqual\",         0x02260},  // NOT EQUAL TO\n-//  \"NotEqualTilde\",    0x02242;0x00338},  // MINUS TILDE with slash\n+    {\"NotEqualTilde\",    0x02242, 0x00338},  // MINUS TILDE with slash\n     {\"NotExists\",        0x02204},  // THERE DOES NOT EXIST\n     {\"NotGreater\",       0x0226F},  // NOT GREATER-THAN\n     {\"NotGreaterEqual\",  0x02271},  // NEITHER GREATER-THAN NOR EQUAL TO\n-//  \"NotGreaterFullEqual\", 0x02267;0x00338},  // GREATER-THAN OVER EQUAL TO with slash\n-//  \"NotGreaterGreater\", 0x0226B;0x00338},  // MUCH GREATER THAN with slash\n+    {\"NotGreaterFullEqual\", 0x02267, 0x00338},  // GREATER-THAN OVER EQUAL TO with slash\n+    {\"NotGreaterGreater\", 0x0226B, 0x00338},  // MUCH GREATER THAN with slash\n     {\"NotGreaterLess\",   0x02279},  // NEITHER GREATER-THAN NOR LESS-THAN\n-//  \"NotGreaterSlantEqual\", 0x02A7E;0x00338},  // GREATER-THAN OR SLANTED EQUAL TO with slash\n+    {\"NotGreaterSlantEqual\", 0x02A7E, 0x00338},  // GREATER-THAN OR SLANTED EQUAL TO with slash\n     {\"NotGreaterTilde\",  0x02275},  // NEITHER GREATER-THAN NOR EQUIVALENT TO\n-//  \"NotHumpDownHump\",  0x0224E;0x00338},  // GEOMETRICALLY EQUIVALENT TO with slash\n-//  \"NotHumpEqual\",     0x0224F;0x00338},  // DIFFERENCE BETWEEN with slash\n+    {\"NotHumpDownHump\",  0x0224E, 0x00338},  // GEOMETRICALLY EQUIVALENT TO with slash\n+    {\"NotHumpEqual\",     0x0224F, 0x00338},  // DIFFERENCE BETWEEN with slash\n     {\"notin\",            0x02209},  // NOT AN ELEMENT OF\n-//  \"notindot\",         0x022F5;0x00338},  // ELEMENT OF WITH DOT ABOVE with slash\n-//  \"notinE\",           0x022F9;0x00338},  // ELEMENT OF WITH TWO HORIZONTAL STROKES with slash\n+    {\"notindot\",         0x022F5, 0x00338},  // ELEMENT OF WITH DOT ABOVE with slash\n+    {\"notinE\",           0x022F9, 0x00338},  // ELEMENT OF WITH TWO HORIZONTAL STROKES with slash\n     {\"notinva\",          0x02209},  // NOT AN ELEMENT OF\n     {\"notinvb\",          0x022F7},  // SMALL ELEMENT OF WITH OVERBAR\n     {\"notinvc\",          0x022F6},  // ELEMENT OF WITH OVERBAR\n     {\"NotLeftTriangle\",  0x022EA},  // NOT NORMAL SUBGROUP OF\n-//  \"NotLeftTriangleBar\", 0x029CF;0x00338},  // LEFT TRIANGLE BESIDE VERTICAL BAR with slash\n+    {\"NotLeftTriangleBar\", 0x029CF, 0x00338},  // LEFT TRIANGLE BESIDE VERTICAL BAR with slash\n     {\"NotLeftTriangleEqual\", 0x022EC},  // NOT NORMAL SUBGROUP OF OR EQUAL TO\n     {\"NotLess\",          0x0226E},  // NOT LESS-THAN\n     {\"NotLessEqual\",     0x02270},  // NEITHER LESS-THAN NOR EQUAL TO\n     {\"NotLessGreater\",   0x02278},  // NEITHER LESS-THAN NOR GREATER-THAN\n-//  \"NotLessLess\",      0x0226A;0x00338},  // MUCH LESS THAN with slash\n-//  \"NotLessSlantEqual\", 0x02A7D;0x00338},  // LESS-THAN OR SLANTED EQUAL TO with slash\n+    {\"NotLessLess\",      0x0226A, 0x00338},  // MUCH LESS THAN with slash\n+    {\"NotLessSlantEqual\", 0x02A7D, 0x00338},  // LESS-THAN OR SLANTED EQUAL TO with slash\n     {\"NotLessTilde\",     0x02274},  // NEITHER LESS-THAN NOR EQUIVALENT TO\n-//  \"NotNestedGreaterGreater\", 0x02AA2;0x00338},  // DOUBLE NESTED GREATER-THAN with slash\n-//  \"NotNestedLessLess\", 0x02AA1;0x00338},  // DOUBLE NESTED LESS-THAN with slash\n+    {\"NotNestedGreaterGreater\", 0x02AA2, 0x00338},  // DOUBLE NESTED GREATER-THAN with slash\n+    {\"NotNestedLessLess\", 0x02AA1, 0x00338},  // DOUBLE NESTED LESS-THAN with slash\n     {\"notni\",            0x0220C},  // DOES NOT CONTAIN AS MEMBER\n     {\"notniva\",          0x0220C},  // DOES NOT CONTAIN AS MEMBER\n     {\"notnivb\",          0x022FE},  // SMALL CONTAINS WITH OVERBAR\n     {\"notnivc\",          0x022FD},  // CONTAINS WITH OVERBAR\n     {\"NotPrecedes\",      0x02280},  // DOES NOT PRECEDE\n-//  \"NotPrecedesEqual\", 0x02AAF;0x00338},  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash\n+    {\"NotPrecedesEqual\", 0x02AAF, 0x00338},  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash\n     {\"NotPrecedesSlantEqual\", 0x022E0},  // DOES NOT PRECEDE OR EQUAL\n     {\"NotReverseElement\", 0x0220C},  // DOES NOT CONTAIN AS MEMBER\n     {\"NotRightTriangle\", 0x022EB},  // DOES NOT CONTAIN AS NORMAL SUBGROUP\n-//  \"NotRightTriangleBar\", 0x029D0;0x00338},  // VERTICAL BAR BESIDE RIGHT TRIANGLE with slash\n+    {\"NotRightTriangleBar\", 0x029D0, 0x00338},  // VERTICAL BAR BESIDE RIGHT TRIANGLE with slash\n     {\"NotRightTriangleEqual\", 0x022ED},  // DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL\n-//  \"NotSquareSubset\",  0x0228F;0x00338},  // SQUARE IMAGE OF with slash\n+    {\"NotSquareSubset\",  0x0228F, 0x00338},  // SQUARE IMAGE OF with slash\n     {\"NotSquareSubsetEqual\", 0x022E2},  // NOT SQUARE IMAGE OF OR EQUAL TO\n-//  \"NotSquareSuperset\", 0x02290;0x00338},  // SQUARE ORIGINAL OF with slash\n+    {\"NotSquareSuperset\", 0x02290, 0x00338},  // SQUARE ORIGINAL OF with slash\n     {\"NotSquareSupersetEqual\", 0x022E3},  // NOT SQUARE ORIGINAL OF OR EQUAL TO\n-//  \"NotSubset\",        0x02282;0x020D2},  // SUBSET OF with vertical line\n+    {\"NotSubset\",        0x02282, 0x020D2},  // SUBSET OF with vertical line\n     {\"NotSubsetEqual\",   0x02288},  // NEITHER A SUBSET OF NOR EQUAL TO\n     {\"NotSucceeds\",      0x02281},  // DOES NOT SUCCEED\n-//  \"NotSucceedsEqual\", 0x02AB0;0x00338},  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash\n+    {\"NotSucceedsEqual\", 0x02AB0, 0x00338},  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash\n     {\"NotSucceedsSlantEqual\", 0x022E1},  // DOES NOT SUCCEED OR EQUAL\n-//  \"NotSucceedsTilde\", 0x0227F;0x00338},  // SUCCEEDS OR EQUIVALENT TO with slash\n-//  \"NotSuperset\",      0x02283;0x020D2},  // SUPERSET OF with vertical line\n+    {\"NotSucceedsTilde\", 0x0227F, 0x00338},  // SUCCEEDS OR EQUIVALENT TO with slash\n+    {\"NotSuperset\",      0x02283, 0x020D2},  // SUPERSET OF with vertical line\n     {\"NotSupersetEqual\", 0x02289},  // NEITHER A SUPERSET OF NOR EQUAL TO\n     {\"NotTilde\",         0x02241},  // NOT TILDE\n     {\"NotTildeEqual\",    0x02244},  // NOT ASYMPTOTICALLY EQUAL TO\n@@ -1420,25 +1378,25 @@ immutable NameId[] namesN =\n     {\"NotVerticalBar\",   0x02224},  // DOES NOT DIVIDE\n     {\"npar\",             0x02226},  // NOT PARALLEL TO\n     {\"nparallel\",        0x02226},  // NOT PARALLEL TO\n-//  \"nparsl\",           0x02AFD;0x020E5},  // DOUBLE SOLIDUS OPERATOR with reverse slash\n-//  \"npart\",            0x02202;0x00338},  // PARTIAL DIFFERENTIAL with slash\n+    {\"nparsl\",           0x02AFD, 0x020E5},  // DOUBLE SOLIDUS OPERATOR with reverse slash\n+    {\"npart\",            0x02202, 0x00338},  // PARTIAL DIFFERENTIAL with slash\n     {\"npolint\",          0x02A14},  // LINE INTEGRATION NOT INCLUDING THE POLE\n     {\"npr\",              0x02280},  // DOES NOT PRECEDE\n     {\"nprcue\",           0x022E0},  // DOES NOT PRECEDE OR EQUAL\n-//  \"npre\",             0x02AAF;0x00338},  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash\n+    {\"npre\",             0x02AAF, 0x00338},  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash\n     {\"nprec\",            0x02280},  // DOES NOT PRECEDE\n-//  \"npreceq\",          0x02AAF;0x00338},  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash\n+    {\"npreceq\",          0x02AAF, 0x00338},  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash\n     {\"nrarr\",            0x0219B},  // RIGHTWARDS ARROW WITH STROKE\n     {\"nrArr\",            0x021CF},  // RIGHTWARDS DOUBLE ARROW WITH STROKE\n-//  \"nrarrc\",           0x02933;0x00338},  // WAVE ARROW POINTING DIRECTLY RIGHT with slash\n-//  \"nrarrw\",           0x0219D;0x00338},  // RIGHTWARDS WAVE ARROW with slash\n+    {\"nrarrc\",           0x02933, 0x00338},  // WAVE ARROW POINTING DIRECTLY RIGHT with slash\n+    {\"nrarrw\",           0x0219D, 0x00338},  // RIGHTWARDS WAVE ARROW with slash\n     {\"nrightarrow\",      0x0219B},  // RIGHTWARDS ARROW WITH STROKE\n     {\"nRightarrow\",      0x021CF},  // RIGHTWARDS DOUBLE ARROW WITH STROKE\n     {\"nrtri\",            0x022EB},  // DOES NOT CONTAIN AS NORMAL SUBGROUP\n     {\"nrtrie\",           0x022ED},  // DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL\n     {\"nsc\",              0x02281},  // DOES NOT SUCCEED\n     {\"nsccue\",           0x022E1},  // DOES NOT SUCCEED OR EQUAL\n-//  \"nsce\",             0x02AB0;0x00338},  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash\n+    {\"nsce\",             0x02AB0, 0x00338},  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash\n     {\"Nscr\",             0x1D4A9},  // MATHEMATICAL SCRIPT CAPITAL N\n     {\"nscr\",             0x1D4C3},  // MATHEMATICAL SCRIPT SMALL N\n     {\"nshortmid\",        0x02224},  // DOES NOT DIVIDE\n@@ -1452,18 +1410,18 @@ immutable NameId[] namesN =\n     {\"nsqsupe\",          0x022E3},  // NOT SQUARE ORIGINAL OF OR EQUAL TO\n     {\"nsub\",             0x02284},  // NOT A SUBSET OF\n     {\"nsube\",            0x02288},  // NEITHER A SUBSET OF NOR EQUAL TO\n-//  \"nsubE\",            0x02AC5;0x00338},  // SUBSET OF ABOVE EQUALS SIGN with slash\n-//  \"nsubset\",          0x02282;0x020D2},  // SUBSET OF with vertical line\n+    {\"nsubE\",            0x02AC5, 0x00338},  // SUBSET OF ABOVE EQUALS SIGN with slash\n+    {\"nsubset\",          0x02282, 0x020D2},  // SUBSET OF with vertical line\n     {\"nsubseteq\",        0x02288},  // NEITHER A SUBSET OF NOR EQUAL TO\n-//  \"nsubseteqq\",       0x02AC5;0x00338},  // SUBSET OF ABOVE EQUALS SIGN with slash\n+    {\"nsubseteqq\",       0x02AC5, 0x00338},  // SUBSET OF ABOVE EQUALS SIGN with slash\n     {\"nsucc\",            0x02281},  // DOES NOT SUCCEED\n-//  \"nsucceq\",          0x02AB0;0x00338},  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash\n+    {\"nsucceq\",          0x02AB0, 0x00338},  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash\n     {\"nsup\",             0x02285},  // NOT A SUPERSET OF\n     {\"nsupe\",            0x02289},  // NEITHER A SUPERSET OF NOR EQUAL TO\n-//  \"nsupE\",            0x02AC6;0x00338},  // SUPERSET OF ABOVE EQUALS SIGN with slash\n-//  \"nsupset\",          0x02283;0x020D2},  // SUPERSET OF with vertical line\n+    {\"nsupE\",            0x02AC6, 0x00338},  // SUPERSET OF ABOVE EQUALS SIGN with slash\n+    {\"nsupset\",          0x02283, 0x020D2},  // SUPERSET OF with vertical line\n     {\"nsupseteq\",        0x02289},  // NEITHER A SUPERSET OF NOR EQUAL TO\n-//  \"nsupseteqq\",       0x02AC6;0x00338},  // SUPERSET OF ABOVE EQUALS SIGN with slash\n+    {\"nsupseteqq\",       0x02AC6, 0x00338},  // SUPERSET OF ABOVE EQUALS SIGN with slash\n     {\"ntgl\",             0x02279},  // NEITHER GREATER-THAN NOR LESS-THAN\n     {\"Ntilde\",           0x000D1},  // LATIN CAPITAL LETTER N WITH TILDE\n     {\"ntilde\",           0x000F1},  // LATIN SMALL LETTER N WITH TILDE\n@@ -1477,22 +1435,22 @@ immutable NameId[] namesN =\n     {\"num\",              0x00023},  // NUMBER SIGN\n     {\"numero\",           0x02116},  // NUMERO SIGN\n     {\"numsp\",            0x02007},  // FIGURE SPACE\n-//  \"nvap\",             0x0224D;0x020D2},  // EQUIVALENT TO with vertical line\n+    {\"nvap\",             0x0224D, 0x020D2},  // EQUIVALENT TO with vertical line\n     {\"nvdash\",           0x022AC},  // DOES NOT PROVE\n     {\"nvDash\",           0x022AD},  // NOT TRUE\n     {\"nVdash\",           0x022AE},  // DOES NOT FORCE\n     {\"nVDash\",           0x022AF},  // NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE\n-//  \"nvge\",             0x02265;0x020D2},  // GREATER-THAN OR EQUAL TO with vertical line\n-//  \"nvgt\",             0x0003E;0x020D2},  // GREATER-THAN SIGN with vertical line\n+    {\"nvge\",             0x02265, 0x020D2},  // GREATER-THAN OR EQUAL TO with vertical line\n+    {\"nvgt\",             0x0003E, 0x020D2},  // GREATER-THAN SIGN with vertical line\n     {\"nvHarr\",           0x02904},  // LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE\n     {\"nvinfin\",          0x029DE},  // INFINITY NEGATED WITH VERTICAL BAR\n     {\"nvlArr\",           0x02902},  // LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE\n-//  \"nvle\",             0x02264;0x020D2},  // LESS-THAN OR EQUAL TO with vertical line\n-//  \"nvlt\",             0x0003C;0x020D2},  // LESS-THAN SIGN with vertical line\n-//  \"nvltrie\",          0x022B4;0x020D2},  // NORMAL SUBGROUP OF OR EQUAL TO with vertical line\n+    {\"nvle\",             0x02264, 0x020D2},  // LESS-THAN OR EQUAL TO with vertical line\n+    {\"nvlt\",             0x0003C, 0x020D2},  // LESS-THAN SIGN with vertical line\n+    {\"nvltrie\",          0x022B4, 0x020D2},  // NORMAL SUBGROUP OF OR EQUAL TO with vertical line\n     {\"nvrArr\",           0x02903},  // RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE\n-//  \"nvrtrie\",          0x022B5;0x020D2},  // CONTAINS AS NORMAL SUBGROUP OR EQUAL TO with vertical line\n-//  \"nvsim\",            0x0223C;0x020D2},  // TILDE OPERATOR with vertical line\n+    {\"nvrtrie\",          0x022B5, 0x020D2},  // CONTAINS AS NORMAL SUBGROUP OR EQUAL TO with vertical line\n+    {\"nvsim\",            0x0223C, 0x020D2},  // TILDE OPERATOR with vertical line\n     {\"nwarhk\",           0x02923},  // NORTH WEST ARROW WITH HOOK\n     {\"nwarr\",            0x02196},  // NORTH WEST ARROW\n     {\"nwArr\",            0x021D6},  // NORTH WEST DOUBLE ARROW\n@@ -1704,7 +1662,7 @@ immutable NameId[] namesQ =\n immutable NameId[] namesR =\n [\n     {\"rAarr\",            0x021DB},  // RIGHTWARDS TRIPLE ARROW\n-//  \"race\",             0x0223D;0x00331},  // REVERSED TILDE with underline\n+    {\"race\",             0x0223D, 0x00331},  // REVERSED TILDE with underline\n     {\"Racute\",           0x00154},  // LATIN CAPITAL LETTER R WITH ACUTE\n     {\"racute\",           0x00155},  // LATIN SMALL LETTER R WITH ACUTE\n     {\"radic\",            0x0221A},  // SQUARE ROOT\n@@ -1932,7 +1890,7 @@ immutable NameId[] namesS =\n     {\"smile\",            0x02323},  // SMILE\n     {\"smt\",              0x02AAA},  // SMALLER THAN\n     {\"smte\",             0x02AAC},  // SMALLER THAN OR EQUAL TO\n-//  \"smtes\",            0x02AAC;0x0FE00},  // SMALLER THAN OR slanted EQUAL\n+    {\"smtes\",            0x02AAC, 0x0FE00},  // SMALLER THAN OR slanted EQUAL\n     {\"SOFTcy\",           0x0042C},  // CYRILLIC CAPITAL LETTER SOFT SIGN\n     {\"softcy\",           0x0044C},  // CYRILLIC SMALL LETTER SOFT SIGN\n     {\"sol\",              0x0002F},  // SOLIDUS\n@@ -1944,9 +1902,9 @@ immutable NameId[] namesS =\n     {\"spadesuit\",        0x02660},  // BLACK SPADE SUIT\n     {\"spar\",             0x02225},  // PARALLEL TO\n     {\"sqcap\",            0x02293},  // SQUARE CAP\n-//  \"sqcaps\",           0x02293;0x0FE00},  // SQUARE CAP with serifs\n+    {\"sqcaps\",           0x02293, 0x0FE00},  // SQUARE CAP with serifs\n     {\"sqcup\",            0x02294},  // SQUARE CUP\n-//  \"sqcups\",           0x02294;0x0FE00},  // SQUARE CUP with serifs\n+    {\"sqcups\",           0x02294, 0x0FE00},  // SQUARE CUP with serifs\n     {\"Sqrt\",             0x0221A},  // SQUARE ROOT\n     {\"sqsub\",            0x0228F},  // SQUARE IMAGE OF\n     {\"sqsube\",           0x02291},  // SQUARE IMAGE OF OR EQUAL TO\n@@ -2082,7 +2040,7 @@ immutable NameId[] namesT =\n     {\"thgr\",             0x003B8},  // GREEK SMALL LETTER THETA\n     {\"thickapprox\",      0x02248},  // ALMOST EQUAL TO\n     {\"thicksim\",         0x0223C},  // TILDE OPERATOR\n-//  \"ThickSpace\",       0x0205F;0x0200A},  // space of width 5/18 em\n+    {\"ThickSpace\",       0x0205F, 0x0200A},  // space of width 5/18 em\n     {\"thinsp\",           0x02009},  // THIN SPACE\n     {\"ThinSpace\",        0x02009},  // THIN SPACE\n     {\"thkap\",            0x02248},  // ALMOST EQUAL TO\n@@ -2245,10 +2203,10 @@ immutable NameId[] namesV =\n     {\"vArr\",             0x021D5},  // UP DOWN DOUBLE ARROW\n     {\"varrho\",           0x003F1},  // GREEK RHO SYMBOL\n     {\"varsigma\",         0x003C2},  // GREEK SMALL LETTER FINAL SIGMA\n-//  \"varsubsetneq\",     0x0228A;0x0FE00},  // SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members\n-//  \"varsubsetneqq\",    0x02ACB;0x0FE00},  // SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members\n-//  \"varsupsetneq\",     0x0228B;0x0FE00},  // SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members\n-//  \"varsupsetneqq\",    0x02ACC;0x0FE00},  // SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members\n+    {\"varsubsetneq\",     0x0228A, 0x0FE00},  // SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members\n+    {\"varsubsetneqq\",    0x02ACB, 0x0FE00},  // SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members\n+    {\"varsupsetneq\",     0x0228B, 0x0FE00},  // SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members\n+    {\"varsupsetneqq\",    0x02ACC, 0x0FE00},  // SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members\n     {\"vartheta\",         0x003D1},  // GREEK THETA SYMBOL\n     {\"vartriangleleft\",  0x022B2},  // NORMAL SUBGROUP OF\n     {\"vartriangleright\", 0x022B3},  // CONTAINS AS NORMAL SUBGROUP\n@@ -2279,18 +2237,18 @@ immutable NameId[] namesV =\n     {\"Vfr\",              0x1D519},  // MATHEMATICAL FRAKTUR CAPITAL V\n     {\"vfr\",              0x1D533},  // MATHEMATICAL FRAKTUR SMALL V\n     {\"vltri\",            0x022B2},  // NORMAL SUBGROUP OF\n-//  \"vnsub\",            0x02282;0x020D2},  // SUBSET OF with vertical line\n-//  \"vnsup\",            0x02283;0x020D2},  // SUPERSET OF with vertical line\n+    {\"vnsub\",            0x02282, 0x020D2},  // SUBSET OF with vertical line\n+    {\"vnsup\",            0x02283, 0x020D2},  // SUPERSET OF with vertical line\n     {\"Vopf\",             0x1D54D},  // MATHEMATICAL DOUBLE-STRUCK CAPITAL V\n     {\"vopf\",             0x1D567},  // MATHEMATICAL DOUBLE-STRUCK SMALL V\n     {\"vprop\",            0x0221D},  // PROPORTIONAL TO\n     {\"vrtri\",            0x022B3},  // CONTAINS AS NORMAL SUBGROUP\n     {\"Vscr\",             0x1D4B1},  // MATHEMATICAL SCRIPT CAPITAL V\n     {\"vscr\",             0x1D4CB},  // MATHEMATICAL SCRIPT SMALL V\n-//  \"vsubne\",           0x0228A;0x0FE00},  // SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members\n-//  \"vsubnE\",           0x02ACB;0x0FE00},  // SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members\n-//  \"vsupne\",           0x0228B;0x0FE00},  // SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members\n-//  \"vsupnE\",           0x02ACC;0x0FE00},  // SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members\n+    {\"vsubne\",           0x0228A, 0x0FE00},  // SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members\n+    {\"vsubnE\",           0x02ACB, 0x0FE00},  // SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members\n+    {\"vsupne\",           0x0228B, 0x0FE00},  // SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members\n+    {\"vsupnE\",           0x02ACC, 0x0FE00},  // SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members\n     {\"Vvdash\",           0x022AA},  // TRIPLE VERTICAL BAR RIGHT TURNSTILE\n     {\"vzigzag\",          0x0299A},  // VERTICAL ZIGZAG LINE\n ];"}, {"sha": "e7626b0b1476e010d466112ca7fd31ea4cce027f", "filename": "gcc/d/dmd/escape.d", "status": "modified", "additions": 156, "deletions": 213, "changes": 369, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fescape.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fescape.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fescape.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -409,23 +409,9 @@ bool checkParamArgumentEscape(Scope* sc, FuncDeclaration fdc, Parameter par, Var\n         {\n             unsafeAssign!\"scope variable\"(v);\n         }\n-        else if (v.isTypesafeVariadicParameter && p == sc.func)\n+        else if (v.isTypesafeVariadicArray && p == sc.func)\n         {\n-            Type tb = v.type.toBasetype();\n-            if (tb.ty == Tarray || tb.ty == Tsarray)\n-            {\n-                unsafeAssign!\"variadic variable\"(v);\n-            }\n-        }\n-        else\n-        {\n-            /* v is not 'scope', and is assigned to a parameter that may escape.\n-             * Therefore, v can never be 'scope'.\n-             */\n-            if (log) printf(\"no infer for %s in %s loc %s, fdc %s, %d\\n\",\n-                v.toChars(), sc.func.ident.toChars(), sc.func.loc.toChars(), fdc.ident.toChars(),  __LINE__);\n-\n-            doNotInferScope(v, vPar);\n+            unsafeAssign!\"variadic variable\"(v);\n         }\n     }\n \n@@ -673,9 +659,8 @@ bool checkAssignEscape(Scope* sc, Expression e, bool gag, bool byRef)\n     FuncDeclaration fd = sc.func;\n \n \n-    // Determine if va is a parameter that is an indirect reference\n-    const bool vaIsRef = va && va.storage_class & STC.parameter &&\n-        (va.isReference() || va.type.toBasetype().isTypeClass()); // ref, out, or class\n+    // Determine if va is a `ref` parameter, so it has a lifetime exceding the function scope\n+    const bool vaIsRef = va && va.isParameter() && va.isReference();\n     if (log && vaIsRef) printf(\"va is ref `%s`\\n\", va.toChars());\n \n     /* Determine if va is the first parameter, through which other 'return' parameters\n@@ -717,7 +702,7 @@ bool checkAssignEscape(Scope* sc, Expression e, bool gag, bool byRef)\n         Dsymbol p = v.toParent2();\n \n         if (va && !vaIsRef && !va.isScope() && !v.isScope() &&\n-            !v.isTypesafeVariadicParameter && !va.isTypesafeVariadicParameter &&\n+            !v.isTypesafeVariadicArray && !va.isTypesafeVariadicArray &&\n             (va.isParameter() && va.maybeScope && v.isParameter() && v.maybeScope) &&\n             p == fd)\n         {\n@@ -727,99 +712,76 @@ bool checkAssignEscape(Scope* sc, Expression e, bool gag, bool byRef)\n             continue;\n         }\n \n-        if (vaIsFirstRef &&\n-            (v.isScope() || v.maybeScope) &&\n-            !(v.storage_class & STC.return_) &&\n-            v.isParameter() &&\n-            fd.flags & FUNCFLAG.returnInprocess &&\n-            p == fd &&\n-            !v.isTypesafeVariadicParameter)\n+        if (vaIsFirstRef && p == fd)\n         {\n-            if (log) printf(\"inferring 'return' for parameter %s in function %s\\n\", v.toChars(), fd.toChars());\n-            inferReturn(fd, v, /*returnScope:*/ true); // infer addition of 'return' to make `return scope`\n+            inferReturn(fd, v, /*returnScope:*/ true);\n         }\n \n         if (!(va && va.isScope()) || vaIsRef)\n             notMaybeScope(v, e);\n \n         if (v.isScope())\n         {\n-            if (vaIsFirstRef && v.isParameter() && v.storage_class & STC.return_)\n+            if (vaIsFirstRef && v.isParameter() && v.isReturn())\n             {\n                 // va=v, where v is `return scope`\n-                if (va.isScope())\n+                if (inferScope(va))\n                     continue;\n-\n-                if (va.maybeScope)\n-                {\n-                    if (log) printf(\"inferring scope for lvalue %s\\n\", va.toChars());\n-                    va.storage_class |= STC.scope_ | STC.scopeinferred;\n-                    continue;\n-                }\n             }\n \n-            if (va && va.isScope() && va.storage_class & STC.return_ && !(v.storage_class & STC.return_))\n+            // If va's lifetime encloses v's, then error\n+            if (EnclosedBy eb = va.enclosesLifetimeOf(v))\n             {\n-                // va may return its value, but v does not allow that, so this is an error\n-                if (sc.setUnsafeDIP1000(gag, ae.loc, \"scope variable `%s` assigned to return scope `%s`\", v, va))\n+                const(char)* msg;\n+                final switch (eb)\n                 {\n-                    result = true;\n-                    continue;\n+                    case EnclosedBy.none: assert(0);\n+                    case EnclosedBy.returnScope:\n+                        msg = \"scope variable `%s` assigned to return scope `%s`\";\n+                        break;\n+                    case EnclosedBy.longerScope:\n+                        if (v.storage_class & STC.temp)\n+                            continue;\n+                        msg = \"scope variable `%s` assigned to `%s` with longer lifetime\";\n+                        break;\n+                    case EnclosedBy.refVar:\n+                        msg = \"scope variable `%s` assigned to `ref` variable `%s` with longer lifetime\";\n+                        break;\n+                    case EnclosedBy.global:\n+                        msg = \"scope variable `%s` assigned to global variable `%s`\";\n+                        break;\n                 }\n-            }\n \n-            // If va's lifetime encloses v's, then error\n-            if (va && !va.isDataseg() &&\n-                ((va.enclosesLifetimeOf(v) && !(v.storage_class & STC.temp)) || vaIsRef))\n-            {\n-                if (sc.setUnsafeDIP1000(gag, ae.loc, \"scope variable `%s` assigned to `%s` with longer lifetime\", v, va))\n+                if (sc.setUnsafeDIP1000(gag, ae.loc, msg, v, va))\n                 {\n                     result = true;\n                     continue;\n                 }\n             }\n \n-            if (va && !va.isDataseg() && (va.isScope() || va.maybeScope))\n+            // v = scope, va should be scope as well\n+            const vaWasScope = va && va.isScope();\n+            if (inferScope(va))\n             {\n-                if (!va.isScope())\n-                {   /* v is scope, and va is not scope, so va needs to\n-                     * infer scope\n-                     */\n-                    if (log) printf(\"inferring scope for %s\\n\", va.toChars());\n-                    va.storage_class |= STC.scope_ | STC.scopeinferred;\n-                    /* v returns, and va does not return, so va needs\n-                     * to infer return\n-                     */\n-                    if (v.storage_class & STC.return_ &&\n-                        !(va.storage_class & STC.return_))\n-                    {\n-                        if (log) printf(\"infer return for %s\\n\", va.toChars());\n-                        va.storage_class |= STC.return_ | STC.returninferred;\n+                // In case of `scope local = returnScopeParam`, do not infer return scope for `x`\n+                if (!vaWasScope && v.isReturn() && !va.isReturn())\n+                {\n+                    if (log) printf(\"infer return for %s\\n\", va.toChars());\n+                    va.storage_class |= STC.return_ | STC.returninferred;\n \n-                        // Added \"return scope\" so don't confuse it with \"return ref\"\n-                        if (isRefReturnScope(va.storage_class))\n-                            va.storage_class |= STC.returnScope;\n-                    }\n+                    // Added \"return scope\" so don't confuse it with \"return ref\"\n+                    if (isRefReturnScope(va.storage_class))\n+                        va.storage_class |= STC.returnScope;\n                 }\n                 continue;\n             }\n             result |= sc.setUnsafeDIP1000(gag, ae.loc, \"scope variable `%s` assigned to non-scope `%s`\", v, e1);\n         }\n-        else if (v.isTypesafeVariadicParameter && p == fd)\n+        else if (v.isTypesafeVariadicArray && p == fd)\n         {\n-            Type tb = v.type.toBasetype();\n-            if (tb.ty == Tarray || tb.ty == Tsarray)\n-            {\n-                if (va && !va.isDataseg() && (va.isScope() || va.maybeScope))\n-                {\n-                    if (!va.isScope())\n-                    {   //printf(\"inferring scope for %s\\n\", va.toChars());\n-                        va.storage_class |= STC.scope_ | STC.scopeinferred;\n-                    }\n-                    continue;\n-                }\n-                result |= sc.setUnsafeDIP1000(gag, ae.loc, \"variadic variable `%s` assigned to non-scope `%s`\", v, e1);\n-            }\n+            if (inferScope(va))\n+                continue;\n+            result |= sc.setUnsafeDIP1000(gag, ae.loc, \"variadic variable `%s` assigned to non-scope `%s`\", v, e1);\n         }\n         else\n         {\n@@ -845,7 +807,7 @@ bool checkAssignEscape(Scope* sc, Expression e, bool gag, bool byRef)\n \n         if (va && va.isScope() && !v.isReference())\n         {\n-            if (!(va.storage_class & STC.return_))\n+            if (!va.isReturn())\n             {\n                 va.doNotInferReturn = true;\n             }\n@@ -858,19 +820,14 @@ bool checkAssignEscape(Scope* sc, Expression e, bool gag, bool byRef)\n \n         Dsymbol p = v.toParent2();\n \n-        if (vaIsFirstRef && v.isParameter() &&\n-            !(v.storage_class & STC.return_) &&\n-            fd.flags & FUNCFLAG.returnInprocess &&\n-            p == fd)\n+        if (vaIsFirstRef && p == fd)\n         {\n             //if (log) printf(\"inferring 'return' for parameter %s in function %s\\n\", v.toChars(), fd.toChars());\n             inferReturn(fd, v, /*returnScope:*/ false);\n         }\n \n         // If va's lifetime encloses v's, then error\n-        if (va &&\n-            !(vaIsFirstRef && (v.storage_class & STC.return_)) &&\n-            (va.enclosesLifetimeOf(v) || (va.isReference() && !(va.storage_class & STC.temp)) || va.isDataseg()))\n+        if (va && !(vaIsFirstRef && v.isReturn()) && va.enclosesLifetimeOf(v))\n         {\n             if (sc.setUnsafeDIP1000(gag, ae.loc, \"address of variable `%s` assigned to `%s` with longer lifetime\", v, va))\n             {\n@@ -885,13 +842,9 @@ bool checkAssignEscape(Scope* sc, Expression e, bool gag, bool byRef)\n         if (p != sc.func)\n             continue;\n \n-        if (va && !va.isDataseg() && (va.isScope() || va.maybeScope))\n+        if (inferScope(va))\n         {\n-            if (!va.isScope())\n-            {   //printf(\"inferring scope for %s\\n\", va.toChars());\n-                va.storage_class |= STC.scope_ | STC.scopeinferred;\n-            }\n-            if (v.storage_class & STC.return_ && !(va.storage_class & STC.return_))\n+            if (v.isReturn() && !va.isReturn())\n                 va.storage_class |= STC.return_ | STC.returninferred;\n             continue;\n         }\n@@ -912,7 +865,7 @@ bool checkAssignEscape(Scope* sc, Expression e, bool gag, bool byRef)\n          * then uncount that address of. This is so it won't cause a\n          * closure to be allocated.\n          */\n-        if (va && va.isScope() && !(va.storage_class & STC.return_) && func.tookAddressOf)\n+        if (va && va.isScope() && !va.isReturn() && func.tookAddressOf)\n             --func.tookAddressOf;\n \n         foreach (v; vars)\n@@ -978,14 +931,8 @@ bool checkAssignEscape(Scope* sc, Expression e, bool gag, bool byRef)\n             }\n         }\n \n-        if (va && !va.isDataseg() && (va.isScope() || va.maybeScope))\n-        {\n-            if (!va.isScope())\n-            {   //printf(\"inferring scope for %s\\n\", va.toChars());\n-                va.storage_class |= STC.scope_ | STC.scopeinferred;\n-            }\n+        if (inferScope(va))\n             continue;\n-        }\n \n         result |= sc.setUnsafeDIP1000(gag, ee.loc,\n             \"reference to stack allocated value returned by `%s` assigned to non-scope `%s`\", ee, e1);\n@@ -1091,14 +1038,10 @@ bool checkNewEscape(Scope* sc, Expression e, bool gag)\n                 continue;\n             }\n         }\n-        else if (v.isTypesafeVariadicParameter && p == sc.func)\n+        else if (v.isTypesafeVariadicArray && p == sc.func)\n         {\n-            Type tb = v.type.toBasetype();\n-            if (tb.ty == Tarray || tb.ty == Tsarray)\n-            {\n-                result |= sc.setUnsafeDIP1000(gag, e.loc,\n-                    \"copying `%s` into allocated memory escapes a reference to variadic parameter `%s`\", e, v);\n-            }\n+            result |= sc.setUnsafeDIP1000(gag, e.loc,\n+                \"copying `%s` into allocated memory escapes a reference to variadic parameter `%s`\", e, v);\n         }\n         else\n         {\n@@ -1258,15 +1201,8 @@ private bool checkReturnEscapeImpl(Scope* sc, Expression e, bool refs, bool gag)\n \n         Dsymbol p = v.toParent2();\n \n-        if ((v.isScope() || v.maybeScope) &&\n-            !(v.storage_class & STC.return_) &&\n-            v.isParameter() &&\n-            !v.doNotInferReturn &&\n-            sc.func.flags & FUNCFLAG.returnInprocess &&\n-            p == sc.func &&\n-            !v.isTypesafeVariadicParameter)\n+        if (p == sc.func && inferReturn(sc.func, v, /*returnScope:*/ true))\n         {\n-            inferReturn(sc.func, v, /*returnScope:*/ true); // infer addition of 'return'\n             continue;\n         }\n \n@@ -1300,7 +1236,7 @@ private bool checkReturnEscapeImpl(Scope* sc, Expression e, bool refs, bool gag)\n                 !(!refs && sc.func.isFuncDeclaration().getLevel(pfunc, sc.intypeof) > 0)\n                )\n             {\n-                if (v.isParameter() && !(v.storage_class & STC.return_))\n+                if (v.isParameter() && !v.isReturn())\n                 {\n                     // https://issues.dlang.org/show_bug.cgi?id=23191\n                     if (!gag)\n@@ -1320,15 +1256,11 @@ private bool checkReturnEscapeImpl(Scope* sc, Expression e, bool refs, bool gag)\n                 }\n             }\n         }\n-        else if (v.isTypesafeVariadicParameter && p == sc.func)\n+        else if (v.isTypesafeVariadicArray && p == sc.func)\n         {\n-            Type tb = v.type.toBasetype();\n-            if (tb.ty == Tarray || tb.ty == Tsarray)\n-            {\n-                if (!gag)\n-                    error(e.loc, \"returning `%s` escapes a reference to variadic parameter `%s`\", e.toChars(), v.toChars());\n-                result = false;\n-            }\n+            if (!gag)\n+                error(e.loc, \"returning `%s` escapes a reference to variadic parameter `%s`\", e.toChars(), v.toChars());\n+            result = false;\n         }\n         else\n         {\n@@ -1414,7 +1346,7 @@ private bool checkReturnEscapeImpl(Scope* sc, Expression e, bool refs, bool gag)\n                 continue;\n             }\n             FuncDeclaration fd = p.isFuncDeclaration();\n-            if (fd && sc.func.flags & FUNCFLAG.returnInprocess)\n+            if (fd && sc.func.returnInprocess)\n             {\n                 /* Code like:\n                  *   int x;\n@@ -1435,10 +1367,10 @@ private bool checkReturnEscapeImpl(Scope* sc, Expression e, bool refs, bool gag)\n              vsr == ScopeRef.Ref_ReturnScope) &&\n             !(v.storage_class & STC.foreach_))\n         {\n-            if (sc.func.flags & FUNCFLAG.returnInprocess && p == sc.func &&\n-                (vsr == ScopeRef.Ref || vsr == ScopeRef.RefScope))\n+            if (p == sc.func && (vsr == ScopeRef.Ref || vsr == ScopeRef.RefScope) &&\n+                inferReturn(sc.func, v, /*returnScope:*/ false))\n             {\n-                inferReturn(sc.func, v, /*returnScope:*/ false); // infer addition of 'return'\n+                continue;\n             }\n             else\n             {\n@@ -1488,17 +1420,49 @@ private bool checkReturnEscapeImpl(Scope* sc, Expression e, bool refs, bool gag)\n     return result;\n }\n \n+/***********************************\n+ * Infer `scope` for a variable\n+ *\n+ * Params:\n+ *      va = variable to infer scope for\n+ * Returns: `true` if succesful or already `scope`\n+ */\n+bool inferScope(VarDeclaration va)\n+{\n+    if (!va)\n+        return false;\n+    if (!va.isDataseg() && va.maybeScope && !va.isScope())\n+    {\n+        //printf(\"inferring scope for %s\\n\", va.toChars());\n+        va.maybeScope = false;\n+        va.storage_class |= STC.scope_ | STC.scopeinferred;\n+        return true;\n+    }\n+    return va.isScope();\n+}\n \n /*************************************\n  * Variable v needs to have 'return' inferred for it.\n  * Params:\n  *      fd = function that v is a parameter to\n  *      v = parameter that needs to be STC.return_\n  *      returnScope = infer `return scope` instead of `return ref`\n+ *\n+ * Returns: whether the inference on `v` was successful or `v` already was `return`\n  */\n-private void inferReturn(FuncDeclaration fd, VarDeclaration v, bool returnScope)\n+private bool inferReturn(FuncDeclaration fd, VarDeclaration v, bool returnScope)\n {\n-    // v is a local in the current function\n+    if (v.isReturn())\n+        return !!(v.storage_class & STC.returnScope) == returnScope;\n+\n+    if (!v.isParameter() || v.isTypesafeVariadicArray || (returnScope && v.doNotInferReturn))\n+        return false;\n+\n+    if (!fd.returnInprocess)\n+        return false;\n+\n+    if (returnScope && !(v.isScope() || v.maybeScope))\n+        return false;\n \n     //printf(\"for function '%s' inferring 'return' for variable '%s', returnScope: %d\\n\", fd.toChars(), v.toChars(), returnScope);\n     auto newStcs = STC.return_ | STC.returninferred | (returnScope ? STC.returnScope : 0);\n@@ -1532,6 +1496,7 @@ private void inferReturn(FuncDeclaration fd, VarDeclaration v, bool returnScope)\n             }\n         }\n     }\n+    return true;\n }\n \n \n@@ -1694,7 +1659,7 @@ void escapeByValue(Expression e, EscapeByResults* er, bool live = false, bool re\n             {\n                 if (tb.ty == Tsarray)\n                     return;\n-                if (v.isTypesafeVariadicParameter)\n+                if (v.isTypesafeVariadicArray)\n                 {\n                     er.byvalue.push(v);\n                     return;\n@@ -2008,13 +1973,10 @@ void escapeByRef(Expression e, EscapeByResults* er, bool live = false, bool retR\n         if (auto ve = e.e1.isVarExp())\n         {\n             VarDeclaration v = ve.var.isVarDeclaration();\n-            if (tb.ty == Tarray || tb.ty == Tsarray)\n+            if (v && v.isTypesafeVariadicArray)\n             {\n-                if (v && v.isTypesafeVariadicParameter)\n-                {\n-                    er.pushRef(v, retRefTransition);\n-                    return;\n-                }\n+                er.pushRef(v, retRefTransition);\n+                return;\n             }\n         }\n         if (tb.ty == Tsarray)\n@@ -2339,9 +2301,9 @@ private void doNotInferScope(VarDeclaration v, RootObject o)\n void finishScopeParamInference(FuncDeclaration funcdecl, ref TypeFunction f)\n {\n \n-    if (funcdecl.flags & FUNCFLAG.returnInprocess)\n+    if (funcdecl.returnInprocess)\n     {\n-        funcdecl.flags &= ~FUNCFLAG.returnInprocess;\n+        funcdecl.returnInprocess = false;\n         if (funcdecl.storage_class & STC.return_)\n         {\n             if (funcdecl.type == f)\n@@ -2353,9 +2315,9 @@ void finishScopeParamInference(FuncDeclaration funcdecl, ref TypeFunction f)\n         }\n     }\n \n-    if (!(funcdecl.flags & FUNCFLAG.inferScope))\n+    if (!funcdecl.inferScope)\n         return;\n-    funcdecl.flags &= ~FUNCFLAG.inferScope;\n+    funcdecl.inferScope = false;\n \n     // Eliminate maybescope's\n     {\n@@ -2387,22 +2349,19 @@ void finishScopeParamInference(FuncDeclaration funcdecl, ref TypeFunction f)\n         foreach (u, p; f.parameterList)\n         {\n             auto v = (*funcdecl.parameters)[u];\n-            if (v.maybeScope)\n+            if (!v.isScope() && inferScope(v))\n             {\n                 //printf(\"Inferring scope for %s\\n\", v.toChars());\n-                notMaybeScope(v, null);\n-                v.storage_class |= STC.scope_ | STC.scopeinferred;\n                 p.storageClass |= STC.scope_ | STC.scopeinferred;\n             }\n         }\n     }\n \n-    if (funcdecl.vthis && funcdecl.vthis.maybeScope)\n+    if (funcdecl.vthis)\n     {\n-        notMaybeScope(funcdecl.vthis, null);\n-        funcdecl.vthis.storage_class |= STC.scope_ | STC.scopeinferred;\n-        f.isScopeQual = true;\n-        f.isscopeinferred = true;\n+        inferScope(funcdecl.vthis);\n+        f.isScopeQual = funcdecl.vthis.isScope();\n+        f.isscopeinferred = !!(funcdecl.vthis.storage_class & STC.scopeinferred);\n     }\n }\n \n@@ -2542,20 +2501,45 @@ bool isReferenceToMutable(Parameter p, Type t)\n     return isReferenceToMutable(p.type);\n }\n \n+/// When checking lifetime for assignment `va=v`, the way `va` encloses `v`\n+private enum EnclosedBy\n+{\n+    none = 0,\n+    refVar, // `va` is a `ref` variable, which may link to a global variable\n+    global, // `va` is a global variable\n+    returnScope, // `va` is a scope variable that may be returned\n+    longerScope, // `va` is another scope variable declared earlier than `v`\n+}\n+\n /**********************************\n-* Determine if `va` has a lifetime that lasts past\n-* the destruction of `v`\n-* Params:\n-*     va = variable assigned to\n-*     v = variable being assigned\n-* Returns:\n-*     true if it does\n-*/\n-private bool enclosesLifetimeOf(const VarDeclaration va, const VarDeclaration v) pure\n+ * Determine if `va` has a lifetime that lasts past\n+ * the destruction of `v`\n+ * Params:\n+ *     va = variable assigned to\n+ *     v = variable being assigned\n+ * Returns:\n+ *     The way `va` encloses `v` (if any)\n+ */\n+private EnclosedBy enclosesLifetimeOf(VarDeclaration va, VarDeclaration v)\n {\n+    if (!va)\n+        return EnclosedBy.none;\n+\n+    if (va.isDataseg())\n+        return EnclosedBy.global;\n+\n+    if (va.isScope() && va.isReturn() && !v.isReturn())\n+        return EnclosedBy.returnScope;\n+\n+    if (va.isReference() && va.isParameter())\n+        return EnclosedBy.refVar;\n+\n     assert(va.sequenceNumber != va.sequenceNumber.init);\n     assert(v.sequenceNumber != v.sequenceNumber.init);\n-    return va.sequenceNumber < v.sequenceNumber;\n+    if (va.sequenceNumber < v.sequenceNumber)\n+        return EnclosedBy.longerScope;\n+\n+    return EnclosedBy.none;\n }\n \n /***************************************\n@@ -2576,53 +2560,6 @@ private void addMaybe(VarDeclaration va, VarDeclaration v)\n     va.maybes.push(v);\n }\n \n-/***************************************\n- * Like `FuncDeclaration.setUnsafe`, but modified for dip25 / dip1000 by default transitions\n- *\n- * With `-preview=dip1000` it actually sets the function as unsafe / prints an error, while\n- * without it, it only prints a deprecation in a `@safe` function.\n- * With `-revert=preview=dip1000`, it doesn't do anything.\n- *\n- * Params:\n- *   sc = used for checking whether we are in a deprecated scope\n- *   fs = command line setting of dip1000 / dip25\n- *   gag = surpress error message\n- *   loc = location of error\n- *   fmt = printf-style format string\n- *   arg0  = (optional) argument for first %s format specifier\n- *   arg1  = (optional) argument for second %s format specifier\n- *   arg2  = (optional) argument for third %s format specifier\n- * Returns: whether an actual safe error (not deprecation) occured\n- */\n-private bool setUnsafePreview(Scope* sc, FeatureState fs, bool gag, Loc loc, const(char)* msg,\n-    RootObject arg0 = null, RootObject arg1 = null, RootObject arg2 = null)\n-{\n-    if (fs == FeatureState.disabled)\n-    {\n-        return false;\n-    }\n-    else if (fs == FeatureState.enabled)\n-    {\n-        return sc.setUnsafe(gag, loc, msg, arg0, arg1, arg2);\n-    }\n-    else\n-    {\n-        if (sc.func.isSafeBypassingInference())\n-        {\n-            if (!gag)\n-                previewErrorFunc(sc.isDeprecated(), fs)(\n-                    loc, msg, arg0 ? arg0.toChars() : \"\", arg1 ? arg1.toChars() : \"\", arg2 ? arg2.toChars() : \"\"\n-                );\n-        }\n-        else if (!sc.func.safetyViolation)\n-        {\n-            import dmd.func : AttributeViolation;\n-            sc.func.safetyViolation = new AttributeViolation(loc, msg, arg0, arg1, arg2);\n-        }\n-        return false;\n-    }\n-}\n-\n // `setUnsafePreview` partially evaluated for dip1000\n private bool setUnsafeDIP1000(Scope* sc, bool gag, Loc loc, const(char)* msg,\n     RootObject arg0 = null, RootObject arg1 = null, RootObject arg2 = null)\n@@ -2671,13 +2608,19 @@ private bool checkScopeVarAddr(VarDeclaration v, Expression e, Scope* sc, bool g\n }\n \n /****************************\n- * Determine if `v` is a typesafe variadic parameter.\n+ * Determine if `v` is a typesafe variadic array, which is implicitly `scope`\n  * Params:\n  *      v = variable to check\n  * Returns:\n  *      true if `v` is a variadic parameter\n  */\n-bool isTypesafeVariadicParameter(VarDeclaration v)\n+private bool isTypesafeVariadicArray(VarDeclaration v)\n {\n-    return !!(v.storage_class & STC.variadic);\n+    if (v.storage_class & STC.variadic)\n+    {\n+        Type tb = v.type.toBasetype();\n+        if (tb.ty == Tarray || tb.ty == Tsarray)\n+            return true;\n+    }\n+    return false;\n }"}, {"sha": "21f5cc76a4b63cfb3985794b78a884148c6296a6", "filename": "gcc/d/dmd/expression.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fexpression.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fexpression.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -2949,7 +2949,7 @@ extern (C++) final class ArrayLiteralExp : Expression\n \n     Expressions* elements;\n     OwnedBy ownedByCtfe = OwnedBy.code;\n-\n+    bool onstack = false;\n \n     extern (D) this(const ref Loc loc, Type type, Expressions* elements)\n     {"}, {"sha": "79bc5288577ae780d96de9debd975ba2b4ac8312", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -419,6 +419,7 @@ class ArrayLiteralExp final : public Expression\n     Expression *basis;\n     Expressions *elements;\n     OwnedBy ownedByCtfe;\n+    bool onstack;\n \n     static ArrayLiteralExp *create(const Loc &loc, Expressions *elements);\n     static void emplace(UnionExp *pue, const Loc &loc, Expressions *elements);"}, {"sha": "f899bd79d20b177ea8121ed292b4551adb0fd41a", "filename": "gcc/d/dmd/expressionsem.d", "status": "modified", "additions": 117, "deletions": 56, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -353,6 +353,37 @@ extern(D) bool arrayExpressionSemantic(\n     return err;\n }\n \n+/*\n+Checks if `exp` contains a direct access to a `noreturn`\n+variable. If that is the case, an `assert(0)` expression\n+is generated and returned. This function should be called\n+only after semantic analysis has been performed on `exp`.\n+\n+Params:\n+    exp = expression that is checked\n+\n+Returns:\n+    An `assert(0)` expression if `exp` contains a `noreturn`\n+    variable access, `exp` otherwise.\n+*/\n+\n+Expression checkNoreturnVarAccess(Expression exp)\n+{\n+    assert(exp.type);\n+\n+    Expression result = exp;\n+    if (exp.type.isTypeNoreturn() && !exp.isAssertExp() &&\n+        !exp.isThrowExp() && !exp.isCallExp())\n+    {\n+        auto msg = new StringExp(exp.loc, \"Accessed expression of type `noreturn`\");\n+        msg.type = Type.tstring;\n+        result = new AssertExp(exp.loc, IntegerExp.literal!0, msg);\n+        result.type = exp.type;\n+    }\n+\n+    return result;\n+}\n+\n /******************************\n  * Check the tail CallExp is really property function call.\n  * Bugs:\n@@ -848,6 +879,18 @@ Lagain:\n             if (d)\n                 d.checkDisabled(loc, sc);\n         }\n+\n+        if (auto sd = s.isDeclaration())\n+        {\n+            if (sd.isSystem())\n+            {\n+                if (sc.setUnsafePreview(global.params.systemVariables, false, loc,\n+                    \"cannot access `@system` variable `%s` in @safe code\", sd))\n+                {\n+                    return ErrorExp.get();\n+                }\n+            }\n+        }\n     }\n \n     if (auto em = s.isEnumMember())\n@@ -1714,7 +1757,7 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n         if (sc._module)\n             sc._module.hasAlwaysInlines = true;\n         if (sc.func)\n-            sc.func.flags |= FUNCFLAG.hasAlwaysInline;\n+            sc.func.hasAlwaysInlines = true;\n     }\n \n     const isCtorCall = fd && fd.needThis() && fd.isCtorDeclaration();\n@@ -2200,14 +2243,14 @@ private bool functionParameters(const ref Loc loc, Scope* sc,\n     /* If calling C scanf(), printf(), or any variants, check the format string against the arguments\n      */\n     const isVa_list = tf.parameterList.varargs == VarArg.none;\n-    if (fd && fd.flags & FUNCFLAG.printf)\n+    if (fd && fd.printf)\n     {\n         if (auto se = (*arguments)[nparams - 1 - isVa_list].isStringExp())\n         {\n             checkPrintfFormat(se.loc, se.peekString(), (*arguments)[nparams .. nargs], isVa_list);\n         }\n     }\n-    else if (fd && fd.flags & FUNCFLAG.scanf)\n+    else if (fd && fd.scanf)\n     {\n         if (auto se = (*arguments)[nparams - 1 - isVa_list].isStringExp())\n         {\n@@ -4628,8 +4671,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 else if (exp.arguments.dim == 1)\n                 {\n                     e = (*exp.arguments)[0];\n-                    e = e.implicitCastTo(sc, t1);\n-                    e = new CastExp(exp.loc, e, t1);\n+                    if (!e.type.isTypeNoreturn())\n+                        e = e.implicitCastTo(sc, t1);\n                 }\n                 else\n                 {\n@@ -7474,6 +7517,11 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return;\n         }\n \n+        if (exp.e1.type.isTypeNoreturn() && (!exp.to || !exp.to.isTypeNoreturn()))\n+        {\n+            result = exp.e1;\n+            return;\n+        }\n         if (exp.to && !exp.to.isTypeSArray() && !exp.to.isTypeFunction())\n             exp.e1 = exp.e1.arrayFuncConv(sc);\n \n@@ -7889,7 +7937,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 return setError();\n             }\n         }\n-        else if (t1b.ty == Tvector)\n+        else if (t1b.ty == Tvector && exp.e1.isLvalue())\n         {\n             // Convert e1 to corresponding static array\n             TypeVector tv1 = cast(TypeVector)t1b;\n@@ -8896,7 +8944,7 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             exp.e1 = e1x;\n             assert(exp.e1.type);\n         }\n-        Type t1 = exp.e1.type.toBasetype();\n+        Type t1 = exp.e1.type.isTypeEnum() ? exp.e1.type : exp.e1.type.toBasetype();\n \n         /* Run this.e2 semantic.\n          * Different from other binary expressions, the analysis of e2\n@@ -8918,14 +8966,10 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 e2x.checkSharedAccess(sc))\n                 return setError();\n \n-            if (e2x.type.isTypeNoreturn() && !e2x.isAssertExp() && !e2x.isThrowExp() && !e2x.isCallExp())\n-            {\n-                auto msg = new StringExp(e2x.loc, \"Accessed expression of type `noreturn`\");\n-                msg.type = Type.tstring;\n-                e2x = new AssertExp(e2x.loc, IntegerExp.literal!0, msg);\n-                e2x.type = Type.tnoreturn;\n-                return setResult(e2x);\n-            }\n+            auto etmp = checkNoreturnVarAccess(e2x);\n+            if (etmp != e2x)\n+                return setResult(etmp);\n+\n             exp.e2 = e2x;\n         }\n \n@@ -9890,55 +9934,66 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n \n         exp.type = exp.e1.type;\n         assert(exp.type);\n+        auto assignElem = exp.e2;\n         auto res = exp.op == EXP.assign ? exp.reorderSettingAAElem(sc) : exp;\n-        Expression tmp;\n         /* https://issues.dlang.org/show_bug.cgi?id=22366\n          *\n          * `reorderSettingAAElem` creates a tree of comma expressions, however,\n          * `checkAssignExp` expects only AssignExps.\n          */\n-        checkAssignEscape(sc, Expression.extractLast(res, tmp), false, false);\n+        if (res == exp) // no `AA[k] = v` rewrite was performed\n+            checkAssignEscape(sc, res, false, false);\n+        else\n+            checkNewEscape(sc, assignElem, false); // assigning to AA puts it on heap\n \n         if (auto ae = res.isConstructExp())\n         {\n             Type t1b = ae.e1.type.toBasetype();\n             if (t1b.ty != Tsarray && t1b.ty != Tarray)\n                 return setResult(res);\n \n-            /* Do not lower Rvalues and references, as they need to be moved,\n-             * not copied.\n-             * Skip the lowering when the RHS is an array literal, as e2ir\n-             * already handles such cases more elegantly.\n-             */\n-            const isArrayCtor =\n-                (ae.e1.isSliceExp || ae.e1.type.ty == Tsarray) &&\n-                ae.e2.isLvalue &&\n-                !(ae.e1.isVarExp &&\n-                    ae.e1.isVarExp.var.isVarDeclaration.isReference) &&\n-                (ae.e2.isVarExp ||\n-                    ae.e2.isSliceExp ||\n-                    (ae.e2.type.ty == Tsarray && !ae.e2.isArrayLiteralExp)) &&\n-                ae.e1.type.nextOf &&\n-                ae.e2.type.nextOf &&\n-                ae.e1.type.nextOf.mutableOf.equals(ae.e2.type.nextOf.mutableOf);\n-\n-            /* Unlike isArrayCtor above, lower all Rvalues. If the RHS is a literal,\n-             * then we do want to make a temporary for it and call its destructor.\n-             */\n-            const isArraySetCtor =\n-                (ae.e1.isSliceExp || ae.e1.type.ty == Tsarray) &&\n-                (ae.e2.type.ty == Tstruct || ae.e2.type.ty == Tsarray) &&\n-                ae.e1.type.nextOf &&\n-                ae.e1.type.nextOf.equivalent(ae.e2.type);\n+            // only non-trivial array constructions may need to be lowered (non-POD elements basically)\n+            Type t1e = t1b.nextOf();\n+            TypeStruct ts = t1e.baseElemOf().isTypeStruct();\n+            if (!ts || (!ts.sym.postblit && !ts.sym.hasCopyCtor && !ts.sym.dtor))\n+                return setResult(res);\n \n-            if (isArrayCtor || isArraySetCtor)\n+            // don't lower ref-constructions etc.\n+            if (!(t1b.ty == Tsarray || ae.e1.isSliceExp) ||\n+                (ae.e1.isVarExp && ae.e1.isVarExp.var.isVarDeclaration.isReference))\n+                return setResult(res);\n+\n+            // Construction from an equivalent other array?\n+            // Only lower with lvalue RHS elements; let the glue layer move rvalue elements.\n+            Type t2b = ae.e2.type.toBasetype();\n+            // skip over a (possibly implicit) cast of a static array RHS to a slice\n+            Expression rhs = ae.e2;\n+            Type rhsType = t2b;\n+            if (t2b.ty == Tarray)\n             {\n-                const ts = t1b.nextOf().baseElemOf().isTypeStruct();\n-                if (!ts || (!ts.sym.postblit && !ts.sym.hasCopyCtor && !ts.sym.dtor))\n-                    return setResult(res);\n+                if (auto ce = rhs.isCastExp())\n+                {\n+                    auto ct = ce.e1.type.toBasetype();\n+                    if (ct.ty == Tsarray)\n+                    {\n+                        rhs = ce.e1;\n+                        rhsType = ct;\n+                    }\n+                }\n+            }\n+            const lowerToArrayCtor =\n+                ( (rhsType.ty == Tarray && !rhs.isArrayLiteralExp) ||\n+                  (rhsType.ty == Tsarray && rhs.isLvalue) ) &&\n+                t1e.equivalent(t2b.nextOf);\n+\n+            // Construction from a single element?\n+            // If the RHS is an rvalue, then we'll need to make a temporary for it (copied multiple times).\n+            const lowerToArraySetCtor = !lowerToArrayCtor && t1e.equivalent(t2b);\n \n-                auto func = isArrayCtor ? Id._d_arrayctor : Id._d_arraysetctor;\n-                const other = isArrayCtor ? \"other array\" : \"value\";\n+            if (lowerToArrayCtor || lowerToArraySetCtor)\n+            {\n+                auto func = lowerToArrayCtor ? Id._d_arrayctor : Id._d_arraysetctor;\n+                const other = lowerToArrayCtor ? \"other array\" : \"value\";\n                 if (!verifyHookExist(exp.loc, *sc, func, \"construct array with \" ~ other, Id.object))\n                     return setError();\n \n@@ -9948,18 +10003,18 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 id = new DotIdExp(exp.loc, id, func);\n \n                 auto arguments = new Expressions();\n-                arguments.push(new CastExp(ae.loc, ae.e1, ae.e1.type.nextOf.arrayOf).expressionSemantic(sc));\n-                if (isArrayCtor)\n+                arguments.push(new CastExp(ae.loc, ae.e1, t1e.arrayOf).expressionSemantic(sc));\n+                if (lowerToArrayCtor)\n                 {\n-                    arguments.push(new CastExp(ae.loc, ae.e2, ae.e2.type.nextOf.arrayOf).expressionSemantic(sc));\n+                    arguments.push(new CastExp(ae.loc, rhs, t2b.nextOf.arrayOf).expressionSemantic(sc));\n                     Expression ce = new CallExp(exp.loc, id, arguments);\n                     res = ce.expressionSemantic(sc);\n                 }\n                 else\n                 {\n                     Expression e0;\n-                    // If ae.e2 is not a variable, construct a temp variable, as _d_arraysetctor requires `ref` access\n-                    if (!ae.e2.isVarExp)\n+                    // promote an rvalue RHS element to a temporary, it's passed by ref to _d_arraysetctor\n+                    if (!ae.e2.isLvalue)\n                     {\n                         auto vd = copyToTemp(STC.scope_, \"__setctor\", ae.e2);\n                         e0 = new DeclarationExp(vd.loc, vd).expressionSemantic(sc);\n@@ -11759,6 +11814,10 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             result = arrayLowering;\n             return;\n         }\n+\n+        if (t1.isTypeVector())\n+            exp.type = t1;\n+\n         result = exp;\n         return;\n     }\n@@ -12038,6 +12097,9 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return;\n         }\n \n+        if (t1.isTypeVector())\n+            exp.type = t1;\n+\n         result = exp;\n     }\n \n@@ -12490,8 +12552,7 @@ Expression semanticX(DotIdExp exp, Scope* sc)\n                 if (f.checkForwardRef(loc))\n                     return ErrorExp.get();\n \n-                if (f.flags & (FUNCFLAG.purityInprocess | FUNCFLAG.safetyInprocess |\n-                               FUNCFLAG.nothrowInprocess | FUNCFLAG.nogcInprocess))\n+                if (f.purityInprocess || f.safetyInprocess || f.nothrowInprocess || f.nogcInprocess)\n                 {\n                     f.error(loc, \"cannot retrieve its `.mangleof` while inferring attributes\");\n                     return ErrorExp.get();\n@@ -13099,7 +13160,7 @@ Lerr:\n  */\n bool checkSharedAccess(Expression e, Scope* sc, bool returnRef = false)\n {\n-    if (!global.params.noSharedAccess ||\n+    if (global.params.noSharedAccess != FeatureState.enabled ||\n         sc.intypeof ||\n         sc.flags & SCOPE.ctfe)\n     {"}, {"sha": "3b0b34e603df9112072a9fb37044625039359efc", "filename": "gcc/d/dmd/func.d", "status": "modified", "additions": 138, "deletions": 138, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Ffunc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Ffunc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -182,7 +182,7 @@ public:\n             catches.push(ctch);\n \n             Statement s2 = new TryCatchStatement(Loc.initial, s._body, catches);\n-            fd.flags &= ~FUNCFLAG.noEH;\n+            fd.hasNoEH = false;\n             replaceCurrent(s2);\n             s2.accept(this);\n         }\n@@ -191,31 +191,31 @@ public:\n     }\n }\n \n-enum FUNCFLAG : uint\n+private struct FUNCFLAG\n {\n-    purityInprocess  = 1,      /// working on determining purity\n-    safetyInprocess  = 2,      /// working on determining safety\n-    nothrowInprocess = 4,      /// working on determining nothrow\n-    nogcInprocess    = 8,      /// working on determining @nogc\n-    returnInprocess  = 0x10,   /// working on inferring 'return' for parameters\n-    inlineScanned    = 0x20,   /// function has been scanned for inline possibilities\n-    inferScope       = 0x40,   /// infer 'scope' for parameters\n-    hasCatches       = 0x80,   /// function has try-catch statements\n-    compileTimeOnly  = 0x100,  /// is a compile time only function; no code will be generated for it\n-    printf           = 0x200,  /// is a printf-like function\n-    scanf            = 0x400,  /// is a scanf-like function\n-    noreturn         = 0x800,  /// the function does not return\n-    NRVO             = 0x1000, /// Support for named return value optimization\n-    naked            = 0x2000, /// The function is 'naked' (see inline ASM)\n-    generated        = 0x4000, /// The function is compiler generated (e.g. `opCmp`)\n-    introducing      = 0x8000, /// If this function introduces the overload set\n-    semantic3Errors  = 0x10000, /// If errors in semantic3 this function's frame ptr\n-    noEH             = 0x20000, /// No exception unwinding is needed\n-    inferRetType     = 0x40000, /// Return type is to be inferred\n-    dualContext      = 0x80000, /// has a dual-context 'this' parameter\n-    hasAlwaysInline  = 0x100000, /// Contains references to functions that must be inlined\n-    CRTCtor          = 0x200000, /// Has attribute pragma(crt_constructor)\n-    CRTDtor          = 0x400000, /// Has attribute pragma(crt_destructor)\n+    bool purityInprocess;    /// working on determining purity\n+    bool safetyInprocess;    /// working on determining safety\n+    bool nothrowInprocess;   /// working on determining nothrow\n+    bool nogcInprocess;      /// working on determining @nogc\n+    bool returnInprocess;    /// working on inferring 'return' for parameters\n+    bool inlineScanned;      /// function has been scanned for inline possibilities\n+    bool inferScope;         /// infer 'scope' for parameters\n+    bool hasCatches;         /// function has try-catch statements\n+    bool isCompileTimeOnly;  /// is a compile time only function; no code will be generated for it\n+    bool printf;             /// is a printf-like function\n+    bool scanf;              /// is a scanf-like function\n+    bool noreturn;           /// the function does not return\n+    bool isNRVO = true;      /// Support for named return value optimization\n+    bool isNaked;            /// The function is 'naked' (see inline ASM)\n+    bool isGenerated;        /// The function is compiler generated (e.g. `opCmp`)\n+    bool isIntroducing;      /// If this function introduces the overload set\n+    bool hasSemantic3Errors; /// If errors in semantic3 this function's frame ptr\n+    bool hasNoEH;            /// No exception unwinding is needed\n+    bool inferRetType;       /// Return type is to be inferred\n+    bool hasDualContext;     /// has a dual-context 'this' parameter\n+    bool hasAlwaysInlines;   /// Contains references to functions that must be inlined\n+    bool isCrtCtor;          /// Has attribute pragma(crt_constructor)\n+    bool isCrtDtor;          /// Has attribute pragma(crt_destructor)\n }\n \n /***********************************************************\n@@ -348,9 +348,9 @@ extern (C++) class FuncDeclaration : Declaration\n     /// better diagnostics\n     AttributeViolation* safetyViolation;\n \n-    /// Function flags: A collection of boolean packed for memory efficiency\n-    /// See the `FUNCFLAG` enum\n-    uint flags = FUNCFLAG.NRVO;\n+    /// See the `FUNCFLAG` struct\n+    import dmd.common.bitfields;\n+    mixin(generateBitFields!(FUNCFLAG, uint));\n \n     /**\n      * Data for a function declaration that is needed for the Objective-C\n@@ -373,13 +373,13 @@ extern (C++) class FuncDeclaration : Declaration\n         }\n         this.endloc = endloc;\n         if (noreturn)\n-            this.flags |= FUNCFLAG.noreturn;\n+            this.noreturn = true;\n \n         /* The type given for \"infer the return type\" is a TypeFunction with\n          * NULL for the return type.\n          */\n         if (type && type.nextOf() is null)\n-            this.flags |= FUNCFLAG.inferRetType;\n+            this.inferRetType = true;\n     }\n \n     static FuncDeclaration create(const ref Loc loc, const ref Loc endloc, Identifier id, StorageClass storage_class, Type type, bool noreturn = false)\n@@ -391,7 +391,7 @@ extern (C++) class FuncDeclaration : Declaration\n     {\n         //printf(\"FuncDeclaration::syntaxCopy('%s')\\n\", toChars());\n         FuncDeclaration f = s ? cast(FuncDeclaration)s\n-                              : new FuncDeclaration(loc, endloc, ident, storage_class, type.syntaxCopy(), (flags & FUNCFLAG.noreturn) != 0);\n+                              : new FuncDeclaration(loc, endloc, ident, storage_class, type.syntaxCopy(), this.noreturn != 0);\n         f.frequires = frequires ? Statement.arraySyntaxCopy(frequires) : null;\n         f.fensures = fensures ? Ensure.arraySyntaxCopy(fensures) : null;\n         f.fbody = fbody ? fbody.syntaxCopy() : null;\n@@ -522,7 +522,7 @@ extern (C++) class FuncDeclaration : Declaration\n     {\n         const bool dualCtx = (toParent2() != toParentLocal());\n         if (dualCtx)\n-            this.flags |= FUNCFLAG.dualContext;\n+            this.hasDualContext = true;\n         auto ad = isThis();\n         if (!dualCtx && !ad && !isNested())\n         {\n@@ -1376,29 +1376,29 @@ extern (C++) class FuncDeclaration : Declaration\n         //printf(\"initInferAttributes() for %s (%s)\\n\", toPrettyChars(), ident.toChars());\n         TypeFunction tf = type.toTypeFunction();\n         if (tf.purity == PURE.impure) // purity not specified\n-            flags |= FUNCFLAG.purityInprocess;\n+            purityInprocess = true;\n \n         if (tf.trust == TRUST.default_)\n-            flags |= FUNCFLAG.safetyInprocess;\n+            safetyInprocess = true;\n \n         if (!tf.isnothrow)\n-            flags |= FUNCFLAG.nothrowInprocess;\n+            nothrowInprocess = true;\n \n         if (!tf.isnogc)\n-            flags |= FUNCFLAG.nogcInprocess;\n+            nogcInprocess = true;\n \n         if (!isVirtual() || this.isIntroducing())\n-            flags |= FUNCFLAG.returnInprocess;\n+            returnInprocess = true;\n \n         // Initialize for inferring STC.scope_\n-        flags |= FUNCFLAG.inferScope;\n+        inferScope = true;\n     }\n \n     final PURE isPure()\n     {\n         //printf(\"FuncDeclaration::isPure() '%s'\\n\", toChars());\n         TypeFunction tf = type.toTypeFunction();\n-        if (flags & FUNCFLAG.purityInprocess)\n+        if (purityInprocess)\n             setImpure();\n         if (tf.purity == PURE.fwdref)\n             tf.purityLevel();\n@@ -1424,7 +1424,7 @@ extern (C++) class FuncDeclaration : Declaration\n \n     final PURE isPureBypassingInference()\n     {\n-        if (flags & FUNCFLAG.purityInprocess)\n+        if (purityInprocess)\n             return PURE.fwdref;\n         else\n             return isPure();\n@@ -1437,9 +1437,9 @@ extern (C++) class FuncDeclaration : Declaration\n      */\n     extern (D) final bool setImpure()\n     {\n-        if (flags & FUNCFLAG.purityInprocess)\n+        if (purityInprocess)\n         {\n-            flags &= ~FUNCFLAG.purityInprocess;\n+            purityInprocess = false;\n             if (fes)\n                 fes.func.setImpure();\n         }\n@@ -1448,21 +1448,32 @@ extern (C++) class FuncDeclaration : Declaration\n         return false;\n     }\n \n+    extern (D) final uint flags()\n+    {\n+        return bitFields;\n+    }\n+\n+    extern (D) final uint flags(uint f)\n+    {\n+        bitFields = f;\n+        return bitFields;\n+    }\n+\n     final bool isSafe()\n     {\n-        if (flags & FUNCFLAG.safetyInprocess)\n+        if (safetyInprocess)\n             setUnsafe();\n         return type.toTypeFunction().trust == TRUST.safe;\n     }\n \n     final bool isSafeBypassingInference()\n     {\n-        return !(flags & FUNCFLAG.safetyInprocess) && isSafe();\n+        return !(safetyInprocess) && isSafe();\n     }\n \n     final bool isTrusted()\n     {\n-        if (flags & FUNCFLAG.safetyInprocess)\n+        if (safetyInprocess)\n             setUnsafe();\n         return type.toTypeFunction().trust == TRUST.trusted;\n     }\n@@ -1483,9 +1494,9 @@ extern (C++) class FuncDeclaration : Declaration\n         bool gag = false, Loc loc = Loc.init, const(char)* fmt = null,\n         RootObject arg0 = null, RootObject arg1 = null, RootObject arg2 = null)\n     {\n-        if (flags & FUNCFLAG.safetyInprocess)\n+        if (safetyInprocess)\n         {\n-            flags &= ~FUNCFLAG.safetyInprocess;\n+            safetyInprocess = false;\n             type.toTypeFunction().trust = TRUST.system;\n             if (fmt || arg0)\n                 safetyViolation = new AttributeViolation(loc, fmt, arg0, arg1, arg2);\n@@ -1518,99 +1529,14 @@ extern (C++) class FuncDeclaration : Declaration\n     final bool isNogc()\n     {\n         //printf(\"isNogc() %s, inprocess: %d\\n\", toChars(), !!(flags & FUNCFLAG.nogcInprocess));\n-        if (flags & FUNCFLAG.nogcInprocess)\n+        if (nogcInprocess)\n             setGC();\n         return type.toTypeFunction().isnogc;\n     }\n \n     final bool isNogcBypassingInference()\n     {\n-        return !(flags & FUNCFLAG.nogcInprocess) && isNogc();\n-    }\n-\n-    final bool isNRVO() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.NRVO);\n-    }\n-\n-    final void isNRVO(bool v) pure nothrow @safe @nogc\n-    {\n-        if (v) this.flags |= FUNCFLAG.NRVO;\n-        else this.flags &= ~FUNCFLAG.NRVO;\n-    }\n-\n-    final bool isNaked() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.naked);\n-    }\n-\n-    final void isNaked(bool v) @safe pure nothrow @nogc\n-    {\n-        if (v) this.flags |= FUNCFLAG.naked;\n-        else this.flags &= ~FUNCFLAG.naked;\n-    }\n-\n-    final bool isGenerated() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.generated);\n-    }\n-\n-    final void isGenerated(bool v) pure nothrow @safe @nogc\n-    {\n-        if (v) this.flags |= FUNCFLAG.generated;\n-        else this.flags &= ~FUNCFLAG.generated;\n-    }\n-\n-    final bool isIntroducing() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.introducing);\n-    }\n-\n-    final bool hasSemantic3Errors() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.semantic3Errors);\n-    }\n-\n-    final bool hasNoEH() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.noEH);\n-    }\n-\n-    final bool inferRetType() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.inferRetType);\n-    }\n-\n-    final bool hasDualContext() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.dualContext);\n-    }\n-\n-    final bool hasAlwaysInlines() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.hasAlwaysInline);\n-    }\n-\n-    final bool isCrtCtor() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.CRTCtor);\n-    }\n-\n-    final void isCrtCtor(bool v) @safe pure nothrow @nogc\n-    {\n-        if (v) this.flags |= FUNCFLAG.CRTCtor;\n-        else this.flags &= ~FUNCFLAG.CRTCtor;\n-    }\n-\n-    final bool isCrtDtor() const scope @safe pure nothrow @nogc\n-    {\n-        return !!(this.flags & FUNCFLAG.CRTDtor);\n-    }\n-\n-    final void isCrtDtor(bool v) @safe pure nothrow @nogc\n-    {\n-        if (v) this.flags |= FUNCFLAG.CRTDtor;\n-        else this.flags &= ~FUNCFLAG.CRTDtor;\n+        return !nogcInprocess && isNogc();\n     }\n \n     /**************************************\n@@ -1622,15 +1548,15 @@ extern (C++) class FuncDeclaration : Declaration\n     extern (D) final bool setGC()\n     {\n         //printf(\"setGC() %s\\n\", toChars());\n-        if (flags & FUNCFLAG.nogcInprocess && semanticRun < PASS.semantic3 && _scope)\n+        if (nogcInprocess && semanticRun < PASS.semantic3 && _scope)\n         {\n             this.semantic2(_scope);\n             this.semantic3(_scope);\n         }\n \n-        if (flags & FUNCFLAG.nogcInprocess)\n+        if (nogcInprocess)\n         {\n-            flags &= ~FUNCFLAG.nogcInprocess;\n+            nogcInprocess = false;\n             type.toTypeFunction().isnogc = false;\n             if (fes)\n                 fes.func.setGC();\n@@ -3384,6 +3310,28 @@ FuncDeclaration resolveFuncCall(const ref Loc loc, Scope* sc, Dsymbol s,\n     // re-resolve to check for supplemental message\n     if (!global.gag || global.params.showGaggedErrors)\n     {\n+        if (tthis)\n+        {\n+            if (auto classType = tthis.isTypeClass())\n+            {\n+                if (auto baseClass = classType.sym.baseClass)\n+                {\n+                    if (auto baseFunction = baseClass.search(baseClass.loc, fd.ident))\n+                    {\n+                        MatchAccumulator mErr;\n+                        functionResolve(mErr, baseFunction, loc, sc, tiargs, baseClass.type, fargs, null);\n+                        if (mErr.last > MATCH.nomatch && mErr.lastf)\n+                        {\n+                            errorSupplemental(loc, \"%s `%s` hides base class function `%s`\",\n+                                    fd.kind, fd.toPrettyChars(), mErr.lastf.toPrettyChars());\n+                            errorSupplemental(loc, \"add `alias %s = %s` to `%s`'s body to merge the overload sets\",\n+                                    fd.toChars(), mErr.lastf.toPrettyChars(), tthis.toChars());\n+                            return null;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n         const(char)* failMessage;\n         functionResolve(m, orig_s, loc, sc, tiargs, tthis, fargs, &failMessage);\n         if (failMessage)\n@@ -3767,7 +3715,7 @@ extern (C++) final class FuncLiteralDeclaration : FuncDeclaration\n         this.fes = fes;\n         // Always infer scope for function literals\n         // See https://issues.dlang.org/show_bug.cgi?id=20362\n-        this.flags |= FUNCFLAG.inferScope;\n+        this.inferScope = true;\n         //printf(\"FuncLiteralDeclaration() id = '%s', type = '%s'\\n\", this.ident.toChars(), type.toChars());\n     }\n \n@@ -4431,6 +4379,58 @@ bool setUnsafe(Scope* sc,\n     return sc.func.setUnsafe(gag, loc, fmt, arg0, arg1, arg2);\n }\n \n+/***************************************\n+ * Like `setUnsafe`, but for safety errors still behind preview switches\n+ *\n+ * Given a `FeatureState fs`, for example dip1000 / dip25 / systemVariables,\n+ * the behavior changes based on the setting:\n+ *\n+ * - In case of `-revert=fs`, it does nothing.\n+ * - In case of `-preview=fs`, it's the same as `setUnsafe`\n+ * - By default, print a deprecation in `@safe` functions, or store an attribute violation in inferred functions.\n+ *\n+ * Params:\n+ *   sc = used to find affected function/variable, and for checking whether we are in a deprecated / speculative scope\n+ *   fs = feature state from the preview flag\n+ *   gag = surpress error message\n+ *   loc = location of error\n+ *   msg = printf-style format string\n+ *   arg0  = (optional) argument for first %s format specifier\n+ *   arg1  = (optional) argument for second %s format specifier\n+ *   arg2  = (optional) argument for third %s format specifier\n+ * Returns: whether an actual safe error (not deprecation) occured\n+ */\n+bool setUnsafePreview(Scope* sc, FeatureState fs, bool gag, Loc loc, const(char)* msg,\n+    RootObject arg0 = null, RootObject arg1 = null, RootObject arg2 = null)\n+{\n+    if (fs == FeatureState.disabled)\n+    {\n+        return false;\n+    }\n+    else if (fs == FeatureState.enabled)\n+    {\n+        return sc.setUnsafe(gag, loc, msg, arg0, arg1, arg2);\n+    }\n+    else\n+    {\n+        if (!sc.func)\n+            return false;\n+        if (sc.func.isSafeBypassingInference())\n+        {\n+            if (!gag)\n+                previewErrorFunc(sc.isDeprecated(), fs)(\n+                    loc, msg, arg0 ? arg0.toChars() : \"\", arg1 ? arg1.toChars() : \"\", arg2 ? arg2.toChars() : \"\"\n+                );\n+        }\n+        else if (!sc.func.safetyViolation)\n+        {\n+            import dmd.func : AttributeViolation;\n+            sc.func.safetyViolation = new AttributeViolation(loc, msg, arg0, arg1, arg2);\n+        }\n+        return false;\n+    }\n+}\n+\n /// Stores a reason why a function failed to infer a function attribute like `@safe` or `pure`\n ///\n /// Has two modes:"}, {"sha": "2770f5a91ca1f2913c92b9d12749a1a3805eb5fd", "filename": "gcc/d/dmd/globals.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fglobals.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fglobals.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -160,15 +160,16 @@ extern (C++) struct Param\n                                  // https://gist.github.com/andralex/e5405a5d773f07f73196c05f8339435a\n                                  // https://digitalmars.com/d/archives/digitalmars/D/Binding_rvalues_to_ref_parameters_redux_325087.html\n                                  // Implementation: https://github.com/dlang/dmd/pull/9817\n-    bool noSharedAccess;         // read/write access to shared memory objects\n+    FeatureState noSharedAccess; // read/write access to shared memory objects\n     bool previewIn;              // `in` means `[ref] scope const`, accepts rvalues\n     bool inclusiveInContracts;   // 'in' contracts of overridden methods must be a superset of parent contract\n-    bool shortenedMethods;       // allow => in normal function declarations\n+    bool shortenedMethods = true;       // allow => in normal function declarations\n     bool fixImmutableConv;       // error on unsound immutable conversion - https://github.com/dlang/dmd/pull/14070\n     bool fix16997 = true;        // fix integral promotions for unary + - ~ operators\n                                  // https://issues.dlang.org/show_bug.cgi?id=16997\n     FeatureState dtorFields;     // destruct fields of partially constructed objects\n                                  // https://issues.dlang.org/show_bug.cgi?id=14246\n+    FeatureState systemVariables; // limit access to variables marked @system from @safe code\n \n     CHECKENABLE useInvariants  = CHECKENABLE._default;  // generate class invariant checks\n     CHECKENABLE useIn          = CHECKENABLE._default;  // generate precondition checks"}, {"sha": "d9cb76c707c589f166d817a4bff51517713d825b", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -158,15 +158,17 @@ struct Param\n                                  // https://gist.github.com/andralex/e5405a5d773f07f73196c05f8339435a\n                                  // https://digitalmars.com/d/archives/digitalmars/D/Binding_rvalues_to_ref_parameters_redux_325087.html\n                                  // Implementation: https://github.com/dlang/dmd/pull/9817\n-    bool noSharedAccess;         // read/write access to shared memory objects\n+    FeatureState noSharedAccess; // read/write access to shared memory objects\n     bool previewIn;              // `in` means `[ref] scope const`, accepts rvalues\n     bool inclusiveInContracts;   // 'in' contracts of overridden methods must be a superset of parent contract\n     bool shortenedMethods;       // allow => in normal function declarations\n     bool fixImmutableConv;       // error on unsound immutable conversion - https://github.com/dlang/dmd/pull/14070\n     bool fix16997;               // fix integral promotions for unary + - ~ operators\n                                  // https://issues.dlang.org/show_bug.cgi?id=16997\n     FeatureState dtorFields;     // destruct fields of partially constructed objects\n-                                     // https://issues.dlang.org/show_bug.cgi?id=14246\n+                                 // https://issues.dlang.org/show_bug.cgi?id=14246\n+    FeatureState systemVariables; // limit access to variables marked @system from @safe code\n+\n     CHECKENABLE useInvariants;     // generate class invariant checks\n     CHECKENABLE useIn;             // generate precondition checks\n     CHECKENABLE useOut;            // generate postcondition checks"}, {"sha": "debf01d2a8e643d3a7867acc26818441d0b9747b", "filename": "gcc/d/dmd/hdrgen.d", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fhdrgen.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fhdrgen.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -64,6 +64,7 @@ struct HdrGenState\n     int tpltMember;\n     int autoMember;\n     int forStmtInit;\n+    int insideFuncBody;\n \n     bool declstring; // set while declaring alias for string,wstring or dstring\n     EnumDeclaration inEnumDecl;\n@@ -1045,8 +1046,18 @@ public:\n             buf.writestring(\", \");\n             argsToBuffer(d.args, buf, hgs);\n         }\n+\n         buf.writeByte(')');\n+\n+        // https://issues.dlang.org/show_bug.cgi?id=14690\n+        // Unconditionally perform a full output dump\n+        // for `pragma(inline)` declarations.\n+        bool savedFullDump = global.params.dihdr.fullOutput;\n+        if (d.ident == Id.Pinline)\n+            global.params.dihdr.fullOutput = true;\n+\n         visit(cast(AttribDeclaration)d);\n+        global.params.dihdr.fullOutput = savedFullDump;\n     }\n \n     override void visit(ConditionalDeclaration d)\n@@ -1549,7 +1560,7 @@ public:\n                 bodyToBuffer(f);\n                 hgs.autoMember--;\n             }\n-            else if (hgs.tpltMember == 0 && global.params.dihdr.fullOutput == false)\n+            else if (hgs.tpltMember == 0 && global.params.dihdr.fullOutput == false && !hgs.insideFuncBody)\n             {\n                 if (!f.fbody)\n                 {\n@@ -1634,7 +1645,7 @@ public:\n \n     void bodyToBuffer(FuncDeclaration f)\n     {\n-        if (!f.fbody || (hgs.hdrgen && global.params.dihdr.fullOutput == false && !hgs.autoMember && !hgs.tpltMember))\n+        if (!f.fbody || (hgs.hdrgen && global.params.dihdr.fullOutput == false && !hgs.autoMember && !hgs.tpltMember && !hgs.insideFuncBody))\n         {\n             if (!f.fbody && (f.fensures || f.frequires))\n             {\n@@ -1645,6 +1656,18 @@ public:\n             buf.writenl();\n             return;\n         }\n+\n+        // there is no way to know if a function is nested\n+        // or not after parsing. We need scope information\n+        // for that, which is avaible during semantic\n+        // analysis. To overcome that, a simple mechanism\n+        // is implemented: everytime we print a function\n+        // body (templated or not) we increment a counter.\n+        // We decredement the counter when we stop\n+        // printing the function body.\n+        ++hgs.insideFuncBody;\n+        scope(exit) { --hgs.insideFuncBody; }\n+\n         const savetlpt = hgs.tpltMember;\n         const saveauto = hgs.autoMember;\n         hgs.tpltMember = 0;"}, {"sha": "451e227e98ace34246e96fb5a14fa393bf33da82", "filename": "gcc/d/dmd/lexer.d", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Flexer.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Flexer.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Flexer.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1197,9 +1197,9 @@ class Lexer\n     /*******************************************\n      * Parse escape sequence.\n      */\n-    private uint escapeSequence()\n+    private uint escapeSequence(out dchar c2)\n     {\n-        return Lexer.escapeSequence(token.loc, p, Ccompile);\n+        return Lexer.escapeSequence(token.loc, p, Ccompile, c2);\n     }\n \n     /********\n@@ -1211,10 +1211,11 @@ class Lexer\n      *  sequence = pointer to string with escape sequence to parse. Updated to\n      *             point past the end of the escape sequence\n      *  Ccompile = true for compile C11 escape sequences\n+     *  c2 = returns second `dchar` of html entity with 2 code units, otherwise stays `dchar.init`\n      * Returns:\n      *  the escape sequence as a single character\n      */\n-    private dchar escapeSequence(const ref Loc loc, ref const(char)* sequence, bool Ccompile)\n+    private dchar escapeSequence(const ref Loc loc, ref const(char)* sequence, bool Ccompile, out dchar c2)\n     {\n         const(char)* p = sequence; // cache sequence reference on stack\n         scope(exit) sequence = p;\n@@ -1326,12 +1327,16 @@ class Lexer\n                 switch (*p)\n                 {\n                 case ';':\n-                    c = HtmlNamedEntity(idstart[0 .. p - idstart]);\n-                    if (c == ~0)\n+                    auto entity = HtmlNamedEntity(idstart[0 .. p - idstart]);\n+                    c = entity[0];\n+                    if (entity == entity.init)\n                     {\n                         error(loc, \"unnamed character entity &%.*s;\", cast(int)(p - idstart), idstart);\n                         c = '?';\n                     }\n+                    if (entity[1] != entity.init[1])\n+                        c2 = entity[1];\n+\n                     p++;\n                     break;\n                 default:\n@@ -1665,6 +1670,7 @@ class Lexer\n         while (1)\n         {\n             dchar c = *p++;\n+            dchar c2;\n             switch (c)\n             {\n             case '\\\\':\n@@ -1673,15 +1679,19 @@ class Lexer\n                 case '&':\n                     if (Ccompile)\n                         goto default;\n-                    goto case;\n \n+                    c = escapeSequence(c2);\n+                    stringbuffer.writeUTF8(c);\n+                    if (c2 != dchar.init)\n+                        stringbuffer.writeUTF8(c2);\n+                    continue;\n                 case 'u':\n                 case 'U':\n-                    c = escapeSequence();\n+                    c = escapeSequence(c2);\n                     stringbuffer.writeUTF8(c);\n                     continue;\n                 default:\n-                    c = escapeSequence();\n+                    c = escapeSequence(c2);\n                     break;\n                 }\n                 break;\n@@ -1746,22 +1756,26 @@ class Lexer\n         //printf(\"Lexer::charConstant\\n\");\n         p++;\n         dchar c = *p++;\n+        dchar c2;\n         switch (c)\n         {\n         case '\\\\':\n             switch (*p)\n             {\n             case 'u':\n-                t.unsvalue = escapeSequence();\n                 tk = TOK.wcharLiteral;\n-                break;\n+                goto default;\n             case 'U':\n             case '&':\n-                t.unsvalue = escapeSequence();\n                 tk = TOK.dcharLiteral;\n-                break;\n+                goto default;\n             default:\n-                t.unsvalue = escapeSequence();\n+                t.unsvalue = escapeSequence(c2);\n+                if (c2 != c2.init)\n+                {\n+                    error(\"html entity requires 2 code units, use a string instead of a character\");\n+                    t.unsvalue = '?';\n+                }\n                 break;\n             }\n             break;\n@@ -1978,8 +1992,6 @@ class Lexer\n                 break;\n             case 'b':\n             case 'B':\n-                if (Ccompile)\n-                    error(\"binary constants not allowed\");\n                 ++p;\n                 base = 2;\n                 break;\n@@ -3185,8 +3197,9 @@ unittest\n     static void test(T)(string sequence, T expected, bool Ccompile = false)\n     {\n         auto p = cast(const(char)*)sequence.ptr;\n+        dchar c2;\n         Lexer lexer = new Lexer();\n-        assert(expected == lexer.escapeSequence(Loc.initial, p, Ccompile));\n+        assert(expected == lexer.escapeSequence(Loc.initial, p, Ccompile, c2));\n         assert(p == sequence.ptr + sequence.length);\n     }\n \n@@ -3253,7 +3266,8 @@ unittest\n         expected = expectedError;\n         auto p = cast(const(char)*)sequence.ptr;\n         Lexer lexer = new Lexer();\n-        auto actualReturnValue = lexer.escapeSequence(Loc.initial, p, Ccompile);\n+        dchar c2;\n+        auto actualReturnValue = lexer.escapeSequence(Loc.initial, p, Ccompile, c2);\n         assert(gotError);\n         assert(expectedReturnValue == actualReturnValue);\n "}, {"sha": "48046def130f5711a68928a171f1a7635eb155fd", "filename": "gcc/d/dmd/module.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fmodule.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fmodule.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmodule.h?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -116,7 +116,7 @@ class Module final : public Package\n     size_t namelen;             // length of module name in characters\n \n     static Module* create(const char *arg, Identifier *ident, int doDocComment, int doHdrGen);\n-\n+    static const char *find(const char *filename);\n     static Module *load(const Loc &loc, Identifiers *packages, Identifier *ident);\n \n     const char *kind() const override;"}, {"sha": "265f731cedda25fa478b7afcbd3e5e3629538c06", "filename": "gcc/d/dmd/mtype.d", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fmtype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fmtype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -2488,6 +2488,16 @@ extern (C++) abstract class Type : ASTNode\n         return false;\n     }\n \n+    /*************************************\n+     * Detect if this is an unsafe type because of the presence of `@system` members\n+     * Returns:\n+     *  true if so\n+     */\n+    bool hasSystemFields()\n+    {\n+        return false;\n+    }\n+\n     /***************************************\n      * Returns: true if type has any invariants\n      */\n@@ -3821,6 +3831,16 @@ extern (C++) final class TypeSArray : TypeArray\n             return next.hasPointers();\n     }\n \n+    override bool hasSystemFields()\n+    {\n+        return next.hasSystemFields();\n+    }\n+\n+    override bool hasVoidInitPointers()\n+    {\n+        return next.hasVoidInitPointers();\n+    }\n+\n     override bool hasInvariant()\n     {\n         return next.hasInvariant();\n@@ -5532,52 +5552,32 @@ extern (C++) final class TypeStruct : Type\n \n     override bool hasPointers()\n     {\n-        // Probably should cache this information in sym rather than recompute\n-        StructDeclaration s = sym;\n-\n         if (sym.members && !sym.determineFields() && sym.type != Type.terror)\n             error(sym.loc, \"no size because of forward references\");\n \n-        foreach (VarDeclaration v; s.fields)\n-        {\n-            if (v.storage_class & STC.ref_ || v.hasPointers())\n-                return true;\n-        }\n-        return false;\n+        sym.determineTypeProperties();\n+        return sym.hasPointerField;\n     }\n \n     override bool hasVoidInitPointers()\n     {\n-        // Probably should cache this information in sym rather than recompute\n-        StructDeclaration s = sym;\n+        sym.size(Loc.initial); // give error for forward references\n+        sym.determineTypeProperties();\n+        return sym.hasVoidInitPointers;\n+    }\n \n+    override bool hasSystemFields()\n+    {\n         sym.size(Loc.initial); // give error for forward references\n-        foreach (VarDeclaration v; s.fields)\n-        {\n-            if (v._init && v._init.isVoidInitializer() && v.type.hasPointers())\n-                return true;\n-            if (!v._init && v.type.hasVoidInitPointers())\n-                return true;\n-        }\n-        return false;\n+        sym.determineTypeProperties();\n+        return sym.hasSystemFields;\n     }\n \n     override bool hasInvariant()\n     {\n-        // Probably should cache this information in sym rather than recompute\n-        StructDeclaration s = sym;\n-\n         sym.size(Loc.initial); // give error for forward references\n-\n-        if (s.hasInvariant())\n-            return true;\n-\n-        foreach (VarDeclaration v; s.fields)\n-        {\n-            if (v.type.hasInvariant())\n-                return true;\n-        }\n-        return false;\n+        sym.determineTypeProperties();\n+        return sym.hasInvariant() || sym.hasFieldWithInvariant;\n     }\n \n     extern (D) MATCH implicitConvToWithoutAliasThis(Type to)\n@@ -5857,6 +5857,11 @@ extern (C++) final class TypeEnum : Type\n         return memType().hasVoidInitPointers();\n     }\n \n+    override bool hasSystemFields()\n+    {\n+        return memType().hasSystemFields();\n+    }\n+\n     override bool hasInvariant()\n     {\n         return memType().hasInvariant();"}, {"sha": "c81c25a0d794f1397e2f123c4758d38bb6f4e083", "filename": "gcc/d/dmd/mtype.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fmtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fmtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.h?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -311,6 +311,7 @@ class Type : public ASTNode\n     virtual int hasWild() const;\n     virtual bool hasPointers();\n     virtual bool hasVoidInitPointers();\n+    virtual bool hasSystemFields();\n     virtual bool hasInvariant();\n     virtual Type *nextOf();\n     Type *baseElemOf();\n@@ -458,6 +459,8 @@ class TypeSArray final : public TypeArray\n     MATCH implicitConvTo(Type *to) override;\n     Expression *defaultInitLiteral(const Loc &loc) override;\n     bool hasPointers() override;\n+    bool hasSystemFields() override;\n+    bool hasVoidInitPointers() override;\n     bool hasInvariant() override;\n     bool needsDestruction() override;\n     bool needsCopyOrPostblit() override;\n@@ -794,6 +797,7 @@ class TypeStruct final : public Type\n     bool needsNested() override;\n     bool hasPointers() override;\n     bool hasVoidInitPointers() override;\n+    bool hasSystemFields() override;\n     bool hasInvariant() override;\n     MATCH implicitConvTo(Type *to) override;\n     MATCH constConv(Type *to) override;\n@@ -832,6 +836,7 @@ class TypeEnum final : public Type\n     bool isZeroInit(const Loc &loc) override;\n     bool hasPointers() override;\n     bool hasVoidInitPointers() override;\n+    bool hasSystemFields() override;\n     bool hasInvariant() override;\n     Type *nextOf() override;\n "}, {"sha": "7ddeeecae9b6808592773e1e5a0f07d578dcb115", "filename": "gcc/d/dmd/nogc.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fnogc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fnogc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnogc.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -99,7 +99,7 @@ public:\n \n     override void visit(ArrayLiteralExp e)\n     {\n-        if (e.type.ty != Tarray || !e.elements || !e.elements.dim)\n+        if (e.type.ty != Tarray || !e.elements || !e.elements.dim || e.onstack)\n             return;\n         if (f.setGC())\n         {\n@@ -221,7 +221,7 @@ Expression checkGC(Scope* sc, Expression e)\n     FuncDeclaration f = sc.func;\n     if (e && e.op != EXP.error && f && sc.intypeof != 1 && !(sc.flags & SCOPE.ctfe) &&\n            (f.type.ty == Tfunction &&\n-            (cast(TypeFunction)f.type).isnogc || (f.flags & FUNCFLAG.nogcInprocess) || global.params.vgc) &&\n+            (cast(TypeFunction)f.type).isnogc || f.nogcInprocess || global.params.vgc) &&\n            !(sc.flags & SCOPE.debug_))\n     {\n         scope NOGCVisitor gcv = new NOGCVisitor(f);"}, {"sha": "6fb542fb9aa4278d440c6ad77731ae9aaf439db2", "filename": "gcc/d/dmd/parse.d", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -888,6 +888,7 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n                             error(\"redundant visibility attribute `%s`\", AST.visibilityToChars(prot));\n                     }\n                     pAttrs.visibility.kind = prot;\n+                    const attrloc = token.loc;\n \n                     nextToken();\n \n@@ -908,7 +909,6 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n                         }\n                     }\n \n-                    const attrloc = token.loc;\n                     a = parseBlock(pLastDecl, pAttrs);\n                     if (pAttrs.visibility.kind != AST.Visibility.Kind.undefined)\n                     {\n@@ -3168,9 +3168,7 @@ class Parser(AST, Lexer = dmd.lexer.Lexer) : Lexer\n \n                 if (udas)\n                 {\n-                    auto s = new AST.Dsymbols();\n-                    s.push(em);\n-                    auto uad = new AST.UserAttributeDeclaration(udas, s);\n+                    auto uad = new AST.UserAttributeDeclaration(udas, new AST.Dsymbols());\n                     em.userAttribDecl = uad;\n                 }\n "}, {"sha": "8c71a1a36aaf47177d415e57d17bdea5ed1f5fca", "filename": "gcc/d/dmd/printast.d", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fprintast.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fprintast.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fprintast.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -203,6 +203,13 @@ extern (C++) final class PrintASTVisitor : Visitor\n         printf(\".func: %s\\n\", e.func ? e.func.toChars() : \"\");\n     }\n \n+    override void visit(CompoundLiteralExp e)\n+    {\n+        visit(cast(Expression)e);\n+        printIndent(indent + 2);\n+        printf(\".init: %s\\n\", e.initializer ? e.initializer.toChars() : \"\");\n+    }\n+\n     static void printIndent(int indent)\n     {\n         foreach (i; 0 .. indent)"}, {"sha": "eb198fc76032ef67606e3ae1afa0b47c5ffec215", "filename": "gcc/d/dmd/root/utf.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Froot%2Futf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Froot%2Futf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Futf.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -288,7 +288,7 @@ bool isUniAlpha(dchar c)\n     // Binary search\n     while (low <= high)\n     {\n-        size_t mid = (low + high) >> 1;\n+        const size_t mid = low + ((high - low) >> 1);\n         if (c < ALPHA_TABLE[mid][0])\n             high = mid - 1;\n         else if (ALPHA_TABLE[mid][1] < c)"}, {"sha": "397fd2ef47252fb08ba5d7e1cedb82984e134783", "filename": "gcc/d/dmd/safe.d", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fsafe.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fsafe.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsafe.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -26,7 +26,7 @@ import dmd.identifier;\n import dmd.mtype;\n import dmd.target;\n import dmd.tokens;\n-import dmd.func : setUnsafe;\n+import dmd.func : setUnsafe, setUnsafePreview;\n \n /*************************************************************\n  * Check for unsafe access in @safe code:\n@@ -57,6 +57,14 @@ bool checkUnsafeAccess(Scope* sc, Expression e, bool readonly, bool printmsg)\n         if (!ad)\n             return false;\n \n+        import dmd.globals : global;\n+        if (v.isSystem())\n+        {\n+            if (sc.setUnsafePreview(global.params.systemVariables, !printmsg, e.loc,\n+                \"cannot access `@system` field `%s.%s` in `@safe` code\", ad, v))\n+                return true;\n+        }\n+\n         // needed to set v.overlapped and v.overlapUnsafe\n         if (ad.sizeok != Sizeok.done)\n             ad.determineSize(ad.loc);"}, {"sha": "8ea419a1f577a6cac731d0a60624c0768411a432", "filename": "gcc/d/dmd/semantic3.d", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fsemantic3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fsemantic3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsemantic3.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -282,7 +282,7 @@ private extern(C++) final class Semantic3Visitor : Visitor\n                     // Disable generated opAssign, because some members forbid identity assignment.\n                     funcdecl.storage_class |= STC.disable;\n                     funcdecl.fbody = null;   // remove fbody which contains the error\n-                    funcdecl.flags &= ~FUNCFLAG.semantic3Errors;\n+                    funcdecl.hasSemantic3Errors = false;\n                 }\n                 return;\n             }\n@@ -292,7 +292,7 @@ private extern(C++) final class Semantic3Visitor : Visitor\n         if (funcdecl.semanticRun >= PASS.semantic3)\n             return;\n         funcdecl.semanticRun = PASS.semantic3;\n-        funcdecl.flags &= ~FUNCFLAG.semantic3Errors;\n+        funcdecl.hasSemantic3Errors = false;\n \n         if (!funcdecl.type || funcdecl.type.ty != Tfunction)\n             return;\n@@ -650,7 +650,7 @@ private extern(C++) final class Semantic3Visitor : Visitor\n \n                 // handle NRVO\n                 if (!target.isReturnOnStack(f, funcdecl.needThis()) || !funcdecl.checkNRVO())\n-                    funcdecl.flags &= ~FUNCFLAG.NRVO;\n+                    funcdecl.isNRVO = false;\n \n                 if (funcdecl.fbody.isErrorStatement())\n                 {\n@@ -753,15 +753,15 @@ private extern(C++) final class Semantic3Visitor : Visitor\n                 if (f.isnothrow && blockexit & BE.throw_)\n                     error(funcdecl.loc, \"%s `%s` may throw but is marked as `nothrow`\", funcdecl.kind(), funcdecl.toPrettyChars());\n \n-                if (!(blockexit & (BE.throw_ | BE.halt) || funcdecl.flags & FUNCFLAG.hasCatches))\n+                if (!(blockexit & (BE.throw_ | BE.halt) || funcdecl.hasCatches))\n                 {\n                     /* Don't generate unwind tables for this function\n                      * https://issues.dlang.org/show_bug.cgi?id=17997\n                      */\n-                    funcdecl.flags |= FUNCFLAG.noEH;\n+                    funcdecl.hasNoEH = true;\n                 }\n \n-                if (funcdecl.flags & FUNCFLAG.nothrowInprocess)\n+                if (funcdecl.nothrowInprocess)\n                 {\n                     if (funcdecl.type == f)\n                         f = cast(TypeFunction)f.copy();\n@@ -976,7 +976,7 @@ private extern(C++) final class Semantic3Visitor : Visitor\n             /* Do the semantic analysis on the [in] preconditions and\n              * [out] postconditions.\n              */\n-            immutable bool isnothrow = f.isnothrow && !(funcdecl.flags & FUNCFLAG.nothrowInprocess);\n+            immutable bool isnothrow = f.isnothrow && !funcdecl.nothrowInprocess;\n             if (freq)\n             {\n                 /* frequire is composed of the [in] contracts\n@@ -1001,11 +1001,11 @@ private extern(C++) final class Semantic3Visitor : Visitor\n                         // Deprecated in 2.101, can be made an error in 2.111\n                         deprecation(funcdecl.loc, \"`%s`: `in` contract may throw but function is marked as `nothrow`\",\n                             funcdecl.toPrettyChars());\n-                    else if (funcdecl.flags & FUNCFLAG.nothrowInprocess)\n+                    else if (funcdecl.nothrowInprocess)\n                         f.isnothrow = false;\n                 }\n \n-                funcdecl.flags &= ~FUNCFLAG.noEH;\n+                funcdecl.hasNoEH = false;\n \n                 sc2 = sc2.pop();\n \n@@ -1048,11 +1048,11 @@ private extern(C++) final class Semantic3Visitor : Visitor\n                         // Deprecated in 2.101, can be made an error in 2.111\n                         deprecation(funcdecl.loc, \"`%s`: `out` contract may throw but function is marked as `nothrow`\",\n                             funcdecl.toPrettyChars());\n-                    else if (funcdecl.flags & FUNCFLAG.nothrowInprocess)\n+                    else if (funcdecl.nothrowInprocess)\n                         f.isnothrow = false;\n                 }\n \n-                funcdecl.flags &= ~FUNCFLAG.noEH;\n+                funcdecl.hasNoEH = false;\n \n                 sc2 = sc2.pop();\n \n@@ -1180,10 +1180,10 @@ private extern(C++) final class Semantic3Visitor : Visitor\n                             const blockexit = s.blockExit(funcdecl, isnothrow);\n                             if (blockexit & BE.throw_)\n                             {\n-                                funcdecl.flags &= ~FUNCFLAG.noEH;\n+                                funcdecl.hasNoEH = false;\n                                 if (isnothrow)\n                                     error(funcdecl.loc, \"%s `%s` may throw but is marked as `nothrow`\", funcdecl.kind(), funcdecl.toPrettyChars());\n-                                else if (funcdecl.flags & FUNCFLAG.nothrowInprocess)\n+                                else if (funcdecl.nothrowInprocess)\n                                     f.isnothrow = false;\n                             }\n \n@@ -1195,7 +1195,7 @@ private extern(C++) final class Semantic3Visitor : Visitor\n                     }\n                 }\n                 // from this point on all possible 'throwers' are checked\n-                funcdecl.flags &= ~FUNCFLAG.nothrowInprocess;\n+                funcdecl.nothrowInprocess = false;\n \n                 if (funcdecl.isSynchronized())\n                 {\n@@ -1274,25 +1274,25 @@ private extern(C++) final class Semantic3Visitor : Visitor\n \n         /* If function survived being marked as impure, then it is pure\n          */\n-        if (funcdecl.flags & FUNCFLAG.purityInprocess)\n+        if (funcdecl.purityInprocess)\n         {\n-            funcdecl.flags &= ~FUNCFLAG.purityInprocess;\n+            funcdecl.purityInprocess = false;\n             if (funcdecl.type == f)\n                 f = cast(TypeFunction)f.copy();\n             f.purity = PURE.fwdref;\n         }\n \n-        if (funcdecl.flags & FUNCFLAG.safetyInprocess)\n+        if (funcdecl.safetyInprocess)\n         {\n-            funcdecl.flags &= ~FUNCFLAG.safetyInprocess;\n+            funcdecl.safetyInprocess = false;\n             if (funcdecl.type == f)\n                 f = cast(TypeFunction)f.copy();\n             f.trust = TRUST.safe;\n         }\n \n-        if (funcdecl.flags & FUNCFLAG.nogcInprocess)\n+        if (funcdecl.nogcInprocess)\n         {\n-            funcdecl.flags &= ~FUNCFLAG.nogcInprocess;\n+            funcdecl.nogcInprocess = false;\n             if (funcdecl.type == f)\n                 f = cast(TypeFunction)f.copy();\n             f.isnogc = true;\n@@ -1395,9 +1395,9 @@ private extern(C++) final class Semantic3Visitor : Visitor\n          */\n         funcdecl.semanticRun = PASS.semantic3done;\n         if ((global.errors != oldErrors) || (funcdecl.fbody && funcdecl.fbody.isErrorStatement()))\n-            funcdecl.flags |= FUNCFLAG.semantic3Errors;\n+            funcdecl.hasSemantic3Errors = true;\n         else\n-            funcdecl.flags &= ~FUNCFLAG.semantic3Errors;\n+            funcdecl.hasSemantic3Errors = false;\n         if (funcdecl.type.ty == Terror)\n             funcdecl.errors = true;\n         //printf(\"-FuncDeclaration::semantic3('%s.%s', sc = %p, loc = %s)\\n\", funcdecl.parent.toChars(), funcdecl.toChars(), sc, funcdecl.loc.toChars());"}, {"sha": "4f9baf89dc264b89d60a56075b16b011fa43b297", "filename": "gcc/d/dmd/statementsem.d", "status": "modified", "additions": 91, "deletions": 97, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fstatementsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Fstatementsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -2010,32 +2010,8 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n         //printf(\"body = %p\\n\", ps._body);\n         if (ps.ident == Id.msg)\n         {\n-            if (ps.args)\n-            {\n-                foreach (arg; *ps.args)\n-                {\n-                    sc = sc.startCTFE();\n-                    auto e = arg.expressionSemantic(sc);\n-                    e = resolveProperties(sc, e);\n-                    sc = sc.endCTFE();\n-\n-                    // pragma(msg) is allowed to contain types as well as expressions\n-                    e = ctfeInterpretForPragmaMsg(e);\n-                    if (e.op == EXP.error)\n-                    {\n-                        errorSupplemental(ps.loc, \"while evaluating `pragma(msg, %s)`\", arg.toChars());\n-                        return setError();\n-                    }\n-                    if (auto se = e.toStringExp())\n-                    {\n-                        const slice = se.toUTF8(sc).peekString();\n-                        fprintf(stderr, \"%.*s\", cast(int)slice.length, slice.ptr);\n-                    }\n-                    else\n-                        fprintf(stderr, \"%s\", e.toChars());\n-                }\n-                fprintf(stderr, \"\\n\");\n-            }\n+            if (!pragmaMsgSemantic(ps.loc, sc, ps.args))\n+                return setError();\n         }\n         else if (ps.ident == Id.lib)\n         {\n@@ -2075,75 +2051,19 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n         }\n         else if (ps.ident == Id.startaddress)\n         {\n-            if (!ps.args || ps.args.dim != 1)\n-                ps.error(\"function name expected for start address\");\n-            else\n-            {\n-                Expression e = (*ps.args)[0];\n-                sc = sc.startCTFE();\n-                e = e.expressionSemantic(sc);\n-                e = resolveProperties(sc, e);\n-                sc = sc.endCTFE();\n-\n-                e = e.ctfeInterpret();\n-                (*ps.args)[0] = e;\n-                Dsymbol sa = getDsymbol(e);\n-                if (!sa || !sa.isFuncDeclaration())\n-                {\n-                    ps.error(\"function name expected for start address, not `%s`\", e.toChars());\n-                    return setError();\n-                }\n-                if (ps._body)\n-                {\n-                    ps._body = ps._body.statementSemantic(sc);\n-                    if (ps._body.isErrorStatement())\n-                    {\n-                        result = ps._body;\n-                        return;\n-                    }\n-                }\n-                result = ps;\n-                return;\n-            }\n+            if (!pragmaStartAddressSemantic(ps.loc, sc, ps.args))\n+                return setError();\n         }\n         else if (ps.ident == Id.Pinline)\n         {\n-            PINLINE inlining = PINLINE.default_;\n-            if (!ps.args || ps.args.dim == 0)\n-                inlining = PINLINE.default_;\n-            else if (!ps.args || ps.args.dim != 1)\n+            if (auto fd = sc.func)\n             {\n-                ps.error(\"boolean expression expected for `pragma(inline)`\");\n-                return setError();\n+                fd.inlining = evalPragmaInline(ps.loc, sc, ps.args);\n             }\n             else\n             {\n-                Expression e = (*ps.args)[0];\n-                sc = sc.startCTFE();\n-                e = e.expressionSemantic(sc);\n-                e = resolveProperties(sc, e);\n-                sc = sc.endCTFE();\n-                e = e.ctfeInterpret();\n-                e = e.toBoolean(sc);\n-                if (e.isErrorExp())\n-                {\n-                    ps.error(\"pragma(`inline`, `true` or `false`) expected, not `%s`\", (*ps.args)[0].toChars());\n-                    return setError();\n-                }\n-\n-                const opt = e.toBool();\n-                if (opt.hasValue(true))\n-                    inlining = PINLINE.always;\n-                else if (opt.hasValue(false))\n-                    inlining = PINLINE.never;\n-\n-                    FuncDeclaration fd = sc.func;\n-                if (!fd)\n-                {\n-                    ps.error(\"`pragma(inline)` is not inside a function\");\n-                    return setError();\n-                }\n-                fd.inlining = inlining;\n+                ps.error(\"`pragma(inline)` is not inside a function\");\n+                return setError();\n             }\n         }\n         else if (!global.params.ignoreUnsupportedPragmas)\n@@ -2932,13 +2852,7 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n                 }\n \n                 // https://issues.dlang.org/show_bug.cgi?id=23063\n-                if (texp.isTypeNoreturn() && !rs.exp.isAssertExp() && !rs.exp.isThrowExp() && !rs.exp.isCallExp())\n-                {\n-                    auto msg = new StringExp(rs.exp.loc, \"Accessed expression of type `noreturn`\");\n-                    msg.type = Type.tstring;\n-                    rs.exp = new AssertExp(rs.loc, IntegerExp.literal!0, msg);\n-                    rs.exp.type = texp;\n-                }\n+                rs.exp = checkNoreturnVarAccess(rs.exp);\n \n                 // @@@DEPRECATED_2.111@@@\n                 const olderrors = global.startGagging();\n@@ -3022,7 +2936,7 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n \n                     // If we previously assumed the function could be ref when\n                     // checking for `shared`, make sure we were right\n-                    if (global.params.noSharedAccess && rs.exp.type.isShared())\n+                    if (global.params.noSharedAccess == FeatureState.enabled && rs.exp.type.isShared())\n                     {\n                         fd.error(\"function returns `shared` but cannot be inferred `ref`\");\n                         supplemental();\n@@ -3648,7 +3562,7 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n \n         if (sc.func)\n         {\n-            sc.func.flags |= FUNCFLAG.hasCatches;\n+            sc.func.hasCatches = true;\n             if (flags == (FLAGcpp | FLAGd))\n             {\n                 tcs.error(\"cannot mix catching D and C++ exceptions in the same try-catch\");\n@@ -4925,3 +4839,83 @@ private void debugThrowWalker(Statement s)\n     scope walker = new DebugWalker();\n     s.accept(walker);\n }\n+\n+/***********************************************************\n+ * Evaluate and print a `pragma(msg, args)`\n+ *\n+ * Params:\n+ *    loc = location for error messages\n+ *    sc = scope for argument interpretation\n+ *    args = expressions to print\n+ * Returns:\n+ *    `true` on success\n+ */\n+bool pragmaMsgSemantic(Loc loc, Scope* sc, Expressions* args)\n+{\n+    if (!args)\n+        return true;\n+    foreach (arg; *args)\n+    {\n+        sc = sc.startCTFE();\n+        auto e = arg.expressionSemantic(sc);\n+        e = resolveProperties(sc, e);\n+        sc = sc.endCTFE();\n+\n+        // pragma(msg) is allowed to contain types as well as expressions\n+        e = ctfeInterpretForPragmaMsg(e);\n+        if (e.op == EXP.error)\n+        {\n+            errorSupplemental(loc, \"while evaluating `pragma(msg, %s)`\", arg.toChars());\n+            return false;\n+        }\n+        if (auto se = e.toStringExp())\n+        {\n+            const slice = se.toUTF8(sc).peekString();\n+            fprintf(stderr, \"%.*s\", cast(int)slice.length, slice.ptr);\n+        }\n+        else\n+            fprintf(stderr, \"%s\", e.toChars());\n+    }\n+    fprintf(stderr, \"\\n\");\n+    return true;\n+}\n+\n+/***********************************************************\n+ * Evaluate `pragma(startAddress, func)` and store the resolved symbol in `args`\n+ *\n+ * Params:\n+ *    loc = location for error messages\n+ *    sc = scope for argument interpretation\n+ *    args = pragma arguments\n+ * Returns:\n+ *    `true` on success\n+ */\n+bool pragmaStartAddressSemantic(Loc loc, Scope* sc, Expressions* args)\n+{\n+    if (!args || args.dim != 1)\n+    {\n+        .error(loc, \"function name expected for start address\");\n+        return false;\n+    }\n+    else\n+    {\n+        /* https://issues.dlang.org/show_bug.cgi?id=11980\n+         * resolveProperties and ctfeInterpret call are not necessary.\n+         */\n+        Expression e = (*args)[0];\n+        sc = sc.startCTFE();\n+        e = e.expressionSemantic(sc);\n+        // e = resolveProperties(sc, e);\n+        sc = sc.endCTFE();\n+\n+        // e = e.ctfeInterpret();\n+        (*args)[0] = e;\n+        Dsymbol sa = getDsymbol(e);\n+        if (!sa || !sa.isFuncDeclaration())\n+        {\n+            .error(loc, \"function name expected for start address, not `%s`\", e.toChars());\n+            return false;\n+        }\n+    }\n+    return true;\n+}"}, {"sha": "e79a9ec957ef496f967545d69688cb7420fc758d", "filename": "gcc/d/dmd/templateparamsem.d", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Ftemplateparamsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Ftemplateparamsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftemplateparamsem.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -73,6 +73,15 @@ private extern (C++) final class TemplateParameterSemanticVisitor : Visitor\n         result = !(ttp.specType && isError(ttp.specType));\n     }\n \n+    override void visit(TemplateThisParameter ttp)\n+    {\n+        import dmd.errors;\n+\n+        if (!sc.getStructClassScope())\n+            error(ttp.loc, \"cannot use `this` outside an aggregate type\");\n+        visit(cast(TemplateTypeParameter)ttp);\n+    }\n+\n     override void visit(TemplateValueParameter tvp)\n     {\n         tvp.valType = tvp.valType.typeSemantic(tvp.loc, sc);"}, {"sha": "cbe6daa35a474cdf5d1468ffd0dcfc12fe7dc530", "filename": "gcc/d/dmd/transitivevisitor.d", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftransitivevisitor.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -799,6 +799,15 @@ package mixin template ParseVisitMethods(AST)\n                 s.accept(this);\n     }\n \n+    override void visit(AST.InterfaceDeclaration d)\n+    {\n+        //printf(\"Visiting InterfaceDeclaration\\n\");\n+        visitBaseClasses(d);\n+        if (d.members)\n+            foreach (s; *d.members)\n+                s.accept(this);\n+    }\n+\n     override void visit(AST.AliasDeclaration d)\n     {\n         //printf(\"Visting AliasDeclaration\\n\");"}, {"sha": "e939e7761e81417b79dd88f6efc48cef43b9f3ef", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1099,6 +1099,7 @@ class ExprVisitor : public Visitor\n \t   this assignment should call dtors on old assigned elements.  */\n \tif ((!postblit && !destructor)\n \t    || (e->op == EXP::construct && e->e2->op == EXP::arrayLiteral)\n+\t    || (e->op == EXP::construct && e->e2->op == EXP::call)\n \t    || (e->op == EXP::construct && !lvalue && postblit)\n \t    || (e->op == EXP::blit || e->e1->type->size () == 0))\n \t  {\n@@ -2704,6 +2705,14 @@ class ExprVisitor : public Visitor\n \n \tthis->result_ = compound_expr (saved_elems, d_convert (type, ctor));\n       }\n+    else if (e->onstack)\n+      {\n+\t/* Array literal for a `scope' dynamic array.  */\n+\tgcc_assert (tb->ty == TY::Tarray);\n+\tctor = force_target_expr (ctor);\n+\tthis->result_ = d_array_value (type, size_int (e->elements->length),\n+\t\t\t\t       build_address (ctor));\n+      }\n     else\n       {\n \t/* Allocate space on the memory managed heap.  */"}, {"sha": "d3bf75ccfa9fa1bd10dca62324109af77b5daa38", "filename": "gcc/d/gdc.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fgdc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Fgdc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fgdc.texi?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -344,6 +344,9 @@ Turns on generation of struct equality to use field-wise comparisons.\n @item fixaliasthis\n Implements new lookup rules that check the current scope for @code{alias this}\n before searching in upper scopes.\n+@item fiximmutableconv\n+Disallows unsound immutable conversions that were formerly incorrectly\n+permitted.\n @item in\n Implements @code{in} parameters to mean @code{scope const [ref]} and accepts\n rvalues.\n@@ -357,9 +360,8 @@ expressions.\n Turns off and disallows all access to shared memory objects.\n @item rvaluerefparam\n Implements rvalue arguments to @code{ref} parameters.\n-@item shortenedmethods\n-Implements use of @code{=>} for methods and top-level functions in addition to\n-lambdas.\n+@item systemvariables\n+Disables access to variables marked @code{@@system} from @code{@@safe} code.\n @end table\n \n @item -frelease"}, {"sha": "15ab725a2dd1909af5b023d077c34bab7530d377", "filename": "gcc/d/lang.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Fd%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Flang.opt?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -396,9 +396,9 @@ fpreview=rvaluerefparam\n D RejectNegative\n Enable rvalue arguments to ref parameters.\n \n-fpreview=shortenedmethods\n+fpreview=systemvariables\n D RejectNegative\n-Allow use of '=>' for methods and top-level functions in addition to lambdas.\n+Disable access to variables marked `@system' from @safe code.\n \n frelease\n D"}, {"sha": "295b0f84f7d518ede635a828a14f13eed6db0862", "filename": "gcc/testsuite/gdc.dg/simd18867.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd18867.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd18867.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd18867.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,11 @@\n+// https://issues.dlang.org/show_bug.cgi?id=18867\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+ulong2 test18867(ulong s)\n+{\n+    ulong2 v;\n+    v[0] = s;\n+    return v;\n+}"}, {"sha": "c29acfee73545803c81dd14dcd2bcc8c6e24243b", "filename": "gcc/testsuite/gdc.dg/simd19630.d", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -3,19 +3,13 @@\n // { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n import core.simd;\n \n-enum fail19630a = int4.init[1..2];\n enum fail19630b = int4.init.array[1..2];\n enum fail19630c = (cast(int[4])int4.init.array)[1..2];\n enum fail19630d = (cast(int[4])int4.init)[1..2];\n-enum fail19630e = int4(0)[1..2];\n enum fail19630f = int4(0).array[1..2];\n enum fail19630g = (cast(int[4])int4(0).array)[1..2];\n enum fail19630h = (cast(int[4])int4(0))[1..2];\n \n-enum int4 v19630a = int4.init;\n-enum slice19630a = v19630a[1..2];\n-static assert(slice19630a == [0]);\n-\n enum int[4] v19630b = int4.init.array;\n enum slice19630b = v19630b[1..2];\n static assert(slice19630b == [0]);\n@@ -28,10 +22,6 @@ enum int[4] v19630d = cast(int[4])int4.init;\n enum slice19630d = v19630d[1..2];\n static assert(slice19630d == [0]);\n \n-enum int4 v19630e = int4(0);\n-enum slice19630e = v19630e[1..2];\n-static assert(slice19630e == [0]);\n-\n enum int[4] v19630f = int4(0).array;\n enum slice19630f = v19630f[1..2];\n static assert(slice19630f == [0]);"}, {"sha": "4f09597ffebc50039bd9a97d75773d114176e177", "filename": "gcc/testsuite/gdc.dg/simd19630b.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630b.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,17 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19630\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+enum fail19630a = int4.init[1..2];\n+// { dg-error \"'__vector\\\\\\(int\\\\\\[4\\\\\\]\\\\\\)' cannot be sliced with '\\\\\\[\\\\\\]'\" \"\" { target *-*-* } .-1 }\n+enum fail19630e = int4(0)[1..2];\n+// { dg-error \"'__vector\\\\\\(int\\\\\\[4\\\\\\]\\\\\\)' cannot be sliced with '\\\\\\[\\\\\\]'\" \"\" { target *-*-* } .-1 }\n+\n+enum int4 v19630a = int4.init;\n+enum slice19630a = v19630a[1..2];\n+// { dg-error \"'__vector\\\\\\(int\\\\\\[4\\\\\\]\\\\\\)' cannot be sliced with '\\\\\\[\\\\\\]'\" \"\" { target *-*-* } .-1 }\n+\n+enum int4 v19630e = int4(0);\n+enum slice19630e = v19630e[1..2];\n+// { dg-error \"'__vector\\\\\\(int\\\\\\[4\\\\\\]\\\\\\)' cannot be sliced with '\\\\\\[\\\\\\]'\" \"\" { target *-*-* } .-1 }"}, {"sha": "d17cf1a0681084000ca4d1b89c8e4b5ffc99cde0", "filename": "gcc/testsuite/gdc.dg/simd19630c.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630c.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,15 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19630\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+int4 testz19630()\n+{\n+    return [0,0,0,0];\n+}\n+\n+void test19630()\n+{\n+    assert(testz19630()[] == [0,0,0,0]);\n+    // { dg-error \"'__vector\\\\\\(int\\\\\\[4\\\\\\]\\\\\\)' cannot be sliced with '\\\\\\[\\\\\\]'\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "74ab0087a0e7e7c4566ea892678c1ddb7956dec5", "filename": "gcc/testsuite/gdc.dg/simd19788.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19788.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19788.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19788.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,11 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19788\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void test19788()\n+{\n+    enum v = __vector(float[4]).init;\n+    const(float)[] a = v[];\n+    // { dg-error \"'__vector\\\\\\(float\\\\\\[4\\\\\\]\\\\\\)' cannot be sliced with '\\\\\\[\\\\\\]'\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "9596f5ea0d29369648b2a564956dbd4add7dfeb3", "filename": "gcc/testsuite/gdc.dg/simd21469.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd21469.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd21469.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd21469.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,9 @@\n+// https://issues.dlang.org/show_bug.cgi?id=18867\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+int4 test21469(short a)\n+{\n+    return cast(int4)(short8(a));\n+}"}, {"sha": "c5bd1df8dbc67906e9c62cdf23dd930b64de08c6", "filename": "gcc/testsuite/gdc.dg/simd21672.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd21672.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd21672.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd21672.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,17 @@\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=213\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+\n+import core.simd;\n+\n+struct S213\n+{\n+    int4 vec;\n+}\n+\n+void test213()\n+{\n+    S213 s, b;\n+\n+    assert(s == b);\n+}"}, {"sha": "150ec9f902e258f078a6849dfcaee72cc77f27c4", "filename": "gcc/testsuite/gdc.dg/simd23077.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23077.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23077.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23077.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,11 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23077\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+float test23077(float x)\n+{\n+    short i = *cast(short*)&x;\n+    ++i;\n+    return *cast(float*)&i; // this cast is not allowed in @safe code\n+}"}, {"sha": "1f40e3c99a89f515fa84cef54011241886e4ed07", "filename": "gcc/testsuite/gdc.dg/simd23084.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23084.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23084.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23084.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,17 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23084\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+__vector(int[4]) test23084a(__vector(int[4]) a)\n+{\n+    __vector(short[8]) r = cast(short)(a.array[0]);\n+    return cast(__vector(int[4]))r;\n+}\n+\n+__vector(int[4]) test23084b(__vector(int[4]) a)\n+{\n+    __vector(byte[16]) r = cast(byte)(a.array[0]);\n+    return cast(__vector(int[4]))r;\n+}"}, {"sha": "66444addc0d7b1dee49ae07811af37e014fdce42", "filename": "gcc/testsuite/gdc.dg/simd23085.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23085.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23085.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd23085.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,11 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23085\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+float test23085(float x)\n+{\n+    byte i = *cast(byte*)&x;\n+    ++i;\n+    return *cast(float*)&i; // this cast is not allowed in @safe code\n+}"}, {"sha": "507de17baa2564c5ec5263c8a3ca2c46426be2f7", "filename": "gcc/testsuite/gdc.dg/simd_ctfe.d", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd85418051e8413e84ae7011cb5cb99cd8e337c/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd_ctfe.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd85418051e8413e84ae7011cb5cb99cd8e337c/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd_ctfe.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd_ctfe.d?ref=cfd85418051e8413e84ae7011cb5cb99cd8e337c", "patch": "@@ -1,88 +0,0 @@\n-// { dg-additional-options \"-mavx\" { target avx_runtime } }\n-// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n-import core.simd;\n-\n-// https://issues.dlang.org/show_bug.cgi?id=19627\n-enum int[4] fail19627 = cast(int[4])int4(0);\n-\n-// https://issues.dlang.org/show_bug.cgi?id=19628\n-enum ice19628a = int4.init[0];\n-enum ice19628b = int4.init.array[0];\n-enum ice19628c = (cast(int[4])int4.init.array)[0];\n-enum ice19628d  = (cast(int[4])int4.init)[0];\n-\n-// https://issues.dlang.org/show_bug.cgi?id=19629\n-enum fail19629a = int4(0)[0];\n-enum fail19629b = int4(0).array[0];\n-enum fail19629c = (cast(int[4])int4(0).array)[0];\n-enum fail19628d = (cast(int[4])int4(0))[0];\n-\n-// https://issues.dlang.org/show_bug.cgi?id=19630\n-enum fail19630a = int4.init[1..2];\n-enum fail19630b = int4.init.array[1..2];\n-enum fail19630c = (cast(int[4])int4.init.array)[1..2];\n-enum fail19630d = int4(0)[1..2];\n-enum fail19630e = int4(0).array[1..2];\n-enum fail19630f = (cast(int[4])int4(0).array)[1..2];\n-enum fail19630g = (cast(int[4])int4.init)[1..2];\n-enum fail19630h = (cast(int[4])int4(0))[1..2];\n-\n-// Same tests as above, but use access via enum.\n-enum int4   V1 = int4.init;\n-enum int[4] V2 = int4.init.array;\n-enum int[4] V3 = cast(int[4])int4.init;\n-enum int[4] V4 = cast(int[4])int4.init.array;\n-enum int4   V5 = int4(0);\n-enum int[4] V6 = int4(0).array;\n-enum int[4] V7 = cast(int[4])int4(0);\n-enum int[4] V8 = cast(int[4])int4(0).array;\n-\n-// CTFE index tests\n-enum I1 = V1[0];    static assert(I1 == 0);\n-enum I2 = V2[0];    static assert(I2 == 0);\n-enum I3 = V3[0];    static assert(I3 == 0);\n-enum I4 = V4[0];    static assert(I4 == 0);\n-enum I5 = V5[0];    static assert(I5 == 0);\n-enum I6 = V6[0];    static assert(I6 == 0);\n-enum I7 = V7[0];    static assert(I7 == 0);\n-enum I8 = V8[0];    static assert(I8 == 0);\n-\n-// CTFE slice tests\n-enum S1 = V1[1..2]; static assert(S1 == [0]);\n-enum S2 = V2[1..2]; static assert(S2 == [0]);\n-enum S3 = V3[1..2]; static assert(S3 == [0]);\n-enum S4 = V4[1..2]; static assert(S4 == [0]);\n-enum S5 = V5[1..2]; static assert(S5 == [0]);\n-enum S6 = V6[1..2]; static assert(S6 == [0]);\n-enum S7 = V7[1..2]; static assert(S7 == [0]);\n-enum S8 = V8[1..2]; static assert(S8 == [0]);\n-\n-// Same tests as above, but use access via immutable.\n-//immutable int4   v1 = int4.init;      // Cannot cast to immutable at compile time\n-immutable int[4] v2 = int4.init.array;\n-immutable int[4] v3 = cast(int[4])int4.init;\n-immutable int[4] v4 = cast(int[4])int4.init.array;\n-//immutable int4   v5 = int4(0);        // Cannot cast to immutable at compile time\n-immutable int[4] v6 = int4(0).array;\n-immutable int[4] v7 = cast(int[4])int4(0);\n-immutable int[4] v8 = cast(int[4])int4(0).array;\n-\n-// CTFE index tests\n-//immutable i1 = v1[0];    static assert(i1 == 0);\n-immutable i2 = v2[0];    static assert(i2 == 0);\n-immutable i3 = v3[0];    static assert(i3 == 0);\n-immutable i4 = v4[0];    static assert(i4 == 0);\n-//immutable i5 = v5[0];    static assert(i5 == 0);\n-immutable i6 = v6[0];    static assert(i6 == 0);\n-immutable i7 = v7[0];    static assert(i7 == 0);\n-immutable i8 = v8[0];    static assert(i8 == 0);\n-\n-// CTFE slice tests\n-//immutable s1 = v1[1..2]; static assert(s1 == [0]);\n-immutable s2 = v2[1..2]; static assert(s2 == [0]);\n-immutable s3 = v3[1..2]; static assert(s3 == [0]);\n-immutable s4 = v4[1..2]; static assert(s4 == [0]);\n-//immutable s5 = v5[1..2]; static assert(s5 == [0]);\n-immutable s6 = v6[1..2]; static assert(s6 == [0]);\n-immutable s7 = v7[1..2]; static assert(s7 == [0]);\n-immutable s8 = v8[1..2]; static assert(s8 == [0]);"}, {"sha": "e74a3e82db1dcc4401f588c6666d8a96a04e3847", "filename": "gcc/testsuite/gdc.dg/torture/simd19632.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19632.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19632.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19632.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,15 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19632\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void main()\n+{\n+    int4 v = [1, 2, 3, 4];\n+    int sum = 0;\n+    foreach (ref e; v)\n+        sum += (e *= 2);\n+    assert(v.array[] == [2, 4, 6, 8]);\n+    assert(sum == 20);\n+}"}, {"sha": "a74f58a2a2fcba27e801fa6d4ea75843521302ae", "filename": "gcc/testsuite/gdc.dg/torture/simd20041.d", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd20041.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd20041.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd20041.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,22 @@\n+// https://issues.dlang.org/show_bug.cgi?id=20041\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+immutable(float4) test20041()\n+{\n+    float4 raw = 2.0f;\n+    raw.array[0] = 1;\n+    return cast(immutable)raw;\n+}\n+\n+void main()\n+{\n+    static immutable float4 v = test20041();\n+\n+    assert(v.array[0] == 1);\n+    assert(v.array[1] == 2);\n+    assert(v.array[2] == 2);\n+    assert(v.array[3] == 2);\n+}"}, {"sha": "701e33a30a89e261ede5a246f89a0870050ecef5", "filename": "gcc/testsuite/gdc.dg/torture/simd21673.d", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd21673.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd21673.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd21673.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,20 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21673\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+float4 _mm_move_ss(float4 a, float4 b)\n+{\n+    a.ptr[0] = b.array[0];\n+    return a;\n+}\n+\n+void main()\n+{\n+    float4 A = [1.0f, 2.0f, 3.0f, 4.0f];\n+    float4 B = [5.0f, 6.0f, 7.0f, 8.0f];\n+    float4 R = _mm_move_ss(A, B);\n+    float[4] correct = [5.0f, 2.0f, 3.0f, 4.0f];\n+    assert(R.array == correct);\n+}"}, {"sha": "1d7b9117a901744fb6e9116bc1abacd45deb2ade", "filename": "gcc/testsuite/gdc.dg/torture/simd21676.d", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd21676.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd21676.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd21676.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,36 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23009\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+double2 loadUnaligned21676(const(double)* pvec)\n+{\n+    double2 result;\n+    foreach(i; 0..2)\n+    {\n+        result[i] = pvec[i];\n+    }\n+    return result;\n+}\n+\n+double2 _mm_setr_pd(double e1, double e0)\n+{\n+    double[2] result = [e1, e0];\n+    return loadUnaligned21676(result.ptr);\n+}\n+\n+double2 fun(double2 a, double2 b)\n+{\n+    a[0] = (a[0] < b[0]) ? a[0] : b[0];\n+    return a;\n+}\n+\n+void main()\n+{\n+    double2 A = _mm_setr_pd(1.0, 2.0);\n+    double2 B = _mm_setr_pd(4.0, 1.0);\n+    double2 C = fun(A, B);\n+    assert(C.array[0] == 1.0);\n+    assert(C.array[1] == 2.0);\n+}"}, {"sha": "9199be67e13c94b89fcd07a54ed3d61a58fec5bd", "filename": "gcc/testsuite/gdc.dg/torture/simd22438.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd22438.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd22438.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd22438.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,18 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22438\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct T22438 { int x; double d; }\n+\n+T22438 foo22438(int x, double d) { return T22438(x, d); }\n+\n+struct S22438 { T22438 t; string r; }\n+\n+void main()\n+{\n+    S22438 s = S22438(foo22438(10, 3.14), \"str\");\n+    assert(s.t.x == 10);\n+    assert(s.t.d == 3.14);\n+    assert(s.r == \"str\");\n+}"}, {"sha": "a45ec4d9a9c9586e3a5646f348286957a46789e8", "filename": "gcc/testsuite/gdc.dg/torture/simd23009.d", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd23009.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd23009.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd23009.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,22 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23009\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+double2 _mm_loadl_pd(double2 a, const(double)* mem_addr)\n+{\n+    a[0] = *mem_addr;\n+    return a;\n+}\n+\n+void main()\n+{\n+    double A = 7.0;\n+    double2 B;\n+    B[0] = 4.0;\n+    B[1] = -5.0;\n+    double2 R = _mm_loadl_pd(B, &A);\n+    double[2] correct = [ 7.0, -5.0 ];\n+    assert(R.array == correct);\n+}"}, {"sha": "150ec9f902e258f078a6849dfcaee72cc77f27c4", "filename": "gcc/testsuite/gdc.dg/torture/simd23077.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd23077.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd23077.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd23077.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,11 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23077\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+float test23077(float x)\n+{\n+    short i = *cast(short*)&x;\n+    ++i;\n+    return *cast(float*)&i; // this cast is not allowed in @safe code\n+}"}, {"sha": "3847732382b59fa0d6d9c2b102c97f081e12b799", "filename": "gcc/testsuite/gdc.dg/torture/simd8.d", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd8.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd8.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd8.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,26 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import gcc.simd;\n+\n+alias __m128 = __vector(float[4]);\n+\n+__m128 _mm_setr_ps (float e3, float e2, float e1, float e0) pure @trusted\n+{\n+    float[4] result = [e3, e2, e1, e0];\n+    return loadUnaligned!(__m128)(cast(__m128*)result.ptr);\n+}\n+\n+__m128 _mm_movehdup_ps (__m128 a) pure @trusted\n+{\n+    a.ptr[0] = a.array[1];\n+    a.ptr[2] = a.array[3];\n+    return a;\n+}\n+\n+void main()\n+{\n+    __m128 A = _mm_movehdup_ps(_mm_setr_ps(1, 2, 3, 4));\n+    float[4] correct = [2.0f, 2, 4, 4 ];\n+    assert(A.array == correct);\n+}"}, {"sha": "06535311b534f381eafd116036c10f651d6a0d43", "filename": "gcc/testsuite/gdc.dg/torture/simd9.d", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,46 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+__gshared int testsroa_x;\n+\n+template SROA(T1, T2)\n+{\n+    struct FPoint\n+    {\n+        T1 x;\n+        T2 y;\n+    }\n+\n+    void sroa(FPoint p1, ref FPoint quad)\n+    {\n+        quad = FPoint(p1.x, p1.y);\n+    }\n+\n+    void testit()\n+    {\n+        FPoint p1 = FPoint(1, 2);\n+\n+        FPoint quad;\n+        sroa(p1, quad);\n+\n+        if (quad != p1)\n+        {\n+            assert(0);\n+        }\n+        ++testsroa_x;\n+    }\n+}\n+\n+void main()\n+{\n+    SROA!(int,   int  ).testit();\n+    SROA!(int,   float).testit();\n+    SROA!(float, float).testit();\n+    SROA!(float, int  ).testit();\n+\n+    SROA!(long,   long  ).testit();\n+    SROA!(long,   double).testit();\n+    SROA!(double, double).testit();\n+    SROA!(double, long  ).testit();\n+}"}, {"sha": "1778476bbe7b9f1925e0be27481d1da8e2664814", "filename": "gcc/testsuite/gdc.dg/torture/simd_prefetch.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd_prefetch.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd_prefetch.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd_prefetch.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,21 @@\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import gcc.simd;\n+\n+int testprefetch(byte a)\n+{\n+    prefetch!(false, 0)(&a);\n+    prefetch!(false, 1)(&a);\n+    prefetch!(false, 2)(&a);\n+    prefetch!(false, 3)(&a);\n+    prefetch!(true, 0)(&a);\n+    prefetch!(true, 1)(&a);\n+    prefetch!(true, 2)(&a);\n+    prefetch!(true, 3)(&a);\n+    return 3;\n+}\n+\n+void main()\n+{\n+    int i = testprefetch(1);\n+    assert(i == 3);\n+}"}, {"sha": "16abde0bd5b0f7303fdd3a9e6c8c7f4c366b79ed", "filename": "gcc/testsuite/gdc.test/compilable/cdcmp.d", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcdcmp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcdcmp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcdcmp.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -60,20 +60,6 @@ bool test_nez(long x) { return x != 0; }\n bool test_gez(long x) { return x >= 0; }\n bool test_gtz(long x) { return x >  0; }\n \n-bool test_ltz(float x) { return x <  0; }\n-bool test_lez(float x) { return x <= 0; }\n-bool test_eqz(float x) { return x == 0; }\n-bool test_nez(float x) { return x != 0; }\n-bool test_gez(float x) { return x >= 0; }\n-bool test_gtz(float x) { return x >  0; }\n-\n-bool test_ltz(double x) { return x <  0; }\n-bool test_lez(double x) { return x <= 0; }\n-bool test_eqz(double x) { return x == 0; }\n-bool test_nez(double x) { return x != 0; }\n-bool test_gez(double x) { return x >= 0; }\n-bool test_gtz(double x) { return x >  0; }\n-\n /* ----------------------------------- */\n \n bool test_lt(ubyte x, ubyte y) { return x <  y; }"}, {"sha": "7c011d2f712fd0518a2ec292a7c0b19da89aee3f", "filename": "gcc/testsuite/gdc.test/compilable/extra-files/header2.d", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fheader2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fheader2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fheader2.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -162,6 +162,18 @@ align(2) struct S12200_2\n align(1):\n }\n \n+// https://issues.dlang.org/show_bug.cgi?id=14694\n+inout(T)[] overlap(T)(inout(T)[] r1, inout(T)[] r2) @trusted pure nothrow\n+{\n+    alias U = inout(T);\n+    static U* max(U* a, U* b) nothrow { return a > b ? a : b; }\n+    static U* min(U* a, U* b) nothrow { return a < b ? a : b; }\n+\n+    auto b = max(r1.ptr, r2.ptr);\n+    auto e = min(r1.ptr + r1.length, r2.ptr + r2.length);\n+    return b < e ? b[0 .. e - b] : null;\n+}\n+\n // https://issues.dlang.org/show_bug.cgi?id=16140\n void gun()()\n {\n@@ -173,6 +185,13 @@ void gun()()\n         else break;\n }\n \n+// https://issues.dlang.org/show_bug.cgi?id=14690\n+pragma(inline, true)\n+int fun(int a, int b)\n+{\n+    return 3;\n+}\n+\n // https://issues.dlang.org/show_bug.cgi?id=16649\n void leFoo()()\n {"}, {"sha": "0d001e809cac40325b4930a112a3b5fe845a5399", "filename": "gcc/testsuite/gdc.test/compilable/imports/cimports2a.i", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcimports2a.i", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcimports2a.i", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcimports2a.i?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -2,3 +2,10 @@ extern int xx;\n \n typedef struct Foo *FooRef;\n FooRef make_foo(void);\n+\n+\n+typedef struct Foo2 *FooRef2;\n+struct Foo2 {\n+    int x;\n+};\n+FooRef2 make_foo2(void);"}, {"sha": "a0a9c2f3a41440db7fb8e7d59e3eef2e6ca73218", "filename": "gcc/testsuite/gdc.test/compilable/imports/cimports2b.i", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcimports2b.i", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcimports2b.i", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcimports2b.i?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -2,3 +2,11 @@ extern int xx;\n \n typedef struct Foo *FooRef;\n void free_foo(FooRef foo);\n+\n+/****************************/\n+\n+typedef struct Foo2 *FooRef2;\n+struct Foo2 {\n+    int x;\n+};\n+void free_foo2(FooRef2 foo);"}, {"sha": "1a804d9277e5f6f6b133312eb48ac051c9ccbbb6", "filename": "gcc/testsuite/gdc.test/compilable/imports/pkg22952/package.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg22952%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg22952%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg22952%2Fpackage.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1 @@\n+module lib;"}, {"sha": "737125d13228ccfca04881c44024f550d154779f", "filename": "gcc/testsuite/gdc.test/compilable/noreturn3.d", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fnoreturn3.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,257 @@\n+/*\n+REQUIRED_ARGS: -w -o- -d\n+\n+More complex examples from the DIP\n+https://github.com/dlang/DIPs/blob/master/DIPs/accepted/DIP1034.md\n+*/\n+\n+alias noreturn = typeof(*null);\n+static assert (!is(noreturn == void));\n+\n+void initialize()\n+{\n+    noreturn a;\n+    noreturn b = noreturn.init;\n+}\n+\n+void foo(const noreturn);\n+void foo(const int);\n+\n+noreturn bar();\n+\n+void overloads()\n+{\n+    noreturn n;\n+    foo(n);\n+\n+    foo(bar());\n+}\n+\n+// /*****************************************************************************/\n+\n+auto inferNoreturn(int i)\n+{\n+    if (i < 0)\n+        return assert(false);\n+    else if (i == 0)\n+        return assert(false);\n+    else\n+        return assert(false);\n+}\n+\n+auto inferReturn(int i)\n+{\n+    if (i < 0)\n+        return assert(false);\n+    else if (i == 0)\n+        return i;\n+    else\n+        return assert(false);\n+}\n+\n+// /*****************************************************************************/\n+// // https://issues.dlang.org/show_bug.cgi?id=22004\n+\n+alias fun22004 = _ => {}();\n+alias gun22004 = _ => assert(0);\n+auto bun22004(bool b)\n+{\n+    if (b)\n+        return gun22004(0);\n+    else\n+        return fun22004(0);\n+}\n+\n+static assert(is(typeof(bun22004(true)) == void));\n+\n+// // Reversed order\n+auto bun22004_reversed(bool b)\n+{\n+    if (b)\n+        return fun22004(0);\n+    else\n+        return gun22004(0);\n+}\n+\n+static assert(is(typeof(bun22004_reversed(true)) == void));\n+\n+// /*****************************************************************************/\n+\n+// // Also works fine with non-void types and ref inference\n+\n+int global;\n+\n+auto ref forwardOrExit(ref int num)\n+{\n+    if (num)\n+        return num;\n+    else\n+        return assert(false);\n+}\n+\n+static assert( is(typeof(forwardOrExit(global)) == int));\n+\n+// // Must not infer ref due to the noreturn rvalue\n+static assert(!is(typeof(&forwardOrExit(global))));\n+\n+auto ref forwardOrExit2(ref int num)\n+{\n+    if (num)\n+        return assert(false);\n+    else\n+        return num;\n+}\n+\n+static assert( is(typeof(forwardOrExit2(global)) == int));\n+\n+// // Must not infer ref due to the noreturn rvalue\n+static assert(!is(typeof(&forwardOrExit2(global))));\n+\n+/*****************************************************************************/\n+\n+void inference()\n+{\n+    auto inf = cast(noreturn) 1;\n+    static assert(is(typeof(inf) == noreturn));\n+\n+    noreturn n;\n+    auto c = cast(const shared noreturn) n;\n+    static assert(is(typeof(c) == const shared noreturn));\n+    static assert(is(typeof(n) == noreturn));\n+\n+    auto c2 = cast(immutable noreturn) n;\n+    static assert(is(typeof(c) == const shared noreturn));\n+    static assert(is(typeof(c2) == immutable noreturn));\n+    static assert(is(typeof(n) == noreturn));\n+}\n+\n+\n+/******************************************************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=21957\n+// Calculate proper alignment and size for noreturn members\n+\n+enum longPad = long.alignof - int.sizeof;\n+\n+struct BasicStruct\n+{\n+\tint firstInt;\n+\tnoreturn noRet;\n+\tlong lastLong;\n+}\n+\n+static assert(BasicStruct.sizeof == (int.sizeof + longPad + long.sizeof));\n+\n+static assert(BasicStruct.firstInt.offsetof == 0);\n+static assert(BasicStruct.noRet.offsetof == 4);\n+static assert(BasicStruct.lastLong.offsetof == (4 + longPad));\n+\n+struct AlignedStruct\n+{\n+\tint firstInt;\n+\talign(16) noreturn noRet;\n+\tlong lastLong;\n+}\n+\n+static assert(AlignedStruct.sizeof == 32);\n+\n+static assert(AlignedStruct.firstInt.offsetof == 0);\n+static assert(AlignedStruct.noRet.offsetof == 16);\n+static assert(AlignedStruct.lastLong.offsetof == 16);\n+\n+union BasicUnion\n+{\n+\tint firstInt;\n+\tnoreturn noRet;\n+\tlong lastLong;\n+}\n+\n+static assert(BasicUnion.sizeof == 8);\n+\n+static assert(BasicUnion.firstInt.offsetof == 0);\n+static assert(BasicUnion.noRet.offsetof == 0);\n+static assert(BasicUnion.lastLong.offsetof == 0);\n+\n+union AlignedUnion\n+{\n+\tint firstInt;\n+\talign(16) noreturn noRet;\n+\tlong lastLong;\n+}\n+\n+static assert(AlignedUnion.sizeof == 16);\n+\n+static assert(AlignedUnion.firstInt.offsetof == 0);\n+static assert(AlignedUnion.noRet.offsetof == 0);\n+static assert(AlignedUnion.lastLong.offsetof == 0);\n+\n+class BasicClass\n+{\n+\tint firstInt;\n+\tnoreturn noRet;\n+\tlong lastLong;\n+}\n+\n+enum objectMemberSize = __traits(classInstanceSize, Object);\n+\n+static assert(__traits(classInstanceSize, BasicClass) == objectMemberSize + (int.sizeof + longPad + long.sizeof));\n+\n+static assert(BasicClass.firstInt.offsetof == objectMemberSize + 0);\n+static assert(BasicClass.noRet.offsetof == objectMemberSize + 4);\n+static assert(BasicClass.lastLong.offsetof == objectMemberSize + (4 + longPad));\n+\n+class AlignedClass\n+{\n+\tint firstInt;\n+\talign(16) noreturn noRet;\n+\tlong lastLong;\n+}\n+\n+enum offset = (objectMemberSize + 4 + 16) & ~15;\n+\n+static assert(__traits(classInstanceSize, AlignedClass) == offset + 8);\n+\n+static assert(AlignedClass.firstInt.offsetof == objectMemberSize + 0);\n+static assert(AlignedClass.noRet.offsetof == offset);\n+static assert(AlignedClass.lastLong.offsetof == offset);\n+\n+struct EmptyStruct\n+{\n+\tnoreturn noRet;\n+}\n+\n+static assert(EmptyStruct.sizeof == 1);\n+static assert(EmptyStruct.noRet.offsetof == 0);\n+\n+struct EmptyStruct2\n+{\n+\tnoreturn[4] noRet;\n+}\n+\n+static assert(EmptyStruct2.sizeof == 1);\n+static assert(EmptyStruct2.noRet.offsetof == 0);\n+\n+// https://issues.dlang.org/show_bug.cgi?id=22858\n+// Shouldn't mess with the alignment of other zero-sized types.\n+\n+struct S22858\n+{\n+    int a;\n+    void*[0] arr;\n+    char c;\n+    noreturn[0] arr2;\n+    char c2;\n+}\n+\n+static assert (S22858.arr.offsetof % size_t.sizeof == 0);\n+static assert (S22858.arr2.offsetof == S22858.c.offsetof + 1);\n+static assert (S22858.arr2.offsetof == S22858.c2.offsetof);\n+\n+// https://issues.dlang.org/show_bug.cgi?id=23331\n+\n+auto fun() { return double(new noreturn[](0)[0]); }\n+auto gun() { return double(assert(0)); }\n+auto hun() { return int(assert(0)); }\n+\n+// https://issues.dlang.org/show_bug.cgi?id=23379\n+\n+void casting_noreturn() { auto b = cast(double)(assert(0)); }"}, {"sha": "cac180caaafd9c0d736f2128ac935e6728c4bb01", "filename": "gcc/testsuite/gdc.test/compilable/scope_tuple_expansion.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fscope_tuple_expansion.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fscope_tuple_expansion.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fscope_tuple_expansion.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,21 @@\n+// REQUIRED_ARGS: -preview=dip1000\n+\n+// Reduced from `std.systime`.\n+// Tuple expansion can trip up scope checking with errors like:\n+// Error: scope variable `__tup4` assigned to `found` with longer lifetime\n+\n+struct Tuple(T...)\n+{\n+    T t;\n+    alias t this;\n+}\n+\n+Tuple!(int*, int) find(return scope int* x) @safe\n+{\n+    assert(0);\n+}\n+\n+void fromISOExtString(scope int* str) @safe\n+{\n+    int* found = str.find()[0];\n+}"}, {"sha": "71350af873993d13761ac292e6e54cd6e83c1132", "filename": "gcc/testsuite/gdc.test/compilable/shortened_methods.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fshortened_methods.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fshortened_methods.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fshortened_methods.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,4 +1,4 @@\n-// REQUIRED_ARGS: -preview=shortenedMethods\n+// N.B. Shortened methods are no longer under a preview flag\n class A {\n     int _x = 34;\n     // short syntax works in all contexts"}, {"sha": "29ec7a18a2c293a70d47d0b9dc70245d5ccdef91", "filename": "gcc/testsuite/gdc.test/compilable/test11980.d", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest11980.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest11980.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest11980.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,2 +1,5 @@\n-void start() {}\n+void start()\n+{\n+\tpragma(startaddress, start);\n+}\n pragma(startaddress, start);"}, {"sha": "00750b0108f5455c2c110915891009fa7d10865a", "filename": "gcc/testsuite/gdc.test/compilable/test22674.d", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22674.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22674.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22674.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,3 +8,10 @@ void do_foo(){\n     FooRef f = make_foo(); // use_foo.d(5)\n     free_foo(f);           // use_foo.d(6)\n }\n+\n+// https://issues.dlang.org/show_bug.cgi?id=23357\n+\n+void do_foo2(){\n+    FooRef2 f = make_foo2();\n+    free_foo2(f);\n+}"}, {"sha": "1709be4059c1d6a147e3fe3743dc4d35dd0187db", "filename": "gcc/testsuite/gdc.test/compilable/test22784.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22784.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22784.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22784.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,10 @@\n+// Issue 22784 - pragma(printf) applies to nested functions\n+// https://issues.dlang.org/show_bug.cgi?id=22784\n+\n+import core.stdc.stdarg;\n+extern(C)\n+pragma(printf)\n+void fn(const(char)* fmt, ...)\n+{\n+    void inner(){}\n+}"}, {"sha": "d0524b14b57a45606cdcd49b0ca0885f1738f7a3", "filename": "gcc/testsuite/gdc.test/compilable/test22952.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22952.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22952.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22952.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,10 @@\n+/*\n+REQUIRED_ARGS: -Icompilable/imports -mv=lib=pkg22952\n+EXTRA_FILES: imports/pkg22952/package.d\n+*/\n+\n+// Issue 22952 - Compiler fails to find package.d modules via -mv map\n+// https://issues.dlang.org/show_bug.cgi?id=22952\n+\n+module test22952;\n+import lib;"}, {"sha": "bf82604a7528dab0923d0c7711578fe3fefc0cff", "filename": "gcc/testsuite/gdc.test/compilable/test23380.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23380.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23380.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23380.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,9 @@\n+// REQUIRED_ARGS: -preview=dip1000\n+\n+// https://issues.dlang.org/show_bug.cgi?id=23380\n+// Issue 23380 - [dip1000] class parameter should not be treated as ref qua lifetime\n+\n+@safe void test(scope Object o0, scope Object o1)\n+{\n+    o1 = o0;\n+}"}, {"sha": "dc1d75411edbd8af6493a7f171f0b0ba4fb9d9bf", "filename": "gcc/testsuite/gdc.test/compilable/test23386.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23386.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23386.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23386.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,12 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23386\n+// Segfault on enum member UDA inside template\n+\n+template E()\n+{\n+    enum E : byte\n+    {\n+        @(1) none,\n+    }\n+}\n+\n+alias T = E!();"}, {"sha": "1fa4da5ffb9e30c08987eb6fab0ae2c971af164a", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag23384.d", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag23384.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag23384.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag23384.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,29 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23384\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/diag23384.d(28): Error: function `diag23384.Derived.fun(B b)` is not callable using argument types `(A)`\n+fail_compilation/diag23384.d(28):        function `diag23384.Derived.fun` hides base class function `diag23384.Base.fun`\n+fail_compilation/diag23384.d(28):        add `alias fun = diag23384.Base.fun` to `diag23384.Derived`'s body to merge the overload sets\n+---\n+*/\n+\n+struct A {}\n+struct B {}\n+\n+class Base\n+{\n+    void fun(A a) {}\n+}\n+\n+class Derived : Base\n+{\n+    void fun(B b) {}\n+}\n+\n+void main()\n+{\n+    Derived d;\n+    d.fun(A());\n+}"}, {"sha": "52b5285b83b8347a9fdc756d0ea78db04f50dd2e", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail10905.d", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd85418051e8413e84ae7011cb5cb99cd8e337c/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10905.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd85418051e8413e84ae7011cb5cb99cd8e337c/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10905.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10905.d?ref=cfd85418051e8413e84ae7011cb5cb99cd8e337c", "patch": "@@ -1,22 +0,0 @@\n-/*\n-REQUIRED_ARGS: -m64\n-TEST_OUTPUT:\n----\n-fail_compilation/fail10905.d(20): Error: incompatible types for `(this.x) == (cast(const(__vector(long[2])))cast(__vector(long[2]))1L)`: both operands are of type `const(__vector(long[2]))`\n----\n-*/\n-\n-struct Foo\n-{\n-    enum __vector(long[2]) y = 1;\n-}\n-\n-struct Bar\n-{\n-    __vector(long[2]) x;\n-\n-    bool spam() const\n-    {\n-        return x == Foo.y;\n-    }\n-}"}, {"sha": "e23ed04305f00aab8f794ddcaba683957c086e3a", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19898a.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19898a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19898a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19898a.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -2,7 +2,7 @@\n REQUIRED_ARGS: -m64\n TEST_OUTPUT:\n ---\n-fail_compilation/fail19898a.d(10): Error: incompatible types for `(__key2) < (__limit3)`: both operands are of type `__vector(int[4])`\n+fail_compilation/fail19898a.d(10): Error: expression `__key2 < __limit3` of type `__vector(int[4])` does not have a boolean value\n ---\n */\n void f (__vector(int[4]) n)"}, {"sha": "5101da5617b914b7d7fe6063822d6a8c483bde1c", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail19898b.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19898b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19898b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail19898b.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -3,7 +3,7 @@ REQUIRED_ARGS: -m64\n TEST_OUTPUT:\n ---\n fail_compilation/fail19898b.d(17): Error: cannot implicitly convert expression `m` of type `S` to `__vector(int[4])`\n-fail_compilation/fail19898b.d(17): Error: incompatible types for `(__key2) != (__limit3)`: both operands are of type `__vector(int[4])`\n+fail_compilation/fail19898b.d(17): Error: expression `__key2 != __limit3` of type `__vector(int[4])` does not have a boolean value\n fail_compilation/fail19898b.d(17): Error: cannot cast expression `__key2` of type `__vector(int[4])` to `S`\n ---\n */"}, {"sha": "6960d5e41d8bca082c3fb3627c4d1191c17683b6", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail22366.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22366.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22366.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22366.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -3,7 +3,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail22366.d(13): Error: scope variable `__aaval2` assigned to non-scope `aa[0]`\n+fail_compilation/fail22366.d(13): Error: scope variable `x` may not be copied into allocated memory\n ---\n */\n "}, {"sha": "8ac3f147e586cd62c26e1c3911bb1b3bf51556dc", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail23406.d", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23406.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23406.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23406.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,40 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23406\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail23406.d(39): Error: cannot implicitly convert expression `0` of type `int` to `alphakey`\n+---\n+*/\n+\n+struct flagenum\n+{\n+    int i = 1;\n+    alias i this;\n+\n+    auto opBinary(string s)(int j)\n+    {\n+        assert(j == 1);\n+        return typeof(this)(i*2);\n+    }\n+\n+    auto opEquals(int a)\n+    {\n+        return false;\n+    }\n+}\n+\n+enum alphakey\n+{\n+    a = flagenum(),\n+    b,c,d,e,f,g,h,i,\n+    k,l,m,n,o,p,q,r,\n+    s,t,u,v,w,x,y,z\n+}\n+\n+alphakey alpha;\n+\n+void main()\n+{\n+    alpha = 0;\n+}"}, {"sha": "172110a0ab0cb8b4f947946465e6171140abfb43", "filename": "gcc/testsuite/gdc.test/fail_compilation/issue21378.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fissue21378.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fissue21378.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fissue21378.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -3,7 +3,7 @@ TEST_OUTPUT:\n ---\n fail_compilation/issue21378.d(13): Error: function `issue21378.fn` circular dependency. Functions cannot be interpreted while being compiled\n fail_compilation/issue21378.d(12):        called from here: `fn()`\n-fail_compilation/issue21378.d(12): Error: pragma `inline` pragma(`inline`, `true` or `false`) expected, not `fn()`\n+fail_compilation/issue21378.d(12): Error: pragma(`inline`, `true` or `false`) expected, not `fn()`\n ---\n */\n "}, {"sha": "0ad3f01156a7fbd649324b5e06494b129ce7319c", "filename": "gcc/testsuite/gdc.test/fail_compilation/lexer1.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flexer1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flexer1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flexer1.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -23,9 +23,9 @@ fail_compilation/lexer1.d(49): Error: unterminated named entity &*;\n fail_compilation/lexer1.d(50): Error: unterminated named entity &s1\";\n fail_compilation/lexer1.d(51): Error: unterminated named entity &2;\n fail_compilation/lexer1.d(52): Error: escape octal sequence \\400 is larger than \\377\n+fail_compilation/lexer1.d(53): Error: html entity requires 2 code units, use a string instead of a character\n ---\n */\n-\n // https://dlang.dawg.eu/coverage/src/lexer.c.gcov.html\n x\"01 02 03\"w;\n 0x80000001;\n@@ -50,3 +50,4 @@ static s5 = \"\\&*\";\n static s6 = \"\\&s1\";\n static s7 = \"\\&2;\";\n static s7 = \"\\400;\";\n+dchar s8 = '\\&acE;';"}, {"sha": "23f3bfef82e0705339ebfca73b275c18ac0bea25", "filename": "gcc/testsuite/gdc.test/fail_compilation/pragmainline.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpragmainline.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpragmainline.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpragmainline.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/pragmainline.d(8): Error: pragma `inline` one boolean expression expected for `pragma(inline)`, not 3\n+fail_compilation/pragmainline.d(8): Error: one boolean expression expected for `pragma(inline)`, not 3\n ---\n */\n "}, {"sha": "5a4b5d95d076c4eae9687d18213099885c936a6d", "filename": "gcc/testsuite/gdc.test/fail_compilation/pragmas.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpragmas.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpragmas.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpragmas.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -3,8 +3,8 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/pragmas.d(103): Error: boolean expression expected for `pragma(inline)`\n-fail_compilation/pragmas.d(108): Error: boolean expression expected for `pragma(inline)`\n+fail_compilation/pragmas.d(103): Error: one boolean expression expected for `pragma(inline)`, not 2\n+fail_compilation/pragmas.d(108): Error: one boolean expression expected for `pragma(inline)`, not 2\n fail_compilation/pragmas.d(118): Error: unrecognized `pragma(unrecognized)`\n ---\n */"}, {"sha": "ca5409301291457a4417ffd23614d9c27664db36", "filename": "gcc/testsuite/gdc.test/fail_compilation/previewin.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fpreviewin.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,10 +8,10 @@ fail_compilation/previewin.d(5): Error: function `previewin.takeFunction(void fu\n fail_compilation/previewin.d(5):        cannot pass argument `__lambda2` of type `void function(const(real) x) pure nothrow @nogc @safe` to parameter `void function(in real) f`\n fail_compilation/previewin.d(6): Error: function `previewin.takeFunction(void function(in real) f)` is not callable using argument types `(void function(ref const(real) x) pure nothrow @nogc @safe)`\n fail_compilation/previewin.d(6):        cannot pass argument `__lambda3` of type `void function(ref const(real) x) pure nothrow @nogc @safe` to parameter `void function(in real) f`\n-fail_compilation/previewin.d(15): Error: scope variable `arg` assigned to non-scope `myGlobal`\n-fail_compilation/previewin.d(16): Error: scope variable `arg` assigned to non-scope `myGlobal`\n+fail_compilation/previewin.d(15): Error: scope variable `arg` assigned to global variable `myGlobal`\n+fail_compilation/previewin.d(16): Error: scope variable `arg` assigned to global variable `myGlobal`\n fail_compilation/previewin.d(17): Error: scope parameter `arg` may not be returned\n-fail_compilation/previewin.d(18): Error: scope variable `arg` assigned to `escape` with longer lifetime\n+fail_compilation/previewin.d(18): Error: scope variable `arg` assigned to `ref` variable `escape` with longer lifetime\n fail_compilation/previewin.d(22): Error: returning `arg` escapes a reference to parameter `arg`\n fail_compilation/previewin.d(22):        perhaps annotate the parameter with `return`\n ---"}, {"sha": "29f96ece787e887bf82b9511a921362455ec0f69", "filename": "gcc/testsuite/gdc.test/fail_compilation/reserved_version.d", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -117,6 +117,7 @@ fail_compilation/reserved_version.d(218): Error: version identifier `D_PreCondit\n fail_compilation/reserved_version.d(219): Error: version identifier `D_PostConditions` is reserved and cannot be set\n fail_compilation/reserved_version.d(220): Error: version identifier `D_ProfileGC` is reserved and cannot be set\n fail_compilation/reserved_version.d(221): Error: version identifier `D_Invariants` is reserved and cannot be set\n+fail_compilation/reserved_version.d(222): Error: version identifier `D_Optimized` is reserved and cannot be set\n ---\n */\n \n@@ -240,6 +241,7 @@ version = D_PreConditions;\n version = D_PostConditions;\n version = D_ProfileGC;\n version = D_Invariants;\n+version = D_Optimized;\n \n // This should work though\n debug = DigitalMars;\n@@ -351,3 +353,4 @@ debug = AVR;\n debug = D_PreConditions;\n debug = D_PostConditions;\n debug = D_ProfileGC;\n+debug = D_Optimized;"}, {"sha": "f5f6b1c9acddd611d1ac952ec57337b23a2976a0", "filename": "gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version_switch.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version_switch.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version_switch.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -107,6 +107,7 @@\n // REQUIRED_ARGS: -version=D_PostConditions\n // REQUIRED_ARGS: -version=D_ProfileGC\n // REQUIRED_ARGS: -version=D_Invariants\n+// REQUIRED_ARGS: -version=D_Optimized\n // REQUIRED_ARGS: -debug=DigitalMars\n // REQUIRED_ARGS: -debug=GNU\n // REQUIRED_ARGS: -debug=LDC\n@@ -211,6 +212,7 @@\n // REQUIRED_ARGS: -debug=D_PostConditions\n // REQUIRED_ARGS: -debug=D_ProfileGC\n // REQUIRED_ARGS: -debug=D_Invariants\n+// REQUIRED_ARGS: -debug=D_Optimized\n /*\n TEST_OUTPUT:\n ---\n@@ -321,5 +323,6 @@ Error: version identifier `D_PreConditions` is reserved and cannot be set\n Error: version identifier `D_PostConditions` is reserved and cannot be set\n Error: version identifier `D_ProfileGC` is reserved and cannot be set\n Error: version identifier `D_Invariants` is reserved and cannot be set\n+Error: version identifier `D_Optimized` is reserved and cannot be set\n ---\n */"}, {"sha": "ece6a8cf62ef1e2469fae79c79ee1be0b27f5875", "filename": "gcc/testsuite/gdc.test/fail_compilation/retscope.d", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -4,9 +4,9 @@ TEST_OUTPUT:\n ---\n fail_compilation/retscope.d(22): Error: scope parameter `p` may not be returned\n fail_compilation/retscope.d(32): Error: returning `b ? nested1(& i) : nested2(& j)` escapes a reference to local variable `j`\n-fail_compilation/retscope.d(45): Error: scope variable `p` assigned to non-scope `q`\n+fail_compilation/retscope.d(45): Error: scope variable `p` assigned to global variable `q`\n fail_compilation/retscope.d(47): Error: address of variable `i` assigned to `q` with longer lifetime\n-fail_compilation/retscope.d(48): Error: scope variable `a` assigned to non-scope `b`\n+fail_compilation/retscope.d(48): Error: scope variable `a` assigned to global variable `b`\n fail_compilation/retscope.d(49): Error: address of struct temporary returned by `(*fp2)()` assigned to longer lived variable `q`\n ---\n */\n@@ -662,7 +662,7 @@ int test21()\n /*********************************************\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope.d(1907): Error: scope variable `x` assigned to `this` with longer lifetime\n+fail_compilation/retscope.d(1907): Error: scope variable `x` assigned to `ref` variable `this` with longer lifetime\n fail_compilation/retscope.d(1913): Error: scope variable `x` may not be returned\n ---\n */"}, {"sha": "1cb76d6d5ae8d8aff15e87b848d5bbb6d0e4dd01", "filename": "gcc/testsuite/gdc.test/fail_compilation/retscope2.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope2.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -2,7 +2,7 @@\n REQUIRED_ARGS: -preview=dip1000\n TEST_OUTPUT:\n ---\n-fail_compilation/retscope2.d(102): Error: scope variable `s` assigned to `p` with longer lifetime\n+fail_compilation/retscope2.d(102): Error: scope variable `s` assigned to `ref` variable `p` with longer lifetime\n fail_compilation/retscope2.d(107): Error: address of variable `s` assigned to `p` with longer lifetime\n ---\n */"}, {"sha": "9736d37e94920980470cb492b1d25c5eb3176eb7", "filename": "gcc/testsuite/gdc.test/fail_compilation/retscope6.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope6.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope6.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fretscope6.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -25,7 +25,7 @@ int* test() @safe\n ---\n fail_compilation/retscope6.d(7034): Error: address of variable `i` assigned to `s` with longer lifetime\n fail_compilation/retscope6.d(7035): Error: address of variable `i` assigned to `s` with longer lifetime\n-fail_compilation/retscope6.d(7025): Error: scope variable `_param_2` assigned to `t` with longer lifetime\n+fail_compilation/retscope6.d(7025): Error: scope variable `_param_2` assigned to `ref` variable `t` with longer lifetime\n fail_compilation/retscope6.d(7037): Error: template instance `retscope6.S.emplace4!(int*)` error instantiating\n fail_compilation/retscope6.d(7037): Error: address of variable `i` assigned to `s` with longer lifetime\n ---"}, {"sha": "0079719e3554ad3bac88dab3f4017419d9fbdfa8", "filename": "gcc/testsuite/gdc.test/fail_compilation/systemvariables.d", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,48 @@\n+/*\n+REQUIRED_ARGS: -preview=systemVariables\n+TEST_OUTPUT:\n+---\n+fail_compilation/systemvariables.d(30): Error: cannot access `@system` variable `gInt` in @safe code\n+fail_compilation/systemvariables.d(31): Error: cannot access `@system` variable `gInt` in @safe code\n+fail_compilation/systemvariables.d(32): Error: cannot access `@system` variable `gArr` in @safe code\n+fail_compilation/systemvariables.d(33): Error: cannot access `@system` variable `gArr` in @safe code\n+fail_compilation/systemvariables.d(34): Error: cannot access `@system` variable `gInt` in @safe code\n+fail_compilation/systemvariables.d(37): Error: cannot access `@system` variable `lSys` in @safe code\n+fail_compilation/systemvariables.d(38): Error: cannot access `@system` variable `lSys` in @safe code\n+fail_compilation/systemvariables.d(39): Error: cannot access `@system` variable `lSys` in @safe code\n+fail_compilation/systemvariables.d(41): Error: cannot access `@system` variable `eInt` in @safe code\n+---\n+*/\n+\n+// http://dlang.org/dips/1035\n+\n+\n+@system int gInt;\n+@system enum int eInt = 3;\n+@system { int[] gArr; }\n+alias aliasToSys = gInt;\n+\n+void increment(ref int x) @safe { x++; }\n+void incrementP(int* x) @safe { (*x)++; }\n+\n+void basic() @safe\n+{\n+    gInt = 0; // error\n+    gInt++; // error\n+    gArr ~= 30; // error\n+    const c = gArr[0]; // error\n+    aliasToSys++; // error\n+\n+    @system int lSys = 0;\n+    lSys = 0; // error\n+    increment(lSys); // error\n+    incrementP(&lSys); // error\n+\n+    int a = eInt; // error\n+    int b = typeof(eInt).max; // allowed\n+\n+    void f() @trusted\n+    {\n+        lSys = 0; // allowed\n+    }\n+}"}, {"sha": "75dbe2dc1a09b4706fa066d2918959a33bddc779", "filename": "gcc/testsuite/gdc.test/fail_compilation/systemvariables_deprecation.d", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_deprecation.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_deprecation.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_deprecation.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,28 @@\n+/*\n+REQUIRED_ARGS: -de\n+TEST_OUTPUT:\n+---\n+fail_compilation/systemvariables_deprecation.d(16): Deprecation: `@safe` function `main` calling `middle`\n+fail_compilation/systemvariables_deprecation.d(21):        which calls `systemvariables_deprecation.inferred`\n+fail_compilation/systemvariables_deprecation.d(27):        which would be `@system` because of:\n+fail_compilation/systemvariables_deprecation.d(27):        cannot access `@system` variable `x0` in @safe code\n+---\n+*/\n+\n+// test deprecation messages before -preview=systemVariables becomes default\n+\n+void main() @safe\n+{\n+    middle(); // nested deprecation\n+}\n+\n+auto middle()\n+{\n+    return inferred(); // no deprecation, inferredC is not explicit `@safe`\n+}\n+\n+auto inferred()\n+{\n+    @system int* x0;\n+    x0 = null;\n+}"}, {"sha": "7d8bfabeb7db34bbfdca5484373f93675328c3dd", "filename": "gcc/testsuite/gdc.test/fail_compilation/systemvariables_struct.d", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_struct.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_struct.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_struct.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,60 @@\n+/*\n+REQUIRED_ARGS: -preview=systemVariables\n+TEST_OUTPUT:\n+---\n+fail_compilation/systemvariables_struct.d(31): Error: cannot access `@system` field `S.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(32): Error: cannot access `@system` field `S.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(33): Error: cannot access `@system` field `S.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(36): Error: cannot access `@system` field `S.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(37): Error: cannot access `@system` field `S.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(38): Error: cannot access `@system` field `S.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(54): Error: cannot access `@system` field `S2.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(55): Error: cannot access `@system` field `S2.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(56): Error: cannot access `@system` field `S.syst` in `@safe` code\n+fail_compilation/systemvariables_struct.d(57): Error: cannot access `@system` field `S.syst` in `@safe` code\n+---\n+*/\n+\n+// http://dlang.org/dips/1035\n+\n+struct S\n+{\n+    @system S* syst;\n+    @safe S* safe;\n+}\n+\n+void aggregate() @safe\n+{\n+    S s0;\n+\n+    // write access\n+    s0.syst = null;\n+    __traits(getMember, s0, \"syst\") = null;\n+    s0.tupleof[0] = null;\n+\n+    // read access\n+    auto a0 = s0.syst;\n+    auto a1 = __traits(getMember, s0, \"syst\");\n+    auto a2 = s0.tupleof[0];\n+\n+    S s1;\n+    s1 = s0; // allowed\n+}\n+\n+struct S2\n+{\n+    @system S syst;\n+    @safe   S safe;\n+}\n+\n+@safe S2 gs2;\n+\n+void aggregate2() @safe\n+{\n+    gs2.syst.syst = null;\n+    gs2.syst.safe = null;\n+    gs2.safe.syst = null;\n+    gs2.safe.syst.safe = null;\n+\n+    gs2.safe.safe = null; // allowed\n+}"}, {"sha": "6f44093a8afda55267c5cb1e9b28aee4a6329e32", "filename": "gcc/testsuite/gdc.test/fail_compilation/systemvariables_void_init.d", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_void_init.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_void_init.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fsystemvariables_void_init.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,32 @@\n+/**\n+REQUIRED_ARGS: -preview=systemVariables\n+TEST_OUTPUT:\n+---\n+fail_compilation/systemvariables_void_init.d(29): Error: `void` initializers for `@system` variables not allowed in safe functions\n+fail_compilation/systemvariables_void_init.d(30): Error: `void` initializers for `@system` variables not allowed in safe functions\n+fail_compilation/systemvariables_void_init.d(31): Error: `void` initializers for `@system` variables not allowed in safe functions\n+---\n+*/\n+\n+struct S\n+{\n+\tint x;\n+\t@system int y;\n+}\n+\n+struct C\n+{\n+\tS[2] x;\n+}\n+\n+enum E : C\n+{\n+\tx = C.init,\n+}\n+\n+void main() @safe\n+{\n+\tS s = void;\n+\tC c = void;\n+\tE e = void;\n+}"}, {"sha": "73036d959b4af691f834d0a16efe84e21f6a5967", "filename": "gcc/testsuite/gdc.test/fail_compilation/templatethis.d", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftemplatethis.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftemplatethis.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftemplatethis.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,37 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/templatethis.d(13): Error: cannot use `this` outside an aggregate type\n+fail_compilation/templatethis.d(17): Error: cannot use `this` outside an aggregate type\n+fail_compilation/templatethis.d(21): Error: cannot use `this` outside an aggregate type\n+fail_compilation/templatethis.d(23): Error: cannot use `this` outside an aggregate type\n+fail_compilation/templatethis.d(29): Error: cannot use `this` outside an aggregate type\n+fail_compilation/templatethis.d(32): Error: mixin `templatethis.t2!()` error instantiating\n+---\n+*/\n+\n+template t(this T)\n+{\n+}\n+\n+struct S(this T)\n+{\n+}\n+\n+enum e(this T) = 1;\n+\n+void f(this T)()\n+{\n+}\n+\n+mixin template t2()\n+{\n+\tint i(this T) = 1;\n+}\n+\n+mixin t2;\n+\n+class C\n+{\n+\tmixin t2; // OK\n+}"}, {"sha": "94d5d0ffc5ffb585637a142fac057219384fad86", "filename": "gcc/testsuite/gdc.test/fail_compilation/test14496.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest14496.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest14496.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest14496.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -6,10 +6,10 @@ fail_compilation/test14496.d(24): Error: `void` initializers for pointers not al\n fail_compilation/test14496.d(28): Error: `void` initializers for pointers not allowed in safe functions\n fail_compilation/test14496.d(48): Error: `void` initializers for pointers not allowed in safe functions\n fail_compilation/test14496.d(49): Error: `void` initializers for pointers not allowed in safe functions\n+fail_compilation/test14496.d(50): Error: `void` initializers for pointers not allowed in safe functions\n ---\n */\n // https://issues.dlang.org/show_bug.cgi?id=14496\n-\n @safe void foo()\n {\n     struct Foo {\n@@ -47,4 +47,5 @@ struct Baz {\n @safe void sinister() {\n     Bar bar;\n     Baz baz;\n+    Bar[2] bars; // https://issues.dlang.org/show_bug.cgi?id=23412\n }"}, {"sha": "befcdb19fee9e5c0a89e54f01b3230b8ffed4170", "filename": "gcc/testsuite/gdc.test/fail_compilation/test17764.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17764.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17764.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest17764.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,7 +1,7 @@\n /* REQUIRED_ARGS: -preview=dip1000\n  * TEST_OUTPUT:\n ---\n-fail_compilation/test17764.d(109): Error: scope variable `c` assigned to non-scope `global`\n+fail_compilation/test17764.d(109): Error: scope variable `c` assigned to global variable `global`\n ---\n  */\n "}, {"sha": "980931e3da2f5e7b2e5c19fa49f93e8cd1dcdccf", "filename": "gcc/testsuite/gdc.test/fail_compilation/test19097.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest19097.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest19097.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest19097.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -3,7 +3,7 @@\n ---\n fail_compilation/test19097.d(44): Error: scope variable `s` may not be returned\n fail_compilation/test19097.d(48): Error: scope variable `s1` may not be returned\n-fail_compilation/test19097.d(77): Error: scope variable `z` assigned to `refPtr` with longer lifetime\n+fail_compilation/test19097.d(77): Error: scope variable `z` assigned to `ref` variable `refPtr` with longer lifetime\n fail_compilation/test19097.d(108): Error: scope variable `s4` may not be returned\n fail_compilation/test19097.d(126): Error: scope variable `s5c` may not be returned\n fail_compilation/test19097.d(130): Error: scope variable `s5m` may not be returned"}, {"sha": "55e7c639dd4783f3ba7e6007d9cd1c156df0ee6c", "filename": "gcc/testsuite/gdc.test/fail_compilation/test22145.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22145.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22145.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22145.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,7 +1,7 @@\n /* TEST_OUTPUT:\n REQUIRED_ARGS: -preview=dip1000\n ---\n-fail_compilation/test22145.d(115): Error: scope variable `x` assigned to non-scope `global`\n+fail_compilation/test22145.d(115): Error: scope variable `x` assigned to global variable `global`\n ---\n  */\n "}, {"sha": "85e653e91eafceb67d20d1c880f236bb1f6ebc7d", "filename": "gcc/testsuite/gdc.test/fail_compilation/test22680.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22680.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22680.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest22680.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,7 +1,7 @@\n /* REQUIRED_ARGS: -preview=dip1000\n TEST_OUTPUT:\n ---\n-fail_compilation/test22680.d(104): Error: scope variable `this` assigned to non-scope `c`\n+fail_compilation/test22680.d(104): Error: scope variable `this` assigned to global variable `c`\n ---\n */\n "}, {"sha": "55520ba69c268a2eb905c8af78ded213cf4c206c", "filename": "gcc/testsuite/gdc.test/fail_compilation/warn14905.d", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fwarn14905.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fwarn14905.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fwarn14905.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,23 @@\n+// REQUIRED_ARGS: -o- -w\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/warn14905.d(16): Warning: statement is not reachable in template instance warn14905.fun!\"a\".fun\n+fail_compilation/warn14905.d(16): Warning: statement is not reachable in template instance warn14905.fun!\"b\".fun\n+Error: warnings are treated as errors\n+       Use -wi if you wish to treat warnings only as informational.\n+---\n+*/\n+\n+bool fun(string s)()\n+{\n+    return true;\n+    return false;\n+}\n+\n+void main()\n+{\n+    cast(void)fun!\"a\";\n+    cast(void)fun!\"b\";\n+}"}, {"sha": "6cf0e238f29bd6c2afaf5d0fdd59730f8d1372ad", "filename": "gcc/testsuite/gdc.test/fail_compilation/xmmslice.d", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fxmmslice.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fxmmslice.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fxmmslice.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,22 @@\n+\n+/* REQUIRED_ARGS: -mcpu=avx\n+DISABLED: win32 freebsd32 linux32 osx32\n+TEST_OUTPUT:\n+---\n+fail_compilation/xmmslice.d(110): Error: `__vector(int[4])` cannot be sliced with `[]`\n+---\n+ */\n+\n+#line 100\n+\n+import core.simd;\n+\n+int4 testz4()\n+{\n+    return [0,0,0,0];\n+}\n+\n+void test()\n+{\n+    assert(testz4()[] == [0,0,0,0]);\n+}"}, {"sha": "1c998dca55a9f5cf8af98ca5f0f576fb40ba4dca", "filename": "gcc/testsuite/gdc.test/runnable/cdcmp.d", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcdcmp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcdcmp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcdcmp.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,146 @@\n+\n+\n+bool test_ltz(float x) { return x <  0; }\n+bool test_lez(float x) { return x <= 0; }\n+bool test_eqz(float x) { return x == 0; }\n+bool test_nez(float x) { return x != 0; }\n+bool test_gez(float x) { return x >= 0; }\n+bool test_gtz(float x) { return x >  0; }\n+\n+void test1f()\n+{\n+    assert(!test_ltz(0.0f));\n+    assert(!test_ltz(1.0f));\n+    assert( test_ltz(-1.0f));\n+\n+    assert( test_lez(0.0f));\n+    assert(!test_lez(1.0f));\n+    assert( test_lez(-1.0f));\n+\n+    assert( test_eqz(0.0f));\n+    assert(!test_eqz(1.0f));\n+    assert(!test_eqz(-1.0f));\n+\n+    assert(!test_nez(0.0f));\n+    assert( test_nez(1.0f));\n+    assert( test_nez(-1.0f));\n+\n+    assert( test_gez(0.0f));\n+    assert( test_gez(1.0f));\n+    assert(!test_gez(-1.0f));\n+\n+    assert(!test_gtz(0.0f));\n+    assert( test_gtz(1.0f));\n+    assert(!test_gtz(-1.0f));\n+}\n+\n+bool test_ltz(double x) { return x <  0; }\n+bool test_lez(double x) { return x <= 0; }\n+bool test_eqz(double x) { return x == 0; }\n+bool test_nez(double x) { return x != 0; }\n+bool test_gez(double x) { return x >= 0; }\n+bool test_gtz(double x) { return x >  0; }\n+\n+void test1d()\n+{\n+    assert(!test_ltz(0.0));\n+    assert(!test_ltz(1.0));\n+    assert( test_ltz(-1.0));\n+\n+    assert( test_lez(0.0));\n+    assert(!test_lez(1.0));\n+    assert( test_lez(-1.0));\n+\n+    assert( test_eqz(0.0));\n+    assert(!test_eqz(1.0));\n+    assert(!test_eqz(-1.0));\n+\n+    assert(!test_nez(0.0));\n+    assert( test_nez(1.0));\n+    assert( test_nez(-1.0));\n+\n+    assert( test_gez(0.0));\n+    assert( test_gez(1.0));\n+    assert(!test_gez(-1.0));\n+\n+    assert(!test_gtz(0.0));\n+    assert( test_gtz(1.0));\n+    assert(!test_gtz(-1.0));\n+}\n+\n+bool test_lt(float x, float y) { return x <  y; }\n+bool test_le(float x, float y) { return x <= y; }\n+bool test_eq(float x, float y) { return x == y; }\n+bool test_ne(float x, float y) { return x != y; }\n+bool test_ge(float x, float y) { return x >= y; }\n+bool test_gt(float x, float y) { return x >  y; }\n+\n+void test2f()\n+{\n+    assert(!test_lt(1.0f, 1.0f));\n+    assert( test_lt(1.0f, 2.0f));\n+    assert(!test_lt(2.0f, 1.0f));\n+\n+    assert( test_le(1.0f, 1.0f));\n+    assert( test_le(1.0f, 2.0f));\n+    assert(! test_le(2.0f, 1.0f));\n+\n+    assert( test_eq(1.0f, 1.0f));\n+    assert(!test_eq(1.0f, 2.0f));\n+    assert(!test_eq(2.0f, 1.0f));\n+\n+    assert(!test_ne(1.0f, 1.0f));\n+    assert( test_ne(1.0f, 2.0f));\n+    assert( test_ne(2.0f, 1.0f));\n+\n+    assert( test_ge(1.0f, 1.0f));\n+    assert(!test_ge(1.0f, 2.0f));\n+    assert( test_ge(2.0f, 1.0f));\n+\n+    assert(!test_gt(1.0f, 1.0f));\n+    assert(!test_gt(1.0f, 2.0f));\n+    assert( test_gt(2.0f, 1.0f));\n+}\n+\n+bool test_lt(double x, double y) { return x <  y; }\n+bool test_le(double x, double y) { return x <= y; }\n+bool test_eq(double x, double y) { return x == y; }\n+bool test_ne(double x, double y) { return x != y; }\n+bool test_ge(double x, double y) { return x >= y; }\n+bool test_gt(double x, double y) { return x >  y; }\n+\n+void test2d()\n+{\n+    assert(!test_lt(1.0, 1.0));\n+    assert( test_lt(1.0, 2.0));\n+    assert(!test_lt(2.0, 1.0));\n+\n+    assert( test_le(1.0, 1.0));\n+    assert( test_le(1.0, 2.0));\n+    assert(! test_le(2.0, 1.0));\n+\n+    assert( test_eq(1.0, 1.0));\n+    assert(!test_eq(1.0, 2.0));\n+    assert(!test_eq(2.0, 1.0));\n+\n+    assert(!test_ne(1.0, 1.0));\n+    assert( test_ne(1.0, 2.0));\n+    assert( test_ne(2.0, 1.0));\n+\n+    assert( test_ge(1.0, 1.0));\n+    assert(!test_ge(1.0, 2.0));\n+    assert( test_ge(2.0, 1.0));\n+\n+    assert(!test_gt(1.0, 1.0));\n+    assert(!test_gt(1.0, 2.0));\n+    assert( test_gt(2.0, 1.0));\n+}\n+\n+int main()\n+{\n+    test1f();\n+    test1d();\n+    test2f();\n+    test2d();\n+    return 0;\n+}"}, {"sha": "897514681d5e196ed0a56194a1f0cee215e13629", "filename": "gcc/testsuite/gdc.test/runnable/lexer.d", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flexer.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flexer.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Flexer.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -87,6 +87,10 @@ enum e13102=184467440737095516153.6L;\n \n /*********************************************************/\n \n+static assert(\"\\&acE;\" == \"\\U0000223E\\U00000333\"); // =\"\\xe2\\x88\\xbe\\xcc\\xb3\"\n+\n+/*********************************************************/\n+\n int main()\n {\n     test6();"}, {"sha": "bd012bba19e382aa6689c5ff8554b0b712d7e5f6", "filename": "gcc/testsuite/gdc.test/runnable/test20734.d", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20734.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20734.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest20734.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -17,6 +17,14 @@ extern(C) int main() nothrow @nogc @safe\n     takeScopeSlice([ S(1), S(2) ]); // @nogc => no GC allocation\n     (() @trusted { assert(numDtor == 2); })(); // stack-allocated array literal properly destructed\n     assert23100([]);\n+\n+    // https://issues.dlang.org/show_bug.cgi?id=22306\n+    // scope array variable should be stack allocated\n+    scope int[] sa = [10, 20];\n+    assert(sa[0] == 10);\n+    assert(sa[1] == 20);\n+    assert(sa.length == 2);\n+\n     return 0;\n }\n "}, {"sha": "47deabab7f90dbcc0e3e2bffa6c9046c6cc70455", "filename": "gcc/testsuite/gdc.test/runnable/test23337.d", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23337.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23337.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23337.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -0,0 +1,182 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23337\n+\n+int copies, destroyed;\n+\n+void reset() { copies = destroyed = 0; }\n+\n+struct S\n+{\n+    this(inout ref S) inout { ++copies; }\n+    ~this() { ++destroyed; }\n+}\n+\n+S[3] globals;\n+\n+S[3] makeStaticArray() { return (S[3]).init; }\n+\n+S[] makeSlice(ref S[3] sa) { return sa[]; }\n+\n+void main()\n+{\n+    {\n+        S[3] fromLvalStaticArray = globals;\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        S[3] fromRvalStaticArray = makeStaticArray();\n+        assert(copies == 0); // moved or emplaced\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        S[3] fromArrayLiteral = [S(), S(), S()];\n+        assert(copies == 0); // moved or emplaced\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        S[3] fromSliceExp = globals[];\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        S[] slice = globals[];\n+        S[3] fromLvalSlice = slice;\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        S[3] fromRvalSlice = makeSlice(globals);\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        S *p = &globals[0];\n+        S[3] fromSingleLval = *p;\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        S[3] fromSingleRval = S();\n+        assert(destroyed == 1); // temporary\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 4);\n+    reset();\n+\n+    // slice-exp left-hand-sides (*construction* only in ctors):\n+\n+    {\n+        static struct T\n+        {\n+            S[3] ss;\n+            this(int) { ss[] = globals; }\n+        }\n+        T fromLvalStaticArray = T(0);\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        static struct T\n+        {\n+            S[3] ss;\n+            this(int) { ss[] = makeStaticArray(); }\n+        }\n+        T fromRvalStaticArray = T(0);\n+        assert(copies == 0); // moved or emplaced\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        static struct T\n+        {\n+            S[3] ss;\n+            this(int) { ss[] = [S(), S(), S()]; }\n+        }\n+        T fromArrayLiteral = T(0);\n+        assert(copies == 0); // moved or emplaced\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        static struct T\n+        {\n+            S[3] ss;\n+            this(int) { ss[] = globals[]; }\n+        }\n+        T fromSliceExp = T(0);\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        static struct T\n+        {\n+            S[3] ss;\n+            this(int)\n+            {\n+                S[] slice = globals[];\n+                ss[] = slice;\n+            }\n+        }\n+        T fromLvalSlice = T(0);\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        static struct T\n+        {\n+            S[3] ss;\n+            this(int) { ss[] = makeSlice(globals); }\n+        }\n+        T fromRvalSlice = T(0);\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        static struct T\n+        {\n+            S[3] ss;\n+            this(int) { ss[] = globals[0]; }\n+        }\n+        T fromSingleLval = T(0);\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 3);\n+    reset();\n+\n+    {\n+        static struct T\n+        {\n+            S[3] ss;\n+            this(int) { ss[] = S(); }\n+        }\n+        T fromSingleRval = T(0);\n+        assert(destroyed == 1); // temporary\n+        assert(copies == 3);\n+    }\n+    assert(destroyed == 4);\n+    reset();\n+}"}, {"sha": "2398875bce779368ad98167bbe9bee4876625896", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,4 +1,4 @@\n-4219ba670ce9ff92f3e874f0f048f2c28134c008\n+e4f89195913be1dc638707b1abb24c4f3ae7e0bf\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "dbe7daa77911742dd6f519b436038a3d04cd8111", "filename": "libphobos/libdruntime/core/stdc/fenv.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -24,7 +24,6 @@ else version (WatchOS)\n     version = Darwin;\n \n extern (C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "13c6f9efbe80e25eba9e0182116be9c1cb1579ed", "filename": "libphobos/libdruntime/core/stdc/signal.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fsignal.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fsignal.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fsignal.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -15,7 +15,6 @@\n module core.stdc.signal;\n \n extern (C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "5b79813ae1bf0ccf6aa3dc3fec49141e297d75c8", "filename": "libphobos/libdruntime/core/stdc/stdarg.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -12,7 +12,6 @@\n \n module core.stdc.stdarg;\n \n-@system:\n @nogc:\n nothrow:\n "}, {"sha": "ee37da1a5dddf83e18925995634b89a2cd4c38ea", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -49,7 +49,6 @@ private\n }\n \n extern (C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "0b42de8ec3b9db8e7e4336bd17fc4d7beab0fc8e", "filename": "libphobos/libdruntime/core/stdc/stdlib.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -31,7 +31,6 @@ version (CRuntime_Glibc)\n else {}\n \n extern (C):\n-@system:\n \n /* Placed outside `nothrow` and `@nogc` in order to not constrain what the callback does.\n  */"}, {"sha": "3591a6d2d7712d4e8e3b272003576d794a4aa29d", "filename": "libphobos/libdruntime/core/stdc/string.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstring.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -30,7 +30,6 @@ else version (CRuntime_UClibc)\n     version = ReturnStrerrorR;\n \n extern (C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "fe5fce481cd5de5609c2e2d1b592974083bd79a0", "filename": "libphobos/libdruntime/core/stdc/wchar_.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwchar_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwchar_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwchar_.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -22,7 +22,6 @@ public import core.stdc.time;    // for tm\n public import core.stdc.stdint;  // for WCHAR_MIN, WCHAR_MAX\n \n extern (C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "413d9c655b1eb7c3d1e46d8020ffdb786f52b5d5", "filename": "libphobos/libdruntime/core/sys/darwin/fcntl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Ffcntl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -15,6 +15,5 @@ version (Darwin):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n enum F_FULLFSYNC = 51;"}, {"sha": "2e744b0fecab56b09f0bff3b08189cc906c29b7f", "filename": "libphobos/libdruntime/core/sys/darwin/ifaddrs.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fifaddrs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fifaddrs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fifaddrs.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -29,7 +29,6 @@ version (Darwin):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n import core.sys.posix.sys.socket;\n "}, {"sha": "b120ee58f69fa6dd2f4c87bfabd8ea81cee4343f", "filename": "libphobos/libdruntime/core/sys/elf/package.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Felf%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Felf%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Felf%2Fpackage.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@ module core.sys.elf;\n extern (C):\n pure:\n nothrow:\n-@system:\n \n import core.stdc.stdint;\n "}, {"sha": "a13bae76631a214cd12c7e21258bd175d907a608", "filename": "libphobos/libdruntime/core/sys/linux/dlfcn.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@ version (linux):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "0486cbee0bbaa6aaad832ca3a6dc1c75c1f58490", "filename": "libphobos/libdruntime/core/sys/linux/elf.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Felf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Felf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Felf.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@ version (linux):\n extern (C):\n pure:\n nothrow:\n-@system:\n \n import core.stdc.stdint;\n public import core.sys.elf;"}, {"sha": "99099b52417e98d67abe90a4cc908f5c611b0940", "filename": "libphobos/libdruntime/core/sys/linux/epoll.d", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fepoll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fepoll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fepoll.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -13,10 +13,8 @@ version (linux):\n import core.sys.posix.signal : sigset_t;\n \n extern (C):\n-@system:\n @nogc:\n nothrow:\n-@system:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "c3752de520706a73de43079ef7ffe8990a5b8d42", "filename": "libphobos/libdruntime/core/sys/linux/err.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferr.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -12,7 +12,6 @@ version (linux):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n void err(int eval, scope const char* fmt, ...);\n void errx(int eval, scope const char* fmt, ...);"}, {"sha": "74844e798e8263fc607883cc343905953a6fd07d", "filename": "libphobos/libdruntime/core/sys/linux/errno.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@ module core.sys.linux.errno;\n version (linux):\n extern (C):\n nothrow:\n-@system:\n \n public import core.stdc.errno;\n import core.sys.linux.config;"}, {"sha": "50dc60d208a36f99c1adc48a33eca9833fe3dbf3", "filename": "libphobos/libdruntime/core/sys/linux/execinfo.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fexecinfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fexecinfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fexecinfo.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -10,7 +10,6 @@ module core.sys.linux.execinfo;\n version (linux):\n extern (C):\n nothrow:\n-@system:\n @nogc:\n \n int backtrace(void** buffer, int size);"}, {"sha": "d666efecdb4dfd7d458fc58350ea9f614e18c2c8", "filename": "libphobos/libdruntime/core/sys/linux/fcntl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffcntl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -5,7 +5,6 @@ public import core.sys.posix.fcntl;\n version (linux):\n extern(C):\n nothrow:\n-@system:\n \n // From linux/falloc.h\n /// fallocate(2) params"}, {"sha": "ca88567007670382a1a9d52a68d9f14cb1f90db7", "filename": "libphobos/libdruntime/core/sys/linux/fs.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffs.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -18,7 +18,6 @@ public import core.sys.posix.sys.ioctl;\n import core.stdc.config : c_ulong, c_long;\n \n extern (C):\n-@system:\n @nogc:\n nothrow:\n "}, {"sha": "479dfa8d39ba48ad8c01e03794768d5a5d58c337", "filename": "libphobos/libdruntime/core/sys/linux/ifaddrs.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fifaddrs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fifaddrs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fifaddrs.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -22,7 +22,6 @@ version (linux):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n struct ifaddrs\n {"}, {"sha": "7bafb9fec0ba076e63fea63896d76dffe6e01a19", "filename": "libphobos/libdruntime/core/sys/linux/io_uring.d", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fio_uring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fio_uring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fio_uring.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -14,10 +14,8 @@ version (linux):\n import core.sys.linux.fs : __kernel_rwf_t;\n \n extern (C):\n-@system:\n @nogc:\n nothrow:\n-@system:\n \n /**\n  * IO submission data structure (Submission Queue Entry)"}, {"sha": "4d7eb1eb7d39b4ae9e313f10eae11dace48bf462", "filename": "libphobos/libdruntime/core/sys/linux/link.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Flink.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Flink.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Flink.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@ module core.sys.linux.link;\n version (linux):\n extern (C):\n nothrow:\n-@system:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "b9993a784133017248c4e174689d1826778f2be1", "filename": "libphobos/libdruntime/core/sys/linux/perf_event.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fperf_event.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fperf_event.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fperf_event.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@ module core.sys.linux.perf_event;\n version (linux)  : extern (C):\n @nogc:\n nothrow:\n-@system:\n \n import core.sys.posix.sys.ioctl;\n import core.sys.posix.unistd;"}, {"sha": "5cd512e826301a4d36551e935608983c7062c197", "filename": "libphobos/libdruntime/core/sys/linux/sched.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsched.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsched.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsched.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -26,7 +26,6 @@ version (linux):\n extern (C):\n @nogc:\n nothrow:\n-@system:\n \n \n private // helpers"}, {"sha": "2d079fd71f7ffbabdfa7c76b9dc0b91ea680e543", "filename": "libphobos/libdruntime/core/sys/linux/stdio.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstdio.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -13,7 +13,6 @@ import core.sys.linux.config : __USE_FILE_OFFSET64;\n import core.stdc.stdio : FILE;\n import core.stdc.stddef : wchar_t;\n \n-@system:\n \n extern(C) nothrow\n {\n@@ -29,7 +28,7 @@ extern(C) nothrow\n         cookie_seek_function_t seek;\n         cookie_close_function_t close;\n     }\n-    FILE* fopencookie(in void* cookie, in char* mode, cookie_io_functions_t io_funcs);\n+    FILE* fopencookie(void* cookie, const(char)* mode, cookie_io_functions_t io_funcs);\n     void setbuffer(FILE *stream, char *buf, size_t size); // note: _DEFAULT_SOURCE\n }\n "}, {"sha": "a8da398246120ebc3be432b2be4c165f3c33de99", "filename": "libphobos/libdruntime/core/sys/linux/string.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -14,7 +14,6 @@ version (linux):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n static if (_GNU_SOURCE)\n {"}, {"sha": "a35d71479d86548443aaf9d9e9afb2c402d871e6", "filename": "libphobos/libdruntime/core/sys/linux/sys/eventfd.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Feventfd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Feventfd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Feventfd.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@ module core.sys.linux.sys.eventfd;\n version (linux):\n extern (C):\n @nogc:\n-@system:\n nothrow:\n \n version (ARM)     version = ARM_Any;"}, {"sha": "c74aaa6e7e24e0a42a46a8d104f7319173573fd5", "filename": "libphobos/libdruntime/core/sys/linux/sys/inotify.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Finotify.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Finotify.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Finotify.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -22,7 +22,6 @@ version (DragonFlyBSD) version = LinuxOrCompatible;\n \n version (LinuxOrCompatible):\n extern (C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "43a1aec1f9469e00a4543396ab81468c834e1d72", "filename": "libphobos/libdruntime/core/sys/linux/sys/mman.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@ module core.sys.linux.sys.mman;\n version (linux):\n extern (C):\n nothrow:\n-@system:\n @nogc:\n \n version (ARM)     version = ARM_Any;"}, {"sha": "363e1e3652bb2333201791f253dd5fc28d2e38af", "filename": "libphobos/libdruntime/core/sys/linux/sys/prctl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fprctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fprctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fprctl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@ module core.sys.linux.sys.prctl;\n \n version (linux):\n extern (C):\n-@system:\n @nogc:\n nothrow:\n "}, {"sha": "8834be4b00b6cf209220f13c11430d0832802527", "filename": "libphobos/libdruntime/core/sys/linux/sys/signalfd.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsignalfd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsignalfd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsignalfd.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -12,7 +12,6 @@ import core.sys.posix.signal;\n version (linux):\n \n extern (C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "699cd3e67c488367988a475c10cdfb11c30a1789", "filename": "libphobos/libdruntime/core/sys/linux/sys/sysinfo.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsysinfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsysinfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsysinfo.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -7,7 +7,6 @@\n module core.sys.linux.sys.sysinfo;\n \n version (linux) extern(C) @nogc nothrow:\n-@system:\n \n import core.sys.linux.config;\n "}, {"sha": "8618fc9b938fa47a38306c5d3a7705245e99adcf", "filename": "libphobos/libdruntime/core/sys/linux/sys/xattr.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fxattr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fxattr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fxattr.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -11,7 +11,6 @@ import core.sys.posix.sys.types;\n \n version (linux):\n extern (C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "eacc4480694196b7ef4df55354f25a664ce9d6b2", "filename": "libphobos/libdruntime/core/sys/linux/timerfd.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftimerfd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftimerfd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftimerfd.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -11,7 +11,6 @@ version (linux):\n public import core.sys.posix.time;\n \n extern (C):\n-@system:\n @nogc:\n nothrow:\n "}, {"sha": "50f90eeb5240efab0518e53214cfcbd5a4dcb78f", "filename": "libphobos/libdruntime/core/sys/linux/tipc.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftipc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftipc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftipc.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -10,7 +10,6 @@ module core.sys.linux.tipc;\n \n version (linux):\n extern (C) nothrow @nogc:\n-@system:\n \n struct tipc_portid\n {"}, {"sha": "faa226cf407cd9054bea0eeda7545e15fb6ef6ba", "filename": "libphobos/libdruntime/core/sys/linux/unistd.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Funistd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Funistd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Funistd.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -5,7 +5,6 @@ public import core.sys.posix.unistd;\n version (linux):\n extern(C):\n nothrow:\n-@system:\n \n // Additional seek constants for sparse file handling\n // from Linux's unistd.h, stdio.h, and linux/fs.h"}, {"sha": "8a8542a5709d74cf7f457237da6341a49dc1251a", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/mman.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fmman.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -47,5 +47,6 @@ static if (__BSD_VISIBLE)\n \n     int madvise(void *, size_t, int);\n     int minherit(void *, size_t, int);\n+    int mimmutable(void *, size_t);\n     void* mquery(void *, size_t, int, int, int, off_t);\n }"}, {"sha": "3ea7f6a19adfd13c086e6d55a9345e5482fd3bc0", "filename": "libphobos/libdruntime/core/sys/posix/aio.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -23,7 +23,6 @@ else version (WatchOS)\n version (Posix):\n \n extern (C):\n-@system:\n @nogc:\n nothrow:\n "}, {"sha": "ae6752f220e5f1cf90307295c35c065816540334", "filename": "libphobos/libdruntime/core/sys/posix/config.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -19,7 +19,6 @@ public import core.stdc.config;\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n enum _XOPEN_SOURCE     = 600;\n enum _POSIX_SOURCE     = true;"}, {"sha": "c7e8649d6c58b9258839e44e3fb1184b42f26565", "filename": "libphobos/libdruntime/core/sys/posix/dirent.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -31,7 +31,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "5797b8fd35d8506bee671663440af09ec36af3d5", "filename": "libphobos/libdruntime/core/sys/posix/dlfcn.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdlfcn.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -45,7 +45,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // XOpen (XSI)"}, {"sha": "0a58034087dbbe1813ca9e387fcc1e4e86d66684", "filename": "libphobos/libdruntime/core/sys/posix/fcntl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -49,7 +49,6 @@ extern (C):\n \n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "3a9b993c0ed59d369133b300ebe92c95ce10e8fb", "filename": "libphobos/libdruntime/core/sys/posix/grp.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fgrp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fgrp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fgrp.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -30,7 +30,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "e588fb8210ab1aceb19af7c3595887622bd329ee", "filename": "libphobos/libdruntime/core/sys/posix/iconv.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ficonv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ficonv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ficonv.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -34,7 +34,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n \n alias void* iconv_t;"}, {"sha": "e0a4473a23aa37cef3c6fead96172438d6874520", "filename": "libphobos/libdruntime/core/sys/posix/inttypes.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Finttypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Finttypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Finttypes.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -19,7 +19,6 @@ public import core.stdc.inttypes;\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "6770cd828b3a1df913c405a6c9fd1d0a86670b2d", "filename": "libphobos/libdruntime/core/sys/posix/libgen.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flibgen.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flibgen.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flibgen.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -15,7 +15,6 @@\n module core.sys.posix.libgen;\n \n @nogc nothrow:\n-@system:\n extern (C):\n version (Posix):\n "}, {"sha": "0864f7c6325791dbedde6d88ba86d8e1842415fb", "filename": "libphobos/libdruntime/core/sys/posix/locale.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -12,7 +12,6 @@ module core.sys.posix.locale;\n \n version (Posix):\n extern(C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "ac697bf8b9beb9224a6bffe846446b1025dd5e52", "filename": "libphobos/libdruntime/core/sys/posix/mqueue.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -31,7 +31,6 @@ version (Posix):\n version (CRuntime_Glibc):\n extern (C):\n @nogc nothrow:\n-@system:\n \n \n /// Message queue descriptor."}, {"sha": "70a5fe1901f342d2be7dddd8cc7056e413d599f0", "filename": "libphobos/libdruntime/core/sys/posix/netdb.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetdb.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetdb.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetdb.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -33,7 +33,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "5901f62b5c3c03ca44cae812664aab1a137eab18", "filename": "libphobos/libdruntime/core/sys/posix/poll.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpoll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpoll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpoll.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -29,7 +29,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // XOpen (XSI)"}, {"sha": "6c5f1a93e45be540243c2bfc0dff21c1b9885bc5", "filename": "libphobos/libdruntime/core/sys/posix/pthread.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -33,7 +33,6 @@ else version (WatchOS)\n version (Posix):\n extern (C)\n nothrow:\n-@system:\n \n //\n // Required"}, {"sha": "e2a77dec3cf52b897d137b5146a3d4962c738e17", "filename": "libphobos/libdruntime/core/sys/posix/pwd.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpwd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpwd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpwd.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -30,7 +30,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "f6f0a58e3592e0ed2804a5dd4225f675c3a7de43", "filename": "libphobos/libdruntime/core/sys/posix/sched.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsched.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsched.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsched.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -32,7 +32,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "d755f86c9cc86e1b36a6be9d56a4b35fb6febb34", "filename": "libphobos/libdruntime/core/sys/posix/semaphore.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -30,7 +30,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "0d43c61389be16f11a85b056c5a673338a9711c4", "filename": "libphobos/libdruntime/core/sys/posix/setjmp.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsetjmp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsetjmp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsetjmp.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -19,7 +19,6 @@ import core.sys.posix.signal; // for sigset_t\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n version (RISCV32) version = RISCV_Any;\n version (RISCV64) version = RISCV_Any;"}, {"sha": "789053396f04890ae73f2db2d82c5ab4c668c774", "filename": "libphobos/libdruntime/core/sys/posix/spawn.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -49,7 +49,6 @@ public import core.sys.posix.sched : sched_param;\n extern(C):\n @nogc:\n nothrow:\n-@system:\n \n int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t*, int);\n int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t*, int, int);"}, {"sha": "d3799890261a06eaced46e41ab884aabab655b89", "filename": "libphobos/libdruntime/core/sys/posix/stdio.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -32,7 +32,6 @@ extern (C):\n \n nothrow:\n @nogc:\n-@system:\n \n //\n // Required (defined in core.stdc.stdio)"}, {"sha": "8dd7b68e869db3eb6e8be0bd923e46487cefa43a", "filename": "libphobos/libdruntime/core/sys/posix/stdlib.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdlib.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -31,7 +31,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required (defined in core.stdc.stdlib)"}, {"sha": "8c4ea38cc83388d6c662d11294508de8d18c4b7a", "filename": "libphobos/libdruntime/core/sys/posix/string.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstring.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -16,7 +16,6 @@ module core.sys.posix.string;\n \n version (Posix):\n extern(C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "768a47f39f16b8985a8835a43376532190c28cc1", "filename": "libphobos/libdruntime/core/sys/posix/strings.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstrings.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstrings.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstrings.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -15,7 +15,6 @@ module core.sys.posix.strings;\n \n version (Posix):\n extern(C):\n-@system:\n nothrow:\n @nogc:\n "}, {"sha": "bedbd6a08fd2d7204ecec1c28029566fd63dda92", "filename": "libphobos/libdruntime/core/sys/posix/sys/filio.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ffilio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ffilio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ffilio.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -20,7 +20,6 @@ else version (WatchOS)\n version (Posix):\n \n nothrow @nogc:\n-@system:\n \n version (Darwin)\n {"}, {"sha": "36917653e3c951b6c507b1f056cecb4f221c7c04", "filename": "libphobos/libdruntime/core/sys/posix/sys/ioccom.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -18,7 +18,6 @@ else version (WatchOS)\n version (Posix):\n \n nothrow @nogc:\n-@system:\n \n version (Darwin)\n {"}, {"sha": "caf3ebafb5a59993899111563214dcb5433b95fd", "filename": "libphobos/libdruntime/core/sys/posix/sys/ioctl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -29,7 +29,6 @@ else version (WatchOS)\n version (Posix):\n \n extern (C) nothrow @nogc:\n-@system:\n \n version (linux)\n {"}, {"sha": "32caba95a10778f6e07f174662880e7013b9d36b", "filename": "libphobos/libdruntime/core/sys/posix/sys/ipc.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -28,7 +28,6 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // XOpen (XSI)"}, {"sha": "0d3d517d69a55e8423d51f55e9fcc2db03137159", "filename": "libphobos/libdruntime/core/sys/posix/sys/mman.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -45,7 +45,6 @@ version (X86_64)  version = X86_Any;\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // Advisory Information (ADV)"}, {"sha": "208e5c2dd47f85dc13c6ae81e642471559b87a9d", "filename": "libphobos/libdruntime/core/sys/posix/sys/msg.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmsg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmsg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmsg.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -14,7 +14,6 @@ import core.stdc.config;\n version (CRuntime_Glibc):\n // Some of these may be from linux kernel headers.\n extern (C):\n-@system:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "1f46f03e14d97c1e88709ed9a14806bb1bf6bb8b", "filename": "libphobos/libdruntime/core/sys/posix/sys/resource.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -23,7 +23,6 @@ else version (WatchOS)\n     version = Darwin;\n \n nothrow @nogc extern(C):\n-@system:\n \n //\n // XOpen (XSI)"}, {"sha": "06b094093ed56e3a16303a822d9dd8a9aa3e8cd6", "filename": "libphobos/libdruntime/core/sys/posix/sys/select.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -27,7 +27,6 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "6ecdc0defeb891328fae61792c9de5aebcd731c2", "filename": "libphobos/libdruntime/core/sys/posix/sys/shm.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -29,7 +29,6 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // XOpen (XSI)"}, {"sha": "340f3ce93bb15699be6e09efe6f5c84ca93a4f8d", "filename": "libphobos/libdruntime/core/sys/posix/sys/socket.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -45,7 +45,6 @@ version (X86_64)  version = X86_Any;\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "ecc98ccf0ed86c6ee81f6852e5d7e7e0e69fb6c8", "filename": "libphobos/libdruntime/core/sys/posix/sys/stat.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -35,7 +35,6 @@ version (SPARC64) version = SPARC_Any;\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "eae0e5c95c6ba2ee9010b80ae7b34e7a15d22235", "filename": "libphobos/libdruntime/core/sys/posix/sys/statvfs.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -16,7 +16,6 @@ version (Posix):\n extern (C) :\n nothrow:\n @nogc:\n-@system:\n \n version (CRuntime_Glibc) {\n     static if (__WORDSIZE == 32)"}, {"sha": "b536eedc14fe87b607c1a4fb2f4c57f42dafd56e", "filename": "libphobos/libdruntime/core/sys/posix/sys/time.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -31,7 +31,6 @@ version (linux) public import core.sys.linux.sys.time;\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // XOpen (XSI)"}, {"sha": "f4c9c5896ce80258228795219c12a756348d222e", "filename": "libphobos/libdruntime/core/sys/posix/sys/ttycom.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -22,7 +22,6 @@ else version (WatchOS)\n version (Posix):\n \n nothrow @nogc:\n-@system:\n \n version (Darwin)\n {"}, {"sha": "cd11b0d30923d96ba808d8f4141772f3cdb987e2", "filename": "libphobos/libdruntime/core/sys/posix/sys/types.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -30,7 +30,6 @@ else version (WatchOS)\n \n version (Posix):\n extern (C):\n-@system:\n \n //\n // bits/typesizes.h -- underlying types for *_t."}, {"sha": "e2839631e3b8e5f9433f56f852125ee21f7b4dce", "filename": "libphobos/libdruntime/core/sys/posix/sys/uio.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -28,7 +28,6 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "11e98a72ab2cd107184c3d5989b05ae4f27d2bbe", "filename": "libphobos/libdruntime/core/sys/posix/sys/un.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -25,7 +25,6 @@ else version (WatchOS)\n \n version (Posix):\n extern(C):\n-@system:\n \n public import core.sys.posix.sys.socket: sa_family_t;\n "}, {"sha": "5de50aca4654c8fc94eb0b3edb0a5bed6db67eba", "filename": "libphobos/libdruntime/core/sys/posix/sys/utsname.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -16,7 +16,6 @@ version (Posix):\n extern(C):\n nothrow:\n @nogc:\n-@system:\n \n version (CRuntime_Glibc)\n {"}, {"sha": "766a4e0b6aabfd06323db7c903a870eb2f006625", "filename": "libphobos/libdruntime/core/sys/posix/sys/wait.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -30,7 +30,6 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "ba2a4ac03ff1d1e0e3df3d72bb1b5c21c0cf1593", "filename": "libphobos/libdruntime/core/sys/posix/syslog.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -27,7 +27,6 @@ else version (WatchOS)\n version (Posix):\n \n extern (C) nothrow @nogc:\n-@system:\n \n version (CRuntime_Glibc)\n {"}, {"sha": "e4a99e686513fdc1f23318ed7d9645a9d56c7836", "filename": "libphobos/libdruntime/core/sys/posix/termios.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -31,7 +31,6 @@ extern (C):\n \n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "af52002b1aafe5e6adb399b5f8d15f70fedfe637", "filename": "libphobos/libdruntime/core/sys/posix/time.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -33,7 +33,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required (defined in core.stdc.time)"}, {"sha": "512d7301e9bb8eb983bcc3a7015c6cb86d2e65fd", "filename": "libphobos/libdruntime/core/sys/posix/ucontext.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -22,7 +22,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n version (OSX)\n     version = Darwin;"}, {"sha": "d1300e1e083cac7bbc25309dd990ceff70076bf7", "filename": "libphobos/libdruntime/core/sys/posix/unistd.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -32,7 +32,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n enum STDIN_FILENO  = 0;\n enum STDOUT_FILENO = 1;"}, {"sha": "fcec7af3fde0ea3dc440123d517f404223fdb402", "filename": "libphobos/libdruntime/core/sys/posix/utime.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -30,7 +30,6 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-@system:\n \n //\n // Required"}, {"sha": "4905351b565c328fec4fa2ae3b1460d57606d41f", "filename": "libphobos/libdruntime/core/sys/windows/aclapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.aclapi;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"advapi32\");"}, {"sha": "08be626ad2d6c1b40e35bbc021412fb2f91fb764", "filename": "libphobos/libdruntime/core/sys/windows/aclui.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclui.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclui.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclui.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.aclui;\n version (Windows):\n-@system:\n pragma(lib, \"aclui\");\n \n import core.sys.windows.w32api;"}, {"sha": "3c5c35f66037fd9e65ec15944a5cc4be1700df01", "filename": "libphobos/libdruntime/core/sys/windows/basetsd.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetsd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetsd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetsd.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.basetsd;\n version (Windows):\n-@system:\n \n /*  This template is used in these modules to declare constant pointer types,\n  *  in order to support both D 1.x and 2.x."}, {"sha": "d90d9f3425a32f8dad444223da513a0882ab0dc0", "filename": "libphobos/libdruntime/core/sys/windows/basetyps.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetyps.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetyps.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetyps.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.basetyps;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef, core.sys.windows.basetsd;\n "}, {"sha": "c724f1c9e1076f2beb44c4272c226a407960cfe3", "filename": "libphobos/libdruntime/core/sys/windows/com.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -1,6 +1,5 @@\n module core.sys.windows.com;\n version (Windows):\n-@system:\n \n pragma(lib,\"uuid\");\n "}, {"sha": "4cc35f467f7d3b708fa8d0b2d1b83f5f900e6d36", "filename": "libphobos/libdruntime/core/sys/windows/comcat.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcomcat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcomcat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcomcat.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.comcat;\n version (Windows):\n-@system:\n \n import core.sys.windows.ole2;\n import core.sys.windows.basetyps, core.sys.windows.cguid, core.sys.windows.objbase, core.sys.windows.unknwn,"}, {"sha": "dabee5672b918c5389777f448817efd989ce5dab", "filename": "libphobos/libdruntime/core/sys/windows/commctrl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommctrl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommctrl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommctrl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.commctrl;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"comctl32\");"}, {"sha": "9be9a9f1f21368ca0810d4248787ea5923f037c1", "filename": "libphobos/libdruntime/core/sys/windows/commdlg.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommdlg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommdlg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommdlg.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.commdlg;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"comdlg32\");"}, {"sha": "df98703520e7b0bceb5c9ed05577842711bc82c2", "filename": "libphobos/libdruntime/core/sys/windows/cpl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcpl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcpl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcpl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.cpl;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "4aff3a9640fb491fcc8560cd5ad428d9760f936f", "filename": "libphobos/libdruntime/core/sys/windows/cplext.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcplext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcplext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcplext.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.cplext;\n version (Windows):\n-@system:\n \n enum : uint {\n     CPLPAGE_MOUSE_BUTTONS      = 1,"}, {"sha": "f9234ac4f893e82da094093eccc0721ac2c1840e", "filename": "libphobos/libdruntime/core/sys/windows/custcntl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcustcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcustcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcustcntl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.custcntl;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "de14bce94eed7ce2751f43199ba00278f926774a", "filename": "libphobos/libdruntime/core/sys/windows/dbghelp.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -11,7 +11,6 @@\n \n module core.sys.windows.dbghelp;\n version (Windows):\n-@system:\n \n import core.sys.windows.winbase /+: FreeLibrary, GetProcAddress, LoadLibraryA+/;\n import core.sys.windows.windef;"}, {"sha": "f75f98bc88245ffd4c838e7d5d3b3209cdc2c1cc", "filename": "libphobos/libdruntime/core/sys/windows/dbghelp_types.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp_types.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp_types.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp_types.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -11,7 +11,6 @@\n \n module core.sys.windows.dbghelp_types;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "41f1c32a419c75e70c1d57375e1613825aec944d", "filename": "libphobos/libdruntime/core/sys/windows/dbt.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbt.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbt.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbt.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.dbt;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "d9b8bec515219cafce6a25e5206d444acea930e2", "filename": "libphobos/libdruntime/core/sys/windows/dde.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdde.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdde.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdde.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.dde;\n version (Windows):\n-@system:\n pragma(lib, \"user32\");\n \n import core.sys.windows.windef;"}, {"sha": "00bad1d300df153c8ff8715d7a65dd03d2048b6f", "filename": "libphobos/libdruntime/core/sys/windows/ddeml.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fddeml.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fddeml.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fddeml.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.ddeml;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"user32\");"}, {"sha": "d21169a7346cebe8d47cfb69be7cb09190fdf611", "filename": "libphobos/libdruntime/core/sys/windows/dhcpcsdk.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdhcpcsdk.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdhcpcsdk.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdhcpcsdk.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.dhcpcsdk;\n version (Windows):\n-@system:\n \n import core.sys.windows.w32api, core.sys.windows.windef;\n "}, {"sha": "52568629f3dd6504a4f2c93d6f8bf41331cdd102", "filename": "libphobos/libdruntime/core/sys/windows/dlgs.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdlgs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdlgs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdlgs.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.dlgs;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef;\n "}, {"sha": "367c1d90d938cdee5d98c261eff7c5dcab49699e", "filename": "libphobos/libdruntime/core/sys/windows/dll.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -14,7 +14,6 @@\n  */\n module core.sys.windows.dll;\n version (Windows):\n-@system:\n \n import core.sys.windows.winbase;\n import core.sys.windows.winnt;"}, {"sha": "4abbea312419868102a599f7d365b6f0f37195b7", "filename": "libphobos/libdruntime/core/sys/windows/docobj.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdocobj.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdocobj.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdocobj.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.docobj;\n version (Windows):\n-@system:\n \n import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.objidl, core.sys.windows.oleidl,\n   core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;"}, {"sha": "42fad9a39ec37814b7018811c1d7a8564aa3e92a", "filename": "libphobos/libdruntime/core/sys/windows/errorrep.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ferrorrep.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ferrorrep.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ferrorrep.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.errorrep;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "5a9ea980446e14094823adbca454822b9015f2ca", "filename": "libphobos/libdruntime/core/sys/windows/exdisp.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fexdisp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fexdisp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fexdisp.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.exdisp;\n version (Windows):\n-@system:\n \n import core.sys.windows.docobj, core.sys.windows.oaidl, core.sys.windows.ocidl;\n import core.sys.windows.basetyps, core.sys.windows.windef, core.sys.windows.wtypes;"}, {"sha": "6973879abf3d2bd1c60d2a8373c3f306e3b01e61", "filename": "libphobos/libdruntime/core/sys/windows/httpext.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fhttpext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fhttpext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fhttpext.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.httpext;\n version (Windows):\n-@system:\n \n /* Comment from MinGW\n        httpext.h - Header for ISAPI extensions."}, {"sha": "399c0b2b1af6608fe0239283454b3fa26fa99d19", "filename": "libphobos/libdruntime/core/sys/windows/imagehlp.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimagehlp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimagehlp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimagehlp.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.imagehlp;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "4ad678c9b4d5f9a049f68d26971b193b54425634", "filename": "libphobos/libdruntime/core/sys/windows/imm.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimm.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.imm;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"imm32\");"}, {"sha": "ab662e418e7da47059a760b2c28c1dbbcdc4fe8d", "filename": "libphobos/libdruntime/core/sys/windows/intshcut.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fintshcut.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fintshcut.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fintshcut.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.intshcut;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "b0a4a0151ab80be62bcda6a8994af4adaab2517a", "filename": "libphobos/libdruntime/core/sys/windows/ipexport.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fipexport.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fipexport.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fipexport.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.ipexport;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef;\n "}, {"sha": "4a8e64cbef018b789a7d201bf61c9c8994cdff3f", "filename": "libphobos/libdruntime/core/sys/windows/iphlpapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiphlpapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiphlpapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiphlpapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.iphlpapi;\n version (Windows):\n-@system:\n \n import core.sys.windows.ipexport, core.sys.windows.iprtrmib, core.sys.windows.iptypes;\n import core.sys.windows.winbase, core.sys.windows.windef;"}, {"sha": "05c31b3dd072419ba8c8dc051eed185d9cf97094", "filename": "libphobos/libdruntime/core/sys/windows/iprtrmib.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiprtrmib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiprtrmib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiprtrmib.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.iprtrmib;\n version (Windows):\n-@system:\n \n import core.sys.windows.ipifcons;\n import core.sys.windows.windef;"}, {"sha": "baaf6ae765b6a774736b6f4fa8336121f4a727b0", "filename": "libphobos/libdruntime/core/sys/windows/iptypes.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiptypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiptypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiptypes.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.iptypes;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef;\n import core.stdc.time;"}, {"sha": "115925c2c061359cca287d82db1dec8373b91165", "filename": "libphobos/libdruntime/core/sys/windows/lm.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flm.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lm;\n version (Windows):\n-@system:\n \n /* removed - now supporting only Win2k up\n version (WindowsVista) {"}, {"sha": "9791ff6e391722b039756d2e0b3f93595f35f51d", "filename": "libphobos/libdruntime/core/sys/windows/lmaccess.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaccess.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaccess.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaccess.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmaccess;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n /**"}, {"sha": "ad0c3ca7b18e64ce8797227cb8aa55e50aef4c8f", "filename": "libphobos/libdruntime/core/sys/windows/lmalert.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmalert.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmalert.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmalert.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmalert;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmcons, core.sys.windows.windef;"}, {"sha": "ee1249e91576ae3fc6fa60f1bbb34d5ded490d23", "filename": "libphobos/libdruntime/core/sys/windows/lmat.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmat.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmat;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmcons, core.sys.windows.windef;"}, {"sha": "8db56f176315353f24b8b44c81066649abb5edff", "filename": "libphobos/libdruntime/core/sys/windows/lmaudit.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaudit.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaudit.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaudit.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n // COMMENT: This file may be deprecated.\n module core.sys.windows.lmaudit;\n version (Windows):\n-@system:\n \n import core.sys.windows.lmcons, core.sys.windows.windef;\n "}, {"sha": "16cc661139426a1d21c4adc56b264bb9d16942b5", "filename": "libphobos/libdruntime/core/sys/windows/lmbrowsr.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmbrowsr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmbrowsr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmbrowsr.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmbrowsr;\n version (Windows):\n-@system:\n \n import core.sys.windows.lmcons, core.sys.windows.windef;\n "}, {"sha": "55460e16bdfd19dd9eef8cf3e5c28d1c4c247eee", "filename": "libphobos/libdruntime/core/sys/windows/lmchdev.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmchdev.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmchdev.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmchdev.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmchdev;\n version (Windows):\n-@system:\n \n // COMMENT: This file might be deprecated.\n "}, {"sha": "6652a5214487cb06c4b7d165af4fe2e356ccf891", "filename": "libphobos/libdruntime/core/sys/windows/lmconfig.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmconfig.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmconfig;\n version (Windows):\n-@system:\n \n // All functions in this file are deprecated!\n "}, {"sha": "838748a138791c089ac88129070c57c435a4396c", "filename": "libphobos/libdruntime/core/sys/windows/lmcons.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmcons.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmcons.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmcons.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmcons;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "23f5e59cb93f106de847deac03c4d1ca98e0b0b8", "filename": "libphobos/libdruntime/core/sys/windows/lmerr.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerr.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmerr;\n version (Windows):\n-@system:\n \n import core.sys.windows.winerror;\n "}, {"sha": "effe73a9ae5159fed10e367509ea702baa17f4d5", "filename": "libphobos/libdruntime/core/sys/windows/lmerrlog.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerrlog.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerrlog.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerrlog.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmerrlog;\n version (Windows):\n-@system:\n \n // COMMENT: This appears to be only for Win16. All functions are deprecated.\n "}, {"sha": "a3abd60542268857be5dee19e3ebf687c4721334", "filename": "libphobos/libdruntime/core/sys/windows/lmmsg.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmmsg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmmsg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmmsg.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmmsg;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmcons, core.sys.windows.windef, core.sys.windows.w32api;"}, {"sha": "8c90df73f2a30c90453c3cf8b5b6aa741c6d7e27", "filename": "libphobos/libdruntime/core/sys/windows/lmremutl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmremutl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmremutl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmremutl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmremutl;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n // D Conversion Note: DESC_CHAR is defined as TCHAR."}, {"sha": "1563a5e2902ad13b0471cc20021e263c2adc7e18", "filename": "libphobos/libdruntime/core/sys/windows/lmrepl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmrepl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmrepl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmrepl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmrepl;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmcons, core.sys.windows.windef;"}, {"sha": "5a550bca80d8eab0efa1c73a6dbd16ef3a59ee51", "filename": "libphobos/libdruntime/core/sys/windows/lmserver.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmserver.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmserver.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmserver.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmserver;\n version (Windows):\n-@system:\n \n import core.sys.windows.winsvc;\n import core.sys.windows.lmcons, core.sys.windows.windef;"}, {"sha": "bd8eecb46dd867de92b09d68919816ab372fff95", "filename": "libphobos/libdruntime/core/sys/windows/lmshare.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmshare.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmshare.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmshare.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmshare;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmcons;"}, {"sha": "a8f4f7620810a0bb2116b3eb70e48ea86912fffc", "filename": "libphobos/libdruntime/core/sys/windows/lmsname.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsname.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsname.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsname.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmsname;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef;\n "}, {"sha": "e83808b12a728b56bebd77d2b0a39bc26126b879", "filename": "libphobos/libdruntime/core/sys/windows/lmstats.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmstats.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmstats.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmstats.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmstats;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmcons, core.sys.windows.windef;"}, {"sha": "ddea61c7d0b78e6f334eb0051fa7cb8d6bc93ccb", "filename": "libphobos/libdruntime/core/sys/windows/lmsvc.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsvc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsvc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsvc.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmsvc;\n version (Windows):\n-@system:\n \n // FIXME: Is this file deprecated? All of the functions are only for Win16.\n /**"}, {"sha": "a48d72e0050dd174a93a5c50a83a888ede481b40", "filename": "libphobos/libdruntime/core/sys/windows/lmuse.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmuse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmuse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmuse.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmuse;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmuseflg;"}, {"sha": "29ddca76d89bec04269c338691f714d63001dace", "filename": "libphobos/libdruntime/core/sys/windows/lmwksta.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmwksta.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmwksta.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmwksta.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lmwksta;\n version (Windows):\n-@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmuseflg;"}, {"sha": "6c3bd0084fe40476cf43feb334aee7503e0600b6", "filename": "libphobos/libdruntime/core/sys/windows/lzexpand.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flzexpand.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flzexpand.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flzexpand.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.lzexpand;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"lz32\");"}, {"sha": "8f8eea1e12bc998d6ff49cc42b6c5e2b9f3b9a74", "filename": "libphobos/libdruntime/core/sys/windows/mapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.mapi;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef;\n "}, {"sha": "08410f5834c77d56f3d931b198f4c5565fb0db90", "filename": "libphobos/libdruntime/core/sys/windows/mciavi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmciavi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmciavi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmciavi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.mciavi;\n version (Windows):\n-@system:\n \n import core.sys.windows.mmsystem;\n "}, {"sha": "5c6ac24a315cdeeeed4c3164a206329ca5e89bc9", "filename": "libphobos/libdruntime/core/sys/windows/mcx.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmcx.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmcx.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmcx.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.mcx;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef;\n "}, {"sha": "8f84eea54e88fc88340b7754eac0f58632b07405", "filename": "libphobos/libdruntime/core/sys/windows/mgmtapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmgmtapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmgmtapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmgmtapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.mgmtapi;\n version (Windows):\n-@system:\n \n import core.sys.windows.snmp;\n import core.sys.windows.windef;"}, {"sha": "7e7c34ba4f019471b219c14990720851eb5edb9f", "filename": "libphobos/libdruntime/core/sys/windows/mmsystem.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmmsystem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmmsystem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmmsystem.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.mmsystem;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"winmm\");"}, {"sha": "645e40d4ecb2c2ee5f128ab04359e3c3fd45d073", "filename": "libphobos/libdruntime/core/sys/windows/msacm.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmsacm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmsacm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmsacm.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.msacm;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "d20c4bbb3047b0208ad2d8dbc4b6dbc95ede53fd", "filename": "libphobos/libdruntime/core/sys/windows/mshtml.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmshtml.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmshtml.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmshtml.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.mshtml;\n version (Windows):\n-@system:\n \n import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.unknwn,\n   core.sys.windows.windef, core.sys.windows.wtypes;"}, {"sha": "d8beee421a1ed97e88791196c1a3d389b85ec674", "filename": "libphobos/libdruntime/core/sys/windows/mswsock.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmswsock.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmswsock.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmswsock.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.mswsock;\n version (Windows):\n-@system:\n \n import core.sys.windows.winbase, core.sys.windows.windef;\n import core.sys.windows.basetyps, core.sys.windows.w32api;"}, {"sha": "cfa57d609e3dfd484d4fb9469535865ee328ac92", "filename": "libphobos/libdruntime/core/sys/windows/nb30.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnb30.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnb30.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnb30.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.nb30;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef;\n "}, {"sha": "3efca620e17c088d21bddba4d963f9259f0bc245", "filename": "libphobos/libdruntime/core/sys/windows/nddeapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnddeapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnddeapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnddeapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.nddeapi;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "bac6526849d666d1405417b5ff9e68956e450890", "filename": "libphobos/libdruntime/core/sys/windows/nspapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnspapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnspapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnspapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.nspapi;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "a0213dc56f07743df96f1263a4b48887b2558af2", "filename": "libphobos/libdruntime/core/sys/windows/ntdef.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdef.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdef.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdef.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.ntdef;\n version (Windows):\n-@system:\n \n import core.sys.windows.basetsd, core.sys.windows.subauth, core.sys.windows.windef, core.sys.windows.winnt;\n "}, {"sha": "28d560c537b31423340917879a9604a482c70475", "filename": "libphobos/libdruntime/core/sys/windows/ntdll.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdll.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.ntdll;\n version (Windows):\n-@system:\n \n import core.sys.windows.w32api;\n "}, {"sha": "8f9abfe45dd6792a094c2cf74817b17ef5d6896c", "filename": "libphobos/libdruntime/core/sys/windows/ntldap.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntldap.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntldap.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntldap.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.ntldap;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "fbc6b7f6b997921ddd5a46f7508912757abf5725", "filename": "libphobos/libdruntime/core/sys/windows/ntsecapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.ntsecapi;\n version (Windows):\n-@system:\n pragma(lib, \"advapi32\");\n \n version (ANSI) {} else version = Unicode;"}, {"sha": "56803b043c4ba9e9ac2ddc3b5fa212fe9360c532", "filename": "libphobos/libdruntime/core/sys/windows/ntsecpkg.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecpkg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecpkg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecpkg.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.ntsecpkg;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef, core.sys.windows.ntsecapi, core.sys.windows.security, core.sys.windows.ntdef, core.sys.windows.sspi;\n import core.sys.windows.basetyps : GUID;"}, {"sha": "cd11061d0bb21f48f34b0fc7a26631c960f7117a", "filename": "libphobos/libdruntime/core/sys/windows/oaidl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foaidl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foaidl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foaidl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.oaidl;\n version (Windows):\n-@system:\n \n import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n "}, {"sha": "350c2b883961ff858971ed82ce2d75e8ed726bd8", "filename": "libphobos/libdruntime/core/sys/windows/objbase.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjbase.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjbase.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjbase.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.objbase;\n version (Windows):\n-@system:\n nothrow:\n pragma(lib, \"ole32\");\n "}, {"sha": "076e02e608ce5241e70d3e8e3b185c77ab40aa42", "filename": "libphobos/libdruntime/core/sys/windows/objfwd.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjfwd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjfwd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjfwd.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.objfwd;\n version (Windows):\n-@system:\n \n import core.sys.windows.objidl;\n "}, {"sha": "aa51840a51cbc3b991d584cc0d4ae6682dd9c979", "filename": "libphobos/libdruntime/core/sys/windows/objidl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjidl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjidl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjidl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -12,7 +12,6 @@\n // # do we need the proxies that are defined in this file?\n module core.sys.windows.objidl;\n version (Windows):\n-@system:\n \n import core.sys.windows.unknwn;\n import core.sys.windows.objfwd;"}, {"sha": "f7dc445cb0544734db0efc963c68a25fac18f476", "filename": "libphobos/libdruntime/core/sys/windows/objsafe.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjsafe.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjsafe.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjsafe.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.objsafe;\n version (Windows):\n-@system:\n \n import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef;\n "}, {"sha": "9bacbf0f34fb0b227bd60c951a5fc530f9b707cb", "filename": "libphobos/libdruntime/core/sys/windows/ocidl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Focidl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Focidl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Focidl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -10,7 +10,6 @@\n  */\n module core.sys.windows.ocidl;\n version (Windows):\n-@system:\n \n import core.sys.windows.ole2, core.sys.windows.oleidl, core.sys.windows.oaidl, core.sys.windows.objfwd,\n   core.sys.windows.windef, core.sys.windows.wtypes;"}, {"sha": "ebacb5889fffe0d2ef02e24da2860ac24602d957", "filename": "libphobos/libdruntime/core/sys/windows/odbcinst.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fodbcinst.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fodbcinst.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fodbcinst.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.odbcinst;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "c29ec5047ff596ce02fb17bfd476b0b767af371b", "filename": "libphobos/libdruntime/core/sys/windows/ole.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.ole;\n version (Windows):\n-@system:\n pragma(lib, \"ole32\");\n \n import core.sys.windows.windef, core.sys.windows.wingdi, core.sys.windows.uuid;"}, {"sha": "3fef058411f8b17d2ec0151a561b976667a98514", "filename": "libphobos/libdruntime/core/sys/windows/ole2.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole2.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.ole2;\n version (Windows):\n-@system:\n pragma(lib, \"ole32\");\n \n public import core.sys.windows.basetyps, core.sys.windows.objbase, core.sys.windows.oleauto, core.sys.windows.olectlid,"}, {"sha": "b19855d9af078042fff14fe29a267fff715adf19", "filename": "libphobos/libdruntime/core/sys/windows/oleacc.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleacc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleacc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleacc.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.oleacc;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"oleacc\");"}, {"sha": "188813609ff683a301989ba122619978a090b7e5", "filename": "libphobos/libdruntime/core/sys/windows/oleauto.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleauto.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleauto.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleauto.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.oleauto;\n version (Windows):\n-@system:\n pragma(lib, \"oleaut32\");\n \n import core.sys.windows.oaidl;"}, {"sha": "df8266b142d3e6a0b43bda7c69fff24239894a9c", "filename": "libphobos/libdruntime/core/sys/windows/olectl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.olectl;\n version (Windows):\n-@system:\n \n // In conversion from MinGW, the following was deleted:\n //#define FONTSIZE(n) {n##0000, 0}"}, {"sha": "f810f6c13dae3af639aeba63550f64f458794db9", "filename": "libphobos/libdruntime/core/sys/windows/oledlg.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foledlg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foledlg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foledlg.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -7,7 +7,6 @@\n  * Source: $(DRUNTIMESRC core/sys/windows/_oledlg.d)\n  */\n module core.sys.windows.oledlg;\n-@system:\n version (Windows):\n \n version (ANSI) {} else version = Unicode;"}, {"sha": "17e1d647b3201228f02533c095e0ffe2f18e4ff5", "filename": "libphobos/libdruntime/core/sys/windows/oleidl.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleidl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleidl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleidl.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.oleidl;\n version (Windows):\n-@system:\n \n // DAC: This is defined in ocidl !!\n // what is it doing in here?"}, {"sha": "268988484dd8772eefd2aa8d2c05484dd855d7de", "filename": "libphobos/libdruntime/core/sys/windows/pbt.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpbt.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpbt.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpbt.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.pbt;\n version (Windows):\n-@system:\n \n import core.sys.windows.windef;\n "}, {"sha": "be4d0aa2d2087b9b97fef3ece2770b93e408b74f", "filename": "libphobos/libdruntime/core/sys/windows/powrprof.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpowrprof.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpowrprof.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpowrprof.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.powrprof;\n version (Windows):\n-@system:\n pragma(lib, \"powrprof\");\n \n import core.sys.windows.windef;"}, {"sha": "92596b5b5486b600b66537fa8c82bbde23fc5326", "filename": "libphobos/libdruntime/core/sys/windows/prsht.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fprsht.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fprsht.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fprsht.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.prsht;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"comctl32\");"}, {"sha": "968ce6c45306c9697396c35c76a1e8876e863119", "filename": "libphobos/libdruntime/core/sys/windows/psapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpsapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpsapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpsapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -13,7 +13,6 @@\n \n module core.sys.windows.psapi;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "2fc640468b9fa7a6b0ee3946bf751ddb8c45e9a4", "filename": "libphobos/libdruntime/core/sys/windows/rapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.rapi;\n version (Windows):\n-@system:\n \n /* Comment from MinGW\n    NOTE: This strictly does not belong in the Win32 API since it's"}, {"sha": "cb69686e9bc8fb0dd9f7d4076357c608a13486eb", "filename": "libphobos/libdruntime/core/sys/windows/ras.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fras.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fras.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fras.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.ras;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"rasapi32\");"}, {"sha": "a980d270f896c6af50637035da92b56e3f3f19c8", "filename": "libphobos/libdruntime/core/sys/windows/rasdlg.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frasdlg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frasdlg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frasdlg.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.rasdlg;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "48a275625fcd57f039401b362fcbf5e3f4efb716", "filename": "libphobos/libdruntime/core/sys/windows/raserror.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fraserror.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fraserror.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fraserror.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.raserror;\n version (Windows):\n-@system:\n \n enum {\n     SUCCESS = 0,"}, {"sha": "5244ca4115788fb611f7830b0f9d3e6224de50e2", "filename": "libphobos/libdruntime/core/sys/windows/rassapi.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frassapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frassapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frassapi.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.rassapi;\n version (Windows):\n-@system:\n \n import core.sys.windows.lmcons, core.sys.windows.windef;\n "}, {"sha": "e1fb1cabdf16a2627e3f2e0a42a3126d5bd915ac", "filename": "libphobos/libdruntime/core/sys/windows/reason.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Freason.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Freason.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Freason.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -9,7 +9,6 @@\n  */\n module core.sys.windows.reason;\n version (Windows):\n-@system:\n \n import core.sys.windows.w32api, core.sys.windows.windef;\n "}, {"sha": "f8851fa720b8529006aec4b36f5c1aeb4ff3315f", "filename": "libphobos/libdruntime/core/sys/windows/regstr.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fregstr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fregstr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fregstr.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.regstr;\n version (Windows):\n-@system:\n \n // TODO: fix possible conflict with shloj. Sort out NEC_98 issue.\n "}, {"sha": "0f56fef09796b16b320a4bb3c5a4e08054910e6f", "filename": "libphobos/libdruntime/core/sys/windows/richedit.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichedit.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichedit.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichedit.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.richedit;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "01518189df001f8dff425b32243078ab2f68bd9f", "filename": "libphobos/libdruntime/core/sys/windows/richole.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichole.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichole.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichole.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.richole;\n version (Windows):\n-@system:\n \n import core.sys.windows.objfwd, core.sys.windows.objidl, core.sys.windows.ole2, core.sys.windows.unknwn,\n   core.sys.windows.windef;"}, {"sha": "b432bc7c6811d3e75a895972104ac1c7e623f4ed", "filename": "libphobos/libdruntime/core/sys/windows/rpc.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpc.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.rpc;\n version (Windows):\n-@system:\n \n /* Moved to rpcdecp (duplicate definition).\n     typedef void *I_RPC_HANDLE;"}, {"sha": "4f3f3cc1f66c3db0289eb619e0bed8ee87318f9e", "filename": "libphobos/libdruntime/core/sys/windows/rpcdce.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.rpcdce;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"Rpcrt4\");"}, {"sha": "08348c062353784bf29dc60f4c48f55fd175c4ca", "filename": "libphobos/libdruntime/core/sys/windows/rpcdce2.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ebe3e350fde90fe49ab41ce3b92a811bb6370/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce2.d?ref=7e7ebe3e350fde90fe49ab41ce3b92a811bb6370", "patch": "@@ -8,7 +8,6 @@\n  */\n module core.sys.windows.rpcdce2;\n version (Windows):\n-@system:\n \n version (ANSI) {} else version = Unicode;\n "}]}