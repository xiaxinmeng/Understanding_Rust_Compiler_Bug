{"sha": "6da37857031422ddcc84635905257e491210e665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhMzc4NTcwMzE0MjJkZGNjODQ2MzU5MDUyNTdlNDkxMjEwZTY2NQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2017-05-16T09:23:42Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-05-16T09:23:42Z"}, "message": "Committed on behalf of Matthew Wahab\n\ngcc/\n2017-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/arm/arm_neon.h (vadd_f16): Use standard arithmetic\n\toperations in fast-math mode.\n\t(vaddq_f16): Likewise.\n\t(vmul_f16): Likewise.\n\t(vmulq_f16): Likewise.\n\t(vsub_f16): Likewise.\n\t(vsubq_f16): Likewise.\n\t* config/arm/neon.md (add<mode>3): New.\n\t(sub<mode>3): New.\n\t(fma:<VH:mode>3): New.  Also remove outdated comment.\n\t(mul<mode>3): New.\n\ntestsuite/\n2017-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/arm/armv8_2-fp16-arith-1.c: Expand comment.  Update\n\texpected output of vadd, vsub and vmul instructions.\n\t* gcc.target/arm/armv8_2-fp16-arith-2.c: New.\n\t* gcc.target/arm/armv8_2-fp16-neon-2.c: New.\n\t* gcc.target/arm/armv8_2-fp16-neon-3.c: New.\n\nFrom-SVN: r248090", "tree": {"sha": "9ee517f11a3662d067306ca25b52c7f0ec3114b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ee517f11a3662d067306ca25b52c7f0ec3114b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6da37857031422ddcc84635905257e491210e665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da37857031422ddcc84635905257e491210e665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da37857031422ddcc84635905257e491210e665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da37857031422ddcc84635905257e491210e665/comments", "author": null, "committer": null, "parents": [{"sha": "d8c9bc362740560b8d8fbfd4d464d2cbde7591f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c9bc362740560b8d8fbfd4d464d2cbde7591f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c9bc362740560b8d8fbfd4d464d2cbde7591f2"}], "stats": {"total": 824, "additions": 818, "deletions": 6}, "files": [{"sha": "1ce36a7425ff14edd93b5a1e5156620e8a4bc231", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da37857031422ddcc84635905257e491210e665/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da37857031422ddcc84635905257e491210e665/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6da37857031422ddcc84635905257e491210e665", "patch": "@@ -1,3 +1,17 @@\n+2017-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/arm/arm_neon.h (vadd_f16): Use standard arithmetic\n+\toperations in fast-math mode.\n+\t(vaddq_f16): Likewise.\n+\t(vmul_f16): Likewise.\n+\t(vmulq_f16): Likewise.\n+\t(vsub_f16): Likewise.\n+\t(vsubq_f16): Likewise.\n+\t* config/arm/neon.md (add<mode>3): New.\n+\t(sub<mode>3): New.\n+\t(fma:<VH:mode>3): New.  Also remove outdated comment.\n+\t(mul<mode>3): New.\n+\n 2017-05-16  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/79849."}, {"sha": "65f36e2c91ee0c2950954938f4818f28d7e7e12d", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da37857031422ddcc84635905257e491210e665/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da37857031422ddcc84635905257e491210e665/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=6da37857031422ddcc84635905257e491210e665", "patch": "@@ -17069,14 +17069,22 @@ __extension__ extern __inline float16x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vadd_f16 (float16x4_t __a, float16x4_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a + __b;\n+#else\n   return __builtin_neon_vaddv4hf (__a, __b);\n+#endif\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vaddq_f16 (float16x8_t __a, float16x8_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a + __b;\n+#else\n   return __builtin_neon_vaddv8hf (__a, __b);\n+#endif\n }\n \n __extension__ extern __inline uint16x4_t\n@@ -17587,7 +17595,11 @@ __extension__ extern __inline float16x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmul_f16 (float16x4_t __a, float16x4_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a * __b;\n+#else\n   return __builtin_neon_vmulfv4hf (__a, __b);\n+#endif\n }\n \n __extension__ extern __inline float16x4_t\n@@ -17608,7 +17620,11 @@ __extension__ extern __inline float16x8_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vmulq_f16 (float16x8_t __a, float16x8_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a * __b;\n+#else\n   return __builtin_neon_vmulfv8hf (__a, __b);\n+#endif\n }\n \n __extension__ extern __inline float16x8_t\n@@ -17804,14 +17820,22 @@ __extension__ extern __inline float16x4_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vsub_f16 (float16x4_t __a, float16x4_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a - __b;\n+#else\n   return __builtin_neon_vsubv4hf (__a, __b);\n+#endif\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n vsubq_f16 (float16x8_t __a, float16x8_t __b)\n {\n+#ifdef __FAST_MATH__\n+  return __a - __b;\n+#else\n   return __builtin_neon_vsubv8hf (__a, __b);\n+#endif\n }\n \n #endif /* __ARM_FEATURE_VECTOR_FP16_ARITHMETIC.  */"}, {"sha": "0ce3fe415e6a691004d870c6f7889ea7490f8bfd", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da37857031422ddcc84635905257e491210e665/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da37857031422ddcc84635905257e491210e665/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=6da37857031422ddcc84635905257e491210e665", "patch": "@@ -505,6 +505,23 @@\n                     (const_string \"neon_add<q>\")))]\n )\n \n+;; As with SFmode, full support for HFmode vector arithmetic is only available\n+;; when flag-unsafe-math-optimizations is enabled.\n+\n+(define_insn \"add<mode>3\"\n+  [(set\n+    (match_operand:VH 0 \"s_register_operand\" \"=w\")\n+    (plus:VH\n+     (match_operand:VH 1 \"s_register_operand\" \"w\")\n+     (match_operand:VH 2 \"s_register_operand\" \"w\")))]\n+ \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n+ \"vadd.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+ [(set (attr \"type\")\n+   (if_then_else (match_test \"<Is_float_mode>\")\n+    (const_string \"neon_fp_addsub_s<q>\")\n+    (const_string \"neon_add<q>\")))]\n+)\n+\n (define_insn \"add<mode>3_fp16\"\n   [(set\n     (match_operand:VH 0 \"s_register_operand\" \"=w\")\n@@ -557,6 +574,17 @@\n                     (const_string \"neon_sub<q>\")))]\n )\n \n+(define_insn \"sub<mode>3\"\n+ [(set\n+   (match_operand:VH 0 \"s_register_operand\" \"=w\")\n+   (minus:VH\n+    (match_operand:VH 1 \"s_register_operand\" \"w\")\n+    (match_operand:VH 2 \"s_register_operand\" \"w\")))]\n+ \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n+ \"vsub.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+ [(set_attr \"type\" \"neon_sub<q>\")]\n+)\n+\n (define_insn \"sub<mode>3_fp16\"\n  [(set\n    (match_operand:VH 0 \"s_register_operand\" \"=w\")\n@@ -664,8 +692,17 @@\n   [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n )\n \n-;; There is limited support for unsafe-math optimizations using the NEON FP16\n-;; arithmetic instructions, so only the intrinsic is currently supported.\n+(define_insn \"fma<VH:mode>4\"\n+ [(set (match_operand:VH 0 \"register_operand\" \"=w\")\n+   (fma:VH\n+    (match_operand:VH 1 \"register_operand\" \"w\")\n+    (match_operand:VH 2 \"register_operand\" \"w\")\n+    (match_operand:VH 3 \"register_operand\" \"0\")))]\n+ \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n+ \"vfma.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+ [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n+)\n+\n (define_insn \"fma<VH:mode>4_intrinsic\"\n  [(set (match_operand:VH 0 \"register_operand\" \"=w\")\n    (fma:VH\n@@ -2175,6 +2212,17 @@\n                     (const_string \"neon_mul_<V_elem_ch><q>\")))]\n )\n \n+(define_insn \"mul<mode>3\"\n+ [(set\n+   (match_operand:VH 0 \"s_register_operand\" \"=w\")\n+   (mult:VH\n+    (match_operand:VH 1 \"s_register_operand\" \"w\")\n+    (match_operand:VH 2 \"s_register_operand\" \"w\")))]\n+  \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n+  \"vmul.f16\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+ [(set_attr \"type\" \"neon_mul_<VH_elem_ch><q>\")]\n+)\n+\n (define_insn \"neon_vmulf<mode>\"\n  [(set\n    (match_operand:VH 0 \"s_register_operand\" \"=w\")"}, {"sha": "6610d561b2d94a34027407a085fe4983f66f5cfd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6da37857031422ddcc84635905257e491210e665", "patch": "@@ -1,3 +1,11 @@\n+2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/arm/armv8_2-fp16-arith-1.c: Expand comment.  Update\n+\texpected output of vadd, vsub and vmul instructions.\n+\t* gcc.target/arm/armv8_2-fp16-arith-2.c: New.\n+\t* gcc.target/arm/armv8_2-fp16-neon-2.c: New.\n+\t* gcc.target/arm/armv8_2-fp16-neon-3.c: New.\n+\n 2017-05-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/80727"}, {"sha": "921d26e2ed4637103160e78bcaefa681d42e1e0a", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-arith-1.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-1.c?ref=6da37857031422ddcc84635905257e491210e665", "patch": "@@ -3,7 +3,8 @@\n /* { dg-options \"-O2 -ffast-math\" }  */\n /* { dg-add-options arm_v8_2a_fp16_neon }  */\n \n-/* Test instructions generated for half-precision arithmetic.  */\n+/* Test instructions generated for half-precision arithmetic with\n+   unsafe-math-optimizations enabled.  */\n \n typedef __fp16 float16_t;\n typedef __simd64_float16_t float16x4_t;\n@@ -90,9 +91,18 @@ TEST_CMP (greaterthanqual, >=, int16x8_t, float16x8_t)\n /* { dg-final { scan-assembler-times {vneg\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n /* { dg-final { scan-assembler-times {vabs\\.f16\\ts[0-9]+, s[0-9]+} 2 } }  */\n \n-/* { dg-final { scan-assembler-times {vadd\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n-/* { dg-final { scan-assembler-times {vsub\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n-/* { dg-final { scan-assembler-times {vmul\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n+/* { dg-final { scan-assembler-times {vadd\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+/* { dg-final { scan-assembler-times {vadd\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }  */\n+/* { dg-final { scan-assembler-times {vadd\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+/* { dg-final { scan-assembler-times {vsub\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+/* { dg-final { scan-assembler-times {vsub\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }  */\n+/* { dg-final { scan-assembler-times {vsub\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }  */\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n /* { dg-final { scan-assembler-times {vdiv\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n /* { dg-final { scan-assembler-times {vcmp\\.f32\\ts[0-9]+, s[0-9]+} 26 } }  */\n /* { dg-final { scan-assembler-times {vcmpe\\.f32\\ts[0-9]+, s[0-9]+} 52 } }  */"}, {"sha": "24d0528540d58a43b896dd88c64c23b823553e96", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-arith-2.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-2.c?ref=6da37857031422ddcc84635905257e491210e665", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_ok }  */\n+/* { dg-options \"-O2 -fno-fast-math\" }  */\n+/* { dg-add-options arm_v8_2a_fp16_neon }  */\n+\n+/* Test instructions generated for half-precision arithmetic without\n+   unsafe-math-optimizations.  */\n+\n+typedef __fp16 float16_t;\n+typedef __simd64_float16_t float16x4_t;\n+typedef __simd128_float16_t float16x8_t;\n+\n+typedef short int16x4_t __attribute__ ((vector_size (8)));\n+typedef short int int16x8_t  __attribute__ ((vector_size (16)));\n+\n+float16_t\n+fp16_abs (float16_t a)\n+{\n+  return (a < 0) ? -a : a;\n+}\n+\n+#define TEST_UNOP(NAME, OPERATOR, TY)\t\t\\\n+  TY test_##NAME##_##TY (TY a)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return OPERATOR (a);\t\t\t\\\n+  }\n+\n+#define TEST_BINOP(NAME, OPERATOR, TY)\t\t\\\n+  TY test_##NAME##_##TY (TY a, TY b)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return a OPERATOR b;\t\t\t\\\n+  }\n+\n+#define TEST_CMP(NAME, OPERATOR, RTY, TY)\t\\\n+  RTY test_##NAME##_##TY (TY a, TY b)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return a OPERATOR b;\t\t\t\\\n+  }\n+\n+/* Scalars.  */\n+\n+TEST_UNOP (neg, -, float16_t)\n+TEST_UNOP (abs, fp16_abs, float16_t)\n+\n+TEST_BINOP (add, +, float16_t)\n+TEST_BINOP (sub, -, float16_t)\n+TEST_BINOP (mult, *, float16_t)\n+TEST_BINOP (div, /, float16_t)\n+\n+TEST_CMP (equal, ==, int, float16_t)\n+TEST_CMP (unequal, !=, int, float16_t)\n+TEST_CMP (lessthan, <, int, float16_t)\n+TEST_CMP (greaterthan, >, int, float16_t)\n+TEST_CMP (lessthanequal, <=, int, float16_t)\n+TEST_CMP (greaterthanqual, >=, int, float16_t)\n+\n+/* Vectors of size 4.  */\n+\n+TEST_UNOP (neg, -, float16x4_t)\n+\n+TEST_BINOP (add, +, float16x4_t)\n+TEST_BINOP (sub, -, float16x4_t)\n+TEST_BINOP (mult, *, float16x4_t)\n+TEST_BINOP (div, /, float16x4_t)\n+\n+TEST_CMP (equal, ==, int16x4_t, float16x4_t)\n+TEST_CMP (unequal, !=, int16x4_t, float16x4_t)\n+TEST_CMP (lessthan, <, int16x4_t, float16x4_t)\n+TEST_CMP (greaterthan, >, int16x4_t, float16x4_t)\n+TEST_CMP (lessthanequal, <=, int16x4_t, float16x4_t)\n+TEST_CMP (greaterthanqual, >=, int16x4_t, float16x4_t)\n+\n+/* Vectors of size 8.  */\n+\n+TEST_UNOP (neg, -, float16x8_t)\n+\n+TEST_BINOP (add, +, float16x8_t)\n+TEST_BINOP (sub, -, float16x8_t)\n+TEST_BINOP (mult, *, float16x8_t)\n+TEST_BINOP (div, /, float16x8_t)\n+\n+TEST_CMP (equal, ==, int16x8_t, float16x8_t)\n+TEST_CMP (unequal, !=, int16x8_t, float16x8_t)\n+TEST_CMP (lessthan, <, int16x8_t, float16x8_t)\n+TEST_CMP (greaterthan, >, int16x8_t, float16x8_t)\n+TEST_CMP (lessthanequal, <=, int16x8_t, float16x8_t)\n+TEST_CMP (greaterthanqual, >=, int16x8_t, float16x8_t)\n+\n+/* { dg-final { scan-assembler-times {vneg\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+/* { dg-final { scan-assembler-times {vneg\\.f16\\td[0-9]+, d[0-9]+} 1 } }  */\n+/* { dg-final { scan-assembler-times {vneg\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+/* { dg-final { scan-assembler-times {vadd\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n+/* { dg-final { scan-assembler-times {vsub\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n+/* { dg-final { scan-assembler-times {vdiv\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 13 } }  */\n+/* { dg-final { scan-assembler-times {vcmp\\.f32\\ts[0-9]+, s[0-9]+} 26 } }  */\n+\n+/* { dg-final { scan-assembler-times {vcmpe\\.f32\\ts[0-9]+, s[0-9]+} 52 } }  */\n+/* { dg-final { scan-assembler-times {vcmpe\\.f32\\ts[0-9]+, #0} 2 } }  */\n+\n+/* { dg-final { scan-assembler-not {vabs\\.f16} } }  */\n+\n+/* { dg-final { scan-assembler-not {vadd\\.f32} } }  */\n+/* { dg-final { scan-assembler-not {vsub\\.f32} } }  */\n+/* { dg-final { scan-assembler-not {vmul\\.f32} } }  */\n+/* { dg-final { scan-assembler-not {vdiv\\.f32} } }  */\n+/* { dg-final { scan-assembler-not {vcmp\\.f16} } }  */\n+/* { dg-final { scan-assembler-not {vcmpe\\.f16} } }  */"}, {"sha": "6cd93545b467d431bb7ad701b46ebe9c06da7d6e", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-neon-2.c", "status": "added", "additions": 491, "deletions": 0, "changes": 491, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-2.c?ref=6da37857031422ddcc84635905257e491210e665", "patch": "@@ -0,0 +1,491 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_ok }  */\n+/* { dg-options \"-O2 -ffast-math\" }  */\n+/* { dg-add-options arm_v8_2a_fp16_neon }  */\n+\n+/* Test instructions generated for the FP16 vector intrinsics with\n+   -ffast-math */\n+\n+#include <arm_neon.h>\n+\n+#define MSTRCAT(L, str)\tL##str\n+\n+#define UNOP_TEST(insn)\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a);\t\t\\\n+  }\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a);\t\t\\\n+  }\n+\n+#define BINOP_TEST(insn)\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a, float16x4_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a, b);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a, float16x8_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a, b);\t\t\t\\\n+  }\n+\n+#define BINOP_LANE_TEST(insn, I)\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_lane, _16x4) (float16x4_t a, float16x4_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _lane_f16) (a, b, I);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_lane, _16x8) (float16x8_t a, float16x4_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_lane_f16) (a, b, I);\t\t\t\\\n+  }\n+\n+#define BINOP_LANEQ_TEST(insn, I)\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_laneq, _16x4) (float16x4_t a, float16x8_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _laneq_f16) (a, b, I);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_laneq, _16x8) (float16x8_t a, float16x8_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_laneq_f16) (a, b, I);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+#define BINOP_N_TEST(insn)\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_n, _16x4) (float16x4_t a, float16_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _n_f16) (a, b);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_n, _16x8) (float16x8_t a, float16_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_n_f16) (a, b);\t\t\t\\\n+  }\n+\n+#define TERNOP_TEST(insn)\t\t\t\t\t\t\\\n+  float16_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16) (float16_t a, float16_t b, float16_t c)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, h_f16) (a, b, c);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a, float16x4_t b,\t\t\\\n+\t\t\t       float16x4_t c)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a, b, c);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a, float16x8_t b,\t\t\\\n+\t\t\t       float16x8_t c)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a, b, c);\t\t\t\t\\\n+  }\n+\n+#define VCMP1_TEST(insn)\t\t\t\\\n+  uint16x4_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a);\t\t\\\n+  }\t\t\t\t\t\t\\\n+  uint16x8_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a);\t\t\\\n+  }\n+\n+#define VCMP2_TEST(insn)\t\t\t\t\t\\\n+  uint16x4_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a, float16x4_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a, b);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  uint16x8_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a, float16x8_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a, b);\t\t\t\\\n+  }\n+\n+#define VCVT_TEST(insn, TY, TO, FR)\t\t\t\\\n+  MSTRCAT (TO, 16x4_t)\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, TY) (MSTRCAT (FR, 16x4_t) a)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, TY) (a);\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  MSTRCAT (TO, 16x8_t)\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_q, TY) (MSTRCAT (FR, 16x8_t) a)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q##TY) (a);\t\t\t\\\n+  }\n+\n+#define VCVT_N_TEST(insn, TY, TO, FR)\t\t\t\\\n+  MSTRCAT (TO, 16x4_t)\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_n, TY) (MSTRCAT (FR, 16x4_t) a)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _n##TY) (a, 1);\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  MSTRCAT (TO, 16x8_t)\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_n_q, TY) (MSTRCAT (FR, 16x8_t) a)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_n##TY) (a, 1);\t\t\\\n+  }\n+\n+VCMP1_TEST (vceqz)\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\td[0-9]+, d[0-0]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCMP1_TEST (vcgtz)\n+/* { dg-final { scan-assembler-times {vcgt\\.f16\\td[0-9]+, d[0-9]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCMP1_TEST (vcgez)\n+/* { dg-final { scan-assembler-times {vcge\\.f16\\td[0-9]+, d[0-9]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vcge\\.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCMP1_TEST (vcltz)\n+/* { dg-final { scan-assembler-times {vclt.f16\\td[0-9]+, d[0-9]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vclt.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCMP1_TEST (vclez)\n+/* { dg-final { scan-assembler-times {vcle\\.f16\\td[0-9]+, d[0-9]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vcle\\.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCVT_TEST (vcvt, _f16_s16, float, int)\n+VCVT_N_TEST (vcvt, _f16_s16, float, int)\n+/* { dg-final { scan-assembler-times {vcvt\\.f16\\.s16\\td[0-9]+, d[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.s16\\tq[0-9]+, q[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.s16\\td[0-9]+, d[0-9]+, #1} 1 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.s16\\tq[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+VCVT_TEST (vcvt, _f16_u16, float, uint)\n+VCVT_N_TEST (vcvt, _f16_u16, float, uint)\n+/* { dg-final { scan-assembler-times {vcvt\\.f16\\.u16\\td[0-9]+, d[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.u16\\tq[0-9]+, q[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.u16\\td[0-9]+, d[0-9]+, #1} 1 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.u16\\tq[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+VCVT_TEST (vcvt, _s16_f16, int, float)\n+VCVT_N_TEST (vcvt, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvt\\.s16\\.f16\\td[0-9]+, d[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.s16\\.f16\\td[0-9]+, d[0-9]+, #1} 1 } }\n+   { dg-final { scan-assembler-times {vcvt\\.s16\\.f16\\tq[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+VCVT_TEST (vcvt, _u16_f16, uint, float)\n+VCVT_N_TEST (vcvt, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvt\\.u16\\.f16\\td[0-9]+, d[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.u16\\.f16\\td[0-9]+, d[0-9]+, #1} 1 } }\n+   { dg-final { scan-assembler-times {vcvt\\.u16\\.f16\\tq[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+VCVT_TEST (vcvta, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvta\\.s16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvta\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvta, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvta\\.u16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvta\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtm, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvtm\\.s16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtm\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtm, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvtm\\.u16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtm\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtn, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvtn\\.s16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtn\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtn, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvtn\\.u16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtn\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtp, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvtp\\.s16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtp\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtp, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvtp\\.u16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtp\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+UNOP_TEST (vabs)\n+/* { dg-final { scan-assembler-times {vabs\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vabs\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vneg)\n+/* { dg-final { scan-assembler-times {vneg\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vneg\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrecpe)\n+/* { dg-final { scan-assembler-times {vrecpe\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrecpe\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrnd)\n+/* { dg-final { scan-assembler-times {vrintz\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintz\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrnda)\n+/* { dg-final { scan-assembler-times {vrinta\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrinta\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndm)\n+/* { dg-final { scan-assembler-times {vrintm\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintm\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndn)\n+/* { dg-final { scan-assembler-times {vrintn\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintn\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndp)\n+/* { dg-final { scan-assembler-times {vrintp\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintp\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndx)\n+/* { dg-final { scan-assembler-times {vrintx\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintx\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrsqrte)\n+/* { dg-final { scan-assembler-times {vrsqrte\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrsqrte\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vadd)\n+/* { dg-final { scan-assembler-times {vadd\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vadd\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vabd)\n+/* { dg-final { scan-assembler-times {vabd\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vabd\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcage)\n+/* { dg-final { scan-assembler-times {vacge\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vacge\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcagt)\n+/* { dg-final { scan-assembler-times {vacgt\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vacgt\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcale)\n+/* { dg-final { scan-assembler-times {vacle\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vacle\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcalt)\n+/* { dg-final { scan-assembler-times {vaclt\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vaclt\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vceq)\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vceq\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcge)\n+/* { dg-final { scan-assembler-times {vcge\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcge\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcgt)\n+/* { dg-final { scan-assembler-times {vcgt\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcgt\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcle)\n+/* { dg-final { scan-assembler-times {vcle\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcle\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vclt)\n+/* { dg-final { scan-assembler-times {vclt\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vclt\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmax)\n+/* { dg-final { scan-assembler-times {vmax\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vmax\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmin)\n+/* { dg-final { scan-assembler-times {vmin\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vmin\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmaxnm)\n+/* { dg-final { scan-assembler-times {vmaxnm\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vmaxnm\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vminnm)\n+/* { dg-final { scan-assembler-times {vminnm\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vminnm\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmul)\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 3 } }\n+   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+BINOP_LANE_TEST (vmul, 2)\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+\\[2\\]} 1 } }\n+   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, d[0-9]+\\[2\\]} 1 } }  */\n+BINOP_N_TEST (vmul)\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+\\[0\\]} 1 } }\n+   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, d[0-9]+\\[0\\]} 1 } }*/\n+\n+float16x4_t\n+test_vpadd_16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vpadd_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vpadd\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } } */\n+\n+float16x4_t\n+test_vpmax_16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vpmax_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vpmax\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } } */\n+\n+float16x4_t\n+test_vpmin_16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vpmin_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vpmin\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } } */\n+\n+BINOP_TEST (vsub)\n+/* { dg-final { scan-assembler-times {vsub\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vsub\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vrecps)\n+/* { dg-final { scan-assembler-times {vrecps\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vrecps\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vrsqrts)\n+/* { dg-final { scan-assembler-times {vrsqrts\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vrsqrts\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TERNOP_TEST (vfma)\n+/* { dg-final { scan-assembler-times {vfma\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vfma\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TERNOP_TEST (vfms)\n+/* { dg-final { scan-assembler-times {vfms\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vfms\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4_t\n+test_vmov_n_f16 (float16_t a)\n+{\n+  return vmov_n_f16 (a);\n+}\n+\n+float16x4_t\n+test_vdup_n_f16 (float16_t a)\n+{\n+  return vdup_n_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vdup\\.16\\td[0-9]+, r[0-9]+} 2 } }  */\n+\n+float16x8_t\n+test_vmovq_n_f16 (float16_t a)\n+{\n+  return vmovq_n_f16 (a);\n+}\n+\n+float16x8_t\n+test_vdupq_n_f16 (float16_t a)\n+{\n+  return vdupq_n_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vdup\\.16\\tq[0-9]+, r[0-9]+} 2 } }  */\n+\n+float16x4_t\n+test_vdup_lane_f16 (float16x4_t a)\n+{\n+  return vdup_lane_f16 (a, 1);\n+}\n+/* { dg-final { scan-assembler-times {vdup\\.16\\td[0-9]+, d[0-9]+\\[1\\]} 1 } }  */\n+\n+float16x8_t\n+test_vdupq_lane_f16 (float16x4_t a)\n+{\n+  return vdupq_lane_f16 (a, 1);\n+}\n+/* { dg-final { scan-assembler-times {vdup\\.16\\tq[0-9]+, d[0-9]+\\[1\\]} 1 } }  */\n+\n+float16x4_t\n+test_vext_f16 (float16x4_t a, float16x4_t b)\n+{\n+  return vext_f16 (a, b, 1);\n+}\n+/* { dg-final { scan-assembler-times {vext\\.16\\td[0-9]+, d[0-9]+, d[0-9]+, #1} 1 } } */\n+\n+float16x8_t\n+test_vextq_f16 (float16x8_t a, float16x8_t b)\n+{\n+  return vextq_f16 (a, b, 1);\n+}\n+/*   { dg-final { scan-assembler-times {vext\\.16\\tq[0-9]+, q[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+UNOP_TEST (vrev64)\n+/* { dg-final { scan-assembler-times {vrev64\\.16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrev64\\.16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4_t\n+test_vbsl16x4 (uint16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vbsl_f16 (a, b, c);\n+}\n+/* { dg-final { scan-assembler-times {vbsl\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }  */\n+\n+float16x8_t\n+test_vbslq16x8 (uint16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vbslq_f16 (a, b, c);\n+}\n+/*{ dg-final { scan-assembler-times {vbsl\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4x2_t\n+test_vzip16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vzip_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vzip\\.16\\td[0-9]+, d[0-9]+} 1 } }  */\n+\n+float16x8x2_t\n+test_vzipq16x8 (float16x8_t a, float16x8_t b)\n+{\n+  return vzipq_f16 (a, b);\n+}\n+/*{ dg-final { scan-assembler-times {vzip\\.16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4x2_t\n+test_vuzp16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vuzp_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vuzp\\.16\\td[0-9]+, d[0-9]+} 1 } }  */\n+\n+float16x8x2_t\n+test_vuzpq16x8 (float16x8_t a, float16x8_t b)\n+{\n+  return vuzpq_f16 (a, b);\n+}\n+/*{ dg-final { scan-assembler-times {vuzp\\.16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4x2_t\n+test_vtrn16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vtrn_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vtrn\\.16\\td[0-9]+, d[0-9]+} 1 } }  */\n+\n+float16x8x2_t\n+test_vtrnq16x8 (float16x8_t a, float16x8_t b)\n+{\n+  return vtrnq_f16 (a, b);\n+}\n+/*{ dg-final { scan-assembler-times {vtrn\\.16\\tq[0-9]+, q[0-9]+} 1 } }  */"}, {"sha": "20366e20731c69ac8988fc725ecda4f1470c6d55", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-neon-3.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da37857031422ddcc84635905257e491210e665/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-3.c?ref=6da37857031422ddcc84635905257e491210e665", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_ok }  */\n+/* { dg-options \"-O2 -ffast-math\" }  */\n+/* { dg-add-options arm_v8_2a_fp16_neon }  */\n+\n+/* Test compiler use of FP16 FMA/FMS instructions with -ffast-math.  */\n+\n+#include <arm_neon.h>\n+\n+float16x4_t\n+test_vfma_1 (float16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vadd_f16 (vmul_f16 (a, b), c);\n+}\n+\n+float16x4_t\n+test_vfma_2 (float16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vsub_f16 (vmul_f16 (a, b), vneg_f16 (c));\n+}\n+\n+float16x4_t\n+test_vfma_3 (float16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vsub_f16 (vmul_f16 (vneg_f16 (a), vneg_f16 (b)), vneg_f16 (c));\n+}\n+\n+float16x4_t\n+test_vfma_4 (float16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vsub_f16 (vmul_f16 (a, b), vneg_f16 (c));\n+}\n+/* { dg-final { scan-assembler-times {vfma\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 4 } }  */\n+\n+float16x8_t\n+test_vfmaq_1 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vaddq_f16 (vmulq_f16 (a, b), c);\n+}\n+\n+float16x8_t\n+test_vfmaq_2 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vsubq_f16 (vmulq_f16 (a, b), vnegq_f16 (c));\n+}\n+\n+float16x8_t\n+test_vfmaq_3 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vsubq_f16 (vmulq_f16 (vnegq_f16 (a), vnegq_f16 (b)), vnegq_f16 (c));\n+}\n+\n+float16x8_t\n+test_vfmaq_4 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vsubq_f16 (vmulq_f16 (a, b), vnegq_f16 (c));\n+}\n+/* { dg-final { scan-assembler-times {vfma\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 4 } }  */\n+\n+float16x4_t\n+test_vfms_1 (float16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vsub_f16 (c, vmul_f16 (a, b));\n+}\n+\n+float16x4_t\n+test_vfms_2 (float16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vsub_f16 (a, vmul_f16 (b, c));\n+}\n+\n+float16x4_t\n+test_vfms_3 (float16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vadd_f16 (vmul_f16 (vneg_f16 (a), b), c);\n+}\n+\n+float16x4_t\n+test_vfms_4 (float16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vadd_f16 (vmul_f16 (a, vneg_f16 (b)), c);\n+}\n+/* { dg-final { scan-assembler-times {vfms\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 4 } } */\n+\n+float16x8_t\n+test_vfmsq_1 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vsubq_f16 (c, vmulq_f16 (a, b));\n+}\n+\n+float16x8_t\n+test_vfmsq_2 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vsubq_f16 (a, vmulq_f16 (b, c));\n+}\n+\n+float16x8_t\n+test_vfmsq_3 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vaddq_f16 (vmulq_f16 (vnegq_f16 (a), b), c);\n+}\n+\n+float16x8_t\n+test_vfmsq_4 (float16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vaddq_f16 (vmulq_f16 (a, vnegq_f16 (b)), c);\n+}\n+/* { dg-final { scan-assembler-times {vfms\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 4 } } */"}]}