{"sha": "b64fca63690ad6042bea885cd2556b3feaaf7eb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0ZmNhNjM2OTBhZDYwNDJiZWE4ODVjZDI1NTZiM2ZlYWFmN2ViMw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-17T16:09:35Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-17T16:09:35Z"}, "message": "tree.c (build_function_type_list_1): Remove bogus assert condition.\n\ngcc/\n\t* tree.c (build_function_type_list_1): Remove bogus assert condition.\n\ngcc/fortran/\n\t* trans-types.c (gfc_init_types): Use build_function_type_list.\n\t(gfc_get_ppc_type): Likewise.\n\t* trans-decl.c (gfc_generate_constructors): Likewise.\n\t* f95-lang.c (build_builtin_fntypes): Likewise.\n\t(gfc_init_builtin_functions): Likewise.\n\t(DEF_FUNCTION_TYPE_0): Likewise.\n\t(DEF_FUNCTION_TYPE_1): Likewise.\n\t(DEF_FUNCTION_TYPE_2): Likewise.\n\t(DEF_FUNCTION_TYPE_3): Likewise.\n\t(DEF_FUNCTION_TYPE_4): Likewise.\n\t(DEF_FUNCTION_TYPE_5): Likewise.\n\t(DEF_FUNCTION_TYPE_6): Likewise.\n\t(DEF_FUNCTION_TYPE_7): Likewise.  Use ARG7.\n\t(DEF_FUNCTION_TYPE_VAR_0): Use build_varags_function_type_list.\n\nFrom-SVN: r159491", "tree": {"sha": "c62de9869ae1ca74c6c0cc193a107ddcb1c50c80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c62de9869ae1ca74c6c0cc193a107ddcb1c50c80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b64fca63690ad6042bea885cd2556b3feaaf7eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64fca63690ad6042bea885cd2556b3feaaf7eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64fca63690ad6042bea885cd2556b3feaaf7eb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64fca63690ad6042bea885cd2556b3feaaf7eb3/comments", "author": null, "committer": null, "parents": [{"sha": "8748ad99e9aba52146166e3e6df7802226189dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8748ad99e9aba52146166e3e6df7802226189dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8748ad99e9aba52146166e3e6df7802226189dec"}], "stats": {"total": 334, "additions": 148, "deletions": 186}, "files": [{"sha": "a469dee35eb0d17ceb8b0f38969aa8ac95b8334c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b64fca63690ad6042bea885cd2556b3feaaf7eb3", "patch": "@@ -1,3 +1,7 @@\n+2010-05-17  Nathan Froyd  <froydnj@codesourcery.com>\n+ \n+\t* tree.c (build_function_type_list_1): Remove bogus assert condition.\n+ \n 2010-05-17  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Delete"}, {"sha": "73dd06d754f69b8914f4030b001ee0d749717a24", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b64fca63690ad6042bea885cd2556b3feaaf7eb3", "patch": "@@ -1,3 +1,20 @@\n+2010-05-17  Nathan Froyd  <froydnj@codesourcery.com\n+\n+\t* trans-types.c (gfc_init_types): Use build_function_type_list.\n+\t(gfc_get_ppc_type): Likewise.\n+\t* trans-decl.c (gfc_generate_constructors): Likewise.\n+\t* f95-lang.c (build_builtin_fntypes): Likewise.\n+\t(gfc_init_builtin_functions): Likewise.\n+\t(DEF_FUNCTION_TYPE_0): Likewise.\n+\t(DEF_FUNCTION_TYPE_1): Likewise.\n+\t(DEF_FUNCTION_TYPE_2): Likewise.\n+\t(DEF_FUNCTION_TYPE_3): Likewise.\n+\t(DEF_FUNCTION_TYPE_4): Likewise.\n+\t(DEF_FUNCTION_TYPE_5): Likewise.\n+\t(DEF_FUNCTION_TYPE_6): Likewise.\n+\t(DEF_FUNCTION_TYPE_7): Likewise.  Use ARG7.\n+\t(DEF_FUNCTION_TYPE_VAR_0): Use build_varags_function_type_list.\n+ \n 2010-05-17  Nathan Froyd  <froydnj@cs.rice.edu>\n \n \t* trans-array.c (gfc_trans_array_constructor_value): Use"}, {"sha": "f7e0b4ff64911d36ced32902fc69a1e7555f1d29", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 123, "deletions": 181, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=b64fca63690ad6042bea885cd2556b3feaaf7eb3", "patch": "@@ -636,28 +636,23 @@ gfc_define_builtin (const char *name,\n static void\n build_builtin_fntypes (tree *fntype, tree type)\n {\n-  tree tmp;\n-\n   /* type (*) (type) */\n-  tmp = tree_cons (NULL_TREE, type, void_list_node);\n-  fntype[0] = build_function_type (type, tmp);\n+  fntype[0] = build_function_type_list (type, type, NULL_TREE);\n   /* type (*) (type, type) */\n-  tmp = tree_cons (NULL_TREE, type, tmp);\n-  fntype[1] = build_function_type (type, tmp);\n-  /* type (*) (int, type) */\n-  tmp = tree_cons (NULL_TREE, integer_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, type, tmp);\n-  fntype[2] = build_function_type (type, tmp);\n-  /* type (*) (void) */\n-  fntype[3] = build_function_type (type, void_list_node);\n-  /* type (*) (type, &int) */\n-  tmp = tree_cons (NULL_TREE, type, void_list_node);\n-  tmp = tree_cons (NULL_TREE, build_pointer_type (integer_type_node), tmp);\n-  fntype[4] = build_function_type (type, tmp);\n+  fntype[1] = build_function_type_list (type, type, type, NULL_TREE);\n   /* type (*) (type, int) */\n-  tmp = tree_cons (NULL_TREE, type, void_list_node);\n-  tmp = tree_cons (NULL_TREE, integer_type_node, tmp);\n-  fntype[5] = build_function_type (type, tmp);\n+  fntype[2] = build_function_type_list (type,\n+                                        type, integer_type_node, NULL_TREE);\n+  /* type (*) (void) */\n+  fntype[3] = build_function_type_list (type, NULL_TREE);\n+  /* type (*) (&int, type) */\n+  fntype[4] = build_function_type_list (type,\n+                                        build_pointer_type (integer_type_node),\n+                                        type,\n+                                        NULL_TREE);\n+  /* type (*) (int, type) */\n+  fntype[5] = build_function_type_list (type,\n+                                        integer_type_node, type, NULL_TREE);\n }\n \n \n@@ -721,7 +716,6 @@ gfc_init_builtin_functions (void)\n   tree func_double_doublep_doublep;\n   tree func_longdouble_longdoublep_longdoublep;\n   tree ftype, ptype;\n-  tree tmp, type;\n   tree builtin_types[(int) BT_LAST + 1];\n \n   build_builtin_fntypes (mfunc_float, float_type_node);\n@@ -731,46 +725,39 @@ gfc_init_builtin_functions (void)\n   build_builtin_fntypes (mfunc_cdouble, complex_double_type_node);\n   build_builtin_fntypes (mfunc_clongdouble, complex_long_double_type_node);\n \n-  tmp = tree_cons (NULL_TREE, complex_float_type_node, void_list_node);\n-  func_cfloat_float = build_function_type (float_type_node, tmp);\n+  func_cfloat_float = build_function_type_list (float_type_node,\n+                                                complex_float_type_node,\n+                                                NULL_TREE);\n \n-  tmp = tree_cons (NULL_TREE, float_type_node, void_list_node);\n-  func_float_cfloat = build_function_type (complex_float_type_node, tmp);\n+  func_float_cfloat = build_function_type_list (complex_float_type_node,\n+                                                float_type_node, NULL_TREE);\n \n-  tmp = tree_cons (NULL_TREE, complex_double_type_node, void_list_node);\n-  func_cdouble_double = build_function_type (double_type_node, tmp);\n+  func_cdouble_double = build_function_type_list (double_type_node,\n+                                                  complex_double_type_node,\n+                                                  NULL_TREE);\n \n-  tmp = tree_cons (NULL_TREE, double_type_node, void_list_node);\n-  func_double_cdouble = build_function_type (complex_double_type_node, tmp);\n+  func_double_cdouble = build_function_type_list (complex_double_type_node,\n+                                                  double_type_node, NULL_TREE);\n \n-  tmp = tree_cons (NULL_TREE, complex_long_double_type_node, void_list_node);\n   func_clongdouble_longdouble =\n-    build_function_type (long_double_type_node, tmp);\n+    build_function_type_list (long_double_type_node,\n+                              complex_long_double_type_node, NULL_TREE);\n \n-  tmp = tree_cons (NULL_TREE, long_double_type_node, void_list_node);\n   func_longdouble_clongdouble =\n-    build_function_type (complex_long_double_type_node, tmp);\n+    build_function_type_list (complex_long_double_type_node,\n+                              long_double_type_node, NULL_TREE);\n \n   ptype = build_pointer_type (float_type_node);\n-  tmp = tree_cons (NULL_TREE, float_type_node,\n-\t\t   tree_cons (NULL_TREE, ptype,\n-\t\t   \t      tree_cons (NULL_TREE, ptype, void_list_node)));\n   func_float_floatp_floatp =\n-    build_function_type (void_type_node, tmp);\n+    build_function_type_list (void_type_node, ptype, ptype, NULL_TREE);\n \n   ptype = build_pointer_type (double_type_node);\n-  tmp = tree_cons (NULL_TREE, double_type_node,\n-\t\t   tree_cons (NULL_TREE, ptype,\n-\t\t   \t      tree_cons (NULL_TREE, ptype, void_list_node)));\n   func_double_doublep_doublep =\n-    build_function_type (void_type_node, tmp);\n+    build_function_type_list (void_type_node, ptype, ptype, NULL_TREE);\n \n   ptype = build_pointer_type (long_double_type_node);\n-  tmp = tree_cons (NULL_TREE, long_double_type_node,\n-\t\t   tree_cons (NULL_TREE, ptype,\n-\t\t   \t      tree_cons (NULL_TREE, ptype, void_list_node)));\n   func_longdouble_longdoublep_longdoublep =\n-    build_function_type (void_type_node, tmp);\n+    build_function_type_list (void_type_node, ptype, ptype, NULL_TREE);\n \n #include \"mathbuiltins.def\"\n \n@@ -847,28 +834,31 @@ gfc_init_builtin_functions (void)\n \t\t      BUILT_IN_HUGE_VALF, \"__builtin_huge_valf\", true);\n \n   /* lround{f,,l} and llround{f,,l} */\n-  type = tree_cons (NULL_TREE, float_type_node, void_list_node);\n-  tmp = build_function_type (long_integer_type_node, type); \n-  gfc_define_builtin (\"__builtin_lroundf\", tmp, BUILT_IN_LROUNDF,\n+  ftype = build_function_type_list (long_integer_type_node,\n+                                    float_type_node, NULL_TREE); \n+  gfc_define_builtin (\"__builtin_lroundf\", ftype, BUILT_IN_LROUNDF,\n \t\t      \"lroundf\", true);\n-  tmp = build_function_type (long_long_integer_type_node, type); \n-  gfc_define_builtin (\"__builtin_llroundf\", tmp, BUILT_IN_LLROUNDF,\n+  ftype = build_function_type_list (long_long_integer_type_node,\n+                                    float_type_node, NULL_TREE); \n+  gfc_define_builtin (\"__builtin_llroundf\", ftype, BUILT_IN_LLROUNDF,\n \t\t      \"llroundf\", true);\n \n-  type = tree_cons (NULL_TREE, double_type_node, void_list_node);\n-  tmp = build_function_type (long_integer_type_node, type); \n-  gfc_define_builtin (\"__builtin_lround\", tmp, BUILT_IN_LROUND,\n+  ftype = build_function_type_list (long_integer_type_node,\n+                                    double_type_node, NULL_TREE); \n+  gfc_define_builtin (\"__builtin_lround\", ftype, BUILT_IN_LROUND,\n \t\t      \"lround\", true);\n-  tmp = build_function_type (long_long_integer_type_node, type); \n-  gfc_define_builtin (\"__builtin_llround\", tmp, BUILT_IN_LLROUND,\n+  ftype = build_function_type_list (long_long_integer_type_node,\n+                                    double_type_node, NULL_TREE); \n+  gfc_define_builtin (\"__builtin_llround\", ftype, BUILT_IN_LLROUND,\n \t\t      \"llround\", true);\n \n-  type = tree_cons (NULL_TREE, long_double_type_node, void_list_node);\n-  tmp = build_function_type (long_integer_type_node, type); \n-  gfc_define_builtin (\"__builtin_lroundl\", tmp, BUILT_IN_LROUNDL,\n+  ftype = build_function_type_list (long_integer_type_node,\n+                                    long_double_type_node, NULL_TREE); \n+  gfc_define_builtin (\"__builtin_lroundl\", ftype, BUILT_IN_LROUNDL,\n \t\t      \"lroundl\", true);\n-  tmp = build_function_type (long_long_integer_type_node, type); \n-  gfc_define_builtin (\"__builtin_llroundl\", tmp, BUILT_IN_LLROUNDL,\n+  ftype = build_function_type_list (long_long_integer_type_node,\n+                                    long_double_type_node, NULL_TREE); \n+  gfc_define_builtin (\"__builtin_llroundl\", ftype, BUILT_IN_LLROUNDL,\n \t\t      \"llroundl\", true);\n \n   /* These are used to implement the ** operator.  */\n@@ -920,173 +910,125 @@ gfc_init_builtin_functions (void)\n     }\n \n   /* For LEADZ / TRAILZ.  */\n-  tmp = tree_cons (NULL_TREE, unsigned_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n+  ftype = build_function_type_list (integer_type_node,\n+                                    unsigned_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ,\n \t\t      \"__builtin_clz\", true);\n-\n-  tmp = tree_cons (NULL_TREE, long_unsigned_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL,\n-\t\t      \"__builtin_clzl\", true);\n-\n-  tmp = tree_cons (NULL_TREE, long_long_unsigned_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL,\n-\t\t      \"__builtin_clzll\", true);\n-\n-  tmp = tree_cons (NULL_TREE, unsigned_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n   gfc_define_builtin (\"__builtin_ctz\", ftype, BUILT_IN_CTZ,\n \t\t      \"__builtin_ctz\", true);\n \n-  tmp = tree_cons (NULL_TREE, long_unsigned_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n+  ftype = build_function_type_list (integer_type_node,\n+                                    long_unsigned_type_node, NULL_TREE);\n+  gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL,\n+\t\t      \"__builtin_clzl\", true);\n   gfc_define_builtin (\"__builtin_ctzl\", ftype, BUILT_IN_CTZL,\n \t\t      \"__builtin_ctzl\", true);\n \n-  tmp = tree_cons (NULL_TREE, long_long_unsigned_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n+  ftype = build_function_type_list (integer_type_node,\n+                                    long_long_unsigned_type_node, NULL_TREE);\n+  gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL,\n+\t\t      \"__builtin_clzll\", true);\n   gfc_define_builtin (\"__builtin_ctzll\", ftype, BUILT_IN_CTZLL,\n \t\t      \"__builtin_ctzll\", true);\n \n   /* Other builtin functions we use.  */\n \n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, tmp);\n-  ftype = build_function_type (long_integer_type_node, tmp);\n+  ftype = build_function_type_list (long_integer_type_node,\n+                                    long_integer_type_node,\n+                                    long_integer_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_expect\", ftype, BUILT_IN_EXPECT,\n \t\t      \"__builtin_expect\", true);\n \n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n-  ftype = build_function_type (void_type_node, tmp);\n+  ftype = build_function_type_list (void_type_node,\n+                                    pvoid_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_free\", ftype, BUILT_IN_FREE,\n \t\t      \"free\", false);\n \n-  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n-  ftype = build_function_type (pvoid_type_node, tmp);\n+  ftype = build_function_type_list (pvoid_type_node,\n+                                    size_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_malloc\", ftype, BUILT_IN_MALLOC,\n \t\t      \"malloc\", false);\n   DECL_IS_MALLOC (built_in_decls[BUILT_IN_MALLOC]) = 1;\n \n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n-  tmp = tree_cons (NULL_TREE, size_type_node, tmp);\n-  ftype = build_function_type (pvoid_type_node, tmp);\n+  ftype = build_function_type_list (pvoid_type_node,\n+                                    size_type_node, pvoid_type_node,\n+                                    NULL_TREE);\n   gfc_define_builtin (\"__builtin_realloc\", ftype, BUILT_IN_REALLOC,\n \t\t      \"realloc\", false);\n \n-  tmp = tree_cons (NULL_TREE, void_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n+  ftype = build_function_type_list (integer_type_node,\n+                                    void_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_isnan\", ftype, BUILT_IN_ISNAN,\n \t\t      \"__builtin_isnan\", true);\n \n #define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\\n   builtin_types[(int) ENUM] = VALUE;\n-#define DEF_FUNCTION_TYPE_0(ENUM, RETURN)\t\t\\\n-  builtin_types[(int) ENUM]\t\t\t\t\\\n-    = build_function_type (builtin_types[(int) RETURN],\t\\\n-\t\t\t   void_list_node);\n+#define DEF_FUNCTION_TYPE_0(ENUM, RETURN)                       \\\n+  builtin_types[(int) ENUM]                                     \\\n+    = build_function_type_list (builtin_types[(int) RETURN],\t\\\n+                                NULL_TREE);\n #define DEF_FUNCTION_TYPE_1(ENUM, RETURN, ARG1)\t\t\t\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n-    = build_function_type (builtin_types[(int) RETURN],\t\t\t\\\n-\t\t\t   tree_cons (NULL_TREE,\t\t\t\\\n-\t\t\t\t      builtin_types[(int) ARG1],\t\\\n-\t\t\t\t      void_list_node));\n-#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2)\t\\\n-  builtin_types[(int) ENUM]\t\t\t\t\\\n-    = build_function_type\t\t\t\t\\\n-      (builtin_types[(int) RETURN],\t\t\t\\\n-       tree_cons (NULL_TREE,\t\t\t\t\\\n-\t\t  builtin_types[(int) ARG1],\t\t\\\n-\t\t  tree_cons (NULL_TREE,\t\t\t\\\n-\t\t\t     builtin_types[(int) ARG2],\t\\\n-\t\t\t     void_list_node)));\n-#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3)\t\t \\\n-  builtin_types[(int) ENUM]\t\t\t\t\t\t \\\n-    = build_function_type\t\t\t\t\t\t \\\n-      (builtin_types[(int) RETURN],\t\t\t\t\t \\\n-       tree_cons (NULL_TREE,\t\t\t\t\t\t \\\n-\t\t  builtin_types[(int) ARG1],\t\t\t\t \\\n-\t\t  tree_cons (NULL_TREE,\t\t\t\t\t \\\n-\t\t\t     builtin_types[(int) ARG2],\t\t\t \\\n-\t\t\t     tree_cons (NULL_TREE,\t\t\t \\\n-\t\t\t\t\tbuiltin_types[(int) ARG3],\t \\\n-\t\t\t\t\tvoid_list_node))));\n+    = build_function_type_list (builtin_types[(int) RETURN],            \\\n+                                builtin_types[(int) ARG1],              \\\n+                                NULL_TREE);\n+#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2)           \\\n+  builtin_types[(int) ENUM]                                     \\\n+    = build_function_type_list (builtin_types[(int) RETURN],    \\\n+                                builtin_types[(int) ARG1],      \\\n+                                builtin_types[(int) ARG2],      \\\n+                                NULL_TREE);\n+#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3)             \\\n+  builtin_types[(int) ENUM]                                             \\\n+    = build_function_type_list (builtin_types[(int) RETURN],            \\\n+                                builtin_types[(int) ARG1],              \\\n+                                builtin_types[(int) ARG2],              \\\n+                                builtin_types[(int) ARG3],              \\\n+                                NULL_TREE);\n #define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4)\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n-    = build_function_type\t\t\t\t\t\t\\\n-      (builtin_types[(int) RETURN],\t\t\t\t\t\\\n-       tree_cons (NULL_TREE,\t\t\t\t\t\t\\\n-\t\t  builtin_types[(int) ARG1],\t\t\t\t\\\n-\t\t  tree_cons (NULL_TREE,\t\t\t\t\t\\\n-\t\t\t     builtin_types[(int) ARG2],\t\t\t\\\n-\t\t\t     tree_cons\t\t\t\t\t\\\n-\t\t\t     (NULL_TREE,\t\t\t\t\\\n-\t\t\t      builtin_types[(int) ARG3],\t\t\\\n-\t\t\t      tree_cons (NULL_TREE,\t\t\t\\\n-\t\t\t\t\t builtin_types[(int) ARG4],\t\\\n-\t\t\t\t\t void_list_node)))));\n+    = build_function_type_list (builtin_types[(int) RETURN],            \\\n+                                builtin_types[(int) ARG1],              \\\n+                                builtin_types[(int) ARG2],              \\\n+                                builtin_types[(int) ARG3],\t\t\\\n+                                builtin_types[(int) ARG4],              \\\n+                                NULL_TREE);\n #define DEF_FUNCTION_TYPE_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5)\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n-    = build_function_type\t\t\t\t\t\t\\\n-      (builtin_types[(int) RETURN],\t\t\t\t\t\\\n-       tree_cons (NULL_TREE,\t\t\t\t\t\t\\\n-\t\t  builtin_types[(int) ARG1],\t\t\t\t\\\n-\t\t  tree_cons (NULL_TREE,\t\t\t\t\t\\\n-\t\t\t     builtin_types[(int) ARG2],\t\t\t\\\n-\t\t\t     tree_cons\t\t\t\t\t\\\n-\t\t\t     (NULL_TREE,\t\t\t\t\\\n-\t\t\t      builtin_types[(int) ARG3],\t\t\\\n-\t\t\t      tree_cons (NULL_TREE,\t\t\t\\\n-\t\t\t\t\t builtin_types[(int) ARG4],\t\\\n-\t\t\t\t\t tree_cons (NULL_TREE,\t\t\\\n-\t\t\t\t\t      builtin_types[(int) ARG5],\\\n-\t\t\t\t\t      void_list_node))))));\n+    = build_function_type_list (builtin_types[(int) RETURN],            \\\n+                                builtin_types[(int) ARG1],              \\\n+                                builtin_types[(int) ARG2],              \\\n+                                builtin_types[(int) ARG3],\t\t\\\n+                                builtin_types[(int) ARG4],              \\\n+                                builtin_types[(int) ARG5],              \\\n+                                NULL_TREE);\n #define DEF_FUNCTION_TYPE_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t    ARG6)\t\t\t\t\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n-    = build_function_type\t\t\t\t\t\t\\\n-      (builtin_types[(int) RETURN],\t\t\t\t\t\\\n-       tree_cons (NULL_TREE,\t\t\t\t\t\t\\\n-\t\t  builtin_types[(int) ARG1],\t\t\t\t\\\n-\t\t  tree_cons (NULL_TREE,\t\t\t\t\t\\\n-\t\t\t     builtin_types[(int) ARG2],\t\t\t\\\n-\t\t\t     tree_cons\t\t\t\t\t\\\n-\t\t\t     (NULL_TREE,\t\t\t\t\\\n-\t\t\t      builtin_types[(int) ARG3],\t\t\\\n-\t\t\t      tree_cons\t\t\t\t\t\\\n-\t\t\t      (NULL_TREE,\t\t\t\t\\\n-\t\t\t       builtin_types[(int) ARG4],\t\t\\\n-\t\t\t       tree_cons (NULL_TREE,\t\t\t\\\n-\t\t\t\t\t builtin_types[(int) ARG5],\t\\\n-\t\t\t\t\t tree_cons (NULL_TREE,\t\t\\\n-\t\t\t\t\t      builtin_types[(int) ARG6],\\\n-\t\t\t\t\t      void_list_node)))))));\n+    = build_function_type_list (builtin_types[(int) RETURN],            \\\n+                                builtin_types[(int) ARG1],              \\\n+                                builtin_types[(int) ARG2],              \\\n+                                builtin_types[(int) ARG3],\t\t\\\n+                                builtin_types[(int) ARG4],\t\t\\\n+                                builtin_types[(int) ARG5],              \\\n+                                builtin_types[(int) ARG6],              \\\n+                                NULL_TREE);\n #define DEF_FUNCTION_TYPE_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \\\n \t\t\t    ARG6, ARG7)\t\t\t\t\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n-    = build_function_type\t\t\t\t\t\t\\\n-      (builtin_types[(int) RETURN],\t\t\t\t\t\\\n-       tree_cons (NULL_TREE,\t\t\t\t\t\t\\\n-\t\t  builtin_types[(int) ARG1],\t\t\t\t\\\n-\t\t  tree_cons (NULL_TREE,\t\t\t\t\t\\\n-\t\t\t     builtin_types[(int) ARG2],\t\t\t\\\n-\t\t\t     tree_cons\t\t\t\t\t\\\n-\t\t\t     (NULL_TREE,\t\t\t\t\\\n-\t\t\t      builtin_types[(int) ARG3],\t\t\\\n-\t\t\t      tree_cons\t\t\t\t\t\\\n-\t\t\t      (NULL_TREE,\t\t\t\t\\\n-\t\t\t       builtin_types[(int) ARG4],\t\t\\\n-\t\t\t       tree_cons (NULL_TREE,\t\t\t\\\n-\t\t\t\t\t builtin_types[(int) ARG5],\t\\\n-\t\t\t\t\t tree_cons (NULL_TREE,\t\t\\\n-\t\t\t\t\t      builtin_types[(int) ARG6],\\\n-\t\t\t\t\t tree_cons (NULL_TREE,\t\t\\\n-\t\t\t\t\t      builtin_types[(int) ARG6], \\\n-\t\t\t\t\t      void_list_node))))))));\n+    = build_function_type_list (builtin_types[(int) RETURN],            \\\n+                                builtin_types[(int) ARG1],              \\\n+                                builtin_types[(int) ARG2],              \\\n+                                builtin_types[(int) ARG3],\t\t\\\n+                                builtin_types[(int) ARG4],\t\t\\\n+                                builtin_types[(int) ARG5],              \\\n+                                builtin_types[(int) ARG6],              \\\n+                                builtin_types[(int) ARG7],              \\\n+                                NULL_TREE);\n #define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN)\t\t\t\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n-    = build_function_type (builtin_types[(int) RETURN], NULL_TREE);\n+    = build_varargs_function_type_list (builtin_types[(int) RETURN],    \\\n+                                        NULL_TREE);\n #define DEF_POINTER_TYPE(ENUM, TYPE)\t\t\t\\\n   builtin_types[(int) ENUM]\t\t\t\t\\\n     = build_pointer_type (builtin_types[(int) TYPE]);"}, {"sha": "e24390bbb8d88592869bc4ab07aa66fe7b26213d", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b64fca63690ad6042bea885cd2556b3feaaf7eb3", "patch": "@@ -4633,8 +4633,7 @@ gfc_generate_constructors (void)\n     return;\n \n   fnname = get_file_function_name (\"I\");\n-  type = build_function_type (void_type_node,\n-\t\t\t      gfc_chainon_list (NULL_TREE, void_type_node));\n+  type = build_function_type_list (void_type_node, NULL_TREE);\n \n   fndecl = build_decl (input_location,\n \t\t       FUNCTION_DECL, fnname, type);"}, {"sha": "fa214fd8c5572c3172b99ad1ca31a15ee33a8a62", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=b64fca63690ad6042bea885cd2556b3feaaf7eb3", "patch": "@@ -870,7 +870,7 @@ gfc_init_types (void)\n   ppvoid_type_node = build_pointer_type (pvoid_type_node);\n   pchar_type_node = build_pointer_type (gfc_character1_type_node);\n   pfunc_type_node\n-    = build_pointer_type (build_function_type (void_type_node, NULL_TREE));\n+    = build_pointer_type (build_function_type_list (void_type_node, NULL_TREE));\n \n   gfc_array_index_type = gfc_get_int_type (gfc_index_integer_kind);\n   /* We cannot use gfc_index_zero_node in definition of gfc_array_range_type,\n@@ -1934,7 +1934,7 @@ gfc_get_ppc_type (gfc_component* c)\n   else\n     t = void_type_node;\n \n-  return build_pointer_type (build_function_type (t, NULL_TREE));\n+  return build_pointer_type (build_function_type_list (t, NULL_TREE));\n }\n \n "}, {"sha": "00de313f476e459c4054c06944db26deb58570e1", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64fca63690ad6042bea885cd2556b3feaaf7eb3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b64fca63690ad6042bea885cd2556b3feaaf7eb3", "patch": "@@ -7330,7 +7330,7 @@ build_function_type_list_1 (bool vaargs, tree return_type, va_list argp)\n       last = args;\n       if (args != NULL_TREE)\n \targs = nreverse (args);\n-      gcc_assert (args != NULL_TREE && last != void_list_node);\n+      gcc_assert (last != void_list_node);\n     }\n   else if (args == NULL_TREE)\n     args = void_list_node;"}]}