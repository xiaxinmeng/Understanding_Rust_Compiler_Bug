{"sha": "3825be8c96775cf8e6fcb5eef04455f07717a5ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyNWJlOGM5Njc3NWNmOGU2ZmNiNWVlZjA0NDU1ZjA3NzE3YTVlYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-03-06T14:47:23Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-03-06T14:47:23Z"}, "message": "patch_tester.sh (usage): Watermark is not lexicographic.\n\n\t* patch_tester.sh (usage): Watermark is not lexicographic.\n\tLoad $STATE/defaults if it exists.\n\t(selfexec): Use $0.\n\t(apply_patch): Handle deletions.\n\t(bootntest): Handle default settings.\n\nFrom-SVN: r132974", "tree": {"sha": "8a28514379142fe42f35452d0f1e282cd94a4d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a28514379142fe42f35452d0f1e282cd94a4d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3825be8c96775cf8e6fcb5eef04455f07717a5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3825be8c96775cf8e6fcb5eef04455f07717a5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3825be8c96775cf8e6fcb5eef04455f07717a5ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3825be8c96775cf8e6fcb5eef04455f07717a5ea/comments", "author": null, "committer": null, "parents": [{"sha": "97efb03aed001755fc4536fc8c7e4a9fcd5989cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97efb03aed001755fc4536fc8c7e4a9fcd5989cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97efb03aed001755fc4536fc8c7e4a9fcd5989cf"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "15656b9965252c03c8e1b850bde294de108ae3da", "filename": "contrib/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,3 +1,11 @@\n+2008-03-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* patch_tester.sh (usage): Watermark is not lexicographic.\n+\tLoad $STATE/defaults if it exists.\n+\t(selfexec): Use $0.\n+\t(apply_patch): Handle deletions.\n+\t(bootntest): Handle default settings.\n+\n 2008-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gennews (files): Reference GCC 4.3 web pages."}, {"sha": "bff741c9d5d3d9fd7a7e407783131afbae652161", "filename": "contrib/patch_tester.sh", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/contrib%2Fpatch_tester.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/contrib%2Fpatch_tester.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fpatch_tester.sh?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,7 +1,7 @@\n #!/bin/sh\n \n # Tests a set of patches from a directory.\n-# Copyright (C) 2007  Free Software Foundation, Inc.\n+# Copyright (C) 2007, 2008  Free Software Foundation, Inc.\n # Contributed by Sebastian Pop <sebastian.pop@amd.com>\n \n # This program is free software; you can redistribute it and/or modify\n@@ -48,8 +48,7 @@ patch_tester.sh [-j<N>] [-standby N] [-watermark N] [-savecompilers] [-nogpg]\n     PATCHES_DIR.  Default is ${default_standby} minutes.\n \n     WATERMARK is the 5 minute average system charge under which a new\n-    compile can start.  Default is ${default_watermark}.  Note that the comparison \n-    is done in lexicographical order, so don't forget the leading 0.\n+    compile can start.  Default is ${default_watermark}.\n \n     SAVECOMPILERS copies the compilers in the same directory as the\n     test results for the non patched version.  Default is not copy.\n@@ -132,6 +131,12 @@ fi\n     svn -q co svn://gcc.gnu.org/svn/gcc/trunk .\n }\n \n+# This can contain required local settings:\n+#  default_config  configure options, always passed\n+#  default_make    make bootstrap options, always passed\n+#  default_check   make check options, always passed\n+[ -f $STATE/defaults ] && . $STATE/defaults\n+\n VERSION=`svn info $SOURCE | grep \"^Revision:\" | sed -e \"s/^Revision://g\" -e \"s/ //g\"`\n \n exec >> $STATE/tester.log 2>&1 || exit 1\n@@ -182,7 +187,7 @@ cleanup () {\n }\n \n selfexec () {\n-    exec ${CONFIG_SHELL-/bin/sh} $SOURCE/contrib/patch_tester.sh $args\n+    exec ${CONFIG_SHELL-/bin/sh} $0 $args\n }\n \n update () {\n@@ -263,6 +268,17 @@ apply_patch () {\n \t    return 1\n \tfi\n     fi\n+\n+    # Just assume indexes for now -- not really great, but svn always\n+    # makes them.\n+    grep \"^Index: \" $PATCH | sed -e 's/Index: //' | while read file; do\n+\t# If the patch resulted in an empty file, delete it.\n+\t# This is how svn reports deletions.\n+\tif [ ! -s $file ]; then\n+\t    rm -f $file\n+\t    report \"Deleting empty file $file\"\n+\tfi\n+    done\n }\n \n save_compilers () {\n@@ -279,13 +295,16 @@ bootntest () {\n     cd $BUILD\n \n     CONFIG_OPTIONS=`grep \"^configure:\" $PATCH | sed -e \"s/^configure://g\"`\n+    CONFIG_OPTIONS=\"$default_config $CONFIG_OPTIONS\"\n     if ! $SOURCE/configure $CONFIG_OPTIONS &> $1/configure ; then\n \treport \"configure failed with:\"\n \tfreport $1/configure\n \treturn 1\n     fi\n \n-    if ! make $dashj `grep \"^make:\" $PATCH | sed -e \"s/^make://g\"` bootstrap &> $1/bootstrap ; then\n+    MAKE_ARGS=`grep \"^make:\" $PATCH | sed -e \"s/^make://g\"`\n+    MAKE_ARGS=\"$default_make $MAKE_ARGS\"\n+    if ! make $dashj $MAKE_ARGS bootstrap &> $1/bootstrap ; then\n \treport \"bootstrap failed with last lines:\"\n \ttail -30 $1/bootstrap > $1/last_bootstrap\n \tfreport $1/last_bootstrap\n@@ -296,6 +315,7 @@ bootntest () {\n     fi\n \n     CHECK_OPTIONS=`grep \"^check:\" $PATCH | sed -e \"s/^check://g\"`\n+    CHECK_OPTIONS=\"$default_check $CHECK_OPTIONS\"\n     make $dashj $CHECK_OPTIONS -k check &> $1/check\n \n     for LOG in $TESTLOGS ; do"}]}