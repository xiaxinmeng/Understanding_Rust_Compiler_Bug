{"sha": "f51d1dde83fd4b6b2730a2b6b45e5966245e0561", "node_id": "C_kwDOANBUbNoAKGY1MWQxZGRlODNmZDRiNmIyNzMwYTJiNmI0NWU1OTY2MjQ1ZTA1NjE", "commit": {"author": {"name": "Etienne Servais", "email": "servais@adacore.com", "date": "2021-10-01T15:04:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-10T08:57:38Z"}, "message": "[Ada] Warn when interfaces swapped between full and partial view\n\ngcc/ada/\n\n\t* sem_ch3.adb (Derived_Type_Declaration): Introduce a subprogram\n\tfor tree transformation. If a tree transformation is performed,\n\tthen warn that it would be better to reorder the interfaces.", "tree": {"sha": "b69cbe6c1ff34a3e772929f82abce84232ce92ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b69cbe6c1ff34a3e772929f82abce84232ce92ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f51d1dde83fd4b6b2730a2b6b45e5966245e0561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51d1dde83fd4b6b2730a2b6b45e5966245e0561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51d1dde83fd4b6b2730a2b6b45e5966245e0561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51d1dde83fd4b6b2730a2b6b45e5966245e0561/comments", "author": {"login": "vser1", "id": 8308457, "node_id": "MDQ6VXNlcjgzMDg0NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8308457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vser1", "html_url": "https://github.com/vser1", "followers_url": "https://api.github.com/users/vser1/followers", "following_url": "https://api.github.com/users/vser1/following{/other_user}", "gists_url": "https://api.github.com/users/vser1/gists{/gist_id}", "starred_url": "https://api.github.com/users/vser1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vser1/subscriptions", "organizations_url": "https://api.github.com/users/vser1/orgs", "repos_url": "https://api.github.com/users/vser1/repos", "events_url": "https://api.github.com/users/vser1/events{/privacy}", "received_events_url": "https://api.github.com/users/vser1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c787be254c50d208a15a18033d29de419c7c165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c787be254c50d208a15a18033d29de419c7c165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c787be254c50d208a15a18033d29de419c7c165"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "569e0199dded09b892293f5d648a2cff796a5bef", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51d1dde83fd4b6b2730a2b6b45e5966245e0561/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51d1dde83fd4b6b2730a2b6b45e5966245e0561/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f51d1dde83fd4b6b2730a2b6b45e5966245e0561", "patch": "@@ -17258,10 +17258,46 @@ package body Sem_Ch3 is\n         and then Is_Interface (Parent_Type)\n       then\n          declare\n-            Iface               : Node_Id;\n             Partial_View        : Entity_Id;\n             Partial_View_Parent : Entity_Id;\n-            New_Iface           : Node_Id;\n+\n+            function Reorder_Interfaces return Boolean;\n+            --  Look for an interface in the full view's interface list that\n+            --  matches the parent type of the partial view, and when found,\n+            --  rewrite the full view's parent with the partial view's parent,\n+            --  append the full view's original parent to the interface list,\n+            --  recursively call Derived_Type_Definition on the full type, and\n+            --  return True. If a match is not found, return False.\n+            --  ??? This seems broken in the case of generic packages.\n+\n+            ------------------------\n+            -- Reorder_Interfaces --\n+            ------------------------\n+\n+            function Reorder_Interfaces return Boolean is\n+               Iface     : Node_Id;\n+               New_Iface : Node_Id;\n+            begin\n+               Iface := First (Interface_List (Def));\n+               while Present (Iface) loop\n+                  if Etype (Iface) = Etype (Partial_View) then\n+                     Rewrite (Subtype_Indication (Def),\n+                       New_Copy (Subtype_Indication (Parent (Partial_View))));\n+\n+                     New_Iface :=\n+                       Make_Identifier (Sloc (N), Chars (Parent_Type));\n+                     Append (New_Iface, Interface_List (Def));\n+\n+                     --  Analyze the transformed code\n+\n+                     Derived_Type_Declaration (T, N, Is_Completion);\n+                     return True;\n+                  end if;\n+\n+                  Next (Iface);\n+               end loop;\n+               return False;\n+            end Reorder_Interfaces;\n \n          begin\n             --  Look for the associated private type declaration\n@@ -17282,30 +17318,26 @@ package body Sem_Ch3 is\n                then\n                   null;\n \n-               --  Traverse the list of interfaces of the full-view to look\n-               --  for the parent of the partial-view and perform the tree\n-               --  transformation.\n+               --  Traverse the list of interfaces of the full view to look\n+               --  for the parent of the partial view and reorder the\n+               --  interfaces to match the order in the partial view,\n+               --  if needed.\n \n                else\n-                  Iface := First (Interface_List (Def));\n-                  while Present (Iface) loop\n-                     if Etype (Iface) = Etype (Partial_View) then\n-                        Rewrite (Subtype_Indication (Def),\n-                          New_Copy (Subtype_Indication\n-                                     (Parent (Partial_View))));\n-\n-                        New_Iface :=\n-                          Make_Identifier (Sloc (N), Chars (Parent_Type));\n-                        Append (New_Iface, Interface_List (Def));\n \n-                        --  Analyze the transformed code\n+                  if Reorder_Interfaces then\n+                     --  Having the interfaces listed in any order is legal.\n+                     --  However, the compiler does not properly handle\n+                     --  different orders between partial and full views in\n+                     --  generic units. We give a warning about the order\n+                     --  mismatch, so the user can work around this problem.\n \n-                        Derived_Type_Declaration (T, N, Is_Completion);\n-                        return;\n-                     end if;\n+                     Error_Msg_N (\"??full declaration does not respect \" &\n+                                  \"partial declaration order\", T);\n+                     Error_Msg_N (\"\\??consider reordering\", T);\n \n-                     Next (Iface);\n-                  end loop;\n+                     return;\n+                  end if;\n                end if;\n             end if;\n          end;"}]}