{"sha": "bd62d832fbc4521641ef006145c2f83a71382bf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ2MmQ4MzJmYmM0NTIxNjQxZWYwMDYxNDVjMmY4M2E3MTM4MmJmMg==", "commit": {"author": {"name": "Stefan D\u00f6singer", "email": "stefan@codeweavers.com", "date": "2009-10-20T07:23:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-20T07:23:35Z"}, "message": "i386.c: Remove signal.h #include.\n\n\t* config/i386/i386.c: Remove signal.h #include.\n\nFrom-SVN: r153005", "tree": {"sha": "fb46ec5bad4eadcde93e7bb2b313f7eea858d666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb46ec5bad4eadcde93e7bb2b313f7eea858d666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd62d832fbc4521641ef006145c2f83a71382bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd62d832fbc4521641ef006145c2f83a71382bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd62d832fbc4521641ef006145c2f83a71382bf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd62d832fbc4521641ef006145c2f83a71382bf2/comments", "author": {"login": "stefand", "id": 521262, "node_id": "MDQ6VXNlcjUyMTI2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/521262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefand", "html_url": "https://github.com/stefand", "followers_url": "https://api.github.com/users/stefand/followers", "following_url": "https://api.github.com/users/stefand/following{/other_user}", "gists_url": "https://api.github.com/users/stefand/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefand/subscriptions", "organizations_url": "https://api.github.com/users/stefand/orgs", "repos_url": "https://api.github.com/users/stefand/repos", "events_url": "https://api.github.com/users/stefand/events{/privacy}", "received_events_url": "https://api.github.com/users/stefand/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c"}], "stats": {"total": 133, "additions": 64, "deletions": 69}, "files": [{"sha": "97e0d104d98f03cb1d37938586762c7d62028b72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd62d832fbc4521641ef006145c2f83a71382bf2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd62d832fbc4521641ef006145c2f83a71382bf2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd62d832fbc4521641ef006145c2f83a71382bf2", "patch": "@@ -1,7 +1,10 @@\n+2009-10-20  Stefan D\u00f6singer  <stefan@codeweavers.com>\n+\n+\t* config/i386/i386.c: Remove signal.h #include.\n+\n 2009-10-20  Jie Zhang  <jie.zhang@analog.com>\n \n-\t* simplify-rtx.c (simplify_const_unary_operation): Handle\n-\tSS_ABS.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Handle SS_ABS.\n \t* doc/rtl.texi: Document ss_abs.\n \n 2009-10-19  Jakub Jelinek  <jakub@redhat.com>\n@@ -20,7 +23,7 @@\n \tcris_function_value_regno_p): New functions.\n \t(cris_promote_function_mode): Update comment.\n \t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n-\t* config/cris/cris.h: (FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n+\t* config/cris/cris.h (FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n \t(FUNCTION_VALUE_REGNO_P): Redefine, use cris_function_value_regno_p.\n \t* config/cris/cris-protos.h (cris_function_value_regno_p): Declare.\n \n@@ -38,7 +41,7 @@\n \t<GIMPLE_RETURN>: Remove the statement if cannot_fallthru is set.\n \tOtherwise lower it and set cannot_fallthru to true.\n \t<GIMPLE_TRY>: Update cannot_fallthru for GIMPLE_TRY_FINALLY and return.\n-\t<GIMPLE_CATCH, GIMPLE_EH_FILTER>; Set cannot_fallthru to false.\n+\t<GIMPLE_CATCH, GIMPLE_EH_FILTER>: Set cannot_fallthru to false.\n \t<GIMPLE_CALL>: Set cannot_fallthru to false for BUILT_IN_SETJMP and\n \tto true for a noreturn call.  Do not remove statements.\n \t<GIMPLE_OMP_PARALLEL, GIMPLE_OMP_TASK>: Set cannot_fallthru to false.\n@@ -67,8 +70,7 @@\n \n 2009-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* cfgexpand.c (expand_debug_expr): Fail if bitpos < 0 for non-MEM\n-\top0.\n+\t* cfgexpand.c (expand_debug_expr): Fail if bitpos < 0 for non-MEM op0.\n \n 2009-10-17  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n \n@@ -100,8 +102,7 @@\n \n 2009-10-17  Richard Guenther  <rguenther@suse.de>\n \n-\t* lto-streamer-in.c (lto_input_location): Try to reuse\n-\tprevious maps.\n+\t* lto-streamer-in.c (lto_input_location): Try to reuse previous maps.\n \n 2009-10-17  Richard Guenther  <rguenther@suse.de>\n \n@@ -240,8 +241,7 @@\n 2009-10-15  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/41702\n-\t* pa.md (casesi): Use sign extended index in call to\n-\tgen_casesi64p.\n+\t* pa.md (casesi): Use sign extended index in call to gen_casesi64p.\n \t(casesi64p): Update pattern to reflect above.\n \n 2009-10-15  Steve Ellcey  <sje@cup.hp.com>\n@@ -334,8 +334,7 @@\n \n 2009-10-14  Daniel Gutson  <dgutson@codesourcery.com>\n \n-\t* config/arm/neon.md (neon_vshll_n<mode>): Checking Bounds\n-\tfixed.\n+\t* config/arm/neon.md (neon_vshll_n<mode>): Checking Bounds fixed.\n \n 2009-10-14  DJ Delorie  <dj@redhat.com>\n \t\n@@ -379,7 +378,7 @@\n 2009-09-26  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* params.def (PARAM_IRA_LOOP_RESERVED_REGS): New.\n-\t* params.h (IRA_LOOP_RESERVED_REGS): New\n+\t* params.h (IRA_LOOP_RESERVED_REGS): New.\n \t* tree-pass.h (pass_subregs_of_mode_init,\n \tpass_subregs_of_mode_finish): Remove.\n \t* passes.c (pass_subregs_of_mode_init,\n@@ -388,8 +387,7 @@\n \t* config/i386/i386.h (STACK_REG_COVER_CLASS): Define.\n \t* common.opt (fira-loop-pressure): New.\n \t* toplev.h (flag_ira_loop_pressure): New.\n-\t* rtl.h (init_subregs_of_mode, finish_subregs_of_mode): New\n-\texternals.\n+\t* rtl.h (init_subregs_of_mode, finish_subregs_of_mode): New externals.\n \t* reginfo.c (init_subregs_of_mode, finish_subregs_of_mode):\n \tMake external and void type functions.\n \t(gate_subregs_of_mode_init, pass_subregs_of_mode_init,\n@@ -437,8 +435,7 @@\n \n \t* lto-symtab.c (lto_symtab_compatible): Fold in ...\n \t(lto_symtab_merge): ... here.  Rewrite both to take the\n-\tprevailing and a to-be-merged entry and to queue diagnostics\n-\tproperly.\n+\tprevailing and a to-be-merged entry and to queue diagnostics properly.\n \t(lto_symtab_resolve_replaceable_p): New predicate for\n \tsymbol resolution.\n \t(lto_symtab_resolve_can_prevail_p): Likewise.\n@@ -462,9 +459,8 @@\n \n 2009-10-14  Nick Clifton  <nickc@redhat.com>\n \n-\t* gcc/doc/extended.texi: Replace the dash character with\n-\t@minus{} in situations where it is being used as a minus\n-\tsymbol.\n+\t* gcc/doc/extended.texi: Replace the dash character with @minus{}\n+\tin situations where it is being used as a minus symbol.\n \t* gcc/doc/tm.texi: Likewise.\n \t* gcc/doc/md.texi: Likewise.\n \n@@ -761,7 +757,7 @@\n \t(ASM_CPU_SPEC): Pass %(asm_cpu_476) for -mcpu=476 and -mcpu=476fp.\n \t(processor_type): Add PROCESSOR_PPC476.\n \t(EXTRA_SPECS): Add asm_cpu_476 string.\n-\t* config/rs6000/rs6000.md: (define_attr \"type\"): Add isel attribute.\n+\t* config/rs6000/rs6000.md (define_attr \"type\"): Add isel attribute.\n \t(define_attr \"cpu\"): Add ppc476.\n \tInclude 476.md.\n \tUpdate comments for 476.\n@@ -2338,7 +2334,7 @@\n \t(x86_64-*-*): Ditto.\n \t* config/i386/smmintrin.h: Move instructions in mmintrin-common.h\n \tback to smmintrin.h.\n-\t* config/i386/cpuid.h: (bit_SSE5): Remove SSE5 bit.\n+\t* config/i386/cpuid.h (bit_SSE5): Remove SSE5 bit.\n \t* config/i386/x86intrin.h: Remove SSE5.\n \t* config/i386/mmintrin-common.h: Delete file.\n \t* doc/extend.texi (x86 intrinsics): Remove SSE5 flags and builtins.\n@@ -8406,7 +8402,7 @@\n \t(function_value): Adjust for above modification.\n \t(alpha_va_start) <TARGET_ABI_OPEN_VMS>: Use\n \tvirtual_incoming_args_rtx as base object, not next_arg.\n-\t* config/alpha/vms.h: (DEFAULT_PCC_STRUCT_RETURN): Define as 0.\n+\t* config/alpha/vms.h (DEFAULT_PCC_STRUCT_RETURN): Define as 0.\n \n 2009-08-11  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n@@ -8499,7 +8495,7 @@\n \t* config/alpha/vms.h (ASM_OUTPUT_EXTERNAL): Define.\n \t(DO_CRTL_NAMES): Define.\n \t(LIB_SPEC): Remove.\n-\t* config/alpha/vms64.h: (POINTERS_EXTEND_UNSIGNED): Remove undef.\n+\t* config/alpha/vms64.h (POINTERS_EXTEND_UNSIGNED): Remove undef.\n \t(LONG_TYPE_SIZE): Define.\n \t(TARGET_OS_CPP_BUILTINS): Define with __LONG_POINTERS=1\n \t(SUBTARGET_SWITCHES): Define malloc64 switch.\n@@ -10391,7 +10387,7 @@\n \tcombined_args_to_skip and args_to_skip.\n \t* tree-inline.c (update_clone_info): New function.\n \t(tree_function_versioning): Call update_clone_info.\n-\t* cgraphunit.c: (cgraph_materialize_clone): Dump materialized\n+\t* cgraphunit.c (cgraph_materialize_clone): Dump materialized\n \tfunctions.\n \t(cgraph_materialize_all_clones): More extensive dumping, working\n \twith combined_args_to_skip rather than args_to_skip.\n@@ -10721,7 +10717,7 @@\n \t* doc/sourcebuild.texi: Document install-plugin target.\n \t* configure.ac: Added install-plugin target to language makefiles.\n \t* configure: Regenerate.\n-\t* Makefile.in: (install-plugin): Install more headers,\n+\t* Makefile.in (install-plugin): Install more headers,\n \tdepend on lang.install-plugin.\n \n 2009-07-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n@@ -11050,7 +11046,7 @@\n \n 2009-07-08  DJ Delorie  <dj@redhat.com>\n \n-\t* config/mep/mep.c: (mep_option_can_inline_p): New.\n+\t* config/mep/mep.c (mep_option_can_inline_p): New.\n \t(TARGET_OPTION_CAN_INLINE_P): Define.\n \n 2009-07-08  Mark Wielaard  <mjw@redhat.com>\n@@ -13274,10 +13270,10 @@\n \t(LARGEST_EXPONENT_IS_NORMAL): Define.\n \t* config/arm/arm-protos.h (arm_emit_fp16_const): Declare.\n \t* config/arm/arm-modes.def (HFmode): Define.\n-\t* config/arm/vfp.md: (*movhf_vfp): New.\n+\t* config/arm/vfp.md (*movhf_vfp): New.\n \t(extendhfsf2): New.\n \t(truncsfhf2): New.\n-\t* config/arm/arm.md: (fpu): Add neon_fp16.\n+\t* config/arm/arm.md (fpu): Add neon_fp16.\n \t(floatsihf2, floatdihf2): New.\n \t(fix_trunchfsi2, fix_trunchfdi2): New.\n \t(truncdfhf2): New.\n@@ -13991,7 +13987,7 @@\n \t(c_parser_expr_list): Same.\n \t(c_parser_omp_atomic): Same.\n \t(c_parser_omp_for_loop): Same.\n-\t* c-tree.h: (struct c_declarator): Add comment to id_loc.\n+\t* c-tree.h (struct c_declarator): Add comment to id_loc.\n \t(build_array_declarator): New argument.\n \t* c-decl.c (build_array_declarator): Add location argument.\n \t(grokdeclarator): Set id_loc for cdk_array.\n@@ -16707,7 +16703,7 @@\n \t* hooks.h (hook_tree_const_tree_null): Declare.\n \t* target.h (struct gcc_target):  Add invalid_parameter_type,\n \tinvalid_return_type, promoted_type, and convert_to_type fields.\n-\t* target-def.h: (TARGET_INVALID_PARAMETER_TYPE): Define.\n+\t* target-def.h (TARGET_INVALID_PARAMETER_TYPE): Define.\n \t(TARGET_INVALID_RETURN_TYPE): Define.\n \t(TARGET_PROMOTED_TYPE): Define.\n \t(TARGET_CONVERT_TO_TYPE): Define.\n@@ -19124,7 +19120,7 @@\n \n 2009-05-04  Michael Eager <eager@eagercon.com>\n \n-\t* gcc/config.gcc: (powerpc-xilinx-eabi*): Add tm t-xilinx\n+\t* gcc/config.gcc (powerpc-xilinx-eabi*): Add tm t-xilinx\n \t* config/rs6000/t-xilinx: New\n \n 2009-05-04  Paolo Bonzini  <bonzini@gnu.org>\n@@ -20152,7 +20148,7 @@\n \n \t* ssaexpand.h (struct ssaexpand): Member 'values' is a bitmap.\n \t(get_gimple_for_ssa_name): Adjust, lookup using SSA_NAME_DEF_STMT.\n-\t* tree-ssa-live.h: (find_replaceable_exprs): Return a bitmap.\n+\t* tree-ssa-live.h (find_replaceable_exprs): Return a bitmap.\n \t(dump_replaceable_exprs): Take a bitmap.\n \t* cfgexpand.c (gimple_cond_pred_to_tree): Handle bitmap instead of\n \tarray.\n@@ -21156,7 +21152,7 @@\n \n \t* cfghooks.c (tidy_fallthru_edges): Remove find_basic_blocks\n \treferences from comments.\n-\t* cfgbuild.c: (count_basic_blocks): Delete.\n+\t* cfgbuild.c (count_basic_blocks): Delete.\n \t(find_basic_blocks_1): Delete.\n \t(find_basic_blocks): Delete.\n \t* except.c (finish_eh_generation): Make static.  Move comment from\n@@ -24395,7 +24391,7 @@\n \t* config/vax/builtins.md (jbbssiqi, jbbssihi, jbbssisi, jbbcciqi,\n \tjbbccihi, jbbccisi): Remova trailing whitespace.\n \t* config/vax/constraints.md: Likewise.\n-\t* config/vax/elf.h: (ASM_PREFERRED_EH_DATA_FORMAT): Likewise.\n+\t* config/vax/elf.h (ASM_PREFERRED_EH_DATA_FORMAT): Likewise.\n \t* config/vax/openbsd1.h (OBSD_OLD_GAS): Likewise.\n \t* config/vax/predicates.md: Likewise.\n \t* config/vax/vax.c (print_operand_address, vax_output_int_move,"}, {"sha": "6065f49a0423c2e1422ae3ce402ce12d7fcecb28", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd62d832fbc4521641ef006145c2f83a71382bf2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd62d832fbc4521641ef006145c2f83a71382bf2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bd62d832fbc4521641ef006145c2f83a71382bf2", "patch": "@@ -8332,39 +8332,39 @@ ix86_expand_prologue (void)\n       rtx push, mov;\n \n       /* Make sure the function starts with\n-         8b ff     movl.s %edi,%edi\n-         55        push   %ebp\n-         8b ec     movl.s %esp,%ebp\n-\n-         This matches the hookable function prologue in Win32 API functions in Microsoft Windows\n-         XP Service Pack 2 and newer. Wine uses this to enable Windows apps to hook the Win32 API\n-         functions provided by Wine */\n-      insn = emit_insn (gen_vswapmov (gen_rtx_REG (SImode, DI_REG), gen_rtx_REG (SImode, DI_REG)));\n+\t 8b ff     movl.s %edi,%edi\n+\t 55        push   %ebp\n+\t 8b ec     movl.s %esp,%ebp\n+\n+\t This matches the hookable function prologue in Win32 API\n+\t functions in Microsoft Windows XP Service Pack 2 and newer.\n+\t Wine uses this to enable Windows apps to hook the Win32 API\n+\t functions provided by Wine.  */\n+      insn = emit_insn (gen_vswapmov (gen_rtx_REG (SImode, DI_REG),\n+\t\t\t\t      gen_rtx_REG (SImode, DI_REG)));\n       push = emit_insn (gen_push (hard_frame_pointer_rtx));\n-      mov = emit_insn (gen_vswapmov (hard_frame_pointer_rtx, stack_pointer_rtx));\n+      mov = emit_insn (gen_vswapmov (hard_frame_pointer_rtx,\n+\t\t\t\t     stack_pointer_rtx));\n \n-      if (frame_pointer_needed && !(crtl->drap_reg && crtl->stack_realign_needed))\n-        {\n-          /* The push %ebp and movl.s %esp, %ebp already set up the frame pointer. No need to do\n-             this again. */\n-          gen_frame_pointer = 0;\n-          RTX_FRAME_RELATED_P (push) = 1;\n-          RTX_FRAME_RELATED_P (mov) = 1;\n-          if (ix86_cfa_state->reg == stack_pointer_rtx)\n-            {\n-              ix86_cfa_state->reg = hard_frame_pointer_rtx;\n-            }\n-        }\n+      if (frame_pointer_needed && !(crtl->drap_reg\n+\t\t\t\t    && crtl->stack_realign_needed))\n+\t{\n+\t  /* The push %ebp and movl.s %esp, %ebp already set up\n+\t     the frame pointer.  No need to do this again. */\n+\t  gen_frame_pointer = 0;\n+\t  RTX_FRAME_RELATED_P (push) = 1;\n+\t  RTX_FRAME_RELATED_P (mov) = 1;\n+\t  if (ix86_cfa_state->reg == stack_pointer_rtx)\n+\t    ix86_cfa_state->reg = hard_frame_pointer_rtx;\n+\t}\n       else\n-        {\n-          /* If the frame pointer is not needed, pop %ebp again. This could be optimized for cases where\n-             ebp needs to be backed up for some other reason.\n-\n-             If stack realignment is needed, pop the base pointer again, align the stack, and later\n-             regenerate the frame pointer setup. The frame pointer generated by the hook prologue\n-             is not aligned, so it can't be used */\n-          insn = emit_insn ((*ix86_gen_pop1) (hard_frame_pointer_rtx));\n-        }\n+\t/* If the frame pointer is not needed, pop %ebp again. This\n+\t   could be optimized for cases where ebp needs to be backed up\n+\t   for some other reason.  If stack realignment is needed, pop\n+\t   the base pointer again, align the stack, and later regenerate\n+\t   the frame pointer setup.  The frame pointer generated by the\n+\t   hook prologue is not aligned, so it can't be used.  */\n+\tinsn = emit_insn ((*ix86_gen_pop1) (hard_frame_pointer_rtx));\n     }\n \n   /* The first insn of a function that accepts its static chain on the\n@@ -9022,7 +9022,8 @@ ix86_expand_epilogue (int style)\n \t\t\t\t\t\t0, red_offset,\n \t\t\t\t\t\tstyle == 2);\n \t  pro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t     GEN_INT (frame.nsseregs * 16 + frame.padding0),\n+\t\t\t\t     GEN_INT (frame.nsseregs * 16\n+\t\t\t\t\t      + frame.padding0),\n \t\t\t\t     style, false);\n \t}\n       else if (frame.to_allocate || frame.padding0 || frame.nsseregs)\n@@ -26530,8 +26531,6 @@ ix86_handle_struct_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n-#include <signal.h>\n-\n static tree\n ix86_handle_fndecl_attribute (tree *node, tree name,\n                               tree args ATTRIBUTE_UNUSED,"}, {"sha": "e0d007a32340895255377f953ce543cabe382fb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd62d832fbc4521641ef006145c2f83a71382bf2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd62d832fbc4521641ef006145c2f83a71382bf2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd62d832fbc4521641ef006145c2f83a71382bf2", "patch": "@@ -207,7 +207,7 @@\n \n 2009-10-14  Daniel Gutson  <dgutson@codesourcery.com>\n \n-        * gcc.target/arm/neon/vfp-shift-a2t2.c: New test case.\n+\t* gcc.target/arm/neon/vfp-shift-a2t2.c: New test case.\n \n 2009-10-14  Jakub Jelinek  <jakub@redhat.com>\n "}]}