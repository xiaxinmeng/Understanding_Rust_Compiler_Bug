{"sha": "de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "node_id": "C_kwDOANBUbNoAKGRlMTk2ZTVkZDhlYTRkMGVkMDFhOGMyNjVhZmRkMzY3NmUyNzU0NWI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-11T18:42:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-14T11:27:50Z"}, "message": "libstdc++: Add attribute to features deprecated in C++17 [PR91260]\n\nThere are a lot of things in the C++ standard library which were\ndeprecated in C++11, and more in C++17.  Some of them were removed after\ndeprecation and are no longer present in the standard at all. We have\nnot removed these from libstdc++ because keeping them as non-standard\nextensions is conforming, and avoids gratuitously breaking user code,\nand in some cases we need to keep using them to avoid ABI changes. But\nwe should at least give a warning for using them. That has not been done\npreviously because of the library's own uses of them (e.g. the\nstd::iterator class template used as a base class).\n\nThis adds deprecated attributes to the relevant components, and then\ngoes through the whole library to add diagnostic pragmas where needed to\nsuppress warnings about our internal uses of them. The tests are updated\nto either expect the additional warnings, or to suppress them where we\naren't interested in them.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/91260\n\tPR libstdc++/91383\n\tPR libstdc++/95065\n\t* include/backward/binders.h (bind1st, bind2nd): Add deprecated\n\tattribute.\n\t* include/bits/refwrap.h (_Maybe_unary_or_binary_function):\n\tDisable deprecated warnings for base classes.\n\t(_Reference_wrapper_base): Likewise.\n\t* include/bits/shared_ptr_base.h (_Sp_owner_less): Likewise.\n\t* include/bits/stl_bvector.h (_Bit_iterator_base): Likewise.\n\t* include/bits/stl_function.h (unary_function, binary_function):\n\tAdd deprecated attribute.\n\t(unary_negate, not1, binary_negate, not2, ptr_fun)\n\t(pointer_to_unary_function, pointer_to_binary_function)\n\t(mem_fun_t, const_mem_fun_t, mem_fun_ref_t, const_mem_fun_ref_t)\n\t(mem_fun1_t, const_mem_fun1_t, mem_fun_ref1_t)\n\t(const_mem_fun1_ref_t, mem_fun, mem_fun_ref): Add deprecated\n\tattributes.\n\t* include/bits/stl_iterator.h: Disable deprecated warnings for\n\tstd::iterator base classes.\n\t* include/bits/stl_iterator_base_types.h (iterator): Add\n\tdeprecated attribute.\n\t* include/bits/stl_map.h (map::value_compare): Disable\n\tdeprecated warnings for base class.\n\t* include/bits/stl_multimap.h (multimap::value_compare):\n\tLikewise.\n\t* include/bits/stl_raw_storage_iter.h (raw_storage_iterator):\n\tAdd deprecated attribute.\n\t* include/bits/stl_tempbuf.h (get_temporary_buffer): Likewise.\n\t* include/bits/stream_iterator.h: Disable deprecated warnings.\n\t* include/bits/streambuf_iterator.h: Likewise.\n\t* include/ext/bitmap_allocator.h: Remove unary_function base\n\tclasses.\n\t* include/ext/functional: Disable deprecated warnings.\n\t* include/ext/rope: Likewise.\n\t* include/ext/throw_allocator.h: Likewise.\n\t* include/std/type_traits (result_of): Add deprecated attribute.\n\t* include/tr1/functional: Disable deprecated warnings.\n\t* include/tr1/functional_hash.h: Likewise.\n\t* testsuite/20_util/function_objects/binders/1.cc: Add\n\t-Wno-disable-deprecations.\n\t* testsuite/20_util/function_objects/binders/3113.cc: Likewise.\n\t* testsuite/20_util/function_objects/constexpr.cc: Add\n\tdg-warning.\n\t* testsuite/20_util/raw_storage_iterator/base.cc: Likewise.\n\t* testsuite/20_util/raw_storage_iterator/dr2127.cc: Likewise.\n\t* testsuite/20_util/raw_storage_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/20_util/raw_storage_iterator/requirements/explicit_instantiation/1.cc:\n\tLikewise.\n\t* testsuite/20_util/raw_storage_iterator/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/20_util/reference_wrapper/24803.cc:\n\tLikewise.\n\t* testsuite/20_util/reference_wrapper/typedefs.cc: Enable for\n\tC++20 and check for absence of nested types.\n\t* testsuite/20_util/shared_ptr/comparison/less.cc: Remove\n\tstd::binary_function base class.\n\t* testsuite/20_util/temporary_buffer.cc: Add dg-warning.\n\t* testsuite/21_strings/basic_string/cons/char/69092.cc: Remove\n\tstd::iterator base class.\n\t* testsuite/24_iterators/back_insert_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/24_iterators/front_insert_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/24_iterators/insert_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/24_iterators/istream_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/24_iterators/istreambuf_iterator/92285.cc:\n\tLikewise.\n\t* testsuite/24_iterators/istreambuf_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/24_iterators/ostream_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/24_iterators/ostreambuf_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/24_iterators/reverse_iterator/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/copy/34595.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/minmax/3.cc: Remove std::binary_function\n\tbase class.\n\t* testsuite/25_algorithms/all_of/requirements/explicit_instantiation/2.cc:\n\tDisable deprecated warnings.\n\t* testsuite/25_algorithms/all_of/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/any_of/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/any_of/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/count_if/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/count_if/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_end/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_end/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_first_of/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_first_of/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_if/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_if/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_if_not/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/find_if_not/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/for_each/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/for_each/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/is_partitioned/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/is_partitioned/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/is_permutation/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/is_permutation/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/none_of/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/none_of/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/partition/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/partition/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/partition_copy/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/partition_copy/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/partition_point/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/partition_point/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/remove_copy_if/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/remove_copy_if/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/remove_if/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/remove_if/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/replace_copy_if/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/replace_copy_if/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/replace_if/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/replace_if/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/search/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/search/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/search_n/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/search_n/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/stable_partition/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/stable_partition/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/transform/requirements/explicit_instantiation/2.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/transform/requirements/explicit_instantiation/pod.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/9178.cc: Add\n\tdg-warning.\n\t* testsuite/ext/pb_ds/example/priority_queue_erase_if.cc:\n\tLikewise.\n\t* testsuite/ext/pb_ds/example/priority_queue_split_join.cc:\n\tLikewise.\n\t* testsuite/tr1/3_function_objects/reference_wrapper/typedefs.cc:\n\tDisable deprecated warnings.\n\t* testsuite/tr1/6_containers/hash/requirements/base_classes.cc:\n\tLikewise.\n\t* testsuite/util/regression/trait/erase_if_fn.hpp: Remove\n\tstd::unary_function base classes.\n\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper):\n\tRemove std::iterator base classes.", "tree": {"sha": "364cecd6d2d4a0932a604b3edeeaa82dcfe3686c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/364cecd6d2d4a0932a604b3edeeaa82dcfe3686c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6a1181209b756882f89cdba6128565fad1a56e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6a1181209b756882f89cdba6128565fad1a56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6a1181209b756882f89cdba6128565fad1a56e"}], "stats": {"total": 577, "additions": 439, "deletions": 138}, "files": [{"sha": "5eac6c0881d16dbf6006051ce4a165fe0ce9825c", "filename": "libstdc++-v3/include/backward/binders.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -131,6 +131,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// One of the @link binders binder functors@endlink.\n   template<typename _Operation, typename _Tp>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::bind\")\n     inline binder1st<_Operation>\n     bind1st(const _Operation& __fn, const _Tp& __x)\n     {\n@@ -166,6 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// One of the @link binders binder functors@endlink.\n   template<typename _Operation, typename _Tp>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::bind\")\n     inline binder2nd<_Operation>\n     bind2nd(const _Operation& __fn, const _Tp& __x)\n     {"}, {"sha": "8016f87478eb436ca35b5422ef7a8fa12804d585", "filename": "libstdc++-v3/include/bits/refwrap.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -52,6 +52,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res, typename... _ArgTypes>\n     struct _Maybe_unary_or_binary_function { };\n \n+// Ignore warnings about unary_function and binary_function.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /// Derives from @c unary_function, as appropriate.\n   template<typename _Res, typename _T1>\n     struct _Maybe_unary_or_binary_function<_Res, _T1>\n@@ -62,6 +66,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>\n     : std::binary_function<_T1, _T2, _Res> { };\n \n+#pragma GCC diagnostic pop\n+\n   template<typename _Signature>\n     struct _Mem_fn_traits;\n \n@@ -215,6 +221,10 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n     : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>\n     { };\n \n+// Ignore warnings about unary_function and binary_function.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   // - a function type (unary)\n   template<typename _Res, typename _T1 _GLIBCXX_NOEXCEPT_PARM>\n     struct _Reference_wrapper_base<_Res(_T1) _GLIBCXX_NOEXCEPT_QUAL>\n@@ -280,6 +290,7 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n     {\n       using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;\n     };\n+#pragma GCC diagnostic pop\n #endif // ! C++20\n \n   /// @endcond"}, {"sha": "9e80aabcda87700613da5dbe07e5d9c13373e885", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -2108,6 +2108,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept\n     { __a.swap(__b); }\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n   template<typename _Tp, typename _Tp1>\n     struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>\n     {\n@@ -2123,6 +2125,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept\n       { return __lhs.owner_before(__rhs); }\n     };\n+#pragma GCC diagnostic pop\n \n   template<>\n     struct _Sp_owner_less<void, void>"}, {"sha": "75f38812807aa724375d68722c423d93b01d253c", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -156,6 +156,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n   };\n \n+// Ignore warnings about std::iterator.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n   struct _Bit_iterator_base\n   : public std::iterator<std::random_access_iterator_tag, bool>\n   {\n@@ -255,6 +258,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      + __x._M_offset - __y._M_offset);\n     }\n   };\n+#pragma GCC diagnostic pop\n \n   struct _Bit_iterator : public _Bit_iterator_base\n   {"}, {"sha": "a1a770dc2dec637d769d18e50a1d6b77c4498c2b", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -121,7 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// @c result_type is the return type\n       typedef _Result \tresult_type;  \n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /**\n    *  Helper for defining adaptable binary function objects.\n@@ -138,7 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// @c result_type is the return type\n       typedef _Result \tresult_type;\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n   /** @}  */\n \n   // 20.3.2 arithmetic\n@@ -175,6 +175,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct negate;\n #endif\n \n+// Ignore warnings about unary_function and binary_function.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /// One of the @link arithmetic_functors math functors@endlink.\n   template<typename _Tp>\n     struct plus : public binary_function<_Tp, _Tp, _Tp>\n@@ -235,6 +239,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const _Tp& __x) const\n       { return -__x; }\n     };\n+#pragma GCC diagnostic pop\n \n #if __cplusplus > 201103L\n \n@@ -360,6 +365,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct less_equal;\n #endif\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /// One of the @link comparison_functors comparison functors@endlink.\n   template<typename _Tp>\n     struct equal_to : public binary_function<_Tp, _Tp, bool>\n@@ -479,6 +487,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn (__UINTPTR_TYPE__)__x <= (__UINTPTR_TYPE__)__y;\n       }\n     };\n+#pragma GCC diagnostic pop\n \n #if __cplusplus >= 201402L\n   /// One of the @link comparison_functors comparison functors@endlink.\n@@ -779,6 +788,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct logical_not;\n #endif\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /// One of the @link logical_functors Boolean operations functors@endlink.\n   template<typename _Tp>\n     struct logical_and : public binary_function<_Tp, _Tp, bool>\n@@ -808,6 +820,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const _Tp& __x) const\n       { return !__x; }\n     };\n+#pragma GCC diagnostic pop\n \n #if __cplusplus > 201103L\n   /// One of the @link logical_functors Boolean operations functors@endlink.\n@@ -871,6 +884,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct bit_not;\n #endif\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 660. Missing Bitwise Operations.\n   template<typename _Tp>\n@@ -908,6 +924,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const _Tp& __x) const\n       { return ~__x; }\n     };\n+#pragma GCC diagnostic pop\n \n #if __cplusplus > 201103L\n   template <>\n@@ -965,7 +982,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       typedef __is_transparent is_transparent;\n     };\n-#endif\n+#endif // C++14\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n \n   // 20.3.5 negators\n   /** @defgroup negators Negators\n@@ -1001,7 +1021,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   /// One of the @link negators negation functors@endlink.\n   template<typename _Predicate>\n-    class unary_negate\n+    class _GLIBCXX17_DEPRECATED unary_negate\n     : public unary_function<typename _Predicate::argument_type, bool>\n     {\n     protected:\n@@ -1020,14 +1040,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// One of the @link negators negation functors@endlink.\n   template<typename _Predicate>\n+    _GLIBCXX17_DEPRECATED_SUGGEST(\"std::not_fn\")\n     _GLIBCXX14_CONSTEXPR\n     inline unary_negate<_Predicate>\n     not1(const _Predicate& __pred)\n     { return unary_negate<_Predicate>(__pred); }\n \n   /// One of the @link negators negation functors@endlink.\n   template<typename _Predicate>\n-    class binary_negate\n+    class _GLIBCXX17_DEPRECATED binary_negate\n     : public binary_function<typename _Predicate::first_argument_type,\n \t\t\t     typename _Predicate::second_argument_type, bool>\n     {\n@@ -1048,6 +1069,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// One of the @link negators negation functors@endlink.\n   template<typename _Predicate>\n+    _GLIBCXX17_DEPRECATED_SUGGEST(\"std::not_fn\")\n     _GLIBCXX14_CONSTEXPR\n     inline binary_negate<_Predicate>\n     not2(const _Predicate& __pred)\n@@ -1095,10 +1117,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Result\n       operator()(_Arg __x) const\n       { return _M_ptr(__x); }\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.\n   template<typename _Arg, typename _Result>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline pointer_to_unary_function<_Arg, _Result>\n     ptr_fun(_Result (*__x)(_Arg))\n     { return pointer_to_unary_function<_Arg, _Result>(__x); }\n@@ -1121,10 +1144,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Result\n       operator()(_Arg1 __x, _Arg2 __y) const\n       { return _M_ptr(__x, __y); }\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.\n   template<typename _Arg1, typename _Arg2, typename _Result>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline pointer_to_binary_function<_Arg1, _Arg2, _Result>\n     ptr_fun(_Result (*__x)(_Arg1, _Arg2))\n     { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }\n@@ -1218,7 +1242,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Ret (_Tp::*_M_f)();\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp>\n@@ -1235,7 +1259,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Ret (_Tp::*_M_f)() const;\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp>\n@@ -1252,7 +1276,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Ret (_Tp::*_M_f)();\n-  };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp>\n@@ -1269,7 +1293,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Ret (_Tp::*_M_f)() const;\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp, typename _Arg>\n@@ -1286,7 +1310,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Ret (_Tp::*_M_f)(_Arg);\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp, typename _Arg>\n@@ -1303,7 +1327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Ret (_Tp::*_M_f)(_Arg) const;\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp, typename _Arg>\n@@ -1320,7 +1344,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Ret (_Tp::*_M_f)(_Arg);\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   /// One of the @link ptrmem_adaptors adaptors for member pointers@endlink.\n   template<typename _Ret, typename _Tp, typename _Arg>\n@@ -1337,49 +1361,58 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       _Ret (_Tp::*_M_f)(_Arg) const;\n-    };\n+    } _GLIBCXX11_DEPRECATED;\n \n   // Mem_fun adaptor helper functions.  There are only two:\n   // mem_fun and mem_fun_ref.\n   template<typename _Ret, typename _Tp>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline mem_fun_t<_Ret, _Tp>\n     mem_fun(_Ret (_Tp::*__f)())\n     { return mem_fun_t<_Ret, _Tp>(__f); }\n \n   template<typename _Ret, typename _Tp>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline const_mem_fun_t<_Ret, _Tp>\n     mem_fun(_Ret (_Tp::*__f)() const)\n     { return const_mem_fun_t<_Ret, _Tp>(__f); }\n \n   template<typename _Ret, typename _Tp>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline mem_fun_ref_t<_Ret, _Tp>\n     mem_fun_ref(_Ret (_Tp::*__f)())\n     { return mem_fun_ref_t<_Ret, _Tp>(__f); }\n \n   template<typename _Ret, typename _Tp>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline const_mem_fun_ref_t<_Ret, _Tp>\n     mem_fun_ref(_Ret (_Tp::*__f)() const)\n     { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }\n \n   template<typename _Ret, typename _Tp, typename _Arg>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline mem_fun1_t<_Ret, _Tp, _Arg>\n     mem_fun(_Ret (_Tp::*__f)(_Arg))\n     { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n \n   template<typename _Ret, typename _Tp, typename _Arg>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline const_mem_fun1_t<_Ret, _Tp, _Arg>\n     mem_fun(_Ret (_Tp::*__f)(_Arg) const)\n     { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n \n   template<typename _Ret, typename _Tp, typename _Arg>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun_ref(_Ret (_Tp::*__f)(_Arg))\n     { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n \n   template<typename _Ret, typename _Tp, typename _Arg>\n+    _GLIBCXX11_DEPRECATED_SUGGEST(\"std::mem_fn\")\n     inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)\n     { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n+#pragma GCC diagnostic pop\n \n   /** @}  */\n "}, {"sha": "549a391d04de9adb80230a82510199ad4dda91b4", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -105,6 +105,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n #endif\n \n+// Ignore warnings about std::iterator.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   // 24.4.1 Reverse iterators\n   /**\n    *  Bidirectional and random access iterators have corresponding reverse\n@@ -991,6 +995,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return *this; }\n     };\n \n+#pragma GCC diagnostic pop\n+\n   /**\n    *  @param __x  A container of arbitrary type.\n    *  @param __i  An iterator into the container."}, {"sha": "9eecd1dd855c5728f1b7bcc0e6f5af681ab1a059", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -124,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,\n            typename _Pointer = _Tp*, typename _Reference = _Tp&>\n-    struct iterator\n+    struct _GLIBCXX17_DEPRECATED iterator\n     {\n       /// One of the @link iterator_tags tag types@endlink.\n       typedef _Category  iterator_category;"}, {"sha": "625760d0c298443f86afbafbc61afb3ec9a5dfb3", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -126,6 +126,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n     public:\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n       class value_compare\n       : public std::binary_function<value_type, value_type, bool>\n       {\n@@ -140,6 +142,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tbool operator()(const value_type& __x, const value_type& __y) const\n \t{ return comp(__x.first, __y.first); }\n       };\n+#pragma GCC diagnostic pop\n \n     private:\n       /// This turns a red-black tree into a [multi]map."}, {"sha": "f6b08bca3f3ecd6539dae563fcbc289a7f1e5915", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -125,6 +125,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n     public:\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n       class value_compare\n       : public std::binary_function<value_type, value_type, bool>\n       {\n@@ -139,6 +141,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tbool operator()(const value_type& __x, const value_type& __y) const\n \t{ return comp(__x.first, __y.first); }\n       };\n+#pragma GCC diagnostic pop\n \n     private:\n       /// This turns a red-black tree into a [multi]map."}, {"sha": "063c01c676d3a5978f5a6970b97aa9ca25f6b8a7", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -60,12 +60,16 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+// Ignore warnings about std::iterator.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /**\n    *  This iterator class lets algorithms store their results into\n    *  uninitialized memory.\n   */\n   template <class _OutputIterator, class _Tp>\n-    class raw_storage_iterator\n+    class _GLIBCXX17_DEPRECATED raw_storage_iterator\n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n@@ -116,6 +120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // 2454. Add raw_storage_iterator::base() member\n       _OutputIterator base() const { return _M_iter; }\n     };\n+#pragma GCC diagnostic pop\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "654c6a807478205793b897ab7667bf42ed9ef4e1", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -96,6 +96,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Provides the nothrow exception guarantee.\n    */\n   template<typename _Tp>\n+    _GLIBCXX14_DEPRECATED\n     pair<_Tp*, ptrdiff_t>\n     get_temporary_buffer(ptrdiff_t __len) _GLIBCXX_NOEXCEPT\n     {"}, {"sha": "86c5845b8355ef640ad179b7b79527f0dc718384", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -43,6 +43,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+// Ignore warnings about std::iterator.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /// Provides input iterator semantics for streams.\n   template<typename _Tp, typename _CharT = char,\n            typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>\n@@ -256,6 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator++(int) _GLIBCXX_NOEXCEPT\n       { return *this; }\n     };\n+#pragma GCC diagnostic pop\n \n   /// @} group iterators\n "}, {"sha": "72344c630880243b7a65cb3a8e6ed8ac74478d93", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -44,6 +44,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+// Ignore warnings about std::iterator.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n   // 24.5.3 Template class istreambuf_iterator\n   /// Provides input iterator semantics for streambufs.\n   template<typename _CharT, typename _Traits>\n@@ -326,6 +329,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n     };\n+#pragma GCC diagnostic pop\n \n   // Overloads for streambuf iterators.\n   template<typename _CharT>"}, {"sha": "033f132148a6e96e275e8ce2bf3694819e543153", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -277,7 +277,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // _Tp should be a pointer type.\n     template<typename _Tp>\n       class _Inclusive_between \n-      : public std::unary_function<typename std::pair<_Tp, _Tp>, bool>\n       {\n \ttypedef _Tp pointer;\n \tpointer _M_ptr_value;\n@@ -301,8 +300,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Used to pass a Functor to functions by reference.\n     template<typename _Functor>\n       class _Functor_Ref \n-      : public std::unary_function<typename _Functor::argument_type, \n-\t\t\t\t   typename _Functor::result_type>\n       {\n \t_Functor& _M_fref;\n \t\n@@ -327,16 +324,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // the vector.\n     template<typename _Tp>\n       class _Ffit_finder \n-      : public std::unary_function<typename std::pair<_Tp, _Tp>, bool>\n       {\n-\ttypedef typename std::pair<_Tp, _Tp> _Block_pair;\n-\ttypedef typename __detail::__mini_vector<_Block_pair> _BPVector;\n+\ttypedef std::pair<_Tp, _Tp> _Block_pair;\n+\ttypedef __detail::__mini_vector<_Block_pair> _BPVector;\n \ttypedef typename _BPVector::difference_type _Counter_type;\n \n \tstd::size_t* _M_pbitmap;\n \t_Counter_type _M_data_offset;\n \n       public:\n+\ttypedef bool result_type;\n+\ttypedef _Block_pair argument_type;\n+\n \t_Ffit_finder() : _M_pbitmap(0), _M_data_offset(0)\n \t{ }\n "}, {"sha": "19cd8d5b56312f6078949b7773f0bf67bcba5be5", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -64,6 +64,9 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /** The @c identity_element functions are not part of the C++\n    *  standard; SGI provided them as an extension.  Its argument is an\n    *  operation, and its return value is the identity element for that\n@@ -391,6 +394,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { _M_initialize(161803398u); }\n   };\n \n+#pragma GCC diagnostic pop\n+\n   // Mem_fun adaptor helper functions mem_fun1 and mem_fun1_ref,\n   // provided for backward compatibility, they are no longer part of\n   // the C++ standard."}, {"sha": "f8af374f042d02d2f1dc2ef64f5c033f4f39a46f", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -171,6 +171,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // behave a little like basic_ostringstream<sequence::value_type> and a\n   // little like containers.\n \n+// Ignore warnings about std::iterator.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   template<class _Sequence, std::size_t _Buf_sz = 100>\n     class sequence_buffer\n     : public std::iterator<std::output_iterator_tag, void, void, void, void>\n@@ -306,6 +310,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator++(int)\n       { return *this; }\n     };\n+#pragma GCC diagnostic pop\n   \n   // The following should be treated as private, at least for now.\n   template<class _CharT>\n@@ -430,7 +435,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Some helpers, so we can use power on ropes.\n   // See below for why this isn't local to the implementation.\n-  \n+\n+// Ignore warnings about std::binary_function.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n   // This uses a nonstandard refcount convention.\n   // The result has refcount 0.\n   template<class _CharT, class _Alloc>\n@@ -443,6 +451,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t const rope<_CharT, _Alloc>& __y)\n       { return __x + __y; }\n     };\n+#pragma GCC diagnostic pop\n \n   template <class _CharT, class _Alloc>\n     inline rope<_CharT, _Alloc>\n@@ -1059,6 +1068,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Iterators are assumed to be thread private.  Ropes can\n   // be shared.\n   \n+// Ignore warnings about std::iterator\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n   template<class _CharT, class _Alloc>\n     class _Rope_iterator_base\n     : public std::iterator<std::random_access_iterator_tag, _CharT>\n@@ -1136,6 +1148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n     };\n+#pragma GCC diagnostic pop\n \n   template<class _CharT, class _Alloc>\n     class _Rope_iterator;"}, {"sha": "220f5f5243f913081843dbc4fbed4ddcb95198d1", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -982,6 +982,9 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /// Explicit specialization of std::hash for __gnu_cxx::throw_value_limit.\n   template<>\n     struct hash<__gnu_cxx::throw_value_limit>\n@@ -1013,6 +1016,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       }\n     };\n #endif\n+\n+#pragma GCC diagnostic pop\n } // end namespace std\n #endif\n "}, {"sha": "75f50e34a06ce1150170c3334fb2b9ead776a649", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -2594,7 +2594,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Functor, typename... _ArgTypes>\n     struct result_of<_Functor(_ArgTypes...)>\n     : public __invoke_result<_Functor, _ArgTypes...>\n-    { };\n+    { } _GLIBCXX17_DEPRECATED_SUGGEST(\"std::invoke_result\");\n \n #if __cplusplus >= 201402L\n   /// Alias template for aligned_storage"}, {"sha": "83d22bed9e5a6fb9ba6ff7fdd34b7fea0b65ecce", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -264,6 +264,10 @@ namespace tr1\n       typedef void type;\n     };\n \n+// Ignore warnings about std::unary_function and std::binary_function.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /// Determines if the type _Tp derives from unary_function.\n   template<typename _Tp>\n     struct _Derives_from_unary_function : __sfinae_types\n@@ -2089,6 +2093,7 @@ namespace tr1\n       typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);\n       _Invoker_type _M_invoker;\n   };\n+#pragma GCC diagnostic pop\n \n   template<typename _Res, typename... _ArgTypes>\n     function<_Res(_ArgTypes...)>::"}, {"sha": "0146cd792f86172607e38c3d65af5f58af9b305b", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -38,6 +38,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace tr1\n {\n+// Ignore warnings about std::unary_function and std::binary_function.\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n+\n   /// Class template hash.\n   // Declaration of default hash functor std::tr1::hash.  The types for\n   // which std::tr1::hash<T> is well-defined is in clause 6.3.3. of the PDTR.\n@@ -56,6 +60,7 @@ namespace tr1\n       operator()(_Tp* __p) const\n       { return reinterpret_cast<size_t>(__p); }\n     };\n+#pragma GCC diagnostic pop\n \n   /// Explicit specializations for integer types.\n #define _TR1_hashtable_define_trivial_hash(_Tp) \t\\"}, {"sha": "35d6050814abbf5207237f513acf0de06b21ee7e", "filename": "libstdc++-v3/testsuite/20_util/function_objects/binders/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbinders%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbinders%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbinders%2F1.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -17,6 +17,7 @@\n \n // 20.3.6 Binders\n \n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n #include <functional>"}, {"sha": "23c7d0dbc5ac36cb54a8b8b0c6fc9e3ecaa50416", "filename": "libstdc++-v3/testsuite/20_util/function_objects/binders/3113.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbinders%2F3113.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbinders%2F3113.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fbinders%2F3113.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -17,6 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-add-options using-deprecated }\n \n // 20.3.6 Binders"}, {"sha": "8ff6dd187d7faa3e777775413abd386537df830d", "filename": "libstdc++-v3/testsuite/20_util/function_objects/constexpr.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -67,10 +67,12 @@ static_assert(std::bit_or<void>()(1,2)==3, \"\");\n static_assert(std::bit_xor<void>()(1,1)==0, \"\");\n static_assert(std::bit_not<void>()(std::bit_not<void>()(0))==0, \"\");\n \n-static_assert(std::unary_negate<std::logical_not<int>>\n-\t      (std::logical_not<int>())(1), \"\");\n-static_assert(std::not1(std::logical_not<int>())(1), \"\");\n+static_assert(std::unary_negate< // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n+\t      std::logical_not<int>\n+\t      >(std::logical_not<int>())(1), \"\");\n+static_assert(std::not1(std::logical_not<int>())(1), \"\"); // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n \n-static_assert(std::binary_negate<std::logical_and<int>>\n-\t      (std::logical_and<int>())(0,0), \"\");\n-static_assert(std::not2(std::logical_and<int>())(0,0), \"\");\n+static_assert(std::binary_negate< // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n+\t      std::logical_and<int>\n+\t      >(std::logical_and<int>())(0,0), \"\");\n+static_assert(std::not2(std::logical_and<int>())(0,0), \"\"); // { dg-warning \"is deprecated\" \"\" { target c++17 } }"}, {"sha": "95a901260759ef4d240b03bed13c4467c1fce00a", "filename": "libstdc++-v3/testsuite/20_util/raw_storage_iterator/base.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Fbase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Fbase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Fbase.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target c++11 } }\n+// { dg-do run }\n \n #include <memory>\n #include <testsuite_hooks.h>\n@@ -24,7 +24,7 @@ void\n test01()\n {\n   int a[2];\n-  auto it = std::raw_storage_iterator<int*, int>(a);\n+  std::raw_storage_iterator<int*, int> it(a); // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   VERIFY( it.base() == a );\n   VERIFY( (++it).base() == a+1 );\n }"}, {"sha": "b31d3fe94243825ce8bf3d9fe822a3942b131460", "filename": "libstdc++-v3/testsuite/20_util/raw_storage_iterator/dr2127.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Fdr2127.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Fdr2127.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Fdr2127.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -32,7 +32,7 @@ test01()\n {\n   char buf[sizeof(MoveOnly)*2];\n   MoveOnly* addr = (MoveOnly*)buf;\n-  std::raw_storage_iterator<MoveOnly*, MoveOnly> iter(addr);\n+  std::raw_storage_iterator<MoveOnly*, MoveOnly> iter(addr); // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   *iter++ = MoveOnly{1};\n   *iter++ = MoveOnly{2};\n   VERIFY( addr[0].i == 1 );"}, {"sha": "52947f2c1674554d1b24954aed65612eec950120", "filename": "libstdc++-v3/testsuite/20_util/raw_storage_iterator/requirements/base_classes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -29,8 +29,8 @@ void test01()\n \n   // Check for required base class.\n   long l;\n-  typedef raw_storage_iterator<long*, long> test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  typedef raw_storage_iterator<long*, long> test_iterator;                     // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   test_iterator rs_it(&l);\n   base_iterator* base __attribute__((unused)) = &rs_it;\n }"}, {"sha": "9cd713f29ad89771bfe602d7e23f4743c252cf30", "filename": "libstdc++-v3/testsuite/20_util/raw_storage_iterator/requirements/explicit_instantiation/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -22,4 +22,4 @@\n \n #include <memory>\n \n-template class std::raw_storage_iterator<int*, int>;\n+template class std::raw_storage_iterator<int*, int>; // { dg-warning \"is deprecated\" \"\" { target c++17 } }"}, {"sha": "ede9f13c29d8a24c75c3c45fbe4bce336c5ce085", "filename": "libstdc++-v3/testsuite/20_util/raw_storage_iterator/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator%2Frequirements%2Ftypedefs.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -27,7 +27,7 @@ void test01()\n   using namespace std;\n \n   // Check for required typedefs\n-  typedef raw_storage_iterator<long*, long> test_iterator;\n+  typedef raw_storage_iterator<long*, long> test_iterator; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   typedef test_iterator::value_type value_type;\n   typedef test_iterator::difference_type difference_type;\n   typedef test_iterator::pointer pointer;"}, {"sha": "91441f8332993cb8f3c227931f07539eb3e98d69", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/24803.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F24803.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F24803.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2F24803.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -28,12 +28,12 @@ struct test_type\n    int cmember2(char)const;\n };\n \n-struct functor1 : public std::unary_function<int, double>\n+struct functor1 : public std::unary_function<int, double> // { dg-warning \"is deprecated\" }\n {\n   double operator()(int) const;\n };\n \n-struct functor2 : public std::binary_function<int, char, double>\n+struct functor2 : public std::binary_function<int, char, double> // { dg-warning \"is deprecated\" }\n {\n    double operator()(int, char) const;\n };"}, {"sha": "a8f3fb244e8a3b0af478d6740b7666190277fd88", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/typedefs.cc", "status": "modified", "additions": 121, "deletions": 11, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,5 +1,5 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n-// { dg-skip-if \"result_type removed for C++20\" { c++2a } }\n \n // Copyright (C) 2008-2022 Free Software Foundation, Inc.\n //\n@@ -21,6 +21,72 @@\n #include <functional>\n #include <type_traits>\n \n+namespace __gnu_test\n+{\n+\n+template<typename T> using void_t = void;\n+\n+struct none;\n+\n+#if __cplusplus <= 201703L\n+// For C++11/14/17 if the nested type is not found, require\n+// that the test used 'none' as the expected type.\n+template<typename U> using not_found = std::is_same<U, none>;\n+// A nested type needs to match the expected type.\n+template<typename U, typename V> using found = std::is_same<U, V>;\n+#else\n+// For C++20 the nested type should always be not found.\n+template<typename U> using not_found = std::true_type;\n+// Any nested type is bad.\n+template<typename U, typename V> using found = std::false_type;\n+#endif\n+\n+template<typename T, typename U, typename = void>\n+struct check_result_type\n+: not_found<U>\n+{ };\n+\n+// Matches when reference_wrapper<T>::result_type exists\n+template<typename T, typename U>\n+struct check_result_type<T, U, void_t<typename std::reference_wrapper<T>::result_type>>\n+: found<U, typename std::reference_wrapper<T>::result_type>\n+{ };\n+\n+template<typename T, typename U, typename = void>\n+struct check_arg_type\n+: not_found<U>\n+{ };\n+\n+// Matches when reference_wrapper<T>::argument_type exists\n+template<typename T, typename U>\n+struct check_arg_type<T, U, void_t<typename std::reference_wrapper<T>::argument_type>>\n+: found<U, typename std::reference_wrapper<T>::argument_type>\n+{ };\n+\n+template<typename T, typename U, typename = void>\n+struct check_first_arg_type\n+: not_found<U>\n+{ };\n+\n+// Matches when reference_wrapper<T>::first_argument_type exists\n+template<typename T, typename U>\n+struct check_first_arg_type<T, U, void_t<typename std::reference_wrapper<T>::first_argument_type>>\n+: found<U, typename std::reference_wrapper<T>::first_argument_type>\n+{ };\n+\n+template<typename T, typename U, typename = void>\n+struct check_second_arg_type\n+: not_found<U>\n+{ };\n+\n+// Matches when reference_wrapper<T>::second_argument_type exists\n+template<typename T, typename U>\n+struct check_second_arg_type<T, U, void_t<typename std::reference_wrapper<T>::second_argument_type>>\n+: found<U, typename std::reference_wrapper<T>::second_argument_type>\n+{ };\n+\n+} // namespace __gnu_test\n+\n struct X {};\n \n struct int_result_type { typedef int result_type; };\n@@ -38,22 +104,66 @@ struct derives_unary_binary\n \n void test01()\n {\n-  using std::reference_wrapper;\n   using std::is_same;\n+  using __gnu_test::check_result_type;\n+  using __gnu_test::none;\n \n   // Check result_type typedef\n-  static_assert( is_same<reference_wrapper<int_result_type>::result_type, int>::value, \"has result_type\" );\n-  static_assert( is_same<reference_wrapper<derives_unary>::result_type, int>::value, \"has result_type\" );\n-  static_assert( is_same<reference_wrapper<derives_binary>::result_type, int>::value, \"has result_type\" );\n-  static_assert( is_same<reference_wrapper<derives_unary_binary>::result_type, int>::value, \"has result_type\" );\n-  static_assert( is_same<reference_wrapper<int(void)>::result_type, int>::value, \"has result_type\" );\n-  static_assert( is_same<reference_wrapper<int(*)(void)>::result_type, int>::value, \"has result_type\" );\n-  static_assert( is_same<reference_wrapper<int (::X::*)()>::result_type, int>::value, \"has result_type\" );\n-  static_assert( is_same<reference_wrapper<int (::X::*)(float)>::result_type, int>::value, \"has result_type\" );\n+  static_assert( check_result_type<int_result_type, int>::value, \"has result_type\" );\n+  static_assert( check_result_type<derives_unary, int>::value, \"has result_type\" );\n+  static_assert( check_result_type<derives_binary, int>::value, \"has result_type\" );\n+  static_assert( check_result_type<derives_unary_binary, int>::value, \"has result_type\" );\n+  static_assert( check_result_type<int(void), int>::value, \"has result_type\" );\n+  static_assert( check_result_type<int(*)(void), int>::value, \"has result_type\" );\n+  static_assert( check_result_type<int (::X::*)(), int>::value, \"has result_type\" );\n+  static_assert( check_result_type<int (::X::*)(float), int>::value, \"has result_type\" );\n+}\n+\n+void test02()\n+{\n+  using __gnu_test::check_arg_type;\n+  using __gnu_test::check_first_arg_type;\n+  using __gnu_test::check_second_arg_type;\n+  using __gnu_test::none;\n+\n+  // Check argument_type typedef\n+  static_assert( check_arg_type<int_result_type, none>::value, \"\" );\n+  static_assert( check_arg_type<derives_unary, int>::value, \"\" );\n+  static_assert( check_arg_type<derives_binary, none>::value, \"\" );\n+  static_assert( check_arg_type<derives_unary_binary, int>::value, \"\" );\n+  static_assert( check_arg_type<int(void), none>::value, \"\" );\n+  static_assert( check_arg_type<int(*)(void), none>::value, \"\" );\n+  static_assert( check_arg_type<int (::X::*)(), X*>::value, \"\" );\n+  static_assert( check_arg_type<int (::X::*)() const, const X*>::value, \"\" );\n+  static_assert( check_arg_type<int (::X::*)(float), none>::value, \"\" );\n+  static_assert( check_arg_type<int (::X::*)(char, char), none>::value, \"\" );\n+\n+  // Check first_argument_type typedef\n+  static_assert( check_first_arg_type<int_result_type, none>::value, \"\" );\n+  static_assert( check_first_arg_type<derives_unary, none>::value, \"\" );\n+  static_assert( check_first_arg_type<derives_binary, int>::value, \"\" );\n+  static_assert( check_first_arg_type<derives_unary_binary, int>::value, \"\" );\n+  static_assert( check_first_arg_type<int(void), none>::value, \"\" );\n+  static_assert( check_first_arg_type<int(*)(void), none>::value, \"\" );\n+  static_assert( check_first_arg_type<int (::X::*)(), none>::value, \"\" );\n+  static_assert( check_first_arg_type<int (::X::*)(float), X*>::value, \"\" );\n+  static_assert( check_first_arg_type<int (::X::*)(float) const, const X*>::value, \"\" );\n+  static_assert( check_first_arg_type<int (::X::*)(char, char), none>::value, \"\" );\n+\n+  // Check second_argument_type typedef\n+  static_assert( check_second_arg_type<int_result_type, none>::value, \"\" );\n+  static_assert( check_second_arg_type<derives_unary, none>::value, \"\" );\n+  static_assert( check_second_arg_type<derives_binary, float>::value, \"\" );\n+  static_assert( check_second_arg_type<derives_unary_binary, float>::value, \"\" );\n+  static_assert( check_second_arg_type<int(void), none>::value, \"\" );\n+  static_assert( check_second_arg_type<int(*)(void), none>::value, \"\" );\n+  static_assert( check_second_arg_type<int (::X::*)(), none>::value, \"\" );\n+  static_assert( check_second_arg_type<int (::X::*)(float), float>::value, \"\" );\n+  static_assert( check_second_arg_type<int (::X::*)(float) const, float>::value, \"\" );\n+  static_assert( check_second_arg_type<int (::X::*)(char, char), none>::value, \"\" );\n }\n \n int main()\n {\n   test01();\n-  return 0;\n }"}, {"sha": "5061e995cc9807b85c8f03c9ee44f3c9f6e32fa7", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/comparison/less.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fless.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -27,7 +27,7 @@ struct A { };\n namespace std\n {\n   template<>\n-    struct less<A*> : binary_function<A*,A*,bool>\n+    struct less<A*>\n     {\n       static int count;\n       bool operator()(A* l, A* r) { ++count; return l < r; }"}, {"sha": "3f3625961b62a4afea5726691ab3938d18b3d1ab", "filename": "libstdc++-v3/testsuite/20_util/temporary_buffer.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -27,7 +27,7 @@ struct junk { char j[12]; };\n int main(void)\n {\n   typedef std::pair<junk*, std::ptrdiff_t> pair_type;\n-  pair_type results = std::get_temporary_buffer<junk>(5);\n+  pair_type results = std::get_temporary_buffer<junk>(5); // { dg-warning \"deprecated\" \"\" { target c++14 } }\n \n   if (results.second != 0)\n   {"}, {"sha": "5279e4398e8c0849a1c0f4652536fadfaa778a39", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/69092.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F69092.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F69092.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F69092.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -22,7 +22,14 @@\n #include <string>\n #include <iterator>\n \n-struct hate_T_iterator : std::iterator<std::forward_iterator_tag, char> {\n+struct hate_T_iterator {\n+\n+    typedef std::forward_iterator_tag iterator_category;\n+    typedef char value_type;\n+    typedef std::ptrdiff_t difference_type;\n+    typedef char* pointer;\n+    typedef char& reference;\n+\n     explicit hate_T_iterator(char* p) : p(p) {}\n     char* p;\n "}, {"sha": "3a3208ab48583e5f8b986aa08e497d9f9c28bf1d", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -30,7 +30,7 @@ void test01()\n   // Check for required base class.\n   list<int> l;\n   typedef back_insert_iterator<list<int> > test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   test_iterator  r_it(l);\n   base_iterator* base __attribute__((unused)) = &r_it;\n }"}, {"sha": "7fd4932947a6bf9dfc3a3266bc001bdacf4ad065", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -30,7 +30,7 @@ void test01()\n   // Check for required base class.\n   list<int> l;\n   typedef front_insert_iterator<list<int> > test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   test_iterator  r_it(l);\n   base_iterator* base __attribute__((unused)) = &r_it;\n }"}, {"sha": "eafb6b24f9987562c8b55d7f9856a8f310044424", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -32,7 +32,7 @@ void test01()\n   list<int>::iterator li = l.begin();\n \n   typedef insert_iterator<list<int> > test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   test_iterator  r_it(l, li);\n   base_iterator* base __attribute__((unused)) = &r_it;\n }"}, {"sha": "a3d395283825deeadefa57c2a01fe892104d2105", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -30,7 +30,7 @@ void test01()\n \n   // Check for required base class.\n   typedef istream_iterator<long> test_iterator;\n-  typedef iterator<input_iterator_tag, long, ptrdiff_t, const long*, \n+  typedef iterator<input_iterator_tag, long, ptrdiff_t, const long*, // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n     \t\t   const long&> base_iterator;\n   test_iterator  r_it;\n   base_iterator* base __attribute__((unused)) = &r_it;"}, {"sha": "07f46a99ed3d54450a1143d75863a4f3514a72a7", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/92285.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F92285.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F92285.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2F92285.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -24,8 +24,8 @@\n \n typedef std::input_iterator_tag category;\n typedef std::char_traits<char>::off_type off_type;\n-typedef std::iterator<category, char, off_type, char*, char> good;\n-typedef std::iterator<category, char, off_type, char*, char&> bad;\n+typedef std::iterator<category, char, off_type, char*, char> good; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n+typedef std::iterator<category, char, off_type, char*, char&> bad; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n \n bool check(good&) { return true; }\n void check(bad&) { }"}, {"sha": "3540362d56ea2ff9f64e0c78abb577ece4fb27fe", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator/requirements/base_classes.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -32,8 +32,9 @@ void test01()\n   typedef istreambuf_iterator<char> test_iterator;\n   typedef char_traits<char>::off_type off_type;\n \n-  // This is the base class required since LWG 445, which differs from C++03:\n-  typedef iterator<input_iterator_tag, char, off_type, char*, char>\n+  // This is the base class required since LWG 445, which differs from C++03.\n+  // We derive from this unconditionally, then override 'reference' for C++03.\n+  typedef iterator<input_iterator_tag, char, off_type, char*, char> // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n     base_iterator;\n \n   istringstream isstream(\"this tag\");"}, {"sha": "a979ac9f95f08ab80831c6fbf93e6dfc7720a22e", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -30,7 +30,7 @@ void test01()\n \n   // Check for required base class.\n   typedef ostream_iterator<long> test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   ostringstream osstream(\"this tag\");\n   test_iterator  r_it(osstream);\n   base_iterator* base __attribute__((unused)) = &r_it;"}, {"sha": "c7cfd805a842f8601a8e88f1584fca3c5e10fa01", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -30,7 +30,7 @@ void test01()\n \n   // Check for required base class.\n   typedef ostreambuf_iterator<char> test_iterator;\n-  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator; // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n   ostringstream osstream(\"this tag\");\n   test_iterator  r_it(osstream);\n   base_iterator* base __attribute__((unused)) = &r_it;"}, {"sha": "4de138c0c5d5a98dacbf0089982d3dcc09485b1b", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -29,7 +29,7 @@ void test01()\n   // Check for required base class.\n   long l;\n   typedef reverse_iterator<long*> test_iterator;\n-  typedef iterator<iterator_traits<long*>::iterator_category,\n+  typedef iterator<iterator_traits<long*>::iterator_category, // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n \t\t   iterator_traits<long*>::value_type,\n \t\t   iterator_traits<long*>::difference_type,\n \t\t   iterator_traits<long*>::pointer,"}, {"sha": "d2ff02896ded6ffe2a51af695e527615a2b9ed63", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template bool all_of(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "5cc29a6dfb7fb9ff6b331cda103c1d6128c89715", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -32,4 +33,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template bool all_of(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "910b1173049efaa4842c419dc62f357349c75e3d", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template bool any_of(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "d170961314270adb8d00322911766a737d83b19e", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -32,4 +33,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template bool any_of(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "d9bd3b6ea7d3fcc8346a3a45c06033db06b1e537", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/34595.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -21,7 +21,7 @@\n #include <testsuite_hooks.h>\n \n class Counting_output_iterator\n-: public std::iterator< std::output_iterator_tag, void, void, void, void >\n+: public std::iterator< std::output_iterator_tag, void, void, void, void >  // { dg-warning \"is deprecated\" \"\" { target c++17 } }\n {\n   std::size_t c;\n public:"}, {"sha": "975c946cb727fd1a6ca68701a92f7915f7049c5f", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -32,6 +33,6 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n-  template iterator_type copy_if(iterator_type, iterator_type, \n+  template iterator_type copy_if(iterator_type, iterator_type,\n \t\t\t\t iterator_type, predicate_type);\n-} \n+}"}, {"sha": "3f58dc53d588eaeef7954083d13ae80985524e98", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -31,6 +32,6 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n-  template iterator_type copy_if(iterator_type, iterator_type, \n+  template iterator_type copy_if(iterator_type, iterator_type,\n \t\t\t\t iterator_type, predicate_type);\n-} \n+}"}, {"sha": "7431baf430158f3b2af2e426b867331caa6c2051", "filename": "libstdc++-v3/testsuite/25_algorithms/count_if/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -34,4 +35,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template difference_type count_if(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "2699d29075bcc5d12720360c5c4a2c266c848a57", "filename": "libstdc++-v3/testsuite/25_algorithms/count_if/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template difference_type count_if(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "d2a0479af03790df77dc3a736cd671a3ad68d7af", "filename": "libstdc++-v3/testsuite/25_algorithms/find_end/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -38,4 +39,4 @@ namespace std\n   template iterator_type find_end(iterator_type, iterator_type,\n \t\t\t\t  iterator_type, iterator_type,\n \t\t\t\t  predicate_type);\n-} \n+}"}, {"sha": "684152a0cf344596511ccbc812d5c166c79b0b96", "filename": "libstdc++-v3/testsuite/25_algorithms/find_end/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-additional-options \"-Wno-deprecated-declarations\" { target c++11 } }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n \n@@ -37,4 +38,4 @@ namespace std\n   template iterator_type find_end(iterator_type, iterator_type,\n \t\t\t\t  iterator_type, iterator_type,\n \t\t\t\t  predicate_type);\n-} \n+}"}, {"sha": "6dd6f9f7b7b80a33b319c719c20bec302ae3e9b1", "filename": "libstdc++-v3/testsuite/25_algorithms/find_first_of/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-additional-options \"-Wno-deprecated-declarations\" { target c++11 } }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n \n@@ -38,4 +39,4 @@ namespace std\n   template iterator_type find_first_of(iterator_type, iterator_type,\n \t\t\t\t       iterator_type, iterator_type,\n \t\t\t\t       predicate_type);\n-} \n+}"}, {"sha": "8ec2b21ebdbd7244c8614026fb46bebef4edaf67", "filename": "libstdc++-v3/testsuite/25_algorithms/find_first_of/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-additional-options \"-Wno-deprecated-declarations\" { target c++11 } }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n \n@@ -37,4 +38,4 @@ namespace std\n   template iterator_type find_first_of(iterator_type, iterator_type,\n \t\t\t\t       iterator_type, iterator_type,\n \t\t\t\t       predicate_type);\n-} \n+}"}, {"sha": "f3cd559f49c3006018dcc95c196f278e72eccbcf", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template iterator_type find_if(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "2326cb869259ca58898dd332930ef2a43e068e2f", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -32,4 +33,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template iterator_type find_if(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "9f87232909bfd19e2139aeb12bec6af37b6c775b", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if_not/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template iterator_type find_if_not(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "042eacef0ac163d62179ca922f918b6b1f3e2ca5", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if_not/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -32,4 +33,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template iterator_type find_if_not(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "f7e09f8acb418886c0a9f31136ac720f21c1570f", "filename": "libstdc++-v3/testsuite/25_algorithms/for_each/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -32,6 +33,6 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, void> function_type;\n \n-  template function_type for_each(iterator_type, iterator_type, \n+  template function_type for_each(iterator_type, iterator_type,\n \t\t\t\t  function_type);\n-} \n+}"}, {"sha": "eb2ddaf4a1293bc02034db67a8b6a2cdeb5de297", "filename": "libstdc++-v3/testsuite/25_algorithms/for_each/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -31,6 +32,6 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, void> function_type;\n \n-  template function_type for_each(iterator_type, iterator_type, \n+  template function_type for_each(iterator_type, iterator_type,\n \t\t\t\t  function_type);\n-} \n+}"}, {"sha": "7be1f402372f0148be8162652346c2b19252550e", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template bool is_partitioned(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "2cc9e806a14063d913a10e8817844435e346e5a6", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -32,4 +33,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template bool is_partitioned(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "8940b4dbe3747ca3ed79d64d9fd884cca4bab9db", "filename": "libstdc++-v3/testsuite/25_algorithms/is_permutation/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2011-01-13  Paolo Carlini  <paolo.carlini@oracle.com>"}, {"sha": "d7b38c999ec63b1b81663b3f804d19c5af8fe45e", "filename": "libstdc++-v3/testsuite/25_algorithms/is_permutation/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2011-01-13  Paolo Carlini  <paolo.carlini@oracle.com>"}, {"sha": "73e0c3382a47072e0eb26b90efb68a948375b955", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/3.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F3.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -24,8 +24,11 @@\n #include <testsuite_hooks.h>\n \n struct compare_counter\n-  : std::binary_function<int, int, bool>\n {\n+  typedef int result_type;\n+  typedef int first_argument_type;\n+  typedef bool second_argument_type;\n+\n   static int count;\n   \n   bool operator()(int a, int b) const"}, {"sha": "e4460da245831cbb2d0aeb67c65ffa56046d668a", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template bool none_of(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "52e6dbb86f609a29a22bd480a2bea10fb1dbff92", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -32,4 +33,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template bool none_of(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "a2b97ba585ccbe69db98253d12cdc0ff829b1781", "filename": "libstdc++-v3/testsuite/25_algorithms/partition/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -34,4 +35,4 @@ namespace std\n \n   template iterator_type partition(iterator_type, iterator_type,\n \t\t\t\t   predicate_type);\n-} \n+}"}, {"sha": "4d9a8e4e3d5ac7271ec73ac1ab63e5c8c3dbaab4", "filename": "libstdc++-v3/testsuite/25_algorithms/partition/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -33,4 +34,4 @@ namespace std\n \n   template iterator_type partition(iterator_type, iterator_type,\n \t\t\t\t   predicate_type);\n-} \n+}"}, {"sha": "e8924b4f4cf6949c4487a17edf3d884159c95953", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -35,4 +36,4 @@ namespace std\n   template pair<iterator_type, iterator_type>\n     partition_copy(iterator_type, iterator_type,\n \t\t   iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "aa5fed21d2644d1f9e54fbc052ebab3351a15927", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -32,6 +33,6 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template pair<iterator_type, iterator_type>\n-    partition_copy(iterator_type, iterator_type, \n+    partition_copy(iterator_type, iterator_type,\n \t\t   iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "7d18728c92aa5adcc9ecdb44989638ab41a9e6c0", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_point/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template iterator_type partition_point(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "d91955c452cba2b4a77b18faa4f2cdf1efdc6669", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_point/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile { target c++11 } }\n \n // 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n@@ -32,4 +33,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template iterator_type partition_point(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "b3c7f0c01f0cc6cafdaff8ce47087de87ceedd48", "filename": "libstdc++-v3/testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n // { dg-add-options using-deprecated }\n "}, {"sha": "52a8db0000f258fe52f3d4238c5094279bfa5ad3", "filename": "libstdc++-v3/testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-add-options using-deprecated }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>"}, {"sha": "97085ffcc61013c245d2ac7d4f61535a3566decb", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_copy_if/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -32,6 +33,6 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n-  template iterator_type remove_copy_if(iterator_type, iterator_type, \n+  template iterator_type remove_copy_if(iterator_type, iterator_type,\n \t\t\t\t\titerator_type, predicate_type);\n-} \n+}"}, {"sha": "2e019bc44f9f895e0a590959bf72e3fc28209c3b", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_copy_if/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -31,6 +32,6 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n-  template iterator_type remove_copy_if(iterator_type, iterator_type, \n+  template iterator_type remove_copy_if(iterator_type, iterator_type,\n \t\t\t\t\titerator_type, predicate_type);\n-} \n+}"}, {"sha": "2a110269253e10a109410f2be7dac4fe3b813ce3", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_if/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -32,6 +33,6 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n-  template iterator_type remove_if(iterator_type, iterator_type, \n+  template iterator_type remove_if(iterator_type, iterator_type,\n \t\t\t\t   predicate_type);\n-} \n+}"}, {"sha": "a1af922f395856db39b7382066bd58d903472763", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_if/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -31,6 +32,6 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n-  template iterator_type remove_if(iterator_type, iterator_type, \n+  template iterator_type remove_if(iterator_type, iterator_type,\n \t\t\t\t   predicate_type);\n-} \n+}"}, {"sha": "9f9ed215d437afc8caf8bf602a44eaf71bc290d2", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy_if/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -32,7 +33,7 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n-  template iterator_type replace_copy_if(iterator_type, iterator_type, \n+  template iterator_type replace_copy_if(iterator_type, iterator_type,\n \t\t\t\t\t iterator_type, predicate_type,\n \t\t\t\t\t const value_type&);\n-} \n+}"}, {"sha": "7c2c86f38028d3455628619d07688acc285d30b4", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy_if/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -31,7 +32,7 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n-  template iterator_type replace_copy_if(iterator_type, iterator_type, \n+  template iterator_type replace_copy_if(iterator_type, iterator_type,\n \t\t\t\t\t iterator_type, predicate_type,\n \t\t\t\t\t const value_type&);\n-} \n+}"}, {"sha": "54518a6bbc6c2f48974f2756ae73a274bb09cd49", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_if/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -34,4 +35,4 @@ namespace std\n \n   template void replace_if(iterator_type, iterator_type, predicate_type,\n \t\t\t   const value_type&);\n-} \n+}"}, {"sha": "513e35c814b5e505aa8c62efdc95beeccd0e3289", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_if/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -33,4 +34,4 @@ namespace std\n \n   template void replace_if(iterator_type, iterator_type, predicate_type,\n \t\t\t   const value_type&);\n-} \n+}"}, {"sha": "847e5caf4a20063c0db7d30a57934f4b5f6bfe96", "filename": "libstdc++-v3/testsuite/25_algorithms/search/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -32,9 +33,9 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_binary_function<value_type, value_type, bool> predicate_type;\n \n-  template iterator_type search(iterator_type, iterator_type, \n+  template iterator_type search(iterator_type, iterator_type,\n \t\t\t\titerator_type, iterator_type);\n \n-  template iterator_type search(iterator_type, iterator_type, \n+  template iterator_type search(iterator_type, iterator_type,\n \t\t\t\titerator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "3890d2af610fb625bcaad1c52df0ae328dfe2768", "filename": "libstdc++-v3/testsuite/25_algorithms/search/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -31,9 +32,9 @@ namespace std\n   typedef value_type* \t\titerator_type;\n   typedef std::pointer_to_binary_function<value_type, value_type, bool> predicate_type;\n \n-  template iterator_type search(iterator_type, iterator_type, \n+  template iterator_type search(iterator_type, iterator_type,\n \t\t\t\titerator_type, iterator_type);\n \n-  template iterator_type search(iterator_type, iterator_type, \n+  template iterator_type search(iterator_type, iterator_type,\n \t\t\t\titerator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "4668695f4546cdfad3629d5cbad2861ec0c1316b", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -33,9 +34,9 @@ namespace std\n   typedef std::size_t \t\tsize_type;\n   typedef std::pointer_to_binary_function<value_type, value_type, bool> predicate_type;\n \n-  template iterator_type search_n(iterator_type, iterator_type, \n+  template iterator_type search_n(iterator_type, iterator_type,\n \t\t\t\t  size_type, const value_type&);\n \n-  template iterator_type search_n(iterator_type, iterator_type, \n+  template iterator_type search_n(iterator_type, iterator_type,\n \t\t\t\t  size_type, const value_type&, predicate_type);\n-} \n+}"}, {"sha": "f32eba11e841356b91d849af7b78a22a5faeb7c7", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -32,9 +33,9 @@ namespace std\n   typedef std::size_t \t\tsize_type;\n   typedef std::pointer_to_binary_function<value_type, value_type, bool> predicate_type;\n \n-  template iterator_type search_n(iterator_type, iterator_type, \n+  template iterator_type search_n(iterator_type, iterator_type,\n \t\t\t\t  size_type, const value_type&);\n \n-  template iterator_type search_n(iterator_type, iterator_type, \n+  template iterator_type search_n(iterator_type, iterator_type,\n \t\t\t\t  size_type, const value_type&, predicate_type);\n-} \n+}"}, {"sha": "f2e4419f2fffd21d28d9d4da8f5992f0f70ae757", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -33,4 +34,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template iterator_type stable_partition(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "e4e098001de6f9c97e21de77e8b212075b315f6f", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -32,4 +33,4 @@ namespace std\n   typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n \n   template iterator_type stable_partition(iterator_type, iterator_type, predicate_type);\n-} \n+}"}, {"sha": "484d705568ea84fa3c3e5dfc887e1853287a4c73", "filename": "libstdc++-v3/testsuite/25_algorithms/transform/requirements/explicit_instantiation/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -37,4 +38,4 @@ namespace std\n \t\t\t\t   operator1_type);\n   template iterator_type transform(iterator_type, iterator_type, iterator_type,\n \t\t\t\t   iterator_type, operator2_type);\n-} \n+}"}, {"sha": "59c9730a2f73d9846ad700339655ab97a91e60d8", "filename": "libstdc++-v3/testsuite/25_algorithms/transform/requirements/explicit_instantiation/pod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ftransform%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // 2007-09-20 Benjamin Kosnik <bkoz@redhat.com>\n@@ -36,4 +37,4 @@ namespace std\n \t\t\t\t   operator1_type);\n   template iterator_type transform(iterator_type, iterator_type, iterator_type,\n \t\t\t\t   iterator_type, operator2_type);\n-} \n+}"}, {"sha": "c4e7c5ed439e9331f934db5c23e95eb0f6332402", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/wchar_t/9178.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9178.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9178.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9178.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -178,7 +178,7 @@ void test01()\n     {\n       transform(tmpstr.begin(), tmpstr.end(),\n \t\tback_inserter(str1),\n-\t\tbind1st(std::mem_fun(&std::wios::widen), &stream));\n+\t\tbind1st(std::mem_fun(&std::wios::widen), &stream)); // { dg-warning \"is deprecated\" \"\" { target c++11 } }\n     }\n \t\n   fbuf1.sputn(str1.data(), str1.size());"}, {"sha": "7b7fd8f3d80a89da79bfcf65e7ac4e103427d676", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/priority_queue_erase_if.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_erase_if.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_erase_if.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_erase_if.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -61,7 +61,7 @@ main()\n \n   // Now we erase all values that satisfy some predicate, in this case\n   // one that returns true for all those larger than 500.\n-  p.erase_if(bind1st(less<int>(), 500));\n+  p.erase_if(bind1st(less<int>(), 500)); // { dg-warning \"is deprecated\" \"\" { target c++11 } }\n \n   // The largest value should be now 500.\n   assert(p.top() == 500);"}, {"sha": "141359fd30b226e54f40946f043cfae955328351", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/priority_queue_split_join.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_split_join.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_split_join.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_split_join.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -101,7 +101,7 @@ main()\n     cout <<* it << endl;\n \n   // Now split the queues.\n-  even_p.split(bind2nd(modulus<int>(), 2), odd_p);\n+  even_p.split(bind2nd(modulus<int>(), 2), odd_p); // { dg-warning \"is deprecated\" \"\" { target c++11 } }\n \n   // Check that each one contains the appropriate 10 values.\n "}, {"sha": "1653ad48094a7f045dfdc308758dfb5708fad0cc", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/reference_wrapper/typedefs.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Freference_wrapper%2Ftypedefs.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-Wno-deprecated-declarations\" }\n+\n // 2.1 reference wrappers\n #include <tr1/functional>\n #include <tr1/type_traits>"}, {"sha": "4fbdec95383a2ba4d12fe58b5fc36fc370c2f81d", "filename": "libstdc++-v3/testsuite/tr1/6_containers/hash/requirements/base_classes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Frequirements%2Fbase_classes.cc?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options \"-Wno-deprecated-declarations\" }\n // { dg-do compile }\n \n // Copyright (C) 2007-2022 Free Software Foundation, Inc."}, {"sha": "818957577be68d611696ff429a1351baf5382444", "filename": "libstdc++-v3/testsuite/util/regression/trait/erase_if_fn.hpp", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Ferase_if_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Ferase_if_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Ferase_if_fn.hpp?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -48,12 +48,14 @@ namespace __gnu_pbds\n     {\n       template<typename T>\n       struct regression_test_erase_if_fn\n-      : public std::unary_function<T, bool>\n       {\n       private:\n \ttypedef const T&  const_reference;\n \n       public:\n+\ttypedef bool result_type;\n+\ttypedef T argument_type;\n+\n \tbool\n         operator()(const_reference r_t) const\n \t{\n@@ -64,14 +66,16 @@ namespace __gnu_pbds\n \n       template<typename Hd, class Tl>\n       struct regression_test_erase_if_fn<std::pair<Hd, Tl> >\n-      : public std::unary_function<std::pair<Hd, Tl>, bool>\n       {\n       private:\n \ttypedef const std::pair<Hd, Tl>&  const_reference;\n \ttypedef regression_test_erase_if_fn<Hd> hd_erase_if_fn;\n \ttypedef regression_test_erase_if_fn<Tl> tl_erase_if_fn;\n \n       public:\n+\ttypedef bool result_type;\n+\ttypedef std::pair<Hd, Tl> argument_type;\n+\n \tbool\n         operator()(const_reference r_t) const\n \t{"}, {"sha": "252f6e4542554f55098334a87a3574720e4851d3", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de196e5dd8ea4d0ed01a8c265afdd3676e27545b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=de196e5dd8ea4d0ed01a8c265afdd3676e27545b", "patch": "@@ -122,13 +122,18 @@ namespace __gnu_test\n    */\n   template<class T>\n   struct output_iterator_wrapper\n-  : public std::iterator<std::output_iterator_tag, void, std::ptrdiff_t, void, void>\n   {\n   protected:\n     output_iterator_wrapper() : ptr(0), SharedInfo(0)\n     { }\n \n   public:\n+    typedef std::output_iterator_tag iterator_category;\n+    typedef T value_type;\n+    typedef std::ptrdiff_t difference_type;\n+    typedef T* pointer;\n+    typedef T& reference;\n+\n     typedef OutputContainer<T> ContainerType;\n     T* ptr;\n     ContainerType* SharedInfo;\n@@ -209,8 +214,6 @@ namespace __gnu_test\n    */\n   template<class T>\n   class input_iterator_wrapper\n-  : public std::iterator<std::input_iterator_tag, typename remove_cv<T>::type,\n-\t\t\t std::ptrdiff_t, T*, T&>\n   {\n     struct post_inc_proxy\n     {\n@@ -228,6 +231,12 @@ namespace __gnu_test\n     { }\n \n   public:\n+    typedef std::input_iterator_tag iterator_category;\n+    typedef typename remove_cv<T>::type value_type;\n+    typedef std::ptrdiff_t difference_type;\n+    typedef T* pointer;\n+    typedef T& reference;\n+\n     typedef BoundsContainer<T> ContainerType;\n     T* ptr;\n     ContainerType* SharedInfo;"}]}