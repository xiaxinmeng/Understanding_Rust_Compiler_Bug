{"sha": "7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1MGNkZWZmYmQzZmNiNDAyOWVlZTBjMGQ4NWY0ZWExOWZjYzQ3Zg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-05-03T11:49:12Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-05-03T11:49:12Z"}, "message": "type_traits (enable_if): New.\n\n2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/type_traits (enable_if): New.\n\t(conditional): New.\n\t(__decay_selector, decay): New.\n\t(__cv_selector, __match_cv_qualifiers): New.\n\t(__make_unsigned, __make_unsigned_selector, make_unsigned): New.\n\t(__make_signed, __make_signed_selector, make_signed): New.\n\t(has_trivial_constructor): ... to has_trivial_default_constructor.\n\t(has_nothrow_constructor): ... to has_nothrow_default_constructor.\n\t(has_trivial_copy): ... to has_trivial_copy_constructor.\n\t(has_nothrow_copy): ... to has_nothrow_copy_constructor.\n\n\t* include/tr1/type_traits_fwd: Move to...\n\t* include/tr1/type_traitsfwd: ... this, consistency with\n\tios/string/locale forward headers.\n\t* include/tr1/type_traits: Adjust include.\t\n\t* include/Makefile.am (tr1_headers): Change type_traits_fwd.h to\n\ttype_traitsfwd.h.\n\t* include/Makefile.in: Regenerate.\n\n\t* testsuite/23_containers/tuple: Move...\n\t* testsuite/20_util/tuple:... here.\n\n\t* testsuite/20_util/conditional: New.\n\t* testsuite/20_util/conditional/requirements: Same.\n\t* testsuite/20_util/conditional/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/conditional/requirements/typedefs.cc: Same.\n\t* testsuite/20_util/decay: Same.\n\t* testsuite/20_util/decay/requirements: Same.\n\t* testsuite/20_util/decay/requirements/explicit_instantiation.cc: Same.\n\t* testsuite/20_util/decay/requirements/typedefs.cc: Same.\n\t* testsuite/20_util/enable_if: Same.\n\t* testsuite/20_util/enable_if/requirements: Same.\n\t* testsuite/20_util/enable_if/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/enable_if/requirements/typedefs.cc: Same.\n\t* testsuite/20_util/enable_if/requirements/typedefs_neg.cc: Same.\n\t* testsuite/20_util/has_nothrow_copy_constructor: Same.\n\t* testsuite/20_util/has_nothrow_copy_constructor/requirements: Same.\n\t* testsuite/20_util/has_nothrow_copy_constructor/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/has_nothrow_copy_constructor/requirements/\n\ttypedefs.cc: Same.\n\t* testsuite/20_util/has_nothrow_copy_constructor/value.cc: Same.\n\t* testsuite/20_util/has_nothrow_default_constructor: Same.\n\t* testsuite/20_util/has_nothrow_default_constructor/requirements: Same.\n\t* testsuite/20_util/has_nothrow_default_constructor/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/has_nothrow_default_constructor/requirements/\n\ttypedefs.cc: Same.\n\t* testsuite/20_util/has_nothrow_default_constructor/value.cc: Same.\n\t* testsuite/20_util/has_trivial_copy_constructor: Same.\n\t* testsuite/20_util/has_trivial_copy_constructor/requirements: Same.\n\t* testsuite/20_util/has_trivial_copy_constructor/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/has_trivial_copy_constructor/requirements/\n\ttypedefs.cc: Same.\n\t* testsuite/20_util/has_trivial_copy_constructor/value.cc: Same.\n\t* testsuite/20_util/has_trivial_default_constructor: Same.\n\t* testsuite/20_util/has_trivial_default_constructor/requirements: Same.\n\t* testsuite/20_util/has_trivial_default_constructor/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/has_trivial_default_constructor/requirements/\n\ttypedefs.cc: Same.\n\t* testsuite/20_util/has_trivial_default_constructor/value.cc: Same.\n\t* testsuite/20_util/headers/type_traits/types_std_c++0x_neg.cc: Same.\n\t* testsuite/20_util/make_signed: Same.\n\t* testsuite/20_util/make_signed/requirements: Same.\n\t* testsuite/20_util/make_signed/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/make_signed/requirements/typedefs.cc: Same.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Same.\n\t* testsuite/20_util/make_unsigned: Same.\n\t* testsuite/20_util/make_unsigned/requirements: Same.\n\t* testsuite/20_util/make_unsigned/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs.cc: Same.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Same.\n\nFrom-SVN: r124374", "tree": {"sha": "0eaf34c95af482c6071365bbd8c1795345165567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eaf34c95af482c6071365bbd8c1795345165567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/comments", "author": null, "committer": null, "parents": [{"sha": "df582833001a9f1038970b65f2c06747ec29fdae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df582833001a9f1038970b65f2c06747ec29fdae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df582833001a9f1038970b65f2c06747ec29fdae"}], "stats": {"total": 1574, "additions": 1568, "deletions": 6}, "files": [{"sha": "48a0494cb5bd108df6a8664a6cb32504f4169fe7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -1,3 +1,84 @@\n+2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/type_traits (enable_if): New.\n+\t(conditional): New.\n+\t(__decay_selector, decay): New.\n+\t(__cv_selector, __match_cv_qualifiers): New.\n+\t(__make_unsigned, __make_unsigned_selector, make_unsigned): New.\n+\t(__make_signed, __make_signed_selector, make_signed): New.\n+\t(has_trivial_constructor): ... to has_trivial_default_constructor.\n+\t(has_nothrow_constructor): ... to has_nothrow_default_constructor.\n+\t(has_trivial_copy): ... to has_trivial_copy_constructor.\n+\t(has_nothrow_copy): ... to has_nothrow_copy_constructor.\n+\n+\t* include/tr1/type_traits_fwd: Move to...\n+\t* include/tr1/type_traitsfwd: ... this, consistency with\n+\tios/string/locale forward headers.\n+\t* include/tr1/type_traits: Adjust include.\t\n+\t* include/Makefile.am (tr1_headers): Change type_traits_fwd.h to\n+\ttype_traitsfwd.h.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* testsuite/23_containers/tuple: Move...\n+\t* testsuite/20_util/tuple:... here.\n+\n+\t* testsuite/20_util/conditional: New.\n+\t* testsuite/20_util/conditional/requirements: Same.\n+\t* testsuite/20_util/conditional/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/conditional/requirements/typedefs.cc: Same.\n+\t* testsuite/20_util/decay: Same.\n+\t* testsuite/20_util/decay/requirements: Same.\n+\t* testsuite/20_util/decay/requirements/explicit_instantiation.cc: Same.\n+\t* testsuite/20_util/decay/requirements/typedefs.cc: Same.\n+\t* testsuite/20_util/enable_if: Same.\n+\t* testsuite/20_util/enable_if/requirements: Same.\n+\t* testsuite/20_util/enable_if/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/enable_if/requirements/typedefs.cc: Same.\n+\t* testsuite/20_util/enable_if/requirements/typedefs_neg.cc: Same.\n+\t* testsuite/20_util/has_nothrow_copy_constructor: Same.\n+\t* testsuite/20_util/has_nothrow_copy_constructor/requirements: Same.\n+\t* testsuite/20_util/has_nothrow_copy_constructor/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/has_nothrow_copy_constructor/requirements/\n+\ttypedefs.cc: Same.\n+\t* testsuite/20_util/has_nothrow_copy_constructor/value.cc: Same.\n+\t* testsuite/20_util/has_nothrow_default_constructor: Same.\n+\t* testsuite/20_util/has_nothrow_default_constructor/requirements: Same.\n+\t* testsuite/20_util/has_nothrow_default_constructor/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/has_nothrow_default_constructor/requirements/\n+\ttypedefs.cc: Same.\n+\t* testsuite/20_util/has_nothrow_default_constructor/value.cc: Same.\n+\t* testsuite/20_util/has_trivial_copy_constructor: Same.\n+\t* testsuite/20_util/has_trivial_copy_constructor/requirements: Same.\n+\t* testsuite/20_util/has_trivial_copy_constructor/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/has_trivial_copy_constructor/requirements/\n+\ttypedefs.cc: Same.\n+\t* testsuite/20_util/has_trivial_copy_constructor/value.cc: Same.\n+\t* testsuite/20_util/has_trivial_default_constructor: Same.\n+\t* testsuite/20_util/has_trivial_default_constructor/requirements: Same.\n+\t* testsuite/20_util/has_trivial_default_constructor/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/has_trivial_default_constructor/requirements/\n+\ttypedefs.cc: Same.\n+\t* testsuite/20_util/has_trivial_default_constructor/value.cc: Same.\n+\t* testsuite/20_util/headers/type_traits/types_std_c++0x_neg.cc: Same.\n+\t* testsuite/20_util/make_signed: Same.\n+\t* testsuite/20_util/make_signed/requirements: Same.\n+\t* testsuite/20_util/make_signed/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/make_signed/requirements/typedefs.cc: Same.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Same.\n+\t* testsuite/20_util/make_unsigned: Same.\n+\t* testsuite/20_util/make_unsigned/requirements: Same.\n+\t* testsuite/20_util/make_unsigned/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs.cc: Same.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Same.\n+\t\n 2007-05-02  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/31777"}, {"sha": "ea27464432e92adb40d7d8bafd5daeeebf3e1d30", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -592,7 +592,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/tgmath.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/type_traits \\\n-\t${tr1_srcdir}/type_traits_fwd.h \\\n+\t${tr1_srcdir}/type_traitsfwd.h \\\n \t${tr1_srcdir}/unordered_set \\\n \t${tr1_srcdir}/unordered_map \\\n \t${tr1_srcdir}/utility \\"}, {"sha": "4402d84c67ffc2a57c0aeff7721d431f6dd5a888", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -822,7 +822,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/tgmath.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/type_traits \\\n-\t${tr1_srcdir}/type_traits_fwd.h \\\n+\t${tr1_srcdir}/type_traitsfwd.h \\\n \t${tr1_srcdir}/unordered_set \\\n \t${tr1_srcdir}/unordered_map \\\n \t${tr1_srcdir}/utility \\"}, {"sha": "0d7e85e5300054e6b79c4e43c1bef7514b19563c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 300, "deletions": 0, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -42,5 +42,305 @@\n # include <c++0x_warning.h>\n #endif\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // Define a nested type if some predicate holds.\n+  template<bool, typename _Tp = void>\n+    struct enable_if \n+    { };\n+\n+  template<typename _Tp>\n+    struct enable_if<true, _Tp>\n+    { typedef _Tp type; };\n+\n+\n+  // Like a conditional expression, but for types. If true, first, if\n+  // false, second.\n+  template<bool _Cond, typename _Iftrue, typename _Iffalse>\n+    struct conditional\n+    { typedef _Iftrue type; };\n+\n+  template<typename _Iftrue, typename _Iffalse>\n+    struct conditional<false, _Iftrue, _Iffalse>\n+    { typedef _Iffalse type; };\n+\n+\n+  // Decay trait for arrays and functions, used for perfect forwarding\n+  // in make_pair, make_tuple, etc.\n+  template<typename _Up, \n+\t   bool _IsArray = is_array<_Up>::value,\n+\t   bool _IsFunction = is_function<_Up>::value> \n+    struct __decay_selector;\n+\n+  template<typename _Up> \n+    struct __decay_selector<_Up, false, false>\n+    { typedef _Up __type; };\n+\n+  template<typename _Up> \n+    struct __decay_selector<_Up, true, false>\n+    { typedef typename remove_extent<_Up>::type* __type; };\n+\n+\n+  template<typename _Up> \n+    struct __decay_selector<_Up, false, true>\n+    { typedef typename add_pointer<_Up>::type __type; };\n+\n+  template<typename _Tp> \n+  struct decay \n+    { \n+    private:\n+      typedef typename remove_reference<_Tp>::type __remove_type;\n+\n+    public:\n+      typedef typename __decay_selector<__remove_type>::__type type;\n+    };\n+\n+\n+  // Utility for constructing identically cv-qualified types.\n+  template<typename _Unqualified, bool _IsConst, bool _IsVol>\n+    struct __cv_selector;\n+\n+  template<typename _Unqualified>\n+    struct __cv_selector<_Unqualified, false, false>\n+    { typedef _Unqualified __type; };\n+\n+  template<typename _Unqualified>\n+    struct __cv_selector<_Unqualified, false, true>\n+    { typedef volatile _Unqualified __type; };\n+\n+  template<typename _Unqualified>\n+    struct __cv_selector<_Unqualified, true, false>\n+    { typedef const _Unqualified __type; };\n+\n+  template<typename _Unqualified>\n+    struct __cv_selector<_Unqualified, true, true>\n+    { typedef const volatile _Unqualified __type; };\n+\n+  template<typename _Qualified, typename _Unqualified,\n+\t   bool _IsConst = is_const<_Qualified>::value,\n+\t   bool _IsVol = is_volatile<_Qualified>::value>\n+    struct __match_cv_qualifiers\n+    {\n+    private:\n+      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;\n+\n+    public:\n+      typedef typename __match::__type __type; \n+    };\n+\n+\n+  // Utility for finding the unsigned versions of signed integral types.\n+  template<typename _Tp>\n+    struct __make_unsigned;\n+\n+  template<>\n+    struct __make_unsigned<char>\n+    { typedef unsigned char __type; };\n+\n+  template<>\n+    struct __make_unsigned<signed char>\n+    { typedef unsigned char __type; };\n+\n+  template<>\n+    struct __make_unsigned<wchar_t>\n+    { typedef unsigned wchar_t __type; };\n+\n+  template<>\n+    struct __make_unsigned<short>\n+    { typedef unsigned short __type; };\n+\n+  template<>\n+    struct __make_unsigned<int>\n+    { typedef unsigned int __type; };\n+\n+  template<>\n+    struct __make_unsigned<long>\n+    { typedef unsigned long __type; };\n+\n+  template<>\n+    struct __make_unsigned<long long>\n+    { typedef unsigned long long __type; };\n+\n+\n+  // Select between integral and enum: not possible to be both.\n+  template<typename _Tp, \n+\t   bool _IsInt = is_integral<_Tp>::value,\n+\t   bool _IsUnsigned = is_unsigned<_Tp>::value,\n+\t   bool _IsEnum = is_enum<_Tp>::value>\n+    struct __make_unsigned_selector;\n+  \n+  template<typename _Tp>\n+    struct __make_unsigned_selector<_Tp, true, true, false>\n+    { typedef _Tp __type; };\n+\n+  template<typename _Tp>\n+    struct __make_unsigned_selector<_Tp, true, false, false>\n+    {\n+    private:\n+      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;\n+      typedef typename __unsignedt::__type __unsigned_type;\n+      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;\n+\n+    public:\n+      typedef typename __cv_unsigned::__type __type;\n+    };\n+\n+  template<typename _Tp>\n+    struct __make_unsigned_selector<_Tp, false, true, false>\n+    {\n+    private:\n+      // GNU floating point types start with sizeof int.\n+      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned int);\n+      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned long);\n+      typedef conditional<__b2, unsigned long, unsigned long long> __cond;\n+      typedef typename __cond::type __cond_type;\n+      typedef unsigned int __ui_type;\n+\n+    public:\n+      typedef typename conditional<__b1, __ui_type, __cond_type>::type __type;\n+    };\n+\n+  template<typename _Tp>\n+    struct __make_unsigned_selector<_Tp, false, false, true>\n+    {\n+    private:\n+      // GNU enums start with sizeof int.\n+      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned int);\n+      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned long);\n+      typedef conditional<__b2, unsigned long, unsigned long long> __cond;\n+      typedef typename __cond::type __cond_type;\n+      typedef unsigned int __ui_type;\n+\n+    public:\n+      typedef typename conditional<__b1, __ui_type, __cond_type>::type __type;\n+    };\n+\n+  // Primary class template.\n+  // Given an integral/enum type, return the corresponding unsigned\n+  // integer type.\n+  template<typename _Tp>\n+    struct make_unsigned \n+    { typedef typename __make_unsigned_selector<_Tp>::__type type; };\n+\n+  // Integral, but don't define.\n+  template<>\n+    struct make_unsigned<bool>;\n+\n+\n+  // Utility for finding the signed versions of unsigned integral types.\n+  template<typename _Tp>\n+    struct __make_signed;\n+\n+  template<>\n+    struct __make_signed<char>\n+    { typedef signed char __type; };\n+\n+  template<>\n+    struct __make_signed<unsigned char>\n+    { typedef signed char __type; };\n+\n+  template<>\n+    struct __make_signed<wchar_t>\n+    { typedef signed wchar_t __type; };\n+\n+  template<>\n+    struct __make_signed<unsigned short>\n+    { typedef signed short __type; };\n+\n+  template<>\n+    struct __make_signed<unsigned int>\n+    { typedef signed int __type; };\n+\n+  template<>\n+    struct __make_signed<unsigned long>\n+    { typedef signed long __type; };\n+\n+  template<>\n+    struct __make_signed<unsigned long long>\n+    { typedef signed long long __type; };\n+\n+\n+  // Select between arithmetic and enum: not possible to be both.\n+  template<typename _Tp, \n+\t   bool _IsInt = is_integral<_Tp>::value,\n+\t   bool _IsSigned = is_signed<_Tp>::value,\n+\t   bool _IsEnum = is_enum<_Tp>::value>\n+    struct __make_signed_selector;\n+  \n+  template<typename _Tp>\n+    struct __make_signed_selector<_Tp, true, true, false>\n+    { typedef _Tp __type; };\n+\n+  template<typename _Tp>\n+    struct __make_signed_selector<_Tp, true, false, false>\n+    {\n+    private:\n+      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;\n+      typedef typename __signedt::__type __signed_type;\n+      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;\n+\n+    public:\n+      typedef typename __cv_signed::__type __type;\n+    };\n+\n+  template<typename _Tp>\n+    struct __make_signed_selector<_Tp, false, true, false>\n+    {\n+      // GNU floating point types start with sizeof int.\n+      static const bool __b1 = sizeof(_Tp) <= sizeof(signed int);\n+      static const bool __b2 = sizeof(_Tp) <= sizeof(signed long);\n+      typedef conditional<__b2, signed long, signed long long> __cond;\n+      typedef typename __cond::type __cond_type;\n+      typedef unsigned int __i_type;\n+\n+    public:\n+      typedef typename conditional<__b1, __i_type, __cond_type>::type __type;\n+    };\n+\n+  template<typename _Tp>\n+    struct __make_signed_selector<_Tp, false, false, true>\n+    {\n+    private:\n+      // GNU enums start with sizeof int.\n+      static const bool __b1 = sizeof(_Tp) <= sizeof(signed int);\n+      static const bool __b2 = sizeof(_Tp) <= sizeof(signed long);\n+      typedef conditional<__b2, signed long, signed long long> __cond;\n+      typedef typename __cond::type __cond_type;\n+      typedef int __i_type;\n+\n+    public:\n+      typedef typename conditional<__b1, __i_type, __cond_type>::type __type;\n+    };\n+\n+  // Primary class template.\n+  // Given an integral/enum type, return the corresponding signed\n+  // integer type.\n+  template<typename _Tp>\n+    struct make_signed \n+    { typedef typename __make_signed_selector<_Tp>::__type type; };\n+\n+  // Integral, but don't define.\n+  template<>\n+    struct make_signed<bool>;\n+\n+\n+  template<typename _Tp>\n+    struct has_nothrow_default_constructor\n+    : public integral_constant<bool, is_pod<_Tp>::value> { };\n+\n+  template<typename _Tp>\n+    struct has_nothrow_copy_constructor\n+    : public integral_constant<bool, is_pod<_Tp>::value> { };\n+\n+  template<typename _Tp>\n+    struct has_trivial_default_constructor\n+    : public integral_constant<bool, is_pod<_Tp>::value> { };\n+\n+  template<typename _Tp>\n+    struct has_trivial_copy_constructor\n+    : public integral_constant<bool, is_pod<_Tp>::value> { };\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif \n "}, {"sha": "41edc3adbc0ec187cf48091adc288aaa4b1afce8", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -37,7 +37,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <tr1/type_traits_fwd.h>\n+#include <tr1/type_traitsfwd.h>\n \n // namespace std::tr1\n namespace std"}, {"sha": "497801447b16d1b0c409de7896201a576751c578", "filename": "libstdc++-v3/include/tr1/type_traitsfwd.h", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traitsfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traitsfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traitsfwd.h?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -27,13 +27,13 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file tr1/type_traits_fwd.h\n+/** @file tr1/type_traitsfwd.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _TYPE_TRAITS_FWD_H\n-#define _TYPE_TRAITS_FWD_H 1\n+#ifndef _TYPE_TRAITSFWD_H\n+#define _TYPE_TRAIT_FWD_H 1\n \n #include <cstddef>\n ", "previous_filename": "libstdc++-v3/include/tr1/type_traits_fwd.h"}, {"sha": "079d366590e973e345c5439367ee242dc0a1f6de", "filename": "libstdc++-v3/testsuite/20_util/conditional/requirements/explicit_instantiation.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2007-05-02 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct conditional<true, test_type, test_type>;\n+}"}, {"sha": "980cd6dd98686303f39ddb61f541d50a0005616c", "filename": "libstdc++-v3/testsuite/20_util/conditional/requirements/typedefs.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-05-02  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::conditional;\n+\n+  typedef conditional<true, char, int>::type     test1_type;\n+  VERIFY( (std::is_same<test1_type, char>::value) );\n+  \n+  typedef conditional<false, char, int>::type     test2_type;\n+  VERIFY( (std::is_same<test2_type, int>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d804d11ffb8ad11248e6b4fa1cf37c1eebfc6cb5", "filename": "libstdc++-v3/testsuite/20_util/decay/requirements/explicit_instantiation.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2007-05-02 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct decay<test_type>;\n+}"}, {"sha": "162ddd2ff42da70e01e55f9f4c83876438c4a5ce", "filename": "libstdc++-v3/testsuite/20_util/decay/requirements/typedefs.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::decay;\n+  using std::is_same;\n+\n+  // Positive tests.\n+  typedef decay<bool>::type     \ttest1_type;\n+  VERIFY( (is_same<test1_type, bool>::value) );\n+\n+  typedef decay<const int>::type  \ttest2_type;\n+  VERIFY( (is_same<test2_type, const int>::value) );\n+\n+  typedef decay<int[4]>::type     \ttest3_type;\n+  VERIFY( (is_same<test3_type, std::remove_extent<int[4]>::type*>::value) );\n+\n+  typedef void (fn_type) ();\n+  typedef decay<fn_type>::type  \ttest4_type;\n+  VERIFY( (is_same<test4_type, std::add_pointer<fn_type>::type>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f236eabadfce444ec6bda488c495f78048708b78", "filename": "libstdc++-v3/testsuite/20_util/enable_if/requirements/explicit_instantiation.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2007-05-02 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct enable_if<true>;\n+}"}, {"sha": "34deb210354af54a13d30e708c980dfba2094c92", "filename": "libstdc++-v3/testsuite/20_util/enable_if/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-05-02  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::enable_if;\n+\n+  // Positive tests.\n+  typedef enable_if<true, int>::type     test1_type;\n+}"}, {"sha": "daff6ad3fb481dedcfaf9b3c6dee8f9ba930c014", "filename": "libstdc++-v3/testsuite/20_util/enable_if/requirements/typedefs_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs_neg.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-05-02  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::enable_if;\n+\n+  // Negative  tests.\n+  typedef enable_if<false, int>::type     test2_type;\n+}\n+\n+// { dg-error \"does not name a type\" \"\" { target *-*-* } 33 } "}, {"sha": "dff484e9d6e1550c1be70d9e29d5fd1f362c6f66", "filename": "libstdc++-v3/testsuite/20_util/has_nothrow_copy_constructor/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-04-30 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct has_nothrow_copy_constructor<test_type>;\n+}"}, {"sha": "02c30d9f3aadded372a0a68aaa51f97003149a73", "filename": "libstdc++-v3/testsuite/20_util/has_nothrow_copy_constructor/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::has_nothrow_copy_constructor<int>     test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "ac793178ac5b4b50e9cd1498189c2fce2f786f19", "filename": "libstdc++-v3/testsuite/20_util/has_nothrow_copy_constructor/value.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Fvalue.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::has_nothrow_copy_constructor;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<has_nothrow_copy_constructor, void>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, float>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, EnumType>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int*>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int(*)(int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int[2]>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, float[][3]>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int*[3]>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor, int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy_constructor,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e56d7090bf85aa741254725869d6c594b498cdfa", "filename": "libstdc++-v3/testsuite/20_util/has_nothrow_default_constructor/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-04-30 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct has_nothrow_default_constructor<test_type>;\n+}"}, {"sha": "6eeb6f065019a87fa7956120772bdcf1579207eb", "filename": "libstdc++-v3/testsuite/20_util/has_nothrow_default_constructor/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::has_nothrow_default_constructor<int>    test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "fccbcf74d280e1f963eef5875c2a2496eedaf145", "filename": "libstdc++-v3/testsuite/20_util/has_nothrow_default_constructor/value.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Fvalue.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::has_nothrow_default_constructor;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<has_nothrow_default_constructor, void>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, int>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, float>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, EnumType>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, int*>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, int(*)(int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor,\n+\t   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, int[2]>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, float[][3]>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, int*[3]>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor,\n+\t   int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_default_constructor, ClassType>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a6bb87dc7c316944c7e00bc8c8e8aea4f67532ac", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_copy_constructor/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-04-30 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct has_trivial_copy_constructor<test_type>;\n+}"}, {"sha": "7b49ff3ed2ea3085d208ea98128647fe62549964", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_copy_constructor/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::has_trivial_copy_constructor<int>     test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "2ea418a2e9c8c888d266fa5d7bf8b796c762f13f", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_copy_constructor/value.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_copy_constructor%2Fvalue.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::has_trivial_copy_constructor;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<has_trivial_copy_constructor, void>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, float>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, EnumType>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int*>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int(*)(int)>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int[2]>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, float[][3]>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int*[3]>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor, int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<has_trivial_copy_constructor,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "03b3050495e567cb3ba6fdf378e26df067be5439", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_default_constructor/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-04-30 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct has_trivial_default_constructor<test_type>;\n+}"}, {"sha": "af8e72655328e49b0a2e9d0a89fb095c7e64214e", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_default_constructor/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::has_trivial_default_constructor<int>    test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "fae5ace9f76cfe8e642eaf92f61e76de2258a851", "filename": "libstdc++-v3/testsuite/20_util/has_trivial_default_constructor/value.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_trivial_default_constructor%2Fvalue.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::has_trivial_default_constructor;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<has_trivial_default_constructor, void>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, int>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, float>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, EnumType>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, int*>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, int(*)(int)>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor,\n+\t   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, int[2]>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, float[][3]>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, int*[3]>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor,\n+\t   int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor,\n+\t   int (ClassType::*[][2][3]) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_default_constructor, ClassType>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "37c5a0346d1f944e5478ce4c7cd46a1a14a404cf", "filename": "libstdc++-v3/testsuite/20_util/headers/type_traits/types_std_c++0x_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x_neg.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+\n+namespace gnu\n+{\n+  // C++0x changes from TR1.\n+  using std::has_trivial_constructor;\n+  using std::has_nothrow_constructor;\n+  using std::has_trivial_copy;\n+  using std::has_nothrow_copy;\n+}\n+\n+// { dg-error \"has not been declared\" \"\" { target *-*-* } 27 } \n+// { dg-error \"has not been declared\" \"\" { target *-*-* } 28 } \n+// { dg-error \"has not been declared\" \"\" { target *-*-* } 29 } \n+// { dg-error \"has not been declared\" \"\" { target *-*-* } 30 } \n+"}, {"sha": "ca0ed8840519618e8d79327e34f5b2bf63a05205", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-04-30 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct make_signed<test_type>;\n+}"}, {"sha": "826e47ed3e84ad42ab12174d06504708b3601e55", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+enum test_enum { first_selection };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::make_signed;\n+  using std::is_same;\n+\n+  // Positive tests.\n+  typedef make_signed<const int>::type  \ttest2_type;\n+  VERIFY( (is_same<test2_type, const int>::value) );\n+\n+  typedef make_signed<const unsigned int>::type  \ttest21c_type;\n+  VERIFY( (is_same<test21c_type, const signed int>::value) );\n+\n+  typedef make_signed<volatile unsigned int>::type  \ttest21v_type;\n+  VERIFY( (is_same<test21v_type, volatile signed int>::value) );\n+\n+  typedef make_signed<const volatile unsigned int>::type  \ttest21cv_type;\n+  VERIFY( (is_same<test21cv_type, const volatile signed int>::value) );\n+\n+  typedef make_signed<const char>::type  \ttest22_type;\n+  VERIFY( (is_same<test22_type, const signed char>::value) );\n+\n+  typedef make_signed<volatile wchar_t>::type  \ttest23_type;\n+  VERIFY( (is_same<test23_type, volatile signed wchar_t>::value) );\n+\n+#if 0\n+  // XXX \n+  // When is_signed works for floating points types this should pass\n+  typedef make_signed<volatile float>::type  \ttest24_type;\n+  VERIFY( (is_same<test24_type, volatile int>::value) );\n+#endif\n+\n+  typedef make_signed<test_enum>::type  \ttest25_type;\n+  VERIFY( (is_same<test25_type, int>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "aa94f2a4708e9d2f44f814ecf20c5ad1a4b9641f", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_character.h>\n+\n+enum test_enum { first_selection };\n+\n+void test01()\n+{\n+  using std::make_signed;\n+\n+  // Negative  tests.\n+  typedef make_signed<bool>::type     \ttest1_type;\n+\n+  typedef make_signed<__gnu_test::pod_uint>::type     \ttest2_type;\n+\n+  typedef make_signed<int[4]>::type     test3_type;\n+\n+  typedef void (fn_type) ();\n+  typedef make_signed<fn_type>::type  \ttest4_type;\n+}\n+\n+// { dg-error \"does not name a type\" \"\" { target *-*-* } 34 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 38 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n+\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 320 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 268 }\n+\n+// { dg-excess-errors \"At global scope\" }\n+// { dg-excess-errors \"In instantiation of\" }"}, {"sha": "bc836a7d64a7e3a7a4deabe13cf451079369e4c7", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-04-30 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct make_unsigned<test_type>;\n+}"}, {"sha": "b09d3e93aa4f416a2ebc15ae7bc6c0fcaf1f35d1", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+enum test_enum { first_selection };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::make_unsigned;\n+  using std::is_same;\n+\n+  // Positive tests.\n+  typedef make_unsigned<const unsigned int>::type  \ttest2_type;\n+  VERIFY( (is_same<test2_type, const unsigned int>::value) );\n+\n+  typedef make_unsigned<const signed int>::type  \ttest21c_type;\n+  VERIFY( (is_same<test21c_type, const unsigned int>::value) );\n+\n+  typedef make_unsigned<volatile signed int>::type  \ttest21v_type;\n+  VERIFY( (is_same<test21v_type, volatile unsigned int>::value) );\n+\n+  typedef make_unsigned<const volatile signed int>::type  \ttest21cv_type;\n+  VERIFY( (is_same<test21cv_type, const volatile unsigned int>::value) );\n+\n+  typedef make_unsigned<const char>::type  \ttest22_type;\n+  VERIFY( (is_same<test22_type, const unsigned char>::value) );\n+\n+  typedef make_unsigned<volatile wchar_t>::type  \ttest23_type;\n+  VERIFY( (is_same<test23_type, volatile unsigned wchar_t>::value) );\n+\n+#if 0\n+  // XXX \n+  // When is_unsigned works for floating points types this should pass\n+  typedef make_unsigned<volatile float>::type  \ttest24_type;\n+  VERIFY( (is_same<test24_type, volatile unsigned int>::value) );\n+#endif\n+\n+  typedef make_unsigned<test_enum>::type  \ttest25_type;\n+  VERIFY( (is_same<test25_type, unsigned int>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cc07d6169547fc8484522cb7d483fb740126ae6e", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_character.h>\n+\n+enum test_enum { first_selection };\n+\n+void test01()\n+{\n+  using std::make_unsigned;\n+\n+  // Negative  tests.\n+  typedef make_unsigned<bool>::type     \ttest1_type;\n+\n+  typedef make_unsigned<__gnu_test::pod_uint>::type     \ttest2_type;\n+\n+  typedef make_unsigned<int[4]>::type     test3_type;\n+\n+  typedef void (fn_type) ();\n+  typedef make_unsigned<fn_type>::type  \ttest4_type;\n+}\n+\n+// { dg-error \"does not name a type\" \"\" { target *-*-* } 34 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 38 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n+\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 223 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 170 }\n+\n+// { dg-excess-errors \"At global scope\" }\n+// { dg-excess-errors \"In instantiation of\" }"}, {"sha": "cdead8f1eadd23a5bbb8a4b79cf756269767e94c", "filename": "libstdc++-v3/testsuite/20_util/tuple/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Frequirements%2Fexplicit_instantiation.cc?ref=7b50cdeffbd3fcb4029eee0c0d85f4ea19fcc47f", "previous_filename": "libstdc++-v3/testsuite/23_containers/tuple/requirements/explicit_instantiation.cc"}]}