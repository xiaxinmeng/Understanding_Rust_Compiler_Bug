{"sha": "ec26ff5a012428ed864b679c7c171e2e7d917f76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyNmZmNWEwMTI0MjhlZDg2NGI2NzljN2MxNzFlMmU3ZDkxN2Y3Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-09-18T11:40:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-09-18T11:40:10Z"}, "message": "PR libstdc++/71187 reimplement declval without add_rvalue_reference\n\n\tPR libstdc++/71187\n\t* include/std/type_traits (__declval): New function to deduce return\n\ttype of declval.\n\t(__declval_protector::_delegate): Remove.\n\t(declval): Use __declval instead of add_rvalue_reference and\n\t__declval_protector::__delegate.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tlineno.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r252922", "tree": {"sha": "1ace52416e236fdd4f9678af0adb7f6003930acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ace52416e236fdd4f9678af0adb7f6003930acf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec26ff5a012428ed864b679c7c171e2e7d917f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec26ff5a012428ed864b679c7c171e2e7d917f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec26ff5a012428ed864b679c7c171e2e7d917f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec26ff5a012428ed864b679c7c171e2e7d917f76/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2c915e3d80d1a2fc231935f8bdcd1c7930a5f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2c915e3d80d1a2fc231935f8bdcd1c7930a5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2c915e3d80d1a2fc231935f8bdcd1c7930a5f8"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "9974675aee6de7aa547f631150d996da2aafa182", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec26ff5a012428ed864b679c7c171e2e7d917f76", "patch": "@@ -1,3 +1,18 @@\n+2017-09-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/71187\n+\t* include/std/type_traits (__declval): New function to deduce return\n+\ttype of declval.\n+\t(__declval_protector::_delegate): Remove.\n+\t(declval): Use __declval instead of add_rvalue_reference and\n+\t__declval_protector::__delegate.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tlineno.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2017-09-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libstdc++-prettyprinters/cxx17.cc: Use -std=c++17 or"}, {"sha": "15b0d92bcb61197d55766817c31e5ea972b3a024", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=ec26ff5a012428ed864b679c7c171e2e7d917f76", "patch": "@@ -754,15 +754,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Destructible and constructible type properties.\n \n-  template<typename>\n-    struct add_rvalue_reference;\n-\n   /**\n    *  @brief  Utility to simplify expressions used in unevaluated operands\n    *  @ingroup utilities\n    */\n+\n+  template<typename _Tp, typename _Up = _Tp&&>\n+    _Up\n+    __declval(int);\n+\n+  template<typename _Tp>\n+    _Tp\n+    __declval(long);\n+\n   template<typename _Tp>\n-    typename add_rvalue_reference<_Tp>::type declval() noexcept;\n+    auto declval() noexcept -> decltype(__declval<_Tp>(0));\n \n   template<typename, unsigned = 0>\n     struct extent;\n@@ -2079,16 +2085,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __declval_protector\n     {\n       static const bool __stop = false;\n-      static typename add_rvalue_reference<_Tp>::type __delegate();\n     };\n \n   template<typename _Tp>\n-    inline typename add_rvalue_reference<_Tp>::type\n-    declval() noexcept\n+    auto declval() noexcept -> decltype(__declval<_Tp>(0))\n     {\n       static_assert(__declval_protector<_Tp>::__stop,\n \t\t    \"declval() must not be used!\");\n-      return __declval_protector<_Tp>::__delegate();\n+      return __declval<_Tp>(0);\n     }\n \n   /// result_of"}, {"sha": "17b41a007db493dc95858844478fe0aa6d152e71", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=ec26ff5a012428ed864b679c7c171e2e7d917f76", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2089 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2093 }\n \n #include <utility>\n "}, {"sha": "308155383f0b4364966b9112b29ffdcd17e9050a", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=ec26ff5a012428ed864b679c7c171e2e7d917f76", "patch": "@@ -47,4 +47,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1754 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1760 }"}, {"sha": "412608e5669d024a38aa85947eecdafedfb88a74", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec26ff5a012428ed864b679c7c171e2e7d917f76/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=ec26ff5a012428ed864b679c7c171e2e7d917f76", "patch": "@@ -47,5 +47,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1650 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1656 }\n "}]}