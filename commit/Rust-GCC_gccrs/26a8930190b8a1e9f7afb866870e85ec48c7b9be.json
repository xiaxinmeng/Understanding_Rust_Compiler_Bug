{"sha": "26a8930190b8a1e9f7afb866870e85ec48c7b9be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZhODkzMDE5MGI4YTFlOWY3YWZiODY2ODcwZTg1ZWM0OGM3YjliZQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-11-09T16:46:45Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-11-09T16:46:45Z"}, "message": "s390.c (s390_select_ccmode): Return CCAPmode for integer NEG and ABS.\n\n\t* config/s390/s390.c (s390_select_ccmode): Return CCAPmode for\n\tinteger NEG and ABS.\n\t* config/s390/s390.md (\"*negdi2_64\"): Fix op_type attribute.\n\t(\"*negdi2_31\"): Reimplement using a splitter.\n\t(\"*negdi2_cc\", \"*negdi2_cconly\"): New insns.\n\t(\"*negdi2_sign\", \"*negdi2_sign_cc\"): Likewise.\n\t(\"*negsi2_cc\", \"*negsi2_cconly\"): Likewise.\n\t(\"*negdf2_cc\", \"*negdf2_cconly\"): Likewise.\n\t(\"*negsf2_cc\", \"*negsf2_cconly\"): Likewise.\n\t(\"*absdi2_cc\", \"*absdi2_cconly\"): New insns.\n\t(\"*absdi2_sign\", \"*absdi2_sign_cc\"): Likewise.\n\t(\"*abssi2_cc\", \"*abssi2_cconly\"): Likewise.\n\t(\"*absdf2_cc\", \"*absdf2_cconly\"): Likewise.\n\t(\"*abssf2_cc\", \"*abssf2_cconly\"): Likewise.\n\t(\"*negabsdi2_cc\", \"*negabsdi2_cconly\"): New insns.\n\t(\"*negabsdi2_sign\", \"*negabsdi2_sign_cc\"): Likewise.\n\t(\"*negabssi2_cc\", \"*negabssi2_cconly\"): Likewise.\n\t(\"*negabsdf2_cc\", \"*negabsdf2_cconly\"): Likewise.\n\t(\"*negabssf2_cc\", \"*negabssf2_cconly\"): Likewise.\n\nFrom-SVN: r90347", "tree": {"sha": "ec8a1a7decd3100fc1ea0acb7b7911affa3d53cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec8a1a7decd3100fc1ea0acb7b7911affa3d53cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26a8930190b8a1e9f7afb866870e85ec48c7b9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a8930190b8a1e9f7afb866870e85ec48c7b9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a8930190b8a1e9f7afb866870e85ec48c7b9be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a8930190b8a1e9f7afb866870e85ec48c7b9be/comments", "author": null, "committer": null, "parents": [{"sha": "0288742581805950c85deeaa71a8915d8617e894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0288742581805950c85deeaa71a8915d8617e894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0288742581805950c85deeaa71a8915d8617e894"}], "stats": {"total": 412, "additions": 376, "deletions": 36}, "files": [{"sha": "1816d81f1cb591185dc634a18c264a184bee5943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a8930190b8a1e9f7afb866870e85ec48c7b9be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a8930190b8a1e9f7afb866870e85ec48c7b9be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26a8930190b8a1e9f7afb866870e85ec48c7b9be", "patch": "@@ -1,3 +1,25 @@\n+2004-11-09  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_select_ccmode): Return CCAPmode for\n+\tinteger NEG and ABS.\n+\t* config/s390/s390.md (\"*negdi2_64\"): Fix op_type attribute.\n+\t(\"*negdi2_31\"): Reimplement using a splitter.\n+\t(\"*negdi2_cc\", \"*negdi2_cconly\"): New insns.\n+\t(\"*negdi2_sign\", \"*negdi2_sign_cc\"): Likewise.\n+\t(\"*negsi2_cc\", \"*negsi2_cconly\"): Likewise.\n+\t(\"*negdf2_cc\", \"*negdf2_cconly\"): Likewise.\n+\t(\"*negsf2_cc\", \"*negsf2_cconly\"): Likewise.\n+\t(\"*absdi2_cc\", \"*absdi2_cconly\"): New insns.\n+\t(\"*absdi2_sign\", \"*absdi2_sign_cc\"): Likewise.\n+\t(\"*abssi2_cc\", \"*abssi2_cconly\"): Likewise.\n+\t(\"*absdf2_cc\", \"*absdf2_cconly\"): Likewise.\n+\t(\"*abssf2_cc\", \"*abssf2_cconly\"): Likewise.\n+\t(\"*negabsdi2_cc\", \"*negabsdi2_cconly\"): New insns.\n+\t(\"*negabsdi2_sign\", \"*negabsdi2_sign_cc\"): Likewise.\n+\t(\"*negabssi2_cc\", \"*negabssi2_cconly\"): Likewise.\n+\t(\"*negabsdf2_cc\", \"*negabsdf2_cconly\"): Likewise.\n+\t(\"*negabssf2_cc\", \"*negabssf2_cconly\"): Likewise.\n+\n 2004-11-09  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_canonicalize_comparison): Reverse condition"}, {"sha": "42636c44a5ff253c731ee91b2b568929c1455918", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a8930190b8a1e9f7afb866870e85ec48c7b9be/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a8930190b8a1e9f7afb866870e85ec48c7b9be/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=26a8930190b8a1e9f7afb866870e85ec48c7b9be", "patch": "@@ -446,6 +446,9 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n     {\n       case EQ:\n       case NE:\n+\tif ((GET_CODE (op0) == NEG || GET_CODE (op0) == ABS)\n+\t    && GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT)\n+\t  return CCAPmode;\n \tif (GET_CODE (op0) == PLUS && GET_CODE (XEXP (op0, 1)) == CONST_INT\n \t    && CONST_OK_FOR_CONSTRAINT_P (INTVAL (XEXP (op0, 1)), 'K', \"K\"))\n \t  return CCAPmode;\n@@ -482,14 +485,18 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n       case LT:\n       case GE:\n       case GT:\n-\t  if (GET_CODE (op0) == PLUS && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t      && CONST_OK_FOR_CONSTRAINT_P (INTVAL (XEXP (op0, 1)), 'K', \"K\"))\n-            {\n-\t      if (INTVAL (XEXP((op0), 1)) < 0)\n-\t        return CCANmode;\n-              else\n-\t        return CCAPmode;\n-\t    }\n+\tif ((GET_CODE (op0) == NEG || GET_CODE (op0) == ABS)\n+\t    && GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT)\n+\t  return CCAPmode;\n+\tif (GET_CODE (op0) == PLUS && GET_CODE (XEXP (op0, 1)) == CONST_INT\n+\t    && CONST_OK_FOR_CONSTRAINT_P (INTVAL (XEXP (op0, 1)), 'K', \"K\"))\n+\t  {\n+\t    if (INTVAL (XEXP((op0), 1)) < 0)\n+\t      return CCANmode;\n+\t    else\n+\t      return CCAPmode;\n+\t  }\n+\t/* Fall through.  */\n       case UNORDERED:\n       case ORDERED:\n       case UNEQ:"}, {"sha": "15180087133561b257e7526179c94c4023e1d4e4", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 339, "deletions": 28, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a8930190b8a1e9f7afb866870e85ec48c7b9be/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a8930190b8a1e9f7afb866870e85ec48c7b9be/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=26a8930190b8a1e9f7afb866870e85ec48c7b9be", "patch": "@@ -6102,36 +6102,104 @@\n   \"\"\n   \"\")\n \n+(define_insn \"*negdi2_sign_cc\"\n+  [(set (reg 33)\n+        (compare (neg:DI (ashiftrt:DI (ashift:DI (subreg:DI\n+                           (match_operand:SI 1 \"register_operand\" \"d\") 0)\n+                           (const_int 32)) (const_int 32)))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (neg:DI (sign_extend:DI (match_dup 1))))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lcgfr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+  \n+(define_insn \"*negdi2_sign\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (neg:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\"\n+  \"lcgfr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+\n+(define_insn \"*negdi2_cc\"\n+  [(set (reg 33)\n+        (compare (neg:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (neg:DI (match_dup 1)))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lcgr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+  \n+(define_insn \"*negdi2_cconly\"\n+  [(set (reg 33)\n+        (compare (neg:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d\"))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lcgr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+  \n (define_insn \"*negdi2_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT\"\n   \"lcgr\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR\")])\n+  [(set_attr \"op_type\"  \"RRE\")])\n \n-(define_insn \"*negdi2_31\"\n+(define_insn_and_split \"*negdi2_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n    (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n-{\n-  rtx xop[1];\n-  xop[0] = gen_label_rtx ();\n-  output_asm_insn (\"lcr\\t%0,%1\", operands);\n-  output_asm_insn (\"lcr\\t%N0,%N1\", operands);\n-  output_asm_insn (\"je\\t%l0\", xop);\n-  output_asm_insn (\"bctr\\t%0,0\", operands);\n-  targetm.asm_out.internal_label (asm_out_file, \"L\",\n-\t\t\t     CODE_LABEL_NUMBER (xop[0]));\n-  return \"\";\n-}\n-  [(set_attr \"length\" \"10\")])\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (match_dup 2) (neg:SI (match_dup 3)))\n+     (clobber (reg:CC 33))])\n+   (parallel\n+    [(set (reg:CCAP 33)\n+          (compare:CCAP (neg:SI (match_dup 5)) (const_int 0)))\n+     (set (match_dup 4) (neg:SI (match_dup 5)))])\n+   (set (pc)\n+        (if_then_else (ne (reg:CCAP 33) (const_int 0))\n+                      (pc)\n+                      (label_ref (match_dup 6))))\n+   (parallel\n+    [(set (match_dup 2) (plus:SI (match_dup 2) (const_int -1)))\n+     (clobber (reg:CC 33))])\n+   (match_dup 6)]\n+  \"operands[2] = operand_subword (operands[0], 0, 0, DImode);\n+   operands[3] = operand_subword (operands[1], 0, 0, DImode);\n+   operands[4] = operand_subword (operands[0], 1, 0, DImode);\n+   operands[5] = operand_subword (operands[1], 1, 0, DImode);\n+   operands[6] = gen_label_rtx ();\")\n \n ;\n ; negsi2 instruction pattern(s).\n ;\n \n+(define_insn \"*negsi2_cc\"\n+  [(set (reg 33)\n+        (compare (neg:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+                 (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (neg:SI (match_dup 1)))]\n+  \"s390_match_ccmode (insn, CCAmode)\"\n+  \"lcr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR\")])\n+  \n+(define_insn \"*negsi2_cconly\"\n+  [(set (reg 33)\n+        (compare (neg:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=d\"))]\n+  \"s390_match_ccmode (insn, CCAmode)\"\n+  \"lcr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR\")])\n+  \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (neg:SI (match_operand:SI 1 \"register_operand\" \"d\")))\n@@ -6152,6 +6220,27 @@\n   \"TARGET_HARD_FLOAT\"\n   \"\")\n \n+(define_insn \"*negdf2_cc\"\n+  [(set (reg 33)\n+        (compare (neg:DF (match_operand:DF 1 \"register_operand\" \"f\"))\n+                 (match_operand:DF 2 \"const0_operand\" \"\")))\n+   (set (match_operand:DF 0 \"register_operand\" \"=f\")\n+        (neg:DF (match_dup 1)))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lcdbr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimpd\")])\n+  \n+(define_insn \"*negdf2_cconly\"\n+  [(set (reg 33)\n+        (compare (neg:DF (match_operand:DF 1 \"register_operand\" \"f\"))\n+                 (match_operand:DF 2 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:DF 0 \"=f\"))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lcdbr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimpd\")])\n+  \n (define_insn \"*negdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n         (neg:DF (match_operand:DF 1 \"register_operand\" \"f\")))\n@@ -6182,6 +6271,27 @@\n   \"TARGET_HARD_FLOAT\"\n   \"\")\n \n+(define_insn \"*negsf2_cc\"\n+  [(set (reg 33)\n+        (compare (neg:SF (match_operand:SF 1 \"register_operand\" \"f\"))\n+                 (match_operand:SF 2 \"const0_operand\" \"\")))\n+   (set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (neg:SF (match_dup 1)))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lcebr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimps\")])\n+  \n+(define_insn \"*negsf2_cconly\"\n+  [(set (reg 33)\n+        (compare (neg:SF (match_operand:SF 1 \"register_operand\" \"f\"))\n+                 (match_operand:SF 2 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:SF 0 \"=f\"))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lcebr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimps\")])\n+  \n (define_insn \"*negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n         (neg:SF (match_operand:SF 1 \"register_operand\" \"f\")))\n@@ -6209,6 +6319,45 @@\n ; absdi2 instruction pattern(s).\n ;\n \n+(define_insn \"*absdi2_sign_cc\"\n+  [(set (reg 33)\n+        (compare (abs:DI (ashiftrt:DI (ashift:DI (subreg:DI\n+                           (match_operand:SI 1 \"register_operand\" \"d\") 0)\n+                           (const_int 32)) (const_int 32)))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (abs:DI (sign_extend:DI (match_dup 1))))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lpgfr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+\n+(define_insn \"*absdi2_sign\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (abs:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\"\n+  \"lpgfr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+\n+(define_insn \"*absdi2_cc\"\n+  [(set (reg 33)\n+        (compare (abs:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (abs:DI (match_dup 1)))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lpgr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+  \n+(define_insn \"*absdi2_cconly\"\n+  [(set (reg 33)\n+        (compare (abs:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d\"))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lpgr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+  \n (define_insn \"absdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (abs:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n@@ -6221,6 +6370,25 @@\n ; abssi2 instruction pattern(s).\n ;\n \n+(define_insn \"*abssi2_cc\"\n+  [(set (reg 33)\n+        (compare (abs:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+                 (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (abs:SI (match_dup 1)))]\n+  \"s390_match_ccmode (insn, CCAmode)\"\n+  \"lpr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR\")])\n+  \n+(define_insn \"*abssi2_cconly\"\n+  [(set (reg 33)\n+        (compare (abs:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+                 (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=d\"))]\n+  \"s390_match_ccmode (insn, CCAmode)\"\n+  \"lpr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR\")])\n+  \n (define_insn \"abssi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (abs:SI (match_operand:SI 1 \"register_operand\" \"d\")))\n@@ -6241,6 +6409,27 @@\n   \"TARGET_HARD_FLOAT\"\n   \"\")\n \n+(define_insn \"*absdf2_cc\"\n+  [(set (reg 33)\n+        (compare (abs:DF (match_operand:DF 1 \"register_operand\" \"f\"))\n+                 (match_operand:DF 2 \"const0_operand\" \"\")))\n+   (set (match_operand:DF 0 \"register_operand\" \"=f\")\n+        (abs:DF (match_dup 1)))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lpdbr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimpd\")])\n+  \n+(define_insn \"*absdf2_cconly\"\n+  [(set (reg 33)\n+        (compare (abs:DF (match_operand:DF 1 \"register_operand\" \"f\"))\n+                 (match_operand:DF 2 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:DF 0 \"=f\"))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lpdbr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimpd\")])\n+  \n (define_insn \"*absdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n         (abs:DF (match_operand:DF 1 \"register_operand\" \"f\")))\n@@ -6271,6 +6460,27 @@\n   \"TARGET_HARD_FLOAT\"\n   \"\")\n \n+(define_insn \"*abssf2_cc\"\n+  [(set (reg 33)\n+        (compare (abs:SF (match_operand:SF 1 \"register_operand\" \"f\"))\n+                 (match_operand:SF 2 \"const0_operand\" \"\")))\n+   (set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (abs:SF (match_dup 1)))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lpebr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimps\")])\n+  \n+(define_insn \"*abssf2_cconly\"\n+  [(set (reg 33)\n+        (compare (abs:SF (match_operand:SF 1 \"register_operand\" \"f\"))\n+                 (match_operand:SF 2 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:SF 0 \"=f\"))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lpebr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimps\")])\n+  \n (define_insn \"*abssf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n         (abs:SF (match_operand:SF 1 \"register_operand\" \"f\")))\n@@ -6297,14 +6507,46 @@\n ; Integer\n ;\n \n-(define_insn \"*negabssi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(neg:SI (abs:SI (match_operand:SI 1 \"register_operand\" \"d\"))))\n+(define_insn \"*negabsdi2_sign_cc\"\n+  [(set (reg 33)\n+        (compare (neg:DI (abs:DI (ashiftrt:DI (ashift:DI (subreg:DI\n+                           (match_operand:SI 1 \"register_operand\" \"d\") 0)\n+                           (const_int 32)) (const_int 32))))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (neg:DI (abs:DI (sign_extend:DI (match_dup 1)))))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lngfr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+ \n+(define_insn \"*negabsdi2_sign\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(neg:DI (abs:DI (sign_extend:DI\n+                          (match_operand:SI 1 \"register_operand\" \"d\")))))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"lnr\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RR\")])\n+  \"TARGET_64BIT\"\n+  \"lngfr\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE\")])\n \n+(define_insn \"*negabsdi2_cc\"\n+  [(set (reg 33)\n+        (compare (neg:DI (abs:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n+                 (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (neg:DI (abs:DI (match_dup 1))))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lngr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+  \n+(define_insn \"*negabsdi2_cconly\"\n+  [(set (reg 33)\n+        (compare (neg:DI (abs:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d\"))]\n+  \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n+  \"lngr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")])\n+  \n (define_insn \"*negabsdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(neg:DI (abs:DI (match_operand:DI 1 \"register_operand\" \"d\"))))\n@@ -6313,19 +6555,58 @@\n   \"lngr\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE\")])\n \n+(define_insn \"*negabssi2_cc\"\n+  [(set (reg 33)\n+        (compare (neg:SI (abs:SI (match_operand:SI 1 \"register_operand\" \"d\")))\n+                 (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (neg:SI (abs:SI (match_dup 1))))]\n+  \"s390_match_ccmode (insn, CCAmode)\"\n+  \"lnr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR\")])\n+  \n+(define_insn \"*negabssi2_cconly\"\n+  [(set (reg 33)\n+        (compare (neg:SI (abs:SI (match_operand:SI 1 \"register_operand\" \"d\")))\n+                 (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=d\"))]\n+  \"s390_match_ccmode (insn, CCAmode)\"\n+  \"lnr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RR\")])\n+  \n+(define_insn \"*negabssi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(neg:SI (abs:SI (match_operand:SI 1 \"register_operand\" \"d\"))))\n+   (clobber (reg:CC 33))]\n+  \"\"\n+  \"lnr\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RR\")])\n+\n ;\n ; Floating point\n ;\n \n-(define_insn \"*negabssf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (neg:SF (abs:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n-  \"lnebr\\t%0,%1\"\n+(define_insn \"*negabsdf2_cc\"\n+  [(set (reg 33)\n+        (compare (neg:DF (abs:DF (match_operand:DF 1 \"register_operand\" \"f\")))\n+                 (match_operand:DF 2 \"const0_operand\" \"\")))\n+   (set (match_operand:DF 0 \"register_operand\" \"=f\")\n+        (neg:DF (abs:DF (match_dup 1))))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lndbr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n-   (set_attr \"type\"     \"fsimps\")])\n-\n+   (set_attr \"type\"     \"fsimpd\")])\n+  \n+(define_insn \"*negabsdf2_cconly\"\n+  [(set (reg 33)\n+        (compare (neg:DF (abs:DF (match_operand:DF 1 \"register_operand\" \"f\")))\n+                 (match_operand:DF 2 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:DF 0 \"=f\"))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lndbr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimpd\")])\n+  \n (define_insn \"*negabsdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n         (neg:DF (abs:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n@@ -6335,6 +6616,36 @@\n   [(set_attr \"op_type\"  \"RRE\")\n    (set_attr \"type\"     \"fsimpd\")])\n \n+(define_insn \"*negabssf2_cc\"\n+  [(set (reg 33)\n+        (compare (neg:SF (abs:SF (match_operand:SF 1 \"register_operand\" \"f\")))\n+                 (match_operand:SF 2 \"const0_operand\" \"\")))\n+   (set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (neg:SF (abs:SF (match_dup 1))))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lnebr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimps\")])\n+  \n+(define_insn \"*negabssf2_cconly\"\n+  [(set (reg 33)\n+        (compare (neg:SF (abs:SF (match_operand:SF 1 \"register_operand\" \"f\")))\n+                 (match_operand:SF 2 \"const0_operand\" \"\")))\n+   (clobber (match_scratch:SF 0 \"=f\"))]\n+  \"s390_match_ccmode (insn, CCSmode) && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lnebr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimps\")])\n+  \n+(define_insn \"*negabssf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (neg:SF (abs:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT\"\n+  \"lnebr\\t%0,%1\"\n+  [(set_attr \"op_type\"  \"RRE\")\n+   (set_attr \"type\"     \"fsimps\")])\n+\n ;;\n ;;- Square root instructions.\n ;;"}]}