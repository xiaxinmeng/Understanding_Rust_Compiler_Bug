{"sha": "dbf044304cdd78d56ded200412de9de0d22ee536", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmMDQ0MzA0Y2RkNzhkNTZkZWQyMDA0MTJkZTlkZTBkMjJlZTUzNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T13:33:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T13:33:32Z"}, "message": "[multiple changes]\n\n2009-07-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_attr.adb (Expand_Attribute_Reference, case 'Valid): Reset the\n\tIs_Known_Valid flag on the temporary created for the value whose\n\tvalidity is being checked.\n\n\t* sem.adb (Do_Unit_And_Dependents): Further code reorganization to\n\thandle properly main units that are package specifications.\n\n2009-07-27  Geert Bosch  <bosch@adacore.com>\n\n\t* einfo.ads (Checks_May_Be_Suppressed): Fix typo in comment\n\t* sem_aux.ads: Fix typo in comment\n\t* sem_util.ads (Is_LHS): Adjust comment to match body\n\n2009-07-27  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi (gnatcheck Complex_Inlined_Subprograms rule): Update\n\trule definition.\n\n2009-07-27  Olivier Hainque  <hainque@adacore.com>\n\n\t* g-sse.ads, g-ssvety.ads: Update comments.\n\nFrom-SVN: r150113", "tree": {"sha": "fe6c587e28a3fcdecb46c4b241da6e3566945286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe6c587e28a3fcdecb46c4b241da6e3566945286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbf044304cdd78d56ded200412de9de0d22ee536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf044304cdd78d56ded200412de9de0d22ee536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf044304cdd78d56ded200412de9de0d22ee536", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf044304cdd78d56ded200412de9de0d22ee536/comments", "author": null, "committer": null, "parents": [{"sha": "4524c32c88a638a3c21922f195dea99a1128a979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4524c32c88a638a3c21922f195dea99a1128a979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4524c32c88a638a3c21922f195dea99a1128a979"}], "stats": {"total": 279, "additions": 167, "deletions": 112}, "files": [{"sha": "45ce028e78ce372c39ba16cf31b8acdfefd98200", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dbf044304cdd78d56ded200412de9de0d22ee536", "patch": "@@ -1,3 +1,27 @@\n+2009-07-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Attribute_Reference, case 'Valid): Reset the\n+\tIs_Known_Valid flag on the temporary created for the value whose\n+\tvalidity is being checked.\n+\n+\t* sem.adb (Do_Unit_And_Dependents): Further code reorganization to\n+\thandle properly main units that are package specifications.\n+\n+2009-07-27  Geert Bosch  <bosch@adacore.com>\n+\n+\t* einfo.ads (Checks_May_Be_Suppressed): Fix typo in comment\n+\t* sem_aux.ads: Fix typo in comment\n+\t* sem_util.ads (Is_LHS): Adjust comment to match body\n+\n+2009-07-27  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi (gnatcheck Complex_Inlined_Subprograms rule): Update\n+\trule definition.\n+\n+2009-07-27  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* g-sse.ads, g-ssvety.ads: Update comments.\n+\n 2009-07-27  Sergey Rybin  <rybin@adacore.com>\n \n \t* gnat_ugn.texi: Update gnatcheck doc."}, {"sha": "e2f1cbe057565c756f6f9c6663f880e33cab1210", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=dbf044304cdd78d56ded200412de9de0d22ee536", "patch": "@@ -491,7 +491,7 @@ package Einfo is\n --       Present in all entities. Set if a pragma Suppress or Unsuppress\n --       mentions the entity specifically in the second argument. If this\n --       flag is set the Global_Entity_Suppress and Local_Entity_Suppress\n---       tables must be consulted to determine if the is actually an active\n+--       tables must be consulted to determine if there actually is an active\n --       Suppress or Unsuppress pragma that applies to the entity.\n \n --    Class_Wide_Type (Node9)"}, {"sha": "599d0ca53238912169c0921741723a998d63c7e9", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=dbf044304cdd78d56ded200412de9de0d22ee536", "patch": "@@ -4682,13 +4682,23 @@ package body Exp_Attr is\n          ---------------------\n \n          function Make_Range_Test return Node_Id is\n+            Temp : constant Node_Id := Duplicate_Subexpr (Pref);\n+\n          begin\n+            --  The value whose validity is being checked has been captured in\n+            --  an object declaration. We certainly don't want this object to\n+            --  appear valid because the declaration initializes it!\n+\n+            if Is_Entity_Name (Temp) then\n+               Set_Is_Known_Valid (Entity (Temp), False);\n+            end if;\n+\n             return\n               Make_And_Then (Loc,\n                 Left_Opnd =>\n                   Make_Op_Ge (Loc,\n                     Left_Opnd =>\n-                      Unchecked_Convert_To (Btyp, Duplicate_Subexpr (Pref)),\n+                      Unchecked_Convert_To (Btyp, Temp),\n \n                     Right_Opnd =>\n                       Unchecked_Convert_To (Btyp,\n@@ -4699,8 +4709,7 @@ package body Exp_Attr is\n                 Right_Opnd =>\n                   Make_Op_Le (Loc,\n                     Left_Opnd =>\n-                      Unchecked_Convert_To (Btyp,\n-                        Duplicate_Subexpr_No_Checks (Pref)),\n+                      Unchecked_Convert_To (Btyp, Temp),\n \n                     Right_Opnd =>\n                       Unchecked_Convert_To (Btyp,"}, {"sha": "8ce2b5d902d5a96b385a6fce40313e10fa724689", "filename": "gcc/ada/g-sse.ads", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fg-sse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fg-sse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sse.ads?ref=dbf044304cdd78d56ded200412de9de0d22ee536", "patch": "@@ -44,43 +44,68 @@\n --  This unit exposes vector _component_ types together with general comments\n --  on the binding contents.\n \n---  As of today, one other unit is offered: GNAT.SSE.Vector__Types, which\n+--  One other unit is offered as of today: GNAT.SSE.Vector_Types, which\n --  exposes Ada types corresponding to the reference types (__m128 and the\n---  like) over which GCC builtins will operate. The exposed Ada types are\n---  private. Object initializations or value observations may be performed\n---  with unchecked conversions or address overlays, for example:\n+--  like) over which a binding to the SSE GCC builtins may operate.\n+\n+--  The exposed Ada types are private. Object initializations or value\n+--  observations may be performed with unchecked conversions or address\n+--  overlays, for example:\n \n --  with Ada.Unchecked_Conversion;\n---  with GNAT.SSE.Vector_Types; use GNAT.SSE; use GNAT.SSE.Vector_Types;\n+--  with GNAT.SSE.Vector_Types; use GNAT.SSE, GNAT.SSE.Vector_Types;\n \n --  procedure SSE_Base is\n \n --     --  Core operations\n \n---     function mm_add_ss (A, B : M128) return M128;\n---     pragma Import (Intrinsic, mm_add_ss, \"__builtin_ia32_addss\");\n+--     function ia32_addps (A, B : m128) return m128;\n+--     pragma Import (Intrinsic, ia32_addps, \"__builtin_ia32_addps\");\n \n---     --  User views / conversions or overlays\n+--     --  User views & conversions\n \n---     type Vf32_View is array (1 .. 4) of Float;\n+--     type Vf32_View is array (1 .. 4) of GNAT.SSE.Float32;\n --     for Vf32_View'Alignment use VECTOR_ALIGN;\n \n---     function To_M128 is new Ada.Unchecked_Conversion (Vf32_View, M128);\n+--     function To_m128 is new Ada.Unchecked_Conversion (Vf32_View, m128);\n \n---     X, Y, Z : M128;\n+--     Xf32 : constant Vf32_View := (1.0, 1.0, 2.0, 2.0);\n+--     Yf32 : constant Vf32_View := (2.0, 2.0, 1.0, 1.0);\n \n---     Vz : Vf32_View;\n---     for Vz'Address use Z'Address;\n+--     X128 : constant m128 := To_m128 (Xf32);\n+--     Y128 : constant m128 := To_m128 (Yf32);\n \n --  begin\n---     X := To_M128 ((1.0, 1.0, 2.0, 2.0));\n---     Y := To_M128 ((2.0, 2.0, 1.0, 1.0));\n---     Z := mm_add_ss (X, Y);\n-\n---     if vz /= (3.0, 1.0, 2.0, 2.0) then\n---        raise Program_Error;\n---     end if;\n---  end;\n+--     --  Operations & overlays\n+\n+--     declare\n+--        Z128 : m128;\n+--        Zf32 : Vf32_View;\n+--        for Zf32'Address use Z128'Address;\n+--     begin\n+--        Z128 := ia32_addps (X128, Y128);\n+--        if Zf32 /= (3.0, 3.0, 3.0, 3.0) then\n+--           raise Program_Error;\n+--        end if;\n+--     end;\n+\n+--     declare\n+--        type m128_View_Kind is (SSE, F32);\n+--        type m128_Object (View : m128_View_Kind := F32) is record\n+--           case View is\n+--              when SSE  => V128 : m128;\n+--              when F32  => Vf32 : Vf32_View;\n+--           end case;\n+--        end record;\n+--        pragma Unchecked_Union (m128_Object);\n+\n+--        O1 : constant m128_Object := (View => SSE, V128 => X128);\n+--     begin\n+--        if O1.Vf32 /= Xf32 then\n+--           raise Program_Error;\n+--        end if;\n+--     end;\n+--  end SSE_Base;\n \n package GNAT.SSE is\n    type Float32 is new Float;"}, {"sha": "a1bb7bf306c471f9f6b4b91b17d0f104bc81df72", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=dbf044304cdd78d56ded200412de9de0d22ee536", "patch": "@@ -21209,29 +21209,32 @@ This rule has no parameters.\n @cindex @code{Complex_Inlined_Subprograms} rule (for @command{gnatcheck})\n \n @noindent\n-Flags the body of a subprogram (or generic subprogram) if\n-pragma Inline has been applied to the subprogram but the body\n-is too complex to be expanded inline.\n-\n-A subprogram (or generic subprogram) is considered too complex for inline\n-expansion if its body meets at least one of the following conditions:\n+Flags a subprogram (or generic subprogram) if\n+pragma Inline is applied to the subprogram and at least one of the following\n+conditions is met:\n \n @itemize @bullet\n @item\n-The number of local declarations and statements exceeds\n-a value specified by the @option{N} rule parameter;\n+it contains at least one complex declaration such as a subprogram body,\n+package, task, protected object declaration, or a generic instantiation\n+(except instantiation of @code{Ada.Unchecked_Conversion});\n \n @item\n-The body contains a @code{loop}, @code{if} or @code{case} statement;\n+it contains at least one complex statement such as a loop, a case\n+or a if statement, or a short circuit control form;\n+\n+@item\n+the number of statements exceeds\n+a value specified by the @option{N} rule parameter;\n @end itemize\n \n @noindent\n This rule has the following (mandatory) parameter for the @option{+R} option:\n \n @table @emph\n @item N\n-Positive integer specifying the maximum allowed total number of local\n-declarations and statements in the subprogram body.\n+Positive integer specifying the maximum allowed total number of statements\n+in the subprogram body.\n @end table\n \n "}, {"sha": "69c4497f13591fccf1ed3ff1bfea6169366645cd", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 67, "deletions": 69, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=dbf044304cdd78d56ded200412de9de0d22ee536", "patch": "@@ -1691,104 +1691,102 @@ package body Sem is\n       begin\n          if not Seen (Unit_Num) then\n \n-            Seen (Unit_Num) := True;\n-\n-            --  Process corresponding spec of body first\n-\n-            if Nkind_In (Item, N_Package_Body, N_Subprogram_Body) then\n-               declare\n-                  Spec_Unit : constant Node_Id := Library_Unit (CU);\n-               begin\n-                  if Spec_Unit = CU then  --  ???Why needed?\n-                     pragma Assert (Acts_As_Spec (CU));\n-                     null;\n-                  else\n-                     Do_Unit_And_Dependents (Spec_Unit, Unit (Spec_Unit));\n-                  end if;\n-               end;\n-            end if;\n-\n             --  Process the with clauses\n \n             Do_Withed_Units (CU, Include_Limited => False);\n \n-            --  Process the unit itself\n+            --  Process the unit if it is a spec. If it is the main unit,\n+            --  process it only if we have done all other units.\n \n             if not Nkind_In (Item, N_Package_Body, N_Subprogram_Body)\n               or else Acts_As_Spec (CU)\n-              or else (CU = Cunit (Main_Unit) and then Do_Main)\n             then\n-               Do_Action (CU, Item);\n-               Done (Unit_Num) := True;\n+               if CU = Cunit (Main_Unit) and then not Do_Main then\n+                  Seen (Unit_Num) := False;\n+\n+               else\n+                  Seen (Unit_Num) := True;\n+                  Do_Action (CU, Item);\n+                  Done (Unit_Num) := True;\n+               end if;\n             end if;\n          end if;\n \n-         --  Process corresponding body of spec last. This is either the main\n-         --  unit, or the body of a spec that is in the context of the main\n-         --  unit, and that is instantiated, or else contains a generic that\n-         --  is instantiated, or a subprogram that is inlined in the main unit.\n+         --  Process bodies. The spec, if present, has been processed already.\n+         --  A body appears if it is the main, or the body of a spec that is\n+         --  in the context of the main unit, and that is instantiated, or else\n+         --  contains a generic that is instantiated, or a subprogram that is\n+         --  or a subprogram that is inlined in the main unit.\n \n          --  We exclude bodies that may appear in a circular dependency list,\n          --  where spec A depends on spec B and body of B depends on spec A.\n          --  This is not an elaboration issue, but body B must be excluded\n          --  from the processing.\n \n-         if Nkind (Item) = N_Package_Declaration then\n-            declare\n-               Body_Unit : constant Node_Id := Library_Unit (CU);\n+         declare\n+            Body_Unit :  Node_Id := Empty;\n+            Body_Num  : Unit_Number_Type;\n \n-               function Circular_Dependence (B : Node_Id) return Boolean;\n-               --  Check whether this body depends on a spec that is pending,\n-               --  that is to say has been seen but not processed yet.\n+            function Circular_Dependence (B : Node_Id) return Boolean;\n+            --  Check whether this body depends on a spec that is pending,\n+            --  that is to say has been seen but not processed yet.\n \n-               -------------------------\n-               -- Circular_Dependence --\n-               -------------------------\n+            -------------------------\n+            -- Circular_Dependence --\n+            -------------------------\n \n-               function Circular_Dependence (B : Node_Id) return Boolean is\n-                  Item : Node_Id;\n-                  UN   : Unit_Number_Type;\n+            function Circular_Dependence (B : Node_Id) return Boolean is\n+               Item : Node_Id;\n+               UN   : Unit_Number_Type;\n \n-               begin\n-                  Item := First (Context_Items (B));\n-                  while Present (Item) loop\n-                     if Nkind (Item) = N_With_Clause then\n-                        UN := Get_Cunit_Unit_Number (Library_Unit (Item));\n-\n-                        if Seen (UN)\n-                          and then not Done (UN)\n-                        then\n-                           return True;\n-                        end if;\n+            begin\n+               Item := First (Context_Items (B));\n+               while Present (Item) loop\n+                  if Nkind (Item) = N_With_Clause then\n+                     UN := Get_Cunit_Unit_Number (Library_Unit (Item));\n+\n+                     if Seen (UN)\n+                       and then not Done (UN)\n+                     then\n+                        return True;\n                      end if;\n+                  end if;\n \n-                     Next (Item);\n-                  end loop;\n+                  Next (Item);\n+               end loop;\n \n-                  return False;\n-               end Circular_Dependence;\n+               return False;\n+            end Circular_Dependence;\n \n-            begin\n-               if Present (Body_Unit)\n+         begin\n+            if Nkind (Item) = N_Package_Declaration then\n+               Body_Unit := Library_Unit (CU);\n \n-                 --  Since specs and bodies are not done at the same time,\n-                 --  guard against listing a body more than once.\n+            elsif Nkind (Item) = N_Package_Body then\n+               Body_Unit := CU;\n+            end if;\n \n-                 and then not Seen (Get_Cunit_Unit_Number (Body_Unit))\n+            if Present (Body_Unit)\n \n-                 --  Would be good to comment each of these tests ???\n+              --  Since specs and bodies are not done at the same time,\n+              --  guard against listing a body more than once. Bodies are\n+              --  only processed when the main unit is being processed,\n+              --  after all other units in the list. The DEC extension\n+              --  to System is excluded because of circularities.\n \n-                 and then Body_Unit /= Cunit (Main_Unit)\n-                 and then Unit_Num /= Get_Source_Unit (System_Aux_Id)\n-                 and then not Circular_Dependence (Body_Unit)\n-                 and then Do_Main\n-               then\n-                  Do_Unit_And_Dependents (Body_Unit, Unit (Body_Unit));\n-                  Do_Action (Body_Unit, Unit (Body_Unit));\n-                  Done (Get_Cunit_Unit_Number (Body_Unit)) := True;\n-               end if;\n-            end;\n-         end if;\n+              and then not Seen (Get_Cunit_Unit_Number (Body_Unit))\n+              and then\n+                (No (System_Aux_Id)\n+                   or else Unit_Num /= Get_Source_Unit (System_Aux_Id))\n+              and then not Circular_Dependence (Body_Unit)\n+              and then Do_Main\n+            then\n+               Body_Num := Get_Cunit_Unit_Number (Body_Unit);\n+               Seen (Body_Num) := True;\n+               Do_Action (Body_Unit, Unit (Body_Unit));\n+               Done (Body_Num) := True;\n+            end if;\n+         end;\n       end Do_Unit_And_Dependents;\n \n       --  Local Declarations"}, {"sha": "464a764a3e3bd3c2b3c73a6693acab3b6d73b01c", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=dbf044304cdd78d56ded200412de9de0d22ee536", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +36,7 @@\n --  Historical note. Many of the routines here were originally in Einfo, but\n --  Einfo is supposed to be a relatively low level package dealing with the\n --  content of entities in the tree, so this package is used for routines that\n---  require more than minimal semantic knowldge.\n+--  require more than minimal semantic knowledge.\n \n with Alloc; use Alloc;\n with Table;"}, {"sha": "81dcf1f216c6a8d4dddf18266982769386fc5ceb", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf044304cdd78d56ded200412de9de0d22ee536/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=dbf044304cdd78d56ded200412de9de0d22ee536", "patch": "@@ -705,11 +705,7 @@ package Sem_Util is\n    --  by a derived type declarations.\n \n    function Is_LHS (N : Node_Id) return Boolean;\n-   --  Returns True iff N is an identifier used as Name in an assignment\n-   --  statement.\n-   --  Which is true, the spec or the body???\n-   --  The body does not restrict N to be an identifier, it can be any\n-   --  expression on the left side of an assignment ???\n+   --  Returns True iff N is used as Name in an assignment statement.\n \n    function Is_Library_Level_Entity (E : Entity_Id) return Boolean;\n    --  A library-level declaration is one that is accessible from Standard,"}]}