{"sha": "c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliZDZiY2Q1ZDNiNjI1MGY4NmY0OGIyYmI0NzVlNDFhNDIwYzUxMg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-01-05T22:04:53Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-01-05T22:04:53Z"}, "message": "rtlanal.c (refers_to_regno_p): Change return value from int to bool.\n\ngcc/\n\t* rtlanal.c (refers_to_regno_p): Change return value from int to bool.\n\t* rtl.h (refers_to_regno_p): Add overload.\n\t* cse.c: Use it.\n\t* bt-load.c: Likewise.\n\t* combine.c: Likewise.\n\t* df-scan.c: Likewise.\n\t* sched-deps.c: Likewise.\n\t* config/s390/s390.c: Likewise.\n\t* config/m32r/m32r.c: Likewise.\n\t* config/rs6000/spe.md: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/pa/pa.c: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/cris/cris.c: Likewise.\n\t* config/arc/arc.md: Likewise.\n\t* config/arc/arc.c: Likewise.\n\t* config/sh/sh.md: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/frv/frv.c: Likewise.\n\nFrom-SVN: r219203", "tree": {"sha": "8e3fd9b95272e38722b8ccc0c1966d15de16b449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e3fd9b95272e38722b8ccc0c1966d15de16b449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/comments", "author": null, "committer": null, "parents": [{"sha": "fca4adf2095dfcd453ab32250984d85ff66bbd32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca4adf2095dfcd453ab32250984d85ff66bbd32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca4adf2095dfcd453ab32250984d85ff66bbd32"}], "stats": {"total": 119, "additions": 65, "deletions": 54}, "files": [{"sha": "aaa8cc843e524a604c31c4cae3ab0e6c7423d647", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -1,3 +1,25 @@\n+2015-01-05  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* rtlanal.c (refers_to_regno_p): Change return value from int to bool.\n+\t* rtl.h (refers_to_regno_p): Add overload.\n+\t* cse.c: Use it.\n+\t* bt-load.c: Likewise.\n+\t* combine.c: Likewise.\n+\t* df-scan.c: Likewise.\n+\t* sched-deps.c: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/m32r/m32r.c: Likewise.\n+\t* config/rs6000/spe.md: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/cris/cris.c: Likewise.\n+\t* config/arc/arc.md: Likewise.\n+\t* config/arc/arc.c: Likewise.\n+\t* config/sh/sh.md: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/64265"}, {"sha": "6084beb05677067279fdcded805916cba6ca8dff", "filename": "gcc/bt-load.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -533,8 +533,7 @@ compute_defs_uses_and_gen (btr_heap_t *all_btr_defs, btr_def *def_array,\n \t\t\t  int reg;\n \t\t\t  for (reg = first_btr; reg <= last_btr; reg++)\n \t\t\t    if (TEST_HARD_REG_BIT (all_btrs, reg)\n-\t\t\t\t&& refers_to_regno_p (reg, reg + 1, user->insn,\n-\t\t\t\t\t\t      NULL))\n+\t\t\t\t&& refers_to_regno_p (reg, user->insn))\n \t\t\t      {\n \t\t\t\tnote_other_use_this_block (reg,\n \t\t\t\t\t\t\t   info.users_this_bb);\n@@ -597,7 +596,7 @@ compute_defs_uses_and_gen (btr_heap_t *all_btr_defs, btr_def *def_array,\n \t  int regno;\n \n \t  for (regno = first_btr; regno <= last_btr; regno++)\n-\t    if (refers_to_regno_p (regno, regno+1, insn, NULL))\n+\t    if (refers_to_regno_p (regno, insn))\n \t      SET_HARD_REG_BIT (btrs_live_at_end[i], regno);\n \t}\n \n@@ -710,8 +709,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n \t\t      bitmap_clear (reaching_defs_of_reg);\n \t\t      for (reg = first_btr; reg <= last_btr; reg++)\n \t\t\tif (TEST_HARD_REG_BIT (all_btrs, reg)\n-\t\t\t    && refers_to_regno_p (reg, reg + 1, user->insn,\n-\t\t\t\t\t\t  NULL))\n+\t\t\t    && refers_to_regno_p (reg, user->insn))\n \t\t\t  bitmap_or_and (reaching_defs_of_reg,\n \t\t\t    reaching_defs_of_reg,\n \t\t\t    reaching_defs,"}, {"sha": "6bdb3f48aeb2d1c5df335a1a202e6d8263c1aea3", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -13842,7 +13842,7 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t\t  unsigned int i;\n \n \t\t  for (i = regno; i < endregno; i++)\n-\t\t    if ((! refers_to_regno_p (i, i + 1, PATTERN (place), 0)\n+\t\t    if ((! refers_to_regno_p (i, PATTERN (place))\n \t\t\t && ! find_regno_fusage (place, USE, i))\n \t\t\t|| dead_or_set_regno_p (place, i))\n \t\t      {\n@@ -13872,8 +13872,7 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t\t\t\t\t\tNULL, NULL_RTX, NULL_RTX,\n \t\t\t\t\t\tNULL_RTX);\n \t\t\t    }\n-\t\t\t  else if (! refers_to_regno_p (i, i + 1,\n-\t\t\t\t\t\t\tPATTERN (place), 0)\n+\t\t\t  else if (! refers_to_regno_p (i, PATTERN (place))\n \t\t\t\t   && ! find_regno_fusage (place, USE, i))\n \t\t\t    for (tem_insn = PREV_INSN (place); ;\n \t\t\t\t tem_insn = PREV_INSN (tem_insn))"}, {"sha": "e22ad2683841ff2295835fed0cd3e671f0fbc133", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -9059,7 +9059,7 @@ arc_regno_use_in (unsigned int regno, rtx x)\n   int i, j;\n   rtx tem;\n \n-  if (REG_P (x) && refers_to_regno_p (regno, regno+1, x, (rtx *) 0))\n+  if (REG_P (x) && refers_to_regno_p (regno, x))\n     return x;\n \n   fmt = GET_RTX_FORMAT (GET_CODE (x));"}, {"sha": "8fabf5e6fbbcf27caacbb1f764205727c5a830b2", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -952,8 +952,7 @@\n \t last.  Otherwise, load it first.  Note that we cannot have\n \t auto-increment in that case since the address register is known to be\n \t dead.  */\n-      if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t     operands [1], 0))\n+      if (refers_to_regno_p (REGNO (operands[0]), operands[1]))\n \treturn \\\"ld%V1 %R0,%R1\\;ld%V1 %0,%1\\\";\n       else switch (GET_CODE (XEXP(operands[1], 0)))\n \t{"}, {"sha": "517d596c2c4cba39f6ecf3d893b4f552a11359b6", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -2936,8 +2936,7 @@ cris_split_movdx (rtx *operands)\n \t  /* If the high-address word is used in the address, we must load it\n \t     last.  Otherwise, load it first.  */\n \t  rtx addr = XEXP (src, 0);\n-\t  int reverse\n-\t    = (refers_to_regno_p (dregno, dregno + 1, addr, NULL) != 0);\n+\t  int reverse = (refers_to_regno_p (dregno, addr) != 0);\n \n \t  /* The original code implies that we can't do\n \t     move.x [rN+],rM  move.x [rN],rM+1"}, {"sha": "0d4a9b4dd93582b8425cf558bb6c8074d35d2a05", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -5035,7 +5035,7 @@ frv_split_double_load (rtx dest, rtx source)\n      of the registers could affect the value of ADDRESS, so we must\n      be careful which order we do them in.  */\n   if (GET_CODE (address) == PRE_MODIFY\n-      || ! refers_to_regno_p (regno, regno + 1, address, NULL))\n+      || ! refers_to_regno_p (regno, address))\n     {\n       /* It is safe to load the lower-numbered register first.  */\n       emit_move_insn (dest1, change_address (source, SImode, NULL));"}, {"sha": "b0be3fa4421b06293eef90f9dceb5c8f70a3a8a4", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -1096,8 +1096,7 @@ gen_split_move_double (rtx operands[])\n \t{\n \t  /* If the high-address word is used in the address, we must load it\n \t     last.  Otherwise, load it first.  */\n-\t  int reverse\n-\t    = (refers_to_regno_p (dregno, dregno + 1, XEXP (src, 0), 0) != 0);\n+\t  int reverse = refers_to_regno_p (dregno, XEXP (src, 0));\n \n \t  /* We used to optimize loads from single registers as\n "}, {"sha": "b13cbc3c4b9aee656f8d8bf79fcb52f13f65b4ca", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -2649,8 +2649,7 @@ pa_output_move_double (rtx *operands)\n      Handle mem -> register case first.  */\n   if (optype0 == REGOP\n       && (optype1 == MEMOP || optype1 == OFFSOP)\n-      && refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t    operands[1], 0))\n+      && refers_to_regno_p (REGNO (operands[0]), operands[1]))\n     {\n       /* Do the late half first.  */\n       if (addreg1)"}, {"sha": "e2bfcd696f6e0dd96c0228401fd11110f7fef621", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -16087,8 +16087,7 @@ rs6000_output_load_multiple (rtx operands[3])\n     return \"lwz %2,0(%1)\";\n \n   for (i = 0; i < words; i++)\n-    if (refers_to_regno_p (REGNO (operands[2]) + i,\n-\t\t\t   REGNO (operands[2]) + i + 1, operands[1], 0))\n+    if (refers_to_regno_p (REGNO (operands[2]) + i, operands[1]))\n       {\n \tif (i == words-1)\n \t  {"}, {"sha": "d65dcf3121bf95664ab890bf4ea0d5664cd92fb8", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -2421,8 +2421,7 @@\n \tit last.  Otherwise, load it first.  Note that we cannot have\n \tauto-increment in that case since the address register is\n \tknown to be dead.  */\n-      if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t     operands[1], 0))\n+      if (refers_to_regno_p (REGNO (operands[0]), operands[1]))\n \t{\n \t  if (WORDS_BIG_ENDIAN)\n \t    return \\\"lwz %L0,%L1\\;lwz %0,%1\\\";\n@@ -2465,8 +2464,7 @@\n \t  else\n \t    return \\\"evldd%X1 %Y0,%y1\\;evmergehi %Z0,%Y0,%Y0\\\";\n \t}\n-      if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t     operands[1], 0))\n+      if (refers_to_regno_p (REGNO (operands[0]), operands[1]))\n \t{\n \t  if (WORDS_BIG_ENDIAN)\n \t    return \\\"lwz %Z0,%L1\\;lwz %Y0,%1\\\";"}, {"sha": "36b547d512ca15c581e822c3f5fd2f18076d1ed3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -5736,15 +5736,13 @@ reg_used_in_mem_p (int regno, rtx x)\n \n   if (code == MEM)\n     {\n-      if (refers_to_regno_p (regno, regno+1,\n-\t\t\t     XEXP (x, 0), 0))\n+      if (refers_to_regno_p (regno, XEXP (x, 0)))\n \treturn true;\n     }\n   else if (code == SET\n \t   && GET_CODE (SET_DEST (x)) == PC)\n     {\n-      if (refers_to_regno_p (regno, regno+1,\n-\t\t\t     SET_SRC (x), 0))\n+      if (refers_to_regno_p (regno, SET_SRC (x)))\n \treturn true;\n     }\n \n@@ -5795,7 +5793,7 @@ addr_generation_dependency_p (rtx dep_rtx, rtx_insn *insn)\n \t\t  pat = XVECEXP (pat, 0, 0);\n \t\t}\n \t      gcc_assert (GET_CODE (pat) == SET);\n-\t      return refers_to_regno_p (regno, regno+1, SET_SRC (pat), 0);\n+\t      return refers_to_regno_p (regno, SET_SRC (pat));\n \t    }\n \t  else if (get_attr_atype (insn) == ATYPE_AGEN)\n \t    return reg_used_in_mem_p (regno, PATTERN (insn));"}, {"sha": "a4006b4b4a5382b34a88476dc4fa48d58ca22d68", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -1773,7 +1773,7 @@ prepare_move_operands (rtx operands[], machine_mode mode)\n \t reload will fail to find a spill register for rX, since r0 is already\n \t being used for the source.  */\n       else if (TARGET_SH1\n-\t       && refers_to_regno_p (R0_REG, R0_REG + 1, operands[1], (rtx *)0)\n+\t       && refers_to_regno_p (R0_REG, operands[1])\n \t       && MEM_P (operands[0])\n \t       && GET_CODE (XEXP (operands[0], 0)) == PLUS\n \t       && REG_P (XEXP (XEXP (operands[0], 0), 1)))\n@@ -7808,8 +7808,7 @@ sh_expand_prologue (void)\n \t\t{\n \t\t  offset_in_r0 = -1;\n \t\t  sp_in_r0 = 0;\n-\t\t  gcc_assert (!refers_to_regno_p\n-\t\t\t      (R0_REG, R0_REG+1, mem_rtx, (rtx *) 0));\n+\t\t  gcc_assert (!refers_to_regno_p (R0_REG, mem_rtx));\n \t\t}\n \n \t      if (*++tmp_pnt <= 0)"}, {"sha": "37d2a2013b58e9833501df462584d3cb0522ff7d", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -7253,8 +7253,7 @@ label:\n       gcc_unreachable ();\n     }\n \n-  if (regno == -1\n-      || ! refers_to_regno_p (regno, regno + 1, operands[1], 0))\n+  if (regno == -1 || ! refers_to_regno_p (regno, operands[1]))\n     {\n       operands[2] = operand_subword (operands[0], 0, 0, DImode);\n       operands[3] = operand_subword (operands[1], 0, 0, DImode);\n@@ -7787,8 +7786,7 @@ label:\n \t  alter_subreg (&word0, true);\n \t  word1 = gen_rtx_SUBREG (SImode, regop, 4);\n \t  alter_subreg (&word1, true);\n-\t  if (store_p || ! refers_to_regno_p (REGNO (word0),\n-\t\t\t\t\t      REGNO (word0) + 1, addr, 0))\n+\t  if (store_p || ! refers_to_regno_p (REGNO (word0), addr))\n \t    {\n \t      emit_insn (store_p\n \t\t\t ? gen_movsi_ie (mem, word0)\n@@ -8067,8 +8065,7 @@ label:\n       gcc_unreachable ();\n     }\n \n-  if (regno == -1\n-      || ! refers_to_regno_p (regno, regno + 1, operands[1], 0))\n+  if (regno == -1 || ! refers_to_regno_p (regno, operands[1]))\n     {\n       operands[2] = operand_subword (operands[0], 0, 0, DFmode);\n       operands[3] = operand_subword (operands[1], 0, 0, DFmode);"}, {"sha": "6e7ea1e562d8c3650b84c725d4d3420af4d74fe0", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -815,7 +815,7 @@ xstormy16_split_move (machine_mode mode, rtx dest, rtx src)\n       gcc_assert (refers_to_regno_p (regno, regno + num_words,\n \t\t\t\t     mem_operand, 0));\n \n-      if (refers_to_regno_p (regno, regno + 1, mem_operand, 0))\n+      if (refers_to_regno_p (regno, mem_operand))\n \tdirection = -1;\n       else if (refers_to_regno_p (regno + num_words - 1, regno + num_words,\n \t\t\t\t  mem_operand, 0))"}, {"sha": "53ca9661b69dc08cdfe8b5b0cf470c90304b579e", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -1982,8 +1982,7 @@ remove_invalid_refs (unsigned int regno)\n     for (p = table[i]; p; p = next)\n       {\n \tnext = p->next_same_hash;\n-\tif (!REG_P (p->exp)\n-\t    && refers_to_regno_p (regno, regno + 1, p->exp, (rtx *) 0))\n+\tif (!REG_P (p->exp) && refers_to_regno_p (regno, p->exp))\n \t  remove_from_table (p, i);\n       }\n }\n@@ -2011,7 +2010,7 @@ remove_invalid_subreg_refs (unsigned int regno, unsigned int offset,\n \t\t|| (((SUBREG_BYTE (exp)\n \t\t      + (GET_MODE_SIZE (GET_MODE (exp)) - 1)) >= offset)\n \t\t    && SUBREG_BYTE (exp) <= end))\n-\t    && refers_to_regno_p (regno, regno + 1, p->exp, (rtx *) 0))\n+\t    && refers_to_regno_p (regno, p->exp))\n \t  remove_from_table (p, i);\n       }\n }"}, {"sha": "3690a362a3d7fcd403f549b483395bac3b8c9b07", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -3173,8 +3173,7 @@ df_get_call_refs (struct df_collection_rec *collection_rec,\n \t       && !TEST_HARD_REG_BIT (defs_generated, i)\n \t       && (!is_sibling_call\n \t\t   || !bitmap_bit_p (df->exit_block_uses, i)\n-\t\t   || refers_to_regno_p (i, i+1,\n-\t\t\t\t         crtl->return_rtx, NULL)))\n+\t\t   || refers_to_regno_p (i, crtl->return_rtx)))\n \t  df_ref_record (DF_REF_BASE, collection_rec, regno_reg_rtx[i],\n \t\t\t NULL, bb, insn_info, DF_REF_REG_DEF,\n \t\t\t DF_REF_MAY_CLOBBER | flags);"}, {"sha": "e5e4560d3ae8d8899af1b24e39f54ad7169ec970", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -2837,7 +2837,7 @@ extern int reg_set_p (const_rtx, const_rtx);\n extern int multiple_sets (const_rtx);\n extern int set_noop_p (const_rtx);\n extern int noop_move_p (const_rtx);\n-extern int refers_to_regno_p (unsigned int, unsigned int, const_rtx, rtx *);\n+extern bool refers_to_regno_p (unsigned int, unsigned int, const_rtx, rtx *);\n extern int reg_overlap_mentioned_p (const_rtx, const_rtx);\n extern const_rtx set_of (const_rtx, const_rtx);\n extern void record_hard_reg_sets (rtx, const_rtx, void *);\n@@ -2885,6 +2885,13 @@ extern bool tablejump_p (const rtx_insn *, rtx *, rtx_jump_table_data **);\n extern int computed_jump_p (const_rtx);\n extern bool tls_referenced_p (const_rtx);\n \n+/* Overload for refers_to_regno_p for checking a single register.  */\n+inline bool\n+refers_to_regno_p (unsigned int regnum, const_rtx x, rtx* loc = NULL)\n+{\n+  return refers_to_regno_p (regnum, regnum + 1, x, loc);\n+}\n+\n /* Callback for for_each_inc_dec, to process the autoinc operation OP\n    within MEM that sets DEST to SRC + SRCOFF, or SRC if SRCOFF is\n    NULL.  The callback is passed the same opaque ARG passed to"}, {"sha": "43ed2de2093e8138a42f7f727f1faad627b263f6", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -1402,7 +1402,7 @@ noop_move_p (const_rtx insn)\n    References contained within the substructure at LOC do not count.\n    LOC may be zero, meaning don't ignore anything.  */\n \n-int\n+bool\n refers_to_regno_p (unsigned int regno, unsigned int endregno, const_rtx x,\n \t\t   rtx *loc)\n {\n@@ -1415,7 +1415,7 @@ refers_to_regno_p (unsigned int regno, unsigned int endregno, const_rtx x,\n   /* The contents of a REG_NONNEG note is always zero, so we must come here\n      upon repeat in case the last REG_NOTE is a REG_NONNEG note.  */\n   if (x == 0)\n-    return 0;\n+    return false;\n \n   code = GET_CODE (x);\n \n@@ -1433,7 +1433,7 @@ refers_to_regno_p (unsigned int regno, unsigned int endregno, const_rtx x,\n #endif\n \t   || x_regno == FRAME_POINTER_REGNUM)\n \t  && regno >= FIRST_VIRTUAL_REGISTER && regno <= LAST_VIRTUAL_REGISTER)\n-\treturn 1;\n+\treturn true;\n \n       return endregno > x_regno && regno < END_REGNO (x);\n \n@@ -1466,10 +1466,10 @@ refers_to_regno_p (unsigned int regno, unsigned int endregno, const_rtx x,\n \t\t\t\t     SUBREG_REG (SET_DEST (x)), loc))\n \t      || (!REG_P (SET_DEST (x))\n \t\t  && refers_to_regno_p (regno, endregno, SET_DEST (x), loc))))\n-\treturn 1;\n+\treturn true;\n \n       if (code == CLOBBER || loc == &SET_SRC (x))\n-\treturn 0;\n+\treturn false;\n       x = SET_SRC (x);\n       goto repeat;\n \n@@ -1491,18 +1491,18 @@ refers_to_regno_p (unsigned int regno, unsigned int endregno, const_rtx x,\n \t    }\n \t  else\n \t    if (refers_to_regno_p (regno, endregno, XEXP (x, i), loc))\n-\t      return 1;\n+\t      return true;\n \t}\n       else if (fmt[i] == 'E')\n \t{\n \t  int j;\n \t  for (j = XVECLEN (x, i) - 1; j >= 0; j--)\n \t    if (loc != &XVECEXP (x, i, j)\n \t\t&& refers_to_regno_p (regno, endregno, XVECEXP (x, i, j), loc))\n-\t      return 1;\n+\t      return true;\n \t}\n     }\n-  return 0;\n+  return false;\n }\n \n /* Nonzero if modifying X will affect IN.  If X is a register or a SUBREG,"}, {"sha": "a00781de730ec9efde313255c1057378bc202365", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bd6bcd5d3b6250f86f48b2bb475e41a420c512/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=c9bd6bcd5d3b6250f86f48b2bb475e41a420c512", "patch": "@@ -3174,7 +3174,7 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx_insn *insn)\n \t\t{\n \t\t  rtx other = XEXP (list, 0);\n \t\t  if (INSN_CACHED_COND (other) != const_true_rtx\n-\t\t      && refers_to_regno_p (i, i + 1, INSN_CACHED_COND (other), NULL))\n+\t\t      && refers_to_regno_p (i, INSN_CACHED_COND (other)))\n \t\t    INSN_CACHED_COND (other) = const_true_rtx;\n \t\t}\n \t    }"}]}