{"sha": "405e8b492d09dc293d7e9b0e6292e506c5f31344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1ZThiNDkyZDA5ZGMyOTNkN2U5YjBlNjI5MmU1MDZjNWYzMTM0NA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2009-05-31T14:09:12Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2009-05-31T14:09:12Z"}, "message": "thumb2.md (thumb2_extendsidi2): Add a split sub-pattern.\n\n\t* arm/thumb2.md (thumb2_extendsidi2): Add a split sub-pattern.\n\t(thumb2_extendqidi2): New pattern.\n\nFrom-SVN: r148014", "tree": {"sha": "593b7709c11e49d39536b8021db35aa6dfa313c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/593b7709c11e49d39536b8021db35aa6dfa313c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/405e8b492d09dc293d7e9b0e6292e506c5f31344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405e8b492d09dc293d7e9b0e6292e506c5f31344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405e8b492d09dc293d7e9b0e6292e506c5f31344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405e8b492d09dc293d7e9b0e6292e506c5f31344/comments", "author": null, "committer": null, "parents": [{"sha": "71ece3432a57caa18d7d5febcf44414e33287136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ece3432a57caa18d7d5febcf44414e33287136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71ece3432a57caa18d7d5febcf44414e33287136"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "69d0ea2488d02f8f2ba6f363dabb143fa12b6a67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e8b492d09dc293d7e9b0e6292e506c5f31344/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e8b492d09dc293d7e9b0e6292e506c5f31344/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=405e8b492d09dc293d7e9b0e6292e506c5f31344", "patch": "@@ -1,3 +1,8 @@\n+2009-05-31  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm/thumb2.md (thumb2_extendsidi2): Add a split sub-pattern.\n+\t(thumb2_extendqidi2): New pattern.\n+\n 2009-05-31  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vect-loop-manip.c (slpeel_update_phi_nodes_for_guard1): Don't"}, {"sha": "203001be29459695ba31514e535280b298fa78b6", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e8b492d09dc293d7e9b0e6292e506c5f31344/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e8b492d09dc293d7e9b0e6292e506c5f31344/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=405e8b492d09dc293d7e9b0e6292e506c5f31344", "patch": "@@ -895,24 +895,50 @@\n    (set_attr \"neg_pool_range\" \"*,250\")]\n )\n \n-(define_insn \"*thumb2_extendsidi2\"\n+(define_insn_and_split \"*thumb2_extendsidi2\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n         (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_THUMB2\"\n-  \"*\n-    /* ??? Output both instructions unconditionally, otherwise the conditional\n-       execution insn counter gets confused.\n-    if (REGNO (operands[1])\n-        != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0)) */\n-      output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);\n-    return \\\"asr%?\\\\t%R0, %Q0, #31\\\";\n-  \"\n+  \"mov%?\\\\t%Q0, %1\\;asr?\\\\t%R0, %1, #31\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (ashiftrt:SI (match_dup 1) (const_int 31)))]\n+  {\n+    rtx lo_part = gen_lowpart (SImode, operands[0]);\n+\n+    if (!REG_P (lo_part) || REGNO (lo_part) != REGNO (operands[1]))\n+      emit_move_insn (lo_part, operands[1]);\n+    operands[0] = gen_highpart (SImode, operands[0]);\n+  }\n   [(set_attr \"length\" \"8\")\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n+(define_insn_and_split \"*thumb2_extendqidi2\"\n+  [(set (match_operand:DI                 0 \"s_register_operand\"  \"=r,r\")\n+\t(sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"TARGET_THUMB2\"\n+  \"@\n+   sxtb%?\\\\t%Q0, %1\\;asr%?\\\\t%R0, %Q0, #31\n+   ldrsb%?\\\\t%Q0, %1\\;asr%?\\\\t%R0, %Q0, #31\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (sign_extend:SI (match_dup 1)))\n+   (set (match_dup 2) (ashiftrt:SI (match_dup 0) (const_int 31)))]\n+  \"\n+  {\n+    operands[2] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+  }\n+  \"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"ce_count\" \"2\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"*,load_byte\")\n+   (set_attr \"pool_range\" \"*,4092\")\n+   (set_attr \"neg_pool_range\" \"*,250\")]\n+)\n+\n ;; All supported Thumb2 implementations are armv6, so only that case is\n ;; provided.\n (define_insn \"*thumb2_extendqisi_v6\""}]}