{"sha": "c3a2437fec1963d9150b7cf6bd03c1d8d184a301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhMjQzN2ZlYzE5NjNkOTE1MGI3Y2Y2YmQwM2MxZDhkMTg0YTMwMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-09-15T06:17:08Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:17:00Z"}, "message": "x86: Update memcpy/memset inline strategies for -mtune=tremont\n\nSimply memcpy and memset inline strategies to avoid branches for\n-mtune=tremont:\n\n1. Create Tremont cost model from generic cost model.\n2. With MOVE_RATIO and CLEAR_RATIO == 17, GCC will use integer/vector\n   load and store for up to 16 * 16 (256) bytes when the data size is\n   fixed and known.\n3. Inline only if data size is known to be <= 256.\n   a. Use \"rep movsb/stosb\" with simple code sequence if the data size\n      is a constant.\n   b. Use loop if data size is not a constant.\n4. Use memcpy/memset libray function if data size is unknown or > 256.\n\n\t* config/i386/i386-options.c (processor_cost_table): Use\n\ttremont_cost for Tremont.\n\t* config/i386/x86-tune-costs.h (tremont_memcpy): New.\n\t(tremont_memset): Likewise.\n\t(tremont_cost): Likewise.\n\t* config/i386/x86-tune.def (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB):\n\tEnable for Tremont.", "tree": {"sha": "2d03ffaa6a282a4d2839930a3c1762ff2e7bd527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d03ffaa6a282a4d2839930a3c1762ff2e7bd527"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a2437fec1963d9150b7cf6bd03c1d8d184a301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a2437fec1963d9150b7cf6bd03c1d8d184a301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a2437fec1963d9150b7cf6bd03c1d8d184a301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a2437fec1963d9150b7cf6bd03c1d8d184a301/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b03ade93b0f47dd888cd5228f017979c494263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b03ade93b0f47dd888cd5228f017979c494263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b03ade93b0f47dd888cd5228f017979c494263"}], "stats": {"total": 128, "additions": 126, "deletions": 2}, "files": [{"sha": "e7a3bd4aaeadca5f4ecccf3aba0f22321c8b67f9", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a2437fec1963d9150b7cf6bd03c1d8d184a301/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a2437fec1963d9150b7cf6bd03c1d8d184a301/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=c3a2437fec1963d9150b7cf6bd03c1d8d184a301", "patch": "@@ -724,7 +724,7 @@ static const struct processor_costs *processor_cost_table[] =\n   &slm_cost,\n   &slm_cost,\n   &slm_cost,\n-  &slm_cost,\n+  &tremont_cost,\n   &slm_cost,\n   &slm_cost,\n   &skylake_cost,"}, {"sha": "93644be9cb3c49912ea19f30b869a1f674676602", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a2437fec1963d9150b7cf6bd03c1d8d184a301/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a2437fec1963d9150b7cf6bd03c1d8d184a301/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=c3a2437fec1963d9150b7cf6bd03c1d8d184a301", "patch": "@@ -2734,6 +2734,130 @@ struct processor_costs slm_cost = {\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n+static stringop_algs tremont_memcpy[2] = {\n+  {libcall,\n+   {{256, rep_prefix_1_byte, true},\n+    {256, loop, false},\n+    {-1, libcall, false}}},\n+  {libcall,\n+   {{256, rep_prefix_1_byte, true},\n+    {256, loop, false},\n+    {-1, libcall, false}}}};\n+static stringop_algs tremont_memset[2] = {\n+  {libcall,\n+   {{256, rep_prefix_1_byte, true},\n+    {256, loop, false},\n+    {-1, libcall, false}}},\n+  {libcall,\n+   {{256, rep_prefix_1_byte, true},\n+    {256, loop, false},\n+    {-1, libcall, false}}}};\n+static const\n+struct processor_costs tremont_cost = {\n+  {\n+  /* Start of register allocator costs.  integer->integer move cost is 2. */\n+  6,\t\t\t\t     /* cost for loading QImode using movzbl */\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n+  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {6, 6, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {6, 6, 12},\t\t\t\t/* cost of storing fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {6, 6},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {6, 6},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2, 3, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in 32,64,128,256 and 512-bit */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in 32,64,128,256 and 512-bit */\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {6, 6, 6},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n+  /* End of register allocator costs.  */\n+  },\n+\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  /* Setting cost to 2 makes our current implementation of synth_mult result in\n+     use of unnecessary temporary registers causing regression on several\n+     SPECfp benchmarks.  */\n+  COSTS_N_INSNS (1) + 1,\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n+   COSTS_N_INSNS (4)},\t\t\t/*\t\t\t      other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (16),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (22),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (30),\t\t\t/*\t\t\t    SI */\n+   COSTS_N_INSNS (74),\t\t\t/*\t\t\t    DI */\n+   COSTS_N_INSNS (74)},\t\t\t/*\t\t\t    other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  17,\t\t\t\t\t/* MOVE_RATIO */\n+  17,\t\t\t\t\t/* CLEAR_RATIO */\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of loading SSE register\n+\t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of storing SSE register\n+\t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned loads.  */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned storess.  */\n+  2, 3, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n+  6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  18, 6,\t\t\t\t/* Gather load static, per_elt.  */\n+  18, 6,\t\t\t\t/* Gather store static, per_elt.  */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n+  /* Benchmarks shows large regressions on K8 sixtrack benchmark when this\n+     value is increased to perhaps more appropriate value of 5.  */\n+  3,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (17),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (14),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (1),\t\t\t/* cost of cheap SSE instruction.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMA SS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMA SD instruction.  */\n+  COSTS_N_INSNS (13),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (17),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (14),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (18),\t\t\t/* cost of SQRTSD instruction.  */\n+  1, 4, 3, 3,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n+  tremont_memcpy,\n+  tremont_memset,\n+  COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n+};\n+\n static stringop_algs intel_memcpy[2] = {\n   {libcall, {{11, loop, false}, {-1, rep_prefix_4_byte, false}}},\n   {libcall, {{32, loop, false}, {64, rep_prefix_4_byte, false},"}, {"sha": "088edb6c4ca7fcbca5bd8d7a43f04de10b869bf7", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a2437fec1963d9150b7cf6bd03c1d8d184a301/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a2437fec1963d9150b7cf6bd03c1d8d184a301/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=c3a2437fec1963d9150b7cf6bd03c1d8d184a301", "patch": "@@ -273,7 +273,7 @@ DEF_TUNE (X86_TUNE_SINGLE_STRINGOP, \"single_stringop\", m_386 | m_P4_NOCONA)\n    move/set sequences of bytes with known size.  */\n DEF_TUNE (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB,\n \t  \"prefer_known_rep_movsb_stosb\",\n-\t  m_SKYLAKE | m_ALDERLAKE | m_CORE_AVX512)\n+\t  m_SKYLAKE | m_ALDERLAKE | m_TREMONT | m_CORE_AVX512)\n \n /* X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES: Enable generation of\n    compact prologues and epilogues by issuing a misaligned moves.  This"}]}