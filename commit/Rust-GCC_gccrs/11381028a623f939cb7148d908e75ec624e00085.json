{"sha": "11381028a623f939cb7148d908e75ec624e00085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzODEwMjhhNjIzZjkzOWNiNzE0OGQ5MDhlNzVlYzYyNGUwMDA4NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-02-27T09:28:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:01Z"}, "message": "[Ada] Membership test against a non-excluding subtype\n\n2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_In): Fix handling of null exclusion.", "tree": {"sha": "6d15b85d5f7a34345b457f9fcbfc3aced878e69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d15b85d5f7a34345b457f9fcbfc3aced878e69c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11381028a623f939cb7148d908e75ec624e00085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11381028a623f939cb7148d908e75ec624e00085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11381028a623f939cb7148d908e75ec624e00085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11381028a623f939cb7148d908e75ec624e00085/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6ca7a87bf96e0baa3bfb3775bf1bff40ea0464"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "d9a96a5ee6fa68ab1b21b7ae540427928d8771cf", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11381028a623f939cb7148d908e75ec624e00085/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11381028a623f939cb7148d908e75ec624e00085/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=11381028a623f939cb7148d908e75ec624e00085", "patch": "@@ -6468,12 +6468,13 @@ package body Exp_Ch4 is\n \n       else\n          declare\n-            Typ       : Entity_Id        := Etype (Rop);\n-            Is_Acc    : constant Boolean := Is_Access_Type (Typ);\n-            Cond      : Node_Id          := Empty;\n-            New_N     : Node_Id;\n-            Obj       : Node_Id          := Lop;\n-            SCIL_Node : Node_Id;\n+            Typ                  : Entity_Id        := Etype (Rop);\n+            Is_Acc               : constant Boolean := Is_Access_Type (Typ);\n+            Check_Null_Exclusion : Boolean;\n+            Cond                 : Node_Id          := Empty;\n+            New_N                : Node_Id;\n+            Obj                  : Node_Id          := Lop;\n+            SCIL_Node            : Node_Id;\n \n          begin\n             Remove_Side_Effects (Obj);\n@@ -6549,12 +6550,19 @@ package body Exp_Ch4 is\n             --  Here we have a non-scalar type\n \n             if Is_Acc then\n+\n+               --  If the null exclusion checks are not compatible, need to\n+               --  perform further checks. In other words, we cannot have\n+               --  Ltyp including null and Typ excluding null. All other cases\n+               --  are OK.\n+\n+               Check_Null_Exclusion :=\n+                 Can_Never_Be_Null (Typ) and then not Can_Never_Be_Null (Ltyp);\n                Typ := Designated_Type (Typ);\n             end if;\n \n             if not Is_Constrained (Typ) then\n-               Rewrite (N, New_Occurrence_Of (Standard_True, Loc));\n-               Analyze_And_Resolve (N, Restyp);\n+               Cond := New_Occurrence_Of (Standard_True, Loc);\n \n             --  For the constrained array case, we have to check the subscripts\n             --  for an exact match if the lengths are non-zero (the lengths\n@@ -6610,19 +6618,6 @@ package body Exp_Ch4 is\n                            Build_Attribute_Reference\n                              (New_Occurrence_Of (Typ, Loc), Name_Last, J)));\n                   end loop;\n-\n-                  if Is_Acc then\n-                     Cond :=\n-                       Make_Or_Else (Loc,\n-                         Left_Opnd  =>\n-                           Make_Op_Eq (Loc,\n-                             Left_Opnd  => Obj,\n-                             Right_Opnd => Make_Null (Loc)),\n-                         Right_Opnd => Cond);\n-                  end if;\n-\n-                  Rewrite (N, Cond);\n-                  Analyze_And_Resolve (N, Restyp);\n                end Check_Subscripts;\n \n             --  These are the cases where constraint checks may be required,\n@@ -6638,24 +6633,32 @@ package body Exp_Ch4 is\n                if Has_Discriminants (Typ) then\n                   Cond := Make_Op_Not (Loc,\n                     Right_Opnd => Build_Discriminant_Checks (Obj, Typ));\n-\n-                  if Is_Acc then\n-                     Cond := Make_Or_Else (Loc,\n-                       Left_Opnd  =>\n-                         Make_Op_Eq (Loc,\n-                           Left_Opnd  => Obj,\n-                           Right_Opnd => Make_Null (Loc)),\n-                       Right_Opnd => Cond);\n-                  end if;\n-\n                else\n                   Cond := New_Occurrence_Of (Standard_True, Loc);\n                end if;\n+            end if;\n \n-               Rewrite (N, Cond);\n-               Analyze_And_Resolve (N, Restyp);\n+            if Is_Acc then\n+               if Check_Null_Exclusion then\n+                  Cond := Make_And_Then (Loc,\n+                    Left_Opnd  =>\n+                      Make_Op_Ne (Loc,\n+                        Left_Opnd  => Obj,\n+                        Right_Opnd => Make_Null (Loc)),\n+                    Right_Opnd => Cond);\n+               else\n+                  Cond := Make_Or_Else (Loc,\n+                    Left_Opnd  =>\n+                      Make_Op_Eq (Loc,\n+                        Left_Opnd  => Obj,\n+                        Right_Opnd => Make_Null (Loc)),\n+                    Right_Opnd => Cond);\n+               end if;\n             end if;\n \n+            Rewrite (N, Cond);\n+            Analyze_And_Resolve (N, Restyp);\n+\n             --  Ada 2012 (AI05-0149): Handle membership tests applied to an\n             --  expression of an anonymous access type. This can involve an\n             --  accessibility test and a tagged type membership test in the"}]}