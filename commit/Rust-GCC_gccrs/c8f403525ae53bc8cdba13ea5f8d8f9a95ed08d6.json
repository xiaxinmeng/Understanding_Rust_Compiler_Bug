{"sha": "c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhmNDAzNTI1YWU1M2JjOGNkYmExM2VhNWY4ZDhmOWE5NWVkMDhkNg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2014-09-03T14:26:38Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2014-09-03T14:26:38Z"}, "message": "re PR ipa/62015 (ipa-cp-clone uses a clone that is too specialized for the call context)\n\n2014-09-03  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/62015\n\t* ipa-cp.c (intersect_aggregates_with_edge): Handle impermissible\n\tpass-trough jump functions correctly.\n\ntestsuite/\n\t* g++.dg/ipa/pr62015.C: New test.\n\nFrom-SVN: r214878", "tree": {"sha": "0474a224e6767ff5d3e683ccecb93ecc6f3c7fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0474a224e6767ff5d3e683ccecb93ecc6f3c7fcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f9549ee682082ec99fac4d73626fc8fc6f5f73b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9549ee682082ec99fac4d73626fc8fc6f5f73b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9549ee682082ec99fac4d73626fc8fc6f5f73b"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "de6481613d1297e799b479a80f87160b8d7ee887", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6", "patch": "@@ -1,3 +1,9 @@\n+2014-09-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/62015\n+\t* ipa-cp.c (intersect_aggregates_with_edge): Handle impermissible\n+\tpass-trough jump functions correctly.\n+\n 2014-09-03  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61986"}, {"sha": "d36563490160d1940ae20e419078627b74aff828", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6", "patch": "@@ -3048,6 +3048,11 @@ intersect_aggregates_with_edge (struct cgraph_edge *cs, int index,\n \t\tintersect_with_agg_replacements (cs->caller, src_idx,\n \t\t\t\t\t\t &inter, 0);\n \t    }\n+\t  else\n+\t    {\n+\t      inter.release ();\n+\t      return vNULL;\n+\t    }\n \t}\n       else\n \t{\n@@ -3063,6 +3068,11 @@ intersect_aggregates_with_edge (struct cgraph_edge *cs, int index,\n \t      else\n \t\tintersect_with_plats (src_plats, &inter, 0);\n \t    }\n+\t  else\n+\t    {\n+\t      inter.release ();\n+\t      return vNULL;\n+\t    }\n \t}\n     }\n   else if (jfunc->type == IPA_JF_ANCESTOR"}, {"sha": "f0bca8f0bc2bdb927e128001c57a06fab12660d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6", "patch": "@@ -1,3 +1,8 @@\n+2014-09-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/62015\n+\t* g++.dg/ipa/pr62015.C: New test.\n+\n 2014-09-03  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61986"}, {"sha": "950b46e759b3a6c439388d29937c54bd555af422", "filename": "gcc/testsuite/g++.dg/ipa/pr62015.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr62015.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr62015.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr62015.C?ref=c8f403525ae53bc8cdba13ea5f8d8f9a95ed08d6", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -std=c++11\"  } */\n+\n+\n+extern \"C\" int printf(const char *fmt, ...);\n+extern \"C\" void abort(void);\n+\n+struct Side {\n+    enum _Value { Left, Right, Invalid };\n+\n+    constexpr Side() : _value(Invalid) {}\n+    constexpr Side(_Value value) : _value(value) {}\n+    operator _Value() const { return (_Value)_value; }\n+\n+  private:\n+    char _value;\n+};\n+\n+struct A {\n+    void init();\n+    void adjust(Side side, bool final);\n+    void move(Side side);\n+};\n+\n+void A::init()\n+{\n+    adjust(Side::Invalid, false);\n+}\n+\n+static void __attribute__((noinline))\n+check (int v, int final)\n+{\n+    if (v != 0)\n+      abort();\n+}\n+\n+\n+__attribute__((noinline))\n+void A::adjust(Side side, bool final)\n+{\n+  check ((int)side, final);\n+}\n+\n+void A::move(Side side)\n+{\n+    adjust(side, false);\n+    adjust(side, true);\n+}\n+\n+int main()\n+{\n+    A t;\n+    t.move(Side::Left);\n+    return 0;\n+}"}]}