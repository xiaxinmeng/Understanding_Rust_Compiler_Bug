{"sha": "d3677132a22eb57336e8a749a19f346ac46cdca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM2NzcxMzJhMjJlYjU3MzM2ZThhNzQ5YTE5ZjM0NmFjNDZjZGNhOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-26T15:35:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-26T15:35:02Z"}, "message": "list.cc: Use noexcept per the FDIS.\n\n2011-05-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* src/list.cc: Use noexcept per the FDIS.\n\t* src/compatibility-list-2.cc: Likewise.\n\t* include/debug/set.h: Likewise.\n\t* include/debug/unordered_map: Likewise.\n\t* include/debug/multiset.h: Likewise.\n\t* include/debug/forward_list: Likewise.\n\t* include/debug/unordered_set: Likewise.\n\t* include/debug/vector: Likewise.\n\t* include/debug/map.h: Likewise.\n\t* include/debug/deque: Likewise.\n\t* include/debug/list: Likewise.\n\t* include/debug/multimap.h: Likewise.\n\t* include/profile/set.h: Likewise.\n\t* include/profile/unordered_map: Likewise.\n\t* include/profile/multiset.h: Likewise.\n\t* include/profile/forward_list: Likewise.\n\t* include/profile/vector: Likewise.\n\t* include/profile/unordered_set: Likewise.\n\t* include/profile/map.h: Likewise.\n\t* include/profile/deque: Likewise.\n\t* include/profile/list: Likewise.\n\t* include/profile/multimap.h: Likewise.\n\t* include/bits/hashtable.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_map.h: Likewise.\n\t* include/bits/hashtable_policy.h: Likewise.\n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/forward_list.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/bits/stl_tree.h: Likewise.\n\nFrom-SVN: r174295", "tree": {"sha": "44782d53d5d545431f8c57862eb297e196007679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44782d53d5d545431f8c57862eb297e196007679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3677132a22eb57336e8a749a19f346ac46cdca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3677132a22eb57336e8a749a19f346ac46cdca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3677132a22eb57336e8a749a19f346ac46cdca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3677132a22eb57336e8a749a19f346ac46cdca8/comments", "author": null, "committer": null, "parents": [{"sha": "c61e40d377de73443f80d44900c024459b3631e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61e40d377de73443f80d44900c024459b3631e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61e40d377de73443f80d44900c024459b3631e1"}], "stats": {"total": 1086, "additions": 564, "deletions": 522}, "files": [{"sha": "af0453b45cadcba0b30b5236c7ae7dfbfaf7f6f9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,3 +1,40 @@\n+2011-05-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* src/list.cc: Use noexcept per the FDIS.\n+\t* src/compatibility-list-2.cc: Likewise.\n+\t* include/debug/set.h: Likewise.\n+\t* include/debug/unordered_map: Likewise.\n+\t* include/debug/multiset.h: Likewise.\n+\t* include/debug/forward_list: Likewise.\n+\t* include/debug/unordered_set: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/profile/set.h: Likewise.\n+\t* include/profile/unordered_map: Likewise.\n+\t* include/profile/multiset.h: Likewise.\n+\t* include/profile/forward_list: Likewise.\n+\t* include/profile/vector: Likewise.\n+\t* include/profile/unordered_set: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\t* include/profile/deque: Likewise.\n+\t* include/profile/list: Likewise.\n+\t* include/profile/multimap.h: Likewise.\n+\t* include/bits/hashtable.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_map.h: Likewise.\n+\t* include/bits/hashtable_policy.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/forward_list.h: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/bits/stl_tree.h: Likewise.\n+\n 2011-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_queue.h: Use noexcept per the FDIS."}, {"sha": "1e242f3f760c87b50b1daf7af549ced7c5f4ad53", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -76,7 +76,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n     void\n-    _M_reverse_after()\n+    _M_reverse_after() noexcept\n     {\n       _Fwd_list_node_base* __tail = _M_next;\n       if (!__tail)\n@@ -300,11 +300,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Fwd_list_node<_Tp>                     _Node;\n \n       _Node_alloc_type&\n-      _M_get_Node_allocator()\n+      _M_get_Node_allocator() noexcept\n       { return *static_cast<_Node_alloc_type*>(&this->_M_impl); }\n \n       const _Node_alloc_type&\n-      _M_get_Node_allocator() const\n+      _M_get_Node_allocator() const noexcept\n       { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }\n \n       _Fwd_list_base()\n@@ -644,7 +644,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Get a copy of the memory allocation object.\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const noexcept\n       { return this->_M_get_Node_allocator(); }\n \n       // 23.2.3.2 iterators:\n@@ -654,7 +654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  in the %forward_list.  Iteration is done in ordinary element order.\n        */\n       iterator\n-      before_begin()\n+      before_begin() noexcept\n       { return iterator(&this->_M_impl._M_head); }\n \n       /**\n@@ -663,15 +663,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      before_begin() const\n+      before_begin() const noexcept\n       { return const_iterator(&this->_M_impl._M_head); }\n \n       /**\n        *  Returns a read/write iterator that points to the first element\n        *  in the %forward_list.  Iteration is done in ordinary element order.\n        */\n       iterator\n-      begin()\n+      begin() noexcept\n       { return iterator(this->_M_impl._M_head._M_next); }\n \n       /**\n@@ -680,7 +680,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      begin() const\n+      begin() const noexcept\n       { return const_iterator(this->_M_impl._M_head._M_next); }\n \n       /**\n@@ -689,7 +689,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       iterator\n-      end()\n+      end() noexcept\n       { return iterator(0); }\n \n       /**\n@@ -698,7 +698,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return const_iterator(0); }\n \n       /**\n@@ -707,7 +707,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(this->_M_impl._M_head._M_next); }\n \n       /**\n@@ -716,7 +716,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      cbefore_begin() const\n+      cbefore_begin() const noexcept\n       { return const_iterator(&this->_M_impl._M_head); }\n \n       /**\n@@ -725,22 +725,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  ordinary element order.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(0); }\n \n       /**\n        *  Returns true if the %forward_list is empty.  (Thus begin() would\n        *  equal end().)\n        */\n       bool\n-      empty() const\n+      empty() const noexcept\n       { return this->_M_impl._M_head._M_next == 0; }\n \n       /**\n        *  Returns the largest possible size of %forward_list.\n        */\n       size_type\n-      max_size() const\n+      max_size() const noexcept\n       { return this->_M_get_Node_allocator().max_size(); }\n \n       // 23.2.3.3 element access:\n@@ -1021,7 +1021,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Managing the pointer is the user's responsibility.\n        */\n       void\n-      clear()\n+      clear() noexcept\n       { this->_M_erase_after(&this->_M_impl._M_head, 0); }\n \n       // 23.2.3.5 forward_list operations:\n@@ -1196,7 +1196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Reverse the order of elements in the list in linear time.\n        */\n       void\n-      reverse()\n+      reverse() noexcept\n       { this->_M_impl._M_head._M_reverse_after(); }\n \n     private:"}, {"sha": "fd6bc32b0d8435375bbd8786116fdf16fd7449e8", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -239,43 +239,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Basic container operations\n       iterator\n-      begin()\n+      begin() noexcept\n       { return iterator(_M_buckets + _M_begin_bucket_index); }\n \n       const_iterator\n-      begin() const\n+      begin() const noexcept\n       { return const_iterator(_M_buckets + _M_begin_bucket_index); }\n \n       iterator\n-      end()\n+      end() noexcept\n       { return iterator(_M_buckets + _M_bucket_count); }\n \n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return const_iterator(_M_buckets + _M_bucket_count); }\n \n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_M_buckets + _M_begin_bucket_index); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_M_buckets + _M_bucket_count); }\n \n       size_type\n-      size() const\n+      size() const noexcept\n       { return _M_element_count; }\n \n       bool\n-      empty() const\n+      empty() const noexcept\n       { return size() == 0; }\n \n       allocator_type\n-      get_allocator() const\n+      get_allocator() const noexcept\n       { return allocator_type(_M_node_allocator); }\n \n       size_type\n-      max_size() const\n+      max_size() const noexcept\n       { return _M_node_allocator.max_size(); }\n \n       // Observers\n@@ -287,11 +287,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Bucket operations\n       size_type\n-      bucket_count() const\n+      bucket_count() const noexcept\n       { return _M_bucket_count; }\n \n       size_type\n-      max_bucket_count() const\n+      max_bucket_count() const noexcept\n       { return max_size(); }\n \n       size_type\n@@ -331,7 +331,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return const_local_iterator(0); }\n \n       float\n-      load_factor() const\n+      load_factor() const noexcept\n       {\n \treturn static_cast<float>(size()) / static_cast<float>(bucket_count());\n       }\n@@ -447,7 +447,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       erase(const_iterator, const_iterator);\n \n       void\n-      clear();\n+      clear() noexcept;\n \n       // Set number of buckets to be appropriate for container of n element.\n       void rehash(size_type __n);\n@@ -1167,7 +1167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n-    clear()\n+    clear() noexcept\n     {\n       _M_deallocate_nodes(_M_buckets, _M_bucket_count);\n       _M_element_count = 0;"}, {"sha": "3a22e9ac5c9981f57d502bc96ef4c56419e48b73", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -391,7 +391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _M_max_load_factor(__z), _M_growth_factor(2.f), _M_next_resize(0) { }\n \n     float\n-    max_load_factor() const\n+    max_load_factor() const noexcept\n     { return _M_max_load_factor; }\n \n     // Return a bucket size no smaller than n.\n@@ -615,7 +615,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Rehash_base<_Prime_rehash_policy, _Hashtable>\n     {\n       float\n-      max_load_factor() const\n+      max_load_factor() const noexcept\n       {\n \tconst _Hashtable* __this = static_cast<const _Hashtable*>(this);\n \treturn __this->__rehash_policy().max_load_factor();"}, {"sha": "47156418509b8bc0db265b27d63e425a9542af2d", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -74,13 +74,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _Bit_reference(_Bit_type * __x, _Bit_type __y)\n     : _M_p(__x), _M_mask(__y) { }\n \n-    _Bit_reference() : _M_p(0), _M_mask(0) { }\n+    _Bit_reference() _GLIBCXX_NOEXCEPT : _M_p(0), _M_mask(0) { }\n \n-    operator bool() const\n+    operator bool() const _GLIBCXX_NOEXCEPT\n     { return !!(*_M_p & _M_mask); }\n \n     _Bit_reference&\n-    operator=(bool __x)\n+    operator=(bool __x) _GLIBCXX_NOEXCEPT\n     {\n       if (__x)\n \t*_M_p |= _M_mask;\n@@ -90,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     }\n \n     _Bit_reference&\n-    operator=(const _Bit_reference& __x)\n+    operator=(const _Bit_reference& __x) _GLIBCXX_NOEXCEPT\n     { return *this = bool(__x); }\n \n     bool\n@@ -102,7 +102,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     { return !bool(*this) && bool(__x); }\n \n     void\n-    flip()\n+    flip() _GLIBCXX_NOEXCEPT\n     { *_M_p ^= _M_mask; }\n   };\n \n@@ -398,15 +398,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Alloc allocator_type;\n \n       _Bit_alloc_type&\n-      _M_get_Bit_allocator()\n+      _M_get_Bit_allocator() _GLIBCXX_NOEXCEPT\n       { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }\n \n       const _Bit_alloc_type&\n-      _M_get_Bit_allocator() const\n+      _M_get_Bit_allocator() const _GLIBCXX_NOEXCEPT\n       { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }\n \n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return allocator_type(_M_get_Bit_allocator()); }\n \n       _Bvector_base()\n@@ -612,61 +612,61 @@ template<typename _Alloc>\n #endif\n \n     iterator\n-    begin()\n+    begin() _GLIBCXX_NOEXCEPT\n     { return this->_M_impl._M_start; }\n \n     const_iterator\n-    begin() const\n+    begin() const _GLIBCXX_NOEXCEPT\n     { return this->_M_impl._M_start; }\n \n     iterator\n-    end()\n+    end() _GLIBCXX_NOEXCEPT\n     { return this->_M_impl._M_finish; }\n \n     const_iterator\n-    end() const\n+    end() const _GLIBCXX_NOEXCEPT\n     { return this->_M_impl._M_finish; }\n \n     reverse_iterator\n-    rbegin()\n+    rbegin() _GLIBCXX_NOEXCEPT\n     { return reverse_iterator(end()); }\n \n     const_reverse_iterator\n-    rbegin() const\n+    rbegin() const _GLIBCXX_NOEXCEPT\n     { return const_reverse_iterator(end()); }\n \n     reverse_iterator\n-    rend()\n+    rend() _GLIBCXX_NOEXCEPT\n     { return reverse_iterator(begin()); }\n \n     const_reverse_iterator\n-    rend() const\n+    rend() const _GLIBCXX_NOEXCEPT\n     { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n     const_iterator\n-    cbegin() const\n+    cbegin() const noexcept\n     { return this->_M_impl._M_start; }\n \n     const_iterator\n-    cend() const\n+    cend() const noexcept\n     { return this->_M_impl._M_finish; }\n \n     const_reverse_iterator\n-    crbegin() const\n+    crbegin() const noexcept\n     { return const_reverse_iterator(end()); }\n \n     const_reverse_iterator\n-    crend() const\n+    crend() const noexcept\n     { return const_reverse_iterator(begin()); }\n #endif\n \n     size_type\n-    size() const\n+    size() const _GLIBCXX_NOEXCEPT\n     { return size_type(end() - begin()); }\n \n     size_type\n-    max_size() const\n+    max_size() const _GLIBCXX_NOEXCEPT\n     {\n       const size_type __isize =\n \t__gnu_cxx::__numeric_traits<difference_type>::__max\n@@ -677,12 +677,12 @@ template<typename _Alloc>\n     }\n \n     size_type\n-    capacity() const\n+    capacity() const _GLIBCXX_NOEXCEPT\n     { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)\n \t\t       - begin()); }\n \n     bool\n-    empty() const\n+    empty() const _GLIBCXX_NOEXCEPT\n     { return begin() == end(); }\n \n     reference\n@@ -741,7 +741,7 @@ template<typename _Alloc>\n     // here due to the way we are implementing DR 464 in the debug-mode\n     // vector class.\n     void\n-    data() { }\n+    data() _GLIBCXX_NOEXCEPT { }\n \n     void\n     push_back(bool __x)\n@@ -768,7 +768,7 @@ template<typename _Alloc>\n \n     // [23.2.5]/1, third-to-last entry in synopsis listing\n     static void\n-    swap(reference __x, reference __y)\n+    swap(reference __x, reference __y) _GLIBCXX_NOEXCEPT\n     {\n       bool __tmp = __x;\n       __x = __y;\n@@ -841,15 +841,15 @@ template<typename _Alloc>\n #endif\n \n     void\n-    flip()\n+    flip() _GLIBCXX_NOEXCEPT\n     {\n       for (_Bit_type * __p = this->_M_impl._M_start._M_p;\n \t   __p != this->_M_impl._M_end_of_storage; ++__p)\n         *__p = ~*__p;\n     }\n \n     void\n-    clear()\n+    clear() _GLIBCXX_NOEXCEPT\n     { _M_erase_at_end(begin()); }\n \n    "}, {"sha": "209287b56fcae3d4c7d957e43273c2f49f2008d7", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -441,7 +441,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Alloc                  allocator_type;\n \n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return allocator_type(_M_get_Tp_allocator()); }\n \n       typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;\n@@ -508,15 +508,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       };\n \n       _Tp_alloc_type&\n-      _M_get_Tp_allocator()\n+      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT\n       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }\n \n       const _Tp_alloc_type&\n-      _M_get_Tp_allocator() const\n+      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT\n       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }\n \n       _Map_alloc_type\n-      _M_get_map_allocator() const\n+      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT\n       { return _Map_alloc_type(_M_get_Tp_allocator()); }\n \n       _Tp*\n@@ -997,7 +997,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Get a copy of the memory allocation object.\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _Base::get_allocator(); }\n \n       // iterators\n@@ -1006,15 +1006,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  %deque.  Iteration is done in ordinary element order.\n        */\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_start; }\n \n       /**\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %deque.  Iteration is done in ordinary element order.\n        */\n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_start; }\n \n       /**\n@@ -1023,7 +1023,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish; }\n \n       /**\n@@ -1032,7 +1032,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  ordinary element order.\n        */\n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish; }\n \n       /**\n@@ -1041,7 +1041,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->_M_impl._M_finish); }\n \n       /**\n@@ -1050,7 +1050,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  reverse element order.\n        */\n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->_M_impl._M_finish); }\n \n       /**\n@@ -1059,7 +1059,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  in reverse element order.\n        */\n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->_M_impl._M_start); }\n \n       /**\n@@ -1068,7 +1068,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  done in reverse element order.\n        */\n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->_M_impl._M_start); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -1077,7 +1077,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element in the %deque.  Iteration is done in ordinary element order.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return this->_M_impl._M_start; }\n \n       /**\n@@ -1086,7 +1086,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  ordinary element order.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return this->_M_impl._M_finish; }\n \n       /**\n@@ -1095,7 +1095,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  reverse element order.\n        */\n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(this->_M_impl._M_finish); }\n \n       /**\n@@ -1104,19 +1104,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  done in reverse element order.\n        */\n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(this->_M_impl._M_start); }\n #endif\n \n       // [23.2.1.2] capacity\n       /**  Returns the number of elements in the %deque.  */\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish - this->_M_impl._M_start; }\n \n       /**  Returns the size() of the largest possible %deque.  */\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_get_Tp_allocator().max_size(); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -1197,7 +1197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  equal end().)\n        */\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish == this->_M_impl._M_start; }\n \n       // element access\n@@ -1576,7 +1576,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the user's responsibility.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { _M_erase_at_end(begin()); }\n \n     protected:"}, {"sha": "5144bb67e7bbce7384d5abd141c03dbc3a097adf", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -77,22 +77,22 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     {\n       _List_node_base* _M_next;\n       _List_node_base* _M_prev;\n-      \n+\n       static void\n-      swap(_List_node_base& __x, _List_node_base& __y) throw ();\n-      \n+      swap(_List_node_base& __x, _List_node_base& __y) _GLIBCXX_USE_NOEXCEPT;\n+\n       void\n       _M_transfer(_List_node_base* const __first,\n-\t\t  _List_node_base* const __last) throw ();\n-      \n+\t\t  _List_node_base* const __last) _GLIBCXX_USE_NOEXCEPT;\n+\n       void\n-      _M_reverse() throw ();\n-      \n+      _M_reverse() _GLIBCXX_USE_NOEXCEPT;\n+\n       void\n-      _M_hook(_List_node_base* const __position) throw ();\n-      \n+      _M_hook(_List_node_base* const __position) _GLIBCXX_USE_NOEXCEPT;\n+\n       void\n-      _M_unhook() throw ();\n+      _M_unhook() _GLIBCXX_USE_NOEXCEPT;\n     };\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n@@ -334,19 +334,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Alloc allocator_type;\n \n       _Node_alloc_type&\n-      _M_get_Node_allocator()\n+      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT\n       { return *static_cast<_Node_alloc_type*>(&this->_M_impl); }\n \n       const _Node_alloc_type&\n-      _M_get_Node_allocator() const\n+      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT\n       { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }\n \n       _Tp_alloc_type\n-      _M_get_Tp_allocator() const\n+      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT\n       { return _Tp_alloc_type(_M_get_Node_allocator()); }\n \n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return allocator_type(_M_get_Node_allocator()); }\n \n       _List_base()\n@@ -718,7 +718,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Get a copy of the memory allocation object.\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _Base::get_allocator(); }\n \n       // iterators\n@@ -727,7 +727,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  %list.  Iteration is done in ordinary element order.\n        */\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_impl._M_node._M_next); }\n \n       /**\n@@ -736,7 +736,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_impl._M_node._M_next); }\n \n       /**\n@@ -745,7 +745,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  order.\n        */\n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(&this->_M_impl._M_node); }\n \n       /**\n@@ -754,7 +754,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(&this->_M_impl._M_node); }\n \n       /**\n@@ -763,7 +763,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  order.\n        */\n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       /**\n@@ -772,7 +772,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       /**\n@@ -781,7 +781,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  reverse element order.\n        */\n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       /**\n@@ -790,7 +790,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -800,7 +800,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(this->_M_impl._M_node._M_next); }\n \n       /**\n@@ -809,7 +809,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(&this->_M_impl._M_node); }\n \n       /**\n@@ -818,7 +818,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       /**\n@@ -827,7 +827,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -837,17 +837,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  end().)\n        */\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }\n \n       /**  Returns the number of elements in the %list.  */\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return std::distance(begin(), end()); }\n \n       /**  Returns the size() of the largest possible %list.  */\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_get_Node_allocator().max_size(); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -1192,7 +1192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Managing the pointer is the user's responsibility.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n         _Base::_M_clear();\n         _Base::_M_init();\n@@ -1412,7 +1412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Reverse the order of elements in the list in linear time.\n        */\n       void\n-      reverse()\n+      reverse() _GLIBCXX_NOEXCEPT\n       { this->_M_impl._M_node._M_reverse(); }\n \n       /**"}, {"sha": "49341c998de66444d3eed5204752f9c0f4fb7f0e", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -296,7 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Get a copy of the memory allocation object.\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _M_t.get_allocator(); }\n \n       // iterators\n@@ -306,7 +306,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Iteration is done in ascending order according to the keys.\n        */\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return _M_t.begin(); }\n \n       /**\n@@ -315,7 +315,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  keys.\n        */\n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return _M_t.begin(); }\n \n       /**\n@@ -324,7 +324,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return _M_t.end(); }\n \n       /**\n@@ -333,7 +333,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the keys.\n        */\n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return _M_t.end(); }\n \n       /**\n@@ -342,7 +342,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  keys.\n        */\n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -351,7 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -360,7 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n       /**\n@@ -369,7 +369,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  order according to the keys.\n        */\n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -379,7 +379,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  keys.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return _M_t.begin(); }\n \n       /**\n@@ -388,7 +388,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the keys.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return _M_t.end(); }\n \n       /**\n@@ -397,7 +397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -406,7 +406,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  order according to the keys.\n        */\n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return _M_t.rend(); }\n #endif\n \n@@ -415,17 +415,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  end().)\n       */\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return _M_t.empty(); }\n \n       /** Returns the size of the %map.  */\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return _M_t.size(); }\n \n       /** Returns the maximum size of the %map.  */\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_t.max_size(); }\n \n       // [23.3.1.2] element access\n@@ -700,7 +700,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Managing the pointer is the user's responsibility.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { _M_t.clear(); }\n \n       // observers"}, {"sha": "bc677262a322e3e9f602bf674ee71af9b50b2a4b", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -293,7 +293,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Get a copy of the memory allocation object.\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT \n       { return _M_t.get_allocator(); }\n \n       // iterators\n@@ -303,7 +303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  keys.\n        */\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return _M_t.begin(); }\n \n       /**\n@@ -312,7 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the keys.\n        */\n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return _M_t.begin(); }\n \n       /**\n@@ -321,7 +321,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  keys.\n        */\n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return _M_t.end(); }\n \n       /**\n@@ -330,7 +330,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the keys.\n        */\n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return _M_t.end(); }\n \n       /**\n@@ -339,7 +339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  keys.\n        */\n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -348,7 +348,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -357,7 +357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n       /**\n@@ -366,7 +366,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  descending order according to the keys.\n        */\n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -376,7 +376,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the keys.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return _M_t.begin(); }\n \n       /**\n@@ -385,7 +385,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the keys.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return _M_t.end(); }\n \n       /**\n@@ -394,7 +394,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -403,24 +403,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  descending order according to the keys.\n        */\n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return _M_t.rend(); }\n #endif\n \n       // capacity\n       /** Returns true if the %multimap is empty.  */\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return _M_t.empty(); }\n \n       /** Returns the size of the %multimap.  */\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return _M_t.size(); }\n \n       /** Returns the maximum size of the %multimap.  */\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_t.max_size(); }\n \n       // modifiers\n@@ -625,7 +625,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  is the user's responsibility.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { _M_t.clear(); }\n \n       // observers"}, {"sha": "c3e686adeb1f59334f63d69ab276dfa9baf6ceb9", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -275,7 +275,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_t.key_comp(); }\n       ///  Returns the memory allocation object.\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _M_t.get_allocator(); }\n \n       /**\n@@ -284,7 +284,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return _M_t.begin(); }\n \n       /**\n@@ -293,7 +293,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return _M_t.end(); }\n \n       /**\n@@ -302,7 +302,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -311,7 +311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -321,7 +321,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return _M_t.begin(); }\n \n       /**\n@@ -330,7 +330,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       iterator\n-      cend() const\n+      cend() const noexcept\n       { return _M_t.end(); }\n \n       /**\n@@ -339,7 +339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -348,23 +348,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return _M_t.rend(); }\n #endif\n \n       ///  Returns true if the %set is empty.\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return _M_t.empty(); }\n \n       ///  Returns the size of the %set.\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return _M_t.size(); }\n \n       ///  Returns the maximum size of the %set.\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_t.max_size(); }\n \n       /**\n@@ -554,7 +554,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  is the user's responsibility.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { _M_t.clear(); }\n \n       // multiset operations:"}, {"sha": "aa89a8a21cb8a5c02850be56dcf3e16d36391264", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -282,7 +282,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_t.key_comp(); }\n       ///  Returns the allocator object with which the %set was constructed.\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _M_t.get_allocator(); }\n \n       /**\n@@ -291,7 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the keys.\n        */\n       iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return _M_t.begin(); }\n \n       /**\n@@ -300,7 +300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the keys.\n        */\n       iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return _M_t.end(); }\n \n       /**\n@@ -309,7 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the keys.\n        */\n       reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -318,7 +318,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return _M_t.rend(); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -328,7 +328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the keys.\n        */\n       iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return _M_t.begin(); }\n \n       /**\n@@ -337,7 +337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the keys.\n        */\n       iterator\n-      cend() const\n+      cend() const noexcept\n       { return _M_t.end(); }\n \n       /**\n@@ -346,7 +346,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the keys.\n        */\n       reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return _M_t.rbegin(); }\n \n       /**\n@@ -355,23 +355,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  according to the keys.\n        */\n       reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return _M_t.rend(); }\n #endif\n \n       ///  Returns true if the %set is empty.\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return _M_t.empty(); }\n \n       ///  Returns the size of the %set.\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return _M_t.size(); }\n \n       ///  Returns the maximum size of the %set.\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_t.max_size(); }\n \n       /**\n@@ -569,7 +569,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the user's responsibility.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { _M_t.clear(); }\n \n       // set operations:"}, {"sha": "7ba6061a674c1a080262ab6f2ac2bb88facfa921", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -352,15 +352,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Alloc allocator_type;\n \n       _Node_allocator&\n-      _M_get_Node_allocator()\n+      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT\n       { return *static_cast<_Node_allocator*>(&this->_M_impl); }\n       \n       const _Node_allocator&\n-      _M_get_Node_allocator() const\n+      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT\n       { return *static_cast<const _Node_allocator*>(&this->_M_impl); }\n \n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return allocator_type(_M_get_Node_allocator()); }\n \n     protected:\n@@ -647,56 +647,56 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_impl._M_key_compare; }\n \n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { \n \treturn iterator(static_cast<_Link_type>\n \t\t\t(this->_M_impl._M_header._M_left));\n       }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { \n \treturn const_iterator(static_cast<_Const_Link_type>\n \t\t\t      (this->_M_impl._M_header._M_left));\n       }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { \n \treturn const_iterator(static_cast<_Const_Link_type>\n \t\t\t      (&this->_M_impl._M_header));\n       }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return _M_impl._M_node_count == 0; }\n \n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT \n       { return _M_impl._M_node_count; }\n \n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_get_Node_allocator().max_size(); }\n \n       void\n@@ -794,7 +794,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       erase(const key_type* __first, const key_type* __last);\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n         _M_erase(_M_begin());\n         _M_leftmost() = _M_end();"}, {"sha": "40770b1cd5ad74eb687ae70d8fdf0b1a95dfd5ad", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -92,15 +92,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Alloc allocator_type;\n \n       _Tp_alloc_type&\n-      _M_get_Tp_allocator()\n+      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT\n       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }\n \n       const _Tp_alloc_type&\n-      _M_get_Tp_allocator() const\n+      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT\n       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }\n \n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return allocator_type(_M_get_Tp_allocator()); }\n \n       _Vector_base()\n@@ -460,7 +460,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_impl._M_start); }\n \n       /**\n@@ -469,7 +469,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_impl._M_start); }\n \n       /**\n@@ -478,7 +478,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_impl._M_finish); }\n \n       /**\n@@ -487,7 +487,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  ordinary element order.\n        */\n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_impl._M_finish); }\n \n       /**\n@@ -496,7 +496,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       /**\n@@ -505,7 +505,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  reverse element order.\n        */\n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       /**\n@@ -514,7 +514,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  in reverse element order.\n        */\n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       /**\n@@ -523,7 +523,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  is done in reverse element order.\n        */\n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -533,7 +533,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element order.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(this->_M_impl._M_start); }\n \n       /**\n@@ -542,7 +542,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  ordinary element order.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(this->_M_impl._M_finish); }\n \n       /**\n@@ -551,7 +551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  reverse element order.\n        */\n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       /**\n@@ -560,19 +560,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  is done in reverse element order.\n        */\n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n       // [23.2.4.2] capacity\n       /**  Returns the number of elements in the %vector.  */\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }\n \n       /**  Returns the size() of the largest possible %vector.  */\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _M_get_Tp_allocator().max_size(); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -647,7 +647,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  hold before needing to allocate more memory.\n        */\n       size_type\n-      capacity() const\n+      capacity() const _GLIBCXX_NOEXCEPT\n       { return size_type(this->_M_impl._M_end_of_storage\n \t\t\t - this->_M_impl._M_start); }\n \n@@ -656,7 +656,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  equal end().)\n        */\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return begin() == end(); }\n \n       /**\n@@ -800,15 +800,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #else\n       pointer\n #endif\n-      data()\n+      data() _GLIBCXX_NOEXCEPT\n       { return std::__addressof(front()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const _Tp*\n #else\n       const_pointer\n #endif\n-      data() const\n+      data() const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(front()); }\n \n       // [23.2.4.3] modifiers\n@@ -1036,7 +1036,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the user's responsibility.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { _M_erase_at_end(this->_M_impl._M_start); }\n \n     protected:"}, {"sha": "1756328e4e0b32e4f3c8daf4a56d6fa91271a6b7", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Debugging deque implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -173,52 +173,52 @@ namespace __debug\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -496,17 +496,17 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n       }\n \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n     };\n \n   template<typename _Tp, typename _Alloc>"}, {"sha": "8f8d0eb80a56fcaada3609c4cf5e932cded82568", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -173,39 +173,39 @@ namespace __debug\n       // iterators:\n \n       iterator\n-      before_begin()\n+      before_begin() noexcept\n       { return iterator(_Base::before_begin(), this); }\n \n       const_iterator\n-      before_begin() const\n+      before_begin() const noexcept\n       { return const_iterator(_Base::before_begin(), this); }\n \n       iterator\n-      begin()\n+      begin() noexcept\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() noexcept\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::cbegin(), this); }\n \n       const_iterator\n-      cbefore_begin() const\n+      cbefore_begin() const noexcept\n       { return const_iterator(_Base::cbefore_begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::cend(), this); }\n \n       using _Base::empty;\n@@ -392,7 +392,7 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n@@ -585,10 +585,10 @@ namespace __debug\n       using _Base::reverse;\n \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const noexcept { return *this; }\n \n     private:\n       void\n@@ -669,7 +669,8 @@ namespace __debug\n       _Safe_iterator_base* __this_its = this->_M_iterators;\n       _M_swap_aux(__list, __list._M_iterators, *this, this->_M_iterators);\n       _Safe_iterator_base* __this_const_its = this->_M_const_iterators;\n-      _M_swap_aux(__list, __list._M_const_iterators, *this, this->_M_const_iterators);\n+      _M_swap_aux(__list, __list._M_const_iterators, *this,\n+\t\t  this->_M_const_iterators);\n       _M_swap_aux(*this, __this_its, __list, __list._M_iterators);\n       _M_swap_aux(*this, __this_const_its, __list, __list._M_const_iterators);\n     }"}, {"sha": "45c53ff7515dbd5e2252a84e1b83699735f3ac06", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Debugging list implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -173,52 +173,52 @@ namespace __debug\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -457,7 +457,7 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n@@ -684,10 +684,10 @@ namespace __debug\n       using _Base::reverse;\n \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     private:\n       void"}, {"sha": "04f8b083f790080a685fe2c57e45a4766450dd6e", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -140,52 +140,52 @@ namespace __debug\n \n       // iterators:\n       iterator \n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -343,7 +343,7 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_invalidate_all();\n \t_Base::clear();\n@@ -400,11 +400,11 @@ namespace __debug\n \t\t\t      const_iterator(__res.second, this));\n       }\n \n-      _Base& \n-      _M_base() { return *this; }\n+      _Base&\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     private:\n       void"}, {"sha": "0be2fa38dd20ca1bac2f716976bc0c8facda401e", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -139,52 +139,52 @@ namespace __debug\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -326,7 +326,7 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_invalidate_all();\n \t_Base::clear();\n@@ -382,10 +382,10 @@ namespace __debug\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     private:\n       void"}, {"sha": "a9756f533039da7bee80348926b57075c40a4ff3", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Debugging multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -138,52 +138,52 @@ namespace __debug\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -315,7 +315,7 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_invalidate_all();\n \t_Base::clear();\n@@ -379,10 +379,10 @@ namespace __debug\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     private:\n       void"}, {"sha": "fddd1673149961859dd37a66ceb278b719d1f47a", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -138,52 +138,52 @@ namespace __debug\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -323,7 +323,7 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_invalidate_all();\n \t_Base::clear();\n@@ -387,10 +387,10 @@ namespace __debug\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     private:\n       void"}, {"sha": "b3295fba5a62798b46b2ce48a4ed09b8aae045e2", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -141,34 +141,34 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n       }\n \n       iterator \n-      begin()\n+      begin() noexcept\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() noexcept\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       // local versions\n@@ -293,10 +293,10 @@ namespace __debug\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const noexcept { return *this; }\n \n     private:\n       void\n@@ -429,34 +429,34 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n       }\n \n       iterator \n-      begin()\n+      begin() noexcept\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() noexcept\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       // local versions\n@@ -575,10 +575,10 @@ namespace __debug\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const noexcept { return *this; }\n \n     private:\n       void"}, {"sha": "d67e98775adf538ba396e7dd5ce3c04e7fc8aeeb", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Debugging unordered_set/unordered_multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -141,34 +141,34 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n       }\n \n       iterator \n-      begin()\n+      begin() noexcept\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() noexcept\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       // local versions\n@@ -286,10 +286,10 @@ namespace __debug\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const noexcept { return *this; }\n \n     private:\n       void\n@@ -418,34 +418,34 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n       }\n \n       iterator\n-      begin()\n+      begin() noexcept\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() noexcept\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       // local versions\n@@ -556,10 +556,10 @@ namespace __debug\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const noexcept { return *this; }\n \n     private:\n       void"}, {"sha": "f5bdde42bfc9410fdef8922b0414b46b4cd5ed6f", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Debugging vector implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -188,52 +188,52 @@ namespace __debug\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -284,7 +284,7 @@ namespace __debug\n #endif\n \n       size_type\n-      capacity() const\n+      capacity() const _GLIBCXX_NOEXCEPT\n       {\n #ifdef _GLIBCXX_DEBUG_PEDANTIC\n \treturn _M_guaranteed_capacity;\n@@ -508,18 +508,18 @@ namespace __debug\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n         _M_guaranteed_capacity = 0;\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     private:\n       size_type _M_guaranteed_capacity;"}, {"sha": "564c2dd0fce8afd4370533d02cd1f1e4172df85f", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Profiling deque implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -154,52 +154,52 @@ namespace __profile\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin()); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin()); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end()); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end()); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end()); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -392,16 +392,16 @@ namespace __profile\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::clear();\n       }\n \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n     };\n \n   template<typename _Tp, typename _Alloc>"}, {"sha": "75b59f354a202ea390359ae3bfb295f9a924776d", "filename": "libstdc++-v3/include/profile/forward_list", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // <forward_list> -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -119,10 +119,10 @@ namespace __profile\n       }\n \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const noexcept { return *this; }\n     };\n \n   template<typename _Tp, typename _Alloc>"}, {"sha": "589f8f5362b6d1b15ce385429fb49035cc50a134", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Profiling list implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -135,7 +135,8 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n         : _Base(__l, __a) { }\n #endif\n \n-      ~list() { \n+      ~list()\n+      { \n         __profcxx_list_destruct(this); \n         __profcxx_list_destruct2(this); \n       }\n@@ -183,64 +184,64 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_list_rewind(this);\n         return iterator(_Base::end(), this);\n       }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_list_rewind(this);\n         return const_iterator(_Base::end(), this);\n       }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_list_rewind(this);\n         return reverse_iterator(end());\n       }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { \n         __profcxx_list_rewind(this);\n         return const_reverse_iterator(end());\n       }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -388,7 +389,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       {\t_Base::swap(__x); }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\t_Base::clear(); }\n \n       // 23.2.2.4 list operations:\n@@ -564,15 +565,15 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       using _Base::reverse;\n \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n-      inline void _M_profile_find() const \n+      void _M_profile_find() const\n       { }\n \n-      inline void _M_profile_iterate(int __rewind = 0) const \n+      void _M_profile_iterate(int __rewind = 0) const \n       {\n         __profcxx_list_operation(this);\n         __profcxx_list_iterate(this); "}, {"sha": "30f5f3aa67938e0fdac563d71e9fa713a3b2b48c", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -137,67 +137,67 @@ namespace __profile\n \n       // iterators:\n       iterator \n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return _Base::begin(); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return _Base::begin(); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return _Base::end(); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return _Base::end(); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { \n         __profcxx_map_to_unordered_map_invalidate(this);\n         return reverse_iterator(end()); \n       }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_map_to_unordered_map_invalidate(this);\n         return const_reverse_iterator(end());\n       }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_map_to_unordered_map_invalidate(this);\n         return reverse_iterator(begin());\n       }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_map_to_unordered_map_invalidate(this);\n         return const_reverse_iterator(begin());\n       }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end()); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       {\n         __profcxx_map_to_unordered_map_invalidate(this);\n         return const_reverse_iterator(end());\n       }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       {\n         __profcxx_map_to_unordered_map_invalidate(this);\n         return const_reverse_iterator(begin());\n@@ -359,12 +359,11 @@ namespace __profile\n #endif\n \n       void\n-\n       swap(map& __x)\n       { _Base::swap(__x); }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { this->erase(begin(), end()); }\n \n       // observers:\n@@ -443,10 +442,10 @@ namespace __profile\n       }\n \n       _Base& \n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     };\n "}, {"sha": "5f1aba82e349bde2d78c1ad2e0f9d541f4a3cd33", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -124,52 +124,52 @@ namespace __profile\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin()); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin()); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end()); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end()); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end()); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -260,7 +260,7 @@ namespace __profile\n       { _Base::swap(__x); }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { this->erase(begin(), end()); }\n \n       // observers:\n@@ -315,10 +315,10 @@ namespace __profile\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n     };\n \n   template<typename _Key, typename _Tp,"}, {"sha": "d140623584515ffa8b129d4518fbea5e39607137", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Profiling multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -124,52 +124,52 @@ namespace __profile\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin()); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin()); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end()); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end()); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end()); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -249,7 +249,7 @@ namespace __profile\n       { _Base::swap(__x); }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { this->erase(begin(), end()); }\n \n       // observers:\n@@ -312,10 +312,10 @@ namespace __profile\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     };\n "}, {"sha": "8533a48c90dfc59dda3a7b1ac6d8681ac55ab836", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Profiling set implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -124,52 +124,52 @@ namespace __profile\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin()); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin()); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end()); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end()); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin()); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end()); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -259,7 +259,7 @@ namespace __profile\n       { _Base::swap(__x); }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { this->erase(begin(), end()); }\n \n       // observers:\n@@ -322,10 +322,10 @@ namespace __profile\n       }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     };\n "}, {"sha": "058bbd351320a6e1b9bd92aa29ec90b9b7899baa", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Profiling unordered_map/unordered_multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -150,14 +150,13 @@ namespace __profile\n       }\n \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n-\n+      _M_base() const noexcept { return *this; }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n         __profcxx_hashtable_destruct(this, _Base::bucket_count(),\n \t\t\t\t     _Base::size());\n@@ -418,14 +417,13 @@ namespace __profile\n       }\n \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n-\n+      _M_base() const noexcept { return *this; }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n         __profcxx_hashtable_destruct(this, _Base::bucket_count(), \n \t\t\t\t     _Base::size());"}, {"sha": "92c54c10f2ac9cd98cc8d7feb21e68bcbb0ed897", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Profiling unordered_set/unordered_multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -155,7 +155,7 @@ namespace __profile\n       }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n         __profcxx_hashtable_destruct(this, _Base::bucket_count(), \n                                      _Base::size());\n@@ -233,10 +233,10 @@ namespace __profile\n \n     private:\n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const noexcept { return *this; }\n \n       void\n       _M_profile_resize(size_type __old_size, size_type __new_size)\n@@ -397,7 +397,7 @@ namespace __profile\n       }\n \n       void\n-      clear()\n+      clear() noexcept\n       {\n         __profcxx_hashtable_destruct(this, _Base::bucket_count(), \n                                      _Base::size());\n@@ -475,10 +475,10 @@ namespace __profile\n \n     private:\n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() noexcept       { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const noexcept { return *this; }\n \n       void\n       _M_profile_resize(size_type __old_size, size_type __new_size)"}, {"sha": "83a4a3b4c4a87d00adcf38a9f6af6295506ff81a", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -1,6 +1,6 @@\n // Profiling vector implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -70,10 +70,10 @@ namespace __profile\n       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n       \n       _Base&\n-      _M_base()       { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n       // 23.2.4.1 construct/copy/destroy:\n       explicit\n@@ -148,7 +148,8 @@ namespace __profile\n       : _Base(__l, __a) { }\n #endif\n \n-      ~vector() {\n+      ~vector()\n+      {\n         __profcxx_vector_destruct(this, this->capacity(), this->size());\n         __profcxx_vector_destruct2(this);\n       }\n@@ -185,52 +186,52 @@ namespace __profile\n \n       // iterators:\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n@@ -417,7 +418,7 @@ namespace __profile\n       }\n \n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_vector_destruct(this, this->capacity(), this->size());\n         __profcxx_vector_destruct2(this);"}, {"sha": "ac69798740dba53402898569f986de6de12ee7bc", "filename": "libstdc++-v3/src/compatibility-list-2.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-list-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-list-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-list-2.cc?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -43,21 +43,22 @@ _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n \n     void\n     _M_transfer(_List_node_base * const __first,\n-\t\t_List_node_base * const __last) throw ();\n+\t\t_List_node_base * const __last) _GLIBCXX_USE_NOEXCEPT;\n \n     void\n-    _M_reverse() throw ();\n+    _M_reverse() _GLIBCXX_USE_NOEXCEPT;\n \n     void\n-    _M_hook(_List_node_base * const __position) throw ();\n+    _M_hook(_List_node_base * const __position) _GLIBCXX_USE_NOEXCEPT;\n \n     void\n-    _M_unhook() throw ();\n+    _M_unhook() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   void\n-  _List_node_base::_M_transfer(_List_node_base * const __first,\n-\t\t\t       _List_node_base * const __last) throw ()\n+  _List_node_base::\n+  _M_transfer(_List_node_base * const __first,\n+\t      _List_node_base * const __last) _GLIBCXX_USE_NOEXCEPT\n   {\n     if (this != __last)\n     {\n@@ -75,7 +76,7 @@ _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n   }\n \n   void\n-  _List_node_base::_M_reverse() throw ()\n+  _List_node_base::_M_reverse() _GLIBCXX_USE_NOEXCEPT\n   {\n     _List_node_base* __tmp = this;\n     do\n@@ -89,7 +90,8 @@ _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n   }\n \n   void\n-  _List_node_base::_M_hook(_List_node_base* const __position) throw ()\n+  _List_node_base::\n+  _M_hook(_List_node_base* const __position) _GLIBCXX_USE_NOEXCEPT\n   {\n     this->_M_next = __position;\n     this->_M_prev = __position->_M_prev;\n@@ -98,7 +100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n   }\n \n   void\n-  _List_node_base::_M_unhook() throw ()\n+  _List_node_base::_M_unhook() _GLIBCXX_USE_NOEXCEPT\n   {\n     _List_node_base* const __next_node = this->_M_next;\n     _List_node_base* const __prev_node = this->_M_prev;"}, {"sha": "6dbad69ac64a11ccf931ac1c53a40adb40820615", "filename": "libstdc++-v3/src/list.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3677132a22eb57336e8a749a19f346ac46cdca8/libstdc%2B%2B-v3%2Fsrc%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flist.cc?ref=d3677132a22eb57336e8a749a19f346ac46cdca8", "patch": "@@ -57,7 +57,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     void\n-    _List_node_base::swap(_List_node_base& __x, _List_node_base& __y) throw()\n+    _List_node_base::swap(_List_node_base& __x,\n+\t\t\t  _List_node_base& __y) _GLIBCXX_USE_NOEXCEPT\n     {\n       if ( __x._M_next != &__x )\n \t{\n@@ -89,8 +90,9 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n \n     void\n-    _List_node_base::_M_transfer(_List_node_base * const __first,\n-\t\t\t\t _List_node_base * const __last) throw()\n+    _List_node_base::\n+    _M_transfer(_List_node_base * const __first,\n+\t\t_List_node_base * const __last) _GLIBCXX_USE_NOEXCEPT\n     {\n       if (this != __last)\n \t{\n@@ -108,7 +110,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n \n     void\n-    _List_node_base::_M_reverse() throw()\n+    _List_node_base::_M_reverse() _GLIBCXX_USE_NOEXCEPT\n     {\n       _List_node_base* __tmp = this;\n       do\n@@ -122,7 +124,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n \n     void\n-    _List_node_base::_M_hook(_List_node_base* const __position) throw()\n+    _List_node_base::\n+    _M_hook(_List_node_base* const __position) _GLIBCXX_USE_NOEXCEPT\n     {\n       this->_M_next = __position;\n       this->_M_prev = __position->_M_prev;\n@@ -131,7 +134,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n \n     void\n-    _List_node_base::_M_unhook() throw()\n+    _List_node_base::_M_unhook() _GLIBCXX_USE_NOEXCEPT\n     {\n       _List_node_base* const __next_node = this->_M_next;\n       _List_node_base* const __prev_node = this->_M_prev;"}]}