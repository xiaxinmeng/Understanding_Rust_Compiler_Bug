{"sha": "75069667df1ed5fafbb9e1f4532adf1233b7eeab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwNjk2NjdkZjFlZDVmYWZiYjllMWY0NTMyYWRmMTIzM2I3ZWVhYg==", "commit": {"author": {"name": "Vasiliy Fofanov", "email": "fofanov@adacore.com", "date": "2009-07-13T12:16:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T12:16:51Z"}, "message": "mingw32.h: Make it explicit that we need XP or later.\n\n2009-07-13  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* mingw32.h: Make it explicit that we need XP or later.\n\n\t* initialize.c: Remove useless extern symbol declaration.\n\n\t* adaint.h: Ditto, also expose __gnat_win32_remove_handle to allow\n\tcode reuse in expect.c.\n\n\t* adaint.c: Changes throughout the Windows section to redesign storage\n\tof the child process list and the process identification.\n\n\t* expect.c (__gnat_kill, __gnat_waitpid): Simplify, cleanup, use pids\n\tfor interfacing, fix errors.\n\t(__gnat_expect_portable_execvp): use function in adaint.c\n\nFrom-SVN: r149573", "tree": {"sha": "94908b1bab6a306f6dede652eb468c1a41ae89f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94908b1bab6a306f6dede652eb468c1a41ae89f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75069667df1ed5fafbb9e1f4532adf1233b7eeab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75069667df1ed5fafbb9e1f4532adf1233b7eeab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75069667df1ed5fafbb9e1f4532adf1233b7eeab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75069667df1ed5fafbb9e1f4532adf1233b7eeab/comments", "author": {"login": "t-14", "id": 18482303, "node_id": "MDQ6VXNlcjE4NDgyMzAz", "avatar_url": "https://avatars.githubusercontent.com/u/18482303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-14", "html_url": "https://github.com/t-14", "followers_url": "https://api.github.com/users/t-14/followers", "following_url": "https://api.github.com/users/t-14/following{/other_user}", "gists_url": "https://api.github.com/users/t-14/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-14/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-14/subscriptions", "organizations_url": "https://api.github.com/users/t-14/orgs", "repos_url": "https://api.github.com/users/t-14/repos", "events_url": "https://api.github.com/users/t-14/events{/privacy}", "received_events_url": "https://api.github.com/users/t-14/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2d9085b0f600ee51a331a2135f2da43c661881d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2d9085b0f600ee51a331a2135f2da43c661881d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2d9085b0f600ee51a331a2135f2da43c661881d"}], "stats": {"total": 241, "additions": 100, "deletions": 141}, "files": [{"sha": "7975955fcccaea1d14932b5bb2fcdfb05797e93f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=75069667df1ed5fafbb9e1f4532adf1233b7eeab", "patch": "@@ -1,3 +1,19 @@\n+2009-07-13  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* mingw32.h: Make it explicit that we need XP or later.\n+\n+\t* initialize.c: Remove useless extern symbol declaration.\n+\n+\t* adaint.h: Ditto, also expose __gnat_win32_remove_handle to allow\n+\tcode reuse in expect.c.\n+\n+\t* adaint.c: Changes throughout the Windows section to redesign storage\n+\tof the child process list and the process identification.\n+\n+\t* expect.c (__gnat_kill, __gnat_waitpid): Simplify, cleanup, use pids\n+\tfor interfacing, fix errors.\n+\t(__gnat_expect_portable_execvp): use function in adaint.c\n+\n 2009-07-13  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj-proc.adb, prj-part.adb, prj-part.ads, prj-strt.adb,"}, {"sha": "06c95c65097bb8c2c62d16d88d6d041e4af8483e", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 49, "deletions": 61, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=75069667df1ed5fafbb9e1f4532adf1233b7eeab", "patch": "@@ -188,6 +188,7 @@ struct vstring\n #endif\n \n #if defined (_WIN32)\n+\n #include <dir.h>\n #include <windows.h>\n #include <accctrl.h>\n@@ -1909,9 +1910,9 @@ __gnat_set_OWNER_ACL\n  DWORD AccessMode,\n  DWORD AccessPermissions)\n {\n-  ACL* pOldDACL = NULL;\n-  ACL* pNewDACL = NULL;\n-  SECURITY_DESCRIPTOR* pSD = NULL;\n+  PACL pOldDACL = NULL;\n+  PACL pNewDACL = NULL;\n+  PSECURITY_DESCRIPTOR pSD = NULL;\n   EXPLICIT_ACCESS ea;\n   TCHAR username [100];\n   DWORD unsize = 100;\n@@ -2316,70 +2317,58 @@ extern void (*Unlock_Task) (void);\n \n #endif\n \n-typedef struct _process_list\n-{\n-  HANDLE h;\n-  struct _process_list *next;\n-} Process_List;\n-\n-static Process_List *PLIST = NULL;\n-\n-static int plist_length = 0;\n+static HANDLE *HANDLES_LIST = NULL;\n+static int *PID_LIST = NULL, plist_length = 0, plist_max_length = 0;\n \n static void\n add_handle (HANDLE h)\n {\n-  Process_List *pl;\n-\n-  pl = (Process_List *) xmalloc (sizeof (Process_List));\n \n   /* -------------------- critical section -------------------- */\n   (*Lock_Task) ();\n \n-  pl->h = h;\n-  pl->next = PLIST;\n-  PLIST = pl;\n+  if (plist_length == plist_max_length)\n+    {\n+      plist_max_length += 1000;\n+      HANDLES_LIST =\n+        xrealloc (HANDLES_LIST, sizeof (HANDLE) * plist_max_length);\n+      PID_LIST =\n+        xrealloc (PID_LIST, sizeof (int) * plist_max_length);\n+    }\n+\n+  HANDLES_LIST[plist_length] = h;\n+  PID_LIST[plist_length] = GetProcessId (h);\n   ++plist_length;\n \n   (*Unlock_Task) ();\n   /* -------------------- critical section -------------------- */\n }\n \n-static void\n-remove_handle (HANDLE h)\n+void\n+__gnat_win32_remove_handle (HANDLE h, int pid)\n {\n-  Process_List *pl;\n-  Process_List *prev = NULL;\n+  int j;\n \n   /* -------------------- critical section -------------------- */\n   (*Lock_Task) ();\n \n-  pl = PLIST;\n-  while (pl)\n+  for (j = 0; j < plist_length; j++)\n     {\n-      if (pl->h == h)\n+      if ((HANDLES_LIST[j] == h) || (PID_LIST[j] == pid))\n         {\n-          if (pl == PLIST)\n-\t    PLIST = pl->next;\n-          else\n-\t    prev->next = pl->next;\n-          free (pl);\n+          CloseHandle (h);\n+          --plist_length;\n+          HANDLES_LIST[j] = HANDLES_LIST[plist_length];\n+          PID_LIST[j] = PID_LIST[plist_length];\n           break;\n         }\n-      else\n-        {\n-          prev = pl;\n-          pl = pl->next;\n-        }\n     }\n \n-  --plist_length;\n-\n   (*Unlock_Task) ();\n   /* -------------------- critical section -------------------- */\n }\n \n-static int\n+static HANDLE\n win32_no_block_spawn (char *command, char *args[])\n {\n   BOOL result;\n@@ -2444,23 +2433,21 @@ win32_no_block_spawn (char *command, char *args[])\n \n   if (result == TRUE)\n     {\n-      add_handle (PI.hProcess);\n       CloseHandle (PI.hThread);\n-      return (int) PI.hProcess;\n+      return PI.hProcess;\n     }\n   else\n-    return -1;\n+    return NULL;\n }\n \n static int\n win32_wait (int *status)\n {\n-  DWORD exitcode;\n+  DWORD exitcode, pid;\n   HANDLE *hl;\n   HANDLE h;\n   DWORD res;\n   int k;\n-  Process_List *pl;\n   int hl_len;\n \n   if (plist_length == 0)\n@@ -2478,35 +2465,29 @@ win32_wait (int *status)\n \n   hl = (HANDLE *) xmalloc (sizeof (HANDLE) * hl_len);\n \n-  pl = PLIST;\n-  while (pl)\n-    {\n-      hl[k++] = pl->h;\n-      pl = pl->next;\n-    }\n+  memmove (hl, HANDLES_LIST, sizeof (HANDLE) * hl_len);\n \n   (*Unlock_Task) ();\n   /* -------------------- critical section -------------------- */\n \n   res = WaitForMultipleObjects (hl_len, hl, FALSE, INFINITE);\n   h = hl[res - WAIT_OBJECT_0];\n-  free (hl);\n-\n-  remove_handle (h);\n \n   GetExitCodeProcess (h, &exitcode);\n-  CloseHandle (h);\n+  pid = GetProcessId (h);\n+  __gnat_win32_remove_handle (h, -1);\n+\n+  free (hl);\n \n   *status = (int) exitcode;\n-  return (int) h;\n+  return (int) pid;\n }\n \n #endif\n \n int\n __gnat_portable_no_block_spawn (char *args[])\n {\n-  int pid = 0;\n \n #if defined (__vxworks) || defined (__nucleus__) || defined (RTX)\n   return -1;\n@@ -2526,11 +2507,17 @@ __gnat_portable_no_block_spawn (char *args[])\n \n #elif defined (_WIN32)\n \n-  pid = win32_no_block_spawn (args[0], args);\n-  return pid;\n+  HANDLE h = NULL;\n+\n+  h = win32_no_block_spawn (args[0], args);\n+  if (h != NULL)\n+    add_handle (h);\n+\n+  return GetProcessId (h);\n \n #else\n-  pid = fork ();\n+\n+  int pid = fork ();\n \n   if (pid == 0)\n     {\n@@ -2543,9 +2530,9 @@ __gnat_portable_no_block_spawn (char *args[])\n #endif\n     }\n \n-#endif\n-\n   return pid;\n+\n+  #endif\n }\n \n int\n@@ -3256,7 +3243,8 @@ __gnat_to_canonical_file_list_init\n char *\n __gnat_to_canonical_file_list_next (void)\n {\n-  return (char *) \"\";\n+  static char *empty = \"\";\n+  return empty;\n }\n \n void"}, {"sha": "57cedf8735081e3dc61d8c0d33b9c3d68ba5dfba", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=75069667df1ed5fafbb9e1f4532adf1233b7eeab", "patch": "@@ -199,8 +199,11 @@ extern void   __gnat_os_filename                   (char *, char *, char *,\n extern void   *__gnat_lwp_self\t\t\t   (void);\n #endif\n \n-#if defined (__MINGW32__) && !defined (RTX)\n-extern void   __gnat_plist_init                    (void);\n+#if defined (_WIN32)\n+/* Interface to delete a handle from internally maintained list of child\n+   process handles on Windows */\n+extern void\n+__gnat_win32_remove_handle (HANDLE h, int pid);\n #endif\n \n #ifdef IN_RTS"}, {"sha": "c11a3aa86527fec628ba822c2ba19bada5f35c94", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 27, "deletions": 72, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=75069667df1ed5fafbb9e1f4532adf1233b7eeab", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                     Copyright (C) 2001-2007, AdaCore                     *\n+ *                     Copyright (C) 2001-2009, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -78,42 +78,51 @@\n \n #ifdef _WIN32\n \n+/* We need functionality available only starting with Windows XP */\n+#define _WIN32_WINNT 0x0501\n+\n #include <windows.h>\n #include <process.h>\n+#include <signal.h>\n \n void\n __gnat_kill (int pid, int sig, int close)\n {\n+  HANDLE h = OpenProcess (PROCESS_ALL_ACCESS, FALSE, pid);\n+  if (h == NULL)\n+    return;\n   if (sig == 9)\n     {\n-      if ((HANDLE)pid != NULL)\n-\t{\n-\t  TerminateProcess ((HANDLE)pid, 0);\n-\t  if (close)\n-\t    CloseHandle ((HANDLE)pid);\n-\t}\n-    }\n-  else if (sig == 2)\n-    {\n-      GenerateConsoleCtrlEvent (CTRL_C_EVENT, (HANDLE)pid);\n-      if (close)\n-\tCloseHandle ((HANDLE)pid);\n+      TerminateProcess (h, 0);\n+      __gnat_win32_remove_handle (NULL, pid);\n     }\n+  else if (sig == SIGINT)\n+    GenerateConsoleCtrlEvent (CTRL_C_EVENT, pid);\n+  else if (sig == SIGBREAK)\n+    GenerateConsoleCtrlEvent (CTRL_BREAK_EVENT, pid);\n+  /* ??? The last two alternatives don't really work. SIGBREAK requires setting\n+     up process groups at start time which we don't do; treating SIGINT is just\n+     not possible apparently. So we really only support signal 9. Fortunately\n+     that's all we use in GNAT.Expect */\n+\n+  CloseHandle (h);\n }\n \n int\n __gnat_waitpid (int pid)\n {\n+  HANDLE h = OpenProcess (PROCESS_ALL_ACCESS, FALSE, pid);\n   DWORD exitcode = 1;\n   DWORD res;\n \n-  if ((HANDLE)pid != NULL)\n+  if (h != NULL)\n     {\n-      res = WaitForSingleObject ((HANDLE)pid, INFINITE);\n-      GetExitCodeProcess ((HANDLE)pid, &exitcode);\n-      CloseHandle ((HANDLE)pid);\n+      res = WaitForSingleObject (h, INFINITE);\n+      GetExitCodeProcess (h, &exitcode);\n+      CloseHandle (h);\n     }\n \n+  __gnat_win32_remove_handle (NULL, pid);\n   return (int) exitcode;\n }\n \n@@ -126,61 +135,7 @@ __gnat_expect_fork (void)\n void\n __gnat_expect_portable_execvp (int *pid, char *cmd, char *argv[])\n {\n-  BOOL result;\n-  STARTUPINFO SI;\n-  PROCESS_INFORMATION PI;\n-  SECURITY_ATTRIBUTES SA;\n-  int csize = 1;\n-  char *full_command;\n-  int k;\n-\n-  /* compute the total command line length.  */\n-  k = 0;\n-  while (argv[k])\n-    {\n-      csize += strlen (argv[k]) + 1;\n-      k++;\n-    }\n-\n-  full_command = (char *) malloc (csize);\n-  full_command[0] = '\\0';\n-\n-  /* Startup info. */\n-  SI.cb          = sizeof (STARTUPINFO);\n-  SI.lpReserved  = NULL;\n-  SI.lpReserved2 = NULL;\n-  SI.lpDesktop   = NULL;\n-  SI.cbReserved2 = 0;\n-  SI.lpTitle     = NULL;\n-  SI.dwFlags     = 0;\n-  SI.wShowWindow = SW_HIDE;\n-\n-  /* Security attributes. */\n-  SA.nLength = sizeof (SECURITY_ATTRIBUTES);\n-  SA.bInheritHandle = TRUE;\n-  SA.lpSecurityDescriptor = NULL;\n-\n-  k = 0;\n-  while (argv[k])\n-    {\n-      strcat (full_command, argv[k]);\n-      strcat (full_command, \" \");\n-      k++;\n-    }\n-\n-  result = CreateProcess\n-\t     (NULL, (char *) full_command, &SA, NULL, TRUE,\n-              GetPriorityClass (GetCurrentProcess()), NULL, NULL, &SI, &PI);\n-\n-  free (full_command);\n-\n-  if (result == TRUE)\n-    {\n-      CloseHandle (PI.hThread);\n-      *pid = (int) PI.hProcess;\n-    }\n-  else\n-    *pid = -1;\n+  *pid = __gnat_portable_no_block_spawn (argv);\n }\n \n int"}, {"sha": "fbbdf6052752eb310eb1fb812288f104e1740398", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=75069667df1ed5fafbb9e1f4532adf1233b7eeab", "patch": "@@ -67,12 +67,6 @@ extern void __gnat_install_SEH_handler (void *);\n extern int gnat_argc;\n extern char **gnat_argv;\n \n-#ifndef RTX\n-/* Do not define for RTX since it is only used for creating child processes\n-   which is not supported in RTX. */\n-extern void __gnat_plist_init (void);\n-#endif\n-\n #ifdef GNAT_UNICODE_SUPPORT\n \n #define EXPAND_ARGV_RATE 128"}, {"sha": "2ad4d36dfa1de59f4207a51a777ddd7605c73a7d", "filename": "gcc/ada/mingw32.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75069667df1ed5fafbb9e1f4532adf1233b7eeab/gcc%2Fada%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmingw32.h?ref=75069667df1ed5fafbb9e1f4532adf1233b7eeab", "patch": "@@ -61,6 +61,9 @@\n #define UNICODE  /* For Win32 API */\n #endif\n \n+/* We need functionality available only starting with Windows XP */\n+#define _WIN32_WINNT 0x0501\n+\n #include <tchar.h>\n #include <windows.h>\n "}]}