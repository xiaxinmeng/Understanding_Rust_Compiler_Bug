{"sha": "aaa3a6753574594b73746ddaf6e3b4e042a6a586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhM2E2NzUzNTc0NTk0YjczNzQ2ZGRhZjZlM2I0ZTA0MmE2YTU4Ng==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-05-07T18:58:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:35:23Z"}, "message": "[Ada] Various typo fixes and reformatting of comments\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst, errout.ads,\n\terroutc.adb, exp_ch4.adb, exp_ch6.adb, freeze.adb: Comment\n\trewording/reformatting/typo fixes.  Replace \"ie.\" with \"that is\"\n\tin comment; \"can not\" -> \"cannot\", and remove an extraneous\n\tunderscore in another comment.\n\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.", "tree": {"sha": "dda0699d83499c7ff9074bea1d38a3e0b0a94c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dda0699d83499c7ff9074bea1d38a3e0b0a94c6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaa3a6753574594b73746ddaf6e3b4e042a6a586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa3a6753574594b73746ddaf6e3b4e042a6a586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa3a6753574594b73746ddaf6e3b4e042a6a586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa3a6753574594b73746ddaf6e3b4e042a6a586/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fc1b4ad1d2015fd464f4c843945b1919c666c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc1b4ad1d2015fd464f4c843945b1919c666c94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc1b4ad1d2015fd464f4c843945b1919c666c94"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "2f60db506bfe0bc2e799db0f6f12d1a68e1e10bd", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=aaa3a6753574594b73746ddaf6e3b4e042a6a586", "patch": "@@ -982,9 +982,9 @@ with a first parameter of True is to warn a client about use of a package,\n for example that it is not fully implemented.\n \n In previous versions of the compiler, combining *-gnatwe* with\n-Compile_Time_Warning resulted in an fatal error. Now the compiler will always\n-emit a warning. You can use :ref:`Compile_Time_Error` to force the generation\n-of an error.\n+Compile_Time_Warning resulted in a fatal error. Now the compiler always emits\n+a warning. You can use :ref:`Compile_Time_Error` to force the generation of\n+an error.\n \n Pragma Compiler_Unit\n ===================="}, {"sha": "1591a3712f554a5c452bc314da093706f49b147b", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=aaa3a6753574594b73746ddaf6e3b4e042a6a586", "patch": "@@ -705,8 +705,8 @@ package Errout is\n       Flag_Location          : Source_Ptr;\n       Is_Compile_Time_Pragma : Boolean);\n    --  Same as Error_Msg (String, Source_Ptr) except Is_Compile_Time_Pragma\n-   --  lets the caller specify whether the is a\n-   --  Compile_Time_Warning/Compile_Time_Error pragma.\n+   --  lets the caller specify whether this is a Compile_Time_Warning or\n+   --  Compile_Time_Error pragma.\n \n    procedure Error_Msg_S (Msg : String);\n    --  Output a message at current scan pointer location. This routine can be"}, {"sha": "435cb143abe8bbcf940e3c9f3166739bd9f96f5d", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=aaa3a6753574594b73746ddaf6e3b4e042a6a586", "patch": "@@ -258,12 +258,12 @@ package body Erroutc is\n       elsif Warnings_Treated_As_Errors /= 0 then\n          return True;\n \n-         --  We should never treat warnings that originate from a\n-         --  Compile_Time_Warning pragma as an error. Warnings_Count is the sum\n-         --  of both \"normal\" and Compile_Time_Warning warnings. This means\n-         --  that there only is one or more non-Compile_Time_Warning warnings\n-         --  if Warnings_Count is greater than\n-         --  Count_Compile_Time_Pragma_Warnings.\n+      --  We should never treat warnings that originate from a\n+      --  Compile_Time_Warning pragma as an error. Warnings_Count is the sum\n+      --  of both \"normal\" and Compile_Time_Warning warnings. This means that\n+      --  there are only one or more non-Compile_Time_Warning warnings when\n+      --  Warnings_Count is greater than Count_Compile_Time_Pragma_Warnings.\n+\n       elsif Warning_Mode = Treat_As_Error\n          and then Warnings_Count > Count_Compile_Time_Pragma_Warnings\n       then"}, {"sha": "05c635f94121e77574dd619bac412c1f7ae5310d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=aaa3a6753574594b73746ddaf6e3b4e042a6a586", "patch": "@@ -226,8 +226,8 @@ package body Exp_Ch4 is\n \n    procedure Narrow_Large_Operation (N : Node_Id);\n    --  Try to compute the result of a large operation in a narrower type than\n-   --  its nominal type. This is mainly aimed to get rid of operations done in\n-   --  Universal_Integer that can be generated for attributes.\n+   --  its nominal type. This is mainly aimed at getting rid of operations done\n+   --  in Universal_Integer that can be generated for attributes.\n \n    procedure Optimize_Length_Comparison (N : Node_Id);\n    --  Given an expression, if it is of the form X'Length op N (or the other\n@@ -14040,12 +14040,12 @@ package body Exp_Ch4 is\n       --  Now compute the size of the narrower type\n \n       if Compar then\n-         --  The type must be able to accomodate the operands\n+         --  The type must be able to accommodate the operands\n \n          Nsiz := Nat'Max (Lsiz, Rsiz);\n \n       else\n-         --  The type must be able to accomodate the operand(s) and the result.\n+         --  The type must be able to accommodate the operand(s) and result.\n \n          --  Note that Determine_Range typically does not report the bounds of\n          --  the value as being larger than those of the base type, which means\n@@ -14090,7 +14090,7 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n-      --  Finally rewrite the operation in the narrower type\n+      --  Finally, rewrite the operation in the narrower type\n \n       Nop := New_Op_Node (Kind, Sloc (N));\n "}, {"sha": "d29040b30228ca6ef959a5bb3f64133109dc67dc", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=aaa3a6753574594b73746ddaf6e3b4e042a6a586", "patch": "@@ -9982,8 +9982,8 @@ package body Exp_Ch6 is\n       --  to ensure that if Func_Id is frozen then the computed result matches\n       --  with the availability of the task master extra formal; unfortunately\n       --  this is not feasible because we may be precisely freezing this entity\n-      --  (ie. Is_Frozen has been set by Freeze_Entity but it has not completed\n-      --  its work).\n+      --  (that is, Is_Frozen has been set by Freeze_Entity but it has not\n+      --  completed its work).\n \n       if Has_Task (Func_Typ) then\n          return True;\n@@ -9992,9 +9992,9 @@ package body Exp_Ch6 is\n          return Might_Have_Tasks (Func_Typ);\n \n       --  Handle subprogram type internally generated for dispatching call. We\n-      --  can not rely on the return type of the subprogram type of dispatching\n+      --  cannot rely on the return type of the subprogram type of dispatching\n       --  calls since it is always a class-wide type (cf. Expand_Dispatching_\n-      --  _Call).\n+      --  Call).\n \n       elsif Ekind (Func_Id) = E_Subprogram_Type then\n          if Is_Dispatch_Table_Entity (Func_Id) then"}, {"sha": "7df283a32c4434bd660ea458bdbdc9f30e3acae2", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=aaa3a6753574594b73746ddaf6e3b4e042a6a586", "patch": "@@ -8726,8 +8726,8 @@ package body Freeze is\n             return True;\n          end if;\n \n-         --  Check attribute Extra_Formal: if available it must be set only\n-         --  in the last formal of E\n+         --  Check attribute Extra_Formal: If available, it must be set only\n+         --  on the last formal of E.\n \n          Formal := First_Formal (E);\n          while Present (Formal) loop\n@@ -8752,15 +8752,15 @@ package body Freeze is\n             return False;\n          end if;\n \n-         --  Check attribute Extra_Formals: if E has extra formals then this\n-         --  attribute must must point to the first extra formal of E.\n+         --  Check attribute Extra_Formals: If E has extra formals, then this\n+         --  attribute must point to the first extra formal of E.\n \n          if Has_Extra_Formals then\n             return Present (Extra_Formals (E))\n               and then Present (Extra_Formal (Last_Formal))\n               and then Extra_Formal (Last_Formal) = Extra_Formals (E);\n \n-         --  When E has no formals the first extra formal is available through\n+         --  When E has no formals, the first extra formal is available through\n          --  the Extra_Formals attribute.\n \n          elsif Present (Extra_Formals (E)) then\n@@ -8908,9 +8908,9 @@ package body Freeze is\n       if not Has_Foreign_Convention (E) then\n          if No (Extra_Formals (E)) then\n \n-            --  Extra formals are shared by derived subprograms; therefore if\n+            --  Extra formals are shared by derived subprograms; therefore, if\n             --  the ultimate alias of E has been frozen before E then the extra\n-            --  formals have been added but the attribute Extra_Formals is\n+            --  formals have been added, but the attribute Extra_Formals is\n             --  still unset (and must be set now).\n \n             if Present (Alias (E))"}, {"sha": "0f6109e6a96bb93d35fb6cd2d1c3b710ba4c9068", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=aaa3a6753574594b73746ddaf6e3b4e042a6a586", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , May 14, 2020\n+GNAT Reference Manual , Jul 01, 2020\n \n AdaCore\n \n@@ -2361,9 +2361,9 @@ with a first parameter of True is to warn a client about use of a package,\n for example that it is not fully implemented.\n \n In previous versions of the compiler, combining @emph{-gnatwe} with\n-Compile_Time_Warning resulted in an fatal error. Now the compiler will always\n-emit a warning. You can use @ref{3a,,Pragma Compile_Time_Error} to force the generation\n-of an error.\n+Compile_Time_Warning resulted in a fatal error. Now the compiler always emits\n+a warning. You can use @ref{3a,,Pragma Compile_Time_Error} to force the generation of\n+an error.\n \n @node Pragma Compiler_Unit,Pragma Compiler_Unit_Warning,Pragma Compile_Time_Warning,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-compiler-unit}@anchor{3c}"}, {"sha": "b6ed321466c1372703f13dbff07b635775decfbb", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa3a6753574594b73746ddaf6e3b4e042a6a586/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=aaa3a6753574594b73746ddaf6e3b4e042a6a586", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , May 05, 2020\n+GNAT User's Guide for Native Platforms , Jul 01, 2020\n \n AdaCore\n \n@@ -4144,10 +4144,9 @@ to be a consideration.\n @geindex Run-Time Library\n @geindex rebuilding\n \n-It may be useful to recompile the GNAT library in various contexts, the\n-most important one being the use of partition-wide configuration pragmas\n-such as @code{Normalize_Scalars}. A special Makefile called\n-@code{Makefile.adalib} is provided to that effect and can be found in\n+It may be useful to recompile the GNAT library in various debugging or\n+experimentation contexts. A project file called\n+@code{libada.gpr} is provided to that effect and can be found in\n the directory containing the GNAT library. The location of this\n directory depends on the way the GNAT environment has been installed and can\n be determined by means of the command:\n@@ -4156,10 +4155,13 @@ be determined by means of the command:\n $ gnatls -v\n @end example\n \n-The last entry in the object search path usually contains the\n-gnat library. This Makefile contains its own documentation and in\n-particular the set of instructions needed to rebuild a new library and\n-to use it.\n+The last entry in the source search path usually contains the\n+gnat library (the @code{adainclude} directory). This project file contains its\n+own documentation and in particular the set of instructions needed to rebuild a\n+new library and to use it.\n+\n+Note that rebuilding the GNAT Run-Time is only recommended for temporary\n+experiments or debugging, and is not supported.\n \n @geindex Conditional compilation\n "}]}