{"sha": "a896172d192d4b2ba73877ba164688dcbdb546c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5NjE3MmQxOTJkNGIyYmE3Mzg3N2JhMTY0Njg4ZGNiZGI1NDZjOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-28T11:07:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-28T11:07:06Z"}, "message": "re PR tree-optimization/61335 (wrong code with -O2 -fbounds-check)\n\n2014-05-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61335\n\t* tree-vrp.c (vrp_visit_phi_node): If the compare of old and\n\tnew range fails, drop to varying.\n\n\t* gfortran.dg/pr61335.f90: New testcase.\n\nFrom-SVN: r211012", "tree": {"sha": "a2ecd1fe3a8d5801ba51362b7fa18e7b20aea833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2ecd1fe3a8d5801ba51362b7fa18e7b20aea833"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a896172d192d4b2ba73877ba164688dcbdb546c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a896172d192d4b2ba73877ba164688dcbdb546c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a896172d192d4b2ba73877ba164688dcbdb546c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a896172d192d4b2ba73877ba164688dcbdb546c9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49664873f8397f8ebd0aa14b57497974e703651a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49664873f8397f8ebd0aa14b57497974e703651a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49664873f8397f8ebd0aa14b57497974e703651a"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "518f5a3aa00865102a0376ffc9de246741be81c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a896172d192d4b2ba73877ba164688dcbdb546c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a896172d192d4b2ba73877ba164688dcbdb546c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a896172d192d4b2ba73877ba164688dcbdb546c9", "patch": "@@ -1,3 +1,9 @@\n+2014-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61335\n+\t* tree-vrp.c (vrp_visit_phi_node): If the compare of old and\n+\tnew range fails, drop to varying.\n+\n 2014-05-28  Tom de Vries  <tom@codesourcery.com>\n \n \t* lra-int.h (struct lra_reg): Add field actual_call_used_reg_set."}, {"sha": "1546ec21502a9e3e42780b62840453c1d889b287", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a896172d192d4b2ba73877ba164688dcbdb546c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a896172d192d4b2ba73877ba164688dcbdb546c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a896172d192d4b2ba73877ba164688dcbdb546c9", "patch": "@@ -1,3 +1,8 @@\n+2014-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61335\n+\t* gfortran.dg/pr61335.f90: New testcase.\n+\n 2014-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/aliasing1.adb (dg-final): Robustify pattern matching."}, {"sha": "7961f27051582d12989f594e583ab24d1018d206", "filename": "gcc/testsuite/gfortran.dg/pr61335.f90", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a896172d192d4b2ba73877ba164688dcbdb546c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr61335.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a896172d192d4b2ba73877ba164688dcbdb546c9/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr61335.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr61335.f90?ref=a896172d192d4b2ba73877ba164688dcbdb546c9", "patch": "@@ -0,0 +1,117 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fbounds-check\" }\n+MODULE cp_units\n+\n+  INTEGER, PARAMETER :: default_string_length=80, dp=KIND(0.0D0)\n+\n+  LOGICAL, PRIVATE, PARAMETER          :: debug_this_module=.TRUE.\n+  CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'cp_units'\n+  INTEGER, SAVE, PRIVATE               :: last_unit_id=0, last_unit_set_id=0\n+\n+  INTEGER, PARAMETER, PUBLIC :: cp_unit_max_kinds=8, cp_unit_basic_desc_length=15,&\n+       cp_unit_desc_length=cp_unit_max_kinds*cp_unit_basic_desc_length, cp_ukind_max=9\n+\n+CONTAINS\n+\n+  FUNCTION cp_to_string(i) RESULT(res)\n+    INTEGER, INTENT(in)                      :: i\n+    CHARACTER(len=6)                         :: res\n+\n+    INTEGER                                  :: iostat\n+    REAL(KIND=dp)                            :: tmp_r\n+\n+    IF (i>999999 .OR. i<-99999) THEN\n+       tmp_r=i\n+       WRITE (res,fmt='(es6.1)',iostat=iostat) tmp_r\n+    ELSE\n+       WRITE (res,fmt='(i6)',iostat=iostat) i\n+    END IF\n+    IF (iostat/=0) THEN\n+       STOP 7\n+    END IF\n+  END FUNCTION cp_to_string\n+\n+  SUBROUTINE cp_unit_create(string)\n+    CHARACTER(len=*), INTENT(in)             :: string\n+\n+    CHARACTER(len=*), PARAMETER :: routineN = 'cp_unit_create', &\n+      routineP = moduleN//':'//routineN\n+\n+    CHARACTER(default_string_length)         :: desc\n+    CHARACTER(LEN=40)                        :: formatstr\n+    INTEGER                                  :: i_high, i_low, i_unit, &\n+                                                len_string, next_power\n+    INTEGER, DIMENSION(cp_unit_max_kinds)    :: kind_id, power, unit_id\n+    LOGICAL                                  :: failure\n+\n+    failure=.FALSE.\n+    unit_id=cp_units_none\n+    kind_id=cp_ukind_none\n+    power=0\n+    i_low=1\n+    i_high=1\n+    len_string=LEN(string)\n+    i_unit=0\n+    next_power=1\n+    DO WHILE(i_low<len_string)\n+       IF (string(i_low:i_low)/=' ') EXIT\n+       i_low=i_low+1\n+    END DO\n+    i_high=i_low\n+    DO WHILE(i_high<=len_string)\n+       IF ( string(i_high:i_high)==' '.OR.string(i_high:i_high)=='^'.OR.&\n+            string(i_high:i_high)=='*'.OR.string(i_high:i_high)=='/') EXIT\n+       i_high=i_high+1\n+    END DO\n+    DO WHILE(.NOT.failure)\n+       IF (i_high<=i_low.OR.i_low>len_string) EXIT\n+       i_unit=i_unit+1\n+       IF (i_unit>cp_unit_max_kinds) THEN\n+          EXIT\n+       END IF\n+       power(i_unit)=next_power\n+       ! parse op\n+       i_low=i_high\n+       DO WHILE(i_low<=len_string)\n+          IF (string(i_low:i_low)/=' ') EXIT\n+          i_low=i_low+1\n+       END DO\n+       i_high=i_low\n+       DO WHILE(i_high<=len_string)\n+          IF ( string(i_high:i_high)==' '.OR.string(i_high:i_high)=='^'.OR.&\n+               string(i_high:i_high)=='*'.OR.string(i_high:i_high)=='/') EXIT\n+          i_high=i_high+1\n+       END DO\n+       IF (i_high<i_low.OR.i_low>len_string) EXIT\n+\n+       IF (i_high<=len_string) THEN\n+          IF (string(i_low:i_high)=='^') THEN\n+             i_low=i_high+1\n+             DO WHILE(i_low<=len_string)\n+                IF (string(i_low:i_low)/=' ') EXIT\n+                i_low=i_low+1\n+             END DO\n+             i_high=i_low\n+             DO WHILE(i_high<=len_string)\n+                SELECT CASE(string(i_high:i_high))\n+                CASE('+','-','0','1','2','3','4','5','6','7','8','9')\n+                   i_high=i_high+1\n+                CASE default\n+                   EXIT\n+                END SELECT\n+             END DO\n+             IF (i_high<=i_low.OR.i_low>len_string) THEN\n+                write(6,*) \"BUG : XXX\"//string//\"XXX integer expected\"\n+                STOP 1\n+                EXIT\n+             END IF\n+          END IF\n+       ENDIF\n+    END DO\n+  END SUBROUTINE cp_unit_create\n+\n+END MODULE cp_units\n+\n+USE cp_units\n+CALL cp_unit_create(\"fs^-1\")\n+END"}, {"sha": "67c70cb113234670b80bc816db4910f770125343", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a896172d192d4b2ba73877ba164688dcbdb546c9/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a896172d192d4b2ba73877ba164688dcbdb546c9/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a896172d192d4b2ba73877ba164688dcbdb546c9", "patch": "@@ -8323,8 +8323,14 @@ vrp_visit_phi_node (gimple phi)\n       && edges == old_edges\n       && lhs_vr->type != VR_UNDEFINED)\n     {\n+      /* Compare old and new ranges, fall back to varying if the\n+         values are not comparable.  */\n       int cmp_min = compare_values (lhs_vr->min, vr_result.min);\n+      if (cmp_min == -2)\n+\tgoto varying;\n       int cmp_max = compare_values (lhs_vr->max, vr_result.max);\n+      if (cmp_max == -2)\n+\tgoto varying;\n \n       /* For non VR_RANGE or for pointers fall back to varying if\n \t the range changed.  */"}]}