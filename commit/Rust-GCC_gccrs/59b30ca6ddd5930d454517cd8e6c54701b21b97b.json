{"sha": "59b30ca6ddd5930d454517cd8e6c54701b21b97b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTliMzBjYTZkZGQ1OTMwZDQ1NDUxN2NkOGU2YzU0NzAxYjIxYjk3Yg==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-05-05T02:50:47Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-05-05T02:50:47Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r33697", "tree": {"sha": "cb203da69ed15685ed6848b058c0cf7cd4cf0385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb203da69ed15685ed6848b058c0cf7cd4cf0385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59b30ca6ddd5930d454517cd8e6c54701b21b97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b30ca6ddd5930d454517cd8e6c54701b21b97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b30ca6ddd5930d454517cd8e6c54701b21b97b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b30ca6ddd5930d454517cd8e6c54701b21b97b/comments", "author": null, "committer": null, "parents": [{"sha": "5f97a7dcfd4067fdf33b2db35af340490570932a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f97a7dcfd4067fdf33b2db35af340490570932a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f97a7dcfd4067fdf33b2db35af340490570932a"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "c431e0ba77cbe9dd829689ed0e1aab0a404951de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b30ca6ddd5930d454517cd8e6c54701b21b97b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b30ca6ddd5930d454517cd8e6c54701b21b97b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59b30ca6ddd5930d454517cd8e6c54701b21b97b", "patch": "@@ -1,3 +1,8 @@\n+2000-05-04  Neil Booth  <NeilB@earthling.net>\n+\n+\t* gcc.dg/cpp-opprec.c: New tests for operator precedence in the\n+\tpreprocessor.\n+\n 2000-05-04  Richard Henderson  <rth@cygnus.com>\n \n \t* gcc.c-torture/execute/20000503-1.c: Fix typo."}, {"sha": "3f06cd67ba97ae21c9a0a636613e3b03999aabc3", "filename": "gcc/testsuite/gcc.dg/cpp-opprec.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b30ca6ddd5930d454517cd8e6c54701b21b97b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-opprec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b30ca6ddd5930d454517cd8e6c54701b21b97b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-opprec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-opprec.c?ref=59b30ca6ddd5930d454517cd8e6c54701b21b97b", "patch": "@@ -0,0 +1,97 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* Test the full range of preprocessor operator precedence.  Each\n+   operator is tested with one of immediately higher precedence to\n+   verify it is of strictly lower precedence.  To avoid complications,\n+   each test uses just those two operators.  Occasionally this assumes\n+   correct operation of if-then-else, so the first tests verify this.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* Ensure correct functioning of if-then-else.  */\n+#if 1\n+#else\n+#error #else block evaluated for true conditional\n+#endif\n+\n+#if 0\n+#error #if block evaluated for false conditional\n+#else\n+#endif\n+\n+/* , not higher than ?.  This is not a syntax error if it is.  */\n+#if 1 ? 0, 1: 1\t/* { dg-error \"syntax\" \"? higher precedence than ,\" } */\n+#error\n+#endif\n+\n+/* : strictly higher than ?.  This would give a syntax error otherwise.  */\n+#if 0 ? 0 : 1 ? 1 : 1\n+#endif\n+\n+/* || strictly higher than ?:. */\n+#if 1 ? 0: 0 || 1\n+#error operator ?: has higher precedence than operator ||\n+#endif\n+\n+/* && strictly higher than ||.  */\n+#if 1 || 0 && 0\n+#else\n+#error operator || has higher precedence than operator &&\n+#endif\n+\n+/* | strictly higher than &&.  */\n+#if 0 && 0 | 1\n+#error operator && has higher precedence than operator |\n+#endif\n+\n+/* ^ strictly higher than |.  */\n+#if 1 | 0 ^ 1\n+#else\n+#error operator | has higher precedence than operator ^\n+#endif\n+\n+/* & strictly higher than ^.  */\n+#if 1 ^ 0 & 0\n+#else\n+#error operator ^ has higher precedence than operator &\n+#endif\n+\n+/* == (!=) strictly higher than &.  */\n+#if 0 & 0 == 0\n+#error operator & has higher precedence than operator ==\n+#endif\n+\n+/* < (>, <=, >=) strictly higher than == (!=).  */\n+\n+#if 0 == 0 < 0\n+#else\n+#error operator == has higher precedence than operator <\n+#endif\n+\n+/* << (>>) strictly higher than < (>, <=, >=).  */\n+#if 1 < 1 << 1\n+#else\n+#error operator < has higher precedence than operator <<\n+#endif\n+\n+/* Binary + (-) strictly higher than << (>>).  */\n+#if 0 << 0 + 1\n+#error operator << has higher precedence than binary +\n+#endif\n+\n+/* Binary * (/, %) strictly higher than binary + (-).  */\n+#if 1 + 0 * 0\n+#else\n+#error binary + has higher precedence than binary *\n+#endif\n+\n+/* Unary operators (!, ~, -, +) strictly higher than binary * (/, %).\n+   Equality is hard to detect because of right-associativity.  */\n+#if ~1 * 0\n+#error binary * has higher precedence than operator ~\n+#endif\n+\n+/* () > Unary.  Unfortunately this requires an additional operator.  */\n+#if -(1 - 1)\n+#error unary - has higher precedence than operator ()\n+#endif"}]}