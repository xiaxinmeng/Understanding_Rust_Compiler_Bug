{"sha": "af1430196a223b94fd0aeaf292d9ce22730f7e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxNDMwMTk2YTIyM2I5NGZkMGFlYWYyOTJkOWNlMjI3MzBmN2UyMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-03-14T11:17:01Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-03-14T11:17:01Z"}, "message": "Fix tree statistics with -fmem-report.\n\n2018-03-14  Martin Liska  <mliska@suse.cz>\n\n\t* tree.c (record_node_allocation_statistics): Use\n\tget_stats_node_kind.\n\t(get_stats_node_kind): New function extracted from\n\trecord_node_allocation_statistics.\n\t(free_node): Use get_stats_node_kind.\n\nFrom-SVN: r258521", "tree": {"sha": "a47a2735d3082add3cc0b4f60dba9c69d0553e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a47a2735d3082add3cc0b4f60dba9c69d0553e5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af1430196a223b94fd0aeaf292d9ce22730f7e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1430196a223b94fd0aeaf292d9ce22730f7e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af1430196a223b94fd0aeaf292d9ce22730f7e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1430196a223b94fd0aeaf292d9ce22730f7e23/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70458d76db278e538d23bea83413e43db0acf955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70458d76db278e538d23bea83413e43db0acf955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70458d76db278e538d23bea83413e43db0acf955"}], "stats": {"total": 102, "additions": 46, "deletions": 56}, "files": [{"sha": "104e44255e6b07500cc74d3123bfcabf98ce24e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1430196a223b94fd0aeaf292d9ce22730f7e23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1430196a223b94fd0aeaf292d9ce22730f7e23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af1430196a223b94fd0aeaf292d9ce22730f7e23", "patch": "@@ -1,3 +1,11 @@\n+2018-03-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree.c (record_node_allocation_statistics): Use\n+\tget_stats_node_kind.\n+\t(get_stats_node_kind): New function extracted from\n+\trecord_node_allocation_statistics.\n+\t(free_node): Use get_stats_node_kind.\n+\n 2018-03-14  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (compute_antic_aux): Remove code that asserts"}, {"sha": "ce52f0af0b7c0cb47b7a272f3121e56f34834463", "filename": "gcc/tree.c", "status": "modified", "additions": 38, "deletions": 56, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1430196a223b94fd0aeaf292d9ce22730f7e23/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1430196a223b94fd0aeaf292d9ce22730f7e23/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=af1430196a223b94fd0aeaf292d9ce22730f7e23", "patch": "@@ -933,92 +933,68 @@ tree_size (const_tree node)\n     }\n }\n \n-/* Record interesting allocation statistics for a tree node with CODE\n-   and LENGTH.  */\n+/* Return tree node kind based on tree CODE.  */\n \n-static void\n-record_node_allocation_statistics (enum tree_code code ATTRIBUTE_UNUSED,\n-\t\t\t\t   size_t length ATTRIBUTE_UNUSED)\n+static tree_node_kind\n+get_stats_node_kind (enum tree_code code)\n {\n   enum tree_code_class type = TREE_CODE_CLASS (code);\n-  tree_node_kind kind;\n-\n-  if (!GATHER_STATISTICS)\n-    return;\n \n   switch (type)\n     {\n     case tcc_declaration:  /* A decl node */\n-      kind = d_kind;\n-      break;\n-\n+      return d_kind;\n     case tcc_type:  /* a type node */\n-      kind = t_kind;\n-      break;\n-\n+      return t_kind;\n     case tcc_statement:  /* an expression with side effects */\n-      kind = s_kind;\n-      break;\n-\n+      return s_kind;\n     case tcc_reference:  /* a reference */\n-      kind = r_kind;\n-      break;\n-\n+      return r_kind;\n     case tcc_expression:  /* an expression */\n     case tcc_comparison:  /* a comparison expression */\n     case tcc_unary:  /* a unary arithmetic expression */\n     case tcc_binary:  /* a binary arithmetic expression */\n-      kind = e_kind;\n-      break;\n-\n+      return e_kind;\n     case tcc_constant:  /* a constant */\n-      kind = c_kind;\n-      break;\n-\n+      return c_kind;\n     case tcc_exceptional:  /* something random, like an identifier.  */\n       switch (code)\n \t{\n \tcase IDENTIFIER_NODE:\n-\t  kind = id_kind;\n-\t  break;\n-\n+\t  return id_kind;\n \tcase TREE_VEC:\n-\t  kind = vec_kind;\n-\t  break;\n-\n+\t  return vec_kind;\n \tcase TREE_BINFO:\n-\t  kind = binfo_kind;\n-\t  break;\n-\n+\t  return binfo_kind;\n \tcase SSA_NAME:\n-\t  kind = ssa_name_kind;\n-\t  break;\n-\n+\t  return ssa_name_kind;\n \tcase BLOCK:\n-\t  kind = b_kind;\n-\t  break;\n-\n+\t  return b_kind;\n \tcase CONSTRUCTOR:\n-\t  kind = constr_kind;\n-\t  break;\n-\n+\t  return constr_kind;\n \tcase OMP_CLAUSE:\n-\t  kind = omp_clause_kind;\n-\t  break;\n-\n+\t  return omp_clause_kind;\n \tdefault:\n-\t  kind = x_kind;\n-\t  break;\n+\t  return x_kind;\n \t}\n       break;\n-\n     case tcc_vl_exp:\n-      kind = e_kind;\n-      break;\n-\n+      return e_kind;\n     default:\n       gcc_unreachable ();\n     }\n+}\n+\n+/* Record interesting allocation statistics for a tree node with CODE\n+   and LENGTH.  */\n+\n+static void\n+record_node_allocation_statistics (enum tree_code code, size_t length)\n+{\n+  if (!GATHER_STATISTICS)\n+    return;\n+\n+  tree_node_kind kind = get_stats_node_kind (code);\n \n   tree_code_counts[(int) code]++;\n   tree_node_counts[(int) kind]++;\n@@ -1157,9 +1133,15 @@ free_node (tree node)\n   enum tree_code code = TREE_CODE (node);\n   if (GATHER_STATISTICS)\n     {\n+      enum tree_node_kind kind = get_stats_node_kind (code);\n+\n+      gcc_checking_assert (tree_code_counts[(int) TREE_CODE (node)] != 0);\n+      gcc_checking_assert (tree_node_counts[(int) kind] != 0);\n+      gcc_checking_assert (tree_node_sizes[(int) kind] >= tree_size (node));\n+\n       tree_code_counts[(int) TREE_CODE (node)]--;\n-      tree_node_counts[(int) t_kind]--;\n-      tree_node_sizes[(int) t_kind] -= tree_size (node);\n+      tree_node_counts[(int) kind]--;\n+      tree_node_sizes[(int) kind] -= tree_size (node);\n     }\n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     vec_free (CONSTRUCTOR_ELTS (node));"}]}