{"sha": "9d54607a02cba752939025846cdb799c23c28882", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ1NDYwN2EwMmNiYTc1MjkzOTAyNTg0NmNkYjc5OWMyM2MyODg4Mg==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-10-31T06:20:49Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-10-31T06:20:49Z"}, "message": "GFNI enabling [2/4]\n\ngcc/\n\t* config.gcc: Add gfniintrin.h.\n\t* config/i386/gfniintrin.h: New.\n\t* config/i386/i386-builtin-types.def (\n\t__builtin_ia32_vgf2p8affineinvqb_v64qi,\n\t__builtin_ia32_vgf2p8affineinvqb_v64qi_mask,\n\t__builtin_ia32_vgf2p8affineinvqb_v32qi\n\t__builtin_ia32_vgf2p8affineinvqb_v32qi_mask,\n\t__builtin_ia32_vgf2p8affineinvqb_v16qi,\n\t__builtin_ia32_vgf2p8affineinvqb_v16qi_mask): New builtins.\n\t* config/i386/i386-builtin.def (V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI,\n\tV32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI,\n\tV16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI,\n\tV64QI_FTYPE_V64QI_V64QI_INT): New types.\n\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n\t* config/i386/immintrin.h: Include gfniintrin.h.\n\t* config/i386/sse.md (vgf2p8affineinvqb_*) New pattern.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx-1.c: Handle new intrinsics.\n\t* gcc.target/i386/avx512-check.h: Check GFNI bit.\n\t* gcc.target/i386/avx512f-gf2p8affineinvqb-2.c: Runtime test.\n\t* gcc.target/i386/avx512vl-gf2p8affineinvqb-2.c: Runtime test.\n\t* gcc.target/i386/gfni-1.c: New.\n\t* gcc.target/i386/gfni-2.c: New.\n\t* gcc.target/i386/gfni-3.c: New.\n\t* gcc.target/i386/gfni-4.c: New.\n\t* gcc.target/i386/i386.exp: (check_effective_target_gfni): New.\n\t* gcc.target/i386/sse-12.c: Handle new intrinsics.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* g++.dg/other/i386-2.C: Ditto.\n\t* g++.dg/other/i386-3.C: Ditto.\n\nFrom-SVN: r254250", "tree": {"sha": "ee051607c70582cd2bbaa3e6b3ad35dcd6de887f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee051607c70582cd2bbaa3e6b3ad35dcd6de887f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d54607a02cba752939025846cdb799c23c28882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d54607a02cba752939025846cdb799c23c28882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d54607a02cba752939025846cdb799c23c28882", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d54607a02cba752939025846cdb799c23c28882/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16e6821a52b489d64a57aa4a7d21c110d2345cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e6821a52b489d64a57aa4a7d21c110d2345cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e6821a52b489d64a57aa4a7d21c110d2345cf4"}], "stats": {"total": 573, "additions": 555, "deletions": 18}, "files": [{"sha": "cba3694c663d1a1e5e2c70828fb27d0a41f4fd04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1,3 +1,22 @@\n+2017-11-01  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config.gcc: Add gfniintrin.h.\n+\t* config/i386/gfniintrin.h: New.\n+\t* config/i386/i386-builtin-types.def\n+\t(__builtin_ia32_vgf2p8affineinvqb_v64qi,\n+\t__builtin_ia32_vgf2p8affineinvqb_v64qi_mask,\n+\t__builtin_ia32_vgf2p8affineinvqb_v32qi,\n+\t__builtin_ia32_vgf2p8affineinvqb_v32qi_mask,\n+\t__builtin_ia32_vgf2p8affineinvqb_v16qi,\n+\t__builtin_ia32_vgf2p8affineinvqb_v16qi_mask): New builtins.\n+\t* config/i386/i386-builtin.def (V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI,\n+\tV32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI,\n+\tV16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI,\n+\tV64QI_FTYPE_V64QI_V64QI_INT): New types.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n+\t* config/i386/immintrin.h: Include gfniintrin.h.\n+\t* config/i386/sse.md (vgf2p8affineinvqb_*) New pattern.\n+\n 2017-10-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c (HAVE_TARGET_EXECUTABLE_SUFFIX): Remove old kludge."}, {"sha": "3dace854c95e4ec37ed1d68715ac31c8ab9263b6", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -378,7 +378,8 @@ i[34567]86-*-*)\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n \t\t       avx512vbmivlintrin.h avx5124fmapsintrin.h avx5124vnniwintrin.h\n \t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n-\t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\"\n+\t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n+\t\t       gfniintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -402,7 +403,8 @@ x86_64-*-*)\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n \t\t       avx512vbmivlintrin.h avx5124fmapsintrin.h avx5124vnniwintrin.h\n \t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n-\t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\"\n+\t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n+\t\t       gfniintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "f4ca01c5b11fc1fd1d6593cfbf4f49a308ac2469", "filename": "gcc/config/i386/gfniintrin.h", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fgfniintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fgfniintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgfniintrin.h?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -0,0 +1,229 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <gfniintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _GFNIINTRIN_H_INCLUDED\n+#define _GFNIINTRIN_H_INCLUDED\n+\n+#ifndef __GFNI__\n+#pragma GCC push_options\n+#pragma GCC target(\"gfni\")\n+#define __DISABLE_GFNI__\n+#endif /* __GFNI__ */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_gf2p8affineinv_epi64_epi8 (__m128i __A, __m128i __B, const int __C)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8affineinvqb_v16qi ((__v16qi) __A,\n+\t\t\t\t\t\t\t   (__v16qi) __B,\n+\t\t\t\t\t\t\t    __C);\n+}\n+#else\n+#define _mm_gf2p8affineinv_epi64_epi8(A, B, C)\t\t\t\t   \\\n+  ((__m128i) __builtin_ia32_vgf2p8affineinvqb_v16qi((__v16qi)(__m128i)(A), \\\n+\t\t\t\t\t   (__v16qi)(__m128i)(B), (int)(C)))\n+#endif\n+\n+#ifdef __DISABLE_GFNI__\n+#undef __DISABLE_GFNI__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_GFNI__ */\n+\n+#if !defined(__GFNI__) || !defined(__AVX__)\n+#pragma GCC push_options\n+#pragma GCC target(\"gfni,avx\")\n+#define __DISABLE_GFNIAVX__\n+#endif /* __GFNIAVX__ */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_gf2p8affineinv_epi64_epi8 (__m256i __A, __m256i __B, const int __C)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi ((__v32qi) __A,\n+\t\t\t\t\t\t\t   (__v32qi) __B,\n+\t\t\t\t\t\t\t    __C);\n+}\n+#else\n+#define _mm256_gf2p8affineinv_epi64_epi8(A, B, C)\t\t\t   \\\n+  ((__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi((__v32qi)(__m256i)(A), \\\n+\t\t\t\t\t\t    (__v32qi)(__m256i)(B), \\\n+\t\t\t\t\t\t    (int)(C)))\n+#endif\n+\n+#ifdef __DISABLE_GFNIAVX__\n+#undef __DISABLE_GFNIAVX__\n+#pragma GCC pop_options\n+#endif /* __GFNIAVX__ */\n+\n+#if !defined(__GFNI__) || !defined(__AVX512VL__)\n+#pragma GCC push_options\n+#pragma GCC target(\"gfni,avx512vl\")\n+#define __DISABLE_GFNIAVX512VL__\n+#endif /* __GFNIAVX512VL__ */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_gf2p8affineinv_epi64_epi8 (__m128i __A, __mmask16 __B, __m128i __C,\n+\t\t\t\t    __m128i __D, const int __E)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask ((__v16qi) __C,\n+\t\t\t\t\t\t\t\t(__v16qi) __D,\n+\t\t\t\t\t\t\t\t __E,\n+\t\t\t\t\t\t\t\t(__v16qi)__A,\n+\t\t\t\t\t\t\t\t __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_gf2p8affineinv_epi64_epi8 (__mmask16 __A, __m128i __B, __m128i __C,\n+\t\t\t\t     const int __D)\n+{\n+  return (__m128i) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask ((__v16qi) __B,\n+\t\t\t\t\t\t(__v16qi) __C, __D,\n+\t\t\t\t\t\t(__v16qi) _mm_setzero_si128 (),\n+\t\t\t\t\t\t __A);\n+}\n+#else\n+#define _mm_mask_gf2p8affineinv_epi64_epi8(A, B, C, D, E) \t\t   \\\n+  ((__m128i) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(\t\t   \\\n+\t\t\t(__v16qi)(__m128i)(C), (__v16qi)(__m128i)(D),      \\\n+\t\t\t(int)(E), (__v16qi)(__m128i)(A), (__mmask16)(B)))\n+#define _mm_maskz_gf2p8affineinv_epi64_epi8(A, B, C, D) \\\n+  ((__m128i) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(\t\t   \\\n+\t\t\t(__v16qi)(__m128i)(B), (__v16qi)(__m128i)(C),\t   \\\n+\t\t\t(int)(D), (__v16qi)(__m128i) _mm_setzero_si128 (), \\\n+\t\t\t(__mmask16)(A)))\n+#endif\n+\n+#ifdef __DISABLE_GFNIAVX512VL__\n+#undef __DISABLE_GFNIAVX512VL__\n+#pragma GCC pop_options\n+#endif /* __GFNIAVX512VL__ */\n+\n+#if !defined(__GFNI__) || !defined(__AVX512VL__) || !defined(__AVX512BW__)\n+#pragma GCC push_options\n+#pragma GCC target(\"gfni,avx512vl,avx512bw\")\n+#define __DISABLE_GFNIAVX512VLBW__\n+#endif /* __GFNIAVX512VLBW__ */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_gf2p8affineinv_epi64_epi8 (__m256i __A, __mmask32 __B,\n+\t\t\t\t       __m256i __C, __m256i __D, const int __E)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask ((__v32qi) __C,\n+\t\t\t\t\t\t\t\t(__v32qi) __D,\n+\t\t\t\t\t\t\t \t __E,\n+\t\t\t\t\t\t\t\t(__v32qi)__A,\n+\t\t\t\t\t\t\t\t __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_gf2p8affineinv_epi64_epi8 (__mmask32 __A, __m256i __B,\n+\t\t\t\t\t__m256i __C, const int __D)\n+{\n+  return (__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask ((__v32qi) __B,\n+\t\t\t\t      (__v32qi) __C, __D,\n+\t\t\t\t      (__v32qi) _mm256_setzero_si256 (), __A);\n+}\n+#else\n+#define _mm256_mask_gf2p8affineinv_epi64_epi8(A, B, C, D, E)\t\t\\\n+  ((__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(\t\t\\\n+\t(__v32qi)(__m256i)(C), (__v32qi)(__m256i)(D), (int)(E),\t\t\\\n+\t(__v32qi)(__m256i)(A), (__mmask32)(B)))\n+#define _mm256_maskz_gf2p8affineinv_epi64_epi8(A, B, C, D)\t\t\\\n+  ((__m256i) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(\t\t\\\n+\t(__v32qi)(__m256i)(B), (__v32qi)(__m256i)(C), (int)(D),\t\t\\\n+\t(__v32qi)(__m256i) _mm256_setzero_si256 (), (__mmask32)(A)))\n+#endif\n+\n+#ifdef __DISABLE_GFNIAVX512VLBW__\n+#undef __DISABLE_GFNIAVX512VLBW__\n+#pragma GCC pop_options\n+#endif /* __GFNIAVX512VLBW__ */\n+\n+#if !defined(__GFNI__) || !defined(__AVX512F__) || !defined(__AVX512BW__)\n+#pragma GCC push_options\n+#pragma GCC target(\"gfni,avx512f,avx512bw\")\n+#define __DISABLE_GFNIAVX512FBW__\n+#endif /* __GFNIAVX512FBW__ */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_gf2p8affineinv_epi64_epi8 (__m512i __A, __mmask64 __B, __m512i __C,\n+\t\t\t\t       __m512i __D, const int __E)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask ((__v64qi) __C,\n+\t\t\t\t\t\t\t\t(__v64qi) __D,\n+\t\t\t\t\t\t\t\t __E,\n+\t\t\t\t\t\t\t\t(__v64qi)__A,\n+\t\t\t\t\t\t\t\t __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_gf2p8affineinv_epi64_epi8 (__mmask64 __A, __m512i __B,\n+\t\t\t\t\t__m512i __C, const int __D)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask ((__v64qi) __B,\n+\t\t\t\t(__v64qi) __C, __D,\n+\t\t\t\t(__v64qi) _mm512_setzero_si512 (), __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_gf2p8affineinv_epi64_epi8 (__m512i __A, __m512i __B, const int __C)\n+{\n+  return (__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi ((__v64qi) __A,\n+\t\t\t\t\t\t\t   (__v64qi) __B, __C);\n+}\n+#else\n+#define _mm512_mask_gf2p8affineinv_epi64_epi8(A, B, C, D, E) \t\t\\\n+  ((__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(\t\t\\\n+\t(__v64qi)(__m512i)(C), (__v64qi)(__m512i)(D), (int)(E),\t\t\\\n+\t(__v64qi)(__m512i)(A), (__mmask64)(B)))\n+#define _mm512_maskz_gf2p8affineinv_epi64_epi8(A, B, C, D)\t\t\\\n+  ((__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(\t\t\\\n+\t(__v64qi)(__m512i)(B), (__v64qi)(__m512i)(C), (int)(D),\t\t\\\n+\t(__v64qi)(__m512i) _mm512_setzero_si512 (), (__mmask64)(A)))\n+#define _mm512_gf2p8affineinv_epi64_epi8(A, B, C)\t\t\t\\\n+  ((__m512i) __builtin_ia32_vgf2p8affineinvqb_v64qi (\t\t\t\\\n+\t(__v64qi)(__m512i)(A), (__v64qi)(__m512i)(B), (int)(C)))\n+#endif\n+\n+#ifdef __DISABLE_GFNIAVX512FBW__\n+#undef __DISABLE_GFNIAVX512FBW__\n+#pragma GCC pop_options\n+#endif /* __GFNIAVX512FBW__ */\n+\n+#endif /* _GFNIINTRIN_H_INCLUDED */"}, {"sha": "5b3b96ea2d05acd8a623788be6ac31d47aed0e96", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1212,3 +1212,9 @@ DEF_FUNCTION_TYPE (BND, BND, BND)\n DEF_FUNCTION_TYPE (PVOID, PCVOID, BND, ULONG)\n DEF_FUNCTION_TYPE (ULONG, VOID)\n DEF_FUNCTION_TYPE (PVOID, BND)\n+\n+#GFNI builtins\n+DEF_FUNCTION_TYPE (V64QI, V64QI, V64QI, INT)\n+DEF_FUNCTION_TYPE (V64QI, V64QI, V64QI, INT, V64QI, UDI)\n+DEF_FUNCTION_TYPE (V32QI, V32QI, V32QI, INT, V32QI, USI)\n+DEF_FUNCTION_TYPE (V16QI, V16QI, V16QI, INT, V16QI, UHI)"}, {"sha": "76e5f0fafddc0cb6423d0d25a62d5aeaa299e445", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -2589,6 +2589,13 @@ BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di_mask, \"__builtin_\n /* RDPID */\n BDESC (OPTION_MASK_ISA_RDPID, CODE_FOR_rdpid, \"__builtin_ia32_rdpid\", IX86_BUILTIN_RDPID, UNKNOWN, (int) UNSIGNED_FTYPE_VOID)\n \n+/* GFNI */\n+BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v64qi, \"__builtin_ia32_vgf2p8affineinvqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v64qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v64qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB512MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v32qi, \"__builtin_ia32_vgf2p8affineinvqb_v32qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v16qi, \"__builtin_ia32_vgf2p8affineinvqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n BDESC_END (ARGS2, MPX)\n \n /* Builtins for MPX.  */"}, {"sha": "382635f4fc750fee07ca3bbf5f1c7c77a1c94307", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -33674,6 +33674,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case UQI_FTYPE_V4SF_V4SF_INT:\n     case UHI_FTYPE_V16SI_V16SI_INT:\n     case UHI_FTYPE_V16SF_V16SF_INT:\n+    case V64QI_FTYPE_V64QI_V64QI_INT:\n       nargs = 3;\n       nargs_constant = 1;\n       break;\n@@ -33901,6 +33902,13 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       mask_pos = 1;\n       nargs_constant = 1;\n       break;\n+    case V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI:\n+    case V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI:\n+    case V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI:\n+      nargs = 5;\n+      mask_pos = 1;\n+      nargs_constant = 2;\n+      break;\n \n     default:\n       gcc_unreachable ();"}, {"sha": "365d2db7dd01dfcc2a6018136e938fad1b8d4745", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -92,6 +92,8 @@\n \n #include <cetintrin.h>\n \n+#include <gfniintrin.h>\n+\n #ifndef __RDRND__\n #pragma GCC push_options\n #pragma GCC target(\"rdrnd\")"}, {"sha": "24bd5bc660154833cff41ee46473b3e18d77e35c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -155,6 +155,9 @@\n   UNSPEC_VP4FNMADD\n   UNSPEC_VP4DPWSSD\n   UNSPEC_VP4DPWSSDS\n+\n+  ;; For GFNI support\n+  UNSPEC_GF2P8AFFINEINV\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -323,6 +326,9 @@\n (define_mode_iterator VI1_AVX512\n   [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX2\") V16QI])\n \n+(define_mode_iterator VI1_AVX512F\n+  [(V64QI \"TARGET_AVX512F\") (V32QI \"TARGET_AVX\") V16QI])\n+\n (define_mode_iterator VI2_AVX2\n   [(V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX2\") V8HI])\n \n@@ -19974,3 +19980,20 @@\n     ])]\n   \"TARGET_SSE && TARGET_64BIT\"\n   \"jmp\\t%P1\")\n+\n+(define_insn \"vgf2p8affineinvqb_<mode><mask_name>\"\n+  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,x,v\")\n+\t(unspec:VI1_AVX512F [(match_operand:VI1_AVX512F 1 \"register_operand\" \"%0,x,v\")\n+\t\t\t       (match_operand:VI1_AVX512F 2 \"nonimmediate_operand\" \"xBm,xm,vm\")\n+\t\t\t       (match_operand:QI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n+\t\t\t      UNSPEC_GF2P8AFFINEINV))]\n+  \"TARGET_GFNI\"\n+  \"@\n+   gf2p8affineinvqb\\t{%3, %2, %0| %0, %2, %3}\n+   vgf2p8affineinvqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\n+   vgf2p8affineinvqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}, {"sha": "c371350c0e43af05de4dba899a8b5bf3179bc42e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1,3 +1,23 @@\n+2017-11-01  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Handle new intrinsics.\n+\t* gcc.target/i386/avx512-check.h: Check GFNI bit.\n+\t* gcc.target/i386/avx512f-gf2p8affineinvqb-2.c: Runtime test.\n+\t* gcc.target/i386/avx512vl-gf2p8affineinvqb-2.c: Runtime test.\n+\t* gcc.target/i386/gfni-1.c: New.\n+\t* gcc.target/i386/gfni-2.c: New.\n+\t* gcc.target/i386/gfni-3.c: New.\n+\t* gcc.target/i386/gfni-4.c: New.\n+\t* gcc.target/i386/i386.exp: (check_effective_target_gfni): New.\n+\t* gcc.target/i386/sse-12.c: Handle new intrinsics.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n+\n 2017-10-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/67595"}, {"sha": "7e35e686cff9f442e4a9ed65f54570034927d5bb", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n \n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n-   avx5124vnniwintrin.h, avx512vpopcntdqintrin.h and mm_malloc.h.h are usable\n-   with -O -pedantic-errors.  */\n+   avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n+   and mm_malloc.h.h are usable with -O -pedantic-errors.  */\n \n #include <x86intrin.h>\n "}, {"sha": "7e44d47a93c3f270174d48491d81e4e38104c1c1", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n-   avx5124vnniwintrin.h, avx512vpopcntdqintrin.h and mm_malloc.h are\n-   usable with -O -fkeep-inline-functions.  */\n+   avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h and\n+   mm_malloc.h are usable with -O -fkeep-inline-functions.  */\n \n #include <x86intrin.h>"}, {"sha": "46238265ae684848b5408c5c654bfaa9e45b60d4", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n@@ -603,6 +603,16 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n+/* gfniintrin.h */\n+#define __builtin_ia32_vgf2p8affineinvqb_v16qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v16qi(A, B, 1) \n+#define __builtin_ia32_vgf2p8affineinvqb_v32qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v32qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineinvqb_v64qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v64qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, 1, D, E) \n+\n+\n+\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "9390c1ab9eab55c2796dda210d4ee18445d0e18b", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -74,6 +74,9 @@ main ()\n #endif\n #ifdef AVX512VPOPCNTDQ\n       && (ecx & bit_AVX512VPOPCNTDQ)\n+#endif\n+#ifdef GFNI\n+      && (ecx & bit_GFNI)\n #endif\n       && avx512f_os_support ())\n     {"}, {"sha": "af4839f443433773d616e1e945d2f1b8c5b7779b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-gf2p8affineinvqb-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8affineinvqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8affineinvqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-gf2p8affineinvqb-2.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mgfni -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target gfni } */\n+\n+#define AVX512F\n+\n+#define GFNI\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+#include <x86intrin.h>\n+\n+static void\n+CALC (unsigned char *r, unsigned char *s1, unsigned char *s2, unsigned char imm)\n+{\n+  for (int a = 0; a < SIZE/8; a++)\n+    {\n+      for (int val = 0; val < 8; val++)\n+        {\n+          unsigned char result = 0;\n+          for (int bit = 0; bit < 8; bit++)\n+          {\n+            unsigned char temp = s1[a*8 + val] & s2[a*8 + bit];\n+            unsigned char parity = __popcntd(temp);\n+            if (parity % 2)\n+              result |= (1 << (8 - bit - 1));\n+          }\n+          r[a*8 + val] = result ^ imm; \n+        }\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+  unsigned char imm = 0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i %2 ; // gfni inverse of 1 and 0 are 1 and 0\n+      src2.a[i] = 1;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, src1.a, src2.a, imm);\n+\n+  res1.x = INTRINSIC (_gf2p8affineinv_epi64_epi8) (src1.x, src2.x, imm);\n+  res2.x = INTRINSIC (_mask_gf2p8affineinv_epi64_epi8) (res2.x, mask, src1.x, src2.x, imm);\n+  res3.x = INTRINSIC (_maskz_gf2p8affineinv_epi64_epi8) (mask, src1.x, src2.x, imm);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "fa545263041da315c469faf96016edfa4481d882", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-gf2p8affineinvqb-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8affineinvqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8affineinvqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-gf2p8affineinvqb-2.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -mgfni\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target gfni } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-gf2p8affineinvqb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-gf2p8affineinvqb-2.c\""}, {"sha": "5e22c9eae92eeff4309a52652eef145338009e1e", "filename": "gcc/testsuite/gcc.target/i386/gfni-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-1.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mgfni -mavx512bw -mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+volatile __m512i x1, x2;\n+volatile __mmask64 m64;\n+ \n+void extern\n+avx512vl_test (void)\n+{\n+    x1 = _mm512_gf2p8affineinv_epi64_epi8(x1, x2, 3);\n+    x1 = _mm512_mask_gf2p8affineinv_epi64_epi8(x1, m64, x2, x1, 3);\n+    x1 = _mm512_maskz_gf2p8affineinv_epi64_epi8(m64, x1, x2, 3);\n+}"}, {"sha": "4d1f151aa401e1e6119160f0e6d27bdf1aab3810", "filename": "gcc/testsuite/gcc.target/i386/gfni-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-2.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mgfni -mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+int *p;\n+volatile __m256i x3, x4;\n+volatile __m128i x5, x6;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+ \n+void extern\n+avx512vl_test (void)\n+{\n+    x3 = _mm256_gf2p8affineinv_epi64_epi8(x3, x4, 3);\n+    x3 = _mm256_mask_gf2p8affineinv_epi64_epi8(x3, m32, x4, x3, 3);\n+    x3 = _mm256_maskz_gf2p8affineinv_epi64_epi8(m32, x3, x4, 3);\n+    x5 = _mm_gf2p8affineinv_epi64_epi8(x5, x6, 3);\n+    x5 = _mm_mask_gf2p8affineinv_epi64_epi8(x5, m16, x6, x5, 3);\n+    x5 = _mm_maskz_gf2p8affineinv_epi64_epi8(m16, x5, x6, 3);\n+}"}, {"sha": "de5f80b1124228fea57746d1c46abff59b457ebd", "filename": "gcc/testsuite/gcc.target/i386/gfni-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-3.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mgfni -mavx -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vgf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+int *p;\n+volatile __m256i x3, x4;\n+volatile __m128i x5, x6;\n+ \n+void extern\n+avx512vl_test (void)\n+{\n+    x3 = _mm256_gf2p8affineinv_epi64_epi8(x3, x4, 3);\n+    x5 = _mm_gf2p8affineinv_epi64_epi8(x5, x6, 3);\n+}"}, {"sha": "1532716191e5453968b7f48a809233c4d674b623", "filename": "gcc/testsuite/gcc.target/i386/gfni-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgfni-4.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mgfni -O2\" } */\n+/* { dg-final { scan-assembler-times \"gf2p8affineinvqb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+int *p;\n+volatile __m128i x5, x6;\n+ \n+void extern\n+avx512vl_test (void)\n+{\n+    x5 = _mm_gf2p8affineinv_epi64_epi8(x5, x6, 3);\n+}"}, {"sha": "b2bdbfdc06b08f7329fdd8d4a004182844ce9920", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -421,6 +421,21 @@ proc check_effective_target_avx512vpopcntdq { } {\n     } \"-mavx512vpopcntdq\" ]\n }\n \n+# Return 1 if gfni instructions can be compiled.\n+proc check_effective_target_gfni { } {\n+    return [check_no_compiler_messages gfni object {\n+        typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+\n+        __v16qi\n+        _mm_gf2p8affineinv_epi64_epi8 (__v16qi __A, __v16qi __B, const int __C)\n+        {\n+            return (__v16qi) __builtin_ia32_vgf2p8affineinvqb_v16qi ((__v16qi) __A,\n+\t\t\t\t\t\t\t\t     (__v16qi) __B,\n+\t\t\t\t\t\t\t\t      0);\n+        }\n+    } \"-mgfni\" ]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "82f5d3c653b8f7f484f8b1c4c9ce65054bda89c6", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1,9 +1,9 @@\n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n-   popcntintrin.h and mm_malloc.h are usable\n+   popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "c35ec9a47cb306335daa17848584a03766daac05", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n@@ -620,4 +620,12 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n+/* gfniintrin.h */\n+#define __builtin_ia32_vgf2p8affineinvqb_v16qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v16qi(A, B, 1) \n+#define __builtin_ia32_vgf2p8affineinvqb_v32qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v32qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineinvqb_v64qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v64qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, 1, D, E) \n+\n #include <x86intrin.h>"}, {"sha": "388026f927a21f8bf20a6f5902532f32e0e9bcf9", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -1,14 +1,14 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile without optimization.  All of them are\n    defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h,\n    fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, \n-   lwpintrin.h, fmaintrin.h and mm_malloc.h that reference the proper \n-   builtin functions.\n+   lwpintrin.h, fmaintrin.h gfniintrin.h and mm_malloc.h that reference\n+   the proper builtin functions.\n \n    Defining away \"extern\" and \"__inline\" results in all of them being compiled\n    as proper functions.  */\n@@ -684,3 +684,8 @@ test_1 ( __bextri_u32, unsigned int, unsigned int, 1)\n #ifdef __x86_64__\n test_1 ( __bextri_u64, unsigned long long, unsigned long long, 1)\n #endif\n+\n+/* gfniintrin.h */\n+test_2 (_mm_gf2p8affineinv_epi64_epi8, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm256_gf2p8affineinv_epi64_epi8, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm512_gf2p8affineinv_epi64_epi8, __m512i, __m512i, __m512i, 1)"}, {"sha": "3e64e2915ec8df67814121cc3eb4a11dd9673e18", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -101,7 +101,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -218,7 +218,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)\n@@ -695,6 +695,11 @@ test_2 (_mm_rsqrt28_round_ss, __m128, __m128, __m128, 8)\n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)\n \n+/* gfniintrin.h */\n+test_2 (_mm_gf2p8affineinv_epi64_epi8, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm256_gf2p8affineinv_epi64_epi8, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm512_gf2p8affineinv_epi64_epi8, __m512i, __m512i, __m512i, 1)\n+\n /* wmmintrin.h (AES/PCLMUL).  */\n #ifdef DIFFERENT_PRAGMAS\n #pragma GCC target (\"aes,pclmul\")"}, {"sha": "911258fa042eb380ab664fa3dd193db0f2fe4dfa", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d54607a02cba752939025846cdb799c23c28882/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=9d54607a02cba752939025846cdb799c23c28882", "patch": "@@ -619,6 +619,14 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid\")\n+/* gfniintrin.h */\n+#define __builtin_ia32_vgf2p8affineinvqb_v16qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v16qi(A, B, 1) \n+#define __builtin_ia32_vgf2p8affineinvqb_v32qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v32qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineinvqb_v64qi(A, B, C) __builtin_ia32_vgf2p8affineinvqb_v64qi(A, B, 1)\n+#define __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v16qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v32qi_mask(A, B, 1, D, E) \n+#define __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineinvqb_v64qi_mask(A, B, 1, D, E) \n+\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni\")\n \n #include <x86intrin.h>"}]}