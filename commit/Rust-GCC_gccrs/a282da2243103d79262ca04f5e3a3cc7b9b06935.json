{"sha": "a282da2243103d79262ca04f5e3a3cc7b9b06935", "node_id": "C_kwDOANBUbNoAKGEyODJkYTIyNDMxMDNkNzkyNjJjYTA0ZjVlM2EzY2M3YjliMDY5MzU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-29T11:50:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-29T11:51:36Z"}, "message": "c++: Improve diagnostics for template args terminated with >= or >>= [PR104319]\n\nAs mentioned in the PR, for C++98 we have diagnostics that expect\n>> terminating template arguments to be a mistake for > > (C++11\nsaid it has to be treated that way), while if user trying to spare the\nspacebar doesn't separate > from following = or >> from following =,\nthe diagnostics is confusing, while clang suggests adding space in between.\n\nThe following patch does that for >= and >>= too.\n\nFor some strange reason the error recovery emits further errors,\nnot really sure what's going on because I overwrite the token->type\nlike the code does for the C++11 >> case or for the C++98 >> cases,\nbut at least the first error is nicer (well, for the C++98 nested\ntemplate case and >>= I need to overwrite it to > and so the = is lost,\nso perhaps some follow-up errors are needed for that case).\n\n2022-04-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/104319\n\t* parser.cc (cp_parser_template_argument): Treat >= like C++98 >>\n\tafter a type id by setting maybe_type_id and aborting tentative\n\tparse.\n\t(cp_parser_enclosed_template_argument_list): Handle\n\tCPP_GREATER_EQ like misspelled CPP_GREATER CPP_RQ and\n\tCPP_RSHIFT_EQ like misspelled CPP_GREATER CPP_GREATER_EQ\n\tor CPP_RSHIFT CPP_EQ or CPP_GREATER CPP_GREATER CPP_EQ.\n\t(cp_parser_next_token_ends_template_argument_p): Return true\n\talso for CPP_GREATER_EQ and CPP_RSHIFT_EQ.\n\n\t* g++.dg/parse/template28.C: Adjust expected diagnostics.\n\t* g++.dg/parse/template30.C: New test.", "tree": {"sha": "cfe1e5dde10785f65afd31b6f59d8c1894a5dedf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe1e5dde10785f65afd31b6f59d8c1894a5dedf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a282da2243103d79262ca04f5e3a3cc7b9b06935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a282da2243103d79262ca04f5e3a3cc7b9b06935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a282da2243103d79262ca04f5e3a3cc7b9b06935", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a282da2243103d79262ca04f5e3a3cc7b9b06935/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c465ddd619bbb2949bc2bc31629c2a826a7c437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c465ddd619bbb2949bc2bc31629c2a826a7c437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c465ddd619bbb2949bc2bc31629c2a826a7c437"}], "stats": {"total": 104, "additions": 98, "deletions": 6}, "files": [{"sha": "ee69934c20ff8a7c2e9872bdc866c13d1329a32e", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282da2243103d79262ca04f5e3a3cc7b9b06935/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282da2243103d79262ca04f5e3a3cc7b9b06935/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=a282da2243103d79262ca04f5e3a3cc7b9b06935", "patch": "@@ -18818,8 +18818,13 @@ cp_parser_template_argument (cp_parser* parser)\n      In C++0x, the '>>' will be considered two separate '>'\n      tokens.  */\n   if (!cp_parser_error_occurred (parser)\n-      && cxx_dialect == cxx98\n-      && cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))\n+      && ((cxx_dialect == cxx98\n+\t   && cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))\n+\t  /* Similarly for >= which\n+\t     cp_parser_next_token_ends_template_argument_p treats for\n+\t     diagnostics purposes as mistyped > =, but can be valid\n+\t     after a type-id.  */\n+\t  || cp_lexer_next_token_is (parser->lexer, CPP_GREATER_EQ)))\n     {\n       maybe_type_id = true;\n       cp_parser_abort_tentative_parse (parser);\n@@ -32045,7 +32050,9 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n   cp_evaluated ev;\n   /* Parse the template-argument-list itself.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER)\n-      || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))\n+      || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT)\n+      || cp_lexer_next_token_is (parser->lexer, CPP_GREATER_EQ)\n+      || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT_EQ))\n     arguments = NULL_TREE;\n   else\n     arguments = cp_parser_template_argument_list (parser);\n@@ -32102,6 +32109,38 @@ cp_parser_enclosed_template_argument_list (cp_parser* parser)\n \t\t    \"a template argument list\");\n \t}\n     }\n+  /* Similarly for >>= and >=.  */\n+  else if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER_EQ)\n+\t   || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT_EQ))\n+    {\n+      cp_token *token = cp_lexer_consume_token (parser->lexer);\n+      gcc_rich_location richloc (token->location);\n+      enum cpp_ttype new_type;\n+      const char *replacement;\n+      if (token->type == CPP_GREATER_EQ)\n+\t{\n+\t  replacement = \"> =\";\n+\t  new_type = CPP_EQ;\n+\t}\n+      else if (!saved_greater_than_is_operator_p)\n+\t{\n+\t  if (cxx_dialect != cxx98)\n+\t    replacement = \">> =\";\n+\t  else\n+\t    replacement = \"> > =\";\n+\t  new_type = CPP_GREATER;\n+\t}\n+      else\n+\t{\n+\t  replacement = \"> >=\";\n+\t  new_type = CPP_GREATER_EQ;\n+\t}\n+      richloc.add_fixit_replace (replacement);\n+      error_at (&richloc, \"%qs should be %qs to terminate a template \"\n+\t\t\"argument list\",\n+\t\tcpp_type2name (token->type, token->flags), replacement);\n+      token->type = new_type;\n+    }\n   else\n     cp_parser_require_end_of_template_parameter_list (parser);\n   /* The `>' token might be a greater-than operator again now.  */\n@@ -33180,7 +33219,11 @@ cp_parser_next_token_ends_template_argument_p (cp_parser *parser)\n   return (token->type == CPP_COMMA\n           || token->type == CPP_GREATER\n           || token->type == CPP_ELLIPSIS\n-\t  || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT));\n+\t  || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT)\n+\t  /* For better diagnostics, treat >>= like that too, that\n+\t     shouldn't appear non-nested in template arguments.  */\n+\t  || token->type == CPP_GREATER_EQ\n+\t  || token->type == CPP_RSHIFT_EQ);\n }\n \n /* Returns TRUE iff the n-th token is a \"<\", or the n-th is a \"[\" and the"}, {"sha": "fc65a54bf78f53115507878eab03e14b9259c173", "filename": "gcc/testsuite/g++.dg/parse/template28.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282da2243103d79262ca04f5e3a3cc7b9b06935/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282da2243103d79262ca04f5e3a3cc7b9b06935/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate28.C?ref=a282da2243103d79262ca04f5e3a3cc7b9b06935", "patch": "@@ -2,8 +2,8 @@\n \n template<class> struct A {};\n \n-template<class T> void foo(A<T>=A<T>()) {} // { dg-error \"24:variable or field .foo. declared void\" }\n-// { dg-error \"template\" \"\" { target *-*-* } .-1 }\n+template<class T> void foo(A<T>=A<T>()) {} // { dg-error \"'>=' should be '> =' to terminate a template argument list\" }\n+// { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n \n void bar()\n {"}, {"sha": "fa89889a2bc6f3466798a0dcac68f970af44a426", "filename": "gcc/testsuite/g++.dg/parse/template30.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282da2243103d79262ca04f5e3a3cc7b9b06935/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282da2243103d79262ca04f5e3a3cc7b9b06935/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate30.C?ref=a282da2243103d79262ca04f5e3a3cc7b9b06935", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/104319\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+template<typename T> struct A {};\n+template<typename T> int z;\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } }\n+template<int N> int w;\t\t// { dg-warning \"variable templates only available with\" \"\" { target c++11_down } }\n+\n+void\n+foo ()\n+{\n+  z<int>=0;\t\t\t// { dg-error \"'>=' should be '> =' to terminate a template argument list\" }\n+}\t\t\t\t// { dg-error \"expected ';' before numeric constant\" \"\" { target *-*-* } .-1 }\n+\n+int\n+bar ()\n+{\n+  return z<int>>0;\t\t// { dg-error \"spurious '>>', use '>' to terminate a template argument list\" \"\" { target c++98_only } }\n+}\t\t\t\t// { dg-error \"expected ';' before numeric constant\" \"\" { target c++98_only } .-1 }\n+\n+int\n+baz ()\n+{\n+  return z<int>>=0;\t\t// { dg-error \"'>>=' should be '> >=' to terminate a template argument list\" }\n+}\t\t\t\t// { dg-error \"expected ';' before numeric constant\" \"\" { target *-*-* } .-1 }\n+\n+int\n+qux ()\n+{\n+  return z<A<int>>=0;\t\t// { dg-error \"'>>=' should be '>> =' to terminate a template argument list\" \"\" { target c++11 } }\n+}\t\t\t\t// { dg-error \"'>>=' should be '> > =' to terminate a template argument list\" \"\" { target c++98_only } .-1 }\n+\t\t\t\t// { dg-error \"parse error in template argument list\" \"\" { target *-*-* } .-2 }\n+\t\t\t\t// { dg-error \"template argument 1 is invalid\" \"\" { target *-*-* } .-3 }\n+\n+void\n+quux ()\n+{\n+  w<5>=0>=6>=8> = 5;\n+}\n+\n+#if __cplusplus >= 201103L\n+struct B { constexpr bool operator >= (int) { return true; } };\n+\n+void\n+corge ()\n+{\n+  w<B()>=5> = 5;\n+}\n+#endif"}]}