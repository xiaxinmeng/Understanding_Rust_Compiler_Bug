{"sha": "5e039e6b12f5bc2315fc0824b3d8648463fa3cc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwMzllNmIxMmY1YmMyMzE1ZmMwODI0YjNkODY0ODQ2M2ZhM2NjOA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-04-24T22:12:32Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-04-24T22:12:32Z"}, "message": "sh.c (sh_va_arg): If argument was passed by reference, dereference the pointer.\n\n\t* sh.c (sh_va_arg): If argument was passed by reference,\n\tdereference the pointer.\n\nFrom-SVN: r52734", "tree": {"sha": "7e7fc1163c7db3f8fa05f975bc16677b82179d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e7fc1163c7db3f8fa05f975bc16677b82179d34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e039e6b12f5bc2315fc0824b3d8648463fa3cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e039e6b12f5bc2315fc0824b3d8648463fa3cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e039e6b12f5bc2315fc0824b3d8648463fa3cc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e039e6b12f5bc2315fc0824b3d8648463fa3cc8/comments", "author": null, "committer": null, "parents": [{"sha": "309d8365e52baa9efd7ec572127c9db57c03570b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309d8365e52baa9efd7ec572127c9db57c03570b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309d8365e52baa9efd7ec572127c9db57c03570b"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "23175ed3938ce6fb3d55988093dae8452eb8f0d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e039e6b12f5bc2315fc0824b3d8648463fa3cc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e039e6b12f5bc2315fc0824b3d8648463fa3cc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e039e6b12f5bc2315fc0824b3d8648463fa3cc8", "patch": "@@ -1,4 +1,7 @@\n-Wed Apr 24 21:35:11 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+Wed Apr 24 21:51:54 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.c (sh_va_arg): If argument was passed by reference,\n+\tdereference the pointer.\n \n \t* sh.h (PIC_OFFSET_TABLE_REGNUM): Conditionalize on flag_pic.\n "}, {"sha": "43c70a29cc564c32f24f785aa0ac92578460f700", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e039e6b12f5bc2315fc0824b3d8648463fa3cc8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e039e6b12f5bc2315fc0824b3d8648463fa3cc8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=5e039e6b12f5bc2315fc0824b3d8648463fa3cc8", "patch": "@@ -5293,11 +5293,16 @@ sh_va_arg (valist, type)\n   HOST_WIDE_INT size, rsize;\n   tree tmp, pptr_type_node;\n   rtx addr_rtx, r;\n+  rtx result;\n+  int pass_by_ref = MUST_PASS_IN_STACK (TYPE_MODE (type), type);\n \n   size = int_size_in_bytes (type);\n   rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n   pptr_type_node = build_pointer_type (ptr_type_node);\n \n+  if (pass_by_ref)\n+    type = build_pointer_type (type);\n+\n   if (! TARGET_SH5 && (TARGET_SH3E || TARGET_SH4) && ! TARGET_HITACHI)\n     {\n       tree f_next_o, f_next_o_limit, f_next_fp, f_next_fp_limit, f_next_stack;\n@@ -5411,7 +5416,19 @@ sh_va_arg (valist, type)\n   /* ??? In va-sh.h, there had been code to make values larger than\n      size 8 indirect.  This does not match the FUNCTION_ARG macros.  */\n \n-  return std_expand_builtin_va_arg (valist, type);\n+  result = std_expand_builtin_va_arg (valist, type);\n+  if (pass_by_ref)\n+    {\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      if (GET_MODE (addr) != Pmode)\n+\taddr = convert_memory_address (Pmode, result);\n+#endif\n+      result = gen_rtx_MEM (ptr_mode, force_reg (Pmode, result));\n+      set_mem_alias_set (result, get_varargs_alias_set ());\n+    }\n+  /* ??? expand_builtin_va_arg will also set the alias set of the dereferenced\n+     argument to the varargs alias set.  */\n+  return result;\n }\n \n /* Define the offset between two registers, one to be eliminated, and"}]}