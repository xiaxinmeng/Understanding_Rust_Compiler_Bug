{"sha": "d79438193b176aa2c0ae47311ff5ba0f90e89934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5NDM4MTkzYjE3NmFhMmMwYWU0NzMxMWZmNWJhMGY5MGU4OTkzNA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-10-12T22:58:40Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-10-12T22:58:40Z"}, "message": "Re-write.  New logic, assuming implicit extern \"C\" from cpp.\n\nFrom-SVN: r5762", "tree": {"sha": "2700a5e4a945d8a2f7461f6c1abc8ab62399f0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2700a5e4a945d8a2f7461f6c1abc8ab62399f0b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d79438193b176aa2c0ae47311ff5ba0f90e89934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79438193b176aa2c0ae47311ff5ba0f90e89934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79438193b176aa2c0ae47311ff5ba0f90e89934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79438193b176aa2c0ae47311ff5ba0f90e89934/comments", "author": null, "committer": null, "parents": [{"sha": "d7c824c39ea7bee67d6f5f8eb404b4d9617122f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c824c39ea7bee67d6f5f8eb404b4d9617122f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c824c39ea7bee67d6f5f8eb404b4d9617122f4"}], "stats": {"total": 140, "additions": 93, "deletions": 47}, "files": [{"sha": "45830ce9a8f71d3eba9b9f3aefb04f0b6d0ae2bf", "filename": "gcc/fixproto", "status": "modified", "additions": 93, "deletions": 47, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79438193b176aa2c0ae47311ff5ba0f90e89934/gcc%2Ffixproto", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79438193b176aa2c0ae47311ff5ba0f90e89934/gcc%2Ffixproto", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixproto?ref=d79438193b176aa2c0ae47311ff5ba0f90e89934", "patch": "@@ -1,7 +1,7 @@\n #!/bin/sh\n #\n # SYNOPSIS\n-#\tfixproto TARGET-DIR [ SOURCE-DIR ... ]\n+#\tfixproto TARGET-DIR SOURCE-DIR-ALL SOURCE-DIR-STD\n #\n # COPYRIGHT\n #\tCopyright (C) 1993 Free Software Foundation, Inc.\n@@ -25,7 +25,9 @@\n #\tAdjunct script for GNU CC to populate a directory with ANSI,\n #\tPosix.1, and C++ compatible header files.\n #\n-#\tEach file found under each SOURCE-DIR is analized and \"fixed.\"\n+#\tEach file found under SOURCE-DIR-ALL is analyzed and \"fixed.\"\n+#       Only standard ANSI/POSIX files found under SOURCE-DIR-STD\n+#       are analyzed and \"fixed.\"\n #\tThe SOURCE-DIRs are searched in order; a file found\n #\tunder multiple SOURCE-DIRs is only handled for the first one.\n #\n@@ -60,8 +62,16 @@ if [ `echo $1 | wc -w` = 0 ] ; then\n   echo $progname\\: usage\\: $progname target-dir \\[ source-dir \\.\\.\\. \\]\n   exit 1\n fi\n+\n+std_files=\"ctype.h dirent.h errno.h curses.h fcntl.h grp.h locale.h math.h pwd.h setjmp.h signal.h stdio.h stdlib.h string.h sys/stat.h sys/times.h sys/resource.h sys/utsname.h sys/wait.h tar.h termios.h time.h unistd.h\"\n+\n rel_target_dir=$1\n-shift\n+# All files in $src_dir_all (normally same as $rel_target_dir) are\n+# processed.\n+src_dir_all=$2\n+# In $src_dir_std (normally same as /usr/include), only the\n+# \"standard\" ANSI/POSIX files listed in $std_files are processed.\n+src_dir_std=$3\n \n if [ `expr $rel_target_dir : '\\(.\\)'` != '/' ] ; then\n   abs_target_dir=$original_dir/$rel_target_dir\n@@ -90,7 +100,7 @@ echo $progname\\: populating \\`$rel_target_dir\\'\n include_path=\"\"\n \n if [ `echo $* | wc -w` != 0 ] ; then\n-  for rel_source_dir in $*; do\n+  for rel_source_dir in $src_dir_all $src_dir_std; do\n     if [ `expr $rel_source_dir : '\\(.\\)'` != '/' ] ; then\n       abs_source_dir=$original_dir/$rel_source_dir\n     else\n@@ -109,53 +119,95 @@ required_unistd_h=\"_exit access alarm chdir chown close ctermid cuserid dup dup2\n done_dirs=\"\"\n echo \"\" >fixproto.list\n \n-if [ `echo $* | wc -w` != 0 ] ; then\n-  for rel_source_dir in $* ; do\n-    if [ `expr $rel_source_dir : '\\(.\\)'` != '/' ] ; then\n-      abs_source_dir=$original_dir/$rel_source_dir\n-    else\n-      abs_source_dir=$rel_source_dir\n-    fi\n-    if [ \\! -d $abs_source_dir ] ; then\n-      echo $progname\\: warning\\: no such directory\\: \\`$rel_source_dir\\'\n-      continue\n-    fi\n+for code in ALL STD ; do\n+\n+  subdirs=\".\"\n+\n+  case $code in\n+    ALL)\n+      rel_source_dir=$src_dir_all\n \n-    dirs=\".\"\n-    levels=2\n-    subdirs=\".\"\n-    while $LINKS && test -n \"$dirs\" -a $levels -gt 0\n-    do\n-      levels=`expr $levels - 1`\n-      newdirs=\n-      for d in $dirs ; do\n-\t# Find all directories under $d, relative to $d, excluding $d itself.\n-        subdirs=\"$subdirs \"`cd $abs_source_dir/$d; find . -type d -print | \\\n-\t\t       sed -e '/^\\.$/d' -e \"s|^\\./|${d}/|\" -e 's|^\\./||'`\n-\tlinks=\n-\tlinks=`cd $abs_source_dir; find $d/. -type l -print | \\\n+      dirs=\".\"\n+      levels=2\n+      while $LINKS && test -n \"$dirs\" -a $levels -gt 0\n+      do\n+        levels=`expr $levels - 1`\n+\tnewdirs=\n+\tfor d in $dirs ; do\n+\t  # Find all directories under $d, relative to $d, excluding $d itself.\n+\t  subdirs=\"$subdirs \"`cd $rel_source_dir/$d; find . -type d -print | \\\n+\t           sed -e '/^\\.$/d' -e \"s|^\\./|${d}/|\" -e 's|^\\./||'`\n+\t  links=\n+\t  links=`cd $rel_source_dir; find $d/. -type l -print | \\\n \t\t       sed -e \"s|$d/./|$d/|\" -e 's|^\\./||'`\n-\tfor link in $links --dummy-- ; do\n-\t  if test -d $abs_source_dir/$link/. ; then\n-\t    newdirs=\"$newdirs $link\"\n-\t  fi\n+\t  for link in $links --dummy-- ; do\n+\t    test -d $rel_source_dir/$link/. && newdirs=\"$newdirs $link\"\n+\t  done\n \tdone\n+\tdirs=\"$newdirs\"\n+\tsubdirs=\"$subdirs $newdirs\"\n       done\n-      dirs=\"$newdirs\"\n-      subdirs=\"$subdirs $newdirs\"\n-    done\n+      ;;\n+    STD)\n+      rel_source_dir=$src_dir_std\n+      ;;\n+  esac\n+\n+  if [ `expr $rel_source_dir : '\\(.\\)'` != '/' ] ; then\n+    abs_source_dir=$original_dir/$rel_source_dir\n+  else\n+    abs_source_dir=$rel_source_dir\n+  fi\n+\n+  if [ \\! -d $abs_source_dir ] ; then\n+    echo $progname\\: warning\\: no such directory\\: \\`$rel_source_dir\\'\n+    continue\n+  fi\n+\n+  for rel_source_subdir in $subdirs; do\n \n-    for rel_source_subdir in $subdirs; do\n       abs_target_subdir=${abs_target_dir}/${rel_source_subdir}\n       if [ \\! -d $abs_target_subdir ] ; then\n         mkdir $abs_target_subdir\n       fi\n       # Append \"/\"; remove initial \"./\". Hence \".\" -> \"\" and \"sys\" -> \"sys/\".\n       rel_source_prefix=`echo $rel_source_subdir | sed -e 's|$|/|' -e 's|^./||'`\n \n-      # The 'sed' is in case the *.h matches nothing, which yields \"*.h\"\n-      # which would then get re-globbed in the current directory.  Sigh.\n-      rel_source_files=`cd ${abs_source_dir}/${rel_source_subdir}; echo *.h | sed -e 's|[*].h|NONE|'`\n+      case $code in\n+\tALL)\n+\t  # The 'sed' is in case the *.h matches nothing, which yields \"*.h\"\n+\t  # which would then get re-globbed in the current directory.  Sigh.\n+\t  rel_source_files=`cd ${abs_source_dir}/${rel_source_subdir}; echo *.h | sed -e 's|[*].h|NONE|'`\n+\t  ;;\n+\n+\tSTD)\n+\t  files_to_check=\"$std_files\"\n+\t  rel_source_files=\"\"\n+\n+\t  # Also process files #included by the $std_files.\n+\t  while [ -n \"${files_to_check}\" ]\n+\t  do\n+\t    new_files_to_check=\"\"\n+\t    for file in $files_to_check ; do\n+\t      case \" $rel_source_files \" in\n+\t        *\" ${file} \"*)\n+\t\t  # Already seen $file; nothing to do\n+\t\t  ;;\n+\t\t*)\n+\t          new_files_to_check=\"$new_files_to_check `sed -n \\\n+\t\t\t-e 's@\t@ @g' \\\n+\t\t\t-e 's@^ *# *include *<\\([^>]*\\)>.*$@\\1@p' \\\n+\t\t\t-e 's@^ *# *include *\\\"\\([^\\\"]*\\)\\\".*$@\\1@p' \\\n+\t\t\t<$src_dir_std/$file`\"\n+\t          rel_source_files=\"$rel_source_files $file\"\n+\t\t  ;;\n+\t      esac\n+\t    done\n+\t    files_to_check=\"$new_files_to_check\"\n+\t  done\n+\t  rel_source_files=\"$rel_source_files\"\n+\t  ;;\n+      esac\n \n       for filename in $rel_source_files ; do\n \trel_source_file=${rel_source_prefix}${filename}\n@@ -169,7 +221,6 @@ if [ `echo $* | wc -w` != 0 ] ; then\n \telif test -f $abs_target_file -a -n \"$done_dirs\" \\\n \t  && grep \"$rel_source_file\" fixproto.list >/dev/null\n \tthen true\n-#\t  echo $abs_target_file exists, $abs_source_file is ignored\n \telse\n \t  # echo doing $rel_source_file from $abs_source_dir\n \t  required_list=\n@@ -246,11 +297,7 @@ if [ `echo $* | wc -w` != 0 ] ; then\n \t  done\n \t  if ${CPP} -D__STDC__ -D__cplusplus -D_POSIX_SOURCE $include_path fixtmp.c >fixtmp.i 2>/dev/null\n \t  then\n-\t    cat $abs_source_file >fixtmp.c\n-#\t    echo Doing: \"$original_dir/scan-decls <fixtmp.i | $original_dir/patch-header $rel_source_file fixtmp.c $abs_target_file \\\"$required_list\\\"\"\n-\n-\t    $original_dir/scan-decls <fixtmp.i | \\\n-\t     $original_dir/patch-header $rel_source_file fixtmp.c $abs_target_file \"$required_list\"\n+\t   $original_dir/patch-header $rel_source_file $abs_source_file $abs_target_file \"$required_list\" <fixtmp.i\n \t  else\n \t    echo \"${progname}: cpp could not parse ${abs_source_file} (ignored)\"\n \t  fi\n@@ -272,8 +319,7 @@ if [ `echo $* | wc -w` != 0 ] ; then\n       fi\n     fi\n     done_dirs=\"$done_dir $rel_source_dir\"\n-  done\n-fi\n+done\n \n # This might be more cleanly moved into the main loop, by adding\n # a <dummy> source directory at the end.  FIXME!"}]}