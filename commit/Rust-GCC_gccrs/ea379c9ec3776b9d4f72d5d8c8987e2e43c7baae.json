{"sha": "ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzNzljOWVjMzc3NmI5ZDRmNzJkNWQ4Yzg5ODdlMmU0M2M3YmFhZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-08-20T13:52:29Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-08-20T13:52:29Z"}, "message": "[debug] Fix handling of vlas in lto\n\nAtm, when running vla-1.c with -O0 -flto, we have:\n...\nFAIL: gcc.dg/guality/vla-1.c -O0 -flto -fuse-linker-plugin \\\n  -fno-fat-lto-objects line 17 sizeof (a) == 6\n...\n\nThe vla a[i + 1] in f1 is gimplified into:\n...\nf1 (int i)\n{\n  char a[0:D.1922] [value-expr: *a.0];\n  char[0:D.1922] * a.0;\n\n  D.1921 = i + 1;\n  D.1926 = (sizetype) D.1921;\n  a.0 = __builtin_alloca_with_align (D.1926, 8);\n...\n\nThe early debug info for the upper bound of the type of vla a that we stream\nout is:\n...\n  DIE    0: DW_TAG_subrange_type (0x7f85029a90f0)\n    DW_AT_upper_bound: location descriptor:\n      (0x7f85029a9230) DW_OP_GNU_variable_value die -> 0 (0x7f85029a94b0), 0\n  DIE    0: DW_TAG_variable (0x7f85029a94b0)\n    DW_AT_name: \"D.1922\"\n    DW_AT_type: die -> 0 (0x7f85029a3d70)\n    DW_AT_artificial: 1\n...\n\nand in ltrans we have for that same upper bound:\n...\n  DIE    0: DW_TAG_subrange_type (0x7f5183b57d70)\n    DW_AT_upper_bound: die -> 0 (0x7f5183b576e0)\n  DIE    0: DW_TAG_variable (0x7f5183b576e0)\n    DW_AT_name: \"D.4278\"\n    DW_AT_abstract_origin: die -> label: vla_1.c.6719312a + 193 (0x7f5183b57730)\n...\nwhere D.4278 has abstract origin D.1922.\n\nThe D.4278 die has no DW_AT_location, so when evaluting \"sizeof (a)\" in the\ndebugger, we can't find the information to get the value of D.4278, and the\ndebugger prints \"<optimized out>\".\n\nThis patch fixes that by either:\n- adding DW_AT_location to the referenced variable die, or\n- instead of using a ref for the upper bound, using an exprloc.\n\nWhen changing gcc.dg/guality/guality.exp to run the usual flto flavours\n\"-fno-use-linker-plugin -flto-partition=none\" and \"-fuse-linker-plugin\n-fno-fat-lto-objects\" in combination with O0, Og, O1, O2, O3 and Os, this patch\nfixes all (20) failures in vla-1.c, leaving only:\n...\nNo symbol \"i\" in current context.\nUNSUPPORTED: gcc.dg/guality/vla-1.c  -O3 -flto -fno-use-linker-plugin \\\n  -flto-partition=none line 17 i == 5\n'a' has unknown type; cast it to its declared type\nUNSUPPORTED: gcc.dg/guality/vla-1.c  -O3 -flto -fno-use-linker-plugin \\\n  -flto-partition=none line 17 sizeof (a) == 6\n...\n\nBootstrapped and reg-tested on x86_64.\n\n2018-08-20  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf2out.c (add_scalar_info): Don't add reference to existing die\n\tunless the referenced die describes the added property using\n\tDW_AT_location or DW_AT_const_value.  Fall back to exprloc case.\n\tOtherwise, add a DW_AT_location to the referenced die.\n\nFrom-SVN: r263660", "tree": {"sha": "882c2bbfc14766b577e83f5d42e243d53aa08211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/882c2bbfc14766b577e83f5d42e243d53aa08211"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fb558b154f795983ae6a9dd6478e18a2c846584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb558b154f795983ae6a9dd6478e18a2c846584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb558b154f795983ae6a9dd6478e18a2c846584"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "3dbcd1c82dbbfb28799a2e11e5e8d3c1deb4d19e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae", "patch": "@@ -1,3 +1,10 @@\n+2018-08-20  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf2out.c (add_scalar_info): Don't add reference to existing die\n+\tunless the referenced die describes the added property using\n+\tDW_AT_location or DW_AT_const_value.  Fall back to exprloc case.\n+\tOtherwise, add a DW_AT_location to the referenced die.\n+\n 2018-08-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/86994"}, {"sha": "b80c909e1fc6b05c35faa30a72e262a08cc7d65e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae", "patch": "@@ -20598,7 +20598,7 @@ static void\n add_scalar_info (dw_die_ref die, enum dwarf_attribute attr, tree value,\n \t\t int forms, struct loc_descr_context *context)\n {\n-  dw_die_ref context_die, decl_die;\n+  dw_die_ref context_die, decl_die = NULL;\n   dw_loc_list_ref list;\n   bool strip_conversions = true;\n   bool placeholder_seen = false;\n@@ -20675,7 +20675,7 @@ add_scalar_info (dw_die_ref die, enum dwarf_attribute attr, tree value,\n \n       if (decl != NULL_TREE)\n \t{\n-\t  dw_die_ref decl_die = lookup_decl_die (decl);\n+\t  decl_die = lookup_decl_die (decl);\n \n \t  /* ??? Can this happen, or should the variable have been bound\n \t     first?  Probably it can, since I imagine that we try to create\n@@ -20684,8 +20684,12 @@ add_scalar_info (dw_die_ref die, enum dwarf_attribute attr, tree value,\n \t     later parameter.  */\n \t  if (decl_die != NULL)\n \t    {\n-\t      add_AT_die_ref (die, attr, decl_die);\n-\t      return;\n+\t      if (get_AT (decl_die, DW_AT_location)\n+\t\t  || get_AT (decl_die, DW_AT_const_value))\n+\t\t{\n+\t\t  add_AT_die_ref (die, attr, decl_die);\n+\t\t  return;\n+\t\t}\n \t    }\n \t}\n     }\n@@ -20729,15 +20733,19 @@ add_scalar_info (dw_die_ref die, enum dwarf_attribute attr, tree value,\n       || placeholder_seen)\n     return;\n \n-  if (current_function_decl == 0)\n-    context_die = comp_unit_die ();\n-  else\n-    context_die = lookup_decl_die (current_function_decl);\n+  if (!decl_die)\n+    {\n+      if (current_function_decl == 0)\n+\tcontext_die = comp_unit_die ();\n+      else\n+\tcontext_die = lookup_decl_die (current_function_decl);\n+\n+      decl_die = new_die (DW_TAG_variable, context_die, value);\n+      add_AT_flag (decl_die, DW_AT_artificial, 1);\n+      add_type_attribute (decl_die, TREE_TYPE (value), TYPE_QUAL_CONST, false,\n+\t\t\t  context_die);\n+    }\n \n-  decl_die = new_die (DW_TAG_variable, context_die, value);\n-  add_AT_flag (decl_die, DW_AT_artificial, 1);\n-  add_type_attribute (decl_die, TREE_TYPE (value), TYPE_QUAL_CONST, false,\n-\t\t      context_die);\n   add_AT_location_description (decl_die, DW_AT_location, list);\n   add_AT_die_ref (die, attr, decl_die);\n }"}]}