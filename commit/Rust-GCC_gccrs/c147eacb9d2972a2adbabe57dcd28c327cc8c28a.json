{"sha": "c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0N2VhY2I5ZDI5NzJhMmFkYmFiZTU3ZGNkMjhjMzI3Y2M4YzI4YQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2007-02-14T00:29:52Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2007-02-14T00:29:52Z"}, "message": "config.gcc: Add arm*-*-uclinux-*eabi.\n\n2007-02-13  Paul Brook  <paul@codesourcery.com>\n\n\tgcc/\n\t* config.gcc: Add arm*-*-uclinux-*eabi.\n\t* config/arm/uclinux-elf.h (TARGET_OS_CPP_BUILTINS): Define.\n\t(SUBTARGET_EXTRA_LINK_SPEC): Define.\n\t(STARTFILE_SPEC, ENDFILE_SPEC): Remove broken -shared handling.\n\t(LINK_GCC_C_SEQUENCE_SPEC): Undef.\n\t(LINK_SPEC): Define.\n\t(LIB_SPEC): Define.\n\t* config/arm/arm.c (arm_override_options): Use r9 as EABI PIC\n\tregister.\n\t* config/arm/uclinux-eabi.h: New file.\n\t* config/arm/linux-eabi.h (WCHAR_TYPE): Remove.\n\t* config/arm/linux-gas.h (WCHAR_TYPE): Use unsigned long on AAPCS\n\tbased targets.\n\nFrom-SVN: r121902", "tree": {"sha": "d6fb6aef5ef320b0b983ada9172b0305d4a4669b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6fb6aef5ef320b0b983ada9172b0305d4a4669b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/comments", "author": null, "committer": null, "parents": [{"sha": "2f0fa07cd933449f0b1119b0ccabbd1410a59faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0fa07cd933449f0b1119b0ccabbd1410a59faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f0fa07cd933449f0b1119b0ccabbd1410a59faf"}], "stats": {"total": 165, "additions": 134, "deletions": 31}, "files": [{"sha": "647cff1daf76dfe6dd3637000a2e3a1daed1fe70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "patch": "@@ -1,3 +1,19 @@\n+2007-02-13  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config.gcc: Add arm*-*-uclinux-*eabi.\n+\t* config/arm/uclinux-elf.h (TARGET_OS_CPP_BUILTINS): Define.\n+\t(SUBTARGET_EXTRA_LINK_SPEC): Define.\n+\t(STARTFILE_SPEC, ENDFILE_SPEC): Remove broken -shared handling.\n+\t(LINK_GCC_C_SEQUENCE_SPEC): Undef.\n+\t(LINK_SPEC): Define.\n+\t(LIB_SPEC): Define.\n+\t* config/arm/arm.c (arm_override_options): Use r9 as EABI PIC\n+\tregister.\n+\t* config/arm/uclinux-eabi.h: New file.\n+\t* config/arm/linux-eabi.h (WCHAR_TYPE): Remove.\n+\t* config/arm/linux-gas.h (WCHAR_TYPE): Use unsigned long on AAPCS\n+\tbased targets.\n+\n 2007-02-13  Ian Lance Taylor  <iant@google.com>\n \n \t* common.opt: Add Wstrict-overflow and Wstrict-overflow=."}, {"sha": "877d25c18428a0433334746725253b5f3fb9ef33", "filename": "gcc/config.gcc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "patch": "@@ -731,8 +731,20 @@ arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \ttm_file=\"$tm_file arm/aout.h arm/arm.h\"\n \t;;\n arm*-*-uclinux*)\t\t# ARM ucLinux\n-\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/linux-gas.h arm/linux-elf.h arm/uclinux-elf.h\"\n+\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/linux-gas.h arm/uclinux-elf.h arm/uclinux-elf.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n+\tcase ${target} in\n+\tarm*-*-uclinux-*eabi)\n+\t    tm_file=\"$tm_file arm/bpabi.h arm/uclinux-eabi.h\"\n+\t    tmake_file=\"$tmake_file arm/t-bpabi\"\n+  \t    # The BPABI long long divmod functions return a 128-bit value in\n+\t    # registers r0-r3.  Correctly modeling that requires the use of\n+\t    # TImode.\n+\t    need_64bit_hwint=yes\n+\t    # The EABI requires the use of __cxa_atexit.\n+\t    default_use_cxa_atexit=yes\n+\tesac\n+\ttm_file=\"$tm_file arm/aout.h arm/arm.h\"\n \t;;\n arm*-*-ecos-elf)\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/ecos-elf.h\""}, {"sha": "78f6d729803b7265064212b89d35f10b64036959", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "patch": "@@ -1145,11 +1145,6 @@ arm_override_options (void)\n       && (TARGET_DEFAULT & MASK_APCS_FRAME))\n     warning (0, \"-g with -mno-apcs-frame may not give sensible debugging\");\n \n-  /* If stack checking is disabled, we can use r10 as the PIC register,\n-     which keeps r9 available.  */\n-  if (flag_pic && TARGET_SINGLE_PIC_BASE)\n-    arm_pic_register = TARGET_APCS_STACK ? 9 : 10;\n-\n   if (TARGET_APCS_FLOAT)\n     warning (0, \"passing floating point arguments in fp regs not yet supported\");\n \n@@ -1343,6 +1338,11 @@ arm_override_options (void)\n \t\t ARM_DOUBLEWORD_ALIGN ? \"8, 32 or 64\": \"8 or 32\");\n     }\n \n+  /* If stack checking is disabled, we can use r10 as the PIC register,\n+     which keeps r9 available.  The EABI specifies r9 as the PIC register.  */\n+  if (flag_pic && TARGET_SINGLE_PIC_BASE)\n+    arm_pic_register = (TARGET_APCS_STACK || TARGET_AAPCS_BASED) ? 9 : 10;\n+\n   if (arm_pic_register_string != NULL)\n     {\n       int pic_register = decode_reg_name (arm_pic_register_string);"}, {"sha": "7215c0e94041ce54e31c8a0da07bd0eb42bd6677", "filename": "gcc/config/arm/linux-eabi.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-eabi.h?ref=c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "patch": "@@ -64,11 +64,6 @@\n    do not use -lfloat.  */\n #undef LIBGCC_SPEC\n \n-/* Use the AAPCS type for wchar_t, or the previous Linux default for\n-   non-AAPCS.  */\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE (TARGET_AAPCS_BASED ? \"unsigned int\" : \"long int\")\n-\n /* Clear the instruction cache from `beg' to `end'.  This makes an\n    inline system call to SYS_cacheflush.  It is modified to work with\n    both the original and EABI-only syscall interfaces.  */"}, {"sha": "715d2a575a3fce715fb02398bbd25e69d0190c15", "filename": "gcc/config/arm/linux-gas.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Flinux-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Flinux-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-gas.h?ref=c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "patch": "@@ -36,8 +36,10 @@\n #undef  PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n \n-#undef  WCHAR_TYPE\n-#define WCHAR_TYPE \"long int\"\n+/* Use the AAPCS type for wchar_t, or the previous Linux default for\n+   non-AAPCS.  */\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE (TARGET_AAPCS_BASED ? \"unsigned int\" : \"long int\")\n \n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD"}, {"sha": "3806bf9bac5223f014c4aed40e2c3e4b2791d725", "filename": "gcc/config/arm/uclinux-eabi.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h?ref=c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "patch": "@@ -0,0 +1,66 @@\n+/* Definitions for ARM EABI ucLinux\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+   Contributed by Paul Brook <paul@codesourcery.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 2, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02110-1301, USA.  */\n+\n+/* Override settings that are different to the uclinux-elf or\n+   bpabi defaults.  */\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_SINGLE_PIC_BASE | MASK_INTERWORK)\n+\n+/* On EABI GNU/Linux, we want both the BPABI builtins and the\n+   GNU/Linux builtins.  */\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS() \t\t\\\n+  do \t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      TARGET_BPABI_CPP_BUILTINS();\t\t\\\n+      builtin_define (\"__uClinux__\");\t\t\\\n+      builtin_define (\"__gnu_linux__\");         \\\n+      builtin_define_std (\"linux\");             \\\n+      builtin_define_std (\"unix\");              \\\n+      builtin_assert (\"system=linux\");          \\\n+      builtin_assert (\"system=unix\");           \\\n+      builtin_assert (\"system=posix\");          \\\n+    }\t\t\t\t\t\t\\\n+  while (false)\n+\n+#undef SUBTARGET_EXTRA_LINK_SPEC\n+#define SUBTARGET_EXTRA_LINK_SPEC \" -m armelf_linux_eabi\"\n+\n+/* We default to the \"aapcs-linux\" ABI so that enums are int-sized by\n+   default.  */\n+#undef ARM_DEFAULT_ABI\n+#define ARM_DEFAULT_ABI ARM_ABI_AAPCS_LINUX\n+\n+/* Clear the instruction cache from `beg' to `end'.  This makes an\n+   inline system call to SYS_cacheflush.  */\n+#undef CLEAR_INSN_CACHE\n+#define CLEAR_INSN_CACHE(BEG, END)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register unsigned long _beg __asm (\"a1\") = (unsigned long) (BEG);\t\\\n+  register unsigned long _end __asm (\"a2\") = (unsigned long) (END);\t\\\n+  register unsigned long _flg __asm (\"a3\") = 0;\t\t\t\t\\\n+  register unsigned long _scno __asm (\"r7\") = 0xf0002;\t\t\t\\\n+  __asm __volatile (\"swi 0x0\t\t@ sys_cacheflush\"\t\t\\\n+\t\t    : \"=r\" (_beg)\t\t\t\t\t\\\n+\t\t    : \"0\" (_beg), \"r\" (_end), \"r\" (_flg), \"r\" (_scno));\t\\\n+}\n+"}, {"sha": "d6dc4f60bdfbd5eff7edf56409dd2df874d3dc87", "filename": "gcc/config/arm/uclinux-elf.h", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c147eacb9d2972a2adbabe57dcd28c327cc8c28a/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=c147eacb9d2972a2adbabe57dcd28c327cc8c28a", "patch": "@@ -32,43 +32,55 @@\n /* NOTE: The remaining definitions in this file are needed because uclinux\n    does not use config/linux.h.  */\n \n+/* Add GNU/Linux builtins.  */\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS() \t\t\\\n+  do \t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define (\"__uClinux__\");\t\t\\\n+      builtin_define (\"__gnu_linux__\");         \\\n+      builtin_define_std (\"linux\");             \\\n+      builtin_define_std (\"unix\");              \\\n+      builtin_assert (\"system=linux\");          \\\n+      builtin_assert (\"system=unix\");           \\\n+      builtin_assert (\"system=posix\");          \\\n+    }\t\t\t\t\t\t\\\n+  while (false)\n+\n /* Do not assume anything about header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n /* The GNU C++ standard library requires that these macros be defined.  */\n #undef CPLUSPLUS_CPP_SPEC\n #define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n \n-/* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n-   the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n-   provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main'.  */\n+#undef SUBTARGET_EXTRA_LINK_SPEC\n+#define SUBTARGET_EXTRA_LINK_SPEC \" -m armelf_linux\"\n \n+/* Now we define the strings used to build the spec file.  */\n #undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n-\t\t       %{!p:%{profile:gcrt1.o%s} \\\n-\t\t\t %{!profile:crt1.o%s}}}} \\\n-   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n-\n-/* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n-   the GNU/Linux magical crtend.o file (see crtstuff.c) which\n-   provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main', followed by a normal\n-   GNU/Linux \"finalizer\" file, `crtn.o'.  */\n+#define STARTFILE_SPEC\t\"crt1%O%s crti%O%s crtbegin%O%s\"\n \n #undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+#define ENDFILE_SPEC\t\"crtend%O%s crtn%O%s\"\n \n #undef  CC1_SPEC\n #define CC1_SPEC \"%{profile:-p}\"\n \n+#undef LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \\\n   \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\"\n \n /* Use --as-needed -lgcc_s for eh support.  */\n #ifdef HAVE_LD_AS_NEEDED\n #define USE_LD_AS_NEEDED 1\n #endif\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} -X -elf2flt\"\n+\n+#undef  LIB_SPEC\n+#define LIB_SPEC \\\n+  \"%{pthread:-lpthread} \\\n+   %{shared:-lc} \\\n+   %{!shared:%{profile:-lc_p}%{!profile:-lc}}\""}]}