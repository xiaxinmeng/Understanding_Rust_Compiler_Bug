{"sha": "fecd6201e6051a32f6645dcb3138526a2e6b0100", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVjZDYyMDFlNjA1MWEzMmY2NjQ1ZGNiMzEzODUyNmEyZTZiMDEwMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-05-11T17:03:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-11T17:03:02Z"}, "message": "Makefile.in: Exterminate all references to assert.h.\n\n\t* Makefile.in: Exterminate all references to assert.h.\n\t* cross-make: Likewise.\n\t* assert.h: Delete.\n\t* configure.in: Correct commentary.\n\t* configure: Regenerate.\n\t* po/POTFILES.in: Remove assert.h.\n\n\t* libgcc-std.ver, libgcc2.c, libgcc2.h, sys-protos.h:\n\tRemove __eprintf.\n\n\t* config/t-freebsd, config/t-linux, config/t-linux-aout,\n\tconfig/t-netbsd, config/t-rtems, config/x-linux,\n\tconfig/i386/t-beos, config/mcore/t-mcore, config/mcore/t-mcore-pe:\n\tNo need to override INSTALL_ASSERT_H.\n\n\t* fixinc/fixinc.dgux, fixinc/fixinc.interix, fixinc/fixinc.ptx,\n\tfixinc/fixinc.svr4, fixinc/fixinc.winnt, fixinc/fixinc.wrap,\n\tfixinc/fixincl.sh: Don't install assert.h into objdir/include.\n\nFrom-SVN: r41972", "tree": {"sha": "e90d5520b9c1823e81bce2ff5b7c937da9575bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e90d5520b9c1823e81bce2ff5b7c937da9575bc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fecd6201e6051a32f6645dcb3138526a2e6b0100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fecd6201e6051a32f6645dcb3138526a2e6b0100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fecd6201e6051a32f6645dcb3138526a2e6b0100", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fecd6201e6051a32f6645dcb3138526a2e6b0100/comments", "author": null, "committer": null, "parents": [{"sha": "e7288e1888fc8dba0c8aa8376c30014e1012f6ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7288e1888fc8dba0c8aa8376c30014e1012f6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7288e1888fc8dba0c8aa8376c30014e1012f6ad"}], "stats": {"total": 274, "additions": 53, "deletions": 221}, "files": [{"sha": "98147208517a5ab528f9fc7a42cc4288a0392437", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1,3 +1,23 @@\n+2001-05-11  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* Makefile.in: Exterminate all references to assert.h.\n+\t* cross-make: Likewise.\n+\t* assert.h: Delete.\n+\t* configure.in: Correct commentary.\n+\t* configure: Regenerate.\n+\n+\t* libgcc-std.ver, libgcc2.c, libgcc2.h, sys-protos.h:\n+\tRemove __eprintf.\n+\n+\t* config/t-freebsd, config/t-linux, config/t-linux-aout,\n+\tconfig/t-netbsd, config/t-rtems, config/x-linux,\n+\tconfig/i386/t-beos, config/mcore/t-mcore, config/mcore/t-mcore-pe:\n+\tNo need to override INSTALL_ASSERT_H.\n+\n+\t* fixinc/fixinc.dgux, fixinc/fixinc.interix, fixinc/fixinc.ptx,\n+\tfixinc/fixinc.svr4, fixinc/fixinc.winnt, fixinc/fixinc.wrap,\n+\tfixinc/fixincl.sh: Don't install assert.h into objdir/include.\n+\n 2001-05-11  Graham Stott  <grahams@redhat.com>\n \n \t* combine.c (simplify_comparison): Fix typo."}, {"sha": "eb720383c6f287f6c8a742508456f84fc4689321", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -172,10 +172,6 @@ USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h \\\n     $(srcdir)/ginclude/stdbool.h $(srcdir)/ginclude/iso646.h \\\n     $(EXTRA_HEADERS) $(LANG_EXTRA_HEADERS)\n \n-# Target to use whe installing assert.h.  Some systems may\n-# want to set this empty.\n-INSTALL_ASSERT_H = install-assert-h\n-\n # The GCC to use for compiling libgcc.a, enquire, and libgcc1-test.\n # Usually the one we just built.\n # Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).\n@@ -320,9 +316,6 @@ build_tooldir = $(exec_prefix)/$(target_alias)\n gcc_gxx_include_dir = @gcc_gxx_include_dir@\n # Directory to search for site-specific includes.\n includedir = $(local_prefix)/include\n-# assertdir is overridden in cross-make.\n-# (But this currently agrees with what is in cross-make.)\n-assertdir = $(gcc_tooldir)/include\n # where the info files go\n infodir = @infodir@\n # Where cpp should go besides $prefix/bin if necessary\n@@ -2130,8 +2123,8 @@ stmp-fixinc: fixinc.sh gsyslimits.h\n \trm -rf include; mkdir include\n \t-chmod a+rx include\n \t(TARGET_MACHINE='$(target)'; srcdir=`cd $(srcdir); pwd`; \\\n-\tINSTALL_ASSERT_H='$(INSTALL_ASSERT_H)'; SHELL='$(SHELL)' ;\\\n-\texport TARGET_MACHINE srcdir INSTALL_ASSERT_H SHELL ; \\\n+\tSHELL='$(SHELL)' ;\\\n+\texport TARGET_MACHINE srcdir SHELL ; \\\n \t$(SHELL) ./fixinc.sh `pwd`/include $(SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS); \\\n \trm -f include/syslimits.h; \\\n \tif [ -f include/limits.h ]; then \\\n@@ -2510,7 +2503,6 @@ installdirs:\n \t-if [ -d $(bindir) ] ; then true ; else mkdir $(bindir) ; chmod a+rx $(bindir) ; fi\n \t-if [ -d $(includedir) ] ; then true ; else mkdir $(includedir) ; chmod a+rx $(includedir) ; fi\n \t-if [ -d $(gcc_tooldir) ] ; then true ; else mkdir $(gcc_tooldir) ; chmod a+rx $(gcc_tooldir) ; fi\n-\t-if [ -d $(assertdir) ] ; then true ; else mkdir $(assertdir) ; chmod a+rx $(assertdir) ; fi\n \t-if [ -d $(infodir) ] ; then true ; else mkdir $(infodir) ; chmod a+rx $(infodir) ; fi\n \t-if [ -d $(slibdir) ] ; then true ; else mkdir $(slibdir) ; chmod a+rx $(slibdir) ; fi\n # We don't use mkdir -p to create the parents of man1dir,\n@@ -2694,7 +2686,7 @@ install-multilib: stmp-multilib installdirs\n \t  -f libgcc.mk install\n \n # Install all the header files built in the include subdirectory.\n-install-headers: $(INSTALL_HEADERS_DIR) $(INSTALL_ASSERT_H)\n+install-headers: $(INSTALL_HEADERS_DIR)\n # Fix symlinks to absolute paths in the installed include directory to\n # point to the installed directory, not the build directory.\n # Don't need to use LN_S here since we really do need ln -s and no substitutes.\n@@ -2734,29 +2726,6 @@ install-headers-cpio: stmp-int-hdrs $(STMP_FIXPROTO) install-include-dir\n \tcd `pwd`/include ; \\\n \tfind . -print | cpio -pdum $(libsubdir)/include\n \n-# Put assert.h where it won't override GNU libc's assert.h.\n-# It goes in a dir that is searched after GNU libc's headers;\n-# thus, the following conditionals are no longer needed.\n-# But it's not worth deleting them now.\n-## Don't replace the assert.h already there if it is not from GCC.\n-## This code would be simpler if it tested for -f ... && ! grep ...\n-## but supposedly the ! operator is missing in sh on some systems.\n-install-assert-h: assert.h installdirs\n-\tif [ -f $(assertdir)/assert.h ]; \\\n-\tthen \\\n-\t  if grep \"__eprintf\" $(assertdir)/assert.h >/dev/null; \\\n-\t    then \\\n-\t    rm -f $(assertdir)/assert.h; \\\n-\t    $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h; \\\n-\t    chmod a-x $(assertdir)/assert.h; \\\n-\t  else true; \\\n-\t  fi; \\\n-\telse \\\n-\t  rm -f $(assertdir)/assert.h; \\\n-\t  $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h; \\\n-\t  chmod a-x $(assertdir)/assert.h; \\\n-\tfi\n-\n # Use this target to install the program `collect2' under the name `collect2'.\n install-collect2: collect2 installdirs\n \t$(INSTALL_PROGRAM) collect2$(exeext) $(libsubdir)/collect2$(exeext)"}, {"sha": "ecc02ee99912c6b270bf68b28b44820f268b2521", "filename": "gcc/assert.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7288e1888fc8dba0c8aa8376c30014e1012f6ad/gcc%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7288e1888fc8dba0c8aa8376c30014e1012f6ad/gcc%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fassert.h?ref=e7288e1888fc8dba0c8aa8376c30014e1012f6ad", "patch": "@@ -1,54 +0,0 @@\n-/* Allow this file to be included multiple times\n-   with different settings of NDEBUG.  */\n-#undef assert\n-#undef __assert\n-\n-#ifdef NDEBUG\n-#define assert(ignore) ((void) 0)\n-#else\n-\n-#ifndef __GNUC__\n-\n-#define assert(expression)  \\\n-  ((void) ((expression) ? 0 : __assert (expression, __FILE__, __LINE__)))\n-\n-#define __assert(expression, file, lineno)  \\\n-  (printf (\"%s:%u: failed assertion\\n\", file, lineno),\t\\\n-   abort (), 0)\n-\n-#else\n-\n-#if defined(__STDC__) || defined (__cplusplus)\n-\n-/* Defined in libgcc.a */\n-#ifdef __cplusplus\n-extern \"C\" {\n-extern void __eprintf (const char *, const char *, unsigned, const char *)\n-    __attribute__ ((noreturn));\n-}\n-#else\n-extern void __eprintf (const char *, const char *, unsigned, const char *)\n-    __attribute__ ((noreturn));\n-#endif\n-\n-#define assert(expression)  \\\n-  ((void) ((expression) ? 0 : __assert (#expression, __FILE__, __LINE__)))\n-\n-#define __assert(expression, file, line)  \\\n-  (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t\t\\\n-\t      file, line, expression), 0)\n-\n-#else /* no __STDC__ and not C++; i.e. -traditional.  */\n-\n-extern void __eprintf () __attribute__ ((noreturn)); /* Defined in libgcc.a */\n-\n-#define assert(expression)  \\\n-  ((void) ((expression) ? 0 : __assert (expression, __FILE__, __LINE__)))\n-\n-#define __assert(expression, file, lineno)  \\\n-  (__eprintf (\"%s:%u: failed assertion `%s'\\n\",\t\t\\\n-\t      file, lineno, \"expression\"), 0)\n-\n-#endif /* no __STDC__ and not C++; i.e. -traditional.  */\n-#endif /* no __GNU__; i.e., /bin/cc.  */\n-#endif"}, {"sha": "f63e2d4e1b571d61cd739201a21e6639d7fe91b1", "filename": "gcc/config/i386/t-beos", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Fi386%2Ft-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Fi386%2Ft-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-beos?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -6,6 +6,3 @@ CROSS_LIBGCC1 =\n # we are most likely to want to apply any fixes to.\n SYSTEM_HEADER_DIR = /boot/develop/headers/posix\n CROSS_SYSTEM_HEADER_DIR = $(tooldir)/sys-include/posix\n-\n-# Use the system assert.h\n-INSTALL_ASSERT_H ="}, {"sha": "de526942f96314d91eea7dcfb11edecdf46ade3a", "filename": "gcc/config/mcore/t-mcore", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Fmcore%2Ft-mcore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Fmcore%2Ft-mcore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Ft-mcore?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -38,9 +38,6 @@ TARGET_LIBGCC2_CFLAGS=-O3 -DNO_FLOATLIB_FIXUNSDFSI #-msifilter\n # We have values for float.h.\n CROSS_FLOAT_H = $(srcdir)/config/mcore/gfloat.h\n \n-# let the library provider supply an <assert.h>\n-INSTALL_ASSERT_H=\n-\n # If support for -m4align is ever re-enabled then comment out the\n # following line and uncomment the mutlilib lines below.\n "}, {"sha": "c055a7113997371f42e2f9c5240e41a41879d41e", "filename": "gcc/config/mcore/t-mcore-pe", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -29,9 +29,6 @@ TARGET_LIBGCC2_CFLAGS=-O3 -DNO_FLOATLIB_FIXUNSDFSI #-msifilter\n # We have values for float.h.\n CROSS_FLOAT_H = $(srcdir)/config/mcore/gfloat.h\n \n-# let the library provider supply an <assert.h>\n-INSTALL_ASSERT_H=\n-\n MULTILIB_OPTIONS     = mbig-endian/mlittle-endian m210/m340\n MULTILIB_DIRNAMES    = big little m210 m340\n MULTILIB_MATCHES     = "}, {"sha": "1360ea0e8113ba9bc92d2d6beb8970e94095e251", "filename": "gcc/config/t-freebsd", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-freebsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-freebsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-freebsd?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1,8 +1,5 @@\n # Don't run fixproto\n STMP_FIXPROTO =\n \n-# Don't install \"assert.h\" in gcc.  We use the system one.\n-INSTALL_ASSERT_H =\n-\n # Compile crtbeginS.o and crtendS.o with pic.\n CRTSTUFF_T_CFLAGS_S = -fPIC"}, {"sha": "0becd19f8e8545b37a8ab1d43ef3561588d7b34c", "filename": "gcc/config/t-linux", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1,9 +1,6 @@\n # Don't run fixproto\n STMP_FIXPROTO =\n \n-# Don't install \"assert.h\" in gcc. We use the one in glibc.\n-INSTALL_ASSERT_H =\n-\n # Compile crtbeginS.o and crtendS.o with pic.\n CRTSTUFF_T_CFLAGS_S = -fPIC\n # Compile libgcc2.a with pic."}, {"sha": "d08bcff98677a29ebba1ae61bc8aa193fde887bf", "filename": "gcc/config/t-linux-aout", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-linux-aout", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-linux-aout", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux-aout?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1,9 +1,6 @@\n # Don't run fixproto\n STMP_FIXPROTO =\n \n-# Don't install \"assert.h\" in gcc. We use the one in glibc.\n-INSTALL_ASSERT_H =\n-\n # Do not build libgcc1. Let gcc generate those functions. The GNU/Linux\n # C library can handle them.\n LIBGCC1 = "}, {"sha": "f64fe29b6d1fb0b0b36fa1a9cae3d4240a04c014", "filename": "gcc/config/t-netbsd", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-netbsd?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -4,6 +4,3 @@ LIBGCC1_TEST=\n \n # Don't run fixproto\n STMP_FIXPROTO =\n-\n-# Don't install \"assert.h\" in gcc. We use the one in glibc.\n-INSTALL_ASSERT_H ="}, {"sha": "c403ff85ddaffb9b190d3c44e83a2a45c800e38f", "filename": "gcc/config/t-rtems", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-rtems", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Ft-rtems", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-rtems?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1,9 +1,6 @@\n # RTEMS uses newlib which does not require prototype fixing\n STMP_FIXPROTO =\n \n-# Don't install \"assert.h\" in gcc.  RTEMS uses the one in newlib.\n-INSTALL_ASSERT_H =\n-\n # RTEMS always has limits.h.\n LIMITS_H_TEST = true\n "}, {"sha": "d284b3e7e413c2e4a7f5d3b9a3592bf88e81cdc2", "filename": "gcc/config/x-linux", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Fx-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfig%2Fx-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fx-linux?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1,5 +1,2 @@\n # Don't run fixproto\n STMP_FIXPROTO =\n-\n-# Don't install \"assert.h\" in gcc. We use the one in glibc.\n-INSTALL_ASSERT_H ="}, {"sha": "9ce92cf1b414b12a176ca59d9030834edf040457", "filename": "gcc/configure", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -6471,10 +6471,9 @@ fi\n # have its own set of headers then define\n # inhibit_libc\n \n-# If this is using newlib, then define inhibit_libc in\n-# LIBGCC2_CFLAGS.  This will cause __eprintf to be left out of\n-# libgcc.a, but that's OK because newlib should have its own version of\n-# assert.h.\n+# If this is using newlib, then define inhibit_libc in LIBGCC2_CFLAGS.\n+# This prevents libgcc2 from containing any code which requires libc\n+# support.\n inhibit_libc=\n if test x$host != x$target && test x$with_headers = x; then\n        inhibit_libc=-Dinhibit_libc\n@@ -6544,7 +6543,7 @@ fi\n \n # Figure out what assembler we will be using.\n echo $ac_n \"checking what assembler to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6548: checking what assembler to use\" >&5\n+echo \"configure:6547: checking what assembler to use\" >&5\n gcc_cv_as=\n gcc_cv_gas_major_version=\n gcc_cv_gas_minor_version=\n@@ -6629,7 +6628,7 @@ fi\n \n # Figure out what nm we will be using.\n echo $ac_n \"checking what nm to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6633: checking what nm to use\" >&5\n+echo \"configure:6632: checking what nm to use\" >&5\n if test -x nm$host_exeext; then\n \tgcc_cv_nm=./nm$host_exeext\n elif test x$host = x$target; then\n@@ -6640,7 +6639,7 @@ echo \"$ac_t\"\"$gcc_cv_nm\" 1>&6\n \n # Figure out what assembler alignment features are present.\n echo $ac_n \"checking assembler alignment features\"\"... $ac_c\" 1>&6\n-echo \"configure:6644: checking assembler alignment features\" >&5\n+echo \"configure:6643: checking assembler alignment features\" >&5\n gcc_cv_as_alignment_features=none\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n \t# Gas version 2.6 and later support for .balign and .p2align.\n@@ -6688,7 +6687,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n-echo \"configure:6692: checking assembler subsection support\" >&5\n+echo \"configure:6691: checking assembler subsection support\" >&5\n gcc_cv_as_subsections=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -6728,7 +6727,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n \n echo $ac_n \"checking assembler weak support\"\"... $ac_c\" 1>&6\n-echo \"configure:6732: checking assembler weak support\" >&5\n+echo \"configure:6731: checking assembler weak support\" >&5\n gcc_cv_as_weak=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 2 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -6751,7 +6750,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_weak\" 1>&6\n \n echo $ac_n \"checking assembler hidden support\"\"... $ac_c\" 1>&6\n-echo \"configure:6755: checking assembler hidden support\" >&5\n+echo \"configure:6754: checking assembler hidden support\" >&5\n gcc_cv_as_hidden=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 10 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -6775,7 +6774,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_hidden\" 1>&6\n \n echo $ac_n \"checking assembler leb128 support\"\"... $ac_c\" 1>&6\n-echo \"configure:6779: checking assembler leb128 support\" >&5\n+echo \"configure:6778: checking assembler leb128 support\" >&5\n gcc_cv_as_leb128=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 11 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -6822,7 +6821,7 @@ echo \"$ac_t\"\"$gcc_cv_as_leb128\" 1>&6\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:6826: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:6825: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6850,7 +6849,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:6854: checking assembler supports -relax\" >&5\n+echo \"configure:6853: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6880,7 +6879,7 @@ EOF\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:6884: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:6883: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6925,7 +6924,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:6929: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:6928: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6964,7 +6963,7 @@ EOF\n \n   i[34567]86-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:6968: checking assembler instructions\" >&5\n+echo \"configure:6967: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -6993,7 +6992,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:6997: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:6996: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7178,7 +7177,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7182: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7181: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "84c48e090f914044d1ce5bc227f35409dbdd62b3", "filename": "gcc/configure.in", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1075,10 +1075,9 @@ fi\n # have its own set of headers then define\n # inhibit_libc\n \n-# If this is using newlib, then define inhibit_libc in\n-# LIBGCC2_CFLAGS.  This will cause __eprintf to be left out of\n-# libgcc.a, but that's OK because newlib should have its own version of\n-# assert.h.\n+# If this is using newlib, then define inhibit_libc in LIBGCC2_CFLAGS.\n+# This prevents libgcc2 from containing any code which requires libc\n+# support.\n inhibit_libc=\n if [test x$host != x$target] && [test x$with_headers = x]; then\n        inhibit_libc=-Dinhibit_libc"}, {"sha": "241edba8ad0a2a2b9850919d747e7d056d494a29", "filename": "gcc/cross-make", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fcross-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fcross-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcross-make?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -9,6 +9,3 @@ SYSTEM_HEADER_DIR = $(CROSS_SYSTEM_HEADER_DIR)\n \n # Don't try to compile the things we can't compile.\n ALL = all.cross\n-\n-# Don't install assert.h in /usr/local/include.\n-assertdir = $(tooldir)/include"}, {"sha": "d73d4e85a006bf4e0fa374498ad276e97c31dc7d", "filename": "gcc/fixinc/fixinc.dgux", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.dgux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.dgux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.dgux?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -221,12 +221,4 @@ fi\n \n done\n \n-if [ x${INSTALL_ASSERT_H} != x ]\n-then\n-  cd ${ORIG_DIR}\n-  rm -f include/assert.h\n-  cp ${srcdir}/assert.h include/assert.h || exit 1\n-  chmod a+r include/assert.h\n-fi\n-\n exit 0"}, {"sha": "d0fe4cfba788fd9841e2f14956e1b967613f248a", "filename": "gcc/fixinc/fixinc.interix", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.interix?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -162,12 +162,4 @@ done\n \n done # for include directory list\n \n-if [ x${INSTALL_ASSERT_H} != x ]\n-then\n-  cd ${ORIG_DIR}\n-  rm -f include/assert.h\n-  cp ${srcdir}/assert.h include/assert.h || exit 1\n-  chmod a+r include/assert.h\n-fi\n-\n exit 0"}, {"sha": "b4f92689981ef7ca1ab943ce1c043d8d7ec5df52", "filename": "gcc/fixinc/fixinc.ptx", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.ptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.ptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.ptx?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -263,12 +263,4 @@ fi\n \n done\n \n-if [ x${INSTALL_ASSERT_H} != x ]\n-then\n-  cd ${ORIG_DIR}\n-  rm -f include/assert.h\n-  cp ${srcdir}/assert.h include/assert.h || exit 1\n-  chmod a+r include/assert.h\n-fi\n-\n exit 0"}, {"sha": "4bb69fc523a621eb254ea801d7b2749ae390729e", "filename": "gcc/fixinc/fixinc.svr4", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.svr4?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1806,12 +1806,4 @@ chmod a+r ${LIB}/sys/byteorder.h\n \n done\n \n-if [ x${INSTALL_ASSERT_H} != x ]\n-then\n-  cd ${ORIG_DIR}\n-  rm -f include/assert.h\n-  cp ${srcdir}/assert.h include/assert.h || exit 1\n-  chmod a+r include/assert.h\n-fi\n-\n exit 0"}, {"sha": "8fd6e53331f811d21e646b7938723ded48edf8f9", "filename": "gcc/fixinc/fixinc.winnt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.winnt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.winnt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.winnt?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -229,12 +229,4 @@ for file in $files; do\n   rmdir $LIB/$file > NUL 2>&1\n done\n \n-if [ x${INSTALL_ASSERT_H} != x ]\n-then\n-  cd ${ORIG_DIR}\n-  rm -f include/assert.h\n-  cp ${srcdir}/assert.h include/assert.h || exit 1\n-  chmod a+r include/assert.h\n-fi\n-\n exit 0"}, {"sha": "e242d5aa5cf3a10d3393daf2a05a9071620d0978", "filename": "gcc/fixinc/fixinc.wrap", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.wrap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixinc.wrap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.wrap?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -133,12 +133,4 @@ fi\n \n done\n \n-if [ x${INSTALL_ASSERT_H} != x ]\n-then\n-  cd ${ORIG_DIR}\n-  rm -f include/assert.h\n-  cp ${srcdir}/assert.h include/assert.h || exit 1\n-  chmod a+r include/assert.h\n-fi\n-\n exit 0"}, {"sha": "fa2982f9d6335fd27cec1b97b1b57809ba9917d2", "filename": "gcc/fixinc/fixincl.sh", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixincl.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Ffixinc%2Ffixincl.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.sh?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -470,11 +470,3 @@ then echo fixincludes is done ; fi\n done\n #\n # # # # # # # # # # # # # # # # # # # # #\n-\n-if [ x${INSTALL_ASSERT_H} != x ] && [ -f ${srcdir}/assert.h ]\n-then\n-  cd $ORIGDIR\n-  rm -f include/assert.h\n-  cp ${srcdir}/assert.h include/assert.h || exit 1\n-  chmod a+r include/assert.h\n-fi"}, {"sha": "43e6fcf9c691341a98c9ba4a60c46747e10be955", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -107,7 +107,6 @@ GCC_3.0 {\n \n   # ??? Symbols that perhaps unused should be nuked.\n   __clear_cache\n-  __eprintf\n   __gcc_bcmp\n \n   # EH symbols"}, {"sha": "b0daa70d9e1507af35dd6c919fadb417b97129ec", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1237,24 +1237,6 @@ __gcc_bcmp (const unsigned char *s1, const unsigned char *s2, size_t size)\n   return 0;\n }\n \n-#endif\n-\f\n-#ifdef L_eprintf\n-#ifndef inhibit_libc\n-\n-#undef NULL /* Avoid errors if stdio.h and our stddef.h mismatch.  */\n-#include <stdio.h>\n-/* This is used by the `assert' macro.  */\n-void\n-__eprintf (const char *string, const char *expression,\n-\t   unsigned int line, const char *filename)\n-{\n-  fprintf (stderr, string, expression, line, filename);\n-  fflush (stderr);\n-  abort ();\n-}\n-\n-#endif\n #endif\n \n #ifdef L_bb"}, {"sha": "ce85398769738cacb2e5078f49482f4c369c242d", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -24,8 +24,6 @@ Boston, MA 02111-1307, USA.  */\n \n extern int __gcc_bcmp (const unsigned char *, const unsigned char *, size_t);\n extern void __clear_cache (char *, char *);\n-extern void __eprintf (const char *, const char *, unsigned int, const char *)\n-  __attribute__ ((__noreturn__));\n \n struct bb;\n extern void __bb_exit_func (void);"}, {"sha": "e436c13f8e976e7b9b0ee2ebd2ad458a61429e9e", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -1,3 +1,7 @@\n+2001-05-11  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* POTFILES.in: Remove assert.h.\n+\n 2001-05-07  Zack Weinberg  <zackw@stanford.edu>\n \n \t* POTFILES.in: Remove config/i386/sco.h, config/i386/sco4.h,"}, {"sha": "4e204514924fe2ee475550bf69e976aa7ca73382", "filename": "gcc/po/POTFILES.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fpo%2FPOTFILES.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fpo%2FPOTFILES.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FPOTFILES.in?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -50,7 +50,6 @@\n \n acconfig.h\n alias.c\n-assert.h\n basic-block.h\n bb-reorder.c\n bitmap.c"}, {"sha": "336ced71889e5bd4b92d1a9435c7559d19217eac", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -187,8 +187,12 @@ scan_decls (pfile, argc, argv)\n \t\t  skip_to_closing_brace (pfile);\n \t\t  goto new_statement;\n \t\t}\n-\t      if (token.type == CPP_SEMICOLON)\n-\t\tgoto new_statement;\n+\n+\t      /* skip a possible __attribute__ or throw expression after the\n+\t\t parameter list */\n+\t      while (token.type != CPP_SEMICOLON && token.type != CPP_EOF)\n+\t\tcpp_get_token (pfile, &token);\n+\t      goto new_statement;\n \t    }\n \t  break;\n \tcase CPP_NAME:"}, {"sha": "3f06f274e15dbf6ad9092fb649e3a895eaa4742f", "filename": "gcc/sys-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fsys-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecd6201e6051a32f6645dcb3138526a2e6b0100/gcc%2Fsys-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsys-protos.h?ref=fecd6201e6051a32f6645dcb3138526a2e6b0100", "patch": "@@ -16,7 +16,6 @@ extern int                    __aread(int, int, char *, uint, ecb_t *);\n extern void                   __assert(const char *, const char *, int);\n extern int                    __asyncio(int, aioop_t *, int);\n extern int                    __awrite(int, int, char *, uint, ecb_t *);\n-extern void                   __eprintf(const char *);\n extern int                    __evcntl(evver_t, evcntlcmds_t, long int, long int);\n extern int                    __evexit(evver_t, idtype_t, id_t, const ecb_t *);\n extern int                    __evexitset(evver_t, const procset_t *, hostid_t, const ecb_t *);"}]}