{"sha": "9700224802151e26d4fadbf9eba9038f73006203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwMDIyNDgwMjE1MWUyNmQ0ZmFkYmY5ZWJhOTAzOGY3MzAwNjIwMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-03-02T22:30:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-03-02T22:30:32Z"}, "message": "tree-sra.c (sra_walk_fns): Document new restriction.\n\n\t* tree-sra.c (sra_walk_fns) <ldst>: Document new restriction.\n\t(sra_walk_modify_expr) <rhs_elt>: Treat the reference as a use\n\tif the lhs has side-effects.\n\t<lhs_elt>: Treat the reference as a use if the rhs has side-effects.\n\nFrom-SVN: r122492", "tree": {"sha": "944030daf9ed3ad7c588f297c744c7105c9ad582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944030daf9ed3ad7c588f297c744c7105c9ad582"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9700224802151e26d4fadbf9eba9038f73006203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9700224802151e26d4fadbf9eba9038f73006203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9700224802151e26d4fadbf9eba9038f73006203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9700224802151e26d4fadbf9eba9038f73006203/comments", "author": null, "committer": null, "parents": [{"sha": "e39e8c363b440515ff778e4141634af5cc4b5815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39e8c363b440515ff778e4141634af5cc4b5815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39e8c363b440515ff778e4141634af5cc4b5815"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "5e8d89a456feefaa31fa7b9168627d2f47e9aad7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9700224802151e26d4fadbf9eba9038f73006203/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9700224802151e26d4fadbf9eba9038f73006203/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9700224802151e26d4fadbf9eba9038f73006203", "patch": "@@ -1,3 +1,10 @@\n+2007-03-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-sra.c (sra_walk_fns) <ldst>: Document new restriction.\n+\t(sra_walk_modify_expr) <rhs_elt>: Treat the reference as a use\n+\tif the lhs has side-effects.\n+\t<lhs_elt>: Treat the reference as a use if the rhs has side-effects.\n+\n 2007-03-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (TUNEMASK): Remove define.\n@@ -7,7 +14,7 @@\n \t* config/i386/i386.c (override_options): Ditto.\n \t(standard_80387_constant_p): Ditto.\n \n-2007-03-03  Ian Lance Taylor  <iant@google.com>\n+2007-03-02  Ian Lance Taylor  <iant@google.com>\n \n \tUsed signed infinities in VRP.\n \t* tree-vrp.c (uses_overflow_infinity): New static function."}, {"sha": "ef7707f8b0ddb03116d4b0db8f4b51638a8ab42e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9700224802151e26d4fadbf9eba9038f73006203/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9700224802151e26d4fadbf9eba9038f73006203/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=9700224802151e26d4fadbf9eba9038f73006203", "patch": "@@ -685,8 +685,8 @@ struct sra_walk_fns\n   void (*init) (struct sra_elt *elt, tree value, block_stmt_iterator *bsi);\n \n   /* Invoked when we have a copy between one scalarizable reference ELT\n-     and one non-scalarizable reference OTHER.  IS_OUTPUT is true if ELT\n-     is on the left-hand side.  */\n+     and one non-scalarizable reference OTHER without side-effects. \n+     IS_OUTPUT is true if ELT is on the left-hand side.  */\n   void (*ldst) (struct sra_elt *elt, tree other,\n \t\tblock_stmt_iterator *bsi, bool is_output);\n \n@@ -908,7 +908,7 @@ sra_walk_gimple_modify_stmt (tree expr, block_stmt_iterator *bsi,\n   /* If the RHS is scalarizable, handle it.  There are only two cases.  */\n   if (rhs_elt)\n     {\n-      if (!rhs_elt->is_scalar)\n+      if (!rhs_elt->is_scalar && !TREE_SIDE_EFFECTS (lhs))\n \tfns->ldst (rhs_elt, lhs, bsi, false);\n       else\n \tfns->use (rhs_elt, &GIMPLE_STMT_OPERAND (expr, 1), bsi, false, false);\n@@ -951,7 +951,8 @@ sra_walk_gimple_modify_stmt (tree expr, block_stmt_iterator *bsi,\n \t The lvalue requirement prevents us from trying to directly scalarize\n \t the result of a function call.  Which would result in trying to call\n \t the function multiple times, and other evil things.  */\n-      else if (!lhs_elt->is_scalar && is_gimple_addressable (rhs))\n+      else if (!lhs_elt->is_scalar\n+\t       && !TREE_SIDE_EFFECTS (rhs) && is_gimple_addressable (rhs))\n \tfns->ldst (lhs_elt, rhs, bsi, true);\n \n       /* Otherwise we're being used in some context that requires the"}]}