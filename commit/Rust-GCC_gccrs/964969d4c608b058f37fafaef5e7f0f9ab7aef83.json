{"sha": "964969d4c608b058f37fafaef5e7f0f9ab7aef83", "node_id": "C_kwDOANBUbNoAKDk2NDk2OWQ0YzYwOGIwNThmMzdmYWZhZWY1ZTdmMGY5YWI3YWVmODM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T10:01:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T10:01:15Z"}, "message": "refactor class helper to create trait impl path segments into the CanonicalPath class itself", "tree": {"sha": "7720318c721a14f7a800b8e4635da1f6e53043ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7720318c721a14f7a800b8e4635da1f6e53043ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/964969d4c608b058f37fafaef5e7f0f9ab7aef83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964969d4c608b058f37fafaef5e7f0f9ab7aef83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964969d4c608b058f37fafaef5e7f0f9ab7aef83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964969d4c608b058f37fafaef5e7f0f9ab7aef83/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64832f0c5dd60eae3539e2fe73d72c78fbb22d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64832f0c5dd60eae3539e2fe73d72c78fbb22d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64832f0c5dd60eae3539e2fe73d72c78fbb22d46"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "222da03c002d8baba845979977731f5564ea33ea", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=964969d4c608b058f37fafaef5e7f0f9ab7aef83", "patch": "@@ -775,14 +775,15 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n \t\t\t\t\t   type_resolve_generic_args);\n \n   CanonicalPath projection\n-    = TraitImplProjection::resolve (impl_block.get_node_id (), trait_type_seg,\n-\t\t\t\t    impl_type_seg);\n+    = CanonicalPath::trait_impl_projection_seg (impl_block.get_node_id (),\n+\t\t\t\t\t\ttrait_type_seg, impl_type_seg);\n   CanonicalPath impl_prefix = prefix.append (projection);\n \n   // setup canonical-path\n   CanonicalPath canonical_projection\n-    = TraitImplProjection::resolve (impl_block.get_node_id (),\n-\t\t\t\t    canonical_trait_type, canonical_impl_type);\n+    = CanonicalPath::trait_impl_projection_seg (impl_block.get_node_id (),\n+\t\t\t\t\t\tcanonical_trait_type,\n+\t\t\t\t\t\tcanonical_impl_type);\n   CanonicalPath cpath = CanonicalPath::create_empty ();\n   if (canonical_prefix.size () <= 1)\n     {"}, {"sha": "15f5af7cb7ca1b79e29f3274e4d127ca9dd8641b", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=964969d4c608b058f37fafaef5e7f0f9ab7aef83", "patch": "@@ -355,8 +355,9 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\t     type_resolve_generic_args);\n \n     CanonicalPath projection\n-      = TraitImplProjection::resolve (impl_block.get_node_id (), trait_type_seg,\n-\t\t\t\t      impl_type_seg);\n+      = CanonicalPath::trait_impl_projection_seg (impl_block.get_node_id (),\n+\t\t\t\t\t\t  trait_type_seg,\n+\t\t\t\t\t\t  impl_type_seg);\n     CanonicalPath impl_prefix = prefix.append (projection);\n \n     resolver->get_name_scope ().insert ("}, {"sha": "c5fe325c67fef2b41436fd4d9d1c4a9207bef9b3", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=964969d4c608b058f37fafaef5e7f0f9ab7aef83", "patch": "@@ -479,8 +479,9 @@ ResolveRelativeTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n   rust_assert (ok);\n \n   CanonicalPath projection\n-    = TraitImplProjection::resolve (seg.get_node_id (), *trait_type_seg,\n-\t\t\t\t    *impl_type_seg);\n+    = CanonicalPath::trait_impl_projection_seg (seg.get_node_id (),\n+\t\t\t\t\t\t*trait_type_seg,\n+\t\t\t\t\t\t*impl_type_seg);\n \n   result = result.append (projection);\n   return true;"}, {"sha": "8f52c3ed08dcae80f593268d4b7fbf3b4f62f449", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=964969d4c608b058f37fafaef5e7f0f9ab7aef83", "patch": "@@ -79,17 +79,6 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n   bool failure_flag;\n };\n \n-class TraitImplProjection\n-{\n-public:\n-  static CanonicalPath resolve (NodeId id, const CanonicalPath &trait_seg,\n-\t\t\t\tconst CanonicalPath &impl_type_seg)\n-  {\n-    return CanonicalPath::new_seg (id, \"<\" + impl_type_seg.get () + \" as \"\n-\t\t\t\t\t + trait_seg.get () + \">\");\n-  }\n-};\n-\n class ResolveRelativeTypePath : public ResolveTypeToCanonicalPath\n {\n   using ResolveTypeToCanonicalPath::visit;"}, {"sha": "54cc0390849f6f43b4aeada35526bffcb6a460ac", "filename": "gcc/rust/util/rust-canonical-path.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Futil%2Frust-canonical-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964969d4c608b058f37fafaef5e7f0f9ab7aef83/gcc%2Frust%2Futil%2Frust-canonical-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-canonical-path.h?ref=964969d4c608b058f37fafaef5e7f0f9ab7aef83", "patch": "@@ -61,6 +61,14 @@ class CanonicalPath\n \t\t\t  UNKNOWN_CREATENUM);\n   }\n \n+  static CanonicalPath\n+  trait_impl_projection_seg (NodeId id, const CanonicalPath &trait_seg,\n+\t\t\t     const CanonicalPath &impl_type_seg)\n+  {\n+    return CanonicalPath::new_seg (id, \"<\" + impl_type_seg.get () + \" as \"\n+\t\t\t\t\t + trait_seg.get () + \">\");\n+  }\n+\n   std::string get () const\n   {\n     std::string buf;"}]}