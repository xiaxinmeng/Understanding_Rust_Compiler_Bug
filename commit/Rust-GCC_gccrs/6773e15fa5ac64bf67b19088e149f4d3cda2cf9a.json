{"sha": "6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3M2UxNWZhNWFjNjRiZjY3YjE5MDg4ZTE0OWY0ZDNjZGEyY2Y5YQ==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-06-30T18:18:01Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-06-30T18:18:01Z"}, "message": "Conditionally compile support for --enable-mapped_location.\n\n\t* cfgexpand.c:  Handle USE_MAPPED_LOCATION case for function_end_locus.\n\t* cfglayout.c (insn_locators_initialize):  Const cleanup.  New macros.\n\t* cfgrtl.c (delete_insn):  Use new NOTE_DELETED_LABEL_NAME macro.\n\t* print-rtl.c (print_rtx):  Likewise.\n\t* emit-rtl.c:  Don't clear NOTE_SOURCE_FILE if USE_MAPPED_LOCATION.\n\t* combine.c:  Use new SET_INSN_DELETED macro.\n\t* flow.c:  Likewise.\n\t* haifa-sched.c:  Likewise.\n\t* ifcvt.c:  Likewise.\n\t* recog.c:  Likewise.\n\t* reload1.c:  Likewise.\n\t* diagnostic.c:  Use expand_location macro.\n\t* pretty-print.c (pp_base_format_text):  Likewise.\n\t* profile.c:  Likewise.\n \t* dwarf2out.c:  Likewise.  Also use expand_location, DECL_IS_BUILTIN.\n \t* dwarf2out.c (dwarf2out_decl:  Use BUILTINS_LOCATION.\n\t* emit-rtl.c (emit_line_note):  Simplify if USE_MAPPED_LOCATION.\n\t(force_next_line_note, insn_emit):  Handle USE_MAPPED_LOCATION case.\n\t* final.c (final):  Likewise.\n\t* haifa-sched.c:  Likewise.\n\t* integrate.c:  Likewise.\n\t* jump.c:  Likewise.\n\t* rtl-error.c:  Likewise.\n\t* stmt.c (check_seenlabel):  Likewise.\n\t* tree-pretty-print.c:  Likewise.\n\nFrom-SVN: r83921", "tree": {"sha": "f55d68b85e9f94ddf4bbe5761ff0a2f4ee16bbc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55d68b85e9f94ddf4bbe5761ff0a2f4ee16bbc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a281759fdf4cc20f179d37ef875f7c233ab68f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a281759fdf4cc20f179d37ef875f7c233ab68f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a281759fdf4cc20f179d37ef875f7c233ab68f46"}], "stats": {"total": 273, "additions": 180, "deletions": 93}, "files": [{"sha": "b217e27ee7994771693413d041724a275240914c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -54,6 +54,31 @@\n \t* c-ppoutput.c:  Use new source_location typedef instead of fileline.\n \t* c-semantics.c:  Use new macros.\n \t* c-typeck.c:  Likewise.\n+\t* cfgexpand.c:  Handle USE_MAPPED_LOCATION case for function_end_locus.\n+\t* cfglayout.c (insn_locators_initialize):  Const cleanup.  New macros.\n+\t* cfgrtl.c (delete_insn):  Use new NOTE_DELETED_LABEL_NAME macro.\n+\t* print-rtl.c (print_rtx):  Likewise.\n+\t* emit-rtl.c:  Don't clear NOTE_SOURCE_FILE if USE_MAPPED_LOCATION.\n+\t* combine.c:  Use new SET_INSN_DELETED macro.\n+\t* flow.c:  Likewise.\n+\t* haifa-sched.c:  Likewise.\n+\t* ifcvt.c:  Likewise.\n+\t* recog.c:  Likewise.\n+\t* reload1.c:  Likewise.\n+\t* diagnostic.c:  Use expand_location macro.\n+\t* pretty-print.c (pp_base_format_text):  Likewise.\n+\t* profile.c:  Likewise.\n+ \t* dwarf2out.c:  Likewise.  Also use expand_location, DECL_IS_BUILTIN.\n+ \t* dwarf2out.c (dwarf2out_decl:  Use BUILTINS_LOCATION.\n+\t* emit-rtl.c (emit_line_note):  Simplify if USE_MAPPED_LOCATION.\n+\t(force_next_line_note, insn_emit):  Handle USE_MAPPED_LOCATION case.\n+\t* final.c (final):  Likewise.\n+\t* haifa-sched.c:  Likewise.\n+\t* integrate.c:  Likewise.\n+\t* jump.c:  Likewise.\n+\t* rtl-error.c:  Likewise.\n+\t* stmt.c (check_seenlabel):  Likewise.\n+\t* tree-pretty-print.c:  Likewise.\n \n 2004-06-30  Richard Sandiford  <rsandifo@redhat.com>\n \t    Eric Christopher  <echristo@redhat.com>"}, {"sha": "58592751d6e3af9f4a0903321b1a9330ebd5fc7e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -319,7 +319,11 @@ construct_exit_block (void)\n \n   /* Make sure the locus is set to the end of the function, so that \n      epilogue line numbers and warnings are set properly.  */\n+#ifdef USE_MAPPED_LOCATION\n+  if (cfun->function_end_locus != UNKNOWN_LOCATION)\n+#else\n   if (cfun->function_end_locus.file)\n+#endif\n     input_location = cfun->function_end_locus;\n \n   /* The following insns belong to the top scope.  */"}, {"sha": "be890d9b399c34bc3f936b72ee3355121844dd4d", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -254,7 +254,7 @@ insn_locators_initialize (void)\n   rtx insn, next;\n   int loc = 0;\n   int line_number = 0, last_line_number = 0;\n-  char *file_name = NULL, *last_file_name = NULL;\n+  const char *file_name = NULL, *last_file_name = NULL;\n \n   prologue_locator = epilogue_locator = 0;\n \n@@ -293,7 +293,7 @@ insn_locators_initialize (void)\n \t    {\n \t      loc++;\n \t      VARRAY_PUSH_INT (file_locators_locs, loc);\n-\t      VARRAY_PUSH_CHAR_PTR (file_locators_files, file_name);\n+\t      VARRAY_PUSH_CHAR_PTR (file_locators_files, (char *) file_name);\n \t      last_file_name = file_name;\n \t    }\n \t}\n@@ -324,8 +324,10 @@ insn_locators_initialize (void)\n \t    default:\n \t      if (NOTE_LINE_NUMBER (insn) > 0)\n \t\t{\n-\t\t  line_number = NOTE_LINE_NUMBER (insn);\n-\t\t  file_name = (char *)NOTE_SOURCE_FILE (insn);\n+\t\t  expanded_location xloc;\n+\t\t  NOTE_EXPANDED_LOCATION (xloc, insn);\n+\t\t  line_number = xloc.line;\n+\t\t  file_name = xloc.file;\n \t\t}\n \t      break;\n \t    }"}, {"sha": "ae073c4fc39edb41d007ac64ee6b3919722a0982", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -130,7 +130,7 @@ delete_insn (rtx insn)\n \t  really_delete = false;\n \t  PUT_CODE (insn, NOTE);\n \t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED_LABEL;\n-\t  NOTE_SOURCE_FILE (insn) = name;\n+\t  NOTE_DELETED_LABEL_NAME (insn) = name;\n \t}\n \n       remove_node_from_expr_list (insn, &nonlocal_goto_handler_labels);"}, {"sha": "0762eda455b5f4ccae30cdcfa15e5f43cae6bad8", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -2770,19 +2770,13 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \tPATTERN (i2) = newi2pat;\n       }\n     else\n-      {\n-\tPUT_CODE (i2, NOTE);\n-\tNOTE_LINE_NUMBER (i2) = NOTE_INSN_DELETED;\n-\tNOTE_SOURCE_FILE (i2) = 0;\n-      }\n+      SET_INSN_DELETED (i2);\n \n     if (i1)\n       {\n \tLOG_LINKS (i1) = 0;\n \tREG_NOTES (i1) = 0;\n-\tPUT_CODE (i1, NOTE);\n-\tNOTE_LINE_NUMBER (i1) = NOTE_INSN_DELETED;\n-\tNOTE_SOURCE_FILE (i1) = 0;\n+\tSET_INSN_DELETED (i1);\n       }\n \n     /* Get death notes for everything that is now used in either I3 or\n@@ -12045,9 +12039,7 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2)\n \t\t\t  distribute_notes (old_notes, tem, tem, NULL_RTX);\n \t\t\t  distribute_links (LOG_LINKS (tem));\n \n-\t\t\t  PUT_CODE (tem, NOTE);\n-\t\t\t  NOTE_LINE_NUMBER (tem) = NOTE_INSN_DELETED;\n-\t\t\t  NOTE_SOURCE_FILE (tem) = 0;\n+\t\t\t  SET_INSN_DELETED (tem);\n \n #ifdef HAVE_cc0\n \t\t\t  /* Delete the setter too.  */\n@@ -12061,10 +12053,7 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2)\n \t\t\t\t\t\tcc0_setter, NULL_RTX);\n \t\t\t      distribute_links (LOG_LINKS (cc0_setter));\n \n-\t\t\t      PUT_CODE (cc0_setter, NOTE);\n-\t\t\t      NOTE_LINE_NUMBER (cc0_setter)\n-\t\t\t\t= NOTE_INSN_DELETED;\n-\t\t\t      NOTE_SOURCE_FILE (cc0_setter) = 0;\n+\t\t\t      SET_INSN_DELETED (cc0_setter);\n \t\t\t    }\n #endif\n \t\t\t}"}, {"sha": "db4c8fec4da63e2060bdfa709838f997fac16ab1", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -173,13 +173,13 @@ diagnostic_build_prefix (diagnostic_info *diagnostic)\n #undef DEFINE_DIAGNOSTIC_KIND\n     \"must-not-happen\"\n   };\n-   if (diagnostic->kind >= DK_LAST_DIAGNOSTIC_KIND)\n-     abort();\n+  expanded_location s = expand_location (diagnostic->location);\n+  if (diagnostic->kind >= DK_LAST_DIAGNOSTIC_KIND)\n+    abort();\n \n-  return diagnostic->location.file\n+  return s.file\n     ? build_message_string (\"%s:%d: %s\",\n-                            diagnostic->location.file,\n-                            diagnostic->location.line,\n+                            s.file, s.line,\n                             _(diagnostic_kind_text[diagnostic->kind]))\n     : build_message_string (\"%s: %s\", progname,\n                             _(diagnostic_kind_text[diagnostic->kind]));\n@@ -206,8 +206,9 @@ diagnostic_count_diagnostic (diagnostic_context *context,\n \t   || diagnostic_kind_count (context, DK_SORRY) > 0)\n \t  && !context->abort_on_error)\n \t{\n+\t  expanded_location s = expand_location (diagnostic->location);\n \t  fnotice (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n-\t\t   diagnostic->location.file, diagnostic->location.line);\n+\t\t   s.file, s.line);\n \t  exit (FATAL_EXIT_CODE);\n \t}\n #endif\n@@ -313,16 +314,20 @@ diagnostic_report_current_module (diagnostic_context *context)\n       pp_needs_newline (context->printer) = false;\n     }\n \n-  if (input_file_stack && diagnostic_last_module_changed (context))\n+  p = input_file_stack;\n+  if (p && diagnostic_last_module_changed (context))\n     {\n-      p = input_file_stack;\n+      expanded_location xloc = expand_location (p->location);\n       pp_verbatim (context->printer,\n                    \"In file included from %s:%d\",\n-                   p->location.file, p->location.line);\n+\t\t   xloc.file, xloc.line);\n       while ((p = p->next) != NULL)\n-\tpp_verbatim (context->printer,\n-                     \",\\n                 from %s:%d\",\n-                     p->location.file, p->location.line);\n+\t{\n+\t  xloc = expand_location (p->location);\n+\t  pp_verbatim (context->printer,\n+\t\t       \",\\n                 from %s:%d\",\n+\t\t       xloc.file, xloc.line);\n+\t}\n       pp_verbatim (context->printer, \":\\n\");\n       diagnostic_set_last_module (context);\n     }"}, {"sha": "17b4c2060c0f8d79d439bb13e3084fc7a428ef60", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -10501,10 +10501,11 @@ add_pure_or_virtual_attribute (dw_die_ref die, tree func_decl)\n static void\n add_src_coords_attributes (dw_die_ref die, tree decl)\n {\n-  unsigned file_index = lookup_filename (DECL_SOURCE_FILE (decl));\n+  expanded_location s = expand_location (DECL_SOURCE_LOCATION (decl));\n+  unsigned file_index = lookup_filename (s.file);\n \n   add_AT_unsigned (die, DW_AT_decl_file, file_index);\n-  add_AT_unsigned (die, DW_AT_decl_line, DECL_SOURCE_LINE (decl));\n+  add_AT_unsigned (die, DW_AT_decl_line, s.line);\n }\n \n /* Add a DW_AT_name attribute and source coordinate attribute for the\n@@ -11199,7 +11200,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n     }\n   else if (old_die)\n     {\n-      unsigned file_index = lookup_filename (DECL_SOURCE_FILE (decl));\n+      expanded_location s = expand_location (DECL_SOURCE_LOCATION (decl));\n+      unsigned file_index = lookup_filename (s.file);\n \n       if (!get_AT_flag (old_die, DW_AT_declaration)\n \t  /* We can have a normal definition following an inline one in the\n@@ -11228,7 +11230,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  && (DECL_ARTIFICIAL (decl)\n \t      || (get_AT_unsigned (old_die, DW_AT_decl_file) == file_index\n \t\t  && (get_AT_unsigned (old_die, DW_AT_decl_line)\n-\t\t      == (unsigned) DECL_SOURCE_LINE (decl)))))\n+\t\t      == (unsigned) s.line))))\n \t{\n \t  subr_die = old_die;\n \n@@ -11247,9 +11249,9 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_file) != file_index)\n \t    add_AT_unsigned (subr_die, DW_AT_decl_file, file_index);\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_line)\n-\t      != (unsigned) DECL_SOURCE_LINE (decl))\n+\t      != (unsigned) s.line)\n \t    add_AT_unsigned\n-\t      (subr_die, DW_AT_decl_line, DECL_SOURCE_LINE (decl));\n+\t      (subr_die, DW_AT_decl_line, s.line);\n \t}\n     }\n   else\n@@ -11476,16 +11478,16 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n       add_AT_specification (var_die, old_die);\n       if (DECL_NAME (decl))\n \t{\n-\t  unsigned file_index = lookup_filename (DECL_SOURCE_FILE (decl));\n+\t  expanded_location s = expand_location (DECL_SOURCE_LOCATION (decl));\n+\t  unsigned file_index = lookup_filename (s.file);\n \n \t  if (get_AT_unsigned (old_die, DW_AT_decl_file) != file_index)\n \t    add_AT_unsigned (var_die, DW_AT_decl_file, file_index);\n \n \t  if (get_AT_unsigned (old_die, DW_AT_decl_line)\n-\t      != (unsigned) DECL_SOURCE_LINE (decl))\n+\t      != (unsigned) s.line)\n \n-\t    add_AT_unsigned (var_die, DW_AT_decl_line,\n-\t\t\t     DECL_SOURCE_LINE (decl));\n+\t    add_AT_unsigned (var_die, DW_AT_decl_line, s.line);\n \t}\n     }\n   else\n@@ -12776,6 +12778,7 @@ dwarf2out_imported_module_or_decl (tree decl, tree context)\n   dw_die_ref imported_die, at_import_die;\n   dw_die_ref scope_die;\n   unsigned file_index;\n+  expanded_location xloc;\n   \n   if (debug_info_level <= DINFO_LEVEL_TERSE)\n     return;\n@@ -12807,10 +12810,11 @@ dwarf2out_imported_module_or_decl (tree decl, tree context)\n     imported_die = new_die (DW_TAG_imported_module, scope_die, context);\n   else\n     imported_die = new_die (DW_TAG_imported_declaration, scope_die, context);\n-  \n-  file_index = lookup_filename (input_filename);\n+\n+  xloc = expand_location (input_location);\n+  file_index = lookup_filename (xloc.file);\n   add_AT_unsigned (imported_die, DW_AT_decl_file, file_index);\n-  add_AT_unsigned (imported_die, DW_AT_decl_line, input_line);\n+  add_AT_unsigned (imported_die, DW_AT_decl_line, xloc.line);\n   add_AT_die_ref (imported_die, DW_AT_import, at_import_die);\n }\n \n@@ -12898,7 +12902,7 @@ dwarf2out_decl (tree decl)\n \n       /* Don't bother trying to generate any DIEs to represent any of the\n \t normal built-in types for the language we are compiling.  */\n-      if (DECL_SOURCE_LINE (decl) == 0)\n+      if (DECL_IS_BUILTIN (decl))\n \t{\n \t  /* OK, we need to generate one for `bool' so GDB knows what type\n \t     comparisons have.  */"}, {"sha": "c4235bf3fd1284958ecded155edee683c289cf28", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -4131,7 +4131,9 @@ emit_note_before (int subtype, rtx before)\n {\n   rtx note = rtx_alloc (NOTE);\n   INSN_UID (note) = cur_insn_uid++;\n+#ifndef USE_MAPPED_LOCATION\n   NOTE_SOURCE_FILE (note) = 0;\n+#endif\n   NOTE_LINE_NUMBER (note) = subtype;\n   BLOCK_FOR_INSN (note) = NULL;\n \n@@ -4354,7 +4356,9 @@ emit_note_after (int subtype, rtx after)\n {\n   rtx note = rtx_alloc (NOTE);\n   INSN_UID (note) = cur_insn_uid++;\n+#ifndef USE_MAPPED_LOCATION\n   NOTE_SOURCE_FILE (note) = 0;\n+#endif\n   NOTE_LINE_NUMBER (note) = subtype;\n   BLOCK_FOR_INSN (note) = NULL;\n   add_insn_after (note, after);\n@@ -4629,10 +4633,15 @@ emit_line_note (location_t location)\n   \n   set_file_and_line_for_stmt (location);\n   \n+#ifdef USE_MAPPED_LOCATION\n+  if (location == last_location)\n+    return NULL_RTX;\n+#else\n   if (location.file && last_location.file\n       && !strcmp (location.file, last_location.file)\n       && location.line == last_location.line)\n     return NULL_RTX;\n+#endif\n   last_location = location;\n   \n   if (no_line_numbers)\n@@ -4641,8 +4650,12 @@ emit_line_note (location_t location)\n       return NULL_RTX;\n     }\n \n+#ifdef USE_MAPPED_LOCATION\n+  note = emit_note ((int) location);\n+#else\n   note = emit_note (location.line);\n   NOTE_SOURCE_FILE (note) = location.file;\n+#endif\n   \n   return note;\n }\n@@ -4694,7 +4707,11 @@ emit_note (int note_no)\n void\n force_next_line_note (void)\n {\n+#ifdef USE_MAPPED_LOCATION\n+  last_location = -1;\n+#else\n   last_location.line = -1;\n+#endif\n }\n \n /* Place a note of KIND on insn INSN with DATUM as the datum. If a\n@@ -5154,8 +5171,7 @@ init_emit (void)\n   seq_rtl_expr = NULL;\n   cur_insn_uid = 1;\n   reg_rtx_no = LAST_VIRTUAL_REGISTER + 1;\n-  last_location.line = 0;\n-  last_location.file = 0;\n+  last_location = UNKNOWN_LOCATION;\n   first_label_num = label_num;\n   last_label_num = 0;\n   seq_stack = NULL;"}, {"sha": "c7b4a5c4de4a9b5f9e7dee1623a565a69494ae7b", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -1520,8 +1520,13 @@ final (rtx first, FILE *file, int optimize, int prescan)\n \tif (GET_CODE (insn) == NOTE && NOTE_LINE_NUMBER (insn) > 0)\n \t  {\n \t    if (last != 0\n+#ifdef USE_MAPPED_LOCATION\n+\t\t&& NOTE_SOURCE_LOCATION (insn) == NOTE_SOURCE_LOCATION (last)\n+#else\n \t\t&& NOTE_LINE_NUMBER (insn) == NOTE_LINE_NUMBER (last)\n-\t\t&& NOTE_SOURCE_FILE (insn) == NOTE_SOURCE_FILE (last))\n+\t\t&& NOTE_SOURCE_FILE (insn) == NOTE_SOURCE_FILE (last)\n+#endif)\n+\t      )\n \t      {\n \t\tdelete_insn (insn);\t/* Use delete_note.  */\n \t\tcontinue;"}, {"sha": "046d51b556450bdf0a6687af7c666e9745cfcc4b", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -3391,8 +3391,7 @@ attempt_auto_inc (struct propagate_block_info *pbi, rtx inc, rtx insn,\n \t}\n \n       PUT_CODE (incr, NOTE);\n-      NOTE_LINE_NUMBER (incr) = NOTE_INSN_DELETED;\n-      NOTE_SOURCE_FILE (incr) = 0;\n+      SET_INSN_DELETED (incr);\n     }\n \n   if (regno >= FIRST_PSEUDO_REGISTER)"}, {"sha": "122f9714813d0dd81a824830ee7c7f93947b0b05", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -1559,8 +1559,13 @@ restore_line_notes (rtx head, rtx tail)\n \t     && (note = LINE_NOTE (insn)) != 0\n \t     && note != line\n \t     && (line == 0\n+#ifdef USE_MAPPED_LOCATION\n+\t\t || NOTE_SOURCE_LOCATION (note) != NOTE_SOURCE_LOCATION (line)\n+#else\n \t\t || NOTE_LINE_NUMBER (note) != NOTE_LINE_NUMBER (line)\n-\t\t || NOTE_SOURCE_FILE (note) != NOTE_SOURCE_FILE (line)))\n+\t\t || NOTE_SOURCE_FILE (note) != NOTE_SOURCE_FILE (line)\n+#endif\n+\t\t ))\n       {\n \tline = note;\n \tprev = PREV_INSN (insn);\n@@ -1577,7 +1582,9 @@ restore_line_notes (rtx head, rtx tail)\n \t  {\n \t    added_notes++;\n \t    new = emit_note_after (NOTE_LINE_NUMBER (note), prev);\n+#ifndef USE_MAPPED_LOCATION\n \t    NOTE_SOURCE_FILE (new) = NOTE_SOURCE_FILE (note);\n+#endif\n \t  }\n       }\n   if (sched_verbose && added_notes)\n@@ -1605,17 +1612,20 @@ rm_redundant_line_notes (void)\n \tif (active_insn == 0)\n \t  {\n \t    notes++;\n-\t    NOTE_SOURCE_FILE (insn) = 0;\n-\t    NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n+\t    SET_INSN_DELETED (insn);\n \t  }\n \t/* If the line number is unchanged, LINE is redundant.  */\n \telse if (line\n+#ifdef USE_MAPPED_LOCATION\n+\t\t && NOTE_SOURCE_LOCATION (line) == NOTE_SOURCE_LOCATION (insn)\n+#else\n \t\t && NOTE_LINE_NUMBER (line) == NOTE_LINE_NUMBER (insn)\n-\t\t && NOTE_SOURCE_FILE (line) == NOTE_SOURCE_FILE (insn))\n+\t\t && NOTE_SOURCE_FILE (line) == NOTE_SOURCE_FILE (insn)\n+#endif\n+)\n \t  {\n \t    notes++;\n-\t    NOTE_SOURCE_FILE (line) = 0;\n-\t    NOTE_LINE_NUMBER (line) = NOTE_INSN_DELETED;\n+\t    SET_INSN_DELETED (line);\n \t    line = insn;\n \t  }\n \telse"}, {"sha": "647c4e8b74d09d499088a44b9b810f6f4d8fe897", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -260,9 +260,7 @@ cond_exec_process_insns (ce_if_block_t *ce_info ATTRIBUTE_UNUSED,\n \t{\n \t  /* ??? Ug.  Actually unlinking the thing is problematic,\n \t     given what we'd have to coordinate with our callers.  */\n-\t  PUT_CODE (insn, NOTE);\n-\t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n-\t  NOTE_SOURCE_FILE (insn) = 0;\n+\t  SET_INSN_DELETED (insn);\n \t  goto insn_done;\n \t}\n "}, {"sha": "80eb84bba8c1564dd578e134099e87adc37736bf", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -505,8 +505,13 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n \t  ASM_OPERANDS_INPUT_VEC (copy) = map->copy_asm_operands_vector;\n \t  ASM_OPERANDS_INPUT_CONSTRAINT_VEC (copy)\n \t    = map->copy_asm_constraints_vector;\n+#ifdef USE_MAPPED_LOCATION\n+\t  ASM_OPERANDS_SOURCE_LOCATION (copy)\n+\t    = ASM_OPERANDS_SOURCE_LOCATION (orig);\n+#else\n \t  ASM_OPERANDS_SOURCE_FILE (copy) = ASM_OPERANDS_SOURCE_FILE (orig);\n \t  ASM_OPERANDS_SOURCE_LINE (copy) = ASM_OPERANDS_SOURCE_LINE (orig);\n+#endif\n \t  return copy;\n \t}\n       break;"}, {"sha": "0e45c79b69e02d6e0ca837d3aea53b4a8a9bb74c", "filename": "gcc/jump.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -142,8 +142,13 @@ purge_line_number_notes (rtx f)\n \t  {\n \t    /* Delete this note if it is identical to previous note.  */\n \t    if (last_note\n+#ifdef USE_MAPPED_LOCATION\n+\t\t&& NOTE_SOURCE_LOCATION (insn) == NOTE_SOURCE_LOCATION (last_note)\n+#else\n \t\t&& NOTE_SOURCE_FILE (insn) == NOTE_SOURCE_FILE (last_note)\n-\t\t&& NOTE_LINE_NUMBER (insn) == NOTE_LINE_NUMBER (last_note))\n+\t\t&& NOTE_LINE_NUMBER (insn) == NOTE_LINE_NUMBER (last_note)\n+#endif\n+)\n \t      {\n \t\tdelete_related_insns (insn);\n \t\tcontinue;"}, {"sha": "d6098a7474513422de22f970fd58f67fa91e5627", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -305,11 +305,12 @@ pp_base_format_text (pretty_printer *pp, text_info *text)\n \n         case 'H':\n           {\n-            const location_t *locus = va_arg (*text->args_ptr, location_t *);\n+            location_t *locus = va_arg (*text->args_ptr, location_t *);\n+\t    expanded_location s = expand_location (*locus);\n             pp_string (pp, \"file '\");\n-            pp_string (pp, locus->file);\n+            pp_string (pp, s.file);\n             pp_string (pp, \"', line \");\n-            pp_decimal_int (pp, locus->line);\n+            pp_decimal_int (pp, s.line);\n           }\n           break;\n "}, {"sha": "0143f096c2965864e6d1ed09cd910e77f7fe4cbb", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -272,10 +272,13 @@ print_rtx (rtx in_rtx)\n \t\tbreak;\n \n \t      case NOTE_INSN_DELETED_LABEL:\n-\t\tif (NOTE_SOURCE_FILE (in_rtx))\n-\t\t  fprintf (outfile, \" (\\\"%s\\\")\", NOTE_SOURCE_FILE (in_rtx));\n-\t\telse\n-\t\t  fprintf (outfile, \" \\\"\\\"\");\n+\t\t{\n+\t\t  const char *label = NOTE_DELETED_LABEL_NAME (in_rtx);\n+\t\t  if (label)\n+\t\t    fprintf (outfile, \" (\\\"%s\\\")\", label);\n+\t\t  else\n+\t\t    fprintf (outfile, \" \\\"\\\"\");\n+\t\t}\n \t\tbreak;\n \n \t      case NOTE_INSN_PREDICTION:"}, {"sha": "9a7b933199b018d03014731a96cae7099617d03f", "filename": "gcc/profile.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -922,23 +922,26 @@ branch_prob (void)\n \t\t    ignore_next_note = 0;\n \t\t  else\n \t\t    {\n+\t\t      expanded_location s;\n+\n \t\t      if (!offset)\n \t\t\t{\n \t\t\t  offset = gcov_write_tag (GCOV_TAG_LINES);\n \t\t\t  gcov_write_unsigned (BB_TO_GCOV_INDEX (bb));\n \t\t\t}\n \n+\t\t      NOTE_EXPANDED_LOCATION (s, insn);\n+\n \t\t      /* If this is a new source file, then output the\n \t\t\t file's name to the .bb file.  */\n \t\t      if (!prev_file_name\n-\t\t\t  || strcmp (NOTE_SOURCE_FILE (insn),\n-\t\t\t\t     prev_file_name))\n+\t\t\t  || strcmp (s.file, prev_file_name))\n \t\t\t{\n-\t\t\t  prev_file_name = NOTE_SOURCE_FILE (insn);\n+\t\t\t  prev_file_name = s.file;\n \t\t\t  gcov_write_unsigned (0);\n \t\t\t  gcov_write_string (prev_file_name);\n \t\t\t}\n-\t\t      gcov_write_unsigned (NOTE_LINE_NUMBER (insn));\n+\t\t      gcov_write_unsigned (s.line);\n \t\t    }\n \t\t}\n \t      insn = NEXT_INSN (insn);"}, {"sha": "ad2dd9a49cdddd0466d971fdf2692f4d6fa02f74", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -2677,9 +2677,7 @@ split_insn (rtx insn)\n     return NULL_RTX;\n \n   /* try_split returns the NOTE that INSN became.  */\n-  PUT_CODE (insn, NOTE);\n-  NOTE_SOURCE_FILE (insn) = 0;\n-  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n+  SET_INSN_DELETED (insn);\n \n   /* ??? Coddle to md files that generate subregs in post-reload\n      splitters instead of computing the proper hard register.  */"}, {"sha": "9a5d40ba111f95c787943e02544a56cb7f08c734", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -1059,11 +1059,7 @@ reload (rtx first, int global)\n \t      else if (reg_set_p (regno_reg_rtx[i], PATTERN (equiv_insn)))\n \t\tdelete_dead_insn (equiv_insn);\n \t      else\n-\t\t{\n-\t\t  PUT_CODE (equiv_insn, NOTE);\n-\t\t  NOTE_SOURCE_FILE (equiv_insn) = 0;\n-\t\t  NOTE_LINE_NUMBER (equiv_insn) = NOTE_INSN_DELETED;\n-\t\t}\n+\t\tSET_INSN_DELETED (equiv_insn);\n \t    }\n \t}\n     }\n@@ -1911,9 +1907,7 @@ delete_dead_insn (rtx insn)\n       && ! side_effects_p (SET_SRC (PATTERN (prev))))\n     delete_dead_insn (prev);\n \n-  PUT_CODE (insn, NOTE);\n-  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n-  NOTE_SOURCE_FILE (insn) = 0;\n+  SET_INSN_DELETED (insn);\n }\n \n /* Modify the home of pseudo-reg I."}, {"sha": "16d53506b48fb28a0481c6b9e68a50375b218f6c", "filename": "gcc/rtl-error.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Frtl-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Frtl-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-error.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -59,10 +59,14 @@ location_for_asm (rtx insn)\n     asmop = NULL;\n \n   if (asmop)\n+#ifdef USE_MAPPED_LOCATION\n+    loc = ASM_OPERANDS_SOURCE_LOCATION (asmop);\n+#else\n     {\n       loc.file = ASM_OPERANDS_SOURCE_FILE (asmop);\n       loc.line = ASM_OPERANDS_SOURCE_LINE (asmop);\n     }\n+#endif\n   else\n     loc = input_location;\n   return loc;"}, {"sha": "0b282bb623e46cb22d53c1eb95ced8f103f594dc", "filename": "gcc/stmt.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -1565,7 +1565,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t\t\t\t: GET_MODE (output_rtx[0])),\n \t\t\t       TREE_STRING_POINTER (string),\n \t\t\t       empty_string, 0, argvec, constraintvec,\n-\t\t\t       locus.file, locus.line);\n+\t\t\t       locus);\n \n   MEM_VOLATILE_P (body) = vol;\n \n@@ -1715,7 +1715,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t\t\t   (GET_MODE (output_rtx[i]),\n \t\t\t    TREE_STRING_POINTER (string),\n \t\t\t    constraints[i], i, argvec, constraintvec,\n-\t\t\t    locus.file, locus.line));\n+\t\t\t    locus));\n \n \t  MEM_VOLATILE_P (SET_SRC (XVECEXP (body, 0, i))) = vol;\n \t}\n@@ -3871,8 +3871,12 @@ check_seenlabel (void)\n \t      if (insn)\n                 {\n                   location_t locus;\n+#ifdef USE_MAPPED_LOCATION\n+                  locus = NOTE_SOURCE_LOCATION (insn);\n+#else\n                   locus.file = NOTE_SOURCE_FILE (insn);\n                   locus.line = NOTE_LINE_NUMBER (insn);\n+#endif\n                   warning (\"%Hunreachable code at beginning of %s\", &locus,\n                            case_stack->data.case_stmt.printname);\n                 }"}, {"sha": "9d415fa88735d520606e2f8b3a496f10cf6d29f4", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "patch": "@@ -231,13 +231,14 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       && (flags & TDF_LINENO)\n       && EXPR_HAS_LOCATION (node))\n     {\n+      expanded_location xloc = expand_location (EXPR_LOCATION (node));\n       pp_character (buffer, '[');\n-      if (EXPR_FILENAME (node))\n+      if (xloc.file)\n \t{\n-\t  pp_string (buffer, EXPR_FILENAME (node));\n+\t  pp_string (buffer, xloc.file);\n \t  pp_string (buffer, \" : \");\n \t}\n-      pp_decimal_int (buffer, EXPR_LINENO (node));\n+      pp_decimal_int (buffer, xloc.line);\n       pp_string (buffer, \"] \");\n     }\n \n@@ -556,7 +557,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case TYPE_DECL:\n-      if (strcmp (DECL_SOURCE_FILE (node), \"<built-in>\") == 0)\n+      if (DECL_IS_BUILTIN (node))\n \t{\n \t  /* Don't print the declaration of built-in types.  */\n \t  break;\n@@ -2224,15 +2225,27 @@ dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent,\n     {\n       INDENT (indent);\n \n-      if ((flags & TDF_LINENO) && e->goto_locus)\n+      if ((flags & TDF_LINENO)\n+#ifdef USE_MAPPED_LOCATION\n+\t  && e->goto_locus != UNKNOWN_LOCATION\n+#else\n+\t  && e->goto_locus\n+#endif\n+\t  )\n \t{\n+\t  expanded_location goto_xloc;\n+#ifdef USE_MAPPED_LOCATION\n+\t  goto_xloc = expand_location (e->goto_locus);\n+#else\n+\t  goto_xloc = *e->goto_locus;\n+#endif\n \t  pp_character (buffer, '[');\n-\t  if (e->goto_locus->file)\n+\t  if (goto_xloc.file)\n \t    {\n-\t      pp_string (buffer, e->goto_locus->file);\n+\t      pp_string (buffer, goto_xloc.file);\n \t      pp_string (buffer, \" : \");\n \t    }\n-\t  pp_decimal_int (buffer, e->goto_locus->line);\n+\t  pp_decimal_int (buffer, goto_xloc.line);\n \t  pp_string (buffer, \"] \");\n \t}\n "}]}