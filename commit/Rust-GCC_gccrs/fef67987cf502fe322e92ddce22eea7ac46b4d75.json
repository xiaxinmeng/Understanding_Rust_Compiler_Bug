{"sha": "fef67987cf502fe322e92ddce22eea7ac46b4d75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVmNjc5ODdjZjUwMmZlMzIyZTkyZGRjZTIyZWVhN2FjNDZiNGQ3NQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-07-08T15:21:20Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-07-28T04:20:21Z"}, "message": "Bind(C): Fix type encodings in ISO_Fortran_binding.h\n\nISO_Fortran_binding.h had many incorrect hardwired kind encodings in\nthe definitions of the CFI_type_* macros.  Additionally, not all\ntargets support all the defined type encodings, and the Fortran\nstandard requires those macros to have a negative value.\n\nThis patch changes ISO_Fortran_binding.h to use sizeof instead of\nhard-coded sizes, and assembles it from fragments that reflect the\nset of types supported by the target.\n\n2021-07-22  Sandra Loosemore  <sandra@codesourcery.com>\n\t    Tobias Burnus  <tobias@codesourcery.com>\n\nlibgfortran/\n\tPR libfortran/101305\n\t* ISO_Fortran_binding.h: Fix hard-coded sizes and split into...\n\t* ISO_Fortran_binding-1-tmpl.h: New file.\n\t* ISO_Fortran_binding-2-tmpl.h: New file.\n\t* ISO_Fortran_binding-3-tmpl.h: New file.\n\t* Makefile.am: Add rule for generating ISO_Fortran_binding.h.\n\tAdjust pathnames to that file.\n\t* Makefile.in: Regenerated.\n\t* mk-kinds-h.sh: New file.\n\t* runtime/ISO_Fortran_binding.c: Fix include path.", "tree": {"sha": "f04b9267351ae00bf804b17be9e75e66e1cbadb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f04b9267351ae00bf804b17be9e75e66e1cbadb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fef67987cf502fe322e92ddce22eea7ac46b4d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef67987cf502fe322e92ddce22eea7ac46b4d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef67987cf502fe322e92ddce22eea7ac46b4d75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef67987cf502fe322e92ddce22eea7ac46b4d75/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b3c97eed75c1e7c492bc727e0016003c5809cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b3c97eed75c1e7c492bc727e0016003c5809cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b3c97eed75c1e7c492bc727e0016003c5809cc"}], "stats": {"total": 179, "additions": 128, "deletions": 51}, "files": [{"sha": "8852c9924fe4650d0aedfdc3e2470f8890a17e8a", "filename": "libgfortran/ISO_Fortran_binding-1-tmpl.h", "status": "renamed", "additions": 32, "deletions": 42, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FISO_Fortran_binding-1-tmpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FISO_Fortran_binding-1-tmpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FISO_Fortran_binding-1-tmpl.h?ref=fef67987cf502fe322e92ddce22eea7ac46b4d75", "patch": "@@ -43,8 +43,8 @@ extern \"C\" {\n #define CFI_attribute_other 2\n \n /* Error codes.\n-   CFI_INVALID_STRIDE should be defined in the standard because they are useful to the implementation of the functions.\n- */\n+   Note that CFI_FAILURE and CFI_INVALID_STRIDE are specific to GCC\n+   and not part of the Fortran standard   */\n #define CFI_SUCCESS 0\n #define CFI_FAILURE 1\n #define CFI_ERROR_BASE_ADDR_NULL 2\n@@ -159,48 +159,38 @@ extern int CFI_setpointer (CFI_cdesc_t *, CFI_cdesc_t *, const CFI_index_t []);\n #define CFI_type_other -1\n \n /* Types with kind parameter.\n-   The kind parameter represents the type's byte size. The exception is kind = 10, which has byte size of 64 but 80 bit precision. Complex variables are double the byte size of their real counterparts. The ucs4_char matches wchar_t if sizeof (wchar_t) == 4.\n+   The kind parameter represents the type's byte size.  The exception is\n+   real kind = 10, which has byte size of 128 bits but 80 bit precision.\n+   Complex variables are double the byte size of their real counterparts.\n+   The ucs4_char matches wchar_t if sizeof (wchar_t) == 4.\n  */\n #define CFI_type_char (CFI_type_Character + (1 << CFI_type_kind_shift))\n #define CFI_type_ucs4_char (CFI_type_Character + (4 << CFI_type_kind_shift))\n \n /* C-Fortran Interoperability types. */\n-#define CFI_type_signed_char (CFI_type_Integer + (1 << CFI_type_kind_shift))\n-#define CFI_type_short (CFI_type_Integer + (2 << CFI_type_kind_shift))\n-#define CFI_type_int (CFI_type_Integer + (4 << CFI_type_kind_shift))\n-#define CFI_type_long (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_long_long (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_size_t (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_int8_t (CFI_type_Integer + (1 << CFI_type_kind_shift))\n-#define CFI_type_int16_t (CFI_type_Integer + (2 << CFI_type_kind_shift))\n-#define CFI_type_int32_t (CFI_type_Integer + (4 << CFI_type_kind_shift))\n-#define CFI_type_int64_t (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_int_least8_t (CFI_type_Integer + (1 << CFI_type_kind_shift))\n-#define CFI_type_int_least16_t (CFI_type_Integer + (2 << CFI_type_kind_shift))\n-#define CFI_type_int_least32_t (CFI_type_Integer + (4 << CFI_type_kind_shift))\n-#define CFI_type_int_least64_t (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_int_fast8_t (CFI_type_Integer + (1 << CFI_type_kind_shift))\n-#define CFI_type_int_fast16_t (CFI_type_Integer + (2 << CFI_type_kind_shift))\n-#define CFI_type_int_fast32_t (CFI_type_Integer + (4 << CFI_type_kind_shift))\n-#define CFI_type_int_fast64_t (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_intmax_t (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_intptr_t (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_ptrdiff_t (CFI_type_Integer + (8 << CFI_type_kind_shift))\n-#define CFI_type_int128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n-#define CFI_type_int_least128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n-#define CFI_type_int_fast128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n-#define CFI_type_Bool (CFI_type_Logical + (1 << CFI_type_kind_shift))\n-#define CFI_type_float (CFI_type_Real + (4 << CFI_type_kind_shift))\n-#define CFI_type_double (CFI_type_Real + (8 << CFI_type_kind_shift))\n-#define CFI_type_long_double (CFI_type_Real + (10 << CFI_type_kind_shift))\n-#define CFI_type_float128 (CFI_type_Real + (16 << CFI_type_kind_shift))\n-#define CFI_type_float_Complex (CFI_type_Complex + (4 << CFI_type_kind_shift))\n-#define CFI_type_double_Complex (CFI_type_Complex + (8 << CFI_type_kind_shift))\n-#define CFI_type_long_double_Complex (CFI_type_Complex + (10 << CFI_type_kind_shift))\n-#define CFI_type_float128_Complex (CFI_type_Complex + (16 << CFI_type_kind_shift))\n-\n-#ifdef __cplusplus\n-}\n-#endif\n-\n-#endif /* ISO_FORTRAN_BINDING_H */\n+#define CFI_type_signed_char (CFI_type_Integer + (sizeof (char) << CFI_type_kind_shift))\n+#define CFI_type_short (CFI_type_Integer + (sizeof (short) << CFI_type_kind_shift))\n+#define CFI_type_int (CFI_type_Integer + (sizeof (int) << CFI_type_kind_shift))\n+#define CFI_type_long (CFI_type_Integer + (sizeof (long) << CFI_type_kind_shift))\n+#define CFI_type_long_long (CFI_type_Integer + (sizeof (long long) << CFI_type_kind_shift))\n+#define CFI_type_size_t (CFI_type_Integer + (sizeof (size_t) << CFI_type_kind_shift))\n+#define CFI_type_int8_t (CFI_type_Integer + (sizeof (int8_t) << CFI_type_kind_shift))\n+#define CFI_type_int16_t (CFI_type_Integer + (sizeof (int16_t) << CFI_type_kind_shift))\n+#define CFI_type_int32_t (CFI_type_Integer + (sizeof (int32_t) << CFI_type_kind_shift))\n+#define CFI_type_int64_t (CFI_type_Integer + (sizeof (int64_t) << CFI_type_kind_shift))\n+#define CFI_type_int_least8_t (CFI_type_Integer + (sizeof (int_least8_t) << CFI_type_kind_shift))\n+#define CFI_type_int_least16_t (CFI_type_Integer + (sizeof (int_least16_t) << CFI_type_kind_shift))\n+#define CFI_type_int_least32_t (CFI_type_Integer + (sizeof (int_least32_t) << CFI_type_kind_shift))\n+#define CFI_type_int_least64_t (CFI_type_Integer + (sizeof (int_least64_t) << CFI_type_kind_shift))\n+#define CFI_type_int_fast8_t (CFI_type_Integer + (sizeof (int_fast8_t) << CFI_type_kind_shift))\n+#define CFI_type_int_fast16_t (CFI_type_Integer + (sizeof (int_fast16_t) << CFI_type_kind_shift))\n+#define CFI_type_int_fast32_t (CFI_type_Integer + (sizeof (int_fast32_t) << CFI_type_kind_shift))\n+#define CFI_type_int_fast64_t (CFI_type_Integer + (sizeof (int_fast64_t) << CFI_type_kind_shift))\n+#define CFI_type_intmax_t (CFI_type_Integer + (sizeof (intmax_t) << CFI_type_kind_shift))\n+#define CFI_type_intptr_t (CFI_type_Integer + (sizeof (intptr_t) << CFI_type_kind_shift))\n+#define CFI_type_ptrdiff_t (CFI_type_Integer + (sizeof (ptrdiff_t) << CFI_type_kind_shift))\n+#define CFI_type_Bool (CFI_type_Logical + (sizeof (_Bool) << CFI_type_kind_shift))\n+#define CFI_type_float (CFI_type_Real + (sizeof (float) << CFI_type_kind_shift))\n+#define CFI_type_double (CFI_type_Real + (sizeof (double) << CFI_type_kind_shift))\n+#define CFI_type_float_Complex (CFI_type_Complex + (sizeof (float) << CFI_type_kind_shift))\n+#define CFI_type_double_Complex (CFI_type_Complex + (sizeof (double) << CFI_type_kind_shift))", "previous_filename": "libgfortran/ISO_Fortran_binding.h"}, {"sha": "ad88f8b1ad2269b82d5915f7eb1017fbdbe5eb6f", "filename": "libgfortran/ISO_Fortran_binding-2-tmpl.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FISO_Fortran_binding-2-tmpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FISO_Fortran_binding-2-tmpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FISO_Fortran_binding-2-tmpl.h?ref=fef67987cf502fe322e92ddce22eea7ac46b4d75", "patch": "@@ -0,0 +1,42 @@\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+\n+/* Note that -1 is used by CFI_type_other, hence, -2 is used for unavailable kinds.  */\n+\n+#if GFC_C_INT128_T_KIND == 16\n+#define CFI_type_int128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n+#define CFI_type_int_least128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n+#define CFI_type_int_fast128_t (CFI_type_Integer + (16 << CFI_type_kind_shift))\n+#elif GFC_C_INT128_T_KIND < 0\n+#define CFI_type_int128_t -2\n+#define CFI_type_int_least128_t -2\n+#define CFI_type_int_fast128_t -2\n+#else\n+#error \"Unexpected value for GFC_C_INT128_T_KIND\"\n+#endif \n+\n+#if GFC_C_LONG_DOUBLE_KIND == 16\n+#define CFI_type_long_double (CFI_type_Real + (16 << CFI_type_kind_shift))\n+#define CFI_type_long_double_Complex (CFI_type_Complex + (16 << CFI_type_kind_shift))\n+#elif GFC_C_LONG_DOUBLE_KIND == 10 \n+#define CFI_type_long_double (CFI_type_Real + (10 << CFI_type_kind_shift))\n+#define CFI_type_long_double_Complex (CFI_type_Complex + (10 << CFI_type_kind_shift))\n+#elif GFC_C_LONG_DOUBLE_KIND == 8 \n+#define CFI_type_long_double (CFI_type_Real + (8 << CFI_type_kind_shift))\n+#define CFI_type_long_double_Complex (CFI_type_Complex + (8 << CFI_type_kind_shift))\n+#elif GFC_C_LONG_DOUBLE_KIND < 0 \n+#define CFI_type_long_double -2\n+#define CFI_type_long_double_Complex -2\n+#else\n+#error \"Unexpected value for GFC_C_LONG_DOUBLE_KIND\"\n+#endif \n+\n+#if GFC_C_FLOAT128_KIND == 16\n+#define CFI_type_float128 (CFI_type_Real + (16 << CFI_type_kind_shift))\n+#define CFI_type_float128_Complex (CFI_type_Complex + (16 << CFI_type_kind_shift))\n+#elif GFC_C_FLOAT128_KIND < 0\n+#define CFI_type_float128 -2\n+#define CFI_type_float128_Complex -2\n+#else\n+#error \"Unexpected value for GFC_C_FLOAT128_KIND\"\n+#endif "}, {"sha": "aec4288a6045e1cf49a998c7f351ce4f15455f63", "filename": "libgfortran/ISO_Fortran_binding-3-tmpl.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FISO_Fortran_binding-3-tmpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FISO_Fortran_binding-3-tmpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FISO_Fortran_binding-3-tmpl.h?ref=fef67987cf502fe322e92ddce22eea7ac46b4d75", "patch": "@@ -0,0 +1,5 @@\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* ISO_FORTRAN_BINDING_H */"}, {"sha": "3546a3f3711ee6130522a4e11f5e8a3cdc1e7cec", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=fef67987cf502fe322e92ddce22eea7ac46b4d75", "patch": "@@ -30,8 +30,8 @@ version_arg =\n version_dep =\n endif\n \n-gfor_c_HEADERS = $(srcdir)/ISO_Fortran_binding.h\n-gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n+gfor_c_HEADERS = ISO_Fortran_binding.h\n+gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)$(MULTISUBDIR)/include\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n \t    $(lt_host_flags)\n@@ -817,6 +817,7 @@ gfor_built_src= $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_pow_c) $(i_pack_c) $(i_unpack_c) $(i_matmulavx128_c) \\\n     $(i_spread_c) selected_int_kind.inc selected_real_kind.inc kinds.h \\\n     $(i_cshift0_c) kinds.inc c99_protos.inc fpu-target.h fpu-target.inc \\\n+    ISO_Fortran_binding.h \\\n     $(i_cshift1a_c) $(i_maxloc0s_c) $(i_minloc0s_c) $(i_maxloc1s_c) \\\n     $(i_minloc1s_c) $(i_maxloc2s_c) $(i_minloc2s_c) $(i_maxvals_c) \\\n     $(i_maxval0s_c) $(i_minval0s_c) $(i_maxval1s_c) $(i_minval1s_c) \\\n@@ -1075,6 +1076,16 @@ fpu-target.inc: fpu-target.h $(srcdir)/libgfortran.h\n \tgrep '^#define GFC_FPE_' < $(top_srcdir)/../gcc/fortran/libgfortran.h > $@ || true\n \tgrep '^#define GFC_FPE_' < $(srcdir)/libgfortran.h >> $@ || true\n \n+ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n+\t\t       $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n+\t\t       $(srcdir)/ISO_Fortran_binding-3-tmpl.h \\\n+\t\t       kinds.inc\n+\t-rm -f $@\n+\tcp $(srcdir)/ISO_Fortran_binding-1-tmpl.h $@\n+\t$(COMPILE) -E -dD $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n+\t| grep '^#define CFI_type' >> $@\n+\tcat $(srcdir)/ISO_Fortran_binding-3-tmpl.h >> $@\n+\n ## A 'normal' build shouldn't need to regenerate these\n ## so we only include them in maintainer mode\n "}, {"sha": "a7d8e11b5e41028cdf45b8b31ef692068f194a19", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=fef67987cf502fe322e92ddce22eea7ac46b4d75", "patch": "@@ -698,6 +698,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -723,8 +724,8 @@ gcc_version := $(shell @get_gcc_base_ver@ $(top_srcdir)/../gcc/BASE-VER)\n @LIBGFOR_USE_SYMVER_FALSE@version_dep = \n @LIBGFOR_USE_SYMVER_GNU_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_dep = $(srcdir)/gfortran.map\n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_dep = gfortran.map-sun\n-gfor_c_HEADERS = $(srcdir)/ISO_Fortran_binding.h\n-gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n+gfor_c_HEADERS = ISO_Fortran_binding.h\n+gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)$(MULTISUBDIR)/include\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n \t    $(lt_host_flags)\n \n@@ -1381,6 +1382,7 @@ gfor_built_src = $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_pow_c) $(i_pack_c) $(i_unpack_c) $(i_matmulavx128_c) \\\n     $(i_spread_c) selected_int_kind.inc selected_real_kind.inc kinds.h \\\n     $(i_cshift0_c) kinds.inc c99_protos.inc fpu-target.h fpu-target.inc \\\n+    ISO_Fortran_binding.h \\\n     $(i_cshift1a_c) $(i_maxloc0s_c) $(i_minloc0s_c) $(i_maxloc1s_c) \\\n     $(i_minloc1s_c) $(i_maxloc2s_c) $(i_minloc2s_c) $(i_maxvals_c) \\\n     $(i_maxval0s_c) $(i_minval0s_c) $(i_maxval1s_c) $(i_minval1s_c) \\\n@@ -7040,6 +7042,16 @@ fpu-target.inc: fpu-target.h $(srcdir)/libgfortran.h\n \tgrep '^#define GFC_FPE_' < $(top_srcdir)/../gcc/fortran/libgfortran.h > $@ || true\n \tgrep '^#define GFC_FPE_' < $(srcdir)/libgfortran.h >> $@ || true\n \n+ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n+\t\t       $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n+\t\t       $(srcdir)/ISO_Fortran_binding-3-tmpl.h \\\n+\t\t       kinds.inc\n+\t-rm -f $@\n+\tcp $(srcdir)/ISO_Fortran_binding-1-tmpl.h $@\n+\t$(COMPILE) -E -dD $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n+\t| grep '^#define CFI_type' >> $@\n+\tcat $(srcdir)/ISO_Fortran_binding-3-tmpl.h >> $@\n+\n @MAINTAINER_MODE_TRUE@$(i_all_c): m4/all.m4 $(I_M4_DEPS2)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 all.m4 > $@\n "}, {"sha": "f4244f006d53b3501deb97a093c07cdb667d875b", "filename": "libgfortran/mk-kinds-h.sh", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2Fmk-kinds-h.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2Fmk-kinds-h.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fmk-kinds-h.sh?ref=fef67987cf502fe322e92ddce22eea7ac46b4d75", "patch": "@@ -35,8 +35,8 @@ for k in $possible_integer_kinds; do\n     echo \"typedef ${prefix}int${s}_t GFC_INTEGER_${k};\"\n     echo \"typedef ${prefix}uint${s}_t GFC_UINTEGER_${k};\"\n     echo \"typedef GFC_INTEGER_${k} GFC_LOGICAL_${k};\"\n-    echo \"#define HAVE_GFC_LOGICAL_${k}\"\n-    echo \"#define HAVE_GFC_INTEGER_${k}\"\n+    echo \"#define HAVE_GFC_LOGICAL_${k} 1\"\n+    echo \"#define HAVE_GFC_INTEGER_${k} 1\"\n     echo \"\"\n   fi\n   rm -f tmp$$.*\n@@ -98,8 +98,8 @@ for k in $possible_real_kinds; do\n     # Output the information we've gathered\n     echo \"typedef ${ctype} GFC_REAL_${k};\"\n     echo \"typedef ${cplxtype} GFC_COMPLEX_${k};\"\n-    echo \"#define HAVE_GFC_REAL_${k}\"\n-    echo \"#define HAVE_GFC_COMPLEX_${k}\"\n+    echo \"#define HAVE_GFC_REAL_${k} 1\"\n+    echo \"#define HAVE_GFC_COMPLEX_${k} 1\"\n     echo \"#define GFC_REAL_${k}_HUGE ${huge}${suffix}\"\n     echo \"#define GFC_REAL_${k}_LITERAL_SUFFIX ${suffix}\"\n     if [ \"x$suffix\" = \"x\" ]; then\n@@ -114,6 +114,23 @@ for k in $possible_real_kinds; do\n   rm -f tmp$$.*\n done\n \n+# For ISO_Fortran_binding.h\n+for k in \"C_LONG_DOUBLE\" \"C_FLOAT128\" \"C_INT128_T\"; do\n+  fname=\"tmp$$.val\"\n+  echo \"use iso_c_binding, only: $k; end\" > tmp$$.f90\n+  if $compile -S -fdump-parse-tree tmp$$.f90 > \"$fname\"; then\n+    kind=`grep \"value:\" \"$fname\" |grep value: | sed -e 's/.*value: *//'`\n+    if [ \"x$kind\" = \"x\" ]; then\n+      echo \"ERROR: Failed to extract kind for $k\" 1>&2\n+      exit 1\n+    fi\n+    echo \"#define GFC_${k}_KIND ${kind}\"\n+  else\n+    echo \"ERROR: Failed to extract kind for $k\" 1>&2\n+    exit 1\n+  fi\n+  rm -f tmp$$.*\n+done\n \n # After this, we include a header that can override some of the\n # autodetected settings."}, {"sha": "9c871d3e9891b44ab7ab87978d2c5130b0bc4095", "filename": "libgfortran/runtime/ISO_Fortran_binding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef67987cf502fe322e92ddce22eea7ac46b4d75/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2FISO_Fortran_binding.c?ref=fef67987cf502fe322e92ddce22eea7ac46b4d75", "patch": "@@ -27,7 +27,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"libgfortran.h\"\n-#include <ISO_Fortran_binding.h>\n+#include \"ISO_Fortran_binding.h\"\n #include <string.h>\n \n extern void cfi_desc_to_gfc_desc (gfc_array_void *, CFI_cdesc_t **);"}]}