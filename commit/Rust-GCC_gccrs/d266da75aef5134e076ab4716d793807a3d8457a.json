{"sha": "d266da75aef5134e076ab4716d793807a3d8457a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2NmRhNzVhZWY1MTM0ZTA3NmFiNDcxNmQ3OTM4MDdhM2Q4NDU3YQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-06-25T18:51:50Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-06-25T18:51:50Z"}, "message": "V.4 PIC changes\n\nFrom-SVN: r12331", "tree": {"sha": "ed9ab079e43263e635b309192aa7af70116a4583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed9ab079e43263e635b309192aa7af70116a4583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d266da75aef5134e076ab4716d793807a3d8457a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d266da75aef5134e076ab4716d793807a3d8457a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d266da75aef5134e076ab4716d793807a3d8457a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d266da75aef5134e076ab4716d793807a3d8457a/comments", "author": null, "committer": null, "parents": [{"sha": "24f30767292e7e61f33f7337afc1c9ff55cb0bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f30767292e7e61f33f7337afc1c9ff55cb0bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f30767292e7e61f33f7337afc1c9ff55cb0bcb"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "6b753ca1239f0e1fb9755f1f1815ea29a2b66ba4", "filename": "gcc/config/rs6000/eabi-ci.asm", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266da75aef5134e076ab4716d793807a3d8457a/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266da75aef5134e076ab4716d793807a3d8457a/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm?ref=d266da75aef5134e076ab4716d793807a3d8457a", "patch": "@@ -44,10 +44,7 @@\n \t.section \".got\",\"aw\"\n \t.globl\t__GOT_START__\n \t.type\t__GOT_START__,@object\n-\t.weak\t_GLOBAL_OFFSET_TABLE_\n-\t.type\t_GLOBAL_OFFSET_TABLE_,@object\n __GOT_START__:\n-_GLOBAL_OFFSET_TABLE_:\n \n \t.section \".got1\",\"aw\"\n \t.globl\t__GOT1_START__"}, {"sha": "5a097d6944923f431ebbf5280a08a97a77f2d2ac", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266da75aef5134e076ab4716d793807a3d8457a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266da75aef5134e076ab4716d793807a3d8457a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d266da75aef5134e076ab4716d793807a3d8457a", "patch": "@@ -2047,6 +2047,42 @@ ccr_bit (op, scc_p)\n       abort ();\n     }\n }\n+\f\n+/* By generating position-independent code, when two different\n+   programs (A and B) share a common library (libC.a), the text of\n+   the library can be shared whether or not the library is linked at\n+   the same address for both programs.  In some of these\n+   environments, position-independent code requires not only the use\n+   of different addressing modes, but also special code to enable the\n+   use of these addressing modes.\n+\n+   The `FINALIZE_PIC' macro serves as a hook to emit these special\n+   codes once the function is being compiled into assembly code, but\n+   not before.  (It is not done before, because in the case of\n+   compiling an inline function, it would lead to multiple PIC\n+   prologues being included in functions which used inline functions\n+   and were compiled to assembly language.)  */\n+\n+void\n+rs6000_finalize_pic ()\n+{\n+  if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n+    {\n+      /* If a PIC register has been created, insert the pic initialization\n+\t at the function beginning.  */\n+      if (pic_offset_table_rtx)\n+\t{\n+\t  rtx insn = get_insns ();\n+\t  rtx init = gen_init_v4_pic (pic_offset_table_rtx);\n+\n+\t  if (GET_CODE (insn) == NOTE)\n+\t    insn = next_nonnote_insn (insn);\n+\n+\t  emit_insn_before (init, insn);\n+\t}\n+    }\n+}\n+\n \f\n /* Print an operand.  Recognize special options, documented below.  */\n "}, {"sha": "f157f0ec01bf53bd540c74139e1a5332d016b9ea", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266da75aef5134e076ab4716d793807a3d8457a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266da75aef5134e076ab4716d793807a3d8457a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d266da75aef5134e076ab4716d793807a3d8457a", "patch": "@@ -1934,7 +1934,7 @@ typedef struct rs6000_args\n    prologues being included in functions which used inline functions\n    and were compiled to assembly language.)  */\n \n-/* #define FINALIZE_PIC */\n+#define FINALIZE_PIC rs6000_finalize_pic ()\n \n /* A C expression that is nonzero if X is a legitimate immediate\n    operand on the target machine when generating position independent\n@@ -3070,13 +3070,13 @@ extern int registers_ok_for_quad_peep ();\n extern int addrs_ok_for_quad_peep ();\n extern enum reg_class secondary_reload_class ();\n extern int ccr_bit ();\n+extern void rs6000_finalize_pic ();\n extern void print_operand ();\n extern void print_operand_address ();\n extern int first_reg_to_save ();\n extern int first_fp_reg_to_save ();\n extern int rs6000_makes_calls ();\n extern rs6000_stack_t *rs6000_stack_info ();\n-extern void svr4_traceback ();\n extern void output_prolog ();\n extern void output_epilog ();\n extern void output_toc ();"}, {"sha": "be5c4f354c4a05f092dedd22d68f14f036ad4b00", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d266da75aef5134e076ab4716d793807a3d8457a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d266da75aef5134e076ab4716d793807a3d8457a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d266da75aef5134e076ab4716d793807a3d8457a", "patch": "@@ -4953,10 +4953,7 @@\n   \"\n {\n   if (!pic_offset_table_rtx)\n-    {\n-      pic_offset_table_rtx = gen_reg_rtx (SImode);\n-      emit_insn (gen_init_v4_pic (pic_offset_table_rtx));\n-    }\n+    pic_offset_table_rtx = gen_reg_rtx (SImode);\n \n   operands[2] = pic_offset_table_rtx;\n   if (flag_pic > 1)\n@@ -7179,7 +7176,7 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n-  return (flag_pic) ? \\\"bl %z0@plt\\\" : \\\"bl %z0\\\";\n+  return \\\"bl %z0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -7249,7 +7246,7 @@\n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n-  return (flag_pic) ? \\\"bl %z1@plt\\\" : \\\"bl %z1\\\";\n+  return \\\"bl %z1\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4,8\")])"}]}