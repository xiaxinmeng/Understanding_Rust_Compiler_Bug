{"sha": "0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5MGQ0OGIzNDZkZmQ2ZDQxY2VlYmFhNThmMmRkNjdjOGZjNTk5Mw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2017-04-28T20:15:00Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2017-04-28T20:15:00Z"}, "message": "configure.ac (SYSTEM_HEADER_DIR, [...]): Set correctly.\n\n2017-04-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * configure.ac (SYSTEM_HEADER_DIR, BUILD_SYSTEM_HEADER_DIR,\n        target_header_dir): Set correctly.\n        * configure: Regenerated.\n        * Makefile.in (BUILD_SYSTEM_HEADER_DIR): New make variabe.\n        (LIMITS_H_TEST, if_multiarch, stmp-fixinc): Use BUILD_SYSTEM_HEADER_DIR\n        instead of SYSTEM_HEADER_DIR.\n\nFrom-SVN: r247397", "tree": {"sha": "6154a7334bc509d3a4008c2bc9a26da4f4693ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6154a7334bc509d3a4008c2bc9a26da4f4693ff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4accc823533141ba3496d7edf62ec32a02faa8a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4accc823533141ba3496d7edf62ec32a02faa8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4accc823533141ba3496d7edf62ec32a02faa8a2"}], "stats": {"total": 125, "additions": 57, "deletions": 68}, "files": [{"sha": "9f885b429de165d61e3a37e205977ac77803f74b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993", "patch": "@@ -1,3 +1,12 @@\n+2017-04-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* configure.ac (SYSTEM_HEADER_DIR, BUILD_SYSTEM_HEADER_DIR,\n+\ttarget_header_dir): Set correctly.\n+\t* configure: Regenerated.\n+\t* Makefile.in (BUILD_SYSTEM_HEADER_DIR): New make variabe.\n+\t(LIMITS_H_TEST, if_multiarch, stmp-fixinc): Use BUILD_SYSTEM_HEADER_DIR\n+\tinstead of SYSTEM_HEADER_DIR.\n+\n 2017-04-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-cp.c (perform_estimation_of_a_value): Turn time to sreal."}, {"sha": "2411671cea387a5412d32a354dea1cc151085db7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993", "patch": "@@ -517,11 +517,14 @@ CROSS_SYSTEM_HEADER_DIR = @CROSS_SYSTEM_HEADER_DIR@\n # macro is also used in a double-quoted context.\n SYSTEM_HEADER_DIR = `echo @SYSTEM_HEADER_DIR@ | sed -e :a -e 's,[^/]*/\\.\\.\\/,,' -e ta`\n \n+# Path to the system headers on the build machine.\n+BUILD_SYSTEM_HEADER_DIR = `echo @BUILD_SYSTEM_HEADER_DIR@ | sed -e :a -e 's,[^/]*/\\.\\.\\/,,' -e ta`\n+\n # Control whether to run fixincludes.\n STMP_FIXINC = @STMP_FIXINC@\n \n # Test to see whether <limits.h> exists in the system header files.\n-LIMITS_H_TEST = [ -f $(SYSTEM_HEADER_DIR)/limits.h ]\n+LIMITS_H_TEST = [ -f $(BUILD_SYSTEM_HEADER_DIR)/limits.h ]\n \n # Directory for prefix to system directories, for\n # each of $(system_prefix)/usr/include, $(system_prefix)/usr/lib, etc.\n@@ -572,7 +575,7 @@ ifeq ($(enable_multiarch),yes)\n else\n   ifeq ($(enable_multiarch),auto)\n     # SYSTEM_HEADER_DIR is makefile syntax, cannot be evaluated in configure.ac\n-    if_multiarch = $(if $(wildcard $(shell echo $(SYSTEM_HEADER_DIR))/../../usr/lib/*/crti.o),$(1))\n+    if_multiarch = $(if $(wildcard $(shell echo $(BUILD_SYSTEM_HEADER_DIR))/../../usr/lib/*/crti.o),$(1))\n   else\n     if_multiarch =\n   endif\n@@ -2993,11 +2996,11 @@ stmp-fixinc: gsyslimits.h macro_list fixinc_list \\\n \t    sysroot_headers_suffix=`echo $${ml} | sed -e 's/;.*$$//'`; \\\n \t    multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \\\n \t    fix_dir=include-fixed$${multi_dir}; \\\n-\t    if ! $(inhibit_libc) && test ! -d ${SYSTEM_HEADER_DIR}; then \\\n+\t    if ! $(inhibit_libc) && test ! -d ${BUILD_SYSTEM_HEADER_DIR}; then \\\n \t      echo The directory that should contain system headers does not exist: >&2 ; \\\n-\t      echo \"  ${SYSTEM_HEADER_DIR}\" >&2 ; \\\n+\t      echo \"  ${BUILD_SYSTEM_HEADER_DIR}\" >&2 ; \\\n \t      tooldir_sysinc=`echo \"${gcc_tooldir}/sys-include\" | sed -e :a -e \"s,[^/]*/\\.\\.\\/,,\" -e ta`; \\\n-\t      if test \"x${SYSTEM_HEADER_DIR}\" = \"x$${tooldir_sysinc}\"; \\\n+\t      if test \"x${BUILD_SYSTEM_HEADER_DIR}\" = \"x$${tooldir_sysinc}\"; \\\n \t      then sleep 1; else exit 1; fi; \\\n \t    fi; \\\n \t    $(mkinstalldirs) $${fix_dir}; \\\n@@ -3008,7 +3011,7 @@ stmp-fixinc: gsyslimits.h macro_list fixinc_list \\\n \t      export TARGET_MACHINE srcdir SHELL MACRO_LIST && \\\n \t      cd $(build_objdir)/fixincludes && \\\n \t      $(SHELL) ./fixinc.sh \"$${gcc_dir}/$${fix_dir}\" \\\n-\t        $(SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS) ); \\\n+\t        $(BUILD_SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS) ); \\\n \t    rm -f $${fix_dir}/syslimits.h; \\\n \t    if [ -f $${fix_dir}/limits.h ]; then \\\n \t      mv $${fix_dir}/limits.h $${fix_dir}/syslimits.h; \\"}, {"sha": "bde3dd8f77a3b1925d13fe1e8826597d9d3f0a87", "filename": "gcc/configure", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993", "patch": "@@ -719,6 +719,7 @@ BUILD_CFLAGS\n CXX_FOR_BUILD\n CC_FOR_BUILD\n inhibit_libc\n+BUILD_SYSTEM_HEADER_DIR\n SYSTEM_HEADER_DIR\n ALL\n CROSS\n@@ -12214,41 +12215,29 @@ done\n CROSS=\n ALL=all.internal\n SYSTEM_HEADER_DIR='$(NATIVE_SYSTEM_HEADER_DIR)'\n+BUILD_SYSTEM_HEADER_DIR=$SYSTEM_HEADER_DIR\n \n-if test \"x$with_build_sysroot\" != x; then\n-  build_system_header_dir=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'\n-else\n-  # This value is used, even on a native system, because\n-  # CROSS_SYSTEM_HEADER_DIR is just\n-  # $(TARGET_SYSTEM_ROOT)$(NATIVE_SYSTEM_HEADER_DIR).\n-  build_system_header_dir='$(CROSS_SYSTEM_HEADER_DIR)'\n-fi\n+if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x ||\n+   test x$build != x$host || test \"x$with_build_sysroot\" != x; then\n+  if test \"x$with_build_sysroot\" != x; then\n+    BUILD_SYSTEM_HEADER_DIR=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'\n+  else\n+    BUILD_SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'\n+  fi\n \n-if test x$host != x$target\n-then\n-\tCROSS=\"-DCROSS_DIRECTORY_STRUCTURE\"\n-\tALL=all.cross\n-\tSYSTEM_HEADER_DIR=$build_system_header_dir\n-\tcase $target in\n-\t\t*-*-mingw*)\n-\t\t\tif test \"x$with_headers\" = x; then\n-\t\t\t\twith_headers=yes\n-\t\t\tfi\n-\t\t\t;;\n-\t\t*)\n-\t\t\t;;\n-\tesac\n-elif test \"x$TARGET_SYSTEM_ROOT\" != x; then\n-        SYSTEM_HEADER_DIR=$build_system_header_dir\n-fi\n+  if test x$host != x$target\n+  then\n+    CROSS=\"-DCROSS_DIRECTORY_STRUCTURE\"\n+    ALL=all.cross\n+    SYSTEM_HEADER_DIR=$BUILD_SYSTEM_HEADER_DIR\n+  elif test \"x$TARGET_SYSTEM_ROOT\" != x; then\n+    SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'\n+  fi\n \n-if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n-  if test \"x$with_headers\" != x && test \"x$with_headers\" != xyes; then\n-    target_header_dir=$with_headers\n+  if test \"x$with_build_sysroot\" != \"x\"; then\n+    target_header_dir=\"${with_build_sysroot}${native_system_header_dir}\"\n   elif test \"x$with_sysroot\" = x; then\n     target_header_dir=\"${test_exec_prefix}/${target_noncanonical}/sys-include\"\n-  elif test \"x$with_build_sysroot\" != \"x\"; then\n-    target_header_dir=\"${with_build_sysroot}${native_system_header_dir}\"\n   elif test \"x$with_sysroot\" = xyes; then\n     target_header_dir=\"${test_exec_prefix}/${target_noncanonical}/sys-root${native_system_header_dir}\"\n   else\n@@ -18433,7 +18422,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18436 \"configure\"\n+#line 18425 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18539,7 +18528,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18542 \"configure\"\n+#line 18531 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "8b6a2ed3e2028b5eee4f968604d5a690dc899d00", "filename": "gcc/configure.ac", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=0c90d48b346dfd6d41ceebaa58f2dd67c8fc5993", "patch": "@@ -1998,41 +1998,29 @@ done\n CROSS=\t\t\t\t\t\tAC_SUBST(CROSS)\n ALL=all.internal\t\t\t\tAC_SUBST(ALL)\n SYSTEM_HEADER_DIR='$(NATIVE_SYSTEM_HEADER_DIR)'\tAC_SUBST(SYSTEM_HEADER_DIR)\n+BUILD_SYSTEM_HEADER_DIR=$SYSTEM_HEADER_DIR\tAC_SUBST(BUILD_SYSTEM_HEADER_DIR)\n \n-if test \"x$with_build_sysroot\" != x; then\n-  build_system_header_dir=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'\n-else\n-  # This value is used, even on a native system, because \n-  # CROSS_SYSTEM_HEADER_DIR is just \n-  # $(TARGET_SYSTEM_ROOT)$(NATIVE_SYSTEM_HEADER_DIR).\n-  build_system_header_dir='$(CROSS_SYSTEM_HEADER_DIR)'\n-fi\n+if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x ||\n+   test x$build != x$host || test \"x$with_build_sysroot\" != x; then\n+  if test \"x$with_build_sysroot\" != x; then\n+    BUILD_SYSTEM_HEADER_DIR=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'\n+  else\n+    BUILD_SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'\n+  fi\n \n-if test x$host != x$target\n-then\n-\tCROSS=\"-DCROSS_DIRECTORY_STRUCTURE\"\n-\tALL=all.cross\n-\tSYSTEM_HEADER_DIR=$build_system_header_dir\n-\tcase $target in\n-\t\t*-*-mingw*)\n-\t\t\tif test \"x$with_headers\" = x; then\n-\t\t\t\twith_headers=yes\n-\t\t\tfi\n-\t\t\t;;\n-\t\t*)\n-\t\t\t;;\n-\tesac\n-elif test \"x$TARGET_SYSTEM_ROOT\" != x; then\n-        SYSTEM_HEADER_DIR=$build_system_header_dir \n-fi\n+  if test x$host != x$target\n+  then\n+    CROSS=\"-DCROSS_DIRECTORY_STRUCTURE\"\n+    ALL=all.cross\n+    SYSTEM_HEADER_DIR=$BUILD_SYSTEM_HEADER_DIR\n+  elif test \"x$TARGET_SYSTEM_ROOT\" != x; then\n+    SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'\n+  fi\n \n-if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n-  if test \"x$with_headers\" != x && test \"x$with_headers\" != xyes; then\n-    target_header_dir=$with_headers\n+  if test \"x$with_build_sysroot\" != \"x\"; then\n+    target_header_dir=\"${with_build_sysroot}${native_system_header_dir}\"\n   elif test \"x$with_sysroot\" = x; then\n     target_header_dir=\"${test_exec_prefix}/${target_noncanonical}/sys-include\"\n-  elif test \"x$with_build_sysroot\" != \"x\"; then\n-    target_header_dir=\"${with_build_sysroot}${native_system_header_dir}\"\n   elif test \"x$with_sysroot\" = xyes; then\n     target_header_dir=\"${test_exec_prefix}/${target_noncanonical}/sys-root${native_system_header_dir}\"\n   else"}]}