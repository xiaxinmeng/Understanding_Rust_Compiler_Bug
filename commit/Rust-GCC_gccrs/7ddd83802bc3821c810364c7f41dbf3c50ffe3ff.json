{"sha": "7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkZDgzODAyYmMzODIxYzgxMDM2NGM3ZjQxZGJmM2M1MGZmZTNmZg==", "commit": {"author": {"name": "Gary Benson", "email": "gbenson@redhat.com", "date": "2006-11-21T16:18:08Z"}, "committer": {"name": "Gary Benson", "email": "gary@gcc.gnu.org", "date": "2006-11-21T16:18:08Z"}, "message": "Security.java: Merge with classpath.\n\n2006-11-21  Gary Benson  <gbenson@redhat.com>\n\n\t* java/security/Security.java: Merge with classpath.\n\t* java/lang/Package.java: Likewise.\n\t* java/lang/Class.java (getDeclaredAnnotations): New method.\n\nFrom-SVN: r119057", "tree": {"sha": "8ba92a066883da898010d22e9eada90fb4b695b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba92a066883da898010d22e9eada90fb4b695b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/comments", "author": null, "committer": null, "parents": [{"sha": "0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2229b0b06b8799aaf9a982c66a1175d3ea8a28"}], "stats": {"total": 529, "additions": 303, "deletions": 226}, "files": [{"sha": "3a3dd52d5688ed8e06e6b6ae8924503899855fe3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "patch": "@@ -1,3 +1,9 @@\n+2006-11-21  Gary Benson  <gbenson@redhat.com>\n+\n+\t* java/security/Security.java: Merge with classpath.\n+\t* java/lang/Package.java: Likewise.\n+\t* java/lang/Class.java (getDeclaredAnnotations): New method.\n+\n 2006-11-20  David Daney  <ddaney@avtrex.com>\n \n \t* include/mips-signal.h (sys/syscall.h): Do not include."}, {"sha": "f301f3584271003a5bd8ce2d34536a77fbf53f3a", "filename": "libjava/java/lang/Class.java", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/libjava%2Fjava%2Flang%2FClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/libjava%2Fjava%2Flang%2FClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.java?ref=7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "patch": "@@ -40,6 +40,7 @@\n \n import java.io.InputStream;\n import java.io.Serializable;\n+import java.lang.annotation.Annotation;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.GenericDeclaration;\n@@ -948,6 +949,23 @@ public String getSimpleName()\n     return \"\";\n   }\n \n+  /**\n+   * Returns all annotations directly defined by this class.  If there are\n+   * no annotations associated with this class, then a zero-length array\n+   * will be returned.  The returned array may be modified by the client\n+   * code, but this will have no effect on the annotation content of this\n+   * class, and hence no effect on the return value of this method for\n+   * future callers.\n+   *\n+   * @return the annotations directly defined by this class.\n+   * @since 1.5\n+   */\n+  public Annotation[] getDeclaredAnnotations()\n+  {\n+    // FIXME write real implementation\n+    return new Annotation[0];\n+  }\n+\n   /**\n    * Returns the class which immediately encloses this class.  If this class\n    * is a top-level class, this method returns <code>null</code>."}, {"sha": "892380f9aa804a6c7e1e9d04d49160fc31661c4c", "filename": "libjava/java/lang/Package.java", "status": "modified", "additions": 102, "deletions": 4, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/libjava%2Fjava%2Flang%2FPackage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/libjava%2Fjava%2Flang%2FPackage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FPackage.java?ref=7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "patch": "@@ -1,5 +1,6 @@\n /* Package.java -- information about a package\n-   Copyright (C) 2000, 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2005, 2006\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,6 +38,8 @@\n \n package java.lang;\n \n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n import java.net.URL;\n import java.util.NoSuchElementException;\n import java.util.StringTokenizer;\n@@ -68,9 +71,10 @@\n  * @see ClassLoader#definePackage(String, String, String, String, String,\n  *      String, String, URL)\n  * @since 1.2\n- * @status updated to 1.4\n+ * @status updated to 1.5\n  */\n public class Package\n+  implements AnnotatedElement\n {\n   /** The name of the Package */\n   private final String name;\n@@ -96,6 +100,20 @@\n   /** If sealed the origin of the package classes, otherwise null */\n   private final URL sealed;\n \n+  /** The class loader that defined this package */\n+  private ClassLoader loader;\n+\n+  /** @deprecated Please use the other constructor that takes the class loader\n+   *              that defines the Package.\n+   */\n+  Package(String name,\n+\t  String specTitle, String specVendor, String specVersion,\n+\t  String implTitle, String implVendor, String implVersion, URL sealed)\n+  {\n+    this(name, specTitle, specVendor, specVersion, implTitle, implVendor,\n+         implVersion, sealed, null);\n+  }\n+\n   /**\n    * A package local constructor for the Package class. All parameters except\n    * the <code>name</code> of the package may be <code>null</code>.\n@@ -113,7 +131,8 @@\n    */\n   Package(String name,\n \t  String specTitle, String specVendor, String specVersion,\n-\t  String implTitle, String implVendor, String implVersion, URL sealed)\n+\t  String implTitle, String implVendor, String implVersion, URL sealed,\n+          ClassLoader loader)\n   {\n     if (name == null)\n       throw new IllegalArgumentException(\"null Package name\");\n@@ -126,6 +145,7 @@\n     this.specVendor = specVendor;\n     this.specVersion = specVersion;\n     this.sealed = sealed;\n+    this.loader = loader;\n   }\n \n   /**\n@@ -231,7 +251,7 @@ public boolean isSealed(URL url)\n    *\n    * @return true if the version is compatible, false otherwise\n    *\n-   * @Throws NumberFormatException if either version string is invalid\n+   * @throws NumberFormatException if either version string is invalid\n    * @throws NullPointerException if either version string is null\n    */\n   public boolean isCompatibleWith(String version)\n@@ -314,4 +334,82 @@ public String toString()\n     return (\"package \" + name + (specTitle == null ? \"\" : \", \" + specTitle)\n \t    + (specVersion == null ? \"\" : \", version \" + specVersion));\n   }\n+\n+  /**\n+   * Returns this package's annotation for the specified annotation type,\n+   * or <code>null</code> if no such annotation exists.\n+   *\n+   * @param annotationClass the type of annotation to look for.\n+   * @return this package's annotation for the specified type, or\n+   *         <code>null</code> if no such annotation exists.\n+   * @since 1.5\n+   */\n+  /* FIXME[GENERICS]: <T extends Annotation> T getAnnotation(Class <T>) */\n+  public Annotation getAnnotation(Class annotationClass)\n+  {\n+    Annotation foundAnnotation = null;\n+    Annotation[] annotations = getAnnotations();\n+    for (int i = 0; i < annotations.length; i++)\n+      if (annotations[i].annotationType() == annotationClass)\n+\tfoundAnnotation = annotations[i];\n+    return foundAnnotation;\n+  }\n+\n+  /**\n+   * Returns all annotations associated with this package.  If there are\n+   * no annotations associated with this package, then a zero-length array\n+   * will be returned.  The returned array may be modified by the client\n+   * code, but this will have no effect on the annotation content of this\n+   * package, and hence no effect on the return value of this method for\n+   * future callers.\n+   *\n+   * @return this package' annotations.\n+   * @since 1.5\n+   */\n+  public Annotation[] getAnnotations()\n+  {\n+    /** All a package's annotations are declared within it. */\n+    return getDeclaredAnnotations();\n+  }\n+\n+  /**\n+   * Returns all annotations directly defined by this package.  If there are\n+   * no annotations associated with this package, then a zero-length array\n+   * will be returned.  The returned array may be modified by the client\n+   * code, but this will have no effect on the annotation content of this\n+   * package, and hence no effect on the return value of this method for\n+   * future callers.\n+   *\n+   * @return the annotations directly defined by this package.\n+   * @since 1.5\n+   */\n+  public Annotation[] getDeclaredAnnotations()\n+  {\n+    try\n+      {\n+        Class pkgInfo = Class.forName(name + \".package-info\", false, loader);\n+        return pkgInfo.getDeclaredAnnotations();\n+      }\n+    catch (ClassNotFoundException _)\n+      {\n+        return new Annotation[0];\n+      }\n+  }\n+\n+  /**\n+   * Returns true if an annotation for the specified type is associated\n+   * with this package.  This is primarily a short-hand for using marker\n+   * annotations.\n+   *\n+   * @param annotationClass the type of annotation to look for.\n+   * @return true if an annotation exists for the specified type.\n+   * @since 1.5\n+   */\n+  /* FIXME[GENERICS]: Signature is Class<? extends Annotation> */\n+  public boolean isAnnotationPresent(Class\n+\t\t\t\t     annotationClass)\n+  {\n+    return getAnnotation(annotationClass) != null;\n+  }\n+\n } // class Package"}, {"sha": "630a55412db1528fe756fc9d0da07c1615847c45", "filename": "libjava/java/security/Security.java", "status": "modified", "additions": 177, "deletions": 222, "changes": 399, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/libjava%2Fjava%2Fsecurity%2FSecurity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff/libjava%2Fjava%2Fsecurity%2FSecurity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurity.java?ref=7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "patch": "@@ -61,7 +61,7 @@\n \n /**\n  * This class centralizes all security properties and common security methods.\n- * One of its primary uses is to manage providers.\n+ * One of its primary uses is to manage security providers.\n  *\n  * @author Mark Benvenuto (ivymccough@worldnet.att.net)\n  */\n@@ -102,7 +102,12 @@\n \t\t      System.err.println\n \t\t\t  (\"         Falling back to standard GNU security provider\");\n \t\t  }\n+              // Note that this matches our classpath.security file.\n \t      providers.addElement (new gnu.java.security.provider.Gnu());\n+\t      providers.addElement(new gnu.javax.crypto.jce.GnuCrypto());\n+              providers.addElement(new gnu.javax.crypto.jce.GnuSasl());\n+              providers.addElement(new gnu.javax.net.ssl.provider.Jessie());\n+              providers.addElement(new gnu.javax.security.auth.callback.GnuCallbacks());\n \t  }\n     }\n   // This class can't be instantiated.\n@@ -111,9 +116,9 @@ private Security()\n   }\n \n   /**\n-   * Tries to load the vender specific security providers from the given\n-   * base URL. Returns true if the resource could be read and completely\n-   * parsed successfully, false otherwise.\n+   * Tries to load the vender specific security providers from the given base\n+   * URL. Returns true if the resource could be read and completely parsed\n+   * successfully, false otherwise.\n    */\n   private static boolean loadProviders(String baseUrl, String vendor)\n   {\n@@ -134,7 +139,8 @@ private static boolean loadProviders(String baseUrl, String vendor)\n \t    Exception exception = null;\n \t    try\n \t      {\n-\t\tproviders.addElement(Class.forName(name).newInstance());\n+            ClassLoader sys = ClassLoader.getSystemClassLoader();\n+\t\tproviders.addElement(Class.forName(name, true, sys).newInstance());\n \t      }\n \t    catch (ClassNotFoundException x)\n \t      {\n@@ -167,22 +173,18 @@ private static boolean loadProviders(String baseUrl, String vendor)\n   }\n \n   /**\n-   * Gets a specified property for an algorithm. The algorithm name should be a\n-   * standard name. See Appendix A in the Java Cryptography Architecture API\n-   * Specification &amp; Reference for information about standard algorithm\n-   * names. One possible use is by specialized algorithm parsers, which may map\n-   * classes to algorithms which they understand (much like {@link Key} parsers\n-   * do).\n-   *\n-   * @param algName the algorithm name.\n-   * @param propName the name of the property to get.\n-   * @return the value of the specified property.\n-   * @deprecated This method used to return the value of a proprietary property\n-   * in the master file of the \"SUN\" Cryptographic Service Provider in order to\n-   * determine how to parse algorithm-specific parameters. Use the new\n-   * provider-based and algorithm-independent {@link AlgorithmParameters} and\n-   * {@link KeyFactory} engine classes (introduced in the Java 2 platform)\n-   * instead.\n+   * Returns the value associated to a designated property name for a given\n+   * algorithm.\n+   * \n+   * @param algName\n+   *          the algorithm name.\n+   * @param propName\n+   *          the name of the property to return.\n+   * @return the value of the specified property or <code>null</code> if none\n+   *         found.\n+   * @deprecated Use the provider-based and algorithm-independent\n+   *             {@link AlgorithmParameters} and {@link KeyFactory} engine\n+   *             classes instead.\n    */\n   public static String getAlgorithmProperty(String algName, String propName)\n   {\n@@ -205,37 +207,21 @@ public static String getAlgorithmProperty(String algName, String propName)\n   }\n \n   /**\n-   * <p>Adds a new provider, at a specified position. The position is the\n-   * preference order in which providers are searched for requested algorithms.\n-   * Note that it is not guaranteed that this preference will be respected. The\n-   * position is 1-based, that is, <code>1</code> is most preferred, followed by\n-   * <code>2</code>, and so on.</p>\n-   *\n-   * <p>If the given provider is installed at the requested position, the\n-   * provider that used to be at that position, and all providers with a\n-   * position greater than position, are shifted up one position (towards the\n-   * end of the list of installed providers).</p>\n-   *\n-   * <p>A provider cannot be added if it is already installed.</p>\n-   *\n-   * <p>First, if there is a security manager, its <code>checkSecurityAccess()\n-   * </code> method is called with the string <code>\"insertProvider.\"+provider.\n-   * getName()</code> to see if it's ok to add a new provider. If the default\n-   * implementation of <code>checkSecurityAccess()</code> is used (i.e., that\n-   * method is not overriden), then this will result in a call to the security\n-   * manager's <code>checkPermission()</code> method with a\n-   * <code>SecurityPermission(\"insertProvider.\"+provider.getName())</code>\n-   * permission.</p>\n-   *\n-   * @param provider the provider to be added.\n-   * @param position the preference position that the caller would like for\n-   * this provider.\n-   * @return the actual preference position in which the provider was added, or\n-   * <code>-1</code> if the provider was not added because it is already\n-   * installed.\n-   * @throws SecurityException if a security manager exists and its\n-   * {@link SecurityManager#checkSecurityAccess(String)} method denies access\n-   * to add a new provider.\n+   * Inserts a new designated {@link Provider} at a designated (1-based)\n+   * position in the current list of installed {@link Provider}s,\n+   * \n+   * @param provider\n+   *          the new {@link Provider} to add.\n+   * @param position\n+   *          the position (starting from 1) of where to install\n+   *          <code>provider</code>.\n+   * @return the actual position, in the list of installed Providers. Returns\n+   *         <code>-1</code> if <code>provider</code> was laready in the\n+   *         list. The actual position may be different than the desired\n+   *         <code>position</code>.\n+   * @throws SecurityException\n+   *           if a {@link SecurityManager} is installed and it disallows this\n+   *           operation.\n    * @see #getProvider(String)\n    * @see #removeProvider(String)\n    * @see SecurityPermission\n@@ -265,24 +251,17 @@ public static int insertProviderAt(Provider provider, int position)\n   }\n \n   /**\n-   * <p>Adds a provider to the next position available.</p>\n-   *\n-   * <p>First, if there is a security manager, its <code>checkSecurityAccess()\n-   * </code> method is called with the string <code>\"insertProvider.\"+provider.\n-   * getName()</code> to see if it's ok to add a new provider. If the default\n-   * implementation of <code>checkSecurityAccess()</code> is used (i.e., that\n-   * method is not overriden), then this will result in a call to the security\n-   * manager's <code>checkPermission()</code> method with a\n-   * <code>SecurityPermission(\"insertProvider.\"+provider.getName())</code>\n-   * permission.</p>\n-   *\n-   * @param provider the provider to be added.\n-   * @return the preference position in which the provider was added, or\n-   * <code>-1</code> if the provider was not added because it is already\n-   * installed.\n-   * @throws SecurityException if a security manager exists and its\n-   * {@link SecurityManager#checkSecurityAccess(String)} method denies access\n-   * to add a new provider.\n+   * Appends the designated new {@link Provider} to the current list of\n+   * installed {@link Provider}s.\n+   * \n+   * @param provider\n+   *          the new {@link Provider} to append.\n+   * @return the position (starting from 1) of <code>provider</code> in the\n+   *         current list of {@link Provider}s, or <code>-1</code> if\n+   *         <code>provider</code> was already there.\n+   * @throws SecurityException\n+   *           if a {@link SecurityManager} is installed and it disallows this\n+   *           operation.\n    * @see #getProvider(String)\n    * @see #removeProvider(String)\n    * @see SecurityPermission\n@@ -293,26 +272,14 @@ public static int addProvider(Provider provider)\n   }\n \n   /**\n-   * <p>Removes the provider with the specified name.</p>\n-   *\n-   * <p>When the specified provider is removed, all providers located at a\n-   * position greater than where the specified provider was are shifted down\n-   * one position (towards the head of the list of installed providers).</p>\n-   *\n-   * <p>This method returns silently if the provider is not installed.</p>\n-   *\n-   * <p>First, if there is a security manager, its <code>checkSecurityAccess()\n-   * </code> method is called with the string <code>\"removeProvider.\"+name</code>\n-   * to see if it's ok to remove the provider. If the default implementation of\n-   * <code>checkSecurityAccess()</code> is used (i.e., that method is not\n-   * overriden), then this will result in a call to the security manager's\n-   * <code>checkPermission()</code> method with a <code>SecurityPermission(\n-   * \"removeProvider.\"+name)</code> permission.</p>\n-   *\n-   * @param name the name of the provider to remove.\n-   * @throws SecurityException if a security manager exists and its\n-   * {@link SecurityManager#checkSecurityAccess(String)} method denies access\n-   * to remove the provider.\n+   * Removes an already installed {@link Provider}, given its name, from the\n+   * current list of installed {@link Provider}s.\n+   * \n+   * @param name\n+   *          the name of an already installed {@link Provider} to remove.\n+   * @throws SecurityException\n+   *           if a {@link SecurityManager} is installed and it disallows this\n+   *           operation.\n    * @see #getProvider(String)\n    * @see #addProvider(Provider)\n    */\n@@ -334,9 +301,9 @@ public static void removeProvider(String name)\n   }\n \n   /**\n-   * Returns an array containing all the installed providers. The order of the\n-   * providers in the array is their preference order.\n-   *\n+   * Returns the current list of installed {@link Provider}s as an array\n+   * ordered according to their installation preference order.\n+   * \n    * @return an array of all the installed providers.\n    */\n   public static Provider[] getProviders()\n@@ -347,11 +314,13 @@ public static Provider[] getProviders()\n   }\n \n   /**\n-   * Returns the provider installed with the specified name, if any. Returns\n-   * <code>null</code> if no provider with the specified name is installed.\n-   *\n-   * @param name the name of the provider to get.\n-   * @return the provider of the specified name.\n+   * Returns an already installed {@link Provider} given its name.\n+   * \n+   * @param name\n+   *          the name of an already installed {@link Provider}.\n+   * @return the {@link Provider} known by <code>name</code>. Returns\n+   *         <code>null</code> if the current list of {@link Provider}s does\n+   *         not include one named <code>name</code>.\n    * @see #removeProvider(String)\n    * @see #addProvider(Provider)\n    */\n@@ -377,18 +346,16 @@ public static Provider getProvider(String name)\n   }\n \n   /**\n-   * <p>Gets a security property value.</p>\n-   *\n-   * <p>First, if there is a security manager, its <code>checkPermission()</code>\n-   * method is called with a <code>SecurityPermission(\"getProperty.\"+key)</code>\n-   * permission to see if it's ok to retrieve the specified security property\n-   * value.</p>\n-   *\n-   * @param key the key of the property being retrieved.\n-   * @return the value of the security property corresponding to key.\n-   * @throws SecurityException if a security manager exists and its\n-   * {@link SecurityManager#checkPermission(Permission)} method denies access\n-   * to retrieve the specified security property value.\n+   * Returns the value associated with a Security propery.\n+   * \n+   * @param key\n+   *          the key of the property to fetch.\n+   * @return the value of the Security property associated with\n+   *         <code>key</code>. Returns <code>null</code> if no such property\n+   *         was found.\n+   * @throws SecurityException\n+   *           if a {@link SecurityManager} is installed and it disallows this\n+   *           operation.\n    * @see #setProperty(String, String)\n    * @see SecurityPermission\n    */\n@@ -407,18 +374,15 @@ public static String getProperty(String key)\n   }\n \n   /**\n-   * <p>Sets a security property value.</p>\n-   *\n-   * <p>First, if there is a security manager, its <code>checkPermission()</code>\n-   * method is called with a <code>SecurityPermission(\"setProperty.\"+key)</code>\n-   * permission to see if it's ok to set the specified security property value.\n-   * </p>\n-   *\n-   * @param key the name of the property to be set.\n-   * @param datum the value of the property to be set.\n-   * @throws SecurityException if a security manager exists and its\n-   * {@link SecurityManager#checkPermission(Permission)} method denies access\n-   * to set the specified security property value.\n+   * Sets or changes a designated Security property to a designated value.\n+   * \n+   * @param key\n+   *          the name of the property to set.\n+   * @param datum\n+   *          the new value of the property.\n+   * @throws SecurityException\n+   *           if a {@link SecurityManager} is installed and it disallows this\n+   *           operation.\n    * @see #getProperty(String)\n    * @see SecurityPermission\n    */\n@@ -435,19 +399,16 @@ public static void setProperty(String key, String datum)\n   }\n \n   /**\n-   * Returns a Set of Strings containing the names of all available algorithms\n-   * or types for the specified Java cryptographic service (e.g., Signature,\n-   * MessageDigest, Cipher, Mac, KeyStore). Returns an empty Set if there is no\n-   * provider that supports the specified service. For a complete list of Java\n-   * cryptographic services, please see the Java Cryptography Architecture API\n-   * Specification &amp; Reference. Note: the returned set is immutable.\n-   *\n-   * @param serviceName the name of the Java cryptographic service (e.g.,\n-   * Signature, MessageDigest, Cipher, Mac, KeyStore). Note: this parameter is\n-   * case-insensitive.\n-   * @return a Set of Strings containing the names of all available algorithms\n-   * or types for the specified Java cryptographic service or an empty set if\n-   * no provider supports the specified service.\n+   * For a given <i>service</i> (e.g. Signature, MessageDigest, etc...) this\n+   * method returns the {@link Set} of all available algorithm names (instances\n+   * of {@link String}, from all currently installed {@link Provider}s.\n+   * \n+   * @param serviceName\n+   *          the case-insensitive name of a service (e.g. Signature,\n+   *          MessageDigest, etc).\n+   * @return a {@link Set} of {@link String}s containing the names of all\n+   *         algorithm names provided by all of the currently installed\n+   *         {@link Provider}s.\n    * @since 1.4\n    */\n   public static Set getAlgorithms(String serviceName)\n@@ -480,53 +441,48 @@ public static Set getAlgorithms(String serviceName)\n   }\n \n   /**\n-   * <p>Returns an array containing all installed providers that satisfy the\n-   * specified selection criterion, or <code>null</code> if no such providers\n-   * have been installed. The returned providers are ordered according to their\n-   * preference order.</p>\n-   *\n-   * <p>A cryptographic service is always associated with a particular\n-   * algorithm or type. For example, a digital signature service is always\n-   * associated with a particular algorithm (e.g., <i>DSA</i>), and a\n-   * CertificateFactory service is always associated with a particular\n-   * certificate type (e.g., <i>X.509</i>).</p>\n-   *\n-   * <p>The selection criterion must be specified in one of the following two\n-   * formats:</p>\n-   *\n+   * Returns an array of currently installed {@link Provider}s, ordered\n+   * according to their installation preference order, which satisfy a given\n+   * <i>selection</i> criterion.\n+   * \n+   * <p>This implementation recognizes a <i>selection</i> criterion written in\n+   * one of two following forms:</p>\n+   * \n    * <ul>\n-   *    <li><p>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt;</p>\n-   *    <p>The cryptographic service name must not contain any dots.</p>\n-   *    <p>A provider satisfies the specified selection criterion iff the\n-   *    provider implements the specified algorithm or type for the specified\n-   *    cryptographic service.</p>\n-   *    <p>For example, \"CertificateFactory.X.509\" would be satisfied by any\n-   *    provider that supplied a CertificateFactory implementation for X.509\n-   *    certificates.</p></li>\n-   *\n-   *    <li><p>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt; &lt;attribute_name&gt;:&lt;attribute_value&gt;</p>\n-   *    <p>The cryptographic service name must not contain any dots. There must\n-   *    be one or more space charaters between the the &lt;algorithm_or_type&gt;\n-   *    and the &lt;attribute_name&gt;.</p>\n-   *    <p>A provider satisfies this selection criterion iff the provider\n-   *    implements the specified algorithm or type for the specified\n-   *    cryptographic service and its implementation meets the constraint\n-   *    expressed by the specified attribute name/value pair.</p>\n-   *    <p>For example, \"Signature.SHA1withDSA KeySize:1024\" would be satisfied\n-   *    by any provider that implemented the SHA1withDSA signature algorithm\n-   *    with a keysize of 1024 (or larger).</p></li>\n+   *   <li>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt;: Where\n+   *   <i>crypto_service</i> is a case-insensitive string, similar to what has\n+   *   been described in the {@link #getAlgorithms(String)} method, and\n+   *   <i>algorithm_or_type</i> is a known case-insensitive name of an\n+   *   Algorithm, or one of its aliases.\n+   *   \n+   *   <p>For example, \"CertificateFactory.X.509\" would return all the installed\n+   *   {@link Provider}s which provide a <i>CertificateFactory</i>\n+   *   implementation of <i>X.509</i>.</p></li>\n+   *   \n+   *   <li>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt; &lt;attribute_name&gt;:&lt;value&gt;:\n+   *   Where <i>crypto_service</i> is a case-insensitive string, similar to what\n+   *   has been described in the {@link #getAlgorithms(String)} method,\n+   *   <i>algorithm_or_type</i> is a case-insensitive known name of an Algorithm\n+   *   or one of its aliases, <i>attribute_name</i> is a case-insensitive\n+   *   property name with no whitespace characters, and no dots, in-between, and\n+   *   <i>value</i> is a {@link String} with no whitespace characters in-between.\n+   *   \n+   *   <p>For example, \"Signature.Sha1WithDSS KeySize:1024\" would return all the\n+   *   installed {@link Provider}s which declared their ability to provide\n+   *   <i>Signature</i> services, using the <i>Sha1WithDSS</i> algorithm with\n+   *   key sizes of <i>1024</i>.</p></li>\n    * </ul>\n-   *\n-   * <p>See Appendix A in the Java Cryptogaphy Architecture API Specification\n-   * &amp; Reference for information about standard cryptographic service names,\n-   * standard algorithm names and standard attribute names.</p>\n-   *\n-   * @param filter the criterion for selecting providers. The filter is case-\n-   * insensitive.\n-   * @return all the installed providers that satisfy the selection criterion,\n-   * or null if no such providers have been installed.\n-   * @throws InvalidParameterException if the filter is not in the required\n-   * format.\n+   * \n+   * @param filter\n+   *          the <i>selection</i> criterion for selecting among the installed\n+   *          {@link Provider}s.\n+   * @return all the installed {@link Provider}s which satisfy the <i>selection</i>\n+   *         criterion. Returns <code>null</code> if no installed\n+   *         {@link Provider}s were found which satisfy the <i>selection</i>\n+   *         criterion. Returns ALL installed {@link Provider}s if\n+   *         <code>filter</code> is <code>null</code> or is an empty string.\n+   * @throws InvalidParameterException\n+   *           if an exception occurs while parsing the <code>filter</code>.\n    * @see #getProviders(Map)\n    */\n   public static Provider[] getProviders(String filter)\n@@ -547,48 +503,47 @@ public static Provider[] getProviders(String filter)\n     return getProviders(map);\n   }\n \n- /**\n-  * <p>Returns an array containing all installed providers that satisfy the\n-  * specified selection criteria, or <code>null</code> if no such providers\n-  * have been installed. The returned providers are ordered according to their\n-  * preference order.</p>\n-  *\n-  * <p>The selection criteria are represented by a map. Each map entry\n-  * represents a selection criterion. A provider is selected iff it satisfies\n-  * all selection criteria. The key for any entry in such a map must be in one\n-  * of the following two formats:</p>\n-  *\n-  * <ul>\n-  *    <li><p>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt;</p>\n-  *    <p>The cryptographic service name must not contain any dots.</p>\n-  *    <p>The value associated with the key must be an empty string.</p>\n-  *    <p>A provider satisfies this selection criterion iff the provider\n-  *    implements the specified algorithm or type for the specified\n-  *    cryptographic service.</p></li>\n-  *\n-  *    <li><p>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt; &lt;attribute_name&gt;</p>\n-  *    <p>The cryptographic service name must not contain any dots. There must\n-  *    be one or more space charaters between the &lt;algorithm_or_type&gt; and\n-  *    the &lt;attribute_name&gt;.</p>\n-  *    <p>The value associated with the key must be a non-empty string. A\n-  *    provider satisfies this selection criterion iff the provider implements\n-  *    the specified algorithm or type for the specified cryptographic service\n-  *    and its implementation meets the constraint expressed by the specified\n-  *    attribute name/value pair.</p></li>\n-  * </ul>\n-  *\n-  * <p>See Appendix A in the Java Cryptogaphy Architecture API Specification\n-  * &amp; Reference for information about standard cryptographic service names,\n-  * standard algorithm names and standard attribute names.</p>\n-  *\n-  * @param filter the criteria for selecting providers. The filter is case-\n-  * insensitive.\n-  * @return all the installed providers that satisfy the selection criteria,\n-  * or <code>null</code> if no such providers have been installed.\n-  * @throws InvalidParameterException if the filter is not in the required\n-  * format.\n-  * @see #getProviders(String)\n-  */\n+  /**\n+   * Returns an array of currently installed {@link Provider}s which satisfy a\n+   * set of <i>selection</i> criteria.\n+   * \n+   * <p>The <i>selection</i> criteria are defined in a {@link Map} where each\n+   * element specifies a <i>selection</i> querry. The <i>Keys</i> in this\n+   * {@link Map} must be in one of the two following forms:</p>\n+   * \n+   * <ul>\n+   *   <li>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt;: Where\n+   *   <i>crypto_service</i> is a case-insensitive string, similar to what has\n+   *   been described in the {@link #getAlgorithms(String)} method, and\n+   *   <i>algorithm_or_type</i> is a case-insensitive known name of an\n+   *   Algorithm, or one of its aliases. The <i>value</i> of the entry in the\n+   *   {@link Map} for such a <i>Key</i> MUST be the empty string.\n+   *   {@link Provider}s which provide an implementation for the designated\n+   *   <i>service algorithm</i> are included in the result.</li>\n+   *   \n+   *   <li>&lt;crypto_service&gt;.&lt;algorithm_or_type&gt; &lt;attribute_name&gt;:\n+   *   Where <i>crypto_service</i> is a case-insensitive string, similar to what\n+   *   has been described in the {@link #getAlgorithms(String)} method,\n+   *   <i>algorithm_or_type</i> is a case-insensitive known name of an Algorithm\n+   *   or one of its aliases, and <i>attribute_name</i> is a case-insensitive\n+   *   property name with no whitespace characters, and no dots, in-between. The\n+   *   <i>value</i> of the entry in this {@link Map} for such a <i>Key</i> MUST\n+   *   NOT be <code>null</code> or an empty string. {@link Provider}s which\n+   *   declare the designated <i>attribute_name</i> and <i>value</i> for the\n+   *   designated <i>service algorithm</i> are included in the result.</li>\n+   * </ul>\n+   * \n+   * @param filter\n+   *          a {@link Map} of <i>selection querries</i>.\n+   * @return all currently installed {@link Provider}s which satisfy ALL the\n+   *         <i>selection</i> criteria defined in <code>filter</code>.\n+   *         Returns ALL installed {@link Provider}s if <code>filter</code>\n+   *         is <code>null</code> or empty.\n+   * @throws InvalidParameterException\n+   *           if an exception is encountered while parsing the syntax of the\n+   *           {@link Map}'s <i>keys</i>.\n+   * @see #getProviders(String)\n+   */\n   public static Provider[] getProviders(Map filter)\n   {\n     if (providers == null || providers.isEmpty())"}]}