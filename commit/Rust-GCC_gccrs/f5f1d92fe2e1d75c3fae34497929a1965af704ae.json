{"sha": "f5f1d92fe2e1d75c3fae34497929a1965af704ae", "node_id": "C_kwDOANBUbNoAKGY1ZjFkOTJmZTJlMWQ3NWMzZmFlMzQ0OTc5MjlhMTk2NWFmNzA0YWU", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-18T23:25:47Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-18T23:25:47Z"}, "message": "c: Diagnose \"enum tag;\" after definition [PR107164]\n\nAs noted in bug 101764, a declaration \"enum tag;\" is invalid in\nstandard C after a definition, as well as when no definition is\nvisible; we had a pedwarn-if-pedantic for the forward declaration\ncase, but were missing one for the other case.  Add that missing\ndiagnostic (if pedantic only).\n\n(These diagnostics will need to be appropriately conditioned when\nsupport is added for C2x enums with fixed underlying type, since \"enum\ntag : type;\" is OK both before and after a definition.)\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\n\tPR c/107164\n\ngcc/c/\n\t* c-decl.cc (shadow_tag_warned): If pedantic, diagnose \"enum tag;\"\n\twith previous declaration visible.\n\ngcc/testsuite/\n\t* gcc.dg/c99-tag-4.c, gcc.dg/c99-tag-5.c, gcc.dg/c99-tag-6.c: New\n\ttests.", "tree": {"sha": "33d46814a2a83ccababab6100c2a8c455b4f5ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33d46814a2a83ccababab6100c2a8c455b4f5ca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5f1d92fe2e1d75c3fae34497929a1965af704ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f1d92fe2e1d75c3fae34497929a1965af704ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f1d92fe2e1d75c3fae34497929a1965af704ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f1d92fe2e1d75c3fae34497929a1965af704ae/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc694f45087c892e69ebbb177203c708f00b1bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc694f45087c892e69ebbb177203c708f00b1bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc694f45087c892e69ebbb177203c708f00b1bc7"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "80f6e91218787ee62b9509f3fe531f6b2f983243", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f1d92fe2e1d75c3fae34497929a1965af704ae/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f1d92fe2e1d75c3fae34497929a1965af704ae/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=f5f1d92fe2e1d75c3fae34497929a1965af704ae", "patch": "@@ -4814,6 +4814,20 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \t      warned = 1;\n \t      pending_xref_error ();\n \t    }\n+\t  else if (declspecs->typespec_kind != ctsk_tagdef\n+\t\t   && declspecs->typespec_kind != ctsk_tagfirstref\n+\t\t   && declspecs->typespec_kind != ctsk_tagfirstref_attrs\n+\t\t   && code == ENUMERAL_TYPE)\n+\t    {\n+\t      bool warned_enum = false;\n+\t      if (warned != 1)\n+\t\twarned_enum = pedwarn (input_location, OPT_Wpedantic,\n+\t\t\t\t       \"empty declaration of %<enum%> type \"\n+\t\t\t\t       \"does not redeclare tag\");\n+\t      if (warned_enum)\n+\t\twarned = 1;\n+\t      pending_xref_error ();\n+\t    }\n \t  else\n \t    {\n \t      pending_invalid_xref = NULL_TREE;"}, {"sha": "9ff3ccb8d4b9f51b95f4e39f9d8e23af582b407b", "filename": "gcc/testsuite/gcc.dg/c99-tag-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f1d92fe2e1d75c3fae34497929a1965af704ae/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f1d92fe2e1d75c3fae34497929a1965af704ae/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-4.c?ref=f5f1d92fe2e1d75c3fae34497929a1965af704ae", "patch": "@@ -0,0 +1,8 @@\n+/* Test for handling of tags.  \"enum foo;\" is invalid after an existing\n+   declaration (does not redeclare the tag) as well as before: bug 107164.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+enum e1; /* { dg-error \"ISO C forbids forward references to 'enum' types\" } */\n+enum e2 { E };\n+enum e2; /* { dg-error \"empty declaration of 'enum' type does not redeclare tag\" } */"}, {"sha": "97fcc75bc26b9fce1a33675e9997020b7f236af8", "filename": "gcc/testsuite/gcc.dg/c99-tag-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f1d92fe2e1d75c3fae34497929a1965af704ae/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f1d92fe2e1d75c3fae34497929a1965af704ae/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-5.c?ref=f5f1d92fe2e1d75c3fae34497929a1965af704ae", "patch": "@@ -0,0 +1,8 @@\n+/* Test for handling of tags.  \"enum foo;\" is invalid after an existing\n+   declaration (does not redeclare the tag) as well as before: bug 107164.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic\" } */\n+\n+enum e1; /* { dg-warning \"ISO C forbids forward references to 'enum' types\" } */\n+enum e2 { E };\n+enum e2; /* { dg-warning \"empty declaration of 'enum' type does not redeclare tag\" } */"}, {"sha": "8307217523c615817b544cc218237bd0acd550e8", "filename": "gcc/testsuite/gcc.dg/c99-tag-6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5f1d92fe2e1d75c3fae34497929a1965af704ae/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5f1d92fe2e1d75c3fae34497929a1965af704ae/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-6.c?ref=f5f1d92fe2e1d75c3fae34497929a1965af704ae", "patch": "@@ -0,0 +1,9 @@\n+/* Test for handling of tags.  \"enum foo;\" is invalid after an existing\n+   declaration (does not redeclare the tag) as well as before: bug 107164.\n+   Test this is not diagnosed without -pedantic.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+enum e1;\n+enum e2 { E };\n+enum e2;"}]}