{"sha": "e4cba915b8a3faa7eada627ac25c7093cf8eb926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjYmE5MTViOGEzZmFhN2VhZGE2MjdhYzI1YzcwOTNjZjhlYjkyNg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-01-25T17:08:47Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-01-25T17:08:47Z"}, "message": "re PR tree-optimization/47382 (g++.dg/ipa/devirt-d-1.C FAILs with -finline-functions)\n\n2011-01-25  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/47382\n\t* gimple-fold.c (gimple_fold_obj_type_ref_call): Removed.\n\t(gimple_fold_call): Do not call gimple_fold_obj_type_ref_call.\n\n\t* testsuite/g++.dg/torture/pr47382.C: New test.\n\t* testsuite/g++.dg/opt/devirt1.C: Xfail.\n\nFrom-SVN: r169245", "tree": {"sha": "af24cbeb30c9605c683340b2f923cb8bed571a2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af24cbeb30c9605c683340b2f923cb8bed571a2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4cba915b8a3faa7eada627ac25c7093cf8eb926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4cba915b8a3faa7eada627ac25c7093cf8eb926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4cba915b8a3faa7eada627ac25c7093cf8eb926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4cba915b8a3faa7eada627ac25c7093cf8eb926/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15fb94aef9144ef8fda68e4e6982c5579b305d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15fb94aef9144ef8fda68e4e6982c5579b305d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15fb94aef9144ef8fda68e4e6982c5579b305d48"}], "stats": {"total": 87, "additions": 43, "deletions": 44}, "files": [{"sha": "39b8d441cc5c9e47962ba08a1a9d3e570e6a5a44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4cba915b8a3faa7eada627ac25c7093cf8eb926", "patch": "@@ -1,3 +1,9 @@\n+2011-01-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/47382\n+\t* gimple-fold.c (gimple_fold_obj_type_ref_call): Removed.\n+\t(gimple_fold_call): Do not call gimple_fold_obj_type_ref_call.\n+\n 2011-01-25  Joel Sherrill <joel.sherrill@oarcorp.com>\n \n \t* config/m32r/m32r.c: Define TARGET_EXCEPT_UNWIND_INFO to"}, {"sha": "abc2273adf8cddbdeddabb1d6c179cda812289b4", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=e4cba915b8a3faa7eada627ac25c7093cf8eb926", "patch": "@@ -1443,38 +1443,6 @@ gimple_adjust_this_by_delta (gimple_stmt_iterator *gsi, tree delta)\n   gimple_call_set_arg (call_stmt, 0, tmp);\n }\n \n-/* Fold a call statement to OBJ_TYPE_REF to a direct call, if possible.  GSI\n-   determines the statement, generating new statements is allowed only if\n-   INPLACE is false.  Return true iff the statement was changed.  */\n-\n-static bool\n-gimple_fold_obj_type_ref_call (gimple_stmt_iterator *gsi)\n-{\n-  gimple stmt = gsi_stmt (*gsi);\n-  tree ref = gimple_call_fn (stmt);\n-  tree obj = OBJ_TYPE_REF_OBJECT (ref);\n-  tree binfo, fndecl, delta;\n-  HOST_WIDE_INT token;\n-\n-  if (TREE_CODE (obj) != ADDR_EXPR)\n-    return false;\n-  obj = TREE_OPERAND (obj, 0);\n-  if (!DECL_P (obj)\n-      || TREE_CODE (TREE_TYPE (obj)) != RECORD_TYPE)\n-    return false;\n-  binfo = TYPE_BINFO (TREE_TYPE (obj));\n-  if (!binfo)\n-    return false;\n-\n-  token = tree_low_cst (OBJ_TYPE_REF_TOKEN (ref), 1);\n-  fndecl = gimple_get_virt_mehtod_for_binfo (token, binfo, &delta, false);\n-  if (!fndecl)\n-    return false;\n-  gcc_assert (integer_zerop (delta));\n-  gimple_call_set_fndecl (stmt, fndecl);\n-  return true;\n-}\n-\n /* Attempt to fold a call statement referenced by the statement iterator GSI.\n    The statement may be replaced by another statement, e.g., if the call\n    simplifies to a constant value. Return true if any changes were made.\n@@ -1500,17 +1468,6 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t  return true;\n \t}\n     }\n-  else\n-    {\n-      /* ??? Should perhaps do this in fold proper.  However, doing it\n-         there requires that we create a new CALL_EXPR, and that requires\n-         copying EH region info to the new node.  Easier to just do it\n-         here where we can just smash the call operand.  */\n-      callee = gimple_call_fn (stmt);\n-      if (TREE_CODE (callee) == OBJ_TYPE_REF)\n-\treturn gimple_fold_obj_type_ref_call (gsi);\n-    }\n-\n   return false;\n }\n "}, {"sha": "b23f02dd465fccc1758f52c008c2a6a4b1d84d39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4cba915b8a3faa7eada627ac25c7093cf8eb926", "patch": "@@ -1,3 +1,9 @@\n+2011-01-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/47382\n+\t* g++.dg/torture/pr47382.C: New test.\n+\t* g++.dg/opt/devirt1.C: Xfail.\n+\n 2011-01-25  Yao Qi  <yao@codesourcery.com>\n \n         PR target/45701"}, {"sha": "0a825c2a5906a5d277e45ad9fb73092ba6801436", "filename": "gcc/testsuite/g++.dg/opt/devirt1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdevirt1.C?ref=e4cba915b8a3faa7eada627ac25c7093cf8eb926", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-O\" }\n-// { dg-final { scan-assembler \"xyzzy\" } }\n+// { dg-final { scan-assembler \"xyzzy\" { xfail *-*-* } } }\n \n struct S { S(); virtual void xyzzy(); };\n inline void foo(S *s) { s->xyzzy(); }"}, {"sha": "a12dbe3fd09ecb6252032a9ada0e78c637d40355", "filename": "gcc/testsuite/g++.dg/torture/pr47382.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr47382.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cba915b8a3faa7eada627ac25c7093cf8eb926/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr47382.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr47382.C?ref=e4cba915b8a3faa7eada627ac25c7093cf8eb926", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+struct A\n+{\n+  inline ~A ();\n+  virtual void foo () {}\n+};\n+\n+struct B : A\n+{\n+  virtual void foo () { abort(); }\n+};\n+\n+static inline void middleman (A *a)\n+{\n+  a->foo ();\n+}\n+\n+inline A::~A ()\n+{\n+  middleman (this);\n+}\n+\n+int main ()\n+{\n+   B b;\n+   return 0;\n+}"}]}