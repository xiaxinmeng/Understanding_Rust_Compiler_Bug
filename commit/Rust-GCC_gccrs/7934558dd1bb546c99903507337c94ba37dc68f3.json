{"sha": "7934558dd1bb546c99903507337c94ba37dc68f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzNDU1OGRkMWJiNTQ2Yzk5OTAzNTA3MzM3Yzk0YmEzN2RjNjhmMw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-11-25T05:05:26Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-11-25T05:05:26Z"}, "message": "[multiple changes]\n\n2005-11-25  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/24989\n        * fold-const.c (fold_build): Convert bool_var != 1 and\n        bool_var == 0 to !bool_var.\n\n2005-11-24  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/24989\n        * gcc.dg/tree-ssa/bool-10.c: New test.\n        * gcc.dg/tree-ssa/bool-11.c: New test.\n        * gcc.dg/tree-ssa/bool-7.c: Un-xfail.\n\nFrom-SVN: r107488", "tree": {"sha": "a26d28237f7aa6f8e33d146afbd456082c1dbc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a26d28237f7aa6f8e33d146afbd456082c1dbc81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7934558dd1bb546c99903507337c94ba37dc68f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7934558dd1bb546c99903507337c94ba37dc68f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7934558dd1bb546c99903507337c94ba37dc68f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7934558dd1bb546c99903507337c94ba37dc68f3/comments", "author": null, "committer": null, "parents": [{"sha": "210dfe6eccfaba41bf3860963b023a30c276dcbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210dfe6eccfaba41bf3860963b023a30c276dcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210dfe6eccfaba41bf3860963b023a30c276dcbc"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "bb928cfec4a7e25bf98547d503799fe5b6867654", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7934558dd1bb546c99903507337c94ba37dc68f3", "patch": "@@ -1,3 +1,9 @@\n+2005-11-25  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/24989\n+\t* fold-const.c (fold_build): Convert bool_var != 1 and\n+\tbool_var == 0 to !bool_var.\n+\n 2005-11-25  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/24990"}, {"sha": "9a6ac70a39c80cba012221daa364865519aa01d6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7934558dd1bb546c99903507337c94ba37dc68f3", "patch": "@@ -8857,6 +8857,16 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n           && code == EQ_EXPR)\n         return non_lvalue (fold_convert (type, arg0));\n \n+      /* bool_var != 1 becomes !bool_var. */\n+      if (TREE_CODE (TREE_TYPE (arg0)) == BOOLEAN_TYPE && integer_onep (arg1)\n+          && code == NE_EXPR)\n+        return fold_build1 (TRUTH_NOT_EXPR, type, arg0);\n+\n+      /* bool_var == 0 becomes !bool_var. */\n+      if (TREE_CODE (TREE_TYPE (arg0)) == BOOLEAN_TYPE && integer_zerop (arg1)\n+          && code == EQ_EXPR)\n+        return fold_build1 (TRUTH_NOT_EXPR, type, arg0);\n+\n       /* If this is an equality comparison of the address of a non-weak\n \t object against zero, then we know the result.  */\n       if ((code == EQ_EXPR || code == NE_EXPR)"}, {"sha": "226dc074f8dab17768080c2a2ee39afcee67293f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7934558dd1bb546c99903507337c94ba37dc68f3", "patch": "@@ -1,3 +1,10 @@\n+2005-11-24  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/24989\n+\t* gcc.dg/tree-ssa/bool-10.c: New test.\n+\t* gcc.dg/tree-ssa/bool-11.c: New test.\n+\t* gcc.dg/tree-ssa/bool-7.c: Un-xfail.\n+\n 2005-11-24  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/24990"}, {"sha": "d7bf20da81b61c9764e4674ac3214b6824ef81ea", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-10.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-10.c?ref=7934558dd1bb546c99903507337c94ba37dc68f3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  return (x != 1);\n+}\n+\n+/* There should be no != 1 which is produced by the front-end as\n+   bool_var != 1 is the same as !bool_var. */\n+/* { dg-final { scan-tree-dump-times \"!= 1\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"!x\" 1 \"optimized\"} } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "8d88b7e87d5ecdd71c544350c566a9f317077479", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-11.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-11.c?ref=7934558dd1bb546c99903507337c94ba37dc68f3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  return (x == 0);\n+}\n+\n+/* There should be no == 0 which is produced by the front-end as\n+   bool_var == 0 is the same as !bool_var. */\n+/* { dg-final { scan-tree-dump-times \"== 0\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"!x\" 1 \"optimized\"} } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "b798710644ad88d978a20d3de1ff6039f9ad4812", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-7.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934558dd1bb546c99903507337c94ba37dc68f3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-7.c?ref=7934558dd1bb546c99903507337c94ba37dc68f3", "patch": "@@ -11,8 +11,7 @@ int f(_Bool x)\n   return y;\n }\n \n-/* There should be no != 1. Though PHI-OPT or invert_truth does not\n-   fold its tree.  */\n-/* { dg-final { scan-tree-dump-times \"!= 1\" 0 \"optimized\" { xfail *-*-* } }  }*/\n+/* There should be no != 1. Fold changes x != 1 to ! x.  */\n+/* { dg-final { scan-tree-dump-times \"!= 1\" 0 \"optimized\" } } */\n \n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}