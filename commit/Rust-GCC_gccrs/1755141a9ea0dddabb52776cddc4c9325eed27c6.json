{"sha": "1755141a9ea0dddabb52776cddc4c9325eed27c6", "node_id": "C_kwDOANBUbNoAKDE3NTUxNDFhOWVhMGRkZGFiYjUyNzc2Y2RkYzRjOTMyNWVlZDI3YzY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-08T19:15:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-08T19:15:42Z"}, "message": "c++: Remove superflous assert [PR104403]\n\nI've added the assert because start_decl diagnoses such vars for C++20 and\nearlier:\n  if (current_function_decl && VAR_P (decl)\n      && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n      && cxx_dialect < cxx23)\nbut as can be seen, we cam trigger the assert in older standards e.g. during\nnon-manifestly constant evaluation.  Rather than refining the assert that\nDECL_EXPRs for such vars don't appear for C++20 and older if they are inside\nof functions declared constexpr this patch just removes the assert, the\ncode rejects encountering those vars in constant expressions anyway.\n\n2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/104403\n\t* constexpr.cc (cxx_eval_constant_expression): Don't assert DECL_EXPRs\n\tof TREE_STATIC vars may only appear in -std=c++23.\n\n\t* g++.dg/cpp0x/lambda/lambda-104403.C: New test.", "tree": {"sha": "bdd944fff28d346af0a1e1df07a55f1b63639caf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdd944fff28d346af0a1e1df07a55f1b63639caf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1755141a9ea0dddabb52776cddc4c9325eed27c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1755141a9ea0dddabb52776cddc4c9325eed27c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1755141a9ea0dddabb52776cddc4c9325eed27c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1755141a9ea0dddabb52776cddc4c9325eed27c6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c3e491a4e5ae74bfbed6d167d403d262b5a4adc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "9b8e0eced4b873c7e4bdd9d37f2d35dae358a494", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1755141a9ea0dddabb52776cddc4c9325eed27c6/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1755141a9ea0dddabb52776cddc4c9325eed27c6/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=1755141a9ea0dddabb52776cddc4c9325eed27c6", "patch": "@@ -6652,7 +6652,6 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t    /* Allow __FUNCTION__ etc.  */\n \t    && !DECL_ARTIFICIAL (r))\n \t  {\n-\t    gcc_assert (cxx_dialect >= cxx23);\n \t    if (!ctx->quiet)\n \t      {\n \t\tif (CP_DECL_THREAD_LOCAL_P (r))"}, {"sha": "f231d3ea2c9932914ce20e82e346ed603d2e0db4", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-104403.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1755141a9ea0dddabb52776cddc4c9325eed27c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-104403.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1755141a9ea0dddabb52776cddc4c9325eed27c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-104403.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-104403.C?ref=1755141a9ea0dddabb52776cddc4c9325eed27c6", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/104403\n+// { dg-do compile { target c++11 } }\n+\n+int\n+main ()\n+{\n+  []{ switch (0) { case 0: static int value; return &value; } };\n+}"}]}