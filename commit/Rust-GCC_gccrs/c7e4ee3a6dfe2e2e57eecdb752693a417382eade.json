{"sha": "c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdlNGVlM2E2ZGZlMmUyZTU3ZWVjZGI3NTI2OTNhNDE3MzgyZWFkZQ==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-04-17T10:58:35Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-04-17T10:58:35Z"}, "message": "rewrite to use block/scope structure of GBE\n\nFrom-SVN: r26515", "tree": {"sha": "08f47fe7d69580b7de218fc0af24e86c990f2ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f47fe7d69580b7de218fc0af24e86c990f2ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/comments", "author": null, "committer": null, "parents": [{"sha": "fc5045f3a7573f7c432de2ae6428913c27162406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5045f3a7573f7c432de2ae6428913c27162406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5045f3a7573f7c432de2ae6428913c27162406"}], "stats": {"total": 22610, "additions": 11859, "deletions": 10751}, "files": [{"sha": "8d07c01ca5d292ff59a2dccea7140499e859a858", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -1,3 +1,112 @@\n+Sat Apr 17 13:53:43 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\tRewrite to use block/scope structure of GBE and to ensure\n+\tvariables (especially those going on stack/reg) are declared\n+\tbefore executable code generated:\n+\t* bld.c (ffebld_new_item, ffebld_new_one, ffebld_new_two):\n+\tSupport new hooks.\n+\t* bld.h (ffebld_item_hook, ffebld_item_set_hook,\n+\tffebld_nonter_hook, ffebld_nonter_set_hook): Ditto.\n+\t* bld.h (ffebld_basictype, ffebld_kind, ffebld_kindtype,\n+\tffebld_rank, ffebld_where): New convenience macros (used\n+\tby rest of this patch).\n+\t* com.c, com.h (ffecom_push_calltemps, ffecom_pop_calltemps,\n+\tffecom_push_tempvar, ffecom_pop_tempvar): Remove temp-var-\n+\thandling mechanism.\n+\t* com.c (ffecom_call_, ffecom_call_binop_, ffecom_tree_divide_,\n+\tffecom_call_gfrt): Support passing hooks for temp-var info.\n+\t(ffecom_expr_power_integer_): Takes opPOWER expression, instead\n+\tof its left and right operands, so it can get at the hook.\n+\t(ffecom_prepare_let_char_, ffecom_prepare_arg_ptr_to_expr,\n+\tffecom_prepare_end, ffecom_prepare_expr_, ffecom_prepare_expr_rw,\n+\tffecom_prepare_expr_w, ffecom_prepare_return_expr,\n+\tffecom_prepare_ptr_to_expr): New functions supporting expression\n+\tpre-scanning.\n+\t(bison_rule_compstmt_): Return the tree, as in the CFE.\n+\t(delete_block): New function, from CFE.\n+\t(kept_level_p): New function, from CFE, modified.\n+\t(ffecom_start_compstmt, ffecom_end_compstmt): New functions,\n+\treplacing ffecom_start_compstmt_ and ffecom_end_compstmt_ macros,\n+\tand they do real work.\n+\t(struct binding_level): Add prep_state member.  Initialize to 0.\n+\t(ffecom_get_invented_identifier): Now takes either or both a\n+\tstring and an integer, using -1 to denote no integer.\n+\t(ffecom_do_entry_): Disallow temp-var generation via expressions\n+\tin body of function, since the exprs aren't prescanned.\n+\t(ffecom_expr_rw): Now takes destination tree.\n+\t(ffecom_expr_w): New function, now used in some places\n+\tffecom_expr_rw had been used.\n+\t(ffecom_expr_intrinsic_): Move huge f2c-related comment to bottom\n+\tof source file, to avoid annoying problems editing com.c using\n+\tEmacs C-mode.\n+\t(ffecom_expr_power_integer_): Make a temp var for division, if\n+\tnecessary.\n+\tHandle expanded statement expression as does CFE.\n+\t(ffecom_start_progunit_): Disallow temp-var generation in body\n+\tof function, since expressions are not prescanned at this level.\n+\t(ffecom_sym_transform_): Transform ASSIGN variables as well,\n+\tso these are all transformed up front, before code-generation\n+\tbegins.\n+\t(ffecom_arg_ptr_to_const_expr, ffecom_const_expr,\n+\tffecom_ptr_to_const_expr): New functions to transform expressions\n+\tonly if the results will surely be constants.\n+\t(ffecom_arg_ptr_to_expr): Precompute size, for convenience\n+\tobtaining temp vars.\n+\t(ffecom_expand_let_stmt): Guess at usability of destination\n+\tpre-expansion, to provide better prescan preparation (fewer\n+\tspurious temp vars).\n+\t(ffecom_init_0): Disallow temp-var generation in global scope.\n+\t(ffecom_type_expr): New function, returns just the type tree\n+\tfor the expression.\n+\t(start_function): Disallow temp-var generation in parm scope.\n+\t(incomplete_type_error): Fix introductory comment.\n+\t(poplevel): Update (somewhat) from CFE.\n+\t(pushlevel): Update (somewhat) from CFE.\n+\t* stc.c (ffestc_R838): Mark ASSIGNed variable as so.\n+\t* std.c (ffestd_stmt_pass_, ffestd_R803, ffestd_R804, ffestd_R805,\n+\tffestd_R806): Remember and pass through the ffestw block info\n+\tfor these (IFTHEN, ELSEIF, ELSE, and ENDIF) statements.\n+\t* ste.c (ffeste_end_iterdo_): Now takes ffestw block argument.\n+\t(ffeste_io_inlist_): Add prototype.\n+\t(ffeste_f2c_*): Macros rewritten, new ones added.\n+\t(ffeste_start_block_, ffeste_end_block_, ffeste_start_stmt_,\n+\tffeste_end_stmt_): New macros/functions, depending on whether\n+\tchecking is enabled, to keep track of symmetry of other ste.c code.\n+\t(ffeste_begin_iterdo_, ffeste_end_iterdo_, ffeste_io_impdo_,\n+\tffeste_io_dofio_, ffeste_io_dolio_, ffeste_io_douio_,\n+\tffeste_io_ialist_, ffeste_io_cilist_, ffeste_io_cllist_,\n+\tffeste_icilist_, ffeste_io_inlist_, ffeste_io_olist_,\n+\tffeste_subr_beru_, ffeste_do, ffeste_end_R807, ffeste_R737A,\n+\tffeste_R803, ffeste_R804, ffeste_R805, ffeste_R806, ffeste_R807,\n+\tffeste_R809, ffeste_R810, ffeste_R811, ffeste_R819A, ffeste_R819B,\n+\tffeste_R837, ffeste_R838, ffeste_R839, ffeste_R840, ffeste_R904,\n+\tffeste_R907, ffeste_R909_start, ffeste_R909_item, ffeste_R909_finish,\n+\tffeste_R910_start, ffeste_R910_item, ffeste_R910_finish,\n+\tffeste_R911_start, ffeste_R911_item, ffeste_R911_finish,\n+\tffeste_R923A, ffeste_R1212, ffeste_R1227): Prescan/prepare\n+\tall pertinent expressions, update to new com.c interface, etc.\n+\t(ffeste_io_impdo_): Relocate.\n+\t(ffeste_R834, ffeste_R835, ffeste_R836, ffeste_R1226): Don't\n+\tbother calling clear_momentary, nothing was generated.\n+\t(ffeste_R842, ffeste_R843): Update to new com.c interface.\n+\t(ffeste_R1226): Don't try to stuff error_mark_node's DECL_INITIAL.\n+\t(ffeste_terminate_2): When checking enabled, make sure all blocks\n+\tand statements have been ended.\n+\t* ste.h (ffeste_R803, ffeste_R804, ffeste_R805, ffeste_R806):\n+\tThese now take ffestw block argument.\n+\t(ffeste_terminate_2): When checking enabled, it's a function, not\n+\ta macro.\n+\t* stw.h (struct _ffestw_): New variable for IFTHEN.\n+\t(ffestw_ifthen_fake_else, ffestw_set_ifthen_fake_else): New\n+\taccessor macros.\n+\t* symbol.c, symbol.h: Support new ASSIGN'ed-to info.\n+\n+\t* com.c: Clean up commentary per GNU coding standards.\n+\n+\t* bld.h (ffebld_size, ffebld_size_known): Canonize.\n+\n+\t* version.c: Bump version.\n+\n Sun Apr 11 21:33:33 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n \n \t* g77spec.c (lang_specific_driver): Check whether MATH_LIBRARY is"}, {"sha": "15cadf196d1bff51aa9a6f0b0426216f1c437dcc", "filename": "gcc/f/bld.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fbld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fbld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.c?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -5573,6 +5573,9 @@ ffebld_new_item (ffebld head, ffebld trail)\n   x->op = FFEBLD_opITEM;\n   x->u.item.head = head;\n   x->u.item.trail = trail;\n+#ifdef FFECOM_itemHOOK\n+  x->u.item.hook = FFECOM_itemNULL;\n+#endif\n   return x;\n }\n \n@@ -5655,6 +5658,9 @@ ffebld_new_one (ffebldOp o, ffebld left)\n #endif\n   x->op = o;\n   x->u.nonter.left = left;\n+#ifdef FFECOM_nonterHOOK\n+  x->u.nonter.hook = FFECOM_nonterNULL;\n+#endif\n   return x;\n }\n \n@@ -5703,6 +5709,9 @@ ffebld_new_two (ffebldOp o, ffebld left, ffebld right)\n   x->op = o;\n   x->u.nonter.left = left;\n   x->u.nonter.right = right;\n+#ifdef FFECOM_nonterHOOK\n+  x->u.nonter.hook = FFECOM_nonterNULL;\n+#endif\n   return x;\n }\n "}, {"sha": "ddbd44841e7bb30325d0eb2f0f035b95388067b2", "filename": "gcc/f/bld.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fbld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fbld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.h?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -406,12 +406,18 @@ struct _ffebld_\n \t  {\n \t    ffebld left;\n \t    ffebld right;\n+#ifdef FFECOM_nonterHOOK\n+\t    ffecomNonter hook;\t/* Whatever the compiler/backend wants! */\n+#endif\n \t  }\n \tnonter;\n \tstruct\n \t  {\n \t    ffebld head;\n \t    ffebld trail;\n+#ifdef FFECOM_itemHOOK\n+\t    ffecomItem hook;\t/* Whatever the compiler/backend wants! */\n+#endif\n \t  }\n \titem;\n \tstruct\n@@ -748,6 +754,7 @@ ffetargetCharacterSize ffebld_size_max (ffebld b);\n #define ffebld_arrter_set_pad(b,p) ((b)->u.arrter.pad = (p))\n #define ffebld_arrter_set_size(b,s) ((b)->u.arrter.size = (s))\n #define ffebld_arrter_size(b) ((b)->u.arrter.size)\n+#define ffebld_basictype(b) (ffeinfo_basictype (ffebld_info ((b))))\n #if FFEBLD_whereconstCURRENT_ == FFEBLD_whereconstPROGUNIT_\n #define ffebld_constant_pool() ffe_pool_program_unit()\n #elif FFEBLD_whereconstCURRENT_ == FFEBLD_whereconstFILE_\n@@ -944,6 +951,10 @@ ffetargetCharacterSize ffebld_size_max (ffebld b);\n #define ffebld_init_3()\n #define ffebld_init_4()\n #define ffebld_init_list(l,b) (*(l) = NULL, *(b) = (l))\n+#define ffebld_item_hook(b) ((b)->u.item.hook)\n+#define ffebld_item_set_hook(b,h) ((b)->u.item.hook = (h))\n+#define ffebld_kind(b) (ffeinfo_kind (ffebld_info ((b))))\n+#define ffebld_kindtype(b) (ffeinfo_kindtype (ffebld_info ((b))))\n #define ffebld_labter(b) ((b)->u.labter)\n #define ffebld_labtok(b) ((b)->u.labtok)\n #define ffebld_left(b) ((b)->u.nonter.left)\n@@ -987,8 +998,11 @@ ffetargetCharacterSize ffebld_size_max (ffebld b);\n #define ffebld_new_arrayref(l,r) ffebld_new_two(FFEBLD_opARRAYREF,(l),(r))\n #define ffebld_new_substr(l,r) ffebld_new_two(FFEBLD_opSUBSTR,(l),(r))\n #define ffebld_new_impdo(l,r) ffebld_new_two(FFEBLD_opIMPDO,(l),(r))\n+#define ffebld_nonter_hook(b) ((b)->u.nonter.hook)\n+#define ffebld_nonter_set_hook(b,h) ((b)->u.nonter.hook = (h))\n #define ffebld_op(b) ((b)->op)\n #define ffebld_pool() (ffebld_pool_stack_.pool)\n+#define ffebld_rank(b) (ffeinfo_rank (ffebld_info ((b))))\n #define ffebld_right(b) ((b)->u.nonter.right)\n #define ffebld_set_accter(b,a) ((b)->u.accter.array = (a))\n #define ffebld_set_arrter(b,a) ((b)->u.arrter.array = (a))\n@@ -1000,8 +1014,8 @@ ffetargetCharacterSize ffebld_size_max (ffebld b);\n #define ffebld_set_left(b,l) ((b)->u.nonter.left = (l))\n #define ffebld_set_right(b,r) ((b)->u.nonter.right = (r))\n #define ffebld_set_trail(b,t) ((b)->u.item.trail = (t))\n-#define ffebld_size(b) (ffeinfo_size((b)->info))\n-#define ffebld_size_known(b) ffebld_size(b)\n+#define ffebld_size(b) (ffeinfo_size (ffebld_info ((b))))\n+#define ffebld_size_known(b) ffebld_size((b))\n #define ffebld_symter(b) ((b)->u.symter.symbol)\n #define ffebld_symter_generic(b) ((b)->u.symter.generic)\n #define ffebld_symter_doiter(b) ((b)->u.symter.do_iter)\n@@ -1018,6 +1032,7 @@ ffetargetCharacterSize ffebld_size_max (ffebld b);\n #define ffebld_terminate_3()\n #define ffebld_terminate_4()\n #define ffebld_trail(b) ((b)->u.item.trail)\n+#define ffebld_where(b) (ffeinfo_where (ffebld_info ((b))))\n \n /* End of #include file. */\n "}, {"sha": "1d7676dbba22f811f2be0330f9ecb8503766615a", "filename": "gcc/f/com.c", "status": "modified", "additions": 9966, "deletions": 9370, "changes": 19336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade"}, {"sha": "baa29533288ec740e60036e1ba2e52f19082b45c", "filename": "gcc/f/com.h", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -56,6 +56,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n #define FFECOM_constantNULL NULL_TREE\n+#define FFECOM_nonterNULL NULL_TREE\n #define FFECOM_globalNULL NULL_TREE\n #define FFECOM_labelNULL NULL_TREE\n #define FFECOM_storageNULL NULL_TREE\n@@ -202,6 +203,8 @@ typedef enum\n \n typedef tree ffecomConstant;\n #define FFECOM_constantHOOK\n+typedef tree ffecomNonter;\n+#define FFECOM_nonterHOOK\n typedef tree ffecomLabel;\n #define FFECOM_globalHOOK\n typedef tree ffecomGlobal;\n@@ -279,23 +282,29 @@ tree ffecom_3 (enum tree_code code, tree type, tree node1, tree node2,\n tree ffecom_3s (enum tree_code code, tree type, tree node1, tree node2,\n \t\ttree node3);\n tree ffecom_arg_expr (ffebld expr, tree *length);\n+tree ffecom_arg_ptr_to_const_expr (ffebld expr, tree *length);\n tree ffecom_arg_ptr_to_expr (ffebld expr, tree *length);\n-tree ffecom_call_gfrt (ffecomGfrt ix, tree args);\n+tree ffecom_call_gfrt (ffecomGfrt ix, tree args, tree hook);\n tree ffecom_constantunion (ffebldConstantUnion *cu, ffeinfoBasictype bt,\n \t\t\t   ffeinfoKindtype kt, tree tree_type);\n+tree ffecom_const_expr (ffebld expr);\n tree ffecom_decl_field (tree context, tree prevfield, const char *name,\n \t\t\ttree type);\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n void ffecom_close_include (FILE *f);\n int ffecom_decode_include_option (char *spec);\n+#if FFECOM_targetCURRENT == FFECOM_targetGCC\n+tree ffecom_end_compstmt (void);\n+#endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n void ffecom_end_transition (void);\n void ffecom_exec_transition (void);\n void ffecom_expand_let_stmt (ffebld dest, ffebld source);\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n tree ffecom_expr (ffebld expr);\n tree ffecom_expr_assign (ffebld expr);\n tree ffecom_expr_assign_w (ffebld expr);\n-tree ffecom_expr_rw (ffebld expr);\n+tree ffecom_expr_rw (tree type, ffebld expr);\n+tree ffecom_expr_w (tree type, ffebld expr);\n void ffecom_finish_compile (void);\n void ffecom_finish_decl (tree decl, tree init, bool is_top_level);\n void ffecom_finish_progunit (void);\n@@ -308,6 +317,8 @@ void ffecom_init_2 (void);\n tree ffecom_list_expr (ffebld list);\n tree ffecom_list_ptr_to_expr (ffebld list);\n tree ffecom_lookup_label (ffelab label);\n+tree ffecom_make_tempvar (const char *commentary, tree type,\n+\t\t\t  ffetargetCharacterSize size, int elements);\n tree ffecom_modify (tree newtype, tree lhs, tree rhs);\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n void ffecom_file (char *name);\n@@ -316,14 +327,18 @@ void ffecom_notify_init_symbol (ffesymbol s);\n void ffecom_notify_primary_entry (ffesymbol fn);\n FILE *ffecom_open_include (char *name, ffewhereLine l, ffewhereColumn c);\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n-void ffecom_pop_calltemps (void);\n-void ffecom_pop_tempvar (tree var);\n+void ffecom_prepare_arg_ptr_to_expr (ffebld expr);\n+bool ffecom_prepare_end (void);\n+void ffecom_prepare_expr_ (ffebld expr, ffebld dest);\n+void ffecom_prepare_expr_rw (tree type, ffebld expr);\n+void ffecom_prepare_expr_w (tree type, ffebld expr);\n+void ffecom_prepare_ptr_to_expr (ffebld expr);\n+void ffecom_prepare_return_expr (ffebld expr);\n+tree ffecom_ptr_to_const_expr (ffebld expr);\n tree ffecom_ptr_to_expr (ffebld expr);\n-void ffecom_push_calltemps (void);\n-tree ffecom_push_tempvar (tree type, ffetargetCharacterSize size,\n-\t\t\t  int elements, bool auto_pop);\n tree ffecom_return_expr (ffebld expr);\n tree ffecom_save_tree (tree t);\n+void ffecom_start_compstmt (void);\n tree ffecom_start_decl (tree decl, bool is_init);\n void ffecom_sym_commit (ffesymbol s);\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n@@ -335,6 +350,7 @@ void ffecom_sym_retract (ffesymbol s);\n tree ffecom_temp_label (void);\n tree ffecom_truth_value (tree expr);\n tree ffecom_truth_value_invert (tree expr);\n+tree ffecom_type_expr (ffebld expr);\n tree ffecom_which_entrypoint_decl (void);\n \n /* These need to be in the front end with exactly these interfaces,\n@@ -360,6 +376,7 @@ int mark_addressable (tree expr);\n #define ffecom_f2c_typecode(bt,kt) ffecom_f2c_typecode_[(bt)][(kt)]\n #define ffecom_label_kind() ffecom_label_kind_\n #define ffecom_pointer_kind() ffecom_pointer_kind_\n+#define ffecom_prepare_expr(e) ffecom_prepare_expr_ ((e), NULL)\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n \n #define ffecom_init_1()"}, {"sha": "b89b7472d57d7a542dfc5f1d5a027d523f4581c6", "filename": "gcc/f/stc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fstc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fstc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstc.c?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -10000,6 +10000,10 @@ ffestc_R838 (ffelexToken label_token, ffebld target,\n     return;\n   ffestc_labeldef_branch_begin_ ();\n \n+  /* Mark target symbol as target of an ASSIGN.  */\n+  if (ffebld_op (target) == FFEBLD_opSYMTER)\n+    ffesymbol_set_assigned (ffebld_symter (target), TRUE);\n+\n   if (ffestc_labelref_is_assignable_ (label_token, &label))\n     ffestd_R838 (label, target);\n "}, {"sha": "72037c13b2b11abada491d0479731b51e3bfbace", "filename": "gcc/f/std.c", "status": "modified", "additions": 55, "deletions": 32, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fstd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fstd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstd.c?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -192,15 +192,27 @@ struct _ffestd_stmt_\n \tstruct\n \t  {\n \t    mallocPool pool;\n+\t    ffestw block;\n \t    ffebld expr;\n \t  }\n \tR803;\n \tstruct\n \t  {\n \t    mallocPool pool;\n+\t    ffestw block;\n \t    ffebld expr;\n \t  }\n \tR804;\n+\tstruct\n+\t  {\n+\t    ffestw block;\n+\t  }\n+\tR805;\n+\tstruct\n+\t  {\n+\t    ffestw block;\n+\t  }\n+\tR806;\n \tstruct\n \t  {\n \t    mallocPool pool;\n@@ -750,27 +762,28 @@ ffestd_stmt_pass_ ()\n \tcase FFESTD_stmtidR803_:\n \t  ffestd_subr_line_restore_ (stmt);\n \t  if (okay)\n-\t    ffeste_R803 (stmt->u.R803.expr);\n+\t    ffeste_R803 (stmt->u.R803.block, stmt->u.R803.expr);\n \t  malloc_pool_kill (stmt->u.R803.pool);\n \t  break;\n \n \tcase FFESTD_stmtidR804_:\n \t  ffestd_subr_line_restore_ (stmt);\n \t  if (okay)\n-\t    ffeste_R804 (stmt->u.R804.expr);\n+\t    ffeste_R804 (stmt->u.R803.block, stmt->u.R804.expr);\n \t  malloc_pool_kill (stmt->u.R804.pool);\n \t  break;\n \n \tcase FFESTD_stmtidR805_:\n \t  ffestd_subr_line_restore_ (stmt);\n \t  if (okay)\n-\t    ffeste_R805 ();\n+\t    ffeste_R805 (stmt->u.R803.block);\n \t  break;\n \n \tcase FFESTD_stmtidR806_:\n \t  ffestd_subr_line_restore_ (stmt);\n \t  if (okay)\n-\t    ffeste_R806 ();\n+\t    ffeste_R806 (stmt->u.R806.block);\n+\t  ffestw_kill (stmt->u.R806.block);\n \t  break;\n \n \tcase FFESTD_stmtidR807_:\n@@ -1597,7 +1610,19 @@ ffestd_labeldef_format (ffelab label)\n     ffestdStmt_ stmt;\n \n     stmt = ffestd_stmt_new_ (FFESTD_stmtidFORMATLABEL_);\n+#if 0\n+    /* Don't bother with this.  See FORMAT statement.  */\n+    /* Prepend FORMAT label instead of appending it, so all the\n+       FORMAT label/statement pairs end up at the top of the list.\n+       This helps ensure all decls for a block (in the GBE) are\n+       known before any executable statements are generated.  */\n+    stmt->previous = (ffestdStmt_) &ffestd_stmt_list_.first;\n+    stmt->next = ffestd_stmt_list_.first;\n+    stmt->next->previous = stmt;\n+    stmt->previous->next = stmt;\n+#else\n     ffestd_stmt_append_ (stmt);\n+#endif\n     stmt->u.formatlabel.label = label;\n   }\n #endif\n@@ -2989,13 +3014,7 @@ ffestd_R744 ()\n #endif\n }\n \n-/* ffestd_R745 -- Implicit END WHERE statement\n-\n-   ffestd_R745(TRUE);\n-\n-   Implement the end of the current WHERE \"block\".  ok==TRUE iff statement\n-   following WHERE (substatement) is valid; else, statement is invalid\n-   or stack forcibly popped due to ffestd_eof_().  */\n+/* ffestd_R745 -- Implicit END WHERE statement.  */\n \n void\n ffestd_R745 (bool ok)\n@@ -3011,11 +3030,8 @@ ffestd_R745 (bool ok)\n }\n \n #endif\n-/* ffestd_R803 -- Block IF (IF-THEN) statement\n-\n-   ffestd_R803(construct_name,expr,expr_token);\n \n-   Make sure statement is valid here; implement.  */\n+/* Block IF (IF-THEN) statement.  */\n \n void\n ffestd_R803 (ffelexToken construct_name UNUSED, ffebld expr)\n@@ -3033,6 +3049,7 @@ ffestd_R803 (ffelexToken construct_name UNUSED, ffebld expr)\n     ffestd_stmt_append_ (stmt);\n     ffestd_subr_line_save_ (stmt);\n     stmt->u.R803.pool = ffesta_output_pool;\n+    stmt->u.R803.block = ffestw_use (ffestw_stack_top ());\n     stmt->u.R803.expr = expr;\n     ffesta_set_outpooldisp (FFESTA_pooldispPRESERVE);\n   }\n@@ -3042,13 +3059,7 @@ ffestd_R803 (ffelexToken construct_name UNUSED, ffebld expr)\n   assert (ffestd_block_level_ > 0);\n }\n \n-/* ffestd_R804 -- ELSE IF statement\n-\n-   ffestd_R804(expr,expr_token,name_token);\n-\n-   Make sure ffestd_kind_ identifies an IF block.  If not\n-   NULL, make sure name_token gives the correct name.  Implement the else\n-   of the IF block.  */\n+/* ELSE IF statement.  */\n \n void\n ffestd_R804 (ffebld expr, ffelexToken name UNUSED)\n@@ -3066,19 +3077,14 @@ ffestd_R804 (ffebld expr, ffelexToken name UNUSED)\n     ffestd_stmt_append_ (stmt);\n     ffestd_subr_line_save_ (stmt);\n     stmt->u.R804.pool = ffesta_output_pool;\n+    stmt->u.R804.block = ffestw_use (ffestw_stack_top ());\n     stmt->u.R804.expr = expr;\n     ffesta_set_outpooldisp (FFESTA_pooldispPRESERVE);\n   }\n #endif\n }\n \n-/* ffestd_R805 -- ELSE statement\n-\n-   ffestd_R805(name_token);\n-\n-   Make sure ffestd_kind_ identifies an IF block.  If not\n-   NULL, make sure name_token gives the correct name.  Implement the ELSE\n-   of the IF block.  */\n+/* ELSE statement.  */\n \n void\n ffestd_R805 (ffelexToken name UNUSED)\n@@ -3095,13 +3101,12 @@ ffestd_R805 (ffelexToken name UNUSED)\n     stmt = ffestd_stmt_new_ (FFESTD_stmtidR805_);\n     ffestd_stmt_append_ (stmt);\n     ffestd_subr_line_save_ (stmt);\n+    stmt->u.R805.block = ffestw_use (ffestw_stack_top ());\n   }\n #endif\n }\n \n-/* ffestd_R806 -- End an IF-THEN\n-\n-   ffestd_R806(TRUE);  */\n+/* END IF statement.  */\n \n void\n ffestd_R806 (bool ok UNUSED)\n@@ -3116,6 +3121,7 @@ ffestd_R806 (bool ok UNUSED)\n     stmt = ffestd_stmt_new_ (FFESTD_stmtidR806_);\n     ffestd_stmt_append_ (stmt);\n     ffestd_subr_line_save_ (stmt);\n+    stmt->u.R806.block = ffestw_use (ffestw_stack_top ());\n   }\n #endif\n \n@@ -4273,7 +4279,24 @@ ffestd_R1001 (ffesttFormatList f)\n     ffestdStmt_ stmt;\n \n     stmt = ffestd_stmt_new_ (FFESTD_stmtidR1001_);\n+#if 0\n+    /* Don't bother with this.  After all, things like cilists also are\n+       declared midway through code-generation.  Perhaps the only problems\n+       the gcc back end has with midway declarations are with stack vars,\n+       maybe only with vars that can be put in registers.  Unless/until the\n+       need is established, handle FORMAT just like cilists and others; at\n+       that point, they'd likely *all* have to be fixed, which would be\n+       very painful anyway.  */\n+    /* Insert FORMAT statement just after the first item on the\n+       statement list, which must be a FORMAT label, which see.  */\n+    assert (ffestd_stmt_list_.first->id == FFESTD_stmtidFORMATLABEL_);\n+    stmt->previous = ffestd_stmt_list_.first;\n+    stmt->next = ffestd_stmt_list_.first->next;\n+    stmt->next->previous = stmt;\n+    stmt->previous->next = stmt;\n+#else\n     ffestd_stmt_append_ (stmt);\n+#endif\n     stmt->u.R1001.str = str;\n   }\n #endif"}, {"sha": "b87f532e6a5b1e67ccb37acbc0f3f74b5a06be43", "filename": "gcc/f/ste.c", "status": "modified", "additions": 1659, "deletions": 1335, "changes": 2994, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.c?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade"}, {"sha": "78e98818b0905de7dd2e6bf3671225b2fc18a45a", "filename": "gcc/f/ste.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fste.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fste.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.h?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -62,10 +62,10 @@ void ffeste_end_R807 (void);\n void ffeste_labeldef_branch (ffelab label);\n void ffeste_labeldef_format (ffelab label);\n void ffeste_R737A (ffebld dest, ffebld source);\n-void ffeste_R803 (ffebld expr);\n-void ffeste_R804 (ffebld expr);\n-void ffeste_R805 (void);\n-void ffeste_R806 (void);\n+void ffeste_R803 (ffestw block, ffebld expr);\n+void ffeste_R804 (ffestw block, ffebld expr);\n+void ffeste_R805 (ffestw block);\n+void ffeste_R806 (ffestw block);\n void ffeste_R807 (ffebld expr);\n void ffeste_R809 (ffestw block, ffebld expr);\n void ffeste_R810 (ffestw block, unsigned long casenum);\n@@ -159,7 +159,11 @@ void ffeste_V026 (ffestpFindStmt *info);\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetFFE */\n #define ffeste_terminate_0()\n #define ffeste_terminate_1()\n+#ifdef ENABLE_CHECKING\n+void ffeste_terminate_2 (void);\n+#else\n #define ffeste_terminate_2()\n+#endif\n #define ffeste_terminate_3()\n #define ffeste_terminate_4()\n "}, {"sha": "58818a61bf21d5edd96a990facf76c023c0b5be4", "filename": "gcc/f/stw.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fstw.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fstw.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstw.h?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -81,6 +81,7 @@ struct _ffestw_\n     tree select_texpr_;\t\t/* tree for end case. */\n     bool select_break_;\t\t/* TRUE when CASE should start with gen\n \t\t\t\t   \"break;\". */\n+    int ifthen_fake_else_;\t/* Number of fake `else' introductions.  */\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC*/\n   };\n \n@@ -137,6 +138,7 @@ ffestw ffestw_use (ffestw block);\n #define ffestw_do_iter_var(b) ((b)->do_iter_var_)\n #define ffestw_do_iter_var_t(b) ((b)->do_iter_var_t_)\n #define ffestw_do_tvar(b) ((b)->do_tvar_)\n+#define ffestw_ifthen_fake_else(b) ((b)->ifthen_fake_else_)\n #define ffestw_init_1()\n #define ffestw_init_2()\n #define ffestw_init_3()\n@@ -156,6 +158,7 @@ ffestw ffestw_use (ffestw block);\n #define ffestw_set_do_iter_var(b,v) ((b)->do_iter_var_ = (v))\n #define ffestw_set_do_iter_var_t(b,t) ((b)->do_iter_var_t_ = (t))\n #define ffestw_set_do_tvar(b,d) ((b)->do_tvar_ = (d))\n+#define ffestw_set_ifthen_fake_else(b,e) ((b)->ifthen_fake_else_ = (e))\n #define ffestw_set_label(b,l) ((b)->label_ = (l))\n #define ffestw_set_line(b,l) ((b)->line_ = (l))\n #define ffestw_set_name(b,n) ((b)->name_ = (n))"}, {"sha": "c4bd14deb99b5b89853589c48373615af6d23f29", "filename": "gcc/f/symbol.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsymbol.c?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -255,6 +255,7 @@ ffesymbol_new_ (ffename n)\n   s->reported = FALSE;\n   s->explicit_where = FALSE;\n   s->namelisted = FALSE;\n+  s->assigned = FALSE;\n \n   ffename_set_symbol (n, s);\n "}, {"sha": "0c7262cd0a6d885a320e34e0762bb707d2f20706", "filename": "gcc/f/symbol.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsymbol.h?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -151,11 +151,13 @@ struct _ffesymbol_\n \t\t\t\t   away. */\n     bool explicit_where;\t/* TRUE if INTRINSIC/EXTERNAL explicit. */\n     bool namelisted;\t\t/* TRUE if in NAMELIST (needs static alloc). */\n+    bool assigned;\t\t/* TRUE if ever ASSIGNed to.  */\n   };\n \n #define ffesymbol_accretes(s) ((s)->accretes)\n #define ffesymbol_accretion(s) ((s)->accretion)\n #define ffesymbol_arraysize(s) ((s)->array_size)\n+#define ffesymbol_assigned(s) ((s)->assigned)\n #define ffesymbol_attr(s,a) ((s)->attrs & ((ffesymbolAttrs) 1 << (a)))\n #define ffesymbol_attrs(s) ((s)->attrs)\n const char *ffesymbol_attrs_string (ffesymbolAttrs attrs);\n@@ -231,6 +233,7 @@ bool ffesymbol_retractable (void);\n #define ffesymbol_set_accretes(s,a) ((s)->accretes = (a))\n #define ffesymbol_set_accretion(s,a) ((s)->accretion = (a))\n #define ffesymbol_set_arraysize(s,a) ((s)->array_size = (a))\n+#define ffesymbol_set_assigned(s,a) ((s)->assigned = (a))\n #define ffesymbol_set_attr(s,a) ((s)->attrs |= ((ffesymbolAttrs) 1 << (a)))\n #define ffesymbol_set_attrs(s,a) ((s)->attrs = (a))\n #define ffesymbol_set_common(s,c) ((s)->common = (c))"}, {"sha": "807dbce5ed432fd86db3738615f8bcf9e2e42aa3", "filename": "gcc/f/version.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e4ee3a6dfe2e2e57eecdb752693a417382eade/gcc%2Ff%2Fversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fversion.c?ref=c7e4ee3a6dfe2e2e57eecdb752693a417382eade", "patch": "@@ -1 +1 @@\n-const char *ffe_version_string = \"0.5.24-19990405\";\n+const char *ffe_version_string = \"0.5.24-19990417\";"}]}