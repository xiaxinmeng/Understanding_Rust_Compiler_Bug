{"sha": "8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1YjcyN2FjYzE5ZDNlZTQxNWUwZDBlNWJhODRhZjdkMTg0M2RhYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-20T00:13:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-20T00:13:51Z"}, "message": "Add more pedwarns for [[]] C attributes on types.\n\nThe standard [[]] attributes currently defined in C2x are all not\nvalid on types not being defined at the time.\n\nUse on such types results in a warning from attribs.c about attributes\nappertaining to types (the warning that I think is bogus in general\nfor both C and C++, applying as it does to all [[]] attributes\nincluding gnu:: ones that are perfectly meaningful on types not being\ndefined and work fine when __attribute__ syntax is used instead).  If\nthat warning is removed (as I intend to do in a subsequent patch),\nwarnings may or may not result from the attribute handlers, depending\non whether those particular attribute handlers consider the attributes\nmeaningful in such a context.  In C, however, the rules about where\neach [[]] attribute is valid are constraints, so a pedwarn, not a\nwarning, is required.\n\nBecause some handlers are shared between standard and gnu::\nattributes, there can be cases that are valid for the GNU attribute\nvariant but not for the standard one.  So in general it is not correct\nto rely on the attribute handlers to give all required pedwarns\n(although in some cases, a pedwarn in the attribute handler is in\nappropriate way of diagnosing an invalid use); they not have the\ninformation about whether the attribute was a gnu:: one and can\nlegitimately accept a wider range of uses for the gnu:: attributes.\n\nThis patch ensures appropriate diagnostics for invalid uses of C2x\nstandard attributes on types, and so helps pave the way for the\nsubsequent removal of the bogus check in attribs.c, by adding a check\nrun in the front end before calling decl_attributes; this check\nremoves the attributes from the list after calling pedwarn to avoid\nsubsequent duplicate warnings.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c:\n\t* c-decl.c (c_warn_type_attributes): New function.\n\t(groktypename, grokdeclarator, finish_declspecs): Call\n\tc_warn_type_attributes before applying attributes to types.\n\t* c-tree.h (c_warn_type_attributes): Declare.\n\ngcc/testsuite:\n\t* gcc.dg/c2x-attr-deprecated-2.c, gcc.dg/c2x-attr-fallthrough-2.c,\n\tgcc.dg/c2x-attr-maybe_unused-2.c: Expect errors for invalid uses\n\tof standard attributes on types.  Add more tests of invalid uses\n\ton types.\n\nFrom-SVN: r278471", "tree": {"sha": "be38735de6e9b5ab9675dee975c68972c0dea825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be38735de6e9b5ab9675dee975c68972c0dea825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6ce0ae553a9a73bf4eb27d16ee751167806f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6ce0ae553a9a73bf4eb27d16ee751167806f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6ce0ae553a9a73bf4eb27d16ee751167806f8d"}], "stats": {"total": 80, "additions": 60, "deletions": 20}, "files": [{"sha": "3f42e40896a5e433e94a1f438aa33ca11050962e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "patch": "@@ -1,3 +1,10 @@\n+2019-11-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (c_warn_type_attributes): New function.\n+\t(groktypename, grokdeclarator, finish_declspecs): Call\n+\tc_warn_type_attributes before applying attributes to types.\n+\t* c-tree.h (c_warn_type_attributes): Declare.\n+\n 2019-11-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (c_warn_unused_attributes): Use pedwarn not warning for"}, {"sha": "d153de2e2ad0d3dfd0a5d989dc5dcde80e67e6a7", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "patch": "@@ -4525,6 +4525,26 @@ c_warn_unused_attributes (tree attrs)\n       warning (OPT_Wattributes, \"%qE attribute ignored\",\n \t       get_attribute_name (t));\n }\n+\n+/* Warn for standard attributes being applied to a type that is not\n+   being defined, where that is a constraint violation, and return a\n+   list of attributes with them removed.  */\n+\n+tree\n+c_warn_type_attributes (tree attrs)\n+{\n+  tree *attr_ptr = &attrs;\n+  while (*attr_ptr)\n+    if (get_attribute_namespace (*attr_ptr) == NULL_TREE)\n+      {\n+\tpedwarn (input_location, OPT_Wattributes, \"%qE attribute ignored\",\n+\t\t get_attribute_name (*attr_ptr));\n+\t*attr_ptr = TREE_CHAIN (*attr_ptr);\n+      }\n+    else\n+      attr_ptr = &TREE_CHAIN (*attr_ptr);\n+  return attrs;\n+}\n \f\n /* Called when a declaration is seen that contains no names to declare.\n    If its type is a reference to a structure, union or enum inherited\n@@ -4883,6 +4903,7 @@ groktypename (struct c_type_name *type_name, tree *expr,\n \t\t\t DEPRECATED_NORMAL);\n \n   /* Apply attributes.  */\n+  attrs = c_warn_type_attributes (attrs);\n   decl_attributes (&type, attrs, 0);\n \n   return type;\n@@ -6295,10 +6316,13 @@ grokdeclarator (const struct c_declarator *declarator,\n \t    if (cxx11_attribute_p (attrs) && inner_decl->kind == cdk_id)\n \t      returned_attrs = chainon (returned_attrs, attrs);\n \t    else\n-\t      returned_attrs = decl_attributes (&type,\n-\t\t\t\t\t\tchainon (returned_attrs,\n-\t\t\t\t\t\t\t attrs),\n-\t\t\t\t\t\tattr_flags);\n+\t      {\n+\t\tattrs = c_warn_type_attributes (attrs);\n+\t\treturned_attrs = decl_attributes (&type,\n+\t\t\t\t\t\t  chainon (returned_attrs,\n+\t\t\t\t\t\t\t   attrs),\n+\t\t\t\t\t\t  attr_flags);\n+\t      }\n \t    break;\n \t  }\n \tcase cdk_array:\n@@ -11676,6 +11700,7 @@ finish_declspecs (struct c_declspecs *specs)\n     }\n   if (specs->type != NULL)\n     {\n+      specs->postfix_attrs = c_warn_type_attributes (specs->postfix_attrs);\n       decl_attributes (&specs->type, specs->postfix_attrs, 0);\n       specs->postfix_attrs = NULL_TREE;\n     }"}, {"sha": "dffefa3fd1a549071cf04d6e691b6083b5ac9ea9", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "patch": "@@ -596,6 +596,7 @@ extern tree c_builtin_function (tree);\n extern tree c_builtin_function_ext_scope (tree);\n extern tree c_simulate_builtin_function_decl (tree);\n extern void c_warn_unused_attributes (tree);\n+extern tree c_warn_type_attributes (tree);\n extern void shadow_tag (const struct c_declspecs *);\n extern void shadow_tag_warned (const struct c_declspecs *, int);\n extern tree start_enum (location_t, struct c_enum_contents *, tree);"}, {"sha": "37fbda183dec458e99c663ae8884d89c530bcdc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "patch": "@@ -1,3 +1,10 @@\n+2019-11-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-attr-deprecated-2.c, gcc.dg/c2x-attr-fallthrough-2.c,\n+\tgcc.dg/c2x-attr-maybe_unused-2.c: Expect errors for invalid uses\n+\tof standard attributes on types.  Add more tests of invalid uses\n+\ton types.\n+\n 2019-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92414"}, {"sha": "44f2cc9bd138f715e44233733fcd7ef1914dc32f", "filename": "gcc/testsuite/gcc.dg/c2x-attr-deprecated-2.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c?ref=8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "patch": "@@ -7,14 +7,13 @@\n \n [[deprecated]]; /* { dg-error \"ignored\" } */\n \n-int [[deprecated]] var; /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+int [[deprecated]] var; /* { dg-error \"ignored\" } */\n \n-int array_with_dep_type[2] [[deprecated]]; /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+int array_with_dep_type[2] [[deprecated]]; /* { dg-error \"ignored\" } */\n \n-void fn_with_dep_type () [[deprecated]]; /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+void fn_with_dep_type () [[deprecated]]; /* { dg-error \"ignored\" } */\n+\n+int z = sizeof (int [[__deprecated__]]); /* { dg-error \"ignored\" } */\n \n void\n f (void)"}, {"sha": "0e36adccc9eed068d03c67e3c998fc81f0cc502a", "filename": "gcc/testsuite/gcc.dg/c2x-attr-fallthrough-2.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c?ref=8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "patch": "@@ -4,11 +4,13 @@\n \n [[fallthrough]]; /* { dg-error \"'fallthrough' attribute at top level\" } */\n \n-int [[fallthrough]] x; /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+int [[fallthrough]] x; /* { dg-error \"ignored\" } */\n \n-int g () [[fallthrough]]; /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+int g () [[fallthrough]]; /* { dg-error \"ignored\" } */\n+\n+int array[2] [[fallthrough]]; /* { dg-error \"ignored\" } */\n+\n+int z = sizeof (int [[fallthrough]]); /* { dg-error \"ignored\" } */\n \n int\n f (int a)"}, {"sha": "a749639192e8bfb2e61345e665d815c6d22bd1c7", "filename": "gcc/testsuite/gcc.dg/c2x-attr-maybe_unused-2.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5b727acc19d3ee415e0d0e5ba84af7d1843dab/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-2.c?ref=8c5b727acc19d3ee415e0d0e5ba84af7d1843dab", "patch": "@@ -7,14 +7,13 @@\n \n [[maybe_unused]]; /* { dg-error \"ignored\" } */\n \n-int [[maybe_unused]] var; /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+int [[maybe_unused]] var; /* { dg-error \"ignored\" } */\n \n-int array_with_dep_type[2] [[maybe_unused]]; /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+int array_with_dep_type[2] [[maybe_unused]]; /* { dg-error \"ignored\" } */\n \n-void fn_with_dep_type () [[maybe_unused]]; /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+void fn_with_dep_type () [[maybe_unused]]; /* { dg-error \"ignored\" } */\n+\n+int z = sizeof (int [[__maybe_unused__]]); /* { dg-error \"ignored\" } */\n \n void\n f (void)"}]}