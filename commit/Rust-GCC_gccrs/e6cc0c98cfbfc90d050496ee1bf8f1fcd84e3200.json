{"sha": "e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjYzBjOThjZmJmYzkwZDA1MDQ5NmVlMWJmOGYxZmNkODRlMzIwMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:33:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:33:40Z"}, "message": "ia64-opts.h: New.\n\n\t* config/ia64/ia64-opts.h: New.\n\t* config/ia64/ia64.c (ia64_tune): Remove.\n\t(ia64_handle_option): Don't handle OPT_mfixed_range_ or OPT_mtune_\n\there.  Use error_at.\n\t(ia64_option_override): Handle deferred OPT_mfixed_range_.\n\t* config/ia64/ia64.h (enum processor_type, ia64_tune): Remove.\n\t* config/ia64/ia64.opt (config/ia64/ia64-opts.h): New\n\tHeaderInclude entry.\n\t(ia64_tune): New Variable entry.\n\t(mfixed-range=): Use Defer and Var.\n\t(mtune=): Use Enum and Var.\n\t(ia64_tune): New Enum and EnumValue entries.\n\nFrom-SVN: r171317", "tree": {"sha": "077377083fa3ea0b256332b81e40ded2e952db6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/077377083fa3ea0b256332b81e40ded2e952db6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db25893ca7ca3f37425c24c04ab9beed253462d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db25893ca7ca3f37425c24c04ab9beed253462d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db25893ca7ca3f37425c24c04ab9beed253462d9"}], "stats": {"total": 150, "additions": 94, "deletions": 56}, "files": [{"sha": "e9c325ca287835e53e71928adf3286c6ef209289", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "patch": "@@ -1,3 +1,18 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/ia64/ia64-opts.h: New.\n+\t* config/ia64/ia64.c (ia64_tune): Remove.\n+\t(ia64_handle_option): Don't handle OPT_mfixed_range_ or OPT_mtune_\n+\there.  Use error_at.\n+\t(ia64_option_override): Handle deferred OPT_mfixed_range_.\n+\t* config/ia64/ia64.h (enum processor_type, ia64_tune): Remove.\n+\t* config/ia64/ia64.opt (config/ia64/ia64-opts.h): New\n+\tHeaderInclude entry.\n+\t(ia64_tune): New Variable entry.\n+\t(mfixed-range=): Use Defer and Var.\n+\t(mtune=): Use Enum and Var.\n+\t(ia64_tune): New Enum and EnumValue entries.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/frv/frv-opts.h: New."}, {"sha": "eb28d83a3883f80c9b52b4907b979c48808f2b90", "filename": "gcc/config/ia64/ia64-opts.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2Fconfig%2Fia64%2Fia64-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2Fconfig%2Fia64%2Fia64-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-opts.h?ref=e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "patch": "@@ -0,0 +1,35 @@\n+/* Definitions for option handling for IA-64.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+   2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef IA64_OPTS_H\n+#define IA64_OPTS_H\n+\n+/* Which processor to schedule for. The cpu attribute defines a list\n+   that mirrors this list, so changes to ia64.md must be made at the\n+   same time.  */\n+\n+enum processor_type\n+{\n+  PROCESSOR_ITANIUM,\t\t\t/* Original Itanium.  */\n+  PROCESSOR_ITANIUM2,\n+  PROCESSOR_max\n+};\n+\n+#endif"}, {"sha": "b86c4d8985792fb5a1da7aaa9fdef09c7e1cff55", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 22, "deletions": 39, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "patch": "@@ -103,9 +103,6 @@ static const char * const ia64_local_reg_names[80] =\n static const char * const ia64_output_reg_names[8] =\n { \"out0\", \"out1\", \"out2\", \"out3\", \"out4\", \"out5\", \"out6\", \"out7\" };\n \n-/* Which cpu are we scheduling for.  */\n-enum processor_type ia64_tune = PROCESSOR_ITANIUM2;\n-\n /* Determines whether we run our final scheduling pass or not.  We always\n    avoid the normal second scheduling pass.  */\n static int ia64_flag_schedule_insns2;\n@@ -5657,54 +5654,22 @@ fix_range (const char *const_str)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-ia64_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+ia64_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n-\t\t    location_t loc ATTRIBUTE_UNUSED)\n+\t\t    location_t loc)\n {\n   size_t code = decoded->opt_index;\n   const char *arg = decoded->arg;\n   int value = decoded->value;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n-    case OPT_mfixed_range_:\n-      fix_range (arg);\n-      return true;\n-\n     case OPT_mtls_size_:\n       if (value != 14 && value != 22 && value != 64)\n-\terror (\"bad value %<%s%> for -mtls-size= switch\", arg);\n+\terror_at (loc, \"bad value %<%s%> for -mtls-size= switch\", arg);\n       return true;\n \n-    case OPT_mtune_:\n-      {\n-\tstatic struct pta\n-\t  {\n-\t    const char *name;\t\t/* processor name or nickname.  */\n-\t    enum processor_type processor;\n-\t  }\n-\tconst processor_alias_table[] =\n-\t  {\n-\t    {\"itanium2\", PROCESSOR_ITANIUM2},\n-\t    {\"mckinley\", PROCESSOR_ITANIUM2},\n-\t  };\n-\tint const pta_size = ARRAY_SIZE (processor_alias_table);\n-\tint i;\n-\n-\tfor (i = 0; i < pta_size; i++)\n-\t  if (!strcmp (arg, processor_alias_table[i].name))\n-\t    {\n-\t      ia64_tune = processor_alias_table[i].processor;\n-\t      break;\n-\t    }\n-\tif (i == pta_size)\n-\t  error (\"bad value %<%s%> for -mtune= switch\", arg);\n-\treturn true;\n-      }\n-\n     default:\n       return true;\n     }\n@@ -5715,6 +5680,24 @@ ia64_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n static void\n ia64_option_override (void)\n {\n+  unsigned int i;\n+  cl_deferred_option *opt;\n+  VEC(cl_deferred_option,heap) *vec\n+    = (VEC(cl_deferred_option,heap) *) ia64_deferred_options;\n+\n+  FOR_EACH_VEC_ELT (cl_deferred_option, vec, i, opt)\n+    {\n+      switch (opt->opt_index)\n+\t{\n+\tcase OPT_mfixed_range_:\n+\t  fix_range (opt->arg);\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n   if (TARGET_AUTO_PIC)\n     target_flags |= MASK_CONST_GP;\n "}, {"sha": "ed618f29fc274a80e5eef56065c3a65335a53e8f", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009, 2010 Free Software Foundation, Inc.\n+   2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n    \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -102,19 +102,6 @@ enum ia64_inline_type\n #ifndef TARGET_CPU_DEFAULT\n #define TARGET_CPU_DEFAULT 0\n #endif\n-\n-/* Which processor to schedule for. The cpu attribute defines a list\n-   that mirrors this list, so changes to ia64.md must be made at the\n-   same time.  */\n-\n-enum processor_type\n-{\n-  PROCESSOR_ITANIUM,\t\t\t/* Original Itanium.  */\n-  PROCESSOR_ITANIUM2,\n-  PROCESSOR_max\n-};\n-\n-extern enum processor_type ia64_tune;\n \f\n /* Driver configuration */\n "}, {"sha": "b924c1041e883f959175b67a6a4ffc73b8dd5cc6", "filename": "gcc/config/ia64/ia64.opt", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2Fconfig%2Fia64%2Fia64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200/gcc%2Fconfig%2Fia64%2Fia64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.opt?ref=e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "patch": "@@ -1,4 +1,5 @@\n-; Copyright (C) 2005, 2006, 2008, 2009, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2006, 2008, 2009, 2010, 2011\n+; Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -16,6 +17,13 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/ia64/ia64-opts.h\n+\n+; Which cpu are we scheduling for.\n+Variable\n+enum processor_type ia64_tune = PROCESSOR_ITANIUM2\n+\n mbig-endian\n Target Report RejectNegative Mask(BIG_ENDIAN)\n Generate big endian code\n@@ -103,17 +111,27 @@ Target Report Mask(EARLY_STOP_BITS)\n Enable earlier placing stop bits for better scheduling\n \n mfixed-range=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(ia64_deferred_options) Defer\n Specify range of registers to make fixed\n \n mtls-size=\n Target RejectNegative Joined UInteger Var(ia64_tls_size) Init(22)\n Specify bit size of immediate TLS offsets\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(ia64_tune) Var(ia64_tune)\n Schedule code for given CPU\n \n+Enum\n+Name(ia64_tune) Type(enum processor_type)\n+Known Itanium CPUs (for use with the -mtune= option):\n+\n+EnumValue\n+Enum(ia64_tune) String(itanium2) Value(PROCESSOR_ITANIUM2)\n+\n+EnumValue\n+Enum(ia64_tune) String(mckinley) Value(PROCESSOR_ITANIUM2)\n+\n msched-br-data-spec\n Target Report Var(mflag_sched_br_data_spec) Init(0)\n Use data speculation before reload"}]}