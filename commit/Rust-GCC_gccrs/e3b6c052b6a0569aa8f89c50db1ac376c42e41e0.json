{"sha": "e3b6c052b6a0569aa8f89c50db1ac376c42e41e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiNmMwNTJiNmEwNTY5YWE4Zjg5YzUwZGIxYWMzNzZjNDJlNDFlMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-29T22:16:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-30T00:38:32Z"}, "message": "c++: Drop alignas restriction for stack variables.\n\nSince expand_stack_vars and such know how to deal with variables aligned\nbeyond MAX_SUPPORTED_STACK_ALIGNMENT, we shouldn't reject alignas of large\nalignments.  And if we don't do that, there's no point in having\ncheck_cxx_fundamental_alignment_constraints at all, since\ncheck_user_alignment already enforces MAX_OFILE_ALIGNMENT.\n\n\tPR c++/89357\n\t* c-attribs.c (check_cxx_fundamental_alignment_constraints): Remove.", "tree": {"sha": "0d1a9d6bcc59f2d688c3370f7bfc7d9dac8429ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d1a9d6bcc59f2d688c3370f7bfc7d9dac8429ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8be8e32fafaab853522790dd62570b5f4de2fdb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be8e32fafaab853522790dd62570b5f4de2fdb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be8e32fafaab853522790dd62570b5f4de2fdb8"}], "stats": {"total": 81, "additions": 20, "deletions": 61}, "files": [{"sha": "b15630df41bf567852209fec3d5ae72b95fd825b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e3b6c052b6a0569aa8f89c50db1ac376c42e41e0", "patch": "@@ -1,3 +1,8 @@\n+2020-01-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/89357\n+\t* c-attribs.c (check_cxx_fundamental_alignment_constraints): Remove.\n+\n 2020-01-23  Jason Merrill  <jason@redhat.com>\n \n \t* c-warn.c (conversion_warning): Change -Wsign-conversion handling."}, {"sha": "7ec6fc848ac0ca31c11e0abb5bc025f9e7105bf9", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 1, "deletions": 61, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=e3b6c052b6a0569aa8f89c50db1ac376c42e41e0", "patch": "@@ -1957,65 +1957,6 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   return res;\n }\n \n-/* If in c++-11, check if the c++-11 alignment constraint with respect\n-   to fundamental alignment (in [dcl.align]) are satisfied.  If not in\n-   c++-11 mode, does nothing.\n-\n-   [dcl.align]2/ says:\n-\n-   [* if the constant expression evaluates to a fundamental alignment,\n-   the alignment requirement of the declared entity shall be the\n-   specified fundamental alignment.\n-\n-   * if the constant expression evaluates to an extended alignment\n-   and the implementation supports that alignment in the context\n-   of the declaration, the alignment of the declared entity shall\n-   be that alignment\n-\n-   * if the constant expression evaluates to an extended alignment\n-   and the implementation does not support that alignment in the\n-   context of the declaration, the program is ill-formed].  */\n-\n-static bool\n-check_cxx_fundamental_alignment_constraints (tree node,\n-\t\t\t\t\t     unsigned align_log,\n-\t\t\t\t\t     int flags)\n-{\n-  bool alignment_too_large_p = false;\n-  unsigned requested_alignment = (1U << align_log) * BITS_PER_UNIT;\n-  unsigned max_align = 0;\n-\n-  if ((!(flags & ATTR_FLAG_CXX11) && !warn_cxx_compat)\n-      || (node == NULL_TREE || node == error_mark_node))\n-    return true;\n-\n-  if (cxx_fundamental_alignment_p (requested_alignment))\n-    return true;\n-\n-  if (VAR_P (node))\n-    {\n-      if (TREE_STATIC (node) || DECL_EXTERNAL (node))\n-\t/* For file scope variables and static members, the target supports\n-\t   alignments that are at most MAX_OFILE_ALIGNMENT.  */\n-\tmax_align = MAX_OFILE_ALIGNMENT;\n-      else\n-\t/* For stack variables, the target supports at most\n-\t   MAX_STACK_ALIGNMENT.  */\n-\tmax_align = MAX_STACK_ALIGNMENT;\n-      if (requested_alignment > max_align)\n-\talignment_too_large_p = true;\n-    }\n-  /* Let's be liberal for types and fields; don't limit their alignment any\n-     more than check_user_alignment already did.  */\n-\n-  if (alignment_too_large_p)\n-    pedwarn (input_location, OPT_Wattributes,\n-\t     \"requested alignment %d is larger than %d\",\n-\t     requested_alignment / BITS_PER_UNIT, max_align / BITS_PER_UNIT);\n-\n-  return !alignment_too_large_p;\n-}\n-\n /* Common codes shared by handle_warn_if_not_aligned_attribute and\n    handle_aligned_attribute.  */\n \n@@ -2059,8 +2000,7 @@ common_handle_aligned_attribute (tree *node, tree name, tree args, int flags,\n   /* Log2 of specified alignment.  */\n   int pow2align = check_user_alignment (align_expr, objfile,\n \t\t\t\t\t/* warn_zero = */ true);\n-  if (pow2align == -1\n-      || !check_cxx_fundamental_alignment_constraints (*node, pow2align, flags))\n+  if (pow2align == -1)\n     {\n       *no_add_attrs = true;\n       return NULL_TREE;"}, {"sha": "b736083affc4b6f1e80332973d0c10086e516731", "filename": "gcc/testsuite/g++.dg/cpp0x/alignas17.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b6c052b6a0569aa8f89c50db1ac376c42e41e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas17.C?ref=e3b6c052b6a0569aa8f89c50db1ac376c42e41e0", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/89357\n+// { dg-do compile { target c++11 } }\n+\n+void g(int &);\n+\n+void f0() {\n+  __attribute__((aligned(128))) static int x;\n+  g(x);\n+}\n+\n+void f1() {\n+  alignas(128) int x;\n+  g(x);\n+}"}]}