{"sha": "8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE3NTJkZmVhNmY1MTJlY2IxOWE3ZjJmZDUzNWI4ODYyZWYzZGJlMg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2011-06-12T15:51:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-06-12T15:51:36Z"}, "message": "allocator.h (__shrink_to_fit): Rename to __shrink_to_fit_aux, fix.\n\n2011-06-12  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/allocator.h (__shrink_to_fit): Rename to\n\t__shrink_to_fit_aux, fix.\n\t* include/bits/stl_vector.h (_M_shrink_to_fit): Declare.\n\t(shrink_to_fit): Use the latter.\n\t* include/debug/vector (shrink_to_fit): Likewise.\n\t* include/bits/vector.tcc (_M_shrink_to_fit): Define.\n\t* include/bits/stl_deque.h (_M_shrink_to_fit): Declare.\n\t(shrink_to_fit): Use the latter.\n\t* include/debug/deque (shrink_to_fit): Likewise.\n\t* include/bits/deque.tcc (_M_shrink_to_fit): Define.\n\t* include/bits/vector.tcc (vector<bool>::_M_reallocate): Add.\n\t* include/bits/stl_bvector.h (_M_shrink_to_fit): Declare.\n\t(shrink_to_fit): Use the latter.\n\t(reserve): Use _M_reallocate, move inline.\n\t(_Bvector_base<>::_S_nword): Add, use it throughout.\n\t* include/debug/string (shrink_to_fit): Redo.\n\t* include/ext/vstring.h (shrink_to_fit): Optimize.\n\t* include/bits/basic_string.h (shrink_to_fit): Likewise.\n\t* testsuite/21_strings/debug/shrink_to_fit.cc: New.\n\t* testsuite/23_containers/vector/debug/shrink_to_fit.cc: Likewise.\n\t* testsuite/23_containers/vector/debug/bool/shrink_to_fit.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/bool/capacity/shrink_to_fit.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/debug/shrink_to_fit.cc: Likewise.\n\n\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r174967", "tree": {"sha": "35ec9f7a850f39851d2e1c34a6db9f76d61e6e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ec9f7a850f39851d2e1c34a6db9f76d61e6e77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/comments", "author": null, "committer": null, "parents": [{"sha": "0a7aa509afa59aa494c75f3ff7f285895800d538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7aa509afa59aa494c75f3ff7f285895800d538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7aa509afa59aa494c75f3ff7f285895800d538"}], "stats": {"total": 445, "additions": 391, "deletions": 54}, "files": [{"sha": "9462c08c15d2149e7c79926dcc5951e522cac7e1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -1,3 +1,32 @@\n+2011-06-12  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/allocator.h (__shrink_to_fit): Rename to\n+\t__shrink_to_fit_aux, fix.\n+\t* include/bits/stl_vector.h (_M_shrink_to_fit): Declare.\n+\t(shrink_to_fit): Use the latter.\n+\t* include/debug/vector (shrink_to_fit): Likewise.\n+\t* include/bits/vector.tcc (_M_shrink_to_fit): Define.\n+\t* include/bits/stl_deque.h (_M_shrink_to_fit): Declare.\n+\t(shrink_to_fit): Use the latter.\n+\t* include/debug/deque (shrink_to_fit): Likewise.\n+\t* include/bits/deque.tcc (_M_shrink_to_fit): Define.\n+\t* include/bits/vector.tcc (vector<bool>::_M_reallocate): Add.\n+\t* include/bits/stl_bvector.h (_M_shrink_to_fit): Declare.\n+\t(shrink_to_fit): Use the latter.\n+\t(reserve): Use _M_reallocate, move inline.\n+\t(_Bvector_base<>::_S_nword): Add, use it throughout.\n+\t* include/debug/string (shrink_to_fit): Redo.\n+\t* include/ext/vstring.h (shrink_to_fit): Optimize.\n+\t* include/bits/basic_string.h (shrink_to_fit): Likewise.\n+\t* testsuite/21_strings/debug/shrink_to_fit.cc: New.\n+\t* testsuite/23_containers/vector/debug/shrink_to_fit.cc: Likewise.\n+\t* testsuite/23_containers/vector/debug/bool/shrink_to_fit.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/bool/capacity/shrink_to_fit.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/debug/shrink_to_fit.cc: Likewise.\n+\n 2011-06-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/ext/extptr_allocator.h (construct, destroy): Fix for C++0x"}, {"sha": "680195082dae9fd10df76f9dd763bb1748dfe80c", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -184,18 +184,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, bool\n+    = __or_<is_copy_constructible<typename _Tp::value_type>,\n+            is_nothrow_move_constructible<typename _Tp::value_type>>::value>\n+    struct __shrink_to_fit_aux\n+    { static bool _S_do_it(_Tp&) { return false; } };\n+\n   template<typename _Tp>\n-    bool\n-    __shrink_to_fit(_Tp& __v)\n+    struct __shrink_to_fit_aux<_Tp, true>\n     {\n-      __try\n-\t{\n-\t  _Tp(__v).swap(__v);\n-\t  return true;\n-\t}\n-      __catch(...)\n-\t{ return false; }\n-    }\n+      static bool\n+      _S_do_it(_Tp& __c)\n+      {\n+\t__try\n+\t  {\n+\t    _Tp(__make_move_if_noexcept_iterator(__c.begin()),\n+\t\t__make_move_if_noexcept_iterator(__c.end())).swap(__c);\n+\t    return true;\n+\t  }\n+\t__catch(...)\n+\t  { return false; }\n+      }\n+    };\n \n   template<typename _Alloc, typename _Tp>\n     class __alloctr_rebind_helper"}, {"sha": "1022ce08e5ad53fba4bbfb532e3a4694dd2bc733", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -753,10 +753,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       shrink_to_fit()\n       {\n-\t__try\n-\t  { reserve(0); }\n-\t__catch(...)\n-\t  { }\n+\tif (capacity() > size())\n+\t  {\n+\t    __try\n+\t      { reserve(0); }\n+\t    __catch(...)\n+\t      { }\n+\t  }\n       }\n #endif\n "}, {"sha": "fab79157cdb04bb9147ae68fa1ca5d74de8527d5", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -325,6 +325,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    }\n \t}\n     }\n+\n+  template <typename _Tp, typename _Alloc>\n+    bool\n+    deque<_Tp, _Alloc>::\n+    _M_shrink_to_fit()\n+    {\n+      const difference_type __front_capacity\n+\t= (this->_M_impl._M_start._M_cur - this->_M_impl._M_start._M_first);\n+      if (__front_capacity == 0)\n+\treturn false;\n+\n+      const difference_type __back_capacity\n+\t= (this->_M_impl._M_finish._M_last - this->_M_impl._M_finish._M_cur);\n+      if (__front_capacity + __back_capacity < _S_buffer_size())\n+\treturn false;\n+\n+      return std::__shrink_to_fit_aux<deque>::_S_do_it(*this);\n+    }\n #endif\n \n   template <typename _Tp, typename _Alloc>"}, {"sha": "22443f4a4c1ce7a0b70064cbce6e37d3a223d36f", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -443,8 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _Bit_type*\n       _M_allocate(size_t __n)\n-      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)\n-\t\t\t\t/ int(_S_word_bit)); }\n+      { return _M_impl.allocate(_S_nword(__n)); }\n \n       void\n       _M_deallocate()\n@@ -453,6 +452,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_impl.deallocate(_M_impl._M_start._M_p,\n \t\t\t     _M_impl._M_end_of_storage - _M_impl._M_start._M_p);\n       }\n+\n+      static size_t\n+      _S_nword(size_t __n)\n+      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }\n     };\n \n _GLIBCXX_END_NAMESPACE_CONTAINER\n@@ -511,6 +514,7 @@ template<typename _Alloc>\n   protected:\n     using _Base::_M_allocate;\n     using _Base::_M_deallocate;\n+    using _Base::_S_nword;\n     using _Base::_M_get_Bit_allocator;\n \n   public:\n@@ -724,7 +728,13 @@ template<typename _Alloc>\n     { _M_range_check(__n); return (*this)[__n]; }\n \n     void\n-    reserve(size_type __n);\n+    reserve(size_type __n)\n+    {\n+      if (__n > max_size())\n+\t__throw_length_error(__N(\"vector::reserve\"));\n+      if (capacity() < __n)\n+\t_M_reallocate(__n);\n+    }\n \n     reference\n     front()\n@@ -844,7 +854,7 @@ template<typename _Alloc>\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n     void\n     shrink_to_fit()\n-    { std::__shrink_to_fit(*this); }\n+    { _M_shrink_to_fit(); }\n #endif\n \n     void\n@@ -875,13 +885,19 @@ template<typename _Alloc>\n     _M_initialize(size_type __n)\n     {\n       _Bit_type* __q = this->_M_allocate(__n);\n-      this->_M_impl._M_end_of_storage = (__q\n-\t\t\t\t\t + ((__n + int(_S_word_bit) - 1)\n-\t\t\t\t\t    / int(_S_word_bit)));\n+      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);\n       this->_M_impl._M_start = iterator(__q, 0);\n       this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);\n     }\n \n+    void\n+    _M_reallocate(size_type __n);\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    bool\n+    _M_shrink_to_fit();\n+#endif\n+\n     // Check whether it's an integral type.  If so, it's not an iterator.\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "6d7a18ca343cc2344daee08be956a7f4cfb7b105", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -1196,7 +1196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**  A non-binding request to reduce memory use.  */\n       void\n       shrink_to_fit()\n-      { std::__shrink_to_fit(*this); }\n+      { _M_shrink_to_fit(); }\n #endif\n \n       /**\n@@ -1847,6 +1847,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // Called by resize(sz).\n       void\n       _M_default_append(size_type __n);\n+\n+      bool\n+      _M_shrink_to_fit();\n #endif\n \n       //@{"}, {"sha": "929bcbe7ba15611c306738d4e157934ab45beb1d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -646,7 +646,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**  A non-binding request to reduce capacity() to size().  */\n       void\n       shrink_to_fit()\n-      { std::__shrink_to_fit(*this); }\n+      { _M_shrink_to_fit(); }\n #endif\n \n       /**\n@@ -1229,6 +1229,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // Called by resize(n).\n       void\n       _M_default_append(size_type __n);\n+\n+      bool\n+      _M_shrink_to_fit();\n #endif\n \n       // Called by insert(p,x)"}, {"sha": "fd576dbd2df083b729b65b5d1e31b06274b64622", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 38, "deletions": 24, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -509,6 +509,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    }\n \t}\n     }\n+\n+  template<typename _Tp, typename _Alloc>\n+    bool\n+    vector<_Tp, _Alloc>::\n+    _M_shrink_to_fit()\n+    {\n+      if (capacity() == size())\n+\treturn false;\n+      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);\n+    }\n #endif\n \n   template<typename _Tp, typename _Alloc>\n@@ -609,24 +619,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n \n   // vector<bool>\n-\n   template<typename _Alloc>\n     void\n     vector<bool, _Alloc>::\n-    reserve(size_type __n)\n+    _M_reallocate(size_type __n)\n     {\n-      if (__n > this->max_size())\n-\t__throw_length_error(__N(\"vector::reserve\"));\n-      if (this->capacity() < __n)\n-\t{\n-\t  _Bit_type* __q = this->_M_allocate(__n);\n-\t  this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),\n-\t\t\t\t\t\t    iterator(__q, 0));\n-\t  this->_M_deallocate();\n-\t  this->_M_impl._M_start = iterator(__q, 0);\n-\t  this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)\n-\t\t\t\t\t     / int(_S_word_bit));\n-\t}\n+      _Bit_type* __q = this->_M_allocate(__n);\n+      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),\n+\t\t\t\t\t\titerator(__q, 0));\n+      this->_M_deallocate();\n+      this->_M_impl._M_start = iterator(__q, 0);\n+      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);\n     }\n \n   template<typename _Alloc>\n@@ -654,9 +657,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  this->_M_impl._M_finish = std::copy(__position, end(),\n \t\t\t\t\t      __i + difference_type(__n));\n \t  this->_M_deallocate();\n-\t  this->_M_impl._M_end_of_storage = (__q + ((__len\n-\t\t\t\t\t\t     + int(_S_word_bit) - 1)\n-\t\t\t\t\t\t    / int(_S_word_bit)));\n+\t  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);\n \t  this->_M_impl._M_start = iterator(__q, 0);\n \t}\n     }\n@@ -689,10 +690,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t__i = std::copy(__first, __last, __i);\n \t\tthis->_M_impl._M_finish = std::copy(__position, end(), __i);\n \t\tthis->_M_deallocate();\n-\t\tthis->_M_impl._M_end_of_storage = (__q\n-\t\t\t\t\t\t   + ((__len\n-\t\t\t\t\t\t       + int(_S_word_bit) - 1)\n-\t\t\t\t\t\t      / int(_S_word_bit)));\n+\t\tthis->_M_impl._M_end_of_storage = __q + _S_nword(__len);\n \t\tthis->_M_impl._M_start = iterator(__q, 0);\n \t      }\n \t  }\n@@ -720,13 +718,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  *__i++ = __x;\n \t  this->_M_impl._M_finish = std::copy(__position, end(), __i);\n \t  this->_M_deallocate();\n-\t  this->_M_impl._M_end_of_storage = (__q + ((__len\n-\t\t\t\t\t\t     + int(_S_word_bit) - 1)\n-\t\t\t\t\t\t    / int(_S_word_bit)));\n+\t  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);\n \t  this->_M_impl._M_start = iterator(__q, 0);\n \t}\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Alloc>\n+    bool\n+    vector<bool, _Alloc>::\n+    _M_shrink_to_fit()\n+    {\n+      if (capacity() - size() < int(_S_word_bit))\n+\treturn false;\n+      __try\n+\t{\n+\t  _M_reallocate(size());\n+\t  return true;\n+\t}\n+      __catch(...)\n+\t{ return false; }\n+    }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_CONTAINER\n } // namespace std\n "}, {"sha": "5b6bdeb544a0953251cd66e84b08c4df9b44fa77", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -277,7 +277,12 @@ namespace __debug\n #endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      using _Base::shrink_to_fit;\n+      void\n+      shrink_to_fit()\n+      {\n+\tif (_Base::_M_shrink_to_fit())\n+\t  this->_M_invalidate_all();\n+      }\n #endif\n \n       using _Base::empty;"}, {"sha": "9e0ad61bdefefdb3cf17207a520565137d40f3e3", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -237,7 +237,20 @@ namespace __gnu_debug\n     { this->resize(__n, _CharT()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    using _Base::shrink_to_fit;\n+    void\n+    shrink_to_fit()\n+    {\n+      if (capacity() > size())\n+\t{\n+\t  __try\n+\t    {\n+\t      reserve(0);\n+\t      this->_M_invalidate_all();\n+\t    }\n+\t  __catch(...)\n+\t    { }\n+\t}\n+    }\n #endif\n \n     using _Base::capacity;"}, {"sha": "1b80974d38c655cf09a8f07e1d39e2caa98a15f9", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -280,7 +280,15 @@ namespace __debug\n #endif\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      using _Base::shrink_to_fit;\n+      void\n+      shrink_to_fit()\n+      {\n+\tif (_Base::_M_shrink_to_fit())\n+\t  {\n+\t    _M_guaranteed_capacity = _Base::capacity();\n+\t    this->_M_invalidate_all();\n+\t  }\n+      }\n #endif\n \n       size_type"}, {"sha": "b0b3e2efa53052da4cefc81a1c64c52bf5d538e2", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -465,10 +465,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       shrink_to_fit()\n       {\n-\t__try\n-\t  { this->reserve(0); }\n-\t__catch(...)\n-\t  { }\n+\tif (capacity() > size())\n+\t  {\n+\t    __try\n+\t      { this->reserve(0); }\n+\t    __catch(...)\n+\t      { }\n+\t  }\n       }\n #endif\n "}, {"sha": "e2c85be268cf702c2c9a84493aa85ec2d92270a1", "filename": "libstdc++-v3/testsuite/21_strings/debug/shrink_to_fit.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fdebug%2Fshrink_to_fit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fdebug%2Fshrink_to_fit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fdebug%2Fshrink_to_fit.cc?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <debug/string>\n+\n+void test01()\n+{\n+  using __gnu_debug::string;\n+  string s;\n+  s.reserve(2);\n+  s.push_back('a');\n+  string::iterator it = s.begin();\n+  s.shrink_to_fit();\n+  // Following line should assert\n+  *it = 'z';\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4cce4bd37397c9b1a7ed38131d0a87dcfb1d90dd", "filename": "libstdc++-v3/testsuite/23_containers/deque/debug/shrink_to_fit.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fshrink_to_fit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fshrink_to_fit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fshrink_to_fit.cc?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <deque>\n+\n+void test01()\n+{\n+  using std::deque;\n+  deque<int> d;\n+  // Lets generate a hole at the begining of the deque:\n+  d.push_back(0);\n+  d.push_back(1);\n+  d.pop_front();\n+  deque<int>::iterator it;\n+  do\n+    {\n+      d.push_back(2);\n+      it = d.begin();\n+      auto old_abegin = &*d.begin();\n+      d.shrink_to_fit();\n+      if (&*d.begin() != old_abegin)\n+\tbreak;\n+    }\n+  while (true);\n+  // Following line should assert\n+  *it = 2;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c3ae90e981aeab327cb66c30a46bcedeafa593c8", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/capacity/shrink_to_fit.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2Fshrink_to_fit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2Fshrink_to_fit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2Fshrink_to_fit.cc?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<bool> vb(__CHAR_BIT__ * sizeof(unsigned long) + 1);\n+  vb.pop_back();\n+\n+  auto old_capacity = vb.capacity();\n+  vb.shrink_to_fit();\n+  VERIFY( vb.capacity() < old_capacity );\n+  VERIFY( vb.size() == vb.capacity() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8206e0e567b9b5e74c9e53d92a261a44d694d35b", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/bool/shrink_to_fit.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fbool%2Fshrink_to_fit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fbool%2Fshrink_to_fit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fbool%2Fshrink_to_fit.cc?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <vector>\n+\n+void test01()\n+{\n+  using std::vector;\n+\n+  vector<bool> vb(__CHAR_BIT__ * sizeof(unsigned long) + 1);\n+  vb.pop_back();\n+\n+  vector<bool>::iterator it = vb.begin();\n+  vb.shrink_to_fit();\n+\n+  // Following line should assert\n+  *it = true;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "969c79a283e2effdaba0b122f5d5b1f44e1193e3", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/shrink_to_fit.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fshrink_to_fit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fshrink_to_fit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fshrink_to_fit.cc?ref=8a752dfea6f512ecb19a7f2fd535b8862ef3dbe2", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <vector>\n+\n+void test01()\n+{\n+  using std::vector;\n+  vector<int> v;\n+  v.reserve(2);\n+  v.push_back(0);\n+  vector<int>::iterator it = v.begin();\n+  v.shrink_to_fit();\n+  // Following line should assert\n+  *it = 1;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}