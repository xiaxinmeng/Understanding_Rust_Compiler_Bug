{"sha": "c211cd236cb0b4cda31657cd96668aace2e8e4ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxMWNkMjM2Y2IwYjRjZGEzMTY1N2NkOTY2NjhhYWNlMmU4ZTRhYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-01-08T01:08:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-08T01:08:19Z"}, "message": "jit: Add checking for dereference of void *\n\ngcc/jit/ChangeLog:\n\t* jit-recording.h (gcc::jit::recording::type::is_void): New\n\tvirtual function.\n\t(gcc::jit::recording::memento_of_get_type::is_void): New\n\tfunction, overriding default implementation.\n\t* libgccjit.c (gcc_jit_rvalue_dereference): Verify that\n\tthe underlying type is not \"void\".\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/test-error-dereferencing-void-ptr.c: New test case.\n\nFrom-SVN: r219333", "tree": {"sha": "025103f7b525c54f3336316a1945f7c1106cf5c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025103f7b525c54f3336316a1945f7c1106cf5c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c211cd236cb0b4cda31657cd96668aace2e8e4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c211cd236cb0b4cda31657cd96668aace2e8e4ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c211cd236cb0b4cda31657cd96668aace2e8e4ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c211cd236cb0b4cda31657cd96668aace2e8e4ac/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5efe46fdc75546d4279d355b5e79280901238b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efe46fdc75546d4279d355b5e79280901238b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efe46fdc75546d4279d355b5e79280901238b09"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "01b3882053806381e6bb338e4d39920c784eca6e", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=c211cd236cb0b4cda31657cd96668aace2e8e4ac", "patch": "@@ -1,3 +1,12 @@\n+2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-recording.h (gcc::jit::recording::type::is_void): New\n+\tvirtual function.\n+\t(gcc::jit::recording::memento_of_get_type::is_void): New\n+\tfunction, overriding default implementation.\n+\t* libgccjit.c (gcc_jit_rvalue_dereference): Verify that\n+\tthe underlying type is not \"void\".\n+\n 2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* docs/topics/expressions.rst (Unary Operations): Add"}, {"sha": "9034e112be824aed79483077a80168a3c77eebc0", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=c211cd236cb0b4cda31657cd96668aace2e8e4ac", "patch": "@@ -443,6 +443,7 @@ class type : public memento\n   virtual bool is_bool () const = 0;\n   virtual type *is_pointer () = 0;\n   virtual type *is_array () = 0;\n+  virtual bool is_void () const { return false; }\n \n   bool is_numeric () const\n   {\n@@ -494,6 +495,7 @@ class memento_of_get_type : public type\n   bool is_bool () const;\n   type *is_pointer () { return dereference (); }\n   type *is_array () { return NULL; }\n+  bool is_void () const { return m_kind == GCC_JIT_TYPE_VOID; }\n \n public:\n   void replay_into (replayer *r);"}, {"sha": "99b2d56750e8248af1c4f759cb892f4fe3603129", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=c211cd236cb0b4cda31657cd96668aace2e8e4ac", "patch": "@@ -1664,6 +1664,13 @@ gcc_jit_rvalue_dereference (gcc_jit_rvalue *rvalue,\n     rvalue->get_debug_string (),\n     rvalue->get_type ()->get_debug_string ());\n \n+  RETURN_NULL_IF_FAIL_PRINTF2 (\n+    !underlying_type->is_void (),\n+    rvalue->m_ctxt, loc,\n+    \"dereference of void pointer %s (type: %s)\",\n+    rvalue->get_debug_string (),\n+    rvalue->get_type ()->get_debug_string ());\n+\n   return (gcc_jit_lvalue *)rvalue->dereference (loc);\n }\n "}, {"sha": "356d20fe988bb0ec52d5d468dc4f3f6b48cefc84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c211cd236cb0b4cda31657cd96668aace2e8e4ac", "patch": "@@ -1,3 +1,7 @@\n+2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/test-error-dereferencing-void-ptr.c: New test case.\n+\n 2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/test-expressions.c (make_tests_of_unary_ops): Add test of"}, {"sha": "a813f67441b8dca07832777b68c34844bc38a5d4", "filename": "gcc/testsuite/jit.dg/test-error-dereferencing-void-ptr.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-dereferencing-void-ptr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c211cd236cb0b4cda31657cd96668aace2e8e4ac/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-dereferencing-void-ptr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-dereferencing-void-ptr.c?ref=c211cd236cb0b4cda31657cd96668aace2e8e4ac", "patch": "@@ -0,0 +1,96 @@\n+#include <libgccjit.h>\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Replay of API calls for ctxt.  */\n+  gcc_jit_type *type_long_long =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_LONG_LONG);\n+  gcc_jit_type *type_void =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *type_void_ptr =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID_PTR);\n+  gcc_jit_field *field_u_signed =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL, /* gcc_jit_location *loc */\n+\t\t\t       type_long_long, /* gcc_jit_type *type, */\n+\t\t\t       \"u_signed\"); /* const char *name */\n+  gcc_jit_field *field_u_ptr =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL, /* gcc_jit_location *loc */\n+\t\t\t       type_void_ptr, /* gcc_jit_type *type, */\n+\t\t\t       \"u_ptr\"); /* const char *name */\n+  gcc_jit_field *fields_for_union_any[2] = {\n+    field_u_signed,\n+    field_u_ptr,\n+  };\n+  gcc_jit_type *union_any =\n+    gcc_jit_context_new_union_type (ctxt,\n+\t\t\t\t    NULL, /* gcc_jit_location *loc */\n+\t\t\t\t    \"any\", /* const char *name */\n+\t\t\t\t    2, /* int num_fields */\n+\t\t\t\t    fields_for_union_any);\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, /* gcc_jit_context *ctxt */\n+\t\t\t\t  NULL, /* gcc_jit_location *loc */\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  type_void, /* gcc_jit_type *return_type */\n+\t\t\t\t  \"anonloop_0\", /* const char *name */\n+\t\t\t\t  0, /* int num_params */\n+\t\t\t\t  NULL, /* gcc_jit_param **params */\n+\t\t\t\t  0); /* int is_variadic */\n+  gcc_jit_block *block_initial =\n+    gcc_jit_function_new_block (func, \"initial\");\n+\n+  gcc_jit_lvalue *local_tmp =\n+    gcc_jit_function_new_local (func, /* gcc_jit_function *func */\n+\t\t\t\tNULL, /* gcc_jit_location *loc */\n+\t\t\t\tunion_any, /* gcc_jit_type *type */\n+\t\t\t\t\"tmp\"); /* const char *name */\n+\n+  /* \"tmp.u_signed = 0x213d640;\" */\n+  gcc_jit_block_add_assignment (\n+    block_initial, /*gcc_jit_block *block */\n+    NULL, /* gcc_jit_location *loc */\n+    gcc_jit_lvalue_access_field (local_tmp, /*gcc_jit_lvalue *struct_or_union */\n+\t\t\t\t NULL, /*gcc_jit_location *loc */\n+\t\t\t\t field_u_signed),\n+    gcc_jit_context_new_rvalue_from_long (\n+      ctxt, /* gcc_jit_context *ctxt */\n+      type_long_long, /* gcc_jit_type *numeric_type */\n+      0x213d640)); /* long value */\n+\n+  /* \"(*tmp.u_ptr) += 1;\" which can't be done since u_ptr is a (void *).  */\n+  gcc_jit_block_add_assignment_op (\n+    block_initial, /*gcc_jit_block *block */\n+    NULL, /* gcc_jit_location *loc */\n+    /* \"(*tmp.u_ptr)\".  */\n+    gcc_jit_rvalue_dereference (\n+      gcc_jit_lvalue_as_rvalue (\n+\tgcc_jit_lvalue_access_field (\n+\t  local_tmp, /*gcc_jit_lvalue *struct_or_union */\n+\t  NULL, /*gcc_jit_location *loc */\n+\t  field_u_ptr)),\n+      NULL), /* gcc_jit_location *loc */\n+    GCC_JIT_BINARY_OP_PLUS, /* enum gcc_jit_binary_op op */\n+    gcc_jit_context_new_rvalue_from_int (\n+      ctxt, /* gcc_jit_context *ctxt */\n+      type_long_long, /* gcc_jit_type *numeric_type */\n+      1)); /* int value */\n+\n+  gcc_jit_block_end_with_void_return (block_initial, /*gcc_jit_block *block */\n+\t\t\t\t      NULL);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_rvalue_dereference:\"\n+\t\t      \" dereference of void pointer tmp.u_ptr\"\n+\t\t      \" (type: void *)\");\n+}"}]}