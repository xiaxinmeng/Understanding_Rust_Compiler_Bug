{"sha": "9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmNGNkZjU3NTVlODliNmUxNzEyMmI5ODVkYWE0YmMyNTEwZjZmOQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-01-05T19:42:32Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-01-05T19:42:32Z"}, "message": "re PR tree-optimization/42462 (wrong-code with computed-goto)\n\n2010-01-05  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/42462\n\t* ipa-inline.c (compute_inline_parameters): Pass node->decl instead of\n\tcurrent_function_decl to helper functions and macros.\n\n\t* gcc/testsuite/g++.dg/torture/pr42462.C: New test.\n\nFrom-SVN: r155658", "tree": {"sha": "678e8de90b7a6d6c158cc1bf905913224dea9ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678e8de90b7a6d6c158cc1bf905913224dea9ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5392f6be700ca0d15b7b6a3a9f9ebdb029247534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5392f6be700ca0d15b7b6a3a9f9ebdb029247534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5392f6be700ca0d15b7b6a3a9f9ebdb029247534"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "72457475167d5ba97f83387ad484c57060af67b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "patch": "@@ -1,3 +1,9 @@\n+2010-01-05  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/42462\n+\t* ipa-inline.c (compute_inline_parameters): Pass node->decl instead of\n+\tcurrent_function_decl to helper functions and macros.\n+\n 2010-01-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR bootstrap/41771"}, {"sha": "7dbafb8f7c22ef2aa877a8e3364da53007183473", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "patch": "@@ -1859,10 +1859,10 @@ compute_inline_parameters (struct cgraph_node *node)\n   node->global.stack_frame_offset = 0;\n \n   /* Can this function be inlined at all?  */\n-  node->local.inlinable = tree_inlinable_function_p (current_function_decl);\n+  node->local.inlinable = tree_inlinable_function_p (node->decl);\n   if (node->local.inlinable && !node->local.disregard_inline_limits)\n     node->local.disregard_inline_limits\n-      = DECL_DISREGARD_INLINE_LIMITS (current_function_decl);\n+      = DECL_DISREGARD_INLINE_LIMITS (node->decl);\n   estimate_function_body_sizes (node);\n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */\n   node->global.time = inline_summary (node)->self_time;"}, {"sha": "3835d5e05d9b82a593e136b9719869e6a1ec8c60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "patch": "@@ -1,3 +1,8 @@\n+2010-01-05  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/42462\n+\t* gcc/testsuite/g++.dg/torture/pr42462.C: New test.\n+\n 2010-01-05  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/initlist30.C: New test."}, {"sha": "947fa388fecca1a7f8d3a2ae3e131e0a807ae20c", "filename": "gcc/testsuite/g++.dg/torture/pr42462.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42462.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42462.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42462.C?ref=9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+\n+#define INLINE inline __attribute__((always_inline))\n+extern \"C\" void abort (void);\n+\n+template<class> struct Foo {\n+        inline bool isFalse() { return false; }\n+        template <bool>        void f1() {}\n+        template <bool> INLINE void f2() { f1<false>(); }\n+        template <bool>        void f3() { f2<false>(); }\n+        template <bool> INLINE void f4() { f3<false>(); }\n+        int exec2();\n+        void execute();\n+        inline void unused();\n+};\n+\n+template<class T> inline void Foo<T>::unused() {\n+        f4<true>();\n+}\n+\n+static int counter = 0;\n+\n+template<class T> int Foo<T>::exec2() {\n+        static void* table[2] = { &&begin, &&end };\t\n+\tif (counter++ > 10)\n+\t  return 0;\n+        goto *(table[0]);\n+begin:\n+        if (isFalse()) f1<false>();\n+end:\n+        return 1;\n+}\n+\n+template<class T> void Foo<T>::execute() {\n+        int r = 1;\n+        while (r) { r = exec2(); }\n+}\n+\n+template class Foo<int>;\n+\n+int main() {\n+        Foo<int> c;\n+        c.execute();\n+\tif (counter < 10)\n+\t  abort ();\n+\treturn 0;\n+}"}]}