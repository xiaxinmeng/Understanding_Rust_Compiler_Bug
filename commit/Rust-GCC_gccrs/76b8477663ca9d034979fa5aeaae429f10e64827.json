{"sha": "76b8477663ca9d034979fa5aeaae429f10e64827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiODQ3NzY2M2NhOWQwMzQ5NzlmYTVhZWFhZTQyOWYxMGU2NDgyNw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-05-26T16:46:49Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-05-26T16:46:49Z"}, "message": "Remove conditions in the code generation of if-conversion.\n\n2010-05-26  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-if-conv.c (tree_if_convert_cond_stmt): Do not remove\n\tstatements in the analysis part.\n\t(tree_if_convert_stmt): Update comment.\n\t(remove_conditions_and_labels): New.\n\t(combine_blocks): Call remove_conditions_and_labels.\n\t(tree_if_conversion): Update comment.\n\nFrom-SVN: r159885", "tree": {"sha": "f153e2d09d17a98b23f7f08a350a44a45e06b4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f153e2d09d17a98b23f7f08a350a44a45e06b4eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76b8477663ca9d034979fa5aeaae429f10e64827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b8477663ca9d034979fa5aeaae429f10e64827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b8477663ca9d034979fa5aeaae429f10e64827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b8477663ca9d034979fa5aeaae429f10e64827/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc447143dc88b1418187190e9f8f25685d520b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc447143dc88b1418187190e9f8f25685d520b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc447143dc88b1418187190e9f8f25685d520b80"}], "stats": {"total": 75, "additions": 44, "deletions": 31}, "files": [{"sha": "5360dcabcebee9f7efcc49787b8b44b33c8adac9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b8477663ca9d034979fa5aeaae429f10e64827/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b8477663ca9d034979fa5aeaae429f10e64827/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76b8477663ca9d034979fa5aeaae429f10e64827", "patch": "@@ -1,3 +1,12 @@\n+2010-05-26  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-if-conv.c (tree_if_convert_cond_stmt): Do not remove\n+\tstatements in the analysis part.\n+\t(tree_if_convert_stmt): Update comment.\n+\t(remove_conditions_and_labels): New.\n+\t(combine_blocks): Call remove_conditions_and_labels.\n+\t(tree_if_conversion): Update comment.\n+\n 2010-05-26  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-if-conv.c (if_convertible_bb_p): Don't handle BBs with more"}, {"sha": "60033e25fc602cfa6471daba53dab20813162fd6", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b8477663ca9d034979fa5aeaae429f10e64827/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b8477663ca9d034979fa5aeaae429f10e64827/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=76b8477663ca9d034979fa5aeaae429f10e64827", "patch": "@@ -207,7 +207,6 @@ bb_with_exit_edge_p (struct loop *loop, basic_block bb)\n }\n \n /* STMT is a GIMPLE_COND.  Update two destination's predicate list.\n-   Remove COND_EXPR, if it is not the exit condition of LOOP.\n    Otherwise update the exit condition of LOOP appropriately.  GSI\n    points to the statement STMT.  */\n \n@@ -232,24 +231,12 @@ tree_if_convert_cond_stmt (struct loop *loop, gimple stmt, tree cond,\n   /* If C is false, then FALSE_EDGE is taken.  */\n   c2 = invert_truthvalue_loc (loc, unshare_expr (c));\n   add_to_dst_predicate_list (loop, false_edge, cond, c2, gsi);\n-\n-  /* Now this conditional statement is redundant.  Remove it.  But, do\n-     not remove the exit condition!  Update the exit condition using\n-     the new condition.  */\n-  if (!bb_with_exit_edge_p (loop, gimple_bb (stmt)))\n-    {\n-      gsi_remove (gsi, true);\n-      cond = NULL_TREE;\n-    }\n }\n \n /* If-convert stmt T which is part of LOOP.\n \n-   If T is a GIMPLE_ASSIGN then it is converted into a conditional\n-   modify expression using COND.  For conditional expressions, add\n-   a condition in the destination basic block's predicate list and\n-   remove the conditional expression itself.  GSI points to the\n-   statement T.  */\n+   For conditional expressions, add a condition in the destination\n+   basic block's predicate list.  GSI points to the statement T.  */\n \n static tree\n tree_if_convert_stmt (struct loop *loop, gimple t, tree cond,\n@@ -286,8 +273,6 @@ tree_if_convert_stmt (struct loop *loop, gimple t, tree cond,\n       break;\n \n     case GIMPLE_COND:\n-      /* Update destination blocks' predicate list and remove this\n-\t condition expression.  */\n       tree_if_convert_cond_stmt (loop, t, cond, gsi);\n       cond = NULL_TREE;\n       break;\n@@ -911,6 +896,32 @@ process_phi_nodes (struct loop *loop)\n     }\n }\n \n+/* Remove all GIMPLE_CONDs and GIMPLE_LABELs of all the basic blocks\n+   other than the exit and latch of the LOOP.  */\n+\n+static void\n+remove_conditions_and_labels (loop_p loop)\n+{\n+  gimple_stmt_iterator gsi;\n+  unsigned int i;\n+\n+  for (i = 0; i < loop->num_nodes; i++)\n+    {\n+      basic_block bb = ifc_bbs [i];\n+\n+      if (bb_with_exit_edge_p (loop, bb)\n+        || bb == loop->latch)\n+      continue;\n+\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n+      if (gimple_code (gsi_stmt (gsi)) == GIMPLE_COND\n+          || gimple_code (gsi_stmt (gsi)) == GIMPLE_LABEL)\n+        gsi_remove (&gsi, true);\n+      else\n+        gsi_next (&gsi);\n+    }\n+}\n+\n /* Combine all the basic blocks from LOOP into one or two super basic\n    blocks.  Replace PHI nodes with conditional modify expressions.  */\n \n@@ -923,6 +934,8 @@ combine_blocks (struct loop *loop)\n   edge e;\n   edge_iterator ei;\n \n+  remove_conditions_and_labels (loop);\n+\n   /* Process phi nodes to prepare blocks for merge.  */\n   process_phi_nodes (loop);\n \n@@ -988,17 +1001,9 @@ combine_blocks (struct loop *loop)\n       if (bb == exit_bb || bb == loop->latch)\n \tcontinue;\n \n-      /* Remove labels and make stmts member of loop->header.  */\n-      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n-\t{\n-\t  if (gimple_code (gsi_stmt (gsi)) == GIMPLE_LABEL)\n-\t    gsi_remove (&gsi, true);\n-\t  else\n-\t    {\n-\t      gimple_set_bb (gsi_stmt (gsi), merge_target_bb);\n-\t      gsi_next (&gsi);\n-\t    }\n-\t}\n+      /* Make stmts member of loop->header.  */\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\tgimple_set_bb (gsi_stmt (gsi), merge_target_bb);\n \n       /* Update stmt list.  */\n       last = gsi_last_bb (merge_target_bb);\n@@ -1049,9 +1054,8 @@ tree_if_conversion (struct loop *loop)\n       basic_block bb = ifc_bbs [i];\n       tree cond = (tree) bb->aux;\n \n-      /* Process all the statements in this basic block.\n-\t Remove conditional expression, if any, and annotate\n-\t destination basic block(s) appropriately.  */\n+      /* Predicate basic block(s) with the condition expressions\n+\t leading to their execution.  */\n       for (itr = gsi_start_bb (bb); !gsi_end_p (itr); /* empty */)\n \t{\n \t  gimple t = gsi_stmt (itr);"}]}