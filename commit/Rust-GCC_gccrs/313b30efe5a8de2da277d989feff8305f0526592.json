{"sha": "313b30efe5a8de2da277d989feff8305f0526592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEzYjMwZWZlNWE4ZGUyZGEyNzdkOTg5ZmVmZjgzMDVmMDUyNjU5Mg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-06-12T17:05:35Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-06-12T17:05:35Z"}, "message": "PR middle-end/90676 - default GIMPLE dumps lack information\n\ngcc/ChangeLog:\n\n\tPR middle-end/90676\n\t* tree-pretty-print.c (dump_mem_ref): New function.  Include\n\tMEM_REF type in output when different size than operand.\n\t(dump_generic_node): Move code to dump_mem_ref and call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/90676\n\t* gcc.dg/tree-ssa/dump-6.c: New test.\n\t* g++.dg/tree-ssa/pr19807.C: Adjust expected output.\n\t* g++.dg/tree-ssa/ssa-dse-1.C: Same.\n\t* gcc.dg/store_merging_5.c: Same.\n\t* gcc.dg/tree-prof/stringop-2.c: Same.\n\t* gcc.dg/tree-ssa/pr30375.c: Same.\n\t* gcc.dg/tree-ssa/slsr-27.c: Same.\n\t* gcc.dg/tree-ssa/slsr-28.c: Same.\n\t* gcc.dg/tree-ssa/slsr-29.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dse-24.c: Same.\n\nFrom-SVN: r272199", "tree": {"sha": "7c1762ddd3596fd1b375575e2be8e68066f96389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c1762ddd3596fd1b375575e2be8e68066f96389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/313b30efe5a8de2da277d989feff8305f0526592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313b30efe5a8de2da277d989feff8305f0526592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313b30efe5a8de2da277d989feff8305f0526592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313b30efe5a8de2da277d989feff8305f0526592/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7802a8ec9a03e6ced5b5d8f9018c6b9f45677c3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7802a8ec9a03e6ced5b5d8f9018c6b9f45677c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7802a8ec9a03e6ced5b5d8f9018c6b9f45677c3f"}], "stats": {"total": 320, "additions": 205, "deletions": 115}, "files": [{"sha": "fea2d021c089582ab478a94700eb64aa3f95990e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -1,3 +1,10 @@\n+2019-06-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/90676\n+\t* tree-pretty-print.c (dump_mem_ref): New function.  Include\n+\tMEM_REF type in output when different size than operand.\n+\t(dump_generic_node): Move code to dump_mem_ref and call it.\n+\n 2019-06-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/90662"}, {"sha": "4c4adbc0445e6362f2154968bc1fd988f5c81adf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -1,3 +1,16 @@\n+2019-06-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/90676\n+\t* gcc.dg/tree-ssa/dump-6.c: New test.\n+\t* g++.dg/tree-ssa/pr19807.C: Adjust expected output.\n+\t* g++.dg/tree-ssa/ssa-dse-1.C: Same.\n+\t* gcc.dg/tree-prof/stringop-2.c\n+\t* gcc.dg/tree-ssa/pr30375.c: Same.\n+\t* gcc.dg/tree-ssa/slsr-27.c (f): Same.\n+\t* gcc.dg/tree-ssa/slsr-28.c (f): Same.\n+\t* gcc.dg/tree-ssa/slsr-29.c (f): Same.\n+\t* gcc.dg/tree-ssa/ssa-dse-24.c: Same.\n+\n 2019-06-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/90662"}, {"sha": "10de295e14d5ef4104c3b75d4264870fbf86f922", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr19807.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19807.C?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -11,7 +11,8 @@ void foo(void)\n \tz = 1 + &a[1];\n }\n \n-/* { dg-final { scan-tree-dump-times \"&MEM\\\\\\[\\\\\\(void .\\\\\\)&a \\\\\\+ 8B\\\\\\]\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"&MEM\\\\\\[\\\\\\(void .\\\\\\)&a \\\\\\+ 8B\\\\\\]\" 3 \"optimized\" { target { ! store_merge } } } }\n+   { dg-final { scan-tree-dump-times \"&MEM <int> \\\\\\[\\\\\\(void .\\\\\\)&a \\\\\\+ 8B\\\\\\]\" 3 \"optimized\" { target { store_merge } } } } */\n \n \n void bar(int i)"}, {"sha": "7bcb65af13cf61ec0096e2cf1d089a2a841f92a4", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-dse-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-1.C?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -97,5 +97,5 @@ int main()\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct FixBuf \\\\*\\\\)&<retval> \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" } } */\n-\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct FixBuf \\\\*\\\\)&<retval> \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" { target { ! store_merge } } } }\n+   { dg-final { scan-tree-dump-times \"MEM <char\\\\\\[176]> \\\\\\[\\\\(struct FixBuf \\\\*\\\\)&<retval> \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" { target { store_merge } } } } */"}, {"sha": "6e7c72510ffd47868ebe5e75769ae29b92f55c11", "filename": "gcc/testsuite/gcc.dg/store_merging_5.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_5.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -26,5 +26,7 @@ foo1 (struct bar *p, char tmp)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"Merging successful\" 1 \"store-merging\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[.*\\\\\\]\" 1 \"store-merging\" } } */\n+/* { dg-final { scan-tree-dump-times \"Merging successful\" 1 \"store-merging\" } }\n+   { dg-final { scan-tree-dump-times \"MEM\\\\\\[.*\\\\\\]\" 1 \"store-merging\" { target { ! store_merge } } } }\n+   { dg-final { scan-tree-dump-times \"MEM <unsigned int> \\\\\\[.*\\\\\\]\" 1 \"store-merging\" { target { store_merge && ilp32 } } } }\n+   { dg-final { scan-tree-dump-times \"MEM <unsigned long> \\\\\\[.*\\\\\\]\" 1 \"store-merging\" { target { store_merge && lp64 } } } } */"}, {"sha": "c1f757388fd66fd2e92b81807906dc9f9ad19bfb", "filename": "gcc/testsuite/gcc.dg/tree-prof/stringop-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -21,5 +21,6 @@ main()\n }\n /* autofdo doesn't support value profiling for now: */\n /* { dg-final-use-not-autofdo { scan-ipa-dump \"Transformation done: single value 4 stringop\" \"profile\"} } */\n-/* The versioned memset of size 4 should be optimized to an assignment.  */\n-/* { dg-final-use-not-autofdo { scan-tree-dump \"MEM\\\\\\[\\\\(void .\\\\)&a\\\\\\] = 168430090\" \"optimized\"} } */\n+/* The versioned memset of size 4 should be optimized to an assignment.\n+   { dg-final-use-not-autofdo { scan-tree-dump \"MEM\\\\\\[\\\\(void .\\\\)&a\\\\\\] = 168430090\" \"optimized\" { target { ! store_merge } } } }\n+   { dg-final-use-not-autofdo { scan-tree-dump \"MEM <\\[a-z \\]+> \\\\\\[\\\\(void .\\\\)&a\\\\\\] = 168430090\" \"optimized\" { target { store_merge } } } } */"}, {"sha": "3e09668ddc96320e3a1b964a9e60e7c5ba593460", "filename": "gcc/testsuite/gcc.dg/tree-ssa/dump-6.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-6.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -0,0 +1,38 @@\n+/* PR middle-end/90676 - default GIMPLE dumps lack information\n+   { dg-do compile }\n+   { dg-options \"-O2 -fdump-tree-store-merging\" }\n+   { dg-require-effective-target int32plus }\n+   { dg-require-effective-target store_merge } */\n+\n+\n+extern char a2[2];\n+\n+void f2 (void)\n+{\n+  a2[0] = 1;\n+  a2[1] = 0;\n+}\n+\n+extern char a4[4];\n+\n+void f4 (void)\n+{\n+  a4[0] = 1;\n+  a4[1] = 0;\n+  a4[2] = 0;\n+  a4[3] = 0;\n+}\n+\n+extern char a8[8];\n+\n+void f8 (void)\n+{\n+  a8[0] = 1;\n+  for (int i = 1; i != 8; ++i)\n+    a8[i] = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"MEM <unsigned short> \\\\\\[\\\\(char \\\\*\\\\)\\\\&a2] = \" \"store-merging\" } }\n+   { dg-final { scan-tree-dump \"MEM <unsigned int> \\\\\\[\\\\(char \\\\*\\\\)\\\\&a4] = \" \"store-merging\" } }\n+   { dg-final { scan-tree-dump \"MEM <unsigned int> \\\\\\[\\\\(char \\\\*\\\\)\\\\&a8] = \" \"store-merging\" { target { ilp32 } } } }\n+   { dg-final { scan-tree-dump \"MEM <unsigned long> \\\\\\[\\\\(char \\\\*\\\\)\\\\&a8] = \" \"store-merging\" { target { lp64 } } } } */"}, {"sha": "5c068a3ddc00b4209439c3cbbf3c695bd3c24455", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr30375.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -22,5 +22,6 @@ void test_signed_msg_encoding(void)\n     f();\n }\n \n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct _s \\\\*\\\\)&signInfo \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct _s \\\\*\\\\)&signInfo \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" { target { ! store_merge } } } }\n+   { dg-final { scan-tree-dump-times \"MEM <char\\\\\\[8]> \\\\\\[\\\\(struct _s \\\\*\\\\)&signInfo \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" { target { store_merge } } } } */\n "}, {"sha": "e3560ee5d9aeb8ce96f4686ee5770d858e26537b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-27.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -19,4 +19,5 @@ f (struct x *p, unsigned int n)\n /* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom3\" { target { int32 } } } } */\n /* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom3\" { target { int16 } } } } */\n /* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+;\" 1 \"dom3\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 3 \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 3 \"dom3\" { target { ! store_merge } } } } */\n+/* { dg-final { scan-tree-dump-times \"MEM <int> \\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 3 \"dom3\" { target { store_merge } } } } */"}, {"sha": "0db27af76ce54753ce31f9343d8da1cbf4fbc467", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-28.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -23,4 +23,5 @@ f (struct x *p, unsigned int n)\n /* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom3\" { target { int32 } } } } */\n /* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom3\" { target { int16 } } } } */\n /* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+\" 1 \"dom3\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom3\" { target { ! store_merge } } } } */\n+/* { dg-final { scan-tree-dump-times \"MEM <int> \\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom3\" { target { store_merge } } } } */"}, {"sha": "0f6169df3127a5b6fadaa4aa891f0535a92fa935", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-29.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -25,4 +25,5 @@ f (struct x *p, unsigned int n)\n /* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom3\" { target { int32 } } } } */\n /* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom3\" { target { int16 } } } } */\n /* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+\" 1 \"dom3\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom3\" { target { ! store_merge } } } } */\n+/* { dg-final { scan-tree-dump-times \"MEM <int> \\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom3\" { target { store_merge } } } } */"}, {"sha": "240c90637171d2774195108b284f6b59de2ca010", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-24.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-24.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -59,4 +59,5 @@ void foo(int prec,\n     bar (&info);\n }\n \n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct printf_info \\\\*\\\\)&info \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct printf_info \\\\*\\\\)&info \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" { target { ! store_merge } } } }\n+   { dg-final { scan-tree-dump-times \"MEM <char[4]> \\\\\\[\\\\(struct printf_info \\\\*\\\\)&info \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" { target { store_merge } } } } */"}, {"sha": "329cc6fceeb2a39dc99ccbb85b57ed69106da079", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 126, "deletions": 103, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/313b30efe5a8de2da277d989feff8305f0526592/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=313b30efe5a8de2da277d989feff8305f0526592", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"gomp-constants.h\"\n #include \"gimple.h\"\n+#include \"fold-const.h\"\n \n /* Disable warnings about quoting issues in the pp_xxx calls below\n    that (intentionally) don't follow GCC diagnostic conventions.  */\n@@ -1378,6 +1379,129 @@ dump_omp_atomic_memory_order (pretty_printer *pp, enum omp_memory_order mo)\n     }\n }\n \n+/* Helper to dump a MEM_REF node.  */\n+\n+static void\n+dump_mem_ref (pretty_printer *pp, tree node, int spc, dump_flags_t flags)\n+{\n+  if (flags & TDF_GIMPLE)\n+    {\n+      pp_string (pp, \"__MEM <\");\n+      dump_generic_node (pp, TREE_TYPE (node),\n+\t\t\t spc, flags | TDF_SLIM, false);\n+      if (TYPE_ALIGN (TREE_TYPE (node))\n+\t  != TYPE_ALIGN (TYPE_MAIN_VARIANT (TREE_TYPE (node))))\n+\t{\n+\t  pp_string (pp, \", \");\n+\t  pp_decimal_int (pp, TYPE_ALIGN (TREE_TYPE (node)));\n+\t}\n+      pp_greater (pp);\n+      pp_string (pp, \" (\");\n+      if (TREE_TYPE (TREE_OPERAND (node, 0))\n+\t  != TREE_TYPE (TREE_OPERAND (node, 1)))\n+\t{\n+\t  pp_left_paren (pp);\n+\t  dump_generic_node (pp, TREE_TYPE (TREE_OPERAND (node, 1)),\n+\t\t\t     spc, flags | TDF_SLIM, false);\n+\t  pp_right_paren (pp);\n+\t}\n+      dump_generic_node (pp, TREE_OPERAND (node, 0),\n+\t\t\t spc, flags | TDF_SLIM, false);\n+      if (! integer_zerop (TREE_OPERAND (node, 1)))\n+\t{\n+\t  pp_string (pp, \" + \");\n+\t  dump_generic_node (pp, TREE_OPERAND (node, 1),\n+\t\t\t     spc, flags | TDF_SLIM, false);\n+\t}\n+      pp_right_paren (pp);\n+    }\n+  else if (integer_zerop (TREE_OPERAND (node, 1))\n+\t   /* Dump the types of INTEGER_CSTs explicitly, for we can't\n+\t      infer them and MEM_ATTR caching will share MEM_REFs\n+\t      with differently-typed op0s.  */\n+\t   && TREE_CODE (TREE_OPERAND (node, 0)) != INTEGER_CST\n+\t   /* Released SSA_NAMES have no TREE_TYPE.  */\n+\t   && TREE_TYPE (TREE_OPERAND (node, 0)) != NULL_TREE\n+\t   /* Same pointer types, but ignoring POINTER_TYPE vs.\n+\t      REFERENCE_TYPE.  */\n+\t   && (TREE_TYPE (TREE_TYPE (TREE_OPERAND (node, 0)))\n+\t       == TREE_TYPE (TREE_TYPE (TREE_OPERAND (node, 1))))\n+\t   && (TYPE_MODE (TREE_TYPE (TREE_OPERAND (node, 0)))\n+\t       == TYPE_MODE (TREE_TYPE (TREE_OPERAND (node, 1))))\n+\t   && (TYPE_REF_CAN_ALIAS_ALL (TREE_TYPE (TREE_OPERAND (node, 0)))\n+\t       == TYPE_REF_CAN_ALIAS_ALL (TREE_TYPE (TREE_OPERAND (node, 1))))\n+\t   /* Same value types ignoring qualifiers.  */\n+\t   && (TYPE_MAIN_VARIANT (TREE_TYPE (node))\n+\t       == TYPE_MAIN_VARIANT\n+\t       (TREE_TYPE (TREE_TYPE (TREE_OPERAND (node, 1)))))\n+\t   && (!(flags & TDF_ALIAS)\n+\t       || MR_DEPENDENCE_CLIQUE (node) == 0))\n+    {\n+      if (TREE_CODE (TREE_OPERAND (node, 0)) != ADDR_EXPR)\n+\t{\n+\t  /* Enclose pointers to arrays in parentheses.  */\n+\t  tree op0 = TREE_OPERAND (node, 0);\n+\t  tree op0type = TREE_TYPE (op0);\n+\t  if (POINTER_TYPE_P (op0type)\n+\t      && TREE_CODE (TREE_TYPE (op0type)) == ARRAY_TYPE)\n+\t    pp_left_paren (pp);\n+\t  pp_star (pp);\n+\t  dump_generic_node (pp, op0, spc, flags, false);\n+\t  if (POINTER_TYPE_P (op0type)\n+\t      && TREE_CODE (TREE_TYPE (op0type)) == ARRAY_TYPE)\n+\t    pp_right_paren (pp);\n+\t}\n+      else\n+\tdump_generic_node (pp,\n+\t\t\t   TREE_OPERAND (TREE_OPERAND (node, 0), 0),\n+\t\t\t   spc, flags, false);\n+    }\n+  else\n+    {\n+      pp_string (pp, \"MEM\");\n+\n+      tree nodetype = TREE_TYPE (node);\n+      tree op0 = TREE_OPERAND (node, 0);\n+      tree op1 = TREE_OPERAND (node, 1);\n+      tree op1type = TYPE_MAIN_VARIANT (TREE_TYPE (op1));\n+\n+      tree op0size = TYPE_SIZE (nodetype);\n+      tree op1size = TYPE_SIZE (TREE_TYPE (op1type));\n+\n+      if (!op0size || !op1size\n+\t  || !operand_equal_p (op0size, op1size, 0))\n+\t{\n+\t  pp_string (pp, \" <\");\n+\t  /* If the size of the type of the operand is not the same\n+\t     as the size of the MEM_REF expression include the type\n+\t     of the latter similar to the TDF_GIMPLE output to make\n+\t     it clear how many bytes of memory are being accessed.  */\n+\t  dump_generic_node (pp, nodetype, spc, flags | TDF_SLIM, false);\n+\t  pp_string (pp, \"> \");\n+\t}\n+\n+      pp_string (pp, \"[(\");\n+      dump_generic_node (pp, op1type, spc, flags | TDF_SLIM, false);\n+      pp_right_paren (pp);\n+      dump_generic_node (pp, op0, spc, flags, false);\n+      if (!integer_zerop (op1))\n+      if (!integer_zerop (TREE_OPERAND (node, 1)))\n+\t{\n+\t  pp_string (pp, \" + \");\n+\t  dump_generic_node (pp, op1, spc, flags, false);\n+\t}\n+      if ((flags & TDF_ALIAS)\n+\t  && MR_DEPENDENCE_CLIQUE (node) != 0)\n+\t{\n+\t  pp_string (pp, \" clique \");\n+\t  pp_unsigned_wide_integer (pp, MR_DEPENDENCE_CLIQUE (node));\n+\t  pp_string (pp, \" base \");\n+\t  pp_unsigned_wide_integer (pp, MR_DEPENDENCE_BASE (node));\n+\t}\n+      pp_right_bracket (pp);\n+    }\n+ }\n+\n /* Dump the node NODE on the pretty_printer PP, SPC spaces of\n    indent.  FLAGS specifies details to show in the dump (see TDF_* in\n    dumpfile.h).  If IS_STMT is true, the object printed is considered\n@@ -1636,109 +1760,8 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       break;\n \n     case MEM_REF:\n-      {\n-\tif (flags & TDF_GIMPLE)\n-\t  {\n-\t    pp_string (pp, \"__MEM <\");\n-\t    dump_generic_node (pp, TREE_TYPE (node),\n-\t\t\t       spc, flags | TDF_SLIM, false);\n-\t    if (TYPE_ALIGN (TREE_TYPE (node))\n-\t\t!= TYPE_ALIGN (TYPE_MAIN_VARIANT (TREE_TYPE (node))))\n-\t      {\n-\t\tpp_string (pp, \", \");\n-\t\tpp_decimal_int (pp, TYPE_ALIGN (TREE_TYPE (node)));\n-\t      }\n-\t    pp_greater (pp);\n-\t    pp_string (pp, \" (\");\n-\t    if (TREE_TYPE (TREE_OPERAND (node, 0))\n-\t\t!= TREE_TYPE (TREE_OPERAND (node, 1)))\n-\t      {\n-\t\tpp_left_paren (pp);\n-\t\tdump_generic_node (pp, TREE_TYPE (TREE_OPERAND (node, 1)),\n-\t\t\t\t   spc, flags | TDF_SLIM, false);\n-\t\tpp_right_paren (pp);\n-\t      }\n-\t    dump_generic_node (pp, TREE_OPERAND (node, 0),\n-\t\t\t       spc, flags | TDF_SLIM, false);\n-\t    if (! integer_zerop (TREE_OPERAND (node, 1)))\n-\t      {\n-\t\tpp_string (pp, \" + \");\n-\t\tdump_generic_node (pp, TREE_OPERAND (node, 1),\n-\t\t\t\t   spc, flags | TDF_SLIM, false);\n-\t      }\n-\t    pp_right_paren (pp);\n-\t  }\n-\telse if (integer_zerop (TREE_OPERAND (node, 1))\n-\t    /* Dump the types of INTEGER_CSTs explicitly, for we can't\n-\t       infer them and MEM_ATTR caching will share MEM_REFs\n-\t       with differently-typed op0s.  */\n-\t    && TREE_CODE (TREE_OPERAND (node, 0)) != INTEGER_CST\n-\t    /* Released SSA_NAMES have no TREE_TYPE.  */\n-\t    && TREE_TYPE (TREE_OPERAND (node, 0)) != NULL_TREE\n-\t    /* Same pointer types, but ignoring POINTER_TYPE vs.\n-\t       REFERENCE_TYPE.  */\n-\t    && (TREE_TYPE (TREE_TYPE (TREE_OPERAND (node, 0)))\n-\t\t== TREE_TYPE (TREE_TYPE (TREE_OPERAND (node, 1))))\n-\t    && (TYPE_MODE (TREE_TYPE (TREE_OPERAND (node, 0)))\n-\t\t== TYPE_MODE (TREE_TYPE (TREE_OPERAND (node, 1))))\n-\t    && (TYPE_REF_CAN_ALIAS_ALL (TREE_TYPE (TREE_OPERAND (node, 0)))\n-\t\t== TYPE_REF_CAN_ALIAS_ALL (TREE_TYPE (TREE_OPERAND (node, 1))))\n-\t    /* Same value types ignoring qualifiers.  */\n-\t    && (TYPE_MAIN_VARIANT (TREE_TYPE (node))\n-\t\t== TYPE_MAIN_VARIANT\n-\t\t    (TREE_TYPE (TREE_TYPE (TREE_OPERAND (node, 1)))))\n-\t    && (!(flags & TDF_ALIAS)\n-\t\t|| MR_DEPENDENCE_CLIQUE (node) == 0))\n-\t  {\n-\t    if (TREE_CODE (TREE_OPERAND (node, 0)) != ADDR_EXPR)\n-\t      {\n-\t\t/* Enclose pointers to arrays in parentheses.  */\n-\t\ttree op0 = TREE_OPERAND (node, 0);\n-\t\ttree op0type = TREE_TYPE (op0);\n-\t\tif (POINTER_TYPE_P (op0type)\n-\t\t    && TREE_CODE (TREE_TYPE (op0type)) == ARRAY_TYPE)\n-\t\t  pp_left_paren (pp);\n-\t\tpp_star (pp);\n-\t\tdump_generic_node (pp, op0, spc, flags, false);\n-\t\tif (POINTER_TYPE_P (op0type)\n-\t\t    && TREE_CODE (TREE_TYPE (op0type)) == ARRAY_TYPE)\n-\t\t  pp_right_paren (pp);\n-\t      }\n-\t    else\n-\t      dump_generic_node (pp,\n-\t\t\t\t TREE_OPERAND (TREE_OPERAND (node, 0), 0),\n-\t\t\t\t spc, flags, false);\n-\t  }\n-\telse\n-\t  {\n-\t    tree ptype;\n-\n-\t    pp_string (pp, \"MEM[\");\n-\t    pp_left_paren (pp);\n-\t    ptype = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (node, 1)));\n-\t    dump_generic_node (pp, ptype,\n-\t\t\t       spc, flags | TDF_SLIM, false);\n-\t    pp_right_paren (pp);\n-\t    dump_generic_node (pp, TREE_OPERAND (node, 0),\n-\t\t\t       spc, flags, false);\n-\t    if (!integer_zerop (TREE_OPERAND (node, 1)))\n-\t      {\n-\t\tpp_string (pp, \" + \");\n-\t\tdump_generic_node (pp, TREE_OPERAND (node, 1),\n-\t\t\t\t   spc, flags, false);\n-\t      }\n-\t    if ((flags & TDF_ALIAS)\n-\t\t&& MR_DEPENDENCE_CLIQUE (node) != 0)\n-\t      {\n-\t\tpp_string (pp, \" clique \");\n-\t\tpp_unsigned_wide_integer (pp, MR_DEPENDENCE_CLIQUE (node));\n-\t\tpp_string (pp, \" base \");\n-\t\tpp_unsigned_wide_integer (pp, MR_DEPENDENCE_BASE (node));\n-\t      }\n-\t    pp_right_bracket (pp);\n-\t  }\n-\tbreak;\n-      }\n+      dump_mem_ref (pp, node, spc, flags);\n+      break;\n \n     case TARGET_MEM_REF:\n       {"}]}