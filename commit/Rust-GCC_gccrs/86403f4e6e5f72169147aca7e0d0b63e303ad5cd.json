{"sha": "86403f4e6e5f72169147aca7e0d0b63e303ad5cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0MDNmNGU2ZTVmNzIxNjkxNDdhY2E3ZTBkMGI2M2UzMDNhZDVjZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-04-29T20:02:00Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-04-29T20:03:06Z"}, "message": "i386: Optimize carry flag comparisons a bit\n\nIn ix86_int_compare, opportunistically swap operands of GTU and LEU comparisons\nto emit carry flag comparison, with the expectation that the comparison will\ncombine to *add<mode>3_carry_0 or *sub<mode>3_carry_0 insn pattern.\n\nDo not use ix86_expand_carry_flag_compare because this function prefers\ncarry flag comparisons too much - it forces the constants into registers\nand/or emits additional arithmetic instructions to convert simple\ncomparisons into carry flag comparisons - but simply swap operands to\nconvert GTU and LEU comparisons into GEU and LTU ones.\n\nAlso, change the insn predicates of *add<mode>3_carry_0 and\n*sub<mode>3_carry_0 insn patterns to allow more combine opportunities\nwith memory operands.\n\n2021-04-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/i386-expand.c (ix86_expand_int_compare):\n\tSwap operands of GTU and LEU comparison to emit carry flag comparison.\n\t* config/i386/i386.md (*add<mode>3_carry_0): Change insn\n\tpredicate to allow more combine opportunities with memory operands.\n\t(*sub<mode>3_carry_0): Ditto.", "tree": {"sha": "126a8a19c90472c45a96fb967146c23f7998d91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126a8a19c90472c45a96fb967146c23f7998d91b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86403f4e6e5f72169147aca7e0d0b63e303ad5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86403f4e6e5f72169147aca7e0d0b63e303ad5cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86403f4e6e5f72169147aca7e0d0b63e303ad5cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86403f4e6e5f72169147aca7e0d0b63e303ad5cd/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b24d8acbfffe30f40e280f11f23adac81b1e7f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24d8acbfffe30f40e280f11f23adac81b1e7f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b24d8acbfffe30f40e280f11f23adac81b1e7f0c"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "fee4d07b7fd791b2a26b2869c79399cf36dbf8df", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86403f4e6e5f72169147aca7e0d0b63e303ad5cd/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86403f4e6e5f72169147aca7e0d0b63e303ad5cd/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=86403f4e6e5f72169147aca7e0d0b63e303ad5cd", "patch": "@@ -2658,6 +2658,14 @@ ix86_expand_int_compare (enum rtx_code code, rtx op0, rtx op1)\n   machine_mode cmpmode;\n   rtx tmp, flags;\n \n+  /* Swap operands to emit carry flag comparison.  */\n+  if ((code == GTU || code == LEU)\n+      && nonimmediate_operand (op1, VOIDmode))\n+    {\n+      std::swap (op0, op1);\n+      code = swap_condition (code);\n+    }\n+\n   cmpmode = SELECT_CC_MODE (code, op0, op1);\n   flags = gen_rtx_REG (cmpmode, FLAGS_REG);\n "}, {"sha": "b7f3e36a70cbbc4de856810779ffd52ec096fd93", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86403f4e6e5f72169147aca7e0d0b63e303ad5cd/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86403f4e6e5f72169147aca7e0d0b63e303ad5cd/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=86403f4e6e5f72169147aca7e0d0b63e303ad5cd", "patch": "@@ -6777,7 +6777,7 @@\n \t    [(match_operand 2 \"flags_reg_operand\") (const_int 0)])\n \t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_unary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[1])\"\n   \"adc{<imodesuffix>}\\t{$0, %0|%0, 0}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"use_carry\" \"1\")\n@@ -6919,7 +6919,7 @@\n \t  (match_operator:SWI 3 \"ix86_carry_flag_operator\"\n \t    [(match_operand 2 \"flags_reg_operand\") (const_int 0)])))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_unary_operator_ok (MINUS, <MODE>mode, operands)\"\n+  \"!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[1])\"\n   \"sbb{<imodesuffix>}\\t{$0, %0|%0, 0}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"use_carry\" \"1\")"}]}