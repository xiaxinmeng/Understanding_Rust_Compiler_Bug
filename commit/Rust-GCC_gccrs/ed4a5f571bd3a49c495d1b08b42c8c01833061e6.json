{"sha": "ed4a5f571bd3a49c495d1b08b42c8c01833061e6", "node_id": "C_kwDOANBUbNoAKGVkNGE1ZjU3MWJkM2E0OWM0OTVkMWIwOGI0MmM4YzAxODMzMDYxZTY", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-12-03T15:51:18Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-12-06T18:14:53Z"}, "message": "Add BB option for outgoing_edge_range_p and may_reocmpute_p.\n\nThere are times we only need to know if any edge from a block can calculate\na range.\n\n\t* gimple-range-gori.h (class gori_compute):: Add prototypes.\n\t* gimple-range-gori.cc (gori_compute::has_edge_range_p): Add alternate\n\tAPI for basic block.  Call for edge alterantive.\n\t(gori_compute::may_recompute_p): Ditto.", "tree": {"sha": "b6b7affca6fb653ad3d43a8bf7d3b310e76723aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b7affca6fb653ad3d43a8bf7d3b310e76723aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed4a5f571bd3a49c495d1b08b42c8c01833061e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4a5f571bd3a49c495d1b08b42c8c01833061e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4a5f571bd3a49c495d1b08b42c8c01833061e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4a5f571bd3a49c495d1b08b42c8c01833061e6/comments", "author": null, "committer": null, "parents": [{"sha": "2a20407bacbd80662b020f9e11833077fb237115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a20407bacbd80662b020f9e11833077fb237115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a20407bacbd80662b020f9e11833077fb237115"}], "stats": {"total": 80, "additions": 51, "deletions": 29}, "files": [{"sha": "6c17267ad37ac95c0c59ae346c18bbf6023141f4", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4a5f571bd3a49c495d1b08b42c8c01833061e6/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4a5f571bd3a49c495d1b08b42c8c01833061e6/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=ed4a5f571bd3a49c495d1b08b42c8c01833061e6", "patch": "@@ -1166,33 +1166,12 @@ gori_compute::compute_operand1_and_operand2_range (irange &r,\n   r.intersect (op_range);\n   return true;\n }\n-// Return TRUE if a range can be calculated or recomputed for NAME on edge E.\n-\n-bool\n-gori_compute::has_edge_range_p (tree name, edge e)\n-{\n-  // Check if NAME is an export or can be recomputed.\n-  if (e)\n-    return is_export_p (name, e->src) || may_recompute_p (name, e);\n-\n-  // If no edge is specified, check if NAME can have a range calculated\n-  // on any edge.\n-  return is_export_p (name) || may_recompute_p (name);\n-}\n-\n-// Dump what is known to GORI computes to listing file F.\n-\n-void\n-gori_compute::dump (FILE *f)\n-{\n-  gori_map::dump (f);\n-}\n \n-// Return TRUE if NAME can be recomputed on edge E.  If any direct dependant\n-// is exported on edge E, it may change the computed value of NAME.\n+// Return TRUE if NAME can be recomputed on any edge exiting BB.  If any\n+// direct dependant is exported, it may also change the computed value of NAME.\n \n bool\n-gori_compute::may_recompute_p (tree name, edge e)\n+gori_compute::may_recompute_p (tree name, basic_block bb)\n {\n   tree dep1 = depend1 (name);\n   tree dep2 = depend2 (name);\n@@ -1207,13 +1186,47 @@ gori_compute::may_recompute_p (tree name, edge e)\n     return false;\n \n   // If edge is specified, check if NAME can be recalculated on that edge.\n-  if (e)\n-    return ((is_export_p (dep1, e->src))\n-\t    || (dep2 && is_export_p (dep2, e->src)));\n+  if (bb)\n+    return ((is_export_p (dep1, bb))\n+\t    || (dep2 && is_export_p (dep2, bb)));\n \n   return (is_export_p (dep1)) || (dep2 && is_export_p (dep2));\n }\n \n+// Return TRUE if NAME can be recomputed on edge E.  If any direct dependant\n+// is exported on edge E, it may change the computed value of NAME.\n+\n+bool\n+gori_compute::may_recompute_p (tree name, edge e)\n+{\n+  gcc_checking_assert (e);\n+  return may_recompute_p (name, e->src);\n+}\n+\n+\n+// Return TRUE if a range can be calculated or recomputed for NAME on any\n+// edge exiting BB.\n+\n+bool\n+gori_compute::has_edge_range_p (tree name, basic_block bb)\n+{\n+  // Check if NAME is an export or can be recomputed.\n+  if (bb)\n+    return is_export_p (name, bb) || may_recompute_p (name, bb);\n+\n+  // If no block is specified, check for anywhere in the IL.\n+  return is_export_p (name) || may_recompute_p (name);\n+}\n+\n+// Return TRUE if a range can be calculated or recomputed for NAME on edge E.\n+\n+bool\n+gori_compute::has_edge_range_p (tree name, edge e)\n+{\n+  gcc_checking_assert (e);\n+  return has_edge_range_p (name, e->src);\n+}\n+\n // Calculate a range on edge E and return it in R.  Try to evaluate a\n // range for NAME on this edge.  Return FALSE if this is either not a\n // control edge or NAME is not defined by this edge.\n@@ -1287,6 +1300,13 @@ gori_compute::outgoing_edge_range_p (irange &r, edge e, tree name,\n   return false;\n }\n \n+// Dump what is known to GORI computes to listing file F.\n+\n+void\n+gori_compute::dump (FILE *f)\n+{\n+  gori_map::dump (f);\n+}\n \n // ------------------------------------------------------------------------\n //  GORI iterator.  Although we have bitmap iterators, don't expose that it"}, {"sha": "b15497e9f59df7ee07372b503b15eee6b92b03b8", "filename": "gcc/gimple-range-gori.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4a5f571bd3a49c495d1b08b42c8c01833061e6/gcc%2Fgimple-range-gori.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4a5f571bd3a49c495d1b08b42c8c01833061e6/gcc%2Fgimple-range-gori.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.h?ref=ed4a5f571bd3a49c495d1b08b42c8c01833061e6", "patch": "@@ -158,10 +158,12 @@ class gori_compute : public gori_map\n public:\n   gori_compute (int not_executable_flag = 0);\n   bool outgoing_edge_range_p (irange &r, edge e, tree name, range_query &q);\n-  bool has_edge_range_p (tree name, edge e = NULL);\n+  bool has_edge_range_p (tree name, basic_block bb = NULL);\n+  bool has_edge_range_p (tree name, edge e);\n   void dump (FILE *f);\n private:\n-  bool may_recompute_p (tree name, edge e = NULL);\n+  bool may_recompute_p (tree name, edge e);\n+  bool may_recompute_p (tree name, basic_block bb = NULL);\n   bool compute_operand_range (irange &r, gimple *stmt, const irange &lhs,\n \t\t\t      tree name, class fur_source &src);\n   bool compute_operand_range_switch (irange &r, gswitch *s, const irange &lhs,"}]}