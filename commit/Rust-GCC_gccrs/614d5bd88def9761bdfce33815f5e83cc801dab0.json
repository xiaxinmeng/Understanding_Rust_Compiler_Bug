{"sha": "614d5bd88def9761bdfce33815f5e83cc801dab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE0ZDViZDg4ZGVmOTc2MWJkZmNlMzM4MTVmNWU4M2NjODAxZGFiMA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-04-15T06:05:44Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-04-15T06:05:44Z"}, "message": "function.h (struct emit_status): Delete x_first_insn, x_last_insn and sequence_stack.\n\n\t* function.h (struct emit_status): Delete x_first_insn, x_last_insn\n\tand sequence_stack.  Add seq.\n\t(seq_stack): Delete.\n\t* function.c (prepare_function_start): Don't access x_last_insn.\n\t* emit-rtl.h (get_current_sequence, get_topmost_sequence): New.\n\t(get_insns, set_first_insn, get_last_insn, set_last_insn): Use them.\n\t* emit_rtl.c (start_sequence, push_topmost_sequence,\n\tpop_topmost_sequence, end_sequence, in_sequence_p, init_emit): Use\n\tsequence accessors.\n\t(get_last_insn_anywhere, add_insn_after_nobb, add_insn_before_nobb,\n\tremove_insn): Likewise.  Simplify.\n\t* config/m32c/m32c.c (m32c_leaf_function_p): Use push_topmost_sequence\n\tand pop_topmost_sequence.\n\t(m32c_function_needs_enter): Use get_topmost_sequence.  Ignore\n\tdebug insns.\n\t* config/rs6000/rs6000.c (rs6000_call_aix): Use get_current_sequence.\n\nFrom-SVN: r222112", "tree": {"sha": "ef0b3b5fe19860d399f60a0610fc54c9edee6d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef0b3b5fe19860d399f60a0610fc54c9edee6d90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/614d5bd88def9761bdfce33815f5e83cc801dab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614d5bd88def9761bdfce33815f5e83cc801dab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614d5bd88def9761bdfce33815f5e83cc801dab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614d5bd88def9761bdfce33815f5e83cc801dab0/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "241cbc7a5f4b39f57c350e8fc32d3a43999ba63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241cbc7a5f4b39f57c350e8fc32d3a43999ba63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241cbc7a5f4b39f57c350e8fc32d3a43999ba63b"}], "stats": {"total": 226, "additions": 111, "deletions": 115}, "files": [{"sha": "cd6039d00b04452fae13abddab3610988dc0ae82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=614d5bd88def9761bdfce33815f5e83cc801dab0", "patch": "@@ -1,3 +1,22 @@\n+2015-04-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* function.h (struct emit_status): Delete x_first_insn, x_last_insn\n+\tand sequence_stack.  Add seq.\n+\t(seq_stack): Delete.\n+\t* function.c (prepare_function_start): Don't access x_last_insn.\n+\t* emit-rtl.h (get_current_sequence, get_topmost_sequence): New.\n+\t(get_insns, set_first_insn, get_last_insn, set_last_insn): Use them.\n+\t* emit_rtl.c (start_sequence, push_topmost_sequence,\n+\tpop_topmost_sequence, end_sequence, in_sequence_p, init_emit): Use\n+\tsequence accessors.\n+\t(get_last_insn_anywhere, add_insn_after_nobb, add_insn_before_nobb,\n+\tremove_insn): Likewise.  Simplify.\n+\t* config/m32c/m32c.c (m32c_leaf_function_p): Use push_topmost_sequence\n+\tand pop_topmost_sequence.\n+\t(m32c_function_needs_enter): Use get_topmost_sequence.  Ignore\n+\tdebug insns.\n+\t* config/rs6000/rs6000.c (rs6000_call_aix): Use get_current_sequence.\n+\n 2015-04-14  Yvan Roux  <yvan.roux@linaro.org>\n \n \tPR target/65729"}, {"sha": "f4c29f5de808ba80276641b6083345d80534719e", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=614d5bd88def9761bdfce33815f5e83cc801dab0", "patch": "@@ -4056,24 +4056,11 @@ m32c_encode_section_info (tree decl, rtx rtl, int first)\n static int\n m32c_leaf_function_p (void)\n {\n-  rtx_insn *saved_first, *saved_last;\n-  struct sequence_stack *seq;\n   int rv;\n \n-  saved_first = crtl->emit.x_first_insn;\n-  saved_last = crtl->emit.x_last_insn;\n-  for (seq = crtl->emit.sequence_stack; seq && seq->next; seq = seq->next)\n-    ;\n-  if (seq)\n-    {\n-      crtl->emit.x_first_insn = seq->first;\n-      crtl->emit.x_last_insn = seq->last;\n-    }\n-\n+  push_topmost_sequence ();\n   rv = leaf_function_p ();\n-\n-  crtl->emit.x_first_insn = saved_first;\n-  crtl->emit.x_last_insn = saved_last;\n+  pop_topmost_sequence ();\n   return rv;\n }\n \n@@ -4084,23 +4071,17 @@ static bool\n m32c_function_needs_enter (void)\n {\n   rtx_insn *insn;\n-  struct sequence_stack *seq;\n   rtx sp = gen_rtx_REG (Pmode, SP_REGNO);\n   rtx fb = gen_rtx_REG (Pmode, FB_REGNO);\n \n-  insn = get_insns ();\n-  for (seq = crtl->emit.sequence_stack;\n-       seq;\n-       insn = seq->first, seq = seq->next);\n-\n-  while (insn)\n-    {\n-      if (reg_mentioned_p (sp, insn))\n-\treturn true;\n-      if (reg_mentioned_p (fb, insn))\n-\treturn true;\n-      insn = NEXT_INSN (insn);\n-    }\n+  for (insn = get_topmost_sequence ()->first; insn; insn = NEXT_INSN (insn))\n+    if (NONDEBUG_INSN_P (insn))\n+      {\n+\tif (reg_mentioned_p (sp, insn))\n+\t  return true;\n+\tif (reg_mentioned_p (fb, insn))\n+\t  return true;\n+      }\n   return false;\n }\n "}, {"sha": "a96a7747f41fd4346ce26ce56ecc44a7902975c7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=614d5bd88def9761bdfce33815f5e83cc801dab0", "patch": "@@ -33096,7 +33096,7 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx flag, rtx cookie)\n \t     override a static chain value.  */\n \t  if (!direct_call_p\n \t      && TARGET_POINTERS_TO_NESTED_FUNCTIONS\n-\t      && !chain_already_loaded (crtl->emit.sequence_stack->last))\n+\t      && !chain_already_loaded (get_current_sequence ()->next->last))\n \t    {\n \t      rtx sc_reg = gen_rtx_REG (Pmode, STATIC_CHAIN_REGNUM);\n \t      rtx func_sc_offset = GEN_INT (2 * GET_MODE_SIZE (Pmode));"}, {"sha": "b8dc7d50e7e86386c940233f4ac3144d143ddb74", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 43, "deletions": 68, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=614d5bd88def9761bdfce33815f5e83cc801dab0", "patch": "@@ -3175,12 +3175,10 @@ make_safe_from (rtx x, rtx other)\n rtx_insn *\n get_last_insn_anywhere (void)\n {\n-  struct sequence_stack *stack;\n-  if (get_last_insn ())\n-    return get_last_insn ();\n-  for (stack = seq_stack; stack; stack = stack->next)\n-    if (stack->last != 0)\n-      return stack->last;\n+  struct sequence_stack *seq;\n+  for (seq = get_current_sequence (); seq; seq = seq->next)\n+    if (seq->last != 0)\n+      return seq->last;\n   return 0;\n }\n \n@@ -4014,19 +4012,14 @@ add_insn_after_nobb (rtx_insn *insn, rtx_insn *after)\n \n   if (next == NULL)\n     {\n-      if (get_last_insn () == after)\n-\tset_last_insn (insn);\n-      else\n-\t{\n-\t  struct sequence_stack *stack = seq_stack;\n-\t  /* Scan all pending sequences too.  */\n-\t  for (; stack; stack = stack->next)\n-\t    if (after == stack->last)\n-\t      {\n-\t\tstack->last = insn;\n-\t\tbreak;\n-\t      }\n-\t}\n+      struct sequence_stack *seq;\n+\n+      for (seq = get_current_sequence (); seq; seq = seq->next)\n+\tif (after == seq->last)\n+\t  {\n+\t    seq->last = insn;\n+\t    break;\n+\t  }\n     }\n }\n \n@@ -4043,21 +4036,16 @@ add_insn_before_nobb (rtx_insn *insn, rtx_insn *before)\n \n   if (prev == NULL)\n     {\n-      if (get_insns () == before)\n-\tset_first_insn (insn);\n-      else\n-\t{\n-\t  struct sequence_stack *stack = seq_stack;\n-\t  /* Scan all pending sequences too.  */\n-\t  for (; stack; stack = stack->next)\n-\t    if (before == stack->first)\n-\t      {\n-\t\tstack->first = insn;\n-\t\tbreak;\n-\t      }\n+      struct sequence_stack *seq;\n \n-\t  gcc_assert (stack);\n-\t}\n+      for (seq = get_current_sequence (); seq; seq = seq->next)\n+\tif (before == seq->first)\n+\t  {\n+\t    seq->first = insn;\n+\t    break;\n+\t  }\n+\n+      gcc_assert (seq);\n     }\n }\n \n@@ -4168,24 +4156,18 @@ remove_insn (rtx uncast_insn)\n \t  SET_NEXT_INSN (sequence->insn (sequence->len () - 1)) = next;\n \t}\n     }\n-  else if (get_insns () == insn)\n-    {\n-      if (next)\n-        SET_PREV_INSN (next) = NULL;\n-      set_first_insn (next);\n-    }\n   else\n     {\n-      struct sequence_stack *stack = seq_stack;\n-      /* Scan all pending sequences too.  */\n-      for (; stack; stack = stack->next)\n-\tif (insn == stack->first)\n+      struct sequence_stack *seq;\n+\n+      for (seq = get_current_sequence (); seq; seq = seq->next)\n+\tif (insn == seq->first)\n \t  {\n-\t    stack->first = next;\n+\t    seq->first = next;\n \t    break;\n \t  }\n \n-      gcc_assert (stack);\n+      gcc_assert (seq);\n     }\n \n   if (next)\n@@ -4197,20 +4179,18 @@ remove_insn (rtx uncast_insn)\n \t  SET_PREV_INSN (sequence->insn (0)) = prev;\n \t}\n     }\n-  else if (get_last_insn () == insn)\n-    set_last_insn (prev);\n   else\n     {\n-      struct sequence_stack *stack = seq_stack;\n-      /* Scan all pending sequences too.  */\n-      for (; stack; stack = stack->next)\n-\tif (insn == stack->last)\n+      struct sequence_stack *seq;\n+\n+      for (seq = get_current_sequence (); seq; seq = seq->next)\n+\tif (insn == seq->last)\n \t  {\n-\t    stack->last = prev;\n+\t    seq->last = prev;\n \t    break;\n \t  }\n \n-      gcc_assert (stack);\n+      gcc_assert (seq);\n     }\n \n   /* Fix up basic block boundaries, if necessary.  */\n@@ -5399,11 +5379,10 @@ start_sequence (void)\n   else\n     tem = ggc_alloc<sequence_stack> ();\n \n-  tem->next = seq_stack;\n+  tem->next = get_current_sequence ()->next;\n   tem->first = get_insns ();\n   tem->last = get_last_insn ();\n-\n-  seq_stack = tem;\n+  get_current_sequence ()->next = tem;\n \n   set_first_insn (0);\n   set_last_insn (0);\n@@ -5445,13 +5424,11 @@ push_to_sequence2 (rtx_insn *first, rtx_insn *last)\n void\n push_topmost_sequence (void)\n {\n-  struct sequence_stack *stack, *top = NULL;\n+  struct sequence_stack *top;\n \n   start_sequence ();\n \n-  for (stack = seq_stack; stack; stack = stack->next)\n-    top = stack;\n-\n+  top = get_topmost_sequence ();\n   set_first_insn (top->first);\n   set_last_insn (top->last);\n }\n@@ -5462,11 +5439,9 @@ push_topmost_sequence (void)\n void\n pop_topmost_sequence (void)\n {\n-  struct sequence_stack *stack, *top = NULL;\n-\n-  for (stack = seq_stack; stack; stack = stack->next)\n-    top = stack;\n+  struct sequence_stack *top;\n \n+  top = get_topmost_sequence ();\n   top->first = get_insns ();\n   top->last = get_last_insn ();\n \n@@ -5489,11 +5464,11 @@ pop_topmost_sequence (void)\n void\n end_sequence (void)\n {\n-  struct sequence_stack *tem = seq_stack;\n+  struct sequence_stack *tem = get_current_sequence ()->next;\n \n   set_first_insn (tem->first);\n   set_last_insn (tem->last);\n-  seq_stack = tem->next;\n+  get_current_sequence ()->next = tem->next;\n \n   memset (tem, 0, sizeof (*tem));\n   tem->next = free_sequence_stack;\n@@ -5505,7 +5480,7 @@ end_sequence (void)\n int\n in_sequence_p (void)\n {\n-  return seq_stack != 0;\n+  return get_current_sequence ()->next != 0;\n }\n \f\n /* Put the various virtual registers into REGNO_REG_RTX.  */\n@@ -5721,7 +5696,7 @@ init_emit (void)\n   cur_debug_insn_uid = 1;\n   reg_rtx_no = LAST_VIRTUAL_REGISTER + 1;\n   first_label_num = label_num;\n-  seq_stack = NULL;\n+  get_current_sequence ()->next = NULL;\n \n   /* Init the tables that describe all the pseudo regs.  */\n "}, {"sha": "7dce7ebef11809ddd7e310d4abd3ecce2e6db78b", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=614d5bd88def9761bdfce33815f5e83cc801dab0", "patch": "@@ -75,12 +75,36 @@ extern int mem_expr_equal_p (const_tree, const_tree);\n \n extern bool need_atomic_barrier_p (enum memmodel, bool);\n \n+/* Return the current sequence.  */\n+\n+static inline struct sequence_stack *\n+get_current_sequence (void)\n+{\n+  return &crtl->emit.seq;\n+}\n+\n+/* Return the outermost sequence.  */\n+\n+static inline struct sequence_stack *\n+get_topmost_sequence (void)\n+{\n+  struct sequence_stack *seq, *top;\n+\n+  seq = get_current_sequence ();\n+  do\n+    {\n+      top = seq;\n+      seq = seq->next;\n+    } while (seq);\n+  return top;\n+}\n+\n /* Return the first insn of the current sequence or current function.  */\n \n static inline rtx_insn *\n get_insns (void)\n {\n-  return crtl->emit.x_first_insn;\n+  return get_current_sequence ()->first;\n }\n \n /* Specify a new insn as the first in the chain.  */\n@@ -89,15 +113,15 @@ static inline void\n set_first_insn (rtx_insn *insn)\n {\n   gcc_checking_assert (!insn || !PREV_INSN (insn));\n-  crtl->emit.x_first_insn = insn;\n+  get_current_sequence ()->first = insn;\n }\n \n /* Return the last insn emitted in current sequence or current function.  */\n \n static inline rtx_insn *\n get_last_insn (void)\n {\n-  return crtl->emit.x_last_insn;\n+  return get_current_sequence ()->last;\n }\n \n /* Specify a new insn as the last in the chain.  */\n@@ -106,7 +130,7 @@ static inline void\n set_last_insn (rtx_insn *insn)\n {\n   gcc_checking_assert (!insn || !NEXT_INSN (insn));\n-  crtl->emit.x_last_insn = insn;\n+  get_current_sequence ()->last = insn;\n }\n \n /* Return a number larger than any instruction's uid in this function.  */"}, {"sha": "cb974bfe83d84451476989b432e50ebbb1fd0c86", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=614d5bd88def9761bdfce33815f5e83cc801dab0", "patch": "@@ -4831,7 +4831,7 @@ push_struct_function (tree fndecl)\n static void\n prepare_function_start (void)\n {\n-  gcc_assert (!crtl->emit.x_last_insn);\n+  gcc_assert (!get_last_insn ());\n   init_temp_slots ();\n   init_emit ();\n   init_varasm_status ();"}, {"sha": "363d666d52fb7a28f6f8e2998e7d23cb3f6fd701", "filename": "gcc/function.h", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614d5bd88def9761bdfce33815f5e83cc801dab0/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=614d5bd88def9761bdfce33815f5e83cc801dab0", "patch": "@@ -41,19 +41,17 @@ struct GTY(()) emit_status {\n   /* Lowest label number in current function.  */\n   int x_first_label_num;\n \n-  /* The ends of the doubly-linked chain of rtl for the current function.\n-     Both are reset to null at the start of rtl generation for the function.\n+  /* seq.first and seq.last are the ends of the doubly-linked chain of\n+     rtl for the current function.  Both are reset to null at the\n+     start of rtl generation for the function. \n \n-     start_sequence saves both of these on `sequence_stack' and then starts\n-     a new, nested sequence of insns.  */\n-  rtx_insn *x_first_insn;\n-  rtx_insn *x_last_insn;\n+     start_sequence saves both of these on seq.next and then starts\n+     a new, nested sequence of insns.\n \n-  /* Stack of pending (incomplete) sequences saved by `start_sequence'.\n-     Each element describes one pending sequence.\n-     The main insn-chain is saved in the last element of the chain,\n-     unless the chain is empty.  */\n-  struct sequence_stack *sequence_stack;\n+     seq.next is a stack of pending (incomplete) sequences saved by\n+     start_sequence.  Each element describes one pending sequence.\n+     The main insn-chain is the last element of the chain.  */\n+  struct sequence_stack seq;\n \n   /* INSN_UID for next insn emitted.\n      Reset to 1 for each function compiled.  */\n@@ -88,7 +86,6 @@ extern GTY ((length (\"crtl->emit.x_reg_rtx_no\"))) rtx * regno_reg_rtx;\n \n /* For backward compatibility... eventually these should all go away.  */\n #define reg_rtx_no (crtl->emit.x_reg_rtx_no)\n-#define seq_stack (crtl->emit.sequence_stack)\n \n #define REGNO_POINTER_ALIGN(REGNO) (crtl->emit.regno_pointer_align[REGNO])\n "}]}