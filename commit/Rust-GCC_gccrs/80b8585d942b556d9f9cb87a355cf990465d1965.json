{"sha": "80b8585d942b556d9f9cb87a355cf990465d1965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBiODU4NWQ5NDJiNTU2ZDlmOWNiODdhMzU1Y2Y5OTA0NjVkMTk2NQ==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-10-10T18:41:18Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-10-10T18:41:18Z"}, "message": "avr.c (out_shift_with_cnt): Use AS2 macro.\n\n\t* config/avr/avr.c (out_shift_with_cnt): Use AS2 macro.\n\tCorrect insn length if shift count is a memory operand.\n\t* config/avr/avr.md: New define_peephole2 to use *reload_inqi.\n\t(*iorhi3_clobber): Change lo8 to hi8.\n\t(zero_extendhisi2): Change %B0 to %A1.\n\t(ashlhi3, ashrhi3): Correct insn length.\n\t(andhi3, abssf2, extendqisi2, extendhisi2): Change \"cc\"\n\tfrom \"clobber\" to \"set_n\" in some alternatives.\n\nFrom-SVN: r36828", "tree": {"sha": "687a9736c8add2cdfc44396adbd7df5645dfd9bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687a9736c8add2cdfc44396adbd7df5645dfd9bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80b8585d942b556d9f9cb87a355cf990465d1965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b8585d942b556d9f9cb87a355cf990465d1965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b8585d942b556d9f9cb87a355cf990465d1965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b8585d942b556d9f9cb87a355cf990465d1965/comments", "author": null, "committer": null, "parents": [{"sha": "29f8b71838fd23a668b760b55b36e9df835c5860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f8b71838fd23a668b760b55b36e9df835c5860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f8b71838fd23a668b760b55b36e9df835c5860"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "9d484442f7f5476e0ea728fd61aeb0f23168586f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b8585d942b556d9f9cb87a355cf990465d1965/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b8585d942b556d9f9cb87a355cf990465d1965/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80b8585d942b556d9f9cb87a355cf990465d1965", "patch": "@@ -1,3 +1,14 @@\n+2000-10-09  Marek Michalkiewicz  <marekm@linux.org.pl>\n+\n+\t* config/avr/avr.c (out_shift_with_cnt): Use AS2 macro.\n+\tCorrect insn length if shift count is a memory operand.\n+\t* config/avr/avr.md: New define_peephole2 to use *reload_inqi.\n+\t(*iorhi3_clobber): Change lo8 to hi8.\n+\t(zero_extendhisi2): Change %B0 to %A1.\n+\t(ashlhi3, ashrhi3): Correct insn length.\n+\t(andhi3, abssf2, extendqisi2, extendhisi2): Change \"cc\"\n+\tfrom \"clobber\" to \"set_n\" in some alternatives.\n+\n 2000-10-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* reload1.c (calculate_needs_all_insns): If deleting an instruction,"}, {"sha": "e3175275c5e4782e2fa373c046ee106babb2be0c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b8585d942b556d9f9cb87a355cf990465d1965/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b8585d942b556d9f9cb87a355cf990465d1965/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=80b8585d942b556d9f9cb87a355cf990465d1965", "patch": "@@ -2699,7 +2699,7 @@ out_shift_with_cnt (template, insn, operands, len)\n       if (len)\n \t++*len;\n       else\n-\tstrcat (str, \"ldi %3,lo8((%2)-1)\");\n+\tstrcat (str, AS2 (ldi,%3,lo8((%2)-1)));\n       second_label = 0;\n     }\n   else if (GET_CODE (operands[2]) == MEM)\n@@ -2718,7 +2718,7 @@ out_shift_with_cnt (template, insn, operands, len)\n       else\n \t{\n \t  out_movqi_r_mr (insn, op_mov, &mov_len);\n-\t  *len = mov_len + 1;\n+\t  *len += mov_len + 1;\n \t}\n     }\n   else if (register_operand (operands[2], QImode))\n@@ -2731,7 +2731,7 @@ out_shift_with_cnt (template, insn, operands, len)\n \t  if (len)\n \t    ++*len;\n \t  else\n-\t    strcat (str, \"mov %3,%2\" CR_TAB);\n+\t    strcat (str, AS2 (mov,%3,%2) CR_TAB);\n \t}\n       \n       if (len)\n@@ -2742,7 +2742,7 @@ out_shift_with_cnt (template, insn, operands, len)\n     }\n   if (!len)\n     {\n-      strcat (str,\"\\n1:\\t\");\n+      strcat (str, \"\\n1:\\t\");\n       strcat (str, template);\n       strcat (str, second_label ? \"\\n2:\\t\" : \"\\n\\t\");\n       strcat (str,"}, {"sha": "90bc69ff99a03bc110f0ce9a9567ac4e69360e1f", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b8585d942b556d9f9cb87a355cf990465d1965/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b8585d942b556d9f9cb87a355cf990465d1965/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=80b8585d942b556d9f9cb87a355cf990465d1965", "patch": "@@ -188,6 +188,16 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"none\")])\n \n+(define_peephole2\n+  [(match_scratch:QI 2 \"d\")\n+   (set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(match_operand:QI 1 \"immediate_operand\" \"\"))]\n+  \"(operands[1] != const0_rtx\n+    && test_hard_reg_class (NO_LD_REGS, operands[0]))\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (match_dup 2))])]\n+  \"\")\n+\n ;;============================================================================\n ;; move word (16 bit)\n \n@@ -709,7 +719,7 @@\n           AS1 (clr,%B0));\n }\"\n   [(set_attr \"length\" \"2,2,3\")\n-   (set_attr \"cc\" \"set_n,clobber,clobber\")])\n+   (set_attr \"cc\" \"set_n,clobber,set_n\")])\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n@@ -793,7 +803,7 @@\n   \"\"\n   \"@\n \tldi %3,lo8(%2)\\;or %A0,%3\n-\tldi %3,lo8(%2)\\;or %A0,%3\\;ldi %3,lo8(%2)\\;or %B0,%3\"\n+\tldi %3,lo8(%2)\\;or %A0,%3\\;ldi %3,hi8(%2)\\;or %B0,%3\"\n   [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"clobber,set_n\")])\n \n@@ -894,7 +904,7 @@\n    (clobber (match_scratch:QI 3 \"=X,X,X,X,&d,X\"))]\n   \"\"\n   \"* return ashlhi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"7,2,4,2,5,8\")\n+  [(set_attr \"length\" \"7,2,2,4,5,8\")\n    (set_attr \"cc\" \"clobber,set_n,clobber,set_n,clobber,clobber\")])\n \n (define_insn \"ashlsi3\"\n@@ -926,7 +936,7 @@\n    (clobber (match_scratch:QI 3 \"=X,X,X,X,&d,X\"))]\n   \"\"\n   \"* return ashrhi3_out (insn, operands, NULL);\"\n-  [(set_attr \"length\" \"7,2,4,2,5,8\")\n+  [(set_attr \"length\" \"7,2,4,4,5,8\")\n    (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber,clobber\")])\n \n (define_insn \"ashrsi3\"\n@@ -992,7 +1002,7 @@\n \tandi %D0,0x7f\n \tclt\\;bld %D0,7\"\n   [(set_attr \"length\" \"1,2\")\n-   (set_attr \"cc\" \"clobber,clobber\")])\n+   (set_attr \"cc\" \"set_n,clobber\")])\n \n ;; 0 - x  0 - x  0 - x  0 - x  0 - x  0 - x  0 - x  0 - x  0 - x  0 - x  0 - x\n ;; neg\n@@ -1094,7 +1104,7 @@\n \tclr %B0\\;sbrc %A0,7\\;com %B0\\;mov %C0,%B0\\;mov %D0,%B0\n \tmov %A0,%A1\\;clr %B0\\;sbrc %A0,7\\;com %B0\\;mov %C0,%B0\\;mov %D0,%B0\"\n   [(set_attr \"length\" \"5,6\")\n-   (set_attr \"cc\" \"clobber,clobber\")])\n+   (set_attr \"cc\" \"set_n,set_n\")])\n \n (define_insn \"extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\"               \"=r,&r\")\n@@ -1108,7 +1118,7 @@\n \t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")\n \t\t\t\t\t(const_int 5)\n \t\t\t\t\t(const_int 6))])\n-   (set_attr \"cc\" \"clobber,clobber\")])\n+   (set_attr \"cc\" \"set_n,set_n\")])\n \n ;; xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x xx<---x\n ;; zero extend\n@@ -1139,7 +1149,7 @@\n   \"\"\n   \"@\n \tclr %C0\\;clr %D0\n-\t{mov %A0,%A1\\;mov %B0,%B1|movw %A0,%B0}\\;clr %C0\\;clr %D0\"\n+\t{mov %A0,%A1\\;mov %B0,%B1|movw %A0,%A1}\\;clr %C0\\;clr %D0\"\n   [(set_attr_alternative \"length\"\n \t\t\t [(const_int 2)\n \t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")"}]}