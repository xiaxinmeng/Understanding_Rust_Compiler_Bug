{"sha": "11452e7bb94745d54860580134bf0c2394251834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0NTJlN2JiOTQ3NDVkNTQ4NjA1ODAxMzRiZjBjMjM5NDI1MTgzNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-30T15:42:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-30T15:42:49Z"}, "message": "sparseset.h (sparseset_bit_p): Use gcc_checking_assert.\n\n2013-01-30  Richard Biener  <rguenther@suse.de>\n\n\t* sparseset.h (sparseset_bit_p): Use gcc_checking_assert.\n\t(sparseset_pop): Likewise.\n\t* cfganal.c (compute_idf): Likewise.  Increase work-stack size\n\tto be able to use quick_push in the worker loop.\n\nFrom-SVN: r195577", "tree": {"sha": "2699dd96877fb3ea03cd20f59419eddedf1d0232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2699dd96877fb3ea03cd20f59419eddedf1d0232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11452e7bb94745d54860580134bf0c2394251834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11452e7bb94745d54860580134bf0c2394251834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11452e7bb94745d54860580134bf0c2394251834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11452e7bb94745d54860580134bf0c2394251834/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01cb1ef501d0fe19b105e745e55c1f15ec472066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01cb1ef501d0fe19b105e745e55c1f15ec472066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01cb1ef501d0fe19b105e745e55c1f15ec472066"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "44535edfb008e21e54adece452350af8d5ecfb63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11452e7bb94745d54860580134bf0c2394251834/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11452e7bb94745d54860580134bf0c2394251834/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11452e7bb94745d54860580134bf0c2394251834", "patch": "@@ -1,3 +1,10 @@\n+2013-01-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* sparseset.h (sparseset_bit_p): Use gcc_checking_assert.\n+\t(sparseset_pop): Likewise.\n+\t* cfganal.c (compute_idf): Likewise.  Increase work-stack size\n+\tto be able to use quick_push in the worker loop.\n+\n 2013-01-30  Marek Polacek  <polacek@redhat.com>\n \n \t* cfgcleanup.c (cleanup_cfg): Don't mark affected BBs."}, {"sha": "63d17cede2b85e196664a475f1ba6e74f1671125", "filename": "gcc/cfganal.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11452e7bb94745d54860580134bf0c2394251834/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11452e7bb94745d54860580134bf0c2394251834/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=11452e7bb94745d54860580134bf0c2394251834", "patch": "@@ -1141,7 +1141,8 @@ compute_idf (bitmap def_blocks, bitmap_head *dfs)\n   vec<int> work_stack;\n   bitmap phi_insertion_points;\n \n-  work_stack.create (n_basic_blocks);\n+  /* Each block can appear at most twice on the work-stack.  */\n+  work_stack.create (2 * n_basic_blocks);\n   phi_insertion_points = BITMAP_ALLOC (NULL);\n \n   /* Seed the work list with all the blocks in DEF_BLOCKS.  We use\n@@ -1165,15 +1166,12 @@ compute_idf (bitmap def_blocks, bitmap_head *dfs)\n \t form, the basic blocks where new and/or old names are defined\n \t may have disappeared by CFG cleanup calls.  In this case,\n \t we may pull a non-existing block from the work stack.  */\n-      gcc_assert (bb_index < (unsigned) last_basic_block);\n+      gcc_checking_assert (bb_index < (unsigned) last_basic_block);\n \n       EXECUTE_IF_AND_COMPL_IN_BITMAP (&dfs[bb_index], phi_insertion_points,\n \t                              0, i, bi)\n \t{\n-\t  /* Use a safe push because if there is a definition of VAR\n-\t     in every basic block, then WORK_STACK may eventually have\n-\t     more than N_BASIC_BLOCK entries.  */\n-\t  work_stack.safe_push (i);\n+\t  work_stack.quick_push (i);\n \t  bitmap_set_bit (phi_insertion_points, i);\n \t}\n     }"}, {"sha": "c9ba09a3479b18bb8987dea7817071111ae676e4", "filename": "gcc/sparseset.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11452e7bb94745d54860580134bf0c2394251834/gcc%2Fsparseset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11452e7bb94745d54860580134bf0c2394251834/gcc%2Fsparseset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsparseset.h?ref=11452e7bb94745d54860580134bf0c2394251834", "patch": "@@ -140,7 +140,7 @@ sparseset_bit_p (sparseset s, SPARSESET_ELT_TYPE e)\n {\n   SPARSESET_ELT_TYPE idx;\n \n-  gcc_assert (e < s->size);\n+  gcc_checking_assert (e < s->size);\n \n   idx = s->sparse[e];\n \n@@ -174,7 +174,7 @@ sparseset_pop (sparseset s)\n {\n   SPARSESET_ELT_TYPE mem = s->members;\n \n-  gcc_assert (mem != 0);\n+  gcc_checking_assert (mem != 0);\n \n   s->members = mem - 1;\n   return s->dense[mem];"}]}