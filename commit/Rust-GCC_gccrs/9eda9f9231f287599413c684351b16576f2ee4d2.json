{"sha": "9eda9f9231f287599413c684351b16576f2ee4d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkYTlmOTIzMWYyODc1OTk0MTNjNjg0MzUxYjE2NTc2ZjJlZTRkMg==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2019-04-11T20:40:40Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgertq@gcc.gnu.org", "date": "2019-04-11T20:40:40Z"}, "message": "Replace direct PSTL uses of assert() with a macro\n\nThis also replaces calls to __TBB_ASSERT so that there are two macro\ndefinitions provided by c++config -\n\t    __PSTL_ASSERT(_Condition)\n\t    __PSTL_ASSERT_MSG(_Condition, _Message)\n\n\t    * include/bits/c++config:\n\t    Add definition for __PSTL_ASSERT.\n\t    Add definition for __PSTL_ASSERT_MSG.\n\t    * include/pstl/algorithm_impl.h: Replace use of assert().\n\t    * include/pstl/numeric_impl.h: Replace use of assert().\n\t    * include/pstl/parallel_backend_tbb.h:\n\t    Replace use of assert().\n\t    Replace use of __TBB_ASSERT().\n\n\t    * include/pstl/parallel_backend_utils.h: Replace use of assert().\n\nFrom-SVN: r270293", "tree": {"sha": "d5f63e7dfbdd1473b295e0fba6c44701ed978092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5f63e7dfbdd1473b295e0fba6c44701ed978092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eda9f9231f287599413c684351b16576f2ee4d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eda9f9231f287599413c684351b16576f2ee4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eda9f9231f287599413c684351b16576f2ee4d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eda9f9231f287599413c684351b16576f2ee4d2/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c00d68e89ef6553435a3f2e373a90fa8e5077445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00d68e89ef6553435a3f2e373a90fa8e5077445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00d68e89ef6553435a3f2e373a90fa8e5077445"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "ae1ec87f229ab113d4305be5b420a1385722b274", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9eda9f9231f287599413c684351b16576f2ee4d2", "patch": "@@ -1,3 +1,16 @@\n+2019-04-11  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/bits/c++config:\n+\tAdd definition for __PSTL_ASSERT.\n+\tAdd definition for __PSTL_ASSERT_MSG.\n+\t* include/pstl/algorithm_impl.h: Replace use of assert().\n+\t* include/pstl/numeric_impl.h: Replace use of assert().\n+\t* include/pstl/parallel_backend_tbb.h:\n+\tReplace use of assert().\n+\tReplace use of __TBB_ASSERT().\n+\n+\t* include/pstl/parallel_backend_utils.h: Replace use of assert().\n+\n 2019-04-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90046"}, {"sha": "ef8ba96737bb731929f059e961dd7635e1d41087", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=9eda9f9231f287599413c684351b16576f2ee4d2", "patch": "@@ -690,6 +690,10 @@ namespace std\n #  undef __PSTL_PAR_BACKEND_TBB\n # endif\n \n+# define __PSTL_ASSERT(_Condition) __glibcxx_assert(_Condition)\n+# define __PSTL_ASSERT_MSG(_Condition, _Message) __glibcxx_assert(_Condition)\n+\n+\n # define __PSTL_PRAGMA(x) _Pragma (#x)\n \n # define __PSTL_STRING_AUX(x) #x"}, {"sha": "b0d60baae142d04199ca45420f37741ebc19c9fd", "filename": "libstdc++-v3/include/pstl/algorithm_impl.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h?ref=9eda9f9231f287599413c684351b16576f2ee4d2", "patch": "@@ -2731,8 +2731,8 @@ __pattern_includes(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forwa\n          return !__internal::__parallel_or(\n             std::forward<_ExecutionPolicy>(__exec), __first2, __last2,\n             [__first1, __last1, __first2, __last2, &__comp](_ForwardIterator2 __i, _ForwardIterator2 __j) {\n-                assert(__j > __i);\n-                //assert(__j - __i > 1);\n+                __PSTL_ASSERT(__j > __i);\n+                //__PSTL_ASSERT(__j - __i > 1);\n \n                 //1. moving boundaries to \"consume\" subsequence of equal elements\n                 auto __is_equal = [&__comp](_ForwardIterator2 __a, _ForwardIterator2 __b) -> bool {\n@@ -2756,8 +2756,8 @@ __pattern_includes(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forwa\n                 //2. testing is __a subsequence of the second range included into the first range\n                 auto __b = std::lower_bound(__first1, __last1, *__i, __comp);\n \n-                assert(!__comp(*(__last1 - 1), *__b));\n-                assert(!__comp(*(__j - 1), *__i));\n+                __PSTL_ASSERT(!__comp(*(__last1 - 1), *__b));\n+                __PSTL_ASSERT(!__comp(*(__j - 1), *__i));\n                 return !std::includes(__b, __last1, __i, __j, __comp);\n             });\n     });\n@@ -2948,7 +2948,7 @@ __parallel_set_union_op(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _\n     }\n \n     const auto __m2 = __left_bound_seq_2 - __first2;\n-    assert(__m1 == 0 || __m2 == 0);\n+    __PSTL_ASSERT(__m1 == 0 || __m2 == 0);\n     if (__m2 > __set_algo_cut_off)\n     {\n         auto __res_or = __result;"}, {"sha": "738a61d92f639a223a1ccd335154f4519e289a1a", "filename": "libstdc++-v3/include/pstl/numeric_impl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h?ref=9eda9f9231f287599413c684351b16576f2ee4d2", "patch": "@@ -314,7 +314,7 @@ _ForwardIterator2\n __brick_adjacent_difference(_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first,\n                             BinaryOperation __op, /*is_vector=*/std::true_type) noexcept\n {\n-    assert(__first != __last);\n+    __PSTL_ASSERT(__first != __last);\n \n     typedef typename std::iterator_traits<_ForwardIterator1>::reference _ReferenceType1;\n     typedef typename std::iterator_traits<_ForwardIterator2>::reference _ReferenceType2;\n@@ -344,7 +344,7 @@ __pattern_adjacent_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __fir\n                               _ForwardIterator2 __d_first, _BinaryOperation __op, _IsVector __is_vector,\n                               /*is_parallel=*/std::true_type)\n {\n-    assert(__first != __last);\n+    __PSTL_ASSERT(__first != __last);\n     typedef typename std::iterator_traits<_ForwardIterator1>::reference _ReferenceType1;\n     typedef typename std::iterator_traits<_ForwardIterator2>::reference _ReferenceType2;\n "}, {"sha": "fc1ffa7383f6e300ec94c27fbe6f2d7867086d07", "filename": "libstdc++-v3/include/pstl/parallel_backend_tbb.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h?ref=9eda9f9231f287599413c684351b16576f2ee4d2", "patch": "@@ -10,7 +10,6 @@\n #ifndef __PSTL_parallel_backend_tbb_H\n #define __PSTL_parallel_backend_tbb_H\n \n-#include <cassert>\n #include <algorithm>\n #include <type_traits>\n \n@@ -139,7 +138,7 @@ struct __par_trans_red_body\n     _Tp&\n     sum()\n     {\n-        __TBB_ASSERT(_M_has_sum, \"sum expected\");\n+        __PSTL_ASSERT_MSG(_M_has_sum, \"sum expected\");\n         return *(_Tp*)_M_sum_storage;\n     }\n     __par_trans_red_body(_Up __u, _Tp __init, _Cp __c, _Rp __r)\n@@ -173,7 +172,7 @@ struct __par_trans_red_body\n         _Index __j = __range.end();\n         if (!_M_has_sum)\n         {\n-            __TBB_ASSERT(__range.size() > 1, \"there should be at least 2 elements\");\n+            __PSTL_ASSERT_MSG(__range.size() > 1, \"there should be at least 2 elements\");\n             new (&_M_sum_storage)\n                 _Tp(_M_combine(_M_u(__i), _M_u(__i + 1))); // The condition i+1 < j is provided by the grain size of 3\n             _M_has_sum = true;\n@@ -233,7 +232,7 @@ class __trans_scan_body\n     _Tp&\n     sum() const\n     {\n-        __TBB_ASSERT(_M_has_sum, \"sum expected\");\n+        __PSTL_ASSERT_MSG(_M_has_sum, \"sum expected\");\n         return *const_cast<_Tp*>(reinterpret_cast<_Tp const*>(_M_sum_storage));\n     }\n \n@@ -591,7 +590,7 @@ __parallel_stable_sort(_ExecutionPolicy&&, _RandomAccessIterator __xs, _RandomAc\n         const _DifferenceType __sort_cut_off = __PSTL_STABLE_SORT_CUT_OFF;\n         if (__n > __sort_cut_off)\n         {\n-            assert(__nsort > 0 && __nsort <= __n);\n+            __PSTL_ASSERT(__nsort > 0 && __nsort <= __n);\n             __buffer<_ValueType> __buf(__n);\n             using tbb::task;\n             task::spawn_root_and_wait(*new (task::allocate_root())"}, {"sha": "4ec5319a9377337bfbeb65c04f8793ffd95564ef", "filename": "libstdc++-v3/include/pstl/parallel_backend_utils.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eda9f9231f287599413c684351b16576f2ee4d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_utils.h?ref=9eda9f9231f287599413c684351b16576f2ee4d2", "patch": "@@ -12,7 +12,6 @@\n \n #include <iterator>\n #include <utility>\n-#include <cassert>\n #include \"utils.h\"\n \n namespace __pstl\n@@ -54,7 +53,7 @@ struct __serial_move_merge\n                _RandomAccessIterator2 __ye, _RandomAccessIterator3 __zs, _Compare __comp)\n     {\n         auto __n = _M_nmerge;\n-        assert(__n > 0);\n+        __PSTL_ASSERT(__n > 0);\n         if (__xs != __xe)\n         {\n             if (__ys != __ye)\n@@ -146,7 +145,7 @@ class __stack\n \n     ~__stack()\n     {\n-        assert(size() <= _M_maxsize);\n+        __PSTL_ASSERT(size() <= _M_maxsize);\n         while (!empty())\n             pop();\n     }\n@@ -159,20 +158,20 @@ class __stack\n     size_t\n     size() const\n     {\n-        assert(_M_ptr - _M_buf.get() <= _M_maxsize);\n-        assert(_M_ptr - _M_buf.get() >= 0);\n+        __PSTL_ASSERT(_M_ptr - _M_buf.get() <= _M_maxsize);\n+        __PSTL_ASSERT(_M_ptr - _M_buf.get() >= 0);\n         return _M_ptr - _M_buf.get();\n     }\n     bool\n     empty() const\n     {\n-        assert(_M_ptr >= _M_buf.get());\n+        __PSTL_ASSERT(_M_ptr >= _M_buf.get());\n         return _M_ptr == _M_buf.get();\n     }\n     void\n     push(const _ValueType& __v)\n     {\n-        assert(size() < _M_maxsize);\n+        __PSTL_ASSERT(size() < _M_maxsize);\n         new (_M_ptr) _ValueType(__v);\n         ++_M_ptr;\n     }\n@@ -184,7 +183,7 @@ class __stack\n     void\n     pop()\n     {\n-        assert(_M_ptr > _M_buf.get());\n+        __PSTL_ASSERT(_M_ptr > _M_buf.get());\n         --_M_ptr;\n         (*_M_ptr).~_ValueType();\n     }"}]}