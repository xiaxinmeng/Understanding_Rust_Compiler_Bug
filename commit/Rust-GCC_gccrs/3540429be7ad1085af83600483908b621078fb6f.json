{"sha": "3540429be7ad1085af83600483908b621078fb6f", "node_id": "C_kwDOANBUbNoAKDM1NDA0MjliZTdhZDEwODVhZjgzNjAwNDgzOTA4YjYyMTA3OGZiNmY", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-27T06:57:38Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-28T01:40:30Z"}, "message": "Support 128/256/512-bit vector plus/smin/smax reduction for _Float16.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (emit_reduc_half): Handle\n\tV8HF/V16HF/V32HFmode.\n\t* config/i386/sse.md (REDUC_SSE_PLUS_MODE): Add V8HF.\n\t(REDUC_SSE_SMINMAX_MODE): Ditto.\n\t(REDUC_PLUS_MODE): Add V16HF and V32HF.\n\t(REDUC_SMINMAX_MODE): Ditto.\n\ngcc/testsuite\n\n\t* gcc.target/i386/avx512fp16-reduce-op-2.c: New test.\n\t* gcc.target/i386/avx512fp16-reduce-op-3.c: New test.", "tree": {"sha": "36e89a1f9e29e2c2662a7f0e139cbb48979c8e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e89a1f9e29e2c2662a7f0e139cbb48979c8e83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3540429be7ad1085af83600483908b621078fb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3540429be7ad1085af83600483908b621078fb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3540429be7ad1085af83600483908b621078fb6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3540429be7ad1085af83600483908b621078fb6f/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf966403d91afcf475347f0d06dd2b7215ae3611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf966403d91afcf475347f0d06dd2b7215ae3611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf966403d91afcf475347f0d06dd2b7215ae3611"}], "stats": {"total": 200, "additions": 198, "deletions": 2}, "files": [{"sha": "4780b993917bb770d21cf23ce9eca22d530fe55a", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3540429be7ad1085af83600483908b621078fb6f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3540429be7ad1085af83600483908b621078fb6f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=3540429be7ad1085af83600483908b621078fb6f", "patch": "@@ -16045,6 +16045,7 @@ emit_reduc_half (rtx dest, rtx src, int i)\n       break;\n     case E_V16QImode:\n     case E_V8HImode:\n+    case E_V8HFmode:\n     case E_V4SImode:\n     case E_V2DImode:\n       d = gen_reg_rtx (V1TImode);\n@@ -16066,6 +16067,7 @@ emit_reduc_half (rtx dest, rtx src, int i)\n       break;\n     case E_V32QImode:\n     case E_V16HImode:\n+    case E_V16HFmode:\n     case E_V8SImode:\n     case E_V4DImode:\n       if (i == 256)\n@@ -16085,6 +16087,7 @@ emit_reduc_half (rtx dest, rtx src, int i)\n       break;\n     case E_V64QImode:\n     case E_V32HImode:\n+    case E_V32HFmode:\n       if (i < 64)\n \t{\n \t  d = gen_reg_rtx (V4TImode);"}, {"sha": "4559b0ce9c9d32cd837bce5799951008529977cf", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3540429be7ad1085af83600483908b621078fb6f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3540429be7ad1085af83600483908b621078fb6f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3540429be7ad1085af83600483908b621078fb6f", "patch": "@@ -3157,7 +3157,8 @@\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_mode_iterator REDUC_SSE_PLUS_MODE\n- [(V2DF \"TARGET_SSE\") (V4SF \"TARGET_SSE\")])\n+ [(V2DF \"TARGET_SSE\") (V4SF \"TARGET_SSE\")\n+  (V8HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")])\n \n (define_expand \"reduc_plus_scal_<mode>\"\n  [(plus:REDUC_SSE_PLUS_MODE\n@@ -3194,7 +3195,9 @@\n \n (define_mode_iterator REDUC_PLUS_MODE\n  [(V4DF \"TARGET_AVX\") (V8SF \"TARGET_AVX\")\n+  (V16HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n   (V8DF \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\")\n+  (V32HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n   (V32QI \"TARGET_AVX\") (V64QI \"TARGET_AVX512F\")])\n \n (define_expand \"reduc_plus_scal_<mode>\"\n@@ -3214,7 +3217,8 @@\n \n ;; Modes handled by reduc_sm{in,ax}* patterns.\n (define_mode_iterator REDUC_SSE_SMINMAX_MODE\n-  [(V4SF \"TARGET_SSE\") (V2DF \"TARGET_SSE\")\n+  [(V8HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V4SF \"TARGET_SSE\") (V2DF \"TARGET_SSE\")\n    (V4SI \"TARGET_SSE2\") (V8HI \"TARGET_SSE2\") (V16QI \"TARGET_SSE2\")\n    (V2DI \"TARGET_SSE4_2\")])\n \n@@ -3233,9 +3237,11 @@\n \n (define_mode_iterator REDUC_SMINMAX_MODE\n   [(V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")\n+   (V16HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")\n    (V8SF \"TARGET_AVX\") (V4DF \"TARGET_AVX\")\n    (V64QI \"TARGET_AVX512BW\")\n+   (V32HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n    (V32HI \"TARGET_AVX512BW\") (V16SI \"TARGET_AVX512F\")\n    (V8DI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\")\n    (V8DF \"TARGET_AVX512F\")])"}, {"sha": "593340e4afa8861a4751b75bf2b9a83d6d390bab", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-reduce-op-2.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3540429be7ad1085af83600483908b621078fb6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3540429be7ad1085af83600483908b621078fb6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-2.c?ref=3540429be7ad1085af83600483908b621078fb6f", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mprefer-vector-width=512 -fdump-tree-optimized\" } */\n+\n+/* { dg-final { scan-tree-dump-times \"\\.REDUC_PLUS\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.REDUC_MIN\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.REDUC_MAX\" 3 \"optimized\" } } */\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_add_128 (_Float16* p)\n+{\n+  _Float16 sum = 0;\n+  for (int i = 0; i != 8; i++)\n+    sum += p[i];\n+  return sum;\n+}\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_add_256 (_Float16* p)\n+{\n+  _Float16 sum = 0;\n+  for (int i = 0; i != 16; i++)\n+    sum += p[i];\n+  return sum;\n+}\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_add_512 (_Float16* p)\n+{\n+  _Float16 sum = 0;\n+  for (int i = 0; i != 32; i++)\n+    sum += p[i];\n+  return sum;\n+}\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_min_128 (_Float16* p)\n+{\n+  _Float16 sum = p[0];\n+  for (int i = 0; i != 8; i++)\n+    sum = sum > p[i] ? p[i] : sum;\n+  return sum;\n+}\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_min_256 (_Float16* p)\n+{\n+  _Float16 sum = p[0];\n+  for (int i = 0; i != 16; i++)\n+    sum = sum > p[i] ? p[i] : sum;\n+  return sum;\n+}\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_min_512 (_Float16* p)\n+{\n+  _Float16 sum = p[0];\n+  for (int i = 0; i != 32; i++)\n+    sum = sum > p[i] ? p[i] : sum;\n+  return sum;\n+}\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_max_128 (_Float16* p)\n+{\n+  _Float16 sum = p[0];\n+  for (int i = 0; i != 8; i++)\n+    sum = sum < p[i] ? p[i] : sum;\n+  return sum;\n+}\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_max_256 (_Float16* p)\n+{\n+  _Float16 sum = p[0];\n+  for (int i = 0; i != 16; i++)\n+    sum = sum < p[i] ? p[i] : sum;\n+  return sum;\n+}\n+\n+_Float16\n+__attribute__((noipa, target(\"avx512fp16,avx512vl\"), optimize(\"Ofast\")))\n+reduc_max_512 (_Float16* p)\n+{\n+  _Float16 sum = p[0];\n+  for (int i = 0; i != 32; i++)\n+    sum = sum < p[i] ? p[i] : sum;\n+  return sum;\n+}"}, {"sha": "9281a3be24878fe3634ad11e31b6f2bd2c1ae8c5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-reduce-op-3.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3540429be7ad1085af83600483908b621078fb6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3540429be7ad1085af83600483908b621078fb6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-reduce-op-3.c?ref=3540429be7ad1085af83600483908b621078fb6f", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512FP16\n+#define AVX512VL\n+\n+#include \"avx512f-helper.h\"\n+\n+#include \"avx512fp16-reduce-op-2.c\"\n+\n+void\n+test_256 (void)\n+{\n+  _Float16 a[32];\n+  int sign = 1;\n+  _Float16 res1 = 0, exp1;\n+  _Float16 res2 = 0, exp2;\n+  _Float16 res3 = 0, exp3;\n+\n+  for (int i = 0; i != 32; i++)\n+    {\n+      a[i] = sign * (4.0 * i);\n+      sign *= -1;\n+      if (i < 8)\n+\tres1 += a[i];\n+      if (i < 16)\n+\tres2 += a[i];\n+      res3 += a[i];\n+    }\n+\n+  exp1 = reduc_add_128 (a);\n+  exp2 = reduc_add_256 (a);\n+  exp3 = reduc_add_512 (a);\n+  if (exp1 != res1 || exp2 != res2 || exp3 != res3)\n+    abort();\n+}\n+\n+#define MAX(A, B) ((A) > (B) ? (A) : (B))\n+#define MIN(A, B) ((A) < (B) ? (A) : (B))\n+\n+void\n+test_128 ()\n+{\n+  _Float16 a[32];\n+  int sign = 1;\n+  _Float16 min_res1, min_exp1, max_res1, max_exp1;\n+  _Float16 min_res2, min_exp2, max_res2, max_exp2;\n+  _Float16 min_res3, min_exp3, max_res3, max_exp3;\n+\n+  for (int i = 0; i != 32; i++)\n+    {\n+      a[i] = sign * (4.9 * i * i - 8.3 * i + 14.8);\n+      sign *= -1;\n+    }\n+\n+  min_res1 = max_res1 = a[0];\n+  for (int i = 0 ; i != 8; i++)\n+    {\n+      min_res1 = MIN (min_res1, a[i]);\n+      max_res1 = MAX (max_res1, a[i]);\n+    }\n+\n+  min_res2 = min_res1;\n+  max_res2 = max_res1;\n+  for (int i = 8 ; i != 16; i++)\n+    {\n+      min_res2 = MIN (min_res2, a[i]);\n+      max_res2 = MAX (max_res2, a[i]);\n+    }\n+\n+  min_res3 = min_res2;\n+  max_res3 = max_res2;\n+  for (int i = 16 ; i != 32; i++)\n+    {\n+      min_res3 = MIN (min_res3, a[i]);\n+      max_res3 = MAX (max_res3, a[i]);\n+    }\n+\n+  min_exp1 = reduc_min_128 (a);\n+  min_exp2 = reduc_min_256 (a);\n+  min_exp3 = reduc_min_512 (a);\n+  max_exp1 = reduc_max_128 (a);\n+  max_exp2 = reduc_max_256 (a);\n+  max_exp3 = reduc_max_512 (a);\n+\n+  if (min_exp1 != min_res1 || min_exp2 != min_res2 || min_exp3 != min_res3\n+      || max_exp1 != max_res1 || max_exp2 != max_res2 || max_exp3 != max_res3)\n+    abort();\n+}"}]}