{"sha": "3447cae6cc1fde20eff4915ecba391ef7ac257bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ0N2NhZTZjYzFmZGUyMGVmZjQ5MTVlY2JhMzkxZWY3YWMyNTdiZg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-12-09T12:02:06Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-12-09T12:02:06Z"}, "message": "re PR target/49313 (Inefficient libgcc implementations for avr)\n\n\tPR target/49313\n\t* config/avr/t-avr (LIB1ASMFUNCS): Add _muldi3.\n\t* config/avr/lib1funcs.S (__muldi3): New function.\n\nFrom-SVN: r182160", "tree": {"sha": "59037e79b5c7d564db01219cc82a320071fc469e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59037e79b5c7d564db01219cc82a320071fc469e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3447cae6cc1fde20eff4915ecba391ef7ac257bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3447cae6cc1fde20eff4915ecba391ef7ac257bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3447cae6cc1fde20eff4915ecba391ef7ac257bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3447cae6cc1fde20eff4915ecba391ef7ac257bf/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7de39b780a79145af9fda7eb7569bffeeba6888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7de39b780a79145af9fda7eb7569bffeeba6888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7de39b780a79145af9fda7eb7569bffeeba6888"}], "stats": {"total": 250, "additions": 250, "deletions": 0}, "files": [{"sha": "55f033c3efba2310eeb2737db9315d6306360229", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3447cae6cc1fde20eff4915ecba391ef7ac257bf/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3447cae6cc1fde20eff4915ecba391ef7ac257bf/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3447cae6cc1fde20eff4915ecba391ef7ac257bf", "patch": "@@ -1,3 +1,9 @@\n+2011-12-09  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/49313\n+\t* config/avr/t-avr (LIB1ASMFUNCS): Add _muldi3.\n+\t* config/avr/lib1funcs.S (__muldi3): New function.\n+\n 2011-12-06  Andrew Pinski  <apinski@cavium.com>\n \n \t* crtstuff.c (__do_global_dtors_aux_fini_array_entry): Align to the"}, {"sha": "07490fbb20a42df14d717d6e970a4677aa40cae0", "filename": "libgcc/config/avr/lib1funcs.S", "status": "modified", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3447cae6cc1fde20eff4915ecba391ef7ac257bf/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3447cae6cc1fde20eff4915ecba391ef7ac257bf/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flib1funcs.S?ref=3447cae6cc1fde20eff4915ecba391ef7ac257bf", "patch": "@@ -464,6 +464,249 @@ ENDF __mulsi3\n #undef C3\n \n #endif /* __AVR_HAVE_MUL__ */\n+\n+/*******************************************************\n+       Multiplication 64 x 64\n+*******************************************************/\n+\n+#if defined (L_muldi3)\n+\n+;; A[] = A[] * B[]\n+\n+;; A[0..7]: In: Multiplicand\n+;; Out: Product\n+#define A0  18\n+#define A1  A0+1\n+#define A2  A0+2\n+#define A3  A0+3\n+#define A4  A0+4\n+#define A5  A0+5\n+#define A6  A0+6\n+#define A7  A0+7\n+\n+;; B[0..7]: In: Multiplier\n+#define B0  10\n+#define B1  B0+1\n+#define B2  B0+2\n+#define B3  B0+3\n+#define B4  B0+4\n+#define B5  B0+5\n+#define B6  B0+6\n+#define B7  B0+7\n+\n+#if defined (__AVR_HAVE_MUL__)\n+\n+;; Define C[] for convenience\n+;; Notice that parts of C[] overlap A[] respective B[]\n+#define C0  16\n+#define C1  C0+1\n+#define C2  20\n+#define C3  C2+1\n+#define C4  28\n+#define C5  C4+1\n+#define C6  C4+2\n+#define C7  C4+3\n+\n+;; A[]     *= B[]\n+;; R25:R18 *= R17:R10\n+;; Ordinary ABI-Function\n+\n+DEFUN __muldi3\n+    push    r29\n+    push    r28\n+    push    r17\n+    push    r16\n+\n+    ;; Counting in Words, we have to perform a 4 * 4 Multiplication\n+\n+    ;; 3 * 0  +  0 * 3\n+    mul  A7,B0  $             $  mov C7,r0\n+    mul  A0,B7  $             $  add C7,r0\n+    mul  A6,B1  $             $  add C7,r0\n+    mul  A6,B0  $  mov C6,r0  $  add C7,r1\n+    mul  B6,A1  $             $  add C7,r0\n+    mul  B6,A0  $  add C6,r0  $  adc C7,r1\n+\n+    ;; 1 * 2\n+    mul  A2,B4  $  add C6,r0  $  adc C7,r1\n+    mul  A3,B4  $             $  add C7,r0\n+    mul  A2,B5  $             $  add C7,r0\n+\n+    push    A5\n+    push    A4\n+    push    B1\n+    push    B0\n+    push    A3\n+    push    A2\n+\n+    ;; 0 * 0\n+    wmov    26, B0\n+    XCALL   __umulhisi3\n+    wmov    C0, 22\n+    wmov    C2, 24\n+\n+    ;; 0 * 2\n+    wmov    26, B4\n+    XCALL   __umulhisi3  $  wmov C4,22            $ add C6,24 $ adc C7,25\n+\n+    wmov    26, B2\n+    ;; 0 * 1\n+    rcall   __muldi3_6\n+\n+    pop     A0\n+    pop     A1\n+    ;; 1 * 1\n+    wmov    26, B2\n+    XCALL   __umulhisi3  $  add C4,22 $ adc C5,23 $ adc C6,24 $ adc C7,25\n+\n+    pop     r26\n+    pop     r27\n+    ;; 1 * 0\n+    rcall   __muldi3_6\n+\n+    pop     A0\n+    pop     A1\n+    ;; 2 * 0\n+    XCALL   __umulhisi3  $  add C4,22 $ adc C5,23 $ adc C6,24 $ adc C7,25\n+\n+    ;; 2 * 1\n+    wmov    26, B2\n+    XCALL   __umulhisi3  $            $           $ add C6,22 $ adc C7,23\n+\n+    ;; A[] = C[]\n+    wmov    A0, C0\n+    ;; A2 = C2 already\n+    wmov    A4, C4\n+    wmov    A6, C6\n+\n+    clr     __zero_reg__\n+    pop     r16\n+    pop     r17\n+    pop     r28\n+    pop     r29\n+    ret\n+\n+__muldi3_6:\n+    XCALL   __umulhisi3\n+    add     C2, 22\n+    adc     C3, 23\n+    adc     C4, 24\n+    adc     C5, 25\n+    brcc    0f\n+    adiw    C6, 1\n+0:  ret\n+ENDF __muldi3\n+\n+#undef C7\n+#undef C6\n+#undef C5\n+#undef C4\n+#undef C3\n+#undef C2\n+#undef C1\n+#undef C0\n+\n+#else /* !HAVE_MUL */\n+\n+#define C0  26\n+#define C1  C0+1\n+#define C2  C0+2\n+#define C3  C0+3\n+#define C4  C0+4\n+#define C5  C0+5\n+#define C6  0\n+#define C7  C6+1\n+\n+#define Loop 9\n+\n+;; A[]     *= B[]\n+;; R25:R18 *= R17:R10\n+;; Ordinary ABI-Function\n+\n+DEFUN __muldi3\n+    push    r29\n+    push    r28\n+    push    Loop\n+\n+    ldi     C0, 64\n+    mov     Loop, C0\n+\n+    ;; C[] = 0\n+    clr     __tmp_reg__\n+    wmov    C0, 0\n+    wmov    C2, 0\n+    wmov    C4, 0\n+\n+0:  ;; Rotate B[] right by 1 and set Carry to the N-th Bit of B[]\n+    ;; where N = 64 - Loop.\n+    ;; Notice that B[] = B[] >>> 64 so after this Routine has finished,\n+    ;; B[] will have its initial Value again.\n+    LSR  B7     $  ror  B6     $  ror  B5     $  ror  B4\n+    ror  B3     $  ror  B2     $  ror  B1     $  ror  B0\n+\n+    ;; If the N-th Bit of B[] was set then...\n+    brcc    1f\n+    ;; ...finish Rotation...\n+    ori     B7, 1 << 7\n+\n+    ;; ...and add A[] * 2^N to the Result C[]\n+    ADD  C0,A0  $  adc  C1,A1  $  adc  C2,A2  $  adc  C3,A3\n+    adc  C4,A4  $  adc  C5,A5  $  adc  C6,A6  $  adc  C7,A7\n+\n+1:  ;; Multiply A[] by 2\n+    LSL  A0     $  rol  A1     $  rol  A2     $  rol  A3\n+    rol  A4     $  rol  A5     $  rol  A6     $  rol  A7\n+\n+    dec     Loop\n+    brne    0b\n+\n+    ;; We expanded the Result in C[]\n+    ;; Copy Result to the Return Register A[]\n+    wmov    A0, C0\n+    wmov    A2, C2\n+    wmov    A4, C4\n+    wmov    A6, C6\n+\n+    clr     __zero_reg__\n+    pop     Loop\n+    pop     r28\n+    pop     r29\n+    ret\n+ENDF __muldi3\n+\n+#undef Loop\n+\n+#undef C7\n+#undef C6\n+#undef C5\n+#undef C4\n+#undef C3\n+#undef C2\n+#undef C1\n+#undef C0\n+\n+#endif /* HAVE_MUL */\n+\n+#undef B7\n+#undef B6\n+#undef B5\n+#undef B4\n+#undef B3\n+#undef B2\n+#undef B1\n+#undef B0\n+\n+#undef A7\n+#undef A6\n+#undef A5\n+#undef A4\n+#undef A3\n+#undef A2\n+#undef A1\n+#undef A0\n+\n+#endif /* L_muldi3 */\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \t\n \f"}, {"sha": "c6806dc0ece8c6752379477138a5372ba7a9bcbd", "filename": "libgcc/config/avr/t-avr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3447cae6cc1fde20eff4915ecba391ef7ac257bf/libgcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3447cae6cc1fde20eff4915ecba391ef7ac257bf/libgcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avr?ref=3447cae6cc1fde20eff4915ecba391ef7ac257bf", "patch": "@@ -16,6 +16,7 @@ LIB1ASMFUNCS = \\\n \t_udivmodsi4 \\\n \t_divmodsi4 \\\n \t_divdi3 _udivdi3 \\\n+\t_muldi3 \\\n \t_udivmod64 \\\n \t_negdi2 \\\n \t_prologue \\"}]}