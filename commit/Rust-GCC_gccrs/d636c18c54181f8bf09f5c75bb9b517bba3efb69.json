{"sha": "d636c18c54181f8bf09f5c75bb9b517bba3efb69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzNmMxOGM1NDE4MWY4YmYwOWY1Yzc1YmI5YjUxN2JiYTNlZmI2OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-04-16T20:23:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-16T20:23:02Z"}, "message": "rtl.h (enum insn_note): New enumeration.\n\n        * rtl.h (enum insn_note): New enumeration.  Subsume\n        NOTE_INSN_DELETED and friends.\n        (GET_NOTE_INSN_NAME): Adjust index by NOTE_INSN_BIAS.\n        * rtl.c (note_insn_name): Tweek string order.\n\nFrom-SVN: r33187", "tree": {"sha": "0c8960d985cd1713ea423065ffaec250373cc48f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c8960d985cd1713ea423065ffaec250373cc48f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d636c18c54181f8bf09f5c75bb9b517bba3efb69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d636c18c54181f8bf09f5c75bb9b517bba3efb69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d636c18c54181f8bf09f5c75bb9b517bba3efb69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d636c18c54181f8bf09f5c75bb9b517bba3efb69/comments", "author": null, "committer": null, "parents": [{"sha": "aa95639ea8e35220e659f6531ffd11990845373d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa95639ea8e35220e659f6531ffd11990845373d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa95639ea8e35220e659f6531ffd11990845373d"}], "stats": {"total": 134, "additions": 84, "deletions": 50}, "files": [{"sha": "c0dc9205c1505692735bc7fc8e7beb15486643ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636c18c54181f8bf09f5c75bb9b517bba3efb69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636c18c54181f8bf09f5c75bb9b517bba3efb69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d636c18c54181f8bf09f5c75bb9b517bba3efb69", "patch": "@@ -1,3 +1,10 @@\n+2000-04-16  Richard Henderson  <rth@cygnus.com>\n+\n+\t* rtl.h (enum insn_note): New enumeration.  Subsume\n+\tNOTE_INSN_DELETED and friends.\n+\t(GET_NOTE_INSN_NAME): Adjust index by NOTE_INSN_BIAS.\n+\t* rtl.c (note_insn_name): Tweek string order.\n+\n 2000-04-15  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplex.c (_cpp_read_and_prescan): Enlarge len by setting it"}, {"sha": "8adbd52d8b86da9416f17169ca55f3b13a3de260", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636c18c54181f8bf09f5c75bb9b517bba3efb69/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636c18c54181f8bf09f5c75bb9b517bba3efb69/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=d636c18c54181f8bf09f5c75bb9b517bba3efb69", "patch": "@@ -235,13 +235,13 @@ const char rtx_class[] = {\n \n /* Names for kinds of NOTEs and REG_NOTEs.  */\n \n-const char * const note_insn_name[] =\n+const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS] =\n {\n-  0, \"NOTE_INSN_DELETED\",\n+  \"\", \"NOTE_INSN_DELETED\",\n   \"NOTE_INSN_BLOCK_BEG\", \"NOTE_INSN_BLOCK_END\",\n   \"NOTE_INSN_LOOP_BEG\", \"NOTE_INSN_LOOP_END\",\n-  \"NOTE_INSN_FUNCTION_END\", \"NOTE_INSN_SETJMP\",\n   \"NOTE_INSN_LOOP_CONT\", \"NOTE_INSN_LOOP_VTOP\",\n+  \"NOTE_INSN_FUNCTION_END\", \"NOTE_INSN_SETJMP\",\n   \"NOTE_INSN_PROLOGUE_END\", \"NOTE_INSN_EPILOGUE_BEG\",\n   \"NOTE_INSN_DELETED_LABEL\", \"NOTE_INSN_FUNCTION_BEG\",\n   \"NOTE_INSN_EH_REGION_BEG\", \"NOTE_INSN_EH_REGION_END\","}, {"sha": "9d655a2cb88e7cf6cad0579af74f8ba7ebfdacc0", "filename": "gcc/rtl.h", "status": "modified", "additions": 74, "deletions": 47, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636c18c54181f8bf09f5c75bb9b517bba3efb69/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636c18c54181f8bf09f5c75bb9b517bba3efb69/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d636c18c54181f8bf09f5c75bb9b517bba3efb69", "patch": "@@ -595,56 +595,83 @@ extern const char * const reg_note_name[];\n    should add a new value here, don't forget to change the\n    note_insn_name array in rtl.c.  */\n \n-/* This note is used to get rid of an insn\n-   when it isn't safe to patch the insn out of the chain.  */\n-#define NOTE_INSN_DELETED -1\n-#define NOTE_INSN_BLOCK_BEG -2\n-#define NOTE_INSN_BLOCK_END -3\n-#define NOTE_INSN_LOOP_BEG -4\n-#define NOTE_INSN_LOOP_END -5\n-/* This kind of note is generated at the end of the function body,\n-   just before the return insn or return label.\n-   In an optimizing compilation it is deleted by the first jump optimization,\n-   after enabling that optimizer to determine whether control can fall\n-   off the end of the function body without a return statement.  */\n-#define NOTE_INSN_FUNCTION_END -6\n-/* This kind of note is generated just after each call to `setjmp', et al.  */\n-#define NOTE_INSN_SETJMP -7\n-/* Generated at the place in a loop that `continue' jumps to.  */\n-#define NOTE_INSN_LOOP_CONT -8\n-/* Generated at the start of a duplicated exit test.  */\n-#define NOTE_INSN_LOOP_VTOP -9\n-/* This marks the point immediately after the last prologue insn.  */\n-#define NOTE_INSN_PROLOGUE_END -10\n-/* This marks the point immediately prior to the first epilogue insn.  */\n-#define NOTE_INSN_EPILOGUE_BEG -11\n-/* Generated in place of user-declared labels when they are deleted.  */\n-#define NOTE_INSN_DELETED_LABEL -12\n-/* This note indicates the start of the real body of the function,\n-   i.e. the point just after all of the parms have been moved into\n-   their homes, etc.  */\n-#define NOTE_INSN_FUNCTION_BEG -13\n-/* These note where exception handling regions begin and end.  */\n-#define NOTE_INSN_EH_REGION_BEG -14\n-#define NOTE_INSN_EH_REGION_END -15\n-/* Generated whenever a duplicate line number note is output.  For example,\n-   one is output after the end of an inline function, in order to prevent\n-   the line containing the inline call from being counted twice in gcov. */\n-#define NOTE_REPEATED_LINE_NUMBER -16\n-\n-/* Start/end of a live range region, where pseudos allocated on the stack can\n-   be allocated to temporary registers.  */\n-#define NOTE_INSN_RANGE_START -17\n-#define NOTE_INSN_RANGE_END -18\n-/* Record which registers are currently live.  */\n-#define NOTE_INSN_LIVE -19\n-/* Record the struct for the following basic block.  */\n-#define NOTE_INSN_BASIC_BLOCK -20\n+enum insn_note\n+{\n+  /* Keep all of these numbers negative.  Adjust as needed.  */\n+  NOTE_INSN_BIAS = -100,\n+\n+  /* This note is used to get rid of an insn\n+     when it isn't safe to patch the insn out of the chain.  */\n+  NOTE_INSN_DELETED,\n+\n+  /* These are used to mark the beginning and end of a lexical block.\n+     See NOTE_BLOCK, identify_blocks and reorder_blocks.  */\n+  NOTE_INSN_BLOCK_BEG,\n+  NOTE_INSN_BLOCK_END,\n+\n+  /* These mark the extremes of a loop.  */\n+  NOTE_INSN_LOOP_BEG,\n+  NOTE_INSN_LOOP_END,\n+\n+  /* Generated at the place in a loop that `continue' jumps to.  */\n+  NOTE_INSN_LOOP_CONT,\n+  /* Generated at the start of a duplicated exit test.  */\n+  NOTE_INSN_LOOP_VTOP,\n+\n+  /* This kind of note is generated at the end of the function body,\n+     just before the return insn or return label.  In an optimizing\n+     compilation it is deleted by the first jump optimization, after\n+     enabling that optimizer to determine whether control can fall\n+     off the end of the function body without a return statement.  */\n+  NOTE_INSN_FUNCTION_END,\n+\n+  /* This kind of note is generated just after each call to `setjmp',\n+     and similar functions that can return twice.  */\n+  NOTE_INSN_SETJMP,\n+\n+  /* This marks the point immediately after the last prologue insn.  */\n+  NOTE_INSN_PROLOGUE_END,\n+\n+  /* This marks the point immediately prior to the first epilogue insn.  */\n+  NOTE_INSN_EPILOGUE_BEG,\n+\n+  /* Generated in place of user-declared labels when they are deleted.  */\n+  NOTE_INSN_DELETED_LABEL,\n+\n+  /* This note indicates the start of the real body of the function,\n+     i.e. the point just after all of the parms have been moved into\n+     their homes, etc.  */\n+  NOTE_INSN_FUNCTION_BEG,\n+\n+  /* These note where exception handling regions begin and end. \n+     Uses NOTE_EH_HANDLER to identify the region in question.  */\n+  NOTE_INSN_EH_REGION_BEG,\n+  NOTE_INSN_EH_REGION_END,\n+\n+  /* Generated whenever a duplicate line number note is output.  For example,\n+     one is output after the end of an inline function, in order to prevent\n+     the line containing the inline call from being counted twice in gcov. */\n+  NOTE_REPEATED_LINE_NUMBER,\n+\n+  /* Start/end of a live range region, where pseudos allocated on the stack\n+     can be allocated to temporary registers.  Uses NOTE_RANGE_INFO.  */\n+  NOTE_INSN_RANGE_START,\n+  NOTE_INSN_RANGE_END,\n+\n+  /* Record which registers are currently live.  Uses NOTE_LIVE_INFO.  */\n+  NOTE_INSN_LIVE,\n+\n+  /* Record the struct for the following basic block.  Uses NOTE_BASIC_BLOCK. */\n+  NOTE_INSN_BASIC_BLOCK,\n+\n+  NOTE_INSN_MAX\n+};\n \n /* Names for NOTE insn's other than line numbers.  */\n \n-extern const char * const note_insn_name[];\n-#define GET_NOTE_INSN_NAME(NOTE_CODE) (note_insn_name[-(NOTE_CODE)])\n+extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n+#define GET_NOTE_INSN_NAME(NOTE_CODE) \\\n+  (note_insn_name[(NOTE_CODE) - NOTE_INSN_BIAS])\n \n /* The name of a label, in case it corresponds to an explicit label\n    in the input source code.  */"}]}