{"sha": "2f9489a1009d98b448d216c39493b6b2d454aa20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY5NDg5YTEwMDlkOThiNDQ4ZDIxNmMzOTQ5M2I2YjJkNDU0YWEyMA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-06-15T13:43:11Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-26T19:31:16Z"}, "message": "rs6000: Add miscellaneous builtins\n\n2021-06-15  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin-new.def: Add ieee128-hw, dfp,\n\tcrypto, and htm stanzas.", "tree": {"sha": "d24e95a78c37cfa619c47d087884945a7e998e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d24e95a78c37cfa619c47d087884945a7e998e66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f9489a1009d98b448d216c39493b6b2d454aa20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9489a1009d98b448d216c39493b6b2d454aa20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f9489a1009d98b448d216c39493b6b2d454aa20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9489a1009d98b448d216c39493b6b2d454aa20/comments", "author": null, "committer": null, "parents": [{"sha": "344951b639a5f6f41c21c6cad04b0580c58aa12e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344951b639a5f6f41c21c6cad04b0580c58aa12e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344951b639a5f6f41c21c6cad04b0580c58aa12e"}], "stats": {"total": 215, "additions": 215, "deletions": 0}, "files": [{"sha": "7bfe9bca298cbbf0a76ab424a465e00831cc0a16", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9489a1009d98b448d216c39493b6b2d454aa20/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9489a1009d98b448d216c39493b6b2d454aa20/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=2f9489a1009d98b448d216c39493b6b2d454aa20", "patch": "@@ -2808,6 +2808,221 @@\n     XL_LEN_R xl_len_r {}\n \n \n+; Builtins requiring hardware support for IEEE-128 floating-point.\n+[ieee128-hw]\n+  fpmath _Float128 __builtin_addf128_round_to_odd (_Float128, _Float128);\n+    ADDF128_ODD addkf3_odd {}\n+\n+  fpmath _Float128 __builtin_divf128_round_to_odd (_Float128, _Float128);\n+    DIVF128_ODD divkf3_odd {}\n+\n+  fpmath _Float128 __builtin_fmaf128_round_to_odd (_Float128, _Float128, _Float128);\n+    FMAF128_ODD fmakf4_odd {}\n+\n+  fpmath _Float128 __builtin_mulf128_round_to_odd (_Float128, _Float128);\n+    MULF128_ODD mulkf3_odd {}\n+\n+  const signed int __builtin_vsx_scalar_cmp_exp_qp_eq (_Float128, _Float128);\n+    VSCEQPEQ xscmpexpqp_eq_kf {}\n+\n+  const signed int __builtin_vsx_scalar_cmp_exp_qp_gt (_Float128, _Float128);\n+    VSCEQPGT xscmpexpqp_gt_kf {}\n+\n+  const signed int __builtin_vsx_scalar_cmp_exp_qp_lt (_Float128, _Float128);\n+    VSCEQPLT xscmpexpqp_lt_kf {}\n+\n+  const signed int __builtin_vsx_scalar_cmp_exp_qp_unordered (_Float128, _Float128);\n+    VSCEQPUO xscmpexpqp_unordered_kf {}\n+\n+  fpmath _Float128 __builtin_sqrtf128_round_to_odd (_Float128);\n+    SQRTF128_ODD sqrtkf2_odd {}\n+\n+  fpmath _Float128 __builtin_subf128_round_to_odd (_Float128, _Float128);\n+    SUBF128_ODD subkf3_odd {}\n+\n+  fpmath double __builtin_truncf128_round_to_odd (_Float128);\n+    TRUNCF128_ODD trunckfdf2_odd {}\n+\n+  const signed long long __builtin_vsx_scalar_extract_expq (_Float128);\n+    VSEEQP xsxexpqp_kf {}\n+\n+  const signed __int128 __builtin_vsx_scalar_extract_sigq (_Float128);\n+    VSESQP xsxsigqp_kf {}\n+\n+  const _Float128 __builtin_vsx_scalar_insert_exp_q (unsigned __int128, unsigned long long);\n+    VSIEQP xsiexpqp_kf {}\n+\n+  const _Float128 __builtin_vsx_scalar_insert_exp_qp (_Float128, unsigned long long);\n+    VSIEQPF xsiexpqpf_kf {}\n+\n+  const signed int __builtin_vsx_scalar_test_data_class_qp (_Float128, const int<7>);\n+    VSTDCQP xststdcqp_kf {}\n+\n+  const signed int __builtin_vsx_scalar_test_neg_qp (_Float128);\n+    VSTDCNQP xststdcnegqp_kf {}\n+\n+\n+\n+; Decimal floating-point builtins.\n+[dfp]\n+  const _Decimal64 __builtin_ddedpd (const int<2>, _Decimal64);\n+    DDEDPD dfp_ddedpd_dd {}\n+\n+  const _Decimal128 __builtin_ddedpdq (const int<2>, _Decimal128);\n+    DDEDPDQ dfp_ddedpd_td {}\n+\n+  const _Decimal64 __builtin_denbcd (const int<1>, _Decimal64);\n+    DENBCD dfp_denbcd_dd {}\n+\n+  const _Decimal128 __builtin_denbcdq (const int<1>, _Decimal128);\n+    DENBCDQ dfp_denbcd_td {}\n+\n+  const _Decimal128 __builtin_denb2dfp_v16qi (vsc);\n+    DENB2DFP_V16QI dfp_denbcd_v16qi {}\n+\n+  const _Decimal64 __builtin_diex (signed long long, _Decimal64);\n+    DIEX dfp_diex_dd {}\n+\n+  const _Decimal128 __builtin_diexq (signed long long, _Decimal128);\n+    DIEXQ dfp_diex_td {}\n+\n+  const _Decimal64 __builtin_dscli (_Decimal64, const int<6>);\n+    DSCLI dfp_dscli_dd {}\n+\n+  const _Decimal128 __builtin_dscliq (_Decimal128, const int<6>);\n+    DSCLIQ dfp_dscli_td {}\n+\n+  const _Decimal64 __builtin_dscri (_Decimal64, const int<6>);\n+    DSCRI dfp_dscri_dd {}\n+\n+  const _Decimal128 __builtin_dscriq (_Decimal128, const int<6>);\n+    DSCRIQ dfp_dscri_td {}\n+\n+  const signed long long __builtin_dxex (_Decimal64);\n+    DXEX dfp_dxex_dd {}\n+\n+  const signed long long __builtin_dxexq (_Decimal128);\n+    DXEXQ dfp_dxex_td {}\n+\n+  const _Decimal128 __builtin_pack_dec128 (unsigned long long, unsigned long long);\n+    PACK_TD packtd {}\n+\n+  void __builtin_set_fpscr_drn (const int[0,7]);\n+    SET_FPSCR_DRN rs6000_set_fpscr_drn {}\n+\n+  const unsigned long __builtin_unpack_dec128 (_Decimal128, const int<1>);\n+    UNPACK_TD unpacktd {}\n+\n+\n+[crypto]\n+  const vull __builtin_crypto_vcipher (vull, vull);\n+    VCIPHER crypto_vcipher_v2di {}\n+\n+  const vuc __builtin_crypto_vcipher_be (vuc, vuc);\n+    VCIPHER_BE crypto_vcipher_v16qi {}\n+\n+  const vull __builtin_crypto_vcipherlast (vull, vull);\n+    VCIPHERLAST crypto_vcipherlast_v2di {}\n+\n+  const vuc __builtin_crypto_vcipherlast_be (vuc, vuc);\n+    VCIPHERLAST_BE crypto_vcipherlast_v16qi {}\n+\n+  const vull __builtin_crypto_vncipher (vull, vull);\n+    VNCIPHER crypto_vncipher_v2di {}\n+\n+  const vuc __builtin_crypto_vncipher_be (vuc, vuc);\n+    VNCIPHER_BE crypto_vncipher_v16qi {}\n+\n+  const vull __builtin_crypto_vncipherlast (vull, vull);\n+    VNCIPHERLAST crypto_vncipherlast_v2di {}\n+\n+  const vuc __builtin_crypto_vncipherlast_be (vuc, vuc);\n+    VNCIPHERLAST_BE crypto_vncipherlast_v16qi {}\n+\n+  const vull __builtin_crypto_vsbox (vull);\n+    VSBOX crypto_vsbox_v2di {}\n+\n+  const vuc __builtin_crypto_vsbox_be (vuc);\n+    VSBOX_BE crypto_vsbox_v16qi {}\n+\n+  const vull __builtin_crypto_vshasigmad (vull, const int<1>, const int<4>);\n+    VSHASIGMAD crypto_vshasigmad {}\n+\n+  const vui __builtin_crypto_vshasigmaw (vui, const int<1>, const int<4>);\n+    VSHASIGMAW crypto_vshasigmaw {}\n+\n+\n+[htm]\n+  unsigned long long __builtin_get_texasr ();\n+    GET_TEXASR nothing {htm,htmspr}\n+\n+  unsigned long long __builtin_get_texasru ();\n+    GET_TEXASRU nothing {htm,htmspr}\n+\n+  unsigned long long __builtin_get_tfhar ();\n+    GET_TFHAR nothing {htm,htmspr}\n+\n+  unsigned long long __builtin_get_tfiar ();\n+    GET_TFIAR nothing {htm,htmspr}\n+\n+  void __builtin_set_texasr (unsigned long long);\n+    SET_TEXASR nothing {htm,htmspr}\n+\n+  void __builtin_set_texasru (unsigned long long);\n+    SET_TEXASRU nothing {htm,htmspr}\n+\n+  void __builtin_set_tfhar (unsigned long long);\n+    SET_TFHAR nothing {htm,htmspr}\n+\n+  void __builtin_set_tfiar (unsigned long long);\n+    SET_TFIAR nothing {htm,htmspr}\n+\n+  unsigned int __builtin_tabort (unsigned int);\n+    TABORT tabort {htm,htmcr}\n+\n+  unsigned int __builtin_tabortdc (unsigned long long, unsigned long long, unsigned long long);\n+    TABORTDC tabortdc {htm,htmcr}\n+\n+  unsigned int __builtin_tabortdci (unsigned long long, unsigned long long, unsigned long long);\n+    TABORTDCI tabortdci {htm,htmcr}\n+\n+  unsigned int __builtin_tabortwc (unsigned int, unsigned int, unsigned int);\n+    TABORTWC tabortwc {htm,htmcr}\n+\n+  unsigned int __builtin_tabortwci (unsigned int, unsigned int, unsigned int);\n+    TABORTWCI tabortwci {htm,htmcr}\n+\n+  unsigned int __builtin_tbegin (unsigned int);\n+    TBEGIN tbegin {htm,htmcr}\n+\n+  unsigned int __builtin_tcheck ();\n+    TCHECK tcheck {htm,htmcr}\n+\n+  unsigned int __builtin_tend (unsigned int);\n+    TEND tend {htm,htmcr}\n+\n+  unsigned int __builtin_tendall ();\n+    TENDALL tend {htm,htmcr}\n+\n+  unsigned int __builtin_trechkpt ();\n+    TRECHKPT trechkpt {htm,htmcr}\n+\n+  unsigned int __builtin_treclaim (unsigned int);\n+    TRECLAIM treclaim {htm,htmcr}\n+\n+  unsigned int __builtin_tresume ();\n+    TRESUME tsr {htm,htmcr}\n+\n+  unsigned int __builtin_tsr (unsigned int);\n+    TSR tsr {htm,htmcr}\n+\n+  unsigned int __builtin_tsuspend ();\n+    TSUSPEND tsr {htm,htmcr}\n+\n+  unsigned int __builtin_ttest ();\n+    TTEST ttest {htm,htmcr}\n+\n+\n [power10]\n   const vbq __builtin_altivec_cmpge_1ti (vsq, vsq);\n     CMPGE_1TI vector_nltv1ti {}"}]}