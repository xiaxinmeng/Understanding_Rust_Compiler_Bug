{"sha": "0d5db1dd65b45286082f82f600ca0a3e6e43e06e", "node_id": "C_kwDOANBUbNoAKDBkNWRiMWRkNjViNDUyODYwODJmODJmNjAwY2EwYTNlNmU0M2UwNmU", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-12-06T07:50:08Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-12-09T15:16:15Z"}, "message": "Darwin, PCH: Rework hooks for relocatable implementation [PR71934].\n\nNow we have a relocatable PCH implementation we can revise the\nhooks that find and use the mmapped memory.  Specifically, this\nremoves the extra checking and diagnostic output for cases that\nwere likely to fail in a non-relocatable scenario.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/ChangeLog:\n\n\tPR pch/71934\n\t* config/host-darwin.c (SAFE_ALLOC_SIZE): Remove.\n\t(darwin_gt_pch_get_address): Rework for relocatable PCH.\n\t(darwin_gt_pch_use_address): Likewise.", "tree": {"sha": "5f3f29e69b9c7ca83847e025ffa9eb90d5a711b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f3f29e69b9c7ca83847e025ffa9eb90d5a711b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d5db1dd65b45286082f82f600ca0a3e6e43e06e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5db1dd65b45286082f82f600ca0a3e6e43e06e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5db1dd65b45286082f82f600ca0a3e6e43e06e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5db1dd65b45286082f82f600ca0a3e6e43e06e/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf15cd665e74791aae87e7e151a0cf0c4cb54684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf15cd665e74791aae87e7e151a0cf0c4cb54684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf15cd665e74791aae87e7e151a0cf0c4cb54684"}], "stats": {"total": 85, "additions": 36, "deletions": 49}, "files": [{"sha": "e5657fb6a28ff6860f3feb8d6d6c3cb4032208a4", "filename": "gcc/config/host-darwin.c", "status": "modified", "additions": 36, "deletions": 49, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5db1dd65b45286082f82f600ca0a3e6e43e06e/gcc%2Fconfig%2Fhost-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5db1dd65b45286082f82f600ca0a3e6e43e06e/gcc%2Fconfig%2Fhost-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fhost-darwin.c?ref=0d5db1dd65b45286082f82f600ca0a3e6e43e06e", "patch": "@@ -33,29 +33,27 @@\n    The spaces should all have 512Mb available c.f. PCH files for large\n    C++ or Objective-C in the range of 150Mb for 64b hosts.\n \n-   We also try to steer clear of places already used for sanitizers.  */\n+   We also try to steer clear of places already used for sanitizers.\n+\n+   If the allocation fails at the 'ideal' address, we go with what the\n+   kernel provides (there is more likelihood that we will need to relocate\n+   on read in).  */\n \n #define PAGE_SZ 4096\n #if defined(__x86_64) && defined(__LP64__)\n # define TRY_EMPTY_VM_SPACE\t0x180000000000ULL\n-# define SAFE_ALLOC_SIZE\t0x20000000\n #elif defined(__x86_64)\n # define TRY_EMPTY_VM_SPACE\t0x00006fe00000ULL\n-# define SAFE_ALLOC_SIZE\t0x20000000\n #elif defined(__i386)\n # define TRY_EMPTY_VM_SPACE\t0x00006fe00000ULL\n-# define SAFE_ALLOC_SIZE\t0x20000000\n #elif defined(__POWERPC__) && defined(__LP64__)\n # define TRY_EMPTY_VM_SPACE\t0x180000000000ULL\n-# define SAFE_ALLOC_SIZE\t0x20000000\n #elif defined(__POWERPC__)\n # define TRY_EMPTY_VM_SPACE\t0x00006fe00000ULL\n-# define SAFE_ALLOC_SIZE\t0x20000000\n #elif defined(__aarch64__)\n # undef PAGE_SZ\n # define PAGE_SZ 16384\n # define TRY_EMPTY_VM_SPACE\t0x180000000000ULL\n-# define SAFE_ALLOC_SIZE\t0x20000000\n #else\n # error \"unknown Darwin target\"\n #endif\n@@ -67,13 +65,7 @@\n void *\n darwin_gt_pch_get_address (size_t sz, int fd)\n {\n-  if (sz > SAFE_ALLOC_SIZE)\n-    {\n-      error (\"PCH memory request exceeds the available space\");\n-      return NULL;\n-    }\n-\n-  /* Now try with the constraint that we really want this address...  */\n+  /* First try with the constraint that we really want this address...  */\n   void *addr = mmap ((void *)TRY_EMPTY_VM_SPACE, sz, PROT_READ | PROT_WRITE,\n \t\t     MAP_PRIVATE | MAP_FIXED, fd, 0);\n \n@@ -86,47 +78,36 @@ darwin_gt_pch_get_address (size_t sz, int fd)\n   if (addr == (void *) TRY_EMPTY_VM_SPACE)\n     return addr;\n \n-  warning (OPT_Winvalid_pch, \"PCH memory [fixed at %p] is not available %m\",\n-\t   (void *) TRY_EMPTY_VM_SPACE);\n-\n   /* OK try to find a space without the constraint.  */\n   addr = mmap ((void *) TRY_EMPTY_VM_SPACE, sz, PROT_READ | PROT_WRITE,\n \t       MAP_PRIVATE, fd, 0);\n \n-  /* If we failed this time, that means there is *no* large enough free\n-     space.  */\n-  if (addr == (void *) MAP_FAILED)\n+  /* We return whatever the kernel gave us.  */\n+  if (addr != (void *) MAP_FAILED)\n     {\n-      error (\"no memory is available for PCH : %m\");\n-      return NULL;\n+      /* Unmap the area before returning.  */\n+      munmap (addr, sz);\n+      return addr;\n     }\n \n-  /* Unmap the area before returning.  */\n-  munmap (addr, sz);\n-\n-  /* If we got the exact area we requested, then that's great.  */\n-  if (TRY_EMPTY_VM_SPACE && addr == (void *) TRY_EMPTY_VM_SPACE)\n-    return addr;\n-\n-  warning (OPT_Winvalid_pch, \"PCH memory at %p is not available\",\n-\t  (void *) TRY_EMPTY_VM_SPACE);\n-\n-  /* Otherwise, we need to try again but put some buffer space first.  */\n-  size_t buffer_size = 32 * 1024 * 1024;\n+  /* Otherwise, try again but put some arbitrary buffer space first.  */\n+  size_t buffer_size = 64 * 1024 * 1024;\n   void *buffer = mmap (0, buffer_size, PROT_NONE,\n \t\t       MAP_PRIVATE | MAP_ANON, -1, 0);\n   addr = mmap ((void *)TRY_EMPTY_VM_SPACE, sz, PROT_READ | PROT_WRITE,\n \t\tMAP_PRIVATE, fd, 0);\n+\n   if (buffer != (void *) MAP_FAILED)\n     munmap (buffer, buffer_size);\n \n+  /* If we failed this time, that means there is *no* large enough free\n+     space.  */\n   if (addr == (void *) MAP_FAILED)\n     {\n       error (\"PCH memory not available %m\");\n       return NULL;\n     }\n \n-  warning (OPT_Winvalid_pch, \"PCH memory at %p used instead\", addr);\n   munmap (addr, sz);\n   return addr;\n }\n@@ -147,9 +128,6 @@ darwin_gt_pch_use_address (void *&addr, size_t sz, int fd, size_t off)\n     return -1;\n \n   gcc_checking_assert (!(off % PAGE_SZ));\n-  if (addr != (void *) TRY_EMPTY_VM_SPACE)\n-    warning (OPT_Winvalid_pch, \"PCH at %p does not use the default position\",\n-\t     addr);\n \n   /* Try to map the file with MAP_PRIVATE and FIXED.  */\n   mapped_addr = mmap (addr, sz, PROT_READ | PROT_WRITE,\n@@ -159,25 +137,34 @@ darwin_gt_pch_use_address (void *&addr, size_t sz, int fd, size_t off)\n   if (mapped_addr == addr)\n     return 1;\n \n-  warning (OPT_Winvalid_pch, \"PCH private mmap of written position (%p)\"\n-\t   \" failed [errno %d] %m\", addr, errno);\n-\n+  /* In theory, the only alternative to success for MAP_FIXED should be FAILED\n+     however, there are some buggy earlier implementations that could return\n+     an address.  */\n   if (mapped_addr != (void *) MAP_FAILED)\n     munmap (mapped_addr, sz);\n \n-  /* Try to make an anonymous private mmap at the desired location.  */\n+  /* Try to map the file with MAP_PRIVATE but let the kernel move it.  */\n   mapped_addr = mmap (addr, sz, PROT_READ | PROT_WRITE,\n-\t\t      MAP_PRIVATE | MAP_ANON | MAP_FIXED, -1, (off_t)0);\n+\t\t      MAP_PRIVATE, fd, (off_t) off);\n \n-  if (mapped_addr != addr)\n+  /* Hopefully, we succeed.  */\n+  if (mapped_addr != (void *) MAP_FAILED)\n     {\n-      warning (OPT_Winvalid_pch, \"PCH anon mmap at written position (%p)\"\n-\t       \" failed [errno %d] %m\", addr, errno);\n-      if (mapped_addr != (void *) MAP_FAILED)\n-\t    munmap (mapped_addr, sz);\n-      return -1;\n+      addr = mapped_addr;\n+      return 1;\n     }\n \n+  /* Try to make an anonymous private mmap at the desired location in case\n+     the problem is in mapping the file.  */\n+  mapped_addr = mmap (addr, sz, PROT_READ | PROT_WRITE,\n+\t\t      MAP_PRIVATE | MAP_ANON, -1, (off_t)0);\n+\n+  /* If this fails, we are out of ideas (and maybe memory).  */\n+  if (mapped_addr == (void *) MAP_FAILED)\n+    return -1;\n+\n+  addr = mapped_addr;\n+\n   if (lseek (fd, off, SEEK_SET) == (off_t) -1)\n     return -1;\n "}]}