{"sha": "dcf0dde488b81894124a6bb181c98e215d4dfdeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmMGRkZTQ4OGI4MTg5NDEyNGE2YmIxODFjOThlMjE1ZDRkZmRlYg==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2020-11-14T02:12:24Z"}, "committer": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2020-11-14T02:12:35Z"}, "message": "Asan changes for RISC-V.\n\nWe have only riscv64 asan support, there is no riscv32 support as yet.  So I\nneed to be able to conditionally enable asan support for the riscv target.  I\nimplemented this by returning zero from the asan_shadow_offset function.  This\nrequires a change to toplev.c and docs in target.def.\n\n\tgcc/\n\t* config/riscv/riscv.c (riscv_asan_shadow_offset): New.\n\t(TARGET_ASAN_SHADOW_OFFSET): New.\n\t* doc/tm.texi: Regenerated.\n\t* target.def (asan_shadow_offset); Mention that it can return zero.\n\t* toplev.c (process_options): Check for and handle zero return from\n\ttargetm.asan_shadow_offset call.\n\nCo-Authored-By: cooper.joshua <cooper.joshua@linux.alibaba.com>", "tree": {"sha": "6dc1128f7efd75fa2b70bbf67e492a5573793ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc1128f7efd75fa2b70bbf67e492a5573793ab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcf0dde488b81894124a6bb181c98e215d4dfdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf0dde488b81894124a6bb181c98e215d4dfdeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcf0dde488b81894124a6bb181c98e215d4dfdeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf0dde488b81894124a6bb181c98e215d4dfdeb/comments", "author": null, "committer": null, "parents": [{"sha": "a4dd85e01599890286d9af5b106a1ab20e51169e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4dd85e01599890286d9af5b106a1ab20e51169e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4dd85e01599890286d9af5b106a1ab20e51169e"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "6909e200de17efb756dcfa49d129f441a8078ad8", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf0dde488b81894124a6bb181c98e215d4dfdeb/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf0dde488b81894124a6bb181c98e215d4dfdeb/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=dcf0dde488b81894124a6bb181c98e215d4dfdeb", "patch": "@@ -5299,6 +5299,19 @@ riscv_gpr_save_operation_p (rtx op)\n   return true;\n }\n \n+/* Implement TARGET_ASAN_SHADOW_OFFSET.  */\n+\n+static unsigned HOST_WIDE_INT\n+riscv_asan_shadow_offset (void)\n+{\n+  /* We only have libsanitizer support for RV64 at present.\n+\n+     This number must match kRiscv*_ShadowOffset* in the file\n+     libsanitizer/asan/asan_mapping.h which is currently 1<<29 for rv64,\n+     even though 1<<36 makes more sense.  */\n+  return TARGET_64BIT ? (HOST_WIDE_INT_1 << 29) : 0;\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n@@ -5482,6 +5495,9 @@ riscv_gpr_save_operation_p (rtx op)\n #undef TARGET_NEW_ADDRESS_PROFITABLE_P\n #define TARGET_NEW_ADDRESS_PROFITABLE_P riscv_new_address_profitable_p\n \n+#undef TARGET_ASAN_SHADOW_OFFSET\n+#define TARGET_ASAN_SHADOW_OFFSET riscv_asan_shadow_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-riscv.h\""}, {"sha": "f7f82911f051605330ac1abba38060eb76fe06d7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf0dde488b81894124a6bb181c98e215d4dfdeb/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf0dde488b81894124a6bb181c98e215d4dfdeb/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=dcf0dde488b81894124a6bb181c98e215d4dfdeb", "patch": "@@ -12094,7 +12094,8 @@ is zero, which disables this optimization.\n @deftypefn {Target Hook} {unsigned HOST_WIDE_INT} TARGET_ASAN_SHADOW_OFFSET (void)\n Return the offset bitwise ored into shifted address to get corresponding\n Address Sanitizer shadow memory address.  NULL if Address Sanitizer is not\n-supported by the target.\n+supported by the target.  May return 0 if Address Sanitizer is not supported\n+by a subtarget.\n @end deftypefn\n \n @deftypefn {Target Hook} {unsigned HOST_WIDE_INT} TARGET_MEMMODEL_CHECK (unsigned HOST_WIDE_INT @var{val})"}, {"sha": "ff7ad5983ac26a71dc7dd4f4b3cb85c4e8c3e362", "filename": "gcc/target.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf0dde488b81894124a6bb181c98e215d4dfdeb/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf0dde488b81894124a6bb181c98e215d4dfdeb/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=dcf0dde488b81894124a6bb181c98e215d4dfdeb", "patch": "@@ -4462,7 +4462,8 @@ DEFHOOK\n (asan_shadow_offset,\n  \"Return the offset bitwise ored into shifted address to get corresponding\\n\\\n Address Sanitizer shadow memory address.  NULL if Address Sanitizer is not\\n\\\n-supported by the target.\",\n+supported by the target.  May return 0 if Address Sanitizer is not supported\\n\\\n+by a subtarget.\",\n  unsigned HOST_WIDE_INT, (void),\n  NULL)\n "}, {"sha": "e0e0e04e95ff6b295991ad288c916dfbea520883", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf0dde488b81894124a6bb181c98e215d4dfdeb/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf0dde488b81894124a6bb181c98e215d4dfdeb/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dcf0dde488b81894124a6bb181c98e215d4dfdeb", "patch": "@@ -1834,7 +1834,8 @@ process_options (void)\n     }\n \n   if ((flag_sanitize & SANITIZE_USER_ADDRESS)\n-      && targetm.asan_shadow_offset == NULL)\n+      && ((targetm.asan_shadow_offset == NULL)\n+\t  || (targetm.asan_shadow_offset () == 0)))\n     {\n       warning_at (UNKNOWN_LOCATION, 0,\n \t\t  \"%<-fsanitize=address%> not supported for this target\");"}]}