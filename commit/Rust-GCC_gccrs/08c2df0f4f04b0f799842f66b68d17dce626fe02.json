{"sha": "08c2df0f4f04b0f799842f66b68d17dce626fe02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjMmRmMGY0ZjA0YjBmNzk5ODQyZjY2YjY4ZDE3ZGNlNjI2ZmUwMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-01-19T09:19:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-19T09:19:33Z"}, "message": "pt.c (copy_default_args_to_explicit_spec): Preserve object's CV quals.\n\ncp:\n\t* pt.c (copy_default_args_to_explicit_spec): Preserve\n\tobject's CV quals. Reorganize.\ntestsuite:\n\t* g++.old-deja/g++.pt/spec34.C: New test.\n\nFrom-SVN: r39127", "tree": {"sha": "7866b0a2dd5a3c3597bc91f87af4213a7e468b4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7866b0a2dd5a3c3597bc91f87af4213a7e468b4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08c2df0f4f04b0f799842f66b68d17dce626fe02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c2df0f4f04b0f799842f66b68d17dce626fe02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c2df0f4f04b0f799842f66b68d17dce626fe02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c2df0f4f04b0f799842f66b68d17dce626fe02/comments", "author": null, "committer": null, "parents": [{"sha": "7c6a32d25bba2da41f3eea80f1d96a439f3c6b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6a32d25bba2da41f3eea80f1d96a439f3c6b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6a32d25bba2da41f3eea80f1d96a439f3c6b6d"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "9a262f14840df3623ec44a9dcc02dd30839a66a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c2df0f4f04b0f799842f66b68d17dce626fe02/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c2df0f4f04b0f799842f66b68d17dce626fe02/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=08c2df0f4f04b0f799842f66b68d17dce626fe02", "patch": "@@ -1,3 +1,8 @@\n+2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* pt.c (copy_default_args_to_explicit_spec): Preserve\n+\tobject's CV quals. Reorganize.\n+\n 2001-01-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* typeck.c (build_modify_expr): Say `initialization' for"}, {"sha": "33c3f2688342f3a6a0abf6e74bb8996937bf002d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c2df0f4f04b0f799842f66b68d17dce626fe02/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c2df0f4f04b0f799842f66b68d17dce626fe02/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=08c2df0f4f04b0f799842f66b68d17dce626fe02", "patch": "@@ -1207,6 +1207,8 @@ copy_default_args_to_explicit_spec (decl)\n   tree old_type;\n   tree new_type;\n   tree t;\n+  tree object_type = NULL_TREE;\n+  tree in_charge = NULL_TREE;\n \n   /* See if there's anything we need to do.  */\n   tmpl = DECL_TI_TEMPLATE (decl);\n@@ -1220,40 +1222,43 @@ copy_default_args_to_explicit_spec (decl)\n   old_type = TREE_TYPE (decl);\n   spec_types = TYPE_ARG_TYPES (old_type);\n   \n-  /* DECL may contain more parameters than TMPL due to the extra\n-     in-charge parameter in constructors and destructors.  */\n   if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n     {\n+      /* Remove the this pointer, but remember the object's type for\n+         CV quals.  */\n+      object_type = TREE_TYPE (TREE_VALUE (spec_types));\n       spec_types = TREE_CHAIN (spec_types);\n       tmpl_types = TREE_CHAIN (tmpl_types);\n+      \n       if (DECL_HAS_IN_CHARGE_PARM_P (decl))\n-\tspec_types = TREE_CHAIN (spec_types);\n+        {\n+          /* DECL may contain more parameters than TMPL due to the extra\n+             in-charge parameter in constructors and destructors.  */\n+          in_charge = spec_types;\n+\t  spec_types = TREE_CHAIN (spec_types);\n+\t}\n     }\n \n   /* Compute the merged default arguments.  */\n   new_spec_types = \n     copy_default_args_to_explicit_spec_1 (spec_types, tmpl_types);\n \n-  /* Put the extra parameters back together -- but note that\n-     build_cplus_method_type will automatically add the `this'\n-     pointer.  */\n-  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl)\n-      && DECL_HAS_IN_CHARGE_PARM_P (decl))\n+  /* Compute the new FUNCTION_TYPE.  */\n+  if (object_type)\n     {\n-      tree t = TREE_CHAIN (TYPE_ARG_TYPES (old_type));\n-      new_spec_types = hash_tree_cons (TREE_PURPOSE (t),\n-\t\t\t\t       TREE_VALUE (t),\n-\t\t\t\t       new_spec_types);\n+      if (in_charge)\n+        /* Put the in-charge parameter back.  */\n+        new_spec_types = hash_tree_cons (TREE_PURPOSE (in_charge),\n+\t\t\t  \t         TREE_VALUE (in_charge),\n+\t\t\t\t         new_spec_types);\n+\n+      new_type = build_cplus_method_type (object_type,\n+\t\t\t\t\t  TREE_TYPE (old_type),\n+\t\t\t\t\t  new_spec_types);\n     }\n-  \n-  /* Compute the new FUNCTION_TYPE.  */\n-  if (TREE_CODE (old_type) == METHOD_TYPE)\n-    new_type = build_cplus_method_type (TYPE_METHOD_BASETYPE (old_type),\n-\t\t\t\t\tTREE_TYPE (old_type),\n-\t\t\t\t\tnew_spec_types);\n   else\n     new_type = build_function_type (TREE_TYPE (old_type),\n-\t\t\t\t  new_spec_types);\n+\t\t\t\t    new_spec_types);\n   new_type = build_type_attribute_variant (new_type,\n \t\t\t\t\t   TYPE_ATTRIBUTES (old_type));\n   new_type = build_exception_variant (new_type,\n@@ -1500,7 +1505,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n       else if (TREE_CODE (TREE_OPERAND (declarator, 0)) == LOOKUP_EXPR)\n \t{\n \t  /* A friend declaration.  We can't do much, because we don't\n-\t   know what this resolves to, yet.  */\n+\t     know what this resolves to, yet.  */\n \t  my_friendly_assert (is_friend != 0, 0);\n \t  my_friendly_assert (!explicit_instantiation, 0);\n \t  SET_DECL_IMPLICIT_INSTANTIATION (decl);\n@@ -1641,7 +1646,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t      return tmpl;\n \t    }\n \n-\t  /* If we though that the DECL was a member function, but it\n+\t  /* If we thought that the DECL was a member function, but it\n \t     turns out to be specializing a static member function,\n \t     make DECL a static member function as well.  */\n \t  if (DECL_STATIC_FUNCTION_P (tmpl)"}, {"sha": "4ff21240b9833696748b5f91e2f14906f0603830", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c2df0f4f04b0f799842f66b68d17dce626fe02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c2df0f4f04b0f799842f66b68d17dce626fe02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08c2df0f4f04b0f799842f66b68d17dce626fe02", "patch": "@@ -1,3 +1,7 @@\n+2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/spec34.C: New test.\n+\n 2001-01-19  \"Billinghurst, David (CRTS)\" <David.Billinghurst@riotinto.com>\n \n \t* g77.f-torture/compile/20000601-2.f: New test."}, {"sha": "3f03dbe12efc92e12d88b7cbe6cb88d245853b01", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec34.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c2df0f4f04b0f799842f66b68d17dce626fe02/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c2df0f4f04b0f799842f66b68d17dce626fe02/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec34.C?ref=08c2df0f4f04b0f799842f66b68d17dce626fe02", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link:\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 17 Jan 2001 <nathan@codesourcery.com>\n+\n+// Bug 1632. In copying default args from a template to a specialization, we\n+// lost the object's CV quals, leading to an utterly confusing error message.\n+\n+struct X;\n+\n+template <int dim> struct Y\n+{\n+  X *f (int i = 0) const;\n+};\n+\n+template <> X *Y<2>::f (int i) const\n+{\n+  return f (i);\n+}"}]}