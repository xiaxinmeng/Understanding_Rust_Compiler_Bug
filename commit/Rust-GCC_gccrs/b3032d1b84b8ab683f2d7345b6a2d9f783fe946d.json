{"sha": "b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMwMzJkMWI4NGI4YWI2ODNmMmQ3MzQ1YjZhMmQ5Zjc4M2ZlOTQ2ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-10-20T10:14:03Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-10-20T10:14:03Z"}, "message": "collect-utils.c, lto-wrapper + mkoffload: Improve -save-temps filename\n\ngcc/ChangeLog:\n\n\t* collect-utils.c (collect_execute, fork_execute): Add at-file suffix\n\targument.\n\t* collect-utils.h (collect_execute, fork_execute): Update prototype.\n\t* collect2.c (maybe_run_lto_and_relink, do_link, main, do_dsymutil):\n\tUpdate calls by passing NULL.\n\t* config/i386/intelmic-mkoffload.c (compile_for_target,\n\tgenerate_host_descr_file, prepare_target_image, main): Likewise.\n\t* config/gcn/mkoffload.c (compile_native, main): Pass at-file suffix.\n\t* config/nvptx/mkoffload.c (compile_native, main): Likewise.\n\t* lto-wrapper.c (compile_offload_image): Likewise.", "tree": {"sha": "2345e5f70560519d7a5fa83cd65ef61e147ee797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2345e5f70560519d7a5fa83cd65ef61e147ee797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b355522b7843f4d9d93172aa7521b223b77587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b355522b7843f4d9d93172aa7521b223b77587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b355522b7843f4d9d93172aa7521b223b77587"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "095db8d7547ff6060b87a5e89486b63d7ecda79e", "filename": "gcc/collect-utils.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fcollect-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fcollect-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.c?ref=b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "patch": "@@ -104,7 +104,8 @@ do_wait (const char *prog, struct pex_obj *pex)\n \n struct pex_obj *\n collect_execute (const char *prog, char **argv, const char *outname,\n-\t\t const char *errname, int flags, bool use_atfile)\n+\t\t const char *errname, int flags, bool use_atfile,\n+\t\t const char *atsuffix)\n {\n   struct pex_obj *pex;\n   const char *errmsg;\n@@ -126,7 +127,10 @@ collect_execute (const char *prog, char **argv, const char *outname,\n       /* Note: we assume argv contains at least one element; this is\n          checked above.  */\n \n-      response_file = make_temp_file (\"\");\n+      if (!save_temps || !atsuffix)\n+\tresponse_file = make_temp_file (\"\");\n+      else\n+\tresponse_file = concat (dumppfx, atsuffix, NULL);\n \n       f = fopen (response_file, \"w\");\n \n@@ -202,12 +206,13 @@ collect_execute (const char *prog, char **argv, const char *outname,\n }\n \n void\n-fork_execute (const char *prog, char **argv, bool use_atfile)\n+fork_execute (const char *prog, char **argv, bool use_atfile,\n+\t      const char *atsuffix)\n {\n   struct pex_obj *pex;\n \n   pex = collect_execute (prog, argv, NULL, NULL,\n-\t\t\t PEX_LAST | PEX_SEARCH, use_atfile);\n+\t\t\t PEX_LAST | PEX_SEARCH, use_atfile, atsuffix);\n   do_wait (prog, pex);\n }\n "}, {"sha": "482225764a9647377f4c1d3e789a2e5641614824", "filename": "gcc/collect-utils.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fcollect-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fcollect-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.h?ref=b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "patch": "@@ -27,10 +27,10 @@ extern void fatal_signal (int);\n \n extern struct pex_obj *collect_execute (const char *, char **,\n \t\t\t\t\tconst char *, const char *,\n-\t\t\t\t\tint, bool);\n+\t\t\t\t\tint, bool, const char *);\n extern int collect_wait (const char *, struct pex_obj *);\n extern void do_wait (const char *, struct pex_obj *);\n-extern void fork_execute (const char *, char **, bool);\n+extern void fork_execute (const char *, char **, bool, const char *);\n extern void utils_cleanup (bool);\n \n "}, {"sha": "3a43a5a61aaaed91b63decc3b803a5413abd6c65", "filename": "gcc/collect2.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "patch": "@@ -644,7 +644,7 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n \n       /* Run the LTO back end.  */\n       pex = collect_execute (prog, lto_c_argv, NULL, NULL, PEX_SEARCH,\n-\t\t\t     at_file_supplied);\n+\t\t\t     at_file_supplied, NULL);\n       {\n \tint c;\n \tFILE *stream;\n@@ -727,7 +727,8 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n \n       /* Run the linker again, this time replacing the object files\n          optimized by the LTO with the temporary file generated by the LTO.  */\n-      fork_execute (\"ld\", out_lto_ld_argv, HAVE_GNU_LD && at_file_supplied);\n+      fork_execute (\"ld\", out_lto_ld_argv, HAVE_GNU_LD && at_file_supplied,\n+\t\t    NULL);\n       /* We assume that temp files were created, and therefore we need to take\n          that into account (maybe run dsymutil).  */\n       post_ld_pass (/*temp_file*/true);\n@@ -739,7 +740,7 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n     {\n       /* Our caller is relying on us to do the link\n          even though there is no LTO back end work to be done.  */\n-      fork_execute (\"ld\", lto_ld_argv, HAVE_GNU_LD && at_file_supplied);\n+      fork_execute (\"ld\", lto_ld_argv, HAVE_GNU_LD && at_file_supplied, NULL);\n       /* No LTO objects were found, so no new temp file.  */\n       post_ld_pass (/*temp_file*/false);\n     }\n@@ -756,7 +757,7 @@ do_link (char **ld_argv)\n   const char *prog = \"ld\";\n   pex = collect_execute (prog, ld_argv, NULL, NULL,\n \t\t\t PEX_LAST | PEX_SEARCH,\n-\t\t\t HAVE_GNU_LD && at_file_supplied);\n+\t\t\t HAVE_GNU_LD && at_file_supplied, NULL);\n   int ret = collect_wait (prog, pex);\n   if (ret)\n     {\n@@ -1722,7 +1723,7 @@ main (int argc, char **argv)\n \t  strip_argv[0] = strip_file_name;\n \t  strip_argv[1] = output_file;\n \t  strip_argv[2] = (char *) 0;\n-\t  fork_execute (\"strip\", real_strip_argv, false);\n+\t  fork_execute (\"strip\", real_strip_argv, false, NULL);\n \t}\n \n #ifdef COLLECT_EXPORT_LIST\n@@ -1805,7 +1806,7 @@ main (int argc, char **argv)\n   /* Assemble the constructor and destructor tables.\n      Link the tables in with the rest of the program.  */\n \n-  fork_execute (\"gcc\",  c_argv, at_file_supplied);\n+  fork_execute (\"gcc\",  c_argv, at_file_supplied, NULL);\n #ifdef COLLECT_EXPORT_LIST\n   /* On AIX we must call link because of possible templates resolution.  */\n   do_link (ld2_argv);\n@@ -1818,7 +1819,7 @@ main (int argc, char **argv)\n     maybe_run_lto_and_relink (ld2_argv, object_lst, object, true);\n   else\n     {\n-      fork_execute (\"ld\", ld2_argv, HAVE_GNU_LD && at_file_supplied);\n+      fork_execute (\"ld\", ld2_argv, HAVE_GNU_LD && at_file_supplied, NULL);\n       post_ld_pass (/*temp_file*/false);\n     }\n \n@@ -3040,7 +3041,7 @@ do_dsymutil (const char *output_file) {\n   argv[2] = (char *) 0;\n \n   pex = collect_execute (dsymutil, real_argv, NULL, NULL,\n-\t\t\t PEX_LAST | PEX_SEARCH, false);\n+\t\t\t PEX_LAST | PEX_SEARCH, false, NULL);\n   do_wait (dsymutil, pex);\n }\n "}, {"sha": "f7589a5a78c70bef4f72271be06c8383624a1e58", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "patch": "@@ -737,7 +737,8 @@ compile_native (const char *infile, const char *outfile, const char *compiler,\n   obstack_ptr_grow (&argv_obstack, NULL);\n \n   const char **new_argv = XOBFINISH (&argv_obstack, const char **);\n-  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true);\n+  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true,\n+\t\t\".gccnative_args\");\n   obstack_free (&argv_obstack, NULL);\n }\n \n@@ -1001,7 +1002,7 @@ main (int argc, char **argv)\n   unsetenv (\"LIBRARY_PATH\");\n \n   /* Run the compiler pass.  */\n-  fork_execute (cc_argv[0], CONST_CAST (char **, cc_argv), true);\n+  fork_execute (cc_argv[0], CONST_CAST (char **, cc_argv), true,  \".gcc_args\");\n   obstack_free (&cc_argv_obstack, NULL);\n \n   in = fopen (gcn_s1_name, \"r\");\n@@ -1022,7 +1023,7 @@ main (int argc, char **argv)\n   fclose (out);\n \n   /* Run the assemble/link pass.  */\n-  fork_execute (ld_argv[0], CONST_CAST (char **, ld_argv), true);\n+  fork_execute (ld_argv[0], CONST_CAST (char **, ld_argv), true, \".ld_args\");\n   obstack_free (&ld_argv_obstack, NULL);\n \n   in = fopen (gcn_o_name, \"r\");"}, {"sha": "668208c1b239918378ad51bbdcc5859dad55847f", "filename": "gcc/config/i386/intelmic-mkoffload.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c?ref=b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "patch": "@@ -231,7 +231,7 @@ compile_for_target (struct obstack *argv_obstack)\n   unsetenv (\"LIBRARY_PATH\");\n   unsetenv (\"LD_RUN_PATH\");\n \n-  fork_execute (argv[0], argv, false);\n+  fork_execute (argv[0], argv, false, NULL);\n   obstack_free (argv_obstack, NULL);\n \n   /* Restore environment variables.  */\n@@ -455,7 +455,7 @@ generate_host_descr_file (const char *host_compiler)\n   obstack_ptr_grow (&argv_obstack, NULL);\n \n   char **argv = XOBFINISH (&argv_obstack, char **);\n-  fork_execute (argv[0], argv, false);\n+  fork_execute (argv[0], argv, false, NULL);\n   obstack_free (&argv_obstack, NULL);\n \n   return obj_filename;\n@@ -538,7 +538,7 @@ prepare_target_image (const char *target_compiler, int argc, char **argv)\n   obstack_ptr_grow (&argv_obstack, rename_section_opt);\n   obstack_ptr_grow (&argv_obstack, NULL);\n   char **new_argv = XOBFINISH (&argv_obstack, char **);\n-  fork_execute (new_argv[0], new_argv, false);\n+  fork_execute (new_argv[0], new_argv, false, NULL);\n   obstack_free (&argv_obstack, NULL);\n \n   /* Objcopy has created symbols, containing the input file name with\n@@ -580,7 +580,7 @@ prepare_target_image (const char *target_compiler, int argc, char **argv)\n   obstack_ptr_grow (&argv_obstack, opt_for_objcopy[2]);\n   obstack_ptr_grow (&argv_obstack, NULL);\n   new_argv = XOBFINISH (&argv_obstack, char **);\n-  fork_execute (new_argv[0], new_argv, false);\n+  fork_execute (new_argv[0], new_argv, false, NULL);\n   obstack_free (&argv_obstack, NULL);\n \n   return target_so_filename;\n@@ -672,7 +672,7 @@ main (int argc, char **argv)\n   obstack_ptr_grow (&argv_obstack, out_obj_filename);\n   obstack_ptr_grow (&argv_obstack, NULL);\n   char **new_argv = XOBFINISH (&argv_obstack, char **);\n-  fork_execute (new_argv[0], new_argv, false);\n+  fork_execute (new_argv[0], new_argv, false, NULL);\n   obstack_free (&argv_obstack, NULL);\n \n   /* Run objcopy on the resultant object file to localize generated symbols\n@@ -688,7 +688,7 @@ main (int argc, char **argv)\n   obstack_ptr_grow (&argv_obstack, out_obj_filename);\n   obstack_ptr_grow (&argv_obstack, NULL);\n   new_argv = XOBFINISH (&argv_obstack, char **);\n-  fork_execute (new_argv[0], new_argv, false);\n+  fork_execute (new_argv[0], new_argv, false, NULL);\n   obstack_free (&argv_obstack, NULL);\n \n   return 0;"}, {"sha": "a3c4099b9e76a4690947fbcf8293a3cbcf3b00a1", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "patch": "@@ -399,7 +399,8 @@ compile_native (const char *infile, const char *outfile, const char *compiler,\n   obstack_ptr_grow (&argv_obstack, NULL);\n \n   const char **new_argv = XOBFINISH (&argv_obstack, const char **);\n-  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true);\n+  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true,\n+\t\t\".gccnative_args\");\n   obstack_free (&argv_obstack, NULL);\n }\n \n@@ -582,7 +583,8 @@ main (int argc, char **argv)\n       unsetenv (\"COMPILER_PATH\");\n       unsetenv (\"LIBRARY_PATH\");\n \n-      fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true);\n+      fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true,\n+\t\t    \".gcc_args\");\n       obstack_free (&argv_obstack, NULL);\n \n       xputenv (concat (\"GCC_EXEC_PREFIX=\", execpath, NULL));"}, {"sha": "e458347860c1a8fa29633e99732bfa38b07d457e", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3032d1b84b8ab683f2d7345b6a2d9f783fe946d/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=b3032d1b84b8ab683f2d7345b6a2d9f783fe946d", "patch": "@@ -950,7 +950,7 @@ compile_offload_image (const char *target, const char *compiler_path,\n \n   obstack_ptr_grow (&argv_obstack, NULL);\n   argv = XOBFINISH (&argv_obstack, char **);\n-  fork_execute (argv[0], argv, true);\n+  fork_execute (argv[0], argv, true, \"offload_args\");\n   obstack_free (&argv_obstack, NULL);\n \n   free_array_of_ptrs ((void **) paths, n_paths);\n@@ -1777,7 +1777,8 @@ run_gcc (unsigned argc, char *argv[])\n \n   new_argv = XOBFINISH (&argv_obstack, const char **);\n   argv_ptr = &new_argv[new_head_argc];\n-  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true);\n+  fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true,\n+\t\t\"ltrans_args\");\n \n   /* Copy the early generated debug info from the objects to temporary\n      files and append those to the partial link commandline.  */\n@@ -1921,8 +1922,12 @@ run_gcc (unsigned argc, char *argv[])\n \t    }\n \t  else\n \t    {\n+\t      char argsuffix[sizeof (DUMPBASE_SUFFIX) + 1];\n+\t      if (save_temps)\n+\t\tsnprintf (dumpbase, sizeof (DUMPBASE_SUFFIX),\n+\t\t\t  \"ltrans%u.ltrans_args\", i);\n \t      fork_execute (new_argv[0], CONST_CAST (char **, new_argv),\n-\t\t\t    true);\n+\t\t\t    true, save_temps ? argsuffix : NULL);\n \t      maybe_unlink (input_name);\n \t    }\n \n@@ -1973,7 +1978,7 @@ run_gcc (unsigned argc, char *argv[])\n \t  new_argv = XOBFINISH (&argv_obstack, const char **);\n \n \t  pex = collect_execute (new_argv[0], CONST_CAST (char **, new_argv),\n-\t\t\t\t NULL, NULL, PEX_SEARCH, false);\n+\t\t\t\t NULL, NULL, PEX_SEARCH, false, NULL);\n \t  do_wait (new_argv[0], pex);\n \t  freeargv (make_argv);\n \t  maybe_unlink (makefile);"}]}