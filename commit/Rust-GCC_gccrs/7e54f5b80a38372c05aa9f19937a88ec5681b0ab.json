{"sha": "7e54f5b80a38372c05aa9f19937a88ec5681b0ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1NGY1YjgwYTM4MzcyYzA1YWE5ZjE5OTM3YTg4ZWM1NjgxYjBhYg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2001-07-09T12:21:56Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2001-07-09T12:21:56Z"}, "message": "valarray_meta.h (_Expr::operator+): Use qualified id for _Expr template template argument.\n\n\t* include/bits/valarray_meta.h (_Expr::operator+): Use qualified id\n\tfor _Expr template template argument.\n\t(_Expr::operator-): Likewise.\n\t(_Expr::operator~): Likewise.\n\t(_Expr::operator!): Likewise.\n\t(_DEFINE_EXPR_UNARY_OPERATOR): Likewise.\n\nFrom-SVN: r43862", "tree": {"sha": "80787a01ba96ed21040d0fc5e5ca7c7868a5af86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80787a01ba96ed21040d0fc5e5ca7c7868a5af86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e54f5b80a38372c05aa9f19937a88ec5681b0ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e54f5b80a38372c05aa9f19937a88ec5681b0ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e54f5b80a38372c05aa9f19937a88ec5681b0ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e54f5b80a38372c05aa9f19937a88ec5681b0ab/comments", "author": null, "committer": null, "parents": [{"sha": "f1ec5147f5dbed64487903c497484c6556548dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ec5147f5dbed64487903c497484c6556548dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ec5147f5dbed64487903c497484c6556548dd7"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "6fd9f64f86d41f8200e5fda0eb98fee741f306c7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54f5b80a38372c05aa9f19937a88ec5681b0ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54f5b80a38372c05aa9f19937a88ec5681b0ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7e54f5b80a38372c05aa9f19937a88ec5681b0ab", "patch": "@@ -1,3 +1,12 @@\n+2001-07-09  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* include/bits/valarray_meta.h (_Expr::operator+): Use qualified id\n+\tfor _Expr template template argument.\n+\t(_Expr::operator-): Likewise.\n+\t(_Expr::operator~): Likewise.\n+\t(_Expr::operator!): Likewise.\n+\t(_DEFINE_EXPR_UNARY_OPERATOR): Likewise.\n+\n 2001-07-06  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n         * libmath/Makefile.am (EXTRA_DIST): Remove atan2f.c and expf.c"}, {"sha": "002fe5f901b22b51a8d6f3a388186b9c65c4a44d", "filename": "libstdc++-v3/include/bits/valarray_meta.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e54f5b80a38372c05aa9f19937a88ec5681b0ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e54f5b80a38372c05aa9f19937a88ec5681b0ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h?ref=7e54f5b80a38372c05aa9f19937a88ec5681b0ab", "patch": "@@ -655,16 +655,16 @@ namespace std\n         valarray<value_type> operator[] (const valarray<bool>&) const;\n         valarray<value_type> operator[] (const valarray<size_t>&) const;\n     \n-        _Expr<_UnClos<_Unary_plus,_Expr,_Clos>, value_type>\n+        _Expr<_UnClos<_Unary_plus,std::_Expr,_Clos>, value_type>\n         operator+ () const;\n \n-        _Expr<_UnClos<negate,_Expr,_Clos>, value_type>\n+        _Expr<_UnClos<negate,std::_Expr,_Clos>, value_type>\n         operator- () const;\n \n-        _Expr<_UnClos<_Bitwise_not,_Expr,_Clos>, value_type>\n+        _Expr<_UnClos<_Bitwise_not,std::_Expr,_Clos>, value_type>\n         operator~ () const;\n \n-        _Expr<_UnClos<logical_not,_Expr,_Clos>, bool>\n+        _Expr<_UnClos<logical_not,std::_Expr,_Clos>, bool>\n         operator! () const;\n \n         size_t size () const;\n@@ -769,16 +769,16 @@ namespace std\n     inline _Expr<_UnClos<logical_not,_Expr,_Dom>, bool>\n     _Expr<_Dom,_Tp>::operator! () const\n     {\n-        typedef _UnClos<logical_not,_Expr,_Dom> _Closure;\n+        typedef _UnClos<logical_not,std::_Expr,_Dom> _Closure;\n         return _Expr<_Closure,_Tp> (_Closure(this->_M_closure));\n     }\n \n #define _DEFINE_EXPR_UNARY_OPERATOR(_Op, _Name)                         \\\n template<class _Dom, typename _Tp>                                      \\\n-inline _Expr<_UnClos<_Name,_Expr,_Dom>,_Tp>                             \\\n+inline _Expr<_UnClos<_Name,std::_Expr,_Dom>,_Tp>                        \\\n _Expr<_Dom,_Tp>::operator _Op () const                                 \\\n {                                                                       \\\n-    typedef _UnClos<_Name,_Expr,_Dom> _Closure;                         \\\n+    typedef _UnClos<_Name,std::_Expr,_Dom> _Closure;                    \\\n     return _Expr<_Closure,_Tp> (_Closure (this->_M_closure));           \\\n }\n "}]}