{"sha": "beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViNTNmYjg0YTk2ZWNmYzdiNWYyMDdkZjZlZDEzMDE0ZWMyM2E5ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-05-06T20:14:14Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-06T20:14:14Z"}, "message": "91th Cygnus<->FSF quick merge\n\nFrom-SVN: r14021", "tree": {"sha": "ebe6e9cdaf48b8ffa8ac8c4a3fa3e9596e317942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebe6e9cdaf48b8ffa8ac8c4a3fa3e9596e317942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/comments", "author": null, "committer": null, "parents": [{"sha": "065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/065bbfe6bf8a705bcfa5a7396559ac6e1660d7e6"}], "stats": {"total": 353, "additions": 181, "deletions": 172}, "files": [{"sha": "e0d0e7850533880eaa2d77f0e9db354c945adb19", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -1,3 +1,7 @@\n+Mon May  5 14:46:53 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_new_op): Handle null arg2 for ?:.\n+\n Thu May  1 18:26:37 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (expand_exception_blocks): Ensure that we flow through"}, {"sha": "a469e04b616fe82c0215a7295ddab3b0c4512f23", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -1,5 +1,5 @@\n /* Functions related to invoking methods and overloaded functions.\n-   Copyright (C) 1987, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) and\n    hacked by Brendan Kehoe (brendan@cygnus.com).\n \n@@ -1896,10 +1896,10 @@ build_method_call (instance, name, parms, basetype_path, flags)\n       /* The MAIN_VARIANT of the type that `instance_ptr' winds up being.  */\n       tree inst_ptr_basetype;\n \n-      static_call_context =\n-\t(TREE_CODE (instance) == INDIRECT_REF\n-\t && TREE_CODE (TREE_OPERAND (instance, 0)) == NOP_EXPR\n-\t && TREE_OPERAND (TREE_OPERAND (instance, 0), 0) == error_mark_node);\n+      static_call_context\n+\t= (TREE_CODE (instance) == INDIRECT_REF\n+\t   && TREE_CODE (TREE_OPERAND (instance, 0)) == NOP_EXPR\n+\t   && TREE_OPERAND (TREE_OPERAND (instance, 0), 0) == error_mark_node);\n \n       if (TREE_CODE (instance) == OFFSET_REF)\n \tinstance = resolve_offset_ref (instance);\n@@ -1997,8 +1997,9 @@ build_method_call (instance, name, parms, basetype_path, flags)\n       if (basetype_path == NULL_TREE\n \t  && IS_SIGNATURE (basetype))\n \tbasetype_path = TYPE_BINFO (basetype);\n-      else if (basetype_path == NULL_TREE ||\n-\tBINFO_TYPE (basetype_path) != TYPE_MAIN_VARIANT (inst_ptr_basetype))\n+      else if (basetype_path == NULL_TREE\n+\t       || (BINFO_TYPE (basetype_path)\n+\t\t   != TYPE_MAIN_VARIANT (inst_ptr_basetype)))\n \tbasetype_path = TYPE_BINFO (inst_ptr_basetype);\n \n       result = build_field_call (basetype_path, instance_ptr, name, parms);\n@@ -4607,7 +4608,8 @@ build_new_op (code, flags, arg1, arg2, arg3)\n \n   if (code == COND_EXPR)\n     {\n-      if (TREE_CODE (TREE_TYPE (arg2)) == VOID_TYPE\n+      if (arg2 == NULL_TREE\n+\t  || TREE_CODE (TREE_TYPE (arg2)) == VOID_TYPE\n \t  || TREE_CODE (TREE_TYPE (arg3)) == VOID_TYPE\n \t  || (! IS_OVERLOAD_TYPE (TREE_TYPE (arg2))\n \t      && ! IS_OVERLOAD_TYPE (TREE_TYPE (arg3))))\n@@ -5046,8 +5048,8 @@ build_over_call (fn, convs, args, flags)\n \t\t    < TYPE_VOLATILE (TREE_TYPE (argtype)));\n \t  int dc = (TYPE_READONLY (TREE_TYPE (parmtype))\n \t\t    < TYPE_READONLY (TREE_TYPE (argtype)));\n-\t  char *p = (dv && dc ? \"const and volatile\" :\n-\t\t     dc ? \"const\" : dv ? \"volatile\" : \"\");\n+\t  char *p = (dv && dc ? \"const and volatile\"\n+\t\t              : dc ? \"const\" : dv ? \"volatile\" : \"\");\n \n \t  cp_pedwarn (\"passing `%T' as `this' argument of `%#D' discards %s\",\n \t\t      TREE_TYPE (argtype), fn, p);\n@@ -5310,8 +5312,8 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       TREE_TYPE (instance_ptr) = build_pointer_type (basetype);\n     }\n \n-  pretty_name =\n-    (name == ctor_identifier ? constructor_name_full (basetype) : name);\n+  pretty_name\n+    = (name == ctor_identifier ? constructor_name_full (basetype) : name);\n \n   fns = lookup_fnfields (basetype_path, name, 1);\n "}, {"sha": "44483c0b9d123952a06d77f960e7ac232000d1b0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -2144,8 +2144,8 @@ finish_vtbls (binfo, do_self, t)\n   for (i = 0; i < n_baselinks; i++)\n     {\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      int is_not_base_vtable =\n-\ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n+      int is_not_base_vtable\n+\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n       if (TREE_VIA_VIRTUAL (base_binfo))\n \t{\n \t  base_binfo = binfo_member (BINFO_TYPE (base_binfo), CLASSTYPE_VBASECLASSES (t));\n@@ -2162,11 +2162,11 @@ overrides (fndecl, base_fndecl)\n      tree fndecl, base_fndecl;\n {\n   /* Destructors have special names.  */\n-  if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (base_fndecl)) &&\n-      DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (fndecl)))\n+  if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (base_fndecl))\n+      && DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (fndecl)))\n     return 1;\n-  if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (base_fndecl)) ||\n-      DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (fndecl)))\n+  if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (base_fndecl))\n+      || DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (fndecl)))\n     return 0;\n   if (DECL_NAME (fndecl) == DECL_NAME (base_fndecl))\n     {\n@@ -2397,8 +2397,8 @@ modify_all_direct_vtables (binfo, do_self, t, fndecl, pfn)\n   for (i = 0; i < n_baselinks; i++)\n     {\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      int is_not_base_vtable =\n-\ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n+      int is_not_base_vtable\n+\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n       if (! TREE_VIA_VIRTUAL (base_binfo))\n \tmodify_all_direct_vtables (base_binfo, is_not_base_vtable, t, fndecl, pfn);\n     }\n@@ -2493,8 +2493,8 @@ fixup_vtable_deltas (binfo, init_self, t)\n   for (i = 0; i < n_baselinks; i++)\n     {\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      int is_not_base_vtable =\n-\ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n+      int is_not_base_vtable\n+\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n       if (! TREE_VIA_VIRTUAL (base_binfo))\n \tfixup_vtable_deltas (base_binfo, is_not_base_vtable, t);\n     }\n@@ -2525,8 +2525,8 @@ modify_all_indirect_vtables (binfo, do_self, via_virtual, t, fndecl, pfn)\n   for (i = 0; i < n_baselinks; i++)\n     {\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      int is_not_base_vtable =\n-\ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n+      int is_not_base_vtable\n+\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n       if (TREE_VIA_VIRTUAL (base_binfo))\n \t{\n \t  via_virtual = 1;\n@@ -2705,8 +2705,8 @@ merge_overrides (binfo, old, do_self, t)\n     {\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n       tree old_base_binfo = TREE_VEC_ELT (old_binfos, i);\n-      int is_not_base_vtable =\n-\ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n+      int is_not_base_vtable\n+\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n       if (! TREE_VIA_VIRTUAL (base_binfo))\n \tmerge_overrides (base_binfo, old_base_binfo, is_not_base_vtable, t);\n     }\n@@ -3221,8 +3221,9 @@ finish_struct_1 (t, warn_anon)\n \t  tree ctype = DECL_INITIAL (x);\n \t  tree sname = DECL_NAME (x);\n \t  tree access\n-\t    = TREE_PRIVATE (x) ? access_private_node :\n-\t      TREE_PROTECTED (x) ? access_protected_node : access_public_node;\n+\t    = TREE_PRIVATE (x) ? access_private_node\n+\t\t\t       : TREE_PROTECTED (x) ? access_protected_node\n+\t\t\t\t\t\t    : access_public_node;\n \t  tree fdecl, binfo;\n \n \t  if (last_x)\n@@ -4606,9 +4607,9 @@ pushclass (type, modify)\n   *current_class_stack++ = current_class_type;\n   if (current_class_stack >= current_class_base + current_class_stacksize)\n     {\n-      current_class_base =\n-\t(tree *)xrealloc (current_class_base,\n-\t\t\t  sizeof (tree) * (current_class_stacksize + 10));\n+      current_class_base\n+\t= (tree *)xrealloc (current_class_base,\n+\t\t\t    sizeof (tree) * (current_class_stacksize + 10));\n       current_class_stack = current_class_base + current_class_stacksize;\n       current_class_stacksize += 10;\n     }\n@@ -4790,9 +4791,9 @@ push_lang_context (name)\n   *current_lang_stack++ = current_lang_name;\n   if (current_lang_stack >= current_lang_base + current_lang_stacksize)\n     {\n-      current_lang_base =\n-\t(tree *)xrealloc (current_lang_base,\n-\t\t\t  sizeof (tree) * (current_lang_stacksize + 10));\n+      current_lang_base\n+\t= (tree *)xrealloc (current_lang_base,\n+\t\t\t    sizeof (tree) * (current_lang_stacksize + 10));\n       current_lang_stack = current_lang_base + current_lang_stacksize;\n       current_lang_stacksize += 10;\n     }\n@@ -5257,8 +5258,8 @@ instantiate_type (lhstype, rhs, complain)\n \tTREE_TYPE (rhs) = lhstype;\n \tTREE_OPERAND (rhs, 0) = fn;\n \tTREE_CONSTANT (rhs) = staticp (fn);\n-\tif (TREE_CODE (lhstype) == POINTER_TYPE &&\n-\t    TREE_CODE (TREE_TYPE (lhstype)) == METHOD_TYPE)\n+\tif (TREE_CODE (lhstype) == POINTER_TYPE\n+\t    && TREE_CODE (TREE_TYPE (lhstype)) == METHOD_TYPE)\n \t  {\n \t    build_ptrmemfunc_type (lhstype);\n \t    rhs = build_ptrmemfunc (lhstype, rhs, 0);"}, {"sha": "e9054c26b9a1a88f96810b9d39187b4cf701375b", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -707,8 +707,8 @@ convert_to_aggr (type, expr, msgp, protect)\n   {\n     int saw_private = 0;\n     int saw_protected = 0;\n-    struct candidate *candidates =\n-      (struct candidate *) alloca ((decl_list_length (fndecl)+1) * sizeof (struct candidate));\n+    struct candidate *candidates\n+      = (struct candidate *) alloca ((decl_list_length (fndecl)+1) * sizeof (struct candidate));\n     struct candidate *cp = candidates;\n \n     while (fndecl)"}, {"sha": "6721d0b0021b448ad1998dff8853b7426b8ba2cb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 62, "deletions": 60, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -1820,8 +1820,8 @@ maybe_push_to_top_level (pseudo)\n      int pseudo;\n {\n   extern int current_lang_stacksize;\n-  struct saved_scope *s =\n-    (struct saved_scope *) xmalloc (sizeof (struct saved_scope));\n+  struct saved_scope *s\n+    = (struct saved_scope *) xmalloc (sizeof (struct saved_scope));\n   struct binding_level *b = inner_binding_level;\n   tree old_bindings = NULL_TREE;\n \n@@ -4707,10 +4707,10 @@ init_decl_processing ()\n   /* Define `char', which is like either `signed char' or `unsigned char'\n      but not the same as either.  */\n \n-  char_type_node =\n-    (flag_signed_char\n-     ? make_signed_type (CHAR_TYPE_SIZE)\n-     : make_unsigned_type (CHAR_TYPE_SIZE));\n+  char_type_node\n+    = (flag_signed_char\n+       ? make_signed_type (CHAR_TYPE_SIZE)\n+       : make_unsigned_type (CHAR_TYPE_SIZE));\n   record_builtin_type (RID_CHAR, \"char\", char_type_node);\n \n   long_integer_type_node = make_signed_type (LONG_TYPE_SIZE);\n@@ -4843,8 +4843,8 @@ init_decl_processing ()\n   TREE_TYPE (void_zero_node) = void_type_node;\n \n   string_type_node = build_pointer_type (char_type_node);\n-  const_string_type_node =\n-    build_pointer_type (build_type_variant (char_type_node, 1, 0));\n+  const_string_type_node\n+    = build_pointer_type (build_type_variant (char_type_node, 1, 0));\n #if 0\n   record_builtin_type (RID_MAX, NULL_PTR, string_type_node);\n #endif\n@@ -4873,8 +4873,8 @@ init_decl_processing ()\n     = build_function_type (integer_type_node, NULL_TREE);\n \n   ptr_type_node = build_pointer_type (void_type_node);\n-  const_ptr_type_node =\n-    build_pointer_type (build_type_variant (void_type_node, 1, 0));\n+  const_ptr_type_node\n+    = build_pointer_type (build_type_variant (void_type_node, 1, 0));\n #if 0\n   record_builtin_type (RID_MAX, NULL_PTR, ptr_type_node);\n #endif\n@@ -4964,9 +4964,9 @@ init_decl_processing ()\n   builtin_function (\"__builtin_constant_p\", int_ftype_int,\n \t\t    BUILT_IN_CONSTANT_P, NULL_PTR);\n \n-  builtin_return_address_fndecl =\n-  builtin_function (\"__builtin_return_address\", ptr_ftype_unsigned,\n-\t\t    BUILT_IN_RETURN_ADDRESS, NULL_PTR);\n+  builtin_return_address_fndecl\n+    = builtin_function (\"__builtin_return_address\", ptr_ftype_unsigned,\n+\t\t\tBUILT_IN_RETURN_ADDRESS, NULL_PTR);\n \n   builtin_function (\"__builtin_frame_address\", ptr_ftype_unsigned,\n \t\t    BUILT_IN_FRAME_ADDRESS, NULL_PTR);\n@@ -5278,12 +5278,15 @@ init_decl_processing ()\n       __t_desc_type_node = make_lang_type (RECORD_TYPE);\n       __i_desc_type_node = make_lang_type (RECORD_TYPE);\n       __m_desc_type_node = make_lang_type (RECORD_TYPE);\n-      __t_desc_array_type =\n-\tbuild_array_type (build_pointer_type (__t_desc_type_node), NULL_TREE);\n-      __i_desc_array_type =\n-\tbuild_array_type (build_pointer_type (__i_desc_type_node), NULL_TREE);\n-      __m_desc_array_type =\n-\tbuild_array_type (build_pointer_type (__m_desc_type_node), NULL_TREE);\n+      __t_desc_array_type\n+\t= build_array_type (build_pointer_type (__t_desc_type_node),\n+\t\t\t    NULL_TREE);\n+      __i_desc_array_type\n+\t= build_array_type (build_pointer_type (__i_desc_type_node),\n+\t\t\t    NULL_TREE);\n+      __m_desc_array_type\n+\t= build_array_type (build_pointer_type (__m_desc_type_node),\n+\t\t\t    NULL_TREE);\n \n       fields[0] = build_lang_field_decl (FIELD_DECL, get_identifier (\"name\"),\n \t\t\t\t\t string_type_node);\n@@ -6816,11 +6819,11 @@ expand_static_init (decl, init)\n \t      pfvlist = tree_cons (NULL_TREE, PFV, void_list_node);\n \n \t      push_lang_context (lang_name_c);\n-\t      atexit_fndecl = \n-\t\tbuiltin_function (\"atexit\",\n-\t\t\t\t  build_function_type (void_type_node,\n-\t\t\t\t\t\t       pfvlist),\n-\t\t\t\t  NOT_BUILT_IN, NULL_PTR);\n+\t      atexit_fndecl\n+\t\t= builtin_function (\"atexit\",\n+\t\t\t\t    build_function_type (void_type_node,\n+\t\t\t\t\t\t\t pfvlist),\n+\t\t\t\t    NOT_BUILT_IN, NULL_PTR);\n \t      assemble_external (atexit_fndecl);\n \t      Atexit = default_conversion (atexit_fndecl);\n \t      pop_lang_context ();\n@@ -7845,8 +7848,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    }\n \t  else if (RIDBIT_SETP (RID_TYPEDEF, specbits))\n \t    pedwarn (\"ANSI C++ forbids typedef which does not specify a type\");\n-\t  else if (declspecs == NULL_TREE &&\n-\t\t   (innermost_code != CALL_EXPR || pedantic))\n+\t  else if (declspecs == NULL_TREE\n+\t\t   && (innermost_code != CALL_EXPR || pedantic))\n \t    cp_pedwarn (\"ANSI C++ forbids declaration `%D' with no type or storage class\",\n \t\t\tdname);\n \t  type = integer_type_node;\n@@ -8342,11 +8345,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t      }\n \t\t  }\n \n-\t\titype =\n-\t\t  fold (build_binary_op (MINUS_EXPR,\n-\t\t\t\t\t convert (index_type, size),\n-\t\t\t\t\t convert (index_type,\n-\t\t\t\t\t\t  integer_one_node), 1));\n+\t\titype\n+\t\t  = fold (build_binary_op (MINUS_EXPR,\n+\t\t\t\t\t   convert (index_type, size),\n+\t\t\t\t\t   convert (index_type,\n+\t\t\t\t\t\t    integer_one_node), 1));\n \t\tif (! TREE_CONSTANT (itype))\n \t\t  itype = variable_size (itype);\n \t\telse if (TREE_OVERFLOW (itype))\n@@ -8437,9 +8440,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n \t    /* Say it's a definition only for the CALL_EXPR\n \t       closest to the identifier.  */\n-\t    funcdecl_p =\n-\t      inner_decl && (TREE_CODE (inner_decl) == IDENTIFIER_NODE\n-\t\t\t     || TREE_CODE (inner_decl) == BIT_NOT_EXPR);\n+\t    funcdecl_p\n+\t      = inner_decl && (TREE_CODE (inner_decl) == IDENTIFIER_NODE\n+\t\t\t       || TREE_CODE (inner_decl) == BIT_NOT_EXPR);\n \n \t    if (ctype == NULL_TREE\n \t\t&& decl_context == FIELD\n@@ -8503,8 +8506,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\terror (\"return value type specifier for constructor ignored\");\n \t\t    }\n \t\t    type = build_pointer_type (ctype);\n-\t\t    if (decl_context == FIELD &&\n-\t\t\tIS_SIGNATURE (current_class_type))\n+\t\t    if (decl_context == FIELD\n+\t\t\t&& IS_SIGNATURE (current_class_type))\n \t\t      {\n \t\t\terror (\"constructor not allowed in signature\");\n \t\t\treturn void_type_node;\n@@ -8819,12 +8822,12 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\telse if (uses_template_parms (ctype))\n \t\t  {\n                     if (TREE_CODE (type) == FUNCTION_TYPE)\n-\t\t      type = \n-\t\t\tbuild_cplus_method_type (build_type_variant (ctype,\n-\t\t\t\t\t\t\t\t     constp,\n-\t\t\t\t\t\t\t\t     volatilep),\n-\t\t\t\t\t\t TREE_TYPE (type),\n-\t\t\t\t\t\t TYPE_ARG_TYPES (type));\n+\t\t      type\n+\t\t\t= build_cplus_method_type (build_type_variant (ctype,\n+\t\t\t\t\t\t\t\t       constp,\n+\t\t\t\t\t\t\t\t       volatilep),\n+\t\t\t\t\t\t   TREE_TYPE (type),\n+\t\t\t\t\t\t   TYPE_ARG_TYPES (type));\n   \t\t  }\n \t\telse\n \t\t  {\n@@ -9982,10 +9985,10 @@ grok_op_properties (decl, virtualp, friendp)\n      \n       /* Take care of function decl if we had syntax errors.  */\n       if (argtypes == NULL_TREE)\n-\tTREE_TYPE (decl) =\n-\t  build_function_type (ptr_type_node,\n-\t\t\t       hash_tree_chain (integer_type_node,\n-\t\t\t\t\t\tvoid_list_node));\n+\tTREE_TYPE (decl)\n+\t  = build_function_type (ptr_type_node,\n+\t\t\t\t hash_tree_chain (integer_type_node,\n+\t\t\t\t\t\t  void_list_node));\n       else\n \tTREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl));\n     }\n@@ -9996,10 +9999,10 @@ grok_op_properties (decl, virtualp, friendp)\n \trevert_static_member_fn (&decl, NULL, NULL);\n      \n       if (argtypes == NULL_TREE)\n-\tTREE_TYPE (decl) =\n-\t  build_function_type (void_type_node,\n-\t\t\t       hash_tree_chain (ptr_type_node,\n-\t\t\t\t\t\tvoid_list_node));\n+\tTREE_TYPE (decl)\n+\t  = build_function_type (void_type_node,\n+\t\t\t\t hash_tree_chain (ptr_type_node,\n+\t\t\t\t\t\t  void_list_node));\n       else\n \t{\n \t  TREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl));\n@@ -11673,16 +11676,15 @@ finish_function (lineno, call_poplevel, nested)\n \t  /* At the end, call delete if that's what's requested.  */\n \t  if (TYPE_GETS_REG_DELETE (current_class_type))\n \t    /* This NOP_EXPR means we are in a static call context.  */\n-\t    exprstmt =\n-\t      build_method_call\n-\t\t(build_indirect_ref\n-\t\t (build1 (NOP_EXPR, build_pointer_type (current_class_type),\n-\t\t\t  error_mark_node),\n-\t\t  NULL_PTR),\n-\t\t ansi_opname[(int) DELETE_EXPR],\n-\t\t tree_cons (NULL_TREE, current_class_ptr,\n-\t\t\t    build_tree_list (NULL_TREE, virtual_size)),\n-\t\t NULL_TREE, LOOKUP_NORMAL);\n+\t    exprstmt\n+\t      = build_method_call (build_indirect_ref (build1 (NOP_EXPR,\n+\t\t\t\t\t\t\t       build_pointer_type (current_class_type),\n+\t\t\t\t\t\t\t       error_mark_node),\n+\t\t\t\t\t\t       NULL_PTR),\n+\t\t\t\t   ansi_opname[(int) DELETE_EXPR],\n+\t\t\t\t   tree_cons (NULL_TREE, current_class_ptr,\n+\t\t\t\t\t      build_tree_list (NULL_TREE, virtual_size)),\n+\t\t\t\t   NULL_TREE, LOOKUP_NORMAL);\n \t  else if (TYPE_USES_VIRTUAL_BASECLASSES (current_class_type))\n \t    exprstmt = build_x_delete (ptr_type_node, current_class_ptr, 0,\n \t\t\t\t       virtual_size);"}, {"sha": "83363db7033fd8f265685399376a9bb6a83bc44e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -265,32 +265,32 @@ init_exception_processing ()\n \n   push_lang_context (lang_name_c);\n \n-  catch_match_fndecl =\n-    builtin_function (flag_rtti\n-\t\t      ? \"__throw_type_match_rtti\"\n-\t\t      : \"__throw_type_match\",\n-\t\t      build_function_type (ptr_type_node,\n-\t\t\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t      tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t\t\t\t    void_list_node)))),\n-\t\t      NOT_BUILT_IN, NULL_PTR);\n-  find_first_exception_match_fndecl =\n-    builtin_function (\"__find_first_exception_table_match\",\n-\t\t      build_function_type (ptr_type_node,\n-\t\t\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t      void_list_node)),\n-\t\t      NOT_BUILT_IN, NULL_PTR);\n-  unwind_fndecl =\n-    builtin_function (\"__unwind_function\",\n-\t\t      build_function_type (void_type_node,\n-\t\t\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t      void_list_node)),\n-\t\t      NOT_BUILT_IN, NULL_PTR);\n-  empty_fndecl =\n-    builtin_function (\"__empty\",\n-\t\t      build_function_type (void_type_node, void_list_node),\n-\t\t      NOT_BUILT_IN, NULL_PTR);\n+  catch_match_fndecl\n+    = builtin_function (flag_rtti\n+\t\t\t? \"__throw_type_match_rtti\"\n+\t\t\t: \"__throw_type_match\",\n+\t\t\tbuild_function_type (ptr_type_node,\n+\t\t\t\t\t     tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t\ttree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t\t\t\t      void_list_node)))),\n+\t\t\tNOT_BUILT_IN, NULL_PTR);\n+  find_first_exception_match_fndecl\n+    = builtin_function (\"__find_first_exception_table_match\",\n+\t\t\tbuild_function_type (ptr_type_node,\n+\t\t\t\t\t     tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t\tvoid_list_node)),\n+\t\t\tNOT_BUILT_IN, NULL_PTR);\n+  unwind_fndecl\n+    = builtin_function (\"__unwind_function\",\n+\t\t\tbuild_function_type (void_type_node,\n+\t\t\t\t\t     tree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t\tvoid_list_node)),\n+\t\t\tNOT_BUILT_IN, NULL_PTR);\n+  empty_fndecl\n+    = builtin_function (\"__empty\",\n+\t\t\tbuild_function_type (void_type_node, void_list_node),\n+\t\t\tNOT_BUILT_IN, NULL_PTR);\n   DECL_EXTERNAL (empty_fndecl) = 1;\n   TREE_PUBLIC (empty_fndecl) = 1;\n "}, {"sha": "56db108ccde0ca75d3b891152d3cab67f2df37d9", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -328,8 +328,8 @@ extract_scalar_init (decl, init)\n \n       to = XEXP (r, 0);\n \n-      if (! (to == value ||\n-\t     (GET_CODE (to) == SUBREG && XEXP (to, 0) == value)))\n+      if (! (to == value\n+\t     || (GET_CODE (to) == SUBREG && XEXP (to, 0) == value)))\n \treturn 0;\n \n       r = XEXP (r, 1);"}, {"sha": "99295e65b9c09ef9d62b6ab56978612a569dabd3", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -202,10 +202,10 @@ add_friends (type, name, friend_type)\n \t}\n       list = TREE_CHAIN (list);\n     }\n-  DECL_FRIENDLIST (typedecl) =\n-    tree_cons (name,\n-\t       build_tree_list (friend_type, NULL_TREE),\n-\t       DECL_FRIENDLIST (typedecl));\n+  DECL_FRIENDLIST (typedecl)\n+    = tree_cons (name,\n+\t\t build_tree_list (friend_type, NULL_TREE),\n+\t\t DECL_FRIENDLIST (typedecl));\n   if (! strncmp (IDENTIFIER_POINTER (name),\n \t\t IDENTIFIER_POINTER (ansi_opname[(int) MODIFY_EXPR]),\n \t\t strlen (IDENTIFIER_POINTER (ansi_opname[(int) MODIFY_EXPR]))))"}, {"sha": "5c882566275b401dd5101e96c49f194b69430d00", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -123,8 +123,8 @@ expand_direct_vtbls_init (real_binfo, binfo, init_self, can_elide, addr)\n     {\n       tree real_base_binfo = TREE_VEC_ELT (real_binfos, i);\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      int is_not_base_vtable =\n-\ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (real_binfo));\n+      int is_not_base_vtable\n+\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (real_binfo));\n       if (! TREE_VIA_VIRTUAL (real_base_binfo))\n \texpand_direct_vtbls_init (real_base_binfo, base_binfo,\n \t\t\t\t  is_not_base_vtable, can_elide, addr);"}, {"sha": "2588d44fca8a765f59d0ec290d28b5d431fbd93c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -1632,8 +1632,8 @@ hack_identifier (value, name)\n \t\t  if (TREE_CODE (value) == VAR_DECL)\n \t\t    error (\"static member `%s' is %s\",\n \t\t\t   IDENTIFIER_POINTER (name),\n-\t\t\t   TREE_PRIVATE (value) ? \"private\" :\n-\t\t\t   \"from a private base class\");\n+\t\t\t   TREE_PRIVATE (value) ? \"private\"\n+\t\t\t\t\t\t: \"from a private base class\");\n \t\t  else\n \t\t    error (\"enum `%s' is from private base class\",\n \t\t\t   IDENTIFIER_POINTER (name));"}, {"sha": "03d27adbb6e1242f6d62d8352760a24ccdc18dbd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -1179,8 +1179,8 @@ instantiate_class_template (type)\n \t\t\tTREE_VEC_LENGTH (args), NULL_TREE);\n \t    BINFO_INHERITANCE_CHAIN (elt) = binfo;\n \n-\t    if (! uses_template_parms (type) &&\n-\t\tTYPE_SIZE (complete_type (TREE_TYPE (elt))) == NULL_TREE)\n+\t    if (! uses_template_parms (type)\n+\t\t&& TYPE_SIZE (complete_type (TREE_TYPE (elt))) == NULL_TREE)\n \t      cp_error (\"base class `%T' of `%T' has incomplete type\",\n \t\t\tTREE_TYPE (elt), type);\n \t  }\n@@ -1265,9 +1265,9 @@ instantiate_class_template (type)\n \t      &TREE_VEC_ELT (args, 0), TREE_VEC_LENGTH (args), NULL_TREE);\n \n   {\n-    tree d = CLASSTYPE_FRIEND_CLASSES (type) =\n-      tsubst (CLASSTYPE_FRIEND_CLASSES (pattern), &TREE_VEC_ELT (args, 0),\n-\t      TREE_VEC_LENGTH (args), NULL_TREE);\n+    tree d = CLASSTYPE_FRIEND_CLASSES (type)\n+      = tsubst (CLASSTYPE_FRIEND_CLASSES (pattern), &TREE_VEC_ELT (args, 0),\n+\t\tTREE_VEC_LENGTH (args), NULL_TREE);\n \n     /* This does injection for friend classes.  */\n     for (; d; d = TREE_CHAIN (d))\n@@ -1600,8 +1600,8 @@ tsubst (t, args, nargs, in_decl)\n \t    else\n \t      SET_DECL_IMPLICIT_INSTANTIATION (r);\n \n-\t    DECL_TEMPLATE_INSTANTIATIONS (tmpl) =\n-\t      tree_cons (argvec, r, DECL_TEMPLATE_INSTANTIATIONS (tmpl));\n+\t    DECL_TEMPLATE_INSTANTIATIONS (tmpl)\n+\t      = tree_cons (argvec, r, DECL_TEMPLATE_INSTANTIATIONS (tmpl));\n \t  }\n \n \t/* Like grokfndecl.  If we don't do this, pushdecl will mess up our"}, {"sha": "c1afbd69197bb7a8514ee3fd79a4baaa67a381ed", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -441,8 +441,8 @@ build_dynamic_cast (type, expr)\n \tgoto fail;\n       if (TYPE_SIZE (TREE_TYPE (exprtype)) == NULL_TREE)\n \tgoto fail;\n-      if (TREE_READONLY (TREE_TYPE (exprtype)) &&\n-\t  ! TYPE_READONLY (TREE_TYPE (type)))\n+      if (TREE_READONLY (TREE_TYPE (exprtype))\n+\t  && ! TYPE_READONLY (TREE_TYPE (type)))\n \tgoto fail;\n       if (TYPE_MAIN_VARIANT (TREE_TYPE (type)) == void_type_node)\n \tbreak;\n@@ -477,8 +477,8 @@ build_dynamic_cast (type, expr)\n \tgoto fail;\n       if (TYPE_SIZE (TREE_TYPE (exprtype)) == NULL_TREE)\n \tgoto fail;\n-      if (TREE_READONLY (TREE_TYPE (exprtype)) &&\n-\t  ! TYPE_READONLY (TREE_TYPE (type)))\n+      if (TREE_READONLY (TREE_TYPE (exprtype))\n+\t  && ! TYPE_READONLY (TREE_TYPE (type)))\n \tgoto fail;\n     }\n \n@@ -833,8 +833,8 @@ expand_class_desc (tdecl, type)\n   {\n     tree arrtype = build_array_type (base_info_type_node, NULL_TREE);\n     elts = build (CONSTRUCTOR, arrtype, NULL_TREE, elts);\n-    TREE_HAS_CONSTRUCTOR (elts) = TREE_CONSTANT (elts) =\n-      TREE_STATIC (elts) = 1;\n+    TREE_HAS_CONSTRUCTOR (elts) = TREE_CONSTANT (elts)\n+      = TREE_STATIC (elts) = 1;\n     complete_array_type (arrtype, elts, 1);\n   }\n "}, {"sha": "fa69754e770d8ca149a0e416922bd0f29a3efa9f", "filename": "gcc/cp/search.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -245,9 +245,9 @@ static struct memoized_entry *\n my_new_memoized_entry (chain)\n      struct memoized_entry *chain;\n {\n-  struct memoized_entry *p =\n-    (struct memoized_entry *)obstack_alloc (&type_obstack_entries,\n-\t\t\t\t\t    sizeof (struct memoized_entry));\n+  struct memoized_entry *p\n+    = (struct memoized_entry *)obstack_alloc (&type_obstack_entries,\n+\t\t\t\t\t      sizeof (struct memoized_entry));\n   bzero ((char *) p, sizeof (struct memoized_entry));\n   MEMOIZED_CHAIN (p) = chain;\n   MEMOIZED_UID (p) = ++my_memoized_entry_counter;\n@@ -854,9 +854,9 @@ compute_access (basetype_path, field)\n   /* Replaces static decl above.  */\n   tree previous_scope;\n #endif\n-  int static_mem =\n-    ((TREE_CODE (field) == FUNCTION_DECL && DECL_STATIC_FUNCTION_P (field))\n-     || (TREE_CODE (field) != FUNCTION_DECL && TREE_STATIC (field)));\n+  int static_mem\n+    = ((TREE_CODE (field) == FUNCTION_DECL && DECL_STATIC_FUNCTION_P (field))\n+       || (TREE_CODE (field) != FUNCTION_DECL && TREE_STATIC (field)));\n \n   if (! flag_access_control)\n     return access_public_node;\n@@ -2182,8 +2182,8 @@ get_abstract_virtuals_1 (binfo, do_self, abstract_virtuals)\n   for (i = 0; i < n_baselinks; i++)\n     {\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      int is_not_base_vtable =\n-\ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n+      int is_not_base_vtable\n+\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n       if (! TREE_VIA_VIRTUAL (base_binfo))\n \tabstract_virtuals\n \t  = get_abstract_virtuals_1 (base_binfo, is_not_base_vtable,\n@@ -2887,8 +2887,8 @@ fixup_virtual_upcast_offsets (real_binfo, binfo, init_self, can_elide, addr, ori\n     {\n       tree real_base_binfo = TREE_VEC_ELT (real_binfos, i);\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      int is_not_base_vtable =\n-\ti != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (real_binfo));\n+      int is_not_base_vtable\n+\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (real_binfo));\n       if (! TREE_VIA_VIRTUAL (real_base_binfo))\n \tfixup_virtual_upcast_offsets (real_base_binfo, base_binfo,\n \t\t\t\t      is_not_base_vtable, can_elide, addr,"}, {"sha": "9d2322d2a53da3721a31a12c24fd7241ee74a73a", "filename": "gcc/cp/sig.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Fsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsig.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -400,8 +400,8 @@ match_method_types (sig_mtype, class_mtype)\n   /* Compare the first argument `this.'  */\n   {\n     /* Get the type of what the `optr' is pointing to.  */\n-    tree sig_this =\n-      TREE_TYPE (TREE_TYPE (TYPE_FIELDS (TREE_VALUE (sig_arg_types))));\n+    tree sig_this\n+      = TREE_TYPE (TREE_TYPE (TYPE_FIELDS (TREE_VALUE (sig_arg_types))));\n     tree class_this = TREE_VALUE (class_arg_types);\n \n     if (TREE_CODE (class_this) == RECORD_TYPE)\t/* Is `this' a sig ptr?  */\n@@ -790,9 +790,9 @@ build_signature_pointer_constructor (lhs, rhs)\n \n   if (! ((TREE_CODE (rhstype) == POINTER_TYPE\n \t  && TREE_CODE (TREE_TYPE (rhstype)) == RECORD_TYPE)\n-\t || (TYPE_LANG_SPECIFIC (rhstype) &&\n-\t     (IS_SIGNATURE_POINTER (rhstype)\n-\t      || IS_SIGNATURE_REFERENCE (rhstype)))))\n+\t || (TYPE_LANG_SPECIFIC (rhstype)\n+\t     && (IS_SIGNATURE_POINTER (rhstype)\n+\t\t || IS_SIGNATURE_REFERENCE (rhstype)))))\n     {\n       error (\"invalid assignment to signature pointer or reference\");\n       return error_mark_node;\n@@ -814,8 +814,8 @@ build_signature_pointer_constructor (lhs, rhs)\n       saveable_obstack = &permanent_obstack;\n     }\n \n-  if (TYPE_LANG_SPECIFIC (rhstype) &&\n-      (IS_SIGNATURE_POINTER (rhstype) || IS_SIGNATURE_REFERENCE (rhstype)))\n+  if (TYPE_LANG_SPECIFIC (rhstype)\n+      && (IS_SIGNATURE_POINTER (rhstype) || IS_SIGNATURE_REFERENCE (rhstype)))\n     {\n       if (SIGNATURE_TYPE (rhstype) == sig_ty)\n \t{\n@@ -968,10 +968,10 @@ build_signature_method_call (function, parms)\n     /* Cast the signature method to have `this' of a normal pointer type.  */\n     tree old_this = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (pfn))));\n \n-    TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (pfn)))) =\n-      build_type_variant (build_pointer_type (basetype),\n-\t\t\t  TYPE_READONLY (old_this),\n-\t\t\t  TYPE_VOLATILE (old_this));\n+    TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (pfn))))\n+      = build_type_variant (build_pointer_type (basetype),\n+\t\t\t    TYPE_READONLY (old_this),\n+\t\t\t    TYPE_VOLATILE (old_this));\n \n     direct_call = build_function_call (pfn, new_parms);\n "}, {"sha": "f3779df79e6da6841e036088147dba8178b4807b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb53fb84a96ecfc7b5f207df6ed13014ec23a9d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=beb53fb84a96ecfc7b5f207df6ed13014ec23a9d", "patch": "@@ -4397,8 +4397,8 @@ build_unary_op (code, xarg, noconvert)\n \tif (staticp (arg))\n \t  TREE_CONSTANT (addr) = 1;\n \n-\tif (TREE_CODE (argtype) == POINTER_TYPE &&\n-\t    TREE_CODE (TREE_TYPE (argtype)) == METHOD_TYPE)\n+\tif (TREE_CODE (argtype) == POINTER_TYPE\n+\t    && TREE_CODE (TREE_TYPE (argtype)) == METHOD_TYPE)\n \t  {\n \t    build_ptrmemfunc_type (argtype);\n \t    addr = build_ptrmemfunc (argtype, addr, 0);\n@@ -5575,8 +5575,8 @@ build_modify_expr (lhs, modifycode, rhs)\n \n   /* Handle assignment to signature pointers/refs.  */\n \n-  if (TYPE_LANG_SPECIFIC (lhstype) &&\n-      (IS_SIGNATURE_POINTER (lhstype) || IS_SIGNATURE_REFERENCE (lhstype)))\n+  if (TYPE_LANG_SPECIFIC (lhstype)\n+      && (IS_SIGNATURE_POINTER (lhstype) || IS_SIGNATURE_REFERENCE (lhstype)))\n     {\n       return build_signature_pointer_constructor (lhs, rhs);\n     }"}]}