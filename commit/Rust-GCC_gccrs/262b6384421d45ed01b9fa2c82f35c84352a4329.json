{"sha": "262b6384421d45ed01b9fa2c82f35c84352a4329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyYjYzODQ0MjFkNDVlZDAxYjlmYTJjODJmMzVjODQzNTJhNDMyOQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@worldnet.fr", "date": "2000-03-05T22:25:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-05T22:25:36Z"}, "message": "dwarf2out.c (UNALIGNED_WORD_ASM_OP): Support 2 bytes pointer.\n\n        * dwarf2out.c (UNALIGNED_WORD_ASM_OP): Support 2 bytes pointer.\n        (ASM_OUTPUT_DWARF_ADDR_CONST): Use UNALIGNED_WORD_ASM_OP.\n        (DWARF_ARANGES_PAD_SIZE): New define.\n        (output_aranges): Use it to pad the address range header.\n        (DWARF_ROUND): Fix for non power of 2 rounding.\n\nFrom-SVN: r32347", "tree": {"sha": "93d37bf15f8bc47cdb238031e04881b688e5a5cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93d37bf15f8bc47cdb238031e04881b688e5a5cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/262b6384421d45ed01b9fa2c82f35c84352a4329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262b6384421d45ed01b9fa2c82f35c84352a4329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/262b6384421d45ed01b9fa2c82f35c84352a4329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262b6384421d45ed01b9fa2c82f35c84352a4329/comments", "author": null, "committer": null, "parents": [{"sha": "92df03e1de663fcbe7b71e882939018579f69cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92df03e1de663fcbe7b71e882939018579f69cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92df03e1de663fcbe7b71e882939018579f69cbf"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "6329243a86465791d7bab57c24d56bf728375fbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262b6384421d45ed01b9fa2c82f35c84352a4329/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262b6384421d45ed01b9fa2c82f35c84352a4329/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=262b6384421d45ed01b9fa2c82f35c84352a4329", "patch": "@@ -1,3 +1,11 @@\n+2000-03-05  Stephane Carrez  <stcarrez@worldnet.fr>\n+\n+\t* dwarf2out.c (UNALIGNED_WORD_ASM_OP): Support 2 bytes pointer.\n+\t(ASM_OUTPUT_DWARF_ADDR_CONST): Use UNALIGNED_WORD_ASM_OP.\n+\t(DWARF_ARANGES_PAD_SIZE): New define.\n+\t(output_aranges): Use it to pad the address range header.\n+\t(DWARF_ROUND): Fix for non power of 2 rounding.\n+\n 2000-03-05  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* mkdeps.c (deps_calc_target): Remove incorrect 'const'."}, {"sha": "a44162e30e2de08321e13558e357e3481a1acd4f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262b6384421d45ed01b9fa2c82f35c84352a4329/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262b6384421d45ed01b9fa2c82f35c84352a4329/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=262b6384421d45ed01b9fa2c82f35c84352a4329", "patch": "@@ -159,7 +159,7 @@ dw_fde_node;\n \n /* Round SIZE up to the nearest BOUNDARY.  */\n #define DWARF_ROUND(SIZE,BOUNDARY) \\\n-  (((SIZE) + (BOUNDARY) - 1) & ~((BOUNDARY) - 1))\n+  ((((SIZE) + (BOUNDARY) - 1) / (BOUNDARY)) * (BOUNDARY))\n \n /* Offsets recorded in opcodes are a multiple of this alignment factor.  */\n #ifdef STACK_GROWS_DOWNWARD\n@@ -312,7 +312,8 @@ static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, char *));\n \n #ifndef UNALIGNED_WORD_ASM_OP\n #define UNALIGNED_WORD_ASM_OP \\\n-  (PTR_SIZE == 8 ? UNALIGNED_DOUBLE_INT_ASM_OP : UNALIGNED_INT_ASM_OP)\n+  ((PTR_SIZE) == 8 ? UNALIGNED_DOUBLE_INT_ASM_OP : \\\n+   ((PTR_SIZE) == 2 ? UNALIGNED_SHORT_ASM_OP : UNALIGNED_INT_ASM_OP))\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DELTA2\n@@ -361,7 +362,7 @@ static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, char *));\n #ifndef ASM_OUTPUT_DWARF_ADDR_CONST\n #define ASM_OUTPUT_DWARF_ADDR_CONST(FILE,RTX)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\t\\\n+    fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_WORD_ASM_OP);\t\t\t\\\n     output_addr_const ((FILE), (RTX));\t\t\t\t\t\\\n     fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n   } while (0)\n@@ -2142,6 +2143,12 @@ extern int flag_traditional;\n #define DWARF_ARANGES_HEADER_SIZE \\\n   (DWARF_ROUND (2 * DWARF_OFFSET_SIZE + 4, PTR_SIZE * 2) - DWARF_OFFSET_SIZE)\n \n+/* Size of padding portion in the address range info.  It must be\n+   aligned to twice the pointer size.  */\n+#define DWARF_ARANGES_PAD_SIZE \\\n+  (DWARF_ROUND (2 * DWARF_OFFSET_SIZE + 4, PTR_SIZE * 2) \\\n+   - (2 * DWARF_OFFSET_SIZE + 4))\n+\n /* The default is to have gcc emit the line number tables.  */\n #ifndef DWARF2_ASM_LINE_DEBUG_INFO\n #define DWARF2_ASM_LINE_DEBUG_INFO 0\n@@ -5363,19 +5370,19 @@ output_aranges ()\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  /* We need to align to twice the pointer size here.\n-     If DWARF_OFFSET_SIZE == 4, then we have emitted 12 bytes, and need 4\n-     bytes of padding to align for either 4 or 8 byte pointers.  */\n-  ASM_OUTPUT_DWARF_DATA4 (asm_out_file, 0);\n-  /* If DWARF_OFFSET_SIZE == 8, then we have emitted 20 bytes, and need 12\n-     bytes of padding to align for 8 byte pointers.  We have already emitted\n-     4 bytes of padding, so emit 8 more here.  */\n-  if (DWARF_OFFSET_SIZE == 8)\n-    fprintf (asm_out_file, \",0,0\");\n \n-  if (flag_debug_asm)\n-    fprintf (asm_out_file, \"\\t%s Pad to %d byte boundary\",\n-\t     ASM_COMMENT_START, 2 * PTR_SIZE);\n+  /* We need to align to twice the pointer size here.  */\n+  if (DWARF_ARANGES_PAD_SIZE)\n+    {\n+      /* Pad using a 2 bytes word so that padding is correct\n+         for any pointer size.  */\n+      ASM_OUTPUT_DWARF_DATA2 (asm_out_file, 0);\n+      for (i = 2; i < DWARF_ARANGES_PAD_SIZE; i += 2)\n+        fprintf (asm_out_file, \",0\");\n+      if (flag_debug_asm)\n+        fprintf (asm_out_file, \"\\t%s Pad to %d byte boundary\",\n+                 ASM_COMMENT_START, 2 * PTR_SIZE);\n+    }\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, text_section_label);"}]}