{"sha": "d86e60855f05a0e493f8362c12bfd40d5432d337", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2ZTYwODU1ZjA1YTBlNDkzZjgzNjJjMTJiZmQ0MGQ1NDMyZDMzNw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T12:23:00Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T17:26:43Z"}, "message": "libphobos: Add section support code for OpenBSD (PR99691)\n\nlibphobos/ChangeLog:\n\n\tPR d/99691\n\t* configure: Regenerate.\n\t* libdruntime/config/common/threadasm.S: Add __OpenBSD__.\n\t* libdruntime/gcc/backtrace.d: Import core.sys.openbsd.dlfcn on\n\tOpenBSD platforms.\n\t* libdruntime/gcc/sections/elf.d (SharedElf): Define on OpenBSD.\n\t(linkMapForHandle): Implement for OpenBSD.\n\t(exeLinkMap): Remove.\n\t(getDependencies): Adjust dlpi_addr on OpenBSD.\n\t(handleForName): Implement for OpenBSD.\n\t(IterateManually): Define on OpenBSD.\n\t* libdruntime/gcc/sections/package.d (SectionsElf): Define on OpenBSD.\n\t* m4/druntime/libraries.m4 (DRUNTIME_LIBRARIES_ATOMIC): Test for\n\tenable_libatomic.\n\t(DRUNTIME_LIBRARIES_BACKTRACE): Test for enable_libbacktrace.", "tree": {"sha": "edf1a0c62961d7b8be8d26e09172b88a74f63912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf1a0c62961d7b8be8d26e09172b88a74f63912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d86e60855f05a0e493f8362c12bfd40d5432d337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86e60855f05a0e493f8362c12bfd40d5432d337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86e60855f05a0e493f8362c12bfd40d5432d337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86e60855f05a0e493f8362c12bfd40d5432d337/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bffc4b37e85c7f6092dfb0fbe4067d268e97b46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bffc4b37e85c7f6092dfb0fbe4067d268e97b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bffc4b37e85c7f6092dfb0fbe4067d268e97b46"}], "stats": {"total": 69, "additions": 48, "deletions": 21}, "files": [{"sha": "2c0f57cef031b322fa6d80c02d1ff4a238a66ee9", "filename": "libphobos/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=d86e60855f05a0e493f8362c12bfd40d5432d337", "patch": "@@ -14917,7 +14917,7 @@ fi\n \n   DCFG_HAVE_LIBATOMIC=false\n   LIBATOMIC=\n-  if test \"x$with_libatomic\" != \"xno\"; then :\n+  if test \"x$enable_libatomic\" != \"xno\" && test \"x$with_libatomic\" != \"xno\"; then :\n \n     DCFG_HAVE_LIBATOMIC=true\n     LIBATOMIC=../../libatomic/libatomic_convenience.la\n@@ -14953,7 +14953,7 @@ if test \"${with_libbacktrace+set}\" = set; then :\n fi\n \n \n-  if test \"x$with_libbacktrace\" != \"xno\"; then :\n+  if test \"x$enable_libbacktrace\" != \"xno\" && test \"x$with_libbacktrace\" != \"xno\"; then :\n \n     LIBBACKTRACE=../../libbacktrace/libbacktrace.la\n "}, {"sha": "35462170e585798dfef45c4311467f301c1d2069", "filename": "libphobos/libdruntime/config/common/threadasm.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Flibdruntime%2Fconfig%2Fcommon%2Fthreadasm.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Flibdruntime%2Fconfig%2Fcommon%2Fthreadasm.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fcommon%2Fthreadasm.S?ref=d86e60855f05a0e493f8362c12bfd40d5432d337", "patch": "@@ -22,7 +22,7 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#if (__linux__ || __FreeBSD__ || __NetBSD__ || __DragonFly__) && __ELF__\n+#if (__linux__ || __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __DragonFly__) && __ELF__\n /*\n  * Mark the resulting object file as not requiring execution permissions on\n  * stack memory. The absence of this section would mark the whole resulting"}, {"sha": "8f5582d746990146edd5b24fb4ccaacd88def62e", "filename": "libphobos/libdruntime/gcc/backtrace.d", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fbacktrace.d?ref=d86e60855f05a0e493f8362c12bfd40d5432d337", "patch": "@@ -424,8 +424,10 @@ private:\n         import core.sys.freebsd.dlfcn;\n     else version (NetBSD)\n         import core.sys.netbsd.dlfcn;\n+    else version (OpenBSD)\n+        import core.sys.openbsd.dlfcn;\n     else version (Solaris)\n-        import core.sys.netbsd.dlfcn;\n+        import core.sys.solaris.dlfcn;\n     else version (Posix)\n         import core.sys.posix.dlfcn;\n "}, {"sha": "3480fb9474c472a9d242b590cf5dfc2a5c1d18e8", "filename": "libphobos/libdruntime/gcc/sections/elf.d", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf.d?ref=d86e60855f05a0e493f8362c12bfd40d5432d337", "patch": "@@ -33,6 +33,7 @@ version (CRuntime_Glibc) enum SharedELF = true;\n else version (CRuntime_Musl) enum SharedELF = true;\n else version (FreeBSD) enum SharedELF = true;\n else version (NetBSD) enum SharedELF = true;\n+else version (OpenBSD) enum SharedELF = true;\n else version (DragonFlyBSD) enum SharedELF = true;\n else version (CRuntime_UClibc) enum SharedELF = true;\n else version (Solaris) enum SharedELF = true;\n@@ -62,6 +63,12 @@ else version (NetBSD)\n     import core.sys.netbsd.sys.elf;\n     import core.sys.netbsd.sys.link_elf;\n }\n+else version (OpenBSD)\n+{\n+    import core.sys.openbsd.dlfcn;\n+    import core.sys.openbsd.sys.elf;\n+    import core.sys.openbsd.sys.link_elf;\n+}\n else version (DragonFlyBSD)\n {\n     import core.sys.dragonflybsd.dlfcn;\n@@ -688,20 +695,22 @@ version (Shared)\n @nogc nothrow:\n     link_map* linkMapForHandle(void* handle)\n     {\n-        link_map* map;\n-        const success = dlinfo(handle, RTLD_DI_LINKMAP, &map) == 0;\n-        safeAssert(success, \"Failed to get DSO info.\");\n-        return map;\n+        static if (__traits(compiles, RTLD_DI_LINKMAP))\n+        {\n+            link_map* map;\n+            const success = dlinfo(handle, RTLD_DI_LINKMAP, &map) == 0;\n+            safeAssert(success, \"Failed to get DSO info.\");\n+            return map;\n+        }\n+        else version (OpenBSD)\n+        {\n+            safeAssert(handle !is null, \"Failed to get DSO info.\");\n+            return cast(link_map*)handle;\n+        }\n+        else\n+            static assert(0, \"unimplemented\");\n     }\n \n-     link_map* exeLinkMap(link_map* map)\n-     {\n-         safeAssert(map !is null, \"Invalid link_map.\");\n-         while (map.l_prev !is null)\n-             map = map.l_prev;\n-         return map;\n-     }\n-\n     DSO* dsoForHandle(void* handle)\n     {\n         DSO* pdso;\n@@ -766,6 +775,8 @@ version (Shared)\n                     strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate\n                 else version (NetBSD)\n                     strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate\n+                else version (OpenBSD)\n+                    strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate\n                 else version (DragonFlyBSD)\n                     strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate\n                 else version (Solaris)\n@@ -795,9 +806,21 @@ version (Shared)\n \n     void* handleForName(const char* name)\n     {\n-        auto handle = .dlopen(name, RTLD_NOLOAD | RTLD_LAZY);\n-        version (Solaris) { }\n-        else if (handle !is null) .dlclose(handle); // drop reference count\n+        version (Solaris) enum refCounted = false;\n+        else version (OpenBSD) enum refCounted = false;\n+        else enum refCounted = true;\n+\n+        static if (__traits(compiles, RTLD_NOLOAD))\n+            enum flags = (RTLD_NOLOAD | RTLD_LAZY);\n+        else\n+            enum flags = RTLD_LAZY;\n+\n+        auto handle = .dlopen(name, flags);\n+        static if (refCounted)\n+        {\n+            if (handle !is null)\n+                .dlclose(handle); // drop reference count\n+        }\n         return handle;\n     }\n }\n@@ -891,6 +914,7 @@ bool findDSOInfoForAddr(in void* addr, dl_phdr_info* result=null) nothrow @nogc\n {\n     version (linux)        enum IterateManually = true;\n     else version (NetBSD)  enum IterateManually = true;\n+    else version (OpenBSD) enum IterateManually = true;\n     else version (Solaris) enum IterateManually = true;\n     else                   enum IterateManually = false;\n "}, {"sha": "1e887cdcb8ffdd0b514df5f23447115f7c1cc8b7", "filename": "libphobos/libdruntime/gcc/sections/package.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fpackage.d?ref=d86e60855f05a0e493f8362c12bfd40d5432d337", "patch": "@@ -27,6 +27,7 @@ version (CRuntime_Musl)   version = SectionsElf;\n version (CRuntime_UClibc) version = SectionsElf;\n version (FreeBSD)         version = SectionsElf;\n version (NetBSD)          version = SectionsElf;\n+version (OpenBSD)         version = SectionsElf;\n version (DragonFlyBSD)    version = SectionsElf;\n version (Solaris)         version = SectionsElf;\n version (OSX)             version = SectionsMacho;"}, {"sha": "45a56f6f76a791fa58920ca9f3f4ee7b79a877bc", "filename": "libphobos/m4/druntime/libraries.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Fm4%2Fdruntime%2Flibraries.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86e60855f05a0e493f8362c12bfd40d5432d337/libphobos%2Fm4%2Fdruntime%2Flibraries.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime%2Flibraries.m4?ref=d86e60855f05a0e493f8362c12bfd40d5432d337", "patch": "@@ -116,7 +116,7 @@ AC_DEFUN([DRUNTIME_LIBRARIES_ATOMIC],\n \n   DCFG_HAVE_LIBATOMIC=false\n   LIBATOMIC=\n-  AS_IF([test \"x$with_libatomic\" != \"xno\"], [\n+  AS_IF([test \"x$enable_libatomic\" != \"xno\" && test \"x$with_libatomic\" != \"xno\"], [\n     DCFG_HAVE_LIBATOMIC=true\n     LIBATOMIC=../../libatomic/libatomic_convenience.la\n   ], [\n@@ -145,7 +145,7 @@ AC_DEFUN([DRUNTIME_LIBRARIES_BACKTRACE],\n     AS_HELP_STRING([--without-libbacktrace],\n                    [Do not use libbacktrace in core.runtime (default: auto)]))\n \n-  AS_IF([test \"x$with_libbacktrace\" != \"xno\"], [\n+  AS_IF([test \"x$enable_libbacktrace\" != \"xno\" && test \"x$with_libbacktrace\" != \"xno\"], [\n     LIBBACKTRACE=../../libbacktrace/libbacktrace.la\n \n     gdc_save_CPPFLAGS=$CPPFLAGS"}]}