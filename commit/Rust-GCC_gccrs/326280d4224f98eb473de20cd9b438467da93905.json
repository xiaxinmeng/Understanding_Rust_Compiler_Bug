{"sha": "326280d4224f98eb473de20cd9b438467da93905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI2MjgwZDQyMjRmOThlYjQ3M2RlMjBjZDliNDM4NDY3ZGE5MzkwNQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2012-09-04T18:33:29Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2012-09-04T18:33:29Z"}, "message": "This patch works around a parsing problem with g++ 4.3.\n\nThis patch works around a parsing problem with g++ 4.3.  The parser is\nfailing to lookup calls to the template function reserve when called\nfrom other member functions:\n\nvec_t<T>::reserve<A> (...)\n\nThe parser thinks that the '<' in reserve<A> is a less-than operation.\nThis problem does not happen after 4.3.\n\nThis code is going to change significantly, so this won't be needed\nsoon.\n\nTested on x86_64 with g++ 4.3 and g++ 4.6.\n\n\tPR bootstrap/54478\n\t* vec.h (vec_t::alloc): Remove explicit type specification\n\tin call to reserve.\n\t(vec_t::copy): Likewise.\n\t(vec_t::reserve): Likewise.\n\t(vec_t::reserve_exact): Likewise.\n\t(vec_t::safe_splice): Likewise.\n\t(vec_t::safe_push): Likewise.\n\t(vec_t::safe_grow): Likewise.\n\t(vec_t::safe_grow_cleared): Likewise.\n\t(vec_t::safe_insert): Likewise.\n\nFrom-SVN: r190943", "tree": {"sha": "ab7c738ac77989266c4eb6d97a4cfac854185de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab7c738ac77989266c4eb6d97a4cfac854185de7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/326280d4224f98eb473de20cd9b438467da93905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/326280d4224f98eb473de20cd9b438467da93905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/326280d4224f98eb473de20cd9b438467da93905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/326280d4224f98eb473de20cd9b438467da93905/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96672a3e826a879876daf3391fbc79daede9fa82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96672a3e826a879876daf3391fbc79daede9fa82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96672a3e826a879876daf3391fbc79daede9fa82"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "bbcf050751c08ccef4ee091c964c7c4101d495bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/326280d4224f98eb473de20cd9b438467da93905/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/326280d4224f98eb473de20cd9b438467da93905/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=326280d4224f98eb473de20cd9b438467da93905", "patch": "@@ -1,3 +1,17 @@\n+2012-09-04  Diego Novillo  <dnovillo@google.com>\n+\n+\tPR bootstrap/54478\n+\t* vec.h (vec_t::alloc): Remove explicit type specification\n+\tin call to reserve.\n+\t(vec_t::copy): Likewise.\n+\t(vec_t::reserve): Likewise.\n+\t(vec_t::reserve_exact): Likewise.\n+\t(vec_t::safe_splice): Likewise.\n+\t(vec_t::safe_push): Likewise.\n+\t(vec_t::safe_grow): Likewise.\n+\t(vec_t::safe_grow_cleared): Likewise.\n+\t(vec_t::safe_insert): Likewise.\n+\n 2012-09-04  Richard Henderson  <rth@redhat.com>\n \n \t* alias.c (read_dependence): Return true for ALIAS_SET_MEMORY_BARRIER."}, {"sha": "c0f1bb2cd2130114730f0d2303eee9570a0ad1ef", "filename": "gcc/vec.h", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/326280d4224f98eb473de20cd9b438467da93905/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/326280d4224f98eb473de20cd9b438467da93905/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=326280d4224f98eb473de20cd9b438467da93905", "patch": "@@ -655,7 +655,7 @@ template<enum vec_allocation_t A>\n vec_t<T> *\n vec_t<T>::alloc (int nelems MEM_STAT_DECL)\n {\n-  return vec_t<T>::reserve_exact<A> ((vec_t<T> *) NULL, nelems PASS_MEM_STAT);\n+  return reserve_exact<A> ((vec_t<T> *) NULL, nelems PASS_MEM_STAT);\n }\n \n template<typename T>\n@@ -699,8 +699,8 @@ vec_t<T>::copy (ALONE_MEM_STAT_DECL)\n \n   if (len)\n     {\n-      new_vec = vec_t<T>::reserve_exact<A> (static_cast<vec_t<T> *> (NULL),\n-\t\t\t\t\t    len PASS_MEM_STAT);\n+      new_vec = reserve_exact<A> (static_cast<vec_t<T> *> (NULL),\n+\t\t\t\t  len PASS_MEM_STAT);\n       new_vec->embedded_init (len, len);\n       memcpy (new_vec->address (), vec_, sizeof (T) * len);\n     }\n@@ -736,7 +736,7 @@ vec_t<T>::reserve (vec_t<T> **vec, int nelems VEC_CHECK_DECL MEM_STAT_DECL)\n   bool extend = (*vec) ? !(*vec)->space (nelems VEC_CHECK_PASS) : nelems != 0;\n \n   if (extend)\n-    *vec = vec_t<T>::reserve<A> (*vec, nelems PASS_MEM_STAT);\n+    *vec = reserve<A> (*vec, nelems PASS_MEM_STAT);\n \n   return extend;\n }\n@@ -755,7 +755,7 @@ vec_t<T>::reserve_exact (vec_t<T> **vec, int nelems VEC_CHECK_DECL\n   bool extend = (*vec) ? !(*vec)->space (nelems VEC_CHECK_PASS) : nelems != 0;\n \n   if (extend)\n-    *vec = vec_t<T>::reserve_exact<A> (*vec, nelems PASS_MEM_STAT);\n+    *vec = reserve_exact<A> (*vec, nelems PASS_MEM_STAT);\n \n   return extend;\n }\n@@ -796,8 +796,7 @@ vec_t<T>::safe_splice (vec_t<T> **dst, vec_t<T> *src VEC_CHECK_DECL\n {\n   if (src)\n     {\n-      vec_t<T>::reserve_exact<A> (dst, VEC_length (T, src) VEC_CHECK_PASS\n-\t\t\t          MEM_STAT_INFO);\n+      reserve_exact<A> (dst, VEC_length (T, src) VEC_CHECK_PASS MEM_STAT_INFO);\n       (*dst)->splice (src VEC_CHECK_PASS);\n     }\n }\n@@ -843,7 +842,7 @@ template<enum vec_allocation_t A>\n T &\n vec_t<T>::safe_push (vec_t<T> **vec, T obj VEC_CHECK_DECL MEM_STAT_DECL)\n {\n-  vec_t<T>::reserve<A> (vec, 1 VEC_CHECK_PASS PASS_MEM_STAT);\n+  reserve<A> (vec, 1 VEC_CHECK_PASS PASS_MEM_STAT);\n   return (*vec)->quick_push (obj VEC_CHECK_PASS);\n }\n \n@@ -858,7 +857,7 @@ template<enum vec_allocation_t A>\n T *\n vec_t<T>::safe_push (vec_t<T> **vec, const T *ptr VEC_CHECK_DECL MEM_STAT_DECL)\n {\n-  vec_t<T>::reserve<A> (vec, 1 VEC_CHECK_PASS PASS_MEM_STAT);\n+  reserve<A> (vec, 1 VEC_CHECK_PASS PASS_MEM_STAT);\n   return (*vec)->quick_push (ptr VEC_CHECK_PASS);\n }\n \n@@ -898,8 +897,8 @@ vec_t<T>::safe_grow (vec_t<T> **vec, int size VEC_CHECK_DECL MEM_STAT_DECL)\n {\n   VEC_ASSERT (size >= 0 && VEC_length (T, *vec) <= (unsigned)size,\n \t      \"grow\", T, A);\n-  vec_t<T>::reserve_exact<A> (vec, size - (int)VEC_length (T, *vec)\n-\t\t              VEC_CHECK_PASS PASS_MEM_STAT);\n+  reserve_exact<A> (vec, size - (int)VEC_length (T, *vec)\n+\t\t    VEC_CHECK_PASS PASS_MEM_STAT);\n   (*vec)->prefix_.num_ = size;\n }\n \n@@ -915,7 +914,7 @@ vec_t<T>::safe_grow_cleared (vec_t<T> **vec, int size VEC_CHECK_DECL\n \t\t\t     MEM_STAT_DECL)\n {\n   int oldsize = VEC_length (T, *vec);\n-  vec_t<T>::safe_grow<A> (vec, size VEC_CHECK_PASS PASS_MEM_STAT);\n+  safe_grow<A> (vec, size VEC_CHECK_PASS PASS_MEM_STAT);\n   memset (&((*vec)->address ()[oldsize]), 0, sizeof (T) * (size - oldsize));\n }\n \n@@ -972,7 +971,7 @@ void\n vec_t<T>::safe_insert (vec_t<T> **vec, unsigned ix, T obj VEC_CHECK_DECL\n \t\t       MEM_STAT_DECL)\n {\n-  vec_t<T>::reserve<A> (vec, 1 VEC_CHECK_PASS PASS_MEM_STAT);\n+  reserve<A> (vec, 1 VEC_CHECK_PASS PASS_MEM_STAT);\n   (*vec)->quick_insert (ix, obj VEC_CHECK_PASS);\n }\n \n@@ -988,7 +987,7 @@ void\n vec_t<T>::safe_insert (vec_t<T> **vec, unsigned ix, T *ptr VEC_CHECK_DECL\n \t\t       MEM_STAT_DECL)\n {\n-  vec_t<T>::reserve<A> (vec, 1 VEC_CHECK_PASS PASS_MEM_STAT);\n+  reserve<A> (vec, 1 VEC_CHECK_PASS PASS_MEM_STAT);\n   (*vec)->quick_insert (ix, ptr VEC_CHECK_PASS);\n }\n "}]}