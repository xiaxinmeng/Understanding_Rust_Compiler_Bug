{"sha": "61d2e0eb0779deb4d28e791fcbe7d45320188a5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFkMmUwZWIwNzc5ZGViNGQyOGU3OTFmY2JlN2Q0NTMyMDE4OGE1ZA==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2005-02-01T19:22:47Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2005-02-01T19:22:47Z"}, "message": "natPlainDatagramSocketImplPosix.cc (getOption): Support IP_MULTICAST_LOOP.\n\n2005-01-31  Anthony Green  <green@redhat.com>\n\n        * gnu/java/net/natPlainDatagramSocketImplPosix.cc (getOption):\n        Support IP_MULTICAST_LOOP.\n        (setOption): Support IP_MULTICAST_LOOP.\n\n        * gnu/java/net/natPlainSocketImplPosix.cc (setOption): Add\n        SO_REUSEADDR support.\n        (getOption): Support SO_REUSEADDR.\n\nFrom-SVN: r94555", "tree": {"sha": "ffd71d91b383945d5a4c9caacc285a2bf8c5e3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd71d91b383945d5a4c9caacc285a2bf8c5e3c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61d2e0eb0779deb4d28e791fcbe7d45320188a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61d2e0eb0779deb4d28e791fcbe7d45320188a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61d2e0eb0779deb4d28e791fcbe7d45320188a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61d2e0eb0779deb4d28e791fcbe7d45320188a5d/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f619dcab0c25b63b139e174adc3152cb8af244c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f619dcab0c25b63b139e174adc3152cb8af244c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f619dcab0c25b63b139e174adc3152cb8af244c9"}], "stats": {"total": 99, "additions": 89, "deletions": 10}, "files": [{"sha": "972745b5c553fc18bf8bfa29703f127ecedd0a99", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d2e0eb0779deb4d28e791fcbe7d45320188a5d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d2e0eb0779deb4d28e791fcbe7d45320188a5d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=61d2e0eb0779deb4d28e791fcbe7d45320188a5d", "patch": "@@ -1,3 +1,13 @@\n+2005-01-31  Anthony Green  <green@redhat.com>\n+\n+\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc (getOption):\n+\tSupport IP_MULTICAST_LOOP.\n+\t(setOption): Support IP_MULTICAST_LOOP.\n+\n+\t* gnu/java/net/natPlainSocketImplPosix.cc (setOption): Add\n+\tSO_REUSEADDR support.\n+\t(getOption): Support SO_REUSEADDR.\n+\n 2004-01-28  Jeroen Frijters  <jeroen@frijters.net>\n \n \tPR libgcj/19649"}, {"sha": "5c76779d9dd02d78817bc18d65c3d367f25b0631", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplPosix.cc", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d2e0eb0779deb4d28e791fcbe7d45320188a5d/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d2e0eb0779deb4d28e791fcbe7d45320188a5d/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc?ref=61d2e0eb0779deb4d28e791fcbe7d45320188a5d", "patch": "@@ -602,9 +602,27 @@ gnu::java::net::PlainDatagramSocketImpl::setOption (jint optID,\n         return;\n \t\n       case _Jv_IP_MULTICAST_LOOP_ :\n-        throw new ::java::net::SocketException (\n-          JvNewStringUTF (\"IP_MULTICAST_LOOP: not yet implemented\"));\n-        return;\n+\thaddress = ((::java::net::InetAddress *) value)->addr;\n+\tlen = haddress->length;\n+\tif (len == 4)\n+\t  {\n+\t    level = IPPROTO_IP;\n+\t    opname = IP_MULTICAST_LOOP;\n+\t  }\n+#if defined (HAVE_INET6) && defined (IPV6_MULTICAST_LOOP)\n+\telse if (len == 16)\n+\t  {\n+\t    level = IPPROTO_IPV6;\n+\t    opname = IPV6_MULTICAST_LOOP;\n+\t  }\n+#endif\n+\telse\n+\t  throw\n+\t    new ::java::net::SocketException (JvNewStringUTF (\"invalid address length\"));\n+\tif (::setsockopt (native_fd, level, opname, (char *) &val,\n+\t\t\t  val_len) != 0)\n+\t  goto error;\n+\treturn;\n \t\n       case _Jv_IP_TOS_ :\n         if (::setsockopt (native_fd, SOL_SOCKET, IP_TOS, (char *) &val,\n@@ -631,6 +649,7 @@ gnu::java::net::PlainDatagramSocketImpl::getOption (jint optID)\n   socklen_t val_len = sizeof(val);\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n+  int level, opname;\n \n   switch (optID)\n     {\n@@ -738,8 +757,47 @@ gnu::java::net::PlainDatagramSocketImpl::getOption (jint optID)\n         break;\n \t\n       case _Jv_IP_MULTICAST_LOOP_ :\n-\tif (::getsockopt (native_fd, SOL_SOCKET, IP_MULTICAST_LOOP, (char *) &val,\n-\t    &val_len) != 0)\n+\t// cache the local address\n+\tif (localAddress == NULL)\n+\t  {\t\n+\t    jbyteArray laddr;\n+\t    if (::getsockname (native_fd, (sockaddr*) &u, &addrlen) != 0)\n+\t      goto error;\n+\t    if (u.address.sin_family == AF_INET)\n+\t      {\n+\t\tladdr = JvNewByteArray (4);\n+\t\tmemcpy (elements (laddr), &u.address.sin_addr, 4);\n+\t      }\n+#ifdef HAVE_INET6\n+            else if (u.address.sin_family == AF_INET6)\n+\t      {\n+\t\tladdr = JvNewByteArray (16);\n+\t\tmemcpy (elements (laddr), &u.address6.sin6_addr, 16);\n+\t      }\n+#endif\n+\t    else\n+\t      throw new ::java::net::SocketException (\n+\t\t\t      JvNewStringUTF (\"invalid family\"));\n+\t    localAddress = new ::java::net::InetAddress (laddr, NULL);\n+\t    \n+\t  }\n+\tif (localAddress->addr->length == 4) \n+\t  {\n+\t    level = IPPROTO_IP;\n+\t    opname = IP_MULTICAST_LOOP;\n+\t  }\n+#if defined (HAVE_INET6) && defined (IPV6_MULTICAST_LOOP)\n+\telse if (localAddress->addr->length == 16)\n+\t  {\n+\t    level = IPPROTO_IPV6;\n+\t    opname = IPV6_MULTICAST_LOOP;\n+\t  }\n+#endif\n+\telse\n+\t  throw\n+\t    new ::java::net::SocketException (JvNewStringUTF (\"invalid address length\"));\n+\tif (::getsockopt (native_fd, level, opname, (char *) &val,\n+\t\t\t  &val_len) != 0)\n \t  goto error;\n \treturn new ::java::lang::Boolean (val != 0);\n \t"}, {"sha": "46b56bb6efbf3cfb8f4ba278a93529d2cb8e2aa2", "filename": "libjava/gnu/java/net/natPlainSocketImplPosix.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d2e0eb0779deb4d28e791fcbe7d45320188a5d/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d2e0eb0779deb4d28e791fcbe7d45320188a5d/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc?ref=61d2e0eb0779deb4d28e791fcbe7d45320188a5d", "patch": "@@ -637,9 +637,14 @@ gnu::java::net::PlainSocketImpl::setOption (jint optID, ::java::lang::Object *va\n         return;\n \t\n       case _Jv_SO_REUSEADDR_ :\n-        throw new ::java::net::SocketException (\n-          JvNewStringUTF (\"SO_REUSEADDR: not valid for TCP\"));\n-        return;\n+#if defined(SO_REUSEADDR)\n+\tif (::setsockopt (native_fd, SOL_SOCKET, SO_REUSEADDR, (char *) &val,\n+\t    val_len) != 0)\n+\t  goto error;\n+#else\n+        throw new ::java::lang::InternalError (\n+          JvNewStringUTF (\"SO_REUSEADDR not supported\"));\n+#endif \n \n       case _Jv_SO_TIMEOUT_ :\n         timeout = val;\n@@ -780,8 +785,14 @@ gnu::java::net::PlainSocketImpl::getOption (jint optID)\n       break;\n \t\n     case _Jv_SO_REUSEADDR_ :\n-      throw new ::java::net::SocketException\n-        (JvNewStringUTF (\"SO_REUSEADDR: not valid for TCP\"));\n+#if defined(SO_REUSEADDR)\n+      if (::getsockopt (native_fd, SOL_SOCKET, SO_REUSEADDR, (char *) &val,\n+                        &val_len) != 0)\n+        goto error;    \n+#else\n+        throw new ::java::lang::InternalError (\n+          JvNewStringUTF (\"SO_REUSEADDR not supported\"));\n+#endif \n       break;\n \n     case _Jv_SO_TIMEOUT_ :"}]}