{"sha": "7bae46f4b2043eea685ca1a5e153c60f2ad34447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhZTQ2ZjRiMjA0M2VlYTY4NWNhMWE1ZTE1M2M2MGYyYWQzNDQ0Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-03-30T09:07:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-03-30T09:07:34Z"}, "message": "call.c (build_method_call): Handle non-scoped destructors, too.\n\n\t* call.c (build_method_call): Handle non-scoped destructors, too.\n\t* pt.c (tsubst_copy): Likewise.\n\t* pt.c (print_template_context): Split out...\n\t(push_tinst_level): ...from here.\n\t* friend.c (is_friend): Don't pass a type to decl_function_context.\n\t* typeck.c (convert_for_initialization): Always hand off\n\tconversions to class type.\n\nFrom-SVN: r18908", "tree": {"sha": "bc5dd3d19137e91da336f0aa687ff8aae3e1af70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5dd3d19137e91da336f0aa687ff8aae3e1af70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bae46f4b2043eea685ca1a5e153c60f2ad34447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bae46f4b2043eea685ca1a5e153c60f2ad34447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bae46f4b2043eea685ca1a5e153c60f2ad34447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bae46f4b2043eea685ca1a5e153c60f2ad34447/comments", "author": null, "committer": null, "parents": [{"sha": "e18db50d1f83eb98b5d72550c67ace78e41ee7b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18db50d1f83eb98b5d72550c67ace78e41ee7b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18db50d1f83eb98b5d72550c67ace78e41ee7b0"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "d2f56656de749916bfe11ce99eae60fc92a777a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7bae46f4b2043eea685ca1a5e153c60f2ad34447", "patch": "@@ -1,3 +1,16 @@\n+Mon Mar 30 08:55:42 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_method_call): Handle non-scoped destructors, too.\n+\t* pt.c (tsubst_copy): Likewise.\n+\n+\t* pt.c (print_template_context): Split out...\n+\t(push_tinst_level): ...from here.\n+\n+\t* friend.c (is_friend): Don't pass a type to decl_function_context.\n+\n+\t* typeck.c (convert_for_initialization): Always hand off\n+\tconversions to class type.\n+\n Sun Mar 29 20:01:59 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* friend.c (is_friend): Local classes have the same access as the"}, {"sha": "d066a582ad8b58dabc294ad2cae89fa86c264828", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7bae46f4b2043eea685ca1a5e153c60f2ad34447", "patch": "@@ -571,8 +571,9 @@ build_method_call (instance, name, parms, basetype_path, flags)\n     {\n       if (TREE_CODE (name) == BIT_NOT_EXPR)\n \t{\n-\t  tree type = get_aggr_from_typedef (TREE_OPERAND (name, 0), 1);\n-\t  name = build_min_nt (BIT_NOT_EXPR, type);\n+\t  tree type = get_aggr_from_typedef (TREE_OPERAND (name, 0), 0);\n+\t  if (type)\n+\t    name = build_min_nt (BIT_NOT_EXPR, type);\n \t}\n \n       return build_min_nt (METHOD_CALL_EXPR, name, instance, parms, NULL_TREE);"}, {"sha": "304936a82ac6ff446b127a8e9c9d47e92588247d", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=7bae46f4b2043eea685ca1a5e153c60f2ad34447", "patch": "@@ -49,7 +49,8 @@ is_friend (type, supplicant)\n   declp = (TREE_CODE_CLASS (TREE_CODE (supplicant)) == 'd');\n \n   /* Local classes have the same access as the enclosing function.  */\n-  context = hack_decl_function_context (supplicant);\n+  context = declp ? supplicant : TYPE_MAIN_DECL (supplicant);\n+  context = hack_decl_function_context (context);\n   if (context)\n     {\n       supplicant = context;"}, {"sha": "4f87928cfc19a473e9e9720846ac3c96625be770", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7bae46f4b2043eea685ca1a5e153c60f2ad34447", "patch": "@@ -3133,6 +3133,28 @@ extern int max_tinst_depth;\n int depth_reached = 0;\n #endif\n \n+/* Print out all the template instantiations that we are currently\n+   working on.  */\n+\n+void\n+print_template_context ()\n+{\n+  struct tinst_level *p = current_tinst_level;\n+  int line = lineno;\n+  char *file = input_filename;\n+\n+  for (; p; p = p->next)\n+    {\n+      cp_error (\"  instantiated from `%D'\", p->decl);\n+      lineno = p->line;\n+      input_filename = p->file;\n+    }\n+  error (\"  instantiated from here\");\n+\n+  lineno = line;\n+  input_filename = file;\n+}\n+\n static int\n push_tinst_level (d)\n      tree d;\n@@ -3141,10 +3163,6 @@ push_tinst_level (d)\n \n   if (tinst_depth >= max_tinst_depth)\n     {\n-      struct tinst_level *p = current_tinst_level;\n-      int line = lineno;\n-      char *file = input_filename;\n-\n       /* If the instantiation in question still has unbound template parms,\n \t we don't really care if we can't instantiate it, so just return.\n          This happens with base instantiation for implicit `typename'.  */\n@@ -3156,16 +3174,7 @@ push_tinst_level (d)\n       error (\" (use -ftemplate-depth-NN to increase the maximum)\");\n       cp_error (\"  instantiating `%D'\", d);\n \n-      for (; p; p = p->next)\n-\t{\n-\t  cp_error (\"  instantiated from `%D'\", p->decl);\n-\t  lineno = p->line;\n-\t  input_filename = p->file;\n-\t}\n-      error (\"  instantiated from here\");\n-\n-      lineno = line;\n-      input_filename = file;\n+      print_template_context ();\n \n       return 0;\n     }\n@@ -4836,7 +4845,9 @@ tsubst_copy (t, args, in_decl)\n \tif (TREE_CODE (name) == BIT_NOT_EXPR)\n \t  {\n \t    name = tsubst_copy (TREE_OPERAND (name, 0), args, in_decl);\n-\t    name = build1 (BIT_NOT_EXPR, NULL_TREE, TYPE_MAIN_VARIANT (name));\n+\t    if (TREE_CODE (name) != IDENTIFIER_NODE)\n+\t      name = TYPE_MAIN_VARIANT (name);\n+\t    name = build1 (BIT_NOT_EXPR, NULL_TREE, name);\n \t  }\n \telse if (TREE_CODE (name) == SCOPE_REF\n \t\t && TREE_CODE (TREE_OPERAND (name, 1)) == BIT_NOT_EXPR)"}, {"sha": "dfcda9ad21c794675f394495d7b8fad62ee73b74", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bae46f4b2043eea685ca1a5e153c60f2ad34447/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7bae46f4b2043eea685ca1a5e153c60f2ad34447", "patch": "@@ -7031,8 +7031,7 @@ convert_for_initialization (exp, type, rhs, flags, errtype, fndecl, parmnum)\n       && (IS_SIGNATURE_POINTER (type) || IS_SIGNATURE_REFERENCE (type)))\n     return build_signature_pointer_constructor (type, rhs);\n \n-  if (IS_AGGR_TYPE (type)\n-      && (TYPE_NEEDS_CONSTRUCTING (type) || TREE_HAS_CONSTRUCTOR (rhs)))\n+  if (IS_AGGR_TYPE (type))\n     return ocp_convert (type, rhs, CONV_IMPLICIT|CONV_FORCE_TEMP, flags);\n \n   if (type == TREE_TYPE (rhs))"}]}