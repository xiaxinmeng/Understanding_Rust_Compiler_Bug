{"sha": "c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5", "node_id": "C_kwDOANBUbNoAKGMyYjYxMGU3YzZjODlmZDQyMmM1YzMxZjAxMDIzYmNkZGYzY2Y0YTU", "commit": {"author": {"name": "Zhao Wei Liew", "email": "zhaoweiliew@gmail.com", "date": "2022-01-28T18:36:39Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-01-28T18:36:39Z"}, "message": "match.pd: Simplify 1 / X for integer X [PR95424]\n\nThis patch implements an optimization for the following C++ code:\n\nint f(int x) {\n    return 1 / x;\n}\n\nint f(unsigned int x) {\n    return 1 / x;\n}\n\nBefore this patch, x86-64 gcc -std=c++20 -O3 produces the following assembly:\n\nf(int):\n    xor edx, edx\n    mov eax, 1\n    idiv edi\n    ret\nf(unsigned int):\n    xor edx, edx\n    mov eax, 1\n    div edi\n    ret\n\nIn comparison, clang++ -std=c++20 -O3 produces the following assembly:\n\nf(int):\n    lea ecx, [rdi + 1]\n    xor eax, eax\n    cmp ecx, 3\n    cmovb eax, edi\n    ret\nf(unsigned int):\n    xor eax, eax\n    cmp edi, 1\n    sete al\n    ret\n\nClang's output is more efficient as it avoids expensive div operations.\n\nWith this patch, GCC now produces the following assembly:\n\nf(int):\n    lea eax, [rdi + 1]\n    cmp eax, 2\n    mov eax, 0\n    cmovbe eax, edi\n    ret\nf(unsigned int):\n    xor eax, eax\n    cmp edi, 1\n    sete al\n    ret\n\nwhich is virtually identical to Clang's assembly output. Any slight differences\nin the output for f(int) is possibly related to a different missed optimization.\n\nv2: https://gcc.gnu.org/pipermail/gcc-patches/2022-January/587751.html\nChanges from v2:\n1. Refactor from using a switch statement to using the built-in\nif-else statement.\n\nv1: https://gcc.gnu.org/pipermail/gcc-patches/2022-January/587634.html\nChanges from v1:\n1. Refactor common if conditions.\n2. Use build_[minus_]one_cst (type) to get -1/1 of the correct type.\n3. Match only for TRUNC_DIV_EXPR and TYPE_PRECISION (type) > 1.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/95424\n\t* match.pd: Simplify 1 / X where X is an integer.", "tree": {"sha": "5f0d362b89de28da00f3b2adeeb8d10dfa1e98d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f0d362b89de28da00f3b2adeeb8d10dfa1e98d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5/comments", "author": {"login": "zwliew", "id": 4538946, "node_id": "MDQ6VXNlcjQ1Mzg5NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4538946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zwliew", "html_url": "https://github.com/zwliew", "followers_url": "https://api.github.com/users/zwliew/followers", "following_url": "https://api.github.com/users/zwliew/following{/other_user}", "gists_url": "https://api.github.com/users/zwliew/gists{/gist_id}", "starred_url": "https://api.github.com/users/zwliew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zwliew/subscriptions", "organizations_url": "https://api.github.com/users/zwliew/orgs", "repos_url": "https://api.github.com/users/zwliew/repos", "events_url": "https://api.github.com/users/zwliew/events{/privacy}", "received_events_url": "https://api.github.com/users/zwliew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a591c71b41e18e4ff86852a974592af4962aef57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a591c71b41e18e4ff86852a974592af4962aef57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a591c71b41e18e4ff86852a974592af4962aef57"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "bd76da6ab8b09d73ed40e9b15a43233ea3abe4d2", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5", "patch": "@@ -435,6 +435,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && TYPE_UNSIGNED (type))\n    (trunc_divmod @0 @1))))\n \n+ /* 1 / X -> X == 1 for unsigned integer X.\n+    1 / X -> X >= -1 && X <= 1 ? X : 0 for signed integer X.\n+    But not for 1 / 0 so that we can get proper warnings and errors,\n+    and not for 1-bit integers as they are edge cases better handled elsewhere. */\n+(simplify\n+  (trunc_div integer_onep@0 @1)\n+  (if (INTEGRAL_TYPE_P (type) && !integer_zerop (@1) && TYPE_PRECISION (type) > 1)\n+    (if (TYPE_UNSIGNED (type))\n+      (eq @1 { build_one_cst (type); })\n+      (with { tree utype = unsigned_type_for (type); }\n+        (cond (le (plus (convert:utype @1) { build_one_cst (utype); }) { build_int_cst (utype, 2); })\n+          @1 { build_zero_cst (type); })))))\n+\n /* Combine two successive divisions.  Note that combining ceil_div\n    and floor_div is trickier and combining round_div even more so.  */\n (for div (trunc_div exact_div)"}, {"sha": "a9fc4c04058c65e11e87a98395072b82749406ee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/divide-6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-6.c?ref=c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+unsigned int f(unsigned int x) {\n+  return 1 / x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"1 / x_..D.;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"x_..D. == 1;\" \"optimized\" } } */"}, {"sha": "285279af7c210434296fbbcdc4662f98012cc747", "filename": "gcc/testsuite/gcc.dg/tree-ssa/divide-7.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-7.c?ref=c2b610e7c6c89fd422c5c31f01023bcddf3cf4a5", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int f(int x) {\n+  return 1 / x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"1 / x_..D.;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".. <= 2 ? x_..D. : 0;\" \"optimized\" } } */"}]}