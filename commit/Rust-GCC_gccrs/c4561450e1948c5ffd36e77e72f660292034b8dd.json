{"sha": "c4561450e1948c5ffd36e77e72f660292034b8dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ1NjE0NTBlMTk0OGM1ZmZkMzZlNzdlNzJmNjYwMjkyMDM0YjhkZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@soma.redhat.com", "date": "2000-07-07T22:46:52Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-07T22:46:52Z"}, "message": "Clean up configure/build longstanding issues.\n\n\n2000-07-07  Benjamin Kosnik  <bkoz@soma.redhat.com>\n\n\tClean up configure/build longstanding issues.\n\t* src/Makefile.am (AC_CXXFLAGS): Don't set @SECTION_LDFLAGS@ here.\n\t(CXXLINK): Add here, instead.\n\n\t* Makefile.am (check-install): Make sure mkcheck has execute privs.\n\t(check): Same here.\n\t* configure.in (AC_OUTPUT_COMMANDS): Remove hacks here.\n\n\t* configure.in (AC_OUTPUT_COMMANDS): Link c_io_libio.h and\n\tc_io_libio.cc instead of copying.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Do link here.\n\n\t* configure.in (AC_OUTPUT_COMMANDS): Link $THREADS.h and\n\tc++threads.h instead of copying.\n\t* acinclude.m4 (GLIBCPP_ENABLE_THREADS): Do link here.\n\nFrom-SVN: r34914", "tree": {"sha": "fd617c6d3e567e04fea8e3760cdaa1719c867bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd617c6d3e567e04fea8e3760cdaa1719c867bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4561450e1948c5ffd36e77e72f660292034b8dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4561450e1948c5ffd36e77e72f660292034b8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4561450e1948c5ffd36e77e72f660292034b8dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4561450e1948c5ffd36e77e72f660292034b8dd/comments", "author": null, "committer": null, "parents": [{"sha": "75555da78d42ce001a9bc680036ac8a43589e444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75555da78d42ce001a9bc680036ac8a43589e444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75555da78d42ce001a9bc680036ac8a43589e444"}], "stats": {"total": 2172, "additions": 1102, "deletions": 1070}, "files": [{"sha": "1fc5171fd3fed358201ac50d1d9c90bdbf4e2d7f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -1,3 +1,21 @@\n+2000-07-07  Benjamin Kosnik  <bkoz@soma.redhat.com>\n+\n+\tClean up configure/build longstanding issues.\n+\t* src/Makefile.am (AC_CXXFLAGS): Don't set @SECTION_LDFLAGS@ here.\n+\t(CXXLINK): Add here, instead.\n+\n+\t* Makefile.am (check-install): Make sure mkcheck has execute privs.\n+\t(check): Same here.\n+\t* configure.in (AC_OUTPUT_COMMANDS): Remove hacks here.\n+\n+\t* configure.in (AC_OUTPUT_COMMANDS): Link c_io_libio.h and\n+\tc_io_libio.cc instead of copying.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CSTDIO): Do link here.\n+\n+\t* configure.in (AC_OUTPUT_COMMANDS): Link $THREADS.h and\n+\tc++threads.h instead of copying.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_THREADS): Do link here.\n+\n 2000-07-07   brent verner  <brent@rcfile.org> \n \n \t* testsuite/27_io/istream_unformatted.cc (test05): New test."}, {"sha": "28da16b22ac8f8693843ac630a53d17a8bf39a9f", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -32,9 +32,11 @@ gxx_include_dir=$(includedir)/g++\n SUBDIRS = math libio src\n \n check:  $(top_builddir)/mkcheck\n+\tchmod +x  $(top_builddir)/mkcheck\n \t$(top_builddir)/mkcheck 0 $(top_builddir) $(top_srcdir)\n \n check-install: $(top_builddir)/mkcheck\n+\tchmod +x  $(top_builddir)/mkcheck\n \t$(top_builddir)/mkcheck 1 $(top_builddir) $(top_srcdir) $(prefix)\n \n #all-local:  stamp-rebuild"}, {"sha": "1f3e40dd7b0799c0415a9420bdfe83fb15fffa2f", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -71,8 +71,6 @@ CPP = @CPP@\n CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n-CSTDIO_CC = @CSTDIO_CC@\n-CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -467,9 +465,11 @@ mostlyclean distclean maintainer-clean\n \n \n check:  $(top_builddir)/mkcheck\n+\tchmod +x  $(top_builddir)/mkcheck\n \t$(top_builddir)/mkcheck 0 $(top_builddir) $(top_srcdir)\n \n check-install: $(top_builddir)/mkcheck\n+\tchmod +x  $(top_builddir)/mkcheck\n \t$(top_builddir)/mkcheck 1 $(top_builddir) $(top_srcdir) $(prefix)\n \n # Multilib Makefile bits."}, {"sha": "ca61aa61a137f4c1854126b50713bc253569f56d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -1166,52 +1166,52 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   dnl Check if a valid thread package\n   case x${enable_cstdio_flag} in\n \txlibio | x | xno | xnone | xyes)\n-\t\t# default\n-\t\tCSTDIO_H=c_io_libio.h\n-\t\tCSTDIO_CC=c_io_libio.cc\n- \t\tAC_MSG_RESULT(libio)\n-\n-\t\t# see if we are on a system with libio native (ie, linux)\n-  \t\tAC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n-\n-\t\t# bkoz XXX hack hack need version checks, this is temporary\n-\t\thas_libio=no\n-\n-  \t\tif test $has_libio = \"yes\"; then\n-   \t\t  BUILD_LIBIO_INCLUDE=\n-\t\t  need_libio=no\n-  \t\telse\n-   \t\t  BUILD_LIBIO_INCLUDE='-I../libio'\n-\t\t  need_libio=yes\n-  \t\tfi\n-  \t\tAC_SUBST(BUILD_LIBIO_INCLUDE)\n-\n-\t\t# see if the _G_config.h header needs to be built. \n-\t\t# NB: This replaces the _G_CONFIG_H machinery in libio-v2\n-\t\tAC_CHECK_HEADER(_G_config.h,  has_gconf_h=yes, has_gconf_h=no)\n-  \t\tAM_CONDITIONAL(GLIBCPP_NEED_LIBIO_CONFIG_H, test \"$has_gconf_h\" = no)\n-\t\t# bkoz XXX hack need to add support for non-glibc systems here\n-\t \thas_gconf=no\n-\n-\t\t# bkoz XXX need to add checks for this\n-\t\tneed_wlibio=yes\n-\t\t;;\n+\t  # default\n+\t  CSTDIO_H=config/c_io_libio.h\n+\t  CSTDIO_CC=config/c_io_libio.cc\n+ \t  AC_MSG_RESULT(libio)\n+\n+\t  # see if we are on a system with libio native (ie, linux)\n+  \t  AC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n+\n+\t  # bkoz XXX hack hack need version checks, this is temporary\n+\t  has_libio=no\n+\n+  \t  if test $has_libio = \"yes\"; then\n+   \t    BUILD_LIBIO_INCLUDE=\n+\t    need_libio=no\n+  \t  else\n+   \t  BUILD_LIBIO_INCLUDE='-I../libio'\n+     \t    need_libio=yes\n+  \t  fi\n+  \t  AC_SUBST(BUILD_LIBIO_INCLUDE)\n+\n+\t  # see if the _G_config.h header needs to be built. \n+\t  # NB: This replaces the _G_CONFIG_H machinery in libio-v2\n+\t  AC_CHECK_HEADER(_G_config.h,  has_gconf_h=yes, has_gconf_h=no)\n+  \t  AM_CONDITIONAL(GLIBCPP_NEED_LIBIO_CONFIG_H, test \"$has_gconf_h\" = no)\n+\t  # bkoz XXX hack need to add support for non-glibc systems here\n+\t   has_gconf=no\n+\n+\t  # bkoz XXX need to add checks for this\n+\t  need_wlibio=yes\n+\t  ;;\n         xwince)\n-                CSTDIO_H=c_io_wince.h\n-                CSTDIO_CC=c_io_wince.cc\n-                AC_MSG_RESULT(wince)\n-\n-                need_libio=no\n-                BUILD_LIBIO_INCLUDE=\n-                AC_SUBST(BUILD_LIBIO_INCLUDE)\n-                ;;\n+    \t  CSTDIO_H=config/c_io_wince.h\n+          CSTDIO_CC=config/c_io_wince.cc\n+          AC_MSG_RESULT(wince)\n+\n+          need_libio=no\n+          BUILD_LIBIO_INCLUDE=\n+          AC_SUBST(BUILD_LIBIO_INCLUDE)\n+          ;;\n \t*)\n-\t\techo \"$enable_cstdio is an unknown io package\" 1>&2\n-\t\texit 1\n-\t\t;;\n+\t  echo \"$enable_cstdio is an unknown io package\" 1>&2\n+\t  exit 1\n+\t  ;;\n   esac\n-  AC_SUBST(CSTDIO_H)\n-  AC_SUBST(CSTDIO_CC)\n+  AC_LINK_FILES($CSTDIO_H, bits/c++io.h)\n+  AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)\n ])\n@@ -1306,6 +1306,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_SUBST(THREADDEPS)\n   AC_SUBST(THREADOBJS)\n   AC_SUBST(THREADSPEC)\n+  AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n ])\n \n "}, {"sha": "45063a23ee6ff57de326ba74c8e3685a98d2bb1f", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -1178,52 +1178,52 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   dnl Check if a valid thread package\n   case x${enable_cstdio_flag} in\n \txlibio | x | xno | xnone | xyes)\n-\t\t# default\n-\t\tCSTDIO_H=c_io_libio.h\n-\t\tCSTDIO_CC=c_io_libio.cc\n- \t\tAC_MSG_RESULT(libio)\n-\n-\t\t# see if we are on a system with libio native (ie, linux)\n-  \t\tAC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n-\n-\t\t# bkoz XXX hack hack need version checks, this is temporary\n-\t\thas_libio=no\n-\n-  \t\tif test $has_libio = \"yes\"; then\n-   \t\t  BUILD_LIBIO_INCLUDE=\n-\t\t  need_libio=no\n-  \t\telse\n-   \t\t  BUILD_LIBIO_INCLUDE='-I../libio'\n-\t\t  need_libio=yes\n-  \t\tfi\n-  \t\tAC_SUBST(BUILD_LIBIO_INCLUDE)\n-\n-\t\t# see if the _G_config.h header needs to be built. \n-\t\t# NB: This replaces the _G_CONFIG_H machinery in libio-v2\n-\t\tAC_CHECK_HEADER(_G_config.h,  has_gconf_h=yes, has_gconf_h=no)\n-  \t\tAM_CONDITIONAL(GLIBCPP_NEED_LIBIO_CONFIG_H, test \"$has_gconf_h\" = no)\n-\t\t# bkoz XXX hack need to add support for non-glibc systems here\n-\t \thas_gconf=no\n-\n-\t\t# bkoz XXX need to add checks for this\n-\t\tneed_wlibio=yes\n-\t\t;;\n+\t  # default\n+\t  CSTDIO_H=config/c_io_libio.h\n+\t  CSTDIO_CC=config/c_io_libio.cc\n+ \t  AC_MSG_RESULT(libio)\n+\n+\t  # see if we are on a system with libio native (ie, linux)\n+  \t  AC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n+\n+\t  # bkoz XXX hack hack need version checks, this is temporary\n+\t  has_libio=no\n+\n+  \t  if test $has_libio = \"yes\"; then\n+   \t    BUILD_LIBIO_INCLUDE=\n+\t    need_libio=no\n+  \t  else\n+   \t  BUILD_LIBIO_INCLUDE='-I../libio'\n+     \t    need_libio=yes\n+  \t  fi\n+  \t  AC_SUBST(BUILD_LIBIO_INCLUDE)\n+\n+\t  # see if the _G_config.h header needs to be built. \n+\t  # NB: This replaces the _G_CONFIG_H machinery in libio-v2\n+\t  AC_CHECK_HEADER(_G_config.h,  has_gconf_h=yes, has_gconf_h=no)\n+  \t  AM_CONDITIONAL(GLIBCPP_NEED_LIBIO_CONFIG_H, test \"$has_gconf_h\" = no)\n+\t  # bkoz XXX hack need to add support for non-glibc systems here\n+\t   has_gconf=no\n+\n+\t  # bkoz XXX need to add checks for this\n+\t  need_wlibio=yes\n+\t  ;;\n         xwince)\n-                CSTDIO_H=c_io_wince.h\n-                CSTDIO_CC=c_io_wince.cc\n-                AC_MSG_RESULT(wince)\n-\n-                need_libio=no\n-                BUILD_LIBIO_INCLUDE=\n-                AC_SUBST(BUILD_LIBIO_INCLUDE)\n-                ;;\n+    \t  CSTDIO_H=config/c_io_wince.h\n+          CSTDIO_CC=config/c_io_wince.cc\n+          AC_MSG_RESULT(wince)\n+\n+          need_libio=no\n+          BUILD_LIBIO_INCLUDE=\n+          AC_SUBST(BUILD_LIBIO_INCLUDE)\n+          ;;\n \t*)\n-\t\techo \"$enable_cstdio is an unknown io package\" 1>&2\n-\t\texit 1\n-\t\t;;\n+\t  echo \"$enable_cstdio is an unknown io package\" 1>&2\n+\t  exit 1\n+\t  ;;\n   esac\n-  AC_SUBST(CSTDIO_H)\n-  AC_SUBST(CSTDIO_CC)\n+  AC_LINK_FILES($CSTDIO_H, bits/c++io.h)\n+  AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)\n ])\n@@ -1318,6 +1318,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_SUBST(THREADDEPS)\n   AC_SUBST(THREADOBJS)\n   AC_SUBST(THREADSPEC)\n+  AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n ])\n \n "}, {"sha": "5260280adf4c30cc25adb37e3a2354c58dbe3fe7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 988, "deletions": 962, "changes": 1950, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c4561450e1948c5ffd36e77e72f660292034b8dd"}, {"sha": "05f3a46d0b4038495cb2ef366f4cf106f2fd6d13", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -174,19 +174,9 @@ CXX=\"${CXX}\"\n \n \n blddir=`pwd`\n-# Generate mkcheck having execute privs\n-AC_OUTPUT_COMMANDS([chmod +x $blddir/mkcheck])\n-\n # Generate bits/c++config.h\n # NB: This must be the first generated file as others include it. . .\n AC_OUTPUT_COMMANDS([$srcdir/mkc++config $blddir $srcdir])\n \n # Generate bits/std_limits.h and src/limitsMEMBERS.cc\n AC_OUTPUT_COMMANDS([$srcdir/mknumeric_limits $blddir $srcdir $xcompiling])\n-\n-# Generate bits/c++threads.h\n-AC_OUTPUT_COMMANDS([cp $srcdir/config/$THREADH $blddir/bits/c++threads.h])\n-\n-# Generate bits/c++io.h and src/c++io.cc\n-AC_OUTPUT_COMMANDS([cp $srcdir/config/$CSTDIO_H $blddir/bits/c++io.h])\n-AC_OUTPUT_COMMANDS([cp $srcdir/config/$CSTDIO_CC $blddir/src/c++io.cc])"}, {"sha": "4858d3dd9ed91defee82085ebe97211662af4e0e", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -70,8 +70,6 @@ CC = @CC@\n CPP = @CPP@\n CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n-CSTDIO_CC = @CSTDIO_CC@\n-CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@"}, {"sha": "06e482ff641121e1ad50be97535b7a90e32003ca", "filename": "libstdc++-v3/math/Makefile.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.in?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -71,8 +71,6 @@ CPP = @CPP@\n CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n-CSTDIO_CC = @CSTDIO_CC@\n-CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@"}, {"sha": "7b344a49a27d169907c23c9a0ef6dc834187a2ff", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -46,7 +46,7 @@ EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n AC_CXXFLAGS = \\\n \t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \\\n-\t@SECTION_FLAGS@ @SECTION_LDFLAGS@ @DEBUG_FLAGS@ \n+\t@SECTION_FLAGS@ @DEBUG_FLAGS@ \n \n # Need to manually set this option because AC_CXXFLAGS has to be at\n # the end of the compile line so that -O2 can be overridden as the\n@@ -87,7 +87,7 @@ LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) \\\n # rules automake generates would be used.  We cannot allow CXX to be used\n # in libtool since this would add -lstdc++ to the link line which of\n # course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n headers = \\"}, {"sha": "b7bf82b1ec0cb48290d0560673c241b5ed073c29", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4561450e1948c5ffd36e77e72f660292034b8dd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=c4561450e1948c5ffd36e77e72f660292034b8dd", "patch": "@@ -69,8 +69,6 @@ CC = @CC@\n CPP = @CPP@\n CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n-CSTDIO_CC = @CSTDIO_CC@\n-CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -123,7 +121,7 @@ EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n AC_CXXFLAGS = \\\n \t$(WERROR) @WFMT_FLAGS@ @CPU_FLAGS@ @EXTRA_CXX_FLAGS@ \\\n-\t@SECTION_FLAGS@ @SECTION_LDFLAGS@ @DEBUG_FLAGS@ \n+\t@SECTION_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Need to manually set this option because AC_CXXFLAGS has to be at\n@@ -168,7 +166,7 @@ LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) \\\n # rules automake generates would be used.  We cannot allow CXX to be used\n # in libtool since this would add -lstdc++ to the link line which of\n # course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n headers = \\\n \tbits/cpp_type_traits.h \\"}]}