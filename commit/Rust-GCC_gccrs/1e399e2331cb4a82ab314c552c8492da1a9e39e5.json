{"sha": "1e399e2331cb4a82ab314c552c8492da1a9e39e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUzOTllMjMzMWNiNGE4MmFiMzE0YzU1MmM4NDkyZGExYTllMzllNQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@verizon.net", "date": "2005-06-24T23:12:32Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-06-24T23:12:32Z"}, "message": "re PR fortran/21915 ([4.0 only] Would like atanh etc. as intrinsics)\n\n2005-06-24  Jerry DeLisle <jvdelisle@verizon.net>\n\n    PR fortran/21915\n    * gfortran.h: Add symbols for new intrinsics\n    * intrinsic.c: Add acosh, asinh, and atanh\n    * intrinsic.h: Add prototypes\n    * iresolve.c (gfc_resolve_acosh): New function\n    (gfc_resolve_asinh): New\n    (gfc_resolve_atanh): New\n    * mathbuiltins.def: Add defines\n    * simplify.c (gfc_simplify_acosh): New function\n    (gfc_simplify_asinh): New\n    (gfc_simplify_atanh): New\n\nFrom-SVN: r101304", "tree": {"sha": "5e42ffb6be150d57d6f5548e53e219862aadd26c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e42ffb6be150d57d6f5548e53e219862aadd26c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e399e2331cb4a82ab314c552c8492da1a9e39e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e399e2331cb4a82ab314c552c8492da1a9e39e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e399e2331cb4a82ab314c552c8492da1a9e39e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e399e2331cb4a82ab314c552c8492da1a9e39e5/comments", "author": null, "committer": null, "parents": [{"sha": "e138a19f6b4731baded85fceef172a380d159634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e138a19f6b4731baded85fceef172a380d159634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e138a19f6b4731baded85fceef172a380d159634"}], "stats": {"total": 144, "additions": 141, "deletions": 3}, "files": [{"sha": "cd093b1fd20106e3c46036d00a814c3e6bd9a4d9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1e399e2331cb4a82ab314c552c8492da1a9e39e5", "patch": "@@ -1,3 +1,17 @@\n+2005-06-24  Jerry DeLisle <jvdelisle@verizon.net>\n+\n+\tPR fortran/21915\n+\t* gfortran.h: Add symbols for new intrinsics\n+\t* intrinsic.c: Add acosh, asinh, and atanh\n+\t* intrinsic.h: Add prototypes\n+\t* iresolve.c (gfc_resolve_acosh): New function\n+\t(gfc_resolve_asinh): New\n+\t(gfc_resolve_atanh): New\n+\t* mathbuiltins.def: Add defines\n+\t* simplify.c (gfc_simplify_acosh): New function\n+\t(gfc_simplify_asinh): New\n+\t(gfc_simplify_atanh): New\n+\n 2005-06-24  Feng Wang  <fengwang@nudt.edu.cn>\n \n \t* simplify.c (gfc_simplify_modulo): Don't clear before get result."}, {"sha": "95f556c8a5c6e2a405f2e049c6a8e37ddc0747cc", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=1e399e2331cb4a82ab314c552c8492da1a9e39e5", "patch": "@@ -272,6 +272,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_ABS,\n   GFC_ISYM_ACHAR,\n   GFC_ISYM_ACOS,\n+  GFC_ISYM_ACOSH,\n   GFC_ISYM_ADJUSTL,\n   GFC_ISYM_ADJUSTR,\n   GFC_ISYM_AIMAG,\n@@ -281,8 +282,10 @@ enum gfc_generic_isym_id\n   GFC_ISYM_ANINT,\n   GFC_ISYM_ANY,\n   GFC_ISYM_ASIN,\n+  GFC_ISYM_ASINH,\n   GFC_ISYM_ASSOCIATED,\n   GFC_ISYM_ATAN,\n+  GFC_ISYM_ATANH,\n   GFC_ISYM_ATAN2,\n   GFC_ISYM_J0,\n   GFC_ISYM_J1,"}, {"sha": "b18a1458ad33255fc3444709bc191e7d997e8b0f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=1e399e2331cb4a82ab314c552c8492da1a9e39e5", "patch": "@@ -911,6 +911,16 @@ add_functions (void)\n \n   make_generic (\"acos\", GFC_ISYM_ACOS, GFC_STD_F77);\n \n+  add_sym_1 (\"acosh\", 1, 1, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_r, gfc_simplify_acosh, gfc_resolve_acosh,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  add_sym_1 (\"dacosh\", 1, 1, BT_REAL, dd, GFC_STD_GNU,\n+\t     NULL, gfc_simplify_acosh, gfc_resolve_acosh,\n+\t     x, BT_REAL, dd, REQUIRED);\n+\n+  make_generic (\"acosh\", GFC_ISYM_ACOSH, GFC_STD_GNU);\n+\n   add_sym_1 (\"adjustl\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_adjustl, NULL,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n@@ -980,6 +990,16 @@ add_functions (void)\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"asin\", GFC_ISYM_ASIN, GFC_STD_F77);\n+  \n+  add_sym_1 (\"asinh\", 1, 1, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_r, gfc_simplify_asinh, gfc_resolve_asinh,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  add_sym_1 (\"dasinh\", 1, 1, BT_REAL, dd, GFC_STD_GNU,\n+\t     NULL, gfc_simplify_asinh, gfc_resolve_asinh,\n+\t     x, BT_REAL, dd, REQUIRED);\n+\n+  make_generic (\"asinh\", GFC_ISYM_ASINH, GFC_STD_GNU);\n \n   add_sym_2 (\"associated\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_associated, NULL, NULL,\n@@ -996,6 +1016,16 @@ add_functions (void)\n \t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atan\", GFC_ISYM_ATAN, GFC_STD_F77);\n+  \n+  add_sym_1 (\"atanh\", 1, 1, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_r, gfc_simplify_atanh, gfc_resolve_atanh,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  add_sym_1 (\"datanh\", 1, 1, BT_REAL, dd, GFC_STD_GNU,\n+\t     NULL, gfc_simplify_atanh, gfc_resolve_atanh,\n+\t     x, BT_REAL, dd, REQUIRED);\n+\n+  make_generic (\"atanh\", GFC_ISYM_ATANH, GFC_STD_GNU);\n \n   add_sym_2 (\"atan2\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_atan2, gfc_simplify_atan2, gfc_resolve_atan2,\n@@ -1006,7 +1036,7 @@ add_functions (void)\n \t     y, BT_REAL, dd, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atan2\", GFC_ISYM_ATAN2, GFC_STD_F77);\n-\n+  \n   /* Bessel and Neumann functions for G77 compatibility.  */\n   add_sym_1 (\"besj0\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,"}, {"sha": "9a6b95890e433de7032d7ca61a1d029623d8500c", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=1e399e2331cb4a82ab314c552c8492da1a9e39e5", "patch": "@@ -156,6 +156,7 @@ try gfc_check_unlink_sub (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_abs (gfc_expr *);\n gfc_expr *gfc_simplify_achar (gfc_expr *);\n gfc_expr *gfc_simplify_acos (gfc_expr *);\n+gfc_expr *gfc_simplify_acosh (gfc_expr *);\n gfc_expr *gfc_simplify_adjustl (gfc_expr *);\n gfc_expr *gfc_simplify_adjustr (gfc_expr *);\n gfc_expr *gfc_simplify_aimag (gfc_expr *);\n@@ -164,7 +165,9 @@ gfc_expr *gfc_simplify_dint (gfc_expr *);\n gfc_expr *gfc_simplify_anint (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_dnint (gfc_expr *);\n gfc_expr *gfc_simplify_asin (gfc_expr *);\n+gfc_expr *gfc_simplify_asinh (gfc_expr *);\n gfc_expr *gfc_simplify_atan (gfc_expr *);\n+gfc_expr *gfc_simplify_atanh (gfc_expr *);\n gfc_expr *gfc_simplify_atan2 (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_bit_size (gfc_expr *);\n gfc_expr *gfc_simplify_btest (gfc_expr *, gfc_expr *);\n@@ -259,6 +262,7 @@ gfc_expr *gfc_convert_constant (gfc_expr *, bt, int);\n /* Resolution functions.  */\n void gfc_resolve_abs (gfc_expr *, gfc_expr *);\n void gfc_resolve_acos (gfc_expr *, gfc_expr *);\n+void gfc_resolve_acosh (gfc_expr *, gfc_expr *);\n void gfc_resolve_aimag (gfc_expr *, gfc_expr *);\n void gfc_resolve_aint (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_dint (gfc_expr *, gfc_expr *);\n@@ -267,7 +271,9 @@ void gfc_resolve_anint (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_dnint (gfc_expr *, gfc_expr *);\n void gfc_resolve_any (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_asin (gfc_expr *, gfc_expr *);\n+void gfc_resolve_asinh (gfc_expr *, gfc_expr *);\n void gfc_resolve_atan (gfc_expr *, gfc_expr *);\n+void gfc_resolve_atanh (gfc_expr *, gfc_expr *);\n void gfc_resolve_atan2 (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_besn (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_btest (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "a45001ed7cdb4710db8ebd7fc79ab6cdb8e7df3f", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=1e399e2331cb4a82ab314c552c8492da1a9e39e5", "patch": "@@ -83,6 +83,15 @@ gfc_resolve_acos (gfc_expr * f, gfc_expr * x)\n }\n \n \n+void\n+gfc_resolve_acosh (gfc_expr * f, gfc_expr * x)\n+{\n+  f->ts = x->ts;\n+  f->value.function.name =\n+    gfc_get_string (\"__acosh_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_aimag (gfc_expr * f, gfc_expr * x)\n {\n@@ -177,6 +186,13 @@ gfc_resolve_asin (gfc_expr * f, gfc_expr * x)\n     gfc_get_string (\"__asin_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n }\n \n+void\n+gfc_resolve_asinh (gfc_expr * f, gfc_expr * x)\n+{\n+  f->ts = x->ts;\n+  f->value.function.name =\n+    gfc_get_string (\"__asinh_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+}\n \n void\n gfc_resolve_atan (gfc_expr * f, gfc_expr * x)\n@@ -186,6 +202,13 @@ gfc_resolve_atan (gfc_expr * f, gfc_expr * x)\n     gfc_get_string (\"__atan_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n }\n \n+void\n+gfc_resolve_atanh (gfc_expr * f, gfc_expr * x)\n+{\n+  f->ts = x->ts;\n+  f->value.function.name =\n+    gfc_get_string (\"__atanh_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+}\n \n void\n gfc_resolve_atan2 (gfc_expr * f, gfc_expr * x,"}, {"sha": "0fc7368827928f9134007af8df942de91ac4f525", "filename": "gcc/fortran/mathbuiltins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fmathbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fmathbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmathbuiltins.def?ref=1e399e2331cb4a82ab314c552c8492da1a9e39e5", "patch": "@@ -6,8 +6,11 @@\n    Use DEFINE_MATH_BUILTIN_C if the complex versions of the builtin are\n    also available.  */\n DEFINE_MATH_BUILTIN_C (ACOS,  \"acos\",   0)\n+DEFINE_MATH_BUILTIN   (ACOSH, \"acosh\",  0)\n DEFINE_MATH_BUILTIN_C (ASIN,  \"asin\",   0)\n+DEFINE_MATH_BUILTIN   (ASINH, \"asinh\",  0)\n DEFINE_MATH_BUILTIN_C (ATAN,  \"atan\",   0)\n+DEFINE_MATH_BUILTIN   (ATANH, \"atanh\",  0)\n DEFINE_MATH_BUILTIN   (ATAN2, \"atan2\",  1)\n DEFINE_MATH_BUILTIN_C (COS,   \"cos\",    0)\n DEFINE_MATH_BUILTIN_C (COSH,  \"cosh\",   0)"}, {"sha": "e5f806e1962e2156a364403aaa997b0396f4865e", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e399e2331cb4a82ab314c552c8492da1a9e39e5/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=1e399e2331cb4a82ab314c552c8492da1a9e39e5", "patch": "@@ -263,6 +263,27 @@ gfc_simplify_acos (gfc_expr * x)\n   return range_check (result, \"ACOS\");\n }\n \n+gfc_expr *\n+gfc_simplify_acosh (gfc_expr * x)\n+{\n+  gfc_expr *result;\n+\n+  if (x->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  if (mpfr_cmp_si (x->value.real, 1) < 0)\n+    {\n+      gfc_error (\"Argument of ACOSH at %L must not be less than 1\",\n+\t\t &x->where);\n+      return &gfc_bad_expr;\n+    }\n+\n+  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+\n+  mpfr_acosh (result->value.real, x->value.real, GFC_RND_MODE);\n+\n+  return range_check (result, \"ACOSH\");\n+}\n \n gfc_expr *\n gfc_simplify_adjustl (gfc_expr * e)\n@@ -467,7 +488,7 @@ gfc_simplify_asin (gfc_expr * x)\n \n \n gfc_expr *\n-gfc_simplify_atan (gfc_expr * x)\n+gfc_simplify_asinh (gfc_expr * x)\n {\n   gfc_expr *result;\n \n@@ -476,10 +497,49 @@ gfc_simplify_atan (gfc_expr * x)\n \n   result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n \n+  mpfr_asinh(result->value.real, x->value.real, GFC_RND_MODE);\n+\n+  return range_check (result, \"ASINH\");\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_atan (gfc_expr * x)\n+{\n+  gfc_expr *result;\n+\n+  if (x->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+    \n+  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+\n   mpfr_atan(result->value.real, x->value.real, GFC_RND_MODE);\n \n   return range_check (result, \"ATAN\");\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_atanh (gfc_expr * x)\n+{\n+  gfc_expr *result;\n \n+  if (x->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  if (mpfr_cmp_si (x->value.real, 1) >= 0 ||\n+      mpfr_cmp_si (x->value.real, -1) <= 0)\n+    {\n+      gfc_error (\"Argument of ATANH at %L must be inside the range -1 to 1\",\n+\t\t &x->where);\n+      return &gfc_bad_expr;\n+    }\n+\n+  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+\n+  mpfr_atanh(result->value.real, x->value.real, GFC_RND_MODE);\n+\n+  return range_check (result, \"ATANH\");\n }\n \n \n@@ -505,7 +565,6 @@ gfc_simplify_atan2 (gfc_expr * y, gfc_expr * x)\n   arctangent2 (y->value.real, x->value.real, result->value.real);\n \n   return range_check (result, \"ATAN2\");\n-\n }\n \n "}]}