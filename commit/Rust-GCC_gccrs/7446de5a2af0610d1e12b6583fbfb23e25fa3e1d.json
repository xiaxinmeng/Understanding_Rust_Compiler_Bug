{"sha": "7446de5a2af0610d1e12b6583fbfb23e25fa3e1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0NmRlNWEyYWYwNjEwZDFlMTJiNjU4M2ZiZmIyM2UyNWZhM2UxZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:24Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:24Z"}, "message": "aarch64: Add support for unpacked SVE MULH\n\nThis patch extends the SMULH and UMULH support to unpacked vectors.\nThe type suffix must be taken from the element size rather than the\ncontainer size.\n\nThe main use of these patterns is to support division and modulus\nby a constant.  The conditional forms would be hard to trigger from\nnon-ACLE code, and ACLE code needs fully-packed vectors only.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (<su>mul<mode>3_highpart)\n\t(@aarch64_pred_<MUL_HIGHPART:optab><mode>): Extend from SVE_FULL_I\n\tto SVE_I.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mul_highpart_3.c: New test.", "tree": {"sha": "d4e9408450856a4fb8f95c4565fa9cfbdfb8404d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4e9408450856a4fb8f95c4565fa9cfbdfb8404d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907ea3795591b85e2f4cf1c45a4cd8c1bd783892"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "2e6128e603213d8a1561ce9818c83b8d3b1871f6", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=7446de5a2af0610d1e12b6583fbfb23e25fa3e1d", "patch": "@@ -4192,12 +4192,12 @@\n \n ;; Unpredicated highpart multiplication.\n (define_expand \"<su>mul<mode>3_highpart\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_dup 3)\n-\t   (unspec:SVE_FULL_I\n-\t     [(match_operand:SVE_FULL_I 1 \"register_operand\")\n-\t      (match_operand:SVE_FULL_I 2 \"register_operand\")]\n+\t   (unspec:SVE_I\n+\t     [(match_operand:SVE_I 1 \"register_operand\")\n+\t      (match_operand:SVE_I 2 \"register_operand\")]\n \t     MUL_HIGHPART)]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n@@ -4208,12 +4208,12 @@\n \n ;; Predicated highpart multiplication.\n (define_insn \"@aarch64_pred_<optab><mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (unspec:SVE_FULL_I\n-\t     [(match_operand:SVE_FULL_I 2 \"register_operand\" \"%0, w\")\n-\t      (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")]\n+\t   (unspec:SVE_I\n+\t     [(match_operand:SVE_I 2 \"register_operand\" \"%0, w\")\n+\t      (match_operand:SVE_I 3 \"register_operand\" \"w, w\")]\n \t     MUL_HIGHPART)]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\""}, {"sha": "3aa6575e4abbad8166f9dc8dcd7b83a214c89d65", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mul_highpart_3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_3.c?ref=7446de5a2af0610d1e12b6583fbfb23e25fa3e1d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE test##_##TYPE##_reg (TYPE a, TYPE b) { return a % 17; }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tsmulh\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmulh\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmulh\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumulh\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumulh\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumulh\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}]}