{"sha": "eaec20fde587e0695b100dcba5ff56944c3ae8c0", "node_id": "C_kwDOANBUbNoAKGVhZWMyMGZkZTU4N2UwNjk1YjEwMGRjYmE1ZmY1Njk0NGMzYWU4YzA", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-10T15:49:50Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-10T15:51:30Z"}, "message": "Grow sbr_vector in ranger's on-entry cache as needed.\n\nThe on-entry cache does not expect the number of BBs to change.  This\ncould happen in various scenarios, recently in the suggestion to use\nranger with loop unswitching and also with a work in progress to use\nthe path solver in the loopch pass.  This patch fixes both.\n\nThis is a patch from Andrew, who tested it on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-cache.cc (sbr_vector::grow): New.\n\t(sbr_vector::set_bb_range): Call grow.\n\t(sbr_vector::get_bb_range): Same.\n\t(sbr_vector::bb_range_p): Remove assert.", "tree": {"sha": "6949722bd144c1aa8b897a41686a99f14ecdc162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6949722bd144c1aa8b897a41686a99f14ecdc162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaec20fde587e0695b100dcba5ff56944c3ae8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaec20fde587e0695b100dcba5ff56944c3ae8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaec20fde587e0695b100dcba5ff56944c3ae8c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaec20fde587e0695b100dcba5ff56944c3ae8c0/comments", "author": null, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba247ade1cc0ca06a0f7d3483b0520ba98bf2d2"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "a63e20e7e498a86753a43861555327d5f41edc6a", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaec20fde587e0695b100dcba5ff56944c3ae8c0/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaec20fde587e0695b100dcba5ff56944c3ae8c0/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=eaec20fde587e0695b100dcba5ff56944c3ae8c0", "patch": "@@ -210,6 +210,7 @@ class sbr_vector : public ssa_block_ranges\n   int_range<2> m_undefined;\n   tree m_type;\n   irange_allocator *m_irange_allocator;\n+  void grow ();\n };\n \n \n@@ -229,13 +230,37 @@ sbr_vector::sbr_vector (tree t, irange_allocator *allocator)\n   m_undefined.set_undefined ();\n }\n \n+// Grow the vector when the CFG has increased in size.\n+\n+void\n+sbr_vector::grow ()\n+{\n+  int curr_bb_size = last_basic_block_for_fn (cfun);\n+  gcc_checking_assert (curr_bb_size > m_tab_size);\n+\n+  // Increase the max of a)128, b)needed increase * 2, c)10% of current_size.\n+  int inc = MAX ((curr_bb_size - m_tab_size) * 2, 128);\n+  inc = MAX (inc, curr_bb_size / 10);\n+  int new_size = inc + curr_bb_size;\n+\n+  // Allocate new memory, copy the old vector and clear the new space.\n+  irange **t = (irange **)m_irange_allocator->get_memory (new_size\n+\t\t\t\t\t\t\t  * sizeof (irange *));\n+  memcpy (t, m_tab, m_tab_size * sizeof (irange *));\n+  memset (t + m_tab_size, 0, (new_size - m_tab_size) * sizeof (irange *));\n+\n+  m_tab = t;\n+  m_tab_size = new_size;\n+}\n+\n // Set the range for block BB to be R.\n \n bool\n sbr_vector::set_bb_range (const_basic_block bb, const irange &r)\n {\n   irange *m;\n-  gcc_checking_assert (bb->index < m_tab_size);\n+  if (bb->index >= m_tab_size)\n+    grow ();\n   if (r.varying_p ())\n     m = &m_varying;\n   else if (r.undefined_p ())\n@@ -252,7 +277,8 @@ sbr_vector::set_bb_range (const_basic_block bb, const irange &r)\n bool\n sbr_vector::get_bb_range (irange &r, const_basic_block bb)\n {\n-  gcc_checking_assert (bb->index < m_tab_size);\n+  if (bb->index >= m_tab_size)\n+    return false;\n   irange *m = m_tab[bb->index];\n   if (m)\n     {\n@@ -267,8 +293,9 @@ sbr_vector::get_bb_range (irange &r, const_basic_block bb)\n bool\n sbr_vector::bb_range_p (const_basic_block bb)\n {\n-  gcc_checking_assert (bb->index < m_tab_size);\n-  return m_tab[bb->index] != NULL;\n+  if (bb->index < m_tab_size)\n+    return m_tab[bb->index] != NULL;\n+  return false;\n }\n \n // This class implements the on entry cache via a sparse bitmap."}]}