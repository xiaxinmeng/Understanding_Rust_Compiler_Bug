{"sha": "070ecdfd0300a9aebdaaff78f8e10184e9152042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwZWNkZmQwMzAwYTlhZWJkYWFmZjc4ZjhlMTAxODRlOTE1MjA0Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-07T14:17:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-07T14:17:44Z"}, "message": "tree-flow.h (copy_ssa_name_fn): New function.\n\n2012-08-07  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (copy_ssa_name_fn): New function.\n\t(duplicate_ssa_name_fn): Likewise.\n\t* tree-flow-inline.h (copy_ssa_name): New function.\n\t(duplicate_ssa_name): Likewise.\n\t* tree-ssanames.c (copy_ssa_name_fn): New function.\n\t(duplicate_ssa_name): Rename to ...\n\t(duplicate_ssa_name_fn): ... this and adjust.\n\t* tree-tailcall.c (update_accumulator_with_ops): Use copy_ssa_name.\n\t* tree-vect-loop-manip.c (slpeel_update_phi_nodes_for_guard1): Likewise.\n\t(slpeel_update_phi_nodes_for_guard2): Likewise.\n\t(slpeel_tree_peel_loop_to_edge): Likewise.\n\t(vect_loop_versioning): Likewise.\n\t* tree-parloops.c (transform_to_exit_first_loop): Likewise.\n\t(create_parallel_loop): Likewise.\n\t* ipa-split.c (split_function): Likewise.\n\t* tree-vect-loop.c (vect_is_simple_reduction_1): Likewise.\n\t(vect_create_epilog_for_reduction): Likewise.\n\t* tree-vect-data-refs.c (bump_vector_ptr): Likewise.\n\t(vect_setup_realignment): Likewise.\n\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n\t* tree-switch-conversion.c (build_one_array): Likewise.\n\t(gen_def_assigns): Likewise.\n\t* tree-cfg.c (gimple_make_forwarder_block): Likewise.\n\t* graphite-sese-to-poly.c (rewrite_close_phi_out_of_ssa): Call\n\tcreate_zero_dim_array with the SSA name.\n\t(rewrite_phi_out_of_ssa): Likewise.\n\t(rewrite_cross_bb_scalar_dependence): Likewise.  Use copy_ssa_name.\n\nFrom-SVN: r190202", "tree": {"sha": "cee5b4d66982f0920c475733a3ba823b7db12268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cee5b4d66982f0920c475733a3ba823b7db12268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070ecdfd0300a9aebdaaff78f8e10184e9152042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070ecdfd0300a9aebdaaff78f8e10184e9152042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070ecdfd0300a9aebdaaff78f8e10184e9152042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070ecdfd0300a9aebdaaff78f8e10184e9152042/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01c59d23df7eef24a9e5a695baef59bd233ce115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c59d23df7eef24a9e5a695baef59bd233ce115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c59d23df7eef24a9e5a695baef59bd233ce115"}], "stats": {"total": 186, "additions": 118, "deletions": 68}, "files": [{"sha": "43b0b9204134672dc09cc23b997af4c2c2734df9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -1,3 +1,33 @@\n+2012-08-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (copy_ssa_name_fn): New function.\n+\t(duplicate_ssa_name_fn): Likewise.\n+\t* tree-flow-inline.h (copy_ssa_name): New function.\n+\t(duplicate_ssa_name): Likewise.\n+\t* tree-ssanames.c (copy_ssa_name_fn): New function.\n+\t(duplicate_ssa_name): Rename to ...\n+\t(duplicate_ssa_name_fn): ... this and adjust.\n+\t* tree-tailcall.c (update_accumulator_with_ops): Use copy_ssa_name.\n+\t* tree-vect-loop-manip.c (slpeel_update_phi_nodes_for_guard1): Likewise.\n+\t(slpeel_update_phi_nodes_for_guard2): Likewise.\n+\t(slpeel_tree_peel_loop_to_edge): Likewise.\n+\t(vect_loop_versioning): Likewise.\n+\t* tree-parloops.c (transform_to_exit_first_loop): Likewise.\n+\t(create_parallel_loop): Likewise.\n+\t* ipa-split.c (split_function): Likewise.\n+\t* tree-vect-loop.c (vect_is_simple_reduction_1): Likewise.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\t* tree-vect-data-refs.c (bump_vector_ptr): Likewise.\n+\t(vect_setup_realignment): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n+\t* tree-switch-conversion.c (build_one_array): Likewise.\n+\t(gen_def_assigns): Likewise.\n+\t* tree-cfg.c (gimple_make_forwarder_block): Likewise.\n+\t* graphite-sese-to-poly.c (rewrite_close_phi_out_of_ssa): Call\n+\tcreate_zero_dim_array with the SSA name.\n+\t(rewrite_phi_out_of_ssa): Likewise.\n+\t(rewrite_cross_bb_scalar_dependence): Likewise.  Use copy_ssa_name.\n+\n 2012-08-07  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-dfa.c (set_ssa_default_def): Clear the SSA_NAME_DEFAULT_DEF"}, {"sha": "c1686221187725928f22679d6ed4d86f0a38ba12", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -2166,7 +2166,6 @@ rewrite_close_phi_out_of_ssa (scop_p scop, gimple_stmt_iterator *psi)\n   sese region = SCOP_REGION (scop);\n   gimple phi = gsi_stmt (*psi);\n   tree res = gimple_phi_result (phi);\n-  tree var = SSA_NAME_VAR (res);\n   basic_block bb = gimple_bb (phi);\n   gimple_stmt_iterator gsi = gsi_after_labels (bb);\n   tree arg = gimple_phi_arg_def (phi, 0);\n@@ -2222,7 +2221,7 @@ rewrite_close_phi_out_of_ssa (scop_p scop, gimple_stmt_iterator *psi)\n     }\n   else\n     {\n-      tree zero_dim_array = create_zero_dim_array (var, \"Close_Phi\");\n+      tree zero_dim_array = create_zero_dim_array (res, \"Close_Phi\");\n \n       stmt = gimple_build_assign (res, zero_dim_array);\n \n@@ -2250,8 +2249,8 @@ rewrite_phi_out_of_ssa (scop_p scop, gimple_stmt_iterator *psi)\n   gimple phi = gsi_stmt (*psi);\n   basic_block bb = gimple_bb (phi);\n   tree res = gimple_phi_result (phi);\n-  tree var = SSA_NAME_VAR (res);\n-  tree zero_dim_array = create_zero_dim_array (var, \"phi_out_of_ssa\");\n+  tree var;\n+  tree zero_dim_array = create_zero_dim_array (res, \"phi_out_of_ssa\");\n   gimple stmt;\n   gimple_seq stmts;\n \n@@ -2349,14 +2348,16 @@ static void\n rewrite_cross_bb_scalar_dependence (scop_p scop, tree zero_dim_array,\n \t\t\t\t    tree def, gimple use_stmt)\n {\n-  tree var = SSA_NAME_VAR (def);\n-  gimple name_stmt = gimple_build_assign (var, zero_dim_array);\n-  tree name = make_ssa_name (var, name_stmt);\n+  gimple name_stmt;\n+  tree name;\n   ssa_op_iter iter;\n   use_operand_p use_p;\n \n   gcc_assert (gimple_code (use_stmt) != GIMPLE_PHI);\n \n+  name = copy_ssa_name (def, NULL);\n+  name_stmt = gimple_build_assign (name, zero_dim_array);\n+\n   gimple_assign_set_lhs (name_stmt, name);\n   insert_stmts (scop, name_stmt, NULL, gsi_for_stmt (use_stmt));\n \n@@ -2480,7 +2481,7 @@ rewrite_cross_bb_scalar_deps (scop_p scop, gimple_stmt_iterator *gsi)\n \tif (!zero_dim_array)\n \t  {\n \t    zero_dim_array = create_zero_dim_array\n-\t      (SSA_NAME_VAR (def), \"Cross_BB_scalar_dependence\");\n+\t      (def, \"Cross_BB_scalar_dependence\");\n \t    insert_out_of_ssa_copy (scop, zero_dim_array, def,\n \t\t\t\t    SSA_NAME_DEF_STMT (def));\n \t    gsi_next (gsi);"}, {"sha": "85d28f8822178273643899554190053db2e3121b", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -1267,7 +1267,7 @@ split_function (struct split_point *split_point)\n \t      if (TREE_CODE (retval) == SSA_NAME\n \t\t  && !DECL_BY_REFERENCE (DECL_RESULT (current_function_decl)))\n \t\t{\n-\t\t  retval = make_ssa_name (SSA_NAME_VAR (retval), call);\n+\t\t  retval = copy_ssa_name (retval, call);\n \n \t\t  /* See if there is PHI defining return value.  */\n \t\t  for (psi = gsi_start_phis (return_bb);"}, {"sha": "4f2ddc02adafdd5bd13b1e88077ae16b17f6e48b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -5018,7 +5018,7 @@ gimple_make_forwarder_block (edge fallthru)\n       phi = gsi_stmt (gsi);\n       var = gimple_phi_result (phi);\n       new_phi = create_phi_node (var, bb);\n-      gimple_phi_set_result (phi, make_ssa_name (SSA_NAME_VAR (var), phi));\n+      gimple_phi_set_result (phi, copy_ssa_name (var, phi));\n       add_phi_arg (new_phi, gimple_phi_result (phi), fallthru,\n \t\t   UNKNOWN_LOCATION);\n     }"}, {"sha": "e40974ea2a5257f31d8c17f59b94b3677d1f6b24", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -1144,6 +1144,25 @@ make_ssa_name (tree var, gimple stmt)\n   return make_ssa_name_fn (cfun, var, stmt);\n }\n \n+/* Return an SSA_NAME node using the template SSA name NAME defined in\n+   statement STMT in function cfun.  */\n+\n+static inline tree\n+copy_ssa_name (tree var, gimple stmt)\n+{\n+  return copy_ssa_name_fn (cfun, var, stmt);\n+}\n+\n+/*  Creates a duplicate of a SSA name NAME tobe defined by statement STMT\n+    in function cfun.  */\n+\n+static inline tree\n+duplicate_ssa_name (tree var, gimple stmt)\n+{\n+  return duplicate_ssa_name_fn (cfun, var, stmt);\n+}\n+\n+\n /* Returns the base object and a constant BITS_PER_UNIT offset in *POFFSET that\n    denotes the starting address of the memory access EXP.\n    Returns NULL_TREE if the offset is not constant or any component"}, {"sha": "b5dd3c45375a5cedb00aa71c926b6f437a6bbe66", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -530,7 +530,8 @@ void set_current_def (tree, tree);\n extern void init_ssanames (struct function *, int);\n extern void fini_ssanames (void);\n extern tree make_ssa_name_fn (struct function *, tree, gimple);\n-extern tree duplicate_ssa_name (tree, gimple);\n+extern tree copy_ssa_name_fn (struct function *, tree, gimple);\n+extern tree duplicate_ssa_name_fn (struct function *, tree, gimple);\n extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);\n extern void release_ssa_name (tree);\n extern void release_defs (gimple);"}, {"sha": "6a5c687ba29527bc4e9f98ba72236c9e06a39a4e", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -1485,7 +1485,7 @@ transform_to_exit_first_loop (struct loop *loop, htab_t reduction_list, tree nit\n     {\n       phi = gsi_stmt (gsi);\n       res = PHI_RESULT (phi);\n-      t = make_ssa_name (SSA_NAME_VAR (res), phi);\n+      t = copy_ssa_name (res, phi);\n       SET_PHI_RESULT (phi, t);\n       nphi = create_phi_node (res, orig_header);\n       add_phi_arg (nphi, t, hpred, UNKNOWN_LOCATION);\n@@ -1623,7 +1623,7 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   cvar_base = SSA_NAME_VAR (cvar);\n   phi = SSA_NAME_DEF_STMT (cvar);\n   cvar_init = PHI_ARG_DEF_FROM_EDGE (phi, loop_preheader_edge (loop));\n-  initvar = make_ssa_name (cvar_base, NULL);\n+  initvar = copy_ssa_name (cvar, NULL);\n   SET_USE (PHI_ARG_DEF_PTR_FROM_EDGE (phi, loop_preheader_edge (loop)),\n \t   initvar);\n   cvar_next = PHI_ARG_DEF_FROM_EDGE (phi, loop_latch_edge (loop));"}, {"sha": "b9036e2ec507fde98e390f6f6893921465156d9d", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -312,6 +312,17 @@ get_ptr_info (tree t)\n   return pi;\n }\n \n+\n+/* Creates a new SSA name using the template NAME tobe defined by\n+   statement STMT in function FN.  */\n+\n+tree\n+copy_ssa_name_fn (struct function *fn, tree name, gimple stmt)\n+{\n+  return make_ssa_name_fn (fn, SSA_NAME_VAR (name), stmt);\n+}\n+\n+\n /* Creates a duplicate of the ptr_info_def at PTR_INFO for use by\n    the SSA name NAME.  */\n \n@@ -333,12 +344,13 @@ duplicate_ssa_name_ptr_info (tree name, struct ptr_info_def *ptr_info)\n }\n \n \n-/* Creates a duplicate of a ssa name NAME tobe defined by statement STMT.  */\n+/* Creates a duplicate of a ssa name NAME tobe defined by statement STMT\n+   in function FN.  */\n \n tree\n-duplicate_ssa_name (tree name, gimple stmt)\n+duplicate_ssa_name_fn (struct function *fn, tree name, gimple stmt)\n {\n-  tree new_name = make_ssa_name (SSA_NAME_VAR (name), stmt);\n+  tree new_name = copy_ssa_name_fn (fn, name, stmt);\n   struct ptr_info_def *old_ptr_info = SSA_NAME_PTR_INFO (name);\n \n   if (old_ptr_info)"}, {"sha": "4336e5cc5927a1e05f400a229abb4acee82b3c5b", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -1031,7 +1031,7 @@ build_one_array (gimple swtch, int num, tree arr_index_type, gimple phi,\n \n   gcc_assert (info->default_values[num]);\n \n-  name = make_ssa_name (SSA_NAME_VAR (PHI_RESULT (phi)), NULL);\n+  name = copy_ssa_name (PHI_RESULT (phi), NULL);\n   info->target_inbound_names[num] = name;\n \n   cst = constructor_contains_same_values_p (info->constructors[num]);\n@@ -1077,7 +1077,6 @@ build_one_array (gimple swtch, int num, tree arr_index_type, gimple phi,\n       load = gimple_build_assign (name, fetch);\n     }\n \n-  SSA_NAME_DEF_STMT (name) = load;\n   gsi_insert_before (&gsi, load, GSI_SAME_STMT);\n   update_stmt (load);\n   info->arr_ref_last = load;\n@@ -1137,12 +1136,9 @@ gen_def_assigns (gimple_stmt_iterator *gsi, struct switch_conv_info *info)\n \n   for (i = 0; i < info->phi_count; i++)\n     {\n-      tree name\n-\t= make_ssa_name (SSA_NAME_VAR (info->target_inbound_names[i]), NULL);\n-\n+      tree name = copy_ssa_name (info->target_inbound_names[i], NULL);\n       info->target_outbound_names[i] = name;\n       assign = gimple_build_assign (name, info->default_values[i]);\n-      SSA_NAME_DEF_STMT (name) = assign;\n       gsi_insert_before (gsi, assign, GSI_SAME_STMT);\n       update_stmt (assign);\n     }"}, {"sha": "594617a67fe84a2eae6951961dc08dd6a2ee88e0", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -644,9 +644,9 @@ update_accumulator_with_ops (enum tree_code code, tree acc, tree op1,\n \t\t\t     gimple_stmt_iterator gsi)\n {\n   gimple stmt;\n-  tree var;\n+  tree var = copy_ssa_name (acc, NULL);\n   if (types_compatible_p (TREE_TYPE (acc), TREE_TYPE (op1)))\n-    stmt = gimple_build_assign_with_ops (code, SSA_NAME_VAR (acc), acc, op1);\n+    stmt = gimple_build_assign_with_ops (code, var, acc, op1);\n   else\n     {\n       tree rhs = fold_convert (TREE_TYPE (acc),\n@@ -656,11 +656,8 @@ update_accumulator_with_ops (enum tree_code code, tree acc, tree op1,\n \t\t\t\t\t    op1));\n       rhs = force_gimple_operand_gsi (&gsi, rhs,\n \t\t\t\t      false, NULL, false, GSI_CONTINUE_LINKING);\n-      stmt = gimple_build_assign (NULL_TREE, rhs);\n+      stmt = gimple_build_assign (var, rhs);\n     }\n-  var = make_ssa_name (SSA_NAME_VAR (acc), stmt);\n-  gimple_assign_set_lhs (stmt, var);\n-  update_stmt (stmt);\n   gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n   return var;\n }"}, {"sha": "ad59bf37d8c9f6524c1560c27788b275879724b7", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -3941,7 +3941,6 @@ bump_vector_ptr (tree dataref_ptr, gimple ptr_incr, gimple_stmt_iterator *gsi,\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-  tree ptr_var = SSA_NAME_VAR (dataref_ptr);\n   tree update = TYPE_SIZE_UNIT (vectype);\n   gimple incr_stmt;\n   ssa_op_iter iter;\n@@ -3951,10 +3950,9 @@ bump_vector_ptr (tree dataref_ptr, gimple ptr_incr, gimple_stmt_iterator *gsi,\n   if (bump)\n     update = bump;\n \n-  incr_stmt = gimple_build_assign_with_ops (POINTER_PLUS_EXPR, ptr_var,\n+  new_dataref_ptr = copy_ssa_name (dataref_ptr, NULL);\n+  incr_stmt = gimple_build_assign_with_ops (POINTER_PLUS_EXPR, new_dataref_ptr,\n \t\t\t\t\t    dataref_ptr, update);\n-  new_dataref_ptr = make_ssa_name (ptr_var, incr_stmt);\n-  gimple_assign_set_lhs (incr_stmt, new_dataref_ptr);\n   vect_finish_stmt_generation (stmt, incr_stmt, gsi);\n \n   /* Copy the points-to information if it exists. */\n@@ -4356,12 +4354,11 @@ vect_setup_realignment (gimple stmt, gimple_stmt_iterator *gsi,\n       ptr = vect_create_data_ref_ptr (stmt, vectype, loop_for_initial_load,\n \t\t\t\t      NULL_TREE, &init_addr, NULL, &inc,\n \t\t\t\t      true, &inv_p);\n+      new_temp = copy_ssa_name (ptr, NULL);\n       new_stmt = gimple_build_assign_with_ops\n-\t\t   (BIT_AND_EXPR, NULL_TREE, ptr,\n+\t\t   (BIT_AND_EXPR, new_temp, ptr,\n \t\t    build_int_cst (TREE_TYPE (ptr),\n \t\t\t\t   -(HOST_WIDE_INT)TYPE_ALIGN_UNIT (vectype)));\n-      new_temp = make_ssa_name (SSA_NAME_VAR (ptr), new_stmt);\n-      gimple_assign_set_lhs (new_stmt, new_temp);\n       new_bb = gsi_insert_on_edge_immediate (pe, new_stmt);\n       gcc_assert (!new_bb);\n       data_ref"}, {"sha": "cea8a1b8c524a9455e984a8cf6053fce2a625ee7", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -511,14 +511,15 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n        gsi_next (&gsi_orig), gsi_next (&gsi_update))\n     {\n       source_location loop_locus, guard_locus;\n+      tree new_res;\n       orig_phi = gsi_stmt (gsi_orig);\n       update_phi = gsi_stmt (gsi_update);\n \n       /** 1. Handle new-merge-point phis  **/\n \n       /* 1.1. Generate new phi node in NEW_MERGE_BB:  */\n-      new_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (orig_phi)),\n-                                 new_merge_bb);\n+      new_res = copy_ssa_name (PHI_RESULT (orig_phi), NULL);\n+      new_phi = create_phi_node (new_res, new_merge_bb);\n \n       /* 1.2. NEW_MERGE_BB has two incoming edges: GUARD_EDGE and the exit-edge\n             of LOOP. Set the two phi args in NEW_PHI for these edges:  */\n@@ -547,8 +548,8 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n \tcontinue;\n \n       /* 2.1. Generate new phi node in NEW_EXIT_BB:  */\n-      new_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (orig_phi)),\n-                                 *new_exit_bb);\n+      new_res = copy_ssa_name (PHI_RESULT (orig_phi), NULL);\n+      new_phi = create_phi_node (new_res, *new_exit_bb);\n \n       /* 2.2. NEW_EXIT_BB has one incoming edge: the exit-edge of the loop.  */\n       add_phi_arg (new_phi, loop_arg, single_exit (loop), loop_locus);\n@@ -636,6 +637,7 @@ slpeel_update_phi_nodes_for_guard2 (edge guard_edge, struct loop *loop,\n \n   for (gsi = gsi_start_phis (update_bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n+      tree new_res;\n       update_phi = gsi_stmt (gsi);\n       orig_phi = update_phi;\n       orig_def = PHI_ARG_DEF_FROM_EDGE (orig_phi, e);\n@@ -649,8 +651,8 @@ slpeel_update_phi_nodes_for_guard2 (edge guard_edge, struct loop *loop,\n       /** 1. Handle new-merge-point phis  **/\n \n       /* 1.1. Generate new phi node in NEW_MERGE_BB:  */\n-      new_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (orig_phi)),\n-                                 new_merge_bb);\n+      new_res = copy_ssa_name (PHI_RESULT (orig_phi), NULL);\n+      new_phi = create_phi_node (new_res, new_merge_bb);\n \n       /* 1.2. NEW_MERGE_BB has two incoming edges: GUARD_EDGE and the exit-edge\n             of LOOP. Set the two PHI args in NEW_PHI for these edges:  */\n@@ -691,8 +693,8 @@ slpeel_update_phi_nodes_for_guard2 (edge guard_edge, struct loop *loop,\n       /** 2. Handle loop-closed-ssa-form phis  **/\n \n       /* 2.1. Generate new phi node in NEW_EXIT_BB:  */\n-      new_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (orig_phi)),\n-                                 *new_exit_bb);\n+      new_res = copy_ssa_name (PHI_RESULT (orig_phi), NULL);\n+      new_phi = create_phi_node (new_res, *new_exit_bb);\n \n       /* 2.2. NEW_EXIT_BB has one incoming edge: the exit-edge of the loop.  */\n       add_phi_arg (new_phi, loop_arg, single_exit (loop), UNKNOWN_LOCATION);\n@@ -726,8 +728,8 @@ slpeel_update_phi_nodes_for_guard2 (edge guard_edge, struct loop *loop,\n       arg = guard_arg;\n \n       /* 3.2. Generate new phi node in GUARD_BB:  */\n-      new_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (orig_phi)),\n-                                 guard_edge->src);\n+      new_res = copy_ssa_name (PHI_RESULT (orig_phi), NULL);\n+      new_phi = create_phi_node (new_res, guard_edge->src);\n \n       /* 3.3. GUARD_BB has one incoming edge:  */\n       gcc_assert (EDGE_COUNT (guard_edge->src->preds) == 1);\n@@ -1182,13 +1184,11 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n \t    break;\n \tif (gsi_end_p (gsi))\n \t  {\n-\t    gimple new_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (phi)),\n-\t\t\t\t\t      exit_e->dest);\n+\t    tree new_vop = copy_ssa_name (PHI_RESULT (phi), NULL);\n+\t    gimple new_phi = create_phi_node (new_vop, exit_e->dest);\n \t    tree vop = PHI_ARG_DEF_FROM_EDGE (phi, EDGE_SUCC (loop->latch, 0));\n \t    imm_use_iterator imm_iter;\n \t    gimple stmt;\n-\t    tree new_vop = make_ssa_name (SSA_NAME_VAR (PHI_RESULT (phi)),\n-\t\t\t\t\t  new_phi);\n \t    use_operand_p use_p;\n \n \t    add_phi_arg (new_phi, vop, exit_e, UNKNOWN_LOCATION);\n@@ -2535,9 +2535,10 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n \n   for (gsi = gsi_start_phis (merge_bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n+      tree new_res;\n       orig_phi = gsi_stmt (gsi);\n-      new_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (orig_phi)),\n-\t\t\t\t  new_exit_bb);\n+      new_res = copy_ssa_name (PHI_RESULT (orig_phi), NULL);\n+      new_phi = create_phi_node (new_res, new_exit_bb);\n       arg = PHI_ARG_DEF_FROM_EDGE (orig_phi, e);\n       add_phi_arg (new_phi, arg, new_exit_e,\n \t\t   gimple_phi_arg_location_from_edge (orig_phi, e));"}, {"sha": "48d75a48a31e656ff0f3cf1d5978ef73fffdf980", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -2270,7 +2270,7 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n   if (orig_code == MINUS_EXPR)\n     {\n       tree rhs = gimple_assign_rhs2 (def_stmt);\n-      tree negrhs = make_ssa_name (SSA_NAME_VAR (rhs), NULL);\n+      tree negrhs = copy_ssa_name (rhs, NULL);\n       gimple negate_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, negrhs,\n \t\t\t\t\t\t\t rhs, NULL);\n       gimple_stmt_iterator gsi = gsi_for_stmt (def_stmt);\n@@ -3700,7 +3700,8 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n     {\n       for (j = 0; j < ncopies; j++)\n         {\n-          phi = create_phi_node (SSA_NAME_VAR (def), exit_bb);\n+\t  tree new_def = copy_ssa_name (def, NULL);\n+          phi = create_phi_node (new_def, exit_bb);\n           set_vinfo_for_stmt (phi, new_stmt_vec_info (phi, loop_vinfo, NULL));\n           if (j == 0)\n             VEC_quick_push (gimple, new_phis, phi);\n@@ -3724,8 +3725,8 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n       inner_phis = VEC_alloc (gimple, heap, VEC_length (tree, vect_defs));\n       FOR_EACH_VEC_ELT (gimple, new_phis, i, phi)\n \t{\n-\t  gimple outer_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (phi)),\n-\t\t\t\t\t      exit_bb);\n+\t  tree new_result = copy_ssa_name (PHI_RESULT (phi), NULL);\n+\t  gimple outer_phi = create_phi_node (new_result, exit_bb);\n \t  SET_PHI_ARG_DEF (outer_phi, single_exit (loop)->dest_idx,\n \t\t\t   PHI_RESULT (phi));\n \t  set_vinfo_for_stmt (outer_phi, new_stmt_vec_info (outer_phi,\n@@ -3736,8 +3737,8 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n           while (STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi)))\n             {\n \t      phi = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi));\n-\t      outer_phi = create_phi_node (SSA_NAME_VAR (PHI_RESULT (phi)),\n-\t\t\t\t\t   exit_bb);\n+\t      new_result = copy_ssa_name (PHI_RESULT (phi), NULL);\n+\t      outer_phi = create_phi_node (new_result, exit_bb);\n \t      SET_PHI_ARG_DEF (outer_phi, single_exit (loop)->dest_idx,\n \t\t\t       PHI_RESULT (phi));\n \t      set_vinfo_for_stmt (outer_phi, new_stmt_vec_info (outer_phi,"}, {"sha": "4769e6269eeea74b7c465d119f3a16286bc9336a", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ecdfd0300a9aebdaaff78f8e10184e9152042/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=070ecdfd0300a9aebdaaff78f8e10184e9152042", "patch": "@@ -4668,15 +4668,13 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t\t\t\t\t NULL_TREE, true,\n \t\t\t\t\t\t GSI_SAME_STMT);\n \t      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, newref);\n-\t      newoff = SSA_NAME_VAR (running_off);\n+\t      newoff = copy_ssa_name (running_off, NULL);\n \t      if (POINTER_TYPE_P (TREE_TYPE (newoff)))\n \t\tincr = gimple_build_assign_with_ops (POINTER_PLUS_EXPR, newoff,\n \t\t\t\t\t\t     running_off, stride_step);\n \t      else\n \t\tincr = gimple_build_assign_with_ops (PLUS_EXPR, newoff,\n \t\t\t\t\t\t     running_off, stride_step);\n-\t      newoff = make_ssa_name (newoff, incr);\n-\t      gimple_assign_set_lhs (incr, newoff);\n \t      vect_finish_stmt_generation (stmt, incr, gsi);\n \n \t      running_off = newoff;\n@@ -4970,13 +4968,12 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t\t\t\t\t    dr_explicit_realign,\n \t\t\t\t\t\t    dataref_ptr, NULL);\n \n+\t\t    ptr = copy_ssa_name (dataref_ptr, NULL);\n \t\t    new_stmt = gimple_build_assign_with_ops\n-\t\t\t\t (BIT_AND_EXPR, NULL_TREE, dataref_ptr,\n+\t\t\t\t (BIT_AND_EXPR, ptr, dataref_ptr,\n \t\t\t\t  build_int_cst\n \t\t\t\t  (TREE_TYPE (dataref_ptr),\n \t\t\t\t   -(HOST_WIDE_INT)TYPE_ALIGN_UNIT (vectype)));\n-\t\t    ptr = make_ssa_name (SSA_NAME_VAR (dataref_ptr), new_stmt);\n-\t\t    gimple_assign_set_lhs (new_stmt, ptr);\n \t\t    vect_finish_stmt_generation (stmt, new_stmt, gsi);\n \t\t    data_ref\n \t\t      = build2 (MEM_REF, vectype, ptr,\n@@ -5000,7 +4997,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t\t\t  build_int_cst\n \t\t\t\t  (TREE_TYPE (ptr),\n \t\t\t\t   -(HOST_WIDE_INT)TYPE_ALIGN_UNIT (vectype)));\n-\t\t    ptr = make_ssa_name (SSA_NAME_VAR (dataref_ptr), new_stmt);\n+\t\t    ptr = copy_ssa_name (dataref_ptr, new_stmt);\n \t\t    gimple_assign_set_lhs (new_stmt, ptr);\n \t\t    vect_finish_stmt_generation (stmt, new_stmt, gsi);\n \t\t    data_ref\n@@ -5010,14 +5007,12 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t    break;\n \t\t  }\n \t\tcase dr_explicit_realign_optimized:\n+\t\t  new_temp = copy_ssa_name (dataref_ptr, NULL);\n \t\t  new_stmt = gimple_build_assign_with_ops\n-\t\t\t       (BIT_AND_EXPR, NULL_TREE, dataref_ptr,\n+\t\t\t       (BIT_AND_EXPR, new_temp, dataref_ptr,\n \t\t\t\tbuild_int_cst\n \t\t\t\t  (TREE_TYPE (dataref_ptr),\n \t\t\t\t   -(HOST_WIDE_INT)TYPE_ALIGN_UNIT (vectype)));\n-\t\t  new_temp = make_ssa_name (SSA_NAME_VAR (dataref_ptr),\n-\t\t\t\t\t    new_stmt);\n-\t\t  gimple_assign_set_lhs (new_stmt, new_temp);\n \t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n \t\t  data_ref\n \t\t    = build2 (MEM_REF, vectype, new_temp,"}]}