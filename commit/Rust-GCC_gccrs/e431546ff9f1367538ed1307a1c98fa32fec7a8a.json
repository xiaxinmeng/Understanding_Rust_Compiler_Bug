{"sha": "e431546ff9f1367538ed1307a1c98fa32fec7a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzMTU0NmZmOWYxMzY3NTM4ZWQxMzA3YTFjOThmYTMyZmVjN2E4YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-27T12:46:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-27T12:47:50Z"}, "message": "tree-optimization/93508 - make VN translate through _chk and valueize length\n\nValue-numbering failed to handle __builtin_{memcpy,memset,...}_chk\nvariants when removing abstraction and also failed to use the\nvalue-numbering lattice when requiring the length argument of the\ncall to be constant.\n\n2020-02-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/93508\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle _CHK like\n\tnon-_CHK variants.  Valueize their length arguments.\n\n\t* gcc.dg/tree-ssa/ssa-fre-85.c: New testcase.", "tree": {"sha": "ae39a5ce6b1bfd253c4f637ff1d309e0f5df0654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae39a5ce6b1bfd253c4f637ff1d309e0f5df0654"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e431546ff9f1367538ed1307a1c98fa32fec7a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e431546ff9f1367538ed1307a1c98fa32fec7a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e431546ff9f1367538ed1307a1c98fa32fec7a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e431546ff9f1367538ed1307a1c98fa32fec7a8a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e840185b31e40466e1575507200e1600e2343454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e840185b31e40466e1575507200e1600e2343454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e840185b31e40466e1575507200e1600e2343454"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "8c9b7906772c311210d88045299e68affbe3f057", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e431546ff9f1367538ed1307a1c98fa32fec7a8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e431546ff9f1367538ed1307a1c98fa32fec7a8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e431546ff9f1367538ed1307a1c98fa32fec7a8a", "patch": "@@ -1,3 +1,9 @@\n+2020-02-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93508\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle _CHK like\n+\tnon-_CHK variants.  Valueize their length arguments.\n+\n 2020-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93953"}, {"sha": "6b7b0a2f3d46320dcdde1fb7124e8bf00277fadc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e431546ff9f1367538ed1307a1c98fa32fec7a8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e431546ff9f1367538ed1307a1c98fa32fec7a8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e431546ff9f1367538ed1307a1c98fa32fec7a8a", "patch": "@@ -1,3 +1,8 @@\n+2020-02-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93508\n+\t* gcc.dg/tree-ssa/ssa-fre-85.c: New testcase.\n+\n 2020-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93953"}, {"sha": "6dace16ecbdd9f3bec55812a90fe35f005338a07", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-87.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e431546ff9f1367538ed1307a1c98fa32fec7a8a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e431546ff9f1367538ed1307a1c98fa32fec7a8a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-87.c?ref=e431546ff9f1367538ed1307a1c98fa32fec7a8a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n+\n+unsigned int foo(unsigned int x, int *p)\n+{\n+  unsigned int src = x;\n+  unsigned int dst;\n+  *p = sizeof (unsigned int);\n+  __builtin___memcpy_chk (&dst, &src, *p, 16);\n+  return dst;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return x\" \"fre1\" } } */"}, {"sha": "e260ca4eed179898175f93433d99ca214af099e4", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e431546ff9f1367538ed1307a1c98fa32fec7a8a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e431546ff9f1367538ed1307a1c98fa32fec7a8a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e431546ff9f1367538ed1307a1c98fa32fec7a8a", "patch": "@@ -2537,7 +2537,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n      from that definition.\n      1) Memset.  */\n   if (is_gimple_reg_type (vr->type)\n-      && gimple_call_builtin_p (def_stmt, BUILT_IN_MEMSET)\n+      && (gimple_call_builtin_p (def_stmt, BUILT_IN_MEMSET)\n+\t  || gimple_call_builtin_p (def_stmt, BUILT_IN_MEMSET_CHK))\n       && (integer_zerop (gimple_call_arg (def_stmt, 1))\n \t  || ((TREE_CODE (gimple_call_arg (def_stmt, 1)) == INTEGER_CST\n \t       || (INTEGRAL_TYPE_P (vr->type) && known_eq (ref->size, 8)))\n@@ -2548,7 +2549,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      && ref->size.is_constant (&sizei)\n \t      && (offseti % BITS_PER_UNIT == 0\n \t\t  || TREE_CODE (gimple_call_arg (def_stmt, 1)) == INTEGER_CST)))\n-      && poly_int_tree_p (gimple_call_arg (def_stmt, 2))\n+      && (poly_int_tree_p (gimple_call_arg (def_stmt, 2))\n+\t  || (TREE_CODE (gimple_call_arg (def_stmt, 2)) == SSA_NAME\n+\t      && poly_int_tree_p (SSA_VAL (gimple_call_arg (def_stmt, 2)))))\n       && (TREE_CODE (gimple_call_arg (def_stmt, 0)) == ADDR_EXPR\n \t  || TREE_CODE (gimple_call_arg (def_stmt, 0)) == SSA_NAME))\n     {\n@@ -2609,6 +2612,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \treturn (void *)-1;\n       tree len = gimple_call_arg (def_stmt, 2);\n       HOST_WIDE_INT leni, offset2i;\n+      if (TREE_CODE (len) == SSA_NAME)\n+\tlen = SSA_VAL (len);\n       /* Sometimes the above trickery is smarter than alias analysis.  Take\n          advantage of that.  */\n       if (!ranges_maybe_overlap_p (offset, maxsize, offset2,\n@@ -3149,13 +3154,19 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t   && is_gimple_reg_type (vr->type)\n \t   /* ???  Handle BCOPY as well.  */\n \t   && (gimple_call_builtin_p (def_stmt, BUILT_IN_MEMCPY)\n+\t       || gimple_call_builtin_p (def_stmt, BUILT_IN_MEMCPY_CHK)\n \t       || gimple_call_builtin_p (def_stmt, BUILT_IN_MEMPCPY)\n-\t       || gimple_call_builtin_p (def_stmt, BUILT_IN_MEMMOVE))\n+\t       || gimple_call_builtin_p (def_stmt, BUILT_IN_MEMPCPY_CHK)\n+\t       || gimple_call_builtin_p (def_stmt, BUILT_IN_MEMMOVE)\n+\t       || gimple_call_builtin_p (def_stmt, BUILT_IN_MEMMOVE_CHK))\n \t   && (TREE_CODE (gimple_call_arg (def_stmt, 0)) == ADDR_EXPR\n \t       || TREE_CODE (gimple_call_arg (def_stmt, 0)) == SSA_NAME)\n \t   && (TREE_CODE (gimple_call_arg (def_stmt, 1)) == ADDR_EXPR\n \t       || TREE_CODE (gimple_call_arg (def_stmt, 1)) == SSA_NAME)\n-\t   && poly_int_tree_p (gimple_call_arg (def_stmt, 2), &copy_size)\n+\t   && (poly_int_tree_p (gimple_call_arg (def_stmt, 2), &copy_size)\n+\t       || (TREE_CODE (gimple_call_arg (def_stmt, 2)) == SSA_NAME\n+\t\t   && poly_int_tree_p (SSA_VAL (gimple_call_arg (def_stmt, 2)),\n+\t\t\t\t       &copy_size)))\n \t   /* Handling this is more complicated, give up for now.  */\n \t   && data->partial_defs.is_empty ())\n     {"}]}