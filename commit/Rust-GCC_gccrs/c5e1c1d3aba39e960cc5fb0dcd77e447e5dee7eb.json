{"sha": "c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVlMWMxZDNhYmEzOWU5NjBjYzVmYjBkY2Q3N2U0NDdlNWRlZTdlYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-17T18:15:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-17T18:22:05Z"}, "message": "libstdc++: P1964R2 Wording for boolean-testable\n\nThis removes the complicated std::boolean concept, as agreed in Prague.\n\n\t* include/bits/ranges_algo.h (__find_fn, __find_first_of_fn)\n\t(__adjacent_find_fn): Cast result of predicate to bool.\n\t* include/std/concepts (__boolean): Remove.\n\t(__detail::__boolean_testable_impl, __detail::__boolean_testable): Add\n\tnew helper concepts.\n\t(__detail::__weakly_eq_cmp_with, totally_ordered, totally_ordered_with)\n\t(predicate): Use __boolean_testable instead of boolean.\n\t* libsupc++/compare (__detail::__partially_ordered, _Synth3way):\n\tLikewise.", "tree": {"sha": "3323f02a1bf17f6607e38300d918d2bd1df43a72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3323f02a1bf17f6607e38300d918d2bd1df43a72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b"}], "stats": {"total": 112, "additions": 57, "deletions": 55}, "files": [{"sha": "7e48bee2b18274465f3a0000cd6b1f0803b97b8f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb", "patch": "@@ -1,5 +1,16 @@\n 2020-02-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tP1964R2 Wording for boolean-testable\n+\t* include/bits/ranges_algo.h (__find_fn, __find_first_of_fn)\n+\t(__adjacent_find_fn): Cast result of predicate to bool.\n+\t* include/std/concepts (__boolean): Remove.\n+\t(__detail::__boolean_testable_impl, __detail::__boolean_testable): Add\n+\tnew helper concepts.\n+\t(__detail::__weakly_eq_cmp_with, totally_ordered, totally_ordered_with)\n+\t(predicate): Use __boolean_testable instead of boolean.\n+\t* libsupc++/compare (__detail::__partially_ordered, _Synth3way):\n+\tLikewise.\n+\n \tP1970R2 Consistency for size() functions: Add ranges::ssize\n \t* include/bits/range_access.h (_SSize, ssize): Define for C++20.\n \t* testsuite/std/ranges/access/ssize.cc: New test."}, {"sha": "83f295722e92985e49325f5c8d812361a171ef58", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb", "patch": "@@ -206,7 +206,7 @@ namespace ranges\n \t\t const _Tp& __value, _Proj __proj = {}) const\n       {\n \twhile (__first != __last\n-\t    && !(std::__invoke(__proj, *__first) == __value))\n+\t    && !(bool)(std::__invoke(__proj, *__first) == __value))\n \t  ++__first;\n \treturn __first;\n       }\n@@ -295,9 +295,9 @@ namespace ranges\n       {\n \tfor (; __first1 != __last1; ++__first1)\n \t  for (auto __iter = __first2; __iter != __last2; ++__iter)\n-\t    if (std::__invoke(__pred,\n-\t\t\t      std::__invoke(__proj1, *__first1),\n-\t\t\t      std::__invoke(__proj2, *__iter)))\n+\t    if ((bool)std::__invoke(__pred,\n+\t\t\t\t    std::__invoke(__proj1, *__first1),\n+\t\t\t\t    std::__invoke(__proj2, *__iter)))\n \t      return __first1;\n \treturn __first1;\n       }\n@@ -687,9 +687,9 @@ namespace ranges\n \tauto __next = __first;\n \tfor (; ++__next != __last; __first = __next)\n \t  {\n-\t    if (std::__invoke(__pred,\n-\t\t\t      std::__invoke(__proj, *__first),\n-\t\t\t      std::__invoke(__proj, *__next)))\n+\t    if ((bool)std::__invoke(__pred,\n+\t\t\t\t    std::__invoke(__proj, *__first),\n+\t\t\t\t    std::__invoke(__proj, *__next)))\n \t      return __first;\n \t  }\n \treturn __next;"}, {"sha": "f3db40b798fe23005d7ec56aa0b2e0272f42b75b", "filename": "libstdc++-v3/include/std/concepts", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts?ref=c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb", "patch": "@@ -259,27 +259,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // [concepts.compare], comparison concepts\n \n-  /// [concept.boolean], concept boolean\n-  template<typename _Bp>\n-    concept boolean\n-      = movable<remove_cvref_t<_Bp>>\n-      && requires(__detail::__cref<_Bp> __b1, __detail::__cref<_Bp> __b2,\n-\t\t  const bool __a) {\n-\t{ __b1 } -> convertible_to<bool>;\n-\t{ !__b1 } -> convertible_to<bool>;\n-\t{ __b1 && __b2 } -> same_as<bool>;\n-\t{ __b1 && __a  } -> same_as<bool>;\n-\t{ __a  && __b2 } -> same_as<bool>;\n-\t{ __b1 || __b2 } -> same_as<bool>;\n-\t{ __b1 || __a  } -> same_as<bool>;\n-\t{ __a  || __b2 } -> same_as<bool>;\n-\t{ __b1 == __b2 } -> convertible_to<bool>;\n-\t{ __b1 == __a  } -> convertible_to<bool>;\n-\t{ __a  == __b2 } -> convertible_to<bool>;\n-\t{ __b1 != __b2 } -> convertible_to<bool>;\n-\t{ __b1 != __a  } -> convertible_to<bool>;\n-\t{ __a  != __b2 } -> convertible_to<bool>;\n-      };\n+  // [concept.booleantestable], Boolean testability\n+  namespace __detail\n+  {\n+    template<typename _Tp>\n+      concept __boolean_testable_impl = convertible_to<_Tp, bool>;\n+\n+    template<typename _Tp>\n+      concept __boolean_testable\n+\t= __boolean_testable_impl<_Tp>\n+\t  && requires(_Tp&& __t)\n+\t  { { !static_cast<_Tp&&>(__t) } -> __boolean_testable_impl; };\n+  } // namespace __detail\n \n   // [concept.equalitycomparable], concept equality_comparable\n \n@@ -288,10 +279,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp, typename _Up>\n       concept __weakly_eq_cmp_with\n \t= requires(__detail::__cref<_Tp> __t, __detail::__cref<_Up> __u) {\n-\t  { __t == __u } -> boolean;\n-\t  { __t != __u } -> boolean;\n-\t  { __u == __t } -> boolean;\n-\t  { __u != __t } -> boolean;\n+\t  { __t == __u } -> __boolean_testable;\n+\t  { __t != __u } -> __boolean_testable;\n+\t  { __u == __t } -> __boolean_testable;\n+\t  { __u != __t } -> __boolean_testable;\n \t};\n   } // namespace __detail\n \n@@ -311,10 +302,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     concept totally_ordered\n       = equality_comparable<_Tp>\n       && requires(__detail::__cref<_Tp> __a, __detail::__cref<_Tp> __b) {\n-\t{ __a <  __b } -> boolean;\n-\t{ __a >  __b } -> boolean;\n-\t{ __a <= __b } -> boolean;\n-\t{ __a >= __b } -> boolean;\n+\t{ __a <  __b } -> __detail::__boolean_testable;\n+\t{ __a >  __b } -> __detail::__boolean_testable;\n+\t{ __a <= __b } -> __detail::__boolean_testable;\n+\t{ __a >= __b } -> __detail::__boolean_testable;\n       };\n \n   template<typename _Tp, typename _Up>\n@@ -325,14 +316,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t    __detail::__cref<_Up>>>\n       && equality_comparable_with<_Tp, _Up>\n       && requires(__detail::__cref<_Tp> __t, __detail::__cref<_Up> __u) {\n-\t{ __t <  __u } -> boolean;\n-\t{ __t >  __u } -> boolean;\n-\t{ __t <= __u } -> boolean;\n-\t{ __t >= __u } -> boolean;\n-\t{ __u <  __t } -> boolean;\n-\t{ __u >  __t } -> boolean;\n-\t{ __u <= __t } -> boolean;\n-\t{ __u >= __t } -> boolean;\n+\t{ __t <  __u } -> __detail::__boolean_testable;\n+\t{ __t >  __u } -> __detail::__boolean_testable;\n+\t{ __t <= __u } -> __detail::__boolean_testable;\n+\t{ __t >= __u } -> __detail::__boolean_testable;\n+\t{ __u <  __t } -> __detail::__boolean_testable;\n+\t{ __u >  __t } -> __detail::__boolean_testable;\n+\t{ __u <= __t } -> __detail::__boolean_testable;\n+\t{ __u >= __t } -> __detail::__boolean_testable;\n       };\n \n   template<typename _Tp>\n@@ -351,7 +342,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// [concept.predicate], concept predicate\n   template<typename _Fn, typename... _Args>\n     concept predicate = regular_invocable<_Fn, _Args...>\n-      && boolean<invoke_result_t<_Fn, _Args...>>;\n+      && __detail::__boolean_testable<invoke_result_t<_Fn, _Args...>>;\n \n   /// [concept.relation], concept relation\n   template<typename _Rel, typename _Tp, typename _Up>"}, {"sha": "ba7db316486894826be77cc80da6a63e4532b109", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=c5e1c1d3aba39e960cc5fb0dcd77e447e5dee7eb", "patch": "@@ -416,14 +416,14 @@ namespace std\n       concept __partially_ordered_with\n \t= requires(const remove_reference_t<_Tp>& __t,\n \t\t   const remove_reference_t<_Up>& __u) {\n-\t  { __t <  __u } -> boolean;\n-\t  { __t >  __u } -> boolean;\n-\t  { __t <= __u } -> boolean;\n-\t  { __t >= __u } -> boolean;\n-\t  { __u <  __t } -> boolean;\n-\t  { __u >  __t } -> boolean;\n-\t  { __u <= __t } -> boolean;\n-\t  { __u >= __t } -> boolean;\n+\t  { __t <  __u } -> __boolean_testable;\n+\t  { __t >  __u } -> __boolean_testable;\n+\t  { __t <= __u } -> __boolean_testable;\n+\t  { __t >= __u } -> __boolean_testable;\n+\t  { __u <  __t } -> __boolean_testable;\n+\t  { __u >  __t } -> __boolean_testable;\n+\t  { __u <= __t } -> __boolean_testable;\n+\t  { __u >= __t } -> __boolean_testable;\n \t};\n   } // namespace __detail\n \n@@ -879,8 +879,8 @@ namespace std\n \toperator()(const _Tp& __t, const _Up& __u) const\n \trequires requires\n \t{\n-\t  { __t < __u } -> convertible_to<bool>;\n-\t  { __u < __t } -> convertible_to<bool>;\n+\t  { __t < __u } -> __boolean_testable;\n+\t  { __u < __t } -> __boolean_testable;\n \t}\n \t{\n \t  if constexpr (three_way_comparable_with<_Tp, _Up>)"}]}