{"sha": "fbed6f36955aefc4b8735e7f62585fcc3d14f50b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlZDZmMzY5NTVhZWZjNGI4NzM1ZTdmNjI1ODVmY2MzZDE0ZjUwYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-01-12T17:30:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-01-12T17:30:03Z"}, "message": "builtin_target.c (check_features): Check all supported __builtin_cpu_supports options.\n\n\t* gcc.target/i386/builtin_target.c (check_features): Check all\n\tsupported __builtin_cpu_supports options.\n\nFrom-SVN: r244375", "tree": {"sha": "1cf310a2e4162eb031c2b7701d2a75e8641a9f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cf310a2e4162eb031c2b7701d2a75e8641a9f00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbed6f36955aefc4b8735e7f62585fcc3d14f50b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbed6f36955aefc4b8735e7f62585fcc3d14f50b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbed6f36955aefc4b8735e7f62585fcc3d14f50b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1f009a65fd70df0962e0d5b94aba313520df357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f009a65fd70df0962e0d5b94aba313520df357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1f009a65fd70df0962e0d5b94aba313520df357"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "0939e9e669658c5ffbb535acbaeb26b8ad42b75a", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=fbed6f36955aefc4b8735e7f62585fcc3d14f50b", "patch": "@@ -47,28 +47,25 @@\n #define bit_SSE\t\t(1 << 25)\n #define bit_SSE2\t(1 << 26)\n \n-/* Extended Features */\n+/* Extended Features (%eax == 0x80000001) */\n /* %ecx */\n #define bit_LAHF_LM\t(1 << 0)\n #define bit_ABM\t\t(1 << 5)\n #define bit_SSE4a\t(1 << 6)\n #define bit_PRFCHW\t(1 << 8)\n #define bit_XOP         (1 << 11)\n-#define bit_AVX512VPOPCNTDQ\t(1 << 14)\n #define bit_LWP \t(1 << 15)\n #define bit_FMA4        (1 << 16)\n #define bit_TBM         (1 << 21)\n #define bit_MWAITX      (1 << 29)\n \n /* %edx */\n-#define bit_AVX5124VNNIW (1 << 2)\n-#define bit_AVX5124FMAPS (1 << 3)\n #define bit_MMXEXT\t(1 << 22)\n #define bit_LM\t\t(1 << 29)\n #define bit_3DNOWP\t(1 << 30)\n #define bit_3DNOW\t(1 << 31)\n \n-/* %ebx.  */\n+/* %ebx  */\n #define bit_CLZERO\t(1 << 0)\n \n /* Extended Features (%eax == 7) */\n@@ -100,6 +97,11 @@\n #define bit_AVX512VBMI\t(1 << 1)\n #define bit_PKU\t(1 << 3)\n #define bit_OSPKE\t(1 << 4)\n+#define bit_AVX512VPOPCNTDQ\t(1 << 14)\n+\n+/* %edx */\n+#define bit_AVX5124VNNIW (1 << 2)\n+#define bit_AVX5124FMAPS (1 << 3)\n \n /* XFEATURE_ENABLED_MASK register bits (%eax == 13, %ecx == 0) */\n #define bit_BNDREGS     (1 << 3)"}, {"sha": "631a8a3d7ca554c7a9c12e00833080b1afb95bb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbed6f36955aefc4b8735e7f62585fcc3d14f50b", "patch": "@@ -1,3 +1,8 @@\n+2017-01-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/builtin_target.c (check_features): Check all\n+\tsupported __builtin_cpu_supports options.\n+\n 2017-01-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR tree-optimization/78319"}, {"sha": "374f0292453bcdbbf4d8300f466f50ba29a47e52", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=fbed6f36955aefc4b8735e7f62585fcc3d14f50b", "patch": "@@ -163,6 +163,9 @@ static void\n check_features (unsigned int ecx, unsigned int edx,\n \t\tint max_cpuid_level)\n {\n+  unsigned int eax, ebx;\n+  unsigned int ext_level;\n+\n   if (edx & bit_CMOV)\n     assert (__builtin_cpu_supports (\"cmov\"));\n   if (edx & bit_MMX)\n@@ -187,38 +190,58 @@ check_features (unsigned int ecx, unsigned int edx,\n     assert (__builtin_cpu_supports (\"sse4.2\"));\n   if (ecx & bit_AVX)\n     assert (__builtin_cpu_supports (\"avx\"));\n+  if (ecx & bit_FMA)\n+    assert (__builtin_cpu_supports (\"fma\"));\n \n   /* Get advanced features at level 7 (eax = 7, ecx = 0).  */\n   if (max_cpuid_level >= 7)\n     {\n-      unsigned int eax, ebx, ecx, edx;\n       __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+      if (ebx & bit_BMI)\n+\tassert (__builtin_cpu_supports (\"bmi\"));\n       if (ebx & bit_AVX2)\n \tassert (__builtin_cpu_supports (\"avx2\"));\n+      if (ebx & bit_BMI2)\n+\tassert (__builtin_cpu_supports (\"bmi2\"));\n       if (ebx & bit_AVX512F)\n \tassert (__builtin_cpu_supports (\"avx512f\"));\n       if (ebx & bit_AVX512VL)\n \tassert (__builtin_cpu_supports (\"avx512vl\"));\n+      if (ebx & bit_AVX512BW)\n+\tassert (__builtin_cpu_supports (\"avx512bw\"));\n+      if (ebx & bit_AVX512DQ)\n+\tassert (__builtin_cpu_supports (\"avx512dq\"));\n       if (ebx & bit_AVX512CD)\n \tassert (__builtin_cpu_supports (\"avx512cd\"));\n       if (ebx & bit_AVX512PF)\n \tassert (__builtin_cpu_supports (\"avx512pf\"));\n       if (ebx & bit_AVX512ER)\n \tassert (__builtin_cpu_supports (\"avx512er\"));\n-      if (ebx & bit_AVX512BW)\n-\tassert (__builtin_cpu_supports (\"avx512bw\"));\n-      if (ebx & bit_AVX512DQ)\n-\tassert (__builtin_cpu_supports (\"avx512dq\"));\n-      if (ecx & bit_AVX512IFMA)\n+      if (ebx & bit_AVX512IFMA)\n \tassert (__builtin_cpu_supports (\"avx512ifma\"));\n       if (ecx & bit_AVX512VBMI)\n \tassert (__builtin_cpu_supports (\"avx512vbmi\"));\n+      if (ecx & bit_AVX512VPOPCNTDQ)\n+\tassert (__builtin_cpu_supports (\"avx512vpopcntdq\"));\n       if (edx & bit_AVX5124VNNIW)\n \tassert (__builtin_cpu_supports (\"avx5124vnniw\"));\n       if (edx & bit_AVX5124FMAPS)\n \tassert (__builtin_cpu_supports (\"avx5124fmaps\"));\n-      if (ecx & bit_AVX512VPOPCNTDQ)\n-\tassert (__builtin_cpu_supports (\"avx512vpopcntdq\"));\n+    }\n+\n+  /* Check cpuid level of extended features.  */\n+  __cpuid (0x80000000, ext_level, ebx, ecx, edx);\n+\n+  if (ext_level >= 0x80000001)\n+    {\n+      __cpuid (0x80000001, eax, ebx, ecx, edx);\n+\n+      if (ecx & bit_SSE4a)\n+\tassert (__builtin_cpu_supports (\"sse4a\"));\n+      if (ecx & bit_FMA4)\n+\tassert (__builtin_cpu_supports (\"fma4\"));\n+      if (ecx & bit_XOP)\n+\tassert (__builtin_cpu_supports (\"xop\"));\n     }\n }\n "}, {"sha": "a1dc011525f55ee1195c86391fc14dc5d769b69c", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbed6f36955aefc4b8735e7f62585fcc3d14f50b/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=fbed6f36955aefc4b8735e7f62585fcc3d14f50b", "patch": "@@ -215,6 +215,9 @@ static void\n get_available_features (unsigned int ecx, unsigned int edx,\n \t\t\tint max_cpuid_level)\n {\n+  unsigned int eax, ebx;\n+  unsigned int ext_level;\n+\n   unsigned int features = 0;\n \n   if (edx & bit_CMOV)\n@@ -247,7 +250,6 @@ get_available_features (unsigned int ecx, unsigned int edx,\n   /* Get Advanced Features at level 7 (eax = 7, ecx = 0). */\n   if (max_cpuid_level >= 7)\n     {\n-      unsigned int eax, ebx, ecx, edx;\n       __cpuid_count (7, 0, eax, ebx, ecx, edx);\n       if (ebx & bit_BMI)\n         features |= (1 << FEATURE_BMI);\n@@ -273,20 +275,18 @@ get_available_features (unsigned int ecx, unsigned int edx,\n \tfeatures |= (1 << FEATURE_AVX512IFMA);\n       if (ecx & bit_AVX512VBMI)\n \tfeatures |= (1 << FEATURE_AVX512VBMI);\n+      if (ecx & bit_AVX512VPOPCNTDQ)\n+\tfeatures |= (1 << FEATURE_AVX512VPOPCNTDQ);\n       if (edx & bit_AVX5124VNNIW)\n \tfeatures |= (1 << FEATURE_AVX5124VNNIW);\n       if (edx & bit_AVX5124FMAPS)\n \tfeatures |= (1 << FEATURE_AVX5124FMAPS);\n-      if (ecx & bit_AVX512VPOPCNTDQ)\n-\tfeatures |= (1 << FEATURE_AVX512VPOPCNTDQ);\n     }\n \n-  unsigned int ext_level;\n-  unsigned int eax, ebx;\n   /* Check cpuid level of extended features.  */\n   __cpuid (0x80000000, ext_level, ebx, ecx, edx);\n \n-  if (ext_level > 0x80000000)\n+  if (ext_level >= 0x80000001)\n     {\n       __cpuid (0x80000001, eax, ebx, ecx, edx);\n "}]}