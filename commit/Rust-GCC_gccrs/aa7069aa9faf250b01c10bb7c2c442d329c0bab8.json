{"sha": "aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE3MDY5YWE5ZmFmMjUwYjAxYzEwYmI3YzJjNDQyZDMyOWMwYmFiOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-04T09:34:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-04T09:34:32Z"}, "message": "re PR c++/8781 (Pessimization of C++ (functional) code)\n\n2009-04-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/8781\n\tPR tree-optimization/37892\n\t* tree-ssa-sccvn.h (vn_reference_fold_indirect): Declare.\n\t* tree-ssa-sccvn.c (vn_reference_fold_indirect): New function.\n\t(valueize_refs): Call it for *& valueizations.\n\t(shared_reference_ops_from_ref): Rename to ...\n\t(valueize_shared_reference_ops_from_ref): ... this and valueize.\n\t(shared_reference_ops_from_call): Rename to ...\n\t(valueize_shared_reference_ops_from_call): ... this and valueize.\n\t(vn_reference_lookup): Update.\n\t(visit_reference_op_call): Likewise.\n\t* tree-ssa-pre.c (phi_translate_1): Fold *&.\n\t(eliminate): Value-replace the call address in call statements.\n\n\t* g++.dg/tree-ssa/pr8781.C: New testcase.\n\t* gcc.dg/tree-ssa/ssa-pre-25.c: Likewise.\n\nFrom-SVN: r145533", "tree": {"sha": "9008d47a69f8bfcbddab1535dfb7516d4a030aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9008d47a69f8bfcbddab1535dfb7516d4a030aff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd15ad3e604aaa74991b72dcbf74ab61fe2fc9c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd15ad3e604aaa74991b72dcbf74ab61fe2fc9c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd15ad3e604aaa74991b72dcbf74ab61fe2fc9c4"}], "stats": {"total": 231, "additions": 196, "deletions": 35}, "files": [{"sha": "69fbfd5fe29a6adca08e37f24ec5d5058356d2c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "patch": "@@ -1,3 +1,19 @@\n+2009-04-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/8781\n+\tPR tree-optimization/37892\n+\t* tree-ssa-sccvn.h (vn_reference_fold_indirect): Declare.\n+\t* tree-ssa-sccvn.c (vn_reference_fold_indirect): New function.\n+\t(valueize_refs): Call it for *& valueizations.\n+\t(shared_reference_ops_from_ref): Rename to ...\n+\t(valueize_shared_reference_ops_from_ref): ... this and valueize.\n+\t(shared_reference_ops_from_call): Rename to ...\n+\t(valueize_shared_reference_ops_from_call): ... this and valueize.\n+\t(vn_reference_lookup): Update.\n+\t(visit_reference_op_call): Likewise.\n+\t* tree-ssa-pre.c (phi_translate_1): Fold *&.\n+\t(eliminate): Value-replace the call address in call statements.\n+\n 2009-04-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39636"}, {"sha": "82894528ca54689e2823d937d261a227c8e7a536", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "patch": "@@ -1,3 +1,10 @@\n+2009-04-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/8781\n+\tPR tree-optimization/37892\n+\t* g++.dg/tree-ssa/pr8781.C: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-pre-25.c: Likewise.\n+\n 2009-04-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39636"}, {"sha": "a9d279af74eeb7f1e3ef3293ade5bd523f509ea5", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr8781.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C?ref=aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n+\n+int f();\n+\n+template<typename predicate>\n+class noop_t {\n+    const predicate &pred;\n+public:\n+    explicit noop_t(const predicate &p) : pred(p) {}\n+\n+    int operator()() const { return pred(); }\n+};\n+\n+template<typename predicate>\n+inline noop_t<predicate> noop(const predicate pred) {\n+    return noop_t<predicate>(pred);\n+}\n+\n+int x()\n+{\n+  return (noop(noop(noop(noop(noop(noop(noop(noop(noop(f)))))))))());\n+}\n+\n+/* We should optimize this to a direct call.  */\n+\n+/* { dg-final { scan-tree-dump \"Replacing call target with f\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "32b068275c183bce0b4ade81313d0a11d293332f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-25.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-25.c?ref=aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+\n+struct X { int i; };\n+\n+int foo (int x)\n+{\n+  struct X a;\n+  struct X b;\n+  struct X *p;\n+  a.i = 1;\n+  b.i = 2;\n+  if (x)\n+    p = &a;\n+  else\n+    p = &b;\n+  return p->i;\n+}\n+\n+/* We should eliminate the load from p for a PHI node with values 1 and 2.  */\n+\n+/* { dg-final { scan-tree-dump \"Eliminated: 1\" \"pre\" } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "ed326e40303c4b5a060bf9d2aad8fb74ac0be185", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "patch": "@@ -1563,11 +1563,12 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \ttree newvuse = vuse;\n \tVEC (vn_reference_op_s, heap) *newoperands = NULL;\n \tbool changed = false;\n-\tunsigned int i;\n+\tunsigned int i, j;\n \tvn_reference_op_t operand;\n \tvn_reference_t newref;\n \n-\tfor (i = 0; VEC_iterate (vn_reference_op_s, operands, i, operand); i++)\n+\tfor (i = 0, j = 0;\n+\t     VEC_iterate (vn_reference_op_s, operands, i, operand); i++, j++)\n \t  {\n \t    pre_expr opresult;\n \t    pre_expr leader;\n@@ -1642,7 +1643,13 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    newop.op0 = op0;\n \t    newop.op1 = op1;\n \t    newop.op2 = op2;\n-\t    VEC_replace (vn_reference_op_s, newoperands, i, &newop);\n+\t    VEC_replace (vn_reference_op_s, newoperands, j, &newop);\n+\t    /* If it transforms from an SSA_NAME to an address, fold with\n+\t       a preceding indirect reference.  */\n+\t    if (j > 0 && op0 && TREE_CODE (op0) == ADDR_EXPR\n+\t\t&& VEC_index (vn_reference_op_s,\n+\t\t\t      newoperands, j - 1)->opcode == INDIRECT_REF)\n+\t      vn_reference_fold_indirect (&newoperands, &j);\n \t  }\n \tif (i != VEC_length (vn_reference_op_s, operands))\n \t  {\n@@ -4098,6 +4105,29 @@ eliminate (void)\n \t\t  todo = TODO_cleanup_cfg;\n \t\t}\n \t    }\n+\t  /* Visit indirect calls and turn them into direct calls if\n+\t     possible.  */\n+\t  if (gimple_code (stmt) == GIMPLE_CALL\n+\t      && TREE_CODE (gimple_call_fn (stmt)) == SSA_NAME)\n+\t    {\n+\t      tree fn = VN_INFO (gimple_call_fn (stmt))->valnum;\n+\t      if (TREE_CODE (fn) == ADDR_EXPR\n+\t\t  && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL)\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"Replacing call target with \");\n+\t\t      print_generic_expr (dump_file, fn, 0);\n+\t\t      fprintf (dump_file, \" in \");\n+\t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t    }\n+\n+\t\t  gimple_call_set_fn (stmt, fn);\n+\t\t  update_stmt (stmt);\n+\t\t  if (maybe_clean_or_replace_eh_stmt (stmt, stmt))\n+\t\t    gimple_purge_dead_eh_edges (b);\n+\t\t}\n+\t    }\n \t}\n     }\n "}, {"sha": "729787be3f7078479aa8e3c95799c2fdd6b1bc2c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 87, "deletions": 32, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "patch": "@@ -744,36 +744,52 @@ create_reference_ops_from_call (gimple call)\n   return result;\n }\n \n-static VEC(vn_reference_op_s, heap) *shared_lookup_references;\n-\n-/* Create a vector of vn_reference_op_s structures from REF, a\n-   REFERENCE_CLASS_P tree.  The vector is shared among all callers of\n-   this function.  */\n-\n-static VEC(vn_reference_op_s, heap) *\n-shared_reference_ops_from_ref (tree ref)\n+/* Fold *& at position *I_P in a vn_reference_op_s vector *OPS.  Updates\n+   *I_P to point to the last element of the replacement.  */\n+void\n+vn_reference_fold_indirect (VEC (vn_reference_op_s, heap) **ops,\n+\t\t\t    unsigned int *i_p)\n {\n-  if (!ref)\n-    return NULL;\n-  VEC_truncate (vn_reference_op_s, shared_lookup_references, 0);\n-  copy_reference_ops_from_ref (ref, &shared_lookup_references);\n-  return shared_lookup_references;\n-}\n+  VEC(vn_reference_op_s, heap) *mem = NULL;\n+  vn_reference_op_t op;\n+  unsigned int i = *i_p;\n+  unsigned int j;\n \n-/* Create a vector of vn_reference_op_s structures from CALL, a\n-   call statement.  The vector is shared among all callers of\n-   this function.  */\n+  /* Get ops for the addressed object.  */\n+  op = VEC_index (vn_reference_op_s, *ops, i);\n+  copy_reference_ops_from_ref (TREE_OPERAND (op->op0, 0), &mem);\n \n-static VEC(vn_reference_op_s, heap) *\n-shared_reference_ops_from_call (gimple call)\n-{\n-  if (!call)\n-    return NULL;\n-  VEC_truncate (vn_reference_op_s, shared_lookup_references, 0);\n-  copy_reference_ops_from_call (call, &shared_lookup_references);\n-  return shared_lookup_references;\n-}\n+  /* Do the replacement - we should have at least one op in mem now.  */\n+  if (VEC_length (vn_reference_op_s, mem) == 1)\n+    {\n+      VEC_replace (vn_reference_op_s, *ops, i - 1,\n+\t\t   VEC_index (vn_reference_op_s, mem, 0));\n+      VEC_ordered_remove (vn_reference_op_s, *ops, i);\n+      i--;\n+    }\n+  else if (VEC_length (vn_reference_op_s, mem) == 2)\n+    {\n+      VEC_replace (vn_reference_op_s, *ops, i - 1,\n+\t\t   VEC_index (vn_reference_op_s, mem, 0));\n+      VEC_replace (vn_reference_op_s, *ops, i,\n+\t\t   VEC_index (vn_reference_op_s, mem, 1));\n+    }\n+  else if (VEC_length (vn_reference_op_s, mem) > 2)\n+    {\n+      VEC_replace (vn_reference_op_s, *ops, i - 1,\n+\t\t   VEC_index (vn_reference_op_s, mem, 0));\n+      VEC_replace (vn_reference_op_s, *ops, i,\n+\t\t   VEC_index (vn_reference_op_s, mem, 1));\n+      /* ???  There is no VEC_splice.  */\n+      for (j = 2; VEC_iterate (vn_reference_op_s, mem, j, op); j++)\n+\tVEC_safe_insert (vn_reference_op_s, heap, *ops, ++i, op);\n+    }\n+  else\n+    gcc_unreachable ();\n \n+  VEC_free (vn_reference_op_s, heap, mem);\n+  *i_p = i;\n+}\n \n /* Transform any SSA_NAME's in a vector of vn_reference_op_s\n    structures into their value numbers.  This is done in-place, and\n@@ -783,7 +799,7 @@ static VEC (vn_reference_op_s, heap) *\n valueize_refs (VEC (vn_reference_op_s, heap) *orig)\n {\n   vn_reference_op_t vro;\n-  int i;\n+  unsigned int i;\n \n   for (i = 0; VEC_iterate (vn_reference_op_s, orig, i, vro); i++)\n     {\n@@ -795,15 +811,54 @@ valueize_refs (VEC (vn_reference_op_s, heap) *orig)\n \t     the opcode.  */\n \t  if (TREE_CODE (vro->op0) != SSA_NAME && vro->opcode == SSA_NAME)\n \t    vro->opcode = TREE_CODE (vro->op0);\n+\t  /* If it transforms from an SSA_NAME to an address, fold with\n+\t     a preceding indirect reference.  */\n+\t  if (i > 0 && TREE_CODE (vro->op0) == ADDR_EXPR\n+\t      && VEC_index (vn_reference_op_s,\n+\t\t\t    orig, i - 1)->opcode == INDIRECT_REF)\n+\t    vn_reference_fold_indirect (&orig, &i);\n \t}\n-      /* TODO: Do we want to valueize op2 and op1 of\n-\t ARRAY_REF/COMPONENT_REF for Ada */\n-      \n+      if (vro->op1 && TREE_CODE (vro->op1) == SSA_NAME)\n+\tvro->op1 = SSA_VAL (vro->op1);\n+      if (vro->op2 && TREE_CODE (vro->op2) == SSA_NAME)\n+\tvro->op2 = SSA_VAL (vro->op2);\n     }\n \n   return orig;\n }\n \n+static VEC(vn_reference_op_s, heap) *shared_lookup_references;\n+\n+/* Create a vector of vn_reference_op_s structures from REF, a\n+   REFERENCE_CLASS_P tree.  The vector is shared among all callers of\n+   this function.  */\n+\n+static VEC(vn_reference_op_s, heap) *\n+valueize_shared_reference_ops_from_ref (tree ref)\n+{\n+  if (!ref)\n+    return NULL;\n+  VEC_truncate (vn_reference_op_s, shared_lookup_references, 0);\n+  copy_reference_ops_from_ref (ref, &shared_lookup_references);\n+  shared_lookup_references = valueize_refs (shared_lookup_references);\n+  return shared_lookup_references;\n+}\n+\n+/* Create a vector of vn_reference_op_s structures from CALL, a\n+   call statement.  The vector is shared among all callers of\n+   this function.  */\n+\n+static VEC(vn_reference_op_s, heap) *\n+valueize_shared_reference_ops_from_call (gimple call)\n+{\n+  if (!call)\n+    return NULL;\n+  VEC_truncate (vn_reference_op_s, shared_lookup_references, 0);\n+  copy_reference_ops_from_call (call, &shared_lookup_references);\n+  shared_lookup_references = valueize_refs (shared_lookup_references);\n+  return shared_lookup_references;\n+}\n+\n /* Lookup a SCCVN reference operation VR in the current hash table.\n    Returns the resulting value number if it exists in the hash table,\n    NULL_TREE otherwise.  VNRESULT will be filled in with the actual\n@@ -914,7 +969,7 @@ vn_reference_lookup (tree op, tree vuse, bool maywalk,\n     *vnresult = NULL;\n \n   vr1.vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n-  vr1.operands = valueize_refs (shared_reference_ops_from_ref (op));\n+  vr1.operands = valueize_shared_reference_ops_from_ref (op);\n   vr1.hashcode = vn_reference_compute_hash (&vr1);\n \n   if (maywalk\n@@ -1585,7 +1640,7 @@ visit_reference_op_call (tree lhs, gimple stmt)\n   tree vuse = gimple_vuse (stmt);\n \n   vr1.vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n-  vr1.operands = valueize_refs (shared_reference_ops_from_call (stmt));\n+  vr1.operands = valueize_shared_reference_ops_from_call (stmt);\n   vr1.hashcode = vn_reference_compute_hash (&vr1);\n   result = vn_reference_lookup_1 (&vr1, NULL);\n   if (result)"}, {"sha": "c8171c227104c279cf230e654778e8606eebd512", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7069aa9faf250b01c10bb7c2c442d329c0bab8/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=aa7069aa9faf250b01c10bb7c2c442d329c0bab8", "patch": "@@ -173,6 +173,8 @@ vn_nary_op_t vn_nary_op_insert_stmt (gimple, tree);\n vn_nary_op_t vn_nary_op_insert_pieces (unsigned int, enum tree_code,\n \t\t\t\t       tree, tree, tree, tree,\n \t\t\t\t       tree, tree, unsigned int);\n+void vn_reference_fold_indirect (VEC (vn_reference_op_s, heap) **,\n+\t\t\t\t unsigned int *);\n void copy_reference_ops_from_ref (tree, VEC(vn_reference_op_s, heap) **);\n void copy_reference_ops_from_call (gimple, VEC(vn_reference_op_s, heap) **);\n tree get_ref_from_reference_ops (VEC(vn_reference_op_s, heap) *ops);"}]}