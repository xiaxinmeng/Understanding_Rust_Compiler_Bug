{"sha": "b2104239c8f23ff3463dba64f1c9266896ce4fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxMDQyMzljOGYyM2ZmMzQ2M2RiYTY0ZjFjOTI2Njg5NmNlNGZhZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-07-10T21:35:51Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-07-10T21:35:51Z"}, "message": "c: Add C2X BOOL_MAX and BOOL_WIDTH to limits.h\n\nC2X adds BOOL_MAX and BOOL_WIDTH macros to <limits.h>.  As GCC only\nsupports values 0 and 1 for _Bool (regardless of the number of bits in\nthe representation, other bits are padding bits and if any of them are\nnonzero, the representation is a trap representation), the values of\nthose macros can just be hardcoded directly in <limits.h> rather than\nneeding corresponding predefined macros.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/\n\t* glimits.h [__STDC_VERSION__ > 201710L] (BOOL_MAX, BOOL_WIDTH):\n\tNew macros.\n\ngcc/testsuite/\n\t* gcc.dg/c11-bool-limits-1.c, gcc.dg/c2x-bool-limits-1.c: New\n\ttests.", "tree": {"sha": "4177a3e3664db3169d964d1a98cda4eeefca6d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4177a3e3664db3169d964d1a98cda4eeefca6d39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2104239c8f23ff3463dba64f1c9266896ce4fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2104239c8f23ff3463dba64f1c9266896ce4fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2104239c8f23ff3463dba64f1c9266896ce4fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2104239c8f23ff3463dba64f1c9266896ce4fae/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1d3639e42dccc9372f11c6231c3ffe0589fd1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed1d3639e42dccc9372f11c6231c3ffe0589fd1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed1d3639e42dccc9372f11c6231c3ffe0589fd1c"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "50927510677a0949f17b5b3b156b9418f47df04c", "filename": "gcc/glimits.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2104239c8f23ff3463dba64f1c9266896ce4fae/gcc%2Fglimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2104239c8f23ff3463dba64f1c9266896ce4fae/gcc%2Fglimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglimits.h?ref=b2104239c8f23ff3463dba64f1c9266896ce4fae", "patch": "@@ -150,4 +150,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define ULLONG_WIDTH __LONG_LONG_WIDTH__\n #endif\n \n+#if defined (__STDC_VERSION__) && __STDC_VERSION__ > 201710L\n+/* C2X width and limit of _Bool.  */\n+# undef BOOL_MAX\n+# define BOOL_MAX 1\n+# undef BOOL_WIDTH\n+# define BOOL_WIDTH 1\n+#endif\n+\n #endif /* _LIMITS_H___ */"}, {"sha": "9ca29be4d72b584f15414108768c8f1e58afe939", "filename": "gcc/testsuite/gcc.dg/c11-bool-limits-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2104239c8f23ff3463dba64f1c9266896ce4fae/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-bool-limits-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2104239c8f23ff3463dba64f1c9266896ce4fae/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-bool-limits-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-bool-limits-1.c?ref=b2104239c8f23ff3463dba64f1c9266896ce4fae", "patch": "@@ -0,0 +1,13 @@\n+/* Test limits for _Bool not in <limits.h> in C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+#include <limits.h>\n+\n+#ifdef BOOL_MAX\n+# error \"unexpected BOOL_MAX\"\n+#endif\n+\n+#ifdef BOOL_WIDTH\n+# error \"unexpected BOOL_WIDTH\"\n+#endif"}, {"sha": "d32b4ef59ed16697b4aac75d44f9035c817537e1", "filename": "gcc/testsuite/gcc.dg/c2x-bool-limits-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2104239c8f23ff3463dba64f1c9266896ce4fae/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-limits-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2104239c8f23ff3463dba64f1c9266896ce4fae/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-limits-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-limits-1.c?ref=b2104239c8f23ff3463dba64f1c9266896ce4fae", "patch": "@@ -0,0 +1,19 @@\n+/* Test limits for _Bool in <limits.h> in C2x.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#include <limits.h>\n+\n+#ifndef BOOL_MAX\n+# error \"missing BOOL_MAX\"\n+#endif\n+\n+#ifndef BOOL_WIDTH\n+# error \"missing BOOL_WIDTH\"\n+#endif\n+\n+/* In principle _Bool can support values wider than 1 bit, stored via\n+   type punning, but this is not supported by GCC.  */\n+\n+_Static_assert (BOOL_MAX == 1, \"bad BOOL_MAX\");\n+_Static_assert (BOOL_WIDTH == 1, \"bad BOOL_WIDTH\");"}]}