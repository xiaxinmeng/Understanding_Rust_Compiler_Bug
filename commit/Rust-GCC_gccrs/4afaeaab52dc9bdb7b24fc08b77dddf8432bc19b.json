{"sha": "4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "node_id": "C_kwDOANBUbNoAKDRhZmFlYWFiNTJkYzliZGI3YjI0ZmMwOGI3N2RkZGY4NDMyYmMxOWI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-24T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-24T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "d41662e8b4e4aaa882ffacbebf81df246b234b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d41662e8b4e4aaa882ffacbebf81df246b234b6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/comments", "author": null, "committer": null, "parents": [{"sha": "5924c7d584640665db174c7545ae6c2b784af27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5924c7d584640665db174c7545ae6c2b784af27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5924c7d584640665db174c7545ae6c2b784af27c"}], "stats": {"total": 273, "additions": 272, "deletions": 1}, "files": [{"sha": "652b06901128377e3d8effb4815be116c3b04454", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "patch": "@@ -1,3 +1,7 @@\n+2022-09-23  Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2022-09-15  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "4ff50c3d2f3a92ed488b07fa6244dca5e350b1ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "patch": "@@ -1,3 +1,127 @@\n+2022-09-23  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* config/riscv/riscv.h (LOCAL_SYM_P): New.\n+\t(USE_LOAD_ADDRESS_MACRO): Simplify by calling LOCAL_SYM_P.\n+\n+2022-09-23  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-modes.def (VECTOR_BOOL_MODE): Add RVV mask modes.\n+\t(ADJUST_NUNITS): Adjust nunits using riscv_vector_chunks.\n+\t(ADJUST_ALIGNMENT): Adjust alignment.\n+\t(ADJUST_BYTESIZE): Adjust bytesize using riscv_vector_chunks.\n+\t(RVV_MODES): New macro.\n+\t(VECTOR_MODE_WITH_PREFIX): Add RVV vector modes.\n+\t(VECTOR_MODES_WITH_PREFIX): Add RVV vector modes.\n+\n+2022-09-23  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* common/config/riscv/riscv-common.cc: Change \"static void\" to \"void\".\n+\t* config.gcc: Add riscv-selftests.o\n+\t* config/riscv/predicates.md: Allow const_poly_int.\n+\t* config/riscv/riscv-protos.h (riscv_reinit): New function.\n+\t(riscv_parse_arch_string): change as exten function.\n+\t(riscv_run_selftests): New function.\n+\t* config/riscv/riscv.cc (riscv_cannot_force_const_mem): Don't allow poly\n+\tinto const pool.\n+\t(riscv_report_v_required): New function.\n+\t(riscv_expand_op): New function.\n+\t(riscv_expand_mult_with_const_int): New function.\n+\t(riscv_legitimize_poly_move): Ditto.\n+\t(riscv_legitimize_move): New function.\n+\t(riscv_hard_regno_mode_ok): Add VL/VTYPE register allocation and fix\n+\tvector RA.\n+\t(riscv_convert_vector_bits): Fix riscv_vector_chunks configuration for\n+\t-marh no 'v'.\n+\t(riscv_reinit): New function.\n+\t(TARGET_RUN_TARGET_SELFTESTS): New target hook support.\n+\t* config/riscv/t-riscv: Add riscv-selftests.o.\n+\t* config/riscv/riscv-selftests.cc: New file.\n+\n+2022-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106922\n+\t* tree-ssa-sccvn.cc (vn_reference_lookup_3): Allow\n+\tan arbitrary number of same valued skipped stores.\n+\n+2022-09-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::set): Swap setters such that the one\n+\taccepting REAL_VALUE_TYPE does all the work.\n+\n+2022-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (neoverse-v2): New entry.\n+\t(demeter): Update tunings to neoversev2.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* config/aarch64/aarch64.cc (demeter_addrcost_table): Rename to\n+\tneoversev2_addrcost_table.\n+\t(demeter_regmove_cost): Rename to neoversev2_addrcost_table.\n+\t(demeter_advsimd_vector_cost): Rename to neoversev2_advsimd_vector_cost.\n+\t(demeter_sve_vector_cost): Rename to neoversev2_sve_vector_cost.\n+\t(demeter_scalar_issue_info): Rename to neoversev2_scalar_issue_info.\n+\t(demeter_advsimd_issue_info): Rename to neoversev2_advsimd_issue_info.\n+\t(demeter_sve_issue_info): Rename to neoversev2_sve_issue_info.\n+\t(demeter_vec_issue_info): Rename to neoversev2_vec_issue_info.\n+\tUpdate references to above.\n+\t(demeter_vector_cost): Rename to neoversev2_vector_cost.\n+\t(demeter_tunings): Rename to neoversev2_tunings.\n+\t(aarch64_vec_op_count::rename_cycles_per_iter): Use\n+\tneoversev2_sve_issue_info instead of demeter_sve_issue_info.\n+\t* doc/invoke.texi (AArch64 Options): Document neoverse-v2.\n+\n+2022-09-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (build_le): Use vrp_val_*.\n+\t(build_lt): Same.\n+\t(build_ge): Same.\n+\t(build_gt): Same.\n+\t* value-range.cc (frange::set): Chop ranges outside of the\n+\trepresentable numbers for -ffinite-math-only.\n+\t(frange::normalize_kind): Use vrp_val*.\n+\t(frange::verify_range): Same.\n+\t(frange::set_nonnegative): Same.\n+\t(range_tests_floats): Remove tests that depend on -INF and +INF.\n+\t* value-range.h (real_max_representable): Add prototype.\n+\t(real_min_representable): Same.\n+\t(vrp_val_max): Set max representable number for\n+\t-ffinite-math-only.\n+\t(vrp_val_min): Same but for min.\n+\t(frange::set_varying): Use vrp_val*.\n+\n+2022-09-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* real.cc (debug): New.\n+\n+2022-09-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range-pretty-print.cc (vrange_printer::print_real_value): New.\n+\t(vrange_printer::visit): Call print_real_value.\n+\t* value-range-pretty-print.h: New print_real_value.\n+\n+2022-09-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Update -flto-compression-level documentation.\n+\t* opts.cc (print_filtered_help): Do not append range to an\n+\t  option that uses \\t syntax.\n+\n+2022-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* attribs.cc (decl_attributes): Improve diagnostics, instead of\n+\tsaying expected between 1 and 1, found 2 just say expected 1, found 2.\n+\n+2022-09-23  Hu, Lin1  <lin1.hu@intel.com>\n+\n+\tPR target/94962\n+\t* config/i386/constraints.md (BH): New define_constraint.\n+\t* config/i386/i386.cc (standard_sse_constant_p): Add return\n+\t3/4 when operand matches new predicate.\n+\t(standard_sse_constant_opcode): Add new alternative branch to\n+\treturn \"vpcmpeqd\".\n+\t* config/i386/predicates.md\n+\t(vector_all_ones_zero_extend_half_operand): New define_predicate.\n+\t(vector_all_ones_zero_extend_quarter_operand): Ditto.\n+\t* config/i386/sse.md: Add constraint to insn \"mov<mode>_internal\".\n+\n 2022-09-22  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range-fold.cc (range_of_range_op): Handle no operands."}, {"sha": "c0c32de03710e5797065be905c0f22f0b229c3dc", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "patch": "@@ -1 +1 @@\n-20220923\n+20220924"}, {"sha": "415c4cf795493453d49364c54fd5ec3f9104f55d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "patch": "@@ -1,3 +1,11 @@\n+2022-09-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106784\n+\t* c-common.cc (c_common_reswords): Add __is_convertible and\n+\t__is_nothrow_convertible.\n+\t* c-common.h (enum rid): Add RID_IS_CONVERTIBLE and\n+\tRID_IS_NOTHROW_CONVERTIBLE.\n+\n 2022-09-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/106830"}, {"sha": "b9b27291ff983cb78bf3ad4e17d8775e8148309c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "patch": "@@ -1,3 +1,30 @@\n+2022-09-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106784\n+\t* constraint.cc (diagnose_trait_expr): Handle CPTK_IS_CONVERTIBLE\n+\tand CPTK_IS_NOTHROW_CONVERTIBLE.\n+\t* cp-objcp-common.cc (names_builtin_p): Handle RID_IS_CONVERTIBLE\n+\tRID_IS_NOTHROW_CONVERTIBLE.\n+\t* cp-tree.h (enum cp_trait_kind): Add CPTK_IS_CONVERTIBLE and\n+\tCPTK_IS_NOTHROW_CONVERTIBLE.\n+\t(is_convertible): Declare.\n+\t(is_nothrow_convertible): Likewise.\n+\t* cxx-pretty-print.cc (pp_cxx_trait_expression): Handle\n+\tCPTK_IS_CONVERTIBLE and CPTK_IS_NOTHROW_CONVERTIBLE.\n+\t* method.cc (is_convertible): New.\n+\t(is_nothrow_convertible): Likewise.\n+\t* parser.cc (cp_parser_primary_expression): Handle RID_IS_CONVERTIBLE\n+\tand RID_IS_NOTHROW_CONVERTIBLE.\n+\t(cp_parser_trait_expr): Likewise.\n+\t* semantics.cc (trait_expr_value): Handle CPTK_IS_CONVERTIBLE and\n+\tCPTK_IS_NOTHROW_CONVERTIBLE.\n+\t(finish_trait_expr): Likewise.\n+\n+2022-09-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106983\n+\t* typeck2.cc (split_nonconstant_init_1): Check TYPE_P.\n+\n 2022-09-22  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/106826"}, {"sha": "d37e19949fefbb2f2dc86328dcafcaccd74a0764", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "patch": "@@ -1,3 +1,63 @@\n+2022-09-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-complit-1.c, gcc.dg/c2x-concat-1.c,\n+\tgcc.dg/cpp/c2x-ucn-1.c: New tests.\n+\n+2022-09-23  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX   <yvan.roux@foss.st.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1x2.c: Replace\n+\tdg-xfail-if with dg-skip-if.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1x3.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1x4.c: Likewise.\n+\n+2022-09-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106784\n+\t* g++.dg/ext/has-builtin-1.C: Enhance to test __is_convertible and\n+\t__is_nothrow_convertible.\n+\t* g++.dg/ext/is_convertible1.C: New test.\n+\t* g++.dg/ext/is_convertible2.C: New test.\n+\t* g++.dg/ext/is_nothrow_convertible1.C: New test.\n+\t* g++.dg/ext/is_nothrow_convertible2.C: New test.\n+\n+2022-09-23  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* selftests/riscv/empty-func.rtl: New test.\n+\n+2022-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106922\n+\t* g++.dg/torture/pr106922.C: New testcase.\n+\n+2022-09-23  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* lib/scanasm.exp (check_function_body): Add debug output to verbose log\n+\ton failure.\n+\n+2022-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/106922\n+\t* g++.dg/tree-ssa/pr106922.C: Scan in cddce3 dump rather than\n+\tdce3.  Remove -fdump-tree-pre-details from dg-options.\n+\n+2022-09-23  Hu, Lin1  <lin1.hu@intel.com>\n+\n+\tPR target/94962\n+\t* gcc.target/i386/avx256-unaligned-load-1.c: Modify test.\n+\t* gcc.target/i386/avx256-unaligned-store-1.c: Ditto.\n+\t* gcc.target/i386/avx256-unaligned-store-2.c: Ditto.\n+\t* gcc.target/i386/avx256-unaligned-store-3.c: Ditto.\n+\t* gcc.target/i386/pr94962-1.c: New test.\n+\t* gcc.target/i386/pr94962-2.c: Ditto.\n+\t* gcc.target/i386/pr94962-3.c: Ditto.\n+\t* gcc.target/i386/pr94962-4.c: Ditto.\n+\n+2022-09-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106983\n+\t* g++.dg/other/error36.C: New test.\n+\n 2022-09-22  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/100103"}, {"sha": "7908837b7ae06eb0d0a23a10385787ed2b02b38c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4afaeaab52dc9bdb7b24fc08b77dddf8432bc19b", "patch": "@@ -1,3 +1,51 @@\n+2022-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/is_assignable/requirements/access.cc:\n+\tNew test.\n+\n+2022-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/91456\n+\t* include/std/type_traits (__is_nothrow_invocable_lib): Remove.\n+\t(__is_invocable_impl::__nothrow_type): New member type which\n+\tchecks if the conversion can throw.\n+\t(__is_nt_invocable_impl): Replace class template with alias\n+\ttemplate to __is_nt_invocable_impl::__nothrow_type.\n+\t* testsuite/20_util/is_nothrow_invocable/91456.cc: New test.\n+\t* testsuite/20_util/is_nothrow_convertible/value.cc: Remove\n+\tmacro used by value_ext.cc test.\n+\t* testsuite/20_util/is_nothrow_convertible/value_ext.cc: Remove\n+\ttest for non-standard __is_nothrow_invocable_lib trait.\n+\n+2022-09-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106784\n+\t* include/std/type_traits: Rename __is_nothrow_convertible to\n+\t__is_nothrow_convertible_lib.\n+\t* testsuite/20_util/is_nothrow_convertible/value_ext.cc: Likewise.\n+\n+2022-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/bitset (operator>>): Do not copy for N==0.\n+\t* testsuite/20_util/bitset/io/input.cc: Add comment.\n+\n+2022-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/debug/bitset (__debug::bitset): Add constexpr to all\n+\tmember functions.\n+\t(operator&, operator|, operator^): Add inline and constexpr.\n+\t(operator>>, operator<<): Add inline.\n+\t* testsuite/20_util/bitset/access/constexpr.cc: Only check using\n+\tconstexpr std::string for the cxx11 ABI.\n+\t* testsuite/20_util/bitset/cons/constexpr_c++23.cc: Likewise.\n+\t* testsuite/20_util/headers/bitset/synopsis.cc: Check constexpr\n+\tfor C++23.\n+\n+2022-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/bitset (bitset::_M_copy_to_string): Find set bits\n+\tinstead of iterating over individual bits.\n+\n 2022-09-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/bitset (bitset): Add constexpr for C++23. Guard"}]}