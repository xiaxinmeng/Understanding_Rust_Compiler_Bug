{"sha": "c06617a79b41da37d80d7e88a3dbc56818f3e706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2NjE3YTc5YjQxZGEzN2Q4MGQ3ZTg4YTNkYmM1NjgxOGYzZTcwNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-08T13:01:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-08T13:45:36Z"}, "message": "libstdc++: Avoid divide by zero in default template arguments\n\nMy previous attempt to fix this only worked when m is a power of two.\nThere is still a bug when a=00 and !has_single_bit(m).\n\nInstead of trying to make _Mod work for a==0 this change ensures that we\nnever instantiate it with a==0. For C++17 we can use if-constexpr, but\notherwise we need to use a different multipler. It doesn't matter what\nwe use, as it won't actually be called, only instantiated.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/random.h (__detail::_Mod): Revert last change.\n\t(__detail::__mod): Do not use _Mod for a==0 case.\n\t* testsuite/26_numerics/random/linear_congruential_engine/operators/call.cc:\n\tCheck other cases with a==0. Also check runtime results.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n\tline.", "tree": {"sha": "254a3bb062025ad8711614a17d487cb414a7bd6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/254a3bb062025ad8711614a17d487cb414a7bd6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c06617a79b41da37d80d7e88a3dbc56818f3e706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06617a79b41da37d80d7e88a3dbc56818f3e706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06617a79b41da37d80d7e88a3dbc56818f3e706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06617a79b41da37d80d7e88a3dbc56818f3e706/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "629e0547af33221a925f38757b52a9284148b68a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629e0547af33221a925f38757b52a9284148b68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629e0547af33221a925f38757b52a9284148b68a"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "0be1191e07de70e793c00ad58bce1cb5c68658d4", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06617a79b41da37d80d7e88a3dbc56818f3e706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06617a79b41da37d80d7e88a3dbc56818f3e706/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=c06617a79b41da37d80d7e88a3dbc56818f3e706", "patch": "@@ -109,7 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp, _Tp __m, _Tp __a, _Tp __c,\n \t     bool __big_enough = (!(__m & (__m - 1))\n \t\t\t\t  || (_Tp(-1) - __c) / __a >= __m - 1),\n-             bool __schrage_ok = __a != 0 && __m % __a < __m / __a>\n+             bool __schrage_ok = __m % __a < __m / __a>\n       struct _Mod\n       {\n \ttypedef typename _Select_uint_least_t<std::__lg(__a)\n@@ -146,7 +146,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>\n       inline _Tp\n       __mod(_Tp __x)\n-      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }\n+      {\n+\tif _GLIBCXX17_CONSTEXPR (__a == 0)\n+\t  return __c;\n+\telse\n+\t  {\n+\t    // _Mod must not be instantiated with a == 0\n+\t    constexpr _Tp __a1 = __a ? __a : 1;\n+\t    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);\n+\t  }\n+      }\n \n     /*\n      * An adaptor class for converting the output of any Generator into"}, {"sha": "0000aa2402f7b16bcbaa6a41047dd2321c2fd4ae", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/operators/call.cc", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06617a79b41da37d80d7e88a3dbc56818f3e706/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06617a79b41da37d80d7e88a3dbc56818f3e706/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fcall.cc?ref=c06617a79b41da37d80d7e88a3dbc56818f3e706", "patch": "@@ -15,13 +15,50 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do compile { target c++11 } }\n+// { dg-do run { target c++11 } }\n \n #include <random>\n+#include <testsuite_hooks.h>\n \n-unsigned\n+void\n test01()\n {\n   std::linear_congruential_engine<unsigned, 0, 0, 0> l;\n-  return l(); // this used to result in divide by zero\n+  auto r = l(); // this used to result in divide by zero\n+  VERIFY( r == 0 );\n+  l.seed(2);\n+  r = l();\n+  VERIFY( r == 0 );\n+  VERIFY( l() == 0 );\n+}\n+\n+void\n+test02()\n+{\n+  std::linear_congruential_engine<unsigned, 0, 0, 3> l;\n+  auto r = l(); // this used to result in a different divide by zero\n+  VERIFY( r == 0 );\n+  l.seed(2);\n+  r = l();\n+  VERIFY( r == 0 );\n+  VERIFY( l() == 0 );\n+}\n+\n+void\n+test03()\n+{\n+  std::linear_congruential_engine<unsigned, 0, 2, 3> l;\n+  auto r = l();\n+  VERIFY( r == 2 );\n+  l.seed(4);\n+  r = l();\n+  VERIFY( r == 2 );\n+  VERIFY( l() == 2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n }"}, {"sha": "139abbb305186a8ffdc8b0712b8a2d75cf423a32", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06617a79b41da37d80d7e88a3dbc56818f3e706/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06617a79b41da37d80d7e88a3dbc56818f3e706/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=c06617a79b41da37d80d7e88a3dbc56818f3e706", "patch": "@@ -10,6 +10,6 @@ std::__detail::_Adaptor<std::mt19937, unsigned long> aurng(urng);\n auto x = std::generate_canonical<std::size_t,\n \t\t\tstd::numeric_limits<std::size_t>::digits>(urng);\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 158 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 167 }\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3281 }"}]}