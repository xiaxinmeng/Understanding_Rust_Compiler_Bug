{"sha": "5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIzM2Q0NTU1OWQ1ODY5ZmU3ZGM5NzA1ZDZjNzllNjUzOGQ4YTJhYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-05T14:32:05Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-05T14:32:05Z"}, "message": "re PR fortran/78641 ([OOP] ICE on polymorphic allocatable function in array constructor)\n\n2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/78641\n\t* resolve.c (resolve_ordinary_assign): Do not add the _data\n\tcomponent for class valued array constructors being assigned\n\tto derived type arrays.\n\t* trans-array.c (gfc_trans_array_ctor_element): Take the _data\n\tof class valued elements for assignment to derived type arrays.\n\n2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/78641\n\t* gfortran.dg/class_66.f90: New test.\n\nFrom-SVN: r254428", "tree": {"sha": "4312d6964f57222d5150f716ba8439e6ef4da776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4312d6964f57222d5150f716ba8439e6ef4da776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/comments", "author": null, "committer": null, "parents": [{"sha": "aea5e9327a49bc73878a547d490bb32ac31df03e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea5e9327a49bc73878a547d490bb32ac31df03e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea5e9327a49bc73878a547d490bb32ac31df03e"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "cbc8e29adaba20c4d54aecd8da17282ddf547b82", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "patch": "@@ -1,3 +1,12 @@\n+2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78641\n+\t* resolve.c (resolve_ordinary_assign): Do not add the _data\n+\tcomponent for class valued array constructors being assigned\n+\tto derived type arrays.\n+\t* trans-array.c (gfc_trans_array_ctor_element): Take the _data\n+\tof class valued elements for assignment to derived type arrays.\n+\n 2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/81447"}, {"sha": "1dde0d3ce1a63569cf98def63fdff48b4c0c1871", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "patch": "@@ -10324,7 +10324,8 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n \n   /* Assign the 'data' of a class object to a derived type.  */\n   if (lhs->ts.type == BT_DERIVED\n-      && rhs->ts.type == BT_CLASS)\n+      && rhs->ts.type == BT_CLASS\n+      && rhs->expr_type != EXPR_ARRAY)\n     gfc_add_data_component (rhs);\n \n   bool caf_convert_to_send = flag_coarray == GFC_FCOARRAY_LIB"}, {"sha": "59b09fae0081b14c275f7c4a89fde3d9ce3c6084", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "patch": "@@ -1580,6 +1580,17 @@ gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n \t    }\n \t}\n     }\n+  else if (GFC_CLASS_TYPE_P (TREE_TYPE (se->expr))\n+\t   && !GFC_CLASS_TYPE_P (gfc_get_element_type (TREE_TYPE (desc))))\n+    {\n+      /* Assignment of a CLASS array constructor to a derived type array.  */\n+      if (expr->expr_type == EXPR_FUNCTION)\n+\tse->expr = gfc_evaluate_now (se->expr, pblock);\n+      se->expr = gfc_class_data_get (se->expr);\n+      se->expr = build_fold_indirect_ref_loc (input_location, se->expr);\n+      se->expr = fold_convert (TREE_TYPE (tmp), se->expr);\n+      gfc_add_modify (&se->pre, tmp, se->expr);\n+    }\n   else\n     {\n       /* TODO: Should the frontend already have done this conversion?  */"}, {"sha": "1c92e2010f183d370edad9fd3ce23c4adcadb1ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "patch": "@@ -1,3 +1,8 @@\n+2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78641\n+\t* gfortran.dg/class_66.f90: New test.\n+\n 2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/81447"}, {"sha": "1843ea7eb69284a09907060bd67190a851525412", "filename": "gcc/testsuite/gfortran.dg/class_66.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_66.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5233d45559d5869fe7dc9705d6c79e6538d8a2ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_66.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_66.f90?ref=5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "patch": "@@ -0,0 +1,28 @@\n+! { dg- do run }\n+!\n+! Test the fix for PR78641 in which an ICE occured on assignment\n+! of a class array constructor to a derived type array.\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+  implicit none\n+  type foo\n+    integer :: i = 99\n+  end type\n+  type(foo) :: bar(4)\n+  class(foo), allocatable :: barfoo\n+\n+  allocate(barfoo,source = f(11))\n+  bar = [f(33), [f(22), barfoo], f(1)]\n+  if (any (bar%i .ne. [33, 22, 11, 1])) call abort\n+  deallocate (barfoo)\n+\n+contains\n+\n+  function f(arg) result(foobar)\n+    class(foo), allocatable :: foobar\n+    integer :: arg\n+    allocate(foobar,source = foo(arg))\n+  end function\n+\n+end program"}]}