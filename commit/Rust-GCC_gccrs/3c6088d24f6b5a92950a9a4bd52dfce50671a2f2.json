{"sha": "3c6088d24f6b5a92950a9a4bd52dfce50671a2f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2MDg4ZDI0ZjZiNWE5Mjk1MGE5YTRiZDUyZGZjZTUwNjcxYTJmMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@sunsite.ms.mff.cuni.cz", "date": "1998-09-24T16:16:58Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-09-24T16:16:58Z"}, "message": "sparc.c (function_value): Perform the equivalent of PROMOTE_MODE for ARCH64.\n\nThu Sep 24 15:08:08 1998  Jakub Jelinek  <jj@sunsite.ms.mff.cuni.cz>\n\t* config/sparc/sparc.c (function_value): Perform the equivalent of\n\tPROMOTE_MODE for ARCH64.\n\t(eligible_for_epilogue_delay): Allow DImode operations in delay\n\tslot of a return for ARCH64.\n\nFrom-SVN: r22573", "tree": {"sha": "04ca1d40b795e0cc928794af22372e57b566a53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04ca1d40b795e0cc928794af22372e57b566a53c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c6088d24f6b5a92950a9a4bd52dfce50671a2f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c6088d24f6b5a92950a9a4bd52dfce50671a2f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c6088d24f6b5a92950a9a4bd52dfce50671a2f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c6088d24f6b5a92950a9a4bd52dfce50671a2f2/comments", "author": null, "committer": null, "parents": [{"sha": "711878702f49c6b81c3959feb85c9a84b8cb1f1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711878702f49c6b81c3959feb85c9a84b8cb1f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711878702f49c6b81c3959feb85c9a84b8cb1f1e"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "900fedd64c4c6009c1205dfd5041fe6dedc516c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c6088d24f6b5a92950a9a4bd52dfce50671a2f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c6088d24f6b5a92950a9a4bd52dfce50671a2f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c6088d24f6b5a92950a9a4bd52dfce50671a2f2", "patch": "@@ -1,3 +1,10 @@\n+Thu Sep 24 15:08:08 1998  Jakub Jelinek  <jj@sunsite.ms.mff.cuni.cz>\n+\n+\t* config/sparc/sparc.c (function_value): Perform the equivalent of\n+\tPROMOTE_MODE for ARCH64.\n+\t(eligible_for_epilogue_delay): Allow DImode operations in delay\n+\tslot of a return for ARCH64.\n+\n Thu Sep 24 22:17:54 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.md (sqrtsf2): Fix mode of sqrt."}, {"sha": "16fd6b7ba9d013da5c095dfff05f237a318a2f91", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c6088d24f6b5a92950a9a4bd52dfce50671a2f2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c6088d24f6b5a92950a9a4bd52dfce50671a2f2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3c6088d24f6b5a92950a9a4bd52dfce50671a2f2", "patch": "@@ -2259,9 +2259,14 @@ eligible_for_epilogue_delay (trial, slot)\n \n   src = SET_SRC (pat);\n \n-  /* This matches \"*return_[qhs]i\".  */\n+  /* This matches \"*return_[qhs]i\" or even \"*return_di\" on TARGET_ARCH64.  */\n   if (arith_operand (src, GET_MODE (src)))\n-    return GET_MODE_SIZE (GET_MODE (src)) <= GET_MODE_SIZE (SImode);\n+    {\n+      if (TARGET_ARCH64)\n+        return GET_MODE_SIZE (GET_MODE (src)) <= GET_MODE_SIZE (DImode);\n+      else\n+        return GET_MODE_SIZE (GET_MODE (src)) <= GET_MODE_SIZE (SImode);\n+    }\n     \n   /* This matches \"*return_di\".  */\n   else if (arith_double_operand (src, GET_MODE (src)))\n@@ -4232,6 +4237,12 @@ function_value (type, mode, incoming_p)\n \t  mode = mode_for_size (bytes * BITS_PER_UNIT, MODE_INT, 0);\n \t}\n     }\n+    \n+  if (TARGET_ARCH64\n+      && GET_MODE_CLASS (mode) == MODE_INT \n+      && GET_MODE_SIZE (mode) < UNITS_PER_WORD\n+      && type && TREE_CODE (type) != UNION_TYPE)\n+    mode = DImode;\n \n   if (incoming_p)\n     regno = BASE_RETURN_VALUE_REG (mode);"}]}