{"sha": "3b5c0f65ef12bd4771f69195d232588cff86b270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1YzBmNjVlZjEyYmQ0NzcxZjY5MTk1ZDIzMjU4OGNmZjg2YjI3MA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-31T23:51:38Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-09-01T00:19:25Z"}, "message": "Remove Enumeration Expression, EnumExpr, classes\n\nAn Enumeration Expression is just like a Struct Expression. Old\nversions of the Rust Reference described them separately. But since\nthey are syntactically exactly like a Struct Expression they are never\nactually parsed. A Struct Expression can also be used to initialize\nenums (and unions).\n\nRemove the AST and HIR classes EnumExprField, EnumExprFieldIdentifier,\nEnumExprFieldWithVal, EnumExprFieldIdentifierValue,\nEnumExprFieldIndexValue, EnumExprStruct, EnumExprTuple,\nEnumExprFieldless and EnumVariantExpr.", "tree": {"sha": "0c830b9a468c78f3b0e4a140093cd09ebdda2989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c830b9a468c78f3b0e4a140093cd09ebdda2989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5c0f65ef12bd4771f69195d232588cff86b270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5c0f65ef12bd4771f69195d232588cff86b270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5c0f65ef12bd4771f69195d232588cff86b270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5c0f65ef12bd4771f69195d232588cff86b270/comments", "author": null, "committer": null, "parents": [{"sha": "c998198c669c5a8e63b662c03806b0bd5398bd28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c998198c669c5a8e63b662c03806b0bd5398bd28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c998198c669c5a8e63b662c03806b0bd5398bd28"}], "stats": {"total": 954, "additions": 0, "deletions": 954}, "files": [{"sha": "2be7e777234523d95a0a9fc6a86207112a65001c", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -109,15 +109,6 @@ class StructExprFieldIdentifierValue;\n class StructExprFieldIndexValue;\n class StructExprStructFields;\n class StructExprStructBase;\n-class EnumVariantExpr;\n-class EnumExprField;\n-class EnumExprFieldIdentifier;\n-class EnumExprFieldWithVal;\n-class EnumExprFieldIdentifierValue;\n-class EnumExprFieldIndexValue;\n-class EnumExprStruct;\n-class EnumExprTuple;\n-class EnumExprFieldless;\n class CallExpr;\n class MethodCallExpr;\n class FieldAccessExpr;"}, {"sha": "6241710226da6a62a5d6ae469e7255eadab10241", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -3308,48 +3308,6 @@ StructExprStructFields::as_string () const\n   return str;\n }\n \n-std::string\n-EnumExprStruct::as_string () const\n-{\n-  std::string str (\"EnumExprStruct (or subclass): \");\n-\n-  str += \"\\n Path: \" + get_enum_variant_path ().as_string ();\n-\n-  str += \"\\n Fields: \";\n-  if (fields.empty ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      for (const auto &field : fields)\n-\tstr += \"\\n  \" + field->as_string ();\n-    }\n-\n-  return str;\n-}\n-\n-std::string\n-EnumExprFieldWithVal::as_string () const\n-{\n-  // used to get value string\n-  return value->as_string ();\n-}\n-\n-std::string\n-EnumExprFieldIdentifierValue::as_string () const\n-{\n-  // TODO: rewrite to work with non-linearisable exprs\n-  return field_name + \" : \" + EnumExprFieldWithVal::as_string ();\n-}\n-\n-std::string\n-EnumExprFieldIndexValue::as_string () const\n-{\n-  // TODO: rewrite to work with non-linearisable exprs\n-  return std::to_string (index) + \" : \" + EnumExprFieldWithVal::as_string ();\n-}\n-\n std::string\n EnumItem::as_string () const\n {\n@@ -5184,42 +5142,6 @@ StructExprStructBase::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-EnumExprFieldIdentifier::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIdentifierValue::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIndexValue::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprStruct::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprTuple::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldless::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n CallExpr::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "15bf0864ddbc7298587489ad880ab63881f6ca36", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -93,13 +93,6 @@ class ASTVisitor\n   virtual void visit (StructExprFieldIndexValue &field) = 0;\n   virtual void visit (StructExprStructFields &expr) = 0;\n   virtual void visit (StructExprStructBase &expr) = 0;\n-  // virtual void visit(EnumExprField& field) = 0;\n-  virtual void visit (EnumExprFieldIdentifier &field) = 0;\n-  virtual void visit (EnumExprFieldIdentifierValue &field) = 0;\n-  virtual void visit (EnumExprFieldIndexValue &field) = 0;\n-  virtual void visit (EnumExprStruct &expr) = 0;\n-  virtual void visit (EnumExprTuple &expr) = 0;\n-  virtual void visit (EnumExprFieldless &expr) = 0;\n   virtual void visit (CallExpr &expr) = 0;\n   virtual void visit (MethodCallExpr &expr) = 0;\n   virtual void visit (FieldAccessExpr &expr) = 0;"}, {"sha": "f26ed988a02da194f8ff3a67864401716cd8ba36", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 0, "deletions": 346, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -1852,352 +1852,6 @@ class StructExprStructBase : public StructExprStruct\n   }\n };\n \n-// aka EnumerationVariantExpr\n-// Base AST node representing creation of an enum variant instance - abstract\n-class EnumVariantExpr : public ExprWithoutBlock\n-{\n-  std::vector<Attribute> outer_attrs;\n-  PathInExpression enum_variant_path;\n-\n-protected:\n-  // Protected constructor for initialising enum_variant_path\n-  EnumVariantExpr (PathInExpression path_to_enum_variant,\n-\t\t   std::vector<Attribute> outer_attribs)\n-    : outer_attrs (std::move (outer_attribs)),\n-      enum_variant_path (std::move (path_to_enum_variant))\n-  {}\n-\n-public:\n-  const PathInExpression &get_enum_variant_path () const\n-  {\n-    return enum_variant_path;\n-  }\n-  PathInExpression &get_enum_variant_path () { return enum_variant_path; }\n-\n-  // Invalid if path is in error state, so base stripping on that.\n-  void mark_for_strip () override\n-  {\n-    enum_variant_path = PathInExpression::create_error ();\n-  }\n-  bool is_marked_for_strip () const override\n-  {\n-    return enum_variant_path.is_error ();\n-  }\n-\n-  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n-\n-  void set_outer_attrs (std::vector<Attribute> new_attrs) override\n-  {\n-    outer_attrs = std::move (new_attrs);\n-  }\n-};\n-\n-/* Base AST node for a single enum expression field (in enum instance creation)\n- * - abstract */\n-class EnumExprField\n-{\n-public:\n-  virtual ~EnumExprField () {}\n-\n-  // Unique pointer custom clone function\n-  std::unique_ptr<EnumExprField> clone_enum_expr_field () const\n-  {\n-    return std::unique_ptr<EnumExprField> (clone_enum_expr_field_impl ());\n-  }\n-\n-  virtual std::string as_string () const = 0;\n-\n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n-  virtual Location get_locus () const = 0;\n-\n-protected:\n-  // Clone function implementation as pure virtual method\n-  virtual EnumExprField *clone_enum_expr_field_impl () const = 0;\n-};\n-\n-// Identifier-only variant of EnumExprField AST node\n-class EnumExprFieldIdentifier : public EnumExprField\n-{\n-  Identifier field_name;\n-  Location locus;\n-\n-public:\n-  EnumExprFieldIdentifier (Identifier field_identifier, Location locus)\n-    : field_name (std::move (field_identifier)), locus (locus)\n-  {}\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  std::string as_string () const override { return field_name; }\n-\n-  Location get_locus () const override final { return locus; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIdentifier *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIdentifier (*this);\n-  }\n-};\n-\n-/* Base AST node for a single enum expression field with an assigned value -\n- * abstract */\n-class EnumExprFieldWithVal : public EnumExprField\n-{\n-  std::unique_ptr<Expr> value;\n-\n-protected:\n-  EnumExprFieldWithVal (std::unique_ptr<Expr> field_value)\n-    : value (std::move (field_value))\n-  {}\n-\n-  // Copy constructor must clone unique_ptr value\n-  EnumExprFieldWithVal (EnumExprFieldWithVal const &other)\n-    : value (other.value->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone\n-  EnumExprFieldWithVal &operator= (EnumExprFieldWithVal const &other)\n-  {\n-    value = other.value->clone_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprFieldWithVal (EnumExprFieldWithVal &&other) = default;\n-  EnumExprFieldWithVal &operator= (EnumExprFieldWithVal &&other) = default;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<Expr> &get_value ()\n-  {\n-    rust_assert (value != nullptr);\n-    return value;\n-  }\n-};\n-\n-// Identifier and value variant of EnumExprField AST node\n-class EnumExprFieldIdentifierValue : public EnumExprFieldWithVal\n-{\n-  Identifier field_name;\n-  Location locus;\n-\n-public:\n-  EnumExprFieldIdentifierValue (Identifier field_name,\n-\t\t\t\tstd::unique_ptr<Expr> field_value,\n-\t\t\t\tLocation locus)\n-    : EnumExprFieldWithVal (std::move (field_value)),\n-      field_name (std::move (field_name)), locus (locus)\n-  {}\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIdentifierValue *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIdentifierValue (*this);\n-  }\n-};\n-\n-// Tuple index and value variant of EnumExprField AST node\n-class EnumExprFieldIndexValue : public EnumExprFieldWithVal\n-{\n-  TupleIndex index;\n-  // TODO: implement \"with val\" as a template with EnumExprField as type param?\n-\n-  Location locus;\n-\n-public:\n-  EnumExprFieldIndexValue (TupleIndex field_index,\n-\t\t\t   std::unique_ptr<Expr> field_value, Location locus)\n-    : EnumExprFieldWithVal (std::move (field_value)), index (field_index),\n-      locus (locus)\n-  {}\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIndexValue *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIndexValue (*this);\n-  }\n-};\n-\n-// Struct-like syntax enum variant instance creation AST node\n-class EnumExprStruct : public EnumVariantExpr\n-{\n-  std::vector<std::unique_ptr<EnumExprField> > fields;\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  EnumExprStruct (PathInExpression enum_variant_path,\n-\t\t  std::vector<std::unique_ptr<EnumExprField> > variant_fields,\n-\t\t  std::vector<Attribute> outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      fields (std::move (variant_fields)), locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  EnumExprStruct (EnumExprStruct const &other)\n-    : EnumVariantExpr (other), locus (other.locus)\n-  {\n-    fields.reserve (other.fields.size ());\n-    for (const auto &e : other.fields)\n-      fields.push_back (e->clone_enum_expr_field ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  EnumExprStruct &operator= (EnumExprStruct const &other)\n-  {\n-    EnumVariantExpr::operator= (other);\n-    locus = other.locus;\n-\n-    fields.reserve (other.fields.size ());\n-    for (const auto &e : other.fields)\n-      fields.push_back (e->clone_enum_expr_field ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprStruct (EnumExprStruct &&other) = default;\n-  EnumExprStruct &operator= (EnumExprStruct &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  // TODO: this mutable getter seems really dodgy. Think up better way.\n-  std::vector<std::unique_ptr<EnumExprField> > &get_fields () { return fields; }\n-  const std::vector<std::unique_ptr<EnumExprField> > &get_fields () const\n-  {\n-    return fields;\n-  }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprStruct *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprStruct (*this);\n-  }\n-};\n-\n-// Tuple-like syntax enum variant instance creation AST node\n-class EnumExprTuple : public EnumVariantExpr\n-{\n-  std::vector<std::unique_ptr<Expr> > values;\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  EnumExprTuple (PathInExpression enum_variant_path,\n-\t\t std::vector<std::unique_ptr<Expr> > variant_values,\n-\t\t std::vector<Attribute> outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      values (std::move (variant_values)), locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  EnumExprTuple (EnumExprTuple const &other)\n-    : EnumVariantExpr (other), locus (other.locus)\n-  {\n-    values.reserve (other.values.size ());\n-    for (const auto &e : other.values)\n-      values.push_back (e->clone_expr ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  EnumExprTuple &operator= (EnumExprTuple const &other)\n-  {\n-    EnumVariantExpr::operator= (other);\n-    locus = other.locus;\n-\n-    values.reserve (other.values.size ());\n-    for (const auto &e : other.values)\n-      values.push_back (e->clone_expr ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprTuple (EnumExprTuple &&other) = default;\n-  EnumExprTuple &operator= (EnumExprTuple &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  const std::vector<std::unique_ptr<Expr> > &get_elems () const\n-  {\n-    return values;\n-  }\n-  std::vector<std::unique_ptr<Expr> > &get_elems () { return values; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprTuple *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprTuple (*this);\n-  }\n-};\n-\n-// No-field enum variant instance creation AST node\n-class EnumExprFieldless : public EnumVariantExpr\n-{\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override\n-  {\n-    // return enum_variant_path.as_string();\n-    return get_enum_variant_path ().as_string ();\n-  }\n-\n-  EnumExprFieldless (PathInExpression enum_variant_path,\n-\t\t     std::vector<Attribute> outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      locus (locus)\n-  {}\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldless *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprFieldless (*this);\n-  }\n-};\n-\n // Forward decl for Function - used in CallExpr\n class Function;\n "}, {"sha": "c0cfacf4e575aa36402f1327c6752f6cca7faabc", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -72,13 +72,6 @@ class HIRCompileBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &field) {}\n   virtual void visit (HIR::StructExprStructFields &expr) {}\n   virtual void visit (HIR::StructExprStructBase &expr) {}\n-  // virtual void visit(EnumExprField& field) {}\n-  virtual void visit (HIR::EnumExprFieldIdentifier &field) {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &field) {}\n-  virtual void visit (HIR::EnumExprFieldIndexValue &field) {}\n-  virtual void visit (HIR::EnumExprStruct &expr) {}\n-  virtual void visit (HIR::EnumExprTuple &expr) {}\n-  virtual void visit (HIR::EnumExprFieldless &expr) {}\n   virtual void visit (HIR::CallExpr &expr) {}\n   virtual void visit (HIR::MethodCallExpr &expr) {}\n   virtual void visit (HIR::FieldAccessExpr &expr) {}"}, {"sha": "8134f7e59aa0c0c1a548940f8474aa6ccf2eafa9", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -939,95 +939,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n-  void visit (AST::EnumExprFieldIdentifier &) override\n-  {\n-    // as no attrs (at moment, at least), no stripping possible\n-  }\n-  void visit (AST::EnumExprFieldIdentifierValue &field) override\n-  {\n-    /* as no attrs possible (at moment, at least), only sub-expression\n-     * stripping is possible */\n-    auto &value = field.get_value ();\n-    value->accept_vis (*this);\n-    if (value->is_marked_for_strip ())\n-      rust_error_at (value->get_locus (),\n-\t\t     \"cannot strip expression in this position - outer \"\n-\t\t     \"attributes not allowed\");\n-  }\n-  void visit (AST::EnumExprFieldIndexValue &field) override\n-  {\n-    /* as no attrs possible (at moment, at least), only sub-expression\n-     * stripping is possible */\n-    auto &value = field.get_value ();\n-    value->accept_vis (*this);\n-    if (value->is_marked_for_strip ())\n-      rust_error_at (value->get_locus (),\n-\t\t     \"cannot strip expression in this position - outer \"\n-\t\t     \"attributes not allowed\");\n-  }\n-  void visit (AST::EnumExprStruct &expr) override\n-  {\n-    // initial strip test based on outer attrs\n-    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    // supposedly spec doesn't allow inner attributes in enum exprs\n-\n-    // strip sub-exprs of path\n-    auto &enum_path = expr.get_enum_variant_path ();\n-    visit (enum_path);\n-    if (enum_path.is_marked_for_strip ())\n-      rust_error_at (enum_path.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-\n-    /* spec does not specify whether expressions are allowed to be\n-     * stripped at top level of expression fields, but I wouldn't think\n-     * that they would be, so operating under the assumption that only\n-     * sub-expressions can be stripped. */\n-    for (auto &field : expr.get_fields ())\n-      {\n-\tfield->accept_vis (*this);\n-\t// shouldn't strip in this\n-      }\n-  }\n-  void visit (AST::EnumExprTuple &expr) override\n-  {\n-    // initial strip test based on outer attrs\n-    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    // supposedly spec doesn't allow inner attributes in enum exprs\n-\n-    // strip sub-exprs of path\n-    auto &enum_path = expr.get_enum_variant_path ();\n-    visit (enum_path);\n-    if (enum_path.is_marked_for_strip ())\n-      rust_error_at (enum_path.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-\n-    /* spec says outer attributes are specifically allowed for elements\n-     * of tuple-style enum expressions, so full stripping possible */\n-    expand_pointer_allow_strip (expr.get_elems ());\n-  }\n-  void visit (AST::EnumExprFieldless &expr) override\n-  {\n-    // can't be stripped as no attrs\n-\n-    // strip sub-exprs of path\n-    auto &enum_path = expr.get_enum_variant_path ();\n-    visit (enum_path);\n-    if (enum_path.is_marked_for_strip ())\n-      rust_error_at (enum_path.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-  }\n   void visit (AST::CallExpr &expr) override\n   {\n     // initial strip test based on outer attrs"}, {"sha": "d4455998301690c31a9968eed66d761a446692d0", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -96,13 +96,6 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::StructExprFieldIndexValue &field) {}\n   virtual void visit (AST::StructExprStructFields &expr) {}\n   virtual void visit (AST::StructExprStructBase &expr) {}\n-  //  virtual void visit(EnumExprField& field) {}\n-  virtual void visit (AST::EnumExprFieldIdentifier &field) {}\n-  virtual void visit (AST::EnumExprFieldIdentifierValue &field) {}\n-  virtual void visit (AST::EnumExprFieldIndexValue &field) {}\n-  virtual void visit (AST::EnumExprStruct &expr) {}\n-  virtual void visit (AST::EnumExprTuple &expr) {}\n-  virtual void visit (AST::EnumExprFieldless &expr) {}\n   virtual void visit (AST::CallExpr &expr) {}\n   virtual void visit (AST::MethodCallExpr &expr) {}\n   virtual void visit (AST::FieldAccessExpr &expr) {}"}, {"sha": "05bc1f9f0554eec869c695ecd0f3c0560b2c851d", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 0, "deletions": 326, "changes": 326, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -1578,332 +1578,6 @@ class StructExprStructBase : public StructExprStruct\n   }\n };\n \n-// aka EnumerationVariantExpr\n-// Base HIR node representing creation of an enum variant instance - abstract\n-class EnumVariantExpr : public ExprWithoutBlock\n-{\n-  PathInExpression enum_variant_path;\n-\n-protected:\n-  // Protected constructor for initialising enum_variant_path\n-  EnumVariantExpr (Analysis::NodeMapping mappings,\n-\t\t   PathInExpression path_to_enum_variant,\n-\t\t   AST::AttrVec outer_attribs)\n-    : ExprWithoutBlock (std::move (mappings), std::move (outer_attribs)),\n-      enum_variant_path (std::move (path_to_enum_variant))\n-  {}\n-\n-public:\n-  // TODO: maybe remove and have string version gotten here directly\n-  PathInExpression get_enum_variant_path () const { return enum_variant_path; }\n-};\n-\n-/* Base HIR node for a single enum expression field (in enum instance creation)\n- * - abstract */\n-class EnumExprField\n-{\n-public:\n-  virtual ~EnumExprField () {}\n-\n-  // Unique pointer custom clone function\n-  std::unique_ptr<EnumExprField> clone_enum_expr_field () const\n-  {\n-    return std::unique_ptr<EnumExprField> (clone_enum_expr_field_impl ());\n-  }\n-\n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n-\n-protected:\n-  // Clone function implementation as pure virtual method\n-  virtual EnumExprField *clone_enum_expr_field_impl () const = 0;\n-};\n-\n-// Identifier-only variant of EnumExprField HIR node\n-class EnumExprFieldIdentifier : public EnumExprField\n-{\n-  Identifier field_name;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  EnumExprFieldIdentifier (Identifier field_identifier)\n-    : field_name (std::move (field_identifier))\n-  {}\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIdentifier *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIdentifier (*this);\n-  }\n-};\n-\n-/* Base HIR node for a single enum expression field with an assigned value -\n- * abstract */\n-class EnumExprFieldWithVal : public EnumExprField\n-{\n-  std::unique_ptr<Expr> value;\n-\n-  // TODO: should this store location data?\n-\n-protected:\n-  EnumExprFieldWithVal (std::unique_ptr<Expr> field_value)\n-    : value (std::move (field_value))\n-  {}\n-\n-  // Copy constructor must clone unique_ptr value\n-  EnumExprFieldWithVal (EnumExprFieldWithVal const &other)\n-    : value (other.value->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone\n-  EnumExprFieldWithVal &operator= (EnumExprFieldWithVal const &other)\n-  {\n-    value = other.value->clone_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprFieldWithVal (EnumExprFieldWithVal &&other) = default;\n-  EnumExprFieldWithVal &operator= (EnumExprFieldWithVal &&other) = default;\n-};\n-\n-// Identifier and value variant of EnumExprField HIR node\n-class EnumExprFieldIdentifierValue : public EnumExprFieldWithVal\n-{\n-  Identifier field_name;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  EnumExprFieldIdentifierValue (Identifier field_name,\n-\t\t\t\tstd::unique_ptr<Expr> field_value)\n-    : EnumExprFieldWithVal (std::move (field_value)),\n-      field_name (std::move (field_name))\n-  {}\n-\n-  // copy constructor, destructor, and assignment operator should not need\n-  // defining\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIdentifierValue *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIdentifierValue (*this);\n-  }\n-};\n-\n-// Tuple index and value variant of EnumExprField HIR node\n-class EnumExprFieldIndexValue : public EnumExprFieldWithVal\n-{\n-  TupleIndex index;\n-  // TODO: implement \"with val\" as a template with EnumExprField as type param?\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  EnumExprFieldIndexValue (TupleIndex field_index,\n-\t\t\t   std::unique_ptr<Expr> field_value)\n-    : EnumExprFieldWithVal (std::move (field_value)), index (field_index)\n-  {}\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIndexValue *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIndexValue (*this);\n-  }\n-};\n-\n-// Struct-like syntax enum variant instance creation HIR node\n-class EnumExprStruct : public EnumVariantExpr\n-{\n-  // std::vector<EnumExprField> fields;\n-  std::vector<std::unique_ptr<EnumExprField> > fields;\n-\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  /*inline std::vector<std::unique_ptr<EnumExprField>> get_fields() const\n-  { return fields;\n-  }*/\n-\n-  EnumExprStruct (Analysis::NodeMapping mappings,\n-\t\t  PathInExpression enum_variant_path,\n-\t\t  std::vector<std::unique_ptr<EnumExprField> > variant_fields,\n-\t\t  AST::AttrVec outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (mappings), std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      fields (std::move (variant_fields)), locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  EnumExprStruct (EnumExprStruct const &other)\n-    : EnumVariantExpr (other), locus (other.locus)\n-  {\n-    fields.reserve (other.fields.size ());\n-    for (const auto &e : other.fields)\n-      fields.push_back (e->clone_enum_expr_field ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  EnumExprStruct &operator= (EnumExprStruct const &other)\n-  {\n-    EnumVariantExpr::operator= (other);\n-    locus = other.locus;\n-\n-    fields.reserve (other.fields.size ());\n-    for (const auto &e : other.fields)\n-      fields.push_back (e->clone_enum_expr_field ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprStruct (EnumExprStruct &&other) = default;\n-  EnumExprStruct &operator= (EnumExprStruct &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprStruct *clone_expr_impl () const override\n-  {\n-    return new EnumExprStruct (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprStruct *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprStruct (*this);\n-  }\n-};\n-\n-// Tuple-like syntax enum variant instance creation HIR node\n-class EnumExprTuple : public EnumVariantExpr\n-{\n-  std::vector<std::unique_ptr<Expr> > values;\n-\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  /*inline std::vector<std::unique_ptr<Expr>> get_values() const {\n-      return values;\n-  }*/\n-\n-  EnumExprTuple (Analysis::NodeMapping mappings,\n-\t\t PathInExpression enum_variant_path,\n-\t\t std::vector<std::unique_ptr<Expr> > variant_values,\n-\t\t AST::AttrVec outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (mappings), std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      values (std::move (variant_values)), locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  EnumExprTuple (EnumExprTuple const &other)\n-    : EnumVariantExpr (other), locus (other.locus)\n-  {\n-    values.reserve (other.values.size ());\n-    for (const auto &e : other.values)\n-      values.push_back (e->clone_expr ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  EnumExprTuple &operator= (EnumExprTuple const &other)\n-  {\n-    EnumVariantExpr::operator= (other);\n-    locus = other.locus;\n-\n-    values.reserve (other.values.size ());\n-    for (const auto &e : other.values)\n-      values.push_back (e->clone_expr ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprTuple (EnumExprTuple &&other) = default;\n-  EnumExprTuple &operator= (EnumExprTuple &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprTuple *clone_expr_impl () const override\n-  {\n-    return new EnumExprTuple (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprTuple *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprTuple (*this);\n-  }\n-};\n-\n-// No-field enum variant instance creation HIR node\n-class EnumExprFieldless : public EnumVariantExpr\n-{\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override\n-  {\n-    // return enum_variant_path.as_string();\n-    return get_enum_variant_path ().as_string ();\n-  }\n-\n-  EnumExprFieldless (Analysis::NodeMapping mappings,\n-\t\t     PathInExpression enum_variant_path,\n-\t\t     AST::AttrVec outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (mappings), std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      locus (locus)\n-  {}\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldless *clone_expr_impl () const override\n-  {\n-    return new EnumExprFieldless (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldless *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprFieldless (*this);\n-  }\n-};\n-\n // Forward decl for Function - used in CallExpr\n class Function;\n "}, {"sha": "ffa08127ddcfc3bfc41c5cffeacd7e2a6772fc81", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -90,15 +90,6 @@ class StructExprFieldIdentifierValue;\n class StructExprFieldIndexValue;\n class StructExprStructFields;\n class StructExprStructBase;\n-class EnumVariantExpr;\n-class EnumExprField;\n-class EnumExprFieldIdentifier;\n-class EnumExprFieldWithVal;\n-class EnumExprFieldIdentifierValue;\n-class EnumExprFieldIndexValue;\n-class EnumExprStruct;\n-class EnumExprTuple;\n-class EnumExprFieldless;\n class CallExpr;\n class MethodCallExpr;\n class FieldAccessExpr;"}, {"sha": "f328ae67abe644a91d8e377574b287ef5c288de1", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -3930,42 +3930,6 @@ StructExprStructBase::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-EnumExprFieldIdentifier::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIdentifierValue::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIndexValue::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprStruct::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprTuple::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldless::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n CallExpr::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "d5fbff99bc6d680223c547a25c3830bd64185204", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -60,12 +60,6 @@ class HIRVisitor\n   virtual void visit (StructExprFieldIndexValue &field) = 0;\n   virtual void visit (StructExprStructFields &expr) = 0;\n   virtual void visit (StructExprStructBase &expr) = 0;\n-  virtual void visit (EnumExprFieldIdentifier &field) = 0;\n-  virtual void visit (EnumExprFieldIdentifierValue &field) = 0;\n-  virtual void visit (EnumExprFieldIndexValue &field) = 0;\n-  virtual void visit (EnumExprStruct &expr) = 0;\n-  virtual void visit (EnumExprTuple &expr) = 0;\n-  virtual void visit (EnumExprFieldless &expr) = 0;\n   virtual void visit (CallExpr &expr) = 0;\n   virtual void visit (MethodCallExpr &expr) = 0;\n   virtual void visit (FieldAccessExpr &expr) = 0;"}, {"sha": "e7b01945b1c1349e9d199677cbc41d1e3f422f75", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -71,13 +71,6 @@ class MarkLiveBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n \n-  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::EnumExprStruct &) override {}\n-  virtual void visit (HIR::EnumExprTuple &) override {}\n-  virtual void visit (HIR::EnumExprFieldless &) override {}\n   virtual void visit (HIR::CallExpr &) override {}\n   virtual void visit (HIR::MethodCallExpr &) override {}\n   virtual void visit (HIR::FieldAccessExpr &) override {}"}, {"sha": "025052d290b0e881d5c40f26da3c867a2f620aa6", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -73,12 +73,6 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::StructExprFieldIndexValue &) {}\n   void visit (AST::StructExprStructFields &) {}\n   void visit (AST::StructExprStructBase &) {}\n-  void visit (AST::EnumExprFieldIdentifier &) {}\n-  void visit (AST::EnumExprFieldIdentifierValue &) {}\n-  void visit (AST::EnumExprFieldIndexValue &) {}\n-  void visit (AST::EnumExprStruct &) {}\n-  void visit (AST::EnumExprTuple &) {}\n-  void visit (AST::EnumExprFieldless &) {}\n   void visit (AST::CallExpr &) {}\n   void visit (AST::MethodCallExpr &) {}\n   void visit (AST::FieldAccessExpr &) {}"}, {"sha": "0c23ec81efb8b99f67e13fbcf08aff4b31e019cb", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -74,13 +74,6 @@ class ConstFoldBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n \n-  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::EnumExprStruct &) override {}\n-  virtual void visit (HIR::EnumExprTuple &) override {}\n-  virtual void visit (HIR::EnumExprFieldless &) override {}\n   virtual void visit (HIR::CallExpr &) override {}\n   virtual void visit (HIR::MethodCallExpr &) override {}\n   virtual void visit (HIR::FieldAccessExpr &) override {}"}, {"sha": "26fb5061227d94f5690b5846e3e8d37d1faa5948", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -75,13 +75,6 @@ class TypeCheckBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n \n-  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::EnumExprStruct &) override {}\n-  virtual void visit (HIR::EnumExprTuple &) override {}\n-  virtual void visit (HIR::EnumExprFieldless &) override {}\n   virtual void visit (HIR::CallExpr &) override {}\n   virtual void visit (HIR::MethodCallExpr &) override {}\n   virtual void visit (HIR::FieldAccessExpr &) override {}"}, {"sha": "78d35a6fadd5028704739cab76c67d7e0c8a4fae", "filename": "gcc/rust/typecheck/rust-hir-type-check-util.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c0f65ef12bd4771f69195d232588cff86b270/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h?ref=3b5c0f65ef12bd4771f69195d232588cff86b270", "patch": "@@ -69,13 +69,6 @@ class SimpleHirVisitor : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n \n-  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::EnumExprStruct &) override {}\n-  virtual void visit (HIR::EnumExprTuple &) override {}\n-  virtual void visit (HIR::EnumExprFieldless &) override {}\n   virtual void visit (HIR::CallExpr &) override {}\n   virtual void visit (HIR::MethodCallExpr &) override {}\n   virtual void visit (HIR::FieldAccessExpr &) override {}"}]}