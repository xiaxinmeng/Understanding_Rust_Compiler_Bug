{"sha": "2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "node_id": "C_kwDOANBUbNoAKDJmOTUyOWZjNjJiY2Q3ZTU3OTZjNWM4YzExODc5YzliYTJjYTEzM2Y", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-09-23T05:52:16Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-10-14T01:56:00Z"}, "message": "AVX512FP16: Adjust builtin for mask complex fma\n\nCurrent mask/mask3 implementation for complex fma contains\nduplicated parameter in macro, which may cause error at -O0.\nRefactor macro implementation to builtins to avoid potential\nerror.\n\nFor round intrinsic with NO_ROUND as input, ix86_erase_embedded_rounding\nerases embedded_rounding upspec but could break other emit_insn in\nexpanders. Skip those expanders with multiple emit_insn for this\nfunction and check rounding in expander with subst.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm512_mask_fcmadd_pch):\n\tAdjust builtin call.\n\t(_mm512_mask3_fcmadd_pch): Likewise.\n\t(_mm512_mask_fmadd_pch): Likewise\n\t(_mm512_mask3_fmadd_pch): Likewise\n\t(_mm512_mask_fcmadd_round_pch): Likewise\n\t(_mm512_mask3_fcmadd_round_pch): Likewise\n\t(_mm512_mask_fmadd_round_pch): Likewise\n\t(_mm512_mask3_fmadd_round_pch): Likewise\n\t(_mm_mask_fcmadd_sch): Likewise\n\t(_mm_mask3_fcmadd_sch): Likewise\n\t(_mm_mask_fmadd_sch): Likewise\n\t(_mm_mask3_fmadd_sch): Likewise\n\t(_mm_mask_fcmadd_round_sch): Likewise\n\t(_mm_mask3_fcmadd_round_sch): Likewise\n\t(_mm_mask_fmadd_round_sch): Likewise\n\t(_mm_mask3_fmadd_round_sch): Likewise\n\t(_mm_fcmadd_round_sch): Likewise\n\t* config/i386/avx512fp16vlintrin.h (_mm_mask_fmadd_pch):\n\tAdjust builtin call.\n\t(_mm_mask3_fmadd_pch): Likewise\n\t(_mm256_mask_fmadd_pch): Likewise\n\t(_mm256_mask3_fmadd_pch): Likewise\n\t(_mm_mask_fcmadd_pch): Likewise\n\t(_mm_mask3_fcmadd_pch): Likewise\n\t(_mm256_mask_fcmadd_pch): Likewise\n\t(_mm256_mask3_fcmadd_pch): Likewise\n\t* config/i386/i386-builtin.def: Add mask3 builtin for complex\n\tfma, and adjust mask_builtin to corresponding expander.\n\t* config/i386/i386-expand.c (ix86_expand_round_builtin):\n\tSkip eraseing embedded rounding for expanders that emits\n\tmultiple insns.\n\t* config/i386/sse.md (complexmove): New mode_attr.\n\t(<avx512>_fmaddc_<mode>_mask1<round_expand_name>): New expander.\n\t(<avx512>_fcmaddc_<mode>_mask1<round_expand_name>): Likewise.\n\t(avx512fp16_fmaddcsh_v8hf_mask1<round_expand_name>): Likewise.\n\t(avx512fp16_fcmaddcsh_v8hf_mask1<round_expand_name>): Likewise.\n\t(avx512fp16_fcmaddcsh_v8hf_mask3<round_expand_name>): Likewise.\n\t(avx512fp16_fmaddcsh_v8hf_mask3<round_expand_name>): Likewise.\n\t* config/i386/subst.md (round_embedded_complex): New subst.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add new mask3 builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c: Add scanning for\n\tmask/mask3 intrinsic.\n\t* gcc.target/i386/avx512fp16-vfmaddcsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1c.c: New test for\n\t-mavx512vl.\n\t* gcc.target/i386/avx512fp16-vfmaddcsh-1c.c: Ditto.", "tree": {"sha": "bb1dd52d29b85d9e1ed1fe9fc1c89490e4161d79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb1dd52d29b85d9e1ed1fe9fc1c89490e4161d79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd440a8c1c50b20b6eac028bca1fc682159787ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd440a8c1c50b20b6eac028bca1fc682159787ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd440a8c1c50b20b6eac028bca1fc682159787ba"}], "stats": {"total": 591, "additions": 375, "deletions": 216}, "files": [{"sha": "5e49447a0205df185e82f1d2ff286e025a2089bc", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 84, "deletions": 177, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -6258,24 +6258,22 @@ extern __inline __m512h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_fcmadd_pch (__m512h __A, __mmask16 __B, __m512h __C, __m512h __D)\n {\n-  return (__m512h) __builtin_ia32_movaps512_mask\n-    ((__v16sf)\n-     __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n-\t\t\t\t\t      (__v32hf) __C,\n-\t\t\t\t\t      (__v32hf) __D, __B,\n-\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION),\n-     (__v16sf) __A, __B);\n+  return (__m512h)\n+    __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     (__v32hf) __D, __B,\n+\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask3_fcmadd_pch (__m512h __A, __m512h __B, __m512h __C, __mmask16 __D)\n {\n   return (__m512h)\n-    __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n-\t\t\t\t\t     (__v32hf) __B,\n-\t\t\t\t\t     (__v32hf) __C,\n-\t\t\t\t\t     __D, _MM_FROUND_CUR_DIRECTION);\n+    __builtin_ia32_vfcmaddcph512_mask3_round ((__v32hf) __A,\n+\t\t\t\t\t      (__v32hf) __B,\n+\t\t\t\t\t      (__v32hf) __C,\n+\t\t\t\t\t      __D, _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512h\n@@ -6304,24 +6302,22 @@ extern __inline __m512h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_fmadd_pch (__m512h __A, __mmask16 __B, __m512h __C, __m512h __D)\n {\n-  return (__m512h) __builtin_ia32_movaps512_mask\n-    ((__v16sf)\n-     __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n-\t\t\t\t\t     (__v32hf) __C,\n-\t\t\t\t\t     (__v32hf) __D, __B,\n-\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION),\n-     (__v16sf) __A, __B);\n+  return (__m512h)\n+    __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t    (__v32hf) __C,\n+\t\t\t\t\t    (__v32hf) __D, __B,\n+\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask3_fmadd_pch (__m512h __A, __m512h __B, __m512h __C, __mmask16 __D)\n {\n   return (__m512h)\n-    __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n-\t\t\t\t\t    (__v32hf) __B,\n-\t\t\t\t\t    (__v32hf) __C,\n-\t\t\t\t\t    __D, _MM_FROUND_CUR_DIRECTION);\n+    __builtin_ia32_vfmaddcph512_mask3_round ((__v32hf) __A,\n+\t\t\t\t\t     (__v32hf) __B,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     __D, _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m512h\n@@ -6352,13 +6348,11 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_fcmadd_round_pch (__m512h __A, __mmask16 __B, __m512h __C,\n \t\t\t      __m512h __D, const int __E)\n {\n-  return (__m512h) __builtin_ia32_movaps512_mask\n-    ((__v16sf)\n-     __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n-\t\t\t\t\t      (__v32hf) __C,\n-\t\t\t\t\t      (__v32hf) __D, __B,\n-\t\t\t\t\t      __E),\n-     (__v16sf) __A, __B);\n+  return (__m512h)\n+    __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     (__v32hf) __D, __B,\n+\t\t\t\t\t     __E);\n }\n \n extern __inline __m512h\n@@ -6367,10 +6361,10 @@ _mm512_mask3_fcmadd_round_pch (__m512h __A, __m512h __B, __m512h __C,\n \t\t\t       __mmask16 __D, const int __E)\n {\n   return (__m512h)\n-    __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) __A,\n-\t\t\t\t\t     (__v32hf) __B,\n-\t\t\t\t\t     (__v32hf) __C,\n-\t\t\t\t\t     __D, __E);\n+    __builtin_ia32_vfcmaddcph512_mask3_round ((__v32hf) __A,\n+\t\t\t\t\t      (__v32hf) __B,\n+\t\t\t\t\t      (__v32hf) __C,\n+\t\t\t\t\t      __D, __E);\n }\n \n extern __inline __m512h\n@@ -6401,13 +6395,11 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_fmadd_round_pch (__m512h __A, __mmask16 __B, __m512h __C,\n \t\t\t     __m512h __D, const int __E)\n {\n-  return (__m512h) __builtin_ia32_movaps512_mask\n-    ((__v16sf)\n-     __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n-\t\t\t\t\t     (__v32hf) __C,\n-\t\t\t\t\t     (__v32hf) __D, __B,\n-\t\t\t\t\t     __E),\n-     (__v16sf) __A, __B);\n+  return (__m512h)\n+    __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n+\t\t\t\t\t    (__v32hf) __C,\n+\t\t\t\t\t    (__v32hf) __D, __B,\n+\t\t\t\t\t    __E);\n }\n \n extern __inline __m512h\n@@ -6416,10 +6408,10 @@ _mm512_mask3_fmadd_round_pch (__m512h __A, __m512h __B, __m512h __C,\n \t\t\t      __mmask16 __D, const int __E)\n {\n   return (__m512h)\n-    __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) __A,\n-\t\t\t\t\t    (__v32hf) __B,\n-\t\t\t\t\t    (__v32hf) __C,\n-\t\t\t\t\t    __D, __E);\n+    __builtin_ia32_vfmaddcph512_mask3_round ((__v32hf) __A,\n+\t\t\t\t\t     (__v32hf) __B,\n+\t\t\t\t\t     (__v32hf) __C,\n+\t\t\t\t\t     __D, __E);\n }\n \n extern __inline __m512h\n@@ -6439,18 +6431,16 @@ _mm512_maskz_fmadd_round_pch (__mmask16 __A, __m512h __B, __m512h __C,\n   (__m512h) __builtin_ia32_vfcmaddcph512_round ((A), (B), (C), (D))\n \n #define _mm512_mask_fcmadd_round_pch(A, B, C, D, E)\t\t\t\\\n-  ((__m512h) __builtin_ia32_movaps512_mask (\t\t\t\t\\\n-   (__v16sf)\t\t\t\t\t\t\t\t\\\n+  ((__m512h) \t\t\t\t\t\t\t\t\\\n     __builtin_ia32_vfcmaddcph512_mask_round ((__v32hf) (A),\t\t\\\n \t\t\t\t\t     (__v32hf) (C),\t\t\\\n \t\t\t\t\t     (__v32hf) (D),\t\t\\\n-\t\t\t\t\t     (B), (E)),\t\t\t\\\n-\t\t\t\t\t     (__v16sf) (A), (B)));\n+\t\t\t\t\t     (B), (E)))\n \n \n #define _mm512_mask3_fcmadd_round_pch(A, B, C, D, E)\t\t\t\\\n   ((__m512h)\t\t\t\t\t\t\t\t\\\n-   __builtin_ia32_vfcmaddcph512_mask_round ((A), (B), (C), (D), (E)))\n+   __builtin_ia32_vfcmaddcph512_mask3_round ((A), (B), (C), (D), (E)))\n \n #define _mm512_maskz_fcmadd_round_pch(A, B, C, D, E)\t\t\t\\\n   (__m512h)\t\t\t\t\t\t\t\t\\\n@@ -6460,17 +6450,15 @@ _mm512_maskz_fmadd_round_pch (__mmask16 __A, __m512h __B, __m512h __C,\n   (__m512h) __builtin_ia32_vfmaddcph512_round ((A), (B), (C), (D))\n \n #define _mm512_mask_fmadd_round_pch(A, B, C, D, E)\t\t\t\\\n-  ((__m512h) __builtin_ia32_movaps512_mask (\t\t\t\t\\\n-   (__v16sf)\t\t\t\t\t\t\t\t\\\n+  ((__m512h)\t\t\t\t\t\t\t\t\\\n     __builtin_ia32_vfmaddcph512_mask_round ((__v32hf) (A),\t\t\\\n \t\t\t\t\t    (__v32hf) (C),\t\t\\\n \t\t\t\t\t    (__v32hf) (D),\t\t\\\n-\t\t\t\t\t    (B), (E)),\t\t\t\\\n-\t\t\t\t\t    (__v16sf) (A), (B)));\n+\t\t\t\t\t    (B), (E)))\n \n #define _mm512_mask3_fmadd_round_pch(A, B, C, D, E)\t\t\t\\\n   (__m512h)\t\t\t\t\t\t\t\t\\\n-   __builtin_ia32_vfmaddcph512_mask_round ((A), (B), (C), (D), (E))\n+   __builtin_ia32_vfmaddcph512_mask3_round ((A), (B), (C), (D), (E))\n \n #define _mm512_maskz_fmadd_round_pch(A, B, C, D, E)\t\t\t\\\n   (__m512h)\t\t\t\t\t\t\t\t\\\n@@ -6643,35 +6631,22 @@ extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_fcmadd_sch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n {\n-#ifdef __AVX512VL__\n-  return (__m128h) __builtin_ia32_movaps128_mask (\n-    (__v4sf)\n-    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n-\t\t\t\t\t  (__v8hf) __C,\n-\t\t\t\t\t  (__v8hf) __D, __B,\n-\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION),\n-    (__v4sf) __A, __B);\n-#else\n-  return (__m128h) __builtin_ia32_blendvps ((__v4sf) __A,\n-    (__v4sf)\n+  return (__m128h)\n     __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n \t\t\t\t\t  (__v8hf) __C,\n \t\t\t\t\t  (__v8hf) __D, __B,\n-\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION),\n-    (__v4sf) _mm_set_ss ((float) ((int) __B << 31)));\n-#endif\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask3_fcmadd_sch (__m128h __A, __m128h __B, __m128h __C, __mmask8 __D)\n {\n-  return (__m128h) _mm_move_ss ((__m128) __C,\n-    (__m128)\n-    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n-\t\t\t\t\t  (__v8hf) __B,\n-\t\t\t\t\t  (__v8hf) __C, __D,\n-\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION));\n+  return (__m128h)\n+    __builtin_ia32_vfcmaddcsh_mask3_round ((__v8hf) __A,\n+\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t   (__v8hf) __C, __D,\n+\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128h\n@@ -6700,35 +6675,22 @@ extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_fmadd_sch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n {\n-#ifdef __AVX512VL__\n-  return (__m128h) __builtin_ia32_movaps128_mask (\n-    (__v4sf)\n-    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n-\t\t\t\t\t (__v8hf) __C,\n-\t\t\t\t\t (__v8hf) __D, __B,\n-\t\t\t\t\t _MM_FROUND_CUR_DIRECTION),\n-    (__v4sf) __A, __B);\n-#else\n-  return (__m128h) __builtin_ia32_blendvps ((__v4sf) __A,\n-    (__v4sf)\n+  return (__m128h)\n     __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n \t\t\t\t\t (__v8hf) __C,\n \t\t\t\t\t (__v8hf) __D, __B,\n-\t\t\t\t\t _MM_FROUND_CUR_DIRECTION),\n-    (__v4sf) _mm_set_ss ((float) ((int) __B << 31)));\n-#endif\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask3_fmadd_sch (__m128h __A, __m128h __B, __m128h __C, __mmask8 __D)\n {\n-  return (__m128h) _mm_move_ss ((__m128) __C,\n-    (__m128)\n-    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n-\t\t\t\t\t (__v8hf) __B,\n-\t\t\t\t\t (__v8hf) __C, __D,\n-\t\t\t\t\t _MM_FROUND_CUR_DIRECTION));\n+  return (__m128h)\n+    __builtin_ia32_vfmaddcsh_mask3_round ((__v8hf) __A,\n+\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t  (__v8hf) __C, __D,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128h\n@@ -6759,36 +6721,23 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_fcmadd_round_sch (__m128h __A, __mmask8 __B, __m128h __C,\n \t\t\t   __m128h __D, const int __E)\n {\n-#ifdef __AVX512VL__\n-  return (__m128h) __builtin_ia32_movaps128_mask (\n-    (__v4sf)\n-    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n-\t\t\t\t\t  (__v8hf) __C,\n-\t\t\t\t\t  (__v8hf) __D,\n-\t\t\t\t\t  __B, __E),\n-    (__v4sf) __A, __B);\n-#else\n-  return (__m128h) __builtin_ia32_blendvps ((__v4sf) __A,\n-    (__v4sf)\n+  return (__m128h)\n     __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n \t\t\t\t\t  (__v8hf) __C,\n \t\t\t\t\t  (__v8hf) __D,\n-\t\t\t\t\t  __B, __E),\n-    (__v4sf) _mm_set_ss ((float) ((int) __B << 31)));\n-#endif\n+\t\t\t\t\t  __B, __E);\n }\n \n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask3_fcmadd_round_sch (__m128h __A, __m128h __B, __m128h __C,\n \t\t\t    __mmask8 __D, const int __E)\n {\n-  return (__m128h) _mm_move_ss ((__m128) __C,\n-    (__m128)\n-    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n-\t\t\t\t\t  (__v8hf) __B,\n-\t\t\t\t\t  (__v8hf) __C,\n-\t\t\t\t\t  __D, __E));\n+  return (__m128h)\n+    __builtin_ia32_vfcmaddcsh_mask3_round ((__v8hf) __A,\n+\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t   (__v8hf) __C,\n+\t\t\t\t\t   __D, __E);\n }\n \n extern __inline __m128h\n@@ -6819,36 +6768,23 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_fmadd_round_sch (__m128h __A, __mmask8 __B, __m128h __C,\n \t\t\t  __m128h __D, const int __E)\n {\n-#ifdef __AVX512VL__\n-  return (__m128h) __builtin_ia32_movaps128_mask (\n-    (__v4sf)\n-    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n-\t\t\t\t\t (__v8hf) __C,\n-\t\t\t\t\t (__v8hf) __D,\n-\t\t\t\t\t __B, __E),\n-    (__v4sf) __A, __B);\n-#else\n-  return (__m128h) __builtin_ia32_blendvps ((__v4sf) __A,\n-    (__v4sf)\n+  return (__m128h)\n     __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n \t\t\t\t\t (__v8hf) __C,\n \t\t\t\t\t (__v8hf) __D,\n-\t\t\t\t\t __B, __E),\n-    (__v4sf) _mm_set_ss ((float) ((int) __B << 31)));\n-#endif\n+\t\t\t\t\t __B, __E);\n }\n \n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask3_fmadd_round_sch (__m128h __A, __m128h __B, __m128h __C,\n \t\t\t   __mmask8 __D, const int __E)\n {\n-  return (__m128h) _mm_move_ss ((__m128) __C,\n-    (__m128)\n-    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n-\t\t\t\t\t (__v8hf) __B,\n-\t\t\t\t\t (__v8hf) __C,\n-\t\t\t\t\t __D, __E));\n+  return (__m128h)\n+    __builtin_ia32_vfmaddcsh_mask3_round ((__v8hf) __A,\n+\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t  (__v8hf) __C,\n+\t\t\t\t\t  __D, __E);\n }\n \n extern __inline __m128h\n@@ -6874,69 +6810,40 @@ _mm_fmadd_round_sch (__m128h __A, __m128h __B, __m128h __C, const int __D)\n \t\t\t\t    __D);\n }\n #else\n-#ifdef __AVX512VL__\n #define _mm_mask_fcmadd_round_sch(A, B, C, D, E)\t\t\t\\\n-    ((__m128h) __builtin_ia32_movaps128_mask (\t\t\t\t\\\n-     (__v4sf)\t\t\t\t\t\t\t\t\\\n+    ((__m128h)\t\t\t\t\t\t\t\t\\\n      __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n \t\t\t\t\t   (__v8hf) (C),\t\t\\\n \t\t\t\t\t   (__v8hf) (D),\t\t\\\n-\t\t\t\t\t   (B), (E)),\t\t\t\\\n-\t\t\t\t\t   (__v4sf) (A), (B)))\n+\t\t\t\t\t   (B), (E)))\n \n-#else\n-#define _mm_mask_fcmadd_round_sch(A, B, C, D, E)\t\t\t\\\n-  ((__m128h) __builtin_ia32_blendvps ((__v4sf) (A),\t\t\t\\\n-   (__v4sf)\t\t\t\t\t\t\t\t\\\n-   __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n-\t\t\t\t\t (__v8hf) (C),\t\t\\\n-\t\t\t\t\t (__v8hf) (D),\t\t\\\n-\t\t\t\t\t (B), (E)),\t\t\\\n-    (__v4sf) _mm_set_ss ((float) ((int) (B) << 31))))\n-#endif\n \n #define _mm_mask3_fcmadd_round_sch(A, B, C, D, E)\t\t\t\\\n-  ((__m128h) _mm_move_ss ((__m128) (C),\t\t\t\t\t\\\n-   (__m128)\t\t\t\t\t\t\t\t\\\n-   __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n-\t\t\t\t\t (__v8hf) (B),\t\t\\\n-\t\t\t\t\t (__v8hf) (C),\t\t\\\n-\t\t\t\t\t (D), (E))))\n+  ((__m128h)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfcmaddcsh_mask3_round ((__v8hf) (A),\t\t\\\n+\t\t\t\t\t  (__v8hf) (B),\t\t\\\n+\t\t\t\t\t  (__v8hf) (C),\t\t\\\n+\t\t\t\t\t  (D), (E)))\n \n #define _mm_maskz_fcmadd_round_sch(A, B, C, D, E)\t\t\\\n   __builtin_ia32_vfcmaddcsh_maskz_round ((B), (C), (D), (A), (E))\n \n #define _mm_fcmadd_round_sch(A, B, C, D)\t\t\\\n   __builtin_ia32_vfcmaddcsh_round ((A), (B), (C), (D))\n \n-#ifdef __AVX512VL__\n #define _mm_mask_fmadd_round_sch(A, B, C, D, E)\t\t\t\t\\\n-    ((__m128h) __builtin_ia32_movaps128_mask (\t\t\t\t\\\n-     (__v4sf)\t\t\t\t\t\t\t\t\\\n+    ((__m128h)\t\t\t\t\t\t\t\t\\\n      __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n \t\t\t\t\t  (__v8hf) (C),\t\t\\\n \t\t\t\t\t  (__v8hf) (D),\t\t\\\n-\t\t\t\t\t  (B), (E)),\t\t\\\n-\t\t\t\t\t  (__v4sf) (A), (B)))\n-\n-#else\n-#define _mm_mask_fmadd_round_sch(A, B, C, D, E)\t\t\t\t\\\n-  ((__m128h) __builtin_ia32_blendvps ((__v4sf) (A),\t\t\t\\\n-   (__v4sf)\t\t\t\t\t\t\t\t\\\n-   __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n-\t\t\t\t\t(__v8hf) (C),\t\t\\\n-\t\t\t\t\t(__v8hf) (D),\t\t\\\n-\t\t\t\t\t(B), (E)),\t\t\\\n-    (__v4sf) _mm_set_ss ((float) ((int) (B) << 31))))\n-#endif\n+\t\t\t\t\t  (B), (E)))\n \n #define _mm_mask3_fmadd_round_sch(A, B, C, D, E)\t\t\t\\\n-  ((__m128h) _mm_move_ss ((__m128) (C),\t\t\t\t\t\\\n-   (__m128)\t\t\t\t\t\t\t\t\\\n-   __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n-\t\t\t\t\t(__v8hf) (B),\t\t\\\n-\t\t\t\t\t(__v8hf) (C),\t\t\\\n-\t\t\t\t\t(D), (E))))\n+  ((__m128h)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfmaddcsh_mask3_round ((__v8hf) (A),\t\t\\\n+\t\t\t\t\t (__v8hf) (B),\t\t\\\n+\t\t\t\t\t (__v8hf) (C),\t\t\\\n+\t\t\t\t\t (D), (E)))\n \n #define _mm_maskz_fmadd_round_sch(A, B, C, D, E)\t\t\\\n   __builtin_ia32_vfmaddcsh_maskz_round ((B), (C), (D), (A), (E))"}, {"sha": "0b1f1cbe6ad8f3ee8eb6c59c5b72940471848638", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -2898,21 +2898,20 @@ extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_fmadd_pch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n {\n-  return (__m128h) __builtin_ia32_movaps128_mask\n-    ((__v4sf)\n-     __builtin_ia32_vfmaddcph128_mask ((__v8hf) __A,\n-\t\t\t\t       (__v8hf) __C,\n-\t\t\t\t       (__v8hf) __D, __B),\n-     (__v4sf) __A, __B);\n+  return (__m128h)\n+    __builtin_ia32_vfmaddcph128_mask ((__v8hf) __A,\n+\t\t\t\t      (__v8hf) __C,\n+\t\t\t\t      (__v8hf) __D, __B);\n }\n \n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask3_fmadd_pch (__m128h __A, __m128h __B, __m128h __C,  __mmask8 __D)\n {\n-  return (__m128h) __builtin_ia32_vfmaddcph128_mask ((__v8hf) __A,\n-\t\t\t\t\t\t     (__v8hf) __B,\n-\t\t\t\t\t\t     (__v8hf) __C, __D);\n+  return (__m128h)\n+    __builtin_ia32_vfmaddcph128_mask3 ((__v8hf) __A,\n+\t\t\t\t       (__v8hf) __B,\n+\t\t\t\t       (__v8hf) __C, __D);\n }\n \n extern __inline __m128h\n@@ -2937,21 +2936,20 @@ extern __inline __m256h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_fmadd_pch (__m256h __A, __mmask8 __B, __m256h __C, __m256h __D)\n {\n-  return (__m256h) __builtin_ia32_movaps256_mask\n-    ((__v8sf)\n+  return (__m256h)\n      __builtin_ia32_vfmaddcph256_mask ((__v16hf) __A,\n \t\t\t\t       (__v16hf) __C,\n-\t\t\t\t       (__v16hf) __D, __B),\n-     (__v8sf) __A, __B);\n+\t\t\t\t       (__v16hf) __D, __B);\n }\n \n extern __inline __m256h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask3_fmadd_pch (__m256h __A, __m256h __B, __m256h __C,  __mmask8 __D)\n {\n-  return (__m256h) __builtin_ia32_vfmaddcph256_mask ((__v16hf) __A,\n-\t\t\t\t\t\t     (__v16hf) __B,\n-\t\t\t\t\t\t     (__v16hf) __C, __D);\n+  return (__m256h)\n+    __builtin_ia32_vfmaddcph256_mask3 ((__v16hf) __A,\n+\t\t\t\t       (__v16hf) __B,\n+\t\t\t\t       (__v16hf) __C, __D);\n }\n \n extern __inline __m256h\n@@ -2976,21 +2974,20 @@ extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_fcmadd_pch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n {\n-  return (__m128h) __builtin_ia32_movaps128_mask\n-    ((__v4sf)\n+  return (__m128h)\n      __builtin_ia32_vfcmaddcph128_mask ((__v8hf) __A,\n \t\t\t\t\t(__v8hf) __C,\n-\t\t\t\t\t(__v8hf) __D, __B),\n-     (__v4sf) __A, __B);\n+\t\t\t\t\t(__v8hf) __D, __B);\n }\n \n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask3_fcmadd_pch (__m128h __A, __m128h __B, __m128h __C,  __mmask8 __D)\n {\n-  return (__m128h) __builtin_ia32_vfcmaddcph128_mask ((__v8hf) __A,\n-\t\t\t\t\t\t      (__v8hf) __B,\n-\t\t\t\t\t\t      (__v8hf) __C, __D);\n+  return (__m128h)\n+    __builtin_ia32_vfcmaddcph128_mask3 ((__v8hf) __A,\n+\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t(__v8hf) __C, __D);\n }\n \n extern __inline __m128h\n@@ -3015,21 +3012,20 @@ extern __inline __m256h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_fcmadd_pch (__m256h __A, __mmask8 __B, __m256h __C, __m256h __D)\n {\n-  return (__m256h) __builtin_ia32_movaps256_mask\n-    ((__v8sf)\n+  return (__m256h)\n      __builtin_ia32_vfcmaddcph256_mask ((__v16hf) __A,\n \t\t\t\t\t(__v16hf) __C,\n-\t\t\t\t\t(__v16hf) __D, __B),\n-     (__v8sf) __A, __B);\n+\t\t\t\t\t(__v16hf) __D, __B);\n }\n \n extern __inline __m256h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask3_fcmadd_pch (__m256h __A, __m256h __B, __m256h __C,  __mmask8 __D)\n {\n-  return (__m256h) __builtin_ia32_vfcmaddcph256_mask ((__v16hf) __A,\n-\t\t\t\t\t\t      (__v16hf) __B,\n-\t\t\t\t\t\t      (__v16hf) __C, __D);\n+  return (__m256h)\n+    __builtin_ia32_vfcmaddcph256_mask3 ((__v16hf) __A,\n+\t\t\t\t\t(__v16hf) __B,\n+\t\t\t\t\t(__v16hf) __C, __D);\n }\n \n extern __inline __m256h"}, {"sha": "99217d08d374ab1f9c5f2744389afee0ccd9f88d", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -2912,16 +2912,20 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp1\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fnmsub_v8hf_mask3, \"__builtin_ia32_vfnmsubph128_mask3\", IX86_BUILTIN_VFNMSUBPH128_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fnmsub_v8hf_maskz, \"__builtin_ia32_vfnmsubph128_maskz\", IX86_BUILTIN_VFNMSUBPH128_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fmaddc_v8hf, \"__builtin_ia32_vfmaddcph128\", IX86_BUILTIN_VFMADDCPH_V8HF, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF)\n-BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddc_v8hf_mask, \"__builtin_ia32_vfmaddcph128_mask\", IX86_BUILTIN_VFMADDCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddc_v8hf_mask1, \"__builtin_ia32_vfmaddcph128_mask\", IX86_BUILTIN_VFMADDCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddc_v8hf_mask, \"__builtin_ia32_vfmaddcph128_mask3\", IX86_BUILTIN_VFMADDCPH128_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddc_v8hf_maskz, \"__builtin_ia32_vfmaddcph128_maskz\", IX86_BUILTIN_VFMADDCPH128_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fmaddc_v16hf, \"__builtin_ia32_vfmaddcph256\", IX86_BUILTIN_VFMADDCPH_V16HF, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF)\n-BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddc_v16hf_mask, \"__builtin_ia32_vfmaddcph256_mask\", IX86_BUILTIN_VFMADDCPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddc_v16hf_mask1, \"__builtin_ia32_vfmaddcph256_mask\", IX86_BUILTIN_VFMADDCPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddc_v16hf_mask, \"__builtin_ia32_vfmaddcph256_mask3\", IX86_BUILTIN_VFMADDCPH256_MASK3, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fmaddc_v16hf_maskz, \"__builtin_ia32_vfmaddcph256_maskz\", IX86_BUILTIN_VFMADDCPH256_MASKZ, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fcmaddc_v8hf, \"__builtin_ia32_vfcmaddcph128\", IX86_BUILTIN_VFCMADDCPH_V8HF, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF)\n-BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddc_v8hf_mask, \"__builtin_ia32_vfcmaddcph128_mask\", IX86_BUILTIN_VFCMADDCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddc_v8hf_mask1, \"__builtin_ia32_vfcmaddcph128_mask\", IX86_BUILTIN_VFCMADDCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddc_v8hf_mask, \"__builtin_ia32_vfcmaddcph128_mask3\", IX86_BUILTIN_VFCMADDCPH128_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddc_v8hf_maskz, \"__builtin_ia32_vfcmaddcph128_maskz\", IX86_BUILTIN_VFCMADDCPH128_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fcmaddc_v16hf, \"__builtin_ia32_vfcmaddcph256\", IX86_BUILTIN_VFCMADDCPH_V16HF, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF)\n-BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fcmaddc_v16hf_mask, \"__builtin_ia32_vfcmaddcph256_mask\", IX86_BUILTIN_VFCMADDCPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fcmaddc_v16hf_mask1, \"__builtin_ia32_vfcmaddcph256_mask\", IX86_BUILTIN_VFCMADDCPH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fcmaddc_v16hf_mask, \"__builtin_ia32_vfcmaddcph256_mask3\", IX86_BUILTIN_VFCMADDCPH256_MASK3, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_fcmaddc_v16hf_maskz, \"__builtin_ia32_vfcmaddcph256_maskz\", IX86_BUILTIN_VFCMADDCPH256_MASKZ, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmulc_v8hf, \"__builtin_ia32_vfcmulcph128\", IX86_BUILTIN_VFCMULCPH_V8HF, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmulc_v8hf_mask, \"__builtin_ia32_vfcmulcph128_mask\", IX86_BUILTIN_VFCMULCPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n@@ -3222,20 +3226,24 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfnmadd_v8hf_mask3_roun\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfnmadd_v8hf_maskz_round, \"__builtin_ia32_vfnmaddsh3_maskz\", IX86_BUILTIN_VFNMADDSH3_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfmsub_v8hf_mask3_round, \"__builtin_ia32_vfmsubsh3_mask3\", IX86_BUILTIN_VFMSUBSH3_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fmaddc_v32hf_round, \"__builtin_ia32_vfmaddcph512_round\", IX86_BUILTIN_VFMADDCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_INT)\n-BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddc_v32hf_mask_round, \"__builtin_ia32_vfmaddcph512_mask_round\", IX86_BUILTIN_VFMADDCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddc_v32hf_mask1_round, \"__builtin_ia32_vfmaddcph512_mask_round\", IX86_BUILTIN_VFMADDCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddc_v32hf_mask_round, \"__builtin_ia32_vfmaddcph512_mask3_round\", IX86_BUILTIN_VFMADDCPH512_MASK3_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmaddc_v32hf_maskz_round, \"__builtin_ia32_vfmaddcph512_maskz_round\", IX86_BUILTIN_VFMADDCPH512_MASKZ_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_fma_fcmaddc_v32hf_round, \"__builtin_ia32_vfcmaddcph512_round\", IX86_BUILTIN_VFCMADDCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_INT)\n-BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmaddc_v32hf_mask_round, \"__builtin_ia32_vfcmaddcph512_mask_round\", IX86_BUILTIN_VFCMADDCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmaddc_v32hf_mask1_round, \"__builtin_ia32_vfcmaddcph512_mask_round\", IX86_BUILTIN_VFCMADDCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmaddc_v32hf_mask_round, \"__builtin_ia32_vfcmaddcph512_mask3_round\", IX86_BUILTIN_VFCMADDCPH512_MASK3_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmaddc_v32hf_maskz_round, \"__builtin_ia32_vfcmaddcph512_maskz_round\", IX86_BUILTIN_VFCMADDCPH512_MASKZ_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmulc_v32hf_round, \"__builtin_ia32_vfcmulcph512_round\", IX86_BUILTIN_VFCMULCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmulc_v32hf_mask_round, \"__builtin_ia32_vfcmulcph512_mask_round\", IX86_BUILTIN_VFCMULCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmulc_v32hf_round, \"__builtin_ia32_vfmulcph512_round\", IX86_BUILTIN_VFMULCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmulc_v32hf_mask_round, \"__builtin_ia32_vfmulcph512_mask_round\", IX86_BUILTIN_VFMULCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fma_fcmaddcsh_v8hf_round, \"__builtin_ia32_vfcmaddcsh_round\", IX86_BUILTIN_VFCMADDCSH_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_INT)\n-BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddcsh_v8hf_mask_round, \"__builtin_ia32_vfcmaddcsh_mask_round\", IX86_BUILTIN_VFCMADDCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddcsh_v8hf_mask1_round, \"__builtin_ia32_vfcmaddcsh_mask_round\", IX86_BUILTIN_VFCMADDCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddcsh_v8hf_mask3_round, \"__builtin_ia32_vfcmaddcsh_mask3_round\", IX86_BUILTIN_VFCMADDCSH_MASK3_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddcsh_v8hf_maskz_round, \"__builtin_ia32_vfcmaddcsh_maskz_round\", IX86_BUILTIN_VFCMADDCSH_MASKZ_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fma_fmaddcsh_v8hf_round, \"__builtin_ia32_vfmaddcsh_round\", IX86_BUILTIN_VFMADDCSH_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_INT)\n-BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddcsh_v8hf_mask_round, \"__builtin_ia32_vfmaddcsh_mask_round\", IX86_BUILTIN_VFMADDCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddcsh_v8hf_mask1_round, \"__builtin_ia32_vfmaddcsh_mask_round\", IX86_BUILTIN_VFMADDCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddcsh_v8hf_mask3_round, \"__builtin_ia32_vfmaddcsh_mask3_round\", IX86_BUILTIN_VFMADDCSH_MASK3_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddcsh_v8hf_maskz_round, \"__builtin_ia32_vfmaddcsh_maskz_round\", IX86_BUILTIN_VFMADDCSH_MASKZ_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmulcsh_v8hf_round, \"__builtin_ia32_vfcmulcsh_round\", IX86_BUILTIN_VFCMULCSH_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmulcsh_v8hf_mask_round, \"__builtin_ia32_vfcmulcsh_mask_round\", IX86_BUILTIN_VFCMULCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)"}, {"sha": "95274201f4f31e616e8f26ac5227b2055a2775ef", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -10887,7 +10887,27 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n \n \t  /* If there is no rounding use normal version of the pattern.  */\n \t  if (INTVAL (op) == NO_ROUND)\n-\t    redundant_embed_rnd = 1;\n+\t    {\n+\t      /* Skip erasing embedded rounding for below expanders who\n+\t\t generates multiple insns.  In ix86_erase_embedded_rounding\n+\t\t the pattern will be transformed to a single set, and emit_insn\n+\t\t appends the set insead of insert it to chain.  So the insns\n+\t\t emitted inside define_expander would be ignored.  */\n+\t      switch (icode)\n+\t\t{\n+\t\tcase CODE_FOR_avx512bw_fmaddc_v32hf_mask1_round:\n+\t\tcase CODE_FOR_avx512bw_fcmaddc_v32hf_mask1_round:\n+\t\tcase CODE_FOR_avx512fp16_fmaddcsh_v8hf_mask1_round:\n+\t\tcase CODE_FOR_avx512fp16_fcmaddcsh_v8hf_mask1_round:\n+\t\tcase CODE_FOR_avx512fp16_fmaddcsh_v8hf_mask3_round:\n+\t\tcase CODE_FOR_avx512fp16_fcmaddcsh_v8hf_mask3_round:\n+\t\t  redundant_embed_rnd = 0;\n+\t\t  break;\n+\t\tdefault:\n+\t\t  redundant_embed_rnd = 1;\n+\t\t  break;\n+\t\t}\n+\t    }\n \t}\n       else\n \t{"}, {"sha": "480669125d34b281024db439ddcd8b29fb0a35b2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -5865,6 +5865,34 @@\n \t (UNSPEC_COMPLEX_FMUL \"fmulc\")\n \t (UNSPEC_COMPLEX_FCMUL \"fcmulc\")])\n \n+(define_mode_attr complexmove\n+  [(V32HF \"avx512f_loadv16sf\")\n+   (V16HF \"avx512vl_loadv8sf\")\n+   (V8HF \"avx512vl_loadv4sf\")])\n+\n+(define_expand \"<avx512>_fmaddc_<mode>_mask1<round_expand_name>\"\n+  [(match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512FP16VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512FP16VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512FP16VL 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:<avx512fmaskcmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  rtx op0, op1;\n+  if (<round_embedded_complex>)\n+    emit_insn (gen_<avx512>_fmaddc_<mode>_mask<round_expand_name> (\n+      operands[0], operands[1], operands[2], operands[3],\n+      operands[4]<round_expand_operand>));\n+  else\n+    emit_insn (gen_<avx512>_fmaddc_<mode>_mask (operands[0],\n+      operands[1], operands[2], operands[3], operands[4]));\n+\n+  op0 = lowpart_subreg (<ssePSmode>mode, operands[0], <MODE>mode);\n+  op1 = lowpart_subreg (<ssePSmode>mode, operands[1], <MODE>mode);\n+  emit_insn (gen_<complexmove>_mask (op0, op0, op1, operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"<avx512>_fmaddc_<mode>_maskz<round_expand_name>\"\n   [(match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n    (match_operand:VF_AVX512FP16VL 1 \"<round_expand_nimm_predicate>\")\n@@ -5879,6 +5907,31 @@\n   DONE;\n })\n \n+(define_expand \"<avx512>_fcmaddc_<mode>_mask1<round_expand_name>\"\n+  [(match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512FP16VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512FP16VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512FP16VL 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:<avx512fmaskcmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  rtx op0, op1;\n+  if (<round_embedded_complex>)\n+    emit_insn (gen_<avx512>_fcmaddc_<mode>_mask<round_expand_name> (\n+      operands[0], operands[1], operands[2], operands[3],\n+      operands[4]<round_expand_operand>));\n+  else\n+  {\n+    emit_insn (gen_<avx512>_fcmaddc_<mode>_mask (operands[0],\n+      operands[1], operands[2], operands[3], operands[4]));\n+  }\n+\n+  op0 = lowpart_subreg (<ssePSmode>mode, operands[0], <MODE>mode);\n+  op1 = lowpart_subreg (<ssePSmode>mode, operands[1], <MODE>mode);\n+  emit_insn (gen_<complexmove>_mask (op0, op0, op1, operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"<avx512>_fcmaddc_<mode>_maskz<round_expand_name>\"\n   [(match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n    (match_operand:VF_AVX512FP16VL 1 \"<round_expand_nimm_predicate>\")\n@@ -5947,6 +6000,47 @@\n   DONE;\n })\n \n+(define_expand \"avx512fp16_fmaddcsh_v8hf_mask1<round_expand_name>\"\n+  [(match_operand:V8HF 0 \"register_operand\")\n+   (match_operand:V8HF 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  rtx op0, op1;\n+\n+  if (<round_embedded_complex>)\n+    emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask<round_expand_name> (\n+      operands[0], operands[1], operands[2], operands[3],\n+      operands[4]<round_expand_operand>));\n+  else\n+    emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask (operands[0],\n+      operands[1], operands[2], operands[3], operands[4]));\n+\n+  if (TARGET_AVX512VL)\n+  {\n+    op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n+    op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n+    emit_insn (gen_avx512vl_loadv4sf_mask (op0, op0, op1, operands[4]));\n+  }\n+  else\n+  {\n+    rtx mask, tmp, vec_mask;\n+    mask = lowpart_subreg (SImode, operands[4], QImode),\n+    tmp = gen_reg_rtx (SImode);\n+    emit_insn (gen_ashlsi3 (tmp, mask, GEN_INT (31)));\n+    vec_mask = gen_reg_rtx (V4SImode);\n+    emit_insn (gen_rtx_SET (vec_mask, CONST0_RTX (V4SImode)));\n+    emit_insn (gen_vec_setv4si_0 (vec_mask, vec_mask, tmp));\n+    vec_mask = lowpart_subreg (V4SFmode, vec_mask, V4SImode);\n+    op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n+    op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n+    emit_insn (gen_sse4_1_blendvps (op0, op1, op0, vec_mask));\n+  }\n+  DONE;\n+})\n+\n (define_expand \"avx512fp16_fcmaddcsh_v8hf_maskz<round_expand_name>\"\n   [(match_operand:V8HF 0 \"register_operand\")\n    (match_operand:V8HF 1 \"<round_expand_nimm_predicate>\")\n@@ -5961,6 +6055,95 @@\n   DONE;\n })\n \n+(define_expand \"avx512fp16_fcmaddcsh_v8hf_mask1<round_expand_name>\"\n+  [(match_operand:V8HF 0 \"register_operand\")\n+   (match_operand:V8HF 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  rtx op0, op1;\n+\n+  if (<round_embedded_complex>)\n+    emit_insn (gen_avx512fp16_fcmaddcsh_v8hf_mask<round_expand_name> (\n+      operands[0], operands[1], operands[2], operands[3],\n+      operands[4]<round_expand_operand>));\n+  else\n+    emit_insn (gen_avx512fp16_fcmaddcsh_v8hf_mask (operands[0],\n+      operands[1], operands[2], operands[3], operands[4]));\n+\n+  if (TARGET_AVX512VL)\n+  {\n+    op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n+    op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n+    emit_insn (gen_avx512vl_loadv4sf_mask (op0, op0, op1, operands[4]));\n+  }\n+  else\n+  {\n+    rtx mask, tmp, vec_mask;\n+    mask = lowpart_subreg (SImode, operands[4], QImode),\n+    tmp = gen_reg_rtx (SImode);\n+    emit_insn (gen_ashlsi3 (tmp, mask, GEN_INT (31)));\n+    vec_mask = gen_reg_rtx (V4SImode);\n+    emit_insn (gen_rtx_SET (vec_mask, CONST0_RTX (V4SImode)));\n+    emit_insn (gen_vec_setv4si_0 (vec_mask, vec_mask, tmp));\n+    vec_mask = lowpart_subreg (V4SFmode, vec_mask, V4SImode);\n+    op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n+    op1 = lowpart_subreg (V4SFmode, operands[1], V8HFmode);\n+    emit_insn (gen_sse4_1_blendvps (op0, op1, op0, vec_mask));\n+  }\n+  DONE;\n+})\n+\n+(define_expand \"avx512fp16_fcmaddcsh_v8hf_mask3<round_expand_name>\"\n+  [(match_operand:V8HF 0 \"register_operand\")\n+   (match_operand:V8HF 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  rtx op0, op1;\n+\n+  if (<round_embedded_complex>)\n+    emit_insn (gen_avx512fp16_fcmaddcsh_v8hf_mask<round_expand_name> (\n+      operands[0], operands[1], operands[2], operands[3],\n+      operands[4]<round_expand_operand>));\n+  else\n+    emit_insn (gen_avx512fp16_fcmaddcsh_v8hf_mask (operands[0],\n+      operands[1], operands[2], operands[3], operands[4]));\n+\n+  op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n+  op1 = lowpart_subreg (V4SFmode, operands[3], V8HFmode);\n+  emit_insn (gen_sse_movss (op0, op1, op0));\n+  DONE;\n+})\n+\n+(define_expand \"avx512fp16_fmaddcsh_v8hf_mask3<round_expand_name>\"\n+  [(match_operand:V8HF 0 \"register_operand\")\n+   (match_operand:V8HF 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  rtx op0, op1;\n+\n+  if (<round_embedded_complex>)\n+    emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask<round_expand_name> (\n+      operands[0], operands[1], operands[2], operands[3],\n+      operands[4]<round_expand_operand>));\n+  else\n+    emit_insn (gen_avx512fp16_fmaddcsh_v8hf_mask (operands[0],\n+      operands[1], operands[2], operands[3], operands[4]));\n+\n+  op0 = lowpart_subreg (V4SFmode, operands[0], V8HFmode);\n+  op1 = lowpart_subreg (V4SFmode, operands[3], V8HFmode);\n+  emit_insn (gen_sse_movss (op0, op1, op0));\n+  DONE;\n+})\n+\n (define_insn \"avx512fp16_fma_<complexopname>sh_v8hf<mask_scalarcz_name><round_scalarcz_name>\"\n   [(set (match_operand:V8HF 0 \"register_operand\" \"=&v\")\n \t(vec_merge:V8HF"}, {"sha": "510e82c84f9725324115f0a9723e42c8a174bd8c", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -276,6 +276,9 @@\n (define_subst_attr \"round_expand_name\" \"round_expand\" \"\" \"_round\")\n (define_subst_attr \"round_expand_nimm_predicate\" \"round_expand\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"round_expand_operand\" \"round_expand\" \"\" \", operands[5]\")\n+(define_subst_attr \"round_embedded_complex\" \"round_expand\" \"0\" \"!(CONST_INT_P (operands[5])\n+\t\t\t\t\t\t\t\t  && (INTVAL (operands[5])\n+\t\t\t\t\t\t\t\t      == NO_ROUND))\")\n \n (define_subst \"round_expand\"\n  [(match_operand:SUBST_V 0)"}, {"sha": "154e7b3b107d2eca987eab74e63de3e725a006a9", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -789,19 +789,23 @@\n #define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vfcmaddcph512_round(A, B, C, D) __builtin_ia32_vfcmaddcph512_round(A, B, C, 8)\n #define __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcph512_mask3_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmaddcph512_round(A, B, C, D) __builtin_ia32_vfmaddcph512_round(A, B, C, 8)\n #define __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcph512_mask3_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmulcph512_round(A, B, C) __builtin_ia32_vfmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcsh_round(A, B, C, D) __builtin_ia32_vfmaddcsh_round(A, B, C, 8)\n #define __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_mask3_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfcmaddcsh_round(A, B, C, D) __builtin_ia32_vfcmaddcsh_round(A, B, C, 8)\n #define __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcsh_mask3_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmulcsh_round(A, B, C) __builtin_ia32_vfmulcsh_round(A, B, 8)\n #define __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, 8)"}, {"sha": "8ff2092c325c0571918143ab9c8e31a67c1e530e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -6,6 +6,8 @@\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vblendvps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "79a295f722cf8cd9f5f25bd1813f7730485cd952", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcsh-1c.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1c.c?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include \"avx512fp16-vfcmaddcsh-1a.c\"\n+"}, {"sha": "2ebe1f8ddd7b97db2c95b5cefb8614598a9bd114", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcsh-1a.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -6,6 +6,8 @@\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n /* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vblendvps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "7863f8f9af96c3891626186420f390c90d72280f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcsh-1c.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1c.c?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vblendmps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include \"avx512fp16-vfmaddcsh-1a.c\"\n+"}, {"sha": "e285c307d008cbbddef848fe5d8b6a5e2e1c28f5", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -806,19 +806,23 @@\n #define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vfcmaddcph512_round(A, B, C, D) __builtin_ia32_vfcmaddcph512_round(A, B, C, 8)\n #define __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcph512_mask3_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmaddcph512_round(A, B, C, D) __builtin_ia32_vfmaddcph512_round(A, B, C, 8)\n #define __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcph512_mask3_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmulcph512_round(A, B, C) __builtin_ia32_vfmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcsh_round(A, B, C, D) __builtin_ia32_vfmaddcsh_round(A, B, C, 8)\n #define __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_mask3_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfcmaddcsh_round(A, B, C, D) __builtin_ia32_vfcmaddcsh_round(A, B, C, 8)\n #define __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcsh_mask3_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmulcsh_round(A, B, C) __builtin_ia32_vfmulcsh_round(A, B, 8)\n #define __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, 8)"}, {"sha": "f71a7b291573f16d856611bc7befa2ea6c569d7f", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=2f9529fc62bcd7e5796c5c8c11879c9ba2ca133f", "patch": "@@ -807,19 +807,23 @@\n #define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vfcmaddcph512_round(A, B, C, D) __builtin_ia32_vfcmaddcph512_round(A, B, C, 8)\n #define __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcph512_mask3_round(A, C, D, B, E) __builtin_ia32_vfcmaddcph512_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcph512_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmaddcph512_round(A, B, C, D) __builtin_ia32_vfmaddcph512_round(A, B, C, 8)\n #define __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcph512_mask3_round(A, C, D, B, E) __builtin_ia32_vfmaddcph512_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcph512_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmulcph512_round(A, B, C) __builtin_ia32_vfmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcsh_round(A, B, C, D) __builtin_ia32_vfmaddcsh_round(A, B, C, 8)\n #define __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_mask3_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfcmaddcsh_round(A, B, C, D) __builtin_ia32_vfcmaddcsh_round(A, B, C, 8)\n #define __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcsh_mask3_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask3_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, 8)\n #define __builtin_ia32_vfmulcsh_round(A, B, C) __builtin_ia32_vfmulcsh_round(A, B, 8)\n #define __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, 8)"}]}