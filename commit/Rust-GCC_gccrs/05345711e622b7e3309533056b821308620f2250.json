{"sha": "05345711e622b7e3309533056b821308620f2250", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzNDU3MTFlNjIyYjdlMzMwOTUzMzA1NmI4MjEzMDg2MjBmMjI1MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-14T12:18:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-14T12:18:50Z"}, "message": "remove change bars\n\nFrom-SVN: r26452", "tree": {"sha": "2ba752211de50e194c3f7aea0ecaa515e821c147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba752211de50e194c3f7aea0ecaa515e821c147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05345711e622b7e3309533056b821308620f2250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05345711e622b7e3309533056b821308620f2250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05345711e622b7e3309533056b821308620f2250", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05345711e622b7e3309533056b821308620f2250/comments", "author": null, "committer": null, "parents": [{"sha": "fbf6f1bae6dcd6010aff66685662a15ea50d4a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf6f1bae6dcd6010aff66685662a15ea50d4a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf6f1bae6dcd6010aff66685662a15ea50d4a00"}], "stats": {"total": 156, "additions": 2, "deletions": 154}, "files": [{"sha": "eeb1465345505fdf0d21e881c22d732ff3c8ba1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 154, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05345711e622b7e3309533056b821308620f2250/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05345711e622b7e3309533056b821308620f2250/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05345711e622b7e3309533056b821308620f2250", "patch": "@@ -289,23 +289,12 @@ Wed Mar 31 11:30:43 1999  Nathan Sidwell  <nathan@acm.org>\n \t* parse.y (declmods, nonempty_cv_qualifiers): Use hash_tree_cons.\n \n Wed Mar 31 10:48:29 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n-<<<<<<< ChangeLog\n-\n-        * Makefile.in (hash.h): Generate using gperf language 'C', not\n-        'KR-C', so gperf uses the `const' keyword on strings.\n-\t \n-        * gxx.gperf (resword): Const-ify a char*.\n-=======\n \n \t* Makefile.in (hash.h): Generate using gperf language 'C', not\n \t'KR-C', so gperf uses the `const' keyword on strings.\n->>>>>>> 1.988\n \n-<<<<<<< ChangeLog\n-=======\n \t* gxx.gperf (resword): Const-ify a char*.\n \n->>>>>>> 1.988\n 1999-03-30  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cp-tree.h (IDENTIFIER_AS_DESC, IDENTIFIER_AS_LIST,\n@@ -7154,29 +7143,15 @@ Fri Mar  6 23:27:35 1998  Jeffrey A Law  (law@cygnus.com)\n \t* method.c: Fix typo.\n \n Fri Mar  6 10:06:59 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n-<<<<<<< ChangeLog\n-=======\n \n \t* method.c: Include \"system.h\" to get stdlib.h, stdio.h,\n \tctype.h, string.h, etc.\n \t(issue_nrepeats): Add default case in enumeration switch.\n \t(check_btype): Likewise.\n \t(process_overload_item): Likewise.\n->>>>>>> 1.988\n-\n-<<<<<<< ChangeLog\n-        * method.c: Include \"system.h\" to get stdlib.h, stdio.h,\n-        ctype.h, string.h, etc.\n-        (issue_nrepeats): Add default case in enumeration switch.\n-        (check_btype): Likewise.\n-        (process_overload_item): Likewise.\n-\t \n-        * Makefile.in (method.o): Depend on system.h.\n-\n-=======\n+\n \t* Makefile.in (method.o): Depend on system.h.\n \n->>>>>>> 1.988\n Wed Mar  4 22:26:53 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n \t* lex.c (do_scoped_id): Fix parenthesizing.\n@@ -9160,23 +9135,6 @@ Sat Sep 27 16:22:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \t(notype_qualified_id): Don't add template declarators here.\n \n Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n-<<<<<<< ChangeLog\n-\n-        * call.c (add_template_candidate): Add explicit_targs parameter.\n-        (build_scoped_method_call): Use it.\n-        (build_overload_call_real): Likewise.\n-        (build_user_type_conversion_1): Likewise.\n-        (build_new_function_call): Likewise.\n-        (build_object_call): Likewise.\n-        (build_new_op): Likewise.\n-        (build_new_method_call): Likewise.\n-        (build_new_function_call): Handle TEMPLATE_ID_EXPR.\n-        (build_new_method_call): Likewise.\n-\n-        * class.c (finish_struct_methods): Add specialization pass to\n-        determine which methods were specializing which other methods.\n-        (instantiate_type): Handle TEMPLATE_ID_EXPR.\n-=======\n \n \t* call.c (add_template_candidate): Add explicit_targs parameter.\n \t(build_scoped_method_call): Use it.\n@@ -9188,45 +9146,15 @@ Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n \t(build_new_method_call): Likewise.\n \t(build_new_function_call): Handle TEMPLATE_ID_EXPR.\n \t(build_new_method_call): Likewise.\n->>>>>>> 1.988\n \n-<<<<<<< ChangeLog\n-        * cp-tree.def (TEMPLATE_ID_EXPR): New tree code.\n-=======\n \t* class.c (finish_struct_methods): Add specialization pass to\n \tdetermine which methods were specializing which other methods.\n \t(instantiate_type): Handle TEMPLATE_ID_EXPR.\n->>>>>>> 1.988\n \n-<<<<<<< ChangeLog\n-        * cp-tree.h (name_mangling_version): New variable.\n-=======\n \t* cp-tree.def (TEMPLATE_ID_EXPR): New tree code.\n \n \t* cp-tree.h (name_mangling_version): New variable.\n->>>>>>> 1.988\n \t(flag_guiding_decls): Likewise.\n-<<<<<<< ChangeLog\n-        (build_template_decl_overload): New function.\n-        (begin_specialization): Likewise.\n-        (reset_specialization): Likewise.\n-        (end_specialization): Likewise.\n-        (determine_explicit_specialization): Likewise.\n-        (check_explicit_specialization): Likewise.\n-        (lookup_template_function): Likewise.\n-        (fn_type_unification): Add explicit_targs parameter.\n-        (type_unification): Likewise.\n-\n-        * decl.c (duplicate_decls): Add smarts for explicit\n-        specializations.\n-        (grokdeclarator): Handle TEMPLATE_ID_EXPR, and function\n-        specializations.\n-        (grokfndecl): Call check_explicit_specialization.\n-\n-        * decl2.c (lang_decode_option): Handle -fname-mangling-version.\n-        (build_expr_from_tree): Handle TEMPLATE_ID_EXPR.\n-        (check_classfn): Handle specializations.\n-=======\n \t(build_template_decl_overload): New function.\n \t(begin_specialization): Likewise.\n \t(reset_specialization): Likewise.\n@@ -9246,99 +9174,20 @@ Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n \t* decl2.c (lang_decode_option): Handle -fname-mangling-version.\n \t(build_expr_from_tree): Handle TEMPLATE_ID_EXPR.\n \t(check_classfn): Handle specializations.\n->>>>>>> 1.988\n \n-<<<<<<< ChangeLog\n-        * error.c (dump_function_name): Print specialization arguments.\n-=======\n \t* error.c (dump_function_name): Print specialization arguments.\n->>>>>>> 1.988\n \n-<<<<<<< ChangeLog\n-\t* friend.c (do_friend): Don't call pushdecl for template \n-        instantiations. \n-=======\n \t* friend.c (do_friend): Don't call pushdecl for template\n \tinstantiations.\n->>>>>>> 1.988\n-\n-<<<<<<< ChangeLog\n-        * init.c (build_member_call): Handle TEMPLATE_ID_EXPR.\n \n-        * lang-options.h: Add -fname-mangling-version, -fguiding-decls, \n-=======\n \t* init.c (build_member_call): Handle TEMPLATE_ID_EXPR.\n \n \t* lang-options.h: Add -fname-mangling-version, -fguiding-decls,\n->>>>>>> 1.988\n \tand -fno-guiding-decls.\n-<<<<<<< ChangeLog\n-\n-        * lex.c (identifier_type): Return PFUNCNAME for template function\n-        names.\n-=======\n \n \t* lex.c (identifier_type): Return PFUNCNAME for template function\n \tnames.\n->>>>>>> 1.988\n-\n-<<<<<<< ChangeLog\n-        * method.c (build_decl_overload_real): New function.\n-        (build_template_parm_names): New function.\n-        (build_overload_identifier): Use it.\n-        (build_underscore_int): New function.\n-        (build_overload_int): Use it.  Add levels for template\n-        parameters.\n-        (build_overload_name): Likewise.  Also, handle TYPENAME_TYPEs.\n-        (build_overload_nested_names): Handle template type parameters.\n-        (build_template_decl_overload): New function.\n-\n-        * parse.y (YYSTYPE): New ntype member.\n-        (nested_name_specifier): Use it.\n-        (nested_name_specifier_1): Likewise.\n-        (PFUNCNAME): New token.\n-        (template_id, object_template_id): New non-terminals.\n-        (template_parm_list): Note specializations.\n-        (template_def): Likewise.\n-        (structsp): Likewise.\n-        (fn.def2): Handle member template specializations.\n-        (component_decl_1): Likewise.\n-        (direct_notype_declarator): Handle template-ids.\n-        (component_decl_1): Likewise.\n-        (direct_notype_declarator): Handle template-ids.\n-        (primary): Handle TEMPLATE_ID_EXPR, and template-ids.\n-\n-        * pt.c (processing_specializations): New variable.\n-        (template_header_count): Likewise.\n-        (type_unification_real): New function.\n-        (processing_explicit_specialization): Likewise.\n-        (note_template_header): Likewise.\n-        (is_member_template): Handle specializations.\n-        (end_template_decl): Call reset_specialization.\n-        (push_template_decl): Handle member template specializations.\n-        (tsubst): Likewise.\n-        (tsubst_copy): Handle TEMPLATE_ID_EXPR.\n-        (instantiate_template): Handle specializations.\n-        (instantiate_decl): Likewise.\n-        (fn_type_unification): Handle explicit_targs.\n-        (type_unification): Likewise.  Allow incomplete unification\n-        without an error message, if allow_incomplete.\n-        (get_bindings): Use new calling sequence for fn_type_unification.\n-\n-        * spew.c (yylex): Handle PFUNCNAME.\n-\n-        * tree.c (is_overloaded_fn): Handle TEMPLATE_ID_EXPR.\n-        (really_overloaded_fn): Likewise.\n-        (get_first_fn): Handle function templates.\n-\n-        * typeck.c (build_x_function_call): Use really_overloaded_fn.\n-        Handle TEMPLATE_ID_EXPR.\n-        (build_x_unary_op): Likewise.\n-        (build_unary_op): Likewise.\n-        (mark_addressable): Templates whose address is taken are marked  \n-        as used. \n-\n-=======\n+\n \t* method.c (build_decl_overload_real): New function.\n \t(build_template_parm_names): New function.\n \t(build_overload_identifier): Use it.\n@@ -9394,7 +9243,6 @@ Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n \t(mark_addressable): Templates whose address is taken are marked\n \tas used.\n \n->>>>>>> 1.988\n 1997-09-25  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n \t* decl.c (init_decl_processing): Declare __builtin_constant_p as"}]}