{"sha": "7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "node_id": "C_kwDOANBUbNoAKDdjMDFkMDI5ZmNhNjY5MjYzYjljMmRjYjg4MzdjNDJmN2FlM2E3N2Y", "commit": {"author": {"name": "Iskander Shakirzyanov", "email": "iskander@ispras.ru", "date": "2022-11-24T14:26:59Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2022-11-30T13:30:48Z"}, "message": "Make Warray-bounds alias to Warray-bounds= [PR107787]\n\nAccording to the documentation, the -Werror= option makes the specified\nwarning into an error and also automatically implies that option. Then\nit seems that the behavior of the compiler when specifying\n-Werror=array-bounds=X should be the same as specifying\n\"-Werror=array-bounds -Warray-bounds=X\", so we expect to receive\narray-bounds pass diagnostics and they must be processed as errors.\n\nIn practice, we observe that the array-bounds pass is indeed invoked,\nbut its diagnostics are processed as warnings, not errors.\n\nThis happens because Warray-bounds and Warray-bounds= are\ndeclared as two different options in common.opt, so when\ndiagnostic_classify_diagnostic is called, DK_ERROR is set for\nthe Warray-bounds= option, but diagnostic_report_diagnostic called from\nwarning_at receives opt_index of Warray-bounds, so information about\nDK_ERROR is lost. Fix this by using Alias in declaration of\nWarray-bounds (similar to Wattribute-alias).\n\nCo-authored-by: Franz Sirl <Franz.Sirl-kernel@lauterbach.com>\n\ngcc/ChangeLog:\n\n\tPR driver/107787\n\t* common.opt (Warray-bounds): Turn into alias of\n\t-Warray-bounds=1.\n\t* builtins.cc (c_strlen): Use OPT_Warray_bounds_\n\tinstead of OPT_Warray_bounds.\n\t* diagnostic-spec.cc (nowarn_spec_t::nowarn_spec_t): Ditto.\n\t* gimple-array-bounds.cc (array_bounds_checker::check_array_ref,\n\tarray_bounds_checker::check_mem_ref,\n\tarray_bounds_checker::check_addr_expr,\n\tarray_bounds_checker::check_array_bounds): Ditto.\n\t* gimple-ssa-warn-restrict.cc (maybe_diag_access_bounds): Ditto.\n\ngcc/c-family/ChangeLog:\n\n\tPR driver/107787\n\t* c-common.cc (fold_offsetof,\n\tconvert_vector_to_array_for_subscript): Use OPT_Warray_bounds_\n\tinstead of OPT_Warray_bounds.\n\ngcc/testsuite/ChangeLog:\n\n\tPR driver/107787\n\t* gcc.dg/Warray-bounds-34.c: Correct the regular expression\n\tfor -Warray-bounds=.\n\t* gcc.dg/Warray-bounds-43.c: Likewise.\n\t* gcc.dg/pr107787.c: New test.", "tree": {"sha": "7990b3eae36ff8a67c01bc63050152b59ae671e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7990b3eae36ff8a67c01bc63050152b59ae671e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/comments", "author": {"login": "AlbatraozRUS", "id": 55453060, "node_id": "MDQ6VXNlcjU1NDUzMDYw", "avatar_url": "https://avatars.githubusercontent.com/u/55453060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlbatraozRUS", "html_url": "https://github.com/AlbatraozRUS", "followers_url": "https://api.github.com/users/AlbatraozRUS/followers", "following_url": "https://api.github.com/users/AlbatraozRUS/following{/other_user}", "gists_url": "https://api.github.com/users/AlbatraozRUS/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlbatraozRUS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlbatraozRUS/subscriptions", "organizations_url": "https://api.github.com/users/AlbatraozRUS/orgs", "repos_url": "https://api.github.com/users/AlbatraozRUS/repos", "events_url": "https://api.github.com/users/AlbatraozRUS/events{/privacy}", "received_events_url": "https://api.github.com/users/AlbatraozRUS/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fa25a7eb322f0a003c1eb15680c71ece345e01e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa25a7eb322f0a003c1eb15680c71ece345e01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa25a7eb322f0a003c1eb15680c71ece345e01e"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "02c4fefa86f486fc977f5be993e436f1cda72c49", "filename": "gcc/builtins.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -696,14 +696,14 @@ c_strlen (tree arg, int only_value, c_strlen_data *data, unsigned eltsize)\n     {\n       /* Suppress multiple warnings for propagated constant strings.  */\n       if (only_value != 2\n-\t  && !warning_suppressed_p (arg, OPT_Warray_bounds)\n-\t  && warning_at (loc, OPT_Warray_bounds,\n+\t  && !warning_suppressed_p (arg, OPT_Warray_bounds_)\n+\t  && warning_at (loc, OPT_Warray_bounds_,\n \t\t\t \"offset %qwi outside bounds of constant string\",\n \t\t\t eltoff))\n \t{\n \t  if (decl)\n \t    inform (DECL_SOURCE_LOCATION (decl), \"%qE declared here\", decl);\n-\t  suppress_warning (arg, OPT_Warray_bounds);\n+\t  suppress_warning (arg, OPT_Warray_bounds_);\n \t}\n       return NULL_TREE;\n     }"}, {"sha": "f08c89142e502d7cdfdfe4037011a10e4960bf8b", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -6811,7 +6811,7 @@ fold_offsetof (tree expr, tree type, enum tree_code ctx)\n \t\t     definition thereof.  */\n \t\t  if (TREE_CODE (v) == ARRAY_REF\n \t\t      || TREE_CODE (v) == COMPONENT_REF)\n-\t\t    warning (OPT_Warray_bounds,\n+\t\t    warning (OPT_Warray_bounds_,\n \t\t\t     \"index %E denotes an offset \"\n \t\t\t     \"greater than size of %qT\",\n \t\t\t     t, TREE_TYPE (TREE_OPERAND (expr, 0)));\n@@ -8534,7 +8534,7 @@ convert_vector_to_array_for_subscript (location_t loc,\n       if (TREE_CODE (index) == INTEGER_CST)\n         if (!tree_fits_uhwi_p (index)\n \t    || maybe_ge (tree_to_uhwi (index), TYPE_VECTOR_SUBPARTS (type)))\n-          warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");\n+\t  warning_at (loc, OPT_Warray_bounds_, \"index value is out of bound\");\n \n       /* We are building an ARRAY_REF so mark the vector as addressable\n          to not run into the gimplifiers premature setting of DECL_GIMPLE_REG_P"}, {"sha": "562d73d7f552a13d30c1ce360d058edf72fda7c3", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -539,8 +539,7 @@ Common Var(warn_aggressive_loop_optimizations) Init(1) Warning\n Warn if a loop with constant number of iterations triggers undefined behavior.\n \n Warray-bounds\n-Common Var(warn_array_bounds) Warning\n-Warn if an array is accessed out of bounds.\n+Common Alias(Warray-bounds=, 1, 0) Warning\n \n Warray-bounds=\n Common Joined RejectNegative UInteger Var(warn_array_bounds) Warning IntegerRange(0, 2)"}, {"sha": "7a03fc493e6b60cf7825bc1ca6b1085141fd303d", "filename": "gcc/diagnostic-spec.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fdiagnostic-spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fdiagnostic-spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.cc?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -79,7 +79,6 @@ nowarn_spec_t::nowarn_spec_t (opt_code opt)\n       break;\n \n       /* Access warning group.  */\n-    case OPT_Warray_bounds:\n     case OPT_Warray_bounds_:\n     case OPT_Wformat_overflow_:\n     case OPT_Wformat_truncation_:"}, {"sha": "972e25fdb3154ca25e319346c1475a14d9732e41", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -172,7 +172,7 @@ bool\n array_bounds_checker::check_array_ref (location_t location, tree ref,\n \t\t\t\t       gimple *stmt, bool ignore_off_by_one)\n {\n-  if (warning_suppressed_p (ref, OPT_Warray_bounds))\n+  if (warning_suppressed_p (ref, OPT_Warray_bounds_))\n     /* Return true to have the caller prevent warnings for enclosing\n        refs.  */\n     return true;\n@@ -277,7 +277,7 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n \n   /* Empty array.  */\n   if (up_bound && tree_int_cst_equal (low_bound, up_bound_p1))\n-    warned = warning_at (location, OPT_Warray_bounds,\n+    warned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t \"array subscript %E is outside array bounds of %qT\",\n \t\t\t low_sub, artype);\n \n@@ -303,7 +303,7 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n \t      : tree_int_cst_le (up_bound, up_sub))\n \t  && TREE_CODE (low_sub) == INTEGER_CST\n \t  && tree_int_cst_le (low_sub, low_bound))\n-\twarned = warning_at (location, OPT_Warray_bounds,\n+\twarned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t     \"array subscript [%E, %E] is outside \"\n \t\t\t     \"array bounds of %qT\",\n \t\t\t     low_sub, up_sub, artype);\n@@ -313,12 +313,12 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n \t   && (ignore_off_by_one\n \t       ? !tree_int_cst_le (up_sub, up_bound_p1)\n \t       : !tree_int_cst_le (up_sub, up_bound)))\n-    warned = warning_at (location, OPT_Warray_bounds,\n+    warned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t \"array subscript %E is above array bounds of %qT\",\n \t\t\t up_sub, artype);\n   else if (TREE_CODE (low_sub) == INTEGER_CST\n \t   && tree_int_cst_lt (low_sub, low_bound))\n-    warned = warning_at (location, OPT_Warray_bounds,\n+    warned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t \"array subscript %E is below array bounds of %qT\",\n \t\t\t low_sub, artype);\n \n@@ -343,7 +343,7 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n       /* Avoid more warnings when checking more significant subscripts\n \t of the same expression.  */\n       ref = TREE_OPERAND (ref, 0);\n-      suppress_warning (ref, OPT_Warray_bounds);\n+      suppress_warning (ref, OPT_Warray_bounds_);\n \n       if (decl)\n \tref = decl;\n@@ -383,7 +383,7 @@ bool\n array_bounds_checker::check_mem_ref (location_t location, tree ref,\n \t\t\t\t     bool ignore_off_by_one)\n {\n-  if (warning_suppressed_p (ref, OPT_Warray_bounds))\n+  if (warning_suppressed_p (ref, OPT_Warray_bounds_))\n     return false;\n \n   /* The statement used to allocate the array or null.  */\n@@ -483,12 +483,12 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n   if (lboob)\n     {\n       if (offrange[0] == offrange[1])\n-\twarned = warning_at (location, OPT_Warray_bounds,\n+\twarned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t     \"array subscript %wi is outside array bounds \"\n \t\t\t     \"of %qT\",\n \t\t\t     offrange[0].to_shwi (), reftype);\n       else\n-\twarned = warning_at (location, OPT_Warray_bounds,\n+\twarned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t     \"array subscript [%wi, %wi] is outside \"\n \t\t\t     \"array bounds of %qT\",\n \t\t\t     offrange[0].to_shwi (),\n@@ -503,7 +503,7 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n \tbacktype = build_array_type_nelts (unsigned_char_type_node,\n \t\t\t\t\t   aref.sizrng[1].to_uhwi ());\n \n-      warned = warning_at (location, OPT_Warray_bounds,\n+      warned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t   \"array subscript %<%T[%wi]%> is partly \"\n \t\t\t   \"outside array bounds of %qT\",\n \t\t\t   axstype, offrange[0].to_shwi (), backtype);\n@@ -513,7 +513,7 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n     {\n       /* TODO: Determine the access from the statement and use it.  */\n       aref.inform_access (access_none);\n-      suppress_warning (ref, OPT_Warray_bounds);\n+      suppress_warning (ref, OPT_Warray_bounds_);\n       return true;\n     }\n \n@@ -526,11 +526,11 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n     {\n       HOST_WIDE_INT tmpidx = (aref.offmax[i] / eltsize).to_shwi ();\n \n-      if (warning_at (location, OPT_Warray_bounds,\n+      if (warning_at (location, OPT_Warray_bounds_,\n \t\t      \"intermediate array offset %wi is outside array bounds \"\n \t\t      \"of %qT\", tmpidx, reftype))\n \t{\n-\t  suppress_warning (ref, OPT_Warray_bounds);\n+\t  suppress_warning (ref, OPT_Warray_bounds_);\n \t  return true;\n \t}\n     }\n@@ -562,15 +562,15 @@ array_bounds_checker::check_addr_expr (location_t location, tree t,\n \twarned = check_mem_ref (location, t, ignore_off_by_one);\n \n       if (warned)\n-\tsuppress_warning (t, OPT_Warray_bounds);\n+\tsuppress_warning (t, OPT_Warray_bounds_);\n \n       t = TREE_OPERAND (t, 0);\n     }\n   while (handled_component_p (t) || TREE_CODE (t) == MEM_REF);\n \n   if (TREE_CODE (t) != MEM_REF\n       || TREE_CODE (TREE_OPERAND (t, 0)) != ADDR_EXPR\n-      || warning_suppressed_p (t, OPT_Warray_bounds))\n+      || warning_suppressed_p (t, OPT_Warray_bounds_))\n     return;\n \n   tree tem = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n@@ -605,7 +605,7 @@ array_bounds_checker::check_addr_expr (location_t location, tree t,\n \t  dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n-      warned = warning_at (location, OPT_Warray_bounds,\n+      warned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t   \"array subscript %wi is below \"\n \t\t\t   \"array bounds of %qT\",\n \t\t\t   idx.to_shwi (), TREE_TYPE (tem));\n@@ -619,7 +619,7 @@ array_bounds_checker::check_addr_expr (location_t location, tree t,\n \t  dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n-      warned = warning_at (location, OPT_Warray_bounds,\n+      warned = warning_at (location, OPT_Warray_bounds_,\n \t\t\t   \"array subscript %wu is above \"\n \t\t\t   \"array bounds of %qT\",\n \t\t\t   idx.to_uhwi (), TREE_TYPE (tem));\n@@ -630,7 +630,7 @@ array_bounds_checker::check_addr_expr (location_t location, tree t,\n       if (DECL_P (t))\n \tinform (DECL_SOURCE_LOCATION (t), \"while referencing %qD\", t);\n \n-      suppress_warning (t, OPT_Warray_bounds);\n+      suppress_warning (t, OPT_Warray_bounds_);\n     }\n }\n \n@@ -730,7 +730,7 @@ array_bounds_checker::check_array_bounds (tree *tp, int *walk_subtree,\n   /* Propagate the no-warning bit to the outer statement to avoid also\n      issuing -Wstringop-overflow/-overread for the out-of-bounds accesses.  */\n   if (warned)\n-    suppress_warning (wi->stmt, OPT_Warray_bounds);\n+    suppress_warning (wi->stmt, OPT_Warray_bounds_);\n \n   return NULL_TREE;\n }"}, {"sha": "107ba278798d26ffddff9265b67d5442b5a2707c", "filename": "gcc/gimple-ssa-warn-restrict.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fgimple-ssa-warn-restrict.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Fgimple-ssa-warn-restrict.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.cc?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -1734,7 +1734,7 @@ maybe_diag_access_bounds (gimple *call, tree func, int strict,\n   if (!oobref)\n     return no_warning;\n \n-  const opt_code opt = OPT_Warray_bounds;\n+  const opt_code opt = OPT_Warray_bounds_;\n   /* Return true without issuing a warning.  */\n   if (!do_warn)\n     return opt;"}, {"sha": "1b2a098ad86c082671cd68e468917cba1507b415", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-34.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-34.c?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -7,7 +7,7 @@ int x;\n \n inline void foo (int i)\n {\n-  a[i + 1] = 123;   /* { dg-warning \"\\\\\\[-Warray-bounds]\" } */\n+  a[i + 1] = 123;   /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n }\n \n int bar (void)"}, {"sha": "43a83315787c7f219354ad59bca4fc247cc2d4bb", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-43.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-43.c?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -19,7 +19,7 @@ NOIPA int g2 (int i)\n \n   sink (p0, p1, p2);\n \n-  return p2[8];     // { dg-warning \"\\\\\\[-Warray-bounds]\" }\n+  return p2[8];     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n }\n \n NOIPA int g3 (int i)\n@@ -33,7 +33,7 @@ NOIPA int g3 (int i)\n \n   sink (p0, p1, p2, p3);\n \n-  return p3[7];     // { dg-warning \"\\\\\\[-Warray-bounds]\" }\n+  return p3[7];     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n }\n \n NOIPA int g4 (int i)\n@@ -48,7 +48,7 @@ NOIPA int g4 (int i)\n \n   sink (p0, p1, p2, p3, p4);\n \n-  return p4[6];     // { dg-warning \"\\\\\\[-Warray-bounds]\" }\n+  return p4[6];     // { dg-warning \"\\\\\\[-Warray-bounds\" }\n }\n \n NOIPA int g5 (int i)"}, {"sha": "922dbff8b2aac36cb26027b0e12a3dd6e55a53cd", "filename": "gcc/testsuite/gcc.dg/pr107787.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107787.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c01d029fca669263b9c2dcb8837c42f7ae3a77f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107787.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107787.c?ref=7c01d029fca669263b9c2dcb8837c42f7ae3a77f", "patch": "@@ -0,0 +1,13 @@\n+/* PR driver/107787 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Werror=array-bounds=1\" } */\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+\n+int a[10];     /* { dg-note \"while referencing\" } */\n+\n+int* f(void) {\n+\n+    a[-1] = 0; /* { dg-error \"is below array bounds\" } */\n+\n+    return a;\n+}"}]}