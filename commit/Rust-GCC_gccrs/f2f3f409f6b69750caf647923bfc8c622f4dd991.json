{"sha": "f2f3f409f6b69750caf647923bfc8c622f4dd991", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmM2Y0MDlmNmI2OTc1MGNhZjY0NzkyM2JmYzhjNjIyZjRkZDk5MQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2003-08-20T17:27:56Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-08-20T17:27:56Z"}, "message": "[multiple changes]\n\n2003-01-31  Andrew Haley  <aph@redhat.com>\n\n\t* except.c (prepare_eh_table_type): Use new encoding for exception\n\thandlers when using -fno-assume-compiled.\n\n2003-08-20  Andrew Haley  <aph@redhat.com>\n\n\t* gnu/gcj/runtime/StackTrace.java (getClass): New method.\n\t* gnu/gcj/runtime/natStackTrace.cc (getClass): New method.\n\t(classAt): Break out class lookup function into getClass().\n\t* exception.cc (PERSONALITY_FUNCTION): Use new encoding for exception\n\thandlers when using -fno-assume-compiled.\n\nFrom-SVN: r70605", "tree": {"sha": "8cc9800fc859447329cd4c9ba42a32a51f71de0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cc9800fc859447329cd4c9ba42a32a51f71de0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2f3f409f6b69750caf647923bfc8c622f4dd991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f3f409f6b69750caf647923bfc8c622f4dd991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f3f409f6b69750caf647923bfc8c622f4dd991", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f3f409f6b69750caf647923bfc8c622f4dd991/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e6d83ec9c6d81c8b060ca7ec9307825d4e76360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6d83ec9c6d81c8b060ca7ec9307825d4e76360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6d83ec9c6d81c8b060ca7ec9307825d4e76360"}], "stats": {"total": 84, "additions": 69, "deletions": 15}, "files": [{"sha": "6aeff65ea259461684177c6708c075a503dbef16", "filename": "gcc/java/except.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f3f409f6b69750caf647923bfc8c622f4dd991/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f3f409f6b69750caf647923bfc8c622f4dd991/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=f2f3f409f6b69750caf647923bfc8c622f4dd991", "patch": "@@ -324,10 +324,36 @@ prepare_eh_table_type (tree type)\n   else if (is_compiled_class (type))\n     exp = build_class_ref (type);\n   else\n-    exp = fold (build \n-\t\t(PLUS_EXPR, ptr_type_node,\n-\t\t build_utf8_ref (DECL_NAME (TYPE_NAME (type))),\n-\t\t size_one_node));\n+    {\n+      tree ctype = make_node (RECORD_TYPE);\n+      tree field = NULL_TREE;\n+      tree cinit, decl;\n+      tree utf8_ref = build_utf8_ref (DECL_NAME (TYPE_NAME (type)));\n+      char buf[64];\n+      sprintf (buf, \"%s_ref\", \n+\t       IDENTIFIER_POINTER (DECL_NAME (TREE_OPERAND (utf8_ref, 0))));\n+      PUSH_FIELD (ctype, field, \"dummy\", ptr_type_node);\n+      PUSH_FIELD (ctype, field, \"utf8\",  utf8const_ptr_type);\n+      FINISH_RECORD (ctype);\n+      START_RECORD_CONSTRUCTOR (cinit, ctype);\n+      PUSH_FIELD_VALUE (cinit, \"dummy\", \n+\t\t\tconvert (ptr_type_node, integer_minus_one_node));\n+      PUSH_FIELD_VALUE (cinit, \"utf8\", utf8_ref);\n+      FINISH_RECORD_CONSTRUCTOR (cinit);\n+      TREE_CONSTANT (cinit) = 1;\n+      decl = build_decl (VAR_DECL, get_identifier (buf), ctype);\n+      TREE_STATIC (decl) = 1;\n+      DECL_ARTIFICIAL (decl) = 1;\n+      DECL_IGNORED_P (decl) = 1;\n+      TREE_READONLY (decl) = 1;\n+      TREE_THIS_VOLATILE (decl) = 0;\n+      DECL_INITIAL (decl) = cinit;\n+      layout_decl (decl, 0);\n+      pushdecl (decl);\n+      rest_of_decl_compilation (decl, (char*) 0, global_bindings_p (), 0);\n+      make_decl_rtl (decl, (char*) 0);\n+      exp = build1 (ADDR_EXPR, build_pointer_type (ctype), decl);\n+    }\n   return exp;\n }\n "}, {"sha": "892e2c148ca429d979c547dcfd99173a2845b5da", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f3f409f6b69750caf647923bfc8c622f4dd991/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f3f409f6b69750caf647923bfc8c622f4dd991/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f2f3f409f6b69750caf647923bfc8c622f4dd991", "patch": "@@ -1,3 +1,11 @@\n+2003-08-20  Andrew Haley  <aph@redhat.com>\n+\n+\t* gnu/gcj/runtime/StackTrace.java (getClass): New method.\n+\t* gnu/gcj/runtime/natStackTrace.cc (getClass): New method.\n+\t(classAt): Break out class lookup function into getClass().\n+\t* exception.cc (PERSONALITY_FUNCTION): Use new encoding for exception\n+\thandlers when using -fno-assume-compiled.\n+\n 2003-08-20  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR libgcj/9125:"}, {"sha": "9647d446d18ecdf24ae0ad3c7c926635c3cfdbf8", "filename": "libjava/exception.cc", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f3f409f6b69750caf647923bfc8c622f4dd991/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f3f409f6b69750caf647923bfc8c622f4dd991/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=f2f3f409f6b69750caf647923bfc8c622f4dd991", "patch": "@@ -15,6 +15,9 @@ details.  */\n \n #include <java/lang/Class.h>\n #include <java/lang/NullPointerException.h>\n+#include <gnu/gcj/runtime/StackTrace.h> \n+#include <gnu/gcj/runtime/MethodRef.h> \n+#include <gnu/gcj/RawData.h> \n #include <gcj/cni.h>\n #include <jvm.h>\n \n@@ -335,11 +338,21 @@ PERSONALITY_FUNCTION (int version,\n \n \t      jclass catch_type = get_ttype_entry (context, &info, ar_filter);\n \n-\t      // The catch_type is either a (java::lang::Class*) or\n-\t      // is one more than a (Utf8Const*).\n-\t      if ((size_t)catch_type & 1)\n-\t\tcatch_type = _Jv_FindClass ((Utf8Const*)((size_t)catch_type ^ 1), NULL);\n-\n+\t      typedef struct {\n+\t\tint __attribute__ ((mode (pointer))) dummy; \n+\t\tUtf8Const *utf8;\n+\t      } utf8_hdr;\n+\t      utf8_hdr *p = (utf8_hdr *)catch_type;\n+\t      if (p->dummy == -1)\n+\t\t{\n+\t\t  using namespace gnu::gcj::runtime;\n+\t\t  java::lang::Class *klass \n+\t\t    = StackTrace::getClass ((gnu::gcj::RawData *)ip);\n+\t\t  java::lang::ClassLoader *loader \n+\t\t    = klass ? klass->getClassLoaderInternal () : NULL;\n+\t\t  catch_type = _Jv_FindClass (p->utf8, loader);\n+\t\t}\n+\t      \n \t      if (_Jv_IsInstanceOf (xh->value, catch_type))\n \t\t{\n \t\t  handler_switch_value = ar_filter;"}, {"sha": "684ee4fd9974d1f861c6ec9b3bcfe9e1bfc12a35", "filename": "libjava/gnu/gcj/runtime/StackTrace.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f3f409f6b69750caf647923bfc8c622f4dd991/libjava%2Fgnu%2Fgcj%2Fruntime%2FStackTrace.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f3f409f6b69750caf647923bfc8c622f4dd991/libjava%2Fgnu%2Fgcj%2Fruntime%2FStackTrace.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FStackTrace.java?ref=f2f3f409f6b69750caf647923bfc8c622f4dd991", "patch": "@@ -139,6 +139,8 @@ public int length ()\n     return len;\n   }\n \n+  public static native Class getClass(RawData ip);\n+\n   private static native void update();\n   private static MethodRef methodAtAddress(RawData addr)\n   {"}, {"sha": "af8889beb5262f6556c082d1aeea31591dc14d98", "filename": "libjava/gnu/gcj/runtime/natStackTrace.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f3f409f6b69750caf647923bfc8c622f4dd991/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatStackTrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f3f409f6b69750caf647923bfc8c622f4dd991/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatStackTrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatStackTrace.cc?ref=f2f3f409f6b69750caf647923bfc8c622f4dd991", "patch": "@@ -123,6 +123,16 @@ gnu::gcj::runtime::StackTrace::getCompiledMethodRef (gnu::gcj::RawData *addr)\n     ::methodAtAddress ((gnu::gcj::RawData *)p);\n }\n \n+java::lang::Class *\n+gnu::gcj::runtime::StackTrace::getClass (gnu::gcj::RawData *p)\n+{\n+  gnu::gcj::runtime::MethodRef *ref = getCompiledMethodRef (p);\n+  if (ref)\n+    return ref->klass;\n+  else\n+    return NULL;\n+}\n+\n java::lang::Class *\n gnu::gcj::runtime::StackTrace::classAt (jint n)\n {\n@@ -137,12 +147,7 @@ gnu::gcj::runtime::StackTrace::classAt (jint n)\n     }\n #endif // INTERPRETER\n   \n-  gnu::gcj::runtime::MethodRef *ref \n-    = getCompiledMethodRef ((gnu::gcj::RawData *)frame->addr);\n-  if (ref)\n-    return ref->klass;\n-  else\n-    return NULL;\n+  return getClass ((gnu::gcj::RawData *)frame->addr);\n }\n \n java::lang::String*"}]}