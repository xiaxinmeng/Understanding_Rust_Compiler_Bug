{"sha": "ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwZjhmZDFlZThhMTQzOTc2YzUzMmEzOGM2ZDcwYzgzNjhjODExZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-21T16:55:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-21T16:55:17Z"}, "message": "[multiple changes]\n\n2008-06-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_move.h: Rename to move.h.\n\t* include/std/utility: Adjust.\n\t* include/ext/vstring_util.h: Likewise.\n\t* include/ext/throw_allocator.h: Likewise.\n\t* include/ext/pool_allocator.h: Likewise.\n\t* include/ext/bitmap_allocator.h: Likewise.\n\t* include/ext/new_allocator.h: Likewise.\n\t* include/ext/malloc_allocator.h: Likewise.\n\t* include/ext/array_allocator.h: Likewise.\n\t* include/ext/mt_allocator.h: Likewise.\n\t* include/bits/stl_algobase.h: Likewise.\n\t* include/bits/stl_heap.h: Likewise.\n\t* include/bits/stl_pair.h: Likewise.\n\t* include/bits/stl_iterator.h: Likewise.\n\t* testsuite/util/testsuite_allocator.h: Likewise.\n\t* testsuite/util/testsuite_iterators.h: Likewise.\n\t* include/Makefile.am: Likewise.\n\t* include/Makefile.in: Regenerate.\n\n2008-06-21  Chris Fairles  <chris.fairles@gmail.com>\n\n\t* include/bits/unique_ptr.h: New.\n\t* include/std/memory: Adjust.\n\t* include/Makefile.am: Add.\n\t* testsuite/20_util/unique_ptr/requirements/explicit_instantiation/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/unique_ptr/assign/assign.cc: Likewise.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r137003", "tree": {"sha": "bf5b8d8f97f3f38e9274be7a4d7d4a0aaef894d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5b8d8f97f3f38e9274be7a4d7d4a0aaef894d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/comments", "author": null, "committer": null, "parents": [{"sha": "c764e1bde25f261ede6ec23a4b3868d336b460ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c764e1bde25f261ede6ec23a4b3868d336b460ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c764e1bde25f261ede6ec23a4b3868d336b460ad"}], "stats": {"total": 617, "additions": 588, "deletions": 29}, "files": [{"sha": "dc39a518cfb687c0cb30e2cf619d023ad468c7b2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,3 +1,34 @@\n+2008-06-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_move.h: Rename to move.h.\n+\t* include/std/utility: Adjust.\n+\t* include/ext/vstring_util.h: Likewise.\n+\t* include/ext/throw_allocator.h: Likewise.\n+\t* include/ext/pool_allocator.h: Likewise.\n+\t* include/ext/bitmap_allocator.h: Likewise.\n+\t* include/ext/new_allocator.h: Likewise.\n+\t* include/ext/malloc_allocator.h: Likewise.\n+\t* include/ext/array_allocator.h: Likewise.\n+\t* include/ext/mt_allocator.h: Likewise.\n+\t* include/bits/stl_algobase.h: Likewise.\n+\t* include/bits/stl_heap.h: Likewise.\n+\t* include/bits/stl_pair.h: Likewise.\n+\t* include/bits/stl_iterator.h: Likewise.\n+\t* testsuite/util/testsuite_allocator.h: Likewise.\n+\t* testsuite/util/testsuite_iterators.h: Likewise.\n+\t* include/Makefile.am: Likewise.\n+\t* include/Makefile.in: Regenerate.\n+\n+2008-06-21  Chris Fairles  <chris.fairles@gmail.com>\n+\n+\t* include/bits/unique_ptr.h: New.\n+\t* include/std/memory: Adjust.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/20_util/unique_ptr/requirements/explicit_instantiation/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/unique_ptr/assign/assign.cc: Likewise.\n+\t* include/Makefile.in: Regenerate.\n+\n 2008-06-21  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/c_global/climits, include/tr1/climits: Add parentheses."}, {"sha": "8ef1fce0426aaad97d9cd2944a542a84f22b9ea0", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -104,6 +104,7 @@ bits_headers = \\\n \t${bits_srcdir}/locale_facets_nonio.tcc \\\n \t${bits_srcdir}/localefwd.h \\\n \t${bits_srcdir}/mask_array.h \\\n+\t${bits_srcdir}/move.h \\\n \t${bits_srcdir}/ostream.tcc \\\n \t${bits_srcdir}/ostream_insert.h \\\n \t${bits_srcdir}/postypes.h \\\n@@ -123,7 +124,6 @@ bits_headers = \\\n \t${bits_srcdir}/stl_iterator_base_types.h \\\n \t${bits_srcdir}/stl_list.h \\\n \t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_move.h \\\n \t${bits_srcdir}/stl_multimap.h \\\n \t${bits_srcdir}/stl_multiset.h \\\n \t${bits_srcdir}/stl_numeric.h \\\n@@ -139,6 +139,7 @@ bits_headers = \\\n \t${bits_srcdir}/stl_vector.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/unique_ptr.h \\\n \t${bits_srcdir}/valarray_array.h \\\n \t${bits_srcdir}/valarray_array.tcc \\\n \t${bits_srcdir}/valarray_before.h \\"}, {"sha": "f96020f9f26a09e7f36545deded5f1b31ae53923", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -357,6 +357,7 @@ bits_headers = \\\n \t${bits_srcdir}/locale_facets_nonio.tcc \\\n \t${bits_srcdir}/localefwd.h \\\n \t${bits_srcdir}/mask_array.h \\\n+\t${bits_srcdir}/move.h \\\n \t${bits_srcdir}/ostream.tcc \\\n \t${bits_srcdir}/ostream_insert.h \\\n \t${bits_srcdir}/postypes.h \\\n@@ -376,7 +377,6 @@ bits_headers = \\\n \t${bits_srcdir}/stl_iterator_base_types.h \\\n \t${bits_srcdir}/stl_list.h \\\n \t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_move.h \\\n \t${bits_srcdir}/stl_multimap.h \\\n \t${bits_srcdir}/stl_multiset.h \\\n \t${bits_srcdir}/stl_numeric.h \\\n@@ -392,6 +392,7 @@ bits_headers = \\\n \t${bits_srcdir}/stl_vector.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/unique_ptr.h \\\n \t${bits_srcdir}/valarray_array.h \\\n \t${bits_srcdir}/valarray_array.tcc \\\n \t${bits_srcdir}/valarray_before.h \\"}, {"sha": "4378ce8745170b977a47e8ced743def929a87b7a", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -74,7 +74,7 @@\n #include <bits/stl_iterator.h>\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n-#include <bits/stl_move.h> // For std::swap and _GLIBCXX_MOVE\n+#include <bits/move.h> // For std::swap and _GLIBCXX_MOVE\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "6b0840c4bda596887bfd34159e2bdd20ee607a67", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -62,7 +62,7 @@\n #define _STL_HEAP_H 1\n \n #include <debug/debug.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "0d66129fb801b262b2c54e784af15ae8f51b464f", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -68,7 +68,7 @@\n \n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "5ac85e25fa3d78ae1d3fc9358b102606ec195d83", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,6 @@\n // Pair implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -62,8 +62,8 @@\n #ifndef _STL_PAIR_H\n #define _STL_PAIR_H 1\n \n-#include <bits/stl_move.h> // for std::move / std::forward, std::decay, and\n-                           // std::swap\n+#include <bits/move.h> // for std::move / std::forward, std::decay, and\n+                       // std::swap\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "f2c13b5800a2dcb2378e840a83b03f02775492be", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "added", "additions": 447, "deletions": 0, "changes": 447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -0,0 +1,447 @@\n+// unique_ptr implementation -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file unique_ptr.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _UNIQUE_PTR_H\n+#define _UNIQUE_PTR_H 1\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#endif\n+\n+#include <bits/c++config.h>\n+#include <debug/debug.h>\n+#include <type_traits>\n+#include <utility>\n+#include <tuple>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  template<typename _Tp> \n+    struct default_delete\n+      {\n+\tdefault_delete() { }\n+\n+\ttemplate<typename _Up>\n+\t  default_delete(const default_delete<_Up>&) { }\n+\n+\tvoid\n+\toperator()(_Tp* __ptr) const\n+\t{\n+\t  static_assert(sizeof(_Tp)>0,\n+\t\t\t\"can't delete pointer to incomplete type\");\n+\t  delete __ptr;\n+\t}\n+    };\n+\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 740 - omit specialization for array objects with a compile time length\n+  template<typename _Tp> \n+    struct default_delete<_Tp[]>\n+    {\n+      void\n+      operator()(_Tp* __ptr) const\n+      {\n+\tstatic_assert(sizeof(_Tp)>0,\n+\t\t      \"can't delete pointer to incomplete type\");\n+\tdelete [] __ptr;\n+      }\n+    };\n+\n+  template <typename _Tp, typename _Tp_Deleter = default_delete<_Tp> > \n+    class unique_ptr\n+    {\n+      typedef _Tp* pointer;\n+      typedef unique_ptr<_Tp, _Tp_Deleter> __this_type;\n+      typedef std::tuple<pointer, _Tp_Deleter> __tuple_type;\n+      typedef __tuple_type __this_type::* __unspecified_bool_type;\n+      typedef pointer __this_type::* __unspecified_pointer_type;\n+\n+    public:\n+      typedef _Tp         element_type;      \n+      typedef _Tp_Deleter deleter_type;\n+\n+      // constructors\n+      unique_ptr()\n+      : _M_t(pointer(), deleter_type())\n+      { static_assert(!std::is_pointer<deleter_type>::value,\n+\t\t      \"constructed with null function pointer deleter\"); }\n+\n+      explicit\n+      unique_ptr(pointer __p)\n+      : _M_t(__p, deleter_type())\n+      { static_assert(!std::is_pointer<deleter_type>::value,\n+\t\t     \"constructed with null function pointer deleter\"); }\n+\n+      unique_ptr(pointer __p,\n+          typename std::conditional<std::is_reference<deleter_type>::value, \n+            deleter_type, const deleter_type&>::type __d)\n+      : _M_t(__p, __d) { }\n+\n+      unique_ptr(pointer __p,\n+          typename std::remove_reference<deleter_type>::type&& __d)\n+      : _M_t(std::move(__p), std::move(__d))\n+      { static_assert(!std::is_reference<deleter_type>::value, \n+\t\t      \"rvalue deleter bound to reference\"); }\n+\n+      // move constructors\n+      unique_ptr(unique_ptr && __u) \n+      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n+\n+      template<typename _Up, typename _Up_Deleter> \n+        unique_ptr(unique_ptr<_Up, _Up_Deleter>&& __u) \n+        : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter()))\n+\t{ }\n+\n+      // destructor\n+      ~unique_ptr() { reset(); }\n+    \n+      // assignment\n+      unique_ptr&\n+      operator=(unique_ptr&& __u)\n+      { \n+        reset(__u.release()); \n+        get_deleter() = std::move(__u.get_deleter()); \n+        return *this;\n+      }\n+\n+      template<typename _Up, typename _Up_Deleter> \n+        unique_ptr&\n+        operator=(unique_ptr<_Up, _Up_Deleter>&& __u)\n+\t{\n+          reset(__u.release()); \n+          get_deleter() = std::move(__u.get_deleter()); \n+          return *this;\n+        }\n+\n+      unique_ptr&\n+      operator=(__unspecified_pointer_type) \n+      {\n+\treset();\n+\treturn *this;\n+      }\n+\n+      // observers\n+      typename std::add_lvalue_reference<element_type>::type operator*() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(get() != 0);\n+\treturn *get();\n+      }\n+\n+      pointer\n+      operator->() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(get() != 0);\n+\treturn get();\n+      }\n+\n+      pointer\n+      get() const\n+      { return std::get<0>(_M_t); }\n+\n+      typename std::add_lvalue_reference<deleter_type>::type\n+      get_deleter()\n+      { return std::get<1>(_M_t); }\n+\n+      typename std::add_lvalue_reference<\n+          typename std::add_const<deleter_type>::type\n+              >::type\n+      get_deleter() const\n+      { return std::get<1>(_M_t); }\n+\n+      operator __unspecified_bool_type () const\n+      { return get() == 0 ? 0 : &__this_type::_M_t; }\n+\n+      // modifiers\n+      pointer\n+      release() \n+      {\n+\tpointer __p = get();\n+\tstd::get<0>(_M_t) = 0;\n+\treturn __p;\n+      }\n+\n+      void\n+      reset(pointer __p = 0) \n+      {\n+\tif (__p != get())\n+\t  {\n+\t    get_deleter()(get());\n+\t    std::get<0>(_M_t) = __p;\n+\t  }\n+      }\n+\n+      void\n+      swap(unique_ptr&& __u)\n+      { using std::swap;\n+\tswap(_M_t, __u._M_t);\n+      }\n+\n+    private: \n+      // disable copy from lvalue\n+      unique_ptr(const unique_ptr&);\n+\n+      template<typename _Up, typename _Up_Deleter> \n+        unique_ptr(const unique_ptr<_Up, _Up_Deleter>&);\n+      \n+      // disable assignment from lvalue\n+      unique_ptr& operator=(const unique_ptr&);\n+\n+      template<typename _Up, typename _Up_Deleter> \n+        unique_ptr& operator=(const unique_ptr<_Up, _Up_Deleter>&);\n+      \n+    private:\n+      __tuple_type _M_t;\n+  };\n+ \n+  // 20.6.11.3 unique_ptr for array objects with a runtime length\n+  // [unique.ptr.runtime]\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 740 - omit specialization for array objects with a compile time length\n+  template<typename _Tp, typename _Tp_Deleter> \n+    class unique_ptr<_Tp[], _Tp_Deleter>\n+    {\n+      typedef _Tp* pointer;\n+      typedef unique_ptr<_Tp[], _Tp_Deleter> __this_type;\n+      typedef std::tuple<pointer, _Tp_Deleter> __tuple_type;\n+      typedef __tuple_type __this_type::* __unspecified_bool_type;\n+      typedef pointer __this_type::* __unspecified_pointer_type;\n+    public:\n+      typedef _Tp         element_type;      \n+      typedef _Tp_Deleter deleter_type;\n+    \n+      // constructors\n+      unique_ptr()\n+      : _M_t(pointer(), deleter_type())\n+      { static_assert(!std::is_pointer<deleter_type>::value,\n+\t\t      \"constructed with null function pointer deleter\"); }\n+\n+      explicit\n+      unique_ptr(pointer __p)\n+      : _M_t(__p, deleter_type())\n+      { static_assert(!std::is_pointer<deleter_type>::value,\n+\t\t      \"constructed with null function pointer deleter\"); }\n+\n+      unique_ptr(pointer __p,\n+          typename std::conditional<std::is_reference<deleter_type>::value, \n+              deleter_type, const deleter_type&>::type __d) \n+      : _M_t(__p, __d) { }\n+\n+      unique_ptr(pointer __p,\n+\t\t typename std::remove_reference<deleter_type>::type && __d)\n+      : _M_t(std::move(__p), std::move(__d))\n+      { static_assert(!std::is_reference<deleter_type>::value, \n+\t\t      \"rvalue deleter bound to reference\"); }\n+\n+      // move constructors\n+      unique_ptr(unique_ptr&& __u) \n+      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n+\n+      template<typename _Up, typename _Up_Deleter> \n+        unique_ptr(unique_ptr<_Up, _Up_Deleter>&& __u) \n+\t: _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter()))\n+\t{ }\n+\n+      // destructor\n+      ~unique_ptr() { reset(); }\n+\n+      // assignment\n+      unique_ptr&\n+      operator=(unique_ptr&& __u)\n+      {\n+\treset(__u.release());\n+\tget_deleter() = std::move(__u.get_deleter()); \n+\treturn *this; \n+      }\n+\n+      template<typename _Up, typename _Up_Deleter> \n+        unique_ptr&\n+        operator=(unique_ptr<_Up, _Up_Deleter>&& __u)\n+\t{\n+          reset(__u.release());\n+          get_deleter() = std::move(__u.get_deleter()); \n+          return *this;\n+        }\n+\n+      unique_ptr&\n+      operator=(__unspecified_pointer_type)\n+      {\n+\treset();\n+\treturn *this;\n+      }\n+\n+      // observers\n+      typename std::add_lvalue_reference<element_type>::type \n+      operator[](size_t __i) const \n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(get() != 0);\n+\treturn get()[__i];\n+      }\n+\n+      pointer\n+      get() const\n+      { return std::get<0>(_M_t); }\n+\n+      typename std::add_lvalue_reference<deleter_type>::type \n+      get_deleter()\n+      { return std::get<1>(_M_t); }\n+\n+      typename std::add_lvalue_reference<\n+          typename std::add_const<deleter_type>::type\n+              >::type \n+      get_deleter() const\n+      { return std::get<1>(_M_t); }    \n+\n+      operator __unspecified_bool_type () const \n+      { return get() == 0 ? 0 : &__this_type::_M_t; }\n+    \n+      // modifiers\n+      pointer\n+      release() \n+      {\n+\tpointer __p = get();\n+\tstd::get<0>(_M_t) = 0;\n+\treturn __p;\n+      }\n+\n+      void\n+      reset(pointer __p = 0) \n+      {\n+\tif (__p != get())\n+\t{\n+\t  get_deleter()(get());\n+\t  std::get<0>(_M_t) = __p;\n+\t}\n+      }\n+\n+      void\n+      swap(unique_ptr&& __u)\n+      {\n+\tusing std::swap;\n+\tswap(_M_t, __u._M_t);\n+      }\n+\n+    private:\n+      // disable copy from lvalue\n+      unique_ptr(const unique_ptr&);\n+      unique_ptr& operator=(const unique_ptr&);\n+\n+      // disable construction from convertible pointer types\n+      // (N2315 - 20.6.5.3.1)\n+      template<typename _Up> unique_ptr(_Up*,\n+        typename std::conditional<std::is_reference<deleter_type>::value, \n+          deleter_type, const deleter_type&>::type,\n+            typename std::enable_if<std::is_convertible<_Up*, \n+                pointer>::value>::type* = 0);\n+\n+      template<typename _Up> unique_ptr(_Up*,\n+        typename std::remove_reference<deleter_type>::type&&,\n+          typename std::enable_if<std::is_convertible<_Up*, \n+              pointer>::value>::type* = 0);\n+\n+      template<typename _Up> explicit unique_ptr(_Up*,\n+        typename std::enable_if<std::is_convertible<_Up*, \n+            pointer>::value>::type* = 0);\n+\n+      // disable reset with convertible pointer types (N2315 - 20.6.5.3.3) \n+      template<typename _Up>\n+        typename std::enable_if<std::is_convertible<_Up*,\n+          pointer>::value>::type reset(_Up*);\n+          \n+    private:\n+      __tuple_type _M_t;\n+  };\n+  \n+  template<typename _Tp, typename _Tp_Deleter> \n+    inline void\n+    swap(unique_ptr<_Tp, _Tp_Deleter>& __x, \n+\t unique_ptr<_Tp, _Tp_Deleter>& __y) \n+    { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Tp_Deleter> \n+    inline void\n+    swap(unique_ptr<_Tp, _Tp_Deleter>&& __x, \n+\t unique_ptr<_Tp, _Tp_Deleter>& __y)\n+    { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Tp_Deleter> \n+    inline void\n+    swap(unique_ptr<_Tp, _Tp_Deleter>& __x, \n+\t unique_ptr<_Tp, _Tp_Deleter>&& __y)\n+    { __x.swap(__y); }\n+  \n+  template<typename _Tp, typename _Tp_Deleter,\n+\t   typename _Up, typename _Up_Deleter>\n+    inline bool\n+    operator==(const unique_ptr<_Tp, _Tp_Deleter>& __x, \n+\t       const unique_ptr<_Up, _Up_Deleter>& __y)\n+    { return __x.get() == __y.get(); }\n+\n+  template<typename _Tp, typename _Tp_Deleter,\n+\t   typename _Up, typename _Up_Deleter>\n+    inline bool\n+    operator!=(const unique_ptr<_Tp, _Tp_Deleter>& __x, \n+\t       const unique_ptr<_Up, _Up_Deleter>& __y)\n+    { return !(__x.get() == __y.get()); }\n+\n+  template<typename _Tp, typename _Tp_Deleter,\n+\t   typename _Up, typename _Up_Deleter>\n+    inline bool\n+    operator<(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n+\t      const unique_ptr<_Up, _Up_Deleter>& __y)\n+    { return __x.get() < __y.get(); }\n+\n+  template<typename _Tp, typename _Tp_Deleter,\n+\t   typename _Up, typename _Up_Deleter>\n+    inline bool\n+    operator<=(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n+\t       const unique_ptr<_Up, _Up_Deleter>& __y)\n+    { return !(__y.get() < __x.get()); }\n+\n+  template<typename _Tp, typename _Tp_Deleter,\n+\t   typename _Up, typename _Up_Deleter>\n+    inline bool\n+    operator>(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n+\t      const unique_ptr<_Up, _Up_Deleter>& __y)\n+    { return __y.get() < __x.get(); }\n+\n+  template<typename _Tp, typename _Tp_Deleter,\n+\t   typename _Up, typename _Up_Deleter>\n+    inline bool\n+    operator>=(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n+\t       const unique_ptr<_Up, _Up_Deleter>& __y)\n+    { return !(__x.get() < __y.get()); }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif /* _UNIQUE_PTR_H */"}, {"sha": "665769d1fd5d00f9180af98470482513baa7832b", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,6 @@\n // array allocator -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +38,7 @@\n #include <new>\n #include <bits/functexcept.h>\n #include <tr1/array>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "7f5466afe188c7ae3c48894ffef78a34571c5b3e", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,6 @@\n // Bitmap Allocator. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@\n #include <new> // For operator new.\n #include <debug/debug.h> // _GLIBCXX_DEBUG_ASSERT\n #include <ext/concurrence.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n /** @brief The constant in the expression below is the alignment\n  * required in bytes."}, {"sha": "54d9c9600074a61702864aed85532b81726daacb", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,6 @@\n // Allocator that wraps \"C\" malloc -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -38,7 +38,7 @@\n #include <cstdlib>\n #include <new>\n #include <bits/functexcept.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "7defebc7e944c3a6f3a2f3bc552e898ce3c1982e", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,7 @@\n // MT-optimized allocator -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +39,7 @@\n #include <cstdlib>\n #include <bits/functexcept.h>\n #include <ext/atomicity.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "aeda02f8f1672e006695fd4a33f3d28428e17b59", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -36,7 +36,7 @@\n \n #include <new>\n #include <bits/functexcept.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "96eedd8df464a9d1f606956ec0f6cbbdb50c2988", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -54,7 +54,7 @@\n #include <bits/functexcept.h>\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "41c7603abd45bdbf10458adec046641c4139ff60", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -60,7 +60,7 @@\n #include <utility>\n #include <tr1/random>\n #include <bits/functexcept.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "8a080bfbef62dfae404b4c230d1155fb35cdeb95", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,6 @@\n // Versatile string utility -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,7 +46,7 @@\n #include <bits/ostream_insert.h>\n #include <bits/stl_iterator.h>\n #include <ext/numeric_traits.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "81b0c69002ee841069279b639327d4962d5674ee", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,6 @@\n // <memory> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -69,6 +69,7 @@\n #  include <ext/concurrence.h>\n #  include <bits/functexcept.h>\n #  include <bits/stl_function.h>  // std::less\n+#  include <bits/unique_ptr.h>\n #  include <debug/debug.h>\n #  include <type_traits>\n #  if _GLIBCXX_DEPRECATED"}, {"sha": "027d513ccca977f478b3d786aecd611bdda6efb3", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,6 +1,6 @@\n // <utility> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -84,7 +84,7 @@\n #    undef _GLIBCXX_BEGIN_NAMESPACE_TR1\n #    undef _GLIBCXX_INCLUDE_AS_CXX0X\n #  endif\n-#  include <bits/stl_move.h>\n+#  include <bits/move.h>\n #endif\n \n #endif /* _GLIBCXX_UTILITY */"}, {"sha": "559ade35c1a56dd8c5145e011852d3e5e40fee59", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/assign.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <memory>\n+\n+struct base { virtual ~base() {} };\n+struct derived : base {};\n+\n+void\n+test01()\n+{\n+  std::unique_ptr<derived> p1(new derived);\n+  std::unique_ptr<derived> p2(new derived);\n+//  p2 = p1;  // should not compile\n+  p2 = std::move(p1);\n+  std::unique_ptr<base> p3(new base);\n+//  p3 = p2;  // should not compile\n+  p3 = std::move(p2);\n+}\n+\n+void\n+test02()\n+{\n+  std::unique_ptr<int[]> p1(new int(420));\n+  std::unique_ptr<int[]> p2 = p1; // { dg-error \"within this context\" }\n+}\n+\n+void\n+test03()\n+{\n+  std::unique_ptr<int[2]> p1(new int[3]);\n+  std::unique_ptr<int[2]> p2 = p1; // { dg-error \"within this context\" }\n+}\n+// { dg-excess-errors \"is private\" }"}, {"sha": "4ce1422be9426c701401c0630a4d59b2198c7cce", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/requirements/explicit_instantiation/explicit_instantiation.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fexplicit_instantiation%2Fexplicit_instantiation.cc?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <memory>\n+\n+template class std::unique_ptr<int>;\n+template class std::unique_ptr<int[]>;"}, {"sha": "a965f5bcbcd915193a0a8624f21a5e27927220ea", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing allocator for the C++ library testsuite.\n //\n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,7 +39,7 @@\n #include <cstddef>\n #include <tr1/unordered_map>\n #include <cassert>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n namespace \n {"}, {"sha": "e319a6cd081f37d87259f597c3624a8a0da02617", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0f8fd1ee8a143976c532a38c6d70c8368c811f/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=ca0f8fd1ee8a143976c532a38c6d70c8368c811f", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Iterator Wrappers for the C++ library testsuite. \n //\n-// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +38,7 @@\n \n #include <testsuite_hooks.h>\n #include <bits/stl_iterator_base_types.h>\n-#include <bits/stl_move.h>\n+#include <bits/move.h>\n \n #ifndef _TESTSUITE_ITERATORS\n #define _TESTSUITE_ITERATORS"}]}