{"sha": "d255829bbc233d4d60bcf05b36319307dfba4a30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1NTgyOWJiYzIzM2Q0ZDYwYmNmMDViMzYzMTkzMDdkZmJhNGEzMA==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2017-02-15T09:01:06Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2017-02-15T09:01:06Z"}, "message": "re PR libstdc++/78723 ([variant] P0393r3: \"Making variant greater equal again\" is unimplemented)\n\n\tPR libstdc++/78723\n\t* include/std/variant (operator<(), operator>(), operator<=(),\n\toperator>=(), operator==(), operator!=()): Implement P0393R3.\n\t* testsuite/20_util/variant/compile.cc: Adjust tests.\n\t* testsuite/20_util/variant/run.cc: Adjust tests.\n\nFrom-SVN: r245475", "tree": {"sha": "378d2545a9a67afd8d79b7ce3f67996c1d6d9e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/378d2545a9a67afd8d79b7ce3f67996c1d6d9e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d255829bbc233d4d60bcf05b36319307dfba4a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d255829bbc233d4d60bcf05b36319307dfba4a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d255829bbc233d4d60bcf05b36319307dfba4a30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d255829bbc233d4d60bcf05b36319307dfba4a30/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d5abe42c27ca37bc9739f80e5f0f255206fed4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5abe42c27ca37bc9739f80e5f0f255206fed4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5abe42c27ca37bc9739f80e5f0f255206fed4f"}], "stats": {"total": 223, "additions": 108, "deletions": 115}, "files": [{"sha": "5ce466fa9ec72b17e73d5afdacea1bccfe6a8050", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d255829bbc233d4d60bcf05b36319307dfba4a30/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d255829bbc233d4d60bcf05b36319307dfba4a30/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d255829bbc233d4d60bcf05b36319307dfba4a30", "patch": "@@ -1,3 +1,11 @@\n+2017-02-15  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/78723\n+\t* include/std/variant (operator<(), operator>(), operator<=(),\n+\toperator>=(), operator==(), operator!=()): Implement P0393R3.\n+\t* testsuite/20_util/variant/compile.cc: Adjust tests.\n+\t* testsuite/20_util/variant/run.cc: Adjust tests.\n+\n 2017-02-15  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/79513"}, {"sha": "0cc50d03c4d0b5815e8c0de51438471e20b2a1a2", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 72, "deletions": 115, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d255829bbc233d4d60bcf05b36319307dfba4a30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d255829bbc233d4d60bcf05b36319307dfba4a30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=d255829bbc233d4d60bcf05b36319307dfba4a30", "patch": "@@ -264,21 +264,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       swap(__ref_cast<_Lhs>(__lhs), __ref_cast<_Rhs>(__rhs));\n     }\n \n-  template<typename _Variant, size_t _Np>\n-    constexpr bool\n-    __erased_equal_to(_Variant&& __lhs, _Variant&& __rhs)\n-    {\n-      return __get<_Np>(std::forward<_Variant>(__lhs))\n-\t  == __get<_Np>(std::forward<_Variant>(__rhs));\n+#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \\\n+  template<typename _Variant, size_t _Np> \\\n+    constexpr bool \\\n+    __erased_##__NAME(const _Variant& __lhs, const _Variant& __rhs) \\\n+    { \\\n+      return __get<_Np>(std::forward<_Variant>(__lhs)) \\\n+\t  __OP __get<_Np>(std::forward<_Variant>(__rhs)); \\\n     }\n \n-  template<typename _Variant, size_t _Np>\n-    constexpr bool\n-    __erased_less_than(const _Variant& __lhs, const _Variant& __rhs)\n-    {\n-      return __get<_Np>(std::forward<_Variant>(__lhs))\n-\t  < __get<_Np>(std::forward<_Variant>(__rhs));\n-    }\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)\n+\n+#undef _VARIANT_RELATION_FUNCTION_TEMPLATE\n \n   template<typename _Tp>\n     constexpr size_t\n@@ -813,63 +815,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(__ptr);\n     }\n \n-  template<typename... _Types>\n-    constexpr bool operator==(const variant<_Types...>& __lhs,\n-\t\t\t      const variant<_Types...>& __rhs)\n-    {\n-      return __lhs._M_equal_to(__rhs, std::index_sequence_for<_Types...>{});\n-    }\n-\n-  template<typename... _Types>\n-    constexpr inline bool\n-    operator!=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)\n-    { return !(__lhs == __rhs); }\n-\n-  template<typename... _Types>\n-    constexpr inline bool\n-    operator<(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)\n-    {\n-      return __lhs._M_less_than(__rhs, std::index_sequence_for<_Types...>{});\n-    }\n-\n-  template<typename... _Types>\n-    constexpr inline bool\n-    operator>(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)\n-    { return __rhs < __lhs; }\n-\n-  template<typename... _Types>\n-    constexpr inline bool\n-    operator<=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)\n-    { return !(__lhs > __rhs); }\n+  struct monostate { };\n \n-  template<typename... _Types>\n-    constexpr inline bool\n-    operator>=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)\n-    { return !(__lhs < __rhs); }\n+#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \\\n+  template<typename... _Types> \\\n+    constexpr bool operator __OP(const variant<_Types...>& __lhs, \\\n+\t\t\t\t const variant<_Types...>& __rhs) \\\n+    { \\\n+      return __lhs._M_##__NAME(__rhs, std::index_sequence_for<_Types...>{}); \\\n+    } \\\n+\\\n+  constexpr bool operator __OP(monostate, monostate) noexcept \\\n+  { return 0 __OP 0; }\n+\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)\n+  _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)\n+\n+#undef _VARIANT_RELATION_FUNCTION_TEMPLATE\n \n   template<typename _Visitor, typename... _Variants>\n     constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);\n \n-  struct monostate { };\n-\n-  constexpr bool operator<(monostate, monostate) noexcept\n-  { return false; }\n-\n-  constexpr bool operator>(monostate, monostate) noexcept\n-  { return false; }\n-\n-  constexpr bool operator<=(monostate, monostate) noexcept\n-  { return true; }\n-\n-  constexpr bool operator>=(monostate, monostate) noexcept\n-  { return true; }\n-\n-  constexpr bool operator==(monostate, monostate) noexcept\n-  { return true; }\n-\n-  constexpr bool operator!=(monostate, monostate) noexcept\n-  { return false; }\n-\n   template<typename... _Types>\n     inline enable_if_t<(is_move_constructible_v<_Types> && ...)\n \t\t\t&& (is_swappable_v<_Types> && ...)>\n@@ -1140,51 +1110,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     private:\n-      template<size_t... __indices>\n-\tstatic constexpr bool\n-\t(*_S_equal_to_vtable[])(const variant&, const variant&) =\n-\t  { &__detail::__variant::__erased_equal_to<\n-\t    const variant&, __indices>... };\n-\n-      template<size_t... __indices>\n-\tstatic constexpr bool\n-\t(*_S_less_than_vtable[])(const variant&, const variant&) =\n-\t  { &__detail::__variant::__erased_less_than<\n-\t      const variant&, __indices>... };\n-\n-      template<size_t... __indices>\n-\tconstexpr bool\n-\t_M_equal_to(const variant& __rhs,\n-\t\t    std::index_sequence<__indices...>) const\n-\t{\n-\t  if (this->index() != __rhs.index())\n-\t    return false;\n-\n-\t  if (this->valueless_by_exception())\n-\t    return true;\n-\n-\t  return _S_equal_to_vtable<__indices...>[this->index()](*this, __rhs);\n+#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \\\n+      template<size_t... __indices> \\\n+\tstatic constexpr bool \\\n+\t(*_S_erased_##__NAME[])(const variant&, const variant&) = \\\n+\t  { &__detail::__variant::__erased_##__NAME< \\\n+                const variant&, __indices>... }; \\\n+      template<size_t... __indices> \\\n+\tconstexpr inline bool \\\n+\t_M_##__NAME(const variant& __rhs, \\\n+\t\t    std::index_sequence<__indices...>) const \\\n+\t{ \\\n+\t  auto __lhs_index = this->index(); \\\n+\t  auto __rhs_index = __rhs.index(); \\\n+\t  if (__lhs_index != __rhs_index || valueless_by_exception()) \\\n+\t    /* Modulo addition. */ \\\n+\t    return __lhs_index + 1 __OP __rhs_index + 1; \\\n+\t  return _S_erased_##__NAME<__indices...>[__lhs_index](*this, __rhs); \\\n \t}\n \n-      template<size_t... __indices>\n-\tconstexpr inline bool\n-\t_M_less_than(const variant& __rhs,\n-\t\t     std::index_sequence<__indices...>) const\n-\t{\n-\t  auto __lhs_index = this->index();\n-\t  auto __rhs_index = __rhs.index();\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)\n \n-\t  if (__lhs_index < __rhs_index)\n-\t    return true;\n-\n-\t  if (__lhs_index > __rhs_index)\n-\t    return false;\n-\n-\t  if (this->valueless_by_exception())\n-\t    return false;\n-\n-\t  return _S_less_than_vtable<__indices...>[__lhs_index](*this, __rhs);\n-\t}\n+#undef _VARIANT_RELATION_FUNCTION_TEMPLATE\n \n       template<size_t _Np, typename _Vp>\n \tfriend constexpr decltype(auto) __detail::__variant::\n@@ -1200,15 +1152,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n         __get_storage(_Vp&& __v);\n \n-      template<typename... _Tp>\n-\tfriend constexpr bool\n-\toperator==(const variant<_Tp...>& __lhs,\n-\t\t   const variant<_Tp...>& __rhs);\n+#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \\\n+      template<typename... _Tp> \\\n+\tfriend constexpr bool \\\n+\toperator __OP(const variant<_Tp...>& __lhs, \\\n+\t\t      const variant<_Tp...>& __rhs);\n+\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(<)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(==)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)\n+      _VARIANT_RELATION_FUNCTION_TEMPLATE(>)\n \n-      template<typename... _Tp>\n-\tfriend constexpr bool\n-\toperator<(const variant<_Tp...>& __lhs,\n-\t\t  const variant<_Tp...>& __rhs);\n+#undef _VARIANT_RELATION_FUNCTION_TEMPLATE\n     };\n \n   template<size_t _Np, typename... _Types>"}, {"sha": "06e8eb31ee88dbf9b0305b0d16667422480e4170", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d255829bbc233d4d60bcf05b36319307dfba4a30/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d255829bbc233d4d60bcf05b36319307dfba4a30/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=d255829bbc233d4d60bcf05b36319307dfba4a30", "patch": "@@ -65,7 +65,11 @@ struct nonliteral\n   nonliteral() { }\n \n   bool operator<(const nonliteral&) const;\n+  bool operator<=(const nonliteral&) const;\n   bool operator==(const nonliteral&) const;\n+  bool operator!=(const nonliteral&) const;\n+  bool operator>=(const nonliteral&) const;\n+  bool operator>(const nonliteral&) const;\n };\n \n void default_ctor()"}, {"sha": "db4529eea3f53b864fe34294678083ed89c4d836", "filename": "libstdc++-v3/testsuite/20_util/variant/run.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d255829bbc233d4d60bcf05b36319307dfba4a30/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d255829bbc233d4d60bcf05b36319307dfba4a30/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc?ref=d255829bbc233d4d60bcf05b36319307dfba4a30", "patch": "@@ -47,6 +47,13 @@ struct AlwaysThrow\n     throw nullptr;\n     return *this;\n   }\n+\n+  bool operator<(const AlwaysThrow&) const { VERIFY(false); }\n+  bool operator<=(const AlwaysThrow&) const { VERIFY(false); }\n+  bool operator==(const AlwaysThrow&) const { VERIFY(false); }\n+  bool operator!=(const AlwaysThrow&) const { VERIFY(false); }\n+  bool operator>=(const AlwaysThrow&) const { VERIFY(false); }\n+  bool operator>(const AlwaysThrow&) const { VERIFY(false); }\n };\n \n void default_ctor()\n@@ -229,6 +236,23 @@ void test_relational()\n \n   VERIFY((variant<int, string>(2) < variant<int, string>(\"a\")));\n   VERIFY((variant<string, int>(2) > variant<string, int>(\"a\")));\n+\n+  {\n+    variant<int, AlwaysThrow> v, w;\n+    try\n+      {\n+\tAlwaysThrow a;\n+\tv = a;\n+      }\n+    catch (nullptr_t) { }\n+    VERIFY(v.valueless_by_exception());\n+    VERIFY(v < w);\n+    VERIFY(v <= w);\n+    VERIFY(!(v == w));\n+    VERIFY(v != w);\n+    VERIFY(w > v);\n+    VERIFY(w >= v);\n+  }\n }\n \n void test_swap()"}]}