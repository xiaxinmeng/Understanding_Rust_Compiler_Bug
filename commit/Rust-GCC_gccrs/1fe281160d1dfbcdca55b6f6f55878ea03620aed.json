{"sha": "1fe281160d1dfbcdca55b6f6f55878ea03620aed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZlMjgxMTYwZDFkZmJjZGNhNTViNmY2ZjU1ODc4ZWEwMzYyMGFlZA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2009-09-04T19:36:26Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2009-09-04T19:36:26Z"}, "message": "re PR bootstrap/41241 (bootstrap comparison failure)\n\n2009-09-04  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR bootstrap/41241\n\t* ira.c (update_equiv_reg): Revert my previous patch for the PR.\n\t* reginfo.c (resize_reg_info): Call allocate_reg_info if necessary.\n\t(reginfo_init): Don't call allocate_reg_info.\n\nFrom-SVN: r151440", "tree": {"sha": "122a84dde022b7849f0170381f05f520adc7bc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/122a84dde022b7849f0170381f05f520adc7bc72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fe281160d1dfbcdca55b6f6f55878ea03620aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe281160d1dfbcdca55b6f6f55878ea03620aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fe281160d1dfbcdca55b6f6f55878ea03620aed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe281160d1dfbcdca55b6f6f55878ea03620aed/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14e58be03205af4b54fcf290a9f650ae3d9f4686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e58be03205af4b54fcf290a9f650ae3d9f4686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e58be03205af4b54fcf290a9f650ae3d9f4686"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "3523c0b8dc30b3f4267be98ed024e1a8c03445fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe281160d1dfbcdca55b6f6f55878ea03620aed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe281160d1dfbcdca55b6f6f55878ea03620aed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fe281160d1dfbcdca55b6f6f55878ea03620aed", "patch": "@@ -1,3 +1,10 @@\n+2009-09-04  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR bootstrap/41241\n+\t* ira.c (update_equiv_reg): Revert my previous patch for the PR.\n+\t* reginfo.c (resize_reg_info): Call allocate_reg_info if necessary.\n+\t(reginfo_init): Don't call allocate_reg_info.\n+\n 2009-09-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/41262"}, {"sha": "b960f769534a490188d588eab762488364df6394", "filename": "gcc/ira.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe281160d1dfbcdca55b6f6f55878ea03620aed/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe281160d1dfbcdca55b6f6f55878ea03620aed/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=1fe281160d1dfbcdca55b6f6f55878ea03620aed", "patch": "@@ -2384,9 +2384,21 @@ update_equiv_regs (void)\n \n \t  /* We only handle the case of a pseudo register being set\n \t     once, or always to the same value.  */\n+\t  /* ??? The mn10200 port breaks if we add equivalences for\n+\t     values that need an ADDRESS_REGS register and set them equivalent\n+\t     to a MEM of a pseudo.  The actual problem is in the over-conservative\n+\t     handling of INPADDR_ADDRESS / INPUT_ADDRESS / INPUT triples in\n+\t     calculate_needs, but we traditionally work around this problem\n+\t     here by rejecting equivalences when the destination is in a register\n+\t     that's likely spilled.  This is fragile, of course, since the\n+\t     preferred class of a pseudo depends on all instructions that set\n+\t     or use it.  */\n+\n \t  if (!REG_P (dest)\n \t      || (regno = REGNO (dest)) < FIRST_PSEUDO_REGISTER\n-\t      || reg_equiv[regno].init_insns == const0_rtx)\n+\t      || reg_equiv[regno].init_insns == const0_rtx\n+\t      || (CLASS_LIKELY_SPILLED_P (reg_preferred_class (regno))\n+\t\t  && MEM_P (src) && ! reg_equiv[regno].is_arg_equivalence))\n \t    {\n \t      /* This might be setting a SUBREG of a pseudo, a pseudo that is\n \t\t also set somewhere else to a constant.  */"}, {"sha": "0f11c91a3de1f5a0177442ed929bcc8071d37e82", "filename": "gcc/reginfo.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe281160d1dfbcdca55b6f6f55878ea03620aed/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe281160d1dfbcdca55b6f6f55878ea03620aed/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=1fe281160d1dfbcdca55b6f6f55878ea03620aed", "patch": "@@ -952,13 +952,18 @@ allocate_reg_info (void)\n }\n \n \n-/* Resize reg info. The new elements will be uninitialized.  */\n+/* Resize reg info. The new elements will be uninitialized.  Return\n+   TRUE if new elements (for new pseudos) were added.  */\n bool\n resize_reg_info (void)\n {\n   int old;\n \n-  gcc_assert (reg_pref != NULL);\n+  if (reg_pref == NULL)\n+    {\n+      allocate_reg_info ();\n+      return true;\n+    }\n   if (reg_info_size == max_reg_num ())\n     return false;\n   old = reg_info_size;\n@@ -1000,7 +1005,6 @@ reginfo_init (void)\n   /* This prevents dump_flow_info from losing if called\n      before reginfo is run.  */\n   reg_pref = NULL;\n-  allocate_reg_info ();\n   /* No more global register variables may be declared.  */\n   no_global_reg_vars = 1;\n   return 1;"}]}