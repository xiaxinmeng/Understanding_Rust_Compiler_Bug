{"sha": "4729d7726bdc86c46aeb525270909b73490ce206", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyOWQ3NzI2YmRjODZjNDZhZWI1MjUyNzA5MDliNzM0OTBjZTIwNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-03-09T23:40:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-03-09T23:40:58Z"}, "message": "re PR go/65349 (go tool crashes, can't compile go code on 32bit linux systems)\n\n\tPR go/65349\nruntime: Don't call malloc from __go_file_line callback.\n\nWhen crashing, we call runtime_printcreatedby which calls\n__go_file_line which used to call the Go malloc.  If we are\ncrashing due to a signal due to heap corruption of some sort,\nthe GO malloc lock might already be held, leading to a crash\nwithin a crash.  Avoid that by assuming that the libbacktrace\nstrings will stick around, as we already do in go-callers.c.\n\nFrom-SVN: r221291", "tree": {"sha": "1a0a01f1fe702feadf8fd20a3cf9fa97c02fd779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0a01f1fe702feadf8fd20a3cf9fa97c02fd779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4729d7726bdc86c46aeb525270909b73490ce206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4729d7726bdc86c46aeb525270909b73490ce206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4729d7726bdc86c46aeb525270909b73490ce206", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4729d7726bdc86c46aeb525270909b73490ce206/comments", "author": null, "committer": null, "parents": [{"sha": "864396ff9e8a4ee1f02e1ff0fb4d096bbca547ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864396ff9e8a4ee1f02e1ff0fb4d096bbca547ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864396ff9e8a4ee1f02e1ff0fb4d096bbca547ff"}], "stats": {"total": 36, "additions": 6, "deletions": 30}, "files": [{"sha": "ad151ecea8ea0e2fb88122f787e921ccdde5b883", "filename": "libgo/runtime/go-caller.c", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4729d7726bdc86c46aeb525270909b73490ce206/libgo%2Fruntime%2Fgo-caller.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4729d7726bdc86c46aeb525270909b73490ce206/libgo%2Fruntime%2Fgo-caller.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-caller.c?ref=4729d7726bdc86c46aeb525270909b73490ce206", "patch": "@@ -37,36 +37,12 @@ callback (void *data, uintptr_t pc __attribute__ ((unused)),\n {\n   struct caller *c = (struct caller *) data;\n \n-  if (function == NULL)\n-    {\n-      c->fn.str = NULL;\n-      c->fn.len = 0;\n-    }\n-  else\n-    {\n-      byte *s;\n-\n-      c->fn.len = __builtin_strlen (function);\n-      s = runtime_malloc (c->fn.len);\n-      __builtin_memcpy (s, function, c->fn.len);\n-      c->fn.str = s;\n-    }\n-\n-  if (filename == NULL)\n-    {\n-      c->file.str = NULL;\n-      c->file.len = 0;\n-    }\n-  else\n-    {\n-      byte *s;\n-\n-      c->file.len = __builtin_strlen (filename);\n-      s = runtime_malloc (c->file.len);\n-      __builtin_memcpy (s, filename, c->file.len);\n-      c->file.str = s;\n-    }\n-\n+  /* The libbacktrace library says that these strings might disappear,\n+     but with the current implementation they won't.  We can't easily\n+     allocate memory here, so for now assume that we can save a\n+     pointer to the strings.  */\n+  c->fn = runtime_gostringnocopy ((const byte *) function);\n+  c->file = runtime_gostringnocopy ((const byte *) filename);\n   c->line = lineno;\n \n   return 0;"}]}