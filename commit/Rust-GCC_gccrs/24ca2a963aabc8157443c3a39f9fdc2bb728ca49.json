{"sha": "24ca2a963aabc8157443c3a39f9fdc2bb728ca49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjYTJhOTYzYWFiYzgxNTc0NDNjM2EzOWY5ZmRjMmJiNzI4Y2E0OQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-02-17T13:01:40Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-02-17T13:01:40Z"}, "message": "stacktrace.cc (GetStackTraceElements): Call gnu::gcj::runtime::NameFinder::removeUnknown() to determine if...\n\n2006-02-16  Andrew Haley  <aph@redhat.com>\n\n        * stacktrace.cc (GetStackTraceElements): Call\n        gnu::gcj::runtime::NameFinder::removeUnknown() to determine if\n        non-Java frames should be removed from a printed stack trace.\n        Pass methodName to getLineNumberForFrame().\n        (getLineNumberForFrame): Set method_name from info.dli_sname.\n        * gnu/gcj/runtime/NameFinder.java (removeUnknown): New method.\n        (remove_unknown): New variable.\n        * include/java-stack.h (_Jv_StackTrace::getLineNumberForFrame):\n        Add methodName arg.\n\nFrom-SVN: r111181", "tree": {"sha": "179d83a836d62ac3b99fbbd0d3cbcefb187c1752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/179d83a836d62ac3b99fbbd0d3cbcefb187c1752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24ca2a963aabc8157443c3a39f9fdc2bb728ca49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ca2a963aabc8157443c3a39f9fdc2bb728ca49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ca2a963aabc8157443c3a39f9fdc2bb728ca49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25f2dfd3404beff90dce23e349907f11adbfb69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f2dfd3404beff90dce23e349907f11adbfb69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f2dfd3404beff90dce23e349907f11adbfb69e"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "2e1438929dbd8e85342d42067de759385bb7e36e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=24ca2a963aabc8157443c3a39f9fdc2bb728ca49", "patch": "@@ -1,3 +1,15 @@\n+2006-02-16  Andrew Haley  <aph@redhat.com>\n+\n+\t* stacktrace.cc (GetStackTraceElements): Call\n+\tgnu::gcj::runtime::NameFinder::removeUnknown() to determine if\n+\tnon-Java frames should be removed from a printed stack trace.\n+\tPass methodName to getLineNumberForFrame().\n+\t(getLineNumberForFrame): Set method_name from info.dli_sname.\n+\t* gnu/gcj/runtime/NameFinder.java (removeUnknown): New method.\n+\t(remove_unknown): New variable.\n+\t* include/java-stack.h (_Jv_StackTrace::getLineNumberForFrame):\n+\tAdd methodName arg.\n+\n 2006-02-15  Matthias Klose  <doko@debian.org>\n \n \t* gnu/java/nio/charset, gnu/java/net/protocol/file,"}, {"sha": "3a31a2d2d9be3891e7bd2ac3ca659815ba0e696d", "filename": "libjava/gnu/gcj/runtime/NameFinder.java", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FNameFinder.java?ref=24ca2a963aabc8157443c3a39f9fdc2bb728ca49", "patch": "@@ -34,6 +34,9 @@\n  *     source file and line number info. Throwable.printStackTrace() will\n  *     be faster if this property is set to 'false'.\n  * </ul>\n+ * <ul><code>gnu.gcj.runtime.NameFinder.remove_unknown</code>\n+ *     Whether calls to unknown functions (class and method names are unknown)\n+ *     should be removed from the stack trace. </ul>\n  * </li>\n  *\n  * <code>close()</code> should be called to get rid of all resources.\n@@ -57,6 +60,18 @@\n                 (\"gnu.gcj.runtime.NameFinder.use_addr2line\", \"true\")\n             ).booleanValue();\n \n+  private static final boolean remove_unknown\n+\t  = Boolean.valueOf(System.getProperty\n+\t\t(\"gnu.gcj.runtime.NameFinder.remove_unknown\", \"true\")\n+\t    ).booleanValue();\n+\n+  // Return true if non-Java frames should be removed from stack\n+  // traces.\n+  static final boolean removeUnknown()\n+  {\n+    return remove_unknown;\n+  }\n+\n   class Addr2Line\n   {\n     Process proc;"}, {"sha": "7bf4d7b39d01df4f98075a51d1577c0aaf7923d5", "filename": "libjava/include/java-stack.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/libjava%2Finclude%2Fjava-stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/libjava%2Finclude%2Fjava-stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-stack.h?ref=24ca2a963aabc8157443c3a39f9fdc2bb728ca49", "patch": "@@ -105,7 +105,8 @@ class _Jv_StackTrace\n   static jclass ClassForFrame (_Jv_StackFrame *frame);\n   static void FillInFrameInfo (_Jv_StackFrame *frame);\n   static void getLineNumberForFrame(_Jv_StackFrame *frame, NameFinder *finder, \n-\t\t\t     jstring *sourceFileName, jint *lineNum);\n+\t\t\t\t    jstring *sourceFileName, jint *lineNum,\n+\t\t\t\t    jstring *methodName);\n   \n   static _Unwind_Reason_Code UnwindTraceFn (struct _Unwind_Context *context, \n     void *state_ptr);"}, {"sha": "16f944a4a059fc6192f2110cf866b689c0f3a6f6", "filename": "libjava/stacktrace.cc", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/libjava%2Fstacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ca2a963aabc8157443c3a39f9fdc2bb728ca49/libjava%2Fstacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fstacktrace.cc?ref=24ca2a963aabc8157443c3a39f9fdc2bb728ca49", "patch": "@@ -171,7 +171,8 @@ _Jv_StackTrace::GetStackTrace(void)\n \n void\n _Jv_StackTrace::getLineNumberForFrame(_Jv_StackFrame *frame, NameFinder *finder, \n-\t\t jstring *sourceFileName, jint *lineNum)\n+\t\t\t\t      jstring *sourceFileName, jint *lineNum,\n+\t\t\t\t      jstring *methodName)\n {\n #ifdef INTERPRETER\n   if (frame->type == frame_interpreter)\n@@ -200,6 +201,9 @@ _Jv_StackTrace::getLineNumberForFrame(_Jv_StackFrame *frame, NameFinder *finder,\n       else\n         return;\n \n+      if (*methodName == NULL && info.dli_sname)\n+\t*methodName = JvNewStringUTF (info.dli_sname);\n+\n       // addr2line expects relative addresses for shared libraries.\n       if (strcmp (info.dli_fname, argv0) == 0)\n         offset = (_Unwind_Ptr) ip;\n@@ -323,24 +327,31 @@ _Jv_StackTrace::GetStackTraceElements (_Jv_StackTrace *trace,\n \tend_idx = i - 1;\n     }\n   \n+  const jboolean remove_unknown \n+    = gnu::gcj::runtime::NameFinder::removeUnknown();\n+\n   // Second pass: Look up line-number info for remaining frames.\n   for (int i = start_idx; i <= end_idx; i++)\n     {\n       _Jv_StackFrame *frame = &trace->frames[i];\n       \n-      if (frame->klass == NULL)\n-        // Not a Java frame.\n+      if (frame->klass == NULL && remove_unknown)\n+\t// Not a Java frame.\n \tcontinue;\n-      \n-      jstring className = frame->klass->getName ();\n+\n+      jstring className = NULL;\n+      if (frame->klass != NULL)\n+\tclassName = frame->klass->getName ();\n+\n       jstring methodName = NULL;\n       if (frame->meth)\n         methodName = JvNewStringUTF (frame->meth->name->chars());\n       \n       jstring sourceFileName = NULL;\n       jint lineNum = -1;\n       \n-      getLineNumberForFrame(frame, finder, &sourceFileName, &lineNum);\n+      getLineNumberForFrame(frame, finder, &sourceFileName, &lineNum, \n+\t\t\t    &methodName);\n       \n       StackTraceElement *element = new StackTraceElement (sourceFileName, lineNum,\n         className, methodName, 0);"}]}