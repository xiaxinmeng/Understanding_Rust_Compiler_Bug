{"sha": "e6fd02cc6d874c523466250a1cb724e0c7af9d75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmZDAyY2M2ZDg3NGM1MjM0NjYyNTBhMWNiNzI0ZTBjN2FmOWQ3NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-03T20:10:31Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-05T21:34:22Z"}, "message": "c++: Fix decltype(auto) deduction with rvalue ref [PR78209]\n\nHere's a small deficiency in decltype(auto).  [dcl.type.auto.deduct]/5:\nIf the placeholder-type-specifier is of the form decltype(auto), [...]\nthe type deduced for T is determined [...] as though E had been the operand\nof the decltype.  So:\n\n  int &&i = 0;\n  decltype(auto) j = i; // should behave like int &&j = i; error\n\nWe deduce j's type in do_auto_deduction via finish_decltype_type which\ntakes an 'id' argument.  Currently we compute 'id' as false, because\nstripped_init is *i (a REFERENCE_REF_P).  But it seems to me we should\nrather set 'id' to true here, by looking through the REFERENCE_REF_P,\nso that finish_decltype_type DTRT.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/78209\n\t* pt.c (do_auto_deduction): If init is REFERENCE_REF_P, use its\n\tfirst operand.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/78209\n\t* g++.dg/cpp1y/decltype-auto1.C: New test.", "tree": {"sha": "34151764b20973ce61fe02249b2ba515b3cfe2b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34151764b20973ce61fe02249b2ba515b3cfe2b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6fd02cc6d874c523466250a1cb724e0c7af9d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fd02cc6d874c523466250a1cb724e0c7af9d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fd02cc6d874c523466250a1cb724e0c7af9d75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fd02cc6d874c523466250a1cb724e0c7af9d75/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d87302a8e20c1f49dd37177ec869ee94abc11a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d87302a8e20c1f49dd37177ec869ee94abc11a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d87302a8e20c1f49dd37177ec869ee94abc11a5"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "c033a286407d30a60e4e195944a0cfd17436e503", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fd02cc6d874c523466250a1cb724e0c7af9d75/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fd02cc6d874c523466250a1cb724e0c7af9d75/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e6fd02cc6d874c523466250a1cb724e0c7af9d75", "patch": "@@ -29278,6 +29278,8 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n   else if (AUTO_IS_DECLTYPE (auto_node))\n     {\n       tree stripped_init = tree_strip_any_location_wrapper (init);\n+      if (REFERENCE_REF_P (stripped_init))\n+\tstripped_init = TREE_OPERAND (stripped_init, 0);\n       bool id = (DECL_P (stripped_init)\n \t\t || ((TREE_CODE (init) == COMPONENT_REF\n \t\t      || TREE_CODE (init) == SCOPE_REF)"}, {"sha": "13baf8eba06c48894f14670f95759e2ce9c8b1e5", "filename": "gcc/testsuite/g++.dg/cpp1y/decltype-auto1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fd02cc6d874c523466250a1cb724e0c7af9d75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fd02cc6d874c523466250a1cb724e0c7af9d75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdecltype-auto1.C?ref=e6fd02cc6d874c523466250a1cb724e0c7af9d75", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/78209\n+// { dg-do compile { target c++14 } }\n+\n+int main()\n+{\n+  int &&i = 0;\n+  decltype(auto) j = i; // { dg-error \"cannot bind rvalue reference\" }\n+}"}]}