{"sha": "7144300698452876d425409f8d17bb56bff271b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0NDMwMDY5ODQ1Mjg3NmQ0MjU0MDlmOGQxN2JiNTZiZmYyNzFiNw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-08-27T21:40:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-27T21:40:33Z"}, "message": "pa.c (emit_move_sequence): Do not stop on SUBREG_WORD of an operand.\n\n        * pa.c (emit_move_sequence): Do not stop on SUBREG_WORD of an\n        operand.\n\nFrom-SVN: r28939", "tree": {"sha": "6927da3263e762e2b9bfd736f8760517ff2c0df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6927da3263e762e2b9bfd736f8760517ff2c0df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7144300698452876d425409f8d17bb56bff271b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7144300698452876d425409f8d17bb56bff271b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7144300698452876d425409f8d17bb56bff271b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7144300698452876d425409f8d17bb56bff271b7/comments", "author": null, "committer": null, "parents": [{"sha": "203cb4ef87f1ac254c1a063f2a9b4d7e1639dd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203cb4ef87f1ac254c1a063f2a9b4d7e1639dd5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203cb4ef87f1ac254c1a063f2a9b4d7e1639dd5e"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "f123ab187d2954e77eebbf5a0c63236e9a0a7590", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7144300698452876d425409f8d17bb56bff271b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7144300698452876d425409f8d17bb56bff271b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7144300698452876d425409f8d17bb56bff271b7", "patch": "@@ -1,3 +1,8 @@\n+Fri Aug 27 15:35:24 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.c (emit_move_sequence): Do not stop on SUBREG_WORD of an\n+\toperand.\n+\n Fri Aug 27 14:01:19 1999  Marc Espie <espie@cvs.openbsd.org>\n \n \t* config/openbsd.h: Define SET_ASM_OP."}, {"sha": "640b02b71a7e394f43b2fd76cc32c3ecfc4d019b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7144300698452876d425409f8d17bb56bff271b7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7144300698452876d425409f8d17bb56bff271b7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=7144300698452876d425409f8d17bb56bff271b7", "patch": "@@ -1136,8 +1136,12 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t   && GET_CODE (SUBREG_REG (operand0)) == REG\n \t   && REGNO (SUBREG_REG (operand0)) >= FIRST_PSEUDO_REGISTER)\n     {\n-      SUBREG_REG (operand0) = reg_equiv_mem[REGNO (SUBREG_REG (operand0))];\n-      operand0 = alter_subreg (operand0);\n+     /* We must not alter SUBREG_WORD (operand0) since that would confuse\n+\tthe code which tracks sets/uses for delete_output_reload.  */\n+      rtx temp = gen_rtx_SUBREG (GET_MODE (operand0),\n+\t\t\t\t reg_equiv_mem [REGNO (SUBREG_REG (operand0))],\n+\t\t\t\t SUBREG_WORD (operand0));\n+      operand0 = alter_subreg (temp);\n     }\n \n   if (scratch_reg\n@@ -1149,8 +1153,12 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t   && GET_CODE (SUBREG_REG (operand1)) == REG\n \t   && REGNO (SUBREG_REG (operand1)) >= FIRST_PSEUDO_REGISTER)\n     {\n-      SUBREG_REG (operand1) = reg_equiv_mem[REGNO (SUBREG_REG (operand1))];\n-      operand1 = alter_subreg (operand1);\n+     /* We must not alter SUBREG_WORD (operand0) since that would confuse\n+\tthe code which tracks sets/uses for delete_output_reload.  */\n+      rtx temp = gen_rtx_SUBREG (GET_MODE (operand1),\n+\t\t\t\t reg_equiv_mem [REGNO (SUBREG_REG (operand1))],\n+\t\t\t\t SUBREG_WORD (operand1));\n+      operand1 = alter_subreg (temp);\n     }\n \n   if (scratch_reg && reload_in_progress && GET_CODE (operand0) == MEM"}]}