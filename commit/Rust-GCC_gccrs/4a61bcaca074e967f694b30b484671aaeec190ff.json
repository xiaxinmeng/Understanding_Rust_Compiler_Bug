{"sha": "4a61bcaca074e967f694b30b484671aaeec190ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE2MWJjYWNhMDc0ZTk2N2Y2OTRiMzBiNDg0NjcxYWFlZWMxOTBmZg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-05T01:57:25Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T04:44:50Z"}, "message": "AVX512FP16: Add abi test for zmm\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/abi-avx512fp16-zmm.exp:\n\tNew file.\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/args.h: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/asm-support.S: Likewise.\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/avx512fp16-zmm-check.h:\n\tLikewise.\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_m512_returning.c:\n\tLikewise.\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_m512.c:\n\tLikewise.\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_structs.c:\n\tLikewise.\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_unions.c:\n\tLikewise.\n\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_varargs-m512.c:\n\tLikewise.", "tree": {"sha": "d5a64a7baaf273e7f831449ef2b6899b91b22d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5a64a7baaf273e7f831449ef2b6899b91b22d17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a61bcaca074e967f694b30b484671aaeec190ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a61bcaca074e967f694b30b484671aaeec190ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a61bcaca074e967f694b30b484671aaeec190ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a61bcaca074e967f694b30b484671aaeec190ff/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07308cdb0c865b846396af4ebe07ccc9f3a6f3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07308cdb0c865b846396af4ebe07ccc9f3a6f3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07308cdb0c865b846396af4ebe07ccc9f3a6f3f3"}], "stats": {"total": 1479, "additions": 1479, "deletions": 0}, "files": [{"sha": "33d247627887f9160b5441faaf5537c5eb42a64b", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/abi-avx512fp16-zmm.exp", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fabi-avx512fp16-zmm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fabi-avx512fp16-zmm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fabi-avx512fp16-zmm.exp?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,48 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# The x86-64 ABI testsuite needs one additional assembler file for most\n+# testcases.  For simplicity we will just link it into each test.\n+\n+load_lib c-torture.exp\n+load_lib target-supports.exp\n+load_lib torture-options.exp\n+load_lib clearcap.exp\n+load_lib file-format.exp\n+\n+if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n+     || [is-effective-target ia32]\n+     || [gcc_target_object_format] != \"elf\"\n+     || ![is-effective-target avx512fp16] } then {\n+  return\n+}\n+\n+\n+torture-init\n+clearcap-init\n+set-torture-options $C_TORTURE_OPTIONS\n+set additional_flags \"-W -Wall -Wno-abi -mavx512fp16\"\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n+    if {[runtest_file_p $runtests $src]} {\n+\tc-torture-execute [list $src \\\n+\t\t\t\t$srcdir/$subdir/asm-support.S] \\\n+\t\t\t\t$additional_flags\n+    }\n+}\n+\n+clearcap-finish\n+torture-finish"}, {"sha": "ec89fae45977b8c53d040c98f2d5fd40ad6d6261", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/args.h", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fargs.h?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,186 @@\n+#ifndef INCLUDED_ARGS_H\n+#define INCLUDED_ARGS_H\n+\n+#include <immintrin.h>\n+#include <string.h>\n+\n+/* Assertion macro.  */\n+#define assert(test) if (!(test)) abort()\n+\n+#ifdef __GNUC__\n+#define ATTRIBUTE_UNUSED __attribute__((__unused__))\n+#else\n+#define ATTRIBUTE_UNUSED\n+#endif\n+\n+/* This defines the calling sequences for integers and floats.  */\n+#define I0 rdi\n+#define I1 rsi\n+#define I2 rdx\n+#define I3 rcx\n+#define I4 r8\n+#define I5 r9\n+#define F0 zmm0\n+#define F1 zmm1\n+#define F2 zmm2\n+#define F3 zmm3\n+#define F4 zmm4\n+#define F5 zmm5\n+#define F6 zmm6\n+#define F7 zmm7\n+\n+typedef union {\n+  _Float16 __Float16[32];\n+  float _float[16];\n+  double _double[8];\n+  long _long[8];\n+  int _int[16];\n+  unsigned long _ulong[8];\n+  __m64 _m64[8];\n+  __m128 _m128[4];\n+  __m256 _m256[2];\n+  __m512 _m512[1];\n+  __m512h _m512h[1];\n+} ZMM_T;\n+\n+typedef union {\n+  float _float;\n+  double _double;\n+  long double _ldouble;\n+  unsigned long _ulong[2];\n+} X87_T;\n+extern void (*callthis)(void);\n+extern unsigned long rax,rbx,rcx,rdx,rsi,rdi,rsp,rbp,r8,r9,r10,r11,r12,r13,r14,r15;\n+ZMM_T zmm_regs[32];\n+X87_T x87_regs[8];\n+extern volatile unsigned long volatile_var;\n+extern void snapshot (void);\n+extern void snapshot_ret (void);\n+#define WRAP_CALL(N) \\\n+  (callthis = (void (*)()) (N), (typeof (&N)) snapshot)\n+#define WRAP_RET(N) \\\n+  (callthis = (void (*)()) (N), (typeof (&N)) snapshot_ret)\n+\n+/* Clear all integer registers.  */\n+#define clear_int_hardware_registers \\\n+  asm __volatile__ (\"xor %%rax, %%rax\\n\\t\" \\\n+\t\t    \"xor %%rbx, %%rbx\\n\\t\" \\\n+\t\t    \"xor %%rcx, %%rcx\\n\\t\" \\\n+\t\t    \"xor %%rdx, %%rdx\\n\\t\" \\\n+\t\t    \"xor %%rsi, %%rsi\\n\\t\" \\\n+\t\t    \"xor %%rdi, %%rdi\\n\\t\" \\\n+\t\t    \"xor %%r8, %%r8\\n\\t\" \\\n+\t\t    \"xor %%r9, %%r9\\n\\t\" \\\n+\t\t    \"xor %%r10, %%r10\\n\\t\" \\\n+\t\t    \"xor %%r11, %%r11\\n\\t\" \\\n+\t\t    \"xor %%r12, %%r12\\n\\t\" \\\n+\t\t    \"xor %%r13, %%r13\\n\\t\" \\\n+\t\t    \"xor %%r14, %%r14\\n\\t\" \\\n+\t\t    \"xor %%r15, %%r15\\n\\t\" \\\n+\t\t    ::: \"rax\", \"rbx\", \"rcx\", \"rdx\", \"rsi\", \"rdi\", \"r8\", \\\n+\t\t    \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\");\n+\n+/* This is the list of registers available for passing arguments. Not all of\n+   these are used or even really available.  */\n+struct IntegerRegisters\n+{\n+  unsigned long rax, rbx, rcx, rdx, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;\n+};\n+struct FloatRegisters\n+{\n+  double mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;\n+  long double st0, st1, st2, st3, st4, st5, st6, st7;\n+  ZMM_T zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7, zmm8, zmm9,\n+        zmm10, zmm11, zmm12, zmm13, zmm14, zmm15, zmm16, zmm17, zmm18,\n+\tzmm19, zmm20, zmm21, zmm22, zmm23, zmm24, zmm25, zmm26, zmm27,\n+\tzmm28, zmm29, zmm30, zmm31;\n+};\n+\n+/* Implemented in scalarargs.c  */\n+extern struct IntegerRegisters iregs;\n+extern struct FloatRegisters fregs;\n+extern unsigned int num_iregs, num_fregs;\n+\n+#define check_int_arguments do { \\\n+  assert (num_iregs <= 0 || iregs.I0 == I0); \\\n+  assert (num_iregs <= 1 || iregs.I1 == I1); \\\n+  assert (num_iregs <= 2 || iregs.I2 == I2); \\\n+  assert (num_iregs <= 3 || iregs.I3 == I3); \\\n+  assert (num_iregs <= 4 || iregs.I4 == I4); \\\n+  assert (num_iregs <= 5 || iregs.I5 == I5); \\\n+  } while (0)\n+\n+#define check_char_arguments check_int_arguments\n+#define check_short_arguments check_int_arguments\n+#define check_long_arguments check_int_arguments\n+\n+/* Clear register struct.  */\n+#define clear_struct_registers \\\n+  rax = rbx = rcx = rdx = rdi = rsi = rbp = rsp \\\n+    = r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = 0; \\\n+  memset (&iregs, 0, sizeof (iregs)); \\\n+  memset (&fregs, 0, sizeof (fregs)); \\\n+  memset (zmm_regs, 0, sizeof (zmm_regs)); \\\n+  memset (x87_regs, 0, sizeof (x87_regs));\n+\n+/* Clear both hardware and register structs for integers.  */\n+#define clear_int_registers \\\n+  clear_struct_registers \\\n+  clear_int_hardware_registers\n+\n+/* TODO: Do the checking.  */\n+#define check_f_arguments(T) do { \\\n+  assert (num_fregs <= 0 || fregs.zmm0._ ## T [0] == zmm_regs[0]._ ## T [0]); \\\n+  assert (num_fregs <= 1 || fregs.zmm1._ ## T [0] == zmm_regs[1]._ ## T [0]); \\\n+  assert (num_fregs <= 2 || fregs.zmm2._ ## T [0] == zmm_regs[2]._ ## T [0]); \\\n+  assert (num_fregs <= 3 || fregs.zmm3._ ## T [0] == zmm_regs[3]._ ## T [0]); \\\n+  assert (num_fregs <= 4 || fregs.zmm4._ ## T [0] == zmm_regs[4]._ ## T [0]); \\\n+  assert (num_fregs <= 5 || fregs.zmm5._ ## T [0] == zmm_regs[5]._ ## T [0]); \\\n+  assert (num_fregs <= 6 || fregs.zmm6._ ## T [0] == zmm_regs[6]._ ## T [0]); \\\n+  assert (num_fregs <= 7 || fregs.zmm7._ ## T [0] == zmm_regs[7]._ ## T [0]); \\\n+  } while (0)\n+\n+#define check_float_arguments check_f_arguments(float)\n+#define check_double_arguments check_f_arguments(double)\n+\n+#define check_vector_arguments(T,O) do { \\\n+  assert (num_fregs <= 0 \\\n+\t  || memcmp (((char *) &fregs.zmm0) + (O), \\\n+\t\t     &zmm_regs[0], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 1 \\\n+\t  || memcmp (((char *) &fregs.zmm1) + (O), \\\n+\t\t     &zmm_regs[1], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 2 \\\n+\t  || memcmp (((char *) &fregs.zmm2) + (O), \\\n+\t\t     &zmm_regs[2], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 3 \\\n+\t  || memcmp (((char *) &fregs.zmm3) + (O), \\\n+\t\t     &zmm_regs[3], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 4 \\\n+\t  || memcmp (((char *) &fregs.zmm4) + (O), \\\n+\t\t     &zmm_regs[4], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 5 \\\n+\t  || memcmp (((char *) &fregs.zmm5) + (O), \\\n+\t\t     &zmm_regs[5], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 6 \\\n+\t  || memcmp (((char *) &fregs.zmm6) + (O), \\\n+\t\t     &zmm_regs[6], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  assert (num_fregs <= 7 \\\n+\t  || memcmp (((char *) &fregs.zmm7) + (O), \\\n+\t\t     &zmm_regs[7], \\\n+\t\t     sizeof (__ ## T) - (O)) == 0); \\\n+  } while (0)\n+\n+#define check_m64_arguments check_vector_arguments(m64, 0)\n+#define check_m128_arguments check_vector_arguments(m128, 0)\n+#define check_m256_arguments check_vector_arguments(m256, 0)\n+#define check_m512_arguments check_vector_arguments(m512, 0)\n+\n+#endif /* INCLUDED_ARGS_H  */"}, {"sha": "0ef82876dd98aea99c4b2c81f8084590474df97f", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/asm-support.S", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fasm-support.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fasm-support.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Fasm-support.S?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,97 @@\n+\t.text\n+\t.p2align 4,,15\n+.globl snapshot\n+\t.type\tsnapshot, @function\n+snapshot:\n+.LFB3:\n+\tmovq\t%rax, rax(%rip)\n+\tmovq\t%rbx, rbx(%rip)\n+\tmovq\t%rcx, rcx(%rip)\n+\tmovq\t%rdx, rdx(%rip)\n+\tmovq\t%rdi, rdi(%rip)\n+\tmovq\t%rsi, rsi(%rip)\n+\tmovq\t%rbp, rbp(%rip)\n+\tmovq\t%rsp, rsp(%rip)\n+\tmovq\t%r8, r8(%rip)\n+\tmovq\t%r9, r9(%rip)\n+\tmovq\t%r10, r10(%rip)\n+\tmovq\t%r11, r11(%rip)\n+\tmovq\t%r12, r12(%rip)\n+\tmovq\t%r13, r13(%rip)\n+\tmovq\t%r14, r14(%rip)\n+\tmovq\t%r15, r15(%rip)\n+\tvmovdqu32 %zmm0, zmm_regs+0(%rip)\n+\tvmovdqu32 %zmm1, zmm_regs+64(%rip)\n+\tvmovdqu32 %zmm2, zmm_regs+128(%rip)\n+\tvmovdqu32 %zmm3, zmm_regs+192(%rip)\n+\tvmovdqu32 %zmm4, zmm_regs+256(%rip)\n+\tvmovdqu32 %zmm5, zmm_regs+320(%rip)\n+\tvmovdqu32 %zmm6, zmm_regs+384(%rip)\n+\tvmovdqu32 %zmm7, zmm_regs+448(%rip)\n+\tvmovdqu32 %zmm8, zmm_regs+512(%rip)\n+\tvmovdqu32 %zmm9, zmm_regs+576(%rip)\n+\tvmovdqu32 %zmm10, zmm_regs+640(%rip)\n+\tvmovdqu32 %zmm11, zmm_regs+704(%rip)\n+\tvmovdqu32 %zmm12, zmm_regs+768(%rip)\n+\tvmovdqu32 %zmm13, zmm_regs+832(%rip)\n+\tvmovdqu32 %zmm14, zmm_regs+896(%rip)\n+\tvmovdqu32 %zmm15, zmm_regs+960(%rip)\n+\tvmovdqu32 %zmm16, zmm_regs+1024(%rip)\n+\tvmovdqu32 %zmm17, zmm_regs+1088(%rip)\n+\tvmovdqu32 %zmm18, zmm_regs+1152(%rip)\n+\tvmovdqu32 %zmm19, zmm_regs+1216(%rip)\n+\tvmovdqu32 %zmm20, zmm_regs+1280(%rip)\n+\tvmovdqu32 %zmm21, zmm_regs+1344(%rip)\n+\tvmovdqu32 %zmm22, zmm_regs+1408(%rip)\n+\tvmovdqu32 %zmm23, zmm_regs+1472(%rip)\n+\tvmovdqu32 %zmm24, zmm_regs+1536(%rip)\n+\tvmovdqu32 %zmm25, zmm_regs+1600(%rip)\n+\tvmovdqu32 %zmm26, zmm_regs+1664(%rip)\n+\tvmovdqu32 %zmm27, zmm_regs+1728(%rip)\n+\tvmovdqu32 %zmm28, zmm_regs+1792(%rip)\n+\tvmovdqu32 %zmm29, zmm_regs+1856(%rip)\n+\tvmovdqu32 %zmm30, zmm_regs+1920(%rip)\n+\tvmovdqu32 %zmm31, zmm_regs+1984(%rip)\n+\tjmp\t*callthis(%rip)\n+.LFE3:\n+\t.size\tsnapshot, .-snapshot\n+\n+\t.p2align 4,,15\n+.globl snapshot_ret\n+\t.type\tsnapshot_ret, @function\n+snapshot_ret:\n+\tmovq\t%rdi, rdi(%rip)\n+\tsubq\t$8, %rsp\n+\tcall\t*callthis(%rip)\n+\taddq\t$8, %rsp\n+\tmovq\t%rax, rax(%rip)\n+\tmovq\t%rdx, rdx(%rip)\n+\tvmovdqu32\t%zmm0, zmm_regs+0(%rip)\n+\tvmovdqu32\t%zmm1, zmm_regs+64(%rip)\n+\tfstpt\tx87_regs(%rip)\n+\tfstpt\tx87_regs+16(%rip)\n+\tfldt\tx87_regs+16(%rip)\n+\tfldt\tx87_regs(%rip)\n+\tret\n+\t.size\tsnapshot_ret, .-snapshot_ret\n+\n+\t.comm\tcallthis,8,8\n+\t.comm\trax,8,8\n+\t.comm\trbx,8,8\n+\t.comm\trcx,8,8\n+\t.comm\trdx,8,8\n+\t.comm\trsi,8,8\n+\t.comm\trdi,8,8\n+\t.comm\trsp,8,8\n+\t.comm\trbp,8,8\n+\t.comm\tr8,8,8\n+\t.comm\tr9,8,8\n+\t.comm\tr10,8,8\n+\t.comm\tr11,8,8\n+\t.comm\tr12,8,8\n+\t.comm\tr13,8,8\n+\t.comm\tr14,8,8\n+\t.comm\tr15,8,8\n+\t.comm\tzmm_regs,2048,64\n+\t.comm\tx87_regs,128,32\n+\t.comm   volatile_var,8,8"}, {"sha": "4b882cc11fca6bc00841d97093f2da321e16a38b", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/avx512fp16-zmm-check.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Favx512fp16-zmm-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Favx512fp16-zmm-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Favx512fp16-zmm-check.h?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,4 @@\n+#define AVX512VL(ebx) 1\n+#define XSTATE_MASK (XSTATE_SSE | XSTATE_YMM | XSTATE_ZMM \\\n+\t\t     | XSTATE_HI_ZMM | XSTATE_OPMASK)\n+#include \"../avx512fp16-check.h\""}, {"sha": "5cb59436cfd1478d9d9cc0c8f05d3991e8732f8e", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/test_m512_returning.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_m512_returning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_m512_returning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_m512_returning.c?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,62 @@\n+#include <stdio.h>\n+#include \"avx512fp16-zmm-check.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+__m512\n+fun_test_returning___m512 (void)\n+{\n+  volatile_var++;\n+  return (__m512){73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+}\n+\n+__m512h\n+fun_test_returning___m512h (void)\n+{\n+  volatile_var++;\n+  return (__m512h){ 1.1f16, 2.2f16, 3.3f16, 4.4f16,\n+                    5.5f16, 6.6f16, 7.7f16, 8.8f16,\n+                    9.9f16,  10.10f16,   11.11f16, 12.12f16,\n+                    13.13f16, 14.14f16,  15.15f16, 16.16f16,\n+                    17.17f16, 18.18f16,  19.19f16, 20.20f16,\n+                    21.21f16, 22.22f16,  23.23f16, 24.24f16,\n+                    25.25f16, 26.26f16,  27.27f16, 28.28f16,\n+                    29.29f16, 30.30f16,  31.31f16, 32.32f16};\n+}\n+\n+__m512 test_512;\n+__m512h test_512h;\n+\n+static void\n+do_test (void)\n+{\n+  unsigned failed = 0;\n+  ZMM_T zmmt1, zmmt2;\n+\n+  clear_struct_registers;\n+  test_512 = (__m512){73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+  zmmt1._m512[0] = test_512;\n+  zmmt2._m512[0] = WRAP_RET (fun_test_returning___m512)();\n+  if (memcmp (&zmmt1, &zmmt2, sizeof (zmmt2)) != 0)\n+    printf (\"fail m512\\n\"), failed++;\n+\n+  clear_struct_registers;\n+  test_512h = (__m512h){ 1.1f16, 2.2f16, 3.3f16, 4.4f16,\n+                         5.5f16, 6.6f16, 7.7f16, 8.8f16,\n+                         9.9f16,  10.10f16,   11.11f16, 12.12f16,\n+                         13.13f16, 14.14f16,  15.15f16, 16.16f16,\n+                         17.17f16, 18.18f16,  19.19f16, 20.20f16,\n+                         21.21f16, 22.22f16,  23.23f16, 24.24f16,\n+                         25.25f16, 26.26f16,  27.27f16, 28.28f16,\n+                         29.29f16, 30.30f16,  31.31f16, 32.32f16};\n+  zmmt1._m512h[0] = test_512h;\n+  zmmt2._m512h[0] = WRAP_RET (fun_test_returning___m512h)();\n+  if (memcmp (&zmmt1, &zmmt2, sizeof (zmmt2)) != 0)\n+    printf (\"fail m512h\\n\"), failed++;\n+\n+  if (failed)\n+    abort ();\n+}"}, {"sha": "ad5ba2e7f92df0397c914952c75e7fbc3c26c8ec", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_m512.c", "status": "added", "additions": 380, "deletions": 0, "changes": 380, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_m512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_m512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_m512.c?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,380 @@\n+#include <stdio.h>\n+#include \"avx512fp16-zmm-check.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+/* This struct holds values for argument checking.  */\n+struct\n+{\n+  ZMM_T i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15,\n+    i16, i17, i18, i19, i20, i21, i22, i23;\n+} values;\n+\n+char *pass;\n+int failed = 0;\n+\n+#undef assert\n+#define assert(c) do { \\\n+  if (!(c)) {failed++; printf (\"failed %s\\n\", pass); } \\\n+} while (0)\n+\n+#define compare(X1,X2,T) do { \\\n+  assert (memcmp (&X1, &X2, sizeof (T)) == 0); \\\n+} while (0)\n+\n+fun_check_passing_m512_8_values (__m512 i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512 i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512 i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512 i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512 i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512 i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512 i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512 i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m512);\n+  compare (values.i1, i1, __m512);\n+  compare (values.i2, i2, __m512);\n+  compare (values.i3, i3, __m512);\n+  compare (values.i4, i4, __m512);\n+  compare (values.i5, i5, __m512);\n+  compare (values.i6, i6, __m512);\n+  compare (values.i7, i7, __m512);\n+}\n+\n+fun_check_passing_m512h_8_values (__m512h i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512h i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512h i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512h i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512h i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512h i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512h i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512h i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m512h);\n+  compare (values.i1, i1, __m512h);\n+  compare (values.i2, i2, __m512h);\n+  compare (values.i3, i3, __m512h);\n+  compare (values.i4, i4, __m512h);\n+  compare (values.i5, i5, __m512h);\n+  compare (values.i6, i6, __m512h);\n+  compare (values.i7, i7, __m512h);\n+}\n+\n+void\n+fun_check_passing_m512_8_regs (__m512 i0 ATTRIBUTE_UNUSED,\n+\t\t\t       __m512 i1 ATTRIBUTE_UNUSED,\n+\t\t\t       __m512 i2 ATTRIBUTE_UNUSED,\n+\t\t\t       __m512 i3 ATTRIBUTE_UNUSED,\n+\t\t\t       __m512 i4 ATTRIBUTE_UNUSED,\n+\t\t\t       __m512 i5 ATTRIBUTE_UNUSED,\n+\t\t\t       __m512 i6 ATTRIBUTE_UNUSED,\n+\t\t\t       __m512 i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+fun_check_passing_m512h_8_regs (__m512h i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512h i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512h i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512h i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512h i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512h i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512h i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512h i7 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+fun_check_passing_m512_20_values (__m512 i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t  __m512 i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m512);\n+  compare (values.i1, i1, __m512);\n+  compare (values.i2, i2, __m512);\n+  compare (values.i3, i3, __m512);\n+  compare (values.i4, i4, __m512);\n+  compare (values.i5, i5, __m512);\n+  compare (values.i6, i6, __m512);\n+  compare (values.i7, i7, __m512);\n+  compare (values.i8, i8, __m512);\n+  compare (values.i9, i9, __m512);\n+  compare (values.i10, i10, __m512);\n+  compare (values.i11, i11, __m512);\n+  compare (values.i12, i12, __m512);\n+  compare (values.i13, i13, __m512);\n+  compare (values.i14, i14, __m512);\n+  compare (values.i15, i15, __m512);\n+  compare (values.i16, i16, __m512);\n+  compare (values.i17, i17, __m512);\n+  compare (values.i18, i18, __m512);\n+  compare (values.i19, i19, __m512);\n+}\n+\n+void\n+fun_check_passing_m512h_20_values (__m512h i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t   __m512h i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check argument values.  */\n+  compare (values.i0, i0, __m512h);\n+  compare (values.i1, i1, __m512h);\n+  compare (values.i2, i2, __m512h);\n+  compare (values.i3, i3, __m512h);\n+  compare (values.i4, i4, __m512h);\n+  compare (values.i5, i5, __m512h);\n+  compare (values.i6, i6, __m512h);\n+  compare (values.i7, i7, __m512h);\n+  compare (values.i8, i8, __m512h);\n+  compare (values.i9, i9, __m512h);\n+  compare (values.i10, i10, __m512h);\n+  compare (values.i11, i11, __m512h);\n+  compare (values.i12, i12, __m512h);\n+  compare (values.i13, i13, __m512h);\n+  compare (values.i14, i14, __m512h);\n+  compare (values.i15, i15, __m512h);\n+  compare (values.i16, i16, __m512h);\n+  compare (values.i17, i17, __m512h);\n+  compare (values.i18, i18, __m512h);\n+  compare (values.i19, i19, __m512h);\n+}\n+\n+void\n+fun_check_passing_m512_20_regs (__m512 i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t__m512 i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+fun_check_passing_m512h_20_regs (__m512h i0 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i1 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i2 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i3 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i4 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i5 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i6 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i7 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i8 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i9 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i10 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i11 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i12 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i13 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i14 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i15 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i16 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i17 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i18 ATTRIBUTE_UNUSED,\n+\t\t\t\t __m512h i19 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+#define def_check_passing8(_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7, _func1, _func2, TYPE) \\\n+  values.i0.TYPE[0] = _i0; \\\n+  values.i1.TYPE[0] = _i1; \\\n+  values.i2.TYPE[0] = _i2; \\\n+  values.i3.TYPE[0] = _i3; \\\n+  values.i4.TYPE[0] = _i4; \\\n+  values.i5.TYPE[0] = _i5; \\\n+  values.i6.TYPE[0] = _i6; \\\n+  values.i7.TYPE[0] = _i7; \\\n+  WRAP_CALL(_func1) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7); \\\n+  \\\n+  clear_struct_registers; \\\n+  fregs.F0.TYPE[0] = _i0; \\\n+  fregs.F1.TYPE[0] = _i1; \\\n+  fregs.F2.TYPE[0] = _i2; \\\n+  fregs.F3.TYPE[0] = _i3; \\\n+  fregs.F4.TYPE[0] = _i4; \\\n+  fregs.F5.TYPE[0] = _i5; \\\n+  fregs.F6.TYPE[0] = _i6; \\\n+  fregs.F7.TYPE[0] = _i7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7);\n+\n+#define def_check_passing20(_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7, _i8, _i9, \\\n+\t\t\t    _i10, _i11, _i12, _i13, _i14, _i15, _i16, _i17, \\\n+\t\t\t    _i18, _i19, _func1, _func2, TYPE) \\\n+  values.i0.TYPE[0] = _i0; \\\n+  values.i1.TYPE[0] = _i1; \\\n+  values.i2.TYPE[0] = _i2; \\\n+  values.i3.TYPE[0] = _i3; \\\n+  values.i4.TYPE[0] = _i4; \\\n+  values.i5.TYPE[0] = _i5; \\\n+  values.i6.TYPE[0] = _i6; \\\n+  values.i7.TYPE[0] = _i7; \\\n+  values.i8.TYPE[0] = _i8; \\\n+  values.i9.TYPE[0] = _i9; \\\n+  values.i10.TYPE[0] = _i10; \\\n+  values.i11.TYPE[0] = _i11; \\\n+  values.i12.TYPE[0] = _i12; \\\n+  values.i13.TYPE[0] = _i13; \\\n+  values.i14.TYPE[0] = _i14; \\\n+  values.i15.TYPE[0] = _i15; \\\n+  values.i16.TYPE[0] = _i16; \\\n+  values.i17.TYPE[0] = _i17; \\\n+  values.i18.TYPE[0] = _i18; \\\n+  values.i19.TYPE[0] = _i19; \\\n+  WRAP_CALL(_func1) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7, _i8, _i9, \\\n+\t\t     _i10, _i11, _i12, _i13, _i14, _i15, _i16, _i17, \\\n+\t\t     _i18, _i19); \\\n+  \\\n+  clear_struct_registers; \\\n+  fregs.F0.TYPE[0] = _i0; \\\n+  fregs.F1.TYPE[0] = _i1; \\\n+  fregs.F2.TYPE[0] = _i2; \\\n+  fregs.F3.TYPE[0] = _i3; \\\n+  fregs.F4.TYPE[0] = _i4; \\\n+  fregs.F5.TYPE[0] = _i5; \\\n+  fregs.F6.TYPE[0] = _i6; \\\n+  fregs.F7.TYPE[0] = _i7; \\\n+  num_fregs = 8; \\\n+  WRAP_CALL(_func2) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7, _i8, _i9, \\\n+\t\t     _i10, _i11, _i12, _i13, _i14, _i15, _i16, _i17, \\\n+\t\t     _i18, _i19);\n+\n+void\n+test_m512_on_stack ()\n+{\n+  __m512 x[8];\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    x[i] = (__m512){32 + i, 0, 0, 0, 0, 0, 0, 0};\n+  pass = \"m512-8\";\n+  def_check_passing8 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+\t\t      fun_check_passing_m512_8_values,\n+\t\t      fun_check_passing_m512_8_regs, _m512);\n+}\n+\n+void\n+test_m512h_on_stack ()\n+{\n+  __m512h x[8];\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    x[i] = (__m512h){1.1f16 + i, 2.2f16 + i, 3.3f16 + i, 4.4f16 + i,\n+\t\t     5.5f16 + i, 6.6f16 + i, 7.7f16 + i, 8.8f16 + i,\n+\t\t     9.9f16 + i, 10.10f16 + i, 11.11f16 + i, 12.12f16 + i,\n+\t\t     13.13f16 + i, 14.14f16 + i, 15.15f16 + i, 16.16f16 + i,\n+\t\t     17.17f16 + i, 18.18f16 + i, 19.19f16 + i, 20.20f16 + i,\n+\t\t     21.21f16 + i, 22.22f16 + i, 23.23f16 + i, 24.24f16 + i,\n+\t\t     25.25f16 + i, 26.26f16 + i, 27.27f16 + i, 28.28f16 + i,\n+\t\t     29.29f16 + i, 30.30f16 + i, 31.31f16 + i, 32.32f16 + i};\n+\n+  pass = \"m512h-8\";\n+  def_check_passing8 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+\t\t      fun_check_passing_m512h_8_values,\n+\t\t      fun_check_passing_m512h_8_regs, _m512h);\n+}\n+\n+void\n+test_too_many_m512 ()\n+{\n+  __m512 x[20];\n+  int i;\n+  for (i = 0; i < 20; i++)\n+    x[i] = (__m512){32 + i, 0, 0, 0, 0, 0, 0, 0};\n+  pass = \"m512-20\";\n+  def_check_passing20 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8],\n+\t\t       x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16],\n+\t\t       x[17], x[18], x[19], fun_check_passing_m512_20_values,\n+\t\t       fun_check_passing_m512_20_regs, _m512);\n+}\n+\n+void\n+test_too_many_m512h ()\n+{\n+  __m512h x[20];\n+  int i;\n+  for (i = 0; i < 20; i++)\n+    x[i] = (__m512h){ 1.1f16 + i, 2.2f16 + i, 3.3f16 + i, 4.4f16 + i,\n+\t\t      5.5f16 + i, 6.6f16 + i, 7.7f16 + i, 8.8f16 + i,\n+\t\t      9.9f16 + i, 10.10f16 + i, 11.11f16 + i, 12.12f16 + i,\n+\t\t      13.13f16 + i, 14.14f16 + i, 15.15f16 + i, 16.16f16 + i,\n+\t\t      17.17f16 + i, 18.18f16 + i, 19.19f16 + i, 20.20f16 + i,\n+\t\t      21.21f16 + i, 22.22f16 + i, 23.23f16 + i, 24.24f16 + i,\n+\t\t      25.25f16 + i, 26.26f16 + i, 27.27f16 + i, 28.28f16 + i,\n+\t\t      29.29f16 + i, 30.30f16 + i, 31.31f16 + i, 32.32f16 + i};\n+  pass = \"m512h-20\";\n+  def_check_passing20 (x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8],\n+\t\t       x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16],\n+\t\t       x[17], x[18], x[19], fun_check_passing_m512h_20_values,\n+\t\t       fun_check_passing_m512h_20_regs, _m512h);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  test_m512_on_stack ();\n+  test_too_many_m512 ();\n+  test_m512h_on_stack ();\n+  test_too_many_m512h ();\n+  if (failed)\n+    abort ();\n+}"}, {"sha": "734e0f8e9e9880815d8a9badd0226709e507f0dd", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_structs.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_structs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_structs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_structs.c?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,123 @@\n+#include \"avx512fp16-zmm-check.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+struct m512_struct\n+{\n+  __m512 x;\n+};\n+\n+struct m512h_struct\n+{\n+  __m512h x;\n+};\n+\n+struct m512_2_struct\n+{\n+  __m512 x1, x2;\n+};\n+\n+struct m512h_2_struct\n+{\n+  __m512h x1, x2;\n+};\n+\n+/* Check that the struct is passed as the individual members in fregs.  */\n+void\n+check_struct_passing1 (struct m512_struct ms1 ATTRIBUTE_UNUSED,\n+\t\t       struct m512_struct ms2 ATTRIBUTE_UNUSED,\n+\t\t       struct m512_struct ms3 ATTRIBUTE_UNUSED,\n+\t\t       struct m512_struct ms4 ATTRIBUTE_UNUSED,\n+\t\t       struct m512_struct ms5 ATTRIBUTE_UNUSED,\n+\t\t       struct m512_struct ms6 ATTRIBUTE_UNUSED,\n+\t\t       struct m512_struct ms7 ATTRIBUTE_UNUSED,\n+\t\t       struct m512_struct ms8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_struct_passing1h (struct m512h_struct ms1 ATTRIBUTE_UNUSED,\n+\t\t\tstruct m512h_struct ms2 ATTRIBUTE_UNUSED,\n+\t\t\tstruct m512h_struct ms3 ATTRIBUTE_UNUSED,\n+\t\t\tstruct m512h_struct ms4 ATTRIBUTE_UNUSED,\n+\t\t\tstruct m512h_struct ms5 ATTRIBUTE_UNUSED,\n+\t\t\tstruct m512h_struct ms6 ATTRIBUTE_UNUSED,\n+\t\t\tstruct m512h_struct ms7 ATTRIBUTE_UNUSED,\n+\t\t\tstruct m512h_struct ms8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_struct_passing2 (struct m512_2_struct ms ATTRIBUTE_UNUSED)\n+{\n+  /* Check the passing on the stack by comparing the address of the\n+     stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&ms.x1 == rsp+8);\n+  assert ((unsigned long)&ms.x2 == rsp+72);\n+}\n+\n+void\n+check_struct_passing2h (struct m512h_2_struct ms ATTRIBUTE_UNUSED)\n+{\n+  /* Check the passing on the stack by comparing the address of the\n+     stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&ms.x1 == rsp+8);\n+  assert ((unsigned long)&ms.x2 == rsp+72);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  struct m512_struct m512s [8];\n+  struct m512h_struct m512hs [8];\n+  struct m512_2_struct m512_2s = {\n+      { 48.394, 39.3, -397.9, 3484.9, -8.394, -93.3, 7.9, 84.94,\n+\t48.3941, 39.31, -397.91, 3484.91, -8.3941, -93.31, 7.91, 84.941 },\n+      { -8.394, -3.3, -39.9, 34.9, 7.9, 84.94, -48.394, 39.3,\n+\t-8.3942, -3.32, -39.92, 34.92, 7.92, 84.942, -48.3942, 39.32 }\n+  };\n+  struct m512h_2_struct m512h_2s = {\n+      { 58.395f16, 39.3f16, -397.9f16, 3585.9f16, -8.395f16, -93.3f16, 7.9f16, 85.95f16,\n+        58.395f16, 39.3f16, -397.9f16, 3585.9f16, -8.395f16, -93.3f16, 7.9f16, 85.95f16,\n+        58.395f16, 39.3f16, -397.9f16, 3585.9f16, -8.395f16, -93.3f16, 7.9f16, 85.95f16,\n+\t58.3951f16, 39.31f16, -397.91f16, 3585.91f16, -8.3951f16, -93.31f16, 7.91f16, 85.951f16},\n+      { 67.396f16, 39.3f16, -397.9f16, 3676.9f16, -7.396f16, -93.3f16, 7.9f16, 76.96f16,\n+        67.396f16, 39.3f16, -397.9f16, 3676.9f16, -7.396f16, -93.3f16, 7.9f16, 76.96f16,\n+        67.396f16, 39.3f16, -397.9f16, 3676.9f16, -7.396f16, -93.3f16, 7.9f16, 76.96f16,\n+\t67.3961f16, 39.31f16, -397.91f16, 3676.91f16, -7.3961f16, -93.31f16, 7.91f16, 76.961f16},\n+  };\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      m512s[i].x = (__m512){32+i, 0, i, 0, -i, 0, i - 12, i + 8,\n+\t\t\t    32+i, 0, i, 0, -i, 0, i - 12, i + 8};\n+      m512hs[i].x = (__m512h){33+i, 1, i, 2, -i, 0, i - 15, i + 9,\n+\t\t\t      34+i, 1, i, 2, -i, 0, i - 15, i + 9,\n+\t\t\t      35+i, 1, i, 2, -i, 0, i - 15, i + 9,\n+\t\t\t      36+i, 1, i, 2, -i, 0, i - 15, i + 9};\n+    }\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    (&fregs.zmm0)[i]._m512[0] = m512s[i].x;\n+  num_fregs = 8;\n+  WRAP_CALL (check_struct_passing1)(m512s[0], m512s[1], m512s[2], m512s[3],\n+\t\t\t\t    m512s[4], m512s[5], m512s[6], m512s[7]);\n+  WRAP_CALL (check_struct_passing2)(m512_2s);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    (&fregs.zmm0)[i]._m512h[0] = m512hs[i].x;\n+  num_fregs = 8;\n+  WRAP_CALL (check_struct_passing1h)(m512hs[0], m512hs[1], m512hs[2], m512hs[3],\n+\t\t\t\t    m512hs[4], m512hs[5], m512hs[6], m512hs[7]);\n+  WRAP_CALL (check_struct_passing2h)(m512h_2s);\n+}"}, {"sha": "fa801fbf7ce8d26a3933f4af323b614ff91d5752", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_unions.c", "status": "added", "additions": 415, "deletions": 0, "changes": 415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_unions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_unions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_passing_unions.c?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,415 @@\n+#include \"avx512fp16-zmm-check.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+unsigned int num_iregs, num_fregs;\n+\n+union un1\n+{\n+  __m512 x;\n+  float f;\n+};\n+\n+union un2\n+{\n+  __m512 x;\n+  double d;\n+};\n+\n+union un3\n+{\n+  __m512 x;\n+  __m128 v;\n+};\n+\n+union un4\n+{\n+  __m512 x;\n+  long double ld;\n+};\n+\n+union un5\n+{\n+  __m512 x;\n+  int i;\n+};\n+\n+union un6\n+{\n+  __m512 x;\n+  __m256 v;\n+};\n+\n+union un1h\n+{\n+  __m512 x;\n+  _Float16 f;\n+};\n+\n+union un1hf\n+{\n+  __m512h x;\n+  float f;\n+};\n+\n+union un1hh\n+{\n+  __m512h x;\n+  _Float16 f;\n+};\n+\n+union un2h\n+{\n+  __m512h x;\n+  double d;\n+};\n+\n+union un3h\n+{\n+  __m512h x;\n+  __m128 v;\n+};\n+\n+union un4h\n+{\n+  __m512h x;\n+  long double ld;\n+};\n+\n+union un5h\n+{\n+  __m512h x;\n+  int i;\n+};\n+\n+union un6h\n+{\n+  __m512h x;\n+  __m256 v;\n+};\n+\n+void\n+check_union_passing1(union un1 u1 ATTRIBUTE_UNUSED,\n+\t\t     union un1 u2 ATTRIBUTE_UNUSED,\n+\t\t     union un1 u3 ATTRIBUTE_UNUSED,\n+\t\t     union un1 u4 ATTRIBUTE_UNUSED,\n+\t\t     union un1 u5 ATTRIBUTE_UNUSED,\n+\t\t     union un1 u6 ATTRIBUTE_UNUSED,\n+\t\t     union un1 u7 ATTRIBUTE_UNUSED,\n+\t\t     union un1 u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_union_passing1h(union un1h u1 ATTRIBUTE_UNUSED,\n+\t\t      union un1h u2 ATTRIBUTE_UNUSED,\n+\t\t      union un1h u3 ATTRIBUTE_UNUSED,\n+\t\t      union un1h u4 ATTRIBUTE_UNUSED,\n+\t\t      union un1h u5 ATTRIBUTE_UNUSED,\n+\t\t      union un1h u6 ATTRIBUTE_UNUSED,\n+\t\t      union un1h u7 ATTRIBUTE_UNUSED,\n+\t\t      union un1h u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_union_passing1hf(union un1hf u1 ATTRIBUTE_UNUSED,\n+\t\t       union un1hf u2 ATTRIBUTE_UNUSED,\n+\t\t       union un1hf u3 ATTRIBUTE_UNUSED,\n+\t\t       union un1hf u4 ATTRIBUTE_UNUSED,\n+\t\t       union un1hf u5 ATTRIBUTE_UNUSED,\n+\t\t       union un1hf u6 ATTRIBUTE_UNUSED,\n+\t\t       union un1hf u7 ATTRIBUTE_UNUSED,\n+\t\t       union un1hf u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_union_passing1hh(union un1hh u1 ATTRIBUTE_UNUSED,\n+\t\t       union un1hh u2 ATTRIBUTE_UNUSED,\n+\t\t       union un1hh u3 ATTRIBUTE_UNUSED,\n+\t\t       union un1hh u4 ATTRIBUTE_UNUSED,\n+\t\t       union un1hh u5 ATTRIBUTE_UNUSED,\n+\t\t       union un1hh u6 ATTRIBUTE_UNUSED,\n+\t\t       union un1hh u7 ATTRIBUTE_UNUSED,\n+\t\t       union un1hh u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+\n+void\n+check_union_passing2(union un2 u1 ATTRIBUTE_UNUSED,\n+\t\t     union un2 u2 ATTRIBUTE_UNUSED,\n+\t\t     union un2 u3 ATTRIBUTE_UNUSED,\n+\t\t     union un2 u4 ATTRIBUTE_UNUSED,\n+\t\t     union un2 u5 ATTRIBUTE_UNUSED,\n+\t\t     union un2 u6 ATTRIBUTE_UNUSED,\n+\t\t     union un2 u7 ATTRIBUTE_UNUSED,\n+\t\t     union un2 u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_union_passing2h(union un2h u1 ATTRIBUTE_UNUSED,\n+\t\t      union un2h u2 ATTRIBUTE_UNUSED,\n+\t\t      union un2h u3 ATTRIBUTE_UNUSED,\n+\t\t      union un2h u4 ATTRIBUTE_UNUSED,\n+\t\t      union un2h u5 ATTRIBUTE_UNUSED,\n+\t\t      union un2h u6 ATTRIBUTE_UNUSED,\n+\t\t      union un2h u7 ATTRIBUTE_UNUSED,\n+\t\t      union un2h u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_union_passing3(union un3 u1 ATTRIBUTE_UNUSED,\n+\t\t     union un3 u2 ATTRIBUTE_UNUSED,\n+\t\t     union un3 u3 ATTRIBUTE_UNUSED,\n+\t\t     union un3 u4 ATTRIBUTE_UNUSED,\n+\t\t     union un3 u5 ATTRIBUTE_UNUSED,\n+\t\t     union un3 u6 ATTRIBUTE_UNUSED,\n+\t\t     union un3 u7 ATTRIBUTE_UNUSED,\n+\t\t     union un3 u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_union_passing3h(union un3h u1 ATTRIBUTE_UNUSED,\n+\t\t      union un3h u2 ATTRIBUTE_UNUSED,\n+\t\t      union un3h u3 ATTRIBUTE_UNUSED,\n+\t\t      union un3h u4 ATTRIBUTE_UNUSED,\n+\t\t      union un3h u5 ATTRIBUTE_UNUSED,\n+\t\t      union un3h u6 ATTRIBUTE_UNUSED,\n+\t\t      union un3h u7 ATTRIBUTE_UNUSED,\n+\t\t      union un3h u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_union_passing4(union un4 u ATTRIBUTE_UNUSED)\n+{\n+   /* Check the passing on the stack by comparing the address of the\n+      stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&u.x == rsp+8);\n+  assert ((unsigned long)&u.ld == rsp+8);\n+}\n+\n+void\n+check_union_passing4h(union un4h u ATTRIBUTE_UNUSED)\n+{\n+   /* Check the passing on the stack by comparing the address of the\n+      stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&u.x == rsp+8);\n+  assert ((unsigned long)&u.ld == rsp+8);\n+}\n+\n+void\n+check_union_passing5(union un5 u ATTRIBUTE_UNUSED)\n+{\n+   /* Check the passing on the stack by comparing the address of the\n+      stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&u.x == rsp+8);\n+  assert ((unsigned long)&u.i == rsp+8);\n+}\n+\n+void\n+check_union_passing5h(union un5h u ATTRIBUTE_UNUSED)\n+{\n+   /* Check the passing on the stack by comparing the address of the\n+      stack elements to the expected place on the stack.  */\n+  assert ((unsigned long)&u.x == rsp+8);\n+  assert ((unsigned long)&u.i == rsp+8);\n+}\n+\n+void\n+check_union_passing6(union un6 u1 ATTRIBUTE_UNUSED,\n+\t\t     union un6 u2 ATTRIBUTE_UNUSED,\n+\t\t     union un6 u3 ATTRIBUTE_UNUSED,\n+\t\t     union un6 u4 ATTRIBUTE_UNUSED,\n+\t\t     union un6 u5 ATTRIBUTE_UNUSED,\n+\t\t     union un6 u6 ATTRIBUTE_UNUSED,\n+\t\t     union un6 u7 ATTRIBUTE_UNUSED,\n+\t\t     union un6 u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+void\n+check_union_passing6h(union un6h u1 ATTRIBUTE_UNUSED,\n+\t\t      union un6h u2 ATTRIBUTE_UNUSED,\n+\t\t      union un6h u3 ATTRIBUTE_UNUSED,\n+\t\t      union un6h u4 ATTRIBUTE_UNUSED,\n+\t\t      union un6h u5 ATTRIBUTE_UNUSED,\n+\t\t      union un6h u6 ATTRIBUTE_UNUSED,\n+\t\t      union un6h u7 ATTRIBUTE_UNUSED,\n+\t\t      union un6h u8 ATTRIBUTE_UNUSED)\n+{\n+  /* Check register contents.  */\n+  check_m512_arguments;\n+}\n+\n+#define check_union_passing1 WRAP_CALL(check_union_passing1)\n+#define check_union_passing2 WRAP_CALL(check_union_passing2)\n+#define check_union_passing3 WRAP_CALL(check_union_passing3)\n+#define check_union_passing4 WRAP_CALL(check_union_passing4)\n+#define check_union_passing5 WRAP_CALL(check_union_passing5)\n+#define check_union_passing6 WRAP_CALL(check_union_passing6)\n+\n+#define check_union_passing1h WRAP_CALL(check_union_passing1h)\n+#define check_union_passing1hf WRAP_CALL(check_union_passing1hf)\n+#define check_union_passing1hh WRAP_CALL(check_union_passing1hh)\n+#define check_union_passing2h WRAP_CALL(check_union_passing2h)\n+#define check_union_passing3h WRAP_CALL(check_union_passing3h)\n+#define check_union_passing4h WRAP_CALL(check_union_passing4h)\n+#define check_union_passing5h WRAP_CALL(check_union_passing5h)\n+#define check_union_passing6h WRAP_CALL(check_union_passing6h)\n+\n+\n+static void\n+do_test (void)\n+{\n+  union un1 u1[8];\n+  union un2 u2[8];\n+  union un3 u3[8];\n+  union un4 u4;\n+  union un5 u5;\n+  union un6 u6[8];\n+  union un1h u1h[8];\n+  union un1hf u1hf[8];\n+  union un1hh u1hh[8];\n+  union un2h u2h[8];\n+  union un3h u3h[8];\n+  union un4h u4h;\n+  union un5h u5h;\n+  union un6h u6h[8];\n+   int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      u1[i].x = (__m512){32+i, 0, i, 0, -i, 0, i - 12, i + 8,\n+\t                 32+i, 0, i, 0, -i, 0, i - 12, i + 8};\n+\n+      u1hf[i].x =  (__m512h){ 33+i, 1, i, 2, -i, 0, i - 15, i + 9,\n+                              34+i, 1, i, 2, -i, 0, i - 15, i + 9,\n+                              35+i, 1, i, 2, -i, 0, i - 15, i + 9,\n+                              36+i, 1, i, 2, -i, 0, i - 15, i + 9};\n+    }\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    (&fregs.zmm0)[i]._m512[0] = u1[i].x;\n+  num_fregs = 8;\n+  check_union_passing1(u1[0], u1[1], u1[2], u1[3],\n+\t\t       u1[4], u1[5], u1[6], u1[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u1h[i].x = u1[i].x;\n+      (&fregs.zmm0)[i]._m512[0] = u1h[i].x;\n+    }\n+  num_fregs = 8;\n+  check_union_passing1h(u1h[0], u1h[1], u1h[2], u1h[3],\n+\t\t        u1h[4], u1h[5], u1h[6], u1h[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    (&fregs.zmm0)[i]._m512h[0] = u1hf[i].x;\n+  num_fregs = 8;\n+  check_union_passing1hf(u1hf[0], u1hf[1], u1hf[2], u1hf[3],\n+\t\t         u1hf[4], u1hf[5], u1hf[6], u1hf[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u1hh[i].x = u1hf[i].x;\n+      (&fregs.zmm0)[i]._m512h[0] = u1hh[i].x;\n+    }\n+  num_fregs = 8;\n+  check_union_passing1hh(u1hh[0], u1hh[1], u1hh[2], u1hh[3],\n+\t\t         u1hh[4], u1hh[5], u1hh[6], u1hh[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u2[i].x = u1[i].x;\n+      (&fregs.zmm0)[i]._m512[0] = u2[i].x;\n+    }\n+  num_fregs = 8;\n+  check_union_passing2(u2[0], u2[1], u2[2], u2[3],\n+\t\t       u2[4], u2[5], u2[6], u2[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u2h[i].x = u1hf[i].x;\n+      (&fregs.zmm0)[i]._m512h[0] = u2h[i].x;\n+    }\n+  num_fregs = 8;\n+  check_union_passing2h(u2h[0], u2h[1], u2h[2], u2h[3],\n+\t\t        u2h[4], u2h[5], u2h[6], u2h[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u3[i].x = u1[i].x;\n+      (&fregs.zmm0)[i]._m512[0] = u3[i].x;\n+    }\n+  num_fregs = 8;\n+  check_union_passing3(u3[0], u3[1], u3[2], u3[3],\n+\t\t       u3[4], u3[5], u3[6], u3[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u3h[i].x = u1hf[i].x;\n+      (&fregs.zmm0)[i]._m512h[0] = u3h[i].x;\n+    }\n+  num_fregs = 8;\n+  check_union_passing3h(u3h[0], u3h[1], u3h[2], u3h[3],\n+\t\t        u3h[4], u3h[5], u3h[6], u3h[7]);\n+\n+  check_union_passing4(u4);\n+  check_union_passing5(u5);\n+\n+  check_union_passing4h(u4h);\n+  check_union_passing5h(u5h);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u6[i].x = u1[i].x;\n+      (&fregs.zmm0)[i]._m512[0] = u6[i].x;\n+    }\n+  num_fregs = 8;\n+  check_union_passing6(u6[0], u6[1], u6[2], u6[3],\n+\t\t       u6[4], u6[5], u6[6], u6[7]);\n+\n+  clear_struct_registers;\n+  for (i = 0; i < 8; i++)\n+    {\n+      u6h[i].x = u1hf[i].x;\n+      (&fregs.zmm0)[i]._m512h[0] = u6h[i].x;\n+    }\n+  num_fregs = 8;\n+  check_union_passing6h(u6h[0], u6h[1], u6h[2], u6h[3],\n+\t\t        u6h[4], u6h[5], u6h[6], u6h[7]);\n+}"}, {"sha": "e6d165a82474ebadc846f34b410190e11b1ed553", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512fp16/m512h/test_varargs-m512.c", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_varargs-m512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a61bcaca074e967f694b30b484671aaeec190ff/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_varargs-m512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512fp16%2Fm512h%2Ftest_varargs-m512.c?ref=4a61bcaca074e967f694b30b484671aaeec190ff", "patch": "@@ -0,0 +1,164 @@\n+/* Test variable number of 512-bit vector arguments passed to functions.  */\n+\n+#include <stdio.h>\n+#include \"avx512fp16-zmm-check.h\"\n+#include \"args.h\"\n+\n+struct IntegerRegisters iregs;\n+struct FloatRegisters fregs;\n+\n+/* This struct holds values for argument checking.  */\n+struct \n+{\n+  ZMM_T i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;\n+} values;\n+\n+char *pass;\n+int failed = 0;\n+\n+#undef assert\n+#define assert(c) do { \\\n+  if (!(c)) {failed++; printf (\"failed %s\\n\", pass); } \\\n+} while (0)\n+\n+#define compare(X1,X2,T) do { \\\n+  assert (memcmp (&X1, &X2, sizeof (T)) == 0); \\\n+} while (0)\n+\n+void\n+fun_check_passing_m512_varargs (__m512 i0, __m512 i1, __m512 i2,\n+\t\t\t\t__m512 i3, ...)\n+{\n+  /* Check argument values.  */\n+  void **fp = __builtin_frame_address (0);\n+  void *ra = __builtin_return_address (0);\n+  __m512 *argp;\n+\n+  compare (values.i0, i0, __m512);\n+  compare (values.i1, i1, __m512);\n+  compare (values.i2, i2, __m512);\n+  compare (values.i3, i3, __m512);\n+\n+  /* Get the pointer to the return address on stack.  */\n+  while (*fp != ra)\n+    fp++;\n+\n+  /* Skip the return address stack slot.  */\n+  argp = (__m512 *)(((char *) fp) + 8);\n+\n+  /* Check __m512 arguments passed on stack.  */\n+  compare (values.i4, argp[0], __m512);\n+  compare (values.i5, argp[1], __m512);\n+  compare (values.i6, argp[2], __m512);\n+  compare (values.i7, argp[3], __m512);\n+  compare (values.i8, argp[4], __m512);\n+  compare (values.i9, argp[5], __m512);\n+\n+  /* Check register contents.  */\n+  compare (fregs.zmm0, zmm_regs[0], __m512);\n+  compare (fregs.zmm1, zmm_regs[1], __m512);\n+  compare (fregs.zmm2, zmm_regs[2], __m512);\n+  compare (fregs.zmm3, zmm_regs[3], __m512);\n+}\n+\n+void\n+fun_check_passing_m512h_varargs (__m512h i0, __m512h i1, __m512h i2,\n+\t\t\t\t __m512h i3, ...)\n+{\n+  /* Check argument values.  */\n+  void **fp = __builtin_frame_address (0);\n+  void *ra = __builtin_return_address (0);\n+  __m512h *argp;\n+\n+  compare (values.i0, i0, __m512h);\n+  compare (values.i1, i1, __m512h);\n+  compare (values.i2, i2, __m512h);\n+  compare (values.i3, i3, __m512h);\n+\n+  /* Get the pointer to the return address on stack.  */\n+  while (*fp != ra)\n+    fp++;\n+\n+  /* Skip the return address stack slot.  */\n+  argp = (__m512h *)(((char *) fp) + 8);\n+\n+  /* Check __m512h arguments passed on stack.  */\n+  compare (values.i4, argp[0], __m512h);\n+  compare (values.i5, argp[1], __m512h);\n+  compare (values.i6, argp[2], __m512h);\n+  compare (values.i7, argp[3], __m512h);\n+  compare (values.i8, argp[4], __m512h);\n+  compare (values.i9, argp[5], __m512h);\n+\n+  /* Check register contents.  */\n+  compare (fregs.zmm0, zmm_regs[0], __m512h);\n+  compare (fregs.zmm1, zmm_regs[1], __m512h);\n+  compare (fregs.zmm2, zmm_regs[2], __m512h);\n+  compare (fregs.zmm3, zmm_regs[3], __m512h);\n+}\n+\n+#define def_check_int_passing_varargs(_i0, _i1, _i2, _i3, _i4, _i5, \\\n+\t\t\t\t      _i6, _i7, _i8, _i9, \\\n+\t\t\t\t      _func, TYPE) \\\n+  values.i0.TYPE[0] = _i0; \\\n+  values.i1.TYPE[0] = _i1; \\\n+  values.i2.TYPE[0] = _i2; \\\n+  values.i3.TYPE[0] = _i3; \\\n+  values.i4.TYPE[0] = _i4; \\\n+  values.i5.TYPE[0] = _i5; \\\n+  values.i6.TYPE[0] = _i6; \\\n+  values.i7.TYPE[0] = _i7; \\\n+  values.i8.TYPE[0] = _i8; \\\n+  values.i9.TYPE[0] = _i9; \\\n+  clear_struct_registers; \\\n+  fregs.F0.TYPE[0] = _i0; \\\n+  fregs.F1.TYPE[0] = _i1; \\\n+  fregs.F2.TYPE[0] = _i2; \\\n+  fregs.F3.TYPE[0] = _i3; \\\n+  WRAP_CALL(_func) (_i0, _i1, _i2, _i3, _i4, _i5, _i6, _i7, _i8, _i9);\n+\n+void\n+test_m512_varargs (void)\n+{\n+  __m512 x[10];\n+  int i;\n+  for (i = 0; i < 10; i++)\n+    x[i] = (__m512){32+i, 0, 0, 0, 0, 0, 0, 0};\n+  pass = \"m512-varargs\";\n+  def_check_int_passing_varargs (x[0], x[1], x[2], x[3], x[4], x[5],\n+\t\t\t\t x[6], x[7], x[8], x[9],\n+\t\t\t\t fun_check_passing_m512_varargs,\n+\t\t\t\t _m512);\n+}\n+\n+void\n+test_m512h_varargs (void)\n+{\n+  __m512h x[10];\n+  int i;\n+  for (i = 0; i < 10; i++)\n+    x[i] = (__m512h) {\n+        1.1f16 + i, 2.2f16 + i, 3.3f16 + i, 4.4f16 + i,\n+\t5.5f16 + i, 6.6f16 + i, 7.7f16 + i, 8.8f16 + i,\n+\t9.9f16 + i, 10.10f16 + i, 11.11f16 + i, 12.12f16 + i,\n+\t13.13f16 + i, 14.14f16 + i, 15.15f16 + i, 16.16f16 + i,\n+\t17.17f16 + i, 18.18f16 + i, 19.19f16 + i, 20.20f16 + i,\n+\t21.21f16 + i, 22.22f16 + i, 23.23f16 + i, 24.24f16 + i,\n+\t25.25f16 + i, 26.26f16 + i, 27.27f16 + i, 28.28f16 + i,\n+\t29.29f16 + i, 30.30f16 + i, 31.31f16 + i, 32.32f16 + i\n+    };\n+  pass = \"m512h-varargs\";\n+  def_check_int_passing_varargs (x[0], x[1], x[2], x[3], x[4], x[5],\n+\t\t\t\t x[6], x[7], x[8], x[9],\n+\t\t\t\t fun_check_passing_m512h_varargs,\n+\t\t\t\t _m512h);\n+}\n+\n+void\n+do_test (void)\n+{\n+  test_m512_varargs ();\n+  test_m512h_varargs ();\n+  if (failed)\n+    abort ();\n+}"}]}