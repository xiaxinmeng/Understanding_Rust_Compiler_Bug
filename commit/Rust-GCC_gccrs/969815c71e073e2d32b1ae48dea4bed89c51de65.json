{"sha": "969815c71e073e2d32b1ae48dea4bed89c51de65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5ODE1YzcxZTA3M2UyZDMyYjFhZTQ4ZGVhNGJlZDg5YzUxZGU2NQ==", "commit": {"author": {"name": "Christopher Faylor", "email": "cgf@redhat.com", "date": "2002-01-14T19:45:11Z"}, "committer": {"name": "Christopher Faylor", "email": "cgf@gcc.gnu.org", "date": "2002-01-14T19:45:11Z"}, "message": "cppfiles.c (TEST_THRESHOLD): New macro.\n\n* cppfiles.c (TEST_THRESHOLD): New macro.\n(SHOULD_MMAP): Ditto.\n(read_include_file): Use SHOULD_MMAP macro to decide when mmap should be used.\n\nFrom-SVN: r48840", "tree": {"sha": "b91455dba9605013f85cce00dd4210d4073e5002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b91455dba9605013f85cce00dd4210d4073e5002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/969815c71e073e2d32b1ae48dea4bed89c51de65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969815c71e073e2d32b1ae48dea4bed89c51de65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/969815c71e073e2d32b1ae48dea4bed89c51de65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969815c71e073e2d32b1ae48dea4bed89c51de65/comments", "author": null, "committer": null, "parents": [{"sha": "494c950b2f873c82695aab855a90f1a6cd97e3df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/494c950b2f873c82695aab855a90f1a6cd97e3df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/494c950b2f873c82695aab855a90f1a6cd97e3df"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "5e6c588e190acd3ae37dfdb3f89a62f95f797ea5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969815c71e073e2d32b1ae48dea4bed89c51de65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969815c71e073e2d32b1ae48dea4bed89c51de65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=969815c71e073e2d32b1ae48dea4bed89c51de65", "patch": "@@ -1,3 +1,10 @@\n+2002-01-13  Christopher Faylor  <cgf@redhat.com>\n+\n+\t* cppfiles.c (TEST_THRESHOLD): New macro.\n+\t(SHOULD_MMAP): Ditto.\n+\t(read_include_file): Use SHOULD_MMAP macro to decide when mmap should\n+\tbe used.\n+\n Mon Jan 14 20:23:34 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* unroll.c (final_reg_note_copy): Properly handle"}, {"sha": "4fffce1ce08e8c381e5a140ea039870a6c5d6bb7", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969815c71e073e2d32b1ae48dea4bed89c51de65/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969815c71e073e2d32b1ae48dea4bed89c51de65/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=969815c71e073e2d32b1ae48dea4bed89c51de65", "patch": "@@ -33,6 +33,26 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n # ifndef MMAP_THRESHOLD\n #  define MMAP_THRESHOLD 3 /* Minimum page count to mmap the file.  */\n # endif\n+# if MMAP_THRESHOLD\n+#  define TEST_THRESHOLD(size, pagesize) \\\n+     (size / pagesize >= MMAP_THRESHOLD && (size % pagesize) != 0)\n+   /* Use mmap if the file is big enough to be worth it (controlled\n+      by MMAP_THRESHOLD) and if we can safely count on there being\n+      at least one readable NUL byte after the end of the file's\n+      contents.  This is true for all tested operating systems when\n+      the file size is not an exact multiple of the page size.  */\n+#  ifndef __CYGWIN__\n+#   define SHOULD_MMAP(size, pagesize) TEST_THRESHOLD (size, pagesize)\n+#  else\n+#   define WIN32_LEAN_AND_MEAN\n+#   include <windows.h>\n+    /* Cygwin can't correctly emulate mmap under Windows 9x style systems so\n+       disallow use of mmap on those systems.  Windows 9x does not zero fill\n+       memory at EOF and beyond, as required.  */\n+#   define SHOULD_MMAP(size, pagesize) ((GetVersion() & 0x80000000) \\\n+    \t\t\t\t\t? 0 : TEST_THRESHOLD (size, pagesize))\n+#  endif\n+# endif\n \n #else  /* No MMAP_FILE */\n #  undef MMAP_THRESHOLD\n@@ -382,13 +402,7 @@ read_include_file (pfile, inc)\n       if (pagesize == -1)\n \tpagesize = getpagesize ();\n \n-      /* Use mmap if the file is big enough to be worth it (controlled\n-\t by MMAP_THRESHOLD) and if we can safely count on there being\n-\t at least one readable NUL byte after the end of the file's\n-\t contents.  This is true for all tested operating systems when\n-\t the file size is not an exact multiple of the page size.  */\n-      if (size / pagesize >= MMAP_THRESHOLD\n-\t  && (size % pagesize) != 0)\n+      if (SHOULD_MMAP (size, pagesize))\n \t{\n \t  buf = (U_CHAR *) mmap (0, size, PROT_READ, MAP_PRIVATE, inc->fd, 0);\n \t  if (buf == (U_CHAR *)-1)"}]}