{"sha": "4e1592f8e1d6366699e05c0824fc3dc39ca7314b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxNTkyZjhlMWQ2MzY2Njk5ZTA1YzA4MjRmYzNkYzM5Y2E3MzE0Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-14T15:15:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-14T20:38:30Z"}, "message": "c++: Fix deferred noexcept on constructor [PR93901].\n\nMy change in r10-4394 to only update clones when we actually instantiate a\ndeferred noexcept-spec broke this because deferred parsing updates the\nprimary function but not the clones.  For GCC 10 I just reverted that\nchange; this patch adjusts maybe_instantiate_noexcept to update only the\nclone passed as the argument.\n\ngcc/cp/ChangeLog\n2020-05-14  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/93901\n\t* pt.c (maybe_instantiate_noexcept): Change clone handling.", "tree": {"sha": "fcfc2b956b48825684aa6b62923e73e523e21026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcfc2b956b48825684aa6b62923e73e523e21026"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e1592f8e1d6366699e05c0824fc3dc39ca7314b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1592f8e1d6366699e05c0824fc3dc39ca7314b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1592f8e1d6366699e05c0824fc3dc39ca7314b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1592f8e1d6366699e05c0824fc3dc39ca7314b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a36428b5fbc825e2d3455f5770b5d6e71c63413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a36428b5fbc825e2d3455f5770b5d6e71c63413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a36428b5fbc825e2d3455f5770b5d6e71c63413"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "0a3205272a5686af1342e244d12f0bc162ab9238", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1592f8e1d6366699e05c0824fc3dc39ca7314b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1592f8e1d6366699e05c0824fc3dc39ca7314b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e1592f8e1d6366699e05c0824fc3dc39ca7314b", "patch": "@@ -1,3 +1,8 @@\n+2020-05-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93901\n+\t* pt.c (maybe_instantiate_noexcept): Change clone handling.\n+\n 2020-05-14  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/78446"}, {"sha": "2a0b18f5517ae775a376389a5d574461ca6d8da8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1592f8e1d6366699e05c0824fc3dc39ca7314b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1592f8e1d6366699e05c0824fc3dc39ca7314b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4e1592f8e1d6366699e05c0824fc3dc39ca7314b", "patch": "@@ -25174,7 +25174,7 @@ always_instantiate_p (tree decl)\n bool\n maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n {\n-  tree fntype, spec, noex, clone;\n+  tree fntype, spec, noex;\n \n   /* Don't instantiate a noexcept-specification from template context.  */\n   if (processing_template_decl\n@@ -25193,8 +25193,16 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n       return !DECL_MAYBE_DELETED (fn);\n     }\n \n-  if (DECL_CLONED_FUNCTION_P (fn))\n-    fn = DECL_CLONED_FUNCTION (fn);\n+  fntype = TREE_TYPE (fn);\n+  spec = TYPE_RAISES_EXCEPTIONS (fntype);\n+\n+  if (!spec || !TREE_PURPOSE (spec))\n+    return true;\n+\n+  noex = TREE_PURPOSE (spec);\n+  if (TREE_CODE (noex) != DEFERRED_NOEXCEPT\n+      && TREE_CODE (noex) != DEFERRED_PARSE)\n+    return true;\n \n   tree orig_fn = NULL_TREE;\n   /* For a member friend template we can get a TEMPLATE_DECL.  Let's use\n@@ -25206,15 +25214,14 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n       fn = DECL_TEMPLATE_RESULT (fn);\n     }\n \n-  fntype = TREE_TYPE (fn);\n-  spec = TYPE_RAISES_EXCEPTIONS (fntype);\n-\n-  if (!spec || !TREE_PURPOSE (spec))\n-    return true;\n-\n-  noex = TREE_PURPOSE (spec);\n-\n-  if (TREE_CODE (noex) == DEFERRED_NOEXCEPT)\n+  if (DECL_CLONED_FUNCTION_P (fn))\n+    {\n+      tree prime = DECL_CLONED_FUNCTION (fn);\n+      if (!maybe_instantiate_noexcept (prime, complain))\n+\treturn false;\n+      spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (prime));\n+    }\n+  else if (TREE_CODE (noex) == DEFERRED_NOEXCEPT)\n     {\n       static hash_set<tree>* fns = new hash_set<tree>;\n       bool added = false;\n@@ -25284,27 +25291,19 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \n       if (added)\n \tfns->remove (fn);\n-\n-      if (spec == error_mark_node)\n-\t{\n-\t  /* This failed with a hard error, so let's go with false.  */\n-\t  gcc_assert (seen_error ());\n-\t  spec = noexcept_false_spec;\n-\t}\n-\n-      TREE_TYPE (fn) = build_exception_variant (fntype, spec);\n-      if (orig_fn)\n-\tTREE_TYPE (orig_fn) = TREE_TYPE (fn);\n     }\n \n-  FOR_EACH_CLONE (clone, fn)\n+  if (spec == error_mark_node)\n     {\n-      if (TREE_TYPE (clone) == fntype)\n-\tTREE_TYPE (clone) = TREE_TYPE (fn);\n-      else\n-\tTREE_TYPE (clone) = build_exception_variant (TREE_TYPE (clone), spec);\n+      /* This failed with a hard error, so let's go with false.  */\n+      gcc_assert (seen_error ());\n+      spec = noexcept_false_spec;\n     }\n \n+  TREE_TYPE (fn) = build_exception_variant (fntype, spec);\n+  if (orig_fn)\n+    TREE_TYPE (orig_fn) = TREE_TYPE (fn);\n+\n   return true;\n }\n "}]}