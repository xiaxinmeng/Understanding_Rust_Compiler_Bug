{"sha": "ad0e4f77912322c64c8e68d4627f7cd9aff793a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwZTRmNzc5MTIzMjJjNjRjOGU2OGQ0NjI3ZjdjZDlhZmY3OTNhNw==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-06-27T10:36:00Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-06-27T10:36:00Z"}, "message": "(type attributes): Delete unused mbit and mfp types.\n\n\t(ffsi2 insn): Define.\n\t(negdf2 and absdf2 insns): Improve.\n\nFrom-SVN: r1307", "tree": {"sha": "7582e0c18e13e44cac920e0c418cb3ba3219550c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7582e0c18e13e44cac920e0c418cb3ba3219550c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad0e4f77912322c64c8e68d4627f7cd9aff793a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0e4f77912322c64c8e68d4627f7cd9aff793a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0e4f77912322c64c8e68d4627f7cd9aff793a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0e4f77912322c64c8e68d4627f7cd9aff793a7/comments", "author": null, "committer": null, "parents": [{"sha": "f59028696ad31fa3caeba83f0b47271095fc883c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59028696ad31fa3caeba83f0b47271095fc883c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59028696ad31fa3caeba83f0b47271095fc883c"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "29366ab072873c71702c10870ba99ec5647ec0e1", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 44, "deletions": 34, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0e4f77912322c64c8e68d4627f7cd9aff793a7/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0e4f77912322c64c8e68d4627f7cd9aff793a7/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=ad0e4f77912322c64c8e68d4627f7cd9aff793a7", "patch": "@@ -28,7 +28,7 @@\n (define_expand \"m88k_sccs_id\"\n   [(match_operand:SI 0 \"\" \"\")]\n   \"\"\n-  \"{ static char sccs_id[] = \\\"@(#)m88k.md\t2.1.11.6 29 May 1992 10:55:49\\\";\n+  \"{ static char sccs_id[] = \\\"@(#)m88k.md\t2.2.3.6 27 Jun 1992 06:29:32\\\";\n      FAIL; }\")\n \f\n ;; Attribute specifications\n@@ -45,31 +45,31 @@\n ;  spadd,dpadd,spcmp,dpcmp,spdiv,dpdiv,idiv, ; FPU add instructions\n ;  spmul,dpmul,imul,\t\t\t; FPU multiply instructions\n ;  arith,bit,mov\t\t\t; integer unit instructions\n-;  marith,mbit,mfp,weird\"\t\t; multi-word instructions\n+;  marith,weird\"\t\t\t; multi-word instructions\n \n ; Classification of each insn.  Some insns of TYPE_BRANCH are multi-word.\n (define_attr \"type\"\n-  \"branch,jump,call,load,store,loada,spadd,dpadd,spcmp,dpcmp,spdiv,dpdiv,idiv,spmul,dpmul,imul,arith,bit,mov,marith,mbit,mfp,weird\"\n+  \"branch,jump,call,load,store,loada,spadd,dpadd,spcmp,dpcmp,spdiv,dpdiv,idiv,spmul,dpmul,imul,arith,bit,mov,marith,weird\"\n   (const_string \"arith\"))\n \n ; Convenience attributes.\n (define_attr \"unit\" \"bit,memory,multiply,divide,fpadd,other\"\n-  (cond [(eq_attr \"type\" \"bit,mbit\") (const_string \"bit\")\n+  (cond [(eq_attr \"type\" \"bit\") (const_string \"bit\")\n \t (eq_attr \"type\" \"load,store\") (const_string \"memory\")\n \t (eq_attr \"type\" \"spmul,dpmul,imul\") (const_string \"multiply\")\n \t (eq_attr \"type\" \"spdiv,dpdiv,idiv\") (const_string \"divide\")\n-\t (eq_attr \"type\" \"spadd,dpadd,spcmp,dpcmp,mfp\") (const_string \"fpadd\")]\n+\t (eq_attr \"type\" \"spadd,dpadd,spcmp,dpcmp\") (const_string \"fpadd\")]\n \t(const_string \"other\")))\n \n (define_attr \"fpu\" \"yes,no\"\n   (if_then_else\n-   (eq_attr \"type\" \"spmul,dpmul,imul,spadd,dpadd,spcmp,dpcmp,spdiv,dpdiv,idiv,mfp\")\n+   (eq_attr \"type\" \"spmul,dpmul,imul,spadd,dpadd,spcmp,dpcmp,spdiv,dpdiv,idiv\")\n    (const_string \"yes\") (const_string \"no\")))\n \n ; Length in # of instructions of each insn.  The values are not exact, but\n ; are safe.\n (define_attr \"length\" \"\"\n-  (cond [(eq_attr \"type\" \"marith,mbit,mfp\")\n+  (cond [(eq_attr \"type\" \"marith\")\n \t (const_int 2)]\n \t(const_int 1)))\n \n@@ -88,7 +88,7 @@\n (define_delay (eq_attr \"type\" \"branch,jump\")\n   [(and\n     (and\n-     (eq_attr \"type\" \"!branch,jump,call,marith,mbit,mfp,weird\") ; required.\n+     (eq_attr \"type\" \"!branch,jump,call,marith,weird\") ; required.\n      (eq_attr \"type\" \"!load\")) ; issue as-soon-as-possible.\n     (eq_attr \"fpu\" \"no\")) ; issue as-soon-as-possible.\n    (eq_attr \"type\" \"!call,branch,jump\") (nil)]) ; @@ was (const_int 1)\n@@ -97,7 +97,7 @@\n ; a call.  (@@ Support for this case is expected in reorg.c soon.)\n \n (define_delay (eq_attr \"type\" \"call\")\n-  [(eq_attr \"type\" \"!branch,call,marith,mbit,mfp,weird\") ; required.\n+  [(eq_attr \"type\" \"!branch,call,marith,weird\") ; required.\n    (nil) (nil)])\n \f\n ; An abstract block diagram of the function units for the m88100.\n@@ -145,13 +145,13 @@\n \n ; Describing the alu is currently not useful.\n ;(define_function_unit \"alu\" 1 0 (eq_attr \"type\"\n-;\t\t\t\t\t \"!store,marith,mbit,mfp,weird\") 1 0)\n-;(define_function_unit \"alu\" 1 0 (eq_attr \"type\" \"marith,mbit,weird\") 2 0)\n+;\t\t\t\t\t \"!store,marith,weird\") 1 0)\n+;(define_function_unit \"alu\" 1 0 (eq_attr \"type\" \"marith,weird\") 2 0)\n \n (define_function_unit \"alu\" 1 0\n   (and (eq_attr \"type\" \"loada,arith,bit,mov\") (eq_attr \"cpu\" \"!m88100\")) 2 0)\n (define_function_unit \"alu\" 1 0\n-  (and (eq_attr \"type\" \"marith,mbit,weird\") (eq_attr \"cpu\" \"!m88100\")) 4 0)\n+  (and (eq_attr \"type\" \"marith,weird\") (eq_attr \"cpu\" \"!m88100\")) 4 0)\n \n (define_function_unit \"memory\" 1 3\n   (and (eq_attr \"type\" \"load\") (eq_attr \"cpu\" \"m88100\")) 3 2)\n@@ -168,12 +168,12 @@\n (define_function_unit \"fpmul\" 1 4\n   (and (eq_attr \"type\" \"spmul\") (eq_attr \"cpu\" \"m88100\")) 4 2)\t\t; 6-8\n (define_function_unit \"fpmul\" 1 4\n-  (and (eq_attr \"type\" \"dpmul,mfp\") (eq_attr \"cpu\" \"m88100\")) 7 2)\t; 9-10\n+  (and (eq_attr \"type\" \"dpmul\") (eq_attr \"cpu\" \"m88100\")) 7 2)\t; 9-10\n (define_function_unit \"fpmul\" 1 4\n   (and (eq_attr \"type\" \"imul\") (eq_attr \"cpu\" \"m88100\")) 3 2)\t\t; 4\n \n (define_function_unit \"fpmul\" 1 4\n-  (and (eq_attr \"type\" \"imul,spmul,dpmul,mfp\")\n+  (and (eq_attr \"type\" \"imul,spmul,dpmul\")\n        (eq_attr \"cpu\" \"!m88100\")) 6 2)\t\t\t\t\t; 3\n \n (define_function_unit \"fpadd\" 1 3\n@@ -2764,6 +2764,24 @@\n   \"rot %0,%1,%2\"\n   [(set_attr \"type\" \"bit\")])\n \f\n+;; find first set.\n+\n+;; The ff1 instruction searches from the most significant bit while ffs\n+;; searches from the least significant bit.  The bit index and treatment of\n+;; zero also differ.  This amazing sequence was discovered using the GNU\n+;; Superoptimizer.\n+\n+(define_insn \"ffssi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n+\t(ffs:SI (match_operand:SI 1 \"register_operand\" \"0,r\")))\n+   (clobber (match_scratch:SI 2 \"=r,X\"))]\n+  \"\"\n+  \"@\n+   subu.co %2,%#r0,%1\\;and %2,%2,%1\\;addu.ci %2,%2,%2\\;ff1 %0,%2\n+   subu.co %0,%#r0,%1\\;and %0,%0,%1\\;addu.ci %0,%0,%0\\;ff1 %0,%0\"\n+  [(set_attr \"type\" \"marith\")\n+   (set_attr \"length\" \"4\")])\n+\f\n ;; Bit field instructions.\n \n (define_insn \"\"\n@@ -2883,18 +2901,14 @@\n    fsub.ssd %0,%#x0,%1\"\n   [(set_attr \"type\" \"dpadd\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"+r\")\n-\t(neg:DF (match_dup 0)))]\n-  \"\"\n-  \"xor.u %0,%0,0x8000\")\n-\n (define_insn \"negdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&r\")\n-\t(neg:DF (match_operand:DF 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&r,r\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"r,0\")))]\n   \"\"\n-  \"xor.u %0,%1,0x8000\\;or %d0,%#r0,%d1\"\n-  [(set_attr \"type\" \"marith\")])\n+  \"@\n+   xor.u %0,%1,0x8000\\;or %d0,%#r0,%d1\n+   xor.u %0,%0,0x8000\"\n+  [(set_attr \"type\" \"marith,arith\")])\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n@@ -2905,18 +2919,14 @@\n ;; absolute value insns for floating-point (integer abs can be done using the\n ;; machine-independent sequence).\n \n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"+r\")\n-\t(abs:DF (match_dup 0)))]\n-  \"\"\n-  \"and.u %0,%0,0x7fff\")\n-\n (define_insn \"absdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=&r\")\n-\t(abs:DF (match_operand:DF 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=&r,r\")\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"r,0\")))]\n   \"\"\n-  \"and.u %0,%1,0x7fff\\;or %d0,%#r0,%d1\"\n-  [(set_attr \"type\" \"marith\")])\n+  \"@\n+   and.u %0,%1,0x7fff\\;or %d0,%#r0,%d1\n+   and.u %0,%0,0x7fff\"\n+  [(set_attr \"type\" \"marith,arith\")])\n \n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")"}]}