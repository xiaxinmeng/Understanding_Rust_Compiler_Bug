{"sha": "ba2e110c46d90b5c169383265a619b2284957472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEyZTExMGM0NmQ5MGI1YzE2OTM4MzI2NWE2MTliMjI4NDk1NzQ3Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-06T02:17:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-06T02:17:52Z"}, "message": "(convert_modes): Properly handle extending constants since we might be\nchanging signedness.\n\nFrom-SVN: r5623", "tree": {"sha": "e3eb5cd0fdc10903cfdff1aa2c7f1c3a0c8dc001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3eb5cd0fdc10903cfdff1aa2c7f1c3a0c8dc001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba2e110c46d90b5c169383265a619b2284957472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2e110c46d90b5c169383265a619b2284957472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2e110c46d90b5c169383265a619b2284957472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2e110c46d90b5c169383265a619b2284957472/comments", "author": null, "committer": null, "parents": [{"sha": "843fec55422d450549b2620949ea35c103e206ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843fec55422d450549b2620949ea35c103e206ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843fec55422d450549b2620949ea35c103e206ec"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "5711d0cb342171691e8a3f0c37e8c67ecc92b1db", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2e110c46d90b5c169383265a619b2284957472/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2e110c46d90b5c169383265a619b2284957472/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ba2e110c46d90b5c169383265a619b2284957472", "patch": "@@ -1210,18 +1210,40 @@ convert_modes (mode, oldmode, x, unsignedp)\n \n   /* We can do this with a gen_lowpart if both desired and current modes\n      are integer, and this is either a constant integer, a register, or a\n-     non-volatile MEM.  Except for the constant case, we must be narrowing\n-     the operand.  */\n+     non-volatile MEM.  Except for the constant case where MODE is no\n+     wider than HOST_BITS_PER_WIDE_INT, we must be narrowing the operand.  */\n \n-  if (GET_CODE (x) == CONST_INT\n+  if ((GET_CODE (x) == CONST_INT\n+       && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n       || (GET_MODE_CLASS (mode) == MODE_INT\n \t  && GET_MODE_CLASS (oldmode) == MODE_INT\n \t  && (GET_CODE (x) == CONST_DOUBLE\n \t      || (GET_MODE_SIZE (mode) <= GET_MODE_SIZE (oldmode)\n \t\t  && ((GET_CODE (x) == MEM && ! MEM_VOLATILE_P (x)\n \t\t       && direct_load[(int) mode])\n \t\t      || GET_CODE (x) == REG)))))\n-    return gen_lowpart (mode, x);\n+    {\n+      /* ?? If we don't know OLDMODE, we have to assume here that\n+\t X does not need sign- or zero-extension.   This may not be\n+\t the case, but it's the best we can do.  */\n+      if (GET_CODE (x) == CONST_INT && oldmode != VOIDmode\n+\t  && GET_MODE_SIZE (mode) > GET_MODE_SIZE (oldmode))\n+\t{\n+\t  HOST_WIDE_INT val = INTVAL (x);\n+\t  int width = GET_MODE_BITSIZE (oldmode);\n+\n+\t  /* We must sign or zero-extend in this case.  Start by\n+\t     zero-extending, then sign extend if we need to.  */\n+\t  val &= ((HOST_WIDE_INT) 1 << width) - 1;\n+\t  if (! unsignedp\n+\t      && (val & ((HOST_WIDE_INT) 1 << (width - 1))))\n+\t    val |= (HOST_WIDE_INT) (-1) << width;\n+\n+\t  return GEN_INT (val);\n+\t}\n+\n+      return gen_lowpart (mode, x);\n+    }\n \n   temp = gen_reg_rtx (mode);\n   convert_move (temp, x, unsignedp);"}]}