{"sha": "be9d3d73425dc366fe8c1456a3503d6c118618a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU5ZDNkNzM0MjVkYzM2NmZlOGMxNDU2YTM1MDNkNmMxMTg2MThhMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-11-06T00:11:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-11-06T00:11:57Z"}, "message": "shared_ptr.h (shared_ptr<>::__shared_ptr(), [...]): Add constexpr specifier.\n\n2010-11-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/shared_ptr.h (shared_ptr<>::__shared_ptr(),\n\tshared_ptr<>::shared_ptr(nullptr_t), weak_ptr<>::weak_ptr(),\n\tenable_shared_from_this::enable_shared_from_this()): Add constexpr\n\tspecifier.\n\t* include/bits/shared_ptr_base.h (__shared_count::__shared_count(),\n\t__shared_count::__shared_count(), __shared_ptr<>::__shared_ptr(),\n\t__shared_ptr<>::__shared_ptr(nullptr_t), __weak_ptr<>::__weak_ptr(),\n\t__enable_shared_from_this::__enable_shared_from_this()): Likewise.\n\t* include/bits/unique_ptr.h (default_delete,\n\tunique_ptr<>::unique_ptr(), unique_ptr<>::unique_ptr(nullptr_t)):\n\tLikewise.\n\t* testsuite/20_util/default_delete/cons/constexpr.cc: Do not xfail.\n\t* testsuite/20_util/shared_ptr/cons/constexpr.cc: Remove, the test\n\tcannot work for a non-literal type like std::shared_ptr.\n\t* testsuite/20_util/weak_ptr/cons/constexpr.cc: Likewise.\n\t* testsuite/util/testsuite_common_types.h: Add comments.\n\t* testsuite/20_util/unique_ptr/cons/constexpr.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/cons/43820.cc: Adjust dg-error line\n\tnumbers.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n\nFrom-SVN: r166386", "tree": {"sha": "68897208905b15c8ebef7fedfd4db48f0bbfa56e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68897208905b15c8ebef7fedfd4db48f0bbfa56e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be9d3d73425dc366fe8c1456a3503d6c118618a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9d3d73425dc366fe8c1456a3503d6c118618a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be9d3d73425dc366fe8c1456a3503d6c118618a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9d3d73425dc366fe8c1456a3503d6c118618a0/comments", "author": null, "committer": null, "parents": [{"sha": "a75de6923043978eb7d96d79a28ba7becea353e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75de6923043978eb7d96d79a28ba7becea353e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75de6923043978eb7d96d79a28ba7becea353e9"}], "stats": {"total": 204, "additions": 71, "deletions": 133}, "files": [{"sha": "672d9f1a639b3077f6d5bdb5eba81dfce1107bed", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=be9d3d73425dc366fe8c1456a3503d6c118618a0", "patch": "@@ -1,3 +1,26 @@\n+2010-11-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/shared_ptr.h (shared_ptr<>::__shared_ptr(),\n+\tshared_ptr<>::shared_ptr(nullptr_t), weak_ptr<>::weak_ptr(),\n+\tenable_shared_from_this::enable_shared_from_this()): Add constexpr\n+\tspecifier.\n+\t* include/bits/shared_ptr_base.h (__shared_count::__shared_count(),\n+\t__shared_count::__shared_count(), __shared_ptr<>::__shared_ptr(),\n+\t__shared_ptr<>::__shared_ptr(nullptr_t), __weak_ptr<>::__weak_ptr(),\n+\t__enable_shared_from_this::__enable_shared_from_this()): Likewise.\n+\t* include/bits/unique_ptr.h (default_delete,\n+\tunique_ptr<>::unique_ptr(), unique_ptr<>::unique_ptr(nullptr_t)):\n+\tLikewise.\n+\t* testsuite/20_util/default_delete/cons/constexpr.cc: Do not xfail.\n+\t* testsuite/20_util/shared_ptr/cons/constexpr.cc: Remove, the test\n+\tcannot work for a non-literal type like std::shared_ptr.\n+\t* testsuite/20_util/weak_ptr/cons/constexpr.cc: Likewise.\n+\t* testsuite/util/testsuite_common_types.h: Add comments.\n+\t* testsuite/20_util/unique_ptr/cons/constexpr.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/43820.cc: Adjust dg-error line\n+\tnumbers.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n+\n 2010-11-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/doxygen/user.cfg.in: Remove tr1_impl headers."}, {"sha": "0e6f7a6d0b34ea21ceb07dc91ddc8eeecb71c00f", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=be9d3d73425dc366fe8c1456a3503d6c118618a0", "patch": "@@ -95,7 +95,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Construct an empty %shared_ptr.\n        *  @post   use_count()==0 && get()==0\n        */\n-      shared_ptr() : __shared_ptr<_Tp>() { }\n+      constexpr shared_ptr()\n+      : __shared_ptr<_Tp>() { }\n \n       /**\n        *  @brief  Construct a %shared_ptr that owns the pointer @a __p.\n@@ -104,7 +105,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @throw  std::bad_alloc, in which case @c delete @a __p is called.\n        */\n       template<typename _Tp1>\n-\texplicit shared_ptr(_Tp1* __p) : __shared_ptr<_Tp>(__p) { }\n+\texplicit shared_ptr(_Tp1* __p)\n+        : __shared_ptr<_Tp>(__p) { }\n \n       /**\n        *  @brief  Construct a %shared_ptr that owns the pointer @a __p\n@@ -256,7 +258,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  __p  A null pointer constant.\n        *  @post   use_count() == 0 && get() == nullptr\n        */\n-      shared_ptr(nullptr_t __p) : __shared_ptr<_Tp>(__p) { }\n+      constexpr shared_ptr(nullptr_t __p)\n+      : __shared_ptr<_Tp>(__p) { }\n \n       template<typename _Tp1>\n \tshared_ptr&\n@@ -387,7 +390,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class weak_ptr : public __weak_ptr<_Tp>\n     {\n     public:\n-      weak_ptr() : __weak_ptr<_Tp>() { }\n+      constexpr weak_ptr()\n+      : __weak_ptr<_Tp>() { }\n \n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n@@ -466,7 +470,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class enable_shared_from_this\n     {\n     protected:\n-      enable_shared_from_this() { }\n+      constexpr enable_shared_from_this() { }\n \n       enable_shared_from_this(const enable_shared_from_this&) { }\n "}, {"sha": "d39050fcc8d2959589a093ca4397c01f66e411e7", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=be9d3d73425dc366fe8c1456a3503d6c118618a0", "patch": "@@ -443,7 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class __shared_count\n     {\n     public:\n-      __shared_count() : _M_pi(0) // nothrow\n+      constexpr __shared_count() : _M_pi(0) // nothrow\n       { }\n \n       template<typename _Ptr>\n@@ -635,7 +635,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class __weak_count\n     {\n     public:\n-      __weak_count() : _M_pi(0) // nothrow\n+      constexpr __weak_count() : _M_pi(0) // nothrow\n       { }\n \n       __weak_count(const __shared_count<_Lp>& __r) : _M_pi(__r._M_pi) // nothrow\n@@ -751,11 +751,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     public:\n       typedef _Tp   element_type;\n \n-      __shared_ptr() : _M_ptr(0), _M_refcount() // never throws\n+      constexpr __shared_ptr()\n+      : _M_ptr(0), _M_refcount() // never throws\n       { }\n \n       template<typename _Tp1>\n-\texplicit __shared_ptr(_Tp1* __p) : _M_ptr(__p), _M_refcount(__p)\n+\texplicit __shared_ptr(_Tp1* __p)\n+        : _M_ptr(__p), _M_refcount(__p)\n \t{\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n \t  static_assert( sizeof(_Tp1) > 0, \"incomplete type\" );\n@@ -856,7 +858,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n \n       /* TODO: use delegating constructor */\n-      __shared_ptr(nullptr_t) : _M_ptr(0), _M_refcount() // never throws\n+      constexpr __shared_ptr(nullptr_t)\n+      : _M_ptr(0), _M_refcount() // never throws\n       { }\n \n       template<typename _Tp1>\n@@ -1163,7 +1166,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     public:\n       typedef _Tp element_type;\n \n-      __weak_ptr() : _M_ptr(0), _M_refcount() // never throws\n+      constexpr __weak_ptr()\n+      : _M_ptr(0), _M_refcount() // never throws\n       { }\n \n       // Generated copy constructor, assignment, destructor are fine.\n@@ -1324,7 +1328,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class __enable_shared_from_this\n     {\n     protected:\n-      __enable_shared_from_this() { }\n+      constexpr __enable_shared_from_this() { }\n \n       __enable_shared_from_this(const __enable_shared_from_this&) { }\n "}, {"sha": "4dc4dddb28ede572aceeaff39ce40d60ea89ff56", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=be9d3d73425dc366fe8c1456a3503d6c118618a0", "patch": "@@ -46,20 +46,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// Primary template, default_delete.\n   template<typename _Tp>\n     struct default_delete\n-      {\n-\tdefault_delete() { }\n+    {\n+      constexpr default_delete() { }\n \n-\ttemplate<typename _Up, typename = typename\n-\t\t std::enable_if<std::is_convertible<_Up*, _Tp*>::value>::type>\n-\t  default_delete(const default_delete<_Up>&) { }\n+      template<typename _Up, typename = typename\n+\t       std::enable_if<std::is_convertible<_Up*, _Tp*>::value>::type>\n+        default_delete(const default_delete<_Up>&) { }\n \n-\tvoid\n-\toperator()(_Tp* __ptr) const\n-\t{\n-\t  static_assert(sizeof(_Tp)>0,\n-\t\t\t\"can't delete pointer to incomplete type\");\n-\t  delete __ptr;\n-\t}\n+      void\n+      operator()(_Tp* __ptr) const\n+      {\n+\tstatic_assert(sizeof(_Tp)>0,\n+\t\t      \"can't delete pointer to incomplete type\");\n+\tdelete __ptr;\n+      }\n     };\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -68,6 +68,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp>\n     struct default_delete<_Tp[]>\n     {\n+      constexpr default_delete() { }\n+\n       void\n       operator()(_Tp* __ptr) const\n       {\n@@ -108,8 +110,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t    \"constructed with null function pointer deleter\");\n \n       // Constructors.\n-      unique_ptr()\n-      : _M_t(pointer(), deleter_type())\n+      constexpr unique_ptr()\n+      : _M_t()\n       { }\n \n       explicit\n@@ -129,7 +131,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { static_assert(!std::is_reference<deleter_type>::value,\n \t\t      \"rvalue deleter bound to reference\"); }\n \n-      unique_ptr(nullptr_t)\n+      constexpr unique_ptr(nullptr_t)\n       : _M_t(pointer(), deleter_type())\n       { }\n \n@@ -271,7 +273,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t    \"constructed with null function pointer deleter\");\n \n       // Constructors.\n-      unique_ptr()\n+      constexpr unique_ptr()\n       : _M_t(pointer(), deleter_type())\n       { }\n \n@@ -292,7 +294,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t      \"rvalue deleter bound to reference\"); }\n \n       /* TODO: use delegating constructor */\n-      unique_ptr(nullptr_t)\n+      constexpr unique_ptr(nullptr_t)\n       : _M_t(pointer(), deleter_type())\n       { }\n "}, {"sha": "091f1b6fc3669e3c73d23ce7307b58730dc306b6", "filename": "libstdc++-v3/testsuite/20_util/default_delete/cons/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fcons%2Fconstexpr.cc?ref=be9d3d73425dc366fe8c1456a3503d6c118618a0", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { xfail *-*-* } }\n+// { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2010 Free Software Foundation, Inc.\n@@ -24,6 +24,6 @@\n int main()\n {\n   __gnu_test::constexpr_default_constructible test;\n-  test.operator()<std::default_delete<int>>(); // { dg-excess-errors \"\" }\n+  test.operator()<std::default_delete<int>>();\n   return 0;\n }"}, {"sha": "f30fd35c1824f7ce76b09e90f48ccf905a2c72ba", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc?ref=be9d3d73425dc366fe8c1456a3503d6c118618a0", "patch": "@@ -32,9 +32,9 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 762 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 764 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 854 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 856 }\n \n }"}, {"sha": "d040ea4966694920c424c8ff3d353a5c8da593d5", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/constexpr.cc", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75de6923043978eb7d96d79a28ba7becea353e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75de6923043978eb7d96d79a28ba7becea353e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fconstexpr.cc?ref=a75de6923043978eb7d96d79a28ba7becea353e9", "patch": "@@ -1,33 +0,0 @@\n-// { dg-do compile { xfail *-*-* } }\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <memory>\n-#include <testsuite_common_types.h>\n-\n-int main()\n-{\n-  __gnu_test::constexpr_default_constructible test1;\n-  test1.operator()<std::shared_ptr<int>>();  // { dg-excess-errors \"\" }\n-\n-  __gnu_test::constexpr_single_value_constructible test2;\n-  test2.operator()<std::shared_ptr<int>, std::nullptr_t>();  // { dg-excess-errors \"\" }\n-\n-  return 0;\n-}"}, {"sha": "20db7615ba860e5adc8468be9255cab8bc1bd836", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/constexpr.cc", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75de6923043978eb7d96d79a28ba7becea353e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75de6923043978eb7d96d79a28ba7becea353e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fconstexpr.cc?ref=a75de6923043978eb7d96d79a28ba7becea353e9", "patch": "@@ -1,32 +0,0 @@\n-// { dg-do compile { xfail *-*-* } }\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <memory>\n-#include <testsuite_common_types.h>\n-\n-int main()\n-{\n-  __gnu_test::constexpr_default_constructible test1;\n-  test1.operator()<std::unique_ptr<int>>();  // { dg-excess-errors \"\" }\n-\n-  __gnu_test::constexpr_single_value_constructible test2;\n-  test2.operator()<std::unique_ptr<int>, std::nullptr_t>();  // { dg-excess-errors \"\" }\n-  return 0;\n-}"}, {"sha": "4bc950f1c8ab32f7c8ccde64244b68678f33f8e7", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=be9d3d73425dc366fe8c1456a3503d6c118618a0", "patch": "@@ -41,9 +41,9 @@ main()\n   return 0;\n }\n \n-// { dg-warning \"note\" \"\" { target *-*-* } 347 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 1079 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 465 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 350 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1082 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 467 }\n // { dg-warning \"note\" \"\" { target *-*-* } 580 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1027 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }"}, {"sha": "3b43769bff31befffc797e253458ab72d67d2e8b", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/cons/constexpr.cc", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75de6923043978eb7d96d79a28ba7becea353e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75de6923043978eb7d96d79a28ba7becea353e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcons%2Fconstexpr.cc?ref=a75de6923043978eb7d96d79a28ba7becea353e9", "patch": "@@ -1,32 +0,0 @@\n-// { dg-do compile { xfail *-*-* } }\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <memory>\n-#include <testsuite_common_types.h>\n-\n-int main()\n-{\n-  __gnu_test::constexpr_default_constructible test;\n-  test.operator()<std::weak_ptr<int>>();  // { dg-excess-errors \"\" }\n-  //  test.operator()<std::__weak_ptr<int>>();\n-  //  test.operator()<std::__weak_count<__gnu_cxx::__default_lock_policy>>();\n-  // test.operator()<std::_Sp_counted_base<__gnu_cxx::__default_lock_policy>>();\n-  return 0;\n-}"}, {"sha": "c601063b0a3b3dd44169befc1292fc8827348caa", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9d3d73425dc366fe8c1456a3503d6c118618a0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=be9d3d73425dc366fe8c1456a3503d6c118618a0", "patch": "@@ -615,6 +615,7 @@ namespace __gnu_test\n   // Generator to test default constructor.\n   struct constexpr_default_constructible\n   {\n+    // NB: _Tp must be a literal type. \n     template<typename _Tp>\n       void \n       operator()()\n@@ -633,6 +634,7 @@ namespace __gnu_test\n \n   struct constexpr_single_value_constructible\n   {\n+    // NB: _Tbasetype and _Ttesttype must be literal types. \n     template<typename _Ttesttype, typename _Tbasetype>\n       void\n       operator()()"}]}