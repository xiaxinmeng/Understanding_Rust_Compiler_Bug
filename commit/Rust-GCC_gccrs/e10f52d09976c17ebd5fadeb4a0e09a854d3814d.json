{"sha": "e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwZjUyZDA5OTc2YzE3ZWJkNWZhZGViNGEwZTA5YTg1NGQzODE0ZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-08-04T19:49:19Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-08-04T19:49:19Z"}, "message": "re PR fortran/42207 ([OOP] Compile-time errors on typed allocation and pointer function result assignment)\n\n2010-08-04  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42207\n\tPR fortran/44064\n\tPR fortran/44065\n\t* class.c (gfc_find_derived_vtab): Do not generate vtabs for class\n\tcontainer types. Do not artificially increase refs. Commit symbols one\n\tby one.\n\t* interface.c (compare_parameter): Make sure vtabs are present before\n\tgenerating module variables.\n\t* resolve.c (resolve_allocate_expr): Ditto.\n\n\n2010-08-04  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42207\n\tPR fortran/44064\n\tPR fortran/44065\n\t* gfortran.dg/class_25.f03: New.\n\t* gfortran.dg/class_26.f03: New.\n\nFrom-SVN: r162879", "tree": {"sha": "3fa3d8617306adc01c4a2d8af8ed81aff29cc0a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa3d8617306adc01c4a2d8af8ed81aff29cc0a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e884a9464e6941b5fef6b08fdcebee368799c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e884a9464e6941b5fef6b08fdcebee368799c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e884a9464e6941b5fef6b08fdcebee368799c73"}], "stats": {"total": 117, "additions": 109, "deletions": 8}, "files": [{"sha": "752b187c6f60af93c072966da9af93b9124c5eff", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "patch": "@@ -1,3 +1,15 @@\n+2010-08-04  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42207\n+\tPR fortran/44064\n+\tPR fortran/44065\n+\t* class.c (gfc_find_derived_vtab): Do not generate vtabs for class\n+\tcontainer types. Do not artificially increase refs. Commit symbols one\n+\tby one.\n+\t* interface.c (compare_parameter): Make sure vtabs are present before\n+\tgenerating module variables.\n+\t* resolve.c (resolve_allocate_expr): Ditto.\n+\n 2010-08-04  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45183"}, {"sha": "7dc934452eff73a585332ddf803d54b7a3688a67", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "patch": "@@ -322,13 +322,16 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n   gfc_namespace *ns;\n   gfc_symbol *vtab = NULL, *vtype = NULL, *found_sym = NULL;\n   char name[2 * GFC_MAX_SYMBOL_LEN + 8];\n-\n-  ns = gfc_current_ns;\n-\n-  for (; ns; ns = ns->parent)\n+  \n+  /* Find the top-level namespace (MODULE or PROGRAM).  */\n+  for (ns = gfc_current_ns; ns; ns = ns->parent)\n     if (!ns->parent)\n       break;\n \n+  /* If the type is a class container, use the underlying derived type.  */\n+  if (derived->attr.is_class)\n+    derived = gfc_get_derived_super_type (derived);\n+    \n   if (ns)\n     {\n       sprintf (name, \"vtab$%s\", derived->name);\n@@ -338,12 +341,13 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t{\n \t  gfc_get_symbol (name, ns, &vtab);\n \t  vtab->ts.type = BT_DERIVED;\n-\t  vtab->attr.flavor = FL_VARIABLE;\n+\t  if (gfc_add_flavor (&vtab->attr, FL_VARIABLE, NULL,\n+\t                      &gfc_current_locus) == FAILURE)\n+\t    goto cleanup;\n \t  vtab->attr.target = 1;\n \t  vtab->attr.save = SAVE_EXPLICIT;\n \t  vtab->attr.vtab = 1;\n \t  vtab->attr.access = ACCESS_PUBLIC;\n-\t  vtab->refs++;\n \t  gfc_set_sym_referenced (vtab);\n \t  sprintf (name, \"vtype$%s\", derived->name);\n \t  \n@@ -358,7 +362,6 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t\t\t  NULL, &gfc_current_locus) == FAILURE)\n \t\tgoto cleanup;\n \t      vtype->attr.access = ACCESS_PUBLIC;\n-\t      vtype->refs++;\n \t      gfc_set_sym_referenced (vtype);\n \n \t      /* Add component '$hash'.  */\n@@ -421,7 +424,11 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n   /* It is unexpected to have some symbols added at resolution or code\n      generation time. We commit the changes in order to keep a clean state.  */\n   if (found_sym)\n-    gfc_commit_symbols ();\n+    {\n+      gfc_commit_symbol (vtab);\n+      if (vtype)\n+\tgfc_commit_symbol (vtype);\n+    }\n   else\n     gfc_undo_symbols ();\n "}, {"sha": "f37f1bdebd7975a594f56ce6ac305787e8a6c569", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "patch": "@@ -1423,6 +1423,11 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n       && actual->ts.u.derived && actual->ts.u.derived->ts.is_iso_c)\n     return 1;\n \n+  if (formal->ts.type == BT_CLASS)\n+    /* Make sure the vtab symbol is present when\n+       the module variables are generated.  */\n+    gfc_find_derived_vtab (formal->ts.u.derived);\n+\n   if (actual->ts.type == BT_PROCEDURE)\n     {\n       char err[200];"}, {"sha": "69a003657d92e58a22a5a1abfe9bf39e81760f3b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "patch": "@@ -6569,6 +6569,18 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t}\n     }\n \n+  if (e->ts.type == BT_CLASS)\n+    {\n+      /* Make sure the vtab symbol is present when\n+\t the module variables are generated.  */\n+      gfc_typespec ts = e->ts;\n+      if (code->expr3)\n+\tts = code->expr3->ts;\n+      else if (code->ext.alloc.ts.type == BT_DERIVED)\n+\tts = code->ext.alloc.ts;\n+      gfc_find_derived_vtab (ts.u.derived);\n+    }\n+\n   if (pointer || (dimension == 0 && codimension == 0))\n     goto success;\n "}, {"sha": "8f38f78d3c98c590eadc793b8f0ea456da88f8a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "patch": "@@ -1,3 +1,11 @@\n+2010-08-04  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42207\n+\tPR fortran/44064\n+\tPR fortran/44065\n+\t* gfortran.dg/class_25.f03: New.\n+\t* gfortran.dg/class_26.f03: New.\n+\n 2010-08-04  Daniel Gutson  <dgutson@codesourcery.com>\n \n \t* g++.dg/warn/miss-format-1.C: Update line number."}, {"sha": "3588b7759e57edbd73c1830b1e16c5cbfe3c547e", "filename": "gcc/testsuite/gfortran.dg/class_25.f03", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_25.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_25.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_25.f03?ref=e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+!\n+! PR [OOP] Compile-time errors on typed allocation and pointer function result assignment\n+!\n+! Contributed by Damian Rouson <damian@rouson.net>\n+\n+module m\n+\n+  implicit none\n+\n+  type foo \n+  end type\n+\n+  type ,extends(foo) :: bar\n+  end type\n+\n+contains\n+\n+  function new_bar()\n+    class(foo) ,pointer :: new_bar\n+    allocate(bar :: new_bar) \n+  end function\n+\n+end module\n+\n+end \n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "629c9c98e4ccab850d63d116aefef20261208f46", "filename": "gcc/testsuite/gfortran.dg/class_26.f03", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_26.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10f52d09976c17ebd5fadeb4a0e09a854d3814d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_26.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_26.f03?ref=e10f52d09976c17ebd5fadeb4a0e09a854d3814d", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+!\n+! PR 44065: [OOP] Undefined reference to vtab$...\n+!\n+! Contributed by Salvatore Filippone <sfilippone@uniroma2.it>\n+\n+module s_mat_mod\n+  implicit none \n+  type :: s_sparse_mat\n+  end type\n+contains\n+  subroutine s_set_triangle(a)\n+    class(s_sparse_mat), intent(inout) :: a\n+  end subroutine\n+end module\n+\n+module s_tester\n+implicit none\n+contains\n+  subroutine s_ussv_2\n+    use s_mat_mod\n+    type(s_sparse_mat) :: a\n+    call s_set_triangle(a)\n+  end subroutine\n+end module\n+\n+end\n+ \n+! { dg-final { cleanup-modules \"s_mat_mod s_tester\" } }"}]}