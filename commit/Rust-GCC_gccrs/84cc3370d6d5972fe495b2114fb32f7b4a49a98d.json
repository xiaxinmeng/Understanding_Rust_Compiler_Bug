{"sha": "84cc3370d6d5972fe495b2114fb32f7b4a49a98d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRjYzMzNzBkNmQ1OTcyZmU0OTViMjExNGZiMzJmN2I0YTQ5YTk4ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-21T19:28:45Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-10-21T19:29:43Z"}, "message": "rs6000: MMA type causes an ICE in ranger pass due to incompatible types\n\nPR97360 shows a problem in how we create our PXI and POI modes that cause\nan ICE in the ranger pass.  The problem seems to be that the extra call\nto build_distinct_type_copy() also creates new TYPE_{MIN,MAX}_VALUEs that\nare not compatible/the same as the base type itself.  The simple \"fix\" is\nto actually remove the unneeded build_distinct_type_copy(), since according\nto richi, the types returned from make_unsigned_type() are already distinct.\n\ngcc/\n\n2020-10-21  Richard Biener  <rguenther@suse.de>\n\n\tPR target/97360\n\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Remove call to\n\tbuild_distinct_type_copy().\n\ngcc/testsuite/\n\n2020-10-21  Martin Liska  <mliska@suse.cz>\n\n\tPR target/97360\n\t* gcc.target/powerpc/pr97360.c: New test.\n\nCo-authored-by: Andrew MacLeod <amacleod@redhat.com>\nCo-authored-by: Martin Liska <mliska@suse.cz>", "tree": {"sha": "db269646b4dedc0aa679f1e33b825e647f7fe9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db269646b4dedc0aa679f1e33b825e647f7fe9da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84cc3370d6d5972fe495b2114fb32f7b4a49a98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84cc3370d6d5972fe495b2114fb32f7b4a49a98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84cc3370d6d5972fe495b2114fb32f7b4a49a98d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84cc3370d6d5972fe495b2114fb32f7b4a49a98d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caaa218f912ccf932fdb79243ded68bb462bbe63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caaa218f912ccf932fdb79243ded68bb462bbe63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caaa218f912ccf932fdb79243ded68bb462bbe63"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "7639aab171dad4f1fe7c4877728bc06471287d86", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84cc3370d6d5972fe495b2114fb32f7b4a49a98d/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84cc3370d6d5972fe495b2114fb32f7b4a49a98d/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=84cc3370d6d5972fe495b2114fb32f7b4a49a98d", "patch": "@@ -12914,15 +12914,13 @@ rs6000_init_builtins (void)\n   /* Vector pair and vector quad support.  */\n   if (TARGET_EXTRA_BUILTINS)\n     {\n-      tree oi_uns_type = make_unsigned_type (256);\n-      vector_pair_type_node = build_distinct_type_copy (oi_uns_type);\n+      vector_pair_type_node = make_unsigned_type (256);\n       SET_TYPE_MODE (vector_pair_type_node, POImode);\n       layout_type (vector_pair_type_node);\n       lang_hooks.types.register_builtin_type (vector_pair_type_node,\n \t\t\t\t\t      \"__vector_pair\");\n \n-      tree xi_uns_type = make_unsigned_type (512);\n-      vector_quad_type_node = build_distinct_type_copy (xi_uns_type);\n+      vector_quad_type_node = make_unsigned_type (512);\n       SET_TYPE_MODE (vector_quad_type_node, PXImode);\n       layout_type (vector_quad_type_node);\n       lang_hooks.types.register_builtin_type (vector_quad_type_node,"}, {"sha": "2328d28a283afb719cdb17ffcab662a5b13d6f24", "filename": "gcc/testsuite/gcc.target/powerpc/pr97360.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84cc3370d6d5972fe495b2114fb32f7b4a49a98d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr97360.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84cc3370d6d5972fe495b2114fb32f7b4a49a98d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr97360.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr97360.c?ref=84cc3370d6d5972fe495b2114fb32f7b4a49a98d", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/97360 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Verify we do not ICE on the test below.  */\n+\n+typedef unsigned char vec_t __attribute__((vector_size(16)));\n+\n+void\n+foo (__vector_quad *dst, __vector_pair *vpair, vec_t *vec)\n+{\n+  __vector_quad acc = *dst;\n+  for (;;)\n+    {\n+      __builtin_mma_xvf64gerpp(&acc, *vpair, vec[7]);\n+    }\n+}"}]}