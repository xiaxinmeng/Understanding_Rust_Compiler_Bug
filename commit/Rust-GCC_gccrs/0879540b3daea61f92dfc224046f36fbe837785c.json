{"sha": "0879540b3daea61f92dfc224046f36fbe837785c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3OTU0MGIzZGFlYTYxZjkyZGZjMjI0MDQ2ZjM2ZmJlODM3Nzg1Yw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-02T22:33:38Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-02T22:33:38Z"}, "message": "cpptrad.c: Update comment.\n\n\t* cpptrad.c: Update comment.\ntestsuite:\n\t* gcc.dg/cpp/trad/directive.c: Add test.\n\t* gcc.dg/cpp/trad/macroargs.c: Add test.\n\t* gcc.dg/cpp/trad/recurse-3.c: Add tests.\n\nFrom-SVN: r55196", "tree": {"sha": "7ab539a90ee483860f9ad0ca078bf615173ee548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab539a90ee483860f9ad0ca078bf615173ee548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0879540b3daea61f92dfc224046f36fbe837785c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0879540b3daea61f92dfc224046f36fbe837785c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0879540b3daea61f92dfc224046f36fbe837785c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0879540b3daea61f92dfc224046f36fbe837785c/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba57a9c052405d4a7912498bdb00a8be346a514e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba57a9c052405d4a7912498bdb00a8be346a514e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba57a9c052405d4a7912498bdb00a8be346a514e"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "8dae99bae5e18af0f6ba91159e7d06989dba0253", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0879540b3daea61f92dfc224046f36fbe837785c", "patch": "@@ -1,3 +1,7 @@\n+2002-07-03  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cpptrad.c: Update comment.\n+\n 2002-07-02  Neil Booth  <neil@daikokuya.co.uk>\n \t\n \t* doc/cpp.texi: Update for traditional preprocessing changes."}, {"sha": "915dceb24f70c4246cc820360107d57fe50ea2e9", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=0879540b3daea61f92dfc224046f36fbe837785c", "patch": "@@ -491,7 +491,8 @@ scan_out_logical_line (pfile, macro)\n \t  if ((lex_state == ls_fun_open || lex_state == ls_fun_close)\n \t      && !pfile->state.in_directive)\n \t    {\n-\t      /* Newlines in arguments become a space.  */\n+\t      /* Newlines in arguments become a space, but we don't\n+\t\t clear any in-progress quote.  */\n \t      if (lex_state == ls_fun_close)\n \t\tout[-1] = ' ';\n \t      continue;"}, {"sha": "62ce01d600ed7966d73e8fd8c74a9b5d29ab4d54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0879540b3daea61f92dfc224046f36fbe837785c", "patch": "@@ -1,3 +1,9 @@\n+2002-07-03  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/trad/directive.c: Add test.\n+\t* gcc.dg/cpp/trad/macroargs.c: Add test.\n+\t* gcc.dg/cpp/trad/recurse-3.c: Add tests.\n+\n 2002-07-02  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcc.dg/cpp/cmdlne-M.c: New test."}, {"sha": "04203097b2433cbf49236eec2a173ecf12c2ce5a", "filename": "gcc/testsuite/gcc.dg/cpp/trad/directive.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdirective.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdirective.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdirective.c?ref=0879540b3daea61f92dfc224046f36fbe837785c", "patch": "@@ -10,3 +10,11 @@\n  #if 0\t/* { dg-bogus \"unterminated\" } */\n \n #wrong\t/* { dg-error \"invalid\" } */\n+\n+#define foo 2\n+#define bar + 3\n+#define foobar 6\n+\n+#if foo/**/bar != 5\n+# error Comments in directive is a separator /* { dg-bogus \"error\" } */\n+#endif"}, {"sha": "ce28cccf99501def7483bb27567b55f39440fb3a", "filename": "gcc/testsuite/gcc.dg/cpp/trad/macroargs.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c?ref=0879540b3daea61f92dfc224046f36fbe837785c", "patch": "@@ -4,6 +4,7 @@\n /* { dg-do run } */\n \n #define f(x, y) \"x y\"\n+#define g(x) x\n \n extern void abort (void);\n \n@@ -20,5 +21,10 @@ foo\n   if (strcmp (str1, str2))\n     abort ();\n \n+  /* Verify that quoted state is preserved over a newline.  */\n+  if (strcmp (g /* { dg-bogus \"unterminated 2\" } */ (\"1\n+, 2\"), \"1 , 2\"))\t\n+    abort ();\n+\n   return 0;\n }"}, {"sha": "91485ae5f4500d7d7e98c92ba5f531bd681719b7", "filename": "gcc/testsuite/gcc.dg/cpp/trad/recurse-3.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Frecurse-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0879540b3daea61f92dfc224046f36fbe837785c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Frecurse-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Frecurse-3.c?ref=0879540b3daea61f92dfc224046f36fbe837785c", "patch": "@@ -14,3 +14,12 @@ f(f,f,f,f,f,f,f,f,f)\t       /* { dg-bogus \"detected recursion\" } */\n    sources so let's try it too.  */\n #define foo(x,y) bar (x (y,0), y)\n foo (foo, baz);\t       /* { dg-bogus \"detected recursion\" } */\n+\n+#define mac mac/**/ro\n+mac\t\t       /* { dg-bogus \"detected recursion\" } */\n+\n+#define mac2 mac2\n+\"mac2\" \t\t       /* { dg-bogus \"detected recursion\" } */\n+\n+#define macro \"macro\n+macro mac2\t       /* { dg-bogus \"detected recursion\" } */"}]}