{"sha": "97919732a8ebeb343705966b2ca649d35d3197e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5MTk3MzJhOGViZWIzNDM3MDU5NjZiMmNhNjQ5ZDM1ZDMxOTdlOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-01T06:53:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-17T10:49:22Z"}, "message": "[Ada] Do not use exponentiation for common bases in floating-point Value\n\ngcc/ada/\n\n\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Likewise.\n\t* exp_imgv.adb (Expand_Value_Attribute): Use RE_Value_Long_Float in\n\tlieu of RE_Value_Long_Long_Float as fallback for fixed-point types.\n\tAlso use it for Long_Long_Float if it has same size as Long_Float.\n\t* libgnat/s-imgrea.adb: Replace Powten_Table with Powen_LLF.\n\t* libgnat/s-powflt.ads: New file.\n\t* libgnat/s-powlfl.ads: Likewise.\n\t* libgnat/s-powtab.ads: Rename to...\n\t* libgnat/s-powllf.ads: ...this.\n\t* libgnat/s-valflt.ads: Add with clause for System.Powten_Flt and\n\tpass its table as actual parameter to System.Val_Real.\n\t* libgnat/s-vallfl.ads: Likewise for System.Powten_LFlt.\n\t* libgnat/s-valllf.ads: Likewise for System.Powten_LLF.\n\t* libgnat/s-valrea.ads: Add Maxpow and Powten_Address parameters.\n\t* libgnat/s-valrea.adb: Add pragma Warnings (Off).\n\t(Need_Extra): New boolean constant.\n\t(Precision_Limit): Set it according to Need_Extra.\n\t(Impl): Adjust actual parameter.\n\t(Integer_to_Rea): Add assertion on the machine radix. Take into\n\taccount the extra digit only if Need_Extra is true.  Reimplement\n\tthe computation of the final value for bases 2, 4, 8, 10 and 16.\n\t* libgnat/s-valued.adb (Impl): Adjust actual parameter.\n\t(Scan_Decimal): Add pragma Unreferenced.\n\t(Value_Decimal): Likewise.\n\t* libgnat/s-valuef.adb (Impl): Adjust actual parameter.\n\t* libgnat/s-valuer.ads (Floating): Remove.\n\t(Round): New formal parameter.\n\t* libgnat/s-valuer.adb (Round_Extra): New procedure.\n\t(Scan_Decimal_Digits): Use it to round the extra digit if Round\n\tis set to True in the instantiation.\n\t(Scan_Integral_Digits): Likewise.", "tree": {"sha": "4fca667935c37e1a03a75228d45b48d3ef924a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fca667935c37e1a03a75228d45b48d3ef924a83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97919732a8ebeb343705966b2ca649d35d3197e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97919732a8ebeb343705966b2ca649d35d3197e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97919732a8ebeb343705966b2ca649d35d3197e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97919732a8ebeb343705966b2ca649d35d3197e9/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5957283fa4958afc18ca718405417d742332d66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5957283fa4958afc18ca718405417d742332d66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5957283fa4958afc18ca718405417d742332d66c"}], "stats": {"total": 726, "additions": 653, "deletions": 73}, "files": [{"sha": "81df1e8babc76295592e4e4c1e15138bb08ed5d0", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -712,7 +712,9 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-pooglo$(objext) \\\n   s-pooloc$(objext) \\\n   s-poosiz$(objext) \\\n-  s-powtab$(objext) \\\n+  s-powflt$(objext) \\\n+  s-powlfl$(objext) \\\n+  s-powllf$(objext) \\\n   s-purexc$(objext) \\\n   s-putima$(objext) \\\n   s-rannum$(objext) \\"}, {"sha": "0cb483b1eaa48c6bfaad3040cbcee728e5b97eba", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -880,7 +880,7 @@ package body Exp_Imgv is\n    --      xx = [Long_Long_[Long_]]Unsigned\n \n    --    For floating-point types\n-   --      xx = Real\n+   --      xx = [Long_[Long_]]Float\n \n    --  For decimal fixed-point types, typ'Value (X) expands into\n \n@@ -1008,10 +1008,10 @@ package body Exp_Imgv is\n             then\n                Vid := RE_Value_Fixed128;\n             else\n-               Vid := RE_Value_Long_Long_Float;\n+               Vid := RE_Value_Long_Float;\n             end if;\n \n-            if Vid /= RE_Value_Long_Long_Float then\n+            if Vid /= RE_Value_Long_Float then\n                Append_To (Args,\n                  Make_Integer_Literal (Loc, -Norm_Num (Small_Value (Rtyp))));\n \n@@ -1031,10 +1031,19 @@ package body Exp_Imgv is\n          end;\n \n       elsif Is_Floating_Point_Type (Rtyp) then\n+         --  Short_Float and Float are the same type for GNAT\n+\n          if Rtyp = Standard_Short_Float or else Rtyp = Standard_Float then\n             Vid := RE_Value_Float;\n \n-         elsif Rtyp = Standard_Long_Float then\n+         --  If Long_Float and Long_Long_Float are the same type, then use the\n+         --  implementation of the former, which is faster and more accurate.\n+\n+         elsif Rtyp = Standard_Long_Float\n+           or else (Rtyp = Standard_Long_Long_Float\n+                     and then\n+                    Standard_Long_Long_Float_Size = Standard_Long_Float_Size)\n+         then\n             Vid := RE_Value_Long_Float;\n \n          elsif Rtyp = Standard_Long_Long_Float then"}, {"sha": "2ec6a1aec1d9b2747fe6ac42ffd30ed1ac9fa1c8", "filename": "gcc/ada/libgnat/s-imgrea.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -29,9 +29,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.Img_LLU;      use System.Img_LLU;\n-with System.Img_Uns;      use System.Img_Uns;\n-with System.Powten_Table; use System.Powten_Table;\n+with System.Img_LLU;    use System.Img_LLU;\n+with System.Img_Uns;    use System.Img_Uns;\n+with System.Powten_LLF; use System.Powten_LLF;\n with System.Float_Control;\n \n package body System.Img_Real is"}, {"sha": "9d58967d61ea44e0f16d8c9fe0d6e0f6f50cb4a7", "filename": "gcc/ada/libgnat/s-powflt.ads", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-powflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-powflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-powflt.ads?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -0,0 +1,85 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                    S Y S T E M . P O W T E N _ F L T                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides a powers of ten table used for real conversions\n+\n+package System.Powten_Flt is\n+   pragma Pure;\n+\n+   Maxpow : constant := 38;\n+   --  Largest power of ten representable with Float\n+\n+   Maxpow_Exact : constant := 10;\n+   --  Largest power of ten exactly representable with Float. It is equal to\n+   --  floor (M * log 2 / log 5), when M is the size of the mantissa (24).\n+\n+   Powten : constant array (0 .. Maxpow) of Float :=\n+      (00 => 1.0E+00,\n+       01 => 1.0E+01,\n+       02 => 1.0E+02,\n+       03 => 1.0E+03,\n+       04 => 1.0E+04,\n+       05 => 1.0E+05,\n+       06 => 1.0E+06,\n+       07 => 1.0E+07,\n+       08 => 1.0E+08,\n+       09 => 1.0E+09,\n+       10 => 1.0E+10,\n+       11 => 1.0E+11,\n+       12 => 1.0E+12,\n+       13 => 1.0E+13,\n+       14 => 1.0E+14,\n+       15 => 1.0E+15,\n+       16 => 1.0E+16,\n+       17 => 1.0E+17,\n+       18 => 1.0E+18,\n+       19 => 1.0E+19,\n+       20 => 1.0E+20,\n+       21 => 1.0E+21,\n+       22 => 1.0E+22,\n+       23 => 1.0E+23,\n+       24 => 1.0E+24,\n+       25 => 1.0E+25,\n+       26 => 1.0E+26,\n+       27 => 1.0E+27,\n+       28 => 1.0E+28,\n+       29 => 1.0E+29,\n+       30 => 1.0E+30,\n+       31 => 1.0E+31,\n+       32 => 1.0E+32,\n+       33 => 1.0E+33,\n+       34 => 1.0E+34,\n+       35 => 1.0E+35,\n+       36 => 1.0E+36,\n+       37 => 1.0E+37,\n+       38 => 1.0E+38);\n+\n+end System.Powten_Flt;"}, {"sha": "d191effe52dea72d1a5b7ce1e22416e0850b61cf", "filename": "gcc/ada/libgnat/s-powlfl.ads", "status": "added", "additions": 355, "deletions": 0, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-powlfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-powlfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-powlfl.ads?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -0,0 +1,355 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                   S Y S T E M . P O W T E N _ L F L T                    --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides a powers of ten table used for real conversions\n+\n+package System.Powten_LFlt is\n+   pragma Pure;\n+\n+   Maxpow : constant := 308;\n+   --  Largest power of ten representable with Long_Float\n+\n+   Maxpow_Exact : constant := 22;\n+   --  Largest power of ten exactly representable with Long_Float. It is equal\n+   --  to floor (M * log 2 / log 5), when M is the size of the mantissa (53).\n+\n+   Powten : constant array (0 .. Maxpow) of Long_Float :=\n+      (00 => 1.0E+00,\n+       01 => 1.0E+01,\n+       02 => 1.0E+02,\n+       03 => 1.0E+03,\n+       04 => 1.0E+04,\n+       05 => 1.0E+05,\n+       06 => 1.0E+06,\n+       07 => 1.0E+07,\n+       08 => 1.0E+08,\n+       09 => 1.0E+09,\n+       10 => 1.0E+10,\n+       11 => 1.0E+11,\n+       12 => 1.0E+12,\n+       13 => 1.0E+13,\n+       14 => 1.0E+14,\n+       15 => 1.0E+15,\n+       16 => 1.0E+16,\n+       17 => 1.0E+17,\n+       18 => 1.0E+18,\n+       19 => 1.0E+19,\n+       20 => 1.0E+20,\n+       21 => 1.0E+21,\n+       22 => 1.0E+22,\n+       23 => 1.0E+23,\n+       24 => 1.0E+24,\n+       25 => 1.0E+25,\n+       26 => 1.0E+26,\n+       27 => 1.0E+27,\n+       28 => 1.0E+28,\n+       29 => 1.0E+29,\n+       30 => 1.0E+30,\n+       31 => 1.0E+31,\n+       32 => 1.0E+32,\n+       33 => 1.0E+33,\n+       34 => 1.0E+34,\n+       35 => 1.0E+35,\n+       36 => 1.0E+36,\n+       37 => 1.0E+37,\n+       38 => 1.0E+38,\n+       39 => 1.0E+39,\n+       40 => 1.0E+40,\n+       41 => 1.0E+41,\n+       42 => 1.0E+42,\n+       43 => 1.0E+43,\n+       44 => 1.0E+44,\n+       45 => 1.0E+45,\n+       46 => 1.0E+46,\n+       47 => 1.0E+47,\n+       48 => 1.0E+48,\n+       49 => 1.0E+49,\n+       50 => 1.0E+50,\n+       51 => 1.0E+51,\n+       52 => 1.0E+52,\n+       53 => 1.0E+53,\n+       54 => 1.0E+54,\n+       55 => 1.0E+55,\n+       56 => 1.0E+56,\n+       57 => 1.0E+57,\n+       58 => 1.0E+58,\n+       59 => 1.0E+59,\n+       60 => 1.0E+60,\n+       61 => 1.0E+61,\n+       62 => 1.0E+62,\n+       63 => 1.0E+63,\n+       64 => 1.0E+64,\n+       65 => 1.0E+65,\n+       66 => 1.0E+66,\n+       67 => 1.0E+67,\n+       68 => 1.0E+68,\n+       69 => 1.0E+69,\n+       70 => 1.0E+70,\n+       71 => 1.0E+71,\n+       72 => 1.0E+72,\n+       73 => 1.0E+73,\n+       74 => 1.0E+74,\n+       75 => 1.0E+75,\n+       76 => 1.0E+76,\n+       77 => 1.0E+77,\n+       78 => 1.0E+78,\n+       79 => 1.0E+79,\n+       80 => 1.0E+80,\n+       81 => 1.0E+81,\n+       82 => 1.0E+82,\n+       83 => 1.0E+83,\n+       84 => 1.0E+84,\n+       85 => 1.0E+85,\n+       86 => 1.0E+86,\n+       87 => 1.0E+87,\n+       88 => 1.0E+88,\n+       89 => 1.0E+89,\n+       90 => 1.0E+90,\n+       91 => 1.0E+91,\n+       92 => 1.0E+92,\n+       93 => 1.0E+93,\n+       94 => 1.0E+94,\n+       95 => 1.0E+95,\n+       96 => 1.0E+96,\n+       97 => 1.0E+97,\n+       98 => 1.0E+98,\n+       99 => 1.0E+99,\n+       100 => 1.0E+100,\n+       101 => 1.0E+101,\n+       102 => 1.0E+102,\n+       103 => 1.0E+103,\n+       104 => 1.0E+104,\n+       105 => 1.0E+105,\n+       106 => 1.0E+106,\n+       107 => 1.0E+107,\n+       108 => 1.0E+108,\n+       109 => 1.0E+109,\n+       110 => 1.0E+110,\n+       111 => 1.0E+111,\n+       112 => 1.0E+112,\n+       113 => 1.0E+113,\n+       114 => 1.0E+114,\n+       115 => 1.0E+115,\n+       116 => 1.0E+116,\n+       117 => 1.0E+117,\n+       118 => 1.0E+118,\n+       119 => 1.0E+119,\n+       120 => 1.0E+120,\n+       121 => 1.0E+121,\n+       122 => 1.0E+122,\n+       123 => 1.0E+123,\n+       124 => 1.0E+124,\n+       125 => 1.0E+125,\n+       126 => 1.0E+126,\n+       127 => 1.0E+127,\n+       128 => 1.0E+128,\n+       129 => 1.0E+129,\n+       130 => 1.0E+130,\n+       131 => 1.0E+131,\n+       132 => 1.0E+132,\n+       133 => 1.0E+133,\n+       134 => 1.0E+134,\n+       135 => 1.0E+135,\n+       136 => 1.0E+136,\n+       137 => 1.0E+137,\n+       138 => 1.0E+138,\n+       139 => 1.0E+139,\n+       140 => 1.0E+140,\n+       141 => 1.0E+141,\n+       142 => 1.0E+142,\n+       143 => 1.0E+143,\n+       144 => 1.0E+144,\n+       145 => 1.0E+145,\n+       146 => 1.0E+146,\n+       147 => 1.0E+147,\n+       148 => 1.0E+148,\n+       149 => 1.0E+149,\n+       150 => 1.0E+150,\n+       151 => 1.0E+151,\n+       152 => 1.0E+152,\n+       153 => 1.0E+153,\n+       154 => 1.0E+154,\n+       155 => 1.0E+155,\n+       156 => 1.0E+156,\n+       157 => 1.0E+157,\n+       158 => 1.0E+158,\n+       159 => 1.0E+159,\n+       160 => 1.0E+160,\n+       161 => 1.0E+161,\n+       162 => 1.0E+162,\n+       163 => 1.0E+163,\n+       164 => 1.0E+164,\n+       165 => 1.0E+165,\n+       166 => 1.0E+166,\n+       167 => 1.0E+167,\n+       168 => 1.0E+168,\n+       169 => 1.0E+169,\n+       170 => 1.0E+170,\n+       171 => 1.0E+171,\n+       172 => 1.0E+172,\n+       173 => 1.0E+173,\n+       174 => 1.0E+174,\n+       175 => 1.0E+175,\n+       176 => 1.0E+176,\n+       177 => 1.0E+177,\n+       178 => 1.0E+178,\n+       179 => 1.0E+179,\n+       180 => 1.0E+180,\n+       181 => 1.0E+181,\n+       182 => 1.0E+182,\n+       183 => 1.0E+183,\n+       184 => 1.0E+184,\n+       185 => 1.0E+185,\n+       186 => 1.0E+186,\n+       187 => 1.0E+187,\n+       188 => 1.0E+188,\n+       189 => 1.0E+189,\n+       190 => 1.0E+190,\n+       191 => 1.0E+191,\n+       192 => 1.0E+192,\n+       193 => 1.0E+193,\n+       194 => 1.0E+194,\n+       195 => 1.0E+195,\n+       196 => 1.0E+196,\n+       197 => 1.0E+197,\n+       198 => 1.0E+198,\n+       199 => 1.0E+199,\n+       200 => 1.0E+200,\n+       201 => 1.0E+201,\n+       202 => 1.0E+202,\n+       203 => 1.0E+203,\n+       204 => 1.0E+204,\n+       205 => 1.0E+205,\n+       206 => 1.0E+206,\n+       207 => 1.0E+207,\n+       208 => 1.0E+208,\n+       209 => 1.0E+209,\n+       210 => 1.0E+210,\n+       211 => 1.0E+211,\n+       212 => 1.0E+212,\n+       213 => 1.0E+213,\n+       214 => 1.0E+214,\n+       215 => 1.0E+215,\n+       216 => 1.0E+216,\n+       217 => 1.0E+217,\n+       218 => 1.0E+218,\n+       219 => 1.0E+219,\n+       220 => 1.0E+220,\n+       221 => 1.0E+221,\n+       222 => 1.0E+222,\n+       223 => 1.0E+223,\n+       224 => 1.0E+224,\n+       225 => 1.0E+225,\n+       226 => 1.0E+226,\n+       227 => 1.0E+227,\n+       228 => 1.0E+228,\n+       229 => 1.0E+229,\n+       230 => 1.0E+230,\n+       231 => 1.0E+231,\n+       232 => 1.0E+232,\n+       233 => 1.0E+233,\n+       234 => 1.0E+234,\n+       235 => 1.0E+235,\n+       236 => 1.0E+236,\n+       237 => 1.0E+237,\n+       238 => 1.0E+238,\n+       239 => 1.0E+239,\n+       240 => 1.0E+240,\n+       241 => 1.0E+241,\n+       242 => 1.0E+242,\n+       243 => 1.0E+243,\n+       244 => 1.0E+244,\n+       245 => 1.0E+245,\n+       246 => 1.0E+246,\n+       247 => 1.0E+247,\n+       248 => 1.0E+248,\n+       249 => 1.0E+249,\n+       250 => 1.0E+250,\n+       251 => 1.0E+251,\n+       252 => 1.0E+252,\n+       253 => 1.0E+253,\n+       254 => 1.0E+254,\n+       255 => 1.0E+255,\n+       256 => 1.0E+256,\n+       257 => 1.0E+257,\n+       258 => 1.0E+258,\n+       259 => 1.0E+259,\n+       260 => 1.0E+260,\n+       261 => 1.0E+261,\n+       262 => 1.0E+262,\n+       263 => 1.0E+263,\n+       264 => 1.0E+264,\n+       265 => 1.0E+265,\n+       266 => 1.0E+266,\n+       267 => 1.0E+267,\n+       268 => 1.0E+268,\n+       269 => 1.0E+269,\n+       270 => 1.0E+270,\n+       271 => 1.0E+271,\n+       272 => 1.0E+272,\n+       273 => 1.0E+273,\n+       274 => 1.0E+274,\n+       275 => 1.0E+275,\n+       276 => 1.0E+276,\n+       277 => 1.0E+277,\n+       278 => 1.0E+278,\n+       279 => 1.0E+279,\n+       280 => 1.0E+280,\n+       281 => 1.0E+281,\n+       282 => 1.0E+282,\n+       283 => 1.0E+283,\n+       284 => 1.0E+284,\n+       285 => 1.0E+285,\n+       286 => 1.0E+286,\n+       287 => 1.0E+287,\n+       288 => 1.0E+288,\n+       289 => 1.0E+289,\n+       290 => 1.0E+290,\n+       291 => 1.0E+291,\n+       292 => 1.0E+292,\n+       293 => 1.0E+293,\n+       294 => 1.0E+294,\n+       295 => 1.0E+295,\n+       296 => 1.0E+296,\n+       297 => 1.0E+297,\n+       298 => 1.0E+298,\n+       299 => 1.0E+299,\n+       300 => 1.0E+300,\n+       301 => 1.0E+301,\n+       302 => 1.0E+302,\n+       303 => 1.0E+303,\n+       304 => 1.0E+304,\n+       305 => 1.0E+305,\n+       306 => 1.0E+306,\n+       307 => 1.0E+307,\n+       308 => 1.0E+308);\n+\n+end System.Powten_LFlt;"}, {"sha": "c5c42a14c3beb7f1c472f00d4ce482ed0962a34e", "filename": "gcc/ada/libgnat/s-powllf.ads", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-powllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-powllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-powllf.ads?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                  S Y S T E M . P O W T E N _ T A B L E                   --\n+--                    S Y S T E M . P O W T E N _ L L F                     --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n@@ -31,7 +31,7 @@\n \n --  This package provides a powers of ten table used for real conversions\n \n-package System.Powten_Table is\n+package System.Powten_LLF is\n    pragma Pure;\n \n    Maxpow : constant := 22;\n@@ -67,4 +67,4 @@ package System.Powten_Table is\n        21 => 1.0E+21,\n        22 => 1.0E+22);\n \n-end System.Powten_Table;\n+end System.Powten_LLF;", "previous_filename": "gcc/ada/libgnat/s-powtab.ads"}, {"sha": "5806d580997f7f18d8122240544b47433f9d62bf", "filename": "gcc/ada/libgnat/s-valflt.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valflt.ads?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -33,12 +33,17 @@\n --  type Float, for use in Text_IO.Float_IO and the Value attribute.\n \n with Interfaces;\n+with System.Powten_Flt;\n with System.Val_Real;\n \n package System.Val_Flt is\n    pragma Preelaborate;\n \n-   package Impl is new Val_Real (Float, Interfaces.Unsigned_32);\n+   package Impl is new Val_Real\n+     (Float,\n+      Interfaces.Unsigned_32,\n+      System.Powten_Flt.Maxpow,\n+      System.Powten_Flt.Powten'Address);\n \n    function Scan_Float\n      (Str : String;"}, {"sha": "c612f75dfc4d72eb77593e948df0e36579db2074", "filename": "gcc/ada/libgnat/s-vallfl.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -33,12 +33,17 @@\n --  type Long_Float, for use in Text_IO.Float_IO and the Value attribute.\n \n with Interfaces;\n+with System.Powten_LFlt;\n with System.Val_Real;\n \n package System.Val_LFlt is\n    pragma Preelaborate;\n \n-   package Impl is new Val_Real (Long_Float, Interfaces.Unsigned_64);\n+   package Impl is new Val_Real\n+     (Long_Float,\n+      Interfaces.Unsigned_64,\n+      System.Powten_LFlt.Maxpow,\n+      System.Powten_LFlt.Powten'Address);\n \n    function Scan_Long_Float\n      (Str : String;"}, {"sha": "46a311b9da2ce9689825d44e0375d296e82356ad", "filename": "gcc/ada/libgnat/s-valllf.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valllf.ads?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -33,12 +33,17 @@\n --  type Long_Long_Float, for use in Text_IO.Float_IO and the Value attribute.\n \n with Interfaces;\n+with System.Powten_LLF;\n with System.Val_Real;\n \n package System.Val_LLF is\n    pragma Preelaborate;\n \n-   package Impl is new Val_Real (Long_Long_Float, Interfaces.Unsigned_64);\n+   package Impl is new Val_Real\n+     (Long_Long_Float,\n+      Interfaces.Unsigned_64,\n+      System.Powten_LLF.Maxpow,\n+      System.Powten_LLF.Powten'Address);\n \n    function Scan_Long_Long_Float\n      (Str : String;"}, {"sha": "9614760199d26cf8f085a84c9fbc3512a48ee830", "filename": "gcc/ada/libgnat/s-valrea.adb", "status": "modified", "additions": 99, "deletions": 17, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.adb?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -34,15 +34,26 @@ with System.Unsigned_Types; use System.Unsigned_Types;\n with System.Val_Util;       use System.Val_Util;\n with System.Value_R;\n \n+pragma Warnings (Off, \"non-static constant in preelaborated unit\");\n+--  Every constant is static given our instantiation model\n+\n package body System.Val_Real is\n \n    pragma Assert (Num'Machine_Mantissa <= Uns'Size);\n    --  We need an unsigned type large enough to represent the mantissa\n \n-   Precision_Limit : constant Uns := 2**Num'Machine_Mantissa - 1;\n-   --  We use the precision of the floating-point type\n+   Need_Extra : constant Boolean := Num'Machine_Mantissa > Uns'Size - 4;\n+   --  If the mantissa of the floating-point type is almost as large as that\n+   --  of the unsigned type, we do not have enough space for an extra digit\n+   --  in the unsigned type so we handle the extra digit separately, at the\n+   --  cost of a potential roundoff error.\n+\n+   Precision_Limit : constant Uns :=\n+     (if Need_Extra then 2**Num'Machine_Mantissa - 1 else 2**Uns'Size - 1);\n+   --  If we handle the extra digit separately, we use the precision of the\n+   --  floating-point type so that the conversion is exact.\n \n-   package Impl is new Value_R (Uns, Precision_Limit, Floating => True);\n+   package Impl is new Value_R (Uns, Precision_Limit, Round => Need_Extra);\n \n    subtype Base_T is Unsigned range 2 .. 16;\n \n@@ -88,6 +99,8 @@ package body System.Val_Real is\n    is\n       pragma Assert (Base in 2 .. 16);\n \n+      pragma Assert (Num'Machine_Radix = 2);\n+\n       pragma Unsuppress (Range_Check);\n \n       Maxexp : constant Positive :=\n@@ -112,29 +125,98 @@ package body System.Val_Real is\n          System.Float_Control.Reset;\n       end if;\n \n-      --  Take into account the extra digit\n+      --  Do the conversion\n \n       R_Val := Num (Val);\n-      if Extra > 0 then\n+\n+      --  Take into account the extra digit, if need be. In this case, the\n+      --  three operands are exact, so using an FMA would be ideal.\n+\n+      if Need_Extra and then Extra > 0 then\n          R_Val := R_Val * B + Num (Extra);\n          S := S - 1;\n       end if;\n \n-      --  Compute the final value. When the exponent is positive, we can do the\n-      --  computation directly because, if the exponentiation overflows, then\n-      --  the final value overflows as well. But when the exponent is negative,\n-      --  we may need to do it in two steps to avoid an artificial underflow.\n+      --  Compute the final value\n+\n+      if R_Val /= 0.0 and then S /= 0 then\n+         case Base is\n+            --  If the base is a power of two, we use the efficient Scaling\n+            --  attribute with an overflow check, if it is not 2, to catch\n+            --  ludicrous exponents that would result in an infinity or zero.\n+\n+            when 2 =>\n+               R_Val := Num'Scaling (R_Val, S);\n+\n+            when 4 =>\n+               if Integer'First / 2 <= S and then S <= Integer'Last / 2 then\n+                  S := S * 2;\n+               end if;\n+\n+               R_Val := Num'Scaling (R_Val, S);\n+\n+            when 8 =>\n+               if Integer'First / 3 <= S and then S <= Integer'Last / 3 then\n+                  S := S * 3;\n+               end if;\n+\n+               R_Val := Num'Scaling (R_Val, S);\n+\n+            when 16 =>\n+               if Integer'First / 4 <= S and then S <= Integer'Last / 4 then\n+                  S := S * 4;\n+               end if;\n+\n+               R_Val := Num'Scaling (R_Val, S);\n+\n+            --  If the base is 10, we use a table of powers for accuracy's sake\n+\n+            when 10 =>\n+               declare\n+                  Powten : constant array (0 .. Maxpow) of Num;\n+                  pragma Import (Ada, Powten);\n+                  for Powten'Address use Powten_Address;\n+\n+               begin\n+                  if S > 0 then\n+                     while S > Maxpow loop\n+                        R_Val := R_Val * Powten (Maxpow);\n+                        S := S - Maxpow;\n+                     end loop;\n+\n+                     R_Val := R_Val * Powten (S);\n+\n+                  else\n+                     while S < -Maxpow loop\n+                        R_Val := R_Val / Powten (Maxpow);\n+                        S := S + Maxpow;\n+                     end loop;\n+\n+                     R_Val := R_Val / Powten (-S);\n+                  end if;\n+               end;\n+\n+            --  Implementation for other bases with exponentiation\n+\n+            --  When the exponent is positive, we can do the computation\n+            --  directly because, if the exponentiation overflows, then\n+            --  the final value overflows as well. But when the exponent\n+            --  is negative, we may need to do it in two steps to avoid\n+            --  an artificial underflow.\n \n-      if S > 0 then\n-         R_Val := R_Val * B ** S;\n+            when others =>\n+               if S > 0 then\n+                  R_Val := R_Val * B ** S;\n \n-      elsif S < 0 then\n-         if S < -Maxexp then\n-            R_Val := R_Val / B ** Maxexp;\n-            S := S + Maxexp;\n-         end if;\n+               else\n+                  if S < -Maxexp then\n+                     R_Val := R_Val / B ** Maxexp;\n+                     S := S + Maxexp;\n+                  end if;\n \n-         R_Val := R_Val / B ** (-S);\n+                  R_Val := R_Val / B ** (-S);\n+               end if;\n+         end case;\n       end if;\n \n       --  Finally deal with initial minus sign, note that this processing is"}, {"sha": "d6ade8092858d16b218108d79809299f87aa960a", "filename": "gcc/ada/libgnat/s-valrea.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.ads?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -38,6 +38,10 @@ generic\n \n    type Uns is mod <>;\n \n+   Maxpow : Positive;\n+\n+   Powten_Address : System.Address;\n+\n package System.Val_Real is\n    pragma Preelaborate;\n "}, {"sha": "89307520fa02105fff62befc683be0f4a7cfbddb", "filename": "gcc/ada/libgnat/s-valued.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valued.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valued.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valued.adb?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -38,7 +38,8 @@ package body System.Value_D is\n    pragma Assert (Int'Size <= Uns'Size);\n    --  We need an unsigned type large enough to represent the mantissa\n \n-   package Impl is new Value_R (Uns, 2**(Int'Size - 1), Floating => False);\n+   package Impl is new Value_R (Uns, 2**(Int'Size - 1), Round => False);\n+   --  We do not use the Extra digit for decimal fixed-point types\n \n    function Integer_to_Decimal\n      (Str    : String;\n@@ -231,6 +232,7 @@ package body System.Value_D is\n       Base   : Unsigned;\n       ScaleB : Integer;\n       Extra  : Unsigned;\n+      pragma Unreferenced (Extra);\n       Minus  : Boolean;\n       Val    : Uns;\n \n@@ -248,6 +250,7 @@ package body System.Value_D is\n       Base   : Unsigned;\n       ScaleB : Integer;\n       Extra  : Unsigned;\n+      pragma Unreferenced (Extra);\n       Minus  : Boolean;\n       Val    : Uns;\n "}, {"sha": "d13111a4ae54a57a5db047754087b136c1bc6e81", "filename": "gcc/ada/libgnat/s-valuef.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valuef.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valuef.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuef.adb?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -46,7 +46,8 @@ package body System.Value_F is\n    pragma Assert (Int'Size <= Uns'Size);\n    --  We need an unsigned type large enough to represent the mantissa\n \n-   package Impl is new Value_R (Uns, 2**(Int'Size - 1), Floating => False);\n+   package Impl is new Value_R (Uns, 2**(Int'Size - 1), Round => True);\n+   --  We use the Extra digit for ordinary fixed-point types\n \n    function Integer_To_Fixed\n      (Str    : String;"}, {"sha": "9e4de3e299e02e34582c55951eab9917726ec151", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 63, "deletions": 39, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -42,6 +42,14 @@ package body System.Value_R is\n    function As_Digit (C : Character) return Char_As_Digit;\n    --  Given a character return the digit it represents\n \n+   procedure Round_Extra\n+     (Digit : Char_As_Digit;\n+      Value : in out Uns;\n+      Scale : in out Integer;\n+      Extra : in out Char_As_Digit;\n+      Base  : Unsigned);\n+   --  Round the triplet (Value, Scale, Extra) according to Digit in Base\n+\n    procedure Scan_Decimal_Digits\n       (Str            : String;\n        Index          : in out Integer;\n@@ -109,6 +117,45 @@ package body System.Value_R is\n       end case;\n    end As_Digit;\n \n+   -----------------\n+   -- Round_Extra --\n+   -----------------\n+\n+   procedure Round_Extra\n+     (Digit : Char_As_Digit;\n+      Value : in out Uns;\n+      Scale : in out Integer;\n+      Extra : in out Char_As_Digit;\n+      Base  : Unsigned)\n+   is\n+      B : constant Uns := Uns (Base);\n+\n+   begin\n+      if Digit >= Base / 2 then\n+\n+         --  If Extra is maximum, round Value\n+\n+         if Extra = Base - 1 then\n+\n+            --  If Value is maximum, scale it up\n+\n+            if Value = Precision_Limit then\n+               Extra := Char_As_Digit (Value mod B);\n+               Value := Value / B;\n+               Scale := Scale + 1;\n+               Round_Extra (Digit, Value, Scale, Extra, Base);\n+\n+            else\n+               Extra := 0;\n+               Value := Value + 1;\n+            end if;\n+\n+         else\n+            Extra := Extra + 1;\n+         end if;\n+      end if;\n+   end Round_Extra;\n+\n    -------------------------\n    -- Scan_Decimal_Digits --\n    -------------------------\n@@ -140,8 +187,8 @@ package body System.Value_R is\n       --  to Precision_Limit.\n \n       Precision_Limit_Just_Reached : Boolean;\n-      --  Set to True if Precision_Limit_Reached was just set to True\n-      --  Only used when Floating = False.\n+      --  Set to True if Precision_Limit_Reached was just set to True, but only\n+      --  used when Round is True.\n \n       Digit : Char_As_Digit;\n       --  The current digit\n@@ -162,7 +209,7 @@ package body System.Value_R is\n          Extra := 0;\n       end if;\n \n-      if not Floating then\n+      if Round then\n          Precision_Limit_Just_Reached := False;\n       end if;\n \n@@ -188,22 +235,12 @@ package body System.Value_R is\n \n          --  If precision limit has been reached, just ignore any remaining\n          --  digits for the computation of Value and Scale, but store the\n-         --  first in Extra and use the second to round Extra if this is for\n-         --  a fixed-point type (we skip the rounding for a floating-point\n-         --  type to preserve backward compatibility). The scanning should\n-         --  continue only to assess the validity of the string.\n+         --  first in Extra and use the second to round Extra. The scanning\n+         --  should continue only to assess the validity of the string.\n \n          if Precision_Limit_Reached then\n-            if not Floating and then Precision_Limit_Just_Reached then\n-               if Digit >= Base / 2 then\n-                  if Extra = Base - 1 then\n-                     Extra := 0;\n-                     Value := Value + 1;\n-                  else\n-                     Extra := Extra + 1;\n-                  end if;\n-               end if;\n-\n+            if Round and then Precision_Limit_Just_Reached then\n+               Round_Extra (Digit, Value, Scale, Extra, Base);\n                Precision_Limit_Just_Reached := False;\n             end if;\n \n@@ -252,8 +289,7 @@ package body System.Value_R is\n                else\n                   Extra := Digit;\n                   Precision_Limit_Reached := True;\n-\n-                  if not Floating then\n+                  if Round then\n                      Precision_Limit_Just_Reached := True;\n                   end if;\n                end if;\n@@ -320,8 +356,8 @@ package body System.Value_R is\n       --  to Precision_Limit.\n \n       Precision_Limit_Just_Reached : Boolean;\n-      --  Set to True if Precision_Limit_Reached was just set to True.\n-      --  Only used when Floating = False.\n+      --  Set to True if Precision_Limit_Reached was just set to True, but only\n+      --  used when Round is True.\n \n       Digit : Char_As_Digit;\n       --  The current digit\n@@ -336,7 +372,7 @@ package body System.Value_R is\n       Scale := 0;\n       Extra := 0;\n \n-      if not Floating then\n+      if Round then\n          Precision_Limit_Just_Reached := False;\n       end if;\n \n@@ -364,24 +400,14 @@ package body System.Value_R is\n \n          --  If precision limit has been reached, just ignore any remaining\n          --  digits for the computation of Value and Scale, but store the\n-         --  first in Extra and use the second to round Extra if this is for\n-         --  a fixed-point type (we skip the rounding for a floating-point\n-         --  type to preserve backward compatibility). The scanning should\n-         --  continue only to assess the validity of the string.\n+         --  first in Extra and use the second to round Extra. The scanning\n+         --  should continue only to assess the validity of the string.\n \n          if Precision_Limit_Reached then\n             Scale := Scale + 1;\n \n-            if not Floating and then Precision_Limit_Just_Reached then\n-               if Digit >= Base / 2 then\n-                  if Extra = Base - 1 then\n-                     Extra := 0;\n-                     Value := Value + 1;\n-                  else\n-                     Extra := Extra + 1;\n-                  end if;\n-               end if;\n-\n+            if Round and then Precision_Limit_Just_Reached then\n+               Round_Extra (Digit, Value, Scale, Extra, Base);\n                Precision_Limit_Just_Reached := False;\n             end if;\n \n@@ -404,11 +430,9 @@ package body System.Value_R is\n             else\n                Extra := Digit;\n                Precision_Limit_Reached := True;\n-\n-               if not Floating then\n+               if Round then\n                   Precision_Limit_Just_Reached := True;\n                end if;\n-\n                Scale := Scale + 1;\n             end if;\n          end if;"}, {"sha": "a933859eae2ed0cc69c4a7bf01537e8c85b7d70b", "filename": "gcc/ada/libgnat/s-valuer.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valuer.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97919732a8ebeb343705966b2ca649d35d3197e9/gcc%2Fada%2Flibgnat%2Fs-valuer.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.ads?ref=97919732a8ebeb343705966b2ca649d35d3197e9", "patch": "@@ -40,7 +40,7 @@ generic\n \n    Precision_Limit : Uns;\n \n-   Floating : Boolean;\n+   Round : Boolean;\n \n package System.Value_R is\n    pragma Preelaborate;"}]}