{"sha": "db80ccd34365c14e529111c94b93d3fb201b6eef", "node_id": "C_kwDOANBUbNoAKGRiODBjY2QzNDM2NWMxNGU1MjkxMTFjOTRiOTNkM2ZiMjAxYjZlZWY", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2023-03-01T15:32:50Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2023-03-23T11:00:54Z"}, "message": "amdgcn: vec_extract no-op insns\n\nJust using move insn for no-op conversions triggers special move handling in\nIRA which declares that subreg of vectors aren't valid and routes everything\nthrough memory.  These patterns make the vec_select explicit and all is well.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-protos.h (gcn_stepped_zero_int_parallel_p): New.\n\t* config/gcn/gcn-valu.md (V_1REG_ALT): New.\n\t(V_2REG_ALT): New.\n\t(vec_extract<V_1REG:mode><V_1REG_ALT:mode>_nop): New.\n\t(vec_extract<V_2REG:mode><V_2REG_ALT:mode>_nop): New.\n\t(vec_extract<V_ALL:mode><V_ALL_ALT:mode>): Use new patterns.\n\t* config/gcn/gcn.cc (gcn_stepped_zero_int_parallel_p): New.\n\t* config/gcn/predicates.md (ascending_zero_int_parallel): New.", "tree": {"sha": "40155abe9aeb7e9f81e91ea15484c9fafc9e26bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40155abe9aeb7e9f81e91ea15484c9fafc9e26bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db80ccd34365c14e529111c94b93d3fb201b6eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db80ccd34365c14e529111c94b93d3fb201b6eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db80ccd34365c14e529111c94b93d3fb201b6eef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db80ccd34365c14e529111c94b93d3fb201b6eef/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "484c41c747d95f9cee15a33b75b32ae2e7eb45f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484c41c747d95f9cee15a33b75b32ae2e7eb45f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484c41c747d95f9cee15a33b75b32ae2e7eb45f3"}], "stats": {"total": 87, "additions": 78, "deletions": 9}, "files": [{"sha": "287ce17d4225bdb0942df0061bc9bff814970f34", "filename": "gcc/config/gcn/gcn-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80ccd34365c14e529111c94b93d3fb201b6eef/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80ccd34365c14e529111c94b93d3fb201b6eef/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h?ref=db80ccd34365c14e529111c94b93d3fb201b6eef", "patch": "@@ -75,6 +75,7 @@ extern reg_class gcn_regno_reg_class (int regno);\n extern bool gcn_scalar_flat_address_p (rtx);\n extern bool gcn_scalar_flat_mem_p (rtx);\n extern bool gcn_sgpr_move_p (rtx, rtx);\n+extern bool gcn_stepped_zero_int_parallel_p (rtx op, int step);\n extern bool gcn_valid_move_p (machine_mode, rtx, rtx);\n extern rtx gcn_vec_constant (machine_mode, int);\n extern rtx gcn_vec_constant (machine_mode, rtx);"}, {"sha": "334b6b0b51cfea56eed7a0c47aeb3e34b40ad616", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80ccd34365c14e529111c94b93d3fb201b6eef/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80ccd34365c14e529111c94b93d3fb201b6eef/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=db80ccd34365c14e529111c94b93d3fb201b6eef", "patch": "@@ -49,6 +49,13 @@\n \t\t       V16QI V16HI V16SI V16HF V16SF\n \t\t       V32QI V32HI V32SI V32HF V32SF\n \t\t       V64QI V64HI V64SI V64HF V64SF])\n+(define_mode_iterator V_1REG_ALT\n+\t\t      [V2QI V2HI V2SI V2HF V2SF\n+\t\t       V4QI V4HI V4SI V4HF V4SF\n+\t\t       V8QI V8HI V8SI V8HF V8SF\n+\t\t       V16QI V16HI V16SI V16HF V16SF\n+\t\t       V32QI V32HI V32SI V32HF V32SF\n+\t\t       V64QI V64HI V64SI V64HF V64SF])\n \n (define_mode_iterator V_INT_1REG\n \t\t      [V2QI V2HI V2SI\n@@ -80,6 +87,13 @@\n \t\t       V16DI V16DF\n \t\t       V32DI V32DF\n \t\t       V64DI V64DF])\n+(define_mode_iterator V_2REG_ALT\n+\t\t      [V2DI V2DF\n+\t\t       V4DI V4DF\n+\t\t       V8DI V8DF\n+\t\t       V16DI V16DF\n+\t\t       V32DI V32DF\n+\t\t       V64DI V64DF])\n \n ; Vector modes with native support\n (define_mode_iterator V_noQI\n@@ -788,11 +802,36 @@\n    (set_attr \"exec\" \"none\")\n    (set_attr \"laneselect\" \"yes\")])\n \n+(define_insn \"vec_extract<V_1REG:mode><V_1REG_ALT:mode>_nop\"\n+  [(set (match_operand:V_1REG_ALT 0 \"register_operand\" \"=v,v\")\n+\t(vec_select:V_1REG_ALT\n+\t  (match_operand:V_1REG 1 \"register_operand\"   \" 0,v\")\n+\t  (match_operand 2 \"ascending_zero_int_parallel\" \"\")))]\n+  \"MODE_VF (<V_1REG_ALT:MODE>mode) < MODE_VF (<V_1REG:MODE>mode)\n+   && <V_1REG_ALT:SCALAR_MODE>mode == <V_1REG:SCALAR_MODE>mode\"\n+  \"@\n+  ; in-place extract %0\n+  v_mov_b32\\t%L0, %L1\"\n+  [(set_attr \"type\" \"vmult\")\n+   (set_attr \"length\" \"0,8\")])\n+  \n+(define_insn \"vec_extract<V_2REG:mode><V_2REG_ALT:mode>_nop\"\n+  [(set (match_operand:V_2REG_ALT 0 \"register_operand\" \"=v,v\")\n+\t(vec_select:V_2REG_ALT\n+\t  (match_operand:V_2REG 1 \"register_operand\"   \" 0,v\")\n+\t  (match_operand 2 \"ascending_zero_int_parallel\" \"\")))]\n+  \"MODE_VF (<V_2REG_ALT:MODE>mode) < MODE_VF (<V_2REG:MODE>mode)\n+   && <V_2REG_ALT:SCALAR_MODE>mode == <V_2REG:SCALAR_MODE>mode\"\n+  \"@\n+  ; in-place extract %0\n+  v_mov_b32\\t%L0, %L1\\;v_mov_b32\\t%H0, %H1\"\n+  [(set_attr \"type\" \"vmult\")\n+   (set_attr \"length\" \"0,8\")])\n+  \n (define_expand \"vec_extract<V_ALL:mode><V_ALL_ALT:mode>\"\n-  [(set (match_operand:V_ALL_ALT 0 \"register_operand\")\n-\t(vec_select:V_ALL_ALT\n-\t  (match_operand:V_ALL 1 \"register_operand\")\n-\t  (parallel [(match_operand 2 \"immediate_operand\")])))]\n+  [(match_operand:V_ALL_ALT 0 \"register_operand\")\n+   (match_operand:V_ALL 1 \"register_operand\")\n+   (match_operand 2 \"immediate_operand\")]\n   \"MODE_VF (<V_ALL_ALT:MODE>mode) < MODE_VF (<V_ALL:MODE>mode)\n    && <V_ALL_ALT:SCALAR_MODE>mode == <V_ALL:SCALAR_MODE>mode\"\n   {\n@@ -802,8 +841,12 @@\n \n     if (firstlane == 0)\n       {\n-\t/* A plain move will do.  */\n-\ttmp = operands[1];\n+\trtx parallel = gen_rtx_PARALLEL (<V_ALL:MODE>mode,\n+\t\t\t\t\t  rtvec_alloc (numlanes));\n+\tfor (int i = 0; i < numlanes; i++)\n+\t  XVECEXP (parallel, 0, i) = GEN_INT (i);\n+\temit_insn (gen_vec_extract<V_ALL:mode><V_ALL_ALT:mode>_nop\n+\t\t   (operands[0], operands[1], parallel));\n       } else {\n         /* FIXME: optimize this by using DPP where available.  */\n \n@@ -815,10 +858,10 @@\n \ttmp = gen_reg_rtx (<V_ALL:MODE>mode);\n \temit_insn (gen_ds_bpermute<V_ALL:mode> (tmp, permutation, operands[1],\n \t\t\t\t\t\tget_exec (<V_ALL:MODE>mode)));\n-      }\n \n-    emit_move_insn (operands[0],\n-\t\t    gen_rtx_SUBREG (<V_ALL_ALT:MODE>mode, tmp, 0));\n+\temit_move_insn (operands[0],\n+\t\t\tgen_rtx_SUBREG (<V_ALL_ALT:MODE>mode, tmp, 0));\n+      }\n     DONE;\n   })\n "}, {"sha": "5bf88e98083874a15c16b1650b4844279b675127", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80ccd34365c14e529111c94b93d3fb201b6eef/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80ccd34365c14e529111c94b93d3fb201b6eef/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=db80ccd34365c14e529111c94b93d3fb201b6eef", "patch": "@@ -1422,6 +1422,24 @@ CODE_FOR_OP (reload_out)\n #undef CODE_FOR_OP\n #undef CODE_FOR\n \n+/* Return true if OP is a PARALLEL of CONST_INTs that form a linear\n+   series with step STEP.  */\n+\n+bool\n+gcn_stepped_zero_int_parallel_p (rtx op, int step)\n+{\n+  if (GET_CODE (op) != PARALLEL || !CONST_INT_P (XVECEXP (op, 0, 0)))\n+    return false;\n+\n+  unsigned HOST_WIDE_INT base = 0;\n+  for (int i = 0; i < XVECLEN (op, 0); ++i)\n+    if (!CONST_INT_P (XVECEXP (op, 0, i))\n+\t|| UINTVAL (XVECEXP (op, 0, i)) != base + i * step)\n+      return false;\n+\n+  return true;\n+}\n+\n /* }}}  */\n /* {{{ Addresses, pointers and moves.  */\n "}, {"sha": "5554a06b63b5513791dee097a3c9d004d3c3d124", "filename": "gcc/config/gcn/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80ccd34365c14e529111c94b93d3fb201b6eef/gcc%2Fconfig%2Fgcn%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80ccd34365c14e529111c94b93d3fb201b6eef/gcc%2Fconfig%2Fgcn%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fpredicates.md?ref=db80ccd34365c14e529111c94b93d3fb201b6eef", "patch": "@@ -197,3 +197,10 @@\n        (ior (match_operand 0 \"gcn_ds_memory_operand\")\n \t    (and (match_code \"unspec\")\n               (match_test \"XINT (op, 1) == UNSPEC_VECTOR\")))))\n+\n+(define_predicate \"ascending_zero_int_parallel\"\n+  (match_code \"parallel\")\n+{\n+  return gcn_stepped_zero_int_parallel_p (op, 1);\n+})\n+"}]}