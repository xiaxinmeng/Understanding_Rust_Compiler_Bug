{"sha": "d485982286692075d175dbbcf17d00431106ce96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4NTk4MjI4NjY5MjA3NWQxNzVkYmJjZjE3ZDAwNDMxMTA2Y2U5Ng==", "commit": {"author": {"name": "Yaakov Selkowitz", "email": "yselkowi@redhat.com", "date": "2015-08-24T10:24:52Z"}, "committer": {"name": "Pedro Alves", "email": "palves@gcc.gnu.org", "date": "2015-08-24T10:24:52Z"}, "message": "Missing parts of fixes for in-tree libiconv\n\n(The previous iconv-related commit missed the config/iconv.m4 change.)\n\nOriginal description:\n\nThis is the second in a series of patches to make a build with an\nin-tree GNU libiconv work as designed.\n\nCurrently GDB is the only toolchain component which actually uses an\nin-tree libiconv.  This patch modifies the common AM_ICONV to use an\nin-tree libiconv when present and not already provided by libc.\n(GDB's workaround uses an in-tree libiconv even when libc provides\niconv(3); I'm not sure when or why that would be desirable.)\n\nconfig/ChangeLog:\n2015-08-24  Yaakov Selkowitz  <yselkowi@redhat.com>\n\n\t* iconv.m4 (AM_ICONV_LINK): Use in-tree libiconv when present.\n---\n config/ChangeLog   |  4 +++\n config/iconv.m4    | 47 +++++++++++++++++++++------\n 4 files changed, 112 insertions(+), 36 deletions(-)\n\ndiff --git a/config/iconv.m4 b/config/iconv.m4\nindex c5f3579..5f9304a 100644\n--- a/config/iconv.m4\n+++ b/config/iconv.m4\n@@ -7,6 +7,7 @@ dnl that contains a configuration script generated by Autoconf, under\n dnl the same distribution terms as the rest of that program.\n \n dnl From Bruno Haible.\n+dnl with modifications to support building with in-tree libiconv\n \n AC_DEFUN([AM_ICONV_LINKFLAGS_BODY],\n [\n@@ -28,24 +29,51 @@ AC_DEFUN([AM_ICONV_LINK],\n   dnl accordingly.\n   AC_REQUIRE([AM_ICONV_LINKFLAGS_BODY])\n \n-  dnl Add $INCICONV to CPPFLAGS before performing the following checks,\n-  dnl because if the user has installed libiconv and not disabled its use\n-  dnl via --without-libiconv-prefix, he wants to use it. The first\n-  dnl AC_TRY_LINK will then fail, the second AC_TRY_LINK will succeed.\n-  am_save_CPPFLAGS=\"$CPPFLAGS\"\n-  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCICONV])\n-\n   AC_CACHE_CHECK(for iconv, am_cv_func_iconv, [\n     am_cv_func_iconv=\"no, consider installing GNU libiconv\"\n     am_cv_lib_iconv=no\n+    dnl Add $INCICONV to CPPFLAGS before performing the first check,\n+    dnl because if the user has installed libiconv and not disabled its use\n+    dnl via --without-libiconv-prefix, he wants to use it. This first\n+    dnl AC_TRY_LINK will then fail, the second AC_TRY_LINK will succeed.\n+    am_save_CPPFLAGS=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$CPPFLAGS $INCICONV\"\n     AC_TRY_LINK([#include <stdlib.h>\n #include <iconv.h>],\n       [iconv_t cd = iconv_open(\"\",\"\");\n        iconv(cd,NULL,NULL,NULL,NULL);\n        iconv_close(cd);],\n       am_cv_func_iconv=yes)\n+    CPPFLAGS=\"$am_save_CPPFLAGS\"\n+\n+    if test \"$am_cv_func_iconv\" != yes && test -d ../libiconv; then\n+      for _libs in .libs _libs; do\n+        am_save_CPPFLAGS=\"$CPPFLAGS\"\n+        am_save_LIBS=\"$LIBS\"\n+        CPPFLAGS=\"$CPPFLAGS -I../libiconv/include\"\n+        LIBS=\"$LIBS ../libiconv/lib/$_libs/libiconv.a\"\n+        AC_TRY_LINK([#include <stdlib.h>\n+#include <iconv.h>],\n+          [iconv_t cd = iconv_open(\"\",\"\");\n+           iconv(cd,NULL,NULL,NULL,NULL);\n+           iconv_close(cd);],\n+          INCICONV=\"-I../libiconv/include\"\n+          LIBICONV='${top_builddir}'/../libiconv/lib/$_libs/libiconv.a\n+          LTLIBICONV='${top_builddir}'/../libiconv/lib/libiconv.la\n+          am_cv_lib_iconv=yes\n+          am_cv_func_iconv=yes)\n+        CPPFLAGS=\"$am_save_CPPFLAGS\"\n+        LIBS=\"$am_save_LIBS\"\n+        if test \"$am_cv_func_iconv\" = \"yes\"; then\n+          break\n+        fi\n+      done\n+    fi\n+\n     if test \"$am_cv_func_iconv\" != yes; then\n+      am_save_CPPFLAGS=\"$CPPFLAGS\"\n       am_save_LIBS=\"$LIBS\"\n+      CPPFLAGS=\"$LIBS $INCICONV\"\n       LIBS=\"$LIBS $LIBICONV\"\n       AC_TRY_LINK([#include <stdlib.h>\n #include <iconv.h>],\n@@ -54,6 +82,7 @@ AC_DEFUN([AM_ICONV_LINK],\n          iconv_close(cd);],\n         am_cv_lib_iconv=yes\n         am_cv_func_iconv=yes)\n+      CPPFLAGS=\"$am_save_CPPFLAGS\"\n       LIBS=\"$am_save_LIBS\"\n     fi\n   ])\n@@ -61,12 +90,10 @@ AC_DEFUN([AM_ICONV_LINK],\n     AC_DEFINE(HAVE_ICONV, 1, [Define if you have the iconv() function.])\n   fi\n   if test \"$am_cv_lib_iconv\" = yes; then\n+    AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCICONV])\n     AC_MSG_CHECKING([how to link with libiconv])\n     AC_MSG_RESULT([$LIBICONV])\n   else\n-    dnl If $LIBICONV didn't lead to a usable library, we don't need $INCICONV\n-    dnl either.\n-    CPPFLAGS=\"$am_save_CPPFLAGS\"\n     LIBICONV=\n     LTLIBICONV=\n   fi\n-- \n1.9.3\n\nFrom-SVN: r227118", "tree": {"sha": "b01393684f2d7637f6cd4941d1e4faf7457e1e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b01393684f2d7637f6cd4941d1e4faf7457e1e34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d485982286692075d175dbbcf17d00431106ce96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d485982286692075d175dbbcf17d00431106ce96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d485982286692075d175dbbcf17d00431106ce96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d485982286692075d175dbbcf17d00431106ce96/comments", "author": {"login": "yselkowitz", "id": 13408495, "node_id": "MDQ6VXNlcjEzNDA4NDk1", "avatar_url": "https://avatars.githubusercontent.com/u/13408495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yselkowitz", "html_url": "https://github.com/yselkowitz", "followers_url": "https://api.github.com/users/yselkowitz/followers", "following_url": "https://api.github.com/users/yselkowitz/following{/other_user}", "gists_url": "https://api.github.com/users/yselkowitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yselkowitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yselkowitz/subscriptions", "organizations_url": "https://api.github.com/users/yselkowitz/orgs", "repos_url": "https://api.github.com/users/yselkowitz/repos", "events_url": "https://api.github.com/users/yselkowitz/events{/privacy}", "received_events_url": "https://api.github.com/users/yselkowitz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a339a01c961e4a059214830d83acab6033dfe757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a339a01c961e4a059214830d83acab6033dfe757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a339a01c961e4a059214830d83acab6033dfe757"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "6491b35273cdcf3294b7dc3fc566c7e1bff3fc5a", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d485982286692075d175dbbcf17d00431106ce96/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d485982286692075d175dbbcf17d00431106ce96/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=d485982286692075d175dbbcf17d00431106ce96", "patch": "@@ -1,3 +1,7 @@\n+2015-08-24  Yaakov Selkowitz  <yselkowi@redhat.com>\n+\n+\t* iconv.m4 (AM_ICONV_LINK): Use in-tree libiconv when present.\n+\n 2015-07-24  Micahel Darling  <darlingm@gmail.com>\n \n \tPR other/66259"}, {"sha": "5f9304a6ba6f6870e42f86b167b7d0fe59ff1f09", "filename": "config/iconv.m4", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d485982286692075d175dbbcf17d00431106ce96/config%2Ficonv.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d485982286692075d175dbbcf17d00431106ce96/config%2Ficonv.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Ficonv.m4?ref=d485982286692075d175dbbcf17d00431106ce96", "patch": "@@ -7,6 +7,7 @@ dnl that contains a configuration script generated by Autoconf, under\n dnl the same distribution terms as the rest of that program.\n \n dnl From Bruno Haible.\n+dnl with modifications to support building with in-tree libiconv\n \n AC_DEFUN([AM_ICONV_LINKFLAGS_BODY],\n [\n@@ -28,24 +29,51 @@ AC_DEFUN([AM_ICONV_LINK],\n   dnl accordingly.\n   AC_REQUIRE([AM_ICONV_LINKFLAGS_BODY])\n \n-  dnl Add $INCICONV to CPPFLAGS before performing the following checks,\n-  dnl because if the user has installed libiconv and not disabled its use\n-  dnl via --without-libiconv-prefix, he wants to use it. The first\n-  dnl AC_TRY_LINK will then fail, the second AC_TRY_LINK will succeed.\n-  am_save_CPPFLAGS=\"$CPPFLAGS\"\n-  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCICONV])\n-\n   AC_CACHE_CHECK(for iconv, am_cv_func_iconv, [\n     am_cv_func_iconv=\"no, consider installing GNU libiconv\"\n     am_cv_lib_iconv=no\n+    dnl Add $INCICONV to CPPFLAGS before performing the first check,\n+    dnl because if the user has installed libiconv and not disabled its use\n+    dnl via --without-libiconv-prefix, he wants to use it. This first\n+    dnl AC_TRY_LINK will then fail, the second AC_TRY_LINK will succeed.\n+    am_save_CPPFLAGS=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$CPPFLAGS $INCICONV\"\n     AC_TRY_LINK([#include <stdlib.h>\n #include <iconv.h>],\n       [iconv_t cd = iconv_open(\"\",\"\");\n        iconv(cd,NULL,NULL,NULL,NULL);\n        iconv_close(cd);],\n       am_cv_func_iconv=yes)\n+    CPPFLAGS=\"$am_save_CPPFLAGS\"\n+\n+    if test \"$am_cv_func_iconv\" != yes && test -d ../libiconv; then\n+      for _libs in .libs _libs; do\n+        am_save_CPPFLAGS=\"$CPPFLAGS\"\n+        am_save_LIBS=\"$LIBS\"\n+        CPPFLAGS=\"$CPPFLAGS -I../libiconv/include\"\n+        LIBS=\"$LIBS ../libiconv/lib/$_libs/libiconv.a\"\n+        AC_TRY_LINK([#include <stdlib.h>\n+#include <iconv.h>],\n+          [iconv_t cd = iconv_open(\"\",\"\");\n+           iconv(cd,NULL,NULL,NULL,NULL);\n+           iconv_close(cd);],\n+          INCICONV=\"-I../libiconv/include\"\n+          LIBICONV='${top_builddir}'/../libiconv/lib/$_libs/libiconv.a\n+          LTLIBICONV='${top_builddir}'/../libiconv/lib/libiconv.la\n+          am_cv_lib_iconv=yes\n+          am_cv_func_iconv=yes)\n+        CPPFLAGS=\"$am_save_CPPFLAGS\"\n+        LIBS=\"$am_save_LIBS\"\n+        if test \"$am_cv_func_iconv\" = \"yes\"; then\n+          break\n+        fi\n+      done\n+    fi\n+\n     if test \"$am_cv_func_iconv\" != yes; then\n+      am_save_CPPFLAGS=\"$CPPFLAGS\"\n       am_save_LIBS=\"$LIBS\"\n+      CPPFLAGS=\"$LIBS $INCICONV\"\n       LIBS=\"$LIBS $LIBICONV\"\n       AC_TRY_LINK([#include <stdlib.h>\n #include <iconv.h>],\n@@ -54,19 +82,18 @@ AC_DEFUN([AM_ICONV_LINK],\n          iconv_close(cd);],\n         am_cv_lib_iconv=yes\n         am_cv_func_iconv=yes)\n+      CPPFLAGS=\"$am_save_CPPFLAGS\"\n       LIBS=\"$am_save_LIBS\"\n     fi\n   ])\n   if test \"$am_cv_func_iconv\" = yes; then\n     AC_DEFINE(HAVE_ICONV, 1, [Define if you have the iconv() function.])\n   fi\n   if test \"$am_cv_lib_iconv\" = yes; then\n+    AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCICONV])\n     AC_MSG_CHECKING([how to link with libiconv])\n     AC_MSG_RESULT([$LIBICONV])\n   else\n-    dnl If $LIBICONV didn't lead to a usable library, we don't need $INCICONV\n-    dnl either.\n-    CPPFLAGS=\"$am_save_CPPFLAGS\"\n     LIBICONV=\n     LTLIBICONV=\n   fi"}]}