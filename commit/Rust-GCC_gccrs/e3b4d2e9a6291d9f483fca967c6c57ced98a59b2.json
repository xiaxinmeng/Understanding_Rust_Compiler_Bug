{"sha": "e3b4d2e9a6291d9f483fca967c6c57ced98a59b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiNGQyZTlhNjI5MWQ5ZjQ4M2ZjYTk2N2M2YzU3Y2VkOThhNTliMg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-08-18T10:40:23Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-08-18T10:40:23Z"}, "message": "valarray_meta.h (_Expr<>::min, [...]): Implement.\n\n\t* bits/valarray_meta.h (_Expr<>::min, _Expr<>::max): Implement.\n\n\t* bits/valarray_array.h (__valarray_min, __valarray_max): New\n\tfunction.\n\nFrom-SVN: r35783", "tree": {"sha": "36b4de222ae74dcdf726e981d2c154a059f473f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36b4de222ae74dcdf726e981d2c154a059f473f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2/comments", "author": null, "committer": null, "parents": [{"sha": "f5c979243f2ae42dd76f74a255b53366f3e376a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c979243f2ae42dd76f74a255b53366f3e376a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c979243f2ae42dd76f74a255b53366f3e376a7"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "829722b7a1a44a749a77e8580f9ced7278f9648d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e3b4d2e9a6291d9f483fca967c6c57ced98a59b2", "patch": "@@ -1,3 +1,10 @@\n+2000-08-18  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* bits/valarray_meta.h (_Expr<>::min, _Expr<>::max): Implement.\n+\n+\t* bits/valarray_array.h (__valarray_min, __valarray_max): New\n+\tfunction. \n+\n 2000-08-17  Mark Mitchell  <mark@codesourcery.com>\n \n \t* bits/localefwd.h (std::locale): Use explicit `class' specified"}, {"sha": "de8a3bf20aa7232965e98e96c3adce6d55efeb94", "filename": "libstdc++-v3/bits/valarray_array.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2/libstdc%2B%2B-v3%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2/libstdc%2B%2B-v3%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fvalarray_array.h?ref=e3b4d2e9a6291d9f483fca967c6c57ced98a59b2", "patch": "@@ -293,7 +293,39 @@ namespace std\n     while (__f != __l) __r = __r * *__f++;\n     return __r;\n   }\n+\n+  // Compute the min/max of an array-expression\n+  template<typename _Ta>\n+  inline typename _Ta::value_array\n+  __valarray_min(const _Ta& __a)\n+  {\n+    size_t __s = __a.size();\n+    typedef typename _Ta::value_type _Value_type;\n+    _Value_type __r = __s == 0 ? _Value_type() : __a[0];\n+    for (size_t __i = 1; __i < __s; ++__i)\n+      {\n+        _Value_type __t = __a[__i];\n+        if (__t < __r)\n+          __r = __t;\n+      }\n+    return __r;\n+  }\n   \n+  template<typename _Ta>\n+  inline typename _Ta::value_array\n+  __valarray_max(const _Ta& __a)\n+  {\n+    size_t __s = __a.size();\n+    typedef typename _Ta::value_type _Value_type;\n+    _Value_type __r = __s == 0 ? _Value_type() : __a[0];\n+    for (size_t __i = 1; __i < __s; ++__i)\n+      {\n+        _Value_type __t = __a[__i];\n+        if (__t > __r)\n+          __r = __t;\n+      }\n+    return __r;\n+  }\n   \n   //\n   // Helper class _Array, first layer of valarray abstraction."}, {"sha": "f52ddbfd2f5e41541f39226f6cf1be5493c65b1c", "filename": "libstdc++-v3/bits/valarray_meta.h", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2/libstdc%2B%2B-v3%2Fbits%2Fvalarray_meta.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b4d2e9a6291d9f483fca967c6c57ced98a59b2/libstdc%2B%2B-v3%2Fbits%2Fvalarray_meta.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fvalarray_meta.h?ref=e3b4d2e9a6291d9f483fca967c6c57ced98a59b2", "patch": "@@ -669,6 +669,9 @@ namespace std {\n         \n         valarray<value_type> shift (int) const;\n         valarray<value_type> cshift (int) const;\n+\n+      value_type min() const;\n+      value_type max() const;\n //     _Meta<_ApplyFunctionWithValue<_Expr>, value_type>\n //     apply (value_type _M_func (value_type)) const;\n //     _Meta<_ApplyFunctionWithConstRef<_Expr>, value_type>\n@@ -729,28 +732,16 @@ namespace std {\n             return __s;\n         }\n     }\n-    \n-    template<class _Dom, typename _Tp>\n-    inline _Tp\n-    min (const _Expr<_Dom,_Tp>& __e)\n-    {\n-        size_t __s = __e.size ();\n-        _Tp  __m = __e[0];\n-        for (size_t __i=1; __i<__s; ++__i)\n-            if (__m > __e[__i]) __m = __e[__i];\n-        return __m;\n-    }\n-    \n-    template<class _Dom, typename _Tp>\n-    inline _Tp\n-    max (const _Expr<_Dom,_Tp>& __e)\n-    {\n-        size_t __s = __e.size();\n-        _Tp __m = __e[0];\n-        for (size_t __i=1; __i<__s; ++__i)\n-            if (__m < __e[__i]) __m = __e[__i];\n-        return __m;\n-    }\n+\n+  template<class _Clos, typename _Tp>\n+  inline _Tp\n+  _Expr<_Clos, _Tp>::min() const\n+  { return __valarray_min(_M_closure); }\n+\n+  template<class _Close, typename _Tp>\n+  inline _Tp\n+  _Expr<_Clos, _Tp>::max() const\n+  { return __valarray_max(_M_closure); }\n     \n     template<class _Dom, typename _Tp>\n     inline _Expr<_UnClos<logical_not,_Expr,_Dom>, bool>"}]}