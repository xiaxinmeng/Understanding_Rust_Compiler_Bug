{"sha": "3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1ZmFiYzBlYWI0YjIxNDVkN2Y0ZmQ3Y2YzMTBiOWI1YmYwMjJlZA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-02-22T09:44:31Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-02-22T09:44:31Z"}, "message": "Character length cleanup for Coarray Fortran library\n\nFollowing the change to use size_t for Fortran character lengths (PR\n78534), this patch modifies the Coarray ABI in a similar way. The\nsingle-image implementation that is included in libgfortran is\nupdated, but this needs corresponding work in the OpenCoarray library\nas well for multi-image support. I also fixed the types for the STOP\nand ERROR STOP implementation in libgfortran, as the calling of them\nis somewhat intertwined with the calling of the corresponding CAF\nfunctions. I'll send the OpenCoarray changes as a separate pull\nrequest to the OpenCoarrays repository.\n\nRegtested on x86_64-pc-linux-gnu.\n\ngcc/fortran/ChangeLog:\n\n2018-02-22  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* gfortran.texi: Update Coarray API description.\n\t* trans-decl.c (gfc_build_builtin_function_decls): Use size_t for\n\tcharacter lengths, int for exit codes.\n\t(generate_coarray_sym_init): Use size_t for character length.\n\t* trans-intrinsic.c (conv_co_collective): Likewise.\n\t* trans-stmt.c (gfc_trans_lock_unlock): Likewise.\n\t(gfc_trans_event_post_wait): Likewise.\n\t(gfc_trans_sync): Likewise.\n\t(gfc_trans_stop): Use size_t for character lengths, int for exit\n\tcodes.\n\nlibgfortran/ChangeLog:\n\n2018-02-22  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* libgfortran.h (stop_string): Use size_t for character length.\n\t* runtime/stop.c (stop_string): Likewise.\n\t(error_stop_string): Likewise.\n\t(stop_numeric): Use int for exit code.\n\t(error_stop_numeric): Likewise.\n\t* caf/libcaf.h: Remove stdint.h include.\n\t(_gfortran_caf_register): Use size_t for character length.\n\t(_gfortran_caf_deregister): Likewise.\n\t(_gfortran_caf_sync_all): Likewise.\n\t(_gfortran_caf_sync_memory): Likewise.\n\t(_gfortran_caf_sync_images): Likewise.\n\t(_gfortran_caf_stop_numeric): Use int for exit code.\n\t(_gfortran_caf_stop_str): Use size_t for character length.\n\t(_gfortran_caf_error_stop_str): Likewise.\n\t(_gfortran_caf_error_stop): Use int for exit code.\n\t(_gfortran_caf_co_broadcast): Use size_t for character length.\n\t(_gfortran_caf_co_sum): Likewise.\n\t(_gfortran_caf_co_min): Likewise.\n\t(_gfortran_caf_co_max): Likewise.\n\t(_gfortran_caf_co_reduce): Likewise.\n\t(_gfortran_caf_lock): Likewise.\n\t(_gfortran_caf_unlock): Likewise.\n\t(_gfortran_caf_event_post): Likewise.\n\t(_gfortran_caf_event_wait): Likewise.\n\t* caf/mpi.c (_gfortran_caf_register): Update implementation to\n\tmatch prototype.\n\t(_gfortran_caf_deregister): Likewise.\n\t(_gfortran_caf_sync_all): Likewise.\n\t(_gfortran_caf_sync_images): Likewise.\n\t(_gfortran_caf_error_stop_str): Likewise.\n\t(_gfortran_caf_error_stop): Likewise.\n\t* caf/single.c (caf_internal_error): Likewise.\n\t(_gfortran_caf_register): Likewise.\n\t(_gfortran_caf_deregister): Likewise.\n\t(_gfortran_caf_sync_all): Likewise.\n\t(_gfortran_caf_sync_memory): Likewise.\n\t(_gfortran_caf_sync_images): Likewise.\n\t(_gfortran_caf_stop_numeric): Likewise.\n\t(_gfortran_caf_stop_str): Likewise.\n\t(_gfortran_caf_error_stop_str): Likewise.\n\t(_gfortran_caf_error_stop): Likewise.\n\t(_gfortran_caf_co_broadcast): Likewise.\n\t(_gfortran_caf_co_sum): Likewise.\n\t(_gfortran_caf_co_min): Likewise.\n\t(_gfortran_caf_co_max): Likewise.\n\t(_gfortran_caf_co_reduce): Likewise.\n\t(_gfortran_caf_event_post): Likewise.\n\t(_gfortran_caf_event_wait): Likewise.\n\t(_gfortran_caf_lock): Likewise.\n\t(_gfortran_caf_unlock): Likewise.\n\nFrom-SVN: r257894", "tree": {"sha": "f18e51f89b81cab03c411de2aff5beb76a53d6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f18e51f89b81cab03c411de2aff5beb76a53d6e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/comments", "author": null, "committer": null, "parents": [{"sha": "4b3fc654698958fd6b18d8ea8c99d4c6c201591b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3fc654698958fd6b18d8ea8c99d4c6c201591b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3fc654698958fd6b18d8ea8c99d4c6c201591b"}], "stats": {"total": 308, "additions": 187, "deletions": 121}, "files": [{"sha": "49b2ce9aae02855469d38f17c0238e4181f4c3ba", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -1,3 +1,16 @@\n+2018-02-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* gfortran.texi: Update Coarray API description.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Use size_t for\n+\tcharacter lengths, int for exit codes.\n+\t(generate_coarray_sym_init): Use size_t for character length.\n+\t* trans-intrinsic.c (conv_co_collective): Likewise.\n+\t* trans-stmt.c (gfc_trans_lock_unlock): Likewise.\n+\t(gfc_trans_event_post_wait): Likewise.\n+\t(gfc_trans_sync): Likewise.\n+        (gfc_trans_stop): Use size_t for character lengths, int for exit\n+\tcodes.\n+\n 2018-02-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/48890"}, {"sha": "6f894816c6273bd49aba23369bac00c927fbbb17", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -4458,7 +4458,7 @@ in the @var{DESC}'s data-ptr is registered or allocate when the data-ptr is\n \n @item @emph{Syntax}:\n @code{void caf_register (size_t size, caf_register_t type, caf_token_t *token,\n-gfc_descriptor_t *desc, int *stat, char *errmsg, int errmsg_len)}\n+gfc_descriptor_t *desc, int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -4510,7 +4510,7 @@ during a call to @code{_gfortran_caf_register}.\n \n @item @emph{Syntax}:\n @code{void caf_deregister (caf_token_t *token, caf_deregister_t type,\n-int *stat, char *errmsg, int errmsg_len)}\n+int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -4949,7 +4949,7 @@ which has already been locked by the same image is an error.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_lock (caf_token_t token, size_t index, int image_index,\n-int *aquired_lock, int *stat, char *errmsg, int errmsg_len)}\n+int *aquired_lock, int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -4984,7 +4984,7 @@ which is unlocked or has been locked by a different image is an error.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_unlock (caf_token_t token, size_t index, int image_index,\n-int *stat, char *errmsg, int errmsg_len)}\n+int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5016,7 +5016,7 @@ Increment the event count of the specified event variable.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_event_post (caf_token_t token, size_t index,\n-int image_index, int *stat, char *errmsg, int errmsg_len)}\n+int image_index, int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5053,7 +5053,7 @@ amount and return.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_event_wait (caf_token_t token, size_t index,\n-int until_count, int *stat, char *errmsg, int errmsg_len)}\n+int until_count, int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5131,7 +5131,7 @@ current team.  Additionally, it ensures that all pending data transfers of\n previous segment have completed.\n \n @item @emph{Syntax}:\n-@code{void _gfortran_caf_sync_all (int *stat, char *errmsg, int errmsg_len)}\n+@code{void _gfortran_caf_sync_all (int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5159,7 +5159,7 @@ transfers of previous segments have completed.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_sync_images (int count, int images[], int *stat,\n-char *errmsg, int errmsg_len)}\n+char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5187,7 +5187,7 @@ Acts as optimization barrier between different segments. It also ensures that\n all pending memory operations of this image have been completed.\n \n @item @emph{Syntax}:\n-@code{void _gfortran_caf_sync_memory (int *stat, char *errmsg, int errmsg_len)}\n+@code{void _gfortran_caf_sync_memory (int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5214,7 +5214,7 @@ function should terminate the program with the specified exit code.\n \n \n @item @emph{Syntax}:\n-@code{void _gfortran_caf_error_stop (int32_t error)}\n+@code{void _gfortran_caf_error_stop (int error)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5234,7 +5234,7 @@ Invoked for an @code{ERROR STOP} statement which has a string as argument.  The\n function should terminate the program with a nonzero-exit code.\n \n @item @emph{Syntax}:\n-@code{void _gfortran_caf_error_stop (const char *string, int32_t len)}\n+@code{void _gfortran_caf_error_stop (const char *string, size_t len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5412,7 +5412,7 @@ be called collectively.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_co_broadcast (gfc_descriptor_t *a,\n-int source_image, int *stat, char *errmsg, int errmsg_len)}\n+int source_image, int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5443,7 +5443,7 @@ strings.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_co_max (gfc_descriptor_t *a, int result_image,\n-int *stat, char *errmsg, int a_len, int errmsg_len)}\n+int *stat, char *errmsg, int a_len, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5480,7 +5480,7 @@ strings.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_co_min (gfc_descriptor_t *a, int result_image,\n-int *stat, char *errmsg, int a_len, int errmsg_len)}\n+int *stat, char *errmsg, int a_len, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5516,7 +5516,7 @@ specified image.  This function operates on numeric values only.\n \n @item @emph{Syntax}:\n @code{void _gfortran_caf_co_sum (gfc_descriptor_t *a, int result_image,\n-int *stat, char *errmsg, int errmsg_len)}\n+int *stat, char *errmsg, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5561,7 +5561,7 @@ string lengths shall be specified as hidden arguments;\n @item @emph{Syntax}:\n @code{void _gfortran_caf_co_reduce (gfc_descriptor_t *a,\n void * (*opr) (void *, void *), int opr_flags, int result_image,\n-int *stat, char *errmsg, int a_len, int errmsg_len)}\n+int *stat, char *errmsg, int a_len, size_t errmsg_len)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70"}, {"sha": "63336b31772d0c938afa6cbdbd75f1208c9b6ada", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -3503,25 +3503,25 @@ gfc_build_builtin_function_decls (void)\n \n   gfor_fndecl_stop_numeric = gfc_build_library_function_decl (\n \tget_identifier (PREFIX(\"stop_numeric\")),\n-\tvoid_type_node, 1, gfc_int4_type_node);\n+\tvoid_type_node, 1, integer_type_node);\n   /* STOP doesn't return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_stop_numeric) = 1;\n \n   gfor_fndecl_stop_string = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"stop_string\")), \".R.\",\n-\tvoid_type_node, 2, pchar_type_node, gfc_int4_type_node);\n+\tvoid_type_node, 2, pchar_type_node, size_type_node);\n   /* STOP doesn't return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_stop_string) = 1;\n \n   gfor_fndecl_error_stop_numeric = gfc_build_library_function_decl (\n         get_identifier (PREFIX(\"error_stop_numeric\")),\n-        void_type_node, 1, gfc_int4_type_node);\n+        void_type_node, 1, integer_type_node);\n   /* ERROR STOP doesn't return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_error_stop_numeric) = 1;\n \n   gfor_fndecl_error_stop_string = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"error_stop_string\")), \".R.\",\n-\tvoid_type_node, 2, pchar_type_node, gfc_int4_type_node);\n+\tvoid_type_node, 2, pchar_type_node, size_type_node);\n   /* ERROR STOP doesn't return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_error_stop_string) = 1;\n \n@@ -3636,12 +3636,12 @@ gfc_build_builtin_function_decls (void)\n       gfor_fndecl_caf_register = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_register\")), \"RRWWWWR\", void_type_node, 7,\n \tsize_type_node, integer_type_node, ppvoid_type_node, pvoid_type_node,\n-\tpint_type, pchar_type_node, integer_type_node);\n+\tpint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_deregister = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_deregister\")), \"WRWWR\", void_type_node, 5,\n \tppvoid_type_node, integer_type_node, pint_type, pchar_type_node,\n-\tinteger_type_node);\n+\tsize_type_node);\n \n       gfor_fndecl_caf_get = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_get\")), \".R.RRWRRRW\", void_type_node, 10,\n@@ -3685,38 +3685,38 @@ gfc_build_builtin_function_decls (void)\n \n       gfor_fndecl_caf_sync_all = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_sync_all\")), \".WW\", void_type_node,\n-\t3, pint_type, pchar_type_node, integer_type_node);\n+\t3, pint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_sync_memory = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_sync_memory\")), \".WW\", void_type_node,\n-\t3, pint_type, pchar_type_node, integer_type_node);\n+\t3, pint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_sync_images = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_sync_images\")), \".RRWW\", void_type_node,\n \t5, integer_type_node, pint_type, pint_type,\n-\tpchar_type_node, integer_type_node);\n+\tpchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_error_stop = gfc_build_library_function_decl (\n \tget_identifier (PREFIX(\"caf_error_stop\")),\n-\tvoid_type_node, 1, gfc_int4_type_node);\n+\tvoid_type_node, 1, integer_type_node);\n       /* CAF's ERROR STOP doesn't return.  */\n       TREE_THIS_VOLATILE (gfor_fndecl_caf_error_stop) = 1;\n \n       gfor_fndecl_caf_error_stop_str = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_error_stop_str\")), \".R.\",\n-\tvoid_type_node, 2, pchar_type_node, gfc_int4_type_node);\n+\tvoid_type_node, 2, pchar_type_node, size_type_node);\n       /* CAF's ERROR STOP doesn't return.  */\n       TREE_THIS_VOLATILE (gfor_fndecl_caf_error_stop_str) = 1;\n \n       gfor_fndecl_caf_stop_numeric = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_stop_numeric\")), \".R.\",\n-\tvoid_type_node, 1, gfc_int4_type_node);\n+\tvoid_type_node, 1, integer_type_node);\n       /* CAF's STOP doesn't return.  */\n       TREE_THIS_VOLATILE (gfor_fndecl_caf_stop_numeric) = 1;\n \n       gfor_fndecl_caf_stop_str = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_stop_str\")), \".R.\",\n-\tvoid_type_node, 2, pchar_type_node, gfc_int4_type_node);\n+\tvoid_type_node, 2, pchar_type_node, size_type_node);\n       /* CAF's STOP doesn't return.  */\n       TREE_THIS_VOLATILE (gfor_fndecl_caf_stop_str) = 1;\n \n@@ -3745,22 +3745,22 @@ gfc_build_builtin_function_decls (void)\n       gfor_fndecl_caf_lock = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_lock\")), \"R..WWW\",\n \tvoid_type_node, 7, pvoid_type_node, size_type_node, integer_type_node,\n-\tpint_type, pint_type, pchar_type_node, integer_type_node);\n+\tpint_type, pint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_unlock = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_unlock\")), \"R..WW\",\n \tvoid_type_node, 6, pvoid_type_node, size_type_node, integer_type_node,\n-\tpint_type, pchar_type_node, integer_type_node);\n+\tpint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_event_post = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_event_post\")), \"R..WW\",\n \tvoid_type_node, 6, pvoid_type_node, size_type_node, integer_type_node,\n-\tpint_type, pchar_type_node, integer_type_node);\n+\tpint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_event_wait = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_event_wait\")), \"R..WW\",\n \tvoid_type_node, 6, pvoid_type_node, size_type_node, integer_type_node,\n-\tpint_type, pchar_type_node, integer_type_node);\n+\tpint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_event_query = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_event_query\")), \"R..WW\",\n@@ -3824,30 +3824,30 @@ gfc_build_builtin_function_decls (void)\n       gfor_fndecl_co_broadcast = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_co_broadcast\")), \"W.WW\",\n \tvoid_type_node, 5, pvoid_type_node, integer_type_node,\n-\tpint_type, pchar_type_node, integer_type_node);\n+\tpint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_co_max = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_co_max\")), \"W.WW\",\n \tvoid_type_node, 6, pvoid_type_node, integer_type_node,\n-\tpint_type, pchar_type_node, integer_type_node, integer_type_node);\n+\tpint_type, pchar_type_node, integer_type_node, size_type_node);\n \n       gfor_fndecl_co_min = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_co_min\")), \"W.WW\",\n \tvoid_type_node, 6, pvoid_type_node, integer_type_node,\n-\tpint_type, pchar_type_node, integer_type_node, integer_type_node);\n+\tpint_type, pchar_type_node, integer_type_node, size_type_node);\n \n       gfor_fndecl_co_reduce = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_co_reduce\")), \"W.R.WW\",\n \tvoid_type_node, 8, pvoid_type_node,\n \tbuild_pointer_type (build_varargs_function_type_list (void_type_node,\n \t\t\t\t\t\t\t      NULL_TREE)),\n \tinteger_type_node, integer_type_node, pint_type, pchar_type_node,\n-\tinteger_type_node, integer_type_node);\n+\tinteger_type_node, size_type_node);\n \n       gfor_fndecl_co_sum = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_co_sum\")), \"W.WW\",\n \tvoid_type_node, 5, pvoid_type_node, integer_type_node,\n-\tpint_type, pchar_type_node, integer_type_node);\n+\tpint_type, pchar_type_node, size_type_node);\n \n       gfor_fndecl_caf_is_present = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_is_present\")), \"RRR\",\n@@ -5350,7 +5350,7 @@ generate_coarray_sym_init (gfc_symbol *sym)\n \t\t\t     token, gfc_build_addr_expr (pvoid_type_node, desc),\n \t\t\t     null_pointer_node, /* stat.  */\n \t\t\t     null_pointer_node, /* errgmsg.  */\n-\t\t\t     integer_zero_node); /* errmsg_len.  */\n+\t\t\t     build_zero_cst (size_type_node)); /* errmsg_len.  */\n   gfc_add_expr_to_block (&caf_init_block, tmp);\n   gfc_add_modify (&caf_init_block, decl, fold_convert (TREE_TYPE (decl),\n \t\t\t\t\t  gfc_conv_descriptor_data_get (desc)));"}, {"sha": "c4a3775d858d38abf0e8b447ae6d4b5a0a8fea7e", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -9824,12 +9824,12 @@ conv_co_collective (gfc_code *code)\n       gfc_add_block_to_block (&block, &argse.pre);\n       gfc_add_block_to_block (&post_block, &argse.post);\n       errmsg = argse.expr;\n-      errmsg_len = fold_convert (integer_type_node, argse.string_length);\n+      errmsg_len = fold_convert (size_type_node, argse.string_length);\n     }\n   else\n     {\n       errmsg = null_pointer_node;\n-      errmsg_len = integer_zero_node;\n+      errmsg_len = build_zero_cst (size_type_node);\n     }\n \n   /* Generate the function call.  */"}, {"sha": "e9e8456554997a28002bcb134b7a217590b7c4fe", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -623,7 +623,6 @@ gfc_trans_pause (gfc_code * code)\n tree\n gfc_trans_stop (gfc_code *code, bool error_stop)\n {\n-  tree gfc_int4_type_node = gfc_get_int_type (4);\n   gfc_se se;\n   tree tmp;\n \n@@ -633,7 +632,7 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n \n   if (code->expr1 == NULL)\n     {\n-      tmp = build_int_cst (gfc_int4_type_node, 0);\n+      tmp = build_int_cst (size_type_node, 0);\n       tmp = build_call_expr_loc (input_location,\n \t\t\t\t error_stop\n \t\t\t\t ? (flag_coarray == GFC_FCOARRAY_LIB\n@@ -655,7 +654,7 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n \t\t\t\t : (flag_coarray == GFC_FCOARRAY_LIB\n \t\t\t\t    ? gfor_fndecl_caf_stop_numeric\n \t\t\t\t    : gfor_fndecl_stop_numeric), 1,\n-\t\t\t\t fold_convert (gfc_int4_type_node, se.expr));\n+\t\t\t\t fold_convert (integer_type_node, se.expr));\n     }\n   else\n     {\n@@ -668,7 +667,8 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n \t\t\t\t : (flag_coarray == GFC_FCOARRAY_LIB\n \t\t\t\t    ? gfor_fndecl_caf_stop_str\n \t\t\t\t    : gfor_fndecl_stop_string),\n-\t\t\t\t 2, se.expr, se.string_length);\n+\t\t\t\t 2, se.expr, fold_convert (size_type_node,\n+\t\t\t\t\t\t\t   se.string_length));\n     }\n \n   gfc_add_expr_to_block (&se.pre, tmp);\n@@ -913,12 +913,12 @@ gfc_trans_lock_unlock (gfc_code *code, gfc_exec_op op)\n \t  gfc_conv_expr (&argse, code->expr3);\n \t  gfc_add_block_to_block (&se.pre, &argse.pre);\n \t  errmsg = argse.expr;\n-\t  errmsg_len = fold_convert (integer_type_node, argse.string_length);\n+\t  errmsg_len = fold_convert (size_type_node, argse.string_length);\n \t}\n       else\n \t{\n \t  errmsg = null_pointer_node;\n-\t  errmsg_len = integer_zero_node;\n+\t  errmsg_len = build_zero_cst (size_type_node);\n \t}\n \n       if (stat != null_pointer_node && TREE_TYPE (stat) != integer_type_node)\n@@ -1112,12 +1112,12 @@ gfc_trans_event_post_wait (gfc_code *code, gfc_exec_op op)\n       gfc_conv_expr (&argse, code->expr3);\n       gfc_add_block_to_block (&se.pre, &argse.pre);\n       errmsg = argse.expr;\n-      errmsg_len = fold_convert (integer_type_node, argse.string_length);\n+      errmsg_len = fold_convert (size_type_node, argse.string_length);\n     }\n   else\n     {\n       errmsg = null_pointer_node;\n-      errmsg_len = integer_zero_node;\n+      errmsg_len = build_zero_cst (size_type_node);\n     }\n \n   if (stat != null_pointer_node && TREE_TYPE (stat) != integer_type_node)\n@@ -1196,12 +1196,12 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n       gfc_conv_expr (&argse, code->expr3);\n       gfc_conv_string_parameter (&argse);\n       errmsg = gfc_build_addr_expr (NULL, argse.expr);\n-      errmsglen = argse.string_length;\n+      errmsglen = fold_convert (size_type_node, argse.string_length);\n     }\n   else if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n       errmsg = null_pointer_node;\n-      errmsglen = build_int_cst (integer_type_node, 0);\n+      errmsglen = build_int_cst (size_type_node, 0);\n     }\n \n   /* Check SYNC IMAGES(imageset) for valid image index."}, {"sha": "4db4968e2093bab982129e32dee7e5973835c313", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -1,3 +1,56 @@\n+2018-02-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* libgfortran.h (stop_string): Use size_t for character length.\n+\t* runtime/stop.c (stop_string): Likewise.\n+\t(error_stop_string): Likewise.\n+\t(stop_numeric): Use int for exit code.\n+\t(error_stop_numeric): Likewise.\n+\t* caf/libcaf.h: Remove stdint.h include.\n+\t(_gfortran_caf_register): Use size_t for character length.\n+\t(_gfortran_caf_deregister): Likewise.\n+\t(_gfortran_caf_sync_all): Likewise.\n+\t(_gfortran_caf_sync_memory): Likewise.\n+\t(_gfortran_caf_sync_images): Likewise.\n+\t(_gfortran_caf_stop_numeric): Use int for exit code.\n+\t(_gfortran_caf_stop_str): Use size_t for character length.\n+\t(_gfortran_caf_error_stop_str): Likewise.\n+\t(_gfortran_caf_error_stop): Use int for exit code.\n+\t(_gfortran_caf_co_broadcast): Use size_t for character length.\n+\t(_gfortran_caf_co_sum): Likewise.\n+\t(_gfortran_caf_co_min): Likewise.\n+\t(_gfortran_caf_co_max): Likewise.\n+\t(_gfortran_caf_co_reduce): Likewise.\n+\t(_gfortran_caf_lock): Likewise.\n+\t(_gfortran_caf_unlock): Likewise.\n+\t(_gfortran_caf_event_post): Likewise.\n+\t(_gfortran_caf_event_wait): Likewise.\n+\t* caf/mpi.c (_gfortran_caf_register): Update implementation to\n+\tmatch prototype.\n+\t(_gfortran_caf_deregister): Likewise.\n+\t(_gfortran_caf_sync_all): Likewise.\n+\t(_gfortran_caf_sync_images): Likewise.\n+\t(_gfortran_caf_error_stop_str): Likewise.\n+\t(_gfortran_caf_error_stop): Likewise.\n+\t* caf/single.c (caf_internal_error): Likewise.\n+\t(_gfortran_caf_register): Likewise.\n+\t(_gfortran_caf_deregister): Likewise.\n+\t(_gfortran_caf_sync_all): Likewise.\n+\t(_gfortran_caf_sync_memory): Likewise.\n+\t(_gfortran_caf_sync_images): Likewise.\n+\t(_gfortran_caf_stop_numeric): Likewise.\n+\t(_gfortran_caf_stop_str): Likewise.\n+\t(_gfortran_caf_error_stop_str): Likewise.\n+\t(_gfortran_caf_error_stop): Likewise.\n+\t(_gfortran_caf_co_broadcast): Likewise.\n+\t(_gfortran_caf_co_sum): Likewise.\n+\t(_gfortran_caf_co_min): Likewise.\n+\t(_gfortran_caf_co_max): Likewise.\n+\t(_gfortran_caf_co_reduce): Likewise.\n+\t(_gfortran_caf_event_post): Likewise.\n+\t(_gfortran_caf_event_wait): Likewise.\n+\t(_gfortran_caf_lock): Likewise.\n+\t(_gfortran_caf_unlock): Likewise.\n+\n 2018-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \t* caf/libcaf.h: Add type parameters to the caf_*_by_ref prototypes."}, {"sha": "198a0e9efd3ae2a9de3aa24fb728d18bdaf54ec3", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -28,7 +28,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include <stdbool.h>\n #include <stddef.h>\t/* For size_t.  */\n-#include <stdint.h>\t/* For int32_t.  */\n \n #include \"libgfortran.h\"\n \n@@ -190,29 +189,29 @@ int _gfortran_caf_this_image (int);\n int _gfortran_caf_num_images (int, int);\n \n void _gfortran_caf_register (size_t, caf_register_t, caf_token_t *,\n-\t\t\t     gfc_descriptor_t *, int *, char *, int);\n+\t\t\t     gfc_descriptor_t *, int *, char *, size_t);\n void _gfortran_caf_deregister (caf_token_t *, caf_deregister_t, int *, char *,\n-\t\t\t       int);\n+\t\t\t       size_t);\n \n-void _gfortran_caf_sync_all (int *, char *, int);\n-void _gfortran_caf_sync_memory (int *, char *, int);\n-void _gfortran_caf_sync_images (int, int[], int *, char *, int);\n+void _gfortran_caf_sync_all (int *, char *, size_t);\n+void _gfortran_caf_sync_memory (int *, char *, size_t);\n+void _gfortran_caf_sync_images (int, int[], int *, char *, size_t);\n \n-void _gfortran_caf_stop_numeric (int32_t)\n+void _gfortran_caf_stop_numeric (int)\n      __attribute__ ((noreturn));\n-void _gfortran_caf_stop_str (const char *, int32_t)\n+void _gfortran_caf_stop_str (const char *, size_t)\n      __attribute__ ((noreturn));\n-void _gfortran_caf_error_stop_str (const char *, int32_t)\n+void _gfortran_caf_error_stop_str (const char *, size_t)\n      __attribute__ ((noreturn));\n-void _gfortran_caf_error_stop (int32_t) __attribute__ ((noreturn));\n+void _gfortran_caf_error_stop (int) __attribute__ ((noreturn));\n void _gfortran_caf_fail_image (void) __attribute__ ((noreturn));\n \n-void _gfortran_caf_co_broadcast (gfc_descriptor_t *, int, int *, char *, int);\n-void _gfortran_caf_co_sum (gfc_descriptor_t *, int, int *, char *, int);\n-void _gfortran_caf_co_min (gfc_descriptor_t *, int, int *, char *, int, int);\n-void _gfortran_caf_co_max (gfc_descriptor_t *, int, int *, char *, int, int);\n+void _gfortran_caf_co_broadcast (gfc_descriptor_t *, int, int *, char *, size_t);\n+void _gfortran_caf_co_sum (gfc_descriptor_t *, int, int *, char *, size_t);\n+void _gfortran_caf_co_min (gfc_descriptor_t *, int, int *, char *, int, size_t);\n+void _gfortran_caf_co_max (gfc_descriptor_t *, int, int *, char *, int, size_t);\n void _gfortran_caf_co_reduce (gfc_descriptor_t *, void* (*) (void *, void*),\n-\t\t\t      int, int, int *, char *, int, int);\n+\t\t\t      int, int, int *, char *, int, size_t);\n \n void _gfortran_caf_get (caf_token_t, size_t, int, gfc_descriptor_t *,\n \t\t\tcaf_vector_t *, gfc_descriptor_t *, int, int, bool,\n@@ -247,10 +246,10 @@ void _gfortran_caf_atomic_cas (caf_token_t, size_t, int, void *, void *,\n void _gfortran_caf_atomic_op (int, caf_token_t, size_t, int, void *, void *,\n \t\t\t      int *, int, int);\n \n-void _gfortran_caf_lock (caf_token_t, size_t, int, int *, int *, char *, int);\n-void _gfortran_caf_unlock (caf_token_t, size_t, int, int *, char *, int);\n-void _gfortran_caf_event_post (caf_token_t, size_t, int, int *, char *, int);\n-void _gfortran_caf_event_wait (caf_token_t, size_t, int, int *, char *, int);\n+void _gfortran_caf_lock (caf_token_t, size_t, int, int *, int *, char *, size_t);\n+void _gfortran_caf_unlock (caf_token_t, size_t, int, int *, char *, size_t);\n+void _gfortran_caf_event_post (caf_token_t, size_t, int, int *, char *, size_t);\n+void _gfortran_caf_event_wait (caf_token_t, size_t, int, int *, char *, size_t);\n void _gfortran_caf_event_query (caf_token_t, size_t, int, int *, int *);\n \n void _gfortran_caf_failed_images (gfc_descriptor_t *,"}, {"sha": "14c10b536e3863651561cc59e59ef524707bdb72", "filename": "libgfortran/caf/mpi.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Fcaf%2Fmpi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Fcaf%2Fmpi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fmpi.c?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -131,7 +131,7 @@ _gfortran_caf_num_images (int distance __attribute__ ((unused)),\n \n void *\n _gfortran_caf_register (size_t size, caf_register_t type, caf_token_t *token,\n-\t\t\tint *stat, char *errmsg, int errmsg_len,\n+\t\t\tint *stat, char *errmsg, size_t errmsg_len,\n \t\t\tint num_alloc_comps __attribute__ ((unused)))\n {\n   void *local;\n@@ -189,8 +189,8 @@ _gfortran_caf_register (size_t size, caf_register_t type, caf_token_t *token,\n \t*stat = caf_is_finalized ? STAT_STOPPED_IMAGE : 1;\n \tif (errmsg_len > 0)\n \t  {\n-\t    int len = ((int) strlen (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t\t: (int) strlen (msg);\n+\t    size_t len = (strlen (msg) > errmsg_len) ? errmsg_len\n+\t      : strlen (msg);\n \t    memcpy (errmsg, msg, len);\n \t    if (errmsg_len > len)\n \t      memset (&errmsg[len], ' ', errmsg_len-len);\n@@ -205,7 +205,7 @@ _gfortran_caf_register (size_t size, caf_register_t type, caf_token_t *token,\n \n \n void\n-_gfortran_caf_deregister (caf_token_t *token, int *stat, char *errmsg, int errmsg_len)\n+_gfortran_caf_deregister (caf_token_t *token, int *stat, char *errmsg, size_t errmsg_len)\n {\n   if (unlikely (caf_is_finalized))\n     {\n@@ -217,8 +217,8 @@ _gfortran_caf_deregister (caf_token_t *token, int *stat, char *errmsg, int errms\n \t\n \t  if (errmsg_len > 0)\n \t    {\n-\t      int len = ((int) sizeof (msg) - 1 > errmsg_len)\n-\t\t\t? errmsg_len : (int) sizeof (msg) - 1;\n+\t      size_t len = (sizeof (msg) - 1 > errmsg_len)\n+\t\t? errmsg_len : sizeof (msg) - 1;\n \t      memcpy (errmsg, msg, len);\n \t      if (errmsg_len > len)\n \t\tmemset (&errmsg[len], ' ', errmsg_len-len);\n@@ -239,7 +239,7 @@ _gfortran_caf_deregister (caf_token_t *token, int *stat, char *errmsg, int errms\n \n \n void\n-_gfortran_caf_sync_all (int *stat, char *errmsg, int errmsg_len)\n+_gfortran_caf_sync_all (int *stat, char *errmsg, size_t errmsg_len)\n {\n   int ierr;\n \n@@ -261,8 +261,8 @@ _gfortran_caf_sync_all (int *stat, char *errmsg, int errmsg_len)\n \n       if (errmsg_len > 0)\n \t{\n-\t  int len = ((int) strlen (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t      : (int) strlen (msg);\n+\t  size_t len = (strlen (msg) > errmsg_len) ? errmsg_len\n+\t    : strlen (msg);\n \t  memcpy (errmsg, msg, len);\n \t  if (errmsg_len > len)\n \t    memset (&errmsg[len], ' ', errmsg_len-len);\n@@ -278,7 +278,7 @@ _gfortran_caf_sync_all (int *stat, char *errmsg, int errmsg_len)\n    is not equivalent to SYNC ALL. */\n void\n _gfortran_caf_sync_images (int count, int images[], int *stat, char *errmsg,\n-\t\t\t   int errmsg_len)\n+\t\t\t   size_t errmsg_len)\n {\n   int ierr;\n   if (count == 0 || (count == 1 && images[0] == caf_this_image))\n@@ -329,8 +329,8 @@ _gfortran_caf_sync_images (int count, int images[], int *stat, char *errmsg,\n \n       if (errmsg_len > 0)\n \t{\n-\t  int len = ((int) strlen (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t      : (int) strlen (msg);\n+\t  size_t len = (strlen (msg) > errmsg_len) ? errmsg_len\n+\t    : strlen (msg);\n \t  memcpy (errmsg, msg, len);\n \t  if (errmsg_len > len)\n \t    memset (&errmsg[len], ' ', errmsg_len-len);\n@@ -358,7 +358,7 @@ error_stop (int error)\n /* ERROR STOP function for string arguments.  */\n \n void\n-_gfortran_caf_error_stop_str (const char *string, int32_t len)\n+_gfortran_caf_error_stop_str (const char *string, size_t len)\n {\n   fputs (\"ERROR STOP \", stderr);\n   while (len--)\n@@ -372,7 +372,7 @@ _gfortran_caf_error_stop_str (const char *string, int32_t len)\n /* ERROR STOP function for numerical arguments.  */\n \n void\n-_gfortran_caf_error_stop (int32_t error)\n+_gfortran_caf_error_stop (int error)\n {\n   fprintf (stderr, \"ERROR STOP %d\\n\", error);\n   error_stop (error);"}, {"sha": "053ec87d562a6893dfaa439c023106a2f6ecfe39", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -28,6 +28,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <stdlib.h> /* For exit and malloc.  */\n #include <string.h> /* For memcpy and memset.  */\n #include <stdarg.h> /* For variadic arguments.  */\n+#include <stdint.h>\n #include <assert.h>\n \n /* Define GFC_CAF_CHECK to enable run-time checking.  */\n@@ -74,7 +75,7 @@ caf_runtime_error (const char *message, ...)\n /* Error handling is similar everytime.  */\n static void\n caf_internal_error (const char *msg, int *stat, char *errmsg,\n-\t\t    int errmsg_len, ...)\n+\t\t    size_t errmsg_len, ...)\n {\n   va_list args;\n   va_start (args, errmsg_len);\n@@ -83,8 +84,8 @@ caf_internal_error (const char *msg, int *stat, char *errmsg,\n       *stat = 1;\n       if (errmsg_len > 0)\n \t{\n-\t  size_t len = snprintf (errmsg, errmsg_len, msg, args);\n-\t  if ((size_t)errmsg_len > len)\n+\t  int len = snprintf (errmsg, errmsg_len, msg, args);\n+\t  if (len >= 0 && errmsg_len > (size_t) len)\n \t    memset (&errmsg[len], ' ', errmsg_len - len);\n \t}\n       va_end (args);\n@@ -134,7 +135,7 @@ _gfortran_caf_num_images (int distance __attribute__ ((unused)),\n void\n _gfortran_caf_register (size_t size, caf_register_t type, caf_token_t *token,\n \t\t\tgfc_descriptor_t *data, int *stat, char *errmsg,\n-\t\t\tint errmsg_len)\n+\t\t\tsize_t errmsg_len)\n {\n   const char alloc_fail_msg[] = \"Failed to allocate coarray\";\n   void *local;\n@@ -195,7 +196,7 @@ _gfortran_caf_register (size_t size, caf_register_t type, caf_token_t *token,\n void\n _gfortran_caf_deregister (caf_token_t *token, caf_deregister_t type, int *stat,\n \t\t\t  char *errmsg __attribute__ ((unused)),\n-\t\t\t  int errmsg_len __attribute__ ((unused)))\n+\t\t\t  size_t errmsg_len __attribute__ ((unused)))\n {\n   caf_single_token_t single_token = TOKEN (*token);\n \n@@ -221,7 +222,7 @@ _gfortran_caf_deregister (caf_token_t *token, caf_deregister_t type, int *stat,\n void\n _gfortran_caf_sync_all (int *stat,\n \t\t\tchar *errmsg __attribute__ ((unused)),\n-\t\t\tint errmsg_len __attribute__ ((unused)))\n+\t\t\tsize_t errmsg_len __attribute__ ((unused)))\n {\n   __asm__ __volatile__ (\"\":::\"memory\");\n   if (stat)\n@@ -232,7 +233,7 @@ _gfortran_caf_sync_all (int *stat,\n void\n _gfortran_caf_sync_memory (int *stat,\n \t\t\t   char *errmsg __attribute__ ((unused)),\n-\t\t\t   int errmsg_len __attribute__ ((unused)))\n+\t\t\t   size_t errmsg_len __attribute__ ((unused)))\n {\n   __asm__ __volatile__ (\"\":::\"memory\");\n   if (stat)\n@@ -245,7 +246,7 @@ _gfortran_caf_sync_images (int count __attribute__ ((unused)),\n \t\t\t   int images[] __attribute__ ((unused)),\n \t\t\t   int *stat,\n \t\t\t   char *errmsg __attribute__ ((unused)),\n-\t\t\t   int errmsg_len __attribute__ ((unused)))\n+\t\t\t   size_t errmsg_len __attribute__ ((unused)))\n {\n #ifdef GFC_CAF_CHECK\n   int i;\n@@ -266,15 +267,15 @@ _gfortran_caf_sync_images (int count __attribute__ ((unused)),\n \n \n void\n-_gfortran_caf_stop_numeric(int32_t stop_code)\n+_gfortran_caf_stop_numeric(int stop_code)\n {\n   fprintf (stderr, \"STOP %d\\n\", stop_code);\n   exit (0);\n }\n \n \n void\n-_gfortran_caf_stop_str(const char *string, int32_t len)\n+_gfortran_caf_stop_str(const char *string, size_t len)\n {\n   fputs (\"STOP \", stderr);\n   while (len--)\n@@ -286,7 +287,7 @@ _gfortran_caf_stop_str(const char *string, int32_t len)\n \n \n void\n-_gfortran_caf_error_stop_str (const char *string, int32_t len)\n+_gfortran_caf_error_stop_str (const char *string, size_t len)\n {\n   fputs (\"ERROR STOP \", stderr);\n   while (len--)\n@@ -366,7 +367,7 @@ _gfortran_caf_stopped_images (gfc_descriptor_t *array,\n \n \n void\n-_gfortran_caf_error_stop (int32_t error)\n+_gfortran_caf_error_stop (int error)\n {\n   fprintf (stderr, \"ERROR STOP %d\\n\", error);\n   exit (error);\n@@ -377,7 +378,7 @@ void\n _gfortran_caf_co_broadcast (gfc_descriptor_t *a __attribute__ ((unused)),\n \t\t\t    int source_image __attribute__ ((unused)),\n \t\t\t    int *stat, char *errmsg __attribute__ ((unused)),\n-\t\t\t    int errmsg_len __attribute__ ((unused)))\n+\t\t\t    size_t errmsg_len __attribute__ ((unused)))\n {\n   if (stat)\n     *stat = 0;\n@@ -387,7 +388,7 @@ void\n _gfortran_caf_co_sum (gfc_descriptor_t *a __attribute__ ((unused)),\n \t\t      int result_image __attribute__ ((unused)),\n \t\t      int *stat, char *errmsg __attribute__ ((unused)),\n-\t\t      int errmsg_len __attribute__ ((unused)))\n+\t\t      size_t errmsg_len __attribute__ ((unused)))\n {\n   if (stat)\n     *stat = 0;\n@@ -398,7 +399,7 @@ _gfortran_caf_co_min (gfc_descriptor_t *a __attribute__ ((unused)),\n \t\t      int result_image __attribute__ ((unused)),\n \t\t      int *stat, char *errmsg __attribute__ ((unused)),\n \t\t      int a_len __attribute__ ((unused)),\n-\t\t      int errmsg_len __attribute__ ((unused)))\n+\t\t      size_t errmsg_len __attribute__ ((unused)))\n {\n   if (stat)\n     *stat = 0;\n@@ -409,7 +410,7 @@ _gfortran_caf_co_max (gfc_descriptor_t *a __attribute__ ((unused)),\n \t\t      int result_image __attribute__ ((unused)),\n \t\t      int *stat, char *errmsg __attribute__ ((unused)),\n \t\t      int a_len __attribute__ ((unused)),\n-\t\t      int errmsg_len __attribute__ ((unused)))\n+\t\t      size_t errmsg_len __attribute__ ((unused)))\n {\n   if (stat)\n     *stat = 0;\n@@ -424,7 +425,7 @@ _gfortran_caf_co_reduce (gfc_descriptor_t *a __attribute__ ((unused)),\n                         int result_image __attribute__ ((unused)),\n                         int *stat, char *errmsg __attribute__ ((unused)),\n                         int a_len __attribute__ ((unused)),\n-                        int errmsg_len __attribute__ ((unused)))\n+                        size_t errmsg_len __attribute__ ((unused)))\n  {\n    if (stat)\n      *stat = 0;\n@@ -2910,7 +2911,7 @@ void\n _gfortran_caf_event_post (caf_token_t token, size_t index, \n \t\t\t  int image_index __attribute__ ((unused)), \n \t\t\t  int *stat, char *errmsg __attribute__ ((unused)), \n-\t\t\t  int errmsg_len __attribute__ ((unused)))\n+\t\t\t  size_t errmsg_len __attribute__ ((unused)))\n {\n   uint32_t value = 1;\n   uint32_t *event = (uint32_t *) ((char *) MEMTOK (token) + index\n@@ -2925,7 +2926,7 @@ void\n _gfortran_caf_event_wait (caf_token_t token, size_t index, \n \t\t\t  int until_count, int *stat,\n \t\t\t  char *errmsg __attribute__ ((unused)), \n-\t\t\t  int errmsg_len __attribute__ ((unused)))\n+\t\t\t  size_t errmsg_len __attribute__ ((unused)))\n {\n   uint32_t *event = (uint32_t *) ((char *) MEMTOK (token) + index\n \t\t\t\t  * sizeof (uint32_t));\n@@ -2952,7 +2953,7 @@ _gfortran_caf_event_query (caf_token_t token, size_t index,\n void\n _gfortran_caf_lock (caf_token_t token, size_t index,\n \t\t    int image_index __attribute__ ((unused)),\n-\t\t    int *aquired_lock, int *stat, char *errmsg, int errmsg_len)\n+\t\t    int *aquired_lock, int *stat, char *errmsg, size_t errmsg_len)\n {\n   const char *msg = \"Already locked\";\n   bool *lock = &((bool *) MEMTOK (token))[index];\n@@ -2981,22 +2982,22 @@ _gfortran_caf_lock (caf_token_t token, size_t index,\n       *stat = 1;\n       if (errmsg_len > 0)\n \t{\n-\t  int len = ((int) sizeof (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t      : (int) sizeof (msg);\n+\t  size_t len = (sizeof (msg) > errmsg_len) ? errmsg_len\n+\t\t\t\t\t\t      : sizeof (msg);\n \t  memcpy (errmsg, msg, len);\n \t  if (errmsg_len > len)\n \t    memset (&errmsg[len], ' ', errmsg_len-len);\n \t}\n       return;\n     }\n-  _gfortran_caf_error_stop_str (msg, (int32_t) strlen (msg));\n+  _gfortran_caf_error_stop_str (msg, strlen (msg));\n }\n \n \n void\n _gfortran_caf_unlock (caf_token_t token, size_t index,\n \t\t      int image_index __attribute__ ((unused)),\n-\t\t      int *stat, char *errmsg, int errmsg_len)\n+\t\t      int *stat, char *errmsg, size_t errmsg_len)\n {\n   const char *msg = \"Variable is not locked\";\n   bool *lock = &((bool *) MEMTOK (token))[index];\n@@ -3014,15 +3015,15 @@ _gfortran_caf_unlock (caf_token_t token, size_t index,\n       *stat = 1;\n       if (errmsg_len > 0)\n \t{\n-\t  int len = ((int) sizeof (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t      : (int) sizeof (msg);\n+\t  size_t len = (sizeof (msg) > errmsg_len) ? errmsg_len\n+\t    : sizeof (msg);\n \t  memcpy (errmsg, msg, len);\n \t  if (errmsg_len > len)\n \t    memset (&errmsg[len], ' ', errmsg_len-len);\n \t}\n       return;\n     }\n-  _gfortran_caf_error_stop_str (msg, (int32_t) strlen (msg));\n+  _gfortran_caf_error_stop_str (msg, strlen (msg));\n }\n \n int"}, {"sha": "072dc869be8ef7ca79754e18740698e47928cc54", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -888,7 +888,7 @@ internal_proto(filename_from_unit);\n \n /* stop.c */\n \n-extern _Noreturn void stop_string (const char *, GFC_INTEGER_4);\n+extern _Noreturn void stop_string (const char *, size_t);\n export_proto(stop_string);\n \n /* reshape_packed.c */"}, {"sha": "3ef1350c281104de83226eb467d5ef8603010573", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=3f5fabc0eab4b2145d7f4fd7cf310b9b5bf022ed", "patch": "@@ -81,22 +81,22 @@ report_exception (void)\n \n /* A numeric STOP statement.  */\n \n-extern _Noreturn void stop_numeric (GFC_INTEGER_4);\n+extern _Noreturn void stop_numeric (int);\n export_proto(stop_numeric);\n \n void\n-stop_numeric (GFC_INTEGER_4 code)\n+stop_numeric (int code)\n {\n   report_exception ();\n-  st_printf (\"STOP %d\\n\", (int)code);\n+  st_printf (\"STOP %d\\n\", code);\n   exit (code);\n }\n \n \n /* A character string or blank STOP statement.  */\n \n void\n-stop_string (const char *string, GFC_INTEGER_4 len)\n+stop_string (const char *string, size_t len)\n {\n   report_exception ();\n   if (string)\n@@ -114,11 +114,11 @@ stop_string (const char *string, GFC_INTEGER_4 len)\n    initiates error termination of execution.\"  Thus, error_stop_string returns\n    a nonzero exit status code.  */\n \n-extern _Noreturn void error_stop_string (const char *, GFC_INTEGER_4);\n+extern _Noreturn void error_stop_string (const char *, size_t);\n export_proto(error_stop_string);\n \n void\n-error_stop_string (const char *string, GFC_INTEGER_4 len)\n+error_stop_string (const char *string, size_t len)\n {\n   report_exception ();\n   estr_write (\"ERROR STOP \");\n@@ -131,13 +131,13 @@ error_stop_string (const char *string, GFC_INTEGER_4 len)\n \n /* A numeric ERROR STOP statement.  */\n \n-extern _Noreturn void error_stop_numeric (GFC_INTEGER_4);\n+extern _Noreturn void error_stop_numeric (int);\n export_proto(error_stop_numeric);\n \n void\n-error_stop_numeric (GFC_INTEGER_4 code)\n+error_stop_numeric (int code)\n {\n   report_exception ();\n-  st_printf (\"ERROR STOP %d\\n\", (int) code);\n+  st_printf (\"ERROR STOP %d\\n\", code);\n   exit_error (code);\n }"}]}