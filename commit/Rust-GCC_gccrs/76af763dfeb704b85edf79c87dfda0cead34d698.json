{"sha": "76af763dfeb704b85edf79c87dfda0cead34d698", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhZjc2M2RmZWI3MDRiODVlZGY3OWM4N2RmZGEwY2VhZDM0ZDY5OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-13T07:21:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-13T07:21:15Z"}, "message": "gigi.h (standard_datatypes): Add ADT_parent_name_id.\n\n\t* gcc-interface/gigi.h (standard_datatypes): Add ADT_parent_name_id.\n\t(parent_name_id): New macro.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Use it.\n\t* gcc-interface/trans.c (gigi): Initialize it.\n\t(lvalue_required_p) <N_Type_Conversion>: New case.\n\t<N_Qualified_Expression>: Likewise.\n\t<N_Allocator>: Likewise.\n\t* gcc-interface/utils.c (convert): Try to properly upcast tagged types.\n\nFrom-SVN: r158255", "tree": {"sha": "4257299e64b5687a21f011613e5caeb13a2139dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4257299e64b5687a21f011613e5caeb13a2139dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76af763dfeb704b85edf79c87dfda0cead34d698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76af763dfeb704b85edf79c87dfda0cead34d698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76af763dfeb704b85edf79c87dfda0cead34d698", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76af763dfeb704b85edf79c87dfda0cead34d698/comments", "author": null, "committer": null, "parents": [{"sha": "cb3d597d15475a12d37a3c01dc7f8e12d2c9eff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3d597d15475a12d37a3c01dc7f8e12d2c9eff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3d597d15475a12d37a3c01dc7f8e12d2c9eff1"}], "stats": {"total": 92, "additions": 87, "deletions": 5}, "files": [{"sha": "b62b913c4d44ec89b988ff5cdf6615d762717225", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=76af763dfeb704b85edf79c87dfda0cead34d698", "patch": "@@ -1,3 +1,14 @@\n+2010-04-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (standard_datatypes): Add ADT_parent_name_id.\n+\t(parent_name_id): New macro.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Use it.\n+\t* gcc-interface/trans.c (gigi): Initialize it.\n+\t(lvalue_required_p) <N_Type_Conversion>: New case.\n+\t<N_Qualified_Expression>: Likewise.\n+\t<N_Allocator>: Likewise.\n+\t* gcc-interface/utils.c (convert): Try to properly upcast tagged types.\n+\n 2010-04-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (TYPE_BY_REFERENCE_P): Delete."}, {"sha": "190aec6c7bc98b5acae17b28260afd772b7dcdcc", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=76af763dfeb704b85edf79c87dfda0cead34d698", "patch": "@@ -2851,8 +2851,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t    /* ...and reference the _Parent field of this record.  */\n \t    gnu_field\n-\t      = create_field_decl (get_identifier\n-\t\t\t\t   (Get_Name_String (Name_uParent)),\n+\t      = create_field_decl (parent_name_id,\n \t\t\t\t   gnu_parent, gnu_type, 0,\n \t\t\t\t   has_rep\n \t\t\t\t   ? TYPE_SIZE (gnu_parent) : NULL_TREE,\n@@ -4392,6 +4391,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n      handling alignment and possible padding.  */\n   if (is_type && (!gnu_decl || this_made_decl))\n     {\n+      /* Tell the middle-end that objects of tagged types are guaranteed to\n+\t be properly aligned.  This is necessary because conversions to the\n+\t class-wide type are translated into conversions to the root type,\n+\t which can be less aligned than some of its derived types.  */\n       if (Is_Tagged_Type (gnat_entity)\n \t  || Is_Class_Wide_Equivalent_Type (gnat_entity))\n \tTYPE_ALIGN_OK (gnu_type) = 1;"}, {"sha": "d9459e5ae6e4e648f27c1bff1c976aef00a05952", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=76af763dfeb704b85edf79c87dfda0cead34d698", "patch": "@@ -374,9 +374,12 @@ enum standard_datatypes\n   /* Likewise for freeing memory.  */\n   ADT_free_decl,\n \n-  /* Function decl node for 64-bit multiplication with overflow checking */\n+  /* Function decl node for 64-bit multiplication with overflow checking.  */\n   ADT_mulv64_decl,\n \n+  /* Identifier for the name of the _Parent field in tagged record types.  */\n+  ADT_parent_name_id,\n+\n   /* Types and decls used by our temporary exception mechanism.  See\n      init_gigi_decls for details.  */\n   ADT_jmpbuf_type,\n@@ -408,6 +411,7 @@ extern GTY(()) tree gnat_raise_decls[(int) LAST_REASON_CODE + 1];\n #define malloc32_decl gnat_std_decls[(int) ADT_malloc32_decl]\n #define free_decl gnat_std_decls[(int) ADT_free_decl]\n #define mulv64_decl gnat_std_decls[(int) ADT_mulv64_decl]\n+#define parent_name_id gnat_std_decls[(int) ADT_parent_name_id]\n #define jmpbuf_type gnat_std_decls[(int) ADT_jmpbuf_type]\n #define jmpbuf_ptr_type gnat_std_decls[(int) ADT_jmpbuf_ptr_type]\n #define get_jmpbuf_decl gnat_std_decls[(int) ADT_get_jmpbuf_decl]"}, {"sha": "2c86db977beb942dfbf9061ff2acba8ca9ed47d7", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=76af763dfeb704b85edf79c87dfda0cead34d698", "patch": "@@ -396,6 +396,9 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n \t\t\t\t\t\t     int64_type, NULL_TREE),\n \t\t\t   NULL_TREE, false, true, true, NULL, Empty);\n \n+  /* Name of the _Parent field in tagged record types.  */\n+  parent_name_id = get_identifier (Get_Name_String (Name_uParent));\n+\n   /* Make the types and functions used for exception processing.  */\n   jmpbuf_type\n     = build_array_type (gnat_type_for_mode (Pmode, 0),\n@@ -794,13 +797,29 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n \t      || (Is_Composite_Type (Underlying_Type (Etype (gnat_node)))\n \t\t  && Is_Atomic (Entity (Name (gnat_parent)))));\n \n+    case N_Type_Conversion:\n+    case N_Qualified_Expression:\n+      /* We must look through all conversions for composite types because we\n+\t may need to bypass an intermediate conversion to a narrower record\n+\t type that is generated for a formal conversion, e.g. the conversion\n+\t to the root type of a hierarchy of tagged types generated for the\n+\t formal conversion to the class-wide type.  */\n+      if (!Is_Composite_Type (Underlying_Type (Etype (gnat_node))))\n+\treturn 0;\n+\n+      /* ... fall through ... */\n+\n     case N_Unchecked_Type_Conversion:\n-      /* Returning 0 is very likely correct but we get better code if we\n-\t go through the conversion.  */\n       return lvalue_required_p (gnat_parent,\n \t\t\t\tget_unpadded_type (Etype (gnat_parent)),\n \t\t\t\tconstant, address_of_constant, aliased);\n \n+    case N_Allocator:\n+      /* We should only reach here through the N_Qualified_Expression case\n+\t and, therefore, only for composite types.  Force an lvalue since\n+\t a block-copy to the newly allocated area of memory is made.  */\n+      return 1;\n+\n    case N_Explicit_Dereference:\n       /* We look through dereferences for address of constant because we need\n \t to handle the special cases listed above.  */"}, {"sha": "335941a2e0cd139a3187db0abf0765f812f6b9e2", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=76af763dfeb704b85edf79c87dfda0cead34d698", "patch": "@@ -4027,6 +4027,19 @@ convert (tree type, tree expr)\n \t\t\t\t\t   etype)))\n     return build1 (VIEW_CONVERT_EXPR, type, expr);\n \n+  /* If we are converting between tagged types, try to upcast properly.  */\n+  else if (ecode == RECORD_TYPE && code == RECORD_TYPE\n+\t   && TYPE_ALIGN_OK (etype) && TYPE_ALIGN_OK (type))\n+    {\n+      tree child_etype = etype;\n+      do {\n+\ttree field = TYPE_FIELDS (child_etype);\n+\tif (DECL_NAME (field) == parent_name_id && TREE_TYPE (field) == type)\n+\t  return build_component_ref (expr, NULL_TREE, field, false);\n+\tchild_etype = TREE_TYPE (field);\n+      } while (TREE_CODE (child_etype) == RECORD_TYPE);\n+    }\n+\n   /* In all other cases of related types, make a NOP_EXPR.  */\n   else if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (etype)\n \t   || (code == INTEGER_CST && ecode == INTEGER_CST"}, {"sha": "dcce334ca4d3f999ca18f7b22bf55c017b162c8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76af763dfeb704b85edf79c87dfda0cead34d698", "patch": "@@ -1,3 +1,7 @@\n+2010-04-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/derived_type1.adb: New test.\n+\n 2010-04-13  Matthias Klose  <doko@ubuntu.com>\n \n \t* gcc.dg/plugindir1.c: New testcase."}, {"sha": "c50d5ef466a423f46a284e8550b71cb14ddd3de8", "filename": "gcc/testsuite/gnat.dg/derived_type1.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76af763dfeb704b85edf79c87dfda0cead34d698/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type1.adb?ref=76af763dfeb704b85edf79c87dfda0cead34d698", "patch": "@@ -0,0 +1,28 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws -fdump-tree-original\" }\n+\n+procedure Derived_Type1 is\n+\n+  type Root is tagged null record;\n+\n+  type Derived1 is new Root with record\n+    I1 : Integer;\n+  end record;\n+\n+  type Derived2 is new Derived1 with record\n+    I2: Integer;\n+  end record;\n+\n+  R : Root;\n+  D1 : Derived1;\n+  D2 : Derived2;\n+\n+begin\n+  R  := Root(D1);\n+  R  := Root(D2);\n+  D1 := Derived1(D2);\n+end;\n+\n+-- { dg-final { scan-tree-dump-not \"VIEW_CONVERT_EXPR<struct derived_type1__root>\" \"original\" } }\n+-- { dg-final { scan-tree-dump-not \"VIEW_CONVERT_EXPR<struct derived_type1__derived1>\" \"original\" } }\n+-- { dg-final { cleanup-tree-dump \"original\" } }"}]}