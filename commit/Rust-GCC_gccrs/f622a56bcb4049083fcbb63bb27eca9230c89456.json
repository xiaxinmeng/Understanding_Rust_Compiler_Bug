{"sha": "f622a56bcb4049083fcbb63bb27eca9230c89456", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyMmE1NmJjYjQwNDkwODNmY2JiNjNiYjI3ZWNhOTIzMGM4OTQ1Ng==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2018-10-01T13:08:10Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2018-10-01T13:08:10Z"}, "message": "Update options framework for parameters to properly handle and validate configure time params. \n\n\nThis patch changes it so that default parameters are validated during\ninitialization. This change is needed to ensure parameters set via by the\ntarget specific common initialization routines still keep the parameters within\nthe valid range.\n\ngcc/\n\n\t* params.c (validate_param): New.\n\t(add_params): Use it.\n\t(set_param_value): Refactor param validation into validate_param.\n\t(diagnostic.h): Include.\n\t* diagnostic.h (diagnostic_ready_p): New.\n\nFrom-SVN: r264756", "tree": {"sha": "1cca3ec2894bdd3e4a96bdcc543668afbf6108a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cca3ec2894bdd3e4a96bdcc543668afbf6108a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f622a56bcb4049083fcbb63bb27eca9230c89456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f622a56bcb4049083fcbb63bb27eca9230c89456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f622a56bcb4049083fcbb63bb27eca9230c89456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f622a56bcb4049083fcbb63bb27eca9230c89456/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03ced4ab9f729cc4d5854439f136d84d1343b32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ced4ab9f729cc4d5854439f136d84d1343b32d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ced4ab9f729cc4d5854439f136d84d1343b32d"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "7f4f4dd33af4004bd8ca3bb4bbc8938323896633", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f622a56bcb4049083fcbb63bb27eca9230c89456/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f622a56bcb4049083fcbb63bb27eca9230c89456/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f622a56bcb4049083fcbb63bb27eca9230c89456", "patch": "@@ -1,3 +1,11 @@\n+2018-10-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* params.c (validate_param): New.\n+\t(add_params): Use it.\n+\t(set_param_value): Refactor param validation into validate_param.\n+\t(diagnostic.h): Include.\n+\t* diagnostic.h (diagnostic_ready_p): New.\n+\n 2018-10-01  Tamar Christina  <tamar.christina@arm.com>\n \n \t* params.c (set_param_value):"}, {"sha": "d4c605ea8f356724a70a8aedd94d25964a939424", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f622a56bcb4049083fcbb63bb27eca9230c89456/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f622a56bcb4049083fcbb63bb27eca9230c89456/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=f622a56bcb4049083fcbb63bb27eca9230c89456", "patch": "@@ -274,6 +274,10 @@ diagnostic_inhibit_notes (diagnostic_context * context)\n    and similar functions.  */\n extern diagnostic_context *global_dc;\n \n+/* Returns whether the diagnostic framework has been intialized already and is\n+   ready for use.  */\n+#define diagnostic_ready_p() (global_dc->printer != NULL)\n+\n /* The total count of a KIND of diagnostics emitted so far.  */\n #define diagnostic_kind_count(DC, DK) (DC)->diagnostic_count[(int) (DK)]\n "}, {"sha": "b6a33dfd6bf8c4df43fdac91e30ac6d082f39071", "filename": "gcc/params.c", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f622a56bcb4049083fcbb63bb27eca9230c89456/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f622a56bcb4049083fcbb63bb27eca9230c89456/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=f622a56bcb4049083fcbb63bb27eca9230c89456", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"params-enum.h\"\n #include \"diagnostic-core.h\"\n+#include \"diagnostic.h\"\n #include \"spellcheck.h\"\n \n /* An array containing the compiler parameters and their current\n@@ -58,6 +59,10 @@ static const param_info lang_independent_params[] = {\n   { NULL, 0, 0, 0, NULL, NULL }\n };\n \n+static bool\n+validate_param (const int value, const param_info param, const int index);\n+\n+\n /* Add the N PARAMS to the current list of compiler parameters.  */\n \n void\n@@ -68,12 +73,26 @@ add_params (const param_info params[], size_t n)\n   /* Allocate enough space for the new parameters.  */\n   compiler_params = XRESIZEVEC (param_info, compiler_params,\n \t\t\t\tnum_compiler_params + n);\n+  param_info *dst_params = compiler_params + num_compiler_params;\n+\n   /* Copy them into the table.  */\n-  memcpy (compiler_params + num_compiler_params,\n-\t  params,\n-\t  n * sizeof (param_info));\n+  memcpy (dst_params, params, n * sizeof (param_info));\n+\n   /* Keep track of how many parameters we have.  */\n   num_compiler_params += n;\n+\n+  /* Initialize the pretty printing machinery in case we need to print an error,\n+     but be sure not to initialize it if something else already has, e.g. a\n+     language front-end like cc1.  */\n+  if (!diagnostic_ready_p ())\n+    diagnostic_initialize (global_dc, 0);\n+\n+  /* Now perform some validation and set the value if it validates.  */\n+  for (size_t i = 0; i < n; i++)\n+    {\n+       if (validate_param (dst_params[i].default_value, dst_params[i], (int)i))\n+\t  dst_params[i].default_value = dst_params[i].default_value;\n+    }\n }\n \n /* Add all parameters and default values that can be set in both the\n@@ -127,6 +146,31 @@ set_param_value_internal (compiler_param num, int value,\n     params_set[i] = true;\n }\n \n+/* Validate PARAM and write an error if invalid.  */\n+\n+static bool\n+validate_param (const int value, const param_info param, const int index)\n+{\n+  /* These paremeters interpret bounds of 0 to be unbounded, as such don't\n+     perform any range validation on 0 parameters.  */\n+  if (value < param.min_value && param.min_value != 0)\n+    {\n+      error (\"minimum value of parameter %qs is %u\",\n+\t     param.option, param.min_value);\n+      return false;\n+    }\n+  else if (param.max_value > param.min_value && value > param.max_value)\n+    {\n+      error (\"maximum value of parameter %qs is %u\",\n+\t     param.option, param.max_value);\n+      return false;\n+    }\n+  else if (targetm_common.option_validate_param (value, index))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Return true if it can find the matching entry for NAME in the parameter\n    table, and assign the entry index to INDEX.  Return false otherwise.  */\n \n@@ -200,23 +244,14 @@ set_param_value (const char *name, int value,\n     }\n   i = (size_t)index;\n \n-  if (value < compiler_params[i].min_value)\n-    error (\"minimum value of parameter %qs is %u\",\n-\t   compiler_params[i].option,\n-\t   compiler_params[i].min_value);\n-  else if (compiler_params[i].max_value > compiler_params[i].min_value\n-\t   && value > compiler_params[i].max_value)\n-    error (\"maximum value of parameter %qs is %u\",\n-\t   compiler_params[i].option,\n-\t   compiler_params[i].max_value);\n-  else if (targetm_common.option_validate_param (value, (int)i))\n+  if (validate_param (value, compiler_params[i], i))\n     set_param_value_internal ((compiler_param) i, value,\n \t\t\t      params, params_set, true);\n }\n \n /* Set the value of the parameter given by NUM to VALUE in PARAMS and\n    PARAMS_SET, implicitly, if it has not been set explicitly by the\n-   user.  */\n+   user either via the commandline or configure.  */\n \n void\n maybe_set_param_value (compiler_param num, int value,"}]}