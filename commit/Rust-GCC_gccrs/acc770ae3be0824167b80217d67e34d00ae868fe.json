{"sha": "acc770ae3be0824167b80217d67e34d00ae868fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjNzcwYWUzYmUwODI0MTY3YjgwMjE3ZDY3ZTM0ZDAwYWU4NjhmZQ==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2014-10-28T12:40:00Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2014-10-28T12:40:00Z"}, "message": "Add missing tests.\n\nFrom-SVN: r216785", "tree": {"sha": "87aac893be9b155474e565e2b0dc07ec4911db78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87aac893be9b155474e565e2b0dc07ec4911db78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc770ae3be0824167b80217d67e34d00ae868fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc770ae3be0824167b80217d67e34d00ae868fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc770ae3be0824167b80217d67e34d00ae868fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc770ae3be0824167b80217d67e34d00ae868fe/comments", "author": null, "committer": null, "parents": [{"sha": "bdea98ca2e2c29d1ad4c124c4a7c0d23c3330920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdea98ca2e2c29d1ad4c124c4a7c0d23c3330920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdea98ca2e2c29d1ad4c124c4a7c0d23c3330920"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "24dfcfec9778cf225a09d3feddf44575f8751b87", "filename": "gcc/testsuite/c-c++-common/asan/no-redundant-instrumentation-10.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-10.c?ref=acc770ae3be0824167b80217d67e34d00ae868fe", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-fdump-tree-sanopt\" } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+extern __UINT32_TYPE__ a;\n+\n+void\n+foo ()\n+{\n+  /* Instrument a with access size 3.  */\n+  int d = __builtin_memcmp (&a, \"123\", 3);\n+  /* This should  generate a __builtin___asan_report_store4, because\n+     the reference to a has been instrumented above with access size 3.  */\n+  a = 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___asan_report_store4\" 1 \"sanopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}, {"sha": "4082f32694b4ffb30af21058bae040fd70b5047c", "filename": "gcc/testsuite/c-c++-common/asan/no-redundant-instrumentation-11.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-11.c?ref=acc770ae3be0824167b80217d67e34d00ae868fe", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-fdump-tree-sanopt\" } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+extern __UINT32_TYPE__ a;\n+\n+void\n+foo ()\n+{\n+  /* Instrument a with access size 5.  */\n+  int d = __builtin_memcmp (&a, \"12345\", 4);\n+  /* This should not generate a __builtin___asan_report_store4 because\n+     the reference to a has been already instrumented above with access\n+     size 5.  */\n+  a = 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"& 7\" \"sanopt\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin___asan_report_store\" \"sanopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}, {"sha": "65e1d96f95d778c04ba7d527d67432e0a7509acb", "filename": "gcc/testsuite/c-c++-common/asan/no-redundant-instrumentation-12.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-12.c?ref=acc770ae3be0824167b80217d67e34d00ae868fe", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-options \"-fdump-tree-sanopt\" } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+void\n+foo (char *p)\n+{\n+  volatile int zero = 0;\n+  __builtin_memcpy (p, \"abc\", zero);\n+  /* This generates a __builtin___asan_report_store1 because we pass volatile\n+     zero length into memcpy.  */\n+  p[0] = 'd';\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___asan_report_store1\" 1 \"sanopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}, {"sha": "c04be064188cbcedb99ca5f81e2a6ab9dc17095b", "filename": "gcc/testsuite/c-c++-common/asan/no-redundant-instrumentation-13.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-13.c?ref=acc770ae3be0824167b80217d67e34d00ae868fe", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-fdump-tree-sanopt\" } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+void\n+foo (char *p)\n+{\n+  __builtin_memcpy (p, \"abc\", 0);\n+  /* This generates a __builtin___asan_report_store1 because we didn't access\n+     any byte in previous memcpy because of zero length parameter.  */\n+  p[0] = 'd';\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___asan_report_store1\" 1 \"sanopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}, {"sha": "fadce906f5541e1ab254ded6c91b8320521c2de6", "filename": "gcc/testsuite/c-c++-common/asan/no-redundant-instrumentation-14.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-14.c?ref=acc770ae3be0824167b80217d67e34d00ae868fe", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-fdump-tree-sanopt\" } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+void\n+foo (char *p)\n+{\n+  __builtin_memcpy (p, \"abc\", 2);\n+  /* This doesn't generate a __builtin___asan_report_store1 because we\n+     verified p[0] through p[2] is writable in previous memcpy call.  */\n+  p[0] = 'd';\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin___asan_report_store1\" \"sanopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}, {"sha": "00676dad614f978b1ed52afdb0c31617492945b8", "filename": "gcc/testsuite/c-c++-common/asan/no-redundant-instrumentation-15.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fno-redundant-instrumentation-15.c?ref=acc770ae3be0824167b80217d67e34d00ae868fe", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-options \"-fdump-tree-sanopt\" } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+void\n+foo (char *p)\n+{\n+  volatile int two = 2;\n+  __builtin_memcpy (p, \"abc\", two);\n+  /* This generates a __builtin___asan_report_store1 because we don't\n+     optimize previous memcpy call.  */\n+  p[0] = 'd';\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___asan_report_store1\" 1 \"sanopt\" } } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}, {"sha": "a8bafc5aad77ebccb5dfd5bf53b16b3baca77b62", "filename": "gcc/testsuite/c-c++-common/asan/pr63638.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr63638.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc770ae3be0824167b80217d67e34d00ae868fe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr63638.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr63638.c?ref=acc770ae3be0824167b80217d67e34d00ae868fe", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void *memcpy (void *, const void *, __SIZE_TYPE__);\n+\n+struct S{\n+  long d0, d1, d2, d3, d4, d5, d6;\n+};\n+\n+struct S s[6];\n+\n+int f(struct S *p)\n+{\n+  memcpy(p, &s[2], sizeof(*p));\n+  memcpy(p, &s[1], sizeof(*p));\n+}\n+"}]}