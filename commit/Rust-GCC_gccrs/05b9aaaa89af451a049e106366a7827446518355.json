{"sha": "05b9aaaa89af451a049e106366a7827446518355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDViOWFhYWE4OWFmNDUxYTA0OWUxMDYzNjZhNzgyNzQ0NjUxODM1NQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-09-09T18:02:01Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-09-09T18:02:01Z"}, "message": "s390.md (\"*tmdi_reg\", [...]): Do not mark as commutative.\n\n\t* config/s390/s390.md (\"*tmdi_reg\", \"*tmsi_reg\"): Do not mark as\n\tcommutative.  Use \"nonimmediate_operand\" instead of \"register_operand\"\n\tas predicate for operand 0.  Move to after the \"*tmXX_mem\" insns.\n\n\t(\"*tmdi_mem\", \"*tmsi_mem\", \"*tmhi_mem\", \"*tmqi_mem\"): Do not mark\n\tas commutative.\n\n\t(\"*anddi3_ni\", \"*andsi3_ni\", \"*iordi3_ni\", \"*iorsi3_ni\"): Do not\n\tmark as commutative.  Use \"nonimmediate_operand\" instead of\n\t\"register_operand\" as predicate for operand 1.\n\n\t(\"movstrictsi\"): Fix typo in insn name.\n\nFrom-SVN: r56974", "tree": {"sha": "1d36931a7c1bfd115dcb62e3904eabb2990dfa6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d36931a7c1bfd115dcb62e3904eabb2990dfa6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05b9aaaa89af451a049e106366a7827446518355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b9aaaa89af451a049e106366a7827446518355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b9aaaa89af451a049e106366a7827446518355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b9aaaa89af451a049e106366a7827446518355/comments", "author": null, "committer": null, "parents": [{"sha": "f724acb8aa16d01f998e27bc1822a3f8981a82ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f724acb8aa16d01f998e27bc1822a3f8981a82ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f724acb8aa16d01f998e27bc1822a3f8981a82ff"}], "stats": {"total": 125, "additions": 70, "deletions": 55}, "files": [{"sha": "a0ac3d0c827457c417a72c512303b65b40c954a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b9aaaa89af451a049e106366a7827446518355/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b9aaaa89af451a049e106366a7827446518355/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05b9aaaa89af451a049e106366a7827446518355", "patch": "@@ -1,3 +1,18 @@\n+2002-09-09  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"*tmdi_reg\", \"*tmsi_reg\"): Do not mark as\n+\tcommutative.  Use \"nonimmediate_operand\" instead of \"register_operand\"\n+\tas predicate for operand 0.  Move to after the \"*tmXX_mem\" insns.\n+\n+\t(\"*tmdi_mem\", \"*tmsi_mem\", \"*tmhi_mem\", \"*tmqi_mem\"): Do not mark\n+\tas commutative.\n+\n+\t(\"*anddi3_ni\", \"*andsi3_ni\", \"*iordi3_ni\", \"*iorsi3_ni\"): Do not\n+\tmark as commutative.  Use \"nonimmediate_operand\" instead of\n+\t\"register_operand\" as predicate for operand 1.\n+\n+\t(\"movstrictsi\"): Fix typo in insn name.\n+\n 2002-09-09  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (index_register_operand): New."}, {"sha": "561b1b0986bbdcabcb814e03e559a84c143f4c7b", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b9aaaa89af451a049e106366a7827446518355/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b9aaaa89af451a049e106366a7827446518355/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=05b9aaaa89af451a049e106366a7827446518355", "patch": "@@ -298,54 +298,9 @@\n \n ; Test-under-Mask instructions\n \n-(define_insn \"*tmdi_reg\"\n-  [(set (reg 33)\n-        (compare (and:DI (match_operand:DI 0 \"register_operand\" \"%d\")\n-                         (match_operand:DI 1 \"immediate_operand\" \"n\"))\n-                 (match_operand:DI 2 \"immediate_operand\" \"n\")))]\n-  \"TARGET_64BIT\n-   && s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 1))\n-   && s390_single_hi (operands[1], DImode, 0) >= 0\"\n-  \"*\n-{\n-  int part = s390_single_hi (operands[1], DImode, 0);\n-  operands[1] = GEN_INT (s390_extract_hi (operands[1], DImode, part));\n-\n-  switch (part)\n-    {\n-      case 0: return \\\"tmhh\\\\t%0,%x1\\\";\n-      case 1: return \\\"tmhl\\\\t%0,%x1\\\";\n-      case 2: return \\\"tmlh\\\\t%0,%x1\\\";\n-      case 3: return \\\"tmll\\\\t%0,%x1\\\";\n-      default: abort ();\n-    }\n-}\"\n-  [(set_attr \"op_type\" \"RI\")])\n-\n-(define_insn \"*tmsi_reg\"\n-  [(set (reg 33)\n-        (compare (and:SI (match_operand:SI 0 \"register_operand\" \"%d\")\n-                         (match_operand:SI 1 \"immediate_operand\" \"n\"))\n-                 (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n-  \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 1))\n-   && s390_single_hi (operands[1], SImode, 0) >= 0\"\n-  \"*\n-{\n-  int part = s390_single_hi (operands[1], SImode, 0);\n-  operands[1] = GEN_INT (s390_extract_hi (operands[1], SImode, part));\n-\n-  switch (part)\n-    {\n-      case 0: return \\\"tmh\\\\t%0,%x1\\\";\n-      case 1: return \\\"tml\\\\t%0,%x1\\\";\n-      default: abort ();\n-    }\n-}\"\n-  [(set_attr \"op_type\" \"RI\")])\n-\n (define_insn \"*tmdi_mem\"\n   [(set (reg 33)\n-        (compare (and:DI (match_operand:DI 0 \"memory_operand\" \"%Q\")\n+        (compare (and:DI (match_operand:DI 0 \"memory_operand\" \"Q\")\n                          (match_operand:DI 1 \"immediate_operand\" \"n\"))\n                  (match_operand:DI 2 \"immediate_operand\" \"n\")))]\n   \"TARGET_64BIT\n@@ -365,7 +320,7 @@\n \n (define_insn \"*tmsi_mem\"\n   [(set (reg 33)\n-        (compare (and:SI (match_operand:SI 0 \"memory_operand\" \"%Q\")\n+        (compare (and:SI (match_operand:SI 0 \"memory_operand\" \"Q\")\n                          (match_operand:SI 1 \"immediate_operand\" \"n\"))\n                  (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n@@ -384,7 +339,7 @@\n \n (define_insn \"*tmhi_mem\"\n   [(set (reg 33)\n-        (compare (and:SI (subreg:SI (match_operand:HI 0 \"memory_operand\" \"%Q\") 0)\n+        (compare (and:SI (subreg:SI (match_operand:HI 0 \"memory_operand\" \"Q\") 0)\n                          (match_operand:SI 1 \"immediate_operand\" \"n\"))\n                  (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n@@ -403,14 +358,59 @@\n \n (define_insn \"*tmqi_mem\"\n   [(set (reg 33)\n-        (compare (and:SI (subreg:SI (match_operand:QI 0 \"memory_operand\" \"%Q\") 0)\n+        (compare (and:SI (subreg:SI (match_operand:QI 0 \"memory_operand\" \"Q\") 0)\n                          (match_operand:SI 1 \"immediate_operand\" \"n\"))\n                  (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\"\n   \"tm\\\\t%0,%b1\"\n   [(set_attr \"op_type\" \"SI\")\n    (set_attr \"atype\"   \"mem\")])\n \n+(define_insn \"*tmdi_reg\"\n+  [(set (reg 33)\n+        (compare (and:DI (match_operand:DI 0 \"nonimmediate_operand\" \"d\")\n+                         (match_operand:DI 1 \"immediate_operand\" \"n\"))\n+                 (match_operand:DI 2 \"immediate_operand\" \"n\")))]\n+  \"TARGET_64BIT\n+   && s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 1))\n+   && s390_single_hi (operands[1], DImode, 0) >= 0\"\n+  \"*\n+{\n+  int part = s390_single_hi (operands[1], DImode, 0);\n+  operands[1] = GEN_INT (s390_extract_hi (operands[1], DImode, part));\n+\n+  switch (part)\n+    {\n+      case 0: return \\\"tmhh\\\\t%0,%x1\\\";\n+      case 1: return \\\"tmhl\\\\t%0,%x1\\\";\n+      case 2: return \\\"tmlh\\\\t%0,%x1\\\";\n+      case 3: return \\\"tmll\\\\t%0,%x1\\\";\n+      default: abort ();\n+    }\n+}\"\n+  [(set_attr \"op_type\" \"RI\")])\n+\n+(define_insn \"*tmsi_reg\"\n+  [(set (reg 33)\n+        (compare (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"d\")\n+                         (match_operand:SI 1 \"immediate_operand\" \"n\"))\n+                 (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 1))\n+   && s390_single_hi (operands[1], SImode, 0) >= 0\"\n+  \"*\n+{\n+  int part = s390_single_hi (operands[1], SImode, 0);\n+  operands[1] = GEN_INT (s390_extract_hi (operands[1], SImode, part));\n+\n+  switch (part)\n+    {\n+      case 0: return \\\"tmh\\\\t%0,%x1\\\";\n+      case 1: return \\\"tml\\\\t%0,%x1\\\";\n+      default: abort ();\n+    }\n+}\"\n+  [(set_attr \"op_type\" \"RI\")])\n+\n (define_insn \"*tmhi_full\"\n   [(set (reg 33)\n         (compare (match_operand:HI 0 \"register_operand\" \"d\")\n@@ -1122,7 +1122,7 @@\n \n \n ;\n-; moveqstrictqi instruction pattern(s).\n+; movstrictqi instruction pattern(s).\n ;\n \n (define_insn \"*movstrictqi\"\n@@ -1151,7 +1151,7 @@\n ; movstrictsi instruction pattern(s).\n ;\n \n-(define_insn \"movestrictsi\"\n+(define_insn \"movstrictsi\"\n   [(set (strict_low_part (match_operand:SI 0 \"register_operand\" \"+d,d\"))\n                          (match_operand:SI 1 \"general_operand\" \"d,m\"))]\n   \"TARGET_64BIT\"\n@@ -4422,7 +4422,7 @@\n \n (define_insn \"*anddi3_ni\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (and:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n+        (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n                 (match_operand:DI 2 \"immediate_operand\" \"n\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_single_hi (operands[2], DImode, -1) >= 0\"\n@@ -4508,7 +4508,7 @@\n \n (define_insn \"*andsi3_ni\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (and:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n+        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n                 (match_operand:SI 2 \"immediate_operand\" \"n\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_single_hi (operands[2], SImode, -1) >= 0\"\n@@ -4693,7 +4693,7 @@\n \n (define_insn \"*iordi3_oi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ior:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n+        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n                 (match_operand:DI 2 \"immediate_operand\" \"n\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_single_hi (operands[2], DImode, 0) >= 0\"\n@@ -4779,7 +4779,7 @@\n \n (define_insn \"*iorsi3_oi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (ior:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n+        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n                 (match_operand:SI 2 \"immediate_operand\" \"n\")))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && s390_single_hi (operands[2], SImode, 0) >= 0\""}]}