{"sha": "57a71826b5d4d7d9a23cb02f8a28e105dd6647fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhNzE4MjZiNWQ0ZDdkOWEyM2NiMDJmOGEyOGUxMDVkZDY2NDdmZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-03-04T01:33:45Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-03-04T01:33:45Z"}, "message": "predicates.md (branch_comparison_operator): Convert from C block to conditional format.\n\n        * config/rs6000/predicates.md (branch_comparison_operator):\n        Convert from C block to conditional format.\n\nFrom-SVN: r95864", "tree": {"sha": "6ab32c6b9a201188c2debbb69554421c24cf1fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ab32c6b9a201188c2debbb69554421c24cf1fda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a71826b5d4d7d9a23cb02f8a28e105dd6647fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a71826b5d4d7d9a23cb02f8a28e105dd6647fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a71826b5d4d7d9a23cb02f8a28e105dd6647fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a71826b5d4d7d9a23cb02f8a28e105dd6647fe/comments", "author": null, "committer": null, "parents": [{"sha": "1d3206c1608a5dc88cd3586bb9587749623fe30c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3206c1608a5dc88cd3586bb9587749623fe30c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3206c1608a5dc88cd3586bb9587749623fe30c"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "67c26a21d4cbd26d1544edd8b2f02ca9be2085df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a71826b5d4d7d9a23cb02f8a28e105dd6647fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a71826b5d4d7d9a23cb02f8a28e105dd6647fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57a71826b5d4d7d9a23cb02f8a28e105dd6647fe", "patch": "@@ -1,3 +1,8 @@\n+2005-03-03  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/predicates.md (branch_comparison_operator):\n+\tConvert from C block to conditional format.\n+\n 2005-03-03  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-dfa.c (add_referenced_var): Don't walk initializer of external"}, {"sha": "0f395612c3c03c699b30e29f14f9a3cff506c547", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a71826b5d4d7d9a23cb02f8a28e105dd6647fe/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a71826b5d4d7d9a23cb02f8a28e105dd6647fe/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=57a71826b5d4d7d9a23cb02f8a28e105dd6647fe", "patch": "@@ -677,24 +677,15 @@\n   (match_code \"smin,smax,umin,umax\"))\n \n ;; Return 1 if OP is a comparison operation that is valid for a branch\n-;; instruction.  We only check the opcode against the mode of the CC value.\n+;; instruction.  We check the opcode against the mode of the CC value.\n+;; validate_condition_mode is an assertion.\n (define_predicate \"branch_comparison_operator\"\n-  (match_code \"eq,ne,le,lt,ge,gt,leu,ltu,geu,gtu,unordered,ordered,unge,unle\")\n-{\n-  enum rtx_code code = GET_CODE (op);\n-  enum machine_mode cc_mode;\n-\n-  if (!COMPARISON_P (op))\n-    return 0;\n-\n-  cc_mode = GET_MODE (XEXP (op, 0));\n-  if (GET_MODE_CLASS (cc_mode) != MODE_CC)\n-    return 0;\n-\n-  validate_condition_mode (code, cc_mode);\n-\n-  return 1;\n-})\n+  (and (match_code \"eq,ne,le,lt,ge,gt,leu,ltu,geu,gtu,unordered,ordered,unge,unle\")\n+       (and (match_operand 0 \"comparison_operator\")\n+\t    (and (match_test \"GET_MODE_CLASS (GET_MODE (XEXP (op, 0))) == MODE_CC\")\n+\t\t (match_test \"validate_condition_mode (GET_CODE (op),\n+\t\t\t\t\t\t       GET_MODE (XEXP (op, 0))),\n+\t\t\t      1\")))))\n \n ;; Return 1 if OP is a comparison operation that is valid for an SCC insn --\n ;; it must be a positive comparison."}]}