{"sha": "6b25a558d71af78b9c2891a761b441c4a4088285", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyNWE1NThkNzFhZjc4YjljMjg5MWE3NjFiNDQxYzRhNDA4ODI4NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-15T03:56:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-15T03:56:06Z"}, "message": "gfortran.h (gfc_expr.function.name): Make const.\n\n        * gfortran.h (gfc_expr.function.name): Make const.\n        (gfc_iresolve_init_1, gfc_iresolve_done_1): Remove.\n        (gfc_get_string): Update prototype.\n        * iresolve.c: Include tree.h.\n        (string_node, HASH_SIZE, string_head, hash): Remove.\n        (gfc_get_string): Use vsnprintf, get_identifier.\n        (free_strings, gfc_iresolve_init_1, gfc_iresolve_done_1): Remove.\n        * misc.c (gfc_init_1): Don't call gfc_iresolve_init_1.\n        (gfc_done_1): Don't call gfc_iresolve_done_1.\n        * module.c (mio_allocated_string): Take and return const char *,\n        instead of modifying char**.\n        (mio_expr): Update to match.\n        * resolve.c (pure_function): Constify name argument.\n        (resolve_function): Constify name.\n        * trans-intrinsic.c (gfc_conv_intrinsic_function): Likewise.\n\nFrom-SVN: r92176", "tree": {"sha": "3fa977dffc10679dfaab85801d62c79a49b0338a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa977dffc10679dfaab85801d62c79a49b0338a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b25a558d71af78b9c2891a761b441c4a4088285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b25a558d71af78b9c2891a761b441c4a4088285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b25a558d71af78b9c2891a761b441c4a4088285", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b25a558d71af78b9c2891a761b441c4a4088285/comments", "author": null, "committer": null, "parents": [{"sha": "6bd26f0bee556c3951a99a7cd2ae76a413d5ce18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd26f0bee556c3951a99a7cd2ae76a413d5ce18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd26f0bee556c3951a99a7cd2ae76a413d5ce18"}], "stats": {"total": 163, "additions": 51, "deletions": 112}, "files": [{"sha": "b701dc94068263bbe491fd162a0cae0d13a1b41d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6b25a558d71af78b9c2891a761b441c4a4088285", "patch": "@@ -1,3 +1,21 @@\n+2004-12-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* gfortran.h (gfc_expr.function.name): Make const.\n+\t(gfc_iresolve_init_1, gfc_iresolve_done_1): Remove.\n+\t(gfc_get_string): Update prototype.\n+\t* iresolve.c: Include tree.h.\n+\t(string_node, HASH_SIZE, string_head, hash): Remove.\n+\t(gfc_get_string): Use vsnprintf, get_identifier.\n+\t(free_strings, gfc_iresolve_init_1, gfc_iresolve_done_1): Remove.\n+\t* misc.c (gfc_init_1): Don't call gfc_iresolve_init_1.\n+\t(gfc_done_1): Don't call gfc_iresolve_done_1.\n+\t* module.c (mio_allocated_string): Take and return const char *,\n+\tinstead of modifying char**.\n+\t(mio_expr): Update to match.\n+\t* resolve.c (pure_function): Constify name argument.\n+\t(resolve_function): Constify name.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Likewise.\n+\n 2004-12-12  Richard Henderson  <rth@redhat.com>\n \n \t* iresolve.c (gfc_resolve_all, gfc_resolve_any, gfc_resolve_count,"}, {"sha": "1a28b3447774d1f601dbb8650d41f5c991b0edfd", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6b25a558d71af78b9c2891a761b441c4a4088285", "patch": "@@ -1075,7 +1075,7 @@ typedef struct gfc_expr\n     struct\n     {\n       gfc_actual_arglist *actual;\n-      char *name;\t/* Points to the ultimate name of the function */\n+      const char *name;\t/* Points to the ultimate name of the function */\n       gfc_intrinsic_sym *isym;\n       gfc_symbol *esym;\n     }\n@@ -1509,9 +1509,7 @@ int gfc_handle_option (size_t, const char *, int);\n bool gfc_post_options (const char **);\n \n /* iresolve.c */\n-char * gfc_get_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n-void gfc_iresolve_init_1 (void);\n-void gfc_iresolve_done_1 (void);\n+const char * gfc_get_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n \n /* error.c */\n "}, {"sha": "8035a9d5cf9a320830defa21a83c1cc1c55edfc2", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 15, "deletions": 93, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=6b25a558d71af78b9c2891a761b441c4a4088285", "patch": "@@ -29,97 +29,36 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    are generally set according to the function arguments.  */\n \n #include \"config.h\"\n-#include <string.h>\n-#include <stdarg.h>\n-\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n #include \"gfortran.h\"\n #include \"intrinsic.h\"\n \n \n-/* String pool subroutines.  This are used to provide static locations\n-   for the string constants that represent library function names.  */\n-\n-typedef struct string_node\n-{\n-  struct string_node *next;\n-  char string[1];\n-}\n-string_node;\n-\n-#define HASH_SIZE 13\n-\n-static string_node *string_head[HASH_SIZE];\n-\n-\n-/* Return a hash code based on the name.  */\n-\n-static int\n-hash (const char *name)\n-{\n-  int h;\n-\n-  h = 1;\n-  while (*name)\n-    h = 5311966 * h + *name++;\n-\n-  if (h < 0)\n-    h = -h;\n-  return h % HASH_SIZE;\n-}\n-\n+/* Given printf-like arguments, return a stable version of the result string. \n \n-/* Given printf-like arguments, return a static address of the\n-   resulting string.  If the name is not in the table, it is added.  */\n+   We already have a working, optimized string hashing table in the form of\n+   the identifier table.  Reusing this table is likely not to be wasted, \n+   since if the function name makes it to the gimple output of the frontend,\n+   we'll have to create the identifier anyway.  */\n \n-char *\n+const char *\n gfc_get_string (const char *format, ...)\n {\n-  char temp_name[50];\n-  string_node *p;\n+  char temp_name[128];\n   va_list ap;\n-  int h;\n+  tree ident;\n \n   va_start (ap, format);\n-  vsprintf (temp_name, format, ap);\n+  vsnprintf (temp_name, sizeof(temp_name), format, ap);\n   va_end (ap);\n+  temp_name[sizeof(temp_name)-1] = 0;\n \n-  h = hash (temp_name);\n-\n-  /* Search */\n-  for (p = string_head[h]; p; p = p->next)\n-    if (strcmp (p->string, temp_name) == 0)\n-      return p->string;\n-\n-  /* Add */\n-  p = gfc_getmem (sizeof (string_node) + strlen (temp_name));\n-\n-  strcpy (p->string, temp_name);\n-\n-  p->next = string_head[h];\n-  string_head[h] = p;\n-\n-  return p->string;\n+  ident = get_identifier (temp_name);\n+  return IDENTIFIER_POINTER (ident);\n }\n \n-\n-\n-static void\n-free_strings (void)\n-{\n-  string_node *p, *q;\n-  int h;\n-\n-  for (h = 0; h < HASH_SIZE; h++)\n-    {\n-      for (p = string_head[h]; p; p = q)\n-\t{\n-\t  q = p->next;\n-\t  gfc_free (p);\n-\t}\n-    }\n-}\n-\n-\n /********************** Resolution functions **********************/\n \n \n@@ -1785,20 +1724,3 @@ gfc_resolve_unlink_sub (gfc_code * c)\n   name = gfc_get_string (PREFIX(\"unlink_i%d_sub\"), kind);\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n-\n-\n-void\n-gfc_iresolve_init_1 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < HASH_SIZE; i++)\n-    string_head[i] = NULL;\n-}\n-\n-\n-void\n-gfc_iresolve_done_1 (void)\n-{\n-  free_strings ();\n-}"}, {"sha": "3f7058391ebd114ed4667d8bc4e0ff17d418d715", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=6b25a558d71af78b9c2891a761b441c4a4088285", "patch": "@@ -278,12 +278,10 @@ gfc_intent_string (sym_intent i)\n void\n gfc_init_1 (void)\n {\n-\n   gfc_error_init_1 ();\n   gfc_scanner_init_1 ();\n   gfc_arith_init_1 ();\n   gfc_intrinsic_init_1 ();\n-  gfc_iresolve_init_1 ();\n   gfc_simplify_init_1 ();\n }\n \n@@ -306,10 +304,8 @@ gfc_init_2 (void)\n void\n gfc_done_1 (void)\n {\n-\n   gfc_scanner_done_1 ();\n   gfc_intrinsic_done_1 ();\n-  gfc_iresolve_done_1 ();\n   gfc_arith_done_1 ();\n }\n "}, {"sha": "d4bee5bf78fbb48b78a4e64fd1f1a4a76b03e26c", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=6b25a558d71af78b9c2891a761b441c4a4088285", "patch": "@@ -1330,16 +1330,18 @@ mio_integer (int *ip)\n /* Read or write a character pointer that points to a string on the\n    heap.  */\n \n-static void\n-mio_allocated_string (char **sp)\n+static const char *\n+mio_allocated_string (const char *s)\n {\n-\n   if (iomode == IO_OUTPUT)\n-    write_atom (ATOM_STRING, *sp);\n+    {\n+      write_atom (ATOM_STRING, s);\n+      return s;\n+    }\n   else\n     {\n       require_atom (ATOM_STRING);\n-      *sp = atom_string;\n+      return atom_string;\n     }\n }\n \n@@ -2449,7 +2451,8 @@ mio_expr (gfc_expr ** ep)\n \n       if (iomode == IO_OUTPUT)\n \t{\n-\t  mio_allocated_string (&e->value.function.name);\n+\t  e->value.function.name\n+\t    = mio_allocated_string (e->value.function.name);\n \t  flag = e->value.function.esym != NULL;\n \t  mio_integer (&flag);\n \t  if (flag)\n@@ -2483,7 +2486,8 @@ mio_expr (gfc_expr ** ep)\n       break;\n \n     case EXPR_SUBSTRING:\n-      mio_allocated_string (&e->value.character.string);\n+      e->value.character.string = (char *)\n+\tmio_allocated_string (e->value.character.string);\n       mio_expr (&e->op1);\n       mio_expr (&e->op2);\n       break;\n@@ -2518,7 +2522,8 @@ mio_expr (gfc_expr ** ep)\n \n \tcase BT_CHARACTER:\n \t  mio_integer (&e->value.character.length);\n-\t  mio_allocated_string (&e->value.character.string);\n+\t  e->value.character.string = (char *)\n+\t    mio_allocated_string (e->value.character.string);\n \t  break;\n \n \tdefault:"}, {"sha": "3d72f7dfa79e57876520415256ef02c00629f2b1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6b25a558d71af78b9c2891a761b441c4a4088285", "patch": "@@ -901,7 +901,7 @@ resolve_unknown_f (gfc_expr * expr)\n    function is PURE, zero if not.  */\n \n static int\n-pure_function (gfc_expr * e, char **name)\n+pure_function (gfc_expr * e, const char **name)\n {\n   int pure;\n \n@@ -936,7 +936,7 @@ static try\n resolve_function (gfc_expr * expr)\n {\n   gfc_actual_arglist *arg;\n-  char *name;\n+  const char *name;\n   try t;\n \n   if (resolve_actual_arglist (expr->value.function.actual) == FAILURE)"}, {"sha": "ee1f7f59bfdc5d8ac9ea4cf8f18958a7774177a4", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b25a558d71af78b9c2891a761b441c4a4088285/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=6b25a558d71af78b9c2891a761b441c4a4088285", "patch": "@@ -2663,7 +2663,7 @@ void\n gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n {\n   gfc_intrinsic_sym *isym;\n-  char *name;\n+  const char *name;\n   int lib;\n \n   isym = expr->value.function.isym;"}]}