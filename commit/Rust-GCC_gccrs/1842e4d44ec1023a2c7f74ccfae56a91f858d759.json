{"sha": "1842e4d44ec1023a2c7f74ccfae56a91f858d759", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0MmU0ZDQ0ZWMxMDIzYTJjN2Y3NGNjZmFlNTZhOTFmODU4ZDc1OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-05-22T10:32:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-05-22T10:32:55Z"}, "message": "tree-dfa.c (refs_may_alias_p): Exit early if possible.\n\n2008-05-22  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-dfa.c (refs_may_alias_p): Exit early if possible.  Handle\n\tmore cases of offset disambiguation that is possible if\n\tstrict-aliasing rules apply.\n\t* tree-ssa-loop-im.c (mem_refs_may_alias_p): Use refs_may_alias_p\n\tfor basic offset and type-based disambiguation.\n\n\t* gcc.dg/tree-ssa/alias-18.c: New testcase.\n\nFrom-SVN: r135754", "tree": {"sha": "c10b9f776be672e50cfb69db5d6ee71cb80cf2c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c10b9f776be672e50cfb69db5d6ee71cb80cf2c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1842e4d44ec1023a2c7f74ccfae56a91f858d759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1842e4d44ec1023a2c7f74ccfae56a91f858d759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1842e4d44ec1023a2c7f74ccfae56a91f858d759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1842e4d44ec1023a2c7f74ccfae56a91f858d759/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f9f247417d7704a6b7808ec14a4ab67d55e9f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f9f247417d7704a6b7808ec14a4ab67d55e9f07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f9f247417d7704a6b7808ec14a4ab67d55e9f07"}], "stats": {"total": 220, "additions": 177, "deletions": 43}, "files": [{"sha": "4f2d4c42f81e1bf83aa758749ff75d285abe372e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1842e4d44ec1023a2c7f74ccfae56a91f858d759", "patch": "@@ -1,3 +1,11 @@\n+2008-05-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-dfa.c (refs_may_alias_p): Exit early if possible.  Handle\n+\tmore cases of offset disambiguation that is possible if\n+\tstrict-aliasing rules apply.\n+\t* tree-ssa-loop-im.c (mem_refs_may_alias_p): Use refs_may_alias_p\n+\tfor basic offset and type-based disambiguation.\n+\n 2008-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_expand_vector_init_one_var): Use"}, {"sha": "51daefa9b4da7b02aee546ba18c81a28c22cc440", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1842e4d44ec1023a2c7f74ccfae56a91f858d759", "patch": "@@ -1,3 +1,7 @@\n+2008-05-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/alias-18.c: New testcase.\n+\n 2008-05-22  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat.dg/slice5.adb: New test."}, {"sha": "9ef3f2aadb76be83b8409692dee2896b0cf338d4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-18.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-18.c?ref=1842e4d44ec1023a2c7f74ccfae56a91f858d759", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre-details -fdump-tree-optimized --param max-aliased-vops=0\" } */\n+\n+struct A {\n+  int i;\n+  int j;\n+  float x;\n+};\n+struct B {\n+  struct A a;\n+  int k;\n+};\n+\n+int g;\n+\n+int test0 (struct A *p, struct A *q)\n+{\n+  p->i = 0;\n+  q->j = -1;\n+  return p->i;\n+}\n+\n+int test1 (struct A *p, struct B *q)\n+{\n+  p->i = 1;\n+  q->k = -1;\n+  return p->i;\n+}\n+\n+int test2 (struct A *p, struct B *q)\n+{\n+  p->i = 2;\n+  q->a.i = -1;\n+  return p->i;\n+}\n+\n+int test3 (struct A *p, struct B *q)\n+{\n+  p->i = 3;\n+  q->a.j = -1;\n+  return p->i;\n+}\n+\n+int test4 (struct A *p)\n+{\n+  g = 4;\n+  p->i = -1;\n+  return g;\n+}\n+\n+int test5 (struct A *p)\n+{\n+  p->i = 5;\n+  g = -1;\n+  return p->i;\n+}\n+\n+int test6 (struct A *p, int *q)\n+{\n+  p->i = 6;\n+  *q = -1;\n+  return p->i;\n+}\n+\n+int test7 (struct A *p, int *q)\n+{\n+  p->j = 7;\n+  *q = -1;\n+  return p->j;\n+}\n+\n+int test8 (struct A *p, int *q)\n+{\n+  *q = 8;\n+  p->x = -1;\n+  return *q;\n+}\n+\n+/* { dg-final { scan-tree-dump \"with 0\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"with 1\" \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"with 3\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"with 4\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"with 5\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"with 8\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump-not \"return 2;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"return 6;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"return 7;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"return -1;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "02d2139d3b3eb151cb17dc68146393089878cc07", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 72, "deletions": 12, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=1842e4d44ec1023a2c7f74ccfae56a91f858d759", "patch": "@@ -1041,6 +1041,7 @@ refs_may_alias_p (tree ref1, tree ref2)\n   HOST_WIDE_INT offset1 = 0, offset2 = 0;\n   HOST_WIDE_INT size1 = -1, size2 = -1;\n   HOST_WIDE_INT max_size1 = -1, max_size2 = -1;\n+  bool strict_aliasing_applies;\n \n   gcc_assert ((SSA_VAR_P (ref1)\n \t       || handled_component_p (ref1)\n@@ -1068,19 +1069,78 @@ refs_may_alias_p (tree ref1, tree ref2)\n      If both references are based on the same variable, they cannot alias if\n      if the accesses do not overlap.  */\n   if (SSA_VAR_P (base1)\n-      && SSA_VAR_P (base2)\n-      && (!operand_equal_p (base1, base2, 0)\n-\t  || !ranges_overlap_p (offset1, max_size1, offset2, max_size2)))\n-    return false;\n+      && SSA_VAR_P (base2))\n+    {\n+      if (!operand_equal_p (base1, base2, 0))\n+\treturn false;\n+      return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n+    }\n \n-  /* If both references are through pointers and both pointers are equal\n-     then they do not alias if the accesses do not overlap.  */\n-  if (TREE_CODE (base1) == INDIRECT_REF\n-      && TREE_CODE (base2) == INDIRECT_REF\n-      && operand_equal_p (TREE_OPERAND (base1, 0),\n-\t\t\t  TREE_OPERAND (base2, 0), 0)\n-      && !ranges_overlap_p (offset1, max_size1, offset2, max_size2))\n-    return false;\n+  /* If one base is a ref-all pointer weird things are allowed.  */\n+  strict_aliasing_applies = (flag_strict_aliasing\n+\t\t\t     && get_alias_set (base1) != 0\n+\t\t\t     && get_alias_set (base2) != 0);\n+\n+  /* If both references are through the same type, or if strict aliasing\n+     doesn't apply they are through two same pointers, they do not alias\n+     if the accesses do not overlap.  */\n+  if ((strict_aliasing_applies\n+       && (TYPE_MAIN_VARIANT (TREE_TYPE (base1))\n+\t   == TYPE_MAIN_VARIANT (TREE_TYPE (base2))))\n+      || (TREE_CODE (base1) == INDIRECT_REF\n+\t  && TREE_CODE (base2) == INDIRECT_REF\n+\t  && operand_equal_p (TREE_OPERAND (base1, 0),\n+\t\t\t      TREE_OPERAND (base2, 0), 0)))\n+    return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n+\n+  /* If both are component references through pointers try to find a\n+     common base and apply offset based disambiguation.  This handles\n+     for example\n+       struct A { int i; int j; } *q;\n+       struct B { struct A a; int k; } *p;\n+     disambiguating q->i and p->a.j.  */\n+  if (strict_aliasing_applies\n+      && (TREE_CODE (base1) == INDIRECT_REF\n+\t  || TREE_CODE (base2) == INDIRECT_REF)\n+      && handled_component_p (ref1)\n+      && handled_component_p (ref2))\n+    {\n+      tree *refp;\n+      /* Now search for the type of base1 in the access path of ref2.  This\n+\t would be a common base for doing offset based disambiguation on.  */\n+      refp = &ref2;\n+      while (handled_component_p (*refp)\n+\t     /* Note that the following is only conservative if there are\n+\t\tnever copies of types appearing as sub-structures.  */\n+\t     && (TYPE_MAIN_VARIANT (TREE_TYPE (*refp))\n+\t\t != TYPE_MAIN_VARIANT (TREE_TYPE (base1))))\n+\trefp = &TREE_OPERAND (*refp, 0);\n+      if (TYPE_MAIN_VARIANT (TREE_TYPE (*refp))\n+\t  == TYPE_MAIN_VARIANT (TREE_TYPE (base1)))\n+\t{\n+\t  HOST_WIDE_INT offadj, sztmp, msztmp;\n+\t  get_ref_base_and_extent (*refp, &offadj, &sztmp, &msztmp);\n+\t  offset2 -= offadj;\n+\t  return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n+\t}\n+      /* The other way around.  */\n+      refp = &ref1;\n+      while (handled_component_p (*refp)\n+\t     && (TYPE_MAIN_VARIANT (TREE_TYPE (*refp))\n+\t\t != TYPE_MAIN_VARIANT (TREE_TYPE (base2))))\n+\trefp = &TREE_OPERAND (*refp, 0);\n+      if (TYPE_MAIN_VARIANT (TREE_TYPE (*refp))\n+\t  == TYPE_MAIN_VARIANT (TREE_TYPE (base2)))\n+\t{\n+\t  HOST_WIDE_INT offadj, sztmp, msztmp;\n+\t  get_ref_base_and_extent (*refp, &offadj, &sztmp, &msztmp);\n+\t  offset1 -= offadj;\n+\t  return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n+\t}\n+      /* If we can be sure to catch all equivalent types in the search\n+\t for the common base then we could return false here.  In that\n+\t case we would be able to disambiguate q->i and p->k.  */\n+    }\n \n   return true;\n }"}, {"sha": "2336263b499af42a1bbb406a7a7d64a4b06f719c", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1842e4d44ec1023a2c7f74ccfae56a91f858d759/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=1842e4d44ec1023a2c7f74ccfae56a91f858d759", "patch": "@@ -1617,41 +1617,13 @@ mem_refs_may_alias_p (tree mem1, tree mem2, struct pointer_map_t **ttae_cache)\n   /* Perform BASE + OFFSET analysis -- if MEM1 and MEM2 are based on the same\n      object and their offset differ in such a way that the locations cannot\n      overlap, then they cannot alias.  */\n-  aff_tree off1, off2;\n   double_int size1, size2;\n-  tree base1, base2;\n-\n-  /* If MEM1 and MEM2 are based on different variables, they cannot alias.  */\n-  base1 = get_base_address (mem1);\n-  base2 = get_base_address (mem2);\n+  aff_tree off1, off2;\n \n-  if (base1\n-      && !INDIRECT_REF_P (base1)\n-      && base2\n-      && !INDIRECT_REF_P (base2)\n-      && !operand_equal_p (base1, base2, 0))\n+  /* Perform basic offset and type-based disambiguation.  */\n+  if (!refs_may_alias_p (mem1, mem2))\n     return false;\n \n-  /* With strict aliasing, it is impossible to access a scalar variable through\n-     anything but a pointer dereference or through a union (gcc extension).  */\n-  if (flag_strict_aliasing)\n-    {\n-      if (!INDIRECT_REF_P (mem1)\n-\t  && base1\n-\t  && TREE_CODE (TREE_TYPE (base1)) != UNION_TYPE\n-\t  && SSA_VAR_P (mem2)\n-\t  && !AGGREGATE_TYPE_P (TREE_TYPE (mem2)))\n-\treturn false;\n-      if (!INDIRECT_REF_P (mem2)\n-\t  && base2\n-\t  && TREE_CODE (TREE_TYPE (base2)) != UNION_TYPE\n-\t  && SSA_VAR_P (mem1)\n-\t  && !AGGREGATE_TYPE_P (TREE_TYPE (mem1)))\n-\treturn false;\n-      if (!alias_sets_conflict_p (get_alias_set (mem1), get_alias_set (mem2)))\n-\treturn false;\n-    }\n-\n   /* The expansion of addresses may be a bit expensive, thus we only do\n      the check at -O2 and higher optimization levels.  */\n   if (optimize < 2)"}]}