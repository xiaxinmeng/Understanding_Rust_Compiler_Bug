{"sha": "082a099ce4d0c306c9af311189e9ae1f8c4cba68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgyYTA5OWNlNGQwYzMwNmM5YWYzMTExODllOWFlMWY4YzRjYmE2OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-05-21T01:03:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-05-21T01:03:20Z"}, "message": "system.h: Poison NO_RECURSIVE_FUNCTION_CSE.\n\n\t* system.h: Poison NO_RECURSIVE_FUNCTION_CSE.\n\t* calls.c (prepare_call_address): Don't test\n\tNO_RECURSIVE_FUNCTION_CSE.\n\t* config/arc/arc.h (NO_RECURSIVE_FUNCTION_CSE): Don't define.\n\t* config/arm/arm.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/avr/avr.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/frv/frv.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/i386/i386.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/ip2k/ip2k.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/iq2000/iq2000.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/m32r/m32r.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/m68k/m68k.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/mcore/mcore.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/mips/mips.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/stormy16/stormy16.h (NO_RECURSIVE_FUNCTION_CSE):\n\tLikewise.\n\t* config/xtensa/xtensa.h (NO_RECURSIVE_FUNCTION_CSE): Likewise.\n\t* config/sh/sh.h: Remove NO_RECURSIVE_FUNCTION_CSE comment.\n\t* doc/tm.texi (Costs): Remove documentation for\n\tNO_RECURSIVE_FUNCTION_CSE.\n\nFrom-SVN: r82084", "tree": {"sha": "0d2e31c7d45edaa26df7e496bfbfff4c394061f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d2e31c7d45edaa26df7e496bfbfff4c394061f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/082a099ce4d0c306c9af311189e9ae1f8c4cba68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082a099ce4d0c306c9af311189e9ae1f8c4cba68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082a099ce4d0c306c9af311189e9ae1f8c4cba68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082a099ce4d0c306c9af311189e9ae1f8c4cba68/comments", "author": null, "committer": null, "parents": [{"sha": "59ce6d6beeaac84f468963740cc09f40eefc398f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ce6d6beeaac84f468963740cc09f40eefc398f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ce6d6beeaac84f468963740cc09f40eefc398f"}], "stats": {"total": 63, "additions": 3, "deletions": 60}, "files": [{"sha": "419f45881a18c97ba057d99bf70fabe30aa5160f", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -297,10 +297,7 @@ prepare_call_address (rtx funexp, rtx static_chain_value,\n     {\n #ifndef NO_FUNCTION_CSE\n       if (optimize && ! flag_no_function_cse)\n-#ifdef NO_RECURSIVE_FUNCTION_CSE\n-\tif (fndecl != current_function_decl)\n-#endif\n-\t  funexp = force_reg (Pmode, funexp);\n+\tfunexp = force_reg (Pmode, funexp);\n #endif\n     }\n "}, {"sha": "f25e5d369d3ec96cb76f0ddea5bd067467c60f77", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -951,12 +951,6 @@ arc_select_cc_mode (OP, X, Y)\n    function address than to call an address kept in a register.  */\n /* On the ARC, calling through registers is slow.  */\n #define NO_FUNCTION_CSE\n-\n-/* Define this macro if it is as good or better for a function to call\n-   itself with an explicit address than to call an address kept in a\n-   register.  */\n-/* On the ARC, calling through registers is slow.  */\n-#define NO_RECURSIVE_FUNCTION_CSE\n \f\n /* Section selection.  */\n /* WARNING: These section names also appear in dwarfout.c.  */"}, {"sha": "9981ff03f567f762747d9a40a09f0bea9e76d8c2", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -2191,9 +2191,6 @@ do {\t\t\t\t\t\t\t\\\n #define DEFAULT_SIGNED_CHAR  0\n #endif\n \n-/* Don't cse the address of the function being compiled.  */\n-#define NO_RECURSIVE_FUNCTION_CSE 1\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4"}, {"sha": "6361fbd90348a33b775772d2e38e125cb773f66b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -509,8 +509,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n \n #define NO_FUNCTION_CSE\n \n-#define NO_RECURSIVE_FUNCTION_CSE\n-\n #define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n #define DATA_SECTION_ASM_OP \"\\t.data\""}, {"sha": "2b53bb8cf091c844a31768dd4280b568e477cf06", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -2536,10 +2536,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n    address than to call an address kept in a register.  */\n #define NO_FUNCTION_CSE\n \n-/* Define this macro if it is as good or better for a function to call itself\n-   with an explicit address than to call an address kept in a register.  */\n-#define NO_RECURSIVE_FUNCTION_CSE\n-\n \f\n /* Dividing the output into sections.  */\n "}, {"sha": "2cc64d182a7b3c29c7648362292d689d9041bf7b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -2646,12 +2646,6 @@ do {\t\t\t\t\t\t\t\\\n    faster than one with a register address.  */\n \n #define NO_FUNCTION_CSE\n-\n-/* Define this macro if it is as good or better for a function to call\n-   itself with an explicit address than to call an address kept in a\n-   register.  */\n-\n-#define NO_RECURSIVE_FUNCTION_CSE\n \f\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison."}, {"sha": "d78ae7779b1b44d9bb36ad75e7c489949f56970b", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -598,7 +598,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define SLOW_BYTE_ACCESS 0\n \n #define NO_FUNCTION_CSE\n-#define NO_RECURSIVE_FUNCTION_CSE\n \n #define TEXT_SECTION_ASM_OP \".text\"\n #define DATA_SECTION_ASM_OP \".data\""}, {"sha": "086db3ba8348268e6c09758fec82721c73b344a9", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -699,8 +699,6 @@ typedef struct iq2000_args\n \n #define NO_FUNCTION_CSE 1\n \n-#define NO_RECURSIVE_FUNCTION_CSE 1\n-\n #define ADJUST_COST(INSN,LINK,DEP_INSN,COST)\t\t\t\t\\\n   if (REG_NOTE_KIND (LINK) != 0)\t\t\t\t\t\\\n     (COST) = 0; /* Anti or output dependence.  */"}, {"sha": "82b265b10652fb13a9eb69ab96af7922f4f6f087", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -1459,11 +1459,6 @@ L2:     .word STATIC\n /* Define this macro if it is as good or better to call a constant\n    function address than to call an address kept in a register.  */\n #define NO_FUNCTION_CSE\n-\n-/* Define this macro if it is as good or better for a function to call\n-   itself with an explicit address than to call an address kept in a\n-   register.  */\n-#define NO_RECURSIVE_FUNCTION_CSE\n \f\n /* Section selection.  */\n "}, {"sha": "522f0dc5e4fd08cf0c3170c85c9e4410c430ea86", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -1364,9 +1364,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n \n-/* Don't cse the address of the function being compiled.  */\n-#define NO_RECURSIVE_FUNCTION_CSE\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4"}, {"sha": "ccae6d945dd4029a02290665c056225b9f5cdf50", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -909,9 +909,6 @@ extern const enum reg_class reg_class_from_letter[];\n /* The type of size_t unsigned int.  */\n #define SIZE_TYPE \"unsigned int\"\n \n-/* Don't cse the address of the function being compiled.  */\n-#define NO_RECURSIVE_FUNCTION_CSE 1\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4"}, {"sha": "e22e1699f75b3fc8d1a9779bc0d5754a856839c0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -1743,11 +1743,6 @@ extern char mips_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n    function address than to call an address kept in a register.  */\n #define NO_FUNCTION_CSE 1\n \n-/* Define this macro if it is as good or better for a function to\n-   call itself with an explicit address than to call an address\n-   kept in a register.  */\n-#define NO_RECURSIVE_FUNCTION_CSE 1\n-\n /* The ABI-defined global pointer.  Sometimes we use a different\n    register in leaf functions: see PIC_OFFSET_TABLE_REGNUM.  */\n #define GLOBAL_POINTER_REGNUM (GP_REG_FIRST + 28)"}, {"sha": "fb8a16522cb126650e150ed5236cbbbc4057685e", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -2645,9 +2645,6 @@ struct sh_args {\n \n #define SH_ELF_WCHAR_TYPE \"long int\"\n \n-/* Don't cse the address of the function being compiled.  */\n-/*#define NO_RECURSIVE_FUNCTION_CSE 1*/\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX (TARGET_SHMEDIA ? 8 : 4)"}, {"sha": "051914b31d2b49f5e0df8a396369940017ed8d1a", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -618,8 +618,6 @@ do {\t\t\t\t\t\t\t\\\n \n #define NO_FUNCTION_CSE\n \n-#define NO_RECURSIVE_FUNCTION_CSE\n-\n \f\n /* Dividing the output into sections.  */\n "}, {"sha": "9eb017507a745642933fb568d039692813fa8132", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -416,10 +416,6 @@ extern char xtensa_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n    call an address kept in a register.  */\n #define NO_FUNCTION_CSE 1\n \n-/* It is as good or better for a function to call itself with an\n-   explicit address than to call an address kept in a register.  */\n-#define NO_RECURSIVE_FUNCTION_CSE 1\n-\n /* Xtensa processors have \"register windows\".  GCC does not currently\n    take advantage of the possibility for variable-sized windows; instead,\n    we use a fixed window size of 8.  */"}, {"sha": "aee7ba87b7da872a8a79f12727c44d5111bfaf90", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -5429,12 +5429,6 @@ Define this macro if it is as good or better to call a constant\n function address than to call an address kept in a register.\n @end defmac\n \n-@defmac NO_RECURSIVE_FUNCTION_CSE\n-Define this macro if it is as good or better for a function to call\n-itself with an explicit address than to call an address kept in a\n-register.\n-@end defmac\n-\n @defmac RANGE_TEST_NON_SHORT_CIRCUIT\n Define this macro if a non-short-circuit operation produced by\n @samp{fold_range_test ()} is optimal.  This macro defaults to true if"}, {"sha": "b3d9974599d70c927b7eed332aaf8f01426bfe54", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082a099ce4d0c306c9af311189e9ae1f8c4cba68/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=082a099ce4d0c306c9af311189e9ae1f8c4cba68", "patch": "@@ -642,7 +642,8 @@ typedef char _Bool;\n \tFINAL_REG_PARM_STACK_SPACE MAYBE_REG_PARM_STACK_SPACE\t\t   \\\n \tTRADITIONAL_PIPELINE_INTERFACE DFA_PIPELINE_INTERFACE\t\t   \\\n \tDBX_OUTPUT_STANDARD_TYPES BUILTIN_SETJMP_FRAME_VALUE\t\t   \\\n-\tSUNOS4_SHARED_LIBRARIES PROMOTE_FOR_CALL_ONLY\n+\tSUNOS4_SHARED_LIBRARIES PROMOTE_FOR_CALL_ONLY\t\t\t   \\\n+\tNO_RECURSIVE_FUNCTION_CSE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}