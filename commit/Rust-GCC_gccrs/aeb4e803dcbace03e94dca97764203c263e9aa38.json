{"sha": "aeb4e803dcbace03e94dca97764203c263e9aa38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViNGU4MDNkY2JhY2UwM2U5NGRjYTk3NzY0MjAzYzI2M2U5YWEzOA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2011-01-23T08:20:22Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-01-23T08:20:22Z"}, "message": "costmodel-vect-33.c: Expect vectorization to be not profitable if...\n\n\n        * gcc.dg/vect/costmodel/spu/costmodel-vect-33.c: Expect\n        vectorization to be not profitable if peeling is used\n        to realign the memory access.\n        * gcc.dg/vect/costmodel/spu/costmodel-vect-76a.c:\n        Increase loop bound to avoid loop unrolling.\n        * gcc.dg/vect/costmodel/spu/costmodel-vect-76c.c:\n        Likewise.\n\nFrom-SVN: r169142", "tree": {"sha": "9c6881e145282746a3afe2e0a73c541c2ec6e207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c6881e145282746a3afe2e0a73c541c2ec6e207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeb4e803dcbace03e94dca97764203c263e9aa38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb4e803dcbace03e94dca97764203c263e9aa38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb4e803dcbace03e94dca97764203c263e9aa38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb4e803dcbace03e94dca97764203c263e9aa38/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3237aa952ec5549c6d93e5c848ab97def3f8ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3237aa952ec5549c6d93e5c848ab97def3f8ada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3237aa952ec5549c6d93e5c848ab97def3f8ada"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "c4cc1e089277c34bc890109bcc81fc8097a53b75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb4e803dcbace03e94dca97764203c263e9aa38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb4e803dcbace03e94dca97764203c263e9aa38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aeb4e803dcbace03e94dca97764203c263e9aa38", "patch": "@@ -1,3 +1,12 @@\n+2011-01-23  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* gcc.dg/vect/costmodel/spu/costmodel-vect-33.c: Expect\n+\tvectorization to be not profitable if peeling is used to\n+\trealign the memory access.\n+\t* gcc.dg/vect/costmodel/spu/costmodel-vect-76a.c: Increase\n+\tloop bound to avoid loop unrolling.\n+\t* gcc.dg/vect/costmodel/spu/costmodel-vect-76c.c: Likewise.\n+\n 2011-01-22  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/47333"}, {"sha": "11036b0bced5b9050fbae6edf03c3481a72dd3d7", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/spu/costmodel-vect-33.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb4e803dcbace03e94dca97764203c263e9aa38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb4e803dcbace03e94dca97764203c263e9aa38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-33.c?ref=aeb4e803dcbace03e94dca97764203c263e9aa38", "patch": "@@ -4,7 +4,7 @@\n #include <stdarg.h>\n #include \"../../tree-vect.h\"\n \n-#define N 17\n+#define N 16\n struct test {\n   char ca[N];\n };\n@@ -35,6 +35,9 @@ int main (void)\n   return main1 ();\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* Peeling to align the store is used. Overhead of peeling is too high.  */\n+/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 1 \"vect\" { target vector_alignment_reachable } } } */\n+\n+/* Versioning to align the store is used. Overhead of versioning is not too high.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target {! vector_alignment_reachable} } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "124493b0321fc78972274f03908700ff2648e6ea", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/spu/costmodel-vect-76a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb4e803dcbace03e94dca97764203c263e9aa38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-76a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb4e803dcbace03e94dca97764203c263e9aa38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-76a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-76a.c?ref=aeb4e803dcbace03e94dca97764203c263e9aa38", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"../../tree-vect.h\"\n \n-#define N 8\n+#define N 16\n #define OFF 4\n \n /* Check handling of accesses for which the \"initial condition\" -"}, {"sha": "b42934c68f52cf841c357181ce8567fab0e43b2b", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/spu/costmodel-vect-76c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb4e803dcbace03e94dca97764203c263e9aa38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-76c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb4e803dcbace03e94dca97764203c263e9aa38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-76c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fspu%2Fcostmodel-vect-76c.c?ref=aeb4e803dcbace03e94dca97764203c263e9aa38", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"../../tree-vect.h\"\n \n-#define N 8\n+#define N 32\n #define OFF 4\n \n /* Check handling of accesses for which the \"initial condition\" -"}]}