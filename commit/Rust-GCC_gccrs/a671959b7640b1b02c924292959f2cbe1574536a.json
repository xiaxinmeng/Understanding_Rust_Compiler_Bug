{"sha": "a671959b7640b1b02c924292959f2cbe1574536a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3MTk1OWI3NjQwYjFiMDJjOTI0MjkyOTU5ZjJjYmUxNTc0NTM2YQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2021-04-16T16:52:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-29T14:23:48Z"}, "message": "[Ada] Crash on limited array object with address clause\n\ngcc/ada/\n\n\t* exp_aggr.adb (Convert_Aggr_In_Object_Decl): After expansion of\n\tthe aggregate, the expression can be removed from the\n\tdeclaration, except if the object is class-wide, in which case\n\tthe aggregate provides the actual type. In other cases the\n\tpresence of the expression may lead to spurious freezing issue.\n\t* exp_ch3.adb (Expand_N_Object_Declaration): If the expression\n\tin the declaration is an aggregate with delayed expansion (as is\n\tthe case for objects of a limited type, or a subsequent address\n\tspecification) the aggregate must be resolved at this point.\n\tThis resolution must not include expansion, because the\n\texpansion of the enclosing declaration will construct the\n\tnecessary aggregate expansion.", "tree": {"sha": "8f68ef3183b5bb11496267051c57626a483557c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f68ef3183b5bb11496267051c57626a483557c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a671959b7640b1b02c924292959f2cbe1574536a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a671959b7640b1b02c924292959f2cbe1574536a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a671959b7640b1b02c924292959f2cbe1574536a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a671959b7640b1b02c924292959f2cbe1574536a/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b57d67e85df1636c5e4300defe337e28878412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b57d67e85df1636c5e4300defe337e28878412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b57d67e85df1636c5e4300defe337e28878412"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "56ec1be5d7fbf0a24118f6da4edca6669f7a021d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a671959b7640b1b02c924292959f2cbe1574536a/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a671959b7640b1b02c924292959f2cbe1574536a/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=a671959b7640b1b02c924292959f2cbe1574536a", "patch": "@@ -4437,6 +4437,15 @@ package body Exp_Aggr is\n       end;\n \n       Set_No_Initialization (N);\n+\n+      --  After expansion the expression can be removed from the declaration\n+      --  except if the object is class-wide, in which case the aggregate\n+      --  provides the actual type.\n+\n+      if not Is_Class_Wide_Type (Etype (Obj)) then\n+         Set_Expression (N, Empty);\n+      end if;\n+\n       Initialize_Discriminants (N, Typ);\n    end Convert_Aggr_In_Object_Decl;\n "}, {"sha": "4dbaadd637d0c87ea68af7fb8cfe80d6b16cc652", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a671959b7640b1b02c924292959f2cbe1574536a/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a671959b7640b1b02c924292959f2cbe1574536a/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=a671959b7640b1b02c924292959f2cbe1574536a", "patch": "@@ -30,6 +30,7 @@ with Einfo;          use Einfo;\n with Einfo.Entities; use Einfo.Entities;\n with Einfo.Utils;    use Einfo.Utils;\n with Errout;         use Errout;\n+with Expander;       use Expander;\n with Exp_Aggr;       use Exp_Aggr;\n with Exp_Atag;       use Exp_Atag;\n with Exp_Ch4;        use Exp_Ch4;\n@@ -6985,12 +6986,16 @@ package body Exp_Ch3 is\n             --  happen when the aggregate is limited and the declared object\n             --  has a following address clause; it happens also when generating\n             --  C code for an aggregate that has an alignment or address clause\n-            --  (see Analyze_Object_Declaration).\n+            --  (see Analyze_Object_Declaration). Resolution is done without\n+            --  expansion because it will take place when the declaration\n+            --  itself is expanded.\n \n             if (Is_Limited_Type (Typ) or else Modify_Tree_For_C)\n               and then not Analyzed (Expr)\n             then\n+               Expander_Mode_Save_And_Set (False);\n                Resolve (Expr, Typ);\n+               Expander_Mode_Restore;\n             end if;\n \n             Convert_Aggr_In_Object_Decl (N);"}]}