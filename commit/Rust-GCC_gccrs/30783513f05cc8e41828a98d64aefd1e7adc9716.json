{"sha": "30783513f05cc8e41828a98d64aefd1e7adc9716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3ODM1MTNmMDVjYzhlNDE4MjhhOThkNjRhZWZkMWU3YWRjOTcxNg==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-06-03T17:41:43Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-06-03T17:41:43Z"}, "message": "Makefile.in (common_tools): Fix typos in $(exeext) extension.\n\ngcc/ada/\n\t* Makefile.in (common_tools): Fix typos in $(exeext) extension.\n\t* gnat_ugn.texi (Style Checking)\n\t(Adding the Results of Compiler Checks to gnatcheck Output)\n\t(Example of Binder Output File): Fix typos.\n\t* ali.ads, einfo.ads, exp_ch4.adb, exp_ch6.adb,\n\texp_dbug.ads, exp_dist.adb, exp_smem.adb, g-socket.ads,\n\ts-osinte-rtems.ads, s-shasto.ads, s-stausa.adb,\n\ts-stausa.ads, sem_cat.adb, sem_ch12.adb, sem_ch3.adb,\n\tsem_ch4.adb, sem_ch6.adb, sem_ch8.adb, sem_util.ads,\n\tsinfo.ads, utils.c: Fix typos in comments.\n\t* sem_ch6.adb, vms_data.ads: Fix typos in strings.\n\nFrom-SVN: r136329", "tree": {"sha": "1c48a0061eef05b5d0e354f42467d46fe33b1fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c48a0061eef05b5d0e354f42467d46fe33b1fc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30783513f05cc8e41828a98d64aefd1e7adc9716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30783513f05cc8e41828a98d64aefd1e7adc9716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30783513f05cc8e41828a98d64aefd1e7adc9716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30783513f05cc8e41828a98d64aefd1e7adc9716/comments", "author": null, "committer": null, "parents": [{"sha": "458e816dad49140fc3b6c4442b28d2f8c9f10bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458e816dad49140fc3b6c4442b28d2f8c9f10bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458e816dad49140fc3b6c4442b28d2f8c9f10bcf"}], "stats": {"total": 102, "additions": 58, "deletions": 44}, "files": [{"sha": "246f6fcc6ddbe7f754ea055f5c979e8cbe15d7b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -1,3 +1,17 @@\n+2008-06-03  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* Makefile.in (common_tools): Fix typos in $(exeext) extension.\n+\t* gnat_ugn.texi (Style Checking)\n+\t(Adding the Results of Compiler Checks to gnatcheck Output)\n+\t(Example of Binder Output File): Fix typos.\n+\t* ali.ads, einfo.ads, exp_ch4.adb, exp_ch6.adb,\n+\texp_dbug.ads, exp_dist.adb, exp_smem.adb, g-socket.ads,\n+\ts-osinte-rtems.ads, s-shasto.ads, s-stausa.adb,\n+\ts-stausa.ads, sem_cat.adb, sem_ch12.adb, sem_ch3.adb,\n+\tsem_ch4.adb, sem_ch6.adb, sem_ch8.adb, sem_util.ads,\n+\tsinfo.ads, utils.c: Fix typos in comments.\n+\t* sem_ch6.adb, vms_data.ads: Fix typos in strings.\n+\n 2008-05-29  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_eval.adb: Minor reformatting"}, {"sha": "9ffc02e21103ff04ef1c926dbfb16b79498a9989", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -1781,23 +1781,23 @@ common-tools:\n \t  --GNATBIND=\"$(GNATBIND)\" --GCC=\"$(CC) $(ALL_ADAFLAGS)\" \\\n \t  gnatchop gnatcmd gnatkr gnatls gnatprep gnatxref gnatfind gnatname \\\n \t  gnatclean -bargs $(ADA_INCLUDES) $(GNATBIND_FLAGS)\n-\t$(GNATLINK) -v gnatcmd -o ../../gnat$(exext) \\\n+\t$(GNATLINK) -v gnatcmd -o ../../gnat$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n-\t$(GNATLINK) -v gnatchop -o ../../gnatchop$(exext) \\\n+\t$(GNATLINK) -v gnatchop -o ../../gnatchop$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n-\t$(GNATLINK) -v gnatkr -o ../../gnatkr$(exext) \\\n+\t$(GNATLINK) -v gnatkr -o ../../gnatkr$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n-\t$(GNATLINK) -v gnatls -o ../../gnatls$(exext) \\\n+\t$(GNATLINK) -v gnatls -o ../../gnatls$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n-\t$(GNATLINK) -v gnatprep -o ../../gnatprep$(exext) \\\n+\t$(GNATLINK) -v gnatprep -o ../../gnatprep$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n-\t$(GNATLINK) -v gnatxref -o ../../gnatxref$(exext) \\\n+\t$(GNATLINK) -v gnatxref -o ../../gnatxref$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n-\t$(GNATLINK) -v gnatfind -o ../../gnatfind$(exext) \\\n+\t$(GNATLINK) -v gnatfind -o ../../gnatfind$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n-\t$(GNATLINK) -v gnatname -o ../../gnatname$(exext) \\\n+\t$(GNATLINK) -v gnatname -o ../../gnatname$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n-\t$(GNATLINK) -v gnatclean -o ../../gnatclean$(exext) \\\n+\t$(GNATLINK) -v gnatclean -o ../../gnatclean$(exeext) \\\n \t\t--GCC=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n \n ../../gnatsym$(exeext): "}, {"sha": "3e95595edcaad82dc86bd9304637437ce0ad04a2", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -444,7 +444,7 @@ package ALI is\n \n    Float_Format_Specified : Character := ' ';\n    --  Set to blank by Initialize_ALI. Set to appropriate float format\n-   --  character (V or I, see Opt.Float_Format) if an an ali file that\n+   --  character (V or I, see Opt.Float_Format) if an ali file that\n    --  is read contains an F line setting the floating point format.\n \n    Initialize_Scalars_Used : Boolean := False;"}, {"sha": "41d53c0f05253117ce87b7ba015111746e3ca983", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -2602,7 +2602,7 @@ package Einfo is\n \n --    Is_Remote_Call_Interface (Flag62)\n --       Present in all entities. Set in E_Package and E_Generic_Package\n---       entities to which a pragma Remote_Call_Interace is applied, and\n+--       entities to which a pragma Remote_Call_Interface is applied, and\n --       also on entities declared in the visible part of such a package.\n \n --    Is_Remote_Types (Flag61)"}, {"sha": "798da67036ee1f53bcf6f3fb6e65b1dd61148ec0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -2422,7 +2422,7 @@ package body Exp_Ch4 is\n       begin\n          --  If the index type is an enumeration type, the computation can be\n          --  done in standard integer. Otherwise, choose a large enough integer\n-         --  type to accomodate the index type computation.\n+         --  type to accommodate the index type computation.\n \n          if Is_Enumeration_Type (Ind_Typ)\n            or else Root_Type (Ind_Typ) = Standard_Integer\n@@ -5947,7 +5947,7 @@ package body Exp_Ch4 is\n          --  the mod value is always 0, and we can just ignore the left operand\n          --  completely in this case.\n \n-         --  The operand type may be private (e.g. in the expansion of an an\n+         --  The operand type may be private (e.g. in the expansion of an\n          --  intrinsic operation) so we must use the underlying type to get the\n          --  bounds, and convert the literals explicitly.\n "}, {"sha": "cddc021024132ffa37b5f818aca6f66101cbe172", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -3839,7 +3839,7 @@ package body Exp_Ch6 is\n               Make_Defining_Identifier (Loc, New_Internal_Name ('C'));\n             Set_Is_Internal (Temp);\n \n-            --  For the unconstrained case. the generated temporary has the\n+            --  For the unconstrained case, the generated temporary has the\n             --  same constrained declaration as the result variable.\n             --  It may eventually be possible to remove that temporary and\n             --  use the result variable directly.\n@@ -3967,7 +3967,7 @@ package body Exp_Ch6 is\n \n       --  If the return value of a foreign compiled function is\n       --  VAX Float then expand the return (adjusts the location\n-      --  of the return value on Alpha/VMS, noop everywere else).\n+      --  of the return value on Alpha/VMS, noop everywhere else).\n       --  Comes_From_Source intercepts recursive expansion.\n \n       if Vax_Float (Etype (N))"}, {"sha": "2f8b322336804d8b9cc91a7ac740522c6d51e054", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -358,7 +358,7 @@ package Exp_Dbug is\n       --  the protected/non-locking version of the operation.\n \n       --  Operations generated for protected entries follow the same encoding.\n-      --  Each entry results in two suprograms: a procedure that holds the\n+      --  Each entry results in two subprograms: a procedure that holds the\n       --  entry body, and a function that holds the evaluation of the barrier.\n       --  The names of these subprograms include the prefix '_E' or '_B' res-\n       --  pectively. The names also include a numeric suffix to render them"}, {"sha": "c22239277bf62ab818c46fe178ffc1fc82c1b9bb", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -3087,7 +3087,7 @@ package body Exp_Dist is\n          Set_Etype (Stubbed_Result, Stub_Type_Access);\n \n          --  If the Address is Null_Address, then return a null object, unless\n-         --  RACW_Type is null-excluding, in which case inconditionally raise\n+         --  RACW_Type is null-excluding, in which case unconditionally raise\n          --  CONSTRAINT_ERROR instead.\n \n          declare"}, {"sha": "60d1385f15a798b6c97a48e3f97abd429f5030c1", "filename": "gcc/ada/exp_smem.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_smem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fexp_smem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_smem.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -300,15 +300,15 @@ package body Exp_Smem is\n       --  with Ent.\n \n       Instantiation : Node_Id;\n-      --  Package instanciation node for SVP_Instance\n+      --  Package instantiation node for SVP_Instance\n \n    --  Start of processing for Make_Shared_Var_Procs\n \n    begin\n       Build_Full_Name (Ent, Vnm);\n \n       --  We turn off Shared_Passive during construction and analysis of\n-      --  the generic package instantition, to avoid improper attempts to\n+      --  the generic package instantiation, to avoid improper attempts to\n       --  process the variable references within these instantiation.\n \n       Set_Is_Shared_Passive (Ent, False);"}, {"sha": "58255f0880e8664a61a69e6caffeab65eea4e0fe", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -788,7 +788,7 @@ package GNAT.Sockets is\n       Status   : out Selector_Status);\n    --  Accept a new connection on Server using Accept_Socket, waiting no longer\n    --  than the given timeout duration. Status is set to indicate whether the\n-   --  operation completed successully, timed out, or was aborted. If Selector\n+   --  operation completed successfully, timed out, or was aborted. If Selector\n    --  is not null, the designated selector is used to wait for the socket to\n    --  become available, else a private selector object is created by this\n    --  procedure and destroyed before it returns.\n@@ -816,7 +816,7 @@ package GNAT.Sockets is\n       Status   : out Selector_Status);\n    --  Connect Socket to the given Server address using Connect_Socket, waiting\n    --  no longer than the given timeout duration. Status is set to indicate\n-   --  whether the operation completed successully, timed out, or was aborted.\n+   --  whether the operation completed successfully, timed out, or was aborted.\n    --  If Selector is not null, the designated selector is used to wait for the\n    --  socket to become available, else a private selector object is created\n    --  by this procedure and destroyed before it returns.\n@@ -1049,7 +1049,7 @@ package GNAT.Sockets is\n    --  it is used in the visible part of GNAT.Sockets.Thin_Common. This is\n    --  really an inversion of abstraction. The private part of GNAT.Sockets\n    --  needs to have visibility on this type, but since Thin_Common is a child\n-   --  of Sokcets, the type can't be declared there. The correct fix would\n+   --  of Sockets, the type can't be declared there. The correct fix would\n    --  be to move the thin sockets binding outside of GNAT.Sockets altogether,\n    --  e.g. by renaming it to GNAT.Sockets_Thin.\n "}, {"sha": "2aac8e8297bec36111841407d836fff7626441dd", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -6134,7 +6134,7 @@ use @option{L} parameter witout any integer value after that, because any\n digit following @option{-} in the parameter string of the @option{-gnaty}\n option will be threated as canceling indentation check. The same is true\n for @option{M} parameter. @option{y} and @option{N} parameters are not\n-alloved after @option{-}.\n+allowed after @option{-}.\n \n @item +\n This causes any subsequent options in the string to enable the corresponding\n@@ -20401,7 +20401,7 @@ gnat_rm, GNAT Reference Manual}). Note, that in case of gnatcheck\n 's' parameter, that corresponds to the GNAT @option{-gnatws} option, disables\n all the specific warnings, but not suppresses the warning mode,\n and 'e' parameter, corresponding to @option{-gnatwe} that means\n-\"therat warnings as errors\", does not have any effect.\n+\"treat warnings as errors\", does not have any effect.\n \n @end table\n \n@@ -26224,7 +26224,7 @@ package body ada_main is\n       --  a-except.ads/adb for full details of how zero cost\n       --  exception handling works. This procedure, the call to\n       --  it, and the two following tables are all omitted if the\n-      --  build is in longjmp/setjump exception mode.\n+      --  build is in longjmp/setjmp exception mode.\n \n @findex SDP_Table_Build\n @findex Zero Cost Exceptions\n@@ -26299,7 +26299,7 @@ package body ada_main is\n \n       --  Call SDP_Table_Build to build the top level procedure\n       --  table for zero cost exception handling (omitted in\n-      --  longjmp/setjump mode).\n+      --  longjmp/setjmp mode).\n \n       SDP_Table_Build (ST'Address, 23, EA'Address, 23);\n "}, {"sha": "6d28ec5ef30407ad23229cc00232257439cf1507", "filename": "gcc/ada/s-osinte-rtems.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fs-osinte-rtems.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fs-osinte-rtems.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-rtems.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -146,7 +146,7 @@ package System.OS_Interface is\n    SA_SIGINFO  : constant := 16#02#;\n \n    SA_ONSTACK : constant := 16#00#;\n-   --  SA_ONSTACK is not defined on RTEMS, but it is refered to in the POSIX\n+   --  SA_ONSTACK is not defined on RTEMS, but it is referred to in the POSIX\n    --  implementation of System.Interrupt_Management. Therefore we define a\n    --  dummy value of zero here so that setting this flag is a nop.\n "}, {"sha": "2fd0341b7b6d1c175c06a6a31bc5e13c40118aea", "filename": "gcc/ada/s-shasto.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fs-shasto.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fs-shasto.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -79,7 +79,7 @@\n \n --  The approach is as follows:\n \n---    For each shared variable, var, an instanciation of the below generic\n+--    For each shared variable, var, an instantiation of the below generic\n --    package is created which provides Read and Write supporting procedures.\n \n --    The routine Shared_Var_ROpen in package System.Shared_Storage\n@@ -214,7 +214,7 @@ package System.Shared_Storage is\n       --  the shared storage.\n \n       procedure Write;\n-      --  Shared passive variable assignement routine. Each assignment to\n+      --  Shared passive variable assignment routine. Each assignment to\n       --  the shared variable, V, is followed by a call to the corresponding\n       --  Write procedure, which writes the new value to the shared storage.\n "}, {"sha": "700c685ea272fed70c70d3d4f04306180b7f23ad", "filename": "gcc/ada/s-stausa.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fs-stausa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fs-stausa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stausa.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -261,7 +261,7 @@ package body System.Stack_Usage is\n       Current_Stack_Level : aliased Integer;\n \n    begin\n-      --  Reajust the pattern size. When we arrive in this function, there is\n+      --  Readjust the pattern size. When we arrive in this function, there is\n       --  already a given amount of stack used, that we won't analyze.\n \n       Analyzer.Stack_Used_When_Filling :="}, {"sha": "8a6e2b67cb51789b40a131aef38e7f5d099ba75b", "filename": "gcc/ada/s-stausa.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fs-stausa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fs-stausa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stausa.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -216,7 +216,7 @@ package System.Stack_Usage is\n    --  Max_Pattern_Size is the size of the pattern zone, might be smaller than\n    --  the full stack size in order to take into account e.g. the secondary\n    --  stack and a guard against overflow. The actual size taken will be\n-   --  reajusted with data already used at the time the stack is actually\n+   --  readjusted with data already used at the time the stack is actually\n    --  filled.\n \n    Is_Enabled : Boolean := False;"}, {"sha": "367f25555c15588d60f295fe6fbdc71615656867", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -1394,7 +1394,7 @@ package body Sem_Cat is\n             elsif Ekind (Param_Type) = E_Anonymous_Access_Type\n               or else Ekind (Param_Type) = E_Anonymous_Access_Subprogram_Type\n             then\n-               --  From RM E.2.2(14), no anonumous access parameter other than\n+               --  From RM E.2.2(14), no anonymous access parameter other than\n                --  controlling ones may be used (because an anonymous access\n                --  type never supports external streaming).\n "}, {"sha": "cae84097d1a1454a561a68302d27277988073092", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -454,7 +454,7 @@ package body Sem_Ch12 is\n       Inst   : Node_Id) return Boolean;\n    --  True if the instantiation Inst and the given freeze_node F_Node appear\n    --  within the same declarative part, ignoring subunits, but with no inter-\n-   --  vening suprograms or concurrent units. If true, the freeze node\n+   --  vening subprograms or concurrent units. If true, the freeze node\n    --  of the instance can be placed after the freeze node of the parent,\n    --  which it itself an instance.\n "}, {"sha": "b6ccb6028fc702db77ea3cdeb041335961abf456", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -11339,7 +11339,7 @@ package body Sem_Ch3 is\n         and then Is_Tagged_Type (Tagged_Type)\n         and then Has_Interfaces (Tagged_Type));\n \n-      --  Step 1: Transfer to the full-view primitives asociated with the\n+      --  Step 1: Transfer to the full-view primitives associated with the\n       --  partial-view that cover interface primitives. Conceptually this\n       --  work should be done later by Process_Full_View; done here to\n       --  simplify its implementation at later stages. It can be safely"}, {"sha": "e14fb436d6beda20a5024de9bc3bd9a7007c9ce2", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -2246,7 +2246,7 @@ package body Sem_Ch4 is\n       end if;\n \n       --  If the call has been transformed into a slice, it is of the form\n-      --  F (Subtype) where F is paramterless. The node has ben rewritten in\n+      --  F (Subtype) where F is parameterless. The node has been rewritten in\n       --  Try_Indexed_Call and there is nothing else to do.\n \n       if Is_Indexed"}, {"sha": "0116a83517c9f176968bc25c911b2b8162c10248", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -1370,7 +1370,7 @@ package body Sem_Ch6 is\n          Plist : List_Id;\n \n          function Is_Inline_Pragma (N : Node_Id) return Boolean;\n-         --  True when N is a pragma Inline or Inline_Awlays that applies\n+         --  True when N is a pragma Inline or Inline_Always that applies\n          --  to this subprogram.\n \n          -----------------------\n@@ -3555,7 +3555,7 @@ package body Sem_Ch6 is\n                      if not Is_Overriding_Operation (Op) then\n                         Error_Msg_N (\"\\\\primitive % defined #\", Typ);\n                      else\n-                        Error_Msg_N (\"\\\\overridding operation % with \" &\n+                        Error_Msg_N (\"\\\\overriding operation % with \" &\n                                      \"convention % defined #\", Typ);\n                      end if;\n "}, {"sha": "c5edce6d0856e3627ceec74fca81df135fce4a08", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -1729,7 +1729,7 @@ package body Sem_Ch8 is\n          then\n             --  Input stream functions are abstract if the object type is\n             --  abstract. Similarly, all default stream functions for an\n-            --  interface type are abstract. However, these suprograms may\n+            --  interface type are abstract. However, these subprograms may\n             --  receive explicit declarations in representation clauses, making\n             --  the attribute subprograms usable as defaults in subsequent\n             --  type extensions.\n@@ -3851,7 +3851,7 @@ package body Sem_Ch8 is\n                Only_One_Visible := False;\n                All_Overloadable := All_Overloadable and Is_Overloadable (E2);\n \n-            --  Ada 2005 (AI-262): Protect against a form of Beujolais effect\n+            --  Ada 2005 (AI-262): Protect against a form of Beaujolais effect\n             --  that can occur in private_with clauses. Example:\n \n             --    with A;"}, {"sha": "64d5cfb674b8485b3eae73e07bc915bea12bfdd3", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -942,8 +942,8 @@ package Sem_Util is\n    --  Returns True if the names of both entities correspond with matching\n    --  primitives. This routine includes support for the case in which one\n    --  or both entities correspond with entities built by Derive_Subprogram\n-   --  with a special name to avoid being overriden (ie. return true in case\n-   --  of entities with names \"nameP\" and \"name\" or viceversa).\n+   --  with a special name to avoid being overridden (i.e. return true in case\n+   --  of entities with names \"nameP\" and \"name\" or vice versa).\n \n    function Private_Component (Type_Id : Entity_Id) return Entity_Id;\n    --  Returns some private component (if any) of the given Type_Id."}, {"sha": "29404b2332ba3a73cce098fb17dd8d43d48a3490", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -3266,7 +3266,7 @@ package Sinfo is\n       --  to Ada 2005 (AI-287).\n \n       ----------------------------------\n-      -- 4.3.1  Cmmponent Choice List --\n+      -- 4.3.1  Component Choice List --\n       ----------------------------------\n \n       --  COMPONENT_CHOICE_LIST ::="}, {"sha": "4d10940370e2d87b0ff4ceea83c2a39e54cd3409", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -95,7 +95,7 @@ static tree handle_type_generic_attribute (tree *, tree, tree, int, bool *);\n static tree fake_attribute_handler      (tree *, tree, tree, int, bool *);\n \n /* Table of machine-independent internal attributes for Ada.  We support\n-   this minimal set ot attributes to accomodate the needs of builtins.  */\n+   this minimal set of attributes to accommodate the needs of builtins.  */\n const struct attribute_spec gnat_internal_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */"}, {"sha": "3270e8f55b565b6f045566175be3a49f591df71d", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30783513f05cc8e41828a98d64aefd1e7adc9716/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=30783513f05cc8e41828a98d64aefd1e7adc9716", "patch": "@@ -6601,7 +6601,7 @@ package VMS_Data is\n    --\n    --   Output the execution time\n \n-   S_Sync_Details : aliased constant S := \"/DETAILs=\"                      &\n+   S_Sync_Details : aliased constant S := \"/DETAILS=\"                      &\n                                              \"MEDIUM \"                     &\n                                                \"-om \"                      &\n                                              \"SHORT \"                      &"}]}