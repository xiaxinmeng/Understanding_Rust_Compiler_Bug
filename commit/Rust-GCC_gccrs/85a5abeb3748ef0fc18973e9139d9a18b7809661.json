{"sha": "85a5abeb3748ef0fc18973e9139d9a18b7809661", "node_id": "C_kwDOANBUbNoAKDg1YTVhYmViMzc0OGVmMGZjMTg5NzNlOTEzOWQ5YTE4Yjc4MDk2NjE", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-13T14:08:07Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: get rid of can_eq in CoerceionRules selection\n\nThe can_eq interface is very inconsistent so this begins the journey to\nremove this and also address part of #1981\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-coercion.cc (TypeCoercionRules::select): use new unify_and interface\n\t* typecheck/rust-hir-dot-operator.cc (MethodResolver::try_hook): grab bounds behind refs\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "c370bba5a875d691fd70821969c7d3627db12fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c370bba5a875d691fd70821969c7d3627db12fd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a5abeb3748ef0fc18973e9139d9a18b7809661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a5abeb3748ef0fc18973e9139d9a18b7809661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a5abeb3748ef0fc18973e9139d9a18b7809661", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a5abeb3748ef0fc18973e9139d9a18b7809661/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bbf7202c6d4ab6a6b8c03e1871099af3f8e0ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbf7202c6d4ab6a6b8c03e1871099af3f8e0ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbf7202c6d4ab6a6b8c03e1871099af3f8e0ea5"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "7b91edfc73baeb80a782b235ce4c1b37758971de", "filename": "gcc/rust/typecheck/rust-coercion.cc", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a5abeb3748ef0fc18973e9139d9a18b7809661/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a5abeb3748ef0fc18973e9139d9a18b7809661/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc?ref=85a5abeb3748ef0fc18973e9139d9a18b7809661", "patch": "@@ -16,7 +16,6 @@\n // along with GCC; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include \"rust-hir-type-check-base.h\"\n #include \"rust-coercion.h\"\n #include \"rust-type-util.h\"\n \n@@ -417,12 +416,18 @@ TypeCoercionRules::select (TyTy::BaseType &autoderefed)\n   rust_debug (\n     \"autoderef type-coercion select autoderefed={%s} can_eq expected={%s}\",\n     autoderefed.debug_str ().c_str (), expected->debug_str ().c_str ());\n-  if (expected->can_eq (&autoderefed, false))\n-    {\n-      try_result = CoercionResult{adjustments, autoderefed.clone ()};\n-      return true;\n-    }\n-  return false;\n+\n+  TyTy::BaseType *result\n+    = unify_site_and (autoderefed.get_ref (), TyTy::TyWithLocation (expected),\n+\t\t      TyTy::TyWithLocation (&autoderefed),\n+\t\t      Location () /* locus */, false /*emit_errors*/,\n+\t\t      false /*commit_if_ok*/, true /*infer*/, true /*cleanup*/);\n+  bool ok = result->get_kind () != TyTy::TypeKind::ERROR;\n+  if (!ok)\n+    return false;\n+\n+  try_result = CoercionResult{adjustments, autoderefed.clone ()};\n+  return true;\n }\n \n /// Coercing a mutable reference to an immutable works, while"}, {"sha": "bfba0c35520a523eefb7632f7adfdfe4f1832030", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a5abeb3748ef0fc18973e9139d9a18b7809661/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a5abeb3748ef0fc18973e9139d9a18b7809661/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc?ref=85a5abeb3748ef0fc18973e9139d9a18b7809661", "patch": "@@ -44,8 +44,23 @@ MethodResolver::Probe (TyTy::BaseType *receiver,\n void\n MethodResolver::try_hook (const TyTy::BaseType &r)\n {\n+  rust_debug (\"MethodResolver::try_hook get_predicate_items: [%s]\",\n+\t      r.debug_str ().c_str ());\n   const auto &specified_bounds = r.get_specified_bounds ();\n   predicate_items = get_predicate_items (segment_name, r, specified_bounds);\n+\n+  if (predicate_items.size () > 0)\n+    return;\n+\n+  if (r.get_kind () == TyTy::TypeKind::REF)\n+    {\n+      const auto &ref = static_cast<const TyTy::ReferenceType &> (r);\n+      const auto &element = ref.get_var_element_type ();\n+      const auto &element_ty = *element.get_tyty ();\n+      const auto &specified_bounds = element_ty.get_specified_bounds ();\n+      predicate_items\n+\t= get_predicate_items (segment_name, element_ty, specified_bounds);\n+    }\n }\n \n bool"}]}