{"sha": "967b46530234b4e6ad3983057705aea6c20a03c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3YjQ2NTMwMjM0YjRlNmFkMzk4MzA1NzcwNWFlYTZjMjBhMDNjNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-05-21T18:56:55Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-06-17T13:33:14Z"}, "message": "Add a target calls hook: TARGET_PUSH_ARGUMENT\n\n1. Replace PUSH_ARGS with a target calls hook, TARGET_PUSH_ARGUMENT, which\ntakes an integer argument.  When it returns true, push instructions will\nbe used to pass outgoing arguments.  If the argument is nonzero, it is\nthe number of bytes to push and indicates the PUSH instruction usage is\noptional so that the backend can decide if PUSH instructions should be\ngenerated.  Otherwise, the argument is zero.\n2. Implement x86 target hook which returns false when the number of bytes\nto push is no less than 16 (8 for 32-bit targets) if vector load and store\ncan be used.\n3. Remove target PUSH_ARGS definitions which return 0 as it is the same\nas the default.\n4. Define TARGET_PUSH_ARGUMENT of cr16 and m32c to always return true.\n\ngcc/\n\n\tPR target/100704\n\t* calls.c (expand_call): Replace PUSH_ARGS with\n\ttargetm.calls.push_argument (0).\n\t(emit_library_call_value_1): Likewise.\n\t* defaults.h (PUSH_ARGS): Removed.\n\t(PUSH_ARGS_REVERSED): Replace PUSH_ARGS with\n\ttargetm.calls.push_argument (0).\n\t* expr.c (block_move_libcall_safe_for_call_parm): Likewise.\n\t(emit_push_insn): Pass the number bytes to push to\n\ttargetm.calls.push_argument and pass 0 if ARGS_ADDR is 0.\n\t* hooks.c (hook_bool_uint_true): New.\n\t* hooks.h (hook_bool_uint_true): Likewise.\n\t* rtlanal.c (nonzero_bits1): Replace PUSH_ARGS with\n\ttargetm.calls.push_argument (0).\n\t* target.def (push_argument): Add a targetm.calls hook.\n\t* targhooks.c (default_push_argument): New.\n\t* targhooks.h (default_push_argument): Likewise.\n\t* config/bpf/bpf.h (PUSH_ARGS): Removed.\n\t* config/cr16/cr16.c (TARGET_PUSH_ARGUMENT): New.\n\t* config/cr16/cr16.h (PUSH_ARGS): Removed.\n\t* config/i386/i386.c (ix86_push_argument): New.\n\t(TARGET_PUSH_ARGUMENT): Likewise.\n\t* config/i386/i386.h (PUSH_ARGS): Removed.\n\t* config/m32c/m32c.c (TARGET_PUSH_ARGUMENT): New.\n\t* config/m32c/m32c.h (PUSH_ARGS): Removed.\n\t* config/nios2/nios2.h (PUSH_ARGS): Likewise.\n\t* config/pru/pru.h (PUSH_ARGS): Likewise.\n\t* doc/tm.texi.in: Remove PUSH_ARGS documentation.  Add\n\tTARGET_PUSH_ARGUMENT hook.\n\t* doc/tm.texi: Regenerated.\n\ngcc/testsuite/\n\n\tPR target/100704\n\t* gcc.target/i386/pr100704-1.c: New test.\n\t* gcc.target/i386/pr100704-2.c: Likewise.\n\t* gcc.target/i386/pr100704-3.c: Likewise.", "tree": {"sha": "87a0ce8f7eec0c4ae72c1ee49f30fe53aec84268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87a0ce8f7eec0c4ae72c1ee49f30fe53aec84268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967b46530234b4e6ad3983057705aea6c20a03c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967b46530234b4e6ad3983057705aea6c20a03c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967b46530234b4e6ad3983057705aea6c20a03c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967b46530234b4e6ad3983057705aea6c20a03c4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3"}], "stats": {"total": 198, "additions": 151, "deletions": 47}, "files": [{"sha": "4bf2b5dabe7b1975516293ec8b7e2173bd20dca6", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -3729,7 +3729,7 @@ expand_call (tree exp, rtx target, int ignore)\n      So the entire argument block must then be preallocated (i.e., we\n      ignore PUSH_ROUNDING in that case).  */\n \n-  int must_preallocate = !PUSH_ARGS;\n+  int must_preallocate = !targetm.calls.push_argument (0);\n \n   /* Size of the stack reserved for parameter registers.  */\n   int reg_parm_stack_space = 0;\n@@ -3838,7 +3838,7 @@ expand_call (tree exp, rtx target, int ignore)\n #endif\n \n   if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? fntype : TREE_TYPE (fndecl)))\n-      && reg_parm_stack_space > 0 && PUSH_ARGS)\n+      && reg_parm_stack_space > 0 && targetm.calls.push_argument (0))\n     must_preallocate = 1;\n \n   /* Set up a place to return a structure.  */\n@@ -5479,7 +5479,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n     }\n   else\n     {\n-      if (!PUSH_ARGS)\n+      if (!targetm.calls.push_argument (0))\n \targblock = push_block (gen_int_mode (args_size.constant, Pmode), 0, 0);\n     }\n "}, {"sha": "80195cea5b294e69430916b6b0f7d30debc1268d", "filename": "gcc/config/bpf/bpf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fbpf%2Fbpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fbpf%2Fbpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -288,9 +288,6 @@ enum reg_class\n    never used when passing arguments.  However, we still have to\n    define the constants below.  */\n \n-/* If nonzero, push insns will be used to pass outgoing arguments.  */\n-#define PUSH_ARGS 0\n-\n /* If nonzero, function arguments will be evaluated from last to\n    first, rather than from first to last.  */\n #define PUSH_ARGS_REVERSED 1"}, {"sha": "aaa2260fc85e1f3a051206085cc6e99fd4e93e1b", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -158,6 +158,8 @@ static void cr16_print_operand_address (FILE *, machine_mode, rtx);\n #define TARGET_CLASS_LIKELY_SPILLED_P\tcr16_class_likely_spilled_p\n \n /* Passing function arguments.  */\n+#undef TARGET_PUSH_ARGUMENT\n+#define TARGET_PUSH_ARGUMENT\t\thook_bool_uint_true\n #undef TARGET_FUNCTION_ARG\n #define TARGET_FUNCTION_ARG \t\tcr16_function_arg\n #undef TARGET_FUNCTION_ARG_ADVANCE"}, {"sha": "a3ad0359f7d75e9854659c69f947b2bb9a5220db", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -376,8 +376,6 @@ enum reg_class\n \n #define ACCUMULATE_OUTGOING_ARGS 0\n \n-#define PUSH_ARGS 1\n-\n #define PUSH_ROUNDING(BYTES) cr16_push_rounding (BYTES)\n \n #ifndef CUMULATIVE_ARGS"}, {"sha": "7d0d4143bcacacbfe6937b466e9fba9e3b01a9ca", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -4191,6 +4191,18 @@ ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n     }\n }\n \n+/* Implement TARGET_PUSH_ARGUMENT.  */\n+\n+static bool\n+ix86_push_argument (unsigned int npush)\n+{\n+  /* If SSE2 is available, use vector move to put large argument onto\n+     stack.  NB:  In 32-bit mode, use 8-byte vector move.  */\n+  return ((!TARGET_SSE2 || npush < (TARGET_64BIT ? 16 : 8))\n+\t  && TARGET_PUSH_ARGS\n+\t  && !ACCUMULATE_OUTGOING_ARGS);\n+}\n+\n \f\n /* Create the va_list data type.  */\n \n@@ -23695,6 +23707,8 @@ ix86_run_selftests (void)\n #define TARGET_C_EXCESS_PRECISION ix86_get_excess_precision\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n+#undef TARGET_PUSH_ARGUMENT\n+#define TARGET_PUSH_ARGUMENT ix86_push_argument\n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS ix86_setup_incoming_varargs\n #undef TARGET_MUST_PASS_IN_STACK"}, {"sha": "6e0340a4b60f09b168d20a327b76549a38cacb20", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -1462,13 +1462,8 @@ enum reg_class\n    || TARGET_64BIT_MS_ABI \\\n    || (TARGET_MACHO && crtl->profile))\n \n-/* If defined, a C expression whose value is nonzero when we want to use PUSH\n-   instructions to pass outgoing arguments.  */\n-\n-#define PUSH_ARGS (TARGET_PUSH_ARGS && !ACCUMULATE_OUTGOING_ARGS)\n-\n /* We want the stack and args grow in opposite directions, even if\n-   PUSH_ARGS is 0.  */\n+   targetm.calls.push_argument returns false.  */\n #define PUSH_ARGS_REVERSED 1\n \n /* Offset of first parameter from the argument pointer register value.  */"}, {"sha": "d22bdd79c71d44fc6ec9cedb703eeafa6f029813", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -1296,6 +1296,9 @@ m32c_push_rounding (poly_int64 n)\n   return (n + 1) & ~1;\n }\n \n+#undef TARGET_PUSH_ARGUMENT\n+#define TARGET_PUSH_ARGUMENT hook_bool_uint_true\n+\n /* Passing Arguments in Registers */\n \n /* Implements TARGET_FUNCTION_ARG.  Arguments are passed partly in"}, {"sha": "228a73d1c42a19f2df0ecfbf97a2fec601f992b1", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -472,7 +472,6 @@ enum reg_class\n \n /* Passing Function Arguments on the Stack */\n \n-#define PUSH_ARGS 1\n #define PUSH_ROUNDING(N) m32c_push_rounding (N)\n #define CALL_POPS_ARGS(C) 0\n "}, {"sha": "dfca12cc525604e6d887488a98dc8924611ebe4e", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -297,7 +297,6 @@ typedef struct nios2_args\n   ((REGNO) >= FIRST_ARG_REGNO && (REGNO) <= LAST_ARG_REGNO)\n \n /* Passing function arguments on stack.  */\n-#define PUSH_ARGS 0\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n /* We define TARGET_RETURN_IN_MEMORY, so set to zero.  */"}, {"sha": "9b6be323e6d35563733ce7c6bcc263a77d5e9337", "filename": "gcc/config/pru/pru.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fpru%2Fpru.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fconfig%2Fpru%2Fpru.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -339,7 +339,6 @@ typedef struct pru_args\n   ((REGNO) >= FIRST_ARG_REGNUM && (REGNO) <= LAST_ARG_REGNUM)\n \n /* Passing function arguments on stack.  */\n-#define PUSH_ARGS 0\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n /* We define TARGET_RETURN_IN_MEMORY, so set to zero.  */"}, {"sha": "ba79a8e48edd4c77e538e0ea7b08f8e4f3b91ccd", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -801,15 +801,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define NEXT_OBJC_RUNTIME 0\n #endif\n \n-/* Supply a default definition for PUSH_ARGS.  */\n-#ifndef PUSH_ARGS\n-#ifdef PUSH_ROUNDING\n-#define PUSH_ARGS\t!ACCUMULATE_OUTGOING_ARGS\n-#else\n-#define PUSH_ARGS\t0\n-#endif\n-#endif\n-\n /* Decide whether a function's arguments should be processed\n    from first to last or from last to first.\n \n@@ -820,7 +811,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #ifndef PUSH_ARGS_REVERSED\n #if defined (STACK_GROWS_DOWNWARD) != defined (ARGS_GROW_DOWNWARD)\n-#define PUSH_ARGS_REVERSED  PUSH_ARGS\n+#define PUSH_ARGS_REVERSED targetm.calls.push_argument (0)\n #endif\n #endif\n "}, {"sha": "2a41ae5fba16f495f9905648287e192cb77685c3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -3900,14 +3900,17 @@ cases of mismatch, it also makes for better code on certain machines.\n The default is to not promote prototypes.\n @end deftypefn\n \n-@defmac PUSH_ARGS\n-A C expression.  If nonzero, push insns will be used to pass\n-outgoing arguments.\n-If the target machine does not have a push instruction, set it to zero.\n-That directs GCC to use an alternate strategy: to\n-allocate the entire argument block and then store the arguments into\n-it.  When @code{PUSH_ARGS} is nonzero, @code{PUSH_ROUNDING} must be defined too.\n-@end defmac\n+@deftypefn {Target Hook} bool TARGET_PUSH_ARGUMENT (unsigned int @var{npush})\n+This target hook returns @code{true} if push instructions will be\n+used to pass outgoing arguments.  When the push instruction usage is\n+optional, @var{npush} is nonzero to indicate the number of bytes to\n+push.  Otherwise, @var{npush} is zero.  If the target machine does not\n+have a push instruction or push instruction should be avoided,\n+@code{false} should be returned.  That directs GCC to use an alternate\n+strategy: to allocate the entire argument block and then store the\n+arguments into it.  If this target hook may return @code{true},\n+@code{PUSH_ROUNDING} must be defined.\n+@end deftypefn\n \n @defmac PUSH_ARGS_REVERSED\n A C expression.  If nonzero, function arguments will be evaluated from"}, {"sha": "f881cdabe9e377254cf4adcaa7c82cadbe17c335", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -3100,14 +3100,7 @@ control passing certain arguments in registers.\n \n @hook TARGET_PROMOTE_PROTOTYPES\n \n-@defmac PUSH_ARGS\n-A C expression.  If nonzero, push insns will be used to pass\n-outgoing arguments.\n-If the target machine does not have a push instruction, set it to zero.\n-That directs GCC to use an alternate strategy: to\n-allocate the entire argument block and then store the arguments into\n-it.  When @code{PUSH_ARGS} is nonzero, @code{PUSH_ROUNDING} must be defined too.\n-@end defmac\n+@hook TARGET_PUSH_ARGUMENT\n \n @defmac PUSH_ARGS_REVERSED\n A C expression.  If nonzero, function arguments will be evaluated from"}, {"sha": "025033c9ecf82b165f2f8b66ec209b5a58a2c3b6", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -1823,7 +1823,7 @@ block_move_libcall_safe_for_call_parm (void)\n   tree fn;\n \n   /* If arguments are pushed on the stack, then they're safe.  */\n-  if (PUSH_ARGS)\n+  if (targetm.calls.push_argument (0))\n     return true;\n \n   /* If registers go on the stack anyway, any argument is sure to clobber\n@@ -4639,11 +4639,19 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n       skip = (reg_parm_stack_space == 0) ? 0 : used;\n \n #ifdef PUSH_ROUNDING\n+      /* NB: Let the backend known the number of bytes to push and\n+\t decide if push insns should be generated.  */\n+      unsigned int push_size;\n+      if (CONST_INT_P (size))\n+\tpush_size = INTVAL (size);\n+      else\n+\tpush_size = 0;\n+\n       /* Do it with several push insns if that doesn't take lots of insns\n \t and if there is no difficulty with push insns that skip bytes\n \t on the stack for alignment purposes.  */\n       if (args_addr == 0\n-\t  && PUSH_ARGS\n+\t  && targetm.calls.push_argument (push_size)\n \t  && CONST_INT_P (size)\n \t  && skip == 0\n \t  && MEM_ALIGN (xinner) >= align\n@@ -4848,7 +4856,7 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n \tanti_adjust_stack (gen_int_mode (extra, Pmode));\n \n #ifdef PUSH_ROUNDING\n-      if (args_addr == 0 && PUSH_ARGS)\n+      if (args_addr == 0 && targetm.calls.push_argument (0))\n \temit_single_push_insn (mode, x, type);\n       else\n #endif"}, {"sha": "4f14abff2069085c28411547a44b371d51bd5be5", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -520,6 +520,14 @@ hook_void_gcc_optionsp (struct gcc_options *)\n {\n }\n \n+/* Generic hook that takes an unsigned int and returns true.  */\n+\n+bool\n+hook_bool_uint_true (unsigned int)\n+{\n+  return true;\n+}\n+\n /* Generic hook that takes an unsigned int, an unsigned int pointer and\n    returns false.  */\n "}, {"sha": "71781c790a12cb06b2b4802481468588a4176682", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -89,6 +89,7 @@ extern void hook_void_tree (tree);\n extern void hook_void_tree_treeptr (tree, tree *);\n extern void hook_void_int_int (int, int);\n extern void hook_void_gcc_optionsp (struct gcc_options *);\n+extern bool hook_bool_uint_true (unsigned int);\n extern bool hook_bool_uint_uintp_false (unsigned int, unsigned int *);\n \n extern int hook_int_uint_mode_1 (unsigned int, machine_mode);"}, {"sha": "55c338e7eac8a295ac25b66f0397b858dac799ef", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -4870,7 +4870,7 @@ nonzero_bits1 (const_rtx x, scalar_int_mode mode, const_rtx known_x,\n \t  /* If PUSH_ROUNDING is defined, it is possible for the\n \t     stack to be momentarily aligned only to that amount,\n \t     so we pick the least alignment.  */\n-\t  if (x == stack_pointer_rtx && PUSH_ARGS)\n+\t  if (x == stack_pointer_rtx && targetm.calls.push_argument (0))\n \t    {\n \t      poly_uint64 rounded_1 = PUSH_ROUNDING (poly_int64 (1));\n \t      alignment = MIN (known_alignment (rounded_1), alignment);"}, {"sha": "c009671c5837f63f1c5c1addef5bf5d0891cd1d3", "filename": "gcc/target.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -4752,6 +4752,20 @@ Most ports do not need to implement anything for this hook.\",\n  void, (void),\n  hook_void_void)\n \n+DEFHOOK\n+(push_argument,\n+ \"This target hook returns @code{true} if push instructions will be\\n\\\n+used to pass outgoing arguments.  When the push instruction usage is\\n\\\n+optional, @var{npush} is nonzero to indicate the number of bytes to\\n\\\n+push.  Otherwise, @var{npush} is zero.  If the target machine does not\\n\\\n+have a push instruction or push instruction should be avoided,\\n\\\n+@code{false} should be returned.  That directs GCC to use an alternate\\n\\\n+strategy: to allocate the entire argument block and then store the\\n\\\n+arguments into it.  If this target hook may return @code{true},\\n\\\n+@code{PUSH_ROUNDING} must be defined.\",\n+ bool, (unsigned int npush),\n+ default_push_argument)\n+\n DEFHOOK\n (strict_argument_naming,\n  \"Define this hook to return @code{true} if the location where a function\\n\\"}, {"sha": "44a1facedcf7dfa60ff9c85d030f274b1a55fdf8", "filename": "gcc/targhooks.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -770,6 +770,18 @@ hook_void_CUMULATIVE_ARGS_tree (cumulative_args_t ca ATTRIBUTE_UNUSED,\n {\n }\n \n+/* Default implementation of TARGET_PUSH_ARGUMENT.  */\n+\n+bool\n+default_push_argument (unsigned int)\n+{\n+#ifdef PUSH_ROUNDING\n+  return !ACCUMULATE_OUTGOING_ARGS;\n+#else\n+  return false;\n+#endif\n+}\n+\n void\n default_function_arg_advance (cumulative_args_t, const function_arg_info &)\n {"}, {"sha": "f70a307d26c9260a8f4508021f913805d7c8c341", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -149,6 +149,7 @@ extern const char *hook_invalid_arg_for_unprototyped_fn\n   (const_tree, const_tree, const_tree);\n extern void default_function_arg_advance\n   (cumulative_args_t, const function_arg_info &);\n+extern bool default_push_argument (unsigned int);\n extern HOST_WIDE_INT default_function_arg_offset (machine_mode, const_tree);\n extern pad_direction default_function_arg_padding (machine_mode, const_tree);\n extern rtx default_function_arg (cumulative_args_t, const function_arg_info &);"}, {"sha": "02461db9695928fe27f12bac0757123b30e54a77", "filename": "gcc/testsuite/gcc.target/i386/pr100704-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-1.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+struct S\n+{\n+  long long s1 __attribute__ ((aligned (8)));\n+  unsigned s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n+};\n+\n+extern struct S a[];\n+\n+void bar (struct S);\n+\n+void\n+foo (void)\n+{\n+  bar (a[0]);\n+}\n+\n+/* { dg-final { scan-assembler-not \"pushq\" } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 16\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 32\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 48\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "07b9bd18c7a50f5e6d8dff9c81afb2a8ad302e1f", "filename": "gcc/testsuite/gcc.target/i386/pr100704-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-2.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+struct S\n+{\n+  char array[64];\n+};\n+\n+extern struct S a[];\n+\n+void bar (struct S);\n+\n+void\n+foo (void)\n+{\n+  bar (a[0]);\n+}\n+\n+/* { dg-final { scan-assembler-not \"pushq\" } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 16\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 32\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 48\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "65f9745a197f440600764711af9e958a6fa98b5d", "filename": "gcc/testsuite/gcc.target/i386/pr100704-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967b46530234b4e6ad3983057705aea6c20a03c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100704-3.c?ref=967b46530234b4e6ad3983057705aea6c20a03c4", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-sse\" } */\n+\n+struct S\n+{\n+  long long s1 __attribute__ ((aligned (8)));\n+  unsigned s2, s3;\n+};\n+\n+extern struct S foooo[];\n+\n+void bar (int, int, int, int, int, int, struct S);\n+\n+void\n+foo (void)\n+{\n+  bar (1, 2, 3, 4, 5, 6, foooo[0]);\n+}\n+\n+/* { dg-final { scan-assembler \"push\\[lq\\]\\tfoooo\\+\" } } */"}]}