{"sha": "8d5d90878ea9731301d3a1af32a444e4772e65e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ1ZDkwODc4ZWE5NzMxMzAxZDNhMWFmMzJhNDQ0ZTQ3NzJlNjVlNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-11-19T20:22:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-11-19T20:22:12Z"}, "message": "Consider parm types equivalence for operator rewrite tiebreaker.\n\nThe C++ committee continues to discuss how best to avoid breaking existing\ncode with the new rules for reversed operators.  A recent suggestion was to\nbase the tie-breaker on the parameter types of the candidates, which made a\nlot of sense to me, so this patch implements that.\n\nThis patch also mentions that a candidate was reversed or rewritten when\nprinting the list of candidates, and warns about a comparison that becomes\nrecursive under the new rules.  There is no flag for this warning; people\ncan silence it by swapping the operands.\n\n\t* call.c (same_fn_or_template): Change to cand_parms_match.\n\t(joust): Adjust.\n\t(print_z_candidate): Mark rewritten/reversed candidates.\n\t(build_new_op_1): Warn about recursive call with reversed arguments.\n\nFrom-SVN: r278465", "tree": {"sha": "97700c240dbdfff23fb6a4a626ad00d32e60b04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97700c240dbdfff23fb6a4a626ad00d32e60b04a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d5d90878ea9731301d3a1af32a444e4772e65e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5d90878ea9731301d3a1af32a444e4772e65e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d5d90878ea9731301d3a1af32a444e4772e65e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5d90878ea9731301d3a1af32a444e4772e65e4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a8819b8828490a83eaf9d069a049e26211cc215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8819b8828490a83eaf9d069a049e26211cc215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8819b8828490a83eaf9d069a049e26211cc215"}], "stats": {"total": 104, "additions": 80, "deletions": 24}, "files": [{"sha": "2313a824b488e98d316f2cf7f7de823d7061c2c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d5d90878ea9731301d3a1af32a444e4772e65e4", "patch": "@@ -1,3 +1,10 @@\n+2019-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (same_fn_or_template): Change to cand_parms_match.\n+\t(joust): Adjust.\n+\t(print_z_candidate): Mark rewritten/reversed candidates.\n+\t(build_new_op_1): Warn about recursive call with reversed arguments.\n+\n 2019-11-15  Andrew Sutton  <asutton@lock3software.com>\n \n \tPR c++/89913"}, {"sha": "f4dfa7b3f56bcb2a62a76df28f1e30f0d5414ce2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8d5d90878ea9731301d3a1af32a444e4772e65e4", "patch": "@@ -3694,6 +3694,10 @@ print_z_candidate (location_t loc, const char *msgstr,\n     inform (cloc, \"%s%#qD (near match)\", msg, fn);\n   else if (DECL_DELETED_FN (fn))\n     inform (cloc, \"%s%#qD (deleted)\", msg, fn);\n+  else if (candidate->reversed ())\n+    inform (cloc, \"%s%#qD (reversed)\", msg, fn);\n+  else if (candidate->rewritten ())\n+    inform (cloc, \"%s%#qD (rewritten)\", msg, fn);\n   else\n     inform (cloc, \"%s%#qD\", msg, fn);\n   if (fn != candidate->fn)\n@@ -6219,8 +6223,14 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n \t  else\n \t    {\n \t      if (cand->reversed ())\n-\t\t/* We swapped these in add_candidate, swap them back now.  */\n-\t\tstd::swap (cand->convs[0], cand->convs[1]);\n+\t\t{\n+\t\t  /* We swapped these in add_candidate, swap them back now.  */\n+\t\t  std::swap (cand->convs[0], cand->convs[1]);\n+\t\t  if (cand->fn == current_function_decl)\n+\t\t    warning_at (loc, 0, \"in C++20 this comparison calls the \"\n+\t\t\t\t\"current function recursively with reversed \"\n+\t\t\t\t\"arguments\");\n+\t\t}\n \t      result = build_over_call (cand, LOOKUP_NORMAL, complain);\n \t    }\n \n@@ -10995,18 +11005,32 @@ joust_maybe_elide_copy (z_candidate *&cand)\n   return false;\n }\n \n-/* True if cand1 and cand2 represent the same function or function\n-   template.  */\n+/* True if the defining declarations of the two candidates have equivalent\n+   parameters.  */\n \n-static bool\n-same_fn_or_template (z_candidate *cand1, z_candidate *cand2)\n+bool\n+cand_parms_match (z_candidate *c1, z_candidate *c2)\n {\n-  if (cand1->fn == cand2->fn)\n+  tree fn1 = c1->template_decl;\n+  tree fn2 = c2->template_decl;\n+  if (fn1 && fn2)\n+    {\n+      fn1 = most_general_template (TI_TEMPLATE (fn1));\n+      fn1 = DECL_TEMPLATE_RESULT (fn1);\n+      fn2 = most_general_template (TI_TEMPLATE (fn2));\n+      fn2 = DECL_TEMPLATE_RESULT (fn2);\n+    }\n+  else\n+    {\n+      fn1 = c1->fn;\n+      fn2 = c2->fn;\n+    }\n+  if (fn1 == fn2)\n     return true;\n-  if (!cand1->template_decl || !cand2->template_decl)\n+  if (identifier_p (fn1) || identifier_p (fn2))\n     return false;\n-  return (most_general_template (TI_TEMPLATE (cand1->template_decl))\n-\t  == most_general_template (TI_TEMPLATE (cand2->template_decl)));\n+  return compparms (TYPE_ARG_TYPES (TREE_TYPE (fn1)),\n+\t\t    TYPE_ARG_TYPES (TREE_TYPE (fn2)));\n }\n \n /* Compare two candidates for overloading as described in\n@@ -11155,20 +11179,11 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n \n \t  if (winner && comp != winner)\n \t    {\n-\t      if (same_fn_or_template (cand1, cand2))\n-\t\t{\n-\t\t  /* Ambiguity between normal and reversed versions of the\n-\t\t     same comparison operator; prefer the normal one.\n-\t\t     https://lists.isocpp.org/core/2019/10/7438.php  */\n-\t\t  if (cand1->reversed ())\n-\t\t    winner = -1;\n-\t\t  else\n-\t\t    {\n-\t\t      gcc_checking_assert (cand2->reversed ());\n-\t\t      winner = 1;\n-\t\t    }\n-\t\t  break;\n-\t\t}\n+\t      /* Ambiguity between normal and reversed comparison operators\n+\t\t with the same parameter types; prefer the normal one.  */\n+\t      if ((cand1->reversed () != cand2->reversed ())\n+\t\t  && cand_parms_match (cand1, cand2))\n+\t\treturn cand1->reversed () ? -1 : 1;\n \n \t      winner = 0;\n \t      goto tweak;"}, {"sha": "4f3d12757ffa460e3331b8fa47dfecfe87091a53", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-rewrite2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite2.C?ref=8d5d90878ea9731301d3a1af32a444e4772e65e4", "patch": "@@ -0,0 +1,12 @@\n+// Test that C++20 overload changes don't break sloppy code.\n+\n+struct C {\n+    bool operator==(const C&);\n+    bool operator!=(const C&);\n+};\n+\n+int main() {\n+    C c1, c2;\n+    (void)(c1 == c2);\n+    (void)(c1 != c2);\n+}"}, {"sha": "ef29cffbd0b92d10bcce60c2faf60f51322e8bad", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-rewrite3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite3.C?ref=8d5d90878ea9731301d3a1af32a444e4772e65e4", "patch": "@@ -0,0 +1,10 @@\n+// Test that very different operators still cause ambiguity with reversed.\n+\n+struct X { operator int(); };\n+bool operator==(X, int);    // #1 { dg-message \"reversed\" \"\" { target c++2a } }\n+struct Y { operator int(); };\n+bool operator==(Y, int);    // #2 { dg-message \"reversed\" \"\" { target c++2a } }\n+\n+X x; Y y;\n+bool b1 = x == y;\t\t// { dg-error \"ambiguous\" \"\" { target c++2a } }\n+bool b2 = y == x;\t\t// { dg-error \"ambiguous\" \"\" { target c++2a } }"}, {"sha": "c068b5ab2949eca3dc68c507598df9626ba1b397", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-rewrite4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5d90878ea9731301d3a1af32a444e4772e65e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-rewrite4.C?ref=8d5d90878ea9731301d3a1af32a444e4772e65e4", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct iterator;\n+struct const_iterator {\n+  const_iterator(const iterator&);\n+  bool operator==(const const_iterator &ci) const = delete;\n+};\n+struct iterator {\n+  bool operator==(const const_iterator &ci) const {\n+    return ci == *this;\t\t// { dg-error \"deleted\" \"\" { target c++17_down } }\n+  }\t\t\t\t// { dg-warning \"reversed\" \"\" { target c++2a } .-1 }\n+};"}]}