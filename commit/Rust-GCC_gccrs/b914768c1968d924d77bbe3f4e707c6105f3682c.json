{"sha": "b914768c1968d924d77bbe3f4e707c6105f3682c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkxNDc2OGMxOTY4ZDkyNGQ3N2JiZTNmNGU3MDdjNjEwNWYzNjgyYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-13T21:02:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-13T21:02:11Z"}, "message": "re PR ipa/92421 (ICE in inline_small_functions, at ipa-inline.c:2001 since r277759)\n\n\n\tPR c++/92421\n\t* ipa-prop.c (update_indirect_edges_after_inlining):\n\tMark parameter as used.\n\t* ipa-inline.c (recursive_inlining): Reset node cache\n\tafter inlining.\n\t(inline_small_functions): Remove checking ifdef.\n\t* ipa-inline-analysis.c (do_estimate_edge_time): Verify\n\tcache consistency.\n\t* g++.dg/torture/pr92421.C: New testcase.\n\nFrom-SVN: r278159", "tree": {"sha": "8f86df5d2117969032167f987ff195a4f553fe26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f86df5d2117969032167f987ff195a4f553fe26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b914768c1968d924d77bbe3f4e707c6105f3682c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b914768c1968d924d77bbe3f4e707c6105f3682c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b914768c1968d924d77bbe3f4e707c6105f3682c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b914768c1968d924d77bbe3f4e707c6105f3682c/comments", "author": null, "committer": null, "parents": [{"sha": "7b34a284cab5d533552c1df995a88f7167d243bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b34a284cab5d533552c1df995a88f7167d243bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b34a284cab5d533552c1df995a88f7167d243bd"}], "stats": {"total": 218, "additions": 213, "deletions": 5}, "files": [{"sha": "42229be0f1422c7c81e83edac9e501858855465e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b914768c1968d924d77bbe3f4e707c6105f3682c", "patch": "@@ -1,3 +1,14 @@\n+2019-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR c++/92421\n+\t* ipa-prop.c (update_indirect_edges_after_inlining):\n+\tMark parameter as used.\n+\t* ipa-inline.c (recursive_inlining): Reset node cache\n+\tafter inlining.\n+\t(inline_small_functions): Remove checking ifdef.\n+\t* ipa-inline-analysis.c (do_estimate_edge_time): Verify\n+\tcache consistency.\n+\n 2019-11-13  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/92498"}, {"sha": "b45063b224d52c5c5284bb70a34b363d2f745617", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=b914768c1968d924d77bbe3f4e707c6105f3682c", "patch": "@@ -210,6 +210,19 @@ do_estimate_edge_time (struct cgraph_edge *edge)\n \t  time = e->entry.time;\n \t  nonspec_time = e->entry.nonspec_time;\n \t  hints = e->entry.hints;\n+\t  if (flag_checking)\n+\t    {\n+\t      sreal chk_time, chk_nonspec_time;\n+\t      int chk_size, chk_min_size;\n+\n+\t      ipa_hints chk_hints;\n+\t      ctx.estimate_size_and_time (&chk_size, &chk_min_size,\n+\t\t\t\t\t  &chk_time, &chk_nonspec_time,\n+\t\t\t\t\t  &chk_hints);\n+\t      gcc_assert (chk_size == size && chk_time == time\n+\t\t  \t  && chk_nonspec_time == nonspec_time\n+\t\t\t  && chk_hints == hints);\n+\t    }\n \t}\n       else\n \t{"}, {"sha": "78ec0ec685fab31c66c358b6e4af5b2130469fb6", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=b914768c1968d924d77bbe3f4e707c6105f3682c", "patch": "@@ -1633,6 +1633,7 @@ recursive_inlining (struct cgraph_edge *edge,\n \t}\n \n       inline_call (curr, false, new_edges, &overall_size, true);\n+      reset_node_cache (node);\n       lookup_recursive_calls (node, curr->callee, &heap);\n       n++;\n     }\n@@ -1982,11 +1983,10 @@ inline_small_functions (void)\n       if (!edge->inline_failed || !edge->callee->analyzed)\n \tcontinue;\n \n-#if CHECKING_P\n       /* Be sure that caches are maintained consistent.\n \t This check is affected by scaling roundoff errors when compiling for\n \t IPA this we skip it in that case.  */\n-      if (!edge->callee->count.ipa_p ()\n+      if (flag_checking && !edge->callee->count.ipa_p ()\n \t  && (!max_count.initialized_p () || !max_count.nonzero_p ()))\n \t{\n \t  sreal cached_badness = edge_badness (edge, false);\n@@ -1997,6 +1997,9 @@ inline_small_functions (void)\n \n \t  if (edge_growth_cache != NULL)\n \t    edge_growth_cache->remove (edge);\n+\t  reset_node_cache (edge->caller->inlined_to\n+\t\t\t    ? edge->caller->inlined_to\n+\t\t\t    : edge->caller);\n \t  gcc_assert (old_size_est == estimate_edge_size (edge));\n \t  gcc_assert (old_time_est == estimate_edge_time (edge));\n \t  /* FIXME:\n@@ -2021,9 +2024,6 @@ inline_small_functions (void)\n \t}\n       else\n         current_badness = edge_badness (edge, false);\n-#else\n-      current_badness = edge_badness (edge, false);\n-#endif\n       if (current_badness != badness)\n \t{\n \t  if (edge_heap.min () && current_badness > edge_heap.min_key ())"}, {"sha": "2cb8c585c24c782c365074526de76f36a5d5b3f9", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=b914768c1968d924d77bbe3f4e707c6105f3682c", "patch": "@@ -3537,6 +3537,11 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n \t      if (ici->polymorphic\n \t\t  && !ipa_get_jf_ancestor_type_preserved (jfunc))\n \t\tici->vptr_changed = true;\n+\t      ipa_set_param_used_by_indirect_call (new_root_info,\n+\t\t\t     \t\t\t   ici->param_index, true);\n+\t      if (ici->polymorphic)\n+\t\tipa_set_param_used_by_polymorphic_call (new_root_info,\n+\t\t\t\t\t\t        ici->param_index, true);\n \t    }\n \t}\n       else"}, {"sha": "3778788e80c9014889fa2293dcbcd27321bc7702", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b914768c1968d924d77bbe3f4e707c6105f3682c", "patch": "@@ -1,3 +1,8 @@\n+2019-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR c++/92421\n+\t* g++.dg/torture/pr92421.C: New testcase.\n+\n 2019-11-13  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/pr92090.c: Limit -mbig to powerpc64le-*-*."}, {"sha": "7adf53f7299a0f4eceb69f86ee0737dd21512eb1", "filename": "gcc/testsuite/g++.dg/torture/pr92421.C", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b914768c1968d924d77bbe3f4e707c6105f3682c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C?ref=b914768c1968d924d77bbe3f4e707c6105f3682c", "patch": "@@ -0,0 +1,174 @@\n+/* { dg-do compile } */\n+typedef long a;\n+void *b, *c;\n+template <typename, typename> class d {};\n+template <typename e, typename f> bool operator!=(d<e, f>, d<e, f>);\n+class g {\n+public:\n+  g(char *);\n+};\n+class j {\n+public:\n+  j();\n+  void h();\n+  void i();\n+  void aj();\n+};\n+class m {\n+public:\n+  m(bool);\n+};\n+class n {\n+public:\n+  operator a();\n+};\n+class o {\n+public:\n+  long am();\n+};\n+class H {\n+public:\n+  class p {};\n+  virtual bool accept(const char *, unsigned long, p *, bool);\n+};\n+class q : H {\n+public:\n+  class r {\n+  public:\n+    enum at { au, av, aw };\n+  };\n+  enum { ax };\n+  virtual void ay(char *, int, const char *, r::at, char *);\n+  virtual bool az(const g &, unsigned = ax);\n+  virtual bool ba(const int &, p *, bool);\n+  void bb(char *bc, long bd, char *, long be) {\n+    class bf : public p {\n+    public:\n+      bf(long);\n+    } bg(be);\n+    accept(bc, bd, &bg, true);\n+  }\n+};\n+class s {\n+  q *bi;\n+  bool bj();\n+};\n+template <class bk> class t : q {\n+  bool accept(const char *, unsigned long bd, p *bg, bool) {\n+    bool k(bp || bq), cl = false, err = false;\n+    if (br)\n+      ay(\"\", 1, __func__, r::au, \"\");\n+    if (bs)\n+      ay(\"\", 6, __func__, r::av, \"\");\n+    char bt[1], cd[1];\n+    long bu = sizeof(int) + bd, ce = sizeof(L) + bd;\n+    char *bw = bu > sizeof(bt) ? new char : bt,\n+         *cf = ce > sizeof(cd) ? new char : cd;\n+    __builtin___memcpy_chk(b, c, bd, 0);\n+    a by[1];\n+    int bz = 0;\n+    u cb = *cc((int *)bw, true, by, &bz);\n+    ay(\"\", 1, __func__, r::aw, \"\");\n+    if (bw != bt)\n+      delete bw;\n+    __builtin___memcpy_chk(b, c, bd, 0);\n+    cb.ch.i();\n+    bool ci = cj((L *)cf, bg);\n+    bool atran = bq && bp && cb.ck;\n+    if (atran && !ci && cm(&cb))\n+      if (cn > co) {\n+        int cp = cb.cq % 6;\n+        v cs = *(ct + cp);\n+        if (cu(&cs))\n+          cl = true;\n+      }\n+    if (ci)\n+      if (k)\n+        cv.aj();\n+    cv.h();\n+    b = cc((int *)bw, false, by, &bz);\n+    if (b)\n+      if (cw(&cb, by, bz))\n+        if (atran && bp && cx())\n+          cv.aj();\n+    if (cl)\n+      if (k)\n+        cv.aj();\n+    cv.h();\n+    int cp = cb.cq % 6;\n+    v cs = *(ct + cp);\n+    if (cy())\n+      err = true;\n+    O da = *(db + cp);\n+    if (da.dc->am() > cs.dc->am() + cs.dd->am() + 1 && de(&da))\n+      cv.aj();\n+    return !err;\n+  }\n+  bool ba(const int &, p *, bool) {\n+    d<int, int> kit, df;\n+    while (kit != df)\n+      ;\n+    cx();\n+  }\n+  bool az(const g &, unsigned) {\n+    t dj;\n+    int cur;\n+    while (cur) {\n+      int dk, dl;\n+      char dbuf;\n+      dj.bb(&dbuf, dl, &dbuf, dk);\n+    }\n+  }\n+  struct L {};\n+  struct u {\n+    j ch;\n+    a cq;\n+    bool ck;\n+  };\n+  struct v {\n+    o *dd;\n+    o *dc;\n+  };\n+  struct O {\n+    o *dc;\n+  };\n+  bool cy();\n+  bool cu(v *);\n+  bool cj(L *, p *);\n+  bool de(O *);\n+  u *cc(int *, bool, a *, int *);\n+  bool cw(u *, a *, int);\n+  bool cx() {\n+    dm.dn();\n+    bool err = false;\n+    if (dm.l())\n+      err = true;\n+    return !err;\n+  }\n+  bool cm(u *);\n+  j cv;\n+  int br;\n+  bool bs;\n+  bool bq;\n+  bk dm;\n+  a co;\n+  n cn;\n+  v ct[6];\n+  O db[6];\n+  bool bp;\n+};\n+class w : q {\n+public:\n+  void dn();\n+  bool l() {\n+    m(true);\n+    if (br)\n+      ay(\"\", 1087, __func__, r::au, \"\");\n+    return false;\n+  }\n+  int br;\n+};\n+bool s::bj() {\n+  bi->az(\"\");\n+  new t<w>;\n+}"}]}