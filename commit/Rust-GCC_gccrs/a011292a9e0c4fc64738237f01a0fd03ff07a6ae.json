{"sha": "a011292a9e0c4fc64738237f01a0fd03ff07a6ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxMTI5MmE5ZTBjNGZjNjQ3MzgyMzdmMDFhMGZkMDNmZjA3YTZhZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-01-26T16:47:22Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-01-26T16:47:22Z"}, "message": "PR tree-optimization/83896 - ice in get_string_len on a call to strlen with\n\nPR tree-optimization/83896 - ice in get_string_len on a call to strlen with\nnon-constant length\n\ngcc/ChangeLog:\n\n        PR tree-optimization/83896\n        * tree-ssa-strlen.c (get_string_len): Rename...\n        (get_string_cst_length): ...to this.  Return HOST_WIDE_INT.\n        Avoid assuming length is constant.\n        (handle_char_store): Use HOST_WIDE_INT for string length.\n\ngcc/testsuite/ChangeLog:\n\n        PR tree-optimization/83896\n        * gcc.dg/strlenopt-43.c: New test.\n\nFrom-SVN: r257100", "tree": {"sha": "ef201c6dce0f918f5e1e748439aec5cc4cf0f004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef201c6dce0f918f5e1e748439aec5cc4cf0f004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a011292a9e0c4fc64738237f01a0fd03ff07a6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a011292a9e0c4fc64738237f01a0fd03ff07a6ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a011292a9e0c4fc64738237f01a0fd03ff07a6ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f91edfc4e593505431d975b3e8512cde5bb63b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91edfc4e593505431d975b3e8512cde5bb63b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91edfc4e593505431d975b3e8512cde5bb63b9e"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "d37cc7836fbf85705e32aaeffa97f41e15b0968f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a011292a9e0c4fc64738237f01a0fd03ff07a6ae", "patch": "@@ -1,3 +1,11 @@\n+2018-01-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/83896\n+\t* tree-ssa-strlen.c (get_string_len): Rename...\n+\t(get_string_cst_length): ...to this.  Return HOST_WIDE_INT.\n+\tAvoid assuming length is constant.\n+\t(handle_char_store): Use HOST_WIDE_INT for string length.\n+\n 2018-01-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81763"}, {"sha": "63bae36ea38071a7c2df23603cfc1b2a57e6b517", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a011292a9e0c4fc64738237f01a0fd03ff07a6ae", "patch": "@@ -1,3 +1,8 @@\n+2018-01-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/83896\n+\t* gcc.dg/strlenopt-43.c: New.\n+\n 2018-01-26  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-abs-int.c: Remove scan-assembler stanzas."}, {"sha": "13539fcb8684c6d57ab0388ad546bcdd031a220a", "filename": "gcc/testsuite/gcc.dg/strlenopt-43.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-43.c?ref=a011292a9e0c4fc64738237f01a0fd03ff07a6ae", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/83896 - ice in get_string_len on a call to strlen\n+   with non-constant length\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#include \"strlenopt.h\"\n+\n+extern char a[5];\n+extern char b[];\n+\n+void f (void)\n+{\n+  if (strlen (b) != 4)\n+    memcpy (a, b, sizeof a);\n+}"}, {"sha": "c3cf432a9214089a2f03abbb73aa5e3bf63b74df", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011292a9e0c4fc64738237f01a0fd03ff07a6ae/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=a011292a9e0c4fc64738237f01a0fd03ff07a6ae", "patch": "@@ -2772,24 +2772,30 @@ handle_pointer_plus (gimple_stmt_iterator *gsi)\n     }\n }\n \n-/* Check if RHS is string_cst possibly wrapped by mem_ref.  */\n-static int\n-get_string_len (tree rhs)\n+/* If RHS, either directly or indirectly, refers to a string of constant\n+   length, return it.  Otherwise return a negative value.  */\n+\n+static HOST_WIDE_INT\n+get_string_cst_length (tree rhs)\n {\n   if (TREE_CODE (rhs) == MEM_REF\n       && integer_zerop (TREE_OPERAND (rhs, 1)))\n     {\n-      tree rhs_addr = rhs = TREE_OPERAND (rhs, 0);\n+      rhs = TREE_OPERAND (rhs, 0);\n       if (TREE_CODE (rhs) == ADDR_EXPR)\n \t{\n+\t  tree rhs_addr = rhs;\n+\n \t  rhs = TREE_OPERAND (rhs, 0);\n \t  if (TREE_CODE (rhs) != STRING_CST)\n \t    {\n \t      int idx = get_stridx (rhs_addr);\n \t      if (idx > 0)\n \t\t{\n \t\t  strinfo *si = get_strinfo (idx);\n-\t\t  if (si && si->full_string_p)\n+\t\t  if (si\n+\t\t      && si->full_string_p\n+\t\t      && tree_fits_shwi_p (si->nonzero_chars))\n \t\t    return tree_to_shwi (si->nonzero_chars);\n \t\t}\n \t    }\n@@ -2801,10 +2807,7 @@ get_string_len (tree rhs)\n     rhs = DECL_INITIAL (rhs);\n \n   if (rhs && TREE_CODE (rhs) == STRING_CST)\n-    {\n-      unsigned HOST_WIDE_INT ilen = strlen (TREE_STRING_POINTER (rhs));\n-      return ilen <= INT_MAX ? ilen : -1;\n-    }\n+    return strlen (TREE_STRING_POINTER (rhs));\n \n   return -1;\n }\n@@ -2821,9 +2824,6 @@ handle_char_store (gimple_stmt_iterator *gsi)\n   tree rhs = gimple_assign_rhs1 (stmt);\n   unsigned HOST_WIDE_INT offset = 0;\n \n-  /* Set to the length of the string being assigned if known.  */\n-  int rhslen;\n-\n   if (TREE_CODE (lhs) == MEM_REF\n       && TREE_CODE (TREE_OPERAND (lhs, 0)) == SSA_NAME)\n     {\n@@ -2854,6 +2854,8 @@ handle_char_store (gimple_stmt_iterator *gsi)\n   bool storing_nonzero_p = (!storing_zero_p\n \t\t\t    && TREE_CODE (rhs) == INTEGER_CST\n \t\t\t    && integer_nonzerop (rhs));\n+  /* Set to the length of the string being assigned if known.  */\n+  HOST_WIDE_INT rhslen;\n \n   if (si != NULL)\n     {\n@@ -2967,7 +2969,7 @@ handle_char_store (gimple_stmt_iterator *gsi)\n \t}\n     }\n   else if (idx == 0\n-\t   && (rhslen = get_string_len (gimple_assign_rhs1 (stmt))) >= 0\n+\t   && (rhslen = get_string_cst_length (gimple_assign_rhs1 (stmt))) >= 0\n \t   && ssaname == NULL_TREE\n \t   && TREE_CODE (TREE_TYPE (lhs)) == ARRAY_TYPE)\n     {"}]}