{"sha": "4c1aff1ce430fdf4b46caa632fd44b4d0f557720", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxYWZmMWNlNDMwZmRmNGI0NmNhYTYzMmZkNDRiNGQwZjU1NzcyMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-30T13:54:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-30T13:54:14Z"}, "message": "re PR middle-end/57107 (tree check fail in unlink_stmt_vdef)\n\n2013-04-30  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57107\n\t* tree-eh.c (sink_clobbers): Preserve virtual SSA form.\n\n\t* g++.dg/torture/pr57107.C: New testcase.\n\nFrom-SVN: r198454", "tree": {"sha": "b5bca3706a64ea2adc3ab07083628f891afef77b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5bca3706a64ea2adc3ab07083628f891afef77b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c1aff1ce430fdf4b46caa632fd44b4d0f557720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1aff1ce430fdf4b46caa632fd44b4d0f557720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1aff1ce430fdf4b46caa632fd44b4d0f557720", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54b8379a261d1b36958aecbca568ef6475a8e1ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b8379a261d1b36958aecbca568ef6475a8e1ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b8379a261d1b36958aecbca568ef6475a8e1ca"}], "stats": {"total": 251, "additions": 241, "deletions": 10}, "files": [{"sha": "bb86d6e8e303b446602e9011402fbe216a06271b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c1aff1ce430fdf4b46caa632fd44b4d0f557720", "patch": "@@ -1,3 +1,8 @@\n+2013-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57107\n+\t* tree-eh.c (sink_clobbers): Preserve virtual SSA form.\n+\n 2013-04-30  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/56957"}, {"sha": "0d5705a60ed28eaf4acb06645fa0d82ce760dfbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c1aff1ce430fdf4b46caa632fd44b4d0f557720", "patch": "@@ -1,3 +1,8 @@\n+2013-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57107\n+\t* g++.dg/torture/pr57107.C: New testcase.\n+\n 2013-04-30  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/57105"}, {"sha": "516dec16fc5ff1c42f9866ea6e9c6b497a6198f5", "filename": "gcc/testsuite/g++.dg/torture/pr57107.C", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57107.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57107.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57107.C?ref=4c1aff1ce430fdf4b46caa632fd44b4d0f557720", "patch": "@@ -0,0 +1,193 @@\n+// { dg-do compile }\n+\n+typedef long unsigned int size_t;\n+namespace std {\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<class _Sp, class _Tp>     struct __traitor     {\n+\tenum {\n+\t    __value = bool(_Sp::__value) || bool(_Tp::__value) };\n+    };\n+    template<typename _Tp>     struct __is_integer     {\n+\tenum {\n+\t    __value = 0 };\n+    };\n+    template<typename _Tp>     struct __is_floating     {\n+\tenum {\n+\t    __value = 0 };\n+    };\n+    template<typename _Tp>     struct __is_pointer     {\n+\tenum {\n+\t    __value = 0 };\n+    };\n+    template<typename _Tp>     struct __is_normal_iterator     {\n+\tenum {\n+\t    __value = 0 };\n+    };\n+    template<typename _Tp>     struct __is_arithmetic     : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >     {\n+    };\n+    template<typename _Tp>     struct __is_scalar     : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >     {\n+    };\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+    template<bool, typename>     struct __enable_if     {\n+    };\n+    template<typename _Tp>     struct __enable_if<true, _Tp>     {\n+\ttypedef _Tp __type;\n+    };\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Iterator>     struct iterator_traits     {\n+    };\n+    template<typename _Tp>     struct iterator_traits<_Tp*>     {\n+\ttypedef _Tp value_type;\n+    };\n+    template<typename _Iterator, bool _HasBase>     struct _Iter_base     {\n+\ttypedef _Iterator iterator_type;\n+    };\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Iterator>     struct _Niter_base     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>     {\n+    };\n+    template<typename _Iterator>     inline typename _Niter_base<_Iterator>::iterator_type     __niter_base(_Iterator __it)     {\n+    }\n+    template<typename _OutputIterator, typename _Size, typename _Tp>     inline typename     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)     {\n+\tfor (__decltype(__n + 0) __niter = __n;\n+\t     __niter > 0;\n+\t     --__niter, ++__first)  *__first = __value;\n+    }\n+    template<typename _OI, typename _Size, typename _Tp>     inline _OI     fill_n(_OI __first, _Size __n, const _Tp& __value)     {\n+\treturn _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));\n+    }\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class new_allocator     {\n+    public:\n+\ttypedef size_t size_type;\n+\ttypedef _Tp* pointer;\n+\t~new_allocator() throw() {\n+\t}\n+\tpointer       allocate(size_type __n, const void* = 0)       {\n+\t    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));\n+\t}\n+    };\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class allocator: public __gnu_cxx::new_allocator<_Tp>     {\n+    public:\n+\ttemplate<typename _Tp1>         struct rebind         {\n+\t    typedef allocator<_Tp1> other;\n+\t};\n+    };\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Alloc>   struct __alloc_traits   {\n+\ttypedef typename _Alloc::pointer pointer;\n+\ttemplate<typename _Tp>       struct rebind       {\n+\t    typedef typename _Alloc::template rebind<_Tp>::other other;\n+\t};\n+    };\n+}\n+class QString {\n+public:\n+    bool isEmpty() const;\n+};\n+class QObject {\n+};\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<bool _TrivialValueType>     struct __uninitialized_fill_n     {\n+\ttemplate<typename _ForwardIterator, typename _Size, typename _Tp>         static void         __uninit_fill_n(_ForwardIterator __first, _Size __n,    const _Tp& __x)         {\n+\t    std::fill_n(__first, __n, __x);\n+\t}\n+    };\n+    template<typename _ForwardIterator, typename _Size, typename _Tp>     inline void     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)     {\n+\ttypedef typename iterator_traits<_ForwardIterator>::value_type  _ValueType;\n+\tstd::__uninitialized_fill_n<__is_trivial(_ValueType)>::  __uninit_fill_n(__first, __n, __x);\n+    }\n+    template<typename _ForwardIterator, typename _Size, typename _Tp,     typename _Tp2>     inline void     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,         const _Tp& __x, allocator<_Tp2>&)     {\n+\tstd::uninitialized_fill_n(__first, __n, __x);\n+    }\n+    template<typename _Tp, typename _Alloc>     struct _Vector_base     {\n+\ttypedef typename __gnu_cxx::__alloc_traits<_Alloc>::template         rebind<_Tp>::other _Tp_alloc_type;\n+\ttypedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer         pointer;\n+\tstruct _Vector_impl       : public _Tp_alloc_type       {\n+\t    pointer _M_start;\n+\t    pointer _M_finish;\n+\t    pointer _M_end_of_storage;\n+\t    _Vector_impl(_Tp_alloc_type const& __a)  : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)  {\n+\t    }\n+\t};\n+\ttypedef _Alloc allocator_type;\n+\t_Tp_alloc_type&       _M_get_Tp_allocator()       {\n+\t}\n+\t_Vector_base(size_t __n, const allocator_type& __a)       : _M_impl(__a)       {\n+\t    _M_create_storage(__n);\n+\t}\n+\t_Vector_impl _M_impl;\n+\tpointer       _M_allocate(size_t __n)       {\n+\t    return __n != 0 ? _M_impl.allocate(__n) : 0;\n+\t}\n+\tvoid       _M_create_storage(size_t __n)       {\n+\t    this->_M_impl._M_start = this->_M_allocate(__n);\n+\t    this->_M_impl._M_finish = this->_M_impl._M_start;\n+\t}\n+    };\n+    template<typename _Tp, typename _Alloc = std::allocator<_Tp> >     class vector : protected _Vector_base<_Tp, _Alloc>     {\n+\ttypedef _Vector_base<_Tp, _Alloc> _Base;\n+\ttypedef _Tp value_type;\n+\ttypedef size_t size_type;\n+\ttypedef _Alloc allocator_type;\n+\tusing _Base::_M_get_Tp_allocator;\n+    public:\n+\texplicit       vector(size_type __n, const value_type& __value = value_type(),       const allocator_type& __a = allocator_type())       : _Base(__n, __a)       {\n+\t    _M_fill_initialize(__n, __value);\n+\t}\n+\tvoid       _M_fill_initialize(size_type __n, const value_type& __value)       {\n+\t    std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,           _M_get_Tp_allocator());\n+\t}\n+    };\n+};\n+class QPaintDevice {\n+public:\n+    int width() const {\n+    }\n+    int height() const {\n+    }\n+};\n+class QImage : public QPaintDevice {\n+};\n+extern \"C\" {\n+    struct __jmp_buf_tag   {\n+    };\n+    typedef struct __jmp_buf_tag jmp_buf[1];\n+    extern int _setjmp (struct __jmp_buf_tag __env[1]) throw ();\n+    extern void longjmp (struct __jmp_buf_tag __env[1], int __val)      throw () __attribute__ ((__noreturn__));\n+}\n+typedef unsigned int png_uint_32;\n+typedef void * png_voidp;\n+typedef const char * png_const_charp;\n+extern \"C\" {\n+    typedef struct png_struct_def png_struct;\n+    typedef png_struct * png_structp;\n+    typedef void ( *png_error_ptr) (png_structp, png_const_charp);\n+    typedef void ( *png_longjmp_ptr) (jmp_buf, int);\n+    extern __attribute__((__malloc__)) png_structp ( png_create_write_struct) (png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)                   ;\n+    extern jmp_buf* ( png_set_longjmp_fn) (png_structp png_ptr, png_longjmp_ptr longjmp_fn, size_t jmp_buf_size)                                                      ;\n+}\n+class PngWriter : public QObject {\n+    const QImage *m_out_qimage;\n+    QString m_fname;\n+    bool writeQImageToPng();\n+};\n+bool PngWriter::writeQImageToPng() {\n+    png_uint_32 width = m_out_qimage->width();\n+    png_uint_32 height = m_out_qimage->height();\n+    if ( !m_fname.isEmpty() )  {\n+\tstd::vector<char> t(width * height * 4 + (width * height * 4) * 0.1);\n+    }\n+    png_structp png_ptr = png_create_write_struct     (\"1.5.13\", __null,   __null, __null);\n+    if (_setjmp ((*png_set_longjmp_fn((png_ptr), longjmp, sizeof (jmp_buf)))))  {\n+    }\n+}"}, {"sha": "c90094986a07388285c33094e110ec2fadbecf9a", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1aff1ce430fdf4b46caa632fd44b4d0f557720/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=4c1aff1ce430fdf4b46caa632fd44b4d0f557720", "patch": "@@ -3342,7 +3342,24 @@ sink_clobbers (basic_block bb)\n   if (!any_clobbers)\n     return 0;\n \n-  succbb = single_succ (bb);\n+  edge succe = single_succ_edge (bb);\n+  succbb = succe->dest;\n+\n+  /* See if there is a virtual PHI node to take an updated virtual\n+     operand from.  */\n+  gimple vphi = NULL;\n+  tree vuse = NULL_TREE;\n+  for (gsi = gsi_start_phis (succbb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      tree res = gimple_phi_result (gsi_stmt (gsi));\n+      if (virtual_operand_p (res))\n+\t{\n+\t  vphi = gsi_stmt (gsi);\n+\t  vuse = res;\n+\t  break;\n+\t}\n+    }\n+\n   dgsi = gsi_after_labels (succbb);\n   gsi = gsi_last_bb (bb);\n   for (gsi_prev (&gsi); !gsi_end_p (gsi); gsi_prev (&gsi))\n@@ -3353,7 +3370,6 @@ sink_clobbers (basic_block bb)\n \tcontinue;\n       if (gimple_code (stmt) == GIMPLE_LABEL)\n \tbreak;\n-      unlink_stmt_vdef (stmt);\n       lhs = gimple_assign_lhs (stmt);\n       /* Unfortunately we don't have dominance info updated at this\n \t point, so checking if\n@@ -3365,21 +3381,33 @@ sink_clobbers (basic_block bb)\n \t  && TREE_CODE (TREE_OPERAND (lhs, 0)) == SSA_NAME\n \t  && !SSA_NAME_IS_DEFAULT_DEF (TREE_OPERAND (lhs, 0)))\n \t{\n+\t  unlink_stmt_vdef (stmt);\n \t  gsi_remove (&gsi, true);\n \t  release_defs (stmt);\n \t  continue;\n \t}\n+\n+      /* As we do not change stmt order when sinking across a\n+         forwarder edge we can keep virtual operands in place.  */\n       gsi_remove (&gsi, false);\n-      /* Trigger the operand scanner to cause renaming for virtual\n-         operands for this statement.\n-\t ???  Given the simple structure of this code manually\n-\t figuring out the reaching definition should not be too hard.  */\n-      if (gimple_vuse (stmt))\n-\tgimple_set_vuse (stmt, NULL_TREE);\n-      gsi_insert_before (&dgsi, stmt, GSI_SAME_STMT);\n+      gsi_insert_before (&dgsi, stmt, GSI_NEW_STMT);\n+\n+      /* But adjust virtual operands if we sunk across a PHI node.  */\n+      if (vuse)\n+\t{\n+\t  gimple use_stmt;\n+\t  imm_use_iterator iter;\n+\t  use_operand_p use_p;\n+\t  FOR_EACH_IMM_USE_STMT (use_stmt, iter, vuse)\n+\t    FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t      SET_USE (use_p, gimple_vdef (stmt));\n+\t  /* Adjust the incoming virtual operand.  */\n+\t  SET_USE (PHI_ARG_DEF_PTR_FROM_EDGE (vphi, succe), gimple_vuse (stmt));\n+\t  SET_USE (gimple_vuse_op (stmt), vuse);\n+\t}\n     }\n \n-  return TODO_update_ssa_only_virtuals;\n+  return 0;\n }\n \n /* At the end of inlining, we can lower EH_DISPATCH.  Return true when "}]}