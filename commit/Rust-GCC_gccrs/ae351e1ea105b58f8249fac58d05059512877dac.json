{"sha": "ae351e1ea105b58f8249fac58d05059512877dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUzNTFlMWVhMTA1YjU4ZjgyNDlmYWM1OGQwNTA1OTUxMjg3N2RhYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-08-12T01:46:54Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-08-12T01:46:54Z"}, "message": "simplify-rtx.c (simplify_binary_operation): Replace calls to gen_rtx_NEG and gen_rtx_NOT with calls to simplify_gen_unary...\n\n\n\t* simplify-rtx.c (simplify_binary_operation): Replace calls to\n\tgen_rtx_NEG and gen_rtx_NOT with calls to simplify_gen_unary,\n\tand calls to gen_rtx_PLUS, gen_rtx_MULT, gen_rtx_LSHIFTRT,\n\tgen_rtx_ASHIFT and gen_rtx_AND with calls to simplify_gen_binary.\n\nFrom-SVN: r70350", "tree": {"sha": "e32919613522bf01d8e4dab1fa0f97713c6ea96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e32919613522bf01d8e4dab1fa0f97713c6ea96f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae351e1ea105b58f8249fac58d05059512877dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae351e1ea105b58f8249fac58d05059512877dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae351e1ea105b58f8249fac58d05059512877dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae351e1ea105b58f8249fac58d05059512877dac/comments", "author": null, "committer": null, "parents": [{"sha": "11017cc737b10f7eb7544ae55a340584d22fb9a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11017cc737b10f7eb7544ae55a340584d22fb9a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11017cc737b10f7eb7544ae55a340584d22fb9a8"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "767c2d64834f0f7fc036e332270aa074cceb4b0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae351e1ea105b58f8249fac58d05059512877dac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae351e1ea105b58f8249fac58d05059512877dac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae351e1ea105b58f8249fac58d05059512877dac", "patch": "@@ -1,3 +1,10 @@\n+2003-08-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation): Replace calls to\n+\tgen_rtx_NEG and gen_rtx_NOT with calls to simplify_gen_unary,\n+\tand calls to gen_rtx_PLUS, gen_rtx_MULT, gen_rtx_LSHIFTRT,\n+\tgen_rtx_ASHIFT and gen_rtx_AND with calls to simplify_gen_binary.\n+\n 2003-08-11  Roger Sayle  <roger@eyesopen.com>\n \n \t* expr.c (expand_expr): If an ABS_EXPR has a complex type, abort."}, {"sha": "ab442facdeb44369dcb96718ce4a6f3c8c7d731e", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae351e1ea105b58f8249fac58d05059512877dac/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae351e1ea105b58f8249fac58d05059512877dac/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=ae351e1ea105b58f8249fac58d05059512877dac", "patch": "@@ -1095,7 +1095,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t  if (INTEGRAL_MODE_P (mode)\n \t      && GET_CODE (op0) == NOT\n \t      && trueop1 == const1_rtx)\n-\t    return gen_rtx_NEG (mode, XEXP (op0, 0));\n+\t    return simplify_gen_unary (NEG, mode, XEXP (op0, 0), mode);\n \n \t  /* Handle both-operands-constant cases.  We can only add\n \t     CONST_INTs to constants since the sum of relocatable symbols\n@@ -1230,11 +1230,11 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     But if the mode has signed zeros, and does not round towards\n \t     -infinity, then 0 - 0 is 0, not -0.  */\n \t  if (!HONOR_SIGNED_ZEROS (mode) && trueop0 == CONST0_RTX (mode))\n-\t    return gen_rtx_NEG (mode, op1);\n+\t    return simplify_gen_unary (NEG, mode, op1, mode);\n \n \t  /* (-1 - a) is ~a.  */\n \t  if (trueop0 == constm1_rtx)\n-\t    return gen_rtx_NOT (mode, op1);\n+\t    return simplify_gen_unary (NOT, mode, op1, mode);\n \n \t  /* Subtracting 0 has no effect unless the mode has signed zeros\n \t     and supports rounding towards -infinity.  In such a case,\n@@ -1344,11 +1344,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \n \tcase MULT:\n \t  if (trueop1 == constm1_rtx)\n-\t    {\n-\t      tem = simplify_unary_operation (NEG, mode, op0, mode);\n-\n-\t      return tem ? tem : gen_rtx_NEG (mode, op0);\n-\t    }\n+\t    return simplify_gen_unary (NEG, mode, op0, mode);\n \n \t  /* Maybe simplify x * 0 to 0.  The reduction is not valid if\n \t     x is NaN, since x * 0 is then also NaN.  Nor is it valid\n@@ -1376,7 +1372,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t      && (width <= HOST_BITS_PER_WIDE_INT\n \t\t  || val != HOST_BITS_PER_WIDE_INT - 1)\n \t      && ! rtx_equal_function_value_matters)\n-\t    return gen_rtx_ASHIFT (mode, op0, GEN_INT (val));\n+\t    return simplify_gen_binary (ASHIFT, mode, op0, GEN_INT (val));\n \n \t  /* x*2 is x+x and x*(-1) is -x */\n \t  if (GET_CODE (trueop1) == CONST_DOUBLE\n@@ -1387,10 +1383,10 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t      REAL_VALUE_FROM_CONST_DOUBLE (d, trueop1);\n \n \t      if (REAL_VALUES_EQUAL (d, dconst2))\n-\t\treturn gen_rtx_PLUS (mode, op0, copy_rtx (op0));\n+\t\treturn simplify_gen_binary (PLUS, mode, op0, copy_rtx (op0));\n \n \t      if (REAL_VALUES_EQUAL (d, dconstm1))\n-\t\treturn gen_rtx_NEG (mode, op0);\n+\t\treturn simplify_gen_unary (NEG, mode, op0, mode);\n \t    }\n \t  break;\n \n@@ -1417,7 +1413,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t  if (GET_CODE (trueop1) == CONST_INT\n \t      && ((INTVAL (trueop1) & GET_MODE_MASK (mode))\n \t\t  == GET_MODE_MASK (mode)))\n-\t    return gen_rtx_NOT (mode, op0);\n+\t    return simplify_gen_unary (NOT, mode, op0, mode);\n \t  if (trueop0 == trueop1 && ! side_effects_p (op0)\n \t      && GET_MODE_CLASS (mode) != MODE_CC)\n \t    return const0_rtx;\n@@ -1446,7 +1442,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     below).  */\n \t  if (GET_CODE (trueop1) == CONST_INT\n \t      && (arg1 = exact_log2 (INTVAL (trueop1))) > 0)\n-\t    return gen_rtx_LSHIFTRT (mode, op0, GEN_INT (arg1));\n+\t    return simplify_gen_binary (LSHIFTRT, mode, op0, GEN_INT (arg1));\n \n \t  /* ... fall through ...  */\n \n@@ -1487,8 +1483,8 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t      if (! REAL_VALUES_EQUAL (d, dconst0))\n \t\t{\n \t\t  REAL_ARITHMETIC (d, rtx_to_tree_code (DIV), dconst1, d);\n-\t\t  return gen_rtx_MULT (mode, op0,\n-\t\t\t\t       CONST_DOUBLE_FROM_REAL_VALUE (d, mode));\n+\t\t  tem = CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n+\t\t  return simplify_gen_binary (MULT, mode, op0, tem);\n \t\t}\n \t    }\n \t  break;\n@@ -1497,7 +1493,8 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t  /* Handle modulus by power of two (mod with 1 handled below).  */\n \t  if (GET_CODE (trueop1) == CONST_INT\n \t      && exact_log2 (INTVAL (trueop1)) > 0)\n-\t    return gen_rtx_AND (mode, op0, GEN_INT (INTVAL (op1) - 1));\n+\t    return simplify_gen_binary (AND, mode, op0,\n+\t\t\t\t\tGEN_INT (INTVAL (op1) - 1));\n \n \t  /* ... fall through ...  */\n "}]}