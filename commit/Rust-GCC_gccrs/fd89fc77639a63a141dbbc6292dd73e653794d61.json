{"sha": "fd89fc77639a63a141dbbc6292dd73e653794d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4OWZjNzc2MzlhNjNhMTQxZGJiYzYyOTJkZDczZTY1Mzc5NGQ2MQ==", "commit": {"author": {"name": "Antony Polukhin", "email": "antoshkka@gmail.com", "date": "2021-05-17T13:58:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-17T16:58:14Z"}, "message": "libstdc++: diagnose some misuses of [locale.convenience] functions [PR 89728]\n\nThis patch provides better diagnostics for common misuse of\n[locale.convenience] functions with std::string as a character type.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/89728\n\t* include/bits/locale_facets.h (ctype<basic_string<C,T,A>>):\n\tDeclare (but do not define) partial specialization.\n\t* testsuite/22_locale/ctype/is/string/89728_neg.cc: New test.", "tree": {"sha": "f5011c4cb867ffe5264266951a6b0311942f0b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5011c4cb867ffe5264266951a6b0311942f0b58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd89fc77639a63a141dbbc6292dd73e653794d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd89fc77639a63a141dbbc6292dd73e653794d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd89fc77639a63a141dbbc6292dd73e653794d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd89fc77639a63a141dbbc6292dd73e653794d61/comments", "author": {"login": "apolukhin", "id": 1700098, "node_id": "MDQ6VXNlcjE3MDAwOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1700098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apolukhin", "html_url": "https://github.com/apolukhin", "followers_url": "https://api.github.com/users/apolukhin/followers", "following_url": "https://api.github.com/users/apolukhin/following{/other_user}", "gists_url": "https://api.github.com/users/apolukhin/gists{/gist_id}", "starred_url": "https://api.github.com/users/apolukhin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apolukhin/subscriptions", "organizations_url": "https://api.github.com/users/apolukhin/orgs", "repos_url": "https://api.github.com/users/apolukhin/repos", "events_url": "https://api.github.com/users/apolukhin/events{/privacy}", "received_events_url": "https://api.github.com/users/apolukhin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60a156ae53e976dfe44689f7c89e607596e7cf67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a156ae53e976dfe44689f7c89e607596e7cf67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a156ae53e976dfe44689f7c89e607596e7cf67"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "5ca431e1a255ffff70bac9d22ca9467c643f360c", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd89fc77639a63a141dbbc6292dd73e653794d61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd89fc77639a63a141dbbc6292dd73e653794d61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=fd89fc77639a63a141dbbc6292dd73e653794d61", "patch": "@@ -671,6 +671,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT>\n     locale::id ctype<_CharT>::id;\n \n+  // Incomplete to provide a compile time diagnostics for common misuse\n+  // of [locale.convenience] functions with basic_string as a character type.\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    class ctype<basic_string<_CharT, _Traits, _Alloc> >;\n+\n   /**\n    *  @brief  The ctype<char> specialization.\n    *  @ingroup locales"}, {"sha": "9f15620c9a8ac142ce7c9de1614a937658dcc804", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/string/89728_neg.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd89fc77639a63a141dbbc6292dd73e653794d61/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd89fc77639a63a141dbbc6292dd73e653794d61/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc?ref=fd89fc77639a63a141dbbc6292dd73e653794d61", "patch": "@@ -0,0 +1,73 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"complete\" \"\" { target *-*-* } 0 }\n+\n+#include <locale>\n+\n+template <class Char, int I>\n+struct trait: std::char_traits<Char> {};\n+\n+template <class Char, int I>\n+std::basic_string<Char, trait<Char, I> > make_str()\n+{\n+  return std::basic_string<Char, trait<Char, I> >();\n+}\n+\n+void test01()\n+{\n+  const std::locale& loc = std::locale::classic();\n+\n+  std::isspace(std::string(), loc);\t\t// { dg-error \"required from here\" }\n+  std::isprint(make_str<char, 0>(), loc);\t// { dg-error \"required from here\" }\n+  std::iscntrl(make_str<char, 1>(), loc);\t// { dg-error \"required from here\" }\n+  std::isupper(make_str<char, 2>(), loc);\t// { dg-error \"required from here\" }\n+  std::islower(make_str<char, 3>(), loc);\t// { dg-error \"required from here\" }\n+  std::isalpha(make_str<char, 4>(), loc);\t// { dg-error \"required from here\" }\n+  std::isdigit(make_str<char, 5>(), loc);\t// { dg-error \"required from here\" }\n+  std::ispunct(make_str<char, 6>(), loc);\t// { dg-error \"required from here\" }\n+  std::isxdigit(make_str<char, 7>(), loc);\t// { dg-error \"required from here\" }\n+  std::isalnum(make_str<char, 8>(), loc);\t// { dg-error \"required from here\" }\n+  std::isgraph(make_str<char, 9>(), loc);\t// { dg-error \"required from here\" }\n+  std::isblank(make_str<char, 10>(), loc);\t// { dg-error \"required from here\" }\n+  std::toupper(make_str<char, 11>(), loc);\t// { dg-error \"required from here\" }\n+  std::tolower(make_str<char, 12>(), loc);\t// { dg-error \"required from here\" }\n+}\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+void test02()\n+{\n+  const std::locale& loc = std::locale::classic();\n+\n+  std::isspace(std::wstring(), loc);\t\t// { dg-error \"required from here\" }\n+  std::isprint(make_str<wchar_t, 0>(), loc);\t// { dg-error \"required from here\" }\n+  std::iscntrl(make_str<wchar_t, 1>(), loc);\t// { dg-error \"required from here\" }\n+  std::isupper(make_str<wchar_t, 2>(), loc);\t// { dg-error \"required from here\" }\n+  std::islower(make_str<wchar_t, 3>(), loc);\t// { dg-error \"required from here\" }\n+  std::isalpha(make_str<wchar_t, 4>(), loc);\t// { dg-error \"required from here\" }\n+  std::isdigit(make_str<wchar_t, 5>(), loc);\t// { dg-error \"required from here\" }\n+  std::ispunct(make_str<wchar_t, 6>(), loc);\t// { dg-error \"required from here\" }\n+  std::isxdigit(make_str<wchar_t, 7>(), loc);\t// { dg-error \"required from here\" }\n+  std::isalnum(make_str<wchar_t, 8>(), loc);\t// { dg-error \"required from here\" }\n+  std::isgraph(make_str<wchar_t, 9>(), loc);\t// { dg-error \"required from here\" }\n+  std::isblank(make_str<wchar_t, 10>(), loc);\t// { dg-error \"required from here\" }\n+  std::toupper(make_str<wchar_t, 11>(), loc);\t// { dg-error \"required from here\" }\n+  std::tolower(make_str<wchar_t, 12>(), loc);\t// { dg-error \"required from here\" }\n+}\n+#endif"}]}