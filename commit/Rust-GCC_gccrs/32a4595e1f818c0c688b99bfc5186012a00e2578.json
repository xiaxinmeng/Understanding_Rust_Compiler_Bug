{"sha": "32a4595e1f818c0c688b99bfc5186012a00e2578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJhNDU5NWUxZjgxOGMwYzY4OGI5OWJmYzUxODYwMTJhMDBlMjU3OA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@sourceware.cygnus.com", "date": "2000-05-11T19:52:00Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-05-11T19:52:00Z"}, "message": "acinclude.m4: Fix minor typo with ctypes...\n\n2000-05-11  Phil Edwards  <pme@sourceware.cygnus.com>\n\n\t* acinclude.m4:  Fix minor typo with ctypes, add more sanity to\n\t  enable-cxx-flags, and remove GLIBCPP_ENABLE_NAMESPACES altogether.\n\t* aclocal.m4:  Regenerate.\n\t* configure.in:  Non-blank arguments break fewer Linuxes.\n\t* configure:  Regenerate.\n\t* src/Makefile.am:  Re-order AC_CXXFLAGS components.\n\t* src/Makefile.in:  Regenerate.\n\nFrom-SVN: r33859", "tree": {"sha": "e5d76b961e67fc0b76efb200c8aa9ee0d9fba570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5d76b961e67fc0b76efb200c8aa9ee0d9fba570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32a4595e1f818c0c688b99bfc5186012a00e2578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a4595e1f818c0c688b99bfc5186012a00e2578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a4595e1f818c0c688b99bfc5186012a00e2578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a4595e1f818c0c688b99bfc5186012a00e2578/comments", "author": null, "committer": null, "parents": [{"sha": "b7976767161379223a40c191bb336c76f63670df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7976767161379223a40c191bb336c76f63670df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7976767161379223a40c191bb336c76f63670df"}], "stats": {"total": 130, "additions": 40, "deletions": 90}, "files": [{"sha": "a6f5d8dabce7d99ed7896fb1d525196ed49d2ac1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32a4595e1f818c0c688b99bfc5186012a00e2578", "patch": "@@ -1,3 +1,13 @@\n+2000-05-11  Phil Edwards  <pme@sourceware.cygnus.com>\n+\n+\t* acinclude.m4:  Fix minor typo with ctypes, add more sanity to\n+\t  enable-cxx-flags, and remove GLIBCPP_ENABLE_NAMESPACES altogether.\n+\t* aclocal.m4:  Regenerate.\n+\t* configure.in:  Non-blank arguments break fewer Linuxes.\n+\t* configure:  Regenerate.\n+\t* src/Makefile.am:  Re-order AC_CXXFLAGS components.\n+\t* src/Makefile.in:  Regenerate.\n+\n 2000-05-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* bits/std_cmath.h: Tweaks."}, {"sha": "99d7e94fee82c1f55260cdd462f87a94ba5d1e84", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 11, "deletions": 40, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=32a4595e1f818c0c688b99bfc5186012a00e2578", "patch": "@@ -350,7 +350,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n         ctype_default=no\n       else\n         ctype_include_dir=\"config/solaris/solaris2.7\"\n-        AC_MSG_RESULT(\"solaris2.[6,7]\")\n+        AC_MSG_RESULT(\"solaris2.[7,8]\")\n         ctype_default=no\n       fi\n     fi\n@@ -643,10 +643,12 @@ dnl     experimental flags such as -fhonor-std, -fsquangle, -Dfloat=char, etc.\n dnl     Somehow this same set of flags must be passed when [re]building\n dnl     libgcc.\n dnl --disable-cxx-flags passes nothing.\n-dnl  +  See <URL:>\n+dnl  +  See http://sourceware.cygnus.com/ml/libstdc++/2000-q2/msg00131.html\n+dnl         http://sourceware.cygnus.com/ml/libstdc++/2000-q2/msg00284.html\n+dnl         http://sourceware.cygnus.com/ml/libstdc++/2000-q1/msg00035.html\n dnl  +  Usage:  GLIBCPP_ENABLE_CXX_FLAGS(default flags)\n-dnl       If \"default flags\" is an empty string, the effect is the same\n-dnl       as --disable or --enable=no.\n+dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n+dnl       the same as --disable or --enable=no.\n AC_DEFUN(GLIBCPP_ENABLE_CXX_FLAGS, [dnl\n define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_ARG_ENABLE(cxx-flags,\n@@ -656,11 +658,14 @@ changequote(<<, >>)dnl\n changequote([, ])dnl\n [case \"x$enableval\" in\n  xyes)   AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n- xno|x)  enable_cxx_flags= ;;\n+ xno|x)  enable_cxx_flags='' ;;\n  *)      enable_cxx_flags=\"$enableval\" ;;\n  esac],\n enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')dnl\n-dnl Run through flags (either default or command-line) and set things.\n+dnl Thinko on my part during design.  This kludge is the workaround.\n+if test \"$enable_cxx_flags\" = \"none\"; then enable_cxx_flags=''; fi\n+dnl Run through flags (either default or command-line) and set anything\n+dnl extra (e.g., #defines) that must accompany particular g++ options.\n if test -n \"$enable_cxx_flags\"; then\n     for f in $enable_cxx_flags; do\n         case \"$f\" in\n@@ -676,40 +681,6 @@ AC_SUBST(EXTRA_CXX_FLAGS)\n ])\n \n \n-dnl\n-dnl Check for certain special build configurations.\n-dnl\n-dnl GLIBCPP_ENABLE_NAMESPACES\n-dnl --enable-namespaces sets '-fhonor-std' and \n-dnl --disable-namespaces sets '-fno-honor-std' (the macro should be\n-dnl     undefined by default in whatever.h.in).\n-dnl  +  Eventually, this will go away.\n-dnl  +  Usage:  GLIBCPP_ENABLE_NAMESPACES[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n-dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_NAMESPACES, [dnl\n-define([GLIBCPP_ENABLE_NAMESPACES_DEFAULT], ifelse($1, yes, yes, no))dnl\n-AC_ARG_ENABLE(namespaces,\n-changequote(<<, >>)dnl\n-<<  --enable-namespaces     turns on 'std' [default=>>GLIBCPP_ENABLE_NAMESPACES_DEFAULT],\n-changequote([, ])dnl\n-[case \"$enableval\" in\n- yes) enable_namespaces=yes ;;\n- no)  enable_namespaces=no ;;\n- *)   AC_MSG_ERROR([Unknown argument to enable/disable namespaces]) ;;\n- esac],\n-enable_namespaces=GLIBCPP_ENABLE_NAMESPACES_DEFAULT)dnl\n-dnl Option parsed, now set things appropriately\n-case \"$enable_namespaces\" in\n-    yes)  NAMESPACES='-fhonor-std'\n-          ;;\n-    no)   NAMESPACES='-fno-honor-std'\n-          ;;\n-esac\n-AC_SUBST(NAMESPACES)\n-])\n-\n-\n dnl\n dnl Check for instructions to automatically rebuild libgcc.a.  Requires,\n dnl of course, the location of the gcc objdir.  Note that if --disable-"}, {"sha": "5afad8524163ce4b2b3b2ac6f00c00a312326b7c", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 11, "deletions": 40, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=32a4595e1f818c0c688b99bfc5186012a00e2578", "patch": "@@ -362,7 +362,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n         ctype_default=no\n       else\n         ctype_include_dir=\"config/solaris/solaris2.7\"\n-        AC_MSG_RESULT(\"solaris2.[6,7]\")\n+        AC_MSG_RESULT(\"solaris2.[7,8]\")\n         ctype_default=no\n       fi\n     fi\n@@ -655,10 +655,12 @@ dnl     experimental flags such as -fhonor-std, -fsquangle, -Dfloat=char, etc.\n dnl     Somehow this same set of flags must be passed when [re]building\n dnl     libgcc.\n dnl --disable-cxx-flags passes nothing.\n-dnl  +  See <URL:>\n+dnl  +  See http://sourceware.cygnus.com/ml/libstdc++/2000-q2/msg00131.html\n+dnl         http://sourceware.cygnus.com/ml/libstdc++/2000-q2/msg00284.html\n+dnl         http://sourceware.cygnus.com/ml/libstdc++/2000-q1/msg00035.html\n dnl  +  Usage:  GLIBCPP_ENABLE_CXX_FLAGS(default flags)\n-dnl       If \"default flags\" is an empty string, the effect is the same\n-dnl       as --disable or --enable=no.\n+dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n+dnl       the same as --disable or --enable=no.\n AC_DEFUN(GLIBCPP_ENABLE_CXX_FLAGS, [dnl\n define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_ARG_ENABLE(cxx-flags,\n@@ -668,11 +670,14 @@ changequote(<<, >>)dnl\n changequote([, ])dnl\n [case \"x$enableval\" in\n  xyes)   AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n- xno|x)  enable_cxx_flags= ;;\n+ xno|x)  enable_cxx_flags='' ;;\n  *)      enable_cxx_flags=\"$enableval\" ;;\n  esac],\n enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')dnl\n-dnl Run through flags (either default or command-line) and set things.\n+dnl Thinko on my part during design.  This kludge is the workaround.\n+if test \"$enable_cxx_flags\" = \"none\"; then enable_cxx_flags=''; fi\n+dnl Run through flags (either default or command-line) and set anything\n+dnl extra (e.g., #defines) that must accompany particular g++ options.\n if test -n \"$enable_cxx_flags\"; then\n     for f in $enable_cxx_flags; do\n         case \"$f\" in\n@@ -688,40 +693,6 @@ AC_SUBST(EXTRA_CXX_FLAGS)\n ])\n \n \n-dnl\n-dnl Check for certain special build configurations.\n-dnl\n-dnl GLIBCPP_ENABLE_NAMESPACES\n-dnl --enable-namespaces sets '-fhonor-std' and \n-dnl --disable-namespaces sets '-fno-honor-std' (the macro should be\n-dnl     undefined by default in whatever.h.in).\n-dnl  +  Eventually, this will go away.\n-dnl  +  Usage:  GLIBCPP_ENABLE_NAMESPACES[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n-dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_NAMESPACES, [dnl\n-define([GLIBCPP_ENABLE_NAMESPACES_DEFAULT], ifelse($1, yes, yes, no))dnl\n-AC_ARG_ENABLE(namespaces,\n-changequote(<<, >>)dnl\n-<<  --enable-namespaces     turns on 'std' [default=>>GLIBCPP_ENABLE_NAMESPACES_DEFAULT],\n-changequote([, ])dnl\n-[case \"$enableval\" in\n- yes) enable_namespaces=yes ;;\n- no)  enable_namespaces=no ;;\n- *)   AC_MSG_ERROR([Unknown argument to enable/disable namespaces]) ;;\n- esac],\n-enable_namespaces=GLIBCPP_ENABLE_NAMESPACES_DEFAULT)dnl\n-dnl Option parsed, now set things appropriately\n-case \"$enable_namespaces\" in\n-    yes)  NAMESPACES='-fhonor-std'\n-          ;;\n-    no)   NAMESPACES='-fno-honor-std'\n-          ;;\n-esac\n-AC_SUBST(NAMESPACES)\n-])\n-\n-\n dnl\n dnl Check for instructions to automatically rebuild libgcc.a.  Requires,\n dnl of course, the location of the gcc objdir.  Note that if --disable-"}, {"sha": "a60ed9acbc398b1261ffab1c7a65325552eb1cc0", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=32a4595e1f818c0c688b99bfc5186012a00e2578", "patch": "@@ -43,7 +43,7 @@ ac_help=\"$ac_help\n   --enable-threads=LIB    use LIB thread package for target GCC.\"\n ac_help=\"$ac_help\n   --enable-cxx-flags=FLAGS      pass compiler FLAGS when building library;\n-                                [default=]\"\n+                                [default=none]\"\n \n # Initialize some variables set by options.\n # The variables have the same names as the options, with\n@@ -2452,19 +2452,19 @@ fi\n   \n   \n \n-#GLIBCPP_ENABLE_NAMESPACES(yes)\n #GLIBCPP_ENABLE_RELIBGCC([../..])\n # Check whether --enable-cxx-flags or --disable-cxx-flags was given.\n if test \"${enable_cxx_flags+set}\" = set; then\n   enableval=\"$enable_cxx_flags\"\n   case \"x$enableval\" in\n  xyes)   { echo \"configure: error: --enable-cxx-flags needs compiler flags as arguments\" 1>&2; exit 1; } ;;\n- xno|x)  enable_cxx_flags= ;;\n+ xno|x)  enable_cxx_flags='' ;;\n  *)      enable_cxx_flags=\"$enableval\" ;;\n  esac\n else\n-  enable_cxx_flags=''\n+  enable_cxx_flags='none'\n fi\n+if test \"$enable_cxx_flags\" = \"none\"; then enable_cxx_flags=''; fi\n if test -n \"$enable_cxx_flags\"; then\n     for f in $enable_cxx_flags; do\n         case \"$f\" in\n@@ -3621,7 +3621,7 @@ cross_compiling=$ac_cv_prog_cc_cross\n         ctype_default=no\n       else\n         ctype_include_dir=\"config/solaris/solaris2.7\"\n-        echo \"$ac_t\"\"\"solaris2.6,7\"\" 1>&6\n+        echo \"$ac_t\"\"\"solaris2.7,8\"\" 1>&6\n         ctype_default=no\n       fi\n     fi"}, {"sha": "3cec23f1f93e1e3dd741b913dd338747a625a44c", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=32a4595e1f818c0c688b99bfc5186012a00e2578", "patch": "@@ -29,9 +29,8 @@ GLIBCPP_ENABLE_DEBUG\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_LONG_LONG\n GLIBCPP_ENABLE_THREADS\n-#GLIBCPP_ENABLE_NAMESPACES(yes)\n #GLIBCPP_ENABLE_RELIBGCC([../..])\n-GLIBCPP_ENABLE_CXX_FLAGS([])\n+GLIBCPP_ENABLE_CXX_FLAGS([none])\n \n \n if test -n \"$with_cross_host\"; then"}, {"sha": "b83c7c70b93701b7bbfb452eda251ac739df25dc", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=32a4595e1f818c0c688b99bfc5186012a00e2578", "patch": "@@ -42,7 +42,7 @@ WERROR = -Werror\n #                      -fdata-sections -ffunction-sections \\\n #\t\t       -fvtable-gc -Wl,--gc-sections\n # AC_CXXFLAGS = @OPTLEVEL@ @CPUFLAGS@ @EXTRA_CXX_FLAGS@ @DEBUGFLAGS@ \n-AC_CXXFLAGS = @CPUFLAGS@ @DEBUGFLAGS@ \n+AC_CXXFLAGS = @CPUFLAGS@ @EXTRA_CXX_FLAGS@ @DEBUGFLAGS@\n AM_CXXFLAGS = -fno-implicit-templates \\\n \t      -Wall -Wno-format -W -Wwrite-strings -Winline $(WERROR) \\\n \t      $(OPTIMIZE_CXXFLAGS) $(AC_CXXFLAGS) "}, {"sha": "4c9c9f5ae3ace7b22f5c79433f2eef9f4fc8be0a", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a4595e1f818c0c688b99bfc5186012a00e2578/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=32a4595e1f818c0c688b99bfc5186012a00e2578", "patch": "@@ -85,7 +85,6 @@ LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n-NAMESPACES = @NAMESPACES@\n OBJDUMP = @OBJDUMP@\n OPTLEVEL = @OPTLEVEL@\n PACKAGE = @PACKAGE@\n@@ -120,7 +119,7 @@ WERROR = -Werror\n #                      -fdata-sections -ffunction-sections \\\n #\t\t       -fvtable-gc -Wl,--gc-sections\n # AC_CXXFLAGS = @OPTLEVEL@ @CPUFLAGS@ @EXTRA_CXX_FLAGS@ @DEBUGFLAGS@ \n-AC_CXXFLAGS = @CPUFLAGS@ @DEBUGFLAGS@ \n+AC_CXXFLAGS = @CPUFLAGS@ @EXTRA_CXX_FLAGS@ @DEBUGFLAGS@\n AM_CXXFLAGS = -fno-implicit-templates \\\n \t      -Wall -Wno-format -W -Wwrite-strings -Winline $(WERROR) \\\n \t      $(OPTIMIZE_CXXFLAGS) $(AC_CXXFLAGS) "}]}