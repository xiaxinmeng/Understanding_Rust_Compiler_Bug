{"sha": "514c9ddc9c86be9c7728382c5cac164f5ca29527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE0YzlkZGM5Yzg2YmU5Yzc3MjgzODJjNWNhYzE2NGY1Y2EyOTUyNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:52:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:52:31Z"}, "message": "adaint.h, adaint.c (__gnat_is_cross_compiler): New constant.\n\n\t* adaint.h, adaint.c (__gnat_is_cross_compiler): New constant.\n\t(Gnat_Install_Locks, __gnatlib_install_locks): Removed, no longer used.\n\t(convert_address): Update comments and list of platforms using this.\n\n\t* s-tasini.adb (Gnat_Install_Locks, __gnatlib_install_locks): Removed,\n\tno longer used.\n\nFrom-SVN: r106957", "tree": {"sha": "8de2d7a758b4c72527820d1727aff206e36216e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de2d7a758b4c72527820d1727aff206e36216e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/514c9ddc9c86be9c7728382c5cac164f5ca29527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/514c9ddc9c86be9c7728382c5cac164f5ca29527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/514c9ddc9c86be9c7728382c5cac164f5ca29527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/514c9ddc9c86be9c7728382c5cac164f5ca29527/comments", "author": null, "committer": null, "parents": [{"sha": "a7e4a88171b3d27988467de59d6173804c2f8bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e4a88171b3d27988467de59d6173804c2f8bc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e4a88171b3d27988467de59d6173804c2f8bc4"}], "stats": {"total": 56, "additions": 14, "deletions": 42}, "files": [{"sha": "d73665be1dab8ecaa5417fc9bef8b6a0534060f3", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/514c9ddc9c86be9c7728382c5cac164f5ca29527/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/514c9ddc9c86be9c7728382c5cac164f5ca29527/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=514c9ddc9c86be9c7728382c5cac164f5ca29527", "patch": "@@ -195,6 +195,13 @@ struct vstring\n #define DIR_SEPARATOR '/'\n #endif\n \n+/* Check for cross-compilation */\n+#ifdef CROSS_COMPILE\n+int __gnat_is_cross_compiler = 1;\n+#else\n+int __gnat_is_cross_compiler = 0;\n+#endif\n+\n char __gnat_dir_separator = DIR_SEPARATOR;\n \n char __gnat_path_separator = PATH_SEPARATOR;\n@@ -2535,8 +2542,10 @@ _flush_cache()\n #endif\n \n #if defined (CROSS_COMPILE)  \\\n-  || (! (defined (sparc) && defined (sun) && defined (__SVR4)) \\\n+  || (! ((defined (sparc) || defined (i386)) && defined (sun) \\\n+      && defined (__SVR4)) \\\n       && ! (defined (linux) && (defined (i386) || defined (__x86_64__))) \\\n+      && ! (defined (linux) && defined (__ia64__)) \\\n       && ! defined (__FreeBSD__) \\\n       && ! defined (__hpux__) \\\n       && ! defined (__APPLE__) \\\n@@ -2545,9 +2554,9 @@ _flush_cache()\n       && ! defined (__MINGW32__) \\\n       && ! (defined (__mips) && defined (__sgi)))\n \n-/* Dummy function to satisfy g-trasym.o.  Currently Solaris sparc, HP/UX,\n-   GNU/Linux x86{_64}, Tru64 & Windows provide a non-dummy version of this\n-   procedure in libaddr2line.a.  */\n+/* Dummy function to satisfy g-trasym.o. See the preprocessor conditional\n+   just above for a list of native platforms that provide a non-dummy\n+   version of this procedure in libaddr2line.a.  */\n \n void\n convert_addresses (void *addrs ATTRIBUTE_UNUSED,\n@@ -2629,27 +2638,6 @@ __gnat_copy_attribs (char *from, char *to, int mode)\n #endif\n }\n \n-/* This function is installed in libgcc.a.  */\n-extern void __gnat_install_locks (void (*) (void), void (*) (void));\n-\n-/* This function offers a hook for libgnarl to set the\n-   locking subprograms for libgcc_eh.\n-   This is only needed on OpenVMS, since other platforms use standard\n-   --enable-threads=posix option, or similar.  */\n-\n-void\n-__gnatlib_install_locks (void (*lock) (void) ATTRIBUTE_UNUSED,\n-                         void (*unlock) (void) ATTRIBUTE_UNUSED)\n-{\n-#if defined (IN_RTS) && defined (VMS)\n-  __gnat_install_locks (lock, unlock);\n-  /* There is a bootstrap path issue if adaint is build with this\n-     symbol unresolved for the stage1 compiler. Since the compiler\n-     does not use tasking, we simply make __gnatlib_install_locks\n-     a no-op in this case. */\n-#endif\n-}\n-\n int\n __gnat_lseek (int fd, long offset, int whence)\n {"}, {"sha": "70ee1d0a594f1624cf28858ebc5f59438ffc515b", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/514c9ddc9c86be9c7728382c5cac164f5ca29527/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/514c9ddc9c86be9c7728382c5cac164f5ca29527/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=514c9ddc9c86be9c7728382c5cac164f5ca29527", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2005 Free Software Foundation, Inc.          *\n+ *          Copyright (C) 1992-2005, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -164,10 +164,5 @@ extern void   __gnat_plist_init                    (void);\n /* This function returns the version of GCC being used.  Here it's GCC 3.  */\n extern int get_gcc_version\t\t     (void);\n \n-/* This function offers a hook for libgnarl to set the\n-   locking subprograms for libgcc_eh. */\n-extern void __gnatlib_install_locks\t     (void (*) (void),\n-                                          void (*) (void));\n-\n extern int __gnat_binder_supports_auto_init (void);\n extern int __gnat_sals_init_using_constructors (void);"}, {"sha": "63b47e7b9e754c7523d0ce70beb198583a64dd51", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/514c9ddc9c86be9c7728382c5cac164f5ca29527/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/514c9ddc9c86be9c7728382c5cac164f5ca29527/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=514c9ddc9c86be9c7728382c5cac164f5ca29527", "patch": "@@ -127,13 +127,6 @@ package body System.Tasking.Initialization is\n    -- Tasking Initialization --\n    ----------------------------\n \n-   procedure Gnat_Install_Locks (Lock, Unlock : SSL.No_Param_Proc);\n-   pragma Import (C, Gnat_Install_Locks, \"__gnatlib_install_locks\");\n-   --  Used by Init_RTS to install procedure Lock and Unlock for the\n-   --  thread locking. This has no effect on GCC 2. For GCC 3,\n-   --  it has an effect only if gcc is configured with\n-   --  --enable_threads=gnat.\n-\n    procedure Init_RTS;\n    --  This procedure completes the initialization of the GNARL. The first\n    --  part of the initialization is done in the body of System.Tasking.\n@@ -392,10 +385,6 @@ package body System.Tasking.Initialization is\n \n       SSL.Tasking.Init_Tasking_Soft_Links;\n \n-      --  Install tasking locks in the GCC runtime\n-\n-      Gnat_Install_Locks (Task_Lock'Access, Task_Unlock'Access);\n-\n       --  Abort is deferred in a new ATCB, so we need to undefer abort\n       --  at this stage to make the environment task abortable.\n "}]}