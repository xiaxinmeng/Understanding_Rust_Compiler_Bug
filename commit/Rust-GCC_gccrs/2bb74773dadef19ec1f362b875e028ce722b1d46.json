{"sha": "2bb74773dadef19ec1f362b875e028ce722b1d46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiNzQ3NzNkYWRlZjE5ZWMxZjM2MmI4NzVlMDI4Y2U3MjJiMWQ0Ng==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-11-23T02:07:13Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-11-23T02:07:13Z"}, "message": "toplev.c (rest_of_compilation): Fix comments.\n\n2002-11-22  Dale Johannesen  <dalej@apple.com>\n\n        * toplev.c (rest_of_compilation):  Fix comments.\n\nFrom-SVN: r59397", "tree": {"sha": "72c911a2461b54b18f97b439d5c7784c7591b30c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72c911a2461b54b18f97b439d5c7784c7591b30c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bb74773dadef19ec1f362b875e028ce722b1d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb74773dadef19ec1f362b875e028ce722b1d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb74773dadef19ec1f362b875e028ce722b1d46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb74773dadef19ec1f362b875e028ce722b1d46/comments", "author": null, "committer": null, "parents": [{"sha": "199cbacc9083bdb7d02bae97a2986a213e4a8929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199cbacc9083bdb7d02bae97a2986a213e4a8929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199cbacc9083bdb7d02bae97a2986a213e4a8929"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "60a061a42ff96c7d27759f5275534a80a83fa3b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb74773dadef19ec1f362b875e028ce722b1d46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb74773dadef19ec1f362b875e028ce722b1d46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bb74773dadef19ec1f362b875e028ce722b1d46", "patch": "@@ -1,3 +1,7 @@\n+2002-11-22  Dale Johannesen  <dalej@apple.com>\n+\n+        * toplev.c (rest_of_compilation):  Fix comments.\n+\n 2002-11-22  Geoffrey Keating  <geoffk@apple.com>\n \n \t* aclocal.m4 (ac_cv_func_mmap_dev_zero): Darwin does not"}, {"sha": "33f668b2407c4bfde8d446cd7829554bb87908b6", "filename": "gcc/toplev.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb74773dadef19ec1f362b875e028ce722b1d46/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb74773dadef19ec1f362b875e028ce722b1d46/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2bb74773dadef19ec1f362b875e028ce722b1d46", "patch": "@@ -2479,10 +2479,11 @@ rest_of_compilation (decl)\n       convert_from_eh_region_ranges ();\n \n       /* If function is inline, and we don't yet know whether to\n-\t compile it by itself, defer decision till end of compilation.\n-\t finish_compilation will call rest_of_compilation again\n-\t for those functions that need to be output.  Also defer those\n-\t functions that we are supposed to defer.  */\n+         compile it by itself, defer decision till end of compilation.\n+         wrapup_global_declarations will (indirectly) call\n+         rest_of_compilation again for those functions that need to\n+         be output.  Also defer those functions that we are supposed\n+         to defer.  */\n \n       if (inlinable\n \t  || (DECL_INLINE (decl)\n@@ -3607,9 +3608,10 @@ rest_of_compilation (decl)\n      know for certain that we will be generating an out-of-line copy,\n      the first invocation of this routine (rest_of_compilation) will\n      skip over this code by doing a `goto exit_rest_of_compilation;'.\n-     Later on, finish_compilation will call rest_of_compilation again\n-     for those inline functions that need to have out-of-line copies\n-     generated.  During that call, we *will* be routed past here.  */\n+     Later on, wrapup_global_declarations will (indirectly) call\n+     rest_of_compilation again for those inline functions that need\n+     to have out-of-line copies generated.  During that call, we\n+     *will* be routed past here.  */\n \n   timevar_push (TV_SYMOUT);\n   (*debug_hooks->function_decl) (decl);"}]}