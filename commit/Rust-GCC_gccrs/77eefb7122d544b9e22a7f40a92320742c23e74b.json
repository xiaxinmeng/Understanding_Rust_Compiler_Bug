{"sha": "77eefb7122d544b9e22a7f40a92320742c23e74b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdlZWZiNzEyMmQ1NDRiOWUyMmE3ZjQwYTkyMzIwNzQyYzIzZTc0Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-02T06:38:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-02T06:38:36Z"}, "message": "re PR tree-optimization/81633 (Incorrect floating point result with tree vectoriser)\n\n2017-08-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81633\n\tRevert\n\t2015-08-17  Alan Hayward  <alan.hayward@arm.com>\n\n\tPR tree-optimization/71752\n\t* tree-vect-slp.c (vect_get_slp_defs): Handle null operands.\n\n\t* gcc.dg/vect/pr81633.c: New testcase.\n\nFrom-SVN: r250811", "tree": {"sha": "3fe8896c28c473fc15dff71f0a24611cf411b4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fe8896c28c473fc15dff71f0a24611cf411b4a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77eefb7122d544b9e22a7f40a92320742c23e74b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eefb7122d544b9e22a7f40a92320742c23e74b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77eefb7122d544b9e22a7f40a92320742c23e74b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eefb7122d544b9e22a7f40a92320742c23e74b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cade047f198bac6ef399a7b4dae95722b6b7b869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cade047f198bac6ef399a7b4dae95722b6b7b869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cade047f198bac6ef399a7b4dae95722b6b7b869"}], "stats": {"total": 104, "additions": 73, "deletions": 31}, "files": [{"sha": "574745f792157117acf297b7a1389b9ff8a043ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eefb7122d544b9e22a7f40a92320742c23e74b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eefb7122d544b9e22a7f40a92320742c23e74b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77eefb7122d544b9e22a7f40a92320742c23e74b", "patch": "@@ -1,3 +1,12 @@\n+2017-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81633\n+\tRevert\n+\t2015-08-17  Alan Hayward  <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71752\n+\t* tree-vect-slp.c (vect_get_slp_defs): Handle null operands.\n+\n 2017-08-01  Daniel Santos  <daniel.santos@pobox.com>\n \n \t* config/i386/i386.h (ix86_frame::outlined_save_offset): Remove field."}, {"sha": "4e126f073f0bc4e35c4437d639fab60bf6fe7d87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eefb7122d544b9e22a7f40a92320742c23e74b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eefb7122d544b9e22a7f40a92320742c23e74b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77eefb7122d544b9e22a7f40a92320742c23e74b", "patch": "@@ -1,3 +1,8 @@\n+2017-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81633\n+\t* gcc.dg/vect/pr81633.c: New testcase.\n+\n 2017-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/guality/pr25967-3.c: New test."}, {"sha": "1ae15504e8185a75e16d77db600c5db92c15110f", "filename": "gcc/testsuite/gcc.dg/vect/pr81633.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eefb7122d544b9e22a7f40a92320742c23e74b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81633.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eefb7122d544b9e22a7f40a92320742c23e74b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81633.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81633.c?ref=77eefb7122d544b9e22a7f40a92320742c23e74b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+static double identity[4][4] = {{1, 0, 0, 0},\n+                                {0, 1, 0, 0},\n+                                {0, 0, 1, 0},\n+                                {0, 0, 0, 1}};\n+static double expected[4][4] = {{1, 0, 0, 0},\n+                                {0, 0, 0, 0},\n+                                {0, 0, 0, 0},\n+                                {0, 0, 0, 0}};\n+\n+static void __attribute__((noinline,noclone))\n+kernel(double A[4][4])\n+{\n+  double tmp[4][4];\n+  for (int j = 0; j < 4; j++)\n+    for (int k = 0; k < 4; k++)\n+      tmp[j][k] = identity[j][0] * identity[j][k];\n+  for (int j = 0; j < 4; j++ )\n+    for (int k = 0; k < 4; k++)\n+      A[j][k] = tmp[j][k];\n+}\n+\n+int main(void)\n+{\n+  double A[4][4] = {{0.0}};\n+  kernel(A);\n+  for ( int i = 0; i < 4; i++ )\n+    for ( int j = 0; j < 4; j++ )\n+      if (A[i][j] != expected[i][j])\n+\t__builtin_abort ();\n+  return 0;\n+}"}, {"sha": "032a9444a5a92db284d4258c1ba13bb07d1e6f30", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eefb7122d544b9e22a7f40a92320742c23e74b/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eefb7122d544b9e22a7f40a92320742c23e74b/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=77eefb7122d544b9e22a7f40a92320742c23e74b", "patch": "@@ -3325,32 +3325,24 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n {\n   gimple *first_stmt;\n   int number_of_vects = 0, i;\n+  unsigned int child_index = 0;\n   HOST_WIDE_INT lhs_size_unit, rhs_size_unit;\n   slp_tree child = NULL;\n   vec<tree> vec_defs;\n   tree oprnd;\n-  bool first_iteration = true;\n+  bool vectorized_defs;\n \n   first_stmt = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n   FOR_EACH_VEC_ELT (ops, i, oprnd)\n     {\n-      bool vectorized_defs = false;\n-\n-      if (oprnd == NULL)\n-\t{\n-\t  vec_defs = vNULL;\n-\t  vec_defs.create (0);\n-\t  vec_oprnds->quick_push (vec_defs);\n-\t  continue;\n-\t}\n-\n       /* For each operand we check if it has vectorized definitions in a child\n \t node or we need to create them (for invariants and constants).  We\n \t check if the LHS of the first stmt of the next child matches OPRND.\n \t If it does, we found the correct child.  Otherwise, we call\n-\t vect_get_constant_vectors ().  */\n-      for (unsigned int child_index = 0;\n-\t   child_index < SLP_TREE_CHILDREN (slp_node).length (); child_index++)\n+\t vect_get_constant_vectors (), and not advance CHILD_INDEX in order\n+\t to check this child node for the next operand.  */\n+      vectorized_defs = false;\n+      if (SLP_TREE_CHILDREN (slp_node).length () > child_index)\n         {\n           child = SLP_TREE_CHILDREN (slp_node)[child_index];\n \n@@ -3375,25 +3367,30 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n \t\t     statements.  */\n \t\t  number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (child);\n \t\t  vectorized_defs = true;\n-\t\t  break;\n+\t\t  child_index++;\n \t\t}\n \t    }\n+\t  else\n+\t    child_index++;\n         }\n \n-      if (!vectorized_defs && first_iteration)\n-\t{\n-\t  number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n-\t  /* Number of vector stmts was calculated according to LHS in\n-\t     vect_schedule_slp_instance (), fix it by replacing LHS with\n-\t     RHS, if necessary.  See vect_get_smallest_scalar_type () for\n-\t     details.  */\n-\t  vect_get_smallest_scalar_type (first_stmt, &lhs_size_unit,\n-\t\t\t\t\t &rhs_size_unit);\n-\t  if (rhs_size_unit != lhs_size_unit)\n-\t    {\n-\t      number_of_vects *= rhs_size_unit;\n-\t      number_of_vects /= lhs_size_unit;\n-\t    }\n+      if (!vectorized_defs)\n+        {\n+          if (i == 0)\n+            {\n+              number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n+              /* Number of vector stmts was calculated according to LHS in\n+                 vect_schedule_slp_instance (), fix it by replacing LHS with\n+                 RHS, if necessary.  See vect_get_smallest_scalar_type () for\n+                 details.  */\n+              vect_get_smallest_scalar_type (first_stmt, &lhs_size_unit,\n+                                             &rhs_size_unit);\n+              if (rhs_size_unit != lhs_size_unit)\n+                {\n+                  number_of_vects *= rhs_size_unit;\n+                  number_of_vects /= lhs_size_unit;\n+                }\n+            }\n         }\n \n       /* Allocate memory for vectorized defs.  */\n@@ -3411,8 +3408,6 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n \t\t\t\t   number_of_vects);\n \n       vec_oprnds->quick_push (vec_defs);\n-\n-      first_iteration = false;\n     }\n }\n "}]}