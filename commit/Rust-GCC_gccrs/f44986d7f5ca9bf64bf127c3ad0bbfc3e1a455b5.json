{"sha": "f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0OTg2ZDdmNWNhOWJmNjRiZjEyN2MzYWQwYmJmYzNlMWE0NTViNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-12-08T17:29:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-12-08T17:29:41Z"}, "message": "Introduce emit_status::ensure_regno_capacity\n\ngcc/ChangeLog:\n\t* emit-rtl.c (gen_reg_rtx): Move regno_pointer_align and\n\tregno_reg_rtx resizing logic to...\n\t(emit_status::ensure_regno_capacity): ...this new method,\n\tand ensure that the buffers are large enough.\n\t(init_emit): Allocate regno_reg_rtx using ggc_cleared_vec_alloc\n\trather than ggc_vec_alloc.\n\t* function.h (emit_status::ensure_regno_capacity): New method.\n\nFrom-SVN: r243447", "tree": {"sha": "a23200b834f738cfc61200508915eb2c2d0f15cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a23200b834f738cfc61200508915eb2c2d0f15cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "453060a9062959ceb1522b8b99adeb01b2a3f7b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453060a9062959ceb1522b8b99adeb01b2a3f7b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453060a9062959ceb1522b8b99adeb01b2a3f7b7"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "6ada9cdf598e937fd4db95e3425ce46700c86a27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "patch": "@@ -1,3 +1,13 @@\n+2016-12-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* emit-rtl.c (gen_reg_rtx): Move regno_pointer_align and\n+\tregno_reg_rtx resizing logic to...\n+\t(emit_status::ensure_regno_capacity): ...this new method,\n+\tand ensure that the buffers are large enough.\n+\t(init_emit): Allocate regno_reg_rtx using ggc_cleared_vec_alloc\n+\trather than ggc_vec_alloc.\n+\t* function.h (emit_status::ensure_regno_capacity): New method.\n+\n 2016-12-08  Dmitry Vyukov  <dvyukov@google.com>\n \n \t* opts.c (finish_options): Enable"}, {"sha": "7de17454037ec17de8466c044696739272739abe", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "patch": "@@ -1057,29 +1057,38 @@ gen_reg_rtx (machine_mode mode)\n   /* Do not call gen_reg_rtx with uninitialized crtl.  */\n   gcc_assert (crtl->emit.regno_pointer_align_length);\n \n-  /* Make sure regno_pointer_align, and regno_reg_rtx are large\n-     enough to have an element for this pseudo reg number.  */\n+  crtl->emit.ensure_regno_capacity ();\n+  gcc_assert (reg_rtx_no < crtl->emit.regno_pointer_align_length);\n \n-  if (reg_rtx_no == crtl->emit.regno_pointer_align_length)\n-    {\n-      int old_size = crtl->emit.regno_pointer_align_length;\n-      char *tmp;\n-      rtx *new1;\n+  val = gen_raw_REG (mode, reg_rtx_no);\n+  regno_reg_rtx[reg_rtx_no++] = val;\n+  return val;\n+}\n \n-      tmp = XRESIZEVEC (char, crtl->emit.regno_pointer_align, old_size * 2);\n-      memset (tmp + old_size, 0, old_size);\n-      crtl->emit.regno_pointer_align = (unsigned char *) tmp;\n+/* Make sure m_regno_pointer_align, and regno_reg_rtx are large\n+   enough to have elements in the range 0 <= idx <= reg_rtx_no.  */\n \n-      new1 = GGC_RESIZEVEC (rtx, regno_reg_rtx, old_size * 2);\n-      memset (new1 + old_size, 0, old_size * sizeof (rtx));\n-      regno_reg_rtx = new1;\n+void\n+emit_status::ensure_regno_capacity ()\n+{\n+  int old_size = regno_pointer_align_length;\n \n-      crtl->emit.regno_pointer_align_length = old_size * 2;\n-    }\n+  if (reg_rtx_no < old_size)\n+    return;\n \n-  val = gen_raw_REG (mode, reg_rtx_no);\n-  regno_reg_rtx[reg_rtx_no++] = val;\n-  return val;\n+  int new_size = old_size * 2;\n+  while (reg_rtx_no >= new_size)\n+    new_size *= 2;\n+\n+  char *tmp = XRESIZEVEC (char, regno_pointer_align, new_size);\n+  memset (tmp + old_size, 0, new_size - old_size);\n+  regno_pointer_align = (unsigned char *) tmp;\n+\n+  rtx *new1 = GGC_RESIZEVEC (rtx, regno_reg_rtx, new_size);\n+  memset (new1 + old_size, 0, (new_size - old_size) * sizeof (rtx));\n+  regno_reg_rtx = new1;\n+\n+  crtl->emit.regno_pointer_align_length = new_size;\n }\n \n /* Return TRUE if REG is a PARM_DECL, FALSE otherwise.  */\n@@ -5671,7 +5680,8 @@ init_emit (void)\n   crtl->emit.regno_pointer_align\n     = XCNEWVEC (unsigned char, crtl->emit.regno_pointer_align_length);\n \n-  regno_reg_rtx = ggc_vec_alloc<rtx> (crtl->emit.regno_pointer_align_length);\n+  regno_reg_rtx\n+    = ggc_cleared_vec_alloc<rtx> (crtl->emit.regno_pointer_align_length);\n \n   /* Put copies of all the hard registers into regno_reg_rtx.  */\n   memcpy (regno_reg_rtx,"}, {"sha": "a35c41169cfd32706e85471150bfac02cfe97408", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=f44986d7f5ca9bf64bf127c3ad0bbfc3e1a455b5", "patch": "@@ -34,6 +34,8 @@ struct GTY(()) sequence_stack {\n };\n \f\n struct GTY(()) emit_status {\n+  void ensure_regno_capacity ();\n+\n   /* This is reset to LAST_VIRTUAL_REGISTER + 1 at the start of each function.\n      After rtl generation, it is 1 plus the largest register number used.  */\n   int x_reg_rtx_no;"}]}