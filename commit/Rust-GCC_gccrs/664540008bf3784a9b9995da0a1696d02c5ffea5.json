{"sha": "664540008bf3784a9b9995da0a1696d02c5ffea5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0NTQwMDA4YmYzNzg0YTliOTk5NWRhMGExNjk2ZDAyYzVmZmVhNQ==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-09-21T03:28:24Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-09-21T03:28:24Z"}, "message": "Incorrect arithmetic optimization involving bitfield arguments\n\ngcc/ChangeLog:\n\n2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR tree-optimization/72835\n\t* tree-ssa-reassoc.c (make_new_ssa_for_def): New.\n\t(make_new_ssa_for_all_defs): Likewise.\n\t(zero_one_operation): Replace all SSA_NAMEs defined in the chain.\n\n\ngcc/testsuite/ChangeLog:\n\n2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR tree-optimization/72835\n\t* gcc.dg/tree-ssa/pr72835.c: New test.\n\nFrom-SVN: r240299", "tree": {"sha": "4d1a86951ab4c6c41b78407d8ec0bacde7be22ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d1a86951ab4c6c41b78407d8ec0bacde7be22ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664540008bf3784a9b9995da0a1696d02c5ffea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664540008bf3784a9b9995da0a1696d02c5ffea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664540008bf3784a9b9995da0a1696d02c5ffea5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664540008bf3784a9b9995da0a1696d02c5ffea5/comments", "author": null, "committer": null, "parents": [{"sha": "88d0c3f0a1448e71dcf49c2f34909ec8d7ce348f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d0c3f0a1448e71dcf49c2f34909ec8d7ce348f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d0c3f0a1448e71dcf49c2f34909ec8d7ce348f"}], "stats": {"total": 129, "additions": 121, "deletions": 8}, "files": [{"sha": "faa7fb2d8d1327f76575d26f96a11bd7c46cec79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664540008bf3784a9b9995da0a1696d02c5ffea5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664540008bf3784a9b9995da0a1696d02c5ffea5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=664540008bf3784a9b9995da0a1696d02c5ffea5", "patch": "@@ -1,3 +1,10 @@\n+2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR tree-optimization/72835\n+\t* tree-ssa-reassoc.c (make_new_ssa_for_def): New.\n+\t(make_new_ssa_for_all_defs): Likewise.\n+\t(zero_one_operation): Replace all SSA_NAMEs defined in the chain.\n+\n 2016-09-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/49905"}, {"sha": "e05a76e4c18e1c59d0bb30d9eaafc4ada76d4caa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664540008bf3784a9b9995da0a1696d02c5ffea5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664540008bf3784a9b9995da0a1696d02c5ffea5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=664540008bf3784a9b9995da0a1696d02c5ffea5", "patch": "@@ -1,3 +1,8 @@\n+2016-09-21  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR tree-optimization/72835\n+\t* gcc.dg/tree-ssa/pr72835.c: New test.\n+\n 2016-09-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/49905"}, {"sha": "468e0f02fcbceb04a6858a6e7721783057d83dde", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr72835.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664540008bf3784a9b9995da0a1696d02c5ffea5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72835.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664540008bf3784a9b9995da0a1696d02c5ffea5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72835.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72835.c?ref=664540008bf3784a9b9995da0a1696d02c5ffea5", "patch": "@@ -0,0 +1,37 @@\n+/* PR tree-optimization/72835.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target int32plus } */\n+\n+struct struct_1 {\n+    unsigned int m1 : 6 ;\n+    unsigned int m2 : 24 ;\n+    unsigned int m3 : 6 ;\n+};\n+\n+unsigned short var_32 = 0x2d10;\n+\n+struct struct_1 s1;\n+\n+void init ()\n+{\n+  s1.m1 = 4;\n+  s1.m2 = 0x7ca4b8;\n+  s1.m3 = 24;\n+}\n+\n+void foo ()\n+{\n+  unsigned int c\n+    = ((unsigned int) s1.m2) * (-((unsigned int) s1.m3))\n+    + (var_32) * (-((unsigned int) (s1.m1)));\n+  if (c != 4098873984)\n+    __builtin_abort ();\n+}\n+\n+int main ()\n+{\n+    init ();\n+    foo ();\n+    return 0;\n+}"}, {"sha": "8fc76e4fb6fe5af19e667931645c7e7db9569f0d", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 72, "deletions": 8, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664540008bf3784a9b9995da0a1696d02c5ffea5/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664540008bf3784a9b9995da0a1696d02c5ffea5/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=664540008bf3784a9b9995da0a1696d02c5ffea5", "patch": "@@ -1148,6 +1148,52 @@ decrement_power (gimple *stmt)\n     }\n }\n \n+/* Replace SSA defined by STMT and replace all its uses with new\n+   SSA.  Also return the new SSA.  */\n+\n+static tree\n+make_new_ssa_for_def (gimple *stmt)\n+{\n+  gimple *use_stmt;\n+  use_operand_p use;\n+  imm_use_iterator iter;\n+  tree new_lhs;\n+  tree lhs = gimple_assign_lhs (stmt);\n+\n+  new_lhs = make_ssa_name (TREE_TYPE (lhs));\n+  gimple_set_lhs (stmt, new_lhs);\n+\n+  /* Also need to update GIMPLE_DEBUGs.  */\n+  FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n+    {\n+      FOR_EACH_IMM_USE_ON_STMT (use, iter)\n+\tSET_USE (use, new_lhs);\n+      update_stmt (use_stmt);\n+    }\n+  return new_lhs;\n+}\n+\n+/* Replace all SSAs defined in STMTS_TO_FIX and replace its\n+   uses with new SSAs.  Also do this for the stmt that defines DEF\n+   if *DEF is not OP.  */\n+\n+static void\n+make_new_ssa_for_all_defs (tree *def, tree op,\n+\t\t\t   vec<gimple *> &stmts_to_fix)\n+{\n+  unsigned i;\n+  gimple *stmt;\n+\n+  if (*def != op\n+      && TREE_CODE (*def) == SSA_NAME\n+      && (stmt = SSA_NAME_DEF_STMT (*def))\n+      && gimple_code (stmt) != GIMPLE_NOP)\n+    *def = make_new_ssa_for_def (stmt);\n+\n+  FOR_EACH_VEC_ELT (stmts_to_fix, i, stmt)\n+    make_new_ssa_for_def (stmt);\n+}\n+\n /* Find the single immediate use of STMT's LHS, and replace it\n    with OP.  Remove STMT.  If STMT's LHS is the same as *DEF,\n    replace *DEF with OP as well.  */\n@@ -1186,6 +1232,9 @@ static void\n zero_one_operation (tree *def, enum tree_code opcode, tree op)\n {\n   gimple *stmt = SSA_NAME_DEF_STMT (*def);\n+  /* PR72835 - Record the stmt chain that has to be updated such that\n+     we dont use the same LHS when the values computed are different.  */\n+  auto_vec<gimple *, 64> stmts_to_fix;\n \n   do\n     {\n@@ -1196,23 +1245,29 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n \t  if (stmt_is_power_of_op (stmt, op))\n \t    {\n \t      if (decrement_power (stmt) == 1)\n-\t\tpropagate_op_to_single_use (op, stmt, def);\n-\t      return;\n+\t\t{\n+\t\t  if (stmts_to_fix.length () > 0)\n+\t\t    stmts_to_fix.pop ();\n+\t\t  propagate_op_to_single_use (op, stmt, def);\n+\t\t}\n+\t      break;\n \t    }\n \t  else if (gimple_assign_rhs_code (stmt) == NEGATE_EXPR)\n \t    {\n \t      if (gimple_assign_rhs1 (stmt) == op)\n \t\t{\n \t\t  tree cst = build_minus_one_cst (TREE_TYPE (op));\n+\t\t  if (stmts_to_fix.length () > 0)\n+\t\t    stmts_to_fix.pop ();\n \t\t  propagate_op_to_single_use (cst, stmt, def);\n-\t\t  return;\n+\t\t  break;\n \t\t}\n \t      else if (integer_minus_onep (op)\n \t\t       || real_minus_onep (op))\n \t\t{\n \t\t  gimple_assign_set_rhs_code\n \t\t    (stmt, TREE_CODE (gimple_assign_rhs1 (stmt)));\n-\t\t  return;\n+\t\t  break;\n \t\t}\n \t    }\n \t}\n@@ -1228,8 +1283,10 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n \t{\n \t  if (name == op)\n \t    name = gimple_assign_rhs2 (stmt);\n+\t  if (stmts_to_fix.length () > 0)\n+\t    stmts_to_fix.pop ();\n \t  propagate_op_to_single_use (name, stmt, def);\n-\t  return;\n+\t  break;\n \t}\n \n       /* We might have a multiply of two __builtin_pow* calls, and\n@@ -1245,7 +1302,9 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n \t    {\n \t      if (decrement_power (stmt2) == 1)\n \t\tpropagate_op_to_single_use (op, stmt2, def);\n-\t      return;\n+\t      else\n+\t\tstmts_to_fix.safe_push (stmt2);\n+\t      break;\n \t    }\n \t  else if (is_gimple_assign (stmt2)\n \t\t   && gimple_assign_rhs_code (stmt2) == NEGATE_EXPR)\n@@ -1254,14 +1313,15 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n \t\t{\n \t\t  tree cst = build_minus_one_cst (TREE_TYPE (op));\n \t\t  propagate_op_to_single_use (cst, stmt2, def);\n-\t\t  return;\n+\t\t  break;\n \t\t}\n \t      else if (integer_minus_onep (op)\n \t\t       || real_minus_onep (op))\n \t\t{\n+\t\t  stmts_to_fix.safe_push (stmt2);\n \t\t  gimple_assign_set_rhs_code\n \t\t    (stmt2, TREE_CODE (gimple_assign_rhs1 (stmt2)));\n-\t\t  return;\n+\t\t  break;\n \t\t}\n \t    }\n \t}\n@@ -1270,8 +1330,12 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n       gcc_assert (name != op\n \t\t  && TREE_CODE (name) == SSA_NAME);\n       stmt = SSA_NAME_DEF_STMT (name);\n+      stmts_to_fix.safe_push (stmt);\n     }\n   while (1);\n+\n+  if (stmts_to_fix.length () > 0)\n+    make_new_ssa_for_all_defs (def, op, stmts_to_fix);\n }\n \n /* Returns true if statement S1 dominates statement S2.  Like"}]}