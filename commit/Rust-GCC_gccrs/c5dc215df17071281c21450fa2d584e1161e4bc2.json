{"sha": "c5dc215df17071281c21450fa2d584e1161e4bc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVkYzIxNWRmMTcwNzEyODFjMjE0NTBmYTJkNTg0ZTExNjFlNGJjMg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-10-21T10:52:05Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-10-21T10:52:05Z"}, "message": "[AArch64] Implement __rndr, __rndrrs intrinsics\n\nThis patch implements the recently published[1] __rndr and __rndrrs\nintrinsics used to access the RNG in Armv8.5-A.\nThe __rndrrs intrinsics can be used to reseed the generator too.\nThey are guarded by the __ARM_FEATURE_RNG feature macro.\nA quirk with these intrinsics is that they store the random number in\ntheir pointer argument and return a status\ncode if the generation succeeded.\n\nThe instructions themselves write the CC flags indicating the success of\nthe operation that we can then read with a CSET.\nTherefore this implementation makes use of the IGNORE indicator to the\nbuiltin expand machinery to avoid generating\nthe CSET if its result is unused (the CC reg clobbering effect is still\nreflected in the pattern).\nI've checked that using unspec_volatile prevents undesirable CSEing of\nthe instructions.\n\n[1] https://developer.arm.com/docs/101028/latest/data-processing-intrinsics\n\n\t* config/aarch64/aarch64.md (UNSPEC_RNDR, UNSPEC_RNDRRS): Define.\n\t(aarch64_rndr): New define_insn.\n\t(aarch64_rndrrs): Likewise.\n\t* config/aarch64/aarch64.h (AARCH64_ISA_RNG): Define.\n\t(TARGET_RNG): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_expand_builtin): Use IGNORE\n\targument.\n\t* config/aarch64/aarch64-protos.h (aarch64_general_expand_builtin):\n\tAdd fourth argument in prototype.\n\t* config/aarch64/aarch64-builtins.c (enum aarch64_builtins):\n\tAdd AARCH64_BUILTIN_RNG_RNDR, AARCH64_BUILTIN_RNG_RNDRRS.\n\t(aarch64_init_rng_builtins): Define.\n\t(aarch64_general_init_builtins): Call aarch64_init_rng_builtins.\n\t(aarch64_expand_rng_builtin): Define.\n\t(aarch64_general_expand_builtin): Use IGNORE argument, handle\n\tRNG builtins.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n\t__ARM_FEATURE_RNG when TARGET_RNG.\n\t* config/aarch64/arm_acle.h (__rndr, __rndrrs): Define.\n\n\t* gcc.target/aarch64/acle/rng_1.c: New test.\n\nFrom-SVN: r277239", "tree": {"sha": "ae4c078efd18d3c65eb5c99069be8ec3d543b73f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae4c078efd18d3c65eb5c99069be8ec3d543b73f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5dc215df17071281c21450fa2d584e1161e4bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5dc215df17071281c21450fa2d584e1161e4bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5dc215df17071281c21450fa2d584e1161e4bc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5dc215df17071281c21450fa2d584e1161e4bc2/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2db7f790194ac690beae00f2f7956e3fe865cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2db7f790194ac690beae00f2f7956e3fe865cac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2db7f790194ac690beae00f2f7956e3fe865cac"}], "stats": {"total": 195, "additions": 190, "deletions": 5}, "files": [{"sha": "b274478d1f1ace029173f2959dd735e96e247174", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -1,3 +1,25 @@\n+2019-10-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (UNSPEC_RNDR, UNSPEC_RNDRRS): Define.\n+\t(aarch64_rndr): New define_insn.\n+\t(aarch64_rndrrs): Likewise.\n+\t* config/aarch64/aarch64.h (AARCH64_ISA_RNG): Define.\n+\t(TARGET_RNG): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_expand_builtin): Use IGNORE\n+\targument.\n+\t* config/aarch64/aarch64-protos.h (aarch64_general_expand_builtin):\n+\tAdd fourth argument in prototype.\n+\t* config/aarch64/aarch64-builtins.c (enum aarch64_builtins):\n+\tAdd AARCH64_BUILTIN_RNG_RNDR, AARCH64_BUILTIN_RNG_RNDRRS.\n+\t(aarch64_init_rng_builtins): Define.\n+\t(aarch64_general_init_builtins): Call aarch64_init_rng_builtins.\n+\t(aarch64_expand_rng_builtin): Define.\n+\t(aarch64_general_expand_builtin): Use IGNORE argument, handle\n+\tRNG builtins.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n+\t__ARM_FEATURE_RNG when TARGET_RNG.\n+\t* config/aarch64/arm_acle.h (__rndr, __rndrrs): Define.\n+\n 2019-10-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* tree-vect-stmts (ensure_base_align): Only change alignment if new"}, {"sha": "23a0db4f74f56c48b0d0c34d5ac61e5d8334bc43", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -445,6 +445,9 @@ enum aarch64_builtins\n   AARCH64_TME_BUILTIN_TCOMMIT,\n   AARCH64_TME_BUILTIN_TTEST,\n   AARCH64_TME_BUILTIN_TCANCEL,\n+  /* Armv8.5-a RNG instruction builtins.  */\n+  AARCH64_BUILTIN_RNG_RNDR,\n+  AARCH64_BUILTIN_RNG_RNDRRS,\n   AARCH64_BUILTIN_MAX\n };\n \n@@ -1111,7 +1114,25 @@ aarch64_init_tme_builtins (void)\n \t\t\t\t   AARCH64_TME_BUILTIN_TCANCEL);\n }\n \n+/* Add builtins for Random Number instructions.  */\n+\n+static void\n+aarch64_init_rng_builtins (void)\n+{\n+  tree unsigned_ptr_type = build_pointer_type (unsigned_intDI_type_node);\n+  tree ftype\n+    = build_function_type_list (integer_type_node, unsigned_ptr_type, NULL);\n+  aarch64_builtin_decls[AARCH64_BUILTIN_RNG_RNDR]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_rndr\", ftype,\n+\t\t\t\t   AARCH64_BUILTIN_RNG_RNDR);\n+  aarch64_builtin_decls[AARCH64_BUILTIN_RNG_RNDRRS]\n+    = aarch64_general_add_builtin (\"__builtin_aarch64_rndrrs\", ftype,\n+\t\t\t\t   AARCH64_BUILTIN_RNG_RNDRRS);\n+}\n+\n+\n /* Initialize all builtins in the AARCH64_BUILTIN_GENERAL group.  */\n+\n void\n aarch64_general_init_builtins (void)\n {\n@@ -1144,6 +1165,7 @@ aarch64_general_init_builtins (void)\n \n   aarch64_init_crc32_builtins ();\n   aarch64_init_builtin_rsqrt ();\n+  aarch64_init_rng_builtins ();\n \n   tree ftype_jcvt\n     = build_function_type_list (intSI_type_node, double_type_node, NULL);\n@@ -1607,10 +1629,48 @@ aarch64_expand_builtin_tme (int fcode, tree exp, rtx target)\n     return target;\n }\n \n+/* Expand a random number builtin EXP with code FCODE, putting the result\n+   int TARGET.  If IGNORE is true the return value is ignored.  */\n+\n+rtx\n+aarch64_expand_rng_builtin (tree exp, rtx target, int fcode, int ignore)\n+{\n+  rtx pat;\n+  enum insn_code icode;\n+  if (fcode == AARCH64_BUILTIN_RNG_RNDR)\n+    icode = CODE_FOR_aarch64_rndr;\n+  else if (fcode == AARCH64_BUILTIN_RNG_RNDRRS)\n+    icode = CODE_FOR_aarch64_rndrrs;\n+  else\n+    gcc_unreachable ();\n+\n+  rtx rand = gen_reg_rtx (DImode);\n+  pat = GEN_FCN (icode) (rand);\n+  if (!pat)\n+    return NULL_RTX;\n+\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  rtx res_addr = expand_normal (arg0);\n+  res_addr = convert_memory_address (Pmode, res_addr);\n+  rtx res_mem = gen_rtx_MEM (DImode, res_addr);\n+  emit_insn (pat);\n+  emit_move_insn (res_mem, rand);\n+  /* If the status result is unused don't generate the CSET code.  */\n+  if (ignore)\n+    return target;\n+\n+  rtx cc_reg = gen_rtx_REG (CC_Zmode, CC_REGNUM);\n+  rtx cmp_rtx = gen_rtx_fmt_ee (NE, SImode, cc_reg, const0_rtx);\n+  emit_insn (gen_aarch64_cstoresi (target, cmp_rtx, cc_reg));\n+  return target;\n+}\n+\n /* Expand an expression EXP that calls built-in function FCODE,\n-   with result going to TARGET if that's convenient.  */\n+   with result going to TARGET if that's convenient.  IGNORE is true\n+   if the result of the builtin is ignored.  */\n rtx\n-aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target)\n+aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target,\n+\t\t\t\tint ignore)\n {\n   int icode;\n   rtx pat, op0;\n@@ -1717,6 +1777,9 @@ aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target)\n     case AARCH64_SIMD_BUILTIN_FCMLA_LANEQ180_V4HF:\n     case AARCH64_SIMD_BUILTIN_FCMLA_LANEQ270_V4HF:\n       return aarch64_expand_fcmla_builtin (exp, target, fcode);\n+    case AARCH64_BUILTIN_RNG_RNDR:\n+    case AARCH64_BUILTIN_RNG_RNDRRS:\n+      return aarch64_expand_rng_builtin (exp, target, fcode, ignore);\n     }\n \n   if (fcode >= AARCH64_SIMD_BUILTIN_BASE && fcode <= AARCH64_SIMD_BUILTIN_MAX)"}, {"sha": "85b68317b938a37090ec401618b7f540fc243fde", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -160,6 +160,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n \n   aarch64_def_or_undef (TARGET_FRINT, \"__ARM_FEATURE_FRINT\", pfile);\n   aarch64_def_or_undef (TARGET_TME, \"__ARM_FEATURE_TME\", pfile);\n+  aarch64_def_or_undef (TARGET_RNG, \"__ARM_FEATURE_RNG\", pfile);\n \n   /* Not for ACLE, but required to keep \"float.h\" correct if we switch\n      target between implementations that do or do not support ARMv8.2-A"}, {"sha": "ca235085bfbc7560cdfb8a6f767f0bd634067d24", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -659,7 +659,7 @@ const char *aarch64_general_mangle_builtin_type (const_tree);\n void aarch64_general_init_builtins (void);\n tree aarch64_general_fold_builtin (unsigned int, tree, unsigned int, tree *);\n gimple *aarch64_general_gimple_fold_builtin (unsigned int, gcall *);\n-rtx aarch64_general_expand_builtin (unsigned int, tree, rtx);\n+rtx aarch64_general_expand_builtin (unsigned int, tree, rtx, int);\n tree aarch64_general_builtin_decl (unsigned, bool);\n tree aarch64_general_builtin_rsqrt (unsigned int);\n tree aarch64_builtin_vectorized_function (unsigned int, tree, tree);"}, {"sha": "2e73f3515bb354bdb763aa016f05510612ec3d80", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -11737,15 +11737,15 @@ aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \n /* Implement TARGET_EXPAND_BUILTIN.  */\n static rtx\n-aarch64_expand_builtin (tree exp, rtx target, rtx, machine_mode, int)\n+aarch64_expand_builtin (tree exp, rtx target, rtx, machine_mode, int ignore)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   unsigned int code = DECL_MD_FUNCTION_CODE (fndecl);\n   unsigned int subcode = code >> AARCH64_BUILTIN_SHIFT;\n   switch (code & AARCH64_BUILTIN_CLASS)\n     {\n     case AARCH64_BUILTIN_GENERAL:\n-      return aarch64_general_expand_builtin (subcode, exp, target);\n+      return aarch64_general_expand_builtin (subcode, exp, target, ignore);\n     }\n   gcc_unreachable ();\n }"}, {"sha": "b68594d10def8e6ec749aefcfc3c9fd5b907ecc8", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -245,6 +245,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_SHA3\t   (aarch64_isa_flags & AARCH64_FL_SHA3)\n #define AARCH64_ISA_F16FML\t   (aarch64_isa_flags & AARCH64_FL_F16FML)\n #define AARCH64_ISA_RCPC8_4\t   (aarch64_isa_flags & AARCH64_FL_RCPC8_4)\n+#define AARCH64_ISA_RNG\t\t   (aarch64_isa_flags & AARCH64_FL_RNG)\n #define AARCH64_ISA_V8_5\t   (aarch64_isa_flags & AARCH64_FL_V8_5)\n #define AARCH64_ISA_TME\t\t   (aarch64_isa_flags & AARCH64_FL_TME)\n \n@@ -300,6 +301,9 @@ extern unsigned aarch64_architecture_version;\n /* TME instructions are enabled.  */\n #define TARGET_TME (AARCH64_ISA_TME)\n \n+/* Random number instructions from Armv8.5-a.  */\n+#define TARGET_RNG (AARCH64_ISA_RNG)\n+\n /* Make sure this is always defined so we don't have to check for ifdefs\n    but rather use normal ifs.  */\n #ifndef TARGET_FIX_ERR_A53_835769_DEFAULT"}, {"sha": "f127057bb604e259449258256d72a9fe60dad430", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -262,6 +262,8 @@\n     UNSPECV_TSTART\t\t; Represent transaction start.\n     UNSPECV_TCOMMIT\t\t; Represent transaction commit.\n     UNSPECV_TCANCEL\t\t; Represent transaction cancel.\n+    UNSPEC_RNDR\t\t\t; Represent RNDR\n+    UNSPEC_RNDRRS\t\t; Represent RNDRRS\n   ]\n )\n \n@@ -7338,6 +7340,26 @@\n   [(set_attr \"type\" \"tme\")]\n )\n \n+(define_insn \"aarch64_rndr\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPEC_RNDR))\n+   (set (reg:CC_Z CC_REGNUM)\n+\t(unspec_volatile:CC_Z [(const_int 0)] UNSPEC_RNDR))]\n+  \"TARGET_RNG\"\n+  \"mrs\\t%0, RNDR\"\n+  [(set_attr \"type\" \"mrs\")]\n+)\n+\n+(define_insn \"aarch64_rndrrs\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPEC_RNDRRS))\n+   (set (reg:CC_Z CC_REGNUM)\n+\t(unspec_volatile:CC_Z [(const_int 0)] UNSPEC_RNDRRS))]\n+  \"TARGET_RNG\"\n+  \"mrs\\t%0, RNDRRS\"\n+  [(set_attr \"type\" \"mrs\")]\n+)\n+\n ;; AdvSIMD Stuff\n (include \"aarch64-simd.md\")\n "}, {"sha": "2284e71648a4992c9959c7eed064d64a086d339b", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -193,6 +193,22 @@ __ttest (void)\n #pragma GCC pop_options\n #endif\n \n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+rng\")\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+__rndr (uint64_t *__res)\n+{\n+  return __builtin_aarch64_rndr (__res);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+__rndrrs (uint64_t *__res)\n+{\n+  return __builtin_aarch64_rndrrs (__res);\n+}\n+\n+#pragma GCC pop_options\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "8fd1fd56f24e75828cf1789247e8ad3719810545", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -1,3 +1,7 @@\n+2019-10-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/acle/rng_1.c: New test.\n+\n 2019-10-21  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/91532"}, {"sha": "1fbdb6276632221d5daa7805a19c86f20cae880e", "filename": "gcc/testsuite/gcc.target/aarch64/acle/rng_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frng_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5dc215df17071281c21450fa2d584e1161e4bc2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frng_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Frng_1.c?ref=c5dc215df17071281c21450fa2d584e1161e4bc2", "patch": "@@ -0,0 +1,53 @@\n+/* Test the __rndr ACLE intrinsic.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.5-a+rng\" } */\n+\n+#include <arm_acle.h>\n+\n+#ifdef __ARM_FEATURE_RNG\n+/* Check that instruction is generated when status result is unused.  */\n+uint64_t\n+test_rndr_no_stat (void)\n+{\n+  uint64_t res;\n+  __rndr (&res);\n+  return res;\n+}\n+\n+/* Check that instruction is generated when random number result\n+   is unused.  */\n+int\n+test_rndr_error_check (void)\n+{\n+  uint64_t res;\n+  int fail = __rndr (&res);\n+  if (fail)\n+    return 0;\n+  return -1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mrs\\tx..?, RNDR\\n\" 2 } } */\n+\n+/* Check that instruction is generated when status result is unused.  */\n+uint64_t\n+test_rndrrs_no_stat (void)\n+{\n+  uint64_t res;\n+  __rndrrs (&res);\n+  return res;\n+}\n+\n+/* Check that instruction is generated when random number result\n+   is unused.  */\n+int\n+test_rndrrs_error_check (void)\n+{\n+  uint64_t res;\n+  int fail = __rndrrs (&res);\n+  if (fail)\n+    return 0;\n+  return -1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mrs\\tx..?, RNDRRS\\n\" 2 } } */\n+#endif"}]}