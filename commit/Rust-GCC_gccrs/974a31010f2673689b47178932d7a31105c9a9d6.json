{"sha": "974a31010f2673689b47178932d7a31105c9a9d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0YTMxMDEwZjI2NzM2ODliNDcxNzg5MzJkN2EzMTEwNWM5YTlkNg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-04-05T09:26:38Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-04-05T09:26:38Z"}, "message": "mips.h (ISA_HAS_BRANCHLIKELY, [...]): Disable if TARGET_MIPS16.\n\n* config/mips/mips.h (ISA_HAS_BRANCHLIKELY, ISA_HAS_CONDMOVE,\nISA_HAS_FP4, ISA_HAS_MADD_MSUB, ISA_HAS_NMADD_NMSUB,\nISA_HAS_CLZ_CLO, ISA_HAS_DCLZ_DCLO): Disable if TARGET_MIPS16.\n\nFrom-SVN: r51917", "tree": {"sha": "3a67247c9f0860d579a0a0684b5efa698cb3d155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a67247c9f0860d579a0a0684b5efa698cb3d155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974a31010f2673689b47178932d7a31105c9a9d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974a31010f2673689b47178932d7a31105c9a9d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974a31010f2673689b47178932d7a31105c9a9d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974a31010f2673689b47178932d7a31105c9a9d6/comments", "author": null, "committer": null, "parents": [{"sha": "a40179bd4f08cfd21ff1e08536e895b214af2f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40179bd4f08cfd21ff1e08536e895b214af2f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40179bd4f08cfd21ff1e08536e895b214af2f95"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "d338f06570a5c65edc32ca25da7f90007f5a3c9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974a31010f2673689b47178932d7a31105c9a9d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974a31010f2673689b47178932d7a31105c9a9d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=974a31010f2673689b47178932d7a31105c9a9d6", "patch": "@@ -1,3 +1,9 @@\n+2002-04-05  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_BRANCHLIKELY, ISA_HAS_CONDMOVE,\n+\tISA_HAS_FP4, ISA_HAS_MADD_MSUB, ISA_HAS_NMADD_NMSUB,\n+\tISA_HAS_CLZ_CLO, ISA_HAS_DCLZ_DCLO): Disable if TARGET_MIPS16.\n+\n 2002-04-05  Andreas Schwab  <schwab@suse.de>\n \n \t* c-convert.c: Include c-common.h."}, {"sha": "976f0b7543f1782206dbcfb53a77b002538c6532", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974a31010f2673689b47178932d7a31105c9a9d6/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974a31010f2673689b47178932d7a31105c9a9d6/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=974a31010f2673689b47178932d7a31105c9a9d6", "patch": "@@ -634,52 +634,51 @@ extern void\t\tsbss_section PARAMS ((void));\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n #define ISA_HAS_BRANCHLIKELY\t(mips_isa != 1                          \\\n-\t\t\t\t /* || TARGET_MIPS3900 */)\n+\t\t\t\t && ! TARGET_MIPS16)\n \n /* ISA has the conditional move instructions introduced in mips4.  */\n-#define ISA_HAS_CONDMOVE        (mips_isa == 4\t\t\t\t\\\n-\t\t\t\t || mips_isa == 32                      \\\n-\t\t\t\t || mips_isa == 64)\n+#define ISA_HAS_CONDMOVE        ((mips_isa == 4\t\t\t\t\\\n+\t\t\t\t  || mips_isa == 32                     \\\n+\t\t\t\t  || mips_isa == 64)\t\t\t\\\n+\t\t\t\t && ! TARGET_MIPS16)\n \n /* ISA has just the integer condition move instructions (movn,movz) */\n #define ISA_HAS_INT_CONDMOVE     0\n \n-\n-\n /* ISA has the mips4 FP condition code instructions: FP-compare to CC,\n    branch on CC, and move (both FP and non-FP) on CC.  */\n #define ISA_HAS_8CC\t\t(mips_isa == 4\t\t\t\t\\\n                          \t || mips_isa == 32                      \\\n \t\t\t\t || mips_isa == 64)\n \n-\n /* This is a catch all for the other new mips4 instructions: indexed load and\n    indexed prefetch instructions, the FP madd,msub,nmadd, and nmsub instructions,\n    and the FP recip and recip sqrt instructions */\n #define ISA_HAS_FP4             (mips_isa == 4\t\t\t\t\\\n-\t\t\t\t)\n+ \t\t\t\t && ! TARGET_MIPS16)\n \n /* ISA has conditional trap instructions.  */\n-#define ISA_HAS_COND_TRAP\t(mips_isa >= 2 && ! TARGET_MIPS16)\n+#define ISA_HAS_COND_TRAP\t(mips_isa >= 2\t\t\t\t\\\n+\t\t\t\t && ! TARGET_MIPS16)\n \n /* ISA has multiply-accumulate instructions, madd and msub.  */\n-#define ISA_HAS_MADD_MSUB       (mips_isa == 32                         \\\n-                                || mips_isa == 64                       \\\n-                                )\n+#define ISA_HAS_MADD_MSUB       ((mips_isa == 32\t\t\t\\\n+\t\t\t\t  || mips_isa == 64\t\t\t\\\n+\t\t\t\t  ) && ! TARGET_MIPS16)\n \n /* ISA has nmadd and nmsub instructions.  */\n #define ISA_HAS_NMADD_NMSUB\t(mips_isa == 4\t\t\t\t\\\n-\t\t\t\t)\n+\t\t\t\t && ! TARGET_MIPS16)\n \n /* ISA has count leading zeroes/ones instruction (not implemented).  */\n-#define ISA_HAS_CLZ_CLO         (mips_isa == 32                         \\\n-                                || mips_isa == 64                       \\\n-                                )\n+#define ISA_HAS_CLZ_CLO         ((mips_isa == 32\t\t\t\\\n+                                  || mips_isa == 64\t\t\t\\\n+                                 ) && ! TARGET_MIPS16)\n \n /* ISA has double-word count leading zeroes/ones instruction (not\n    implemented).  */\n-#define ISA_HAS_DCLZ_DCLO       (mips_isa == 64)\n-\n+#define ISA_HAS_DCLZ_DCLO       (mips_isa == 64\t\t\t\t\\\n+\t\t\t\t && ! TARGET_MIPS16)\n \n /* CC1_SPEC causes -mips3 and -mips4 to set -mfp64 and -mgp64; -mips1 or\n    -mips2 sets -mfp32 and -mgp32.  This can be overridden by an explicit"}]}