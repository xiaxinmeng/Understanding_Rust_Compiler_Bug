{"sha": "2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE3ZWUyZjk4OTNmN2VlYjFjMzMwYzRlMDQyZTNjN2Q1NmM2ZWRhZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-10-16T10:23:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-10-16T10:23:00Z"}, "message": "forward_list.h (_Fwd_list_base<>::_M_insert_after): Move out of line, tweak to return _Fwd_list_node_base*.\n\n2008-10-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h (_Fwd_list_base<>::_M_insert_after):\n\tMove out of line, tweak to return _Fwd_list_node_base*.\n\t(forward_list<>::insert_after(const_iterator, const _Tp&),\n\tforward_list<>::insert_after(const_iterator, _Tp&&)): Use it.\n\t* include/bits/forward_list.tcc (_Fwd_list_base<>::_M_insert_after):\n\tDefine.\n\n\t* include/bits/forward_list.h (forward_list<>): Consistently qualify\n\tcalls of base class functions with this->.\n\t* include/bits/forward_list.tcc (forward_list<>): Likewise.\n\n\t* include/bits/forward_list.h: Move some functions out of line...\n\t* include/bits/forward_list.tcc: ... here.\n\n\t* include/bits/forward_list.h (forward_list<>::resize(size_type)): Fix.\n\nFrom-SVN: r141168", "tree": {"sha": "b48bb4762d64c13f15b109e0ad9cc38c69d6683d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b48bb4762d64c13f15b109e0ad9cc38c69d6683d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf/comments", "author": null, "committer": null, "parents": [{"sha": "e311490551f3889e6a3e5da09c8fb3ca50778f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e311490551f3889e6a3e5da09c8fb3ca50778f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e311490551f3889e6a3e5da09c8fb3ca50778f42"}], "stats": {"total": 250, "additions": 141, "deletions": 109}, "files": [{"sha": "14aeec01b57f83e84d4021538aaf7ba1d10bb141", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf", "patch": "@@ -1,3 +1,21 @@\n+2008-10-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h (_Fwd_list_base<>::_M_insert_after):\n+\tMove out of line, tweak to return _Fwd_list_node_base*.\n+\t(forward_list<>::insert_after(const_iterator, const _Tp&),\n+\tforward_list<>::insert_after(const_iterator, _Tp&&)): Use it.\n+\t* include/bits/forward_list.tcc (_Fwd_list_base<>::_M_insert_after):\n+\tDefine.\n+\n+\t* include/bits/forward_list.h (forward_list<>): Consistently qualify\n+\tcalls of base class functions with this->.\n+\t* include/bits/forward_list.tcc (forward_list<>): Likewise.\n+\n+\t* include/bits/forward_list.h: Move some functions out of line...\n+\t* include/bits/forward_list.tcc: ... here.\n+\n+\t* include/bits/forward_list.h (forward_list<>::resize(size_type)): Fix.\n+\n 2008-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.h: Remove pointless const qualifiers in"}, {"sha": "88a6017d08d378e7b4f46f5bf926e1f3914b9087", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 40, "deletions": 99, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf", "patch": "@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_reverse_after()\n     {\n       _Fwd_list_node_base* __tail = this->_M_next;\n-      if (! __tail)\n+      if (!__tail)\n         return;\n       while (_Fwd_list_node_base* __temp = __tail->_M_next)\n         {\n@@ -293,7 +293,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t: _Node_alloc_type(), _M_head()\n \t{ }\n \n-\texplicit\n         _Fwd_list_impl(const _Node_alloc_type& __a)\n \t: _Node_alloc_type(__a), _M_head()\n \t{ }\n@@ -347,32 +346,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename... _Args>\n         _Node*\n         _M_create_node(_Args&&... __args)\n-        {\n-          _Node* __node = this->_M_get_node();\n-          try\n-            {\n-              _M_get_Node_allocator().construct(__node,\n-\t\t\t\t\t\tstd::forward<_Args>(__args)...);\n-              __node->_M_next = 0;\n-            }\n-          catch(...)\n-            {\n-              this->_M_put_node(__node);\n-              __throw_exception_again;\n-            }\n-          return __node;\n-        }\n+\t{\n+\t  _Node* __node = this->_M_get_node();\n+\t  try\n+\t    {\n+\t      _M_get_Node_allocator().construct(__node,\n+\t\t\t\t\t      std::forward<_Args>(__args)...);\n+\t      __node->_M_next = 0;\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      this->_M_put_node(__node);\n+\t      __throw_exception_again;\n+\t    }\n+\t  return __node;\n+\t}\n \n       template<typename... _Args>\n-        void\n-        _M_insert_after(const_iterator __pos, _Args&&... __args)\n-        {\n-          _Fwd_list_node_base* __to\n-            = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-          _Node* __thing = _M_create_node(std::forward<_Args>(__args)...);\n-          __thing->_M_next = __to->_M_next;\n-          __to->_M_next = __thing;\n-        }\n+        _Fwd_list_node_base*\n+        _M_insert_after(const_iterator __pos, _Args&&... __args);\n \n       void\n       _M_put_node(_Node* __p)\n@@ -583,7 +575,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  elements in the initializer_list @a il.  This is linear in\n        *  il.size().\n        */\n-      forward_list\n+      forward_list&\n       operator=(std::initializer_list<_Tp> __il)\n       {\n         assign(__il);\n@@ -783,7 +775,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename... _Args>\n         void\n         emplace_front(_Args&&... __args)\n-        { _M_insert_after(cbefore_begin(), std::forward<_Args>(__args)...); }\n+        { this->_M_insert_after(cbefore_begin(),\n+\t\t\t\tstd::forward<_Args>(__args)...); }\n \n       /**\n        *  @brief  Add data to the front of the %forward_list.\n@@ -797,14 +790,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       push_front(const _Tp& __val)\n-      { _M_insert_after(cbefore_begin(), __val); }\n+      { this->_M_insert_after(cbefore_begin(), __val); }\n \n       /**\n        *\n        */\n       void\n       push_front(_Tp&& __val)\n-      { _M_insert_after(cbefore_begin(), std::move(__val)); }\n+      { this->_M_insert_after(cbefore_begin(), std::move(__val)); }\n \n       /**\n        *  @brief  Removes first element.\n@@ -820,7 +813,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       pop_front()\n-      { _M_erase_after(&this->_M_impl._M_head); }\n+      { this->_M_erase_after(&this->_M_impl._M_head); }\n \n       /**\n        *  @brief  Constructs object in %forward_list after the specified\n@@ -838,7 +831,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename... _Args>\n         iterator\n         emplace_after(const_iterator __pos, _Args&&... __args)\n-        { _M_insert_after(__pos, std::forward<_Args>(__args)...); }\n+        { return iterator(this->_M_insert_after(__pos,\n+\t\t\t\t\t  std::forward<_Args>(__args)...)); }\n \n       /**\n        *  @brief  Inserts given value into %forward_list after specified\n@@ -854,28 +848,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       iterator\n       insert_after(const_iterator __pos, const _Tp& __val)\n-      {\n-        _Fwd_list_node_base* __to\n-\t  = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-        _Node* __thing = _M_create_node(__val);\n-        __thing->_M_next = __to->_M_next;\n-        __to->_M_next = __thing;\n-        return iterator(__to->_M_next);\n-      }\n+      { return iterator(this->_M_insert_after(__pos, __val)); }\n \n       /**\n        *\n        */\n       iterator\n       insert_after(const_iterator __pos, _Tp&& __val)\n-      {\n-        _Fwd_list_node_base* __to\n-          = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-        _Node* __thing = _M_create_node(std::move(__val));\n-        __thing->_M_next = __to->_M_next;\n-        __to->_M_next = __thing;\n-        return iterator(__to->_M_next);\n-      }\n+      { return iterator(this->_M_insert_after(__pos, std::move(__val))); }\n \n       /**\n        *  @brief  Inserts a number of copies of given data into the\n@@ -891,8 +871,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  does not invalidate iterators and references.\n        */\n       void\n-      insert_after(const_iterator __pos, size_type __n,\n-\t\t   const _Tp& __val);\n+      insert_after(const_iterator __pos, size_type __n, const _Tp& __val);\n \n       /**\n        *  @brief  Inserts a range into the %forward_list.\n@@ -950,7 +929,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         _Fwd_list_node_base* __tmp\n           = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n         if (__tmp)\n-          return iterator(_Base::_M_erase_after(__tmp));\n+          return iterator(this->_M_erase_after(__tmp));\n         else\n           return end();\n       }\n@@ -979,7 +958,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n         _Fwd_list_node_base* __tmp\n           = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-        return iterator(_M_erase_after(__tmp, __last._M_node));\n+        return iterator(this->_M_erase_after(__tmp, __last._M_node));\n       }\n \n       /**\n@@ -1010,7 +989,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       resize(size_type __sz)\n-      { resize(__sz, _Tp(0)); }\n+      { resize(__sz, _Tp()); }\n \n       /**\n        *  @brief Resizes the %forward_list to the specified number of\n@@ -1037,7 +1016,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       clear()\n-      { _M_erase_after(&this->_M_impl._M_head, 0); }\n+      { this->_M_erase_after(&this->_M_impl._M_head, 0); }\n \n       // 23.2.3.5 forward_list operations:\n \n@@ -1053,17 +1032,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Requires this != @a x.\n        */\n       void\n-      splice_after(const_iterator __pos, forward_list&& __list)\n-      {\n-        if (!__list.empty() && &__list != this)\n-          {\n-            _Fwd_list_node_base* __tmp\n-              = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-            const_iterator __before = __list.cbefore_begin();\n-            __tmp->_M_transfer_after(const_cast<_Fwd_list_node_base*>\n-\t\t\t\t     (__before._M_node));\n-          }\n-      }\n+      splice_after(const_iterator __pos, forward_list&& __list);\n \n       /**\n        *  @brief  Insert element from another %forward_list.\n@@ -1095,15 +1064,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       splice_after(const_iterator __pos, forward_list&& __list,\n-                   const_iterator __before, const_iterator __last)\n-      {\n-        _Fwd_list_node_base* __tmp\n-          = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-        __tmp->_M_transfer_after(const_cast<_Fwd_list_node_base*>\n-\t\t\t\t (__before._M_node),\n-\t\t\t\t const_cast<_Fwd_list_node_base*>\n-\t\t\t\t (__last._M_node));\n-      }\n+                   const_iterator __before, const_iterator __last);\n \n       /**\n        *  @brief  Remove all elements equal to value.\n@@ -1224,8 +1185,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Reverse the order of elements in the list in linear time.\n        */\n       void\n-      reverse()\n-      { this->_M_impl._M_head._M_reverse_after(); }\n+      reverse();\n     };\n \n   /**\n@@ -1241,26 +1201,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp, typename _Alloc>\n     bool\n     operator==(const forward_list<_Tp, _Alloc>& __lx,\n-               const forward_list<_Tp, _Alloc>& __ly)\n-    {\n-      //  We don't have size() so we need to walk through both lists\n-      //  making sure both iterators are valid.\n-      typename std::forward_list<_Tp, _Alloc>::const_iterator __ix\n-        = __lx.cbegin();\n-      typename std::forward_list<_Tp, _Alloc>::const_iterator __iy\n-        = __ly.cbegin();\n-      while (__ix != __lx.cend() && __iy != __ly.cend())\n-        {\n-          if (*__ix != *__iy)\n-            return false;\n-          ++__ix;\n-          ++__iy;\n-        }\n-      if (__ix == __lx.cend() && __iy == __ly.cend())\n-        return true;\n-      else\n-        return false;\n-    }\n+               const forward_list<_Tp, _Alloc>& __ly);\n \n   /**\n    *  @brief  Forward list ordering relation.\n@@ -1285,7 +1226,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline bool\n     operator!=(const forward_list<_Tp, _Alloc>& __lx,\n                const forward_list<_Tp, _Alloc>& __ly)\n-    { return ! (__lx == __ly); }\n+    { return !(__lx == __ly); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n@@ -1299,14 +1240,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline bool\n     operator>=(const forward_list<_Tp, _Alloc>& __lx,\n                const forward_list<_Tp, _Alloc>& __ly)\n-    { return ! (__lx < __ly); }\n+    { return !(__lx < __ly); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n     inline bool\n     operator<=(const forward_list<_Tp, _Alloc>& __lx,\n                const forward_list<_Tp, _Alloc>& __ly)\n-    { return ! (__ly < __lx); }\n+    { return !(__ly < __lx); }\n \n   /// See std::forward_list::forward_swap().\n   template<typename _Tp, typename _Alloc>"}, {"sha": "7ae4f231841d5e176ff4c34e1e4747a533980229", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 83, "deletions": 10, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=2a7ee2f9893f7eeb1c330c4e042e3c7d56c6edaf", "patch": "@@ -157,6 +157,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      _Fwd_list_node_base*\n+      _Fwd_list_base<_Tp, _Alloc>::\n+      _M_insert_after(const_iterator __pos, _Args&&... __args)\n+      {\n+\t_Fwd_list_node_base* __to\n+\t  = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n+\t_Node* __thing = _M_create_node(std::forward<_Args>(__args)...);\n+\t__thing->_M_next = __to->_M_next;\n+\t__to->_M_next = __thing;\n+\treturn __to->_M_next;\n+      }\n+\n   template<typename _Tp, typename _Alloc>\n     _Fwd_list_node_base*\n     _Fwd_list_base<_Tp, _Alloc>::\n@@ -200,7 +214,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n       for (size_type __i = 0; __i < __n; ++__i)\n \t{\n-\t  __to->_M_next = _M_create_node(_Tp());\n+\t  __to->_M_next = this->_M_create_node(_Tp());\n \t  __to = __to->_M_next;\n \t}\n     }\n@@ -213,7 +227,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n       for (size_type __i = 0; __i < __n; ++__i)\n \t{\n-\t  __to->_M_next = _M_create_node(__value);\n+\t  __to->_M_next = this->_M_create_node(__value);\n \t  __to = __to->_M_next;\n \t}\n     }\n@@ -229,7 +243,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         _InputIterator __curr = __first;\n         while (__curr != __last)\n           {\n-            __to->_M_next = _M_create_node(*__curr);\n+            __to->_M_next = this->_M_create_node(*__curr);\n             __to = __to->_M_next;\n             ++__curr;\n           }\n@@ -245,7 +259,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       while (__from->_M_next != 0)\n \t{\n \t  const _Node* __temp = static_cast<_Node*>(__from->_M_next);\n-\t  __to->_M_next = _M_create_node(__temp->_M_value);\n+\t  __to->_M_next = this->_M_create_node(__temp->_M_value);\n \t  __from = __from->_M_next;\n \t  __to = __to->_M_next;\n \t}\n@@ -260,7 +274,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       for (const _Tp* __item = __il.begin();\n \t   __item != __il.end(); ++__item)\n \t{\n-\t  __to->_M_next = _M_create_node(*__item);\n+\t  __to->_M_next = this->_M_create_node(*__item);\n \t  __to = __to->_M_next;\n \t}\n     }\n@@ -303,7 +317,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Fwd_list_node_base* __keep = __to->_M_next;\n       for (size_type __i = 0; __i < __n; ++__i)\n \t{\n-\t  __to->_M_next = _M_create_node(__val);\n+\t  __to->_M_next = this->_M_create_node(__val);\n \t  __to = __to->_M_next;\n \t}\n       __to->_M_next = __keep;\n@@ -322,7 +336,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_InputIterator __curr = __first;\n \twhile (__curr != __last)\n \t  {\n-\t    __to->_M_next = _M_create_node(*__curr);\n+\t    __to->_M_next = this->_M_create_node(*__curr);\n \t    __to = __to->_M_next;\n \t    ++__curr;\n \t  }\n@@ -340,7 +354,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const _Tp* __item = __il.begin();\n       while (__item != __il.end())\n \t{\n-\t  __to->_M_next = _M_create_node(*__item);\n+\t  __to->_M_next = this->_M_create_node(*__item);\n \t  __to = __to->_M_next;\n \t  ++__item;\n \t}\n@@ -366,6 +380,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tinsert_after(__k, __sz - __len, __val);\n     }\n \n+  template<typename _Tp, typename _Alloc>\n+    void\n+    forward_list<_Tp, _Alloc>::\n+    splice_after(const_iterator __pos, forward_list&& __list)\n+    {\n+      if (!__list.empty() && &__list != this)\n+\t{\n+\t  _Fwd_list_node_base* __tmp\n+\t    = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n+\t  const_iterator __before = __list.cbefore_begin();\n+\t  __tmp->_M_transfer_after(const_cast<_Fwd_list_node_base*>\n+\t\t\t\t   (__before._M_node));\n+\t}\n+    }\n+\n+  template<typename _Tp, typename _Alloc>\n+    void\n+    forward_list<_Tp, _Alloc>::\n+    splice_after(const_iterator __pos, forward_list&& __list,\n+\t\t const_iterator __before, const_iterator __last)\n+    {\n+      _Fwd_list_node_base* __tmp\n+\t= const_cast<_Fwd_list_node_base*>(__pos._M_node);\n+      __tmp->_M_transfer_after(const_cast<_Fwd_list_node_base*>\n+\t\t\t       (__before._M_node),\n+\t\t\t       const_cast<_Fwd_list_node_base*>\n+\t\t\t       (__last._M_node));\n+    }\n+\n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::\n@@ -375,7 +418,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       while (_Node* __temp = static_cast<_Node*>(__curr->_M_next))\n \t{\n \t  if (__temp->_M_value == __val)\n-\t    _M_erase_after(__curr);\n+\t    this->_M_erase_after(__curr);\n \t  else\n \t    __curr = static_cast<_Node*>(__curr->_M_next);\n \t}\n@@ -391,7 +434,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \twhile (_Node* __temp = static_cast<_Node*>(__curr->_M_next))\n \t  {\n \t    if (__pred(__temp->_M_value))\n-\t      _M_erase_after(__curr);\n+\t      this->_M_erase_after(__curr);\n \t    else\n \t      __curr = static_cast<_Node*>(__curr->_M_next);\n \t  }\n@@ -462,6 +505,36 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n           }\n       }\n \n+  template<typename _Tp, typename _Alloc>\n+    void\n+    forward_list<_Tp, _Alloc>::\n+    reverse()\n+    { this->_M_impl._M_head._M_reverse_after(); }\n+\n+  template<typename _Tp, typename _Alloc>\n+    bool\n+    operator==(const forward_list<_Tp, _Alloc>& __lx,\n+               const forward_list<_Tp, _Alloc>& __ly)\n+    {\n+      //  We don't have size() so we need to walk through both lists\n+      //  making sure both iterators are valid.\n+      typename std::forward_list<_Tp, _Alloc>::const_iterator __ix\n+        = __lx.cbegin();\n+      typename std::forward_list<_Tp, _Alloc>::const_iterator __iy\n+        = __ly.cbegin();\n+      while (__ix != __lx.cend() && __iy != __ly.cend())\n+        {\n+          if (*__ix != *__iy)\n+            return false;\n+          ++__ix;\n+          ++__iy;\n+        }\n+      if (__ix == __lx.cend() && __iy == __ly.cend())\n+        return true;\n+      else\n+        return false;\n+    }\n+\n _GLIBCXX_END_NAMESPACE // namespace std\n \n #endif /* _FORWARD_LIST_TCC */"}]}