{"sha": "ff08cbee5d5465c88852dbb3cff344c45d98c95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwOGNiZWU1ZDU0NjVjODg4NTJkYmIzY2ZmMzQ0YzQ1ZDk4Yzk1ZQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-07-28T04:35:01Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-07-28T04:35:01Z"}, "message": "re PR tree-optimization/22493 (with -fwrapv -INT_MIN is still not positive)\n\n2005-07-27  James A. Morrison  <phython@gcc.gnu.org>\n\n        PR tree-optimization/22493\n        * tree-vrp.c (extract_range_from_unary_expr): Deal with -fwrapv and\n        VR_ANTI_RANGEs properly for NEGATE_EXPRs and ABS_EXPRs.\n\nFrom-SVN: r102458", "tree": {"sha": "f1a698467d1c1cf4ac02bddd1b2e54447cb91aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1a698467d1c1cf4ac02bddd1b2e54447cb91aaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff08cbee5d5465c88852dbb3cff344c45d98c95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff08cbee5d5465c88852dbb3cff344c45d98c95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff08cbee5d5465c88852dbb3cff344c45d98c95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff08cbee5d5465c88852dbb3cff344c45d98c95e/comments", "author": null, "committer": null, "parents": [{"sha": "b089e33adcdb287020bbc1294df6bebf6701025b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b089e33adcdb287020bbc1294df6bebf6701025b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b089e33adcdb287020bbc1294df6bebf6701025b"}], "stats": {"total": 185, "additions": 165, "deletions": 20}, "files": [{"sha": "b0d7bff728851a521579a5f3b26734f6fc3f4a40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff08cbee5d5465c88852dbb3cff344c45d98c95e", "patch": "@@ -1,3 +1,9 @@\n+2005-07-27  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR tree-optimization/22493\n+\t* tree-vrp.c (extract_range_from_unary_expr): Deal with -fwrapv and\n+\tVR_ANTI_RANGEs properly for NEGATE_EXPRs and ABS_EXPRs.\n+\n 2005-07-27  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/frv/frv.opt (moptimize-membar): New."}, {"sha": "d2861aade39c54149156bd16967b27c71370bb42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff08cbee5d5465c88852dbb3cff344c45d98c95e", "patch": "@@ -1,3 +1,12 @@\n+2005-07-27  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR rtl-optimization/22493\n+\t* gcc.c-torture/execute/pr22493-1.c: New test.\n+\t* gcc.c-torture/execute/pr22493-1.x: New.\n+\t* gcc.c-torture/execute/vrp-1.c: New test.\n+\t* gcc.c-torture/execute/vrp-2.c: New test.\n+\t* gcc.c-torture/execute/vrp-2.c: New test.\n+\n 2005-07-27  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.target/frv/all-builtin-read8.c: Delete."}, {"sha": "bc0ff785ae3c8ffa83b7b3f5b9856d37394fd212", "filename": "gcc/testsuite/gcc.c-torture/execute/pr22493-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22493-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22493-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22493-1.c?ref=ff08cbee5d5465c88852dbb3cff344c45d98c95e", "patch": "@@ -0,0 +1,18 @@\n+#include <limits.h>\n+extern void abort ();\n+extern void exit (int);\n+void f(int i)\n+{\n+  if (i>0)\n+    abort();\n+  i = -i;\n+  if (i<0)\n+    return;\n+  abort ();\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+  f(INT_MIN);\n+  exit (0);\n+}"}, {"sha": "36a58395004c352395b3ff7d4877f1fbee5a758e", "filename": "gcc/testsuite/gcc.c-torture/execute/pr22493-1.x", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22493-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22493-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22493-1.x?ref=ff08cbee5d5465c88852dbb3cff344c45d98c95e", "patch": "@@ -0,0 +1,2 @@\n+set additional_flags \"-fwrapv\"\n+return 0"}, {"sha": "ac42e6c37dc48c2cfd1c9c415f5dda3c4a39ce99", "filename": "gcc/testsuite/gcc.c-torture/execute/vrp-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-1.c?ref=ff08cbee5d5465c88852dbb3cff344c45d98c95e", "patch": "@@ -0,0 +1,20 @@\n+\n+extern void abort ();\n+extern void exit (int);\n+\n+int f (int a) {\n+\tif (a != 2) {\n+\t\ta = -a;\n+\t\tif (a == 2)\n+\t\t  return 0;\n+\t\treturn 1;\n+\t}\n+\treturn 1;\n+}\n+\n+int main (int argc, char *argv[]) {\n+\tif (f (-2))\n+\t\tabort ();\n+\texit (0);\n+}\n+"}, {"sha": "69ed3e702810fd350167b962682f56c4f7add154", "filename": "gcc/testsuite/gcc.c-torture/execute/vrp-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-2.c?ref=ff08cbee5d5465c88852dbb3cff344c45d98c95e", "patch": "@@ -0,0 +1,19 @@\n+extern void abort ();\n+extern void exit (int);\n+\n+int f (int a) {\n+\tif (a != 2) {\n+\t\ta = a > 0 ? a : -a;\n+\t\tif (a == 2)\n+\t\t  return 0;\n+\t\treturn 1;\n+\t}\n+\treturn 1;\n+}\n+\n+int main (int argc, char *argv[]) {\n+\tif (f (-2))\n+\t\tabort ();\n+\texit (0);\n+}\n+"}, {"sha": "bc0e490dc57f84e2a965bbd2a4e49d85a3c4a72a", "filename": "gcc/testsuite/gcc.c-torture/execute/vrp-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-3.c?ref=ff08cbee5d5465c88852dbb3cff344c45d98c95e", "patch": "@@ -0,0 +1,21 @@\n+extern void abort ();\n+extern void exit (int);\n+\n+int f (int a) {\n+\tif (a < 12) {\n+\t  if (a > -15) {\n+\t\ta = a > 0 ? a : -a;\n+\t\tif (a == 2)\n+\t\t  return 0;\n+\t\treturn 1;\n+\t  }\n+\t}\n+\treturn 1;\n+}\n+\n+int main (int argc, char *argv[]) {\n+\tif (f (-2))\n+\t\tabort ();\n+\texit (0);\n+}\n+"}, {"sha": "af79ba48906f914083bcd0ba0e663381ef0f6c75", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 70, "deletions": 20, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff08cbee5d5465c88852dbb3cff344c45d98c95e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ff08cbee5d5465c88852dbb3cff344c45d98c95e", "patch": "@@ -1353,27 +1353,31 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n   if (code == NEGATE_EXPR\n       && !TYPE_UNSIGNED (TREE_TYPE (expr)))\n     {\n-      /* Negating an anti-range doesn't really do anything to it.  The\n-\t new range will also not take on the same range of values\n-\t excluded by the original anti-range.  */\n-      if (vr0.type == VR_ANTI_RANGE)\n-\t{\n-\t  copy_value_range (vr, &vr0);\n-\t  return;\n-\t}\n-\n       /* NEGATE_EXPR flips the range around.  */\n-      min = (vr0.max == TYPE_MAX_VALUE (TREE_TYPE (expr)))\n-\t    ? TYPE_MIN_VALUE (TREE_TYPE (expr))\n-\t    : fold_unary_to_constant (code, TREE_TYPE (expr), vr0.max);\n+      min = (vr0.max == TYPE_MAX_VALUE (TREE_TYPE (expr)) && !flag_wrapv)\n+\t     ? TYPE_MIN_VALUE (TREE_TYPE (expr))\n+\t     : fold_unary_to_constant (code, TREE_TYPE (expr), vr0.max);\n \n-      max = (vr0.min == TYPE_MIN_VALUE (TREE_TYPE (expr)))\n-\t    ? TYPE_MAX_VALUE (TREE_TYPE (expr))\n-\t    : fold_unary_to_constant (code, TREE_TYPE (expr), vr0.min);\n+      max = (vr0.min == TYPE_MIN_VALUE (TREE_TYPE (expr)) && !flag_wrapv)\n+\t     ? TYPE_MAX_VALUE (TREE_TYPE (expr))\n+\t     : fold_unary_to_constant (code, TREE_TYPE (expr), vr0.min);\n     }\n   else if (code == ABS_EXPR\n            && !TYPE_UNSIGNED (TREE_TYPE (expr)))\n     {\n+      /* -TYPE_MIN_VALUE = TYPE_MIN_VALUE with flag_wrapv so we can't get a\n+         useful range.  */\n+      if (flag_wrapv\n+\t  && ((vr0.type == VR_RANGE\n+\t       && vr0.min == TYPE_MIN_VALUE (TREE_TYPE (expr)))\n+\t      || (vr0.type == VR_ANTI_RANGE\n+\t          && vr0.min != TYPE_MIN_VALUE (TREE_TYPE (expr))\n+\t\t  && !range_includes_zero_p (&vr0))))\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n+\t\n       /* ABS_EXPR may flip the range around, if the original range\n \t included negative values.  */\n       min = (vr0.min == TYPE_MIN_VALUE (TREE_TYPE (expr)))\n@@ -1382,12 +1386,58 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n \n       max = fold_unary_to_constant (code, TREE_TYPE (expr), vr0.max);\n \n-      /* If the range was reversed, swap MIN and MAX.  */\n-      if (compare_values (min, max) == 1)\n+      cmp = compare_values (min, max);\n+\n+      /* If a VR_ANTI_RANGEs contains zero, then we have\n+\t ~[-INF, min(MIN, MAX)].  */\n+      if (vr0.type == VR_ANTI_RANGE)\n+\t{ \n+\t  if (range_includes_zero_p (&vr0))\n+\t    {\n+\t      tree type_min_value = TYPE_MIN_VALUE (TREE_TYPE (expr));\n+\n+\t      /* Take the lower of the two values.  */\n+\t      if (cmp != 1)\n+\t\tmax = min;\n+\n+\t      /* Create ~[-INF, min (abs(MIN), abs(MAX))]\n+\t         or ~[-INF + 1, min (abs(MIN), abs(MAX))] when\n+\t\t flag_wrapv is set and the original anti-range doesn't include\n+\t         TYPE_MIN_VALUE, remember -TYPE_MIN_VALUE = TYPE_MIN_VALUE.  */\n+\t      min = (flag_wrapv && vr0.min != type_min_value\n+\t\t     ? int_const_binop (PLUS_EXPR,\n+\t\t\t\t\ttype_min_value,\n+\t\t\t\t\tinteger_one_node, 0)\n+\t\t     : type_min_value);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* All else has failed, so create the range [0, INF], even for\n+\t         flag_wrapv since TYPE_MIN_VALUE is in the original\n+\t         anti-range.  */\n+\t      vr0.type = VR_RANGE;\n+\t      min = build_int_cst (TREE_TYPE (expr), 0);\n+\t      max = TYPE_MAX_VALUE (TREE_TYPE (expr));\n+\t    }\n+\t}\n+\n+      /* If the range contains zero then we know that the minimum value in the\n+         range will be zero.  */\n+      else if (range_includes_zero_p (&vr0))\n+\t{\n+\t  if (cmp == 1)\n+\t    max = min;\n+\t  min = build_int_cst (TREE_TYPE (expr), 0);\n+\t}\n+      else\n \t{\n-\t  tree t = min;\n-\t  min = max;\n-\t  max = t;\n+          /* If the range was reversed, swap MIN and MAX.  */\n+\t  if (cmp == 1)\n+\t    {\n+\t      tree t = min;\n+\t      min = max;\n+\t      max = t;\n+\t    }\n \t}\n     }\n   else"}]}