{"sha": "75038aa6aa5b562e6358108619d66ef2ccab9a53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwMzhhYTZhYTViNTYyZTYzNTgxMDg2MTlkNjZlZjJjY2FiOWE1Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-17T14:50:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-22T19:18:31Z"}, "message": "analyzer: introduce namespace to avoid ODR clashes (PR 93307)\n\nPR analyzer/93307 reports that in an LTO bootstrap, there are ODR\nviolations between:\n- the \"region\" type:\n    gcc/analyzer/region-model.h:792\n  vs:\n    gcc/sched-int.h:1443\n- the \"constraint\" type:\n    gcc/analyzer/constraint-manager.h:121\n  vs:\n    gcc/tree-ssa-structalias.c:533\n\nThis patches solves this clash by putting all of the analyzer names\nwithin a namespace.  I chose \"ana\" as it is short (to save typing).\nThe analyzer selftests are moved from namespace \"selftest\" to\n\"ana::selftest\".\n\nThere are various places where the namespace has to be closed\nand reopened, to allow e.g. for specializations of templates\nin the global namespace.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93307\n\t* analysis-plan.h: Wrap everything namespace \"ana\".\n\t* analyzer-logging.cc: Likewise.\n\t* analyzer-logging.h: Likewise.\n\t* analyzer-pass.cc (pass_analyzer::execute): Update for \"ana\"\n\tnamespace.\n\t* analyzer-selftests.cc: Wrap everything namespace \"ana\".\n\t* analyzer-selftests.h: Likewise.\n\t* analyzer.h: Likewise for forward decls of types.\n\t* call-string.h: Likewise.\n\t* checker-path.cc: Likewise.\n\t* checker-path.h: Likewise.\n\t* constraint-manager.cc: Likewise.\n\t* constraint-manager.h: Likewise.\n\t* diagnostic-manager.cc: Likewise.\n\t* diagnostic-manager.h: Likewise.\n\t* engine.cc: Likewise.\n\t* engine.h: Likewise.\n\t* exploded-graph.h: Likewise.\n\t* function-set.cc: Likewise.\n\t* function-set.h: Likewise.\n\t* pending-diagnostic.cc: Likewise.\n\t* pending-diagnostic.h: Likewise.\n\t* program-point.cc: Likewise.\n\t* program-point.h: Likewise.\n\t* program-state.cc: Likewise.\n\t* program-state.h: Likewise.\n\t* region-model.cc: Likewise.\n\t* region-model.h: Likewise.\n\t* sm-file.cc: Likewise.\n\t* sm-malloc.cc: Likewise.\n\t* sm-pattern-test.cc: Likewise.\n\t* sm-sensitive.cc: Likewise.\n\t* sm-signal.cc: Likewise.\n\t* sm-taint.cc: Likewise.\n\t* sm.cc: Likewise.\n\t* sm.h: Likewise.\n\t* state-purge.h: Likewise.\n\t* supergraph.cc: Likewise.\n\t* supergraph.h: Likewise.\n\ngcc/ChangeLog:\n\tPR analyzer/93307\n\t* gdbinit.in (break-on-saved-diagnostic): Update for move of\n\tdiagnostic_manager into \"ana\" namespace.\n\t* selftest-run-tests.c (selftest::run_tests): Update for move of\n\tselftest::run_analyzer_selftests to\n\tana::selftest::run_analyzer_selftests.", "tree": {"sha": "b1fe8edd2080d5fea96ef7347ce1fd7f93983cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1fe8edd2080d5fea96ef7347ce1fd7f93983cfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75038aa6aa5b562e6358108619d66ef2ccab9a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75038aa6aa5b562e6358108619d66ef2ccab9a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75038aa6aa5b562e6358108619d66ef2ccab9a53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75038aa6aa5b562e6358108619d66ef2ccab9a53/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68cbbe7cdc7754d5b8aa2c9072e37745ff3b7604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68cbbe7cdc7754d5b8aa2c9072e37745ff3b7604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68cbbe7cdc7754d5b8aa2c9072e37745ff3b7604"}], "stats": {"total": 325, "additions": 320, "deletions": 5}, "files": [{"sha": "07e735680564a6ba39bbd447cf0628ea3d0d1b34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -1,3 +1,12 @@\n+2020-01-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93307\n+\t* gdbinit.in (break-on-saved-diagnostic): Update for move of\n+\tdiagnostic_manager into \"ana\" namespace.\n+\t* selftest-run-tests.c (selftest::run_tests): Update for move of\n+\tselftest::run_analyzer_selftests to\n+\tana::selftest::run_analyzer_selftests.\n+\n 2020-01-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* cfgexpand.c (union_stack_vars): Update the size."}, {"sha": "07876a0b4afeb8a6ba8c1b96e8312e1f224e1446", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -1,3 +1,46 @@\n+2020-01-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93307\n+\t* analysis-plan.h: Wrap everything namespace \"ana\".\n+\t* analyzer-logging.cc: Likewise.\n+\t* analyzer-logging.h: Likewise.\n+\t* analyzer-pass.cc (pass_analyzer::execute): Update for \"ana\"\n+\tnamespace.\n+\t* analyzer-selftests.cc: Wrap everything namespace \"ana\".\n+\t* analyzer-selftests.h: Likewise.\n+\t* analyzer.h: Likewise for forward decls of types.\n+\t* call-string.h: Likewise.\n+\t* checker-path.cc: Likewise.\n+\t* checker-path.h: Likewise.\n+\t* constraint-manager.cc: Likewise.\n+\t* constraint-manager.h: Likewise.\n+\t* diagnostic-manager.cc: Likewise.\n+\t* diagnostic-manager.h: Likewise.\n+\t* engine.cc: Likewise.\n+\t* engine.h: Likewise.\n+\t* exploded-graph.h: Likewise.\n+\t* function-set.cc: Likewise.\n+\t* function-set.h: Likewise.\n+\t* pending-diagnostic.cc: Likewise.\n+\t* pending-diagnostic.h: Likewise.\n+\t* program-point.cc: Likewise.\n+\t* program-point.h: Likewise.\n+\t* program-state.cc: Likewise.\n+\t* program-state.h: Likewise.\n+\t* region-model.cc: Likewise.\n+\t* region-model.h: Likewise.\n+\t* sm-file.cc: Likewise.\n+\t* sm-malloc.cc: Likewise.\n+\t* sm-pattern-test.cc: Likewise.\n+\t* sm-sensitive.cc: Likewise.\n+\t* sm-signal.cc: Likewise.\n+\t* sm-taint.cc: Likewise.\n+\t* sm.cc: Likewise.\n+\t* sm.h: Likewise.\n+\t* state-purge.h: Likewise.\n+\t* supergraph.cc: Likewise.\n+\t* supergraph.h: Likewise.\n+\n 2020-01-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93352"}, {"sha": "79030bae3820c049fa185cdfc44262b72ee705f8", "filename": "gcc/analyzer/analysis-plan.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalysis-plan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalysis-plan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalysis-plan.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_ANALYSIS_PLAN_H\n #define GCC_ANALYZER_ANALYSIS_PLAN_H\n \n+namespace ana {\n+\n /* A class to encapsulate decisions about how the analysis should happen.\n    Examples:\n    - the order in which functions should be analyzed, so that function\n@@ -53,4 +55,6 @@ class analysis_plan : public log_user\n   auto_vec<int> m_index_by_uid;\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_ANALYSIS_PLAN_H */"}, {"sha": "bd82875931c6cedfa6401fa115daf31248b297b8", "filename": "gcc/analyzer/analyzer-logging.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-logging.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-logging.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-logging.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* Implementation of class logger.  */\n \n /* ctor for logger.  */\n@@ -221,4 +223,6 @@ log_user::set_logger (logger *logger)\n   m_logger = logger;\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "132f97eb613c3a68c5f33e313724b1ec23d42d6b", "filename": "gcc/analyzer/analyzer-logging.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-logging.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-logging.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-logging.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -23,6 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef ANALYZER_LOGGING_H\n #define ANALYZER_LOGGING_H\n \n+namespace ana {\n+\n /* A logger encapsulates a logging stream: a way to send\n    lines of pertinent information to a FILE *.  */\n \n@@ -257,4 +259,6 @@ log_user::exit_scope (const char *scope_name)\n #define LOG_FUNC_4(LOGGER, FMT, A0, A1, A2, A3) \\\n   log_scope s (LOGGER, __func__, FMT, A0, A1, A2, A3)\n \n+} // namespace ana\n+\n #endif /* ANALYZER_LOGGING_H */"}, {"sha": "a27421e46d427a9ed19e4250ad338d2b3fd1c7d6", "filename": "gcc/analyzer/analyzer-pass.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-pass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-pass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-pass.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -81,7 +81,7 @@ unsigned int\n pass_analyzer::execute (function *)\n {\n #if ENABLE_ANALYZER\n-  run_checkers ();\n+  ana::run_checkers ();\n #else\n   sorry (\"%qs was not enabled in this build of GCC\"\n \t \" (missing configure-time option %qs)\","}, {"sha": "8e200a3844bb8b76565d8d37d67e52d05533663a", "filename": "gcc/analyzer/analyzer-selftests.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -29,6 +29,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if CHECKING_P\n \n+namespace ana {\n+\n namespace selftest {\n \n /* Build a VAR_DECL named NAME of type TYPE, simulating a file-level\n@@ -61,4 +63,6 @@ run_analyzer_selftests ()\n \n } /* end of namespace selftest.  */\n \n+} // namespace ana\n+\n #endif /* #if CHECKING_P */"}, {"sha": "7924b8c8f0110e687b20d9fa0002423caa4ca1c1", "filename": "gcc/analyzer/analyzer-selftests.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-selftests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer-selftests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -23,6 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if CHECKING_P\n \n+namespace ana {\n+\n namespace selftest {\n \n extern tree build_global_decl (const char *name, tree type);\n@@ -40,7 +42,9 @@ extern void analyzer_region_model_cc_tests ();\n extern void analyzer_sm_file_cc_tests ();\n extern void analyzer_sm_signal_cc_tests ();\n \n-} /* end of namespace selftest.  */\n+} /* end of namespace ana::selftest.  */\n+\n+} // namespace ana\n \n #endif /* #if CHECKING_P */\n "}, {"sha": "e84e6958cec84c994a257919b7fd12333a19da50", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -24,6 +24,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Forward decls of common types, with indentation to show inheritance.  */\n \n class graphviz_out;\n+\n+namespace ana {\n+\n class supergraph;\n class supernode;\n class superedge;\n@@ -68,6 +71,8 @@ class state_purge_per_ssa_name;\n class state_change;\n class rewind_info_t;\n \n+} // namespace ana\n+\n extern bool is_special_named_call_p (const gcall *call, const char *funcname,\n \t\t\t\t     unsigned int num_args);\n extern bool is_named_call_p (tree fndecl, const char *funcname);"}, {"sha": "5e362d8cadb2d9e603455df00c0eeee0fd2772cc", "filename": "gcc/analyzer/call-string.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fcall-string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fcall-string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-string.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_CALL_STRING_H\n #define GCC_ANALYZER_CALL_STRING_H\n \n+namespace ana {\n+\n class supergraph;\n class call_superedge;\n class return_superedge;\n@@ -73,4 +75,6 @@ class call_string\n   auto_vec<const return_superedge *> m_return_edges;\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_CALL_STRING_H */"}, {"sha": "f7455ba12450cc53d91a704707b1726981e984e9", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -61,6 +61,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* Get a string for EK.  */\n \n const char *\n@@ -954,4 +956,6 @@ checker_path::add_final_event (const state_machine *sm,\n   add_event (end_of_path);\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "cceffe079fa146817f5798575f6fcb72fcbf3a85", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_CHECKER_PATH_H\n #define GCC_ANALYZER_CHECKER_PATH_H\n \n+namespace ana {\n+\n /* An enum for discriminating between the concrete subclasses of\n    checker_event.  */\n \n@@ -519,4 +521,6 @@ class checker_path : public diagnostic_path\n   hash_map <const exploded_node *, diagnostic_event_id_t> m_setjmp_event_ids;\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_CHECKER_PATH_H */"}, {"sha": "9d13ec360bef16d61952b329bcacb06c7cea8f0f", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -45,6 +45,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* One of the end-points of a range.  */\n \n struct bound\n@@ -2257,4 +2259,6 @@ analyzer_constraint_manager_cc_tests ()\n \n #endif /* CHECKING_P */\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "0f4506cc40d365afc0c10bd42334c170b1597c9c", "filename": "gcc/analyzer/constraint-manager.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fconstraint-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fconstraint-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_CONSTRAINT_MANAGER_H\n #define GCC_ANALYZER_CONSTRAINT_MANAGER_H\n \n+namespace ana {\n+\n class constraint_manager;\n \n /* Abstract base class for specifying how state should be purged.  */\n@@ -243,4 +245,6 @@ class constraint_manager\n \t\t\t\tequiv_class_id rhs_id);\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_CONSTRAINT_MANAGER_H */"}, {"sha": "02bc4a61e60af2d74f66dc98cdb3a9262a12c249", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -58,6 +58,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* class saved_diagnostic.  */\n \n /* saved_diagnostic's ctor.\n@@ -1274,4 +1276,6 @@ diagnostic_manager::finish_pruning (checker_path *path) const\n     }\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "0c1d9766a10a78edbb69adb79586d6aff99afe0a", "filename": "gcc/analyzer/diagnostic-manager.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_DIAGNOSTIC_MANAGER_H\n #define GCC_ANALYZER_DIAGNOSTIC_MANAGER_H\n \n+namespace ana {\n+\n /* A to-be-emitted diagnostic stored within diagnostic_manager.  */\n \n class saved_diagnostic\n@@ -121,4 +123,6 @@ class diagnostic_manager : public log_user\n   const int m_verbosity;\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_DIAGNOSTIC_MANAGER_H */"}, {"sha": "53c93791a07f86a1c6900cce9727251bb8ed302b", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -62,6 +62,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n static int readability_comparator (const void *p1, const void *p2);\n \n /* class impl_region_model_context : public region_model_context.  */\n@@ -882,6 +884,8 @@ exploded_node::dump (const extrinsic_state &ext_state) const\n   dump (stderr, ext_state);\n }\n \n+} // namespace ana\n+\n /* Return true if FNDECL has a gimple body.  */\n // TODO: is there a pre-canned way to do this?\n \n@@ -898,6 +902,8 @@ fndecl_has_gimple_body_p (tree fndecl)\n   return n->has_gimple_body_p ();\n }\n \n+namespace ana {\n+\n /* A pending_diagnostic subclass for implementing \"__analyzer_dump_path\".  */\n \n class dump_path_diagnostic\n@@ -2930,6 +2936,8 @@ struct function_call_string\n   call_string m_cs;\n };\n \n+} // namespace ana\n+\n template <> struct default_hash_traits<function_call_string>\n : public pod_hash_traits<function_call_string>\n {\n@@ -2975,6 +2983,8 @@ pod_hash_traits<function_call_string>::is_empty (value_type v)\n   return v.m_fun == reinterpret_cast<function *> (NULL);\n }\n \n+namespace ana {\n+\n /* Top-level cluster for generating .dot output for exploded graphs,\n    handling the functionless nodes, and grouping the remaining nodes by\n    callstring.  */\n@@ -3631,4 +3641,6 @@ run_checkers ()\n     fclose (dump_fout);\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "24b51ecf04ae29bac66e3a3208faf64ce1e98112", "filename": "gcc/analyzer/engine.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fengine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fengine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,10 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_ENGINE_H\n #define GCC_ANALYZER_ENGINE_H\n \n+namespace ana {\n+\n extern void run_checkers ();\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_ENGINE_H */"}, {"sha": "57636fbe07c64ff5c8e32e093125a268df241779", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_EXPLODED_GRAPH_H\n #define GCC_ANALYZER_EXPLODED_GRAPH_H\n \n+namespace ana {\n+\n /* Concrete implementation of region_model_context, wiring it up to the\n    rest of the analysis engine.  */\n \n@@ -828,4 +830,6 @@ class stmt_finder\n \n // TODO: split the above up?\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_EXPLODED_GRAPH_H */"}, {"sha": "6ed15ae95adf8f9a1795a4acfe1c15e4ab9d1eda", "filename": "gcc/analyzer/function-set.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Ffunction-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Ffunction-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffunction-set.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -27,6 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* Return true if NAME is within this set.  */\n \n bool\n@@ -188,4 +190,6 @@ analyzer_function_set_cc_tests ()\n \n #endif /* CHECKING_P */\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "f12ca72c42c5d8e7075f7983b79ab6eb203582bd", "filename": "gcc/analyzer/function-set.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Ffunction-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Ffunction-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffunction-set.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_FUNCTION_SET_H\n #define GCC_ANALYZER_FUNCTION_SET_H\n \n+namespace ana {\n+\n /* A set of names.  */\n \n class function_set\n@@ -43,4 +45,6 @@ class function_set\n   size_t m_count;\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_FUNCTION_SET_H */"}, {"sha": "c196903afe0ba65080ccfc6f0d9275751e378db2", "filename": "gcc/analyzer/pending-diagnostic.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -35,6 +35,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* Generate a label_text by printing FMT.\n \n    Use a clone of the global_dc for formatting callbacks.\n@@ -76,4 +78,6 @@ pending_diagnostic::same_tree_p (tree t1, tree t2)\n   return simple_cst_equal (t1, t2) == 1;\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "b1ff2688bcc7d224c853fe6ad120144ff1630634", "filename": "gcc/analyzer/pending-diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fpending-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fpending-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_PENDING_DIAGNOSTIC_H\n #define GCC_ANALYZER_PENDING_DIAGNOSTIC_H\n \n+namespace ana {\n+\n /* Various bundles of information used for generating more precise\n    messages for events within a diagnostic_path, for passing to the\n    various \"describe_*\" vfuncs of pending_diagnostic.  See those\n@@ -267,4 +269,6 @@ class pending_diagnostic_subclass : public pending_diagnostic\n   }\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_PENDING_DIAGNOSTIC_H */"}, {"sha": "2e7f76941113b314f2f832eb7cb92612c2097f67", "filename": "gcc/analyzer/program-point.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fprogram-point.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fprogram-point.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-point.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -55,6 +55,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* Get a string for PK.  */\n \n const char *\n@@ -551,4 +553,6 @@ analyzer_program_point_cc_tests ()\n \n #endif /* CHECKING_P */\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "3772a419d1a2728c0e9cf4bf8b187b515bc76df3", "filename": "gcc/analyzer/program-point.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fprogram-point.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fprogram-point.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-point.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_PROGRAM_POINT_H\n #define GCC_ANALYZER_PROGRAM_POINT_H\n \n+namespace ana {\n+\n class exploded_graph;\n \n /* An enum for distinguishing the various kinds of program_point.  */\n@@ -307,4 +309,6 @@ class program_point\n   call_string m_call_string;\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_PROGRAM_POINT_H */"}, {"sha": "72daee6428e9dda4cd2ccc79a101e743e67f6eae", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -57,6 +57,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* class sm_state_map.  */\n \n /* sm_state_map's ctor.  */\n@@ -1396,4 +1398,6 @@ analyzer_program_state_cc_tests ()\n \n #endif /* CHECKING_P */\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "a2c5c9a113753170f68da25973ef0ec9f2b3ec16", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_PROGRAM_STATE_H\n #define GCC_ANALYZER_PROGRAM_STATE_H\n \n+namespace ana {\n+\n /* Data shared by all program_state instances.  */\n \n class extrinsic_state\n@@ -47,6 +49,8 @@ class extrinsic_state\n   auto_delete_vec <state_machine> &m_checkers;\n };\n \n+} // namespace ana\n+\n template <> struct default_hash_traits<svalue_id>\n : public pod_hash_traits<svalue_id>\n {\n@@ -92,6 +96,8 @@ pod_hash_traits<svalue_id>::is_empty (value_type v)\n   return v.null_p ();\n }\n \n+namespace ana {\n+\n /* Map from svalue_id to state machine state, also capturing the origin of\n    each state.  */\n \n@@ -362,4 +368,6 @@ class state_change\n   auto_vec<sm_change> m_sm_changes;\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_PROGRAM_STATE_H */"}, {"sha": "0bca5c0fd7148f71be14b75f5d387742cd82730b", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -62,6 +62,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* Dump T to PP in language-independent form, for debugging/logging/dumping\n    purposes.  */\n \n@@ -6906,6 +6908,8 @@ canonicalization::dump () const\n   dump (stderr);\n }\n \n+} // namespace ana\n+\n /* Update HSTATE with a hash of SID.  */\n \n void\n@@ -6930,6 +6934,8 @@ debug (const region_model &rmodel)\n   rmodel.dump (false);\n }\n \n+namespace ana {\n+\n #if CHECKING_P\n \n namespace selftest {\n@@ -7984,4 +7990,6 @@ analyzer_region_model_cc_tests ()\n \n #endif /* CHECKING_P */\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "1090b96bfaa29f0f2b7026bb4871801ef4cfc997", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -31,6 +31,10 @@ along with GCC; see the file COPYING3.  If not see\n    recursive callstack.  */\n // TODO: would this be better as a new tree code?\n \n+using namespace ana;\n+\n+namespace ana {\n+\n class path_var\n {\n public:\n@@ -52,12 +56,16 @@ class path_var\n   int m_stack_depth; // or -1 for globals?\n };\n \n+} // namespace ana\n+\n namespace inchash\n {\n   extern void add_path_var (path_var pv, hash &hstate);\n } // namespace inchash\n \n \n+namespace ana {\n+\n /* A region_model is effectively a graph of regions and symbolic values.\n    We store per-model IDs rather than pointers to make it easier to clone\n    and to compare graphs.  */\n@@ -549,6 +557,8 @@ class region_svalue : public svalue\n   region_id m_rid;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -557,6 +567,8 @@ is_a_helper <region_svalue *>::test (svalue *sval)\n   return sval->get_kind () == SK_REGION;\n }\n \n+namespace ana {\n+\n /* Concrete subclass of svalue representing a specific constant value.  */\n \n class constant_svalue : public svalue\n@@ -606,6 +618,8 @@ class constant_svalue : public svalue\n   tree m_cst_expr;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -614,6 +628,8 @@ is_a_helper <constant_svalue *>::test (svalue *sval)\n   return sval->get_kind () == SK_CONSTANT;\n }\n \n+namespace ana {\n+\n /* Concrete subclass of svalue representing a unique but unknown value.\n    Comparisons of variables that share the same unknown value are known\n    to be equal, even if we don't know what the value is.  */\n@@ -690,6 +706,8 @@ class poisoned_svalue : public svalue\n   enum poison_kind m_kind;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -698,6 +716,8 @@ is_a_helper <poisoned_svalue *>::test (svalue *sval)\n   return sval->get_kind () == SK_POISONED;\n }\n \n+namespace ana {\n+\n /* Concrete subclass of svalue representing setjmp buffers, so that\n    longjmp can potentially \"return\" to an entirely different function.  */\n \n@@ -876,6 +896,8 @@ class region\n   region_id m_active_view_rid;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -884,6 +906,8 @@ is_a_helper <region *>::test (region *)\n   return true;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass for storing \"primitive\" types (integral types,\n    pointers, etc).  */\n \n@@ -972,6 +996,8 @@ class map_region : public region\n   map_t m_map;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -980,6 +1006,8 @@ is_a_helper <map_region *>::test (region *reg)\n   return (reg->dyn_cast_map_region () != NULL);\n }\n \n+namespace ana {\n+\n /* Abstract subclass representing a region with fields\n    (either a struct or a union).  */\n \n@@ -996,6 +1024,8 @@ class struct_or_union_region : public map_region\n   bool compare_fields (const struct_or_union_region &other) const;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1005,6 +1035,8 @@ is_a_helper <struct_or_union_region *>::test (region *reg)\n \t  || reg->get_kind () == RK_UNION);\n }\n \n+namespace ana {\n+\n /* Concrete region subclass.  A map_region representing a struct, using\n    FIELD_DECLs for its keys.  */\n \n@@ -1024,6 +1056,8 @@ class struct_region : public struct_or_union_region\n   bool compare_fields (const struct_region &other) const;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1032,6 +1066,8 @@ is_a_helper <struct_region *>::test (region *reg)\n   return reg->get_kind () == RK_STRUCT;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass.  A map_region representing a union, using\n    FIELD_DECLs for its keys.  */\n \n@@ -1051,6 +1087,8 @@ class union_region : public struct_or_union_region\n   bool compare_fields (const union_region &other) const;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1059,6 +1097,8 @@ is_a_helper <union_region *>::test (region *reg)\n   return reg->get_kind () == RK_UNION;\n }\n \n+namespace ana {\n+\n /* Abstract map_region subclass for accessing decls, used as a base class\n    for function frames and for the globals region.  */\n \n@@ -1117,6 +1157,8 @@ class frame_region : public scope_region\n   int m_depth;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1125,6 +1167,8 @@ is_a_helper <frame_region *>::test (region *reg)\n   return reg->get_kind () == RK_FRAME;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass, to hold global variables (data and bss).  */\n \n class globals_region : public scope_region\n@@ -1149,6 +1193,8 @@ class globals_region : public scope_region\n   bool compare_fields (const globals_region &other) const;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1157,6 +1203,8 @@ is_a_helper <globals_region *>::test (region *reg)\n   return reg->get_kind () == RK_GLOBALS;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass.  A map_region representing the code, using\n    FUNCTION_DECLs for its keys.  */\n \n@@ -1185,6 +1233,8 @@ class code_region : public map_region\n   bool compare_fields (const code_region &other) const;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1193,6 +1243,8 @@ is_a_helper <code_region *>::test (region *reg)\n   return reg->get_kind () == RK_CODE;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass.  A map_region representing the code for\n    a particular function, using LABEL_DECLs for its keys.  */\n \n@@ -1223,6 +1275,8 @@ class function_region : public map_region\n   bool compare_fields (const function_region &other) const;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1231,6 +1285,8 @@ is_a_helper <function_region *>::test (region *reg)\n   return reg->get_kind () == RK_FUNCTION;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass representing an array (or an array-like view\n    of a parent region of memory.\n    This can't be a map_region as we can't use trees as the keys: there's\n@@ -1325,6 +1381,8 @@ class array_region : public region\n   map_t m_map;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1333,6 +1391,8 @@ is_a_helper <array_region *>::test (region *reg)\n   return reg->get_kind () == RK_ARRAY;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass representing a stack, containing all stack\n    frames, and implicitly providing a POISON_KIND_UNINIT value to all\n    child regions by default.  */\n@@ -1387,6 +1447,8 @@ class stack_region : public region\n   auto_vec<region_id> m_frame_rids;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1395,6 +1457,8 @@ is_a_helper <stack_region *>::test (region *reg)\n   return reg->get_kind () == RK_STACK;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass: a region within which regions can be\n    dynamically allocated.  */\n \n@@ -1421,6 +1485,8 @@ class heap_region : public region\n \n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1429,6 +1495,8 @@ is_a_helper <heap_region *>::test (region *reg)\n   return reg->get_kind () == RK_HEAP;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass.  The root region, containing all regions\n    (either directly, or as descendents).\n    Unique within a region_model.  */\n@@ -1497,6 +1565,8 @@ class root_region : public region\n   region_id m_heap_rid;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -1505,6 +1575,8 @@ is_a_helper <root_region *>::test (region *reg)\n   return reg->get_kind () == RK_ROOT;\n }\n \n+namespace ana {\n+\n /* Concrete region subclass: a region to use when dereferencing an unknown\n    pointer.  */\n \n@@ -1941,6 +2013,8 @@ struct canonicalization\n   int m_next_sid_int;\n };\n \n+} // namespace ana\n+\n namespace inchash\n {\n   extern void add (svalue_id sid, hash &hstate);\n@@ -1949,10 +2023,14 @@ namespace inchash\n \n extern void debug (const region_model &rmodel);\n \n+namespace ana {\n+\n #if CHECKING_P\n \n namespace selftest {\n \n+using namespace ::selftest;\n+\n /* An implementation of region_model_context for use in selftests, which\n    stores any pending_diagnostic instances passed to it.  */\n \n@@ -2068,4 +2146,6 @@ void assert_condition (const location &loc,\n \n #endif /* #if CHECKING_P */\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_REGION_MODEL_H */"}, {"sha": "1144492653835446a9c3e866bf7df20ae8c1f248", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n namespace {\n \n /* A state machine for detecting misuses of <stdio.h>'s FILE * API.  */\n@@ -434,4 +436,6 @@ analyzer_sm_file_cc_tests ()\n \n #endif /* CHECKING_P */\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "526680accf2b98bef9985147e472c265006393cd", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n namespace {\n \n /* A state machine for detecting misuses of the malloc/free API.\n@@ -794,4 +796,6 @@ make_malloc_state_machine (logger *logger)\n   return new malloc_state_machine (logger);\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "cac78e7c041e0849312866a446248e00d3ffe1cc", "filename": "gcc/analyzer/sm-pattern-test.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-pattern-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-pattern-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-pattern-test.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n namespace {\n \n /* A state machine for use in DejaGnu tests, to check that\n@@ -149,4 +151,6 @@ make_pattern_test_state_machine (logger *logger)\n   return new pattern_test_state_machine (logger);\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "a067c18fba4daaf9b3c8180c61a599602061392a", "filename": "gcc/analyzer/sm-sensitive.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-sensitive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-sensitive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-sensitive.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n namespace {\n \n /* An experimental state machine, for tracking exposure of sensitive\n@@ -245,4 +247,6 @@ make_sensitive_state_machine (logger *logger)\n   return new sensitive_state_machine (logger);\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "146ad713f86dfebb8c4b774e56bb38964f5e4f31", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -61,6 +61,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n namespace {\n \n /* An experimental state machine, for tracking calls to async-signal-unsafe\n@@ -367,5 +369,7 @@ analyzer_sm_signal_cc_tests ()\n \n } // namespace selftest\n \n+} // namespace ana\n+\n #endif /* CHECKING_P */\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "00b794a36986e063e257e5dc7e022dc2b0e820c6", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n namespace {\n \n /* An experimental state machine, for tracking \"taint\": unsanitized uses\n@@ -325,4 +327,6 @@ make_taint_state_machine (logger *logger)\n   return new taint_state_machine (logger);\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "74fd17033ff38804821e6cbda65e49ac3e9bc970", "filename": "gcc/analyzer/sm.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -61,6 +61,8 @@ any_pointer_p (tree var)\n   return POINTER_TYPE_P (TREE_TYPE (var));\n }\n \n+namespace ana {\n+\n /* Add a state with name NAME to this state_machine.\n    The string is required to outlive the state_machine.\n \n@@ -119,4 +121,6 @@ make_checkers (auto_delete_vec <state_machine> &out, logger *logger)\n     }\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "25163d7a7b1bcd056e4a0f7cefa68d96fd830c59", "filename": "gcc/analyzer/sm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -26,6 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n extern tree is_zero_assignment (const gimple *stmt);\n extern bool any_pointer_p (tree var);\n \n+namespace ana {\n+\n class state_machine;\n class sm_context;\n class pending_diagnostic;\n@@ -175,4 +177,6 @@ extern state_machine *make_sensitive_state_machine (logger *logger);\n extern state_machine *make_signal_state_machine (logger *logger);\n extern state_machine *make_pattern_test_state_machine (logger *logger);\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_SM_H */"}, {"sha": "ee7d10c4c7160473daadcb4d3ccaf898d83dd14c", "filename": "gcc/analyzer/state-purge.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fstate-purge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fstate-purge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstate-purge.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -68,6 +68,8 @@ pod_hash_traits<function_point>::is_empty (value_type v)\n   return v.get_kind () == PK_EMPTY;\n }\n \n+namespace ana {\n+\n /* The result of analyzing which SSA names can be purged from state at\n    different points in the program, so that we can simplify program_state\n    objects, in the hope of reducing state-blowup.  */\n@@ -159,4 +161,6 @@ class state_purge_annotator : public dot_annotator\n   const state_purge_map *m_map;\n };\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_STATE_PURGE_H */"}, {"sha": "4660239082a69f073aaa0abbad3431706b5b71dc", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -54,6 +54,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #if ENABLE_ANALYZER\n \n+namespace ana {\n+\n /* Get the cgraph_edge, but only if there's an underlying function body.  */\n \n cgraph_edge *\n@@ -976,4 +978,6 @@ callgraph_superedge::map_expr_from_callee_to_caller (tree callee_expr,\n   return NULL_TREE;\n }\n \n+} // namespace ana\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "3580ae60c087b3c034d80f64dc88deb9f56bca96", "filename": "gcc/analyzer/supergraph.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsupergraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fanalyzer%2Fsupergraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.h?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -21,6 +21,10 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ANALYZER_SUPERGRAPH_H\n #define GCC_ANALYZER_SUPERGRAPH_H\n \n+using namespace ana;\n+\n+namespace ana {\n+\n /* Forward decls, using indentation to show inheritance.  */\n \n class supergraph;\n@@ -372,6 +376,8 @@ class callgraph_superedge : public superedge\n   cgraph_edge *const m_cedge;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -382,6 +388,8 @@ is_a_helper <const callgraph_superedge *>::test (const superedge *sedge)\n \t  || sedge->get_kind () == SUPEREDGE_RETURN);\n }\n \n+namespace ana {\n+\n /* A subclass of superedge representing an interprocedural call.  */\n \n class call_superedge : public callgraph_superedge\n@@ -416,6 +424,8 @@ class call_superedge : public callgraph_superedge\n   }\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -424,6 +434,8 @@ is_a_helper <const call_superedge *>::test (const superedge *sedge)\n   return sedge->get_kind () == SUPEREDGE_CALL;\n }\n \n+namespace ana {\n+\n /* A subclass of superedge represesnting an interprocedural return.  */\n \n class return_superedge : public callgraph_superedge\n@@ -453,6 +465,8 @@ class return_superedge : public callgraph_superedge\n   }\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -461,6 +475,8 @@ is_a_helper <const return_superedge *>::test (const superedge *sedge)\n   return sedge->get_kind () == SUPEREDGE_RETURN;\n }\n \n+namespace ana {\n+\n /* A subclass of superedge that corresponds to a CFG edge.  */\n \n class cfg_superedge : public superedge\n@@ -487,6 +503,8 @@ class cfg_superedge : public superedge\n   const ::edge m_cfg_edge;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -495,6 +513,8 @@ is_a_helper <const cfg_superedge *>::test (const superedge *sedge)\n   return sedge->get_kind () == SUPEREDGE_CFG_EDGE;\n }\n \n+namespace ana {\n+\n /* A subclass for edges from switch statements, retaining enough\n    information to identify the pertinent case, and for adding labels\n    when rendering via graphviz.  */\n@@ -526,6 +546,8 @@ class switch_cfg_superedge : public cfg_superedge {\n   const int m_idx;\n };\n \n+} // namespace ana\n+\n template <>\n template <>\n inline bool\n@@ -534,6 +556,8 @@ is_a_helper <const switch_cfg_superedge *>::test (const superedge *sedge)\n   return sedge->dyn_cast_switch_cfg_superedge () != NULL;\n }\n \n+namespace ana {\n+\n /* Base class for adding additional content to the .dot output\n    for a supergraph.  */\n \n@@ -551,4 +575,6 @@ class dot_annotator\n \n extern cgraph_edge *supergraph_call_edge (function *fun, gimple *stmt);\n \n+} // namespace ana\n+\n #endif /* GCC_ANALYZER_SUPERGRAPH_H */"}, {"sha": "c4f400cdfe686ff140151702ec3e117944ee47a8", "filename": "gcc/gdbinit.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fgdbinit.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fgdbinit.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbinit.in?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -291,11 +291,11 @@ command-line options).\n end\n \n define break-on-saved-diagnostic\n-break diagnostic_manager::add_diagnostic\n+break ana::diagnostic_manager::add_diagnostic\n end\n \n document break-on-saved-diagnostic\n-Put a breakpoint on diagnostic_manager::add_diagnostic, called within\n+Put a breakpoint on ana::diagnostic_manager::add_diagnostic, called within\n the analyzer whenever a diagnostic is saved for later de-duplication and\n possible emission.\n end"}, {"sha": "d47e92862f16e8cadab932c2ba93a0feb297465a", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75038aa6aa5b562e6358108619d66ef2ccab9a53/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=75038aa6aa5b562e6358108619d66ef2ccab9a53", "patch": "@@ -119,7 +119,7 @@ selftest::run_tests ()\n   lang_hooks.run_lang_selftests ();\n \n   /* Run the analyzer selftests (if enabled).  */\n-  run_analyzer_selftests ();\n+  ana::selftest::run_analyzer_selftests ();\n \n   /* Force a GC at the end of the selftests, to shake out GC-related\n      issues.  For example, if any GC-managed items have buggy (or missing)"}]}