{"sha": "ac6c858d072016ad2c409f1593fa290ad0d87e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2Yzg1OGQwNzIwMTZhZDJjNDA5ZjE1OTNmYTI5MGFkMGQ4N2UxMQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-15T14:03:09Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-16T13:21:34Z"}, "message": "testsuite: aarch64: Add zero-high-half tests for narrowing shifts\n\nAdd tests to verify that Neon narrowing-shift instructions clear the\ntop half of the result vector. It is sufficient to show that a\nsubsequent combine with a zero-vector is optimized away - leaving\njust the narrowing-shift instruction.\n\ngcc/testsuite/ChangeLog:\n\n2021-06-15  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/narrow_zero_high_half.c: New test.", "tree": {"sha": "eef1de2738773eff88c2655054be9e3dcba4e58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eef1de2738773eff88c2655054be9e3dcba4e58f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac6c858d072016ad2c409f1593fa290ad0d87e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6c858d072016ad2c409f1593fa290ad0d87e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6c858d072016ad2c409f1593fa290ad0d87e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6c858d072016ad2c409f1593fa290ad0d87e11/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7deee423f993bee8ee440f6fe0c9126c316c64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7deee423f993bee8ee440f6fe0c9126c316c64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7deee423f993bee8ee440f6fe0c9126c316c64b"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "a79a4c33dab360bd2e1148f7682ab15fd9554b4e", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_zero_high_half.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6c858d072016ad2c409f1593fa290ad0d87e11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6c858d072016ad2c409f1593fa290ad0d87e11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c?ref=ac6c858d072016ad2c409f1593fa290ad0d87e11", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+#define TEST_SHIFT(name, rettype, intype, fs, rs) \\\n+  rettype test_ ## name ## _ ## fs ## _zero_high \\\n+\t\t(intype a) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (name ## _ ## fs (a, 4), \\\n+\t\t\t\t\tvdup_n_ ## rs (0)); \\\n+\t}\n+\n+TEST_SHIFT (vshrn_n, int8x16_t, int16x8_t, s16, s8)\n+TEST_SHIFT (vshrn_n, int16x8_t, int32x4_t, s32, s16)\n+TEST_SHIFT (vshrn_n, int32x4_t, int64x2_t, s64, s32)\n+TEST_SHIFT (vshrn_n, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_SHIFT (vshrn_n, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_SHIFT (vshrn_n, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_SHIFT (vrshrn_n, int8x16_t, int16x8_t, s16, s8)\n+TEST_SHIFT (vrshrn_n, int16x8_t, int32x4_t, s32, s16)\n+TEST_SHIFT (vrshrn_n, int32x4_t, int64x2_t, s64, s32)\n+TEST_SHIFT (vrshrn_n, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_SHIFT (vrshrn_n, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_SHIFT (vrshrn_n, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_SHIFT (vqshrn_n, int8x16_t, int16x8_t, s16, s8)\n+TEST_SHIFT (vqshrn_n, int16x8_t, int32x4_t, s32, s16)\n+TEST_SHIFT (vqshrn_n, int32x4_t, int64x2_t, s64, s32)\n+TEST_SHIFT (vqshrn_n, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_SHIFT (vqshrn_n, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_SHIFT (vqshrn_n, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_SHIFT (vqrshrn_n, int8x16_t, int16x8_t, s16, s8)\n+TEST_SHIFT (vqrshrn_n, int16x8_t, int32x4_t, s32, s16)\n+TEST_SHIFT (vqrshrn_n, int32x4_t, int64x2_t, s64, s32)\n+TEST_SHIFT (vqrshrn_n, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_SHIFT (vqrshrn_n, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_SHIFT (vqrshrn_n, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_SHIFT (vqshrun_n, uint8x16_t, int16x8_t, s16, u8)\n+TEST_SHIFT (vqshrun_n, uint16x8_t, int32x4_t, s32, u16)\n+TEST_SHIFT (vqshrun_n, uint32x4_t, int64x2_t, s64, u32)\n+\n+TEST_SHIFT (vqrshrun_n, uint8x16_t, int16x8_t, s16, u8)\n+TEST_SHIFT (vqrshrun_n, uint16x8_t, int32x4_t, s32, u16)\n+TEST_SHIFT (vqrshrun_n, uint32x4_t, int64x2_t, s64, u32)\n+\n+/* { dg-final { scan-assembler-not \"dup\\\\t\" } } */\n+\n+/* { dg-final { scan-assembler-times \"\\\\tshrn\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\trshrn\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrn\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqshrn\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrn\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshrn\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrun\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\tv\" 3} }  */"}]}