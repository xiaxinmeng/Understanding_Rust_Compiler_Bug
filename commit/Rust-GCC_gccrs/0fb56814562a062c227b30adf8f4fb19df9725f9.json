{"sha": "0fb56814562a062c227b30adf8f4fb19df9725f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZiNTY4MTQ1NjJhMDYyYzIyN2IzMGFkZjhmNGZiMTlkZjk3MjVmOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-06-26T13:03:49Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-06-26T13:03:49Z"}, "message": "decl.c (gfc_match_decl_type_spec): Support TYPE(intrinsic-type-spec).\n\n2010-06-26  Tobias Burnus  <burnus@net-b.de>\n\n        * decl.c (gfc_match_decl_type_spec): Support\n        TYPE(intrinsic-type-spec).\n\n2010-06-26  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/type_decl_1.f90: New.\n        * gfortran.dg/type_decl_2.f90: New.\n\nFrom-SVN: r161429", "tree": {"sha": "701a4f3e870208a10ae35401b2899d42a78c1ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/701a4f3e870208a10ae35401b2899d42a78c1ab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fb56814562a062c227b30adf8f4fb19df9725f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb56814562a062c227b30adf8f4fb19df9725f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb56814562a062c227b30adf8f4fb19df9725f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb56814562a062c227b30adf8f4fb19df9725f9/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cf9fecaa087a4b4bb7e67a5dff03349fee09df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf9fecaa087a4b4bb7e67a5dff03349fee09df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf9fecaa087a4b4bb7e67a5dff03349fee09df9"}], "stats": {"total": 146, "additions": 131, "deletions": 15}, "files": [{"sha": "a9f13a848a8e99a1289a000e58192869f5a25885", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0fb56814562a062c227b30adf8f4fb19df9725f9", "patch": "@@ -1,3 +1,8 @@\n+2010-06-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* decl.c (gfc_match_decl_type_spec): Support\n+\tTYPE(intrinsic-type-spec).\n+\n 2010-06-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* intrinsic.h (gfc_check_selected_real_kind,"}, {"sha": "07c3acb9467aa99392e337acef72cb711d812ee5", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 79, "deletions": 15, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=0fb56814562a062c227b30adf8f4fb19df9725f9", "patch": "@@ -2342,7 +2342,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n   gfc_symbol *sym;\n   match m;\n   char c;\n-  bool seen_deferred_kind;\n+  bool seen_deferred_kind, matched_type;\n \n   /* A belt and braces check that the typespec is correctly being treated\n      as a deferred characteristic association.  */\n@@ -2374,62 +2374,106 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n       return MATCH_YES;\n     }\n \n-  if (gfc_match (\" integer\") == MATCH_YES)\n+\n+  m = gfc_match (\" type ( %n\", name);\n+  matched_type = (m == MATCH_YES);\n+  \n+  if ((matched_type && strcmp (\"integer\", name) == 0)\n+      || (!matched_type && gfc_match (\" integer\") == MATCH_YES))\n     {\n       ts->type = BT_INTEGER;\n       ts->kind = gfc_default_integer_kind;\n       goto get_kind;\n     }\n \n-  if (gfc_match (\" character\") == MATCH_YES)\n+  if ((matched_type && strcmp (\"character\", name) == 0)\n+      || (!matched_type && gfc_match (\" character\") == MATCH_YES))\n     {\n+      if (matched_type\n+\t  && gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: TYPE with \"\n+\t\t\t  \"intrinsic-type-spec at %C\") == FAILURE)\n+\treturn MATCH_ERROR;\n+\n       ts->type = BT_CHARACTER;\n       if (implicit_flag == 0)\n-\treturn gfc_match_char_spec (ts);\n+\tm = gfc_match_char_spec (ts);\n       else\n-\treturn MATCH_YES;\n+\tm = MATCH_YES;\n+\n+      if (matched_type && m == MATCH_YES && gfc_match_char (')') != MATCH_YES)\n+\tm = MATCH_ERROR;\n+\n+      return m;\n     }\n \n-  if (gfc_match (\" real\") == MATCH_YES)\n+  if ((matched_type && strcmp (\"real\", name) == 0)\n+      || (!matched_type && gfc_match (\" real\") == MATCH_YES))\n     {\n       ts->type = BT_REAL;\n       ts->kind = gfc_default_real_kind;\n       goto get_kind;\n     }\n \n-  if (gfc_match (\" double precision\") == MATCH_YES)\n+  if ((matched_type\n+       && (strcmp (\"doubleprecision\", name) == 0\n+\t   || (strcmp (\"double\", name) == 0\n+\t       && gfc_match (\" precision\") == MATCH_YES)))\n+      || (!matched_type && gfc_match (\" double precision\") == MATCH_YES))\n     {\n+      if (matched_type\n+\t  && gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: TYPE with \"\n+\t\t\t  \"intrinsic-type-spec at %C\") == FAILURE)\n+\treturn MATCH_ERROR;\n+      if (matched_type && gfc_match_char (')') != MATCH_YES)\n+\treturn MATCH_ERROR;\n+\n       ts->type = BT_REAL;\n       ts->kind = gfc_default_double_kind;\n       return MATCH_YES;\n     }\n \n-  if (gfc_match (\" complex\") == MATCH_YES)\n+  if ((matched_type && strcmp (\"complex\", name) == 0)\n+      || (!matched_type && gfc_match (\" complex\") == MATCH_YES))\n     {\n       ts->type = BT_COMPLEX;\n       ts->kind = gfc_default_complex_kind;\n       goto get_kind;\n     }\n \n-  if (gfc_match (\" double complex\") == MATCH_YES)\n+  if ((matched_type\n+       && (strcmp (\"doublecomplex\", name) == 0\n+\t   || (strcmp (\"double\", name) == 0\n+\t       && gfc_match (\" complex\") == MATCH_YES)))\n+      || (!matched_type && gfc_match (\" double complex\") == MATCH_YES))\n     {\n-      if (gfc_notify_std (GFC_STD_GNU, \"DOUBLE COMPLEX at %C does not \"\n-\t\t\t  \"conform to the Fortran 95 standard\") == FAILURE)\n+      if (gfc_notify_std (GFC_STD_GNU, \"Extension: DOUBLE COMPLEX at %C\")\n+\t  == FAILURE)\n+\treturn MATCH_ERROR;\n+\n+      if (matched_type\n+\t  && gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: TYPE with \"\n+\t\t\t  \"intrinsic-type-spec at %C\") == FAILURE)\n+\treturn MATCH_ERROR;\n+\n+      if (matched_type && gfc_match_char (')') != MATCH_YES)\n \treturn MATCH_ERROR;\n \n       ts->type = BT_COMPLEX;\n       ts->kind = gfc_default_double_kind;\n       return MATCH_YES;\n     }\n \n-  if (gfc_match (\" logical\") == MATCH_YES)\n+  if ((matched_type && strcmp (\"logical\", name) == 0)\n+      || (!matched_type && gfc_match (\" logical\") == MATCH_YES))\n     {\n       ts->type = BT_LOGICAL;\n       ts->kind = gfc_default_logical_kind;\n       goto get_kind;\n     }\n \n-  m = gfc_match (\" type ( %n )\", name);\n+  if (matched_type)\n+    m = gfc_match_char (')');\n+\n   if (m == MATCH_YES)\n     ts->type = BT_DERIVED;\n   else\n@@ -2490,23 +2534,43 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n   return MATCH_YES;\n \n get_kind:\n+  if (matched_type\n+      && gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: TYPE with \"\n+\t\t\t \"intrinsic-type-spec at %C\") == FAILURE)\n+    return MATCH_ERROR;\n+\n   /* For all types except double, derived and character, look for an\n      optional kind specifier.  MATCH_NO is actually OK at this point.  */\n   if (implicit_flag == 1)\n-    return MATCH_YES;\n+    {\n+\tif (matched_type && gfc_match_char (')') != MATCH_YES)\n+\t  return MATCH_ERROR;\n+\n+\treturn MATCH_YES;\n+    }\n \n   if (gfc_current_form == FORM_FREE)\n     {\n       c = gfc_peek_ascii_char ();\n       if (!gfc_is_whitespace (c) && c != '*' && c != '('\n \t  && c != ':' && c != ',')\n-       return MATCH_NO;\n+        {\n+\t  if (matched_type && c == ')')\n+\t    {\n+\t      gfc_next_ascii_char ();\n+\t      return MATCH_YES;\n+\t    }\n+\t  return MATCH_NO;\n+\t}\n     }\n \n   m = gfc_match_kind_spec (ts, false);\n   if (m == MATCH_NO && ts->type != BT_CHARACTER)\n     m = gfc_match_old_kind_spec (ts);\n \n+  if (matched_type && gfc_match_char (')') != MATCH_YES)\n+    return MATCH_ERROR;\n+\n   /* Defer association of the KIND expression of function results\n      until after USE and IMPORT statements.  */\n   if ((gfc_current_state () == COMP_NONE && gfc_error_flag_test ())"}, {"sha": "084c75e05acd49c2c4cf7c73db0afe3613086c42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fb56814562a062c227b30adf8f4fb19df9725f9", "patch": "@@ -1,3 +1,8 @@\n+2010-06-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/type_decl_1.f90: New.\n+\t* gfortran.dg/type_decl_2.f90: New.\n+\n 2010-06-26  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/semicolon_fixed.f: Fix dg syntax.."}, {"sha": "93928652a05dd0ecb10d038d5c2a8752148c3cdd", "filename": "gcc/testsuite/gfortran.dg/type_decl_1.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_1.f90?ref=0fb56814562a062c227b30adf8f4fb19df9725f9", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+!\n+! Fortran 2008: TYPE ( intrinsic-type-spec )\n+!\n+implicit none\n+type(integer) :: a\n+type(real) :: b\n+type(logical ) :: c\n+type(character) :: d\n+type(double precision) :: e\n+\n+type(integer(8)) :: f\n+type(real(kind=4)) :: g\n+type(logical ( kind = 1 ) ) :: h\n+type(character (len=10,kind=1) ) :: i\n+\n+type(double complex) :: j ! { dg-error \"Extension: DOUBLE COMPLEX\" }\n+end\n+\n+module m\n+  integer, parameter :: k4  = 4\n+end module m\n+\n+type(integer (kind=k4)) function f()\n+  use m\n+  f = 42\n+end\n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "6525880e06e35670f1ad5fc2d7dca661ed598a46", "filename": "gcc/testsuite/gfortran.dg/type_decl_2.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb56814562a062c227b30adf8f4fb19df9725f9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_decl_2.f90?ref=0fb56814562a062c227b30adf8f4fb19df9725f9", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! Fortran 2008: TYPE ( intrinsic-type-spec )\n+!\n+implicit none\n+type(integer)          :: a ! { dg-error \"Fortran 2008\" }\n+type(real)             :: b ! { dg-error \"Fortran 2008\" }\n+type(logical)          :: c ! { dg-error \"Fortran 2008\" }\n+type(character)        :: d ! { dg-error \"Fortran 2008\" }\n+type(double precision) :: e ! { dg-error \"Fortran 2008\" }\n+end"}]}