{"sha": "5b57e28b23b0edd71631f137918a6c9972714518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1N2UyOGIyM2IwZWRkNzE2MzFmMTM3OTE4YTZjOTk3MjcxNDUxOA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2001-08-08T07:45:10Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2001-08-08T07:45:10Z"}, "message": "flow.c (back_edge_of_syntactic_loop_p): Add whitespace.\n\n\n\t* flow.c (back_edge_of_syntactic_loop_p): Add whitespace.\n\t(libcall_dead_p): Likewise.\n\n\t(mark_used_regs): Constify fmt.\n\t(find_use_as_address): Likewise.\n\nFrom-SVN: r44707", "tree": {"sha": "88ac009491fb5bf42a034fd3064f9f817404237c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88ac009491fb5bf42a034fd3064f9f817404237c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b57e28b23b0edd71631f137918a6c9972714518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b57e28b23b0edd71631f137918a6c9972714518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b57e28b23b0edd71631f137918a6c9972714518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b57e28b23b0edd71631f137918a6c9972714518/comments", "author": null, "committer": null, "parents": [{"sha": "ece4fc823e11bc1f1545aebf426ddb0a6e1ba7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece4fc823e11bc1f1545aebf426ddb0a6e1ba7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece4fc823e11bc1f1545aebf426ddb0a6e1ba7d0"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "338b7048e7410ca304663411f242a599a0c7ef32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57e28b23b0edd71631f137918a6c9972714518/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57e28b23b0edd71631f137918a6c9972714518/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b57e28b23b0edd71631f137918a6c9972714518", "patch": "@@ -1,3 +1,11 @@\n+2001-08-08  Graham Stott  <grahams@redhat.com>\n+\n+\t* flow.c (back_edge_of_syntactic_loop_p): Add whitespace.\n+\t(libcall_dead_p): Likewise.\n+\n+\t(mark_used_regs): Constify fmt.\n+\t(find_use_as_address): Likewise.\n+\n 2001-08-08  Graham Stott  <grahams@redhat.com>\n \n \t* c-typeck.c (RESTORE_SPELLING_DEPTH): Uppercase and parenthesize macro"}, {"sha": "e32114c868935b5d89bb4dd512042b7ba0ee2417", "filename": "gcc/flow.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57e28b23b0edd71631f137918a6c9972714518/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57e28b23b0edd71631f137918a6c9972714518/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=5b57e28b23b0edd71631f137918a6c9972714518", "patch": "@@ -2140,10 +2140,13 @@ back_edge_of_syntactic_loop_p (bb1, bb2)\n {\n   rtx insn;\n   int count = 0;\n+\n   if (bb1->index > bb2->index)\n     return false;\n+\n   if (bb1->index == bb2->index)\n     return true;\n+\n   for (insn = bb1->end; insn != bb2->head && count >= 0;\n        insn = NEXT_INSN (insn))\n     if (GET_CODE (insn) == NOTE)\n@@ -2153,6 +2156,7 @@ back_edge_of_syntactic_loop_p (bb1, bb2)\n \tif (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END)\n \t  count--;\n       }\n+\n   return count >= 0;\n }\n \n@@ -5938,6 +5942,7 @@ libcall_dead_p (pbi, note, insn)\n   if (x)\n     {\n       register rtx r = SET_SRC (x);\n+\n       if (GET_CODE (r) == REG)\n \t{\n \t  rtx call = XEXP (note, 0);\n@@ -7579,7 +7584,7 @@ mark_used_regs (pbi, x, cond, insn)\n   /* Recursively scan the operands of this expression.  */\n \n   {\n-    register const char *fmt = GET_RTX_FORMAT (code);\n+    register const char * const fmt = GET_RTX_FORMAT (code);\n     register int i;\n \n     for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n@@ -7741,7 +7746,7 @@ find_use_as_address (x, reg, plusconst)\n      HOST_WIDE_INT plusconst;\n {\n   enum rtx_code code = GET_CODE (x);\n-  const char *fmt = GET_RTX_FORMAT (code);\n+  const char * const fmt = GET_RTX_FORMAT (code);\n   register int i;\n   register rtx value = 0;\n   register rtx tem;"}]}