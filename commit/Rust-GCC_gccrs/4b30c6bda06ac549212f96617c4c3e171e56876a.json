{"sha": "4b30c6bda06ac549212f96617c4c3e171e56876a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzMGM2YmRhMDZhYzU0OTIxMmY5NjYxN2M0YzNlMTcxZTU2ODc2YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-04-25T20:35:17Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-25T20:35:17Z"}, "message": "Runtime.java, [...]: Replaced java.lang.Runtime.securityManager by java.lang.SecurityManager.current...\n\n2005-04-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/lang/Runtime.java,\n\tjava/lang/SecurityManager.java,\n\tjava/lang/System.java,\n\tjava/lang/ThreadGroup.java:\n\tReplaced java.lang.Runtime.securityManager by\n\tjava.lang.SecurityManager.current (as used in GNU classpath).\n\nFrom-SVN: r98738", "tree": {"sha": "ec38f37fff1c149be7ad3e52f4c403a76e3a1733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec38f37fff1c149be7ad3e52f4c403a76e3a1733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b30c6bda06ac549212f96617c4c3e171e56876a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b30c6bda06ac549212f96617c4c3e171e56876a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b30c6bda06ac549212f96617c4c3e171e56876a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b30c6bda06ac549212f96617c4c3e171e56876a/comments", "author": null, "committer": null, "parents": [{"sha": "1f4ea3f2fa3915f2c576a8748c9067e49f35057f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f4ea3f2fa3915f2c576a8748c9067e49f35057f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f4ea3f2fa3915f2c576a8748c9067e49f35057f"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "36a21654b887746f14aa2f39c8b0b2aae78d9c66", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4b30c6bda06ac549212f96617c4c3e171e56876a", "patch": "@@ -1,3 +1,12 @@\n+2005-04-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/Runtime.java,\n+\tjava/lang/SecurityManager.java,\n+\tjava/lang/System.java,\n+\tjava/lang/ThreadGroup.java:\n+\tReplaced java.lang.Runtime.securityManager by\n+\tjava.lang.SecurityManager.current (as used in GNU classpath).\n+\n 2005-04-25  David Gilbert  <david.gilbert@object-refinery.com>\n \n \t* java/awt/Transparency.java"}, {"sha": "7a0c5987a74f90879a5ca340f2976ccea92daafa", "filename": "libjava/java/lang/Runtime.java", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2Fjava%2Flang%2FRuntime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2Fjava%2Flang%2FRuntime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntime.java?ref=4b30c6bda06ac549212f96617c4c3e171e56876a", "patch": "@@ -65,14 +65,6 @@\n    */\n   private final String[] libpath;\n \n-  /**\n-   * The current security manager. This is located here instead of in\n-   * System, to avoid security problems, as well as bootstrap issues.\n-   * Make sure to access it in a thread-safe manner; it is package visible\n-   * to avoid overhead in java.lang.\n-   */\n-  static SecurityManager securityManager;\n-\n   static\n   {\n     init();\n@@ -151,7 +143,7 @@ public static Runtime getRuntime()\n    */\n   public void exit(int status)\n   {\n-    SecurityManager sm = securityManager; // Be thread-safe!\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkExit(status);\n     boolean first = false;\n@@ -279,7 +271,7 @@ public void exit(int status)\n    */\n   public void addShutdownHook(Thread hook)\n   {\n-    SecurityManager sm = securityManager; // Be thread-safe!\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkPermission(new RuntimePermission(\"shutdownHooks\"));\n     if (hook.isAlive() || hook.getThreadGroup() == null)\n@@ -313,7 +305,7 @@ public void addShutdownHook(Thread hook)\n    */\n   public boolean removeShutdownHook(Thread hook)\n   {\n-    SecurityManager sm = securityManager; // Be thread-safe!\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkPermission(new RuntimePermission(\"shutdownHooks\"));\n     synchronized (libpath)\n@@ -340,7 +332,7 @@ public boolean removeShutdownHook(Thread hook)\n    */\n   public void halt(int status)\n   {\n-    SecurityManager sm = securityManager; // Be thread-safe!\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkExit(status);\n     exitInternal(status);\n@@ -364,7 +356,7 @@ public void halt(int status)\n    */\n   public static void runFinalizersOnExit(boolean finalizeOnExit)\n   {\n-    SecurityManager sm = securityManager; // Be thread-safe!\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkExit(0);\n     current.finalizeOnExit = finalizeOnExit;\n@@ -494,7 +486,7 @@ public Process exec(String[] cmd, String[] env) throws IOException\n   public Process exec(String[] cmd, String[] env, File dir)\n     throws IOException\n   {\n-    SecurityManager sm = securityManager; // Be thread-safe!\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkExec(cmd[0]);\n     return execInternal(cmd, env, dir);\n@@ -581,7 +573,7 @@ public Process exec(String[] cmd, String[] env, File dir)\n    */\n   public void load(String filename)\n   {\n-    SecurityManager sm = securityManager; // Be thread-safe!\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkLink(filename);\n     _load(filename, false);\n@@ -611,7 +603,7 @@ public void loadLibrary(String libname)\n   {\n     // This is different from the Classpath implementation, but I\n     // believe it is more correct.\n-    SecurityManager sm = securityManager; // Be thread-safe!\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkLink(libname);\n     _load(libname, true);"}, {"sha": "387a8a99756cdaeb0455f5f03da43ed74ef7a474", "filename": "libjava/java/lang/SecurityManager.java", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2Fjava%2Flang%2FSecurityManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2Fjava%2Flang%2FSecurityManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSecurityManager.java?ref=4b30c6bda06ac549212f96617c4c3e171e56876a", "patch": "@@ -125,6 +125,14 @@\n  */\n public class SecurityManager\n {\n+  /**\n+   * The current security manager. This is located here instead of in\n+   * System, to avoid security problems, as well as bootstrap issues.\n+   * Make sure to access it in a thread-safe manner; it is package visible\n+   * to avoid overhead in java.lang.\n+   */\n+  static volatile SecurityManager current;\n+\n   /**\n    * Tells whether or not the SecurityManager is currently performing a\n    * security check."}, {"sha": "8632d0b7d5dd8c45f165fa10e2071d8b3f71978e", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=4b30c6bda06ac549212f96617c4c3e171e56876a", "patch": "@@ -120,7 +120,7 @@ private System()\n    */\n   public static void setIn(InputStream in)\n   {\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPermission(new RuntimePermission(\"setIO\"));\n     setIn0(in);\n@@ -137,7 +137,7 @@ public static void setIn(InputStream in)\n    */\n   public static void setOut(PrintStream out)\n   {\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPermission(new RuntimePermission(\"setIO\"));\n     \n@@ -155,7 +155,7 @@ public static void setOut(PrintStream out)\n    */\n   public static void setErr(PrintStream err)\n   {\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPermission(new RuntimePermission(\"setIO\"));\n     setErr0(err);\n@@ -180,10 +180,10 @@ public static synchronized void setSecurityManager(SecurityManager sm)\n     // Implementation note: the field lives in Runtime because of bootstrap\n     // initialization issues. This method is synchronized so that no other\n     // thread changes it to null before this thread makes the change.\n-    if (Runtime.securityManager != null)\n-      Runtime.securityManager.checkPermission\n+    if (SecurityManager.current != null)\n+      SecurityManager.current.checkPermission\n         (new RuntimePermission(\"setSecurityManager\"));\n-    Runtime.securityManager = sm;\n+    SecurityManager.current = sm;\n   }\n \n   /**\n@@ -196,7 +196,7 @@ public static SecurityManager getSecurityManager()\n   {\n     // Implementation note: the field lives in Runtime because of bootstrap\n     // initialization issues.\n-    return Runtime.securityManager;\n+    return SecurityManager.current;\n   }\n \n   /**\n@@ -309,7 +309,7 @@ public static native void arraycopy(Object src, int srcStart,\n    */\n   public static Properties getProperties()\n   {\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPropertiesAccess();\n     return SystemProperties.getProperties();\n@@ -326,7 +326,7 @@ public static Properties getProperties()\n    */\n   public static void setProperties(Properties properties)\n   {\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPropertiesAccess();\n     SystemProperties.setProperties(properties);\n@@ -344,7 +344,7 @@ public static void setProperties(Properties properties)\n    */\n   public static String getProperty(String key)\n   {\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPropertyAccess(key);\n     else if (key.length() == 0)\n@@ -365,7 +365,7 @@ else if (key.length() == 0)\n    */\n   public static String getProperty(String key, String def)\n   {\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPropertyAccess(key);\n     return SystemProperties.getProperty(key, def);\n@@ -385,7 +385,7 @@ public static String getProperty(String key, String def)\n    */\n   public static String setProperty(String key, String value)\n   {\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPermission(new PropertyPermission(key, \"write\"));\n     return SystemProperties.setProperty(key, value);\n@@ -407,7 +407,7 @@ public static String getenv(String name)\n   {\n     if (name == null)\n       throw new NullPointerException();\n-    SecurityManager sm = Runtime.securityManager; // Be thread-safe.\n+    SecurityManager sm = SecurityManager.current; // Be thread-safe.\n     if (sm != null)\n       sm.checkPermission(new RuntimePermission(\"getenv.\" + name));\n     return getenv0(name);"}, {"sha": "30a6e14cba20c00540fdf846ea2b88e118711315", "filename": "libjava/java/lang/ThreadGroup.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2Fjava%2Flang%2FThreadGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b30c6bda06ac549212f96617c4c3e171e56876a/libjava%2Fjava%2Flang%2FThreadGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadGroup.java?ref=4b30c6bda06ac549212f96617c4c3e171e56876a", "patch": "@@ -263,7 +263,7 @@ public final boolean parentOf(ThreadGroup group)\n   public final void checkAccess()\n   {\n     // Bypass System.getSecurityManager, for bootstrap efficiency.\n-    SecurityManager sm = Runtime.securityManager;\n+    SecurityManager sm = SecurityManager.current;\n     if (sm != null)\n       sm.checkAccess(this);\n   }"}]}