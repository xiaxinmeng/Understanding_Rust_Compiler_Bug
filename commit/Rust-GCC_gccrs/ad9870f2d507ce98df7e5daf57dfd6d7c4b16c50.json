{"sha": "ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5ODcwZjJkNTA3Y2U5OGRmN2U1ZGFmNTdkZmQ2ZDdjNGIxNmM1MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-04T15:39:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-04T15:39:05Z"}, "message": "More global trees.\n\n\t* cp-tree.h (enum cp_tree_index): Add CPTI_GLOBAL,\n\tCPTI_GLOBAL_TYPE, CPTI_GLOBAL_IDENTIFIER, CPTI_ANON_IDENTIFIER,\n\tCPTI_INIT_LIST_IDENTIFIER.\n\t(global_namespace, global_type_node, global_identifier)\n\tanon_identifier, init_list_identifier): New.\n\t* decl.c (global_type_node, global_scope_name): Delete.\n\t(initialize_predefined_identifiers): Add new identifiers.\n\t(cxx_init_decl_processing): Adjust.\n\t* name-lookup.h (global_namespace, global_type_node): Delete.\n\t* name-lookup.c (global_namespace, anonymous_namespace_name)\n\tget_anonymous_namespace_name): Delete.\n\t(namespace_scope_ht_size, begin_scope, pushtag_1)\n\tpush_namespace): Adjust,\n\t* call.c (type_has_extended_temps): Use init_list_identifier.\n\t* pt.c (listify): Likewise.\n(((--This line, and those below, will be ignored--\n\nM    cp/name-lookup.c\nM    cp/name-lookup.h\nM    cp/ChangeLog\nM    cp/call.c\nM    cp/pt.c\nM    cp/cp-tree.h\nM    cp/decl.c\n\nFrom-SVN: r247599", "tree": {"sha": "d6b141e007885fa58515eaceac8d4000e96dcf94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b141e007885fa58515eaceac8d4000e96dcf94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26f1a658e6308da5a7b804391c624acc3b1bee74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f1a658e6308da5a7b804391c624acc3b1bee74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f1a658e6308da5a7b804391c624acc3b1bee74"}], "stats": {"total": 104, "additions": 47, "deletions": 57}, "files": [{"sha": "06596e176acef6744a3e75e2118502d9a7e62674", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "patch": "@@ -1,5 +1,22 @@\n 2017-05-04  Nathan Sidwell  <nathan@acm.org>\n \n+\tMore global trees.\n+\t* cp-tree.h (enum cp_tree_index): Add CPTI_GLOBAL,\n+\tCPTI_GLOBAL_TYPE, CPTI_GLOBAL_IDENTIFIER, CPTI_ANON_IDENTIFIER,\n+\tCPTI_INIT_LIST_IDENTIFIER.\n+\t(global_namespace, global_type_node, global_identifier,\n+\tanon_identifier, init_list_identifier): New.\n+\t* decl.c (global_type_node, global_scope_name): Delete.\n+\t(initialize_predefined_identifiers): Add new identifiers.\n+\t(cxx_init_decl_processing): Adjust.\n+\t* name-lookup.h (global_namespace, global_type_node): Delete.\n+\t* name-lookup.c (global_namespace, anonymous_namespace_name,\n+\tget_anonymous_namespace_name): Delete.\n+\t(namespace_scope_ht_size, begin_scope, pushtag_1,\n+\tpush_namespace): Adjust,\n+\t* call.c (type_has_extended_temps): Use init_list_identifier.\n+\t* pt.c (listify): Likewise.\n+\n \t* name-lookup.c: Reorder functions to make merging from modules\n \tbranch simpler.\n "}, {"sha": "9110f4f530807b35d89fac87ce1127702ebc01d6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "patch": "@@ -10543,15 +10543,15 @@ type_has_extended_temps (tree type)\n bool\n is_std_init_list (tree type)\n {\n-  /* Look through typedefs.  */\n   if (!TYPE_P (type))\n     return false;\n   if (cxx_dialect == cxx98)\n     return false;\n+  /* Look through typedefs.  */\n   type = TYPE_MAIN_VARIANT (type);\n   return (CLASS_TYPE_P (type)\n \t  && CP_TYPE_CONTEXT (type) == std_node\n-\t  && strcmp (TYPE_NAME_STRING (type), \"initializer_list\") == 0);\n+\t  && init_list_identifier == DECL_NAME (TYPE_NAME (type)));\n }\n \n /* Returns true iff DECL is a list constructor: i.e. a constructor which"}, {"sha": "e27cc3c6dcdc55955867cd1fc2dd7ea72fa721ad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "patch": "@@ -119,6 +119,8 @@ enum cp_tree_index\n     CPTI_VTBL_PTR_TYPE,\n     CPTI_STD,\n     CPTI_ABI,\n+    CPTI_GLOBAL,\n+    CPTI_GLOBAL_TYPE,\n     CPTI_CONST_TYPE_INFO_TYPE,\n     CPTI_TYPE_INFO_PTR_TYPE,\n     CPTI_ABORT_FNDECL,\n@@ -138,9 +140,12 @@ enum cp_tree_index\n     CPTI_THIS_IDENTIFIER,\n     CPTI_PFN_IDENTIFIER,\n     CPTI_VPTR_IDENTIFIER,\n+    CPTI_GLOBAL_IDENTIFIER,\n     CPTI_STD_IDENTIFIER,\n+    CPTI_ANON_IDENTIFIER,\n     CPTI_AUTO_IDENTIFIER,\n     CPTI_DECLTYPE_AUTO_IDENTIFIER,\n+    CPTI_INIT_LIST_IDENTIFIER,\n \n     CPTI_LANG_NAME_C,\n     CPTI_LANG_NAME_CPLUSPLUS,\n@@ -184,6 +189,8 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define vtbl_ptr_type_node\t\tcp_global_trees[CPTI_VTBL_PTR_TYPE]\n #define std_node\t\t\tcp_global_trees[CPTI_STD]\n #define abi_node\t\t\tcp_global_trees[CPTI_ABI]\n+#define global_namespace\t\tcp_global_trees[CPTI_GLOBAL]\n+#define global_type_node\t\tcp_global_trees[CPTI_GLOBAL_TYPE]\n #define const_type_info_type_node\tcp_global_trees[CPTI_CONST_TYPE_INFO_TYPE]\n #define type_info_ptr_type\t\tcp_global_trees[CPTI_TYPE_INFO_PTR_TYPE]\n #define abort_fndecl\t\t\tcp_global_trees[CPTI_ABORT_FNDECL]\n@@ -224,12 +231,14 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define this_identifier\t\t\tcp_global_trees[CPTI_THIS_IDENTIFIER]\n #define pfn_identifier\t\t\tcp_global_trees[CPTI_PFN_IDENTIFIER]\n #define vptr_identifier\t\t\tcp_global_trees[CPTI_VPTR_IDENTIFIER]\n-/* The name of the std namespace.  */\n+/* The name of the ::, std & anon namespaces.  */\n+#define global_identifier\t\tcp_global_trees[CPTI_GLOBAL_IDENTIFIER]\n #define std_identifier\t\t\tcp_global_trees[CPTI_STD_IDENTIFIER]\n+#define anon_identifier\t\t\tcp_global_trees[CPTI_ANON_IDENTIFIER]\n /* auto and declspec(auto) identifiers.  */\n #define auto_identifier\t\t\tcp_global_trees[CPTI_AUTO_IDENTIFIER]\n #define decltype_auto_identifier\tcp_global_trees[CPTI_DECLTYPE_AUTO_IDENTIFIER]\n-/* The name of a C++17 deduction guide.  */\n+#define init_list_identifier\t\tcp_global_trees[CPTI_INIT_LIST_IDENTIFIER]\n #define lang_name_c\t\t\tcp_global_trees[CPTI_LANG_NAME_C]\n #define lang_name_cplusplus\t\tcp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]\n \n@@ -277,6 +286,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n    access nodes in tree.h.  */\n \n #define access_default_node\t\tnull_node\n+\n \f\n #include \"name-lookup.h\"\n "}, {"sha": "6a7aeb3f7b38098068bd42cb8c4dc3ea50dba0b0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "patch": "@@ -140,14 +140,6 @@ static void expand_static_init (tree, tree);\n \n tree cp_global_trees[CPTI_MAX];\n \n-/* Indicates that there is a type value in some namespace, although\n-   that is not necessarily in scope at the moment.  */\n-\n-tree global_type_node;\n-\n-/* The node that holds the \"name\" of the global scope.  */\n-tree global_scope_name;\n-\n #define local_names cp_function_chain->x_local_names\n \n /* A list of objects which have constructors or destructors\n@@ -3935,7 +3927,7 @@ make_unbound_class_template (tree context, tree name, tree parm_list,\n \n \f\n \n-/* Push the declarations of builtin types into the namespace.\n+/* Push the declarations of builtin types into the global namespace.\n    RID_INDEX is the index of the builtin type in the array\n    RID_POINTERS.  NAME is the name used when looking up the builtin\n    type.  TYPE is the _TYPE node for the builtin type.  */\n@@ -4037,10 +4029,15 @@ initialize_predefined_identifiers (void)\n     { VTABLE_PFN_NAME, &pfn_identifier, 0 },\n     { \"_vptr\", &vptr_identifier, 0 },\n     { \"__vtt_parm\", &vtt_parm_identifier, 0 },\n-    { \"::\", &global_scope_name, 0 },\n+    { \"::\", &global_identifier, 0 },\n     { \"std\", &std_identifier, 0 },\n+      /* The demangler expects anonymous namespaces to be called\n+\t something starting with '_GLOBAL__N_'.  It no longer needs\n+\t to be unique to the TU.  */\n+    { \"_GLOBAL__N_1\", &anon_identifier, 0 },\n     { \"auto\", &auto_identifier, 0 },\n     { \"decltype(auto)\", &decltype_auto_identifier, 0 },\n+    { \"initializer_list\", &init_list_identifier, 0 },\n     { NULL, NULL, 0 }\n   };\n \n@@ -4073,14 +4070,15 @@ cxx_init_decl_processing (void)\n   current_binding_level = NULL;\n   /* Enter the global namespace.  */\n   gcc_assert (global_namespace == NULL_TREE);\n-  global_namespace = build_lang_decl (NAMESPACE_DECL, global_scope_name,\n+  global_namespace = build_lang_decl (NAMESPACE_DECL, global_identifier,\n \t\t\t\t      void_type_node);\n+  TREE_PUBLIC (global_namespace) = 1;\n   DECL_CONTEXT (global_namespace)\n     = build_translation_unit_decl (get_identifier (main_input_filename));\n   debug_hooks->register_main_translation_unit\n     (DECL_CONTEXT (global_namespace));\n-  TREE_PUBLIC (global_namespace) = 1;\n   begin_scope (sk_namespace, global_namespace);\n+  current_namespace = global_namespace;\n \n   if (flag_visibility_ms_compat)\n     default_visibility = VISIBILITY_HIDDEN;"}, {"sha": "43f334bd19dc57ae6513e249602e2261d53e3490", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "patch": "@@ -61,14 +61,6 @@ static tree push_using_directive (tree);\n static tree lookup_extern_c_fun_in_all_ns (tree);\n static void diagnose_name_conflict (tree, tree);\n \n-/* The :: namespace.  */\n-\n-tree global_namespace;\n-\n-/* The name of the anonymous namespace, throughout this translation\n-   unit.  */\n-static GTY(()) tree anonymous_namespace_name;\n-\n /* Add DECL to the list of things declared in B.  */\n \n static void\n@@ -644,23 +636,6 @@ lookup_arg_dependent (tree name, tree fns, vec<tree, va_gc> *args)\n   return ret;\n }\n \n-/* Initialize anonymous_namespace_name if necessary, and return it.  */\n-\n-static tree\n-get_anonymous_namespace_name (void)\n-{\n-  if (!anonymous_namespace_name)\n-    {\n-      /* We used to use get_file_function_name here, but that isn't\n-\t necessary now that anonymous namespace typeinfos\n-\t are !TREE_PUBLIC, and thus compared by address.  */\n-      /* The demangler expects anonymous namespaces to be called\n-\t something starting with '_GLOBAL__N_'.  */\n-      anonymous_namespace_name = get_identifier (\"_GLOBAL__N_1\");\n-    }\n-  return anonymous_namespace_name;\n-}\n-\n /* Compute the chain index of a binding_entry given the HASH value of its\n    name and the total COUNT of chains.  COUNT is assumed to be a power\n    of 2.  */\n@@ -2111,7 +2086,7 @@ namespace_scope_ht_size (tree ns)\n \n   return name == std_identifier\n     ? NAMESPACE_STD_HT_SIZE\n-    : (name == global_scope_name\n+    : (name == global_identifier\n        ? GLOBAL_SCOPE_HT_SIZE\n        : NAMESPACE_ORDINARY_HT_SIZE);\n }\n@@ -2189,7 +2164,7 @@ begin_scope (scope_kind kind, tree entity)\n       NAMESPACE_LEVEL (entity) = scope;\n       vec_alloc (scope->static_decls,\n \t\t (DECL_NAME (entity) == std_identifier\n-\t\t  || DECL_NAME (entity) == global_scope_name) ? 200 : 10);\n+\t\t  || DECL_NAME (entity) == global_identifier) ? 200 : 10);\n       break;\n \n     default:\n@@ -6167,7 +6142,7 @@ pushtag_1 (tree name, tree type, tag_scope scope)\n \t    return decl;\n \n \t  if (DECL_CONTEXT (decl) == std_node\n-\t      && strcmp (TYPE_NAME_STRING (type), \"initializer_list\") == 0\n+\t      && init_list_identifier == DECL_NAME (TYPE_NAME (type))\n \t      && !CLASSTYPE_TEMPLATE_INFO (type))\n \t    {\n \t      error (\"declaration of std::initializer_list does not match \"\n@@ -6489,11 +6464,11 @@ push_namespace (tree name)\n   /* We should not get here if the global_namespace is not yet constructed\n      nor if NAME designates the global namespace:  The global scope is\n      constructed elsewhere.  */\n-  gcc_assert (global_namespace != NULL && name != global_scope_name);\n+  gcc_assert (global_namespace != NULL && name != global_identifier);\n \n   if (anon)\n     {\n-      name = get_anonymous_namespace_name();\n+      name = anon_identifier;\n       d = IDENTIFIER_NAMESPACE_VALUE (name);\n       if (d)\n \t/* Reopening anonymous namespace.  */"}, {"sha": "a2ffc56e336e4520a5b44b39277619624368002c", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "patch": "@@ -278,15 +278,6 @@ struct GTY(()) cp_binding_level {\n \n #define class_binding_level scope_chain->class_bindings\n \n-/* The tree node representing the global scope.  */\n-extern GTY(()) tree global_namespace;\n-extern GTY(()) tree global_scope_name;\n-\n-/* Indicates that there is a type value in some namespace, although\n-   that is not necessarily in scope at the moment.  */\n-\n-extern GTY(()) tree global_type_node;\n-\n /* True if SCOPE designates the global scope binding contour.  */\n #define global_scope_p(SCOPE) \\\n   ((SCOPE) == NAMESPACE_LEVEL (global_namespace))"}, {"sha": "809f7b8e90f741cd9e3cd5fe99d6c4a29338a6cf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ad9870f2d507ce98df7e5daf57dfd6d7c4b16c50", "patch": "@@ -24730,8 +24730,7 @@ make_constrained_auto (tree con, tree args)\n static tree\n listify (tree arg)\n {\n-  tree std_init_list = namespace_binding\n-    (get_identifier (\"initializer_list\"), std_node);\n+  tree std_init_list = namespace_binding (init_list_identifier, std_node);\n   tree argvec;\n   if (!std_init_list || !DECL_CLASS_TEMPLATE_P (std_init_list))\n     {    "}]}