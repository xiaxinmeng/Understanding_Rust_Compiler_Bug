{"sha": "1bc695cdac5a11970398b5f977e0ce196ce1e0d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJjNjk1Y2RhYzVhMTE5NzAzOThiNWY5NzdlMGNlMTk2Y2UxZTBkMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-08-18T06:50:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-08-18T06:50:55Z"}, "message": "pa.c (emit_move_sequence): Check both reload_in_progress and reload_completed when...\n\n\t* pa.c (emit_move_sequence): Check both reload_in_progress and\n\treload_completed when choosing a scratch/temporary register.\n\nFrom-SVN: r5180", "tree": {"sha": "1923581a315ac5ff95ae34fa3026c41ac2cd1ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1923581a315ac5ff95ae34fa3026c41ac2cd1ead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bc695cdac5a11970398b5f977e0ce196ce1e0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc695cdac5a11970398b5f977e0ce196ce1e0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc695cdac5a11970398b5f977e0ce196ce1e0d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc695cdac5a11970398b5f977e0ce196ce1e0d0/comments", "author": null, "committer": null, "parents": [{"sha": "44552b6a5b3f09a2670af1bd3af75ad396b31c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44552b6a5b3f09a2670af1bd3af75ad396b31c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44552b6a5b3f09a2670af1bd3af75ad396b31c6d"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "4ab34a5288d6c33a70f16580e2c02137665bd0d2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc695cdac5a11970398b5f977e0ce196ce1e0d0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc695cdac5a11970398b5f977e0ce196ce1e0d0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1bc695cdac5a11970398b5f977e0ce196ce1e0d0", "patch": "@@ -842,7 +842,7 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t  emit_insn (gen_rtx (SET, VOIDmode, operand0, operand1));\n \t  return 1;\n \t}\n-      if (! reload_in_progress)\n+      if (! (reload_in_progress || reload_completed))\n \t{\n \t  operands[0] = validize_mem (operand0);\n \t  operands[1] = operand1 = force_reg (mode, operand1);\n@@ -865,7 +865,13 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t{\n \t  if (flag_pic)\n \t    {\n-\t      rtx temp = reload_in_progress ? operand0 : gen_reg_rtx (Pmode);\n+\t      rtx temp;\n+\n+\t      if (reload_in_progress || reload_completed)\n+\t\ttemp = operand0;\n+\t      else\n+\t\ttemp = gen_reg_rtx (Pmode);\n+\t\t\n \t      operands[1] = legitimize_pic_address (operand1, mode, temp);\n               emit_insn (gen_rtx (SET, VOIDmode, operand0, operands[1]));\n \t    }\n@@ -876,7 +882,7 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t    {\n \t      rtx temp, set;\n \n-\t      if (reload_in_progress) \n+\t      if (reload_in_progress || reload_completed) \n \t\ttemp = scratch_reg ? scratch_reg : operand0;\n \t      else\n \t\ttemp = gen_reg_rtx (mode);\n@@ -893,8 +899,13 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t\t\t\t  gen_rtx (HIGH, mode, operand1)));\n \t      if (function_label_operand (operand1, mode))\n \t\t{\n-\t\t  rtx temp = reload_in_progress ? scratch_reg\n-\t\t    : gen_reg_rtx (mode);\n+\t\t  rtx temp;\n+\n+\t\t  if (reload_in_progress || reload_completed)\n+\t\t    temp = scratch_reg;\n+\t\t  else\n+\t\t    temp = gen_reg_rtx (mode);\n+\n \t\t  if (!temp)\n \t\t    abort ();\n \t\t  emit_insn (gen_rtx (PARALLEL, VOIDmode,\n@@ -912,7 +923,13 @@ emit_move_sequence (operands, mode, scratch_reg)\n       else if (GET_CODE (operand1) != CONST_INT\n \t       || ! cint_ok_for_move (INTVAL (operand1)))\n \t{\n-\t  rtx temp = reload_in_progress ? operand0 : gen_reg_rtx (mode);\n+\t  rtx temp;\n+\n+\t  if (reload_in_progress || reload_completed)\n+\t    temp = operand0;\n+\t  else\n+\t    temp = gen_reg_rtx (mode);\n+\n \t  emit_insn (gen_rtx (SET, VOIDmode, temp,\n \t\t\t      gen_rtx (HIGH, mode, operand1)));\n \t  operands[1] = gen_rtx (LO_SUM, mode, temp, operand1);"}]}