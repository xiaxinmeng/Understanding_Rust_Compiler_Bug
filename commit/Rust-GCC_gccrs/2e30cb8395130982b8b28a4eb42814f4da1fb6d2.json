{"sha": "2e30cb8395130982b8b28a4eb42814f4da1fb6d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzMGNiODM5NTEzMDk4MmI4YjI4YTRlYjQyODE0ZjRkYTFmYjZkMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-22T13:19:15Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-22T13:19:15Z"}, "message": "[arm] Match subtraction from carry_operation\n\nOn Arm we have both carry and borrow operations, but borrow is\nessentially '~carry'.  Of course, with boolean logic ~carry is also\n1-carry.\n\nGCC transforms\n\n\t(1 - X - LTU (cc, 0))\n\ninto\n\n\t(GEU (cc, 0) - X)\n\nNow the former matches a real insn in Arm state, using the RSC\ninstruction with #1 as the immediate, but we currently do not\nrecognize the canonicalized form.  Nevertheless, given the above\nlogic, this turns out to be quite straight forward as the original\nexpression matches arm_borrow_operation and the revised form can be\nused with arm_carry_operation.  Since we match this new pattern we\nalso update rtx_costs to handle it.\n\n\t* config/arm/arm.md (rsbsi_carryin_reg): New pattern.\n\t* config/arm/arm.c (arm_rtx_costs_internal, case MINUS): Handle\n\tsubtraction from a carry operation.\n\nFrom-SVN: r277290", "tree": {"sha": "bc2e47c87c976dfbcb205370a614fe10b10bc2b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc2e47c87c976dfbcb205370a614fe10b10bc2b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e30cb8395130982b8b28a4eb42814f4da1fb6d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e30cb8395130982b8b28a4eb42814f4da1fb6d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e30cb8395130982b8b28a4eb42814f4da1fb6d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e30cb8395130982b8b28a4eb42814f4da1fb6d2/comments", "author": null, "committer": null, "parents": [{"sha": "b747c183714a5d68da8037d8b705a8bc67f11bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b747c183714a5d68da8037d8b705a8bc67f11bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b747c183714a5d68da8037d8b705a8bc67f11bac"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "b1a336796323bf337f42a60f26c021f12b490732", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e30cb8395130982b8b28a4eb42814f4da1fb6d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e30cb8395130982b8b28a4eb42814f4da1fb6d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e30cb8395130982b8b28a4eb42814f4da1fb6d2", "patch": "@@ -1,3 +1,9 @@\n+2019-10-22  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (rsbsi_carryin_reg): New pattern.\n+\t* config/arm/arm.c (arm_rtx_costs_internal, case MINUS): Handle\n+\tsubtraction from a carry operation.\n+\n 2019-10-22  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/predicates.md (arm_borrow_operation): Handle CC_ADCmode."}, {"sha": "5c2c48f4253daad429f865d798df593d6bf8856b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e30cb8395130982b8b28a4eb42814f4da1fb6d2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e30cb8395130982b8b28a4eb42814f4da1fb6d2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2e30cb8395130982b8b28a4eb42814f4da1fb6d2", "patch": "@@ -10107,6 +10107,13 @@ arm_rtx_costs_internal (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \t      *cost += rtx_cost (XEXP (op0, 0), mode, MINUS, 0, speed_p);\n \t      return true;\n \t    }\n+\t  /* (Carry_op - reg) can be done as RSC Rd, Rn, #1 on Arm.\n+\t     Note we do mean ~borrow here.  */\n+\t  else if (TARGET_ARM && arm_carry_operation (op0, SImode))\n+\t    {\n+\t      *cost += rtx_cost (op1, mode, code, 1, speed_p);\n+\t      return true;\n+\t    }\n \n \t  shift_op = shifter_op_p (op0, &shift_by_reg);\n \t  if (shift_op == NULL)"}, {"sha": "ae77cc377f62478f431b980feb7164e292d39686", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e30cb8395130982b8b28a4eb42814f4da1fb6d2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e30cb8395130982b8b28a4eb42814f4da1fb6d2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=2e30cb8395130982b8b28a4eb42814f4da1fb6d2", "patch": "@@ -1649,6 +1649,19 @@\n    (set_attr \"type\" \"adc_reg,adc_imm,alu_shift_imm\")]\n )\n \n+;; Special canonicalization of the above when operand1 == (const_int 1):\n+;; in this case the 'borrow' needs to treated like subtracting from the carry.\n+(define_insn \"rsbsi_carryin_reg\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(minus:SI (match_operand:SI 1 \"arm_carry_operation\" \"\")\n+\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")))]\n+  \"TARGET_ARM\"\n+  \"rsc%?\\\\t%0, %2, #1\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"adc_imm\")]\n+)\n+\n (define_insn \"cmpsi3_carryin_<CC_EXTEND>out\"\n   [(set (reg:<CC_EXTEND> CC_REGNUM)\n \t(compare:<CC_EXTEND>"}]}