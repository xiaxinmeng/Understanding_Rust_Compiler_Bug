{"sha": "6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2MjRmN2Y4ODJlYTNmZGQxMjFjOWFiNWY4ZDYwNGMwMGFjM2UxMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-10-26T18:27:13Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-10-26T18:27:13Z"}, "message": "tree-inline.c (WALK_SUBTREE_TAIL): New macro.\n\n* tree-inline.c (WALK_SUBTREE_TAIL): New macro.\n(walk_tree): Use it for tail calls where appropriate.\n\nFrom-SVN: r46556", "tree": {"sha": "3e38f5a0ee686bbb4dece960208ac211172b1f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e38f5a0ee686bbb4dece960208ac211172b1f69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10/comments", "author": null, "committer": null, "parents": [{"sha": "45c23566b6caa9010dda42a4df20b4e7f17d238a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c23566b6caa9010dda42a4df20b4e7f17d238a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c23566b6caa9010dda42a4df20b4e7f17d238a"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "ac8eb1cf9806596feb21f5aa4e6ba26f179cb789", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10", "patch": "@@ -1,3 +1,8 @@\n+2001-10-26  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* tree-inline.c (WALK_SUBTREE_TAIL): New macro.\n+\t(walk_tree): Use it for tail calls where appropriate.\n+\n 2001-10-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* cse.c (check_for_label_ref): Don't require REG_LABEL notes for"}, {"sha": "865ec234caa9fbb1a88a1d25ff1cab03c46e8663", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10", "patch": "@@ -1086,6 +1086,15 @@ walk_tree (tp, func, data, htab_)\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define WALK_SUBTREE_TAIL(NODE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+       tp = & (NODE);\t\t\t\t\t\\\n+       goto tail_recurse;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+ tail_recurse:\n   /* Skip empty subtrees.  */\n   if (!*tp)\n     return NULL_TREE;\n@@ -1120,7 +1129,7 @@ walk_tree (tp, func, data, htab_)\n       if (statement_code_p (code) || code == TREE_LIST\n \t  || (*lang_hooks.tree_inlining.tree_chain_matters_p) (*tp))\n \t/* But we still need to check our siblings.  */\n-\treturn walk_tree (&TREE_CHAIN (*tp), func, data, htab);\n+\tWALK_SUBTREE_TAIL (TREE_CHAIN (*tp));\n       else\n \treturn NULL_TREE;\n     }\n@@ -1168,18 +1177,15 @@ walk_tree (tp, func, data, htab_)\n \t    }\n \n \t  /* This can be tail-recursion optimized if we write it this way.  */\n-\t  return walk_tree (&TREE_CHAIN (*tp), func, data, htab);\n+\t  WALK_SUBTREE_TAIL (TREE_CHAIN (*tp));\n \t}\n \n       /* We didn't find what we were looking for.  */\n       return NULL_TREE;\n     }\n   else if (TREE_CODE_CLASS (code) == 'd')\n     {\n-      WALK_SUBTREE (TREE_TYPE (*tp));\n-\n-      /* We didn't find what we were looking for.  */\n-      return NULL_TREE;\n+      WALK_SUBTREE_TAIL (TREE_TYPE (*tp));\n     }\n \n   result = (*lang_hooks.tree_inlining.walk_subtrees) (tp, &walk_subtrees, func,\n@@ -1211,30 +1217,35 @@ walk_tree (tp, func, data, htab_)\n \n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n-      WALK_SUBTREE (TREE_TYPE (*tp));\n+      WALK_SUBTREE_TAIL (TREE_TYPE (*tp));\n       break;\n \n     case TREE_LIST:\n       WALK_SUBTREE (TREE_VALUE (*tp));\n-      WALK_SUBTREE (TREE_CHAIN (*tp));\n+      WALK_SUBTREE_TAIL (TREE_CHAIN (*tp));\n       break;\n \n     case TREE_VEC:\n       {\n \tint len = TREE_VEC_LENGTH (*tp);\n-\twhile (len--)\n+\n+\tif (len == 0)\n+\t  break;\n+\n+\t/* Walk all elements but the first.  */\n+\twhile (--len)\n \t  WALK_SUBTREE (TREE_VEC_ELT (*tp, len));\n+\n+\t/* Now walk the first one as a tail call.  */\n+\tWALK_SUBTREE_TAIL (TREE_VEC_ELT (*tp, 0));\n       }\n-      break;\n \n     case COMPLEX_CST:\n       WALK_SUBTREE (TREE_REALPART (*tp));\n-      WALK_SUBTREE (TREE_IMAGPART (*tp));\n-      break;\n+      WALK_SUBTREE_TAIL (TREE_IMAGPART (*tp));\n \n     case CONSTRUCTOR:\n-      WALK_SUBTREE (CONSTRUCTOR_ELTS (*tp));\n-      break;\n+      WALK_SUBTREE_TAIL (CONSTRUCTOR_ELTS (*tp));\n \n     case METHOD_TYPE:\n       WALK_SUBTREE (TYPE_METHOD_BASETYPE (*tp));\n@@ -1253,18 +1264,15 @@ walk_tree (tp, func, data, htab_)\n \n     case ARRAY_TYPE:\n       WALK_SUBTREE (TREE_TYPE (*tp));\n-      WALK_SUBTREE (TYPE_DOMAIN (*tp));\n-      break;\n+      WALK_SUBTREE_TAIL (TYPE_DOMAIN (*tp));\n \n     case INTEGER_TYPE:\n       WALK_SUBTREE (TYPE_MIN_VALUE (*tp));\n-      WALK_SUBTREE (TYPE_MAX_VALUE (*tp));\n-      break;\n+      WALK_SUBTREE_TAIL (TYPE_MAX_VALUE (*tp));\n \n     case OFFSET_TYPE:\n       WALK_SUBTREE (TREE_TYPE (*tp));\n-      WALK_SUBTREE (TYPE_OFFSET_BASETYPE (*tp));\n-      break;\n+      WALK_SUBTREE_TAIL (TYPE_OFFSET_BASETYPE (*tp));\n \n     default:\n       abort ();"}]}