{"sha": "15ed7b52cb0be60cd8f845648a265b2cffe4f963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlZDdiNTJjYjBiZTYwY2Q4Zjg0NTY0OGEyNjViMmNmZmU0Zjk2Mw==", "commit": {"author": {"name": "Jon Grimm", "email": "jgrimm2@us.ibm.com", "date": "2005-12-18T21:40:47Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2005-12-18T21:40:47Z"}, "message": "optabs.c (init_floating_libfuncs): Handle decimal float modes.\n\n\t* optabs.c (init_floating_libfuncs): Handle decimal float modes.\n\t(init_optabs): Handle libfuncs for decimal float.\n\t* genopinit.c (gen_insn): Handle MODE_DECIMAL_FLOAT.\n\t* stor-layout.c (int_mode_for_mode): Likewise.\n\t* simplify-rtx.c (simplify_immed_subreg): Likewise.\n\t(simplify_unary_operation_1): Skip optimisations for decimal float\n\tmodes.\n\t* varasm.c (output_constant_pool_2): Handle MODE_DECIMAL_FLOAT.\n\t* emit-rtl.c (gen_const_vector): Add assertion check.\n\t(init_emit_once): Populate const_tiny_rtx with constants in each\n\tdecimal float mode.\n\t* expmed.c (extract_high_half, expand_mult_highpart_optab,\n\texpand_mult_highpart): Assert that mode is not a scalar float\n\tmode.\n\t* expr.c (convert_move): Handle conversion between decimal and\n\tbinary floats of the same size.\n\t* convert.c (convert_to_real): Consider decimal float types when\n\tfolding.\n\t* dwarf2out.c (base_type_die): Use DW_ATE_decimal_float to\n\tdescribe decimal floating point types.\n\nCo-Authored-By: Ben Elliston <bje@au.ibm.com>\nCo-Authored-By: Janis Johnson <janis187@us.ibm.com>\n\nFrom-SVN: r108762", "tree": {"sha": "7e005c5de55a867524e5bf6183ab854c96880e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e005c5de55a867524e5bf6183ab854c96880e3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ed7b52cb0be60cd8f845648a265b2cffe4f963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ed7b52cb0be60cd8f845648a265b2cffe4f963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ed7b52cb0be60cd8f845648a265b2cffe4f963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ed7b52cb0be60cd8f845648a265b2cffe4f963/comments", "author": null, "committer": null, "parents": [{"sha": "5a575f77fde8efa894e6eefa20ca7e96881fe0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a575f77fde8efa894e6eefa20ca7e96881fe0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a575f77fde8efa894e6eefa20ca7e96881fe0e1"}], "stats": {"total": 126, "additions": 114, "deletions": 12}, "files": [{"sha": "98468169d1cc4811973072823464ad3f5bc83472", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -1,3 +1,28 @@\n+2005-12-17  Jon Grimm  <jgrimm2@us.ibm.com>\n+\t    Janis Johnson  <janis187@us.ibm.com>\n+\t    Ben Elliston  <bje@au.ibm.com>\n+\n+\t* optabs.c (init_floating_libfuncs): Handle decimal float modes.\n+\t(init_optabs): Handle libfuncs for decimal float.\n+\t* genopinit.c (gen_insn): Handle MODE_DECIMAL_FLOAT.\n+\t* stor-layout.c (int_mode_for_mode): Likewise.\n+\t* simplify-rtx.c (simplify_immed_subreg): Likewise.\n+\t(simplify_unary_operation_1): Skip optimisations for decimal float\n+\tmodes.\n+\t* varasm.c (output_constant_pool_2): Handle MODE_DECIMAL_FLOAT.\n+\t* emit-rtl.c (gen_const_vector): Add assertion check.\n+\t(init_emit_once): Populate const_tiny_rtx with constants in each\n+\tdecimal float mode.\n+\t* expmed.c (extract_high_half, expand_mult_highpart_optab,\n+\texpand_mult_highpart): Assert that mode is not a scalar float\n+\tmode.\n+\t* expr.c (convert_move): Handle conversion between decimal and\n+\tbinary floats of the same size.\n+\t* convert.c (convert_to_real): Consider decimal float types when\n+\tfolding.\n+\t* dwarf2out.c (base_type_die): Use DW_ATE_decimal_float to\n+\tdescribe decimal floating point types.\n+\t\n 2005-12-18  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR rtl-optimization/21041"}, {"sha": "e8030bf9f01e5fa135145ac81da111dcfbb80baa", "filename": "gcc/convert.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -263,6 +263,28 @@ convert_to_real (tree type, tree expr)\n \t\t && FLOAT_TYPE_P (TREE_TYPE (arg1)))\n \t       {\n \t\t  tree newtype = type;\n+\n+\t\t  if (TYPE_MODE (TREE_TYPE (arg0)) == SDmode\n+\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == SDmode)\n+\t\t    newtype = dfloat32_type_node;\n+\t\t  if (TYPE_MODE (TREE_TYPE (arg0)) == DDmode\n+\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == DDmode)\n+\t\t    newtype = dfloat64_type_node;\n+\t\t  if (TYPE_MODE (TREE_TYPE (arg0)) == TDmode\n+\t\t      || TYPE_MODE (TREE_TYPE (arg1)) == TDmode)\n+                    newtype = dfloat128_type_node;\n+\t\t  if (newtype == dfloat32_type_node\n+\t\t      || newtype == dfloat64_type_node\n+\t\t      || newtype == dfloat128_type_node)\n+\t\t    {\n+\t\t      expr = build2 (TREE_CODE (expr), newtype,\n+\t\t\t\t     fold (convert_to_real (newtype, arg0)),\n+\t\t\t\t     fold (convert_to_real (newtype, arg1)));\n+\t\t      if (newtype == type)\n+\t\t\treturn expr;\n+\t\t      break;\n+\t\t    }\n+\n \t\t  if (TYPE_PRECISION (TREE_TYPE (arg0)) > TYPE_PRECISION (newtype))\n \t\t    newtype = TREE_TYPE (arg0);\n \t\t  if (TYPE_PRECISION (TREE_TYPE (arg1)) > TYPE_PRECISION (newtype))"}, {"sha": "96c655637bd69123015ed454bb5ee6ad70d0e639", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -8124,7 +8124,10 @@ base_type_die (tree type)\n       break;\n \n     case REAL_TYPE:\n-      encoding = DW_ATE_float;\n+      if (DECIMAL_FLOAT_MODE_P (TYPE_MODE (type)))\n+\tencoding = DW_ATE_decimal_float;\n+      else\n+\tencoding = DW_ATE_float;\n       break;\n \n       /* Dwarf2 doesn't know anything about complex ints, so use"}, {"sha": "828651041a08d5cc8fb08704a5fefb5ab8051f7b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -5151,6 +5151,8 @@ gen_const_vector (enum machine_mode mode, int constant)\n   units = GET_MODE_NUNITS (mode);\n   inner = GET_MODE_INNER (mode);\n \n+  gcc_assert (!DECIMAL_FLOAT_MODE_P (inner));\n+\n   v = rtvec_alloc (units);\n \n   /* We need to call this function after we set the scalar const_tiny_rtx\n@@ -5227,7 +5229,8 @@ init_emit_once (int line_numbers)\n   word_mode = VOIDmode;\n   double_mode = VOIDmode;\n \n-  for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n+       mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     {\n       if (GET_MODE_BITSIZE (mode) == BITS_PER_UNIT\n@@ -5239,7 +5242,8 @@ init_emit_once (int line_numbers)\n \tword_mode = mode;\n     }\n \n-  for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT); mode != VOIDmode;\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT);\n+       mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     {\n       if (GET_MODE_BITSIZE (mode) == DOUBLE_TYPE_SIZE\n@@ -5324,14 +5328,22 @@ init_emit_once (int line_numbers)\n       REAL_VALUE_TYPE *r =\n \t(i == 0 ? &dconst0 : i == 1 ? &dconst1 : &dconst2);\n \n-      for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT); mode != VOIDmode;\n+      for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT);\n+\t   mode != VOIDmode;\n+\t   mode = GET_MODE_WIDER_MODE (mode))\n+\tconst_tiny_rtx[i][(int) mode] =\n+\t  CONST_DOUBLE_FROM_REAL_VALUE (*r, mode);\n+\n+      for (mode = GET_CLASS_NARROWEST_MODE (MODE_DECIMAL_FLOAT);\n+\t   mode != VOIDmode;\n \t   mode = GET_MODE_WIDER_MODE (mode))\n \tconst_tiny_rtx[i][(int) mode] =\n \t  CONST_DOUBLE_FROM_REAL_VALUE (*r, mode);\n \n       const_tiny_rtx[i][(int) VOIDmode] = GEN_INT (i);\n \n-      for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;\n+      for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n+\t   mode != VOIDmode;\n \t   mode = GET_MODE_WIDER_MODE (mode))\n \tconst_tiny_rtx[i][(int) mode] = GEN_INT (i);\n "}, {"sha": "23909404005e21afd9758d11e872742a43acdf52", "filename": "gcc/expmed.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -3383,6 +3383,8 @@ extract_high_half (enum machine_mode mode, rtx op)\n   if (mode == word_mode)\n     return gen_highpart (mode, op);\n \n+  gcc_assert (!SCALAR_FLOAT_MODE_P (mode));\n+\n   wider_mode = GET_MODE_WIDER_MODE (mode);\n   op = expand_shift (RSHIFT_EXPR, wider_mode, op,\n \t\t     build_int_cst (NULL_TREE, GET_MODE_BITSIZE (mode)), 0, 1);\n@@ -3402,6 +3404,8 @@ expand_mult_highpart_optab (enum machine_mode mode, rtx op0, rtx op1,\n   rtx tem;\n   int size;\n \n+  gcc_assert (!SCALAR_FLOAT_MODE_P (mode));\n+\n   wider_mode = GET_MODE_WIDER_MODE (mode);\n   size = GET_MODE_BITSIZE (mode);\n \n@@ -3512,6 +3516,7 @@ expand_mult_highpart (enum machine_mode mode, rtx op0, rtx op1,\n   struct algorithm alg;\n   rtx tem;\n \n+  gcc_assert (!SCALAR_FLOAT_MODE_P (mode));\n   /* We can't support modes wider than HOST_BITS_PER_INT.  */\n   gcc_assert (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT);\n "}, {"sha": "322db4ff27380ab39c0d14fb2961016769a019f9", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -410,10 +410,15 @@ convert_move (rtx to, rtx from, int unsignedp)\n       rtx value, insns;\n       convert_optab tab;\n \n-      gcc_assert (GET_MODE_PRECISION (from_mode)\n-\t\t  != GET_MODE_PRECISION (to_mode));\n+      gcc_assert ((GET_MODE_PRECISION (from_mode)\n+\t\t   != GET_MODE_PRECISION (to_mode))\n+\t\t  || (DECIMAL_FLOAT_MODE_P (from_mode)\n+\t\t      != DECIMAL_FLOAT_MODE_P (to_mode)));\n       \n-      if (GET_MODE_PRECISION (from_mode) < GET_MODE_PRECISION (to_mode))\n+      if (GET_MODE_PRECISION (from_mode) == GET_MODE_PRECISION (to_mode))\n+\t/* Conversion between decimal float and binary float, same size.  */\n+\ttab = DECIMAL_FLOAT_MODE_P (from_mode) ? trunc_optab : sext_optab;\n+      else if (GET_MODE_PRECISION (from_mode) < GET_MODE_PRECISION (to_mode))\n \ttab = sext_optab;\n       else\n \ttab = trunc_optab;"}, {"sha": "ec8076b8206764d478c7f733539957d7033cf8f3", "filename": "gcc/genopinit.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -304,7 +304,9 @@ gen_insn (rtx insn)\n                             || mode_class[i] == MODE_INT\n                             || mode_class[i] == MODE_PARTIAL_INT\n \t\t\t    || mode_class[i] == MODE_VECTOR_INT)\n-\t\t\t&& (! force_float || mode_class[i] == MODE_FLOAT \n+\t\t\t&& (! force_float\n+\t\t\t    || mode_class[i] == MODE_FLOAT \n+\t\t\t    || mode_class[i] == MODE_DECIMAL_FLOAT\n \t\t\t    || mode_class[i] == MODE_COMPLEX_FLOAT\n \t\t\t    || mode_class[i] == MODE_VECTOR_FLOAT))\n \t\t      break;"}, {"sha": "d79cf668c60f10a64fc8fe1cb929cf575235fb67", "filename": "gcc/optabs.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -4375,9 +4375,10 @@ expand_float (rtx to, rtx from, int unsignedp)\n \t  }\n       }\n \n-  /* Unsigned integer, and no way to convert directly.\n-     Convert as signed, then conditionally adjust the result.  */\n-  if (unsignedp && can_do_signed)\n+  /* Unsigned integer, and no way to convert directly.  For binary\n+     floating point modes, convert as signed, then conditionally adjust\n+     the result.  */\n+  if (unsignedp && can_do_signed && !DECIMAL_FLOAT_MODE_P (GET_MODE (to)))\n     {\n       rtx label = gen_label_rtx ();\n       rtx temp;\n@@ -4837,6 +4838,8 @@ static void\n init_floating_libfuncs (optab optable, const char *opname, int suffix)\n {\n   init_libfuncs (optable, MIN_MODE_FLOAT, MAX_MODE_FLOAT, opname, suffix);\n+  init_libfuncs (optable, MIN_MODE_DECIMAL_FLOAT, MAX_MODE_DECIMAL_FLOAT,\n+\t\t opname, suffix);\n }\n \n /* Initialize the libfunc fields of an entire group of entries of an\n@@ -5254,16 +5257,32 @@ init_optabs (void)\n   /* Conversions.  */\n   init_interclass_conv_libfuncs (sfloat_optab, \"float\",\n \t\t\t\t MODE_INT, MODE_FLOAT);\n+  init_interclass_conv_libfuncs (sfloat_optab, \"float\",\n+\t\t\t\t MODE_INT, MODE_DECIMAL_FLOAT);\n   init_interclass_conv_libfuncs (ufloat_optab, \"floatun\",\n \t\t\t\t MODE_INT, MODE_FLOAT);\n+  init_interclass_conv_libfuncs (ufloat_optab, \"floatun\",\n+\t\t\t\t MODE_INT, MODE_DECIMAL_FLOAT);\n   init_interclass_conv_libfuncs (sfix_optab, \"fix\",\n \t\t\t\t MODE_FLOAT, MODE_INT);\n+  init_interclass_conv_libfuncs (sfix_optab, \"fix\",\n+\t\t\t\t MODE_DECIMAL_FLOAT, MODE_INT);\n   init_interclass_conv_libfuncs (ufix_optab, \"fixuns\",\n \t\t\t\t MODE_FLOAT, MODE_INT);\n+  init_interclass_conv_libfuncs (ufix_optab, \"fixuns\",\n+\t\t\t\t MODE_DECIMAL_FLOAT, MODE_INT);\n+  init_interclass_conv_libfuncs (ufloat_optab, \"floatuns\",\n+\t\t\t\t MODE_INT, MODE_DECIMAL_FLOAT);\n \n   /* sext_optab is also used for FLOAT_EXTEND.  */\n   init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, true);\n+  init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_DECIMAL_FLOAT, true);\n+  init_interclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, MODE_DECIMAL_FLOAT);\n+  init_interclass_conv_libfuncs (sext_optab, \"extend\", MODE_DECIMAL_FLOAT, MODE_FLOAT);\n   init_intraclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_FLOAT, false);\n+  init_intraclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_DECIMAL_FLOAT, false);\n+  init_interclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_FLOAT, MODE_DECIMAL_FLOAT);\n+  init_interclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_DECIMAL_FLOAT, MODE_FLOAT);\n \n   /* Use cabs for double complex abs, since systems generally have cabs.\n      Don't define any libcall for float complex, so that cabs will be used.  */"}, {"sha": "c773900c4054140f75c94e826a93a6757a1f82f1", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -640,6 +640,9 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n       break;\n \n     case FLOAT_TRUNCATE:\n+      if (DECIMAL_FLOAT_MODE_P (mode))\n+\tbreak;\n+\n       /* (float_truncate:SF (float_extend:DF foo:SF)) = foo:SF.  */\n       if (GET_CODE (op) == FLOAT_EXTEND\n \t  && GET_MODE (XEXP (op, 0)) == mode)\n@@ -693,6 +696,9 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n       break;\n \n     case FLOAT_EXTEND:\n+      if (DECIMAL_FLOAT_MODE_P (mode))\n+\tbreak;\n+\n       /*  (float_extend (float_extend x)) is (float_extend x)\n \n \t  (float_extend (float x)) is (float x) assuming that double\n@@ -4284,6 +4290,7 @@ simplify_immed_subreg (enum machine_mode outermode, rtx op,\n \t  break;\n       \n \tcase MODE_FLOAT:\n+\tcase MODE_DECIMAL_FLOAT:\n \t  {\n \t    REAL_VALUE_TYPE r;\n \t    long tmp[max_bitsize / 32];"}, {"sha": "7db35673d57546a3a4d2b004f52cbe21afc72031", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -232,6 +232,7 @@ int_mode_for_mode (enum machine_mode mode)\n     case MODE_COMPLEX_INT:\n     case MODE_COMPLEX_FLOAT:\n     case MODE_FLOAT:\n+    case MODE_DECIMAL_FLOAT:\n     case MODE_VECTOR_INT:\n     case MODE_VECTOR_FLOAT:\n       mode = mode_for_size (GET_MODE_BITSIZE (mode), MODE_INT, 0);"}, {"sha": "3a2fe22b116f491e024056944af14c1fe3a0749c", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed7b52cb0be60cd8f845648a265b2cffe4f963/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=15ed7b52cb0be60cd8f845648a265b2cffe4f963", "patch": "@@ -3077,6 +3077,7 @@ output_constant_pool_2 (enum machine_mode mode, rtx x, unsigned int align)\n   switch (GET_MODE_CLASS (mode))\n     {\n     case MODE_FLOAT:\n+    case MODE_DECIMAL_FLOAT:\n       {\n \tREAL_VALUE_TYPE r;\n \t"}]}