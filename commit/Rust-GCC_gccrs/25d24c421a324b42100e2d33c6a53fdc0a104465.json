{"sha": "25d24c421a324b42100e2d33c6a53fdc0a104465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVkMjRjNDIxYTMyNGI0MjEwMGUyZDMzYzZhNTNmZGMwYTEwNDQ2NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-03-27T18:22:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-03-27T18:22:27Z"}, "message": "* doc/xml/manual/io.xml (std.io.objects): Additional markup.\n\nFrom-SVN: r208872", "tree": {"sha": "772a27dfb6e3be15b111262f6b2cddd0295046b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/772a27dfb6e3be15b111262f6b2cddd0295046b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25d24c421a324b42100e2d33c6a53fdc0a104465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d24c421a324b42100e2d33c6a53fdc0a104465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d24c421a324b42100e2d33c6a53fdc0a104465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d24c421a324b42100e2d33c6a53fdc0a104465/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3941b26033f10ba7f65828d600a8ac35dfa16dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3941b26033f10ba7f65828d600a8ac35dfa16dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3941b26033f10ba7f65828d600a8ac35dfa16dc9"}], "stats": {"total": 118, "additions": 74, "deletions": 44}, "files": [{"sha": "11e00a2baee78cccf9ba02b0216cf8f873bd4bac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d24c421a324b42100e2d33c6a53fdc0a104465/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d24c421a324b42100e2d33c6a53fdc0a104465/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=25d24c421a324b42100e2d33c6a53fdc0a104465", "patch": "@@ -1,3 +1,7 @@\n+2014-03-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/io.xml (std.io.objects): Additional markup.\n+\n 2014-03-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60612"}, {"sha": "34e47ea73aa953308dcc2889763ddea3413c478c", "filename": "libstdc++-v3/doc/xml/manual/io.xml", "status": "modified", "additions": 70, "deletions": 44, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d24c421a324b42100e2d33c6a53fdc0a104465/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fio.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d24c421a324b42100e2d33c6a53fdc0a104465/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fio.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fio.xml?ref=25d24c421a324b42100e2d33c6a53fdc0a104465", "patch": "@@ -21,17 +21,21 @@\n \n    <para>To minimize the time you have to wait on the compiler, it's good to\n       only include the headers you really need.  Many people simply include\n-      &lt;iostream&gt; when they don't need to -- and that can <emphasis>penalize\n-      your runtime as well.</emphasis>  Here are some tips on which header to use\n+      <filename class=\"headerfile\">&lt;iostream&gt;</filename> when they don't\n+      need to -- and that can <emphasis>penalize your runtime as well.</emphasis>\n+      Here are some tips on which header to use\n       for which situations, starting with the simplest.\n    </para>\n-   <para><emphasis>&lt;iosfwd&gt;</emphasis> should be included whenever you simply\n-      need the <emphasis>name</emphasis> of an I/O-related class, such as\n-      \"ofstream\" or \"basic_streambuf\".  Like the name\n-      implies, these are forward declarations.  (A word to all you fellow\n-      old school programmers:  trying to forward declare classes like\n-      \"class istream;\" won't work.  Look in the iosfwd header if\n-      you'd like to know why.)  For example,\n+   <para><emphasis><filename class=\"headerfile\">&lt;iosfwd&gt;</filename></emphasis>\n+      should be included whenever you simply need the <emphasis>name</emphasis>\n+      of an I/O-related class, such as \"<classname>ofstream</classname>\" or\n+      \"<classname>basic_streambuf</classname>\".\n+      Like the name implies, these are forward declarations.\n+      (A word to all you fellow old school programmers:\n+      trying to forward declare classes like \"<code>class istream;</code>\"\n+      won't work.\n+      Look in the <filename class=\"headerfile\">&lt;iosfwd&gt;</filename> header\n+      if you'd like to know why.)  For example,\n    </para>\n    <programlisting>\n     #include &lt;iosfwd&gt;\n@@ -44,33 +48,43 @@\n \n     extern std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, MyClass&amp;);\n    </programlisting>\n-   <para><emphasis>&lt;ios&gt;</emphasis> declares the base classes for the entire\n-      I/O stream hierarchy, std::ios_base and std::basic_ios&lt;charT&gt;, the\n-      counting types std::streamoff and std::streamsize, the file\n-      positioning type std::fpos, and the various manipulators like\n-      std::hex, std::fixed, std::noshowbase, and so forth.\n-   </para>\n-   <para>The ios_base class is what holds the format flags, the state flags,\n-      and the functions which change them (setf(), width(), precision(),\n-      etc).  You can also store extra data and register callback functions\n-      through ios_base, but that has been historically underused.  Anything\n+   <para><emphasis><filename class=\"headerfile\">&lt;ios&gt;</filename></emphasis>\n+      declares the base classes for the entire I/O stream hierarchy,\n+      <classname>std::ios_base</classname> and <classname>std::basic_ios&lt;charT&gt;</classname>,\n+      the counting types <type>std::streamoff</type> and <type>std::streamsize</type>,\n+      the file positioning type <type>std::fpos</type>,\n+      and the various manipulators like <function>std::hex</function>,\n+      <function>std::fixed</function>, <function>std::noshowbase</function>,\n+      and so forth.\n+   </para>\n+   <para>The <classname>ios_base</classname> class is what holds the format\n+      flags, the state flags, and the functions which change them\n+      (<function>setf()</function>, <function>width()</function>,\n+      <function>precision()</function>, etc).\n+      You can also store extra data and register callback functions\n+      through <classname>ios_base</classname>, but that has been historically\n+      underused.  Anything\n       which doesn't depend on the type of characters stored is consolidated\n       here.\n    </para>\n-   <para>The template class basic_ios is the highest template class in the\n+   <para>The class template <classname>basic_ios</classname> is the highest\n+      class template in the\n       hierarchy; it is the first one depending on the character type, and\n       holds all general state associated with that type:  the pointer to the\n       polymorphic stream buffer, the facet information, etc.\n    </para>\n-   <para><emphasis>&lt;streambuf&gt;</emphasis> declares the template class\n-      basic_streambuf, and two standard instantiations, streambuf and\n-      wstreambuf.  If you need to work with the vastly useful and capable\n-      stream buffer classes, e.g., to create a new form of storage\n+   <para><emphasis><filename class=\"headerfile\">&lt;streambuf&gt;</filename></emphasis>\n+      declares the class template <classname>basic_streambuf</classname>, and\n+      two standard instantiations, <type>streambuf</type> and\n+      <type>wstreambuf</type>.  If you need to work with the vastly useful and\n+      capable stream buffer classes, e.g., to create a new form of storage\n       transport, this header is the one to include.\n    </para>\n-   <para><emphasis>&lt;istream&gt;</emphasis>/<emphasis>&lt;ostream&gt;</emphasis> are\n-      the headers to include when you are using the &gt;&gt;/&lt;&lt;\n-      interface, or any of the other abstract stream formatting functions.\n+   <para><emphasis><filename class=\"headerfile\">&lt;istream&gt;</filename></emphasis>\n+       and <emphasis><filename class=\"headerfile\">&lt;ostream&gt;</filename></emphasis>\n+       are the headers to include when you are using the overloaded\n+      <code>&gt;&gt;</code> and <code>&lt;&lt;</code> operators,\n+      or any of the other abstract stream formatting functions.\n       For example,\n    </para>\n    <programlisting>\n@@ -81,25 +95,33 @@\n        return os &lt;&lt; c.data1() &lt;&lt; c.data2();\n     }\n    </programlisting>\n-   <para>The std::istream and std::ostream classes are the abstract parents of\n+   <para>The <type>std::istream</type> and <type>std::ostream</type> classes\n+      are the abstract parents of\n       the various concrete implementations.  If you are only using the\n       interfaces, then you only need to use the appropriate interface header.\n    </para>\n-   <para><emphasis>&lt;iomanip&gt;</emphasis> provides \"extractors and inserters\n-      that alter information maintained by class ios_base and its derived\n-      classes,\" such as std::setprecision and std::setw.  If you need\n+   <para><emphasis><filename class=\"headerfile\">&lt;iomanip&gt;</filename></emphasis>\n+      provides \"extractors and inserters that alter information maintained by\n+      class <classname>ios_base</classname> and its derived classes,\"\n+      such as <function>std::setprecision</function> and\n+      <function>std::setw</function>.  If you need\n       to write expressions like <code>os &lt;&lt; setw(3);</code> or\n-      <code>is &gt;&gt; setbase(8);</code>, you must include &lt;iomanip&gt;.\n+      <code>is &gt;&gt; setbase(8);</code>, you must include\n+      <filename class=\"headerfile\">&lt;iomanip&gt;</filename>.\n    </para>\n-   <para><emphasis>&lt;sstream&gt;</emphasis>/<emphasis>&lt;fstream&gt;</emphasis>\n+   <para><emphasis><filename class=\"headerfile\">&lt;sstream&gt;</filename></emphasis>\n+      and <emphasis><filename class=\"headerfile\">&lt;fstream&gt;</filename></emphasis>\n       declare the six stringstream and fstream classes.  As they are the\n-      standard concrete descendants of istream and ostream, you will already\n-      know about them.\n+      standard concrete descendants of <type>istream</type> and <type>ostream</type>,\n+      you will already know about them.\n    </para>\n-   <para>Finally, <emphasis>&lt;iostream&gt;</emphasis> provides the eight standard\n-      global objects (cin, cout, etc).  To do this correctly, this header\n-      also provides the contents of the &lt;istream&gt; and &lt;ostream&gt;\n-      headers, but nothing else.  The contents of this header look like\n+   <para>Finally, <emphasis><filename class=\"headerfile\">&lt;iostream&gt;</filename></emphasis>\n+      provides the eight standard global objects\n+      (<code>cin</code>, <code>cout</code>, etc).  To do this correctly, this\n+      header also provides the contents of the\n+      <filename class=\"headerfile\">&lt;istream&gt;</filename> and\n+      <filename class=\"headerfile\">&lt;ostream&gt;</filename>\n+      headers, but nothing else.  The contents of this header look like:\n    </para>\n    <programlisting>\n     #include &lt;ostream&gt;\n@@ -119,7 +141,8 @@\n       must be initialized before any of your own code uses them; this is\n       guaranteed by the standard.  Like any other global object, they must\n       be initialized once and only once.  This is typically done with a\n-      construct like the one above, and the nested class ios_base::Init is\n+      construct like the one above, and the nested class\n+      <classname>ios_base::Init</classname> is\n       specified in the standard for just this reason.\n    </para>\n    <para>How does it work?  Because the header is included before any of your\n@@ -129,9 +152,10 @@\n       constructor runs, the eight stream objects are set up.\n    </para>\n    <para>The <code>static</code> keyword means that each object file compiled\n-      from a source file containing &lt;iostream&gt; will have its own\n+      from a source file containing\n+      <filename class=\"headerfile\">&lt;iostream&gt;</filename> will have its own\n       private copy of <emphasis>__foo</emphasis>.  There is no specified order\n-      of construction across object files (it's one of those pesky NP\n+      of construction across object files (it's one of those pesky NP complete\n       problems that make life so interesting), so one copy in each object\n       file means that the stream objects are guaranteed to be set up before\n       any of your code which uses them could run, thereby meeting the\n@@ -143,7 +167,9 @@\n       inside a function call, but over several dozen or hundreds of object\n       files, that time can add up.  (It's not in a tight loop, either.)\n    </para>\n-   <para>The lesson?  Only include &lt;iostream&gt; when you need to use one of\n+   <para>The lesson?  Only include\n+      <filename class=\"headerfile\">&lt;iostream&gt;</filename> when you need\n+      to use one of\n       the standard objects in that source file; you'll pay less startup\n       time.  Only include the header files you need to in general; your\n       compile times will go down when there's less parsing work to do.\n@@ -214,7 +240,7 @@\n     }\n    </programlisting>\n    <para>Try it yourself!  More examples can be found in 3.1.x code, in\n-      <code>include/ext/*_filebuf.h</code>, and in this article by James Kanze:\n+      <filename>include/ext/*_filebuf.h</filename>, and in this article by James Kanze:\n       <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://kanze.james.neuf.fr/articles/fltrsbf1.html\">Filtering\n       Streambufs</link>.\n    </para>"}]}