{"sha": "1b9a784a8988c08979949b85fcf9746574a72ae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI5YTc4NGE4OTg4YzA4OTc5OTQ5Yjg1ZmNmOTc0NjU3NGE3MmFlMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2011-02-15T18:36:31Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2011-02-15T18:36:31Z"}, "message": "re PR debug/47106 (-fcompare-debug failure (length) with  -fpartial-inlining -flto -fconserve-stack)\n\nPR debug/47106\nPR debug/47402\n* tree-flow.h (FOR_EACH_REFERENCED_VAR): Add FN argument.\nAdjust all users.  Pass FN to...\n* tree-flow-inline.h (first_referenced_var): ... this.  Add\nfn argument.\n* ipa-struct-reorg.c: Adjust.\n* tree-dfa.c: Adjust.\n* tree-into-ssa.c: Adjust.\n* tree-sra.c: Adjust.\n* tree-ssa-alias.c: Adjust.\n* tree-ssa-live.c: Adjust.\n* tree-ssa.c: Adjust.\n* tree-ssanames.c: Adjust.\n* tree-tailcall.c: Adjust.\n\nFrom-SVN: r170186", "tree": {"sha": "4c404f523327ba8ce7777c7409a24b2940702c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c404f523327ba8ce7777c7409a24b2940702c7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b9a784a8988c08979949b85fcf9746574a72ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9a784a8988c08979949b85fcf9746574a72ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b9a784a8988c08979949b85fcf9746574a72ae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9a784a8988c08979949b85fcf9746574a72ae0/comments", "author": null, "committer": null, "parents": [{"sha": "27c6b08686959f731523cb673db850bfd435795b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c6b08686959f731523cb673db850bfd435795b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c6b08686959f731523cb673db850bfd435795b"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "3eea0bcd9d6a67f597a015f1b00229a867c6325c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -1,3 +1,21 @@\n+2011-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/47106\n+\tPR debug/47402\n+\t* tree-flow.h (FOR_EACH_REFERENCED_VAR): Add FN argument.\n+\tAdjust all users.  Pass FN to...\n+\t* tree-flow-inline.h (first_referenced_var): ... this.  Add\n+\tfn argument.\n+\t* ipa-struct-reorg.c: Adjust.\n+\t* tree-dfa.c: Adjust.\n+\t* tree-into-ssa.c: Adjust.\n+\t* tree-sra.c: Adjust.\n+\t* tree-ssa-alias.c: Adjust.\n+\t* tree-ssa-live.c: Adjust.\n+\t* tree-ssa.c: Adjust.\n+\t* tree-ssanames.c: Adjust.\n+\t* tree-tailcall.c: Adjust.\n+\n 2011-02-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/47106"}, {"sha": "7ab321eee47e26e81087fd385f6b7effdc7d257a", "filename": "gcc/ipa-struct-reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Fipa-struct-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Fipa-struct-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-struct-reorg.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -2712,7 +2712,7 @@ create_new_local_vars (void)\n   new_local_vars = htab_create (num_referenced_vars,\n \t\t\t\tnew_var_hash, new_var_eq, NULL);\n \n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       if (!is_global_var (var))\n \tcreate_new_var (var, new_local_vars);"}, {"sha": "6490c5e87125c3c22b676490ab5428b27d4d433a", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -218,7 +218,7 @@ dump_referenced_vars (FILE *file)\n   fprintf (file, \"\\nReferenced variables in %s: %u\\n\\n\",\n \t   get_name (current_function_decl), (unsigned) num_referenced_vars);\n \n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       fprintf (file, \"Variable: \");\n       dump_variable (file, var);\n@@ -400,7 +400,7 @@ collect_dfa_stats (struct dfa_stats_d *dfa_stats_p ATTRIBUTE_UNUSED)\n   memset ((void *)dfa_stats_p, 0, sizeof (struct dfa_stats_d));\n \n   /* Count all the variable annotations.  */\n-  FOR_EACH_REFERENCED_VAR (var, vi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, vi)\n     if (var_ann (var))\n       dfa_stats_p->num_var_anns++;\n "}, {"sha": "86566101e394467eaf005408eb99b05bc3a00142", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -112,10 +112,10 @@ referenced_var (unsigned int uid)\n    referenced_vars hashtable, and return that variable.  */\n \n static inline tree\n-first_referenced_var (referenced_var_iterator *iter)\n+first_referenced_var (struct function *fn, referenced_var_iterator *iter)\n {\n   return (tree) first_htab_element (&iter->hti,\n-\t\t\t\t    gimple_referenced_vars (cfun));\n+\t\t\t\t    gimple_referenced_vars (fn));\n }\n \n /* Return true if we have hit the end of the referenced variables ITER is"}, {"sha": "14c8827d1c5d0b8cbdd13a589003b90415dc354f", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -314,9 +314,9 @@ typedef struct\n    to the hashtable while using this macro.  Doing so may cause it to behave\n    erratically.  */\n \n-#define FOR_EACH_REFERENCED_VAR(VAR, ITER) \\\n-  for ((VAR) = first_referenced_var (&(ITER)); \\\n-       !end_referenced_vars_p (&(ITER)); \\\n+#define FOR_EACH_REFERENCED_VAR(FN, VAR, ITER)\t\t\\\n+  for ((VAR) = first_referenced_var ((FN), &(ITER));\t\\\n+       !end_referenced_vars_p (&(ITER));\t\t\\\n        (VAR) = next_referenced_var (&(ITER)))\n \n extern tree referenced_var_lookup (struct function *, unsigned int);"}, {"sha": "74386e44411c5a74f13e037b41db50bc4503d1d1", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -1156,7 +1156,7 @@ insert_phi_nodes (bitmap_head *dfs)\n      differences but no UID ordering differences.  */\n \n   vars = BITMAP_ALLOC (NULL);\n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       struct def_blocks_d *def_map;\n \n@@ -1573,7 +1573,7 @@ dump_currdefs (FILE *file)\n   tree var;\n \n   fprintf (file, \"\\n\\nCurrent reaching definitions\\n\\n\");\n-  FOR_EACH_REFERENCED_VAR (var, i)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, i)\n     if (SYMS_TO_RENAME (cfun) == NULL\n \t|| bitmap_bit_p (SYMS_TO_RENAME (cfun), DECL_UID (var)))\n       {\n@@ -2313,7 +2313,7 @@ init_ssa_renamer (void)\n   def_blocks = htab_create (num_referenced_vars, def_blocks_hash,\n                             def_blocks_eq, def_blocks_free);\n \n-  FOR_EACH_REFERENCED_VAR(var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     set_current_def (var, NULL_TREE);\n }\n "}, {"sha": "8ed8771c8069684d2fa78b23269cbc3655013ea3", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -1540,7 +1540,7 @@ find_var_candidates (void)\n   referenced_var_iterator rvi;\n   bool ret = false;\n \n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       if (TREE_CODE (var) != VAR_DECL && TREE_CODE (var) != PARM_DECL)\n         continue;"}, {"sha": "68321d29e2492c7777e16fe60623a8db86106808", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -364,7 +364,7 @@ dump_alias_info (FILE *file)\n \n   fprintf (file, \"Aliased symbols\\n\\n\");\n \n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       if (may_be_aliased (var))\n \tdump_variable (file, var);"}, {"sha": "0441df67b64e4ae2f42e98854700d9eb6de92057", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -705,7 +705,7 @@ remove_unused_locals (void)\n   mark_scope_block_unused (DECL_INITIAL (current_function_decl));\n \n   /* Assume all locals are unused.  */\n-  FOR_EACH_REFERENCED_VAR (t, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, t, rvi)\n     clear_is_used (t);\n \n   /* Walk the CFG marking all referenced symbols.  */\n@@ -821,7 +821,7 @@ remove_unused_locals (void)\n     }\n \n   /* Remove unused variables from REFERENCED_VARs.  */\n-  FOR_EACH_REFERENCED_VAR (t, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, t, rvi)\n     if (!is_global_var (t)\n \t&& TREE_CODE (t) != PARM_DECL\n \t&& TREE_CODE (t) != RESULT_DECL"}, {"sha": "5c9e0d88bf2ed0ef33f25c2d072572313ff3d9b1", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -1157,7 +1157,7 @@ delete_tree_ssa (void)\n   tree var;\n \n   /* Remove annotations from every referenced local variable.  */\n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       if (is_global_var (var))\n \tcontinue;"}, {"sha": "c76dba5ea449d14b70e563b63f1b938ba06dc633", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -340,7 +340,7 @@ release_dead_ssa_names (void)\n \n   /* Current defs point to various dead SSA names that in turn point to\n      eventually dead variables so a bunch of memory is held live.  */\n-  FOR_EACH_REFERENCED_VAR (t, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, t, rvi)\n     set_current_def (t, NULL);\n   /* Now release the freelist.  */\n   for (t = FREE_SSANAMES (cfun); t; t = next)"}, {"sha": "85aa82bc8555d80bb839c8adcabf7383a6852a52", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b9a784a8988c08979949b85fcf9746574a72ae0/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=1b9a784a8988c08979949b85fcf9746574a72ae0", "patch": "@@ -481,7 +481,7 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n \n   /* Make sure the tail invocation of this function does not refer\n      to local variables.  */\n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       if (TREE_CODE (var) != PARM_DECL\n \t  && auto_var_in_fn_p (var, cfun->decl)\n@@ -889,7 +889,7 @@ add_virtual_phis (void)\n      this, we cannot do much better than to rebuild the ssa form for\n      possibly affected virtual ssa names from scratch.  */\n \n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n+  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       if (!is_gimple_reg (var) && gimple_default_def (cfun, var) != NULL_TREE)\n \tmark_sym_for_renaming (var);"}]}