{"sha": "294e72e9acbd0ff15ef5b18895de62cc173464ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0ZTcyZTlhY2JkMGZmMTVlZjViMTg4OTVkZTYyY2MxNzM0NjRjYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-26T15:38:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-26T15:42:31Z"}, "message": "Fix PR target/96607\n\nAfter 15 years trying to find out what can go into the delay slot of\nthe call to __tls_get_addr with the Solaris linker, it's now time to\nconcede defeat and consider it as not to be filled.\n\ngcc/ChangeLog:\n\tPR target/96607\n\t* config/sparc/sparc-protos.h (eligible_for_call_delay): Delete.\n\t* config/sparc/sparc.c (eligible_for_call_delay): Likewise.\n\t* config/sparc/sparc.md (in_call_delay): Likewise.\n\t(tls_delay_slot): New attribute.\n\t(define_delay [call]): Use in_branch_delay.\n\t(tgd_call<P:mode>): Set type to call_no_delay_slot when\n\ttls_delay_slot is false.\n\t(tldm_call<P:mode>): Likewise.", "tree": {"sha": "d8a968d71b7638a2e697876b9eb026b45f61d2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8a968d71b7638a2e697876b9eb026b45f61d2d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294e72e9acbd0ff15ef5b18895de62cc173464ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294e72e9acbd0ff15ef5b18895de62cc173464ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294e72e9acbd0ff15ef5b18895de62cc173464ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294e72e9acbd0ff15ef5b18895de62cc173464ca/comments", "author": null, "committer": null, "parents": [{"sha": "a3ebc13492ff238873f2c6a7a3e51abefec1d052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ebc13492ff238873f2c6a7a3e51abefec1d052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ebc13492ff238873f2c6a7a3e51abefec1d052"}], "stats": {"total": 73, "additions": 19, "deletions": 54}, "files": [{"sha": "5f9999a669ce53b85f81c7c6b6d711458a842dab", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294e72e9acbd0ff15ef5b18895de62cc173464ca/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294e72e9acbd0ff15ef5b18895de62cc173464ca/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=294e72e9acbd0ff15ef5b18895de62cc173464ca", "patch": "@@ -86,7 +86,6 @@ extern int mems_ok_for_ldd_peep (rtx, rtx, rtx);\n extern rtx widen_mem_for_ldd_peep (rtx, rtx, machine_mode);\n extern int empty_delay_slot (rtx_insn *);\n extern int emit_cbcond_nop (rtx_insn *);\n-extern int eligible_for_call_delay (rtx_insn *);\n extern int eligible_for_return_delay (rtx_insn *);\n extern int eligible_for_sibcall_delay (rtx_insn *);\n extern int emit_move_sequence (rtx, machine_mode);"}, {"sha": "02138c5d4788cf891ac3d2973dc852b206614e99", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294e72e9acbd0ff15ef5b18895de62cc173464ca/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294e72e9acbd0ff15ef5b18895de62cc173464ca/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=294e72e9acbd0ff15ef5b18895de62cc173464ca", "patch": "@@ -3949,41 +3949,6 @@ emit_cbcond_nop (rtx_insn *insn)\n   return 1;\n }\n \n-/* Return nonzero if TRIAL can go into the call delay slot.  */\n-\n-int\n-eligible_for_call_delay (rtx_insn *trial)\n-{\n-  rtx pat;\n-\n-  if (get_attr_in_branch_delay (trial) == IN_BRANCH_DELAY_FALSE)\n-    return 0;\n-\n-  /* The only problematic cases are TLS sequences with Sun as/ld.  */\n-  if ((TARGET_GNU_TLS && HAVE_GNU_LD) || !TARGET_TLS)\n-    return 1;\n-\n-  pat = PATTERN (trial);\n-\n-  /* We must reject tgd_add{32|64}, i.e.\n-       (set (reg) (plus (reg) (unspec [(reg) (symbol_ref)] UNSPEC_TLSGD)))\n-     and tldm_add{32|64}, i.e.\n-       (set (reg) (plus (reg) (unspec [(reg) (symbol_ref)] UNSPEC_TLSLDM)))\n-     for Sun as/ld.  */\n-  if (GET_CODE (pat) == SET\n-      && GET_CODE (SET_SRC (pat)) == PLUS)\n-    {\n-      rtx unspec = XEXP (SET_SRC (pat), 1);\n-\n-      if (GET_CODE (unspec) == UNSPEC\n-\t  && (XINT (unspec, 1) == UNSPEC_TLSGD\n-\t      || XINT (unspec, 1) == UNSPEC_TLSLDM))\n-\treturn 0;\n-    }\n-\n-  return 1;\n-}\n-\n /* Return nonzero if TRIAL, an insn, can be combined with a 'restore'\n    instruction.  RETURN_P is true if the v9 variant 'return' is to be\n    considered in the test too."}, {"sha": "edfb6353683d1f7f525d309f3666ede387255e1b", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294e72e9acbd0ff15ef5b18895de62cc173464ca/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294e72e9acbd0ff15ef5b18895de62cc173464ca/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=294e72e9acbd0ff15ef5b18895de62cc173464ca", "patch": "@@ -561,9 +561,9 @@\n    (set_attr \"type\" \"multi\")])\n \n ;; Attributes for branch scheduling\n-(define_attr \"in_call_delay\" \"false,true\"\n-  (symbol_ref \"(eligible_for_call_delay (insn)\n-\t\t? IN_CALL_DELAY_TRUE : IN_CALL_DELAY_FALSE)\"))\n+(define_attr \"tls_delay_slot\" \"false,true\"\n+  (symbol_ref \"((TARGET_GNU_TLS && HAVE_GNU_LD) != 0\n+\t\t? TLS_DELAY_SLOT_TRUE : TLS_DELAY_SLOT_FALSE)\"))\n \n (define_attr \"in_sibcall_delay\" \"false,true\"\n   (symbol_ref \"(eligible_for_sibcall_delay (insn)\n@@ -613,27 +613,24 @@\n \t   (const_string \"true\")\n \t] (const_string \"false\")))\n \n-(define_delay (eq_attr \"type\" \"call\")\n-  [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n-\n (define_delay (eq_attr \"type\" \"sibcall\")\n   [(eq_attr \"in_sibcall_delay\" \"true\") (nil) (nil)])\n \n (define_delay (eq_attr \"type\" \"return\")\n   [(eq_attr \"in_return_delay\" \"true\") (nil) (nil)])\n \n-(define_delay (and (eq_attr \"type\" \"branch\")\n-\t      (not (eq_attr \"branch_type\" \"icc\")))\n-  [(eq_attr \"in_branch_delay\" \"true\") (nil) (eq_attr \"in_branch_delay\" \"true\")])\n-\n-(define_delay (and (eq_attr \"type\" \"branch\")\n-\t      (eq_attr \"branch_type\" \"icc\"))\n-  [(eq_attr \"in_branch_delay\" \"true\") (nil)\n-  (eq_attr \"in_integer_branch_annul_delay\" \"true\")])\n-\n-(define_delay (eq_attr \"type\" \"uncond_branch\")\n+(define_delay (ior (eq_attr \"type\" \"call\") (eq_attr \"type\" \"uncond_branch\"))\n   [(eq_attr \"in_branch_delay\" \"true\") (nil) (nil)])\n \n+(define_delay (and (eq_attr \"type\" \"branch\") (not (eq_attr \"branch_type\" \"icc\")))\n+  [(eq_attr \"in_branch_delay\" \"true\")\n+   (nil)\n+   (eq_attr \"in_branch_delay\" \"true\")])\n+\n+(define_delay (and (eq_attr \"type\" \"branch\") (eq_attr \"branch_type\" \"icc\"))\n+  [(eq_attr \"in_branch_delay\" \"true\")\n+   (nil)\n+   (eq_attr \"in_integer_branch_annul_delay\" \"true\")])\n \n ;; Include SPARC DFA schedulers\n \n@@ -7935,7 +7932,9 @@ visl\")\n    (clobber (reg:P O7_REG))]\n   \"TARGET_TLS\"\n   \"call\\t%a1, %%tgd_call(%a2)%#\"\n-  [(set_attr \"type\" \"call\")])\n+  [(set (attr \"type\") (if_then_else (eq_attr \"tls_delay_slot\" \"true\")\n+                                    (const_string \"call\")\n+                                    (const_string \"call_no_delay_slot\")))])\n \n (define_insn \"tldm_hi22<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n@@ -7966,7 +7965,9 @@ visl\")\n    (clobber (reg:P O7_REG))]\n   \"TARGET_TLS\"\n   \"call\\t%a1, %%tldm_call(%&)%#\"\n-  [(set_attr \"type\" \"call\")])\n+  [(set (attr \"type\") (if_then_else (eq_attr \"tls_delay_slot\" \"true\")\n+                                    (const_string \"call\")\n+                                    (const_string \"call_no_delay_slot\")))])\n \n (define_insn \"tldo_hix22<P:mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")"}]}