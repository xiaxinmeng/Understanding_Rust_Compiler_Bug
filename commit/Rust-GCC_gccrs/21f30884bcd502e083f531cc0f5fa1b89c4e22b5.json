{"sha": "21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFmMzA4ODRiY2Q1MDJlMDgzZjUzMWNjMGY1ZmExYjg5YzRlMjJiNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T09:10:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T09:10:49Z"}, "message": "[multiple changes]\n\n2015-01-06  Vincent Celier  <celier@adacore.com>\n\n\t* a-strsup.adb (Times (Natural;String;Positive)): Raise\n\tLength_Error, not Index_Error, when the result is too long.\n\n2015-01-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-direct.adb (Create_Path): Minor error handling and\n\tperformance improvement.\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.ads, sem_ch12.adb: Minor reformatting.\n\t* exp_ch4.adb (Expand_N_Op_Divide): Generate explicit divide by\n\tzero check for fixed-point case if Backend_Divide_Checks_On_Target\n\tis False.\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case No_Elaboration_Code_All):\n\tDo not set restriction No_Elaboration_Code unless the pragma\n\tappears in the main unit).\n\n2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Is_Regular_With_Clause): Add guard to verify\n\tthat with clause has already been analyzed before checking kind\n\tof with_clause.\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_strm.adb (Build_Elementary_Input_Call): Return base type\n\t(as required by RM).\n\nFrom-SVN: r219228", "tree": {"sha": "196e7768901babec99fe0fa085e406f061166adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/196e7768901babec99fe0fa085e406f061166adf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/comments", "author": null, "committer": null, "parents": [{"sha": "91afcbfd3e01c23efbfb2685fa2ece8bd6b218b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91afcbfd3e01c23efbfb2685fa2ece8bd6b218b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91afcbfd3e01c23efbfb2685fa2ece8bd6b218b8"}], "stats": {"total": 135, "additions": 111, "deletions": 24}, "files": [{"sha": "82e4b1389152088975c20d59dde07560bacac0fe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -1,3 +1,37 @@\n+2015-01-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* a-strsup.adb (Times (Natural;String;Positive)): Raise\n+\tLength_Error, not Index_Error, when the result is too long.\n+\n+2015-01-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-direct.adb (Create_Path): Minor error handling and\n+\tperformance improvement.\n+\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.ads, sem_ch12.adb: Minor reformatting.\n+\t* exp_ch4.adb (Expand_N_Op_Divide): Generate explicit divide by\n+\tzero check for fixed-point case if Backend_Divide_Checks_On_Target\n+\tis False.\n+\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case No_Elaboration_Code_All):\n+\tDo not set restriction No_Elaboration_Code unless the pragma\n+\tappears in the main unit).\n+\n+2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Is_Regular_With_Clause): Add guard to verify\n+\tthat with clause has already been analyzed before checking kind\n+\tof with_clause.\n+\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_strm.adb (Build_Elementary_Input_Call): Return base type\n+\t(as required by RM).\n+\n 2015-01-06  Arnaud Charlet  <charlet@adacore.com>\n \n \t* a-reatim.adb (\"/\"): Add explicit pragma Unsuppress (Division_Check)."}, {"sha": "d28182915b9f5e082c7ca37d790db984acec7447", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -490,18 +490,33 @@ package body Ada.Directories is\n \n                --  No need to create the directory if it already exists\n \n-               if Is_Directory (New_Dir (1 .. Last)) then\n-                  null;\n-\n-               --  It is an error if a file with such a name already exists\n-\n-               elsif Is_Regular_File (New_Dir (1 .. Last)) then\n-                  raise Use_Error with\n-                    \"file \"\"\" & New_Dir (1 .. Last) & \"\"\" already exists\";\n-\n-               else\n-                  Create_Directory\n-                    (New_Directory => New_Dir (1 .. Last), Form => Form);\n+               if not Is_Directory (New_Dir (1 .. Last)) then\n+                  begin\n+                     Create_Directory\n+                       (New_Directory => New_Dir (1 .. Last), Form => Form);\n+\n+                  exception\n+                     when Use_Error =>\n+                        if File_Exists (New_Dir (1 .. Last)) then\n+\n+                           --  A file with such a name already exists. If it is\n+                           --  a directory, then it was apparently just created\n+                           --  by another process or thread, and all is well.\n+                           --  If it is of some other kind, report an error.\n+\n+                           if not Is_Directory (New_Dir (1 .. Last)) then\n+                              raise Use_Error with\n+                                \"file \"\"\" & New_Dir (1 .. Last) &\n+                                  \"\"\" already exists and is not a directory\";\n+                           end if;\n+\n+                        else\n+                           --  Create_Directory failed for some other reason:\n+                           --  propagate the exception.\n+\n+                           raise;\n+                        end if;\n+                  end;\n                end if;\n             end if;\n          end loop;"}, {"sha": "072f728a64b2a3c7043acdf56f2f645ab1e8dfb5", "filename": "gcc/ada/a-strsup.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fa-strsup.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fa-strsup.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strsup.adb?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1842,7 +1842,7 @@ package body Ada.Strings.Superbounded is\n \n    begin\n       if Nlen > Max_Length then\n-         raise Ada.Strings.Index_Error;\n+         raise Ada.Strings.Length_Error;\n \n       else\n          Result.Current_Length := Nlen;"}, {"sha": "24e5e6d9cd83ca2eb2462cbbc3a86a27fd55e33d", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -242,7 +242,7 @@ package Checks is\n    --  flags Do_Division_Check or Do_Overflow_Check is set, then this routine\n    --  ensures that the appropriate checks are made. Note that overflow can\n    --  occur in the signed case for the case of the largest negative number\n-   --  divided by minus one.\n+   --  divided by minus one. This procedure only applies to Integer types.\n \n    procedure Apply_Parameter_Aliasing_Checks\n      (Call : Node_Id;"}, {"sha": "340462cf1f9a2a1f63ba5365f76c4578db9a1766", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -6701,6 +6701,26 @@ package body Exp_Ch4 is\n \n       if Is_Fixed_Point_Type (Typ) then\n \n+         --  Deal with divide-by-zero check if back end cannot handle them\n+         --  and the flag is set indicating that we need such a check. Note\n+         --  that we don't need to bother here with the case of mixed-mode\n+         --  (Right operand an integer type), since these will be rewritten\n+         --  with conversions to a divide with a fixed-point right operand.\n+\n+         if Do_Division_Check (N)\n+           and then not Backend_Divide_Checks_On_Target\n+           and then not Is_Integer_Type (Rtyp)\n+         then\n+            Set_Do_Division_Check (N, False);\n+            Insert_Action (N,\n+              Make_Raise_Constraint_Error (Loc,\n+                Condition =>\n+                  Make_Op_Eq (Loc,\n+                    Left_Opnd  => Duplicate_Subexpr_Move_Checks (Ropnd),\n+                    Right_Opnd => Make_Real_Literal (Loc, Ureal_0)),\n+                  Reason  => CE_Divide_By_Zero));\n+         end if;\n+\n          --  No special processing if Treat_Fixed_As_Integer is set, since\n          --  from a semantic point of view such operations are simply integer\n          --  operations and will be treated that way."}, {"sha": "7186de4afe1881fee924f26d69cd514053b2ee5e", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -642,12 +642,27 @@ package body Exp_Strm is\n          return Res;\n \n       else\n-         return\n-           Unchecked_Convert_To (P_Type,\n-             Make_Function_Call (Loc,\n-               Name => New_Occurrence_Of (RTE (Lib_RE), Loc),\n-               Parameter_Associations => New_List (\n-                 Relocate_Node (Strm))));\n+         Res :=\n+           Make_Function_Call (Loc,\n+             Name => New_Occurrence_Of (RTE (Lib_RE), Loc),\n+             Parameter_Associations => New_List (\n+               Relocate_Node (Strm)));\n+\n+         --  Now convert to the base type if we do not have a biased type. Note\n+         --  that we did not do this in some older versions, and the result was\n+         --  losing some required range checking for the 'Read case.\n+\n+         if not Has_Biased_Representation (P_Type) then\n+            return Unchecked_Convert_To (Base_Type (P_Type), Res);\n+\n+         --  For the biased case, the conversion to the base type loses the\n+         --  biasing, so just convert to Ptype. This is not quite right, and\n+         --  for example may lose a corner case CE test, but it is such a\n+         --  rare case that for now we ignore it ???\n+\n+         else\n+            return Unchecked_Convert_To (P_Type, Res);\n+         end if;\n       end if;\n    end Build_Elementary_Input_Call;\n "}, {"sha": "f482245d019dfcf69a0cc4115be37138f44288e0", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -6494,6 +6494,7 @@ package body Sem_Ch10 is\n          Item := First (Context_Items (Comp_Unit));\n          while Present (Item) loop\n             if Nkind (Item) = N_With_Clause\n+              and then Is_Entity_Name (Name (Item))\n               and then Entity (Name (Item)) = E\n               and then not Private_Present (Item)\n             then"}, {"sha": "7861c4540048b7b8514b33c05704a6fd7f60e691", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -10237,7 +10237,7 @@ package body Sem_Ch12 is\n                --  the enclosing instance is analyzed.\n \n                if Present (Etype (Actual))\n-                  and then Is_Constr_Subt_For_U_Nominal (Etype (Actual))\n+                 and then Is_Constr_Subt_For_U_Nominal (Etype (Actual))\n                then\n                   Freeze_Before (Instantiation_Node, Etype (Actual));\n                else"}, {"sha": "8798fa1e249b6a8b27f72a2c74be04cc4d782815", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f30884bcd502e083f531cc0f5fa1b89c4e22b5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "patch": "@@ -16783,9 +16783,11 @@ package body Sem_Prag is\n \n             Set_No_Elab_Code_All (Current_Sem_Unit);\n \n-            --  Set restriction No_Elaboration_Code\n+            --  Set restriction No_Elaboration_Code if this is the main unit\n \n-            Set_Restriction (No_Elaboration_Code, N);\n+            if Current_Sem_Unit = Main_Unit then\n+               Set_Restriction (No_Elaboration_Code, N);\n+            end if;\n \n             --  If we are in the main unit or in an extended main source unit,\n             --  then we also add it to the configuration restrictions so that"}]}