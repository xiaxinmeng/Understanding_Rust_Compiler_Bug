{"sha": "f5d39c3d74dc91f2faf190114251226cc1f8b433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkMzljM2Q3NGRjOTFmMmZhZjE5MDExNDI1MTIyNmNjMWY4YjQzMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-03-21T12:31:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-03-21T12:31:10Z"}, "message": "re PR other/20564 (gcov default behaviour changed)\n\n\tPR other/20564\n\t* gcov.c (output_lines): Only output function block summary when\n\toutputting branch information.\n\t* doc/gcov.texi: Document format of preamble and additional block\n\tinformation lines.\n\nFrom-SVN: r96788", "tree": {"sha": "b8c8216b7c4c768f8df9ca92f9ef59d19256a99a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8c8216b7c4c768f8df9ca92f9ef59d19256a99a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5d39c3d74dc91f2faf190114251226cc1f8b433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d39c3d74dc91f2faf190114251226cc1f8b433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d39c3d74dc91f2faf190114251226cc1f8b433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d39c3d74dc91f2faf190114251226cc1f8b433/comments", "author": null, "committer": null, "parents": [{"sha": "e1283056b23aa2cc1060abb74c5b42f102780b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1283056b23aa2cc1060abb74c5b42f102780b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1283056b23aa2cc1060abb74c5b42f102780b7b"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "2e947eaed20c20a4e450cb2244dac28b7fdc0b6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d39c3d74dc91f2faf190114251226cc1f8b433/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d39c3d74dc91f2faf190114251226cc1f8b433/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5d39c3d74dc91f2faf190114251226cc1f8b433", "patch": "@@ -1,3 +1,11 @@\n+2005-03-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR other/20564\n+\t* gcov.c (output_lines): Only output function block summary when\n+\toutputting branch information.\n+\t* doc/gcov.texi: Document format of preamble and additional block\n+\tinformation lines.\n+\n 2005-03-21  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* libgcc2.h (LIBGCC2_HAS_SF_MODE): New macro.\n@@ -240,7 +248,6 @@\n \tscale_bbs_frequencies_int.\n \t* tree-ssa-loop-ch.c (copy_loop_headers): Fix profiling info.\n \n->>>>>>> 2.7929\n 2005-03-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r-protos.h: Remove the prototypes for\n@@ -488,6 +495,7 @@\n \t(arc_rodata_string, TARGET_OPTIONS): Delete.\n \t* config/arc/arc.opt: New file.\n \n+>>>>>>> 2.7930\n 2005-03-17  Richard Henderson  <rth@redhat.com>\n \n \t* doc/extend.texi (Weak Pragmas): New section."}, {"sha": "bfe4a3d204e26bfbdb9a54c90653dfe5dc9034a2", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d39c3d74dc91f2faf190114251226cc1f8b433/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d39c3d74dc91f2faf190114251226cc1f8b433/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=f5d39c3d74dc91f2faf190114251226cc1f8b433", "patch": "@@ -207,7 +207,7 @@ option is not supplied, it defaults to the current directory.\n \n @item -u\n @itemx --unconditional-branches\n-When branch counts are given, include those of unconditional branches.\n+When branch probabilities are given, include those of unconditional branches.\n Unconditional branches are normally not interesting.\n \n @end table\n@@ -232,9 +232,27 @@ program source code.  The format is\n \n Additional block information may succeed each line, when requested by\n command line option.  The @var{execution_count} is @samp{-} for lines\n-containing no code and @samp{#####} for lines which were never\n-executed.  Some lines of information at the start have @var{line_number}\n-of zero.\n+containing no code and @samp{#####} for lines which were never executed.\n+Some lines of information at the start have @var{line_number} of zero.\n+\n+The preamble lines are of the form\n+\n+@smallexample\n+-:0:@var{tag}:@var{value}\n+@end smallexample\n+\n+The ordering and number of these preamble lines will be augmented as\n+@command{gcov} development progresses --- do not rely on them remaining\n+unchanged.  Use @var{tag} to locate a particular preamble line.\n+\n+The additional block information is of the form\n+\n+@smallexample\n+@var{tag} @var{information}\n+@end smallexample\n+\n+The @var{information} is human readable, but designed to be simple\n+enough for machine parsing too.\n \n When printing percentages, 0% and 100% are only printed when the values\n are @emph{exactly} 0% and 100% respectively.  Other values which would\n@@ -278,7 +296,6 @@ Here is a sample:\n         -:    1:#include <stdio.h>\n         -:    2:\n         -:    3:int main (void)\n-function main called 1 returned 1 blocks executed 75%\n         1:    4:@{\n         1:    5:  int i, total;\n         -:    6:\n@@ -307,7 +324,6 @@ counts, and the output looks like this:\n         -:    1:#include <stdio.h>\n         -:    2:\n         -:    3:int main (void)\n-function main called 1 returned 1 blocks executed 75%\n         1:    4:@{\n         1:    4-block  0\n         1:    5:  int i, total;\n@@ -390,6 +406,10 @@ call    0 called 1 returned 100%\n         -:   17:@}\n @end smallexample\n \n+For each function, a line is printed showing how many times the function\n+is called, how many times it returns and what percentage of the\n+function's blocks were executed.\n+\n For each basic block, a line is printed after the last line of the basic\n block describing the branch or call that ends the basic block.  There can\n be multiple branches and calls listed for a single source line if there"}, {"sha": "6675a06b60e023928763328aeafe6abcac5e21d7", "filename": "gcc/gcov.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d39c3d74dc91f2faf190114251226cc1f8b433/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d39c3d74dc91f2faf190114251226cc1f8b433/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=f5d39c3d74dc91f2faf190114251226cc1f8b433", "patch": "@@ -1774,7 +1774,7 @@ output_lines (FILE *gcov_file, const source_t *src)\n   const line_t *line;           /* current line info ptr.  */\n   char string[STRING_SIZE];     /* line buffer.  */\n   char const *retval = \"\";\t/* status of source file reading.  */\n-  function_t *fn = src->functions;\n+  function_t *fn = NULL;\n \n   fprintf (gcov_file, \"%9s:%5d:Source:%s\\n\", \"-\", 0, src->name);\n   fprintf (gcov_file, \"%9s:%5d:Graph:%s\\n\", \"-\", 0, bbg_file_name);\n@@ -1803,18 +1803,21 @@ output_lines (FILE *gcov_file, const source_t *src)\n \t}\n     }\n \n+  if (flag_branches)\n+    fn = src->functions;\n+\n   for (line_num = 1, line = &src->lines[line_num];\n        line_num < src->num_lines; line_num++, line++)\n     {\n       for (; fn && fn->line == line_num; fn = fn->line_next)\n \t{\n \t  arc_t *arc = fn->blocks[fn->num_blocks - 1].pred;\n \t  gcov_type return_count = fn->blocks[fn->num_blocks - 1].count;\n-\n+\t  \n \t  for (; arc; arc = arc->pred_next)\n \t    if (arc->fake)\n \t      return_count -= arc->count;\n-\n+\t  \n \t  fprintf (gcov_file, \"function %s\", fn->name);\n \t  fprintf (gcov_file, \" called %s\",\n \t\t   format_gcov (fn->blocks[0].count, 0, -1));"}]}