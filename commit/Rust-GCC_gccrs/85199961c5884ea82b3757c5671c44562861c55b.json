{"sha": "85199961c5884ea82b3757c5671c44562861c55b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUxOTk5NjFjNTg4NGVhODJiMzc1N2M1NjcxYzQ0NTYyODYxYzU1Yg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2005-08-22T03:07:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-08-22T03:07:43Z"}, "message": "re PR target/23485 ([ia64]: Integer dvide by zero doesn't raise a signal)\n\n        PR target/23485\n        * config/ia64/ia64.md (divsi3): Check divide by zero.\n        (udivsi3): Likewise.\n        (divdi3): Likewise.\n        (udivdi3): Likewise.\n\nFrom-SVN: r103331", "tree": {"sha": "d865870607be485dab97dbc468367b0e7cca36a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d865870607be485dab97dbc468367b0e7cca36a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85199961c5884ea82b3757c5671c44562861c55b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85199961c5884ea82b3757c5671c44562861c55b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85199961c5884ea82b3757c5671c44562861c55b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85199961c5884ea82b3757c5671c44562861c55b/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46fa431d519149579d399fc323c68fbc8b085e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fa431d519149579d399fc323c68fbc8b085e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fa431d519149579d399fc323c68fbc8b085e5f"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "ab5bb6a022ed3900dab901aea8cc843d34a7cd42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85199961c5884ea82b3757c5671c44562861c55b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85199961c5884ea82b3757c5671c44562861c55b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85199961c5884ea82b3757c5671c44562861c55b", "patch": "@@ -1,3 +1,11 @@\n+2005-08-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/23485\n+\t* config/ia64/ia64.md (divsi3): Check divide by zero.\n+\t(udivsi3): Likewise.\n+\t(divdi3): Likewise.\n+\t(udivdi3): Likewise.\n+\n 2005-08-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* simplify-rtx.c (simplify_immed_subreg) <case CONST_DOUBLE>: Only clear\n@@ -6,14 +14,14 @@\n 2005-08-21  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \tPR tree-optimization/23433\n-        * tree-chrec.c (chrec_apply): Translate INTEGER_CST to a\n-        REAL_CST when the type is SCALAR_FLOAT_TYPE_P.\n+\t* tree-chrec.c (chrec_apply): Translate INTEGER_CST to a\n+\tREAL_CST when the type is SCALAR_FLOAT_TYPE_P.\n \n 2005-08-21  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \tPR tree-optimization/23434\n-        * tree-ssa-loop-niter.c (proved_non_wrapping_p): Give up when\n-        the iteration bound is not an INTEGER_CST.\n+\t* tree-ssa-loop-niter.c (proved_non_wrapping_p): Give up when\n+\tthe iteration bound is not an INTEGER_CST.\n \n 2005-08-21  Dorit Nuzman  <dorit@il.ibm.com>\n \n@@ -419,7 +427,7 @@\n \t* c-typeck.c (c_finish_loop): Likewise.\n \n 2005-08-16  J\"orn Rennecke <joern.rennecke@st.com>\n-            Richard Shann <rshann@superh.com>\n+\t    Richard Shann <rshann@superh.com>\n \n \tPR middle-end/20396:\n \t* optabs.c (expand_binop): Take TRULY_NOOP_TRUNCATION into account."}, {"sha": "ab546093dbc29fa6b85b6fa25b37f78ef3e80e66", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85199961c5884ea82b3757c5671c44562861c55b/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85199961c5884ea82b3757c5671c44562861c55b/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=85199961c5884ea82b3757c5671c44562861c55b", "patch": "@@ -1896,6 +1896,9 @@\n   twon34 = gen_reg_rtx (XFmode);\n   emit_insn (gen_setf_exp_xf (twon34, twon34_exp));\n \n+  emit_insn (gen_cond_trap (EQ, operands[2], CONST0_RTX (SImode),\n+\t\t\t    CONST1_RTX (SImode)));\n+  \n   emit_insn (gen_divsi3_internal (op0_xf, op1_xf, op2_xf, twon34));\n \n   emit_insn (gen_fix_truncxfdi2_alts (op0_di, op0_xf, const1_rtx));\n@@ -1953,6 +1956,9 @@\n   twon34 = gen_reg_rtx (XFmode);\n   emit_insn (gen_setf_exp_xf (twon34, twon34_exp));\n \n+  emit_insn (gen_cond_trap (EQ, operands[2], CONST0_RTX (SImode),\n+\t\t\t    CONST1_RTX (SImode)));\n+  \n   emit_insn (gen_divsi3_internal (op0_xf, op1_xf, op2_xf, twon34));\n \n   emit_insn (gen_fixuns_truncxfdi2_alts (op0_di, op0_xf, const1_rtx));\n@@ -2311,6 +2317,9 @@\n   op2_xf = gen_reg_rtx (XFmode);\n   expand_float (op2_xf, operands[2], 0);\n \n+  emit_insn (gen_cond_trap (EQ, operands[2], CONST0_RTX (DImode),\n+\t\t\t    CONST1_RTX (DImode)));\n+\n   if (TARGET_INLINE_INT_DIV == INL_MIN_LAT)\n     emit_insn (gen_divdi3_internal_lat (op0_xf, op1_xf, op2_xf));\n   else\n@@ -2357,6 +2366,9 @@\n   op2_xf = gen_reg_rtx (XFmode);\n   expand_float (op2_xf, operands[2], 1);\n \n+  emit_insn (gen_cond_trap (EQ, operands[2], CONST0_RTX (DImode),\n+\t\t\t    CONST1_RTX (DImode)));\n+\n   if (TARGET_INLINE_INT_DIV == INL_MIN_LAT)\n     emit_insn (gen_divdi3_internal_lat (op0_xf, op1_xf, op2_xf));\n   else"}]}