{"sha": "18246c420fd53a12be68b4ddfcfebf1e80056435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyNDZjNDIwZmQ1M2ExMmJlNjhiNGRkZmNmZWJmMWU4MDA1NjQzNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-12-23T17:35:13Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-12-23T17:35:13Z"}, "message": "re PR fortran/77703 (ICE on assignment to pointer function)\n\n2018-12-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77703\n\t* resolve.c (get_temp_from_expr): Use the string length of\n\tconstant character expressions.\n\n2018-12-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77703\n\t* gfortran.dg/ptr_func_assign_5.f08 : New test.\n\nFrom-SVN: r267379", "tree": {"sha": "7712c58d4bd1cef990d916718af0885e33701c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7712c58d4bd1cef990d916718af0885e33701c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18246c420fd53a12be68b4ddfcfebf1e80056435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18246c420fd53a12be68b4ddfcfebf1e80056435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18246c420fd53a12be68b4ddfcfebf1e80056435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18246c420fd53a12be68b4ddfcfebf1e80056435/comments", "author": null, "committer": null, "parents": [{"sha": "b71bbbe2b22460ff9200613784e631496fcfc054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71bbbe2b22460ff9200613784e631496fcfc054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71bbbe2b22460ff9200613784e631496fcfc054"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "a952a8f494883f76ac91234e36876e91bbcd61d6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18246c420fd53a12be68b4ddfcfebf1e80056435/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18246c420fd53a12be68b4ddfcfebf1e80056435/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=18246c420fd53a12be68b4ddfcfebf1e80056435", "patch": "@@ -1,3 +1,9 @@\n+2018-12-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77703\n+\t* resolve.c (get_temp_from_expr): Use the string length of\n+\tconstant character expressions.\n+\n 2018-12-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/88328\n@@ -11,7 +17,7 @@\n \t* decl.c (gfc_match_data): If a component of a derived type entity\n \tappears in data statement, check that does not have the allocatable\n \tattribute.\n- \n+\n 2018-12-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/88169"}, {"sha": "ec8070ffc8daf865cb98b07bac9393d62ad4b6ce", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18246c420fd53a12be68b4ddfcfebf1e80056435/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18246c420fd53a12be68b4ddfcfebf1e80056435/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=18246c420fd53a12be68b4ddfcfebf1e80056435", "patch": "@@ -10637,6 +10637,11 @@ get_temp_from_expr (gfc_expr *e, gfc_namespace *ns)\n   gfc_get_sym_tree (name, ns, &tmp, false);\n   gfc_add_type (tmp->n.sym, &e->ts, NULL);\n \n+  if (e->expr_type == EXPR_CONSTANT && e->ts.type == BT_CHARACTER)\n+    tmp->n.sym->ts.u.cl->length = gfc_get_int_expr (gfc_charlen_int_kind,\n+\t\t\t\t\t\t    NULL,\n+\t\t\t\t\t\t    e->value.character.length);\n+\n   as = NULL;\n   ref = NULL;\n   aref = NULL;"}, {"sha": "a469ec9e689fdd27d3675c2f0e90ede708c64877", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18246c420fd53a12be68b4ddfcfebf1e80056435/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18246c420fd53a12be68b4ddfcfebf1e80056435/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18246c420fd53a12be68b4ddfcfebf1e80056435", "patch": "@@ -1,3 +1,8 @@\n+2018-12-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77703\n+\t* gfortran.dg/ptr_func_assign_5.f08 : New test.\n+\n 2018-12-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/88328"}, {"sha": "9aa19e69b6411f077cf576adb1f1c84832c9c206", "filename": "gcc/testsuite/gfortran.dg/ptr_func_assign_5.f08", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18246c420fd53a12be68b4ddfcfebf1e80056435/gcc%2Ftestsuite%2Fgfortran.dg%2Fptr_func_assign_5.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18246c420fd53a12be68b4ddfcfebf1e80056435/gcc%2Ftestsuite%2Fgfortran.dg%2Fptr_func_assign_5.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fptr_func_assign_5.f08?ref=18246c420fd53a12be68b4ddfcfebf1e80056435", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR77703, in which calls of the pointer function\n+! caused an ICE in 'gfc_trans_auto_character_variable'.\n+!\n+! Contributed by Gerhard Steinmetz  <gerhard.steinmetz.fortran@t-online.de>\n+!\n+module m\n+   implicit none\n+   private\n+   integer, parameter, public :: n = 2\n+   integer, parameter :: ell = 6\n+\n+   character(len=n*ell), target, public :: s\n+\n+   public :: t\n+contains\n+   function t( idx ) result( substr )\n+      integer, intent(in) :: idx\n+      character(len=ell), pointer  :: substr\n+\n+      if ( (idx < 0).or.(idx > n) ) then\n+         error stop\n+      end if\n+      substr => s((idx-1)*ell+1:idx*ell)\n+   end function t\n+end module m\n+\n+program p\n+   use m, only : s, t, n\n+   integer :: i\n+\n+   ! Define 's'\n+   s = \"123456789012\"\n+\n+   ! Then perform operations involving 't'\n+   if (t(1) .ne. \"123456\") stop 1\n+   if (t(2) .ne. \"789012\") stop 2\n+\n+   ! Do the pointer function assignments\n+   t(1) = \"Hello \"\n+   if (s .ne. \"Hello 789012\") Stop 3\n+   t(2) = \"World!\"\n+   if (s .ne. \"Hello World!\") Stop 4\n+end program p"}]}