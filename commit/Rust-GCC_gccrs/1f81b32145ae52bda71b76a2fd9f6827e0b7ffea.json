{"sha": "1f81b32145ae52bda71b76a2fd9f6827e0b7ffea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4MWIzMjE0NWFlNTJiZGE3MWI3NmEyZmQ5ZjY4MjdlMGI3ZmZlYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-08-17T18:57:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-08-17T18:57:03Z"}, "message": "cp-tree.def (TEMPLATE_TEMPLATE_PARM): Remove stale comment.\n\n\t* cp-tree.def (TEMPLATE_TEMPLATE_PARM): Remove stale comment.\n\t* cp-tree.h (ENUM_TEMPLATE_INFO): Delete.\n\t(TYPE_TEMPLATE_INFO): Simplify.\n\t(SET_TYPE_TEMPLATE_INFO): Simplify.\n\nFrom-SVN: r251159", "tree": {"sha": "52e05ab6698912fcbf021e23d2764971763b8005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52e05ab6698912fcbf021e23d2764971763b8005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "3b261d926c7923a3209885ef1e7e3e7bec08b5d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f81b32145ae52bda71b76a2fd9f6827e0b7ffea", "patch": "@@ -1,5 +1,10 @@\n 2017-08-17  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.def (TEMPLATE_TEMPLATE_PARM): Remove stale comment.\n+\t* cp-tree.h (ENUM_TEMPLATE_INFO): Delete.\n+\t(TYPE_TEMPLATE_INFO): Simplify.\n+\t(SET_TYPE_TEMPLATE_INFO): Simplify.\n+\n \t* lex.c (maybe_add_lang_type_raw): BOUND_TEMPLATE_TEMPLATE_PARMs\n \tdon't need lang_type.\n \t(cxx_make_type): Use maybe_add_lang_type_raw return value."}, {"sha": "a46f9c33cb4c7d3424eb6fd9dcf0679131426a7e", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=1f81b32145ae52bda71b76a2fd9f6827e0b7ffea", "patch": "@@ -163,8 +163,7 @@ DEFTREECODE (TEMPLATE_PARM_INDEX, \"template_parm_index\", tcc_exceptional, 0)\n    TEMPLATE_PARM_INDEX.\n \n    It is used without template arguments like TT in C<TT>,\n-   TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO is NULL_TREE\n-   and TYPE_NAME is a TEMPLATE_DECL.  */\n+   TYPE_NAME is a TEMPLATE_DECL.  */\n DEFTREECODE (TEMPLATE_TEMPLATE_PARM, \"template_template_parm\", tcc_type, 0)\n \n /* The ordering of the following codes is optimized for the checking"}, {"sha": "4dd9fc6628fb6a01e3a1024fc723b8aa19ca9844", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f81b32145ae52bda71b76a2fd9f6827e0b7ffea/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1f81b32145ae52bda71b76a2fd9f6827e0b7ffea", "patch": "@@ -473,10 +473,8 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n    TYPE_LANG_SLOT_1\n      For a FUNCTION_TYPE or METHOD_TYPE, this is TYPE_RAISES_EXCEPTIONS.\n      For a POINTER_TYPE (to a METHOD_TYPE), this is TYPE_PTRMEMFUNC_TYPE.\n-     For an ENUMERAL_TYPE, this is ENUM_TEMPLATE_INFO.\n-     For a RECORD_TYPE or UNION_TYPE this is CLASSTYPE_TEMPLATE_INFO,\n-     For a BOUND_TEMPLATE_TEMPLATE_PARM_TYPE this is also\n-     TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO.\n+     For an ENUMERAL_TYPE, BOUND_TEMPLATE_TEMPLATE_PARM_TYPE,\n+     RECORD_TYPE or UNION_TYPE this is TYPE_TEMPLATE_INFO,\n \n   BINFO_VIRTUALS\n      For a binfo, this is a TREE_LIST.  There is an entry for each\n@@ -3280,28 +3278,20 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define CLASSTYPE_TEMPLATE_INFO(NODE) \\\n   (TYPE_LANG_SLOT_1 (RECORD_OR_UNION_CHECK (NODE)))\n \n-/* Template information for an ENUMERAL_TYPE.  Although an enumeration may\n-   not be a primary template, it may be declared within the scope of a\n-   primary template and the enumeration constants may depend on\n-   non-type template parameters.  */\n-#define ENUM_TEMPLATE_INFO(NODE) \\\n-  (TYPE_LANG_SLOT_1 (ENUMERAL_TYPE_CHECK (NODE)))\n-\n /* Template information for a template template parameter.  */\n #define TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO(NODE) \\\n   (TYPE_LANG_SLOT_1 (BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK (NODE)))\n \n /* Template information for an ENUMERAL_, RECORD_, UNION_TYPE, or\n    BOUND_TEMPLATE_TEMPLATE_PARM type.  This ignores any alias\n-   templateness of NODE.  */\n+   templateness of NODE.  It'd be nice if this could unconditionally\n+   access the slot, rather than return NULL if given a\n+   non-templatable type.  */\n #define TYPE_TEMPLATE_INFO(NODE)\t\t\t\t\t\\\n   (TREE_CODE (NODE) == ENUMERAL_TYPE\t\t\t\t\t\\\n-   ? ENUM_TEMPLATE_INFO (NODE)\t\t\t\t\t\t\\\n-   : (TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\t\t\\\n-      ? TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (NODE)\t\t\t\\\n-      : (CLASS_TYPE_P (NODE)\t\t\t\t\t\t\\\n-\t ? CLASSTYPE_TEMPLATE_INFO (NODE)\t\t\t\t\\\n-\t : NULL_TREE)))\n+   || TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\t\t\\\n+   || RECORD_OR_UNION_TYPE_P (NODE)\t\t\t\t\t\\\n+   ? TYPE_LANG_SLOT_1 (NODE) : NULL_TREE)\n \n /* Template information (if any) for an alias type.  */\n #define TYPE_ALIAS_TEMPLATE_INFO(NODE)\t\t\t\t\t\\\n@@ -3321,10 +3311,9 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    UNION_TYPE to VAL.  */\n #define SET_TYPE_TEMPLATE_INFO(NODE, VAL)\t\t\t\t\\\n   (TREE_CODE (NODE) == ENUMERAL_TYPE\t\t\t\t\t\\\n-   ? (ENUM_TEMPLATE_INFO (NODE) = (VAL))\t\t\t\t\\\n-   : ((CLASS_TYPE_P (NODE) && !TYPE_ALIAS_P (NODE))\t\t\t\\\n-      ? (CLASSTYPE_TEMPLATE_INFO (NODE) = (VAL))\t\t\t\\\n-      : (DECL_TEMPLATE_INFO (TYPE_NAME (NODE)) = (VAL))))\n+   || (CLASS_TYPE_P (NODE) && !TYPE_ALIAS_P (NODE))\t\t\t\\\n+   ? (TYPE_LANG_SLOT_1 (NODE) = (VAL))\t\t\t\t\\\n+   : (DECL_TEMPLATE_INFO (TYPE_NAME (NODE)) = (VAL)))\n \n #define TI_TEMPLATE(NODE) TREE_TYPE (TEMPLATE_INFO_CHECK (NODE))\n #define TI_ARGS(NODE) TREE_CHAIN (TEMPLATE_INFO_CHECK (NODE))"}]}